
SPI_TX_RX_ITRUPTS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e28  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08004fd4  08004fd4  00014fd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080050ac  080050ac  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  080050ac  080050ac  000150ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080050b4  080050b4  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080050b4  080050b4  000150b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080050b8  080050b8  000150b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080050bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000128  2000007c  08005138  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001a4  08005138  000201a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f58b  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021af  00000000  00000000  0002f637  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c90  00000000  00000000  000317e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bb8  00000000  00000000  00032478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000296ed  00000000  00000000  00033030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ed23  00000000  00000000  0005c71d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f984b  00000000  00000000  0006b440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00164c8b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003998  00000000  00000000  00164cdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000007c 	.word	0x2000007c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08004fbc 	.word	0x08004fbc

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000080 	.word	0x20000080
 80001e8:	08004fbc 	.word	0x08004fbc

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f4:	f000 faef 	bl	8000ad6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f8:	f000 f820 	bl	800053c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004fc:	f000 f8dc 	bl	80006b8 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000500:	f000 f870 	bl	80005e4 <MX_LPUART1_UART_Init>
  MX_SPI1_Init();
 8000504:	f000 f89a 	bl	800063c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  printf("SPI:SIREIAL PERIFRAL INTERFACE\n");
 8000508:	4807      	ldr	r0, [pc, #28]	; (8000528 <main+0x38>)
 800050a:	f004 f8c7 	bl	800469c <puts>
//{
//	printf("SPI:SIREIAL PERIFRAL INTERFACE\n");
//	printf("recived data is ==%s\n",Rx_data);
//}
//HAL_SPI_TransmitReceive_IT(&hspi1, tx_data, Rx_data, 10);
if(HAL_SPI_TransmitReceive_IT(&hspi1, tx_data, Rx_data, 10)==HAL_OK)
 800050e:	230a      	movs	r3, #10
 8000510:	4a06      	ldr	r2, [pc, #24]	; (800052c <main+0x3c>)
 8000512:	4907      	ldr	r1, [pc, #28]	; (8000530 <main+0x40>)
 8000514:	4807      	ldr	r0, [pc, #28]	; (8000534 <main+0x44>)
 8000516:	f002 fa95 	bl	8002a44 <HAL_SPI_TransmitReceive_IT>
 800051a:	4603      	mov	r3, r0
 800051c:	2b00      	cmp	r3, #0
 800051e:	d102      	bne.n	8000526 <main+0x36>
	{
	printf("intrupt...\n");
 8000520:	4805      	ldr	r0, [pc, #20]	; (8000538 <main+0x48>)
 8000522:	f004 f8bb 	bl	800469c <puts>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000526:	e7fe      	b.n	8000526 <main+0x36>
 8000528:	08004fd4 	.word	0x08004fd4
 800052c:	20000180 	.word	0x20000180
 8000530:	20000000 	.word	0x20000000
 8000534:	2000011c 	.word	0x2000011c
 8000538:	08004ff4 	.word	0x08004ff4

0800053c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b096      	sub	sp, #88	; 0x58
 8000540:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000542:	f107 0314 	add.w	r3, r7, #20
 8000546:	2244      	movs	r2, #68	; 0x44
 8000548:	2100      	movs	r1, #0
 800054a:	4618      	mov	r0, r3
 800054c:	f004 f830 	bl	80045b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000550:	463b      	mov	r3, r7
 8000552:	2200      	movs	r2, #0
 8000554:	601a      	str	r2, [r3, #0]
 8000556:	605a      	str	r2, [r3, #4]
 8000558:	609a      	str	r2, [r3, #8]
 800055a:	60da      	str	r2, [r3, #12]
 800055c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800055e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000562:	f000 fe5d 	bl	8001220 <HAL_PWREx_ControlVoltageScaling>
 8000566:	4603      	mov	r3, r0
 8000568:	2b00      	cmp	r3, #0
 800056a:	d001      	beq.n	8000570 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800056c:	f000 f8bc 	bl	80006e8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000570:	2310      	movs	r3, #16
 8000572:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000574:	2301      	movs	r3, #1
 8000576:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000578:	2300      	movs	r3, #0
 800057a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_9;
 800057c:	2390      	movs	r3, #144	; 0x90
 800057e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000580:	2302      	movs	r3, #2
 8000582:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000584:	2301      	movs	r3, #1
 8000586:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000588:	2305      	movs	r3, #5
 800058a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 71;
 800058c:	2347      	movs	r3, #71	; 0x47
 800058e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000590:	2302      	movs	r3, #2
 8000592:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000594:	2302      	movs	r3, #2
 8000596:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV6;
 8000598:	2306      	movs	r3, #6
 800059a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059c:	f107 0314 	add.w	r3, r7, #20
 80005a0:	4618      	mov	r0, r3
 80005a2:	f000 fea3 	bl	80012ec <HAL_RCC_OscConfig>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80005ac:	f000 f89c 	bl	80006e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b0:	230f      	movs	r3, #15
 80005b2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b4:	2303      	movs	r3, #3
 80005b6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 80005b8:	2390      	movs	r3, #144	; 0x90
 80005ba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c2:	2300      	movs	r3, #0
 80005c4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005c6:	463b      	mov	r3, r7
 80005c8:	2100      	movs	r1, #0
 80005ca:	4618      	mov	r0, r3
 80005cc:	f001 faa8 	bl	8001b20 <HAL_RCC_ClockConfig>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80005d6:	f000 f887 	bl	80006e8 <Error_Handler>
  }
}
 80005da:	bf00      	nop
 80005dc:	3758      	adds	r7, #88	; 0x58
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
	...

080005e4 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80005e8:	4b12      	ldr	r3, [pc, #72]	; (8000634 <MX_LPUART1_UART_Init+0x50>)
 80005ea:	4a13      	ldr	r2, [pc, #76]	; (8000638 <MX_LPUART1_UART_Init+0x54>)
 80005ec:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80005ee:	4b11      	ldr	r3, [pc, #68]	; (8000634 <MX_LPUART1_UART_Init+0x50>)
 80005f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005f4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005f6:	4b0f      	ldr	r3, [pc, #60]	; (8000634 <MX_LPUART1_UART_Init+0x50>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80005fc:	4b0d      	ldr	r3, [pc, #52]	; (8000634 <MX_LPUART1_UART_Init+0x50>)
 80005fe:	2200      	movs	r2, #0
 8000600:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000602:	4b0c      	ldr	r3, [pc, #48]	; (8000634 <MX_LPUART1_UART_Init+0x50>)
 8000604:	2200      	movs	r2, #0
 8000606:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000608:	4b0a      	ldr	r3, [pc, #40]	; (8000634 <MX_LPUART1_UART_Init+0x50>)
 800060a:	220c      	movs	r2, #12
 800060c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800060e:	4b09      	ldr	r3, [pc, #36]	; (8000634 <MX_LPUART1_UART_Init+0x50>)
 8000610:	2200      	movs	r2, #0
 8000612:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000614:	4b07      	ldr	r3, [pc, #28]	; (8000634 <MX_LPUART1_UART_Init+0x50>)
 8000616:	2200      	movs	r2, #0
 8000618:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800061a:	4b06      	ldr	r3, [pc, #24]	; (8000634 <MX_LPUART1_UART_Init+0x50>)
 800061c:	2200      	movs	r2, #0
 800061e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000620:	4804      	ldr	r0, [pc, #16]	; (8000634 <MX_LPUART1_UART_Init+0x50>)
 8000622:	f002 fea3 	bl	800336c <HAL_UART_Init>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 800062c:	f000 f85c 	bl	80006e8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000630:	bf00      	nop
 8000632:	bd80      	pop	{r7, pc}
 8000634:	20000098 	.word	0x20000098
 8000638:	40008000 	.word	0x40008000

0800063c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000640:	4b1b      	ldr	r3, [pc, #108]	; (80006b0 <MX_SPI1_Init+0x74>)
 8000642:	4a1c      	ldr	r2, [pc, #112]	; (80006b4 <MX_SPI1_Init+0x78>)
 8000644:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000646:	4b1a      	ldr	r3, [pc, #104]	; (80006b0 <MX_SPI1_Init+0x74>)
 8000648:	f44f 7282 	mov.w	r2, #260	; 0x104
 800064c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800064e:	4b18      	ldr	r3, [pc, #96]	; (80006b0 <MX_SPI1_Init+0x74>)
 8000650:	2200      	movs	r2, #0
 8000652:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000654:	4b16      	ldr	r3, [pc, #88]	; (80006b0 <MX_SPI1_Init+0x74>)
 8000656:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800065a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800065c:	4b14      	ldr	r3, [pc, #80]	; (80006b0 <MX_SPI1_Init+0x74>)
 800065e:	2200      	movs	r2, #0
 8000660:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000662:	4b13      	ldr	r3, [pc, #76]	; (80006b0 <MX_SPI1_Init+0x74>)
 8000664:	2200      	movs	r2, #0
 8000666:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000668:	4b11      	ldr	r3, [pc, #68]	; (80006b0 <MX_SPI1_Init+0x74>)
 800066a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800066e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000670:	4b0f      	ldr	r3, [pc, #60]	; (80006b0 <MX_SPI1_Init+0x74>)
 8000672:	2200      	movs	r2, #0
 8000674:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000676:	4b0e      	ldr	r3, [pc, #56]	; (80006b0 <MX_SPI1_Init+0x74>)
 8000678:	2200      	movs	r2, #0
 800067a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800067c:	4b0c      	ldr	r3, [pc, #48]	; (80006b0 <MX_SPI1_Init+0x74>)
 800067e:	2200      	movs	r2, #0
 8000680:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000682:	4b0b      	ldr	r3, [pc, #44]	; (80006b0 <MX_SPI1_Init+0x74>)
 8000684:	2200      	movs	r2, #0
 8000686:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000688:	4b09      	ldr	r3, [pc, #36]	; (80006b0 <MX_SPI1_Init+0x74>)
 800068a:	2207      	movs	r2, #7
 800068c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800068e:	4b08      	ldr	r3, [pc, #32]	; (80006b0 <MX_SPI1_Init+0x74>)
 8000690:	2200      	movs	r2, #0
 8000692:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000694:	4b06      	ldr	r3, [pc, #24]	; (80006b0 <MX_SPI1_Init+0x74>)
 8000696:	2208      	movs	r2, #8
 8000698:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800069a:	4805      	ldr	r0, [pc, #20]	; (80006b0 <MX_SPI1_Init+0x74>)
 800069c:	f002 f92e 	bl	80028fc <HAL_SPI_Init>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80006a6:	f000 f81f 	bl	80006e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006aa:	bf00      	nop
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	2000011c 	.word	0x2000011c
 80006b4:	40013000 	.word	0x40013000

080006b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006be:	4b09      	ldr	r3, [pc, #36]	; (80006e4 <MX_GPIO_Init+0x2c>)
 80006c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006c2:	4a08      	ldr	r2, [pc, #32]	; (80006e4 <MX_GPIO_Init+0x2c>)
 80006c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006ca:	4b06      	ldr	r3, [pc, #24]	; (80006e4 <MX_GPIO_Init+0x2c>)
 80006cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006d2:	607b      	str	r3, [r7, #4]
 80006d4:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 80006d6:	f000 fdf9 	bl	80012cc <HAL_PWREx_EnableVddIO2>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006da:	bf00      	nop
 80006dc:	3708      	adds	r7, #8
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	40021000 	.word	0x40021000

080006e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006ec:	b672      	cpsid	i
}
 80006ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006f0:	e7fe      	b.n	80006f0 <Error_Handler+0x8>
	...

080006f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b083      	sub	sp, #12
 80006f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006fa:	4b0f      	ldr	r3, [pc, #60]	; (8000738 <HAL_MspInit+0x44>)
 80006fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006fe:	4a0e      	ldr	r2, [pc, #56]	; (8000738 <HAL_MspInit+0x44>)
 8000700:	f043 0301 	orr.w	r3, r3, #1
 8000704:	6613      	str	r3, [r2, #96]	; 0x60
 8000706:	4b0c      	ldr	r3, [pc, #48]	; (8000738 <HAL_MspInit+0x44>)
 8000708:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800070a:	f003 0301 	and.w	r3, r3, #1
 800070e:	607b      	str	r3, [r7, #4]
 8000710:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000712:	4b09      	ldr	r3, [pc, #36]	; (8000738 <HAL_MspInit+0x44>)
 8000714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000716:	4a08      	ldr	r2, [pc, #32]	; (8000738 <HAL_MspInit+0x44>)
 8000718:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800071c:	6593      	str	r3, [r2, #88]	; 0x58
 800071e:	4b06      	ldr	r3, [pc, #24]	; (8000738 <HAL_MspInit+0x44>)
 8000720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000722:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000726:	603b      	str	r3, [r7, #0]
 8000728:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800072a:	bf00      	nop
 800072c:	370c      	adds	r7, #12
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop
 8000738:	40021000 	.word	0x40021000

0800073c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b0ac      	sub	sp, #176	; 0xb0
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000744:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000748:	2200      	movs	r2, #0
 800074a:	601a      	str	r2, [r3, #0]
 800074c:	605a      	str	r2, [r3, #4]
 800074e:	609a      	str	r2, [r3, #8]
 8000750:	60da      	str	r2, [r3, #12]
 8000752:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000754:	f107 0310 	add.w	r3, r7, #16
 8000758:	228c      	movs	r2, #140	; 0x8c
 800075a:	2100      	movs	r1, #0
 800075c:	4618      	mov	r0, r3
 800075e:	f003 ff27 	bl	80045b0 <memset>
  if(huart->Instance==LPUART1)
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	4a26      	ldr	r2, [pc, #152]	; (8000800 <HAL_UART_MspInit+0xc4>)
 8000768:	4293      	cmp	r3, r2
 800076a:	d145      	bne.n	80007f8 <HAL_UART_MspInit+0xbc>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800076c:	2320      	movs	r3, #32
 800076e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000770:	2300      	movs	r3, #0
 8000772:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000774:	f107 0310 	add.w	r3, r7, #16
 8000778:	4618      	mov	r0, r3
 800077a:	f001 fbf5 	bl	8001f68 <HAL_RCCEx_PeriphCLKConfig>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000784:	f7ff ffb0 	bl	80006e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000788:	4b1e      	ldr	r3, [pc, #120]	; (8000804 <HAL_UART_MspInit+0xc8>)
 800078a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800078c:	4a1d      	ldr	r2, [pc, #116]	; (8000804 <HAL_UART_MspInit+0xc8>)
 800078e:	f043 0301 	orr.w	r3, r3, #1
 8000792:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000794:	4b1b      	ldr	r3, [pc, #108]	; (8000804 <HAL_UART_MspInit+0xc8>)
 8000796:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000798:	f003 0301 	and.w	r3, r3, #1
 800079c:	60fb      	str	r3, [r7, #12]
 800079e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80007a0:	4b18      	ldr	r3, [pc, #96]	; (8000804 <HAL_UART_MspInit+0xc8>)
 80007a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a4:	4a17      	ldr	r2, [pc, #92]	; (8000804 <HAL_UART_MspInit+0xc8>)
 80007a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ac:	4b15      	ldr	r3, [pc, #84]	; (8000804 <HAL_UART_MspInit+0xc8>)
 80007ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007b4:	60bb      	str	r3, [r7, #8]
 80007b6:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 80007b8:	f000 fd88 	bl	80012cc <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80007bc:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80007c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c4:	2302      	movs	r3, #2
 80007c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ca:	2300      	movs	r3, #0
 80007cc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007d0:	2303      	movs	r3, #3
 80007d2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80007d6:	2308      	movs	r3, #8
 80007d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007dc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80007e0:	4619      	mov	r1, r3
 80007e2:	4809      	ldr	r0, [pc, #36]	; (8000808 <HAL_UART_MspInit+0xcc>)
 80007e4:	f000 fb7c 	bl	8000ee0 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 80007e8:	2200      	movs	r2, #0
 80007ea:	2100      	movs	r1, #0
 80007ec:	2046      	movs	r0, #70	; 0x46
 80007ee:	f000 fac2 	bl	8000d76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80007f2:	2046      	movs	r0, #70	; 0x46
 80007f4:	f000 fadb 	bl	8000dae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80007f8:	bf00      	nop
 80007fa:	37b0      	adds	r7, #176	; 0xb0
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	40008000 	.word	0x40008000
 8000804:	40021000 	.word	0x40021000
 8000808:	48001800 	.word	0x48001800

0800080c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b08a      	sub	sp, #40	; 0x28
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000814:	f107 0314 	add.w	r3, r7, #20
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
 800081c:	605a      	str	r2, [r3, #4]
 800081e:	609a      	str	r2, [r3, #8]
 8000820:	60da      	str	r2, [r3, #12]
 8000822:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a1c      	ldr	r2, [pc, #112]	; (800089c <HAL_SPI_MspInit+0x90>)
 800082a:	4293      	cmp	r3, r2
 800082c:	d131      	bne.n	8000892 <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800082e:	4b1c      	ldr	r3, [pc, #112]	; (80008a0 <HAL_SPI_MspInit+0x94>)
 8000830:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000832:	4a1b      	ldr	r2, [pc, #108]	; (80008a0 <HAL_SPI_MspInit+0x94>)
 8000834:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000838:	6613      	str	r3, [r2, #96]	; 0x60
 800083a:	4b19      	ldr	r3, [pc, #100]	; (80008a0 <HAL_SPI_MspInit+0x94>)
 800083c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800083e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000842:	613b      	str	r3, [r7, #16]
 8000844:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000846:	4b16      	ldr	r3, [pc, #88]	; (80008a0 <HAL_SPI_MspInit+0x94>)
 8000848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084a:	4a15      	ldr	r2, [pc, #84]	; (80008a0 <HAL_SPI_MspInit+0x94>)
 800084c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000850:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000852:	4b13      	ldr	r3, [pc, #76]	; (80008a0 <HAL_SPI_MspInit+0x94>)
 8000854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800085a:	60fb      	str	r3, [r7, #12]
 800085c:	68fb      	ldr	r3, [r7, #12]
    HAL_PWREx_EnableVddIO2();
 800085e:	f000 fd35 	bl	80012cc <HAL_PWREx_EnableVddIO2>
    /**SPI1 GPIO Configuration
    PG2     ------> SPI1_SCK
    PG3     ------> SPI1_MISO
    PG4     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8000862:	231c      	movs	r3, #28
 8000864:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000866:	2302      	movs	r3, #2
 8000868:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086a:	2300      	movs	r3, #0
 800086c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800086e:	2303      	movs	r3, #3
 8000870:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000872:	2305      	movs	r3, #5
 8000874:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000876:	f107 0314 	add.w	r3, r7, #20
 800087a:	4619      	mov	r1, r3
 800087c:	4809      	ldr	r0, [pc, #36]	; (80008a4 <HAL_SPI_MspInit+0x98>)
 800087e:	f000 fb2f 	bl	8000ee0 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000882:	2200      	movs	r2, #0
 8000884:	2100      	movs	r1, #0
 8000886:	2023      	movs	r0, #35	; 0x23
 8000888:	f000 fa75 	bl	8000d76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800088c:	2023      	movs	r0, #35	; 0x23
 800088e:	f000 fa8e 	bl	8000dae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000892:	bf00      	nop
 8000894:	3728      	adds	r7, #40	; 0x28
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	40013000 	.word	0x40013000
 80008a0:	40021000 	.word	0x40021000
 80008a4:	48001800 	.word	0x48001800

080008a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008ac:	e7fe      	b.n	80008ac <NMI_Handler+0x4>

080008ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008ae:	b480      	push	{r7}
 80008b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008b2:	e7fe      	b.n	80008b2 <HardFault_Handler+0x4>

080008b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008b8:	e7fe      	b.n	80008b8 <MemManage_Handler+0x4>

080008ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008ba:	b480      	push	{r7}
 80008bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008be:	e7fe      	b.n	80008be <BusFault_Handler+0x4>

080008c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008c4:	e7fe      	b.n	80008c4 <UsageFault_Handler+0x4>

080008c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008c6:	b480      	push	{r7}
 80008c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008ca:	bf00      	nop
 80008cc:	46bd      	mov	sp, r7
 80008ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d2:	4770      	bx	lr

080008d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008d8:	bf00      	nop
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr

080008e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008e2:	b480      	push	{r7}
 80008e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008e6:	bf00      	nop
 80008e8:	46bd      	mov	sp, r7
 80008ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ee:	4770      	bx	lr

080008f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008f4:	f000 f944 	bl	8000b80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008f8:	bf00      	nop
 80008fa:	bd80      	pop	{r7, pc}

080008fc <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000900:	4802      	ldr	r0, [pc, #8]	; (800090c <SPI1_IRQHandler+0x10>)
 8000902:	f002 f94f 	bl	8002ba4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000906:	bf00      	nop
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	2000011c 	.word	0x2000011c

08000910 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8000914:	4802      	ldr	r0, [pc, #8]	; (8000920 <LPUART1_IRQHandler+0x10>)
 8000916:	f002 fe0b 	bl	8003530 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	20000098 	.word	0x20000098

08000924 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b086      	sub	sp, #24
 8000928:	af00      	add	r7, sp, #0
 800092a:	60f8      	str	r0, [r7, #12]
 800092c:	60b9      	str	r1, [r7, #8]
 800092e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000930:	2300      	movs	r3, #0
 8000932:	617b      	str	r3, [r7, #20]
 8000934:	e00a      	b.n	800094c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000936:	f3af 8000 	nop.w
 800093a:	4601      	mov	r1, r0
 800093c:	68bb      	ldr	r3, [r7, #8]
 800093e:	1c5a      	adds	r2, r3, #1
 8000940:	60ba      	str	r2, [r7, #8]
 8000942:	b2ca      	uxtb	r2, r1
 8000944:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000946:	697b      	ldr	r3, [r7, #20]
 8000948:	3301      	adds	r3, #1
 800094a:	617b      	str	r3, [r7, #20]
 800094c:	697a      	ldr	r2, [r7, #20]
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	429a      	cmp	r2, r3
 8000952:	dbf0      	blt.n	8000936 <_read+0x12>
  }

  return len;
 8000954:	687b      	ldr	r3, [r7, #4]
}
 8000956:	4618      	mov	r0, r3
 8000958:	3718      	adds	r7, #24
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
	...

08000960 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b084      	sub	sp, #16
 8000964:	af00      	add	r7, sp, #0
 8000966:	60f8      	str	r0, [r7, #12]
 8000968:	60b9      	str	r1, [r7, #8]
 800096a:	607a      	str	r2, [r7, #4]
//  for (DataIdx = 0; DataIdx < len; DataIdx++)
//  {
//    __io_putchar(*ptr++);
//  }
//  return len;
	HAL_UART_Transmit(&hlpuart1, (uint8_t *)ptr, len,HAL_MAX_DELAY);
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	b29a      	uxth	r2, r3
 8000970:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000974:	68b9      	ldr	r1, [r7, #8]
 8000976:	4804      	ldr	r0, [pc, #16]	; (8000988 <_write+0x28>)
 8000978:	f002 fd46 	bl	8003408 <HAL_UART_Transmit>

							return len;
 800097c:	687b      	ldr	r3, [r7, #4]


}
 800097e:	4618      	mov	r0, r3
 8000980:	3710      	adds	r7, #16
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	20000098 	.word	0x20000098

0800098c <_close>:

int _close(int file)
{
 800098c:	b480      	push	{r7}
 800098e:	b083      	sub	sp, #12
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000994:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000998:	4618      	mov	r0, r3
 800099a:	370c      	adds	r7, #12
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr

080009a4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b083      	sub	sp, #12
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
 80009ac:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009b4:	605a      	str	r2, [r3, #4]
  return 0;
 80009b6:	2300      	movs	r3, #0
}
 80009b8:	4618      	mov	r0, r3
 80009ba:	370c      	adds	r7, #12
 80009bc:	46bd      	mov	sp, r7
 80009be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c2:	4770      	bx	lr

080009c4 <_isatty>:

int _isatty(int file)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80009cc:	2301      	movs	r3, #1
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	370c      	adds	r7, #12
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr

080009da <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009da:	b480      	push	{r7}
 80009dc:	b085      	sub	sp, #20
 80009de:	af00      	add	r7, sp, #0
 80009e0:	60f8      	str	r0, [r7, #12]
 80009e2:	60b9      	str	r1, [r7, #8]
 80009e4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80009e6:	2300      	movs	r3, #0
}
 80009e8:	4618      	mov	r0, r3
 80009ea:	3714      	adds	r7, #20
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr

080009f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b086      	sub	sp, #24
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009fc:	4a14      	ldr	r2, [pc, #80]	; (8000a50 <_sbrk+0x5c>)
 80009fe:	4b15      	ldr	r3, [pc, #84]	; (8000a54 <_sbrk+0x60>)
 8000a00:	1ad3      	subs	r3, r2, r3
 8000a02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a04:	697b      	ldr	r3, [r7, #20]
 8000a06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a08:	4b13      	ldr	r3, [pc, #76]	; (8000a58 <_sbrk+0x64>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d102      	bne.n	8000a16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a10:	4b11      	ldr	r3, [pc, #68]	; (8000a58 <_sbrk+0x64>)
 8000a12:	4a12      	ldr	r2, [pc, #72]	; (8000a5c <_sbrk+0x68>)
 8000a14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a16:	4b10      	ldr	r3, [pc, #64]	; (8000a58 <_sbrk+0x64>)
 8000a18:	681a      	ldr	r2, [r3, #0]
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	4413      	add	r3, r2
 8000a1e:	693a      	ldr	r2, [r7, #16]
 8000a20:	429a      	cmp	r2, r3
 8000a22:	d207      	bcs.n	8000a34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a24:	f003 fd9a 	bl	800455c <__errno>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	220c      	movs	r2, #12
 8000a2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a32:	e009      	b.n	8000a48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a34:	4b08      	ldr	r3, [pc, #32]	; (8000a58 <_sbrk+0x64>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a3a:	4b07      	ldr	r3, [pc, #28]	; (8000a58 <_sbrk+0x64>)
 8000a3c:	681a      	ldr	r2, [r3, #0]
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	4413      	add	r3, r2
 8000a42:	4a05      	ldr	r2, [pc, #20]	; (8000a58 <_sbrk+0x64>)
 8000a44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a46:	68fb      	ldr	r3, [r7, #12]
}
 8000a48:	4618      	mov	r0, r3
 8000a4a:	3718      	adds	r7, #24
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	20050000 	.word	0x20050000
 8000a54:	00000400 	.word	0x00000400
 8000a58:	2000018c 	.word	0x2000018c
 8000a5c:	200001a8 	.word	0x200001a8

08000a60 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a64:	4b06      	ldr	r3, [pc, #24]	; (8000a80 <SystemInit+0x20>)
 8000a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a6a:	4a05      	ldr	r2, [pc, #20]	; (8000a80 <SystemInit+0x20>)
 8000a6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000a74:	bf00      	nop
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	e000ed00 	.word	0xe000ed00

08000a84 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000abc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a88:	f7ff ffea 	bl	8000a60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a8c:	480c      	ldr	r0, [pc, #48]	; (8000ac0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a8e:	490d      	ldr	r1, [pc, #52]	; (8000ac4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a90:	4a0d      	ldr	r2, [pc, #52]	; (8000ac8 <LoopForever+0xe>)
  movs r3, #0
 8000a92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a94:	e002      	b.n	8000a9c <LoopCopyDataInit>

08000a96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a9a:	3304      	adds	r3, #4

08000a9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000aa0:	d3f9      	bcc.n	8000a96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aa2:	4a0a      	ldr	r2, [pc, #40]	; (8000acc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000aa4:	4c0a      	ldr	r4, [pc, #40]	; (8000ad0 <LoopForever+0x16>)
  movs r3, #0
 8000aa6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000aa8:	e001      	b.n	8000aae <LoopFillZerobss>

08000aaa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aaa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000aac:	3204      	adds	r2, #4

08000aae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ab0:	d3fb      	bcc.n	8000aaa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ab2:	f003 fd59 	bl	8004568 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ab6:	f7ff fd1b 	bl	80004f0 <main>

08000aba <LoopForever>:

LoopForever:
    b LoopForever
 8000aba:	e7fe      	b.n	8000aba <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000abc:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000ac0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ac4:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000ac8:	080050bc 	.word	0x080050bc
  ldr r2, =_sbss
 8000acc:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000ad0:	200001a4 	.word	0x200001a4

08000ad4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ad4:	e7fe      	b.n	8000ad4 <ADC1_2_IRQHandler>

08000ad6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ad6:	b580      	push	{r7, lr}
 8000ad8:	b082      	sub	sp, #8
 8000ada:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000adc:	2300      	movs	r3, #0
 8000ade:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ae0:	2003      	movs	r0, #3
 8000ae2:	f000 f93d 	bl	8000d60 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ae6:	2000      	movs	r0, #0
 8000ae8:	f000 f80e 	bl	8000b08 <HAL_InitTick>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d002      	beq.n	8000af8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000af2:	2301      	movs	r3, #1
 8000af4:	71fb      	strb	r3, [r7, #7]
 8000af6:	e001      	b.n	8000afc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000af8:	f7ff fdfc 	bl	80006f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000afc:	79fb      	ldrb	r3, [r7, #7]
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	3708      	adds	r7, #8
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
	...

08000b08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b084      	sub	sp, #16
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b10:	2300      	movs	r3, #0
 8000b12:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b14:	4b17      	ldr	r3, [pc, #92]	; (8000b74 <HAL_InitTick+0x6c>)
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d023      	beq.n	8000b64 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b1c:	4b16      	ldr	r3, [pc, #88]	; (8000b78 <HAL_InitTick+0x70>)
 8000b1e:	681a      	ldr	r2, [r3, #0]
 8000b20:	4b14      	ldr	r3, [pc, #80]	; (8000b74 <HAL_InitTick+0x6c>)
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	4619      	mov	r1, r3
 8000b26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b32:	4618      	mov	r0, r3
 8000b34:	f000 f949 	bl	8000dca <HAL_SYSTICK_Config>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d10f      	bne.n	8000b5e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	2b0f      	cmp	r3, #15
 8000b42:	d809      	bhi.n	8000b58 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b44:	2200      	movs	r2, #0
 8000b46:	6879      	ldr	r1, [r7, #4]
 8000b48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b4c:	f000 f913 	bl	8000d76 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b50:	4a0a      	ldr	r2, [pc, #40]	; (8000b7c <HAL_InitTick+0x74>)
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	6013      	str	r3, [r2, #0]
 8000b56:	e007      	b.n	8000b68 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	73fb      	strb	r3, [r7, #15]
 8000b5c:	e004      	b.n	8000b68 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	73fb      	strb	r3, [r7, #15]
 8000b62:	e001      	b.n	8000b68 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b64:	2301      	movs	r3, #1
 8000b66:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b68:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	3710      	adds	r7, #16
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	20000014 	.word	0x20000014
 8000b78:	2000000c 	.word	0x2000000c
 8000b7c:	20000010 	.word	0x20000010

08000b80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b84:	4b06      	ldr	r3, [pc, #24]	; (8000ba0 <HAL_IncTick+0x20>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	461a      	mov	r2, r3
 8000b8a:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <HAL_IncTick+0x24>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4413      	add	r3, r2
 8000b90:	4a04      	ldr	r2, [pc, #16]	; (8000ba4 <HAL_IncTick+0x24>)
 8000b92:	6013      	str	r3, [r2, #0]
}
 8000b94:	bf00      	nop
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	20000014 	.word	0x20000014
 8000ba4:	20000190 	.word	0x20000190

08000ba8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  return uwTick;
 8000bac:	4b03      	ldr	r3, [pc, #12]	; (8000bbc <HAL_GetTick+0x14>)
 8000bae:	681b      	ldr	r3, [r3, #0]
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	20000190 	.word	0x20000190

08000bc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b085      	sub	sp, #20
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	f003 0307 	and.w	r3, r3, #7
 8000bce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bd0:	4b0c      	ldr	r3, [pc, #48]	; (8000c04 <__NVIC_SetPriorityGrouping+0x44>)
 8000bd2:	68db      	ldr	r3, [r3, #12]
 8000bd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bd6:	68ba      	ldr	r2, [r7, #8]
 8000bd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bdc:	4013      	ands	r3, r2
 8000bde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000be8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bf0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bf2:	4a04      	ldr	r2, [pc, #16]	; (8000c04 <__NVIC_SetPriorityGrouping+0x44>)
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	60d3      	str	r3, [r2, #12]
}
 8000bf8:	bf00      	nop
 8000bfa:	3714      	adds	r7, #20
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr
 8000c04:	e000ed00 	.word	0xe000ed00

08000c08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c0c:	4b04      	ldr	r3, [pc, #16]	; (8000c20 <__NVIC_GetPriorityGrouping+0x18>)
 8000c0e:	68db      	ldr	r3, [r3, #12]
 8000c10:	0a1b      	lsrs	r3, r3, #8
 8000c12:	f003 0307 	and.w	r3, r3, #7
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr
 8000c20:	e000ed00 	.word	0xe000ed00

08000c24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	db0b      	blt.n	8000c4e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c36:	79fb      	ldrb	r3, [r7, #7]
 8000c38:	f003 021f 	and.w	r2, r3, #31
 8000c3c:	4907      	ldr	r1, [pc, #28]	; (8000c5c <__NVIC_EnableIRQ+0x38>)
 8000c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c42:	095b      	lsrs	r3, r3, #5
 8000c44:	2001      	movs	r0, #1
 8000c46:	fa00 f202 	lsl.w	r2, r0, r2
 8000c4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c4e:	bf00      	nop
 8000c50:	370c      	adds	r7, #12
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	e000e100 	.word	0xe000e100

08000c60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	4603      	mov	r3, r0
 8000c68:	6039      	str	r1, [r7, #0]
 8000c6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	db0a      	blt.n	8000c8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	b2da      	uxtb	r2, r3
 8000c78:	490c      	ldr	r1, [pc, #48]	; (8000cac <__NVIC_SetPriority+0x4c>)
 8000c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7e:	0112      	lsls	r2, r2, #4
 8000c80:	b2d2      	uxtb	r2, r2
 8000c82:	440b      	add	r3, r1
 8000c84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c88:	e00a      	b.n	8000ca0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	b2da      	uxtb	r2, r3
 8000c8e:	4908      	ldr	r1, [pc, #32]	; (8000cb0 <__NVIC_SetPriority+0x50>)
 8000c90:	79fb      	ldrb	r3, [r7, #7]
 8000c92:	f003 030f 	and.w	r3, r3, #15
 8000c96:	3b04      	subs	r3, #4
 8000c98:	0112      	lsls	r2, r2, #4
 8000c9a:	b2d2      	uxtb	r2, r2
 8000c9c:	440b      	add	r3, r1
 8000c9e:	761a      	strb	r2, [r3, #24]
}
 8000ca0:	bf00      	nop
 8000ca2:	370c      	adds	r7, #12
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr
 8000cac:	e000e100 	.word	0xe000e100
 8000cb0:	e000ed00 	.word	0xe000ed00

08000cb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b089      	sub	sp, #36	; 0x24
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	60f8      	str	r0, [r7, #12]
 8000cbc:	60b9      	str	r1, [r7, #8]
 8000cbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	f003 0307 	and.w	r3, r3, #7
 8000cc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cc8:	69fb      	ldr	r3, [r7, #28]
 8000cca:	f1c3 0307 	rsb	r3, r3, #7
 8000cce:	2b04      	cmp	r3, #4
 8000cd0:	bf28      	it	cs
 8000cd2:	2304      	movcs	r3, #4
 8000cd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cd6:	69fb      	ldr	r3, [r7, #28]
 8000cd8:	3304      	adds	r3, #4
 8000cda:	2b06      	cmp	r3, #6
 8000cdc:	d902      	bls.n	8000ce4 <NVIC_EncodePriority+0x30>
 8000cde:	69fb      	ldr	r3, [r7, #28]
 8000ce0:	3b03      	subs	r3, #3
 8000ce2:	e000      	b.n	8000ce6 <NVIC_EncodePriority+0x32>
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ce8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000cec:	69bb      	ldr	r3, [r7, #24]
 8000cee:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf2:	43da      	mvns	r2, r3
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	401a      	ands	r2, r3
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cfc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	fa01 f303 	lsl.w	r3, r1, r3
 8000d06:	43d9      	mvns	r1, r3
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d0c:	4313      	orrs	r3, r2
         );
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3724      	adds	r7, #36	; 0x24
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
	...

08000d1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	3b01      	subs	r3, #1
 8000d28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d2c:	d301      	bcc.n	8000d32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d2e:	2301      	movs	r3, #1
 8000d30:	e00f      	b.n	8000d52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d32:	4a0a      	ldr	r2, [pc, #40]	; (8000d5c <SysTick_Config+0x40>)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	3b01      	subs	r3, #1
 8000d38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d3a:	210f      	movs	r1, #15
 8000d3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d40:	f7ff ff8e 	bl	8000c60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d44:	4b05      	ldr	r3, [pc, #20]	; (8000d5c <SysTick_Config+0x40>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d4a:	4b04      	ldr	r3, [pc, #16]	; (8000d5c <SysTick_Config+0x40>)
 8000d4c:	2207      	movs	r2, #7
 8000d4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d50:	2300      	movs	r3, #0
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	e000e010 	.word	0xe000e010

08000d60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d68:	6878      	ldr	r0, [r7, #4]
 8000d6a:	f7ff ff29 	bl	8000bc0 <__NVIC_SetPriorityGrouping>
}
 8000d6e:	bf00      	nop
 8000d70:	3708      	adds	r7, #8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}

08000d76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d76:	b580      	push	{r7, lr}
 8000d78:	b086      	sub	sp, #24
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	60b9      	str	r1, [r7, #8]
 8000d80:	607a      	str	r2, [r7, #4]
 8000d82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d84:	2300      	movs	r3, #0
 8000d86:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d88:	f7ff ff3e 	bl	8000c08 <__NVIC_GetPriorityGrouping>
 8000d8c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d8e:	687a      	ldr	r2, [r7, #4]
 8000d90:	68b9      	ldr	r1, [r7, #8]
 8000d92:	6978      	ldr	r0, [r7, #20]
 8000d94:	f7ff ff8e 	bl	8000cb4 <NVIC_EncodePriority>
 8000d98:	4602      	mov	r2, r0
 8000d9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d9e:	4611      	mov	r1, r2
 8000da0:	4618      	mov	r0, r3
 8000da2:	f7ff ff5d 	bl	8000c60 <__NVIC_SetPriority>
}
 8000da6:	bf00      	nop
 8000da8:	3718      	adds	r7, #24
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}

08000dae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dae:	b580      	push	{r7, lr}
 8000db0:	b082      	sub	sp, #8
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	4603      	mov	r3, r0
 8000db6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000db8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f7ff ff31 	bl	8000c24 <__NVIC_EnableIRQ>
}
 8000dc2:	bf00      	nop
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}

08000dca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	b082      	sub	sp, #8
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dd2:	6878      	ldr	r0, [r7, #4]
 8000dd4:	f7ff ffa2 	bl	8000d1c <SysTick_Config>
 8000dd8:	4603      	mov	r3, r0
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}

08000de2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000de2:	b480      	push	{r7}
 8000de4:	b085      	sub	sp, #20
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000dea:	2300      	movs	r3, #0
 8000dec:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000df4:	b2db      	uxtb	r3, r3
 8000df6:	2b02      	cmp	r3, #2
 8000df8:	d008      	beq.n	8000e0c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	2204      	movs	r2, #4
 8000dfe:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	2200      	movs	r2, #0
 8000e04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	e022      	b.n	8000e52 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f022 020e 	bic.w	r2, r2, #14
 8000e1a:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f022 0201 	bic.w	r2, r2, #1
 8000e2a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e30:	f003 021c 	and.w	r2, r3, #28
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e38:	2101      	movs	r1, #1
 8000e3a:	fa01 f202 	lsl.w	r2, r1, r2
 8000e3e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2201      	movs	r2, #1
 8000e44:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8000e50:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	3714      	adds	r7, #20
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr

08000e5e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	b084      	sub	sp, #16
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e66:	2300      	movs	r3, #0
 8000e68:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000e70:	b2db      	uxtb	r3, r3
 8000e72:	2b02      	cmp	r3, #2
 8000e74:	d005      	beq.n	8000e82 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	2204      	movs	r2, #4
 8000e7a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	73fb      	strb	r3, [r7, #15]
 8000e80:	e029      	b.n	8000ed6 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f022 020e 	bic.w	r2, r2, #14
 8000e90:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f022 0201 	bic.w	r2, r2, #1
 8000ea0:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ea6:	f003 021c 	and.w	r2, r3, #28
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eae:	2101      	movs	r1, #1
 8000eb0:	fa01 f202 	lsl.w	r2, r1, r2
 8000eb4:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2201      	movs	r2, #1
 8000eba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d003      	beq.n	8000ed6 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ed2:	6878      	ldr	r0, [r7, #4]
 8000ed4:	4798      	blx	r3
    }
  }
  return status;
 8000ed6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	3710      	adds	r7, #16
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b087      	sub	sp, #28
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000eea:	2300      	movs	r3, #0
 8000eec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eee:	e166      	b.n	80011be <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	2101      	movs	r1, #1
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	fa01 f303 	lsl.w	r3, r1, r3
 8000efc:	4013      	ands	r3, r2
 8000efe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	f000 8158 	beq.w	80011b8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	f003 0303 	and.w	r3, r3, #3
 8000f10:	2b01      	cmp	r3, #1
 8000f12:	d005      	beq.n	8000f20 <HAL_GPIO_Init+0x40>
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	f003 0303 	and.w	r3, r3, #3
 8000f1c:	2b02      	cmp	r3, #2
 8000f1e:	d130      	bne.n	8000f82 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	689b      	ldr	r3, [r3, #8]
 8000f24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	005b      	lsls	r3, r3, #1
 8000f2a:	2203      	movs	r2, #3
 8000f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f30:	43db      	mvns	r3, r3
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	4013      	ands	r3, r2
 8000f36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	68da      	ldr	r2, [r3, #12]
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	fa02 f303 	lsl.w	r3, r2, r3
 8000f44:	693a      	ldr	r2, [r7, #16]
 8000f46:	4313      	orrs	r3, r2
 8000f48:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	693a      	ldr	r2, [r7, #16]
 8000f4e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f56:	2201      	movs	r2, #1
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5e:	43db      	mvns	r3, r3
 8000f60:	693a      	ldr	r2, [r7, #16]
 8000f62:	4013      	ands	r3, r2
 8000f64:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	091b      	lsrs	r3, r3, #4
 8000f6c:	f003 0201 	and.w	r2, r3, #1
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	fa02 f303 	lsl.w	r3, r2, r3
 8000f76:	693a      	ldr	r2, [r7, #16]
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	693a      	ldr	r2, [r7, #16]
 8000f80:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	f003 0303 	and.w	r3, r3, #3
 8000f8a:	2b03      	cmp	r3, #3
 8000f8c:	d017      	beq.n	8000fbe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	68db      	ldr	r3, [r3, #12]
 8000f92:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	005b      	lsls	r3, r3, #1
 8000f98:	2203      	movs	r2, #3
 8000f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9e:	43db      	mvns	r3, r3
 8000fa0:	693a      	ldr	r2, [r7, #16]
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	689a      	ldr	r2, [r3, #8]
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb2:	693a      	ldr	r2, [r7, #16]
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	693a      	ldr	r2, [r7, #16]
 8000fbc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	f003 0303 	and.w	r3, r3, #3
 8000fc6:	2b02      	cmp	r3, #2
 8000fc8:	d123      	bne.n	8001012 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	08da      	lsrs	r2, r3, #3
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	3208      	adds	r2, #8
 8000fd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fd6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	f003 0307 	and.w	r3, r3, #7
 8000fde:	009b      	lsls	r3, r3, #2
 8000fe0:	220f      	movs	r2, #15
 8000fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe6:	43db      	mvns	r3, r3
 8000fe8:	693a      	ldr	r2, [r7, #16]
 8000fea:	4013      	ands	r3, r2
 8000fec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	691a      	ldr	r2, [r3, #16]
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	f003 0307 	and.w	r3, r3, #7
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	4313      	orrs	r3, r2
 8001002:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	08da      	lsrs	r2, r3, #3
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	3208      	adds	r2, #8
 800100c:	6939      	ldr	r1, [r7, #16]
 800100e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	005b      	lsls	r3, r3, #1
 800101c:	2203      	movs	r2, #3
 800101e:	fa02 f303 	lsl.w	r3, r2, r3
 8001022:	43db      	mvns	r3, r3
 8001024:	693a      	ldr	r2, [r7, #16]
 8001026:	4013      	ands	r3, r2
 8001028:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	f003 0203 	and.w	r2, r3, #3
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	005b      	lsls	r3, r3, #1
 8001036:	fa02 f303 	lsl.w	r3, r2, r3
 800103a:	693a      	ldr	r2, [r7, #16]
 800103c:	4313      	orrs	r3, r2
 800103e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	693a      	ldr	r2, [r7, #16]
 8001044:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800104e:	2b00      	cmp	r3, #0
 8001050:	f000 80b2 	beq.w	80011b8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001054:	4b61      	ldr	r3, [pc, #388]	; (80011dc <HAL_GPIO_Init+0x2fc>)
 8001056:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001058:	4a60      	ldr	r2, [pc, #384]	; (80011dc <HAL_GPIO_Init+0x2fc>)
 800105a:	f043 0301 	orr.w	r3, r3, #1
 800105e:	6613      	str	r3, [r2, #96]	; 0x60
 8001060:	4b5e      	ldr	r3, [pc, #376]	; (80011dc <HAL_GPIO_Init+0x2fc>)
 8001062:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001064:	f003 0301 	and.w	r3, r3, #1
 8001068:	60bb      	str	r3, [r7, #8]
 800106a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800106c:	4a5c      	ldr	r2, [pc, #368]	; (80011e0 <HAL_GPIO_Init+0x300>)
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	089b      	lsrs	r3, r3, #2
 8001072:	3302      	adds	r3, #2
 8001074:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001078:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	f003 0303 	and.w	r3, r3, #3
 8001080:	009b      	lsls	r3, r3, #2
 8001082:	220f      	movs	r2, #15
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	43db      	mvns	r3, r3
 800108a:	693a      	ldr	r2, [r7, #16]
 800108c:	4013      	ands	r3, r2
 800108e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001096:	d02b      	beq.n	80010f0 <HAL_GPIO_Init+0x210>
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	4a52      	ldr	r2, [pc, #328]	; (80011e4 <HAL_GPIO_Init+0x304>)
 800109c:	4293      	cmp	r3, r2
 800109e:	d025      	beq.n	80010ec <HAL_GPIO_Init+0x20c>
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	4a51      	ldr	r2, [pc, #324]	; (80011e8 <HAL_GPIO_Init+0x308>)
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d01f      	beq.n	80010e8 <HAL_GPIO_Init+0x208>
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	4a50      	ldr	r2, [pc, #320]	; (80011ec <HAL_GPIO_Init+0x30c>)
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d019      	beq.n	80010e4 <HAL_GPIO_Init+0x204>
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	4a4f      	ldr	r2, [pc, #316]	; (80011f0 <HAL_GPIO_Init+0x310>)
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d013      	beq.n	80010e0 <HAL_GPIO_Init+0x200>
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	4a4e      	ldr	r2, [pc, #312]	; (80011f4 <HAL_GPIO_Init+0x314>)
 80010bc:	4293      	cmp	r3, r2
 80010be:	d00d      	beq.n	80010dc <HAL_GPIO_Init+0x1fc>
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	4a4d      	ldr	r2, [pc, #308]	; (80011f8 <HAL_GPIO_Init+0x318>)
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d007      	beq.n	80010d8 <HAL_GPIO_Init+0x1f8>
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	4a4c      	ldr	r2, [pc, #304]	; (80011fc <HAL_GPIO_Init+0x31c>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d101      	bne.n	80010d4 <HAL_GPIO_Init+0x1f4>
 80010d0:	2307      	movs	r3, #7
 80010d2:	e00e      	b.n	80010f2 <HAL_GPIO_Init+0x212>
 80010d4:	2308      	movs	r3, #8
 80010d6:	e00c      	b.n	80010f2 <HAL_GPIO_Init+0x212>
 80010d8:	2306      	movs	r3, #6
 80010da:	e00a      	b.n	80010f2 <HAL_GPIO_Init+0x212>
 80010dc:	2305      	movs	r3, #5
 80010de:	e008      	b.n	80010f2 <HAL_GPIO_Init+0x212>
 80010e0:	2304      	movs	r3, #4
 80010e2:	e006      	b.n	80010f2 <HAL_GPIO_Init+0x212>
 80010e4:	2303      	movs	r3, #3
 80010e6:	e004      	b.n	80010f2 <HAL_GPIO_Init+0x212>
 80010e8:	2302      	movs	r3, #2
 80010ea:	e002      	b.n	80010f2 <HAL_GPIO_Init+0x212>
 80010ec:	2301      	movs	r3, #1
 80010ee:	e000      	b.n	80010f2 <HAL_GPIO_Init+0x212>
 80010f0:	2300      	movs	r3, #0
 80010f2:	697a      	ldr	r2, [r7, #20]
 80010f4:	f002 0203 	and.w	r2, r2, #3
 80010f8:	0092      	lsls	r2, r2, #2
 80010fa:	4093      	lsls	r3, r2
 80010fc:	693a      	ldr	r2, [r7, #16]
 80010fe:	4313      	orrs	r3, r2
 8001100:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001102:	4937      	ldr	r1, [pc, #220]	; (80011e0 <HAL_GPIO_Init+0x300>)
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	089b      	lsrs	r3, r3, #2
 8001108:	3302      	adds	r3, #2
 800110a:	693a      	ldr	r2, [r7, #16]
 800110c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001110:	4b3b      	ldr	r3, [pc, #236]	; (8001200 <HAL_GPIO_Init+0x320>)
 8001112:	689b      	ldr	r3, [r3, #8]
 8001114:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	43db      	mvns	r3, r3
 800111a:	693a      	ldr	r2, [r7, #16]
 800111c:	4013      	ands	r3, r2
 800111e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001128:	2b00      	cmp	r3, #0
 800112a:	d003      	beq.n	8001134 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800112c:	693a      	ldr	r2, [r7, #16]
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	4313      	orrs	r3, r2
 8001132:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001134:	4a32      	ldr	r2, [pc, #200]	; (8001200 <HAL_GPIO_Init+0x320>)
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800113a:	4b31      	ldr	r3, [pc, #196]	; (8001200 <HAL_GPIO_Init+0x320>)
 800113c:	68db      	ldr	r3, [r3, #12]
 800113e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	43db      	mvns	r3, r3
 8001144:	693a      	ldr	r2, [r7, #16]
 8001146:	4013      	ands	r3, r2
 8001148:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001152:	2b00      	cmp	r3, #0
 8001154:	d003      	beq.n	800115e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001156:	693a      	ldr	r2, [r7, #16]
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	4313      	orrs	r3, r2
 800115c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800115e:	4a28      	ldr	r2, [pc, #160]	; (8001200 <HAL_GPIO_Init+0x320>)
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001164:	4b26      	ldr	r3, [pc, #152]	; (8001200 <HAL_GPIO_Init+0x320>)
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	43db      	mvns	r3, r3
 800116e:	693a      	ldr	r2, [r7, #16]
 8001170:	4013      	ands	r3, r2
 8001172:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800117c:	2b00      	cmp	r3, #0
 800117e:	d003      	beq.n	8001188 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001180:	693a      	ldr	r2, [r7, #16]
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	4313      	orrs	r3, r2
 8001186:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001188:	4a1d      	ldr	r2, [pc, #116]	; (8001200 <HAL_GPIO_Init+0x320>)
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800118e:	4b1c      	ldr	r3, [pc, #112]	; (8001200 <HAL_GPIO_Init+0x320>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	43db      	mvns	r3, r3
 8001198:	693a      	ldr	r2, [r7, #16]
 800119a:	4013      	ands	r3, r2
 800119c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d003      	beq.n	80011b2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80011aa:	693a      	ldr	r2, [r7, #16]
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	4313      	orrs	r3, r2
 80011b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80011b2:	4a13      	ldr	r2, [pc, #76]	; (8001200 <HAL_GPIO_Init+0x320>)
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	3301      	adds	r3, #1
 80011bc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	fa22 f303 	lsr.w	r3, r2, r3
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	f47f ae91 	bne.w	8000ef0 <HAL_GPIO_Init+0x10>
  }
}
 80011ce:	bf00      	nop
 80011d0:	bf00      	nop
 80011d2:	371c      	adds	r7, #28
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr
 80011dc:	40021000 	.word	0x40021000
 80011e0:	40010000 	.word	0x40010000
 80011e4:	48000400 	.word	0x48000400
 80011e8:	48000800 	.word	0x48000800
 80011ec:	48000c00 	.word	0x48000c00
 80011f0:	48001000 	.word	0x48001000
 80011f4:	48001400 	.word	0x48001400
 80011f8:	48001800 	.word	0x48001800
 80011fc:	48001c00 	.word	0x48001c00
 8001200:	40010400 	.word	0x40010400

08001204 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001208:	4b04      	ldr	r3, [pc, #16]	; (800121c <HAL_PWREx_GetVoltageRange+0x18>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001210:	4618      	mov	r0, r3
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	40007000 	.word	0x40007000

08001220 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001220:	b480      	push	{r7}
 8001222:	b085      	sub	sp, #20
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800122e:	d130      	bne.n	8001292 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001230:	4b23      	ldr	r3, [pc, #140]	; (80012c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001238:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800123c:	d038      	beq.n	80012b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800123e:	4b20      	ldr	r3, [pc, #128]	; (80012c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001246:	4a1e      	ldr	r2, [pc, #120]	; (80012c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001248:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800124c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800124e:	4b1d      	ldr	r3, [pc, #116]	; (80012c4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	2232      	movs	r2, #50	; 0x32
 8001254:	fb02 f303 	mul.w	r3, r2, r3
 8001258:	4a1b      	ldr	r2, [pc, #108]	; (80012c8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800125a:	fba2 2303 	umull	r2, r3, r2, r3
 800125e:	0c9b      	lsrs	r3, r3, #18
 8001260:	3301      	adds	r3, #1
 8001262:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001264:	e002      	b.n	800126c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	3b01      	subs	r3, #1
 800126a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800126c:	4b14      	ldr	r3, [pc, #80]	; (80012c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800126e:	695b      	ldr	r3, [r3, #20]
 8001270:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001274:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001278:	d102      	bne.n	8001280 <HAL_PWREx_ControlVoltageScaling+0x60>
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d1f2      	bne.n	8001266 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001280:	4b0f      	ldr	r3, [pc, #60]	; (80012c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001282:	695b      	ldr	r3, [r3, #20]
 8001284:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001288:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800128c:	d110      	bne.n	80012b0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800128e:	2303      	movs	r3, #3
 8001290:	e00f      	b.n	80012b2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001292:	4b0b      	ldr	r3, [pc, #44]	; (80012c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800129a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800129e:	d007      	beq.n	80012b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80012a0:	4b07      	ldr	r3, [pc, #28]	; (80012c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80012a8:	4a05      	ldr	r2, [pc, #20]	; (80012c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012ae:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80012b0:	2300      	movs	r3, #0
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3714      	adds	r7, #20
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	40007000 	.word	0x40007000
 80012c4:	2000000c 	.word	0x2000000c
 80012c8:	431bde83 	.word	0x431bde83

080012cc <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80012d0:	4b05      	ldr	r3, [pc, #20]	; (80012e8 <HAL_PWREx_EnableVddIO2+0x1c>)
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	4a04      	ldr	r2, [pc, #16]	; (80012e8 <HAL_PWREx_EnableVddIO2+0x1c>)
 80012d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012da:	6053      	str	r3, [r2, #4]
}
 80012dc:	bf00      	nop
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	40007000 	.word	0x40007000

080012ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b088      	sub	sp, #32
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d102      	bne.n	8001300 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	f000 bc08 	b.w	8001b10 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001300:	4b96      	ldr	r3, [pc, #600]	; (800155c <HAL_RCC_OscConfig+0x270>)
 8001302:	689b      	ldr	r3, [r3, #8]
 8001304:	f003 030c 	and.w	r3, r3, #12
 8001308:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800130a:	4b94      	ldr	r3, [pc, #592]	; (800155c <HAL_RCC_OscConfig+0x270>)
 800130c:	68db      	ldr	r3, [r3, #12]
 800130e:	f003 0303 	and.w	r3, r3, #3
 8001312:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f003 0310 	and.w	r3, r3, #16
 800131c:	2b00      	cmp	r3, #0
 800131e:	f000 80e4 	beq.w	80014ea <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001322:	69bb      	ldr	r3, [r7, #24]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d007      	beq.n	8001338 <HAL_RCC_OscConfig+0x4c>
 8001328:	69bb      	ldr	r3, [r7, #24]
 800132a:	2b0c      	cmp	r3, #12
 800132c:	f040 808b 	bne.w	8001446 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	2b01      	cmp	r3, #1
 8001334:	f040 8087 	bne.w	8001446 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001338:	4b88      	ldr	r3, [pc, #544]	; (800155c <HAL_RCC_OscConfig+0x270>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f003 0302 	and.w	r3, r3, #2
 8001340:	2b00      	cmp	r3, #0
 8001342:	d005      	beq.n	8001350 <HAL_RCC_OscConfig+0x64>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	699b      	ldr	r3, [r3, #24]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d101      	bne.n	8001350 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800134c:	2301      	movs	r3, #1
 800134e:	e3df      	b.n	8001b10 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6a1a      	ldr	r2, [r3, #32]
 8001354:	4b81      	ldr	r3, [pc, #516]	; (800155c <HAL_RCC_OscConfig+0x270>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f003 0308 	and.w	r3, r3, #8
 800135c:	2b00      	cmp	r3, #0
 800135e:	d004      	beq.n	800136a <HAL_RCC_OscConfig+0x7e>
 8001360:	4b7e      	ldr	r3, [pc, #504]	; (800155c <HAL_RCC_OscConfig+0x270>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001368:	e005      	b.n	8001376 <HAL_RCC_OscConfig+0x8a>
 800136a:	4b7c      	ldr	r3, [pc, #496]	; (800155c <HAL_RCC_OscConfig+0x270>)
 800136c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001370:	091b      	lsrs	r3, r3, #4
 8001372:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001376:	4293      	cmp	r3, r2
 8001378:	d223      	bcs.n	80013c2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6a1b      	ldr	r3, [r3, #32]
 800137e:	4618      	mov	r0, r3
 8001380:	f000 fd92 	bl	8001ea8 <RCC_SetFlashLatencyFromMSIRange>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	e3c0      	b.n	8001b10 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800138e:	4b73      	ldr	r3, [pc, #460]	; (800155c <HAL_RCC_OscConfig+0x270>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a72      	ldr	r2, [pc, #456]	; (800155c <HAL_RCC_OscConfig+0x270>)
 8001394:	f043 0308 	orr.w	r3, r3, #8
 8001398:	6013      	str	r3, [r2, #0]
 800139a:	4b70      	ldr	r3, [pc, #448]	; (800155c <HAL_RCC_OscConfig+0x270>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6a1b      	ldr	r3, [r3, #32]
 80013a6:	496d      	ldr	r1, [pc, #436]	; (800155c <HAL_RCC_OscConfig+0x270>)
 80013a8:	4313      	orrs	r3, r2
 80013aa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013ac:	4b6b      	ldr	r3, [pc, #428]	; (800155c <HAL_RCC_OscConfig+0x270>)
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	69db      	ldr	r3, [r3, #28]
 80013b8:	021b      	lsls	r3, r3, #8
 80013ba:	4968      	ldr	r1, [pc, #416]	; (800155c <HAL_RCC_OscConfig+0x270>)
 80013bc:	4313      	orrs	r3, r2
 80013be:	604b      	str	r3, [r1, #4]
 80013c0:	e025      	b.n	800140e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013c2:	4b66      	ldr	r3, [pc, #408]	; (800155c <HAL_RCC_OscConfig+0x270>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a65      	ldr	r2, [pc, #404]	; (800155c <HAL_RCC_OscConfig+0x270>)
 80013c8:	f043 0308 	orr.w	r3, r3, #8
 80013cc:	6013      	str	r3, [r2, #0]
 80013ce:	4b63      	ldr	r3, [pc, #396]	; (800155c <HAL_RCC_OscConfig+0x270>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6a1b      	ldr	r3, [r3, #32]
 80013da:	4960      	ldr	r1, [pc, #384]	; (800155c <HAL_RCC_OscConfig+0x270>)
 80013dc:	4313      	orrs	r3, r2
 80013de:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013e0:	4b5e      	ldr	r3, [pc, #376]	; (800155c <HAL_RCC_OscConfig+0x270>)
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	69db      	ldr	r3, [r3, #28]
 80013ec:	021b      	lsls	r3, r3, #8
 80013ee:	495b      	ldr	r1, [pc, #364]	; (800155c <HAL_RCC_OscConfig+0x270>)
 80013f0:	4313      	orrs	r3, r2
 80013f2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80013f4:	69bb      	ldr	r3, [r7, #24]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d109      	bne.n	800140e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6a1b      	ldr	r3, [r3, #32]
 80013fe:	4618      	mov	r0, r3
 8001400:	f000 fd52 	bl	8001ea8 <RCC_SetFlashLatencyFromMSIRange>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e380      	b.n	8001b10 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800140e:	f000 fc87 	bl	8001d20 <HAL_RCC_GetSysClockFreq>
 8001412:	4602      	mov	r2, r0
 8001414:	4b51      	ldr	r3, [pc, #324]	; (800155c <HAL_RCC_OscConfig+0x270>)
 8001416:	689b      	ldr	r3, [r3, #8]
 8001418:	091b      	lsrs	r3, r3, #4
 800141a:	f003 030f 	and.w	r3, r3, #15
 800141e:	4950      	ldr	r1, [pc, #320]	; (8001560 <HAL_RCC_OscConfig+0x274>)
 8001420:	5ccb      	ldrb	r3, [r1, r3]
 8001422:	f003 031f 	and.w	r3, r3, #31
 8001426:	fa22 f303 	lsr.w	r3, r2, r3
 800142a:	4a4e      	ldr	r2, [pc, #312]	; (8001564 <HAL_RCC_OscConfig+0x278>)
 800142c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800142e:	4b4e      	ldr	r3, [pc, #312]	; (8001568 <HAL_RCC_OscConfig+0x27c>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4618      	mov	r0, r3
 8001434:	f7ff fb68 	bl	8000b08 <HAL_InitTick>
 8001438:	4603      	mov	r3, r0
 800143a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800143c:	7bfb      	ldrb	r3, [r7, #15]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d052      	beq.n	80014e8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001442:	7bfb      	ldrb	r3, [r7, #15]
 8001444:	e364      	b.n	8001b10 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	699b      	ldr	r3, [r3, #24]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d032      	beq.n	80014b4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800144e:	4b43      	ldr	r3, [pc, #268]	; (800155c <HAL_RCC_OscConfig+0x270>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a42      	ldr	r2, [pc, #264]	; (800155c <HAL_RCC_OscConfig+0x270>)
 8001454:	f043 0301 	orr.w	r3, r3, #1
 8001458:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800145a:	f7ff fba5 	bl	8000ba8 <HAL_GetTick>
 800145e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001460:	e008      	b.n	8001474 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001462:	f7ff fba1 	bl	8000ba8 <HAL_GetTick>
 8001466:	4602      	mov	r2, r0
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	1ad3      	subs	r3, r2, r3
 800146c:	2b02      	cmp	r3, #2
 800146e:	d901      	bls.n	8001474 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001470:	2303      	movs	r3, #3
 8001472:	e34d      	b.n	8001b10 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001474:	4b39      	ldr	r3, [pc, #228]	; (800155c <HAL_RCC_OscConfig+0x270>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f003 0302 	and.w	r3, r3, #2
 800147c:	2b00      	cmp	r3, #0
 800147e:	d0f0      	beq.n	8001462 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001480:	4b36      	ldr	r3, [pc, #216]	; (800155c <HAL_RCC_OscConfig+0x270>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a35      	ldr	r2, [pc, #212]	; (800155c <HAL_RCC_OscConfig+0x270>)
 8001486:	f043 0308 	orr.w	r3, r3, #8
 800148a:	6013      	str	r3, [r2, #0]
 800148c:	4b33      	ldr	r3, [pc, #204]	; (800155c <HAL_RCC_OscConfig+0x270>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6a1b      	ldr	r3, [r3, #32]
 8001498:	4930      	ldr	r1, [pc, #192]	; (800155c <HAL_RCC_OscConfig+0x270>)
 800149a:	4313      	orrs	r3, r2
 800149c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800149e:	4b2f      	ldr	r3, [pc, #188]	; (800155c <HAL_RCC_OscConfig+0x270>)
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	69db      	ldr	r3, [r3, #28]
 80014aa:	021b      	lsls	r3, r3, #8
 80014ac:	492b      	ldr	r1, [pc, #172]	; (800155c <HAL_RCC_OscConfig+0x270>)
 80014ae:	4313      	orrs	r3, r2
 80014b0:	604b      	str	r3, [r1, #4]
 80014b2:	e01a      	b.n	80014ea <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80014b4:	4b29      	ldr	r3, [pc, #164]	; (800155c <HAL_RCC_OscConfig+0x270>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a28      	ldr	r2, [pc, #160]	; (800155c <HAL_RCC_OscConfig+0x270>)
 80014ba:	f023 0301 	bic.w	r3, r3, #1
 80014be:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80014c0:	f7ff fb72 	bl	8000ba8 <HAL_GetTick>
 80014c4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80014c6:	e008      	b.n	80014da <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014c8:	f7ff fb6e 	bl	8000ba8 <HAL_GetTick>
 80014cc:	4602      	mov	r2, r0
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	2b02      	cmp	r3, #2
 80014d4:	d901      	bls.n	80014da <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80014d6:	2303      	movs	r3, #3
 80014d8:	e31a      	b.n	8001b10 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80014da:	4b20      	ldr	r3, [pc, #128]	; (800155c <HAL_RCC_OscConfig+0x270>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 0302 	and.w	r3, r3, #2
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d1f0      	bne.n	80014c8 <HAL_RCC_OscConfig+0x1dc>
 80014e6:	e000      	b.n	80014ea <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80014e8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 0301 	and.w	r3, r3, #1
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d073      	beq.n	80015de <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80014f6:	69bb      	ldr	r3, [r7, #24]
 80014f8:	2b08      	cmp	r3, #8
 80014fa:	d005      	beq.n	8001508 <HAL_RCC_OscConfig+0x21c>
 80014fc:	69bb      	ldr	r3, [r7, #24]
 80014fe:	2b0c      	cmp	r3, #12
 8001500:	d10e      	bne.n	8001520 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	2b03      	cmp	r3, #3
 8001506:	d10b      	bne.n	8001520 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001508:	4b14      	ldr	r3, [pc, #80]	; (800155c <HAL_RCC_OscConfig+0x270>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001510:	2b00      	cmp	r3, #0
 8001512:	d063      	beq.n	80015dc <HAL_RCC_OscConfig+0x2f0>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d15f      	bne.n	80015dc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800151c:	2301      	movs	r3, #1
 800151e:	e2f7      	b.n	8001b10 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001528:	d106      	bne.n	8001538 <HAL_RCC_OscConfig+0x24c>
 800152a:	4b0c      	ldr	r3, [pc, #48]	; (800155c <HAL_RCC_OscConfig+0x270>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a0b      	ldr	r2, [pc, #44]	; (800155c <HAL_RCC_OscConfig+0x270>)
 8001530:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001534:	6013      	str	r3, [r2, #0]
 8001536:	e025      	b.n	8001584 <HAL_RCC_OscConfig+0x298>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001540:	d114      	bne.n	800156c <HAL_RCC_OscConfig+0x280>
 8001542:	4b06      	ldr	r3, [pc, #24]	; (800155c <HAL_RCC_OscConfig+0x270>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a05      	ldr	r2, [pc, #20]	; (800155c <HAL_RCC_OscConfig+0x270>)
 8001548:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800154c:	6013      	str	r3, [r2, #0]
 800154e:	4b03      	ldr	r3, [pc, #12]	; (800155c <HAL_RCC_OscConfig+0x270>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a02      	ldr	r2, [pc, #8]	; (800155c <HAL_RCC_OscConfig+0x270>)
 8001554:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001558:	6013      	str	r3, [r2, #0]
 800155a:	e013      	b.n	8001584 <HAL_RCC_OscConfig+0x298>
 800155c:	40021000 	.word	0x40021000
 8001560:	08005000 	.word	0x08005000
 8001564:	2000000c 	.word	0x2000000c
 8001568:	20000010 	.word	0x20000010
 800156c:	4ba0      	ldr	r3, [pc, #640]	; (80017f0 <HAL_RCC_OscConfig+0x504>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a9f      	ldr	r2, [pc, #636]	; (80017f0 <HAL_RCC_OscConfig+0x504>)
 8001572:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001576:	6013      	str	r3, [r2, #0]
 8001578:	4b9d      	ldr	r3, [pc, #628]	; (80017f0 <HAL_RCC_OscConfig+0x504>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a9c      	ldr	r2, [pc, #624]	; (80017f0 <HAL_RCC_OscConfig+0x504>)
 800157e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001582:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d013      	beq.n	80015b4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800158c:	f7ff fb0c 	bl	8000ba8 <HAL_GetTick>
 8001590:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001592:	e008      	b.n	80015a6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001594:	f7ff fb08 	bl	8000ba8 <HAL_GetTick>
 8001598:	4602      	mov	r2, r0
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	2b64      	cmp	r3, #100	; 0x64
 80015a0:	d901      	bls.n	80015a6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80015a2:	2303      	movs	r3, #3
 80015a4:	e2b4      	b.n	8001b10 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015a6:	4b92      	ldr	r3, [pc, #584]	; (80017f0 <HAL_RCC_OscConfig+0x504>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d0f0      	beq.n	8001594 <HAL_RCC_OscConfig+0x2a8>
 80015b2:	e014      	b.n	80015de <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015b4:	f7ff faf8 	bl	8000ba8 <HAL_GetTick>
 80015b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015ba:	e008      	b.n	80015ce <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015bc:	f7ff faf4 	bl	8000ba8 <HAL_GetTick>
 80015c0:	4602      	mov	r2, r0
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	2b64      	cmp	r3, #100	; 0x64
 80015c8:	d901      	bls.n	80015ce <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80015ca:	2303      	movs	r3, #3
 80015cc:	e2a0      	b.n	8001b10 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015ce:	4b88      	ldr	r3, [pc, #544]	; (80017f0 <HAL_RCC_OscConfig+0x504>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d1f0      	bne.n	80015bc <HAL_RCC_OscConfig+0x2d0>
 80015da:	e000      	b.n	80015de <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 0302 	and.w	r3, r3, #2
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d060      	beq.n	80016ac <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80015ea:	69bb      	ldr	r3, [r7, #24]
 80015ec:	2b04      	cmp	r3, #4
 80015ee:	d005      	beq.n	80015fc <HAL_RCC_OscConfig+0x310>
 80015f0:	69bb      	ldr	r3, [r7, #24]
 80015f2:	2b0c      	cmp	r3, #12
 80015f4:	d119      	bne.n	800162a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	d116      	bne.n	800162a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015fc:	4b7c      	ldr	r3, [pc, #496]	; (80017f0 <HAL_RCC_OscConfig+0x504>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001604:	2b00      	cmp	r3, #0
 8001606:	d005      	beq.n	8001614 <HAL_RCC_OscConfig+0x328>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d101      	bne.n	8001614 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	e27d      	b.n	8001b10 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001614:	4b76      	ldr	r3, [pc, #472]	; (80017f0 <HAL_RCC_OscConfig+0x504>)
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	691b      	ldr	r3, [r3, #16]
 8001620:	061b      	lsls	r3, r3, #24
 8001622:	4973      	ldr	r1, [pc, #460]	; (80017f0 <HAL_RCC_OscConfig+0x504>)
 8001624:	4313      	orrs	r3, r2
 8001626:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001628:	e040      	b.n	80016ac <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	68db      	ldr	r3, [r3, #12]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d023      	beq.n	800167a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001632:	4b6f      	ldr	r3, [pc, #444]	; (80017f0 <HAL_RCC_OscConfig+0x504>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a6e      	ldr	r2, [pc, #440]	; (80017f0 <HAL_RCC_OscConfig+0x504>)
 8001638:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800163c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800163e:	f7ff fab3 	bl	8000ba8 <HAL_GetTick>
 8001642:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001644:	e008      	b.n	8001658 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001646:	f7ff faaf 	bl	8000ba8 <HAL_GetTick>
 800164a:	4602      	mov	r2, r0
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	2b02      	cmp	r3, #2
 8001652:	d901      	bls.n	8001658 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001654:	2303      	movs	r3, #3
 8001656:	e25b      	b.n	8001b10 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001658:	4b65      	ldr	r3, [pc, #404]	; (80017f0 <HAL_RCC_OscConfig+0x504>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001660:	2b00      	cmp	r3, #0
 8001662:	d0f0      	beq.n	8001646 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001664:	4b62      	ldr	r3, [pc, #392]	; (80017f0 <HAL_RCC_OscConfig+0x504>)
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	691b      	ldr	r3, [r3, #16]
 8001670:	061b      	lsls	r3, r3, #24
 8001672:	495f      	ldr	r1, [pc, #380]	; (80017f0 <HAL_RCC_OscConfig+0x504>)
 8001674:	4313      	orrs	r3, r2
 8001676:	604b      	str	r3, [r1, #4]
 8001678:	e018      	b.n	80016ac <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800167a:	4b5d      	ldr	r3, [pc, #372]	; (80017f0 <HAL_RCC_OscConfig+0x504>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a5c      	ldr	r2, [pc, #368]	; (80017f0 <HAL_RCC_OscConfig+0x504>)
 8001680:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001684:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001686:	f7ff fa8f 	bl	8000ba8 <HAL_GetTick>
 800168a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800168c:	e008      	b.n	80016a0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800168e:	f7ff fa8b 	bl	8000ba8 <HAL_GetTick>
 8001692:	4602      	mov	r2, r0
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	2b02      	cmp	r3, #2
 800169a:	d901      	bls.n	80016a0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800169c:	2303      	movs	r3, #3
 800169e:	e237      	b.n	8001b10 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016a0:	4b53      	ldr	r3, [pc, #332]	; (80017f0 <HAL_RCC_OscConfig+0x504>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d1f0      	bne.n	800168e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f003 0308 	and.w	r3, r3, #8
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d03c      	beq.n	8001732 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	695b      	ldr	r3, [r3, #20]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d01c      	beq.n	80016fa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016c0:	4b4b      	ldr	r3, [pc, #300]	; (80017f0 <HAL_RCC_OscConfig+0x504>)
 80016c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016c6:	4a4a      	ldr	r2, [pc, #296]	; (80017f0 <HAL_RCC_OscConfig+0x504>)
 80016c8:	f043 0301 	orr.w	r3, r3, #1
 80016cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016d0:	f7ff fa6a 	bl	8000ba8 <HAL_GetTick>
 80016d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016d6:	e008      	b.n	80016ea <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016d8:	f7ff fa66 	bl	8000ba8 <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d901      	bls.n	80016ea <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80016e6:	2303      	movs	r3, #3
 80016e8:	e212      	b.n	8001b10 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016ea:	4b41      	ldr	r3, [pc, #260]	; (80017f0 <HAL_RCC_OscConfig+0x504>)
 80016ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016f0:	f003 0302 	and.w	r3, r3, #2
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d0ef      	beq.n	80016d8 <HAL_RCC_OscConfig+0x3ec>
 80016f8:	e01b      	b.n	8001732 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016fa:	4b3d      	ldr	r3, [pc, #244]	; (80017f0 <HAL_RCC_OscConfig+0x504>)
 80016fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001700:	4a3b      	ldr	r2, [pc, #236]	; (80017f0 <HAL_RCC_OscConfig+0x504>)
 8001702:	f023 0301 	bic.w	r3, r3, #1
 8001706:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800170a:	f7ff fa4d 	bl	8000ba8 <HAL_GetTick>
 800170e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001710:	e008      	b.n	8001724 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001712:	f7ff fa49 	bl	8000ba8 <HAL_GetTick>
 8001716:	4602      	mov	r2, r0
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	1ad3      	subs	r3, r2, r3
 800171c:	2b02      	cmp	r3, #2
 800171e:	d901      	bls.n	8001724 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001720:	2303      	movs	r3, #3
 8001722:	e1f5      	b.n	8001b10 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001724:	4b32      	ldr	r3, [pc, #200]	; (80017f0 <HAL_RCC_OscConfig+0x504>)
 8001726:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800172a:	f003 0302 	and.w	r3, r3, #2
 800172e:	2b00      	cmp	r3, #0
 8001730:	d1ef      	bne.n	8001712 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 0304 	and.w	r3, r3, #4
 800173a:	2b00      	cmp	r3, #0
 800173c:	f000 80a6 	beq.w	800188c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001740:	2300      	movs	r3, #0
 8001742:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001744:	4b2a      	ldr	r3, [pc, #168]	; (80017f0 <HAL_RCC_OscConfig+0x504>)
 8001746:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001748:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800174c:	2b00      	cmp	r3, #0
 800174e:	d10d      	bne.n	800176c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001750:	4b27      	ldr	r3, [pc, #156]	; (80017f0 <HAL_RCC_OscConfig+0x504>)
 8001752:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001754:	4a26      	ldr	r2, [pc, #152]	; (80017f0 <HAL_RCC_OscConfig+0x504>)
 8001756:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800175a:	6593      	str	r3, [r2, #88]	; 0x58
 800175c:	4b24      	ldr	r3, [pc, #144]	; (80017f0 <HAL_RCC_OscConfig+0x504>)
 800175e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001760:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001764:	60bb      	str	r3, [r7, #8]
 8001766:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001768:	2301      	movs	r3, #1
 800176a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800176c:	4b21      	ldr	r3, [pc, #132]	; (80017f4 <HAL_RCC_OscConfig+0x508>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001774:	2b00      	cmp	r3, #0
 8001776:	d118      	bne.n	80017aa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001778:	4b1e      	ldr	r3, [pc, #120]	; (80017f4 <HAL_RCC_OscConfig+0x508>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a1d      	ldr	r2, [pc, #116]	; (80017f4 <HAL_RCC_OscConfig+0x508>)
 800177e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001782:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001784:	f7ff fa10 	bl	8000ba8 <HAL_GetTick>
 8001788:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800178a:	e008      	b.n	800179e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800178c:	f7ff fa0c 	bl	8000ba8 <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	2b02      	cmp	r3, #2
 8001798:	d901      	bls.n	800179e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e1b8      	b.n	8001b10 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800179e:	4b15      	ldr	r3, [pc, #84]	; (80017f4 <HAL_RCC_OscConfig+0x508>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d0f0      	beq.n	800178c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d108      	bne.n	80017c4 <HAL_RCC_OscConfig+0x4d8>
 80017b2:	4b0f      	ldr	r3, [pc, #60]	; (80017f0 <HAL_RCC_OscConfig+0x504>)
 80017b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017b8:	4a0d      	ldr	r2, [pc, #52]	; (80017f0 <HAL_RCC_OscConfig+0x504>)
 80017ba:	f043 0301 	orr.w	r3, r3, #1
 80017be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017c2:	e029      	b.n	8001818 <HAL_RCC_OscConfig+0x52c>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	2b05      	cmp	r3, #5
 80017ca:	d115      	bne.n	80017f8 <HAL_RCC_OscConfig+0x50c>
 80017cc:	4b08      	ldr	r3, [pc, #32]	; (80017f0 <HAL_RCC_OscConfig+0x504>)
 80017ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017d2:	4a07      	ldr	r2, [pc, #28]	; (80017f0 <HAL_RCC_OscConfig+0x504>)
 80017d4:	f043 0304 	orr.w	r3, r3, #4
 80017d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017dc:	4b04      	ldr	r3, [pc, #16]	; (80017f0 <HAL_RCC_OscConfig+0x504>)
 80017de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017e2:	4a03      	ldr	r2, [pc, #12]	; (80017f0 <HAL_RCC_OscConfig+0x504>)
 80017e4:	f043 0301 	orr.w	r3, r3, #1
 80017e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017ec:	e014      	b.n	8001818 <HAL_RCC_OscConfig+0x52c>
 80017ee:	bf00      	nop
 80017f0:	40021000 	.word	0x40021000
 80017f4:	40007000 	.word	0x40007000
 80017f8:	4b9d      	ldr	r3, [pc, #628]	; (8001a70 <HAL_RCC_OscConfig+0x784>)
 80017fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017fe:	4a9c      	ldr	r2, [pc, #624]	; (8001a70 <HAL_RCC_OscConfig+0x784>)
 8001800:	f023 0301 	bic.w	r3, r3, #1
 8001804:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001808:	4b99      	ldr	r3, [pc, #612]	; (8001a70 <HAL_RCC_OscConfig+0x784>)
 800180a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800180e:	4a98      	ldr	r2, [pc, #608]	; (8001a70 <HAL_RCC_OscConfig+0x784>)
 8001810:	f023 0304 	bic.w	r3, r3, #4
 8001814:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d016      	beq.n	800184e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001820:	f7ff f9c2 	bl	8000ba8 <HAL_GetTick>
 8001824:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001826:	e00a      	b.n	800183e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001828:	f7ff f9be 	bl	8000ba8 <HAL_GetTick>
 800182c:	4602      	mov	r2, r0
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	f241 3288 	movw	r2, #5000	; 0x1388
 8001836:	4293      	cmp	r3, r2
 8001838:	d901      	bls.n	800183e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800183a:	2303      	movs	r3, #3
 800183c:	e168      	b.n	8001b10 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800183e:	4b8c      	ldr	r3, [pc, #560]	; (8001a70 <HAL_RCC_OscConfig+0x784>)
 8001840:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001844:	f003 0302 	and.w	r3, r3, #2
 8001848:	2b00      	cmp	r3, #0
 800184a:	d0ed      	beq.n	8001828 <HAL_RCC_OscConfig+0x53c>
 800184c:	e015      	b.n	800187a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800184e:	f7ff f9ab 	bl	8000ba8 <HAL_GetTick>
 8001852:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001854:	e00a      	b.n	800186c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001856:	f7ff f9a7 	bl	8000ba8 <HAL_GetTick>
 800185a:	4602      	mov	r2, r0
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	f241 3288 	movw	r2, #5000	; 0x1388
 8001864:	4293      	cmp	r3, r2
 8001866:	d901      	bls.n	800186c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001868:	2303      	movs	r3, #3
 800186a:	e151      	b.n	8001b10 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800186c:	4b80      	ldr	r3, [pc, #512]	; (8001a70 <HAL_RCC_OscConfig+0x784>)
 800186e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001872:	f003 0302 	and.w	r3, r3, #2
 8001876:	2b00      	cmp	r3, #0
 8001878:	d1ed      	bne.n	8001856 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800187a:	7ffb      	ldrb	r3, [r7, #31]
 800187c:	2b01      	cmp	r3, #1
 800187e:	d105      	bne.n	800188c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001880:	4b7b      	ldr	r3, [pc, #492]	; (8001a70 <HAL_RCC_OscConfig+0x784>)
 8001882:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001884:	4a7a      	ldr	r2, [pc, #488]	; (8001a70 <HAL_RCC_OscConfig+0x784>)
 8001886:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800188a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 0320 	and.w	r3, r3, #32
 8001894:	2b00      	cmp	r3, #0
 8001896:	d03c      	beq.n	8001912 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800189c:	2b00      	cmp	r3, #0
 800189e:	d01c      	beq.n	80018da <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80018a0:	4b73      	ldr	r3, [pc, #460]	; (8001a70 <HAL_RCC_OscConfig+0x784>)
 80018a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80018a6:	4a72      	ldr	r2, [pc, #456]	; (8001a70 <HAL_RCC_OscConfig+0x784>)
 80018a8:	f043 0301 	orr.w	r3, r3, #1
 80018ac:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018b0:	f7ff f97a 	bl	8000ba8 <HAL_GetTick>
 80018b4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80018b6:	e008      	b.n	80018ca <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80018b8:	f7ff f976 	bl	8000ba8 <HAL_GetTick>
 80018bc:	4602      	mov	r2, r0
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d901      	bls.n	80018ca <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80018c6:	2303      	movs	r3, #3
 80018c8:	e122      	b.n	8001b10 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80018ca:	4b69      	ldr	r3, [pc, #420]	; (8001a70 <HAL_RCC_OscConfig+0x784>)
 80018cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80018d0:	f003 0302 	and.w	r3, r3, #2
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d0ef      	beq.n	80018b8 <HAL_RCC_OscConfig+0x5cc>
 80018d8:	e01b      	b.n	8001912 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80018da:	4b65      	ldr	r3, [pc, #404]	; (8001a70 <HAL_RCC_OscConfig+0x784>)
 80018dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80018e0:	4a63      	ldr	r2, [pc, #396]	; (8001a70 <HAL_RCC_OscConfig+0x784>)
 80018e2:	f023 0301 	bic.w	r3, r3, #1
 80018e6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018ea:	f7ff f95d 	bl	8000ba8 <HAL_GetTick>
 80018ee:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80018f0:	e008      	b.n	8001904 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80018f2:	f7ff f959 	bl	8000ba8 <HAL_GetTick>
 80018f6:	4602      	mov	r2, r0
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	d901      	bls.n	8001904 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001900:	2303      	movs	r3, #3
 8001902:	e105      	b.n	8001b10 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001904:	4b5a      	ldr	r3, [pc, #360]	; (8001a70 <HAL_RCC_OscConfig+0x784>)
 8001906:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800190a:	f003 0302 	and.w	r3, r3, #2
 800190e:	2b00      	cmp	r3, #0
 8001910:	d1ef      	bne.n	80018f2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001916:	2b00      	cmp	r3, #0
 8001918:	f000 80f9 	beq.w	8001b0e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001920:	2b02      	cmp	r3, #2
 8001922:	f040 80cf 	bne.w	8001ac4 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001926:	4b52      	ldr	r3, [pc, #328]	; (8001a70 <HAL_RCC_OscConfig+0x784>)
 8001928:	68db      	ldr	r3, [r3, #12]
 800192a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	f003 0203 	and.w	r2, r3, #3
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001936:	429a      	cmp	r2, r3
 8001938:	d12c      	bne.n	8001994 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001944:	3b01      	subs	r3, #1
 8001946:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001948:	429a      	cmp	r2, r3
 800194a:	d123      	bne.n	8001994 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001956:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001958:	429a      	cmp	r2, r3
 800195a:	d11b      	bne.n	8001994 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001966:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001968:	429a      	cmp	r2, r3
 800196a:	d113      	bne.n	8001994 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001976:	085b      	lsrs	r3, r3, #1
 8001978:	3b01      	subs	r3, #1
 800197a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800197c:	429a      	cmp	r2, r3
 800197e:	d109      	bne.n	8001994 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198a:	085b      	lsrs	r3, r3, #1
 800198c:	3b01      	subs	r3, #1
 800198e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001990:	429a      	cmp	r2, r3
 8001992:	d071      	beq.n	8001a78 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001994:	69bb      	ldr	r3, [r7, #24]
 8001996:	2b0c      	cmp	r3, #12
 8001998:	d068      	beq.n	8001a6c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800199a:	4b35      	ldr	r3, [pc, #212]	; (8001a70 <HAL_RCC_OscConfig+0x784>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d105      	bne.n	80019b2 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80019a6:	4b32      	ldr	r3, [pc, #200]	; (8001a70 <HAL_RCC_OscConfig+0x784>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e0ac      	b.n	8001b10 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80019b6:	4b2e      	ldr	r3, [pc, #184]	; (8001a70 <HAL_RCC_OscConfig+0x784>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a2d      	ldr	r2, [pc, #180]	; (8001a70 <HAL_RCC_OscConfig+0x784>)
 80019bc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019c0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80019c2:	f7ff f8f1 	bl	8000ba8 <HAL_GetTick>
 80019c6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019c8:	e008      	b.n	80019dc <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019ca:	f7ff f8ed 	bl	8000ba8 <HAL_GetTick>
 80019ce:	4602      	mov	r2, r0
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	2b02      	cmp	r3, #2
 80019d6:	d901      	bls.n	80019dc <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80019d8:	2303      	movs	r3, #3
 80019da:	e099      	b.n	8001b10 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019dc:	4b24      	ldr	r3, [pc, #144]	; (8001a70 <HAL_RCC_OscConfig+0x784>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d1f0      	bne.n	80019ca <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019e8:	4b21      	ldr	r3, [pc, #132]	; (8001a70 <HAL_RCC_OscConfig+0x784>)
 80019ea:	68da      	ldr	r2, [r3, #12]
 80019ec:	4b21      	ldr	r3, [pc, #132]	; (8001a74 <HAL_RCC_OscConfig+0x788>)
 80019ee:	4013      	ands	r3, r2
 80019f0:	687a      	ldr	r2, [r7, #4]
 80019f2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80019f4:	687a      	ldr	r2, [r7, #4]
 80019f6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80019f8:	3a01      	subs	r2, #1
 80019fa:	0112      	lsls	r2, r2, #4
 80019fc:	4311      	orrs	r1, r2
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001a02:	0212      	lsls	r2, r2, #8
 8001a04:	4311      	orrs	r1, r2
 8001a06:	687a      	ldr	r2, [r7, #4]
 8001a08:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001a0a:	0852      	lsrs	r2, r2, #1
 8001a0c:	3a01      	subs	r2, #1
 8001a0e:	0552      	lsls	r2, r2, #21
 8001a10:	4311      	orrs	r1, r2
 8001a12:	687a      	ldr	r2, [r7, #4]
 8001a14:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001a16:	0852      	lsrs	r2, r2, #1
 8001a18:	3a01      	subs	r2, #1
 8001a1a:	0652      	lsls	r2, r2, #25
 8001a1c:	4311      	orrs	r1, r2
 8001a1e:	687a      	ldr	r2, [r7, #4]
 8001a20:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001a22:	06d2      	lsls	r2, r2, #27
 8001a24:	430a      	orrs	r2, r1
 8001a26:	4912      	ldr	r1, [pc, #72]	; (8001a70 <HAL_RCC_OscConfig+0x784>)
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001a2c:	4b10      	ldr	r3, [pc, #64]	; (8001a70 <HAL_RCC_OscConfig+0x784>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a0f      	ldr	r2, [pc, #60]	; (8001a70 <HAL_RCC_OscConfig+0x784>)
 8001a32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a36:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a38:	4b0d      	ldr	r3, [pc, #52]	; (8001a70 <HAL_RCC_OscConfig+0x784>)
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	4a0c      	ldr	r2, [pc, #48]	; (8001a70 <HAL_RCC_OscConfig+0x784>)
 8001a3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a42:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a44:	f7ff f8b0 	bl	8000ba8 <HAL_GetTick>
 8001a48:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a4a:	e008      	b.n	8001a5e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a4c:	f7ff f8ac 	bl	8000ba8 <HAL_GetTick>
 8001a50:	4602      	mov	r2, r0
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d901      	bls.n	8001a5e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e058      	b.n	8001b10 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a5e:	4b04      	ldr	r3, [pc, #16]	; (8001a70 <HAL_RCC_OscConfig+0x784>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d0f0      	beq.n	8001a4c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a6a:	e050      	b.n	8001b0e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e04f      	b.n	8001b10 <HAL_RCC_OscConfig+0x824>
 8001a70:	40021000 	.word	0x40021000
 8001a74:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a78:	4b27      	ldr	r3, [pc, #156]	; (8001b18 <HAL_RCC_OscConfig+0x82c>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d144      	bne.n	8001b0e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001a84:	4b24      	ldr	r3, [pc, #144]	; (8001b18 <HAL_RCC_OscConfig+0x82c>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a23      	ldr	r2, [pc, #140]	; (8001b18 <HAL_RCC_OscConfig+0x82c>)
 8001a8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a8e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a90:	4b21      	ldr	r3, [pc, #132]	; (8001b18 <HAL_RCC_OscConfig+0x82c>)
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	4a20      	ldr	r2, [pc, #128]	; (8001b18 <HAL_RCC_OscConfig+0x82c>)
 8001a96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a9a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001a9c:	f7ff f884 	bl	8000ba8 <HAL_GetTick>
 8001aa0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001aa2:	e008      	b.n	8001ab6 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aa4:	f7ff f880 	bl	8000ba8 <HAL_GetTick>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d901      	bls.n	8001ab6 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e02c      	b.n	8001b10 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ab6:	4b18      	ldr	r3, [pc, #96]	; (8001b18 <HAL_RCC_OscConfig+0x82c>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d0f0      	beq.n	8001aa4 <HAL_RCC_OscConfig+0x7b8>
 8001ac2:	e024      	b.n	8001b0e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ac4:	69bb      	ldr	r3, [r7, #24]
 8001ac6:	2b0c      	cmp	r3, #12
 8001ac8:	d01f      	beq.n	8001b0a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aca:	4b13      	ldr	r3, [pc, #76]	; (8001b18 <HAL_RCC_OscConfig+0x82c>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a12      	ldr	r2, [pc, #72]	; (8001b18 <HAL_RCC_OscConfig+0x82c>)
 8001ad0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ad4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad6:	f7ff f867 	bl	8000ba8 <HAL_GetTick>
 8001ada:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001adc:	e008      	b.n	8001af0 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ade:	f7ff f863 	bl	8000ba8 <HAL_GetTick>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	1ad3      	subs	r3, r2, r3
 8001ae8:	2b02      	cmp	r3, #2
 8001aea:	d901      	bls.n	8001af0 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001aec:	2303      	movs	r3, #3
 8001aee:	e00f      	b.n	8001b10 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001af0:	4b09      	ldr	r3, [pc, #36]	; (8001b18 <HAL_RCC_OscConfig+0x82c>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d1f0      	bne.n	8001ade <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001afc:	4b06      	ldr	r3, [pc, #24]	; (8001b18 <HAL_RCC_OscConfig+0x82c>)
 8001afe:	68da      	ldr	r2, [r3, #12]
 8001b00:	4905      	ldr	r1, [pc, #20]	; (8001b18 <HAL_RCC_OscConfig+0x82c>)
 8001b02:	4b06      	ldr	r3, [pc, #24]	; (8001b1c <HAL_RCC_OscConfig+0x830>)
 8001b04:	4013      	ands	r3, r2
 8001b06:	60cb      	str	r3, [r1, #12]
 8001b08:	e001      	b.n	8001b0e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e000      	b.n	8001b10 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8001b0e:	2300      	movs	r3, #0
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3720      	adds	r7, #32
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	40021000 	.word	0x40021000
 8001b1c:	feeefffc 	.word	0xfeeefffc

08001b20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d101      	bne.n	8001b34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e0e7      	b.n	8001d04 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b34:	4b75      	ldr	r3, [pc, #468]	; (8001d0c <HAL_RCC_ClockConfig+0x1ec>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 0307 	and.w	r3, r3, #7
 8001b3c:	683a      	ldr	r2, [r7, #0]
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	d910      	bls.n	8001b64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b42:	4b72      	ldr	r3, [pc, #456]	; (8001d0c <HAL_RCC_ClockConfig+0x1ec>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f023 0207 	bic.w	r2, r3, #7
 8001b4a:	4970      	ldr	r1, [pc, #448]	; (8001d0c <HAL_RCC_ClockConfig+0x1ec>)
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b52:	4b6e      	ldr	r3, [pc, #440]	; (8001d0c <HAL_RCC_ClockConfig+0x1ec>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 0307 	and.w	r3, r3, #7
 8001b5a:	683a      	ldr	r2, [r7, #0]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d001      	beq.n	8001b64 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e0cf      	b.n	8001d04 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 0302 	and.w	r3, r3, #2
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d010      	beq.n	8001b92 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	689a      	ldr	r2, [r3, #8]
 8001b74:	4b66      	ldr	r3, [pc, #408]	; (8001d10 <HAL_RCC_ClockConfig+0x1f0>)
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d908      	bls.n	8001b92 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b80:	4b63      	ldr	r3, [pc, #396]	; (8001d10 <HAL_RCC_ClockConfig+0x1f0>)
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	4960      	ldr	r1, [pc, #384]	; (8001d10 <HAL_RCC_ClockConfig+0x1f0>)
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 0301 	and.w	r3, r3, #1
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d04c      	beq.n	8001c38 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	2b03      	cmp	r3, #3
 8001ba4:	d107      	bne.n	8001bb6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ba6:	4b5a      	ldr	r3, [pc, #360]	; (8001d10 <HAL_RCC_ClockConfig+0x1f0>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d121      	bne.n	8001bf6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e0a6      	b.n	8001d04 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	d107      	bne.n	8001bce <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bbe:	4b54      	ldr	r3, [pc, #336]	; (8001d10 <HAL_RCC_ClockConfig+0x1f0>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d115      	bne.n	8001bf6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e09a      	b.n	8001d04 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d107      	bne.n	8001be6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001bd6:	4b4e      	ldr	r3, [pc, #312]	; (8001d10 <HAL_RCC_ClockConfig+0x1f0>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0302 	and.w	r3, r3, #2
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d109      	bne.n	8001bf6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e08e      	b.n	8001d04 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001be6:	4b4a      	ldr	r3, [pc, #296]	; (8001d10 <HAL_RCC_ClockConfig+0x1f0>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d101      	bne.n	8001bf6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e086      	b.n	8001d04 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001bf6:	4b46      	ldr	r3, [pc, #280]	; (8001d10 <HAL_RCC_ClockConfig+0x1f0>)
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	f023 0203 	bic.w	r2, r3, #3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	4943      	ldr	r1, [pc, #268]	; (8001d10 <HAL_RCC_ClockConfig+0x1f0>)
 8001c04:	4313      	orrs	r3, r2
 8001c06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c08:	f7fe ffce 	bl	8000ba8 <HAL_GetTick>
 8001c0c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c0e:	e00a      	b.n	8001c26 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c10:	f7fe ffca 	bl	8000ba8 <HAL_GetTick>
 8001c14:	4602      	mov	r2, r0
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d901      	bls.n	8001c26 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	e06e      	b.n	8001d04 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c26:	4b3a      	ldr	r3, [pc, #232]	; (8001d10 <HAL_RCC_ClockConfig+0x1f0>)
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	f003 020c 	and.w	r2, r3, #12
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d1eb      	bne.n	8001c10 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 0302 	and.w	r3, r3, #2
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d010      	beq.n	8001c66 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	689a      	ldr	r2, [r3, #8]
 8001c48:	4b31      	ldr	r3, [pc, #196]	; (8001d10 <HAL_RCC_ClockConfig+0x1f0>)
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d208      	bcs.n	8001c66 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c54:	4b2e      	ldr	r3, [pc, #184]	; (8001d10 <HAL_RCC_ClockConfig+0x1f0>)
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	492b      	ldr	r1, [pc, #172]	; (8001d10 <HAL_RCC_ClockConfig+0x1f0>)
 8001c62:	4313      	orrs	r3, r2
 8001c64:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c66:	4b29      	ldr	r3, [pc, #164]	; (8001d0c <HAL_RCC_ClockConfig+0x1ec>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0307 	and.w	r3, r3, #7
 8001c6e:	683a      	ldr	r2, [r7, #0]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d210      	bcs.n	8001c96 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c74:	4b25      	ldr	r3, [pc, #148]	; (8001d0c <HAL_RCC_ClockConfig+0x1ec>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f023 0207 	bic.w	r2, r3, #7
 8001c7c:	4923      	ldr	r1, [pc, #140]	; (8001d0c <HAL_RCC_ClockConfig+0x1ec>)
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c84:	4b21      	ldr	r3, [pc, #132]	; (8001d0c <HAL_RCC_ClockConfig+0x1ec>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 0307 	and.w	r3, r3, #7
 8001c8c:	683a      	ldr	r2, [r7, #0]
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	d001      	beq.n	8001c96 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e036      	b.n	8001d04 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0304 	and.w	r3, r3, #4
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d008      	beq.n	8001cb4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ca2:	4b1b      	ldr	r3, [pc, #108]	; (8001d10 <HAL_RCC_ClockConfig+0x1f0>)
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	68db      	ldr	r3, [r3, #12]
 8001cae:	4918      	ldr	r1, [pc, #96]	; (8001d10 <HAL_RCC_ClockConfig+0x1f0>)
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0308 	and.w	r3, r3, #8
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d009      	beq.n	8001cd4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001cc0:	4b13      	ldr	r3, [pc, #76]	; (8001d10 <HAL_RCC_ClockConfig+0x1f0>)
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	691b      	ldr	r3, [r3, #16]
 8001ccc:	00db      	lsls	r3, r3, #3
 8001cce:	4910      	ldr	r1, [pc, #64]	; (8001d10 <HAL_RCC_ClockConfig+0x1f0>)
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001cd4:	f000 f824 	bl	8001d20 <HAL_RCC_GetSysClockFreq>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	4b0d      	ldr	r3, [pc, #52]	; (8001d10 <HAL_RCC_ClockConfig+0x1f0>)
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	091b      	lsrs	r3, r3, #4
 8001ce0:	f003 030f 	and.w	r3, r3, #15
 8001ce4:	490b      	ldr	r1, [pc, #44]	; (8001d14 <HAL_RCC_ClockConfig+0x1f4>)
 8001ce6:	5ccb      	ldrb	r3, [r1, r3]
 8001ce8:	f003 031f 	and.w	r3, r3, #31
 8001cec:	fa22 f303 	lsr.w	r3, r2, r3
 8001cf0:	4a09      	ldr	r2, [pc, #36]	; (8001d18 <HAL_RCC_ClockConfig+0x1f8>)
 8001cf2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001cf4:	4b09      	ldr	r3, [pc, #36]	; (8001d1c <HAL_RCC_ClockConfig+0x1fc>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7fe ff05 	bl	8000b08 <HAL_InitTick>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	72fb      	strb	r3, [r7, #11]

  return status;
 8001d02:	7afb      	ldrb	r3, [r7, #11]
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3710      	adds	r7, #16
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	40022000 	.word	0x40022000
 8001d10:	40021000 	.word	0x40021000
 8001d14:	08005000 	.word	0x08005000
 8001d18:	2000000c 	.word	0x2000000c
 8001d1c:	20000010 	.word	0x20000010

08001d20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b089      	sub	sp, #36	; 0x24
 8001d24:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001d26:	2300      	movs	r3, #0
 8001d28:	61fb      	str	r3, [r7, #28]
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d2e:	4b3e      	ldr	r3, [pc, #248]	; (8001e28 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	f003 030c 	and.w	r3, r3, #12
 8001d36:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d38:	4b3b      	ldr	r3, [pc, #236]	; (8001e28 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	f003 0303 	and.w	r3, r3, #3
 8001d40:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d005      	beq.n	8001d54 <HAL_RCC_GetSysClockFreq+0x34>
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	2b0c      	cmp	r3, #12
 8001d4c:	d121      	bne.n	8001d92 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d11e      	bne.n	8001d92 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001d54:	4b34      	ldr	r3, [pc, #208]	; (8001e28 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 0308 	and.w	r3, r3, #8
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d107      	bne.n	8001d70 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001d60:	4b31      	ldr	r3, [pc, #196]	; (8001e28 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d66:	0a1b      	lsrs	r3, r3, #8
 8001d68:	f003 030f 	and.w	r3, r3, #15
 8001d6c:	61fb      	str	r3, [r7, #28]
 8001d6e:	e005      	b.n	8001d7c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001d70:	4b2d      	ldr	r3, [pc, #180]	; (8001e28 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	091b      	lsrs	r3, r3, #4
 8001d76:	f003 030f 	and.w	r3, r3, #15
 8001d7a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001d7c:	4a2b      	ldr	r2, [pc, #172]	; (8001e2c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d84:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d10d      	bne.n	8001da8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d90:	e00a      	b.n	8001da8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	2b04      	cmp	r3, #4
 8001d96:	d102      	bne.n	8001d9e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001d98:	4b25      	ldr	r3, [pc, #148]	; (8001e30 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d9a:	61bb      	str	r3, [r7, #24]
 8001d9c:	e004      	b.n	8001da8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	2b08      	cmp	r3, #8
 8001da2:	d101      	bne.n	8001da8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001da4:	4b23      	ldr	r3, [pc, #140]	; (8001e34 <HAL_RCC_GetSysClockFreq+0x114>)
 8001da6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	2b0c      	cmp	r3, #12
 8001dac:	d134      	bne.n	8001e18 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001dae:	4b1e      	ldr	r3, [pc, #120]	; (8001e28 <HAL_RCC_GetSysClockFreq+0x108>)
 8001db0:	68db      	ldr	r3, [r3, #12]
 8001db2:	f003 0303 	and.w	r3, r3, #3
 8001db6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d003      	beq.n	8001dc6 <HAL_RCC_GetSysClockFreq+0xa6>
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	2b03      	cmp	r3, #3
 8001dc2:	d003      	beq.n	8001dcc <HAL_RCC_GetSysClockFreq+0xac>
 8001dc4:	e005      	b.n	8001dd2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001dc6:	4b1a      	ldr	r3, [pc, #104]	; (8001e30 <HAL_RCC_GetSysClockFreq+0x110>)
 8001dc8:	617b      	str	r3, [r7, #20]
      break;
 8001dca:	e005      	b.n	8001dd8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001dcc:	4b19      	ldr	r3, [pc, #100]	; (8001e34 <HAL_RCC_GetSysClockFreq+0x114>)
 8001dce:	617b      	str	r3, [r7, #20]
      break;
 8001dd0:	e002      	b.n	8001dd8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	617b      	str	r3, [r7, #20]
      break;
 8001dd6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001dd8:	4b13      	ldr	r3, [pc, #76]	; (8001e28 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	091b      	lsrs	r3, r3, #4
 8001dde:	f003 0307 	and.w	r3, r3, #7
 8001de2:	3301      	adds	r3, #1
 8001de4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001de6:	4b10      	ldr	r3, [pc, #64]	; (8001e28 <HAL_RCC_GetSysClockFreq+0x108>)
 8001de8:	68db      	ldr	r3, [r3, #12]
 8001dea:	0a1b      	lsrs	r3, r3, #8
 8001dec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001df0:	697a      	ldr	r2, [r7, #20]
 8001df2:	fb03 f202 	mul.w	r2, r3, r2
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dfc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001dfe:	4b0a      	ldr	r3, [pc, #40]	; (8001e28 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e00:	68db      	ldr	r3, [r3, #12]
 8001e02:	0e5b      	lsrs	r3, r3, #25
 8001e04:	f003 0303 	and.w	r3, r3, #3
 8001e08:	3301      	adds	r3, #1
 8001e0a:	005b      	lsls	r3, r3, #1
 8001e0c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001e0e:	697a      	ldr	r2, [r7, #20]
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e16:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001e18:	69bb      	ldr	r3, [r7, #24]
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3724      	adds	r7, #36	; 0x24
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	40021000 	.word	0x40021000
 8001e2c:	08005018 	.word	0x08005018
 8001e30:	00f42400 	.word	0x00f42400
 8001e34:	007a1200 	.word	0x007a1200

08001e38 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e3c:	4b03      	ldr	r3, [pc, #12]	; (8001e4c <HAL_RCC_GetHCLKFreq+0x14>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	2000000c 	.word	0x2000000c

08001e50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001e54:	f7ff fff0 	bl	8001e38 <HAL_RCC_GetHCLKFreq>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	4b06      	ldr	r3, [pc, #24]	; (8001e74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	0a1b      	lsrs	r3, r3, #8
 8001e60:	f003 0307 	and.w	r3, r3, #7
 8001e64:	4904      	ldr	r1, [pc, #16]	; (8001e78 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e66:	5ccb      	ldrb	r3, [r1, r3]
 8001e68:	f003 031f 	and.w	r3, r3, #31
 8001e6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	40021000 	.word	0x40021000
 8001e78:	08005010 	.word	0x08005010

08001e7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001e80:	f7ff ffda 	bl	8001e38 <HAL_RCC_GetHCLKFreq>
 8001e84:	4602      	mov	r2, r0
 8001e86:	4b06      	ldr	r3, [pc, #24]	; (8001ea0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	0adb      	lsrs	r3, r3, #11
 8001e8c:	f003 0307 	and.w	r3, r3, #7
 8001e90:	4904      	ldr	r1, [pc, #16]	; (8001ea4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001e92:	5ccb      	ldrb	r3, [r1, r3]
 8001e94:	f003 031f 	and.w	r3, r3, #31
 8001e98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	40021000 	.word	0x40021000
 8001ea4:	08005010 	.word	0x08005010

08001ea8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b086      	sub	sp, #24
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001eb4:	4b2a      	ldr	r3, [pc, #168]	; (8001f60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001eb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d003      	beq.n	8001ec8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001ec0:	f7ff f9a0 	bl	8001204 <HAL_PWREx_GetVoltageRange>
 8001ec4:	6178      	str	r0, [r7, #20]
 8001ec6:	e014      	b.n	8001ef2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ec8:	4b25      	ldr	r3, [pc, #148]	; (8001f60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001eca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ecc:	4a24      	ldr	r2, [pc, #144]	; (8001f60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ece:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ed2:	6593      	str	r3, [r2, #88]	; 0x58
 8001ed4:	4b22      	ldr	r3, [pc, #136]	; (8001f60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ed6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001edc:	60fb      	str	r3, [r7, #12]
 8001ede:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001ee0:	f7ff f990 	bl	8001204 <HAL_PWREx_GetVoltageRange>
 8001ee4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001ee6:	4b1e      	ldr	r3, [pc, #120]	; (8001f60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eea:	4a1d      	ldr	r2, [pc, #116]	; (8001f60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001eec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ef0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ef8:	d10b      	bne.n	8001f12 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2b80      	cmp	r3, #128	; 0x80
 8001efe:	d919      	bls.n	8001f34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2ba0      	cmp	r3, #160	; 0xa0
 8001f04:	d902      	bls.n	8001f0c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f06:	2302      	movs	r3, #2
 8001f08:	613b      	str	r3, [r7, #16]
 8001f0a:	e013      	b.n	8001f34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	613b      	str	r3, [r7, #16]
 8001f10:	e010      	b.n	8001f34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2b80      	cmp	r3, #128	; 0x80
 8001f16:	d902      	bls.n	8001f1e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001f18:	2303      	movs	r3, #3
 8001f1a:	613b      	str	r3, [r7, #16]
 8001f1c:	e00a      	b.n	8001f34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2b80      	cmp	r3, #128	; 0x80
 8001f22:	d102      	bne.n	8001f2a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f24:	2302      	movs	r3, #2
 8001f26:	613b      	str	r3, [r7, #16]
 8001f28:	e004      	b.n	8001f34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2b70      	cmp	r3, #112	; 0x70
 8001f2e:	d101      	bne.n	8001f34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f30:	2301      	movs	r3, #1
 8001f32:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001f34:	4b0b      	ldr	r3, [pc, #44]	; (8001f64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f023 0207 	bic.w	r2, r3, #7
 8001f3c:	4909      	ldr	r1, [pc, #36]	; (8001f64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001f44:	4b07      	ldr	r3, [pc, #28]	; (8001f64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 0307 	and.w	r3, r3, #7
 8001f4c:	693a      	ldr	r2, [r7, #16]
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d001      	beq.n	8001f56 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e000      	b.n	8001f58 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001f56:	2300      	movs	r3, #0
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3718      	adds	r7, #24
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	40021000 	.word	0x40021000
 8001f64:	40022000 	.word	0x40022000

08001f68 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b086      	sub	sp, #24
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001f70:	2300      	movs	r3, #0
 8001f72:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001f74:	2300      	movs	r3, #0
 8001f76:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d041      	beq.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001f88:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001f8c:	d02a      	beq.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001f8e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001f92:	d824      	bhi.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001f94:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001f98:	d008      	beq.n	8001fac <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001f9a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001f9e:	d81e      	bhi.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d00a      	beq.n	8001fba <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001fa4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fa8:	d010      	beq.n	8001fcc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001faa:	e018      	b.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001fac:	4b86      	ldr	r3, [pc, #536]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	4a85      	ldr	r2, [pc, #532]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fb6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001fb8:	e015      	b.n	8001fe6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	3304      	adds	r3, #4
 8001fbe:	2100      	movs	r1, #0
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f000 facd 	bl	8002560 <RCCEx_PLLSAI1_Config>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001fca:	e00c      	b.n	8001fe6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	3320      	adds	r3, #32
 8001fd0:	2100      	movs	r1, #0
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f000 fbb6 	bl	8002744 <RCCEx_PLLSAI2_Config>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001fdc:	e003      	b.n	8001fe6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	74fb      	strb	r3, [r7, #19]
      break;
 8001fe2:	e000      	b.n	8001fe6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001fe4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001fe6:	7cfb      	ldrb	r3, [r7, #19]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d10b      	bne.n	8002004 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001fec:	4b76      	ldr	r3, [pc, #472]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ff2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001ffa:	4973      	ldr	r1, [pc, #460]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002002:	e001      	b.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002004:	7cfb      	ldrb	r3, [r7, #19]
 8002006:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002010:	2b00      	cmp	r3, #0
 8002012:	d041      	beq.n	8002098 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002018:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800201c:	d02a      	beq.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800201e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002022:	d824      	bhi.n	800206e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002024:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002028:	d008      	beq.n	800203c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800202a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800202e:	d81e      	bhi.n	800206e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002030:	2b00      	cmp	r3, #0
 8002032:	d00a      	beq.n	800204a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002034:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002038:	d010      	beq.n	800205c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800203a:	e018      	b.n	800206e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800203c:	4b62      	ldr	r3, [pc, #392]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	4a61      	ldr	r2, [pc, #388]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002042:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002046:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002048:	e015      	b.n	8002076 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	3304      	adds	r3, #4
 800204e:	2100      	movs	r1, #0
 8002050:	4618      	mov	r0, r3
 8002052:	f000 fa85 	bl	8002560 <RCCEx_PLLSAI1_Config>
 8002056:	4603      	mov	r3, r0
 8002058:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800205a:	e00c      	b.n	8002076 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	3320      	adds	r3, #32
 8002060:	2100      	movs	r1, #0
 8002062:	4618      	mov	r0, r3
 8002064:	f000 fb6e 	bl	8002744 <RCCEx_PLLSAI2_Config>
 8002068:	4603      	mov	r3, r0
 800206a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800206c:	e003      	b.n	8002076 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	74fb      	strb	r3, [r7, #19]
      break;
 8002072:	e000      	b.n	8002076 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002074:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002076:	7cfb      	ldrb	r3, [r7, #19]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d10b      	bne.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800207c:	4b52      	ldr	r3, [pc, #328]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800207e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002082:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800208a:	494f      	ldr	r1, [pc, #316]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800208c:	4313      	orrs	r3, r2
 800208e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002092:	e001      	b.n	8002098 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002094:	7cfb      	ldrb	r3, [r7, #19]
 8002096:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	f000 80a0 	beq.w	80021e6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020a6:	2300      	movs	r3, #0
 80020a8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80020aa:	4b47      	ldr	r3, [pc, #284]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d101      	bne.n	80020ba <HAL_RCCEx_PeriphCLKConfig+0x152>
 80020b6:	2301      	movs	r3, #1
 80020b8:	e000      	b.n	80020bc <HAL_RCCEx_PeriphCLKConfig+0x154>
 80020ba:	2300      	movs	r3, #0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d00d      	beq.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020c0:	4b41      	ldr	r3, [pc, #260]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020c4:	4a40      	ldr	r2, [pc, #256]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020ca:	6593      	str	r3, [r2, #88]	; 0x58
 80020cc:	4b3e      	ldr	r3, [pc, #248]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020d4:	60bb      	str	r3, [r7, #8]
 80020d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020d8:	2301      	movs	r3, #1
 80020da:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020dc:	4b3b      	ldr	r3, [pc, #236]	; (80021cc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a3a      	ldr	r2, [pc, #232]	; (80021cc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80020e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020e6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80020e8:	f7fe fd5e 	bl	8000ba8 <HAL_GetTick>
 80020ec:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80020ee:	e009      	b.n	8002104 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020f0:	f7fe fd5a 	bl	8000ba8 <HAL_GetTick>
 80020f4:	4602      	mov	r2, r0
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d902      	bls.n	8002104 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80020fe:	2303      	movs	r3, #3
 8002100:	74fb      	strb	r3, [r7, #19]
        break;
 8002102:	e005      	b.n	8002110 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002104:	4b31      	ldr	r3, [pc, #196]	; (80021cc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800210c:	2b00      	cmp	r3, #0
 800210e:	d0ef      	beq.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002110:	7cfb      	ldrb	r3, [r7, #19]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d15c      	bne.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002116:	4b2c      	ldr	r3, [pc, #176]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002118:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800211c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002120:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d01f      	beq.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800212e:	697a      	ldr	r2, [r7, #20]
 8002130:	429a      	cmp	r2, r3
 8002132:	d019      	beq.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002134:	4b24      	ldr	r3, [pc, #144]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002136:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800213a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800213e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002140:	4b21      	ldr	r3, [pc, #132]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002142:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002146:	4a20      	ldr	r2, [pc, #128]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002148:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800214c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002150:	4b1d      	ldr	r3, [pc, #116]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002152:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002156:	4a1c      	ldr	r2, [pc, #112]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002158:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800215c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002160:	4a19      	ldr	r2, [pc, #100]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	f003 0301 	and.w	r3, r3, #1
 800216e:	2b00      	cmp	r3, #0
 8002170:	d016      	beq.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002172:	f7fe fd19 	bl	8000ba8 <HAL_GetTick>
 8002176:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002178:	e00b      	b.n	8002192 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800217a:	f7fe fd15 	bl	8000ba8 <HAL_GetTick>
 800217e:	4602      	mov	r2, r0
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	f241 3288 	movw	r2, #5000	; 0x1388
 8002188:	4293      	cmp	r3, r2
 800218a:	d902      	bls.n	8002192 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800218c:	2303      	movs	r3, #3
 800218e:	74fb      	strb	r3, [r7, #19]
            break;
 8002190:	e006      	b.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002192:	4b0d      	ldr	r3, [pc, #52]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002194:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002198:	f003 0302 	and.w	r3, r3, #2
 800219c:	2b00      	cmp	r3, #0
 800219e:	d0ec      	beq.n	800217a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80021a0:	7cfb      	ldrb	r3, [r7, #19]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d10c      	bne.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021a6:	4b08      	ldr	r3, [pc, #32]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021b6:	4904      	ldr	r1, [pc, #16]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021b8:	4313      	orrs	r3, r2
 80021ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80021be:	e009      	b.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80021c0:	7cfb      	ldrb	r3, [r7, #19]
 80021c2:	74bb      	strb	r3, [r7, #18]
 80021c4:	e006      	b.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80021c6:	bf00      	nop
 80021c8:	40021000 	.word	0x40021000
 80021cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021d0:	7cfb      	ldrb	r3, [r7, #19]
 80021d2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021d4:	7c7b      	ldrb	r3, [r7, #17]
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d105      	bne.n	80021e6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021da:	4ba6      	ldr	r3, [pc, #664]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80021dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021de:	4aa5      	ldr	r2, [pc, #660]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80021e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021e4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0301 	and.w	r3, r3, #1
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d00a      	beq.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021f2:	4ba0      	ldr	r3, [pc, #640]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80021f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021f8:	f023 0203 	bic.w	r2, r3, #3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002200:	499c      	ldr	r1, [pc, #624]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002202:	4313      	orrs	r3, r2
 8002204:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0302 	and.w	r3, r3, #2
 8002210:	2b00      	cmp	r3, #0
 8002212:	d00a      	beq.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002214:	4b97      	ldr	r3, [pc, #604]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002216:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800221a:	f023 020c 	bic.w	r2, r3, #12
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002222:	4994      	ldr	r1, [pc, #592]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002224:	4313      	orrs	r3, r2
 8002226:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0304 	and.w	r3, r3, #4
 8002232:	2b00      	cmp	r3, #0
 8002234:	d00a      	beq.n	800224c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002236:	4b8f      	ldr	r3, [pc, #572]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002238:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800223c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002244:	498b      	ldr	r1, [pc, #556]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002246:	4313      	orrs	r3, r2
 8002248:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0308 	and.w	r3, r3, #8
 8002254:	2b00      	cmp	r3, #0
 8002256:	d00a      	beq.n	800226e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002258:	4b86      	ldr	r3, [pc, #536]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800225a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800225e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002266:	4983      	ldr	r1, [pc, #524]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002268:	4313      	orrs	r3, r2
 800226a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0310 	and.w	r3, r3, #16
 8002276:	2b00      	cmp	r3, #0
 8002278:	d00a      	beq.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800227a:	4b7e      	ldr	r3, [pc, #504]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800227c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002280:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002288:	497a      	ldr	r1, [pc, #488]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800228a:	4313      	orrs	r3, r2
 800228c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0320 	and.w	r3, r3, #32
 8002298:	2b00      	cmp	r3, #0
 800229a:	d00a      	beq.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800229c:	4b75      	ldr	r3, [pc, #468]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800229e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022a2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022aa:	4972      	ldr	r1, [pc, #456]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022ac:	4313      	orrs	r3, r2
 80022ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d00a      	beq.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80022be:	4b6d      	ldr	r3, [pc, #436]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022c4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022cc:	4969      	ldr	r1, [pc, #420]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022ce:	4313      	orrs	r3, r2
 80022d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d00a      	beq.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80022e0:	4b64      	ldr	r3, [pc, #400]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022e6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80022ee:	4961      	ldr	r1, [pc, #388]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022f0:	4313      	orrs	r3, r2
 80022f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d00a      	beq.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002302:	4b5c      	ldr	r3, [pc, #368]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002304:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002308:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002310:	4958      	ldr	r1, [pc, #352]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002312:	4313      	orrs	r3, r2
 8002314:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002320:	2b00      	cmp	r3, #0
 8002322:	d00a      	beq.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002324:	4b53      	ldr	r3, [pc, #332]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002326:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800232a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002332:	4950      	ldr	r1, [pc, #320]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002334:	4313      	orrs	r3, r2
 8002336:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002342:	2b00      	cmp	r3, #0
 8002344:	d00a      	beq.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002346:	4b4b      	ldr	r3, [pc, #300]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002348:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800234c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002354:	4947      	ldr	r1, [pc, #284]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002356:	4313      	orrs	r3, r2
 8002358:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d00a      	beq.n	800237e <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002368:	4b42      	ldr	r3, [pc, #264]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800236a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800236e:	f023 0203 	bic.w	r2, r3, #3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002376:	493f      	ldr	r1, [pc, #252]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002378:	4313      	orrs	r3, r2
 800237a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d028      	beq.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800238a:	4b3a      	ldr	r3, [pc, #232]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800238c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002390:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002398:	4936      	ldr	r1, [pc, #216]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800239a:	4313      	orrs	r3, r2
 800239c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023a8:	d106      	bne.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023aa:	4b32      	ldr	r3, [pc, #200]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023ac:	68db      	ldr	r3, [r3, #12]
 80023ae:	4a31      	ldr	r2, [pc, #196]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023b4:	60d3      	str	r3, [r2, #12]
 80023b6:	e011      	b.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80023c0:	d10c      	bne.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	3304      	adds	r3, #4
 80023c6:	2101      	movs	r1, #1
 80023c8:	4618      	mov	r0, r3
 80023ca:	f000 f8c9 	bl	8002560 <RCCEx_PLLSAI1_Config>
 80023ce:	4603      	mov	r3, r0
 80023d0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80023d2:	7cfb      	ldrb	r3, [r7, #19]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d001      	beq.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 80023d8:	7cfb      	ldrb	r3, [r7, #19]
 80023da:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d028      	beq.n	800243a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80023e8:	4b22      	ldr	r3, [pc, #136]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023f6:	491f      	ldr	r1, [pc, #124]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023f8:	4313      	orrs	r3, r2
 80023fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002402:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002406:	d106      	bne.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002408:	4b1a      	ldr	r3, [pc, #104]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	4a19      	ldr	r2, [pc, #100]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800240e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002412:	60d3      	str	r3, [r2, #12]
 8002414:	e011      	b.n	800243a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800241a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800241e:	d10c      	bne.n	800243a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	3304      	adds	r3, #4
 8002424:	2101      	movs	r1, #1
 8002426:	4618      	mov	r0, r3
 8002428:	f000 f89a 	bl	8002560 <RCCEx_PLLSAI1_Config>
 800242c:	4603      	mov	r3, r0
 800242e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002430:	7cfb      	ldrb	r3, [r7, #19]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d001      	beq.n	800243a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8002436:	7cfb      	ldrb	r3, [r7, #19]
 8002438:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d02a      	beq.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002446:	4b0b      	ldr	r3, [pc, #44]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002448:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800244c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002454:	4907      	ldr	r1, [pc, #28]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002456:	4313      	orrs	r3, r2
 8002458:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002460:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002464:	d108      	bne.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002466:	4b03      	ldr	r3, [pc, #12]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	4a02      	ldr	r2, [pc, #8]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800246c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002470:	60d3      	str	r3, [r2, #12]
 8002472:	e013      	b.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x534>
 8002474:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800247c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002480:	d10c      	bne.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	3304      	adds	r3, #4
 8002486:	2101      	movs	r1, #1
 8002488:	4618      	mov	r0, r3
 800248a:	f000 f869 	bl	8002560 <RCCEx_PLLSAI1_Config>
 800248e:	4603      	mov	r3, r0
 8002490:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002492:	7cfb      	ldrb	r3, [r7, #19]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d001      	beq.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8002498:	7cfb      	ldrb	r3, [r7, #19]
 800249a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d02f      	beq.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80024a8:	4b2c      	ldr	r3, [pc, #176]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80024aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ae:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80024b6:	4929      	ldr	r1, [pc, #164]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80024b8:	4313      	orrs	r3, r2
 80024ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80024c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80024c6:	d10d      	bne.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	3304      	adds	r3, #4
 80024cc:	2102      	movs	r1, #2
 80024ce:	4618      	mov	r0, r3
 80024d0:	f000 f846 	bl	8002560 <RCCEx_PLLSAI1_Config>
 80024d4:	4603      	mov	r3, r0
 80024d6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024d8:	7cfb      	ldrb	r3, [r7, #19]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d014      	beq.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80024de:	7cfb      	ldrb	r3, [r7, #19]
 80024e0:	74bb      	strb	r3, [r7, #18]
 80024e2:	e011      	b.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80024e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80024ec:	d10c      	bne.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	3320      	adds	r3, #32
 80024f2:	2102      	movs	r1, #2
 80024f4:	4618      	mov	r0, r3
 80024f6:	f000 f925 	bl	8002744 <RCCEx_PLLSAI2_Config>
 80024fa:	4603      	mov	r3, r0
 80024fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024fe:	7cfb      	ldrb	r3, [r7, #19]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d001      	beq.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8002504:	7cfb      	ldrb	r3, [r7, #19]
 8002506:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002510:	2b00      	cmp	r3, #0
 8002512:	d00b      	beq.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002514:	4b11      	ldr	r3, [pc, #68]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002516:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800251a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002524:	490d      	ldr	r1, [pc, #52]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002526:	4313      	orrs	r3, r2
 8002528:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d00b      	beq.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002538:	4b08      	ldr	r3, [pc, #32]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800253a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800253e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002548:	4904      	ldr	r1, [pc, #16]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800254a:	4313      	orrs	r3, r2
 800254c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002550:	7cbb      	ldrb	r3, [r7, #18]
}
 8002552:	4618      	mov	r0, r3
 8002554:	3718      	adds	r7, #24
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	40021000 	.word	0x40021000

08002560 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800256a:	2300      	movs	r3, #0
 800256c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800256e:	4b74      	ldr	r3, [pc, #464]	; (8002740 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	f003 0303 	and.w	r3, r3, #3
 8002576:	2b00      	cmp	r3, #0
 8002578:	d018      	beq.n	80025ac <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800257a:	4b71      	ldr	r3, [pc, #452]	; (8002740 <RCCEx_PLLSAI1_Config+0x1e0>)
 800257c:	68db      	ldr	r3, [r3, #12]
 800257e:	f003 0203 	and.w	r2, r3, #3
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	429a      	cmp	r2, r3
 8002588:	d10d      	bne.n	80025a6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
       ||
 800258e:	2b00      	cmp	r3, #0
 8002590:	d009      	beq.n	80025a6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002592:	4b6b      	ldr	r3, [pc, #428]	; (8002740 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002594:	68db      	ldr	r3, [r3, #12]
 8002596:	091b      	lsrs	r3, r3, #4
 8002598:	f003 0307 	and.w	r3, r3, #7
 800259c:	1c5a      	adds	r2, r3, #1
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	685b      	ldr	r3, [r3, #4]
       ||
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d047      	beq.n	8002636 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	73fb      	strb	r3, [r7, #15]
 80025aa:	e044      	b.n	8002636 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	2b03      	cmp	r3, #3
 80025b2:	d018      	beq.n	80025e6 <RCCEx_PLLSAI1_Config+0x86>
 80025b4:	2b03      	cmp	r3, #3
 80025b6:	d825      	bhi.n	8002604 <RCCEx_PLLSAI1_Config+0xa4>
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d002      	beq.n	80025c2 <RCCEx_PLLSAI1_Config+0x62>
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d009      	beq.n	80025d4 <RCCEx_PLLSAI1_Config+0x74>
 80025c0:	e020      	b.n	8002604 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80025c2:	4b5f      	ldr	r3, [pc, #380]	; (8002740 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 0302 	and.w	r3, r3, #2
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d11d      	bne.n	800260a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025d2:	e01a      	b.n	800260a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80025d4:	4b5a      	ldr	r3, [pc, #360]	; (8002740 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d116      	bne.n	800260e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025e4:	e013      	b.n	800260e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80025e6:	4b56      	ldr	r3, [pc, #344]	; (8002740 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d10f      	bne.n	8002612 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80025f2:	4b53      	ldr	r3, [pc, #332]	; (8002740 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d109      	bne.n	8002612 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002602:	e006      	b.n	8002612 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	73fb      	strb	r3, [r7, #15]
      break;
 8002608:	e004      	b.n	8002614 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800260a:	bf00      	nop
 800260c:	e002      	b.n	8002614 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800260e:	bf00      	nop
 8002610:	e000      	b.n	8002614 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002612:	bf00      	nop
    }

    if(status == HAL_OK)
 8002614:	7bfb      	ldrb	r3, [r7, #15]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d10d      	bne.n	8002636 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800261a:	4b49      	ldr	r3, [pc, #292]	; (8002740 <RCCEx_PLLSAI1_Config+0x1e0>)
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6819      	ldr	r1, [r3, #0]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	3b01      	subs	r3, #1
 800262c:	011b      	lsls	r3, r3, #4
 800262e:	430b      	orrs	r3, r1
 8002630:	4943      	ldr	r1, [pc, #268]	; (8002740 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002632:	4313      	orrs	r3, r2
 8002634:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002636:	7bfb      	ldrb	r3, [r7, #15]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d17c      	bne.n	8002736 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800263c:	4b40      	ldr	r3, [pc, #256]	; (8002740 <RCCEx_PLLSAI1_Config+0x1e0>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a3f      	ldr	r2, [pc, #252]	; (8002740 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002642:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002646:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002648:	f7fe faae 	bl	8000ba8 <HAL_GetTick>
 800264c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800264e:	e009      	b.n	8002664 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002650:	f7fe faaa 	bl	8000ba8 <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	2b02      	cmp	r3, #2
 800265c:	d902      	bls.n	8002664 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	73fb      	strb	r3, [r7, #15]
        break;
 8002662:	e005      	b.n	8002670 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002664:	4b36      	ldr	r3, [pc, #216]	; (8002740 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800266c:	2b00      	cmp	r3, #0
 800266e:	d1ef      	bne.n	8002650 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002670:	7bfb      	ldrb	r3, [r7, #15]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d15f      	bne.n	8002736 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d110      	bne.n	800269e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800267c:	4b30      	ldr	r3, [pc, #192]	; (8002740 <RCCEx_PLLSAI1_Config+0x1e0>)
 800267e:	691b      	ldr	r3, [r3, #16]
 8002680:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002684:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002688:	687a      	ldr	r2, [r7, #4]
 800268a:	6892      	ldr	r2, [r2, #8]
 800268c:	0211      	lsls	r1, r2, #8
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	68d2      	ldr	r2, [r2, #12]
 8002692:	06d2      	lsls	r2, r2, #27
 8002694:	430a      	orrs	r2, r1
 8002696:	492a      	ldr	r1, [pc, #168]	; (8002740 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002698:	4313      	orrs	r3, r2
 800269a:	610b      	str	r3, [r1, #16]
 800269c:	e027      	b.n	80026ee <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d112      	bne.n	80026ca <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80026a4:	4b26      	ldr	r3, [pc, #152]	; (8002740 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026a6:	691b      	ldr	r3, [r3, #16]
 80026a8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80026ac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	6892      	ldr	r2, [r2, #8]
 80026b4:	0211      	lsls	r1, r2, #8
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	6912      	ldr	r2, [r2, #16]
 80026ba:	0852      	lsrs	r2, r2, #1
 80026bc:	3a01      	subs	r2, #1
 80026be:	0552      	lsls	r2, r2, #21
 80026c0:	430a      	orrs	r2, r1
 80026c2:	491f      	ldr	r1, [pc, #124]	; (8002740 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026c4:	4313      	orrs	r3, r2
 80026c6:	610b      	str	r3, [r1, #16]
 80026c8:	e011      	b.n	80026ee <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80026ca:	4b1d      	ldr	r3, [pc, #116]	; (8002740 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026cc:	691b      	ldr	r3, [r3, #16]
 80026ce:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80026d2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	6892      	ldr	r2, [r2, #8]
 80026da:	0211      	lsls	r1, r2, #8
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	6952      	ldr	r2, [r2, #20]
 80026e0:	0852      	lsrs	r2, r2, #1
 80026e2:	3a01      	subs	r2, #1
 80026e4:	0652      	lsls	r2, r2, #25
 80026e6:	430a      	orrs	r2, r1
 80026e8:	4915      	ldr	r1, [pc, #84]	; (8002740 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026ea:	4313      	orrs	r3, r2
 80026ec:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80026ee:	4b14      	ldr	r3, [pc, #80]	; (8002740 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a13      	ldr	r2, [pc, #76]	; (8002740 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026f4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80026f8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026fa:	f7fe fa55 	bl	8000ba8 <HAL_GetTick>
 80026fe:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002700:	e009      	b.n	8002716 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002702:	f7fe fa51 	bl	8000ba8 <HAL_GetTick>
 8002706:	4602      	mov	r2, r0
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	2b02      	cmp	r3, #2
 800270e:	d902      	bls.n	8002716 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002710:	2303      	movs	r3, #3
 8002712:	73fb      	strb	r3, [r7, #15]
          break;
 8002714:	e005      	b.n	8002722 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002716:	4b0a      	ldr	r3, [pc, #40]	; (8002740 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d0ef      	beq.n	8002702 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002722:	7bfb      	ldrb	r3, [r7, #15]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d106      	bne.n	8002736 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002728:	4b05      	ldr	r3, [pc, #20]	; (8002740 <RCCEx_PLLSAI1_Config+0x1e0>)
 800272a:	691a      	ldr	r2, [r3, #16]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	699b      	ldr	r3, [r3, #24]
 8002730:	4903      	ldr	r1, [pc, #12]	; (8002740 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002732:	4313      	orrs	r3, r2
 8002734:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002736:	7bfb      	ldrb	r3, [r7, #15]
}
 8002738:	4618      	mov	r0, r3
 800273a:	3710      	adds	r7, #16
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	40021000 	.word	0x40021000

08002744 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800274e:	2300      	movs	r3, #0
 8002750:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002752:	4b69      	ldr	r3, [pc, #420]	; (80028f8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	f003 0303 	and.w	r3, r3, #3
 800275a:	2b00      	cmp	r3, #0
 800275c:	d018      	beq.n	8002790 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800275e:	4b66      	ldr	r3, [pc, #408]	; (80028f8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002760:	68db      	ldr	r3, [r3, #12]
 8002762:	f003 0203 	and.w	r2, r3, #3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	429a      	cmp	r2, r3
 800276c:	d10d      	bne.n	800278a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
       ||
 8002772:	2b00      	cmp	r3, #0
 8002774:	d009      	beq.n	800278a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002776:	4b60      	ldr	r3, [pc, #384]	; (80028f8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	091b      	lsrs	r3, r3, #4
 800277c:	f003 0307 	and.w	r3, r3, #7
 8002780:	1c5a      	adds	r2, r3, #1
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	685b      	ldr	r3, [r3, #4]
       ||
 8002786:	429a      	cmp	r2, r3
 8002788:	d047      	beq.n	800281a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	73fb      	strb	r3, [r7, #15]
 800278e:	e044      	b.n	800281a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	2b03      	cmp	r3, #3
 8002796:	d018      	beq.n	80027ca <RCCEx_PLLSAI2_Config+0x86>
 8002798:	2b03      	cmp	r3, #3
 800279a:	d825      	bhi.n	80027e8 <RCCEx_PLLSAI2_Config+0xa4>
 800279c:	2b01      	cmp	r3, #1
 800279e:	d002      	beq.n	80027a6 <RCCEx_PLLSAI2_Config+0x62>
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d009      	beq.n	80027b8 <RCCEx_PLLSAI2_Config+0x74>
 80027a4:	e020      	b.n	80027e8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80027a6:	4b54      	ldr	r3, [pc, #336]	; (80028f8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0302 	and.w	r3, r3, #2
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d11d      	bne.n	80027ee <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027b6:	e01a      	b.n	80027ee <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80027b8:	4b4f      	ldr	r3, [pc, #316]	; (80028f8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d116      	bne.n	80027f2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027c8:	e013      	b.n	80027f2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80027ca:	4b4b      	ldr	r3, [pc, #300]	; (80028f8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d10f      	bne.n	80027f6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80027d6:	4b48      	ldr	r3, [pc, #288]	; (80028f8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d109      	bne.n	80027f6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80027e6:	e006      	b.n	80027f6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	73fb      	strb	r3, [r7, #15]
      break;
 80027ec:	e004      	b.n	80027f8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80027ee:	bf00      	nop
 80027f0:	e002      	b.n	80027f8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80027f2:	bf00      	nop
 80027f4:	e000      	b.n	80027f8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80027f6:	bf00      	nop
    }

    if(status == HAL_OK)
 80027f8:	7bfb      	ldrb	r3, [r7, #15]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d10d      	bne.n	800281a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80027fe:	4b3e      	ldr	r3, [pc, #248]	; (80028f8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6819      	ldr	r1, [r3, #0]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	3b01      	subs	r3, #1
 8002810:	011b      	lsls	r3, r3, #4
 8002812:	430b      	orrs	r3, r1
 8002814:	4938      	ldr	r1, [pc, #224]	; (80028f8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002816:	4313      	orrs	r3, r2
 8002818:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800281a:	7bfb      	ldrb	r3, [r7, #15]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d166      	bne.n	80028ee <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002820:	4b35      	ldr	r3, [pc, #212]	; (80028f8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a34      	ldr	r2, [pc, #208]	; (80028f8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002826:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800282a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800282c:	f7fe f9bc 	bl	8000ba8 <HAL_GetTick>
 8002830:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002832:	e009      	b.n	8002848 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002834:	f7fe f9b8 	bl	8000ba8 <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	2b02      	cmp	r3, #2
 8002840:	d902      	bls.n	8002848 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	73fb      	strb	r3, [r7, #15]
        break;
 8002846:	e005      	b.n	8002854 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002848:	4b2b      	ldr	r3, [pc, #172]	; (80028f8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d1ef      	bne.n	8002834 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002854:	7bfb      	ldrb	r3, [r7, #15]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d149      	bne.n	80028ee <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d110      	bne.n	8002882 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002860:	4b25      	ldr	r3, [pc, #148]	; (80028f8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002862:	695b      	ldr	r3, [r3, #20]
 8002864:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002868:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	6892      	ldr	r2, [r2, #8]
 8002870:	0211      	lsls	r1, r2, #8
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	68d2      	ldr	r2, [r2, #12]
 8002876:	06d2      	lsls	r2, r2, #27
 8002878:	430a      	orrs	r2, r1
 800287a:	491f      	ldr	r1, [pc, #124]	; (80028f8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800287c:	4313      	orrs	r3, r2
 800287e:	614b      	str	r3, [r1, #20]
 8002880:	e011      	b.n	80028a6 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002882:	4b1d      	ldr	r3, [pc, #116]	; (80028f8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002884:	695b      	ldr	r3, [r3, #20]
 8002886:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800288a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	6892      	ldr	r2, [r2, #8]
 8002892:	0211      	lsls	r1, r2, #8
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	6912      	ldr	r2, [r2, #16]
 8002898:	0852      	lsrs	r2, r2, #1
 800289a:	3a01      	subs	r2, #1
 800289c:	0652      	lsls	r2, r2, #25
 800289e:	430a      	orrs	r2, r1
 80028a0:	4915      	ldr	r1, [pc, #84]	; (80028f8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80028a2:	4313      	orrs	r3, r2
 80028a4:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80028a6:	4b14      	ldr	r3, [pc, #80]	; (80028f8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a13      	ldr	r2, [pc, #76]	; (80028f8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80028ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028b0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028b2:	f7fe f979 	bl	8000ba8 <HAL_GetTick>
 80028b6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80028b8:	e009      	b.n	80028ce <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80028ba:	f7fe f975 	bl	8000ba8 <HAL_GetTick>
 80028be:	4602      	mov	r2, r0
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	1ad3      	subs	r3, r2, r3
 80028c4:	2b02      	cmp	r3, #2
 80028c6:	d902      	bls.n	80028ce <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 80028c8:	2303      	movs	r3, #3
 80028ca:	73fb      	strb	r3, [r7, #15]
          break;
 80028cc:	e005      	b.n	80028da <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80028ce:	4b0a      	ldr	r3, [pc, #40]	; (80028f8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d0ef      	beq.n	80028ba <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 80028da:	7bfb      	ldrb	r3, [r7, #15]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d106      	bne.n	80028ee <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80028e0:	4b05      	ldr	r3, [pc, #20]	; (80028f8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80028e2:	695a      	ldr	r2, [r3, #20]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	695b      	ldr	r3, [r3, #20]
 80028e8:	4903      	ldr	r1, [pc, #12]	; (80028f8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80028ea:	4313      	orrs	r3, r2
 80028ec:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80028ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3710      	adds	r7, #16
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	40021000 	.word	0x40021000

080028fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b084      	sub	sp, #16
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d101      	bne.n	800290e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e095      	b.n	8002a3a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002912:	2b00      	cmp	r3, #0
 8002914:	d108      	bne.n	8002928 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800291e:	d009      	beq.n	8002934 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	61da      	str	r2, [r3, #28]
 8002926:	e005      	b.n	8002934 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2200      	movs	r2, #0
 800292c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2200      	movs	r2, #0
 8002938:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002940:	b2db      	uxtb	r3, r3
 8002942:	2b00      	cmp	r3, #0
 8002944:	d106      	bne.n	8002954 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2200      	movs	r2, #0
 800294a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f7fd ff5c 	bl	800080c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2202      	movs	r2, #2
 8002958:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800296a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002974:	d902      	bls.n	800297c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002976:	2300      	movs	r3, #0
 8002978:	60fb      	str	r3, [r7, #12]
 800297a:	e002      	b.n	8002982 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800297c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002980:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800298a:	d007      	beq.n	800299c <HAL_SPI_Init+0xa0>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002994:	d002      	beq.n	800299c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80029ac:	431a      	orrs	r2, r3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	691b      	ldr	r3, [r3, #16]
 80029b2:	f003 0302 	and.w	r3, r3, #2
 80029b6:	431a      	orrs	r2, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	695b      	ldr	r3, [r3, #20]
 80029bc:	f003 0301 	and.w	r3, r3, #1
 80029c0:	431a      	orrs	r2, r3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	699b      	ldr	r3, [r3, #24]
 80029c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029ca:	431a      	orrs	r2, r3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	69db      	ldr	r3, [r3, #28]
 80029d0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80029d4:	431a      	orrs	r2, r3
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6a1b      	ldr	r3, [r3, #32]
 80029da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029de:	ea42 0103 	orr.w	r1, r2, r3
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029e6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	430a      	orrs	r2, r1
 80029f0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	699b      	ldr	r3, [r3, #24]
 80029f6:	0c1b      	lsrs	r3, r3, #16
 80029f8:	f003 0204 	and.w	r2, r3, #4
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a00:	f003 0310 	and.w	r3, r3, #16
 8002a04:	431a      	orrs	r2, r3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a0a:	f003 0308 	and.w	r3, r3, #8
 8002a0e:	431a      	orrs	r2, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002a18:	ea42 0103 	orr.w	r1, r2, r3
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	430a      	orrs	r2, r1
 8002a28:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2201      	movs	r2, #1
 8002a34:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002a38:	2300      	movs	r3, #0
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3710      	adds	r7, #16
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
	...

08002a44 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b087      	sub	sp, #28
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	60f8      	str	r0, [r7, #12]
 8002a4c:	60b9      	str	r1, [r7, #8]
 8002a4e:	607a      	str	r2, [r7, #4]
 8002a50:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002a52:	2300      	movs	r3, #0
 8002a54:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d101      	bne.n	8002a64 <HAL_SPI_TransmitReceive_IT+0x20>
 8002a60:	2302      	movs	r3, #2
 8002a62:	e091      	b.n	8002b88 <HAL_SPI_TransmitReceive_IT+0x144>
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2201      	movs	r2, #1
 8002a68:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002a72:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002a7a:	7dbb      	ldrb	r3, [r7, #22]
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d00d      	beq.n	8002a9c <HAL_SPI_TransmitReceive_IT+0x58>
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a86:	d106      	bne.n	8002a96 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d102      	bne.n	8002a96 <HAL_SPI_TransmitReceive_IT+0x52>
 8002a90:	7dbb      	ldrb	r3, [r7, #22]
 8002a92:	2b04      	cmp	r3, #4
 8002a94:	d002      	beq.n	8002a9c <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8002a96:	2302      	movs	r3, #2
 8002a98:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002a9a:	e070      	b.n	8002b7e <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d005      	beq.n	8002aae <HAL_SPI_TransmitReceive_IT+0x6a>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d002      	beq.n	8002aae <HAL_SPI_TransmitReceive_IT+0x6a>
 8002aa8:	887b      	ldrh	r3, [r7, #2]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d102      	bne.n	8002ab4 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002ab2:	e064      	b.n	8002b7e <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	2b04      	cmp	r3, #4
 8002abe:	d003      	beq.n	8002ac8 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2205      	movs	r2, #5
 8002ac4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2200      	movs	r2, #0
 8002acc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	68ba      	ldr	r2, [r7, #8]
 8002ad2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	887a      	ldrh	r2, [r7, #2]
 8002ad8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	887a      	ldrh	r2, [r7, #2]
 8002ade:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	887a      	ldrh	r2, [r7, #2]
 8002aea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	887a      	ldrh	r2, [r7, #2]
 8002af2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	68db      	ldr	r3, [r3, #12]
 8002afa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002afe:	d906      	bls.n	8002b0e <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	4a24      	ldr	r2, [pc, #144]	; (8002b94 <HAL_SPI_TransmitReceive_IT+0x150>)
 8002b04:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	4a23      	ldr	r2, [pc, #140]	; (8002b98 <HAL_SPI_TransmitReceive_IT+0x154>)
 8002b0a:	651a      	str	r2, [r3, #80]	; 0x50
 8002b0c:	e005      	b.n	8002b1a <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	4a22      	ldr	r2, [pc, #136]	; (8002b9c <HAL_SPI_TransmitReceive_IT+0x158>)
 8002b12:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	4a22      	ldr	r2, [pc, #136]	; (8002ba0 <HAL_SPI_TransmitReceive_IT+0x15c>)
 8002b18:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002b22:	d802      	bhi.n	8002b2a <HAL_SPI_TransmitReceive_IT+0xe6>
 8002b24:	887b      	ldrh	r3, [r7, #2]
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d908      	bls.n	8002b3c <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	685a      	ldr	r2, [r3, #4]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002b38:	605a      	str	r2, [r3, #4]
 8002b3a:	e007      	b.n	8002b4c <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	685a      	ldr	r2, [r3, #4]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002b4a:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	685a      	ldr	r2, [r3, #4]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8002b5a:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b66:	2b40      	cmp	r3, #64	; 0x40
 8002b68:	d008      	beq.n	8002b7c <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b78:	601a      	str	r2, [r3, #0]
 8002b7a:	e000      	b.n	8002b7e <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 8002b7c:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2200      	movs	r2, #0
 8002b82:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002b86:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	371c      	adds	r7, #28
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr
 8002b94:	08002f5b 	.word	0x08002f5b
 8002b98:	08002fc1 	.word	0x08002fc1
 8002b9c:	08002e0b 	.word	0x08002e0b
 8002ba0:	08002ec9 	.word	0x08002ec9

08002ba4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b088      	sub	sp, #32
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002bbc:	69bb      	ldr	r3, [r7, #24]
 8002bbe:	099b      	lsrs	r3, r3, #6
 8002bc0:	f003 0301 	and.w	r3, r3, #1
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d10f      	bne.n	8002be8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002bc8:	69bb      	ldr	r3, [r7, #24]
 8002bca:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d00a      	beq.n	8002be8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	099b      	lsrs	r3, r3, #6
 8002bd6:	f003 0301 	and.w	r3, r3, #1
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d004      	beq.n	8002be8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	4798      	blx	r3
    return;
 8002be6:	e0d7      	b.n	8002d98 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002be8:	69bb      	ldr	r3, [r7, #24]
 8002bea:	085b      	lsrs	r3, r3, #1
 8002bec:	f003 0301 	and.w	r3, r3, #1
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d00a      	beq.n	8002c0a <HAL_SPI_IRQHandler+0x66>
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	09db      	lsrs	r3, r3, #7
 8002bf8:	f003 0301 	and.w	r3, r3, #1
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d004      	beq.n	8002c0a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	4798      	blx	r3
    return;
 8002c08:	e0c6      	b.n	8002d98 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002c0a:	69bb      	ldr	r3, [r7, #24]
 8002c0c:	095b      	lsrs	r3, r3, #5
 8002c0e:	f003 0301 	and.w	r3, r3, #1
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d10c      	bne.n	8002c30 <HAL_SPI_IRQHandler+0x8c>
 8002c16:	69bb      	ldr	r3, [r7, #24]
 8002c18:	099b      	lsrs	r3, r3, #6
 8002c1a:	f003 0301 	and.w	r3, r3, #1
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d106      	bne.n	8002c30 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002c22:	69bb      	ldr	r3, [r7, #24]
 8002c24:	0a1b      	lsrs	r3, r3, #8
 8002c26:	f003 0301 	and.w	r3, r3, #1
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	f000 80b4 	beq.w	8002d98 <HAL_SPI_IRQHandler+0x1f4>
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	095b      	lsrs	r3, r3, #5
 8002c34:	f003 0301 	and.w	r3, r3, #1
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	f000 80ad 	beq.w	8002d98 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002c3e:	69bb      	ldr	r3, [r7, #24]
 8002c40:	099b      	lsrs	r3, r3, #6
 8002c42:	f003 0301 	and.w	r3, r3, #1
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d023      	beq.n	8002c92 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	2b03      	cmp	r3, #3
 8002c54:	d011      	beq.n	8002c7a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c5a:	f043 0204 	orr.w	r2, r3, #4
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002c62:	2300      	movs	r3, #0
 8002c64:	617b      	str	r3, [r7, #20]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	617b      	str	r3, [r7, #20]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	617b      	str	r3, [r7, #20]
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	e00b      	b.n	8002c92 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	613b      	str	r3, [r7, #16]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	613b      	str	r3, [r7, #16]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	613b      	str	r3, [r7, #16]
 8002c8e:	693b      	ldr	r3, [r7, #16]
        return;
 8002c90:	e082      	b.n	8002d98 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002c92:	69bb      	ldr	r3, [r7, #24]
 8002c94:	095b      	lsrs	r3, r3, #5
 8002c96:	f003 0301 	and.w	r3, r3, #1
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d014      	beq.n	8002cc8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ca2:	f043 0201 	orr.w	r2, r3, #1
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002caa:	2300      	movs	r3, #0
 8002cac:	60fb      	str	r3, [r7, #12]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	60fb      	str	r3, [r7, #12]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cc4:	601a      	str	r2, [r3, #0]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	0a1b      	lsrs	r3, r3, #8
 8002ccc:	f003 0301 	and.w	r3, r3, #1
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d00c      	beq.n	8002cee <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cd8:	f043 0208 	orr.w	r2, r3, #8
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	60bb      	str	r3, [r7, #8]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	60bb      	str	r3, [r7, #8]
 8002cec:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d04f      	beq.n	8002d96 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	685a      	ldr	r2, [r3, #4]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002d04:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2201      	movs	r2, #1
 8002d0a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	f003 0302 	and.w	r3, r3, #2
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d104      	bne.n	8002d22 <HAL_SPI_IRQHandler+0x17e>
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	f003 0301 	and.w	r3, r3, #1
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d034      	beq.n	8002d8c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	685a      	ldr	r2, [r3, #4]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f022 0203 	bic.w	r2, r2, #3
 8002d30:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d011      	beq.n	8002d5e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d3e:	4a18      	ldr	r2, [pc, #96]	; (8002da0 <HAL_SPI_IRQHandler+0x1fc>)
 8002d40:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d46:	4618      	mov	r0, r3
 8002d48:	f7fe f889 	bl	8000e5e <HAL_DMA_Abort_IT>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d005      	beq.n	8002d5e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d56:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d016      	beq.n	8002d94 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d6a:	4a0d      	ldr	r2, [pc, #52]	; (8002da0 <HAL_SPI_IRQHandler+0x1fc>)
 8002d6c:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d72:	4618      	mov	r0, r3
 8002d74:	f7fe f873 	bl	8000e5e <HAL_DMA_Abort_IT>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d00a      	beq.n	8002d94 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d82:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8002d8a:	e003      	b.n	8002d94 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	f000 f81d 	bl	8002dcc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002d92:	e000      	b.n	8002d96 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8002d94:	bf00      	nop
    return;
 8002d96:	bf00      	nop
  }
}
 8002d98:	3720      	adds	r7, #32
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	08002de1 	.word	0x08002de1

08002da4 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8002dac:	bf00      	nop
 8002dae:	370c      	adds	r7, #12
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr

08002db8 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8002dc0:	bf00      	nop
 8002dc2:	370c      	adds	r7, #12
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr

08002dcc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b083      	sub	sp, #12
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002dd4:	bf00      	nop
 8002dd6:	370c      	adds	r7, #12
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr

08002de0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b084      	sub	sp, #16
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dec:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2200      	movs	r2, #0
 8002df2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002dfc:	68f8      	ldr	r0, [r7, #12]
 8002dfe:	f7ff ffe5 	bl	8002dcc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002e02:	bf00      	nop
 8002e04:	3710      	adds	r7, #16
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}

08002e0a <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002e0a:	b580      	push	{r7, lr}
 8002e0c:	b082      	sub	sp, #8
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d923      	bls.n	8002e66 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	68da      	ldr	r2, [r3, #12]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e28:	b292      	uxth	r2, r2
 8002e2a:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e30:	1c9a      	adds	r2, r3, #2
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	3b02      	subs	r3, #2
 8002e40:	b29a      	uxth	r2, r3
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002e4e:	b29b      	uxth	r3, r3
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d11f      	bne.n	8002e94 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	685a      	ldr	r2, [r3, #4]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002e62:	605a      	str	r2, [r3, #4]
 8002e64:	e016      	b.n	8002e94 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f103 020c 	add.w	r2, r3, #12
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e72:	7812      	ldrb	r2, [r2, #0]
 8002e74:	b2d2      	uxtb	r2, r2
 8002e76:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7c:	1c5a      	adds	r2, r3, #1
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002e88:	b29b      	uxth	r3, r3
 8002e8a:	3b01      	subs	r3, #1
 8002e8c:	b29a      	uxth	r2, r3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d10f      	bne.n	8002ec0 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	685a      	ldr	r2, [r3, #4]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002eae:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002eb4:	b29b      	uxth	r3, r3
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d102      	bne.n	8002ec0 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f000 fa14 	bl	80032e8 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002ec0:	bf00      	nop
 8002ec2:	3708      	adds	r7, #8
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}

08002ec8 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b082      	sub	sp, #8
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ed4:	b29b      	uxth	r3, r3
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d912      	bls.n	8002f00 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ede:	881a      	ldrh	r2, [r3, #0]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eea:	1c9a      	adds	r2, r3, #2
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ef4:	b29b      	uxth	r3, r3
 8002ef6:	3b02      	subs	r3, #2
 8002ef8:	b29a      	uxth	r2, r3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002efe:	e012      	b.n	8002f26 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	330c      	adds	r3, #12
 8002f0a:	7812      	ldrb	r2, [r2, #0]
 8002f0c:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f12:	1c5a      	adds	r2, r3, #1
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	3b01      	subs	r3, #1
 8002f20:	b29a      	uxth	r2, r3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d110      	bne.n	8002f52 <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	685a      	ldr	r2, [r3, #4]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f3e:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d102      	bne.n	8002f52 <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	f000 f9cb 	bl	80032e8 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002f52:	bf00      	nop
 8002f54:	3708      	adds	r7, #8
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}

08002f5a <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002f5a:	b580      	push	{r7, lr}
 8002f5c:	b082      	sub	sp, #8
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	68da      	ldr	r2, [r3, #12]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6c:	b292      	uxth	r2, r2
 8002f6e:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f74:	1c9a      	adds	r2, r3, #2
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	3b01      	subs	r3, #1
 8002f84:	b29a      	uxth	r2, r3
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d10f      	bne.n	8002fb8 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	685a      	ldr	r2, [r3, #4]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fa6:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fac:	b29b      	uxth	r3, r3
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d102      	bne.n	8002fb8 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f000 f998 	bl	80032e8 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002fb8:	bf00      	nop
 8002fba:	3708      	adds	r7, #8
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b082      	sub	sp, #8
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fcc:	881a      	ldrh	r2, [r3, #0]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fd8:	1c9a      	adds	r2, r3, #2
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	3b01      	subs	r3, #1
 8002fe6:	b29a      	uxth	r2, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d110      	bne.n	8003018 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	685a      	ldr	r2, [r3, #4]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003004:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800300c:	b29b      	uxth	r3, r3
 800300e:	2b00      	cmp	r3, #0
 8003010:	d102      	bne.n	8003018 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f000 f968 	bl	80032e8 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003018:	bf00      	nop
 800301a:	3708      	adds	r7, #8
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}

08003020 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b088      	sub	sp, #32
 8003024:	af00      	add	r7, sp, #0
 8003026:	60f8      	str	r0, [r7, #12]
 8003028:	60b9      	str	r1, [r7, #8]
 800302a:	603b      	str	r3, [r7, #0]
 800302c:	4613      	mov	r3, r2
 800302e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003030:	f7fd fdba 	bl	8000ba8 <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003038:	1a9b      	subs	r3, r3, r2
 800303a:	683a      	ldr	r2, [r7, #0]
 800303c:	4413      	add	r3, r2
 800303e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003040:	f7fd fdb2 	bl	8000ba8 <HAL_GetTick>
 8003044:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003046:	4b39      	ldr	r3, [pc, #228]	; (800312c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	015b      	lsls	r3, r3, #5
 800304c:	0d1b      	lsrs	r3, r3, #20
 800304e:	69fa      	ldr	r2, [r7, #28]
 8003050:	fb02 f303 	mul.w	r3, r2, r3
 8003054:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003056:	e054      	b.n	8003102 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800305e:	d050      	beq.n	8003102 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003060:	f7fd fda2 	bl	8000ba8 <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	69bb      	ldr	r3, [r7, #24]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	69fa      	ldr	r2, [r7, #28]
 800306c:	429a      	cmp	r2, r3
 800306e:	d902      	bls.n	8003076 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d13d      	bne.n	80030f2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	685a      	ldr	r2, [r3, #4]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003084:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800308e:	d111      	bne.n	80030b4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003098:	d004      	beq.n	80030a4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030a2:	d107      	bne.n	80030b4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030bc:	d10f      	bne.n	80030de <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80030cc:	601a      	str	r2, [r3, #0]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80030dc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2201      	movs	r2, #1
 80030e2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2200      	movs	r2, #0
 80030ea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80030ee:	2303      	movs	r3, #3
 80030f0:	e017      	b.n	8003122 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d101      	bne.n	80030fc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80030f8:	2300      	movs	r3, #0
 80030fa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	3b01      	subs	r3, #1
 8003100:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	689a      	ldr	r2, [r3, #8]
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	4013      	ands	r3, r2
 800310c:	68ba      	ldr	r2, [r7, #8]
 800310e:	429a      	cmp	r2, r3
 8003110:	bf0c      	ite	eq
 8003112:	2301      	moveq	r3, #1
 8003114:	2300      	movne	r3, #0
 8003116:	b2db      	uxtb	r3, r3
 8003118:	461a      	mov	r2, r3
 800311a:	79fb      	ldrb	r3, [r7, #7]
 800311c:	429a      	cmp	r2, r3
 800311e:	d19b      	bne.n	8003058 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003120:	2300      	movs	r3, #0
}
 8003122:	4618      	mov	r0, r3
 8003124:	3720      	adds	r7, #32
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	2000000c 	.word	0x2000000c

08003130 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b08a      	sub	sp, #40	; 0x28
 8003134:	af00      	add	r7, sp, #0
 8003136:	60f8      	str	r0, [r7, #12]
 8003138:	60b9      	str	r1, [r7, #8]
 800313a:	607a      	str	r2, [r7, #4]
 800313c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800313e:	2300      	movs	r3, #0
 8003140:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003142:	f7fd fd31 	bl	8000ba8 <HAL_GetTick>
 8003146:	4602      	mov	r2, r0
 8003148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800314a:	1a9b      	subs	r3, r3, r2
 800314c:	683a      	ldr	r2, [r7, #0]
 800314e:	4413      	add	r3, r2
 8003150:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003152:	f7fd fd29 	bl	8000ba8 <HAL_GetTick>
 8003156:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	330c      	adds	r3, #12
 800315e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003160:	4b3d      	ldr	r3, [pc, #244]	; (8003258 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	4613      	mov	r3, r2
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	4413      	add	r3, r2
 800316a:	00da      	lsls	r2, r3, #3
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	0d1b      	lsrs	r3, r3, #20
 8003170:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003172:	fb02 f303 	mul.w	r3, r2, r3
 8003176:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003178:	e060      	b.n	800323c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003180:	d107      	bne.n	8003192 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d104      	bne.n	8003192 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003188:	69fb      	ldr	r3, [r7, #28]
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	b2db      	uxtb	r3, r3
 800318e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003190:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003198:	d050      	beq.n	800323c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800319a:	f7fd fd05 	bl	8000ba8 <HAL_GetTick>
 800319e:	4602      	mov	r2, r0
 80031a0:	6a3b      	ldr	r3, [r7, #32]
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d902      	bls.n	80031b0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80031aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d13d      	bne.n	800322c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	685a      	ldr	r2, [r3, #4]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80031be:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031c8:	d111      	bne.n	80031ee <SPI_WaitFifoStateUntilTimeout+0xbe>
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031d2:	d004      	beq.n	80031de <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031dc:	d107      	bne.n	80031ee <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031ec:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031f6:	d10f      	bne.n	8003218 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003206:	601a      	str	r2, [r3, #0]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003216:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2201      	movs	r2, #1
 800321c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2200      	movs	r2, #0
 8003224:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003228:	2303      	movs	r3, #3
 800322a:	e010      	b.n	800324e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800322c:	69bb      	ldr	r3, [r7, #24]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d101      	bne.n	8003236 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003232:	2300      	movs	r3, #0
 8003234:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003236:	69bb      	ldr	r3, [r7, #24]
 8003238:	3b01      	subs	r3, #1
 800323a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	689a      	ldr	r2, [r3, #8]
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	4013      	ands	r3, r2
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	429a      	cmp	r2, r3
 800324a:	d196      	bne.n	800317a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800324c:	2300      	movs	r3, #0
}
 800324e:	4618      	mov	r0, r3
 8003250:	3728      	adds	r7, #40	; 0x28
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	2000000c 	.word	0x2000000c

0800325c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b086      	sub	sp, #24
 8003260:	af02      	add	r7, sp, #8
 8003262:	60f8      	str	r0, [r7, #12]
 8003264:	60b9      	str	r1, [r7, #8]
 8003266:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	9300      	str	r3, [sp, #0]
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	2200      	movs	r2, #0
 8003270:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003274:	68f8      	ldr	r0, [r7, #12]
 8003276:	f7ff ff5b 	bl	8003130 <SPI_WaitFifoStateUntilTimeout>
 800327a:	4603      	mov	r3, r0
 800327c:	2b00      	cmp	r3, #0
 800327e:	d007      	beq.n	8003290 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003284:	f043 0220 	orr.w	r2, r3, #32
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800328c:	2303      	movs	r3, #3
 800328e:	e027      	b.n	80032e0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	9300      	str	r3, [sp, #0]
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	2200      	movs	r2, #0
 8003298:	2180      	movs	r1, #128	; 0x80
 800329a:	68f8      	ldr	r0, [r7, #12]
 800329c:	f7ff fec0 	bl	8003020 <SPI_WaitFlagStateUntilTimeout>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d007      	beq.n	80032b6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032aa:	f043 0220 	orr.w	r2, r3, #32
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e014      	b.n	80032e0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	9300      	str	r3, [sp, #0]
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	2200      	movs	r2, #0
 80032be:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80032c2:	68f8      	ldr	r0, [r7, #12]
 80032c4:	f7ff ff34 	bl	8003130 <SPI_WaitFifoStateUntilTimeout>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d007      	beq.n	80032de <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032d2:	f043 0220 	orr.w	r2, r3, #32
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e000      	b.n	80032e0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80032de:	2300      	movs	r3, #0
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3710      	adds	r7, #16
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80032f0:	f7fd fc5a 	bl	8000ba8 <HAL_GetTick>
 80032f4:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	685a      	ldr	r2, [r3, #4]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f022 0220 	bic.w	r2, r2, #32
 8003304:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003306:	68fa      	ldr	r2, [r7, #12]
 8003308:	2164      	movs	r1, #100	; 0x64
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f7ff ffa6 	bl	800325c <SPI_EndRxTxTransaction>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d005      	beq.n	8003322 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800331a:	f043 0220 	orr.w	r2, r3, #32
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003326:	2b00      	cmp	r3, #0
 8003328:	d115      	bne.n	8003356 <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003330:	b2db      	uxtb	r3, r3
 8003332:	2b04      	cmp	r3, #4
 8003334:	d107      	bne.n	8003346 <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2201      	movs	r2, #1
 800333a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f7ff fd30 	bl	8002da4 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8003344:	e00e      	b.n	8003364 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2201      	movs	r2, #1
 800334a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f7ff fd32 	bl	8002db8 <HAL_SPI_TxRxCpltCallback>
}
 8003354:	e006      	b.n	8003364 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2201      	movs	r2, #1
 800335a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f7ff fd34 	bl	8002dcc <HAL_SPI_ErrorCallback>
}
 8003364:	bf00      	nop
 8003366:	3710      	adds	r7, #16
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}

0800336c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b082      	sub	sp, #8
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d101      	bne.n	800337e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e040      	b.n	8003400 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003382:	2b00      	cmp	r3, #0
 8003384:	d106      	bne.n	8003394 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f7fd f9d4 	bl	800073c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2224      	movs	r2, #36	; 0x24
 8003398:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f022 0201 	bic.w	r2, r2, #1
 80033a8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f000 fbc2 	bl	8003b34 <UART_SetConfig>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d101      	bne.n	80033ba <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e022      	b.n	8003400 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d002      	beq.n	80033c8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f000 fe6e 	bl	80040a4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	685a      	ldr	r2, [r3, #4]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80033d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	689a      	ldr	r2, [r3, #8]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80033e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f042 0201 	orr.w	r2, r2, #1
 80033f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	f000 fef5 	bl	80041e8 <UART_CheckIdleState>
 80033fe:	4603      	mov	r3, r0
}
 8003400:	4618      	mov	r0, r3
 8003402:	3708      	adds	r7, #8
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}

08003408 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b08a      	sub	sp, #40	; 0x28
 800340c:	af02      	add	r7, sp, #8
 800340e:	60f8      	str	r0, [r7, #12]
 8003410:	60b9      	str	r1, [r7, #8]
 8003412:	603b      	str	r3, [r7, #0]
 8003414:	4613      	mov	r3, r2
 8003416:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800341c:	2b20      	cmp	r3, #32
 800341e:	f040 8082 	bne.w	8003526 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d002      	beq.n	800342e <HAL_UART_Transmit+0x26>
 8003428:	88fb      	ldrh	r3, [r7, #6]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d101      	bne.n	8003432 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e07a      	b.n	8003528 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003438:	2b01      	cmp	r3, #1
 800343a:	d101      	bne.n	8003440 <HAL_UART_Transmit+0x38>
 800343c:	2302      	movs	r3, #2
 800343e:	e073      	b.n	8003528 <HAL_UART_Transmit+0x120>
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2201      	movs	r2, #1
 8003444:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2200      	movs	r2, #0
 800344c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2221      	movs	r2, #33	; 0x21
 8003454:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003456:	f7fd fba7 	bl	8000ba8 <HAL_GetTick>
 800345a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	88fa      	ldrh	r2, [r7, #6]
 8003460:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	88fa      	ldrh	r2, [r7, #6]
 8003468:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003474:	d108      	bne.n	8003488 <HAL_UART_Transmit+0x80>
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	691b      	ldr	r3, [r3, #16]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d104      	bne.n	8003488 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800347e:	2300      	movs	r3, #0
 8003480:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	61bb      	str	r3, [r7, #24]
 8003486:	e003      	b.n	8003490 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800348c:	2300      	movs	r3, #0
 800348e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2200      	movs	r2, #0
 8003494:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003498:	e02d      	b.n	80034f6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	9300      	str	r3, [sp, #0]
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	2200      	movs	r2, #0
 80034a2:	2180      	movs	r1, #128	; 0x80
 80034a4:	68f8      	ldr	r0, [r7, #12]
 80034a6:	f000 fee8 	bl	800427a <UART_WaitOnFlagUntilTimeout>
 80034aa:	4603      	mov	r3, r0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d001      	beq.n	80034b4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80034b0:	2303      	movs	r3, #3
 80034b2:	e039      	b.n	8003528 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80034b4:	69fb      	ldr	r3, [r7, #28]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d10b      	bne.n	80034d2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80034ba:	69bb      	ldr	r3, [r7, #24]
 80034bc:	881a      	ldrh	r2, [r3, #0]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034c6:	b292      	uxth	r2, r2
 80034c8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80034ca:	69bb      	ldr	r3, [r7, #24]
 80034cc:	3302      	adds	r3, #2
 80034ce:	61bb      	str	r3, [r7, #24]
 80034d0:	e008      	b.n	80034e4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	781a      	ldrb	r2, [r3, #0]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	b292      	uxth	r2, r2
 80034dc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	3301      	adds	r3, #1
 80034e2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80034ea:	b29b      	uxth	r3, r3
 80034ec:	3b01      	subs	r3, #1
 80034ee:	b29a      	uxth	r2, r3
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80034fc:	b29b      	uxth	r3, r3
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d1cb      	bne.n	800349a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	9300      	str	r3, [sp, #0]
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	2200      	movs	r2, #0
 800350a:	2140      	movs	r1, #64	; 0x40
 800350c:	68f8      	ldr	r0, [r7, #12]
 800350e:	f000 feb4 	bl	800427a <UART_WaitOnFlagUntilTimeout>
 8003512:	4603      	mov	r3, r0
 8003514:	2b00      	cmp	r3, #0
 8003516:	d001      	beq.n	800351c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003518:	2303      	movs	r3, #3
 800351a:	e005      	b.n	8003528 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2220      	movs	r2, #32
 8003520:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003522:	2300      	movs	r3, #0
 8003524:	e000      	b.n	8003528 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003526:	2302      	movs	r3, #2
  }
}
 8003528:	4618      	mov	r0, r3
 800352a:	3720      	adds	r7, #32
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}

08003530 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b0ba      	sub	sp, #232	; 0xe8
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	69db      	ldr	r3, [r3, #28]
 800353e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003556:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800355a:	f640 030f 	movw	r3, #2063	; 0x80f
 800355e:	4013      	ands	r3, r2
 8003560:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003564:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003568:	2b00      	cmp	r3, #0
 800356a:	d115      	bne.n	8003598 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800356c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003570:	f003 0320 	and.w	r3, r3, #32
 8003574:	2b00      	cmp	r3, #0
 8003576:	d00f      	beq.n	8003598 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003578:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800357c:	f003 0320 	and.w	r3, r3, #32
 8003580:	2b00      	cmp	r3, #0
 8003582:	d009      	beq.n	8003598 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003588:	2b00      	cmp	r3, #0
 800358a:	f000 82a6 	beq.w	8003ada <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	4798      	blx	r3
      }
      return;
 8003596:	e2a0      	b.n	8003ada <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003598:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800359c:	2b00      	cmp	r3, #0
 800359e:	f000 8117 	beq.w	80037d0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80035a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80035a6:	f003 0301 	and.w	r3, r3, #1
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d106      	bne.n	80035bc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80035ae:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80035b2:	4b85      	ldr	r3, [pc, #532]	; (80037c8 <HAL_UART_IRQHandler+0x298>)
 80035b4:	4013      	ands	r3, r2
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	f000 810a 	beq.w	80037d0 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80035bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035c0:	f003 0301 	and.w	r3, r3, #1
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d011      	beq.n	80035ec <HAL_UART_IRQHandler+0xbc>
 80035c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d00b      	beq.n	80035ec <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	2201      	movs	r2, #1
 80035da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035e2:	f043 0201 	orr.w	r2, r3, #1
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80035ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035f0:	f003 0302 	and.w	r3, r3, #2
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d011      	beq.n	800361c <HAL_UART_IRQHandler+0xec>
 80035f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80035fc:	f003 0301 	and.w	r3, r3, #1
 8003600:	2b00      	cmp	r3, #0
 8003602:	d00b      	beq.n	800361c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	2202      	movs	r2, #2
 800360a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003612:	f043 0204 	orr.w	r2, r3, #4
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800361c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003620:	f003 0304 	and.w	r3, r3, #4
 8003624:	2b00      	cmp	r3, #0
 8003626:	d011      	beq.n	800364c <HAL_UART_IRQHandler+0x11c>
 8003628:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800362c:	f003 0301 	and.w	r3, r3, #1
 8003630:	2b00      	cmp	r3, #0
 8003632:	d00b      	beq.n	800364c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	2204      	movs	r2, #4
 800363a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003642:	f043 0202 	orr.w	r2, r3, #2
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800364c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003650:	f003 0308 	and.w	r3, r3, #8
 8003654:	2b00      	cmp	r3, #0
 8003656:	d017      	beq.n	8003688 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003658:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800365c:	f003 0320 	and.w	r3, r3, #32
 8003660:	2b00      	cmp	r3, #0
 8003662:	d105      	bne.n	8003670 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003664:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003668:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800366c:	2b00      	cmp	r3, #0
 800366e:	d00b      	beq.n	8003688 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	2208      	movs	r2, #8
 8003676:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800367e:	f043 0208 	orr.w	r2, r3, #8
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003688:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800368c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003690:	2b00      	cmp	r3, #0
 8003692:	d012      	beq.n	80036ba <HAL_UART_IRQHandler+0x18a>
 8003694:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003698:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800369c:	2b00      	cmp	r3, #0
 800369e:	d00c      	beq.n	80036ba <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80036a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036b0:	f043 0220 	orr.w	r2, r3, #32
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	f000 820c 	beq.w	8003ade <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80036c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036ca:	f003 0320 	and.w	r3, r3, #32
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d00d      	beq.n	80036ee <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80036d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036d6:	f003 0320 	and.w	r3, r3, #32
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d007      	beq.n	80036ee <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d003      	beq.n	80036ee <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036f4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003702:	2b40      	cmp	r3, #64	; 0x40
 8003704:	d005      	beq.n	8003712 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003706:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800370a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800370e:	2b00      	cmp	r3, #0
 8003710:	d04f      	beq.n	80037b2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f000 fe75 	bl	8004402 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003722:	2b40      	cmp	r3, #64	; 0x40
 8003724:	d141      	bne.n	80037aa <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	3308      	adds	r3, #8
 800372c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003730:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003734:	e853 3f00 	ldrex	r3, [r3]
 8003738:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800373c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003740:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003744:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	3308      	adds	r3, #8
 800374e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003752:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003756:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800375a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800375e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003762:	e841 2300 	strex	r3, r2, [r1]
 8003766:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800376a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800376e:	2b00      	cmp	r3, #0
 8003770:	d1d9      	bne.n	8003726 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003776:	2b00      	cmp	r3, #0
 8003778:	d013      	beq.n	80037a2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800377e:	4a13      	ldr	r2, [pc, #76]	; (80037cc <HAL_UART_IRQHandler+0x29c>)
 8003780:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003786:	4618      	mov	r0, r3
 8003788:	f7fd fb69 	bl	8000e5e <HAL_DMA_Abort_IT>
 800378c:	4603      	mov	r3, r0
 800378e:	2b00      	cmp	r3, #0
 8003790:	d017      	beq.n	80037c2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003798:	687a      	ldr	r2, [r7, #4]
 800379a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800379c:	4610      	mov	r0, r2
 800379e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037a0:	e00f      	b.n	80037c2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 f9b0 	bl	8003b08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037a8:	e00b      	b.n	80037c2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f000 f9ac 	bl	8003b08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037b0:	e007      	b.n	80037c2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f000 f9a8 	bl	8003b08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80037c0:	e18d      	b.n	8003ade <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037c2:	bf00      	nop
    return;
 80037c4:	e18b      	b.n	8003ade <HAL_UART_IRQHandler+0x5ae>
 80037c6:	bf00      	nop
 80037c8:	04000120 	.word	0x04000120
 80037cc:	080044c9 	.word	0x080044c9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	f040 8146 	bne.w	8003a66 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80037da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037de:	f003 0310 	and.w	r3, r3, #16
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	f000 813f 	beq.w	8003a66 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80037e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037ec:	f003 0310 	and.w	r3, r3, #16
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	f000 8138 	beq.w	8003a66 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	2210      	movs	r2, #16
 80037fc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003808:	2b40      	cmp	r3, #64	; 0x40
 800380a:	f040 80b4 	bne.w	8003976 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800381a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800381e:	2b00      	cmp	r3, #0
 8003820:	f000 815f 	beq.w	8003ae2 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800382a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800382e:	429a      	cmp	r2, r3
 8003830:	f080 8157 	bcs.w	8003ae2 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800383a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 0320 	and.w	r3, r3, #32
 800384a:	2b00      	cmp	r3, #0
 800384c:	f040 8085 	bne.w	800395a <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003858:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800385c:	e853 3f00 	ldrex	r3, [r3]
 8003860:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003864:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003868:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800386c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	461a      	mov	r2, r3
 8003876:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800387a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800387e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003882:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003886:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800388a:	e841 2300 	strex	r3, r2, [r1]
 800388e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003892:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003896:	2b00      	cmp	r3, #0
 8003898:	d1da      	bne.n	8003850 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	3308      	adds	r3, #8
 80038a0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038a4:	e853 3f00 	ldrex	r3, [r3]
 80038a8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80038aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80038ac:	f023 0301 	bic.w	r3, r3, #1
 80038b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	3308      	adds	r3, #8
 80038ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80038be:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80038c2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038c4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80038c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80038ca:	e841 2300 	strex	r3, r2, [r1]
 80038ce:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80038d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d1e1      	bne.n	800389a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	3308      	adds	r3, #8
 80038dc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80038e0:	e853 3f00 	ldrex	r3, [r3]
 80038e4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80038e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	3308      	adds	r3, #8
 80038f6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80038fa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80038fc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038fe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003900:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003902:	e841 2300 	strex	r3, r2, [r1]
 8003906:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003908:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800390a:	2b00      	cmp	r3, #0
 800390c:	d1e3      	bne.n	80038d6 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2220      	movs	r2, #32
 8003912:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2200      	movs	r2, #0
 8003918:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003920:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003922:	e853 3f00 	ldrex	r3, [r3]
 8003926:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003928:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800392a:	f023 0310 	bic.w	r3, r3, #16
 800392e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	461a      	mov	r2, r3
 8003938:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800393c:	65bb      	str	r3, [r7, #88]	; 0x58
 800393e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003940:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003942:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003944:	e841 2300 	strex	r3, r2, [r1]
 8003948:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800394a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800394c:	2b00      	cmp	r3, #0
 800394e:	d1e4      	bne.n	800391a <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003954:	4618      	mov	r0, r3
 8003956:	f7fd fa44 	bl	8000de2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003966:	b29b      	uxth	r3, r3
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	b29b      	uxth	r3, r3
 800396c:	4619      	mov	r1, r3
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f000 f8d4 	bl	8003b1c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003974:	e0b5      	b.n	8003ae2 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003982:	b29b      	uxth	r3, r3
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003990:	b29b      	uxth	r3, r3
 8003992:	2b00      	cmp	r3, #0
 8003994:	f000 80a7 	beq.w	8003ae6 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8003998:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800399c:	2b00      	cmp	r3, #0
 800399e:	f000 80a2 	beq.w	8003ae6 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039aa:	e853 3f00 	ldrex	r3, [r3]
 80039ae:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80039b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039b2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80039b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	461a      	mov	r2, r3
 80039c0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80039c4:	647b      	str	r3, [r7, #68]	; 0x44
 80039c6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039c8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80039ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80039cc:	e841 2300 	strex	r3, r2, [r1]
 80039d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80039d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d1e4      	bne.n	80039a2 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	3308      	adds	r3, #8
 80039de:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e2:	e853 3f00 	ldrex	r3, [r3]
 80039e6:	623b      	str	r3, [r7, #32]
   return(result);
 80039e8:	6a3b      	ldr	r3, [r7, #32]
 80039ea:	f023 0301 	bic.w	r3, r3, #1
 80039ee:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	3308      	adds	r3, #8
 80039f8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80039fc:	633a      	str	r2, [r7, #48]	; 0x30
 80039fe:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a00:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a04:	e841 2300 	strex	r3, r2, [r1]
 8003a08:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d1e3      	bne.n	80039d8 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2220      	movs	r2, #32
 8003a14:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	e853 3f00 	ldrex	r3, [r3]
 8003a2e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f023 0310 	bic.w	r3, r3, #16
 8003a36:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	461a      	mov	r2, r3
 8003a40:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003a44:	61fb      	str	r3, [r7, #28]
 8003a46:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a48:	69b9      	ldr	r1, [r7, #24]
 8003a4a:	69fa      	ldr	r2, [r7, #28]
 8003a4c:	e841 2300 	strex	r3, r2, [r1]
 8003a50:	617b      	str	r3, [r7, #20]
   return(result);
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d1e4      	bne.n	8003a22 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003a58:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003a5c:	4619      	mov	r1, r3
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f000 f85c 	bl	8003b1c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003a64:	e03f      	b.n	8003ae6 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003a66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d00e      	beq.n	8003a90 <HAL_UART_IRQHandler+0x560>
 8003a72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d008      	beq.n	8003a90 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003a86:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	f000 fd5d 	bl	8004548 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003a8e:	e02d      	b.n	8003aec <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003a90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d00e      	beq.n	8003aba <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003a9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003aa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d008      	beq.n	8003aba <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d01c      	beq.n	8003aea <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	4798      	blx	r3
    }
    return;
 8003ab8:	e017      	b.n	8003aea <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003aba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003abe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d012      	beq.n	8003aec <HAL_UART_IRQHandler+0x5bc>
 8003ac6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003aca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d00c      	beq.n	8003aec <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f000 fd0e 	bl	80044f4 <UART_EndTransmit_IT>
    return;
 8003ad8:	e008      	b.n	8003aec <HAL_UART_IRQHandler+0x5bc>
      return;
 8003ada:	bf00      	nop
 8003adc:	e006      	b.n	8003aec <HAL_UART_IRQHandler+0x5bc>
    return;
 8003ade:	bf00      	nop
 8003ae0:	e004      	b.n	8003aec <HAL_UART_IRQHandler+0x5bc>
      return;
 8003ae2:	bf00      	nop
 8003ae4:	e002      	b.n	8003aec <HAL_UART_IRQHandler+0x5bc>
      return;
 8003ae6:	bf00      	nop
 8003ae8:	e000      	b.n	8003aec <HAL_UART_IRQHandler+0x5bc>
    return;
 8003aea:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003aec:	37e8      	adds	r7, #232	; 0xe8
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop

08003af4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b083      	sub	sp, #12
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003afc:	bf00      	nop
 8003afe:	370c      	adds	r7, #12
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr

08003b08 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b083      	sub	sp, #12
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003b10:	bf00      	nop
 8003b12:	370c      	adds	r7, #12
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr

08003b1c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b083      	sub	sp, #12
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	460b      	mov	r3, r1
 8003b26:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003b28:	bf00      	nop
 8003b2a:	370c      	adds	r7, #12
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr

08003b34 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b38:	b08a      	sub	sp, #40	; 0x28
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	689a      	ldr	r2, [r3, #8]
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	691b      	ldr	r3, [r3, #16]
 8003b4c:	431a      	orrs	r2, r3
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	695b      	ldr	r3, [r3, #20]
 8003b52:	431a      	orrs	r2, r3
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	69db      	ldr	r3, [r3, #28]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	4ba4      	ldr	r3, [pc, #656]	; (8003df4 <UART_SetConfig+0x2c0>)
 8003b64:	4013      	ands	r3, r2
 8003b66:	68fa      	ldr	r2, [r7, #12]
 8003b68:	6812      	ldr	r2, [r2, #0]
 8003b6a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b6c:	430b      	orrs	r3, r1
 8003b6e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	68da      	ldr	r2, [r3, #12]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	430a      	orrs	r2, r1
 8003b84:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	699b      	ldr	r3, [r3, #24]
 8003b8a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a99      	ldr	r2, [pc, #612]	; (8003df8 <UART_SetConfig+0x2c4>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d004      	beq.n	8003ba0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6a1b      	ldr	r3, [r3, #32]
 8003b9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bb0:	430a      	orrs	r2, r1
 8003bb2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a90      	ldr	r2, [pc, #576]	; (8003dfc <UART_SetConfig+0x2c8>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d126      	bne.n	8003c0c <UART_SetConfig+0xd8>
 8003bbe:	4b90      	ldr	r3, [pc, #576]	; (8003e00 <UART_SetConfig+0x2cc>)
 8003bc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bc4:	f003 0303 	and.w	r3, r3, #3
 8003bc8:	2b03      	cmp	r3, #3
 8003bca:	d81b      	bhi.n	8003c04 <UART_SetConfig+0xd0>
 8003bcc:	a201      	add	r2, pc, #4	; (adr r2, 8003bd4 <UART_SetConfig+0xa0>)
 8003bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bd2:	bf00      	nop
 8003bd4:	08003be5 	.word	0x08003be5
 8003bd8:	08003bf5 	.word	0x08003bf5
 8003bdc:	08003bed 	.word	0x08003bed
 8003be0:	08003bfd 	.word	0x08003bfd
 8003be4:	2301      	movs	r3, #1
 8003be6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bea:	e116      	b.n	8003e1a <UART_SetConfig+0x2e6>
 8003bec:	2302      	movs	r3, #2
 8003bee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bf2:	e112      	b.n	8003e1a <UART_SetConfig+0x2e6>
 8003bf4:	2304      	movs	r3, #4
 8003bf6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bfa:	e10e      	b.n	8003e1a <UART_SetConfig+0x2e6>
 8003bfc:	2308      	movs	r3, #8
 8003bfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c02:	e10a      	b.n	8003e1a <UART_SetConfig+0x2e6>
 8003c04:	2310      	movs	r3, #16
 8003c06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c0a:	e106      	b.n	8003e1a <UART_SetConfig+0x2e6>
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a7c      	ldr	r2, [pc, #496]	; (8003e04 <UART_SetConfig+0x2d0>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d138      	bne.n	8003c88 <UART_SetConfig+0x154>
 8003c16:	4b7a      	ldr	r3, [pc, #488]	; (8003e00 <UART_SetConfig+0x2cc>)
 8003c18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c1c:	f003 030c 	and.w	r3, r3, #12
 8003c20:	2b0c      	cmp	r3, #12
 8003c22:	d82d      	bhi.n	8003c80 <UART_SetConfig+0x14c>
 8003c24:	a201      	add	r2, pc, #4	; (adr r2, 8003c2c <UART_SetConfig+0xf8>)
 8003c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c2a:	bf00      	nop
 8003c2c:	08003c61 	.word	0x08003c61
 8003c30:	08003c81 	.word	0x08003c81
 8003c34:	08003c81 	.word	0x08003c81
 8003c38:	08003c81 	.word	0x08003c81
 8003c3c:	08003c71 	.word	0x08003c71
 8003c40:	08003c81 	.word	0x08003c81
 8003c44:	08003c81 	.word	0x08003c81
 8003c48:	08003c81 	.word	0x08003c81
 8003c4c:	08003c69 	.word	0x08003c69
 8003c50:	08003c81 	.word	0x08003c81
 8003c54:	08003c81 	.word	0x08003c81
 8003c58:	08003c81 	.word	0x08003c81
 8003c5c:	08003c79 	.word	0x08003c79
 8003c60:	2300      	movs	r3, #0
 8003c62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c66:	e0d8      	b.n	8003e1a <UART_SetConfig+0x2e6>
 8003c68:	2302      	movs	r3, #2
 8003c6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c6e:	e0d4      	b.n	8003e1a <UART_SetConfig+0x2e6>
 8003c70:	2304      	movs	r3, #4
 8003c72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c76:	e0d0      	b.n	8003e1a <UART_SetConfig+0x2e6>
 8003c78:	2308      	movs	r3, #8
 8003c7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c7e:	e0cc      	b.n	8003e1a <UART_SetConfig+0x2e6>
 8003c80:	2310      	movs	r3, #16
 8003c82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c86:	e0c8      	b.n	8003e1a <UART_SetConfig+0x2e6>
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a5e      	ldr	r2, [pc, #376]	; (8003e08 <UART_SetConfig+0x2d4>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d125      	bne.n	8003cde <UART_SetConfig+0x1aa>
 8003c92:	4b5b      	ldr	r3, [pc, #364]	; (8003e00 <UART_SetConfig+0x2cc>)
 8003c94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c98:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003c9c:	2b30      	cmp	r3, #48	; 0x30
 8003c9e:	d016      	beq.n	8003cce <UART_SetConfig+0x19a>
 8003ca0:	2b30      	cmp	r3, #48	; 0x30
 8003ca2:	d818      	bhi.n	8003cd6 <UART_SetConfig+0x1a2>
 8003ca4:	2b20      	cmp	r3, #32
 8003ca6:	d00a      	beq.n	8003cbe <UART_SetConfig+0x18a>
 8003ca8:	2b20      	cmp	r3, #32
 8003caa:	d814      	bhi.n	8003cd6 <UART_SetConfig+0x1a2>
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d002      	beq.n	8003cb6 <UART_SetConfig+0x182>
 8003cb0:	2b10      	cmp	r3, #16
 8003cb2:	d008      	beq.n	8003cc6 <UART_SetConfig+0x192>
 8003cb4:	e00f      	b.n	8003cd6 <UART_SetConfig+0x1a2>
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cbc:	e0ad      	b.n	8003e1a <UART_SetConfig+0x2e6>
 8003cbe:	2302      	movs	r3, #2
 8003cc0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cc4:	e0a9      	b.n	8003e1a <UART_SetConfig+0x2e6>
 8003cc6:	2304      	movs	r3, #4
 8003cc8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ccc:	e0a5      	b.n	8003e1a <UART_SetConfig+0x2e6>
 8003cce:	2308      	movs	r3, #8
 8003cd0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cd4:	e0a1      	b.n	8003e1a <UART_SetConfig+0x2e6>
 8003cd6:	2310      	movs	r3, #16
 8003cd8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cdc:	e09d      	b.n	8003e1a <UART_SetConfig+0x2e6>
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a4a      	ldr	r2, [pc, #296]	; (8003e0c <UART_SetConfig+0x2d8>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d125      	bne.n	8003d34 <UART_SetConfig+0x200>
 8003ce8:	4b45      	ldr	r3, [pc, #276]	; (8003e00 <UART_SetConfig+0x2cc>)
 8003cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cee:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003cf2:	2bc0      	cmp	r3, #192	; 0xc0
 8003cf4:	d016      	beq.n	8003d24 <UART_SetConfig+0x1f0>
 8003cf6:	2bc0      	cmp	r3, #192	; 0xc0
 8003cf8:	d818      	bhi.n	8003d2c <UART_SetConfig+0x1f8>
 8003cfa:	2b80      	cmp	r3, #128	; 0x80
 8003cfc:	d00a      	beq.n	8003d14 <UART_SetConfig+0x1e0>
 8003cfe:	2b80      	cmp	r3, #128	; 0x80
 8003d00:	d814      	bhi.n	8003d2c <UART_SetConfig+0x1f8>
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d002      	beq.n	8003d0c <UART_SetConfig+0x1d8>
 8003d06:	2b40      	cmp	r3, #64	; 0x40
 8003d08:	d008      	beq.n	8003d1c <UART_SetConfig+0x1e8>
 8003d0a:	e00f      	b.n	8003d2c <UART_SetConfig+0x1f8>
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d12:	e082      	b.n	8003e1a <UART_SetConfig+0x2e6>
 8003d14:	2302      	movs	r3, #2
 8003d16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d1a:	e07e      	b.n	8003e1a <UART_SetConfig+0x2e6>
 8003d1c:	2304      	movs	r3, #4
 8003d1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d22:	e07a      	b.n	8003e1a <UART_SetConfig+0x2e6>
 8003d24:	2308      	movs	r3, #8
 8003d26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d2a:	e076      	b.n	8003e1a <UART_SetConfig+0x2e6>
 8003d2c:	2310      	movs	r3, #16
 8003d2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d32:	e072      	b.n	8003e1a <UART_SetConfig+0x2e6>
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a35      	ldr	r2, [pc, #212]	; (8003e10 <UART_SetConfig+0x2dc>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d12a      	bne.n	8003d94 <UART_SetConfig+0x260>
 8003d3e:	4b30      	ldr	r3, [pc, #192]	; (8003e00 <UART_SetConfig+0x2cc>)
 8003d40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d48:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d4c:	d01a      	beq.n	8003d84 <UART_SetConfig+0x250>
 8003d4e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d52:	d81b      	bhi.n	8003d8c <UART_SetConfig+0x258>
 8003d54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d58:	d00c      	beq.n	8003d74 <UART_SetConfig+0x240>
 8003d5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d5e:	d815      	bhi.n	8003d8c <UART_SetConfig+0x258>
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d003      	beq.n	8003d6c <UART_SetConfig+0x238>
 8003d64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d68:	d008      	beq.n	8003d7c <UART_SetConfig+0x248>
 8003d6a:	e00f      	b.n	8003d8c <UART_SetConfig+0x258>
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d72:	e052      	b.n	8003e1a <UART_SetConfig+0x2e6>
 8003d74:	2302      	movs	r3, #2
 8003d76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d7a:	e04e      	b.n	8003e1a <UART_SetConfig+0x2e6>
 8003d7c:	2304      	movs	r3, #4
 8003d7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d82:	e04a      	b.n	8003e1a <UART_SetConfig+0x2e6>
 8003d84:	2308      	movs	r3, #8
 8003d86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d8a:	e046      	b.n	8003e1a <UART_SetConfig+0x2e6>
 8003d8c:	2310      	movs	r3, #16
 8003d8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d92:	e042      	b.n	8003e1a <UART_SetConfig+0x2e6>
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a17      	ldr	r2, [pc, #92]	; (8003df8 <UART_SetConfig+0x2c4>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d13a      	bne.n	8003e14 <UART_SetConfig+0x2e0>
 8003d9e:	4b18      	ldr	r3, [pc, #96]	; (8003e00 <UART_SetConfig+0x2cc>)
 8003da0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003da4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003da8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003dac:	d01a      	beq.n	8003de4 <UART_SetConfig+0x2b0>
 8003dae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003db2:	d81b      	bhi.n	8003dec <UART_SetConfig+0x2b8>
 8003db4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003db8:	d00c      	beq.n	8003dd4 <UART_SetConfig+0x2a0>
 8003dba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dbe:	d815      	bhi.n	8003dec <UART_SetConfig+0x2b8>
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d003      	beq.n	8003dcc <UART_SetConfig+0x298>
 8003dc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dc8:	d008      	beq.n	8003ddc <UART_SetConfig+0x2a8>
 8003dca:	e00f      	b.n	8003dec <UART_SetConfig+0x2b8>
 8003dcc:	2300      	movs	r3, #0
 8003dce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dd2:	e022      	b.n	8003e1a <UART_SetConfig+0x2e6>
 8003dd4:	2302      	movs	r3, #2
 8003dd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dda:	e01e      	b.n	8003e1a <UART_SetConfig+0x2e6>
 8003ddc:	2304      	movs	r3, #4
 8003dde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003de2:	e01a      	b.n	8003e1a <UART_SetConfig+0x2e6>
 8003de4:	2308      	movs	r3, #8
 8003de6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dea:	e016      	b.n	8003e1a <UART_SetConfig+0x2e6>
 8003dec:	2310      	movs	r3, #16
 8003dee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003df2:	e012      	b.n	8003e1a <UART_SetConfig+0x2e6>
 8003df4:	efff69f3 	.word	0xefff69f3
 8003df8:	40008000 	.word	0x40008000
 8003dfc:	40013800 	.word	0x40013800
 8003e00:	40021000 	.word	0x40021000
 8003e04:	40004400 	.word	0x40004400
 8003e08:	40004800 	.word	0x40004800
 8003e0c:	40004c00 	.word	0x40004c00
 8003e10:	40005000 	.word	0x40005000
 8003e14:	2310      	movs	r3, #16
 8003e16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a9f      	ldr	r2, [pc, #636]	; (800409c <UART_SetConfig+0x568>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d17a      	bne.n	8003f1a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003e24:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003e28:	2b08      	cmp	r3, #8
 8003e2a:	d824      	bhi.n	8003e76 <UART_SetConfig+0x342>
 8003e2c:	a201      	add	r2, pc, #4	; (adr r2, 8003e34 <UART_SetConfig+0x300>)
 8003e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e32:	bf00      	nop
 8003e34:	08003e59 	.word	0x08003e59
 8003e38:	08003e77 	.word	0x08003e77
 8003e3c:	08003e61 	.word	0x08003e61
 8003e40:	08003e77 	.word	0x08003e77
 8003e44:	08003e67 	.word	0x08003e67
 8003e48:	08003e77 	.word	0x08003e77
 8003e4c:	08003e77 	.word	0x08003e77
 8003e50:	08003e77 	.word	0x08003e77
 8003e54:	08003e6f 	.word	0x08003e6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e58:	f7fd fffa 	bl	8001e50 <HAL_RCC_GetPCLK1Freq>
 8003e5c:	61f8      	str	r0, [r7, #28]
        break;
 8003e5e:	e010      	b.n	8003e82 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e60:	4b8f      	ldr	r3, [pc, #572]	; (80040a0 <UART_SetConfig+0x56c>)
 8003e62:	61fb      	str	r3, [r7, #28]
        break;
 8003e64:	e00d      	b.n	8003e82 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e66:	f7fd ff5b 	bl	8001d20 <HAL_RCC_GetSysClockFreq>
 8003e6a:	61f8      	str	r0, [r7, #28]
        break;
 8003e6c:	e009      	b.n	8003e82 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e72:	61fb      	str	r3, [r7, #28]
        break;
 8003e74:	e005      	b.n	8003e82 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003e76:	2300      	movs	r3, #0
 8003e78:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003e80:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	f000 80fb 	beq.w	8004080 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	685a      	ldr	r2, [r3, #4]
 8003e8e:	4613      	mov	r3, r2
 8003e90:	005b      	lsls	r3, r3, #1
 8003e92:	4413      	add	r3, r2
 8003e94:	69fa      	ldr	r2, [r7, #28]
 8003e96:	429a      	cmp	r2, r3
 8003e98:	d305      	bcc.n	8003ea6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003ea0:	69fa      	ldr	r2, [r7, #28]
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d903      	bls.n	8003eae <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003eac:	e0e8      	b.n	8004080 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003eae:	69fb      	ldr	r3, [r7, #28]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	461c      	mov	r4, r3
 8003eb4:	4615      	mov	r5, r2
 8003eb6:	f04f 0200 	mov.w	r2, #0
 8003eba:	f04f 0300 	mov.w	r3, #0
 8003ebe:	022b      	lsls	r3, r5, #8
 8003ec0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003ec4:	0222      	lsls	r2, r4, #8
 8003ec6:	68f9      	ldr	r1, [r7, #12]
 8003ec8:	6849      	ldr	r1, [r1, #4]
 8003eca:	0849      	lsrs	r1, r1, #1
 8003ecc:	2000      	movs	r0, #0
 8003ece:	4688      	mov	r8, r1
 8003ed0:	4681      	mov	r9, r0
 8003ed2:	eb12 0a08 	adds.w	sl, r2, r8
 8003ed6:	eb43 0b09 	adc.w	fp, r3, r9
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	603b      	str	r3, [r7, #0]
 8003ee2:	607a      	str	r2, [r7, #4]
 8003ee4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ee8:	4650      	mov	r0, sl
 8003eea:	4659      	mov	r1, fp
 8003eec:	f7fc f97e 	bl	80001ec <__aeabi_uldivmod>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	460b      	mov	r3, r1
 8003ef4:	4613      	mov	r3, r2
 8003ef6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003ef8:	69bb      	ldr	r3, [r7, #24]
 8003efa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003efe:	d308      	bcc.n	8003f12 <UART_SetConfig+0x3de>
 8003f00:	69bb      	ldr	r3, [r7, #24]
 8003f02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f06:	d204      	bcs.n	8003f12 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	69ba      	ldr	r2, [r7, #24]
 8003f0e:	60da      	str	r2, [r3, #12]
 8003f10:	e0b6      	b.n	8004080 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003f18:	e0b2      	b.n	8004080 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	69db      	ldr	r3, [r3, #28]
 8003f1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f22:	d15e      	bne.n	8003fe2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003f24:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003f28:	2b08      	cmp	r3, #8
 8003f2a:	d828      	bhi.n	8003f7e <UART_SetConfig+0x44a>
 8003f2c:	a201      	add	r2, pc, #4	; (adr r2, 8003f34 <UART_SetConfig+0x400>)
 8003f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f32:	bf00      	nop
 8003f34:	08003f59 	.word	0x08003f59
 8003f38:	08003f61 	.word	0x08003f61
 8003f3c:	08003f69 	.word	0x08003f69
 8003f40:	08003f7f 	.word	0x08003f7f
 8003f44:	08003f6f 	.word	0x08003f6f
 8003f48:	08003f7f 	.word	0x08003f7f
 8003f4c:	08003f7f 	.word	0x08003f7f
 8003f50:	08003f7f 	.word	0x08003f7f
 8003f54:	08003f77 	.word	0x08003f77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f58:	f7fd ff7a 	bl	8001e50 <HAL_RCC_GetPCLK1Freq>
 8003f5c:	61f8      	str	r0, [r7, #28]
        break;
 8003f5e:	e014      	b.n	8003f8a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f60:	f7fd ff8c 	bl	8001e7c <HAL_RCC_GetPCLK2Freq>
 8003f64:	61f8      	str	r0, [r7, #28]
        break;
 8003f66:	e010      	b.n	8003f8a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f68:	4b4d      	ldr	r3, [pc, #308]	; (80040a0 <UART_SetConfig+0x56c>)
 8003f6a:	61fb      	str	r3, [r7, #28]
        break;
 8003f6c:	e00d      	b.n	8003f8a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f6e:	f7fd fed7 	bl	8001d20 <HAL_RCC_GetSysClockFreq>
 8003f72:	61f8      	str	r0, [r7, #28]
        break;
 8003f74:	e009      	b.n	8003f8a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f7a:	61fb      	str	r3, [r7, #28]
        break;
 8003f7c:	e005      	b.n	8003f8a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003f88:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f8a:	69fb      	ldr	r3, [r7, #28]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d077      	beq.n	8004080 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f90:	69fb      	ldr	r3, [r7, #28]
 8003f92:	005a      	lsls	r2, r3, #1
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	085b      	lsrs	r3, r3, #1
 8003f9a:	441a      	add	r2, r3
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fa4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003fa6:	69bb      	ldr	r3, [r7, #24]
 8003fa8:	2b0f      	cmp	r3, #15
 8003faa:	d916      	bls.n	8003fda <UART_SetConfig+0x4a6>
 8003fac:	69bb      	ldr	r3, [r7, #24]
 8003fae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fb2:	d212      	bcs.n	8003fda <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003fb4:	69bb      	ldr	r3, [r7, #24]
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	f023 030f 	bic.w	r3, r3, #15
 8003fbc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003fbe:	69bb      	ldr	r3, [r7, #24]
 8003fc0:	085b      	lsrs	r3, r3, #1
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	f003 0307 	and.w	r3, r3, #7
 8003fc8:	b29a      	uxth	r2, r3
 8003fca:	8afb      	ldrh	r3, [r7, #22]
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	8afa      	ldrh	r2, [r7, #22]
 8003fd6:	60da      	str	r2, [r3, #12]
 8003fd8:	e052      	b.n	8004080 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003fe0:	e04e      	b.n	8004080 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003fe2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003fe6:	2b08      	cmp	r3, #8
 8003fe8:	d827      	bhi.n	800403a <UART_SetConfig+0x506>
 8003fea:	a201      	add	r2, pc, #4	; (adr r2, 8003ff0 <UART_SetConfig+0x4bc>)
 8003fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ff0:	08004015 	.word	0x08004015
 8003ff4:	0800401d 	.word	0x0800401d
 8003ff8:	08004025 	.word	0x08004025
 8003ffc:	0800403b 	.word	0x0800403b
 8004000:	0800402b 	.word	0x0800402b
 8004004:	0800403b 	.word	0x0800403b
 8004008:	0800403b 	.word	0x0800403b
 800400c:	0800403b 	.word	0x0800403b
 8004010:	08004033 	.word	0x08004033
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004014:	f7fd ff1c 	bl	8001e50 <HAL_RCC_GetPCLK1Freq>
 8004018:	61f8      	str	r0, [r7, #28]
        break;
 800401a:	e014      	b.n	8004046 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800401c:	f7fd ff2e 	bl	8001e7c <HAL_RCC_GetPCLK2Freq>
 8004020:	61f8      	str	r0, [r7, #28]
        break;
 8004022:	e010      	b.n	8004046 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004024:	4b1e      	ldr	r3, [pc, #120]	; (80040a0 <UART_SetConfig+0x56c>)
 8004026:	61fb      	str	r3, [r7, #28]
        break;
 8004028:	e00d      	b.n	8004046 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800402a:	f7fd fe79 	bl	8001d20 <HAL_RCC_GetSysClockFreq>
 800402e:	61f8      	str	r0, [r7, #28]
        break;
 8004030:	e009      	b.n	8004046 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004032:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004036:	61fb      	str	r3, [r7, #28]
        break;
 8004038:	e005      	b.n	8004046 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800403a:	2300      	movs	r3, #0
 800403c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004044:	bf00      	nop
    }

    if (pclk != 0U)
 8004046:	69fb      	ldr	r3, [r7, #28]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d019      	beq.n	8004080 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	085a      	lsrs	r2, r3, #1
 8004052:	69fb      	ldr	r3, [r7, #28]
 8004054:	441a      	add	r2, r3
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	fbb2 f3f3 	udiv	r3, r2, r3
 800405e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004060:	69bb      	ldr	r3, [r7, #24]
 8004062:	2b0f      	cmp	r3, #15
 8004064:	d909      	bls.n	800407a <UART_SetConfig+0x546>
 8004066:	69bb      	ldr	r3, [r7, #24]
 8004068:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800406c:	d205      	bcs.n	800407a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800406e:	69bb      	ldr	r3, [r7, #24]
 8004070:	b29a      	uxth	r2, r3
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	60da      	str	r2, [r3, #12]
 8004078:	e002      	b.n	8004080 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2200      	movs	r2, #0
 8004084:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2200      	movs	r2, #0
 800408a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800408c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004090:	4618      	mov	r0, r3
 8004092:	3728      	adds	r7, #40	; 0x28
 8004094:	46bd      	mov	sp, r7
 8004096:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800409a:	bf00      	nop
 800409c:	40008000 	.word	0x40008000
 80040a0:	00f42400 	.word	0x00f42400

080040a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b083      	sub	sp, #12
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b0:	f003 0301 	and.w	r3, r3, #1
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d00a      	beq.n	80040ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	430a      	orrs	r2, r1
 80040cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d2:	f003 0302 	and.w	r3, r3, #2
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d00a      	beq.n	80040f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	430a      	orrs	r2, r1
 80040ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f4:	f003 0304 	and.w	r3, r3, #4
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d00a      	beq.n	8004112 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	430a      	orrs	r2, r1
 8004110:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004116:	f003 0308 	and.w	r3, r3, #8
 800411a:	2b00      	cmp	r3, #0
 800411c:	d00a      	beq.n	8004134 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	430a      	orrs	r2, r1
 8004132:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004138:	f003 0310 	and.w	r3, r3, #16
 800413c:	2b00      	cmp	r3, #0
 800413e:	d00a      	beq.n	8004156 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	430a      	orrs	r2, r1
 8004154:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415a:	f003 0320 	and.w	r3, r3, #32
 800415e:	2b00      	cmp	r3, #0
 8004160:	d00a      	beq.n	8004178 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	430a      	orrs	r2, r1
 8004176:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004180:	2b00      	cmp	r3, #0
 8004182:	d01a      	beq.n	80041ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	430a      	orrs	r2, r1
 8004198:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041a2:	d10a      	bne.n	80041ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	430a      	orrs	r2, r1
 80041b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d00a      	beq.n	80041dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	430a      	orrs	r2, r1
 80041da:	605a      	str	r2, [r3, #4]
  }
}
 80041dc:	bf00      	nop
 80041de:	370c      	adds	r7, #12
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr

080041e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b086      	sub	sp, #24
 80041ec:	af02      	add	r7, sp, #8
 80041ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2200      	movs	r2, #0
 80041f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80041f8:	f7fc fcd6 	bl	8000ba8 <HAL_GetTick>
 80041fc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 0308 	and.w	r3, r3, #8
 8004208:	2b08      	cmp	r3, #8
 800420a:	d10e      	bne.n	800422a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800420c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004210:	9300      	str	r3, [sp, #0]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2200      	movs	r2, #0
 8004216:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f000 f82d 	bl	800427a <UART_WaitOnFlagUntilTimeout>
 8004220:	4603      	mov	r3, r0
 8004222:	2b00      	cmp	r3, #0
 8004224:	d001      	beq.n	800422a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004226:	2303      	movs	r3, #3
 8004228:	e023      	b.n	8004272 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 0304 	and.w	r3, r3, #4
 8004234:	2b04      	cmp	r3, #4
 8004236:	d10e      	bne.n	8004256 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004238:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800423c:	9300      	str	r3, [sp, #0]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2200      	movs	r2, #0
 8004242:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f000 f817 	bl	800427a <UART_WaitOnFlagUntilTimeout>
 800424c:	4603      	mov	r3, r0
 800424e:	2b00      	cmp	r3, #0
 8004250:	d001      	beq.n	8004256 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004252:	2303      	movs	r3, #3
 8004254:	e00d      	b.n	8004272 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2220      	movs	r2, #32
 800425a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2220      	movs	r2, #32
 8004260:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004270:	2300      	movs	r3, #0
}
 8004272:	4618      	mov	r0, r3
 8004274:	3710      	adds	r7, #16
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}

0800427a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800427a:	b580      	push	{r7, lr}
 800427c:	b09c      	sub	sp, #112	; 0x70
 800427e:	af00      	add	r7, sp, #0
 8004280:	60f8      	str	r0, [r7, #12]
 8004282:	60b9      	str	r1, [r7, #8]
 8004284:	603b      	str	r3, [r7, #0]
 8004286:	4613      	mov	r3, r2
 8004288:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800428a:	e0a5      	b.n	80043d8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800428c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800428e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004292:	f000 80a1 	beq.w	80043d8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004296:	f7fc fc87 	bl	8000ba8 <HAL_GetTick>
 800429a:	4602      	mov	r2, r0
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	1ad3      	subs	r3, r2, r3
 80042a0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d302      	bcc.n	80042ac <UART_WaitOnFlagUntilTimeout+0x32>
 80042a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d13e      	bne.n	800432a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042b4:	e853 3f00 	ldrex	r3, [r3]
 80042b8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80042ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042bc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80042c0:	667b      	str	r3, [r7, #100]	; 0x64
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	461a      	mov	r2, r3
 80042c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80042ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80042cc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ce:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80042d0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80042d2:	e841 2300 	strex	r3, r2, [r1]
 80042d6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80042d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d1e6      	bne.n	80042ac <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	3308      	adds	r3, #8
 80042e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042e8:	e853 3f00 	ldrex	r3, [r3]
 80042ec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80042ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042f0:	f023 0301 	bic.w	r3, r3, #1
 80042f4:	663b      	str	r3, [r7, #96]	; 0x60
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	3308      	adds	r3, #8
 80042fc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80042fe:	64ba      	str	r2, [r7, #72]	; 0x48
 8004300:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004302:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004304:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004306:	e841 2300 	strex	r3, r2, [r1]
 800430a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800430c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800430e:	2b00      	cmp	r3, #0
 8004310:	d1e5      	bne.n	80042de <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2220      	movs	r2, #32
 8004316:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2220      	movs	r2, #32
 800431c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2200      	movs	r2, #0
 8004322:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004326:	2303      	movs	r3, #3
 8004328:	e067      	b.n	80043fa <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 0304 	and.w	r3, r3, #4
 8004334:	2b00      	cmp	r3, #0
 8004336:	d04f      	beq.n	80043d8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	69db      	ldr	r3, [r3, #28]
 800433e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004342:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004346:	d147      	bne.n	80043d8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004350:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800435a:	e853 3f00 	ldrex	r3, [r3]
 800435e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004362:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004366:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	461a      	mov	r2, r3
 800436e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004370:	637b      	str	r3, [r7, #52]	; 0x34
 8004372:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004374:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004376:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004378:	e841 2300 	strex	r3, r2, [r1]
 800437c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800437e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004380:	2b00      	cmp	r3, #0
 8004382:	d1e6      	bne.n	8004352 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	3308      	adds	r3, #8
 800438a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	e853 3f00 	ldrex	r3, [r3]
 8004392:	613b      	str	r3, [r7, #16]
   return(result);
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	f023 0301 	bic.w	r3, r3, #1
 800439a:	66bb      	str	r3, [r7, #104]	; 0x68
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	3308      	adds	r3, #8
 80043a2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80043a4:	623a      	str	r2, [r7, #32]
 80043a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043a8:	69f9      	ldr	r1, [r7, #28]
 80043aa:	6a3a      	ldr	r2, [r7, #32]
 80043ac:	e841 2300 	strex	r3, r2, [r1]
 80043b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80043b2:	69bb      	ldr	r3, [r7, #24]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d1e5      	bne.n	8004384 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2220      	movs	r2, #32
 80043bc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2220      	movs	r2, #32
 80043c2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2220      	movs	r2, #32
 80043c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2200      	movs	r2, #0
 80043d0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80043d4:	2303      	movs	r3, #3
 80043d6:	e010      	b.n	80043fa <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	69da      	ldr	r2, [r3, #28]
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	4013      	ands	r3, r2
 80043e2:	68ba      	ldr	r2, [r7, #8]
 80043e4:	429a      	cmp	r2, r3
 80043e6:	bf0c      	ite	eq
 80043e8:	2301      	moveq	r3, #1
 80043ea:	2300      	movne	r3, #0
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	461a      	mov	r2, r3
 80043f0:	79fb      	ldrb	r3, [r7, #7]
 80043f2:	429a      	cmp	r2, r3
 80043f4:	f43f af4a 	beq.w	800428c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043f8:	2300      	movs	r3, #0
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3770      	adds	r7, #112	; 0x70
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}

08004402 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004402:	b480      	push	{r7}
 8004404:	b095      	sub	sp, #84	; 0x54
 8004406:	af00      	add	r7, sp, #0
 8004408:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004412:	e853 3f00 	ldrex	r3, [r3]
 8004416:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800441a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800441e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	461a      	mov	r2, r3
 8004426:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004428:	643b      	str	r3, [r7, #64]	; 0x40
 800442a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800442c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800442e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004430:	e841 2300 	strex	r3, r2, [r1]
 8004434:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004438:	2b00      	cmp	r3, #0
 800443a:	d1e6      	bne.n	800440a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	3308      	adds	r3, #8
 8004442:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004444:	6a3b      	ldr	r3, [r7, #32]
 8004446:	e853 3f00 	ldrex	r3, [r3]
 800444a:	61fb      	str	r3, [r7, #28]
   return(result);
 800444c:	69fb      	ldr	r3, [r7, #28]
 800444e:	f023 0301 	bic.w	r3, r3, #1
 8004452:	64bb      	str	r3, [r7, #72]	; 0x48
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	3308      	adds	r3, #8
 800445a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800445c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800445e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004460:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004462:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004464:	e841 2300 	strex	r3, r2, [r1]
 8004468:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800446a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800446c:	2b00      	cmp	r3, #0
 800446e:	d1e5      	bne.n	800443c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004474:	2b01      	cmp	r3, #1
 8004476:	d118      	bne.n	80044aa <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	e853 3f00 	ldrex	r3, [r3]
 8004484:	60bb      	str	r3, [r7, #8]
   return(result);
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	f023 0310 	bic.w	r3, r3, #16
 800448c:	647b      	str	r3, [r7, #68]	; 0x44
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	461a      	mov	r2, r3
 8004494:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004496:	61bb      	str	r3, [r7, #24]
 8004498:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800449a:	6979      	ldr	r1, [r7, #20]
 800449c:	69ba      	ldr	r2, [r7, #24]
 800449e:	e841 2300 	strex	r3, r2, [r1]
 80044a2:	613b      	str	r3, [r7, #16]
   return(result);
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d1e6      	bne.n	8004478 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2220      	movs	r2, #32
 80044ae:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2200      	movs	r2, #0
 80044b4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2200      	movs	r2, #0
 80044ba:	665a      	str	r2, [r3, #100]	; 0x64
}
 80044bc:	bf00      	nop
 80044be:	3754      	adds	r7, #84	; 0x54
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr

080044c8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b084      	sub	sp, #16
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044d4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2200      	movs	r2, #0
 80044da:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2200      	movs	r2, #0
 80044e2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80044e6:	68f8      	ldr	r0, [r7, #12]
 80044e8:	f7ff fb0e 	bl	8003b08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80044ec:	bf00      	nop
 80044ee:	3710      	adds	r7, #16
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}

080044f4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b088      	sub	sp, #32
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	e853 3f00 	ldrex	r3, [r3]
 8004508:	60bb      	str	r3, [r7, #8]
   return(result);
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004510:	61fb      	str	r3, [r7, #28]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	461a      	mov	r2, r3
 8004518:	69fb      	ldr	r3, [r7, #28]
 800451a:	61bb      	str	r3, [r7, #24]
 800451c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800451e:	6979      	ldr	r1, [r7, #20]
 8004520:	69ba      	ldr	r2, [r7, #24]
 8004522:	e841 2300 	strex	r3, r2, [r1]
 8004526:	613b      	str	r3, [r7, #16]
   return(result);
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d1e6      	bne.n	80044fc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2220      	movs	r2, #32
 8004532:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2200      	movs	r2, #0
 8004538:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f7ff fada 	bl	8003af4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004540:	bf00      	nop
 8004542:	3720      	adds	r7, #32
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}

08004548 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004548:	b480      	push	{r7}
 800454a:	b083      	sub	sp, #12
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004550:	bf00      	nop
 8004552:	370c      	adds	r7, #12
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr

0800455c <__errno>:
 800455c:	4b01      	ldr	r3, [pc, #4]	; (8004564 <__errno+0x8>)
 800455e:	6818      	ldr	r0, [r3, #0]
 8004560:	4770      	bx	lr
 8004562:	bf00      	nop
 8004564:	20000018 	.word	0x20000018

08004568 <__libc_init_array>:
 8004568:	b570      	push	{r4, r5, r6, lr}
 800456a:	4d0d      	ldr	r5, [pc, #52]	; (80045a0 <__libc_init_array+0x38>)
 800456c:	4c0d      	ldr	r4, [pc, #52]	; (80045a4 <__libc_init_array+0x3c>)
 800456e:	1b64      	subs	r4, r4, r5
 8004570:	10a4      	asrs	r4, r4, #2
 8004572:	2600      	movs	r6, #0
 8004574:	42a6      	cmp	r6, r4
 8004576:	d109      	bne.n	800458c <__libc_init_array+0x24>
 8004578:	4d0b      	ldr	r5, [pc, #44]	; (80045a8 <__libc_init_array+0x40>)
 800457a:	4c0c      	ldr	r4, [pc, #48]	; (80045ac <__libc_init_array+0x44>)
 800457c:	f000 fd1e 	bl	8004fbc <_init>
 8004580:	1b64      	subs	r4, r4, r5
 8004582:	10a4      	asrs	r4, r4, #2
 8004584:	2600      	movs	r6, #0
 8004586:	42a6      	cmp	r6, r4
 8004588:	d105      	bne.n	8004596 <__libc_init_array+0x2e>
 800458a:	bd70      	pop	{r4, r5, r6, pc}
 800458c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004590:	4798      	blx	r3
 8004592:	3601      	adds	r6, #1
 8004594:	e7ee      	b.n	8004574 <__libc_init_array+0xc>
 8004596:	f855 3b04 	ldr.w	r3, [r5], #4
 800459a:	4798      	blx	r3
 800459c:	3601      	adds	r6, #1
 800459e:	e7f2      	b.n	8004586 <__libc_init_array+0x1e>
 80045a0:	080050b4 	.word	0x080050b4
 80045a4:	080050b4 	.word	0x080050b4
 80045a8:	080050b4 	.word	0x080050b4
 80045ac:	080050b8 	.word	0x080050b8

080045b0 <memset>:
 80045b0:	4402      	add	r2, r0
 80045b2:	4603      	mov	r3, r0
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d100      	bne.n	80045ba <memset+0xa>
 80045b8:	4770      	bx	lr
 80045ba:	f803 1b01 	strb.w	r1, [r3], #1
 80045be:	e7f9      	b.n	80045b4 <memset+0x4>

080045c0 <_puts_r>:
 80045c0:	b570      	push	{r4, r5, r6, lr}
 80045c2:	460e      	mov	r6, r1
 80045c4:	4605      	mov	r5, r0
 80045c6:	b118      	cbz	r0, 80045d0 <_puts_r+0x10>
 80045c8:	6983      	ldr	r3, [r0, #24]
 80045ca:	b90b      	cbnz	r3, 80045d0 <_puts_r+0x10>
 80045cc:	f000 fa48 	bl	8004a60 <__sinit>
 80045d0:	69ab      	ldr	r3, [r5, #24]
 80045d2:	68ac      	ldr	r4, [r5, #8]
 80045d4:	b913      	cbnz	r3, 80045dc <_puts_r+0x1c>
 80045d6:	4628      	mov	r0, r5
 80045d8:	f000 fa42 	bl	8004a60 <__sinit>
 80045dc:	4b2c      	ldr	r3, [pc, #176]	; (8004690 <_puts_r+0xd0>)
 80045de:	429c      	cmp	r4, r3
 80045e0:	d120      	bne.n	8004624 <_puts_r+0x64>
 80045e2:	686c      	ldr	r4, [r5, #4]
 80045e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80045e6:	07db      	lsls	r3, r3, #31
 80045e8:	d405      	bmi.n	80045f6 <_puts_r+0x36>
 80045ea:	89a3      	ldrh	r3, [r4, #12]
 80045ec:	0598      	lsls	r0, r3, #22
 80045ee:	d402      	bmi.n	80045f6 <_puts_r+0x36>
 80045f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80045f2:	f000 fad3 	bl	8004b9c <__retarget_lock_acquire_recursive>
 80045f6:	89a3      	ldrh	r3, [r4, #12]
 80045f8:	0719      	lsls	r1, r3, #28
 80045fa:	d51d      	bpl.n	8004638 <_puts_r+0x78>
 80045fc:	6923      	ldr	r3, [r4, #16]
 80045fe:	b1db      	cbz	r3, 8004638 <_puts_r+0x78>
 8004600:	3e01      	subs	r6, #1
 8004602:	68a3      	ldr	r3, [r4, #8]
 8004604:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004608:	3b01      	subs	r3, #1
 800460a:	60a3      	str	r3, [r4, #8]
 800460c:	bb39      	cbnz	r1, 800465e <_puts_r+0x9e>
 800460e:	2b00      	cmp	r3, #0
 8004610:	da38      	bge.n	8004684 <_puts_r+0xc4>
 8004612:	4622      	mov	r2, r4
 8004614:	210a      	movs	r1, #10
 8004616:	4628      	mov	r0, r5
 8004618:	f000 f848 	bl	80046ac <__swbuf_r>
 800461c:	3001      	adds	r0, #1
 800461e:	d011      	beq.n	8004644 <_puts_r+0x84>
 8004620:	250a      	movs	r5, #10
 8004622:	e011      	b.n	8004648 <_puts_r+0x88>
 8004624:	4b1b      	ldr	r3, [pc, #108]	; (8004694 <_puts_r+0xd4>)
 8004626:	429c      	cmp	r4, r3
 8004628:	d101      	bne.n	800462e <_puts_r+0x6e>
 800462a:	68ac      	ldr	r4, [r5, #8]
 800462c:	e7da      	b.n	80045e4 <_puts_r+0x24>
 800462e:	4b1a      	ldr	r3, [pc, #104]	; (8004698 <_puts_r+0xd8>)
 8004630:	429c      	cmp	r4, r3
 8004632:	bf08      	it	eq
 8004634:	68ec      	ldreq	r4, [r5, #12]
 8004636:	e7d5      	b.n	80045e4 <_puts_r+0x24>
 8004638:	4621      	mov	r1, r4
 800463a:	4628      	mov	r0, r5
 800463c:	f000 f888 	bl	8004750 <__swsetup_r>
 8004640:	2800      	cmp	r0, #0
 8004642:	d0dd      	beq.n	8004600 <_puts_r+0x40>
 8004644:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004648:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800464a:	07da      	lsls	r2, r3, #31
 800464c:	d405      	bmi.n	800465a <_puts_r+0x9a>
 800464e:	89a3      	ldrh	r3, [r4, #12]
 8004650:	059b      	lsls	r3, r3, #22
 8004652:	d402      	bmi.n	800465a <_puts_r+0x9a>
 8004654:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004656:	f000 faa2 	bl	8004b9e <__retarget_lock_release_recursive>
 800465a:	4628      	mov	r0, r5
 800465c:	bd70      	pop	{r4, r5, r6, pc}
 800465e:	2b00      	cmp	r3, #0
 8004660:	da04      	bge.n	800466c <_puts_r+0xac>
 8004662:	69a2      	ldr	r2, [r4, #24]
 8004664:	429a      	cmp	r2, r3
 8004666:	dc06      	bgt.n	8004676 <_puts_r+0xb6>
 8004668:	290a      	cmp	r1, #10
 800466a:	d004      	beq.n	8004676 <_puts_r+0xb6>
 800466c:	6823      	ldr	r3, [r4, #0]
 800466e:	1c5a      	adds	r2, r3, #1
 8004670:	6022      	str	r2, [r4, #0]
 8004672:	7019      	strb	r1, [r3, #0]
 8004674:	e7c5      	b.n	8004602 <_puts_r+0x42>
 8004676:	4622      	mov	r2, r4
 8004678:	4628      	mov	r0, r5
 800467a:	f000 f817 	bl	80046ac <__swbuf_r>
 800467e:	3001      	adds	r0, #1
 8004680:	d1bf      	bne.n	8004602 <_puts_r+0x42>
 8004682:	e7df      	b.n	8004644 <_puts_r+0x84>
 8004684:	6823      	ldr	r3, [r4, #0]
 8004686:	250a      	movs	r5, #10
 8004688:	1c5a      	adds	r2, r3, #1
 800468a:	6022      	str	r2, [r4, #0]
 800468c:	701d      	strb	r5, [r3, #0]
 800468e:	e7db      	b.n	8004648 <_puts_r+0x88>
 8004690:	0800506c 	.word	0x0800506c
 8004694:	0800508c 	.word	0x0800508c
 8004698:	0800504c 	.word	0x0800504c

0800469c <puts>:
 800469c:	4b02      	ldr	r3, [pc, #8]	; (80046a8 <puts+0xc>)
 800469e:	4601      	mov	r1, r0
 80046a0:	6818      	ldr	r0, [r3, #0]
 80046a2:	f7ff bf8d 	b.w	80045c0 <_puts_r>
 80046a6:	bf00      	nop
 80046a8:	20000018 	.word	0x20000018

080046ac <__swbuf_r>:
 80046ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046ae:	460e      	mov	r6, r1
 80046b0:	4614      	mov	r4, r2
 80046b2:	4605      	mov	r5, r0
 80046b4:	b118      	cbz	r0, 80046be <__swbuf_r+0x12>
 80046b6:	6983      	ldr	r3, [r0, #24]
 80046b8:	b90b      	cbnz	r3, 80046be <__swbuf_r+0x12>
 80046ba:	f000 f9d1 	bl	8004a60 <__sinit>
 80046be:	4b21      	ldr	r3, [pc, #132]	; (8004744 <__swbuf_r+0x98>)
 80046c0:	429c      	cmp	r4, r3
 80046c2:	d12b      	bne.n	800471c <__swbuf_r+0x70>
 80046c4:	686c      	ldr	r4, [r5, #4]
 80046c6:	69a3      	ldr	r3, [r4, #24]
 80046c8:	60a3      	str	r3, [r4, #8]
 80046ca:	89a3      	ldrh	r3, [r4, #12]
 80046cc:	071a      	lsls	r2, r3, #28
 80046ce:	d52f      	bpl.n	8004730 <__swbuf_r+0x84>
 80046d0:	6923      	ldr	r3, [r4, #16]
 80046d2:	b36b      	cbz	r3, 8004730 <__swbuf_r+0x84>
 80046d4:	6923      	ldr	r3, [r4, #16]
 80046d6:	6820      	ldr	r0, [r4, #0]
 80046d8:	1ac0      	subs	r0, r0, r3
 80046da:	6963      	ldr	r3, [r4, #20]
 80046dc:	b2f6      	uxtb	r6, r6
 80046de:	4283      	cmp	r3, r0
 80046e0:	4637      	mov	r7, r6
 80046e2:	dc04      	bgt.n	80046ee <__swbuf_r+0x42>
 80046e4:	4621      	mov	r1, r4
 80046e6:	4628      	mov	r0, r5
 80046e8:	f000 f926 	bl	8004938 <_fflush_r>
 80046ec:	bb30      	cbnz	r0, 800473c <__swbuf_r+0x90>
 80046ee:	68a3      	ldr	r3, [r4, #8]
 80046f0:	3b01      	subs	r3, #1
 80046f2:	60a3      	str	r3, [r4, #8]
 80046f4:	6823      	ldr	r3, [r4, #0]
 80046f6:	1c5a      	adds	r2, r3, #1
 80046f8:	6022      	str	r2, [r4, #0]
 80046fa:	701e      	strb	r6, [r3, #0]
 80046fc:	6963      	ldr	r3, [r4, #20]
 80046fe:	3001      	adds	r0, #1
 8004700:	4283      	cmp	r3, r0
 8004702:	d004      	beq.n	800470e <__swbuf_r+0x62>
 8004704:	89a3      	ldrh	r3, [r4, #12]
 8004706:	07db      	lsls	r3, r3, #31
 8004708:	d506      	bpl.n	8004718 <__swbuf_r+0x6c>
 800470a:	2e0a      	cmp	r6, #10
 800470c:	d104      	bne.n	8004718 <__swbuf_r+0x6c>
 800470e:	4621      	mov	r1, r4
 8004710:	4628      	mov	r0, r5
 8004712:	f000 f911 	bl	8004938 <_fflush_r>
 8004716:	b988      	cbnz	r0, 800473c <__swbuf_r+0x90>
 8004718:	4638      	mov	r0, r7
 800471a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800471c:	4b0a      	ldr	r3, [pc, #40]	; (8004748 <__swbuf_r+0x9c>)
 800471e:	429c      	cmp	r4, r3
 8004720:	d101      	bne.n	8004726 <__swbuf_r+0x7a>
 8004722:	68ac      	ldr	r4, [r5, #8]
 8004724:	e7cf      	b.n	80046c6 <__swbuf_r+0x1a>
 8004726:	4b09      	ldr	r3, [pc, #36]	; (800474c <__swbuf_r+0xa0>)
 8004728:	429c      	cmp	r4, r3
 800472a:	bf08      	it	eq
 800472c:	68ec      	ldreq	r4, [r5, #12]
 800472e:	e7ca      	b.n	80046c6 <__swbuf_r+0x1a>
 8004730:	4621      	mov	r1, r4
 8004732:	4628      	mov	r0, r5
 8004734:	f000 f80c 	bl	8004750 <__swsetup_r>
 8004738:	2800      	cmp	r0, #0
 800473a:	d0cb      	beq.n	80046d4 <__swbuf_r+0x28>
 800473c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004740:	e7ea      	b.n	8004718 <__swbuf_r+0x6c>
 8004742:	bf00      	nop
 8004744:	0800506c 	.word	0x0800506c
 8004748:	0800508c 	.word	0x0800508c
 800474c:	0800504c 	.word	0x0800504c

08004750 <__swsetup_r>:
 8004750:	4b32      	ldr	r3, [pc, #200]	; (800481c <__swsetup_r+0xcc>)
 8004752:	b570      	push	{r4, r5, r6, lr}
 8004754:	681d      	ldr	r5, [r3, #0]
 8004756:	4606      	mov	r6, r0
 8004758:	460c      	mov	r4, r1
 800475a:	b125      	cbz	r5, 8004766 <__swsetup_r+0x16>
 800475c:	69ab      	ldr	r3, [r5, #24]
 800475e:	b913      	cbnz	r3, 8004766 <__swsetup_r+0x16>
 8004760:	4628      	mov	r0, r5
 8004762:	f000 f97d 	bl	8004a60 <__sinit>
 8004766:	4b2e      	ldr	r3, [pc, #184]	; (8004820 <__swsetup_r+0xd0>)
 8004768:	429c      	cmp	r4, r3
 800476a:	d10f      	bne.n	800478c <__swsetup_r+0x3c>
 800476c:	686c      	ldr	r4, [r5, #4]
 800476e:	89a3      	ldrh	r3, [r4, #12]
 8004770:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004774:	0719      	lsls	r1, r3, #28
 8004776:	d42c      	bmi.n	80047d2 <__swsetup_r+0x82>
 8004778:	06dd      	lsls	r5, r3, #27
 800477a:	d411      	bmi.n	80047a0 <__swsetup_r+0x50>
 800477c:	2309      	movs	r3, #9
 800477e:	6033      	str	r3, [r6, #0]
 8004780:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004784:	81a3      	strh	r3, [r4, #12]
 8004786:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800478a:	e03e      	b.n	800480a <__swsetup_r+0xba>
 800478c:	4b25      	ldr	r3, [pc, #148]	; (8004824 <__swsetup_r+0xd4>)
 800478e:	429c      	cmp	r4, r3
 8004790:	d101      	bne.n	8004796 <__swsetup_r+0x46>
 8004792:	68ac      	ldr	r4, [r5, #8]
 8004794:	e7eb      	b.n	800476e <__swsetup_r+0x1e>
 8004796:	4b24      	ldr	r3, [pc, #144]	; (8004828 <__swsetup_r+0xd8>)
 8004798:	429c      	cmp	r4, r3
 800479a:	bf08      	it	eq
 800479c:	68ec      	ldreq	r4, [r5, #12]
 800479e:	e7e6      	b.n	800476e <__swsetup_r+0x1e>
 80047a0:	0758      	lsls	r0, r3, #29
 80047a2:	d512      	bpl.n	80047ca <__swsetup_r+0x7a>
 80047a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80047a6:	b141      	cbz	r1, 80047ba <__swsetup_r+0x6a>
 80047a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80047ac:	4299      	cmp	r1, r3
 80047ae:	d002      	beq.n	80047b6 <__swsetup_r+0x66>
 80047b0:	4630      	mov	r0, r6
 80047b2:	f000 fa5b 	bl	8004c6c <_free_r>
 80047b6:	2300      	movs	r3, #0
 80047b8:	6363      	str	r3, [r4, #52]	; 0x34
 80047ba:	89a3      	ldrh	r3, [r4, #12]
 80047bc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80047c0:	81a3      	strh	r3, [r4, #12]
 80047c2:	2300      	movs	r3, #0
 80047c4:	6063      	str	r3, [r4, #4]
 80047c6:	6923      	ldr	r3, [r4, #16]
 80047c8:	6023      	str	r3, [r4, #0]
 80047ca:	89a3      	ldrh	r3, [r4, #12]
 80047cc:	f043 0308 	orr.w	r3, r3, #8
 80047d0:	81a3      	strh	r3, [r4, #12]
 80047d2:	6923      	ldr	r3, [r4, #16]
 80047d4:	b94b      	cbnz	r3, 80047ea <__swsetup_r+0x9a>
 80047d6:	89a3      	ldrh	r3, [r4, #12]
 80047d8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80047dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047e0:	d003      	beq.n	80047ea <__swsetup_r+0x9a>
 80047e2:	4621      	mov	r1, r4
 80047e4:	4630      	mov	r0, r6
 80047e6:	f000 fa01 	bl	8004bec <__smakebuf_r>
 80047ea:	89a0      	ldrh	r0, [r4, #12]
 80047ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80047f0:	f010 0301 	ands.w	r3, r0, #1
 80047f4:	d00a      	beq.n	800480c <__swsetup_r+0xbc>
 80047f6:	2300      	movs	r3, #0
 80047f8:	60a3      	str	r3, [r4, #8]
 80047fa:	6963      	ldr	r3, [r4, #20]
 80047fc:	425b      	negs	r3, r3
 80047fe:	61a3      	str	r3, [r4, #24]
 8004800:	6923      	ldr	r3, [r4, #16]
 8004802:	b943      	cbnz	r3, 8004816 <__swsetup_r+0xc6>
 8004804:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004808:	d1ba      	bne.n	8004780 <__swsetup_r+0x30>
 800480a:	bd70      	pop	{r4, r5, r6, pc}
 800480c:	0781      	lsls	r1, r0, #30
 800480e:	bf58      	it	pl
 8004810:	6963      	ldrpl	r3, [r4, #20]
 8004812:	60a3      	str	r3, [r4, #8]
 8004814:	e7f4      	b.n	8004800 <__swsetup_r+0xb0>
 8004816:	2000      	movs	r0, #0
 8004818:	e7f7      	b.n	800480a <__swsetup_r+0xba>
 800481a:	bf00      	nop
 800481c:	20000018 	.word	0x20000018
 8004820:	0800506c 	.word	0x0800506c
 8004824:	0800508c 	.word	0x0800508c
 8004828:	0800504c 	.word	0x0800504c

0800482c <__sflush_r>:
 800482c:	898a      	ldrh	r2, [r1, #12]
 800482e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004832:	4605      	mov	r5, r0
 8004834:	0710      	lsls	r0, r2, #28
 8004836:	460c      	mov	r4, r1
 8004838:	d458      	bmi.n	80048ec <__sflush_r+0xc0>
 800483a:	684b      	ldr	r3, [r1, #4]
 800483c:	2b00      	cmp	r3, #0
 800483e:	dc05      	bgt.n	800484c <__sflush_r+0x20>
 8004840:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004842:	2b00      	cmp	r3, #0
 8004844:	dc02      	bgt.n	800484c <__sflush_r+0x20>
 8004846:	2000      	movs	r0, #0
 8004848:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800484c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800484e:	2e00      	cmp	r6, #0
 8004850:	d0f9      	beq.n	8004846 <__sflush_r+0x1a>
 8004852:	2300      	movs	r3, #0
 8004854:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004858:	682f      	ldr	r7, [r5, #0]
 800485a:	602b      	str	r3, [r5, #0]
 800485c:	d032      	beq.n	80048c4 <__sflush_r+0x98>
 800485e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004860:	89a3      	ldrh	r3, [r4, #12]
 8004862:	075a      	lsls	r2, r3, #29
 8004864:	d505      	bpl.n	8004872 <__sflush_r+0x46>
 8004866:	6863      	ldr	r3, [r4, #4]
 8004868:	1ac0      	subs	r0, r0, r3
 800486a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800486c:	b10b      	cbz	r3, 8004872 <__sflush_r+0x46>
 800486e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004870:	1ac0      	subs	r0, r0, r3
 8004872:	2300      	movs	r3, #0
 8004874:	4602      	mov	r2, r0
 8004876:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004878:	6a21      	ldr	r1, [r4, #32]
 800487a:	4628      	mov	r0, r5
 800487c:	47b0      	blx	r6
 800487e:	1c43      	adds	r3, r0, #1
 8004880:	89a3      	ldrh	r3, [r4, #12]
 8004882:	d106      	bne.n	8004892 <__sflush_r+0x66>
 8004884:	6829      	ldr	r1, [r5, #0]
 8004886:	291d      	cmp	r1, #29
 8004888:	d82c      	bhi.n	80048e4 <__sflush_r+0xb8>
 800488a:	4a2a      	ldr	r2, [pc, #168]	; (8004934 <__sflush_r+0x108>)
 800488c:	40ca      	lsrs	r2, r1
 800488e:	07d6      	lsls	r6, r2, #31
 8004890:	d528      	bpl.n	80048e4 <__sflush_r+0xb8>
 8004892:	2200      	movs	r2, #0
 8004894:	6062      	str	r2, [r4, #4]
 8004896:	04d9      	lsls	r1, r3, #19
 8004898:	6922      	ldr	r2, [r4, #16]
 800489a:	6022      	str	r2, [r4, #0]
 800489c:	d504      	bpl.n	80048a8 <__sflush_r+0x7c>
 800489e:	1c42      	adds	r2, r0, #1
 80048a0:	d101      	bne.n	80048a6 <__sflush_r+0x7a>
 80048a2:	682b      	ldr	r3, [r5, #0]
 80048a4:	b903      	cbnz	r3, 80048a8 <__sflush_r+0x7c>
 80048a6:	6560      	str	r0, [r4, #84]	; 0x54
 80048a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80048aa:	602f      	str	r7, [r5, #0]
 80048ac:	2900      	cmp	r1, #0
 80048ae:	d0ca      	beq.n	8004846 <__sflush_r+0x1a>
 80048b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80048b4:	4299      	cmp	r1, r3
 80048b6:	d002      	beq.n	80048be <__sflush_r+0x92>
 80048b8:	4628      	mov	r0, r5
 80048ba:	f000 f9d7 	bl	8004c6c <_free_r>
 80048be:	2000      	movs	r0, #0
 80048c0:	6360      	str	r0, [r4, #52]	; 0x34
 80048c2:	e7c1      	b.n	8004848 <__sflush_r+0x1c>
 80048c4:	6a21      	ldr	r1, [r4, #32]
 80048c6:	2301      	movs	r3, #1
 80048c8:	4628      	mov	r0, r5
 80048ca:	47b0      	blx	r6
 80048cc:	1c41      	adds	r1, r0, #1
 80048ce:	d1c7      	bne.n	8004860 <__sflush_r+0x34>
 80048d0:	682b      	ldr	r3, [r5, #0]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d0c4      	beq.n	8004860 <__sflush_r+0x34>
 80048d6:	2b1d      	cmp	r3, #29
 80048d8:	d001      	beq.n	80048de <__sflush_r+0xb2>
 80048da:	2b16      	cmp	r3, #22
 80048dc:	d101      	bne.n	80048e2 <__sflush_r+0xb6>
 80048de:	602f      	str	r7, [r5, #0]
 80048e0:	e7b1      	b.n	8004846 <__sflush_r+0x1a>
 80048e2:	89a3      	ldrh	r3, [r4, #12]
 80048e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048e8:	81a3      	strh	r3, [r4, #12]
 80048ea:	e7ad      	b.n	8004848 <__sflush_r+0x1c>
 80048ec:	690f      	ldr	r7, [r1, #16]
 80048ee:	2f00      	cmp	r7, #0
 80048f0:	d0a9      	beq.n	8004846 <__sflush_r+0x1a>
 80048f2:	0793      	lsls	r3, r2, #30
 80048f4:	680e      	ldr	r6, [r1, #0]
 80048f6:	bf08      	it	eq
 80048f8:	694b      	ldreq	r3, [r1, #20]
 80048fa:	600f      	str	r7, [r1, #0]
 80048fc:	bf18      	it	ne
 80048fe:	2300      	movne	r3, #0
 8004900:	eba6 0807 	sub.w	r8, r6, r7
 8004904:	608b      	str	r3, [r1, #8]
 8004906:	f1b8 0f00 	cmp.w	r8, #0
 800490a:	dd9c      	ble.n	8004846 <__sflush_r+0x1a>
 800490c:	6a21      	ldr	r1, [r4, #32]
 800490e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004910:	4643      	mov	r3, r8
 8004912:	463a      	mov	r2, r7
 8004914:	4628      	mov	r0, r5
 8004916:	47b0      	blx	r6
 8004918:	2800      	cmp	r0, #0
 800491a:	dc06      	bgt.n	800492a <__sflush_r+0xfe>
 800491c:	89a3      	ldrh	r3, [r4, #12]
 800491e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004922:	81a3      	strh	r3, [r4, #12]
 8004924:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004928:	e78e      	b.n	8004848 <__sflush_r+0x1c>
 800492a:	4407      	add	r7, r0
 800492c:	eba8 0800 	sub.w	r8, r8, r0
 8004930:	e7e9      	b.n	8004906 <__sflush_r+0xda>
 8004932:	bf00      	nop
 8004934:	20400001 	.word	0x20400001

08004938 <_fflush_r>:
 8004938:	b538      	push	{r3, r4, r5, lr}
 800493a:	690b      	ldr	r3, [r1, #16]
 800493c:	4605      	mov	r5, r0
 800493e:	460c      	mov	r4, r1
 8004940:	b913      	cbnz	r3, 8004948 <_fflush_r+0x10>
 8004942:	2500      	movs	r5, #0
 8004944:	4628      	mov	r0, r5
 8004946:	bd38      	pop	{r3, r4, r5, pc}
 8004948:	b118      	cbz	r0, 8004952 <_fflush_r+0x1a>
 800494a:	6983      	ldr	r3, [r0, #24]
 800494c:	b90b      	cbnz	r3, 8004952 <_fflush_r+0x1a>
 800494e:	f000 f887 	bl	8004a60 <__sinit>
 8004952:	4b14      	ldr	r3, [pc, #80]	; (80049a4 <_fflush_r+0x6c>)
 8004954:	429c      	cmp	r4, r3
 8004956:	d11b      	bne.n	8004990 <_fflush_r+0x58>
 8004958:	686c      	ldr	r4, [r5, #4]
 800495a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d0ef      	beq.n	8004942 <_fflush_r+0xa>
 8004962:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004964:	07d0      	lsls	r0, r2, #31
 8004966:	d404      	bmi.n	8004972 <_fflush_r+0x3a>
 8004968:	0599      	lsls	r1, r3, #22
 800496a:	d402      	bmi.n	8004972 <_fflush_r+0x3a>
 800496c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800496e:	f000 f915 	bl	8004b9c <__retarget_lock_acquire_recursive>
 8004972:	4628      	mov	r0, r5
 8004974:	4621      	mov	r1, r4
 8004976:	f7ff ff59 	bl	800482c <__sflush_r>
 800497a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800497c:	07da      	lsls	r2, r3, #31
 800497e:	4605      	mov	r5, r0
 8004980:	d4e0      	bmi.n	8004944 <_fflush_r+0xc>
 8004982:	89a3      	ldrh	r3, [r4, #12]
 8004984:	059b      	lsls	r3, r3, #22
 8004986:	d4dd      	bmi.n	8004944 <_fflush_r+0xc>
 8004988:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800498a:	f000 f908 	bl	8004b9e <__retarget_lock_release_recursive>
 800498e:	e7d9      	b.n	8004944 <_fflush_r+0xc>
 8004990:	4b05      	ldr	r3, [pc, #20]	; (80049a8 <_fflush_r+0x70>)
 8004992:	429c      	cmp	r4, r3
 8004994:	d101      	bne.n	800499a <_fflush_r+0x62>
 8004996:	68ac      	ldr	r4, [r5, #8]
 8004998:	e7df      	b.n	800495a <_fflush_r+0x22>
 800499a:	4b04      	ldr	r3, [pc, #16]	; (80049ac <_fflush_r+0x74>)
 800499c:	429c      	cmp	r4, r3
 800499e:	bf08      	it	eq
 80049a0:	68ec      	ldreq	r4, [r5, #12]
 80049a2:	e7da      	b.n	800495a <_fflush_r+0x22>
 80049a4:	0800506c 	.word	0x0800506c
 80049a8:	0800508c 	.word	0x0800508c
 80049ac:	0800504c 	.word	0x0800504c

080049b0 <std>:
 80049b0:	2300      	movs	r3, #0
 80049b2:	b510      	push	{r4, lr}
 80049b4:	4604      	mov	r4, r0
 80049b6:	e9c0 3300 	strd	r3, r3, [r0]
 80049ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80049be:	6083      	str	r3, [r0, #8]
 80049c0:	8181      	strh	r1, [r0, #12]
 80049c2:	6643      	str	r3, [r0, #100]	; 0x64
 80049c4:	81c2      	strh	r2, [r0, #14]
 80049c6:	6183      	str	r3, [r0, #24]
 80049c8:	4619      	mov	r1, r3
 80049ca:	2208      	movs	r2, #8
 80049cc:	305c      	adds	r0, #92	; 0x5c
 80049ce:	f7ff fdef 	bl	80045b0 <memset>
 80049d2:	4b05      	ldr	r3, [pc, #20]	; (80049e8 <std+0x38>)
 80049d4:	6263      	str	r3, [r4, #36]	; 0x24
 80049d6:	4b05      	ldr	r3, [pc, #20]	; (80049ec <std+0x3c>)
 80049d8:	62a3      	str	r3, [r4, #40]	; 0x28
 80049da:	4b05      	ldr	r3, [pc, #20]	; (80049f0 <std+0x40>)
 80049dc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80049de:	4b05      	ldr	r3, [pc, #20]	; (80049f4 <std+0x44>)
 80049e0:	6224      	str	r4, [r4, #32]
 80049e2:	6323      	str	r3, [r4, #48]	; 0x30
 80049e4:	bd10      	pop	{r4, pc}
 80049e6:	bf00      	nop
 80049e8:	08004e4d 	.word	0x08004e4d
 80049ec:	08004e6f 	.word	0x08004e6f
 80049f0:	08004ea7 	.word	0x08004ea7
 80049f4:	08004ecb 	.word	0x08004ecb

080049f8 <_cleanup_r>:
 80049f8:	4901      	ldr	r1, [pc, #4]	; (8004a00 <_cleanup_r+0x8>)
 80049fa:	f000 b8af 	b.w	8004b5c <_fwalk_reent>
 80049fe:	bf00      	nop
 8004a00:	08004939 	.word	0x08004939

08004a04 <__sfmoreglue>:
 8004a04:	b570      	push	{r4, r5, r6, lr}
 8004a06:	2268      	movs	r2, #104	; 0x68
 8004a08:	1e4d      	subs	r5, r1, #1
 8004a0a:	4355      	muls	r5, r2
 8004a0c:	460e      	mov	r6, r1
 8004a0e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004a12:	f000 f997 	bl	8004d44 <_malloc_r>
 8004a16:	4604      	mov	r4, r0
 8004a18:	b140      	cbz	r0, 8004a2c <__sfmoreglue+0x28>
 8004a1a:	2100      	movs	r1, #0
 8004a1c:	e9c0 1600 	strd	r1, r6, [r0]
 8004a20:	300c      	adds	r0, #12
 8004a22:	60a0      	str	r0, [r4, #8]
 8004a24:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004a28:	f7ff fdc2 	bl	80045b0 <memset>
 8004a2c:	4620      	mov	r0, r4
 8004a2e:	bd70      	pop	{r4, r5, r6, pc}

08004a30 <__sfp_lock_acquire>:
 8004a30:	4801      	ldr	r0, [pc, #4]	; (8004a38 <__sfp_lock_acquire+0x8>)
 8004a32:	f000 b8b3 	b.w	8004b9c <__retarget_lock_acquire_recursive>
 8004a36:	bf00      	nop
 8004a38:	20000195 	.word	0x20000195

08004a3c <__sfp_lock_release>:
 8004a3c:	4801      	ldr	r0, [pc, #4]	; (8004a44 <__sfp_lock_release+0x8>)
 8004a3e:	f000 b8ae 	b.w	8004b9e <__retarget_lock_release_recursive>
 8004a42:	bf00      	nop
 8004a44:	20000195 	.word	0x20000195

08004a48 <__sinit_lock_acquire>:
 8004a48:	4801      	ldr	r0, [pc, #4]	; (8004a50 <__sinit_lock_acquire+0x8>)
 8004a4a:	f000 b8a7 	b.w	8004b9c <__retarget_lock_acquire_recursive>
 8004a4e:	bf00      	nop
 8004a50:	20000196 	.word	0x20000196

08004a54 <__sinit_lock_release>:
 8004a54:	4801      	ldr	r0, [pc, #4]	; (8004a5c <__sinit_lock_release+0x8>)
 8004a56:	f000 b8a2 	b.w	8004b9e <__retarget_lock_release_recursive>
 8004a5a:	bf00      	nop
 8004a5c:	20000196 	.word	0x20000196

08004a60 <__sinit>:
 8004a60:	b510      	push	{r4, lr}
 8004a62:	4604      	mov	r4, r0
 8004a64:	f7ff fff0 	bl	8004a48 <__sinit_lock_acquire>
 8004a68:	69a3      	ldr	r3, [r4, #24]
 8004a6a:	b11b      	cbz	r3, 8004a74 <__sinit+0x14>
 8004a6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a70:	f7ff bff0 	b.w	8004a54 <__sinit_lock_release>
 8004a74:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004a78:	6523      	str	r3, [r4, #80]	; 0x50
 8004a7a:	4b13      	ldr	r3, [pc, #76]	; (8004ac8 <__sinit+0x68>)
 8004a7c:	4a13      	ldr	r2, [pc, #76]	; (8004acc <__sinit+0x6c>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	62a2      	str	r2, [r4, #40]	; 0x28
 8004a82:	42a3      	cmp	r3, r4
 8004a84:	bf04      	itt	eq
 8004a86:	2301      	moveq	r3, #1
 8004a88:	61a3      	streq	r3, [r4, #24]
 8004a8a:	4620      	mov	r0, r4
 8004a8c:	f000 f820 	bl	8004ad0 <__sfp>
 8004a90:	6060      	str	r0, [r4, #4]
 8004a92:	4620      	mov	r0, r4
 8004a94:	f000 f81c 	bl	8004ad0 <__sfp>
 8004a98:	60a0      	str	r0, [r4, #8]
 8004a9a:	4620      	mov	r0, r4
 8004a9c:	f000 f818 	bl	8004ad0 <__sfp>
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	60e0      	str	r0, [r4, #12]
 8004aa4:	2104      	movs	r1, #4
 8004aa6:	6860      	ldr	r0, [r4, #4]
 8004aa8:	f7ff ff82 	bl	80049b0 <std>
 8004aac:	68a0      	ldr	r0, [r4, #8]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	2109      	movs	r1, #9
 8004ab2:	f7ff ff7d 	bl	80049b0 <std>
 8004ab6:	68e0      	ldr	r0, [r4, #12]
 8004ab8:	2202      	movs	r2, #2
 8004aba:	2112      	movs	r1, #18
 8004abc:	f7ff ff78 	bl	80049b0 <std>
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	61a3      	str	r3, [r4, #24]
 8004ac4:	e7d2      	b.n	8004a6c <__sinit+0xc>
 8004ac6:	bf00      	nop
 8004ac8:	08005048 	.word	0x08005048
 8004acc:	080049f9 	.word	0x080049f9

08004ad0 <__sfp>:
 8004ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ad2:	4607      	mov	r7, r0
 8004ad4:	f7ff ffac 	bl	8004a30 <__sfp_lock_acquire>
 8004ad8:	4b1e      	ldr	r3, [pc, #120]	; (8004b54 <__sfp+0x84>)
 8004ada:	681e      	ldr	r6, [r3, #0]
 8004adc:	69b3      	ldr	r3, [r6, #24]
 8004ade:	b913      	cbnz	r3, 8004ae6 <__sfp+0x16>
 8004ae0:	4630      	mov	r0, r6
 8004ae2:	f7ff ffbd 	bl	8004a60 <__sinit>
 8004ae6:	3648      	adds	r6, #72	; 0x48
 8004ae8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004aec:	3b01      	subs	r3, #1
 8004aee:	d503      	bpl.n	8004af8 <__sfp+0x28>
 8004af0:	6833      	ldr	r3, [r6, #0]
 8004af2:	b30b      	cbz	r3, 8004b38 <__sfp+0x68>
 8004af4:	6836      	ldr	r6, [r6, #0]
 8004af6:	e7f7      	b.n	8004ae8 <__sfp+0x18>
 8004af8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004afc:	b9d5      	cbnz	r5, 8004b34 <__sfp+0x64>
 8004afe:	4b16      	ldr	r3, [pc, #88]	; (8004b58 <__sfp+0x88>)
 8004b00:	60e3      	str	r3, [r4, #12]
 8004b02:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004b06:	6665      	str	r5, [r4, #100]	; 0x64
 8004b08:	f000 f847 	bl	8004b9a <__retarget_lock_init_recursive>
 8004b0c:	f7ff ff96 	bl	8004a3c <__sfp_lock_release>
 8004b10:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004b14:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004b18:	6025      	str	r5, [r4, #0]
 8004b1a:	61a5      	str	r5, [r4, #24]
 8004b1c:	2208      	movs	r2, #8
 8004b1e:	4629      	mov	r1, r5
 8004b20:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004b24:	f7ff fd44 	bl	80045b0 <memset>
 8004b28:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004b2c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004b30:	4620      	mov	r0, r4
 8004b32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b34:	3468      	adds	r4, #104	; 0x68
 8004b36:	e7d9      	b.n	8004aec <__sfp+0x1c>
 8004b38:	2104      	movs	r1, #4
 8004b3a:	4638      	mov	r0, r7
 8004b3c:	f7ff ff62 	bl	8004a04 <__sfmoreglue>
 8004b40:	4604      	mov	r4, r0
 8004b42:	6030      	str	r0, [r6, #0]
 8004b44:	2800      	cmp	r0, #0
 8004b46:	d1d5      	bne.n	8004af4 <__sfp+0x24>
 8004b48:	f7ff ff78 	bl	8004a3c <__sfp_lock_release>
 8004b4c:	230c      	movs	r3, #12
 8004b4e:	603b      	str	r3, [r7, #0]
 8004b50:	e7ee      	b.n	8004b30 <__sfp+0x60>
 8004b52:	bf00      	nop
 8004b54:	08005048 	.word	0x08005048
 8004b58:	ffff0001 	.word	0xffff0001

08004b5c <_fwalk_reent>:
 8004b5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b60:	4606      	mov	r6, r0
 8004b62:	4688      	mov	r8, r1
 8004b64:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004b68:	2700      	movs	r7, #0
 8004b6a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004b6e:	f1b9 0901 	subs.w	r9, r9, #1
 8004b72:	d505      	bpl.n	8004b80 <_fwalk_reent+0x24>
 8004b74:	6824      	ldr	r4, [r4, #0]
 8004b76:	2c00      	cmp	r4, #0
 8004b78:	d1f7      	bne.n	8004b6a <_fwalk_reent+0xe>
 8004b7a:	4638      	mov	r0, r7
 8004b7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b80:	89ab      	ldrh	r3, [r5, #12]
 8004b82:	2b01      	cmp	r3, #1
 8004b84:	d907      	bls.n	8004b96 <_fwalk_reent+0x3a>
 8004b86:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004b8a:	3301      	adds	r3, #1
 8004b8c:	d003      	beq.n	8004b96 <_fwalk_reent+0x3a>
 8004b8e:	4629      	mov	r1, r5
 8004b90:	4630      	mov	r0, r6
 8004b92:	47c0      	blx	r8
 8004b94:	4307      	orrs	r7, r0
 8004b96:	3568      	adds	r5, #104	; 0x68
 8004b98:	e7e9      	b.n	8004b6e <_fwalk_reent+0x12>

08004b9a <__retarget_lock_init_recursive>:
 8004b9a:	4770      	bx	lr

08004b9c <__retarget_lock_acquire_recursive>:
 8004b9c:	4770      	bx	lr

08004b9e <__retarget_lock_release_recursive>:
 8004b9e:	4770      	bx	lr

08004ba0 <__swhatbuf_r>:
 8004ba0:	b570      	push	{r4, r5, r6, lr}
 8004ba2:	460e      	mov	r6, r1
 8004ba4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ba8:	2900      	cmp	r1, #0
 8004baa:	b096      	sub	sp, #88	; 0x58
 8004bac:	4614      	mov	r4, r2
 8004bae:	461d      	mov	r5, r3
 8004bb0:	da08      	bge.n	8004bc4 <__swhatbuf_r+0x24>
 8004bb2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	602a      	str	r2, [r5, #0]
 8004bba:	061a      	lsls	r2, r3, #24
 8004bbc:	d410      	bmi.n	8004be0 <__swhatbuf_r+0x40>
 8004bbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004bc2:	e00e      	b.n	8004be2 <__swhatbuf_r+0x42>
 8004bc4:	466a      	mov	r2, sp
 8004bc6:	f000 f9a7 	bl	8004f18 <_fstat_r>
 8004bca:	2800      	cmp	r0, #0
 8004bcc:	dbf1      	blt.n	8004bb2 <__swhatbuf_r+0x12>
 8004bce:	9a01      	ldr	r2, [sp, #4]
 8004bd0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004bd4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004bd8:	425a      	negs	r2, r3
 8004bda:	415a      	adcs	r2, r3
 8004bdc:	602a      	str	r2, [r5, #0]
 8004bde:	e7ee      	b.n	8004bbe <__swhatbuf_r+0x1e>
 8004be0:	2340      	movs	r3, #64	; 0x40
 8004be2:	2000      	movs	r0, #0
 8004be4:	6023      	str	r3, [r4, #0]
 8004be6:	b016      	add	sp, #88	; 0x58
 8004be8:	bd70      	pop	{r4, r5, r6, pc}
	...

08004bec <__smakebuf_r>:
 8004bec:	898b      	ldrh	r3, [r1, #12]
 8004bee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004bf0:	079d      	lsls	r5, r3, #30
 8004bf2:	4606      	mov	r6, r0
 8004bf4:	460c      	mov	r4, r1
 8004bf6:	d507      	bpl.n	8004c08 <__smakebuf_r+0x1c>
 8004bf8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004bfc:	6023      	str	r3, [r4, #0]
 8004bfe:	6123      	str	r3, [r4, #16]
 8004c00:	2301      	movs	r3, #1
 8004c02:	6163      	str	r3, [r4, #20]
 8004c04:	b002      	add	sp, #8
 8004c06:	bd70      	pop	{r4, r5, r6, pc}
 8004c08:	ab01      	add	r3, sp, #4
 8004c0a:	466a      	mov	r2, sp
 8004c0c:	f7ff ffc8 	bl	8004ba0 <__swhatbuf_r>
 8004c10:	9900      	ldr	r1, [sp, #0]
 8004c12:	4605      	mov	r5, r0
 8004c14:	4630      	mov	r0, r6
 8004c16:	f000 f895 	bl	8004d44 <_malloc_r>
 8004c1a:	b948      	cbnz	r0, 8004c30 <__smakebuf_r+0x44>
 8004c1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c20:	059a      	lsls	r2, r3, #22
 8004c22:	d4ef      	bmi.n	8004c04 <__smakebuf_r+0x18>
 8004c24:	f023 0303 	bic.w	r3, r3, #3
 8004c28:	f043 0302 	orr.w	r3, r3, #2
 8004c2c:	81a3      	strh	r3, [r4, #12]
 8004c2e:	e7e3      	b.n	8004bf8 <__smakebuf_r+0xc>
 8004c30:	4b0d      	ldr	r3, [pc, #52]	; (8004c68 <__smakebuf_r+0x7c>)
 8004c32:	62b3      	str	r3, [r6, #40]	; 0x28
 8004c34:	89a3      	ldrh	r3, [r4, #12]
 8004c36:	6020      	str	r0, [r4, #0]
 8004c38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c3c:	81a3      	strh	r3, [r4, #12]
 8004c3e:	9b00      	ldr	r3, [sp, #0]
 8004c40:	6163      	str	r3, [r4, #20]
 8004c42:	9b01      	ldr	r3, [sp, #4]
 8004c44:	6120      	str	r0, [r4, #16]
 8004c46:	b15b      	cbz	r3, 8004c60 <__smakebuf_r+0x74>
 8004c48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c4c:	4630      	mov	r0, r6
 8004c4e:	f000 f975 	bl	8004f3c <_isatty_r>
 8004c52:	b128      	cbz	r0, 8004c60 <__smakebuf_r+0x74>
 8004c54:	89a3      	ldrh	r3, [r4, #12]
 8004c56:	f023 0303 	bic.w	r3, r3, #3
 8004c5a:	f043 0301 	orr.w	r3, r3, #1
 8004c5e:	81a3      	strh	r3, [r4, #12]
 8004c60:	89a0      	ldrh	r0, [r4, #12]
 8004c62:	4305      	orrs	r5, r0
 8004c64:	81a5      	strh	r5, [r4, #12]
 8004c66:	e7cd      	b.n	8004c04 <__smakebuf_r+0x18>
 8004c68:	080049f9 	.word	0x080049f9

08004c6c <_free_r>:
 8004c6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004c6e:	2900      	cmp	r1, #0
 8004c70:	d044      	beq.n	8004cfc <_free_r+0x90>
 8004c72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c76:	9001      	str	r0, [sp, #4]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	f1a1 0404 	sub.w	r4, r1, #4
 8004c7e:	bfb8      	it	lt
 8004c80:	18e4      	addlt	r4, r4, r3
 8004c82:	f000 f97d 	bl	8004f80 <__malloc_lock>
 8004c86:	4a1e      	ldr	r2, [pc, #120]	; (8004d00 <_free_r+0x94>)
 8004c88:	9801      	ldr	r0, [sp, #4]
 8004c8a:	6813      	ldr	r3, [r2, #0]
 8004c8c:	b933      	cbnz	r3, 8004c9c <_free_r+0x30>
 8004c8e:	6063      	str	r3, [r4, #4]
 8004c90:	6014      	str	r4, [r2, #0]
 8004c92:	b003      	add	sp, #12
 8004c94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004c98:	f000 b978 	b.w	8004f8c <__malloc_unlock>
 8004c9c:	42a3      	cmp	r3, r4
 8004c9e:	d908      	bls.n	8004cb2 <_free_r+0x46>
 8004ca0:	6825      	ldr	r5, [r4, #0]
 8004ca2:	1961      	adds	r1, r4, r5
 8004ca4:	428b      	cmp	r3, r1
 8004ca6:	bf01      	itttt	eq
 8004ca8:	6819      	ldreq	r1, [r3, #0]
 8004caa:	685b      	ldreq	r3, [r3, #4]
 8004cac:	1949      	addeq	r1, r1, r5
 8004cae:	6021      	streq	r1, [r4, #0]
 8004cb0:	e7ed      	b.n	8004c8e <_free_r+0x22>
 8004cb2:	461a      	mov	r2, r3
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	b10b      	cbz	r3, 8004cbc <_free_r+0x50>
 8004cb8:	42a3      	cmp	r3, r4
 8004cba:	d9fa      	bls.n	8004cb2 <_free_r+0x46>
 8004cbc:	6811      	ldr	r1, [r2, #0]
 8004cbe:	1855      	adds	r5, r2, r1
 8004cc0:	42a5      	cmp	r5, r4
 8004cc2:	d10b      	bne.n	8004cdc <_free_r+0x70>
 8004cc4:	6824      	ldr	r4, [r4, #0]
 8004cc6:	4421      	add	r1, r4
 8004cc8:	1854      	adds	r4, r2, r1
 8004cca:	42a3      	cmp	r3, r4
 8004ccc:	6011      	str	r1, [r2, #0]
 8004cce:	d1e0      	bne.n	8004c92 <_free_r+0x26>
 8004cd0:	681c      	ldr	r4, [r3, #0]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	6053      	str	r3, [r2, #4]
 8004cd6:	4421      	add	r1, r4
 8004cd8:	6011      	str	r1, [r2, #0]
 8004cda:	e7da      	b.n	8004c92 <_free_r+0x26>
 8004cdc:	d902      	bls.n	8004ce4 <_free_r+0x78>
 8004cde:	230c      	movs	r3, #12
 8004ce0:	6003      	str	r3, [r0, #0]
 8004ce2:	e7d6      	b.n	8004c92 <_free_r+0x26>
 8004ce4:	6825      	ldr	r5, [r4, #0]
 8004ce6:	1961      	adds	r1, r4, r5
 8004ce8:	428b      	cmp	r3, r1
 8004cea:	bf04      	itt	eq
 8004cec:	6819      	ldreq	r1, [r3, #0]
 8004cee:	685b      	ldreq	r3, [r3, #4]
 8004cf0:	6063      	str	r3, [r4, #4]
 8004cf2:	bf04      	itt	eq
 8004cf4:	1949      	addeq	r1, r1, r5
 8004cf6:	6021      	streq	r1, [r4, #0]
 8004cf8:	6054      	str	r4, [r2, #4]
 8004cfa:	e7ca      	b.n	8004c92 <_free_r+0x26>
 8004cfc:	b003      	add	sp, #12
 8004cfe:	bd30      	pop	{r4, r5, pc}
 8004d00:	20000198 	.word	0x20000198

08004d04 <sbrk_aligned>:
 8004d04:	b570      	push	{r4, r5, r6, lr}
 8004d06:	4e0e      	ldr	r6, [pc, #56]	; (8004d40 <sbrk_aligned+0x3c>)
 8004d08:	460c      	mov	r4, r1
 8004d0a:	6831      	ldr	r1, [r6, #0]
 8004d0c:	4605      	mov	r5, r0
 8004d0e:	b911      	cbnz	r1, 8004d16 <sbrk_aligned+0x12>
 8004d10:	f000 f88c 	bl	8004e2c <_sbrk_r>
 8004d14:	6030      	str	r0, [r6, #0]
 8004d16:	4621      	mov	r1, r4
 8004d18:	4628      	mov	r0, r5
 8004d1a:	f000 f887 	bl	8004e2c <_sbrk_r>
 8004d1e:	1c43      	adds	r3, r0, #1
 8004d20:	d00a      	beq.n	8004d38 <sbrk_aligned+0x34>
 8004d22:	1cc4      	adds	r4, r0, #3
 8004d24:	f024 0403 	bic.w	r4, r4, #3
 8004d28:	42a0      	cmp	r0, r4
 8004d2a:	d007      	beq.n	8004d3c <sbrk_aligned+0x38>
 8004d2c:	1a21      	subs	r1, r4, r0
 8004d2e:	4628      	mov	r0, r5
 8004d30:	f000 f87c 	bl	8004e2c <_sbrk_r>
 8004d34:	3001      	adds	r0, #1
 8004d36:	d101      	bne.n	8004d3c <sbrk_aligned+0x38>
 8004d38:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004d3c:	4620      	mov	r0, r4
 8004d3e:	bd70      	pop	{r4, r5, r6, pc}
 8004d40:	2000019c 	.word	0x2000019c

08004d44 <_malloc_r>:
 8004d44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d48:	1ccd      	adds	r5, r1, #3
 8004d4a:	f025 0503 	bic.w	r5, r5, #3
 8004d4e:	3508      	adds	r5, #8
 8004d50:	2d0c      	cmp	r5, #12
 8004d52:	bf38      	it	cc
 8004d54:	250c      	movcc	r5, #12
 8004d56:	2d00      	cmp	r5, #0
 8004d58:	4607      	mov	r7, r0
 8004d5a:	db01      	blt.n	8004d60 <_malloc_r+0x1c>
 8004d5c:	42a9      	cmp	r1, r5
 8004d5e:	d905      	bls.n	8004d6c <_malloc_r+0x28>
 8004d60:	230c      	movs	r3, #12
 8004d62:	603b      	str	r3, [r7, #0]
 8004d64:	2600      	movs	r6, #0
 8004d66:	4630      	mov	r0, r6
 8004d68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d6c:	4e2e      	ldr	r6, [pc, #184]	; (8004e28 <_malloc_r+0xe4>)
 8004d6e:	f000 f907 	bl	8004f80 <__malloc_lock>
 8004d72:	6833      	ldr	r3, [r6, #0]
 8004d74:	461c      	mov	r4, r3
 8004d76:	bb34      	cbnz	r4, 8004dc6 <_malloc_r+0x82>
 8004d78:	4629      	mov	r1, r5
 8004d7a:	4638      	mov	r0, r7
 8004d7c:	f7ff ffc2 	bl	8004d04 <sbrk_aligned>
 8004d80:	1c43      	adds	r3, r0, #1
 8004d82:	4604      	mov	r4, r0
 8004d84:	d14d      	bne.n	8004e22 <_malloc_r+0xde>
 8004d86:	6834      	ldr	r4, [r6, #0]
 8004d88:	4626      	mov	r6, r4
 8004d8a:	2e00      	cmp	r6, #0
 8004d8c:	d140      	bne.n	8004e10 <_malloc_r+0xcc>
 8004d8e:	6823      	ldr	r3, [r4, #0]
 8004d90:	4631      	mov	r1, r6
 8004d92:	4638      	mov	r0, r7
 8004d94:	eb04 0803 	add.w	r8, r4, r3
 8004d98:	f000 f848 	bl	8004e2c <_sbrk_r>
 8004d9c:	4580      	cmp	r8, r0
 8004d9e:	d13a      	bne.n	8004e16 <_malloc_r+0xd2>
 8004da0:	6821      	ldr	r1, [r4, #0]
 8004da2:	3503      	adds	r5, #3
 8004da4:	1a6d      	subs	r5, r5, r1
 8004da6:	f025 0503 	bic.w	r5, r5, #3
 8004daa:	3508      	adds	r5, #8
 8004dac:	2d0c      	cmp	r5, #12
 8004dae:	bf38      	it	cc
 8004db0:	250c      	movcc	r5, #12
 8004db2:	4629      	mov	r1, r5
 8004db4:	4638      	mov	r0, r7
 8004db6:	f7ff ffa5 	bl	8004d04 <sbrk_aligned>
 8004dba:	3001      	adds	r0, #1
 8004dbc:	d02b      	beq.n	8004e16 <_malloc_r+0xd2>
 8004dbe:	6823      	ldr	r3, [r4, #0]
 8004dc0:	442b      	add	r3, r5
 8004dc2:	6023      	str	r3, [r4, #0]
 8004dc4:	e00e      	b.n	8004de4 <_malloc_r+0xa0>
 8004dc6:	6822      	ldr	r2, [r4, #0]
 8004dc8:	1b52      	subs	r2, r2, r5
 8004dca:	d41e      	bmi.n	8004e0a <_malloc_r+0xc6>
 8004dcc:	2a0b      	cmp	r2, #11
 8004dce:	d916      	bls.n	8004dfe <_malloc_r+0xba>
 8004dd0:	1961      	adds	r1, r4, r5
 8004dd2:	42a3      	cmp	r3, r4
 8004dd4:	6025      	str	r5, [r4, #0]
 8004dd6:	bf18      	it	ne
 8004dd8:	6059      	strne	r1, [r3, #4]
 8004dda:	6863      	ldr	r3, [r4, #4]
 8004ddc:	bf08      	it	eq
 8004dde:	6031      	streq	r1, [r6, #0]
 8004de0:	5162      	str	r2, [r4, r5]
 8004de2:	604b      	str	r3, [r1, #4]
 8004de4:	4638      	mov	r0, r7
 8004de6:	f104 060b 	add.w	r6, r4, #11
 8004dea:	f000 f8cf 	bl	8004f8c <__malloc_unlock>
 8004dee:	f026 0607 	bic.w	r6, r6, #7
 8004df2:	1d23      	adds	r3, r4, #4
 8004df4:	1af2      	subs	r2, r6, r3
 8004df6:	d0b6      	beq.n	8004d66 <_malloc_r+0x22>
 8004df8:	1b9b      	subs	r3, r3, r6
 8004dfa:	50a3      	str	r3, [r4, r2]
 8004dfc:	e7b3      	b.n	8004d66 <_malloc_r+0x22>
 8004dfe:	6862      	ldr	r2, [r4, #4]
 8004e00:	42a3      	cmp	r3, r4
 8004e02:	bf0c      	ite	eq
 8004e04:	6032      	streq	r2, [r6, #0]
 8004e06:	605a      	strne	r2, [r3, #4]
 8004e08:	e7ec      	b.n	8004de4 <_malloc_r+0xa0>
 8004e0a:	4623      	mov	r3, r4
 8004e0c:	6864      	ldr	r4, [r4, #4]
 8004e0e:	e7b2      	b.n	8004d76 <_malloc_r+0x32>
 8004e10:	4634      	mov	r4, r6
 8004e12:	6876      	ldr	r6, [r6, #4]
 8004e14:	e7b9      	b.n	8004d8a <_malloc_r+0x46>
 8004e16:	230c      	movs	r3, #12
 8004e18:	603b      	str	r3, [r7, #0]
 8004e1a:	4638      	mov	r0, r7
 8004e1c:	f000 f8b6 	bl	8004f8c <__malloc_unlock>
 8004e20:	e7a1      	b.n	8004d66 <_malloc_r+0x22>
 8004e22:	6025      	str	r5, [r4, #0]
 8004e24:	e7de      	b.n	8004de4 <_malloc_r+0xa0>
 8004e26:	bf00      	nop
 8004e28:	20000198 	.word	0x20000198

08004e2c <_sbrk_r>:
 8004e2c:	b538      	push	{r3, r4, r5, lr}
 8004e2e:	4d06      	ldr	r5, [pc, #24]	; (8004e48 <_sbrk_r+0x1c>)
 8004e30:	2300      	movs	r3, #0
 8004e32:	4604      	mov	r4, r0
 8004e34:	4608      	mov	r0, r1
 8004e36:	602b      	str	r3, [r5, #0]
 8004e38:	f7fb fddc 	bl	80009f4 <_sbrk>
 8004e3c:	1c43      	adds	r3, r0, #1
 8004e3e:	d102      	bne.n	8004e46 <_sbrk_r+0x1a>
 8004e40:	682b      	ldr	r3, [r5, #0]
 8004e42:	b103      	cbz	r3, 8004e46 <_sbrk_r+0x1a>
 8004e44:	6023      	str	r3, [r4, #0]
 8004e46:	bd38      	pop	{r3, r4, r5, pc}
 8004e48:	200001a0 	.word	0x200001a0

08004e4c <__sread>:
 8004e4c:	b510      	push	{r4, lr}
 8004e4e:	460c      	mov	r4, r1
 8004e50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e54:	f000 f8a0 	bl	8004f98 <_read_r>
 8004e58:	2800      	cmp	r0, #0
 8004e5a:	bfab      	itete	ge
 8004e5c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004e5e:	89a3      	ldrhlt	r3, [r4, #12]
 8004e60:	181b      	addge	r3, r3, r0
 8004e62:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004e66:	bfac      	ite	ge
 8004e68:	6563      	strge	r3, [r4, #84]	; 0x54
 8004e6a:	81a3      	strhlt	r3, [r4, #12]
 8004e6c:	bd10      	pop	{r4, pc}

08004e6e <__swrite>:
 8004e6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e72:	461f      	mov	r7, r3
 8004e74:	898b      	ldrh	r3, [r1, #12]
 8004e76:	05db      	lsls	r3, r3, #23
 8004e78:	4605      	mov	r5, r0
 8004e7a:	460c      	mov	r4, r1
 8004e7c:	4616      	mov	r6, r2
 8004e7e:	d505      	bpl.n	8004e8c <__swrite+0x1e>
 8004e80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e84:	2302      	movs	r3, #2
 8004e86:	2200      	movs	r2, #0
 8004e88:	f000 f868 	bl	8004f5c <_lseek_r>
 8004e8c:	89a3      	ldrh	r3, [r4, #12]
 8004e8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e92:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e96:	81a3      	strh	r3, [r4, #12]
 8004e98:	4632      	mov	r2, r6
 8004e9a:	463b      	mov	r3, r7
 8004e9c:	4628      	mov	r0, r5
 8004e9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ea2:	f000 b817 	b.w	8004ed4 <_write_r>

08004ea6 <__sseek>:
 8004ea6:	b510      	push	{r4, lr}
 8004ea8:	460c      	mov	r4, r1
 8004eaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004eae:	f000 f855 	bl	8004f5c <_lseek_r>
 8004eb2:	1c43      	adds	r3, r0, #1
 8004eb4:	89a3      	ldrh	r3, [r4, #12]
 8004eb6:	bf15      	itete	ne
 8004eb8:	6560      	strne	r0, [r4, #84]	; 0x54
 8004eba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004ebe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004ec2:	81a3      	strheq	r3, [r4, #12]
 8004ec4:	bf18      	it	ne
 8004ec6:	81a3      	strhne	r3, [r4, #12]
 8004ec8:	bd10      	pop	{r4, pc}

08004eca <__sclose>:
 8004eca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ece:	f000 b813 	b.w	8004ef8 <_close_r>
	...

08004ed4 <_write_r>:
 8004ed4:	b538      	push	{r3, r4, r5, lr}
 8004ed6:	4d07      	ldr	r5, [pc, #28]	; (8004ef4 <_write_r+0x20>)
 8004ed8:	4604      	mov	r4, r0
 8004eda:	4608      	mov	r0, r1
 8004edc:	4611      	mov	r1, r2
 8004ede:	2200      	movs	r2, #0
 8004ee0:	602a      	str	r2, [r5, #0]
 8004ee2:	461a      	mov	r2, r3
 8004ee4:	f7fb fd3c 	bl	8000960 <_write>
 8004ee8:	1c43      	adds	r3, r0, #1
 8004eea:	d102      	bne.n	8004ef2 <_write_r+0x1e>
 8004eec:	682b      	ldr	r3, [r5, #0]
 8004eee:	b103      	cbz	r3, 8004ef2 <_write_r+0x1e>
 8004ef0:	6023      	str	r3, [r4, #0]
 8004ef2:	bd38      	pop	{r3, r4, r5, pc}
 8004ef4:	200001a0 	.word	0x200001a0

08004ef8 <_close_r>:
 8004ef8:	b538      	push	{r3, r4, r5, lr}
 8004efa:	4d06      	ldr	r5, [pc, #24]	; (8004f14 <_close_r+0x1c>)
 8004efc:	2300      	movs	r3, #0
 8004efe:	4604      	mov	r4, r0
 8004f00:	4608      	mov	r0, r1
 8004f02:	602b      	str	r3, [r5, #0]
 8004f04:	f7fb fd42 	bl	800098c <_close>
 8004f08:	1c43      	adds	r3, r0, #1
 8004f0a:	d102      	bne.n	8004f12 <_close_r+0x1a>
 8004f0c:	682b      	ldr	r3, [r5, #0]
 8004f0e:	b103      	cbz	r3, 8004f12 <_close_r+0x1a>
 8004f10:	6023      	str	r3, [r4, #0]
 8004f12:	bd38      	pop	{r3, r4, r5, pc}
 8004f14:	200001a0 	.word	0x200001a0

08004f18 <_fstat_r>:
 8004f18:	b538      	push	{r3, r4, r5, lr}
 8004f1a:	4d07      	ldr	r5, [pc, #28]	; (8004f38 <_fstat_r+0x20>)
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	4604      	mov	r4, r0
 8004f20:	4608      	mov	r0, r1
 8004f22:	4611      	mov	r1, r2
 8004f24:	602b      	str	r3, [r5, #0]
 8004f26:	f7fb fd3d 	bl	80009a4 <_fstat>
 8004f2a:	1c43      	adds	r3, r0, #1
 8004f2c:	d102      	bne.n	8004f34 <_fstat_r+0x1c>
 8004f2e:	682b      	ldr	r3, [r5, #0]
 8004f30:	b103      	cbz	r3, 8004f34 <_fstat_r+0x1c>
 8004f32:	6023      	str	r3, [r4, #0]
 8004f34:	bd38      	pop	{r3, r4, r5, pc}
 8004f36:	bf00      	nop
 8004f38:	200001a0 	.word	0x200001a0

08004f3c <_isatty_r>:
 8004f3c:	b538      	push	{r3, r4, r5, lr}
 8004f3e:	4d06      	ldr	r5, [pc, #24]	; (8004f58 <_isatty_r+0x1c>)
 8004f40:	2300      	movs	r3, #0
 8004f42:	4604      	mov	r4, r0
 8004f44:	4608      	mov	r0, r1
 8004f46:	602b      	str	r3, [r5, #0]
 8004f48:	f7fb fd3c 	bl	80009c4 <_isatty>
 8004f4c:	1c43      	adds	r3, r0, #1
 8004f4e:	d102      	bne.n	8004f56 <_isatty_r+0x1a>
 8004f50:	682b      	ldr	r3, [r5, #0]
 8004f52:	b103      	cbz	r3, 8004f56 <_isatty_r+0x1a>
 8004f54:	6023      	str	r3, [r4, #0]
 8004f56:	bd38      	pop	{r3, r4, r5, pc}
 8004f58:	200001a0 	.word	0x200001a0

08004f5c <_lseek_r>:
 8004f5c:	b538      	push	{r3, r4, r5, lr}
 8004f5e:	4d07      	ldr	r5, [pc, #28]	; (8004f7c <_lseek_r+0x20>)
 8004f60:	4604      	mov	r4, r0
 8004f62:	4608      	mov	r0, r1
 8004f64:	4611      	mov	r1, r2
 8004f66:	2200      	movs	r2, #0
 8004f68:	602a      	str	r2, [r5, #0]
 8004f6a:	461a      	mov	r2, r3
 8004f6c:	f7fb fd35 	bl	80009da <_lseek>
 8004f70:	1c43      	adds	r3, r0, #1
 8004f72:	d102      	bne.n	8004f7a <_lseek_r+0x1e>
 8004f74:	682b      	ldr	r3, [r5, #0]
 8004f76:	b103      	cbz	r3, 8004f7a <_lseek_r+0x1e>
 8004f78:	6023      	str	r3, [r4, #0]
 8004f7a:	bd38      	pop	{r3, r4, r5, pc}
 8004f7c:	200001a0 	.word	0x200001a0

08004f80 <__malloc_lock>:
 8004f80:	4801      	ldr	r0, [pc, #4]	; (8004f88 <__malloc_lock+0x8>)
 8004f82:	f7ff be0b 	b.w	8004b9c <__retarget_lock_acquire_recursive>
 8004f86:	bf00      	nop
 8004f88:	20000194 	.word	0x20000194

08004f8c <__malloc_unlock>:
 8004f8c:	4801      	ldr	r0, [pc, #4]	; (8004f94 <__malloc_unlock+0x8>)
 8004f8e:	f7ff be06 	b.w	8004b9e <__retarget_lock_release_recursive>
 8004f92:	bf00      	nop
 8004f94:	20000194 	.word	0x20000194

08004f98 <_read_r>:
 8004f98:	b538      	push	{r3, r4, r5, lr}
 8004f9a:	4d07      	ldr	r5, [pc, #28]	; (8004fb8 <_read_r+0x20>)
 8004f9c:	4604      	mov	r4, r0
 8004f9e:	4608      	mov	r0, r1
 8004fa0:	4611      	mov	r1, r2
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	602a      	str	r2, [r5, #0]
 8004fa6:	461a      	mov	r2, r3
 8004fa8:	f7fb fcbc 	bl	8000924 <_read>
 8004fac:	1c43      	adds	r3, r0, #1
 8004fae:	d102      	bne.n	8004fb6 <_read_r+0x1e>
 8004fb0:	682b      	ldr	r3, [r5, #0]
 8004fb2:	b103      	cbz	r3, 8004fb6 <_read_r+0x1e>
 8004fb4:	6023      	str	r3, [r4, #0]
 8004fb6:	bd38      	pop	{r3, r4, r5, pc}
 8004fb8:	200001a0 	.word	0x200001a0

08004fbc <_init>:
 8004fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fbe:	bf00      	nop
 8004fc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fc2:	bc08      	pop	{r3}
 8004fc4:	469e      	mov	lr, r3
 8004fc6:	4770      	bx	lr

08004fc8 <_fini>:
 8004fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fca:	bf00      	nop
 8004fcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fce:	bc08      	pop	{r3}
 8004fd0:	469e      	mov	lr, r3
 8004fd2:	4770      	bx	lr
