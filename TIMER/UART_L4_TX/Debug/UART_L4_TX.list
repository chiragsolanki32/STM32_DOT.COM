
UART_L4_TX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000085c0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004ec  08008770  08008770  00018770  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c5c  08008c5c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08008c5c  08008c5c  00018c5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008c64  08008c64  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c64  08008c64  00018c64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008c68  08008c68  00018c68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08008c6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c4  200001e0  08008e4c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002a4  08008e4c  000202a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b714  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019c7  00000000  00000000  0002b924  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000998  00000000  00000000  0002d2f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008f0  00000000  00000000  0002dc88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028bdb  00000000  00000000  0002e578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b114  00000000  00000000  00057153  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f715a  00000000  00000000  00062267  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001593c1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bf4  00000000  00000000  00159414  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008758 	.word	0x08008758

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	08008758 	.word	0x08008758

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cbc:	f000 b9aa 	b.w	8001014 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468e      	mov	lr, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d14d      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d52:	428a      	cmp	r2, r1
 8000d54:	4694      	mov	ip, r2
 8000d56:	d969      	bls.n	8000e2c <__udivmoddi4+0xe8>
 8000d58:	fab2 f282 	clz	r2, r2
 8000d5c:	b152      	cbz	r2, 8000d74 <__udivmoddi4+0x30>
 8000d5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d62:	f1c2 0120 	rsb	r1, r2, #32
 8000d66:	fa20 f101 	lsr.w	r1, r0, r1
 8000d6a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d72:	4094      	lsls	r4, r2
 8000d74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d78:	0c21      	lsrs	r1, r4, #16
 8000d7a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d7e:	fa1f f78c 	uxth.w	r7, ip
 8000d82:	fb08 e316 	mls	r3, r8, r6, lr
 8000d86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d8a:	fb06 f107 	mul.w	r1, r6, r7
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d9a:	f080 811f 	bcs.w	8000fdc <__udivmoddi4+0x298>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 811c 	bls.w	8000fdc <__udivmoddi4+0x298>
 8000da4:	3e02      	subs	r6, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a5b      	subs	r3, r3, r1
 8000daa:	b2a4      	uxth	r4, r4
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3310 	mls	r3, r8, r0, r3
 8000db4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db8:	fb00 f707 	mul.w	r7, r0, r7
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	d90a      	bls.n	8000dd6 <__udivmoddi4+0x92>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dc8:	f080 810a 	bcs.w	8000fe0 <__udivmoddi4+0x29c>
 8000dcc:	42a7      	cmp	r7, r4
 8000dce:	f240 8107 	bls.w	8000fe0 <__udivmoddi4+0x29c>
 8000dd2:	4464      	add	r4, ip
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dda:	1be4      	subs	r4, r4, r7
 8000ddc:	2600      	movs	r6, #0
 8000dde:	b11d      	cbz	r5, 8000de8 <__udivmoddi4+0xa4>
 8000de0:	40d4      	lsrs	r4, r2
 8000de2:	2300      	movs	r3, #0
 8000de4:	e9c5 4300 	strd	r4, r3, [r5]
 8000de8:	4631      	mov	r1, r6
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d909      	bls.n	8000e06 <__udivmoddi4+0xc2>
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	f000 80ef 	beq.w	8000fd6 <__udivmoddi4+0x292>
 8000df8:	2600      	movs	r6, #0
 8000dfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dfe:	4630      	mov	r0, r6
 8000e00:	4631      	mov	r1, r6
 8000e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e06:	fab3 f683 	clz	r6, r3
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	d14a      	bne.n	8000ea4 <__udivmoddi4+0x160>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d302      	bcc.n	8000e18 <__udivmoddi4+0xd4>
 8000e12:	4282      	cmp	r2, r0
 8000e14:	f200 80f9 	bhi.w	800100a <__udivmoddi4+0x2c6>
 8000e18:	1a84      	subs	r4, r0, r2
 8000e1a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e1e:	2001      	movs	r0, #1
 8000e20:	469e      	mov	lr, r3
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	d0e0      	beq.n	8000de8 <__udivmoddi4+0xa4>
 8000e26:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e2a:	e7dd      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000e2c:	b902      	cbnz	r2, 8000e30 <__udivmoddi4+0xec>
 8000e2e:	deff      	udf	#255	; 0xff
 8000e30:	fab2 f282 	clz	r2, r2
 8000e34:	2a00      	cmp	r2, #0
 8000e36:	f040 8092 	bne.w	8000f5e <__udivmoddi4+0x21a>
 8000e3a:	eba1 010c 	sub.w	r1, r1, ip
 8000e3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e42:	fa1f fe8c 	uxth.w	lr, ip
 8000e46:	2601      	movs	r6, #1
 8000e48:	0c20      	lsrs	r0, r4, #16
 8000e4a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e4e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e56:	fb0e f003 	mul.w	r0, lr, r3
 8000e5a:	4288      	cmp	r0, r1
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x12c>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x12a>
 8000e68:	4288      	cmp	r0, r1
 8000e6a:	f200 80cb 	bhi.w	8001004 <__udivmoddi4+0x2c0>
 8000e6e:	4643      	mov	r3, r8
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e78:	fb07 1110 	mls	r1, r7, r0, r1
 8000e7c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e80:	fb0e fe00 	mul.w	lr, lr, r0
 8000e84:	45a6      	cmp	lr, r4
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x156>
 8000e88:	eb1c 0404 	adds.w	r4, ip, r4
 8000e8c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e90:	d202      	bcs.n	8000e98 <__udivmoddi4+0x154>
 8000e92:	45a6      	cmp	lr, r4
 8000e94:	f200 80bb 	bhi.w	800100e <__udivmoddi4+0x2ca>
 8000e98:	4608      	mov	r0, r1
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ea2:	e79c      	b.n	8000dde <__udivmoddi4+0x9a>
 8000ea4:	f1c6 0720 	rsb	r7, r6, #32
 8000ea8:	40b3      	lsls	r3, r6
 8000eaa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eb2:	fa20 f407 	lsr.w	r4, r0, r7
 8000eb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eba:	431c      	orrs	r4, r3
 8000ebc:	40f9      	lsrs	r1, r7
 8000ebe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ec2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eca:	0c20      	lsrs	r0, r4, #16
 8000ecc:	fa1f fe8c 	uxth.w	lr, ip
 8000ed0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ed4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ed8:	fb08 f00e 	mul.w	r0, r8, lr
 8000edc:	4288      	cmp	r0, r1
 8000ede:	fa02 f206 	lsl.w	r2, r2, r6
 8000ee2:	d90b      	bls.n	8000efc <__udivmoddi4+0x1b8>
 8000ee4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000eec:	f080 8088 	bcs.w	8001000 <__udivmoddi4+0x2bc>
 8000ef0:	4288      	cmp	r0, r1
 8000ef2:	f240 8085 	bls.w	8001000 <__udivmoddi4+0x2bc>
 8000ef6:	f1a8 0802 	sub.w	r8, r8, #2
 8000efa:	4461      	add	r1, ip
 8000efc:	1a09      	subs	r1, r1, r0
 8000efe:	b2a4      	uxth	r4, r4
 8000f00:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f04:	fb09 1110 	mls	r1, r9, r0, r1
 8000f08:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f10:	458e      	cmp	lr, r1
 8000f12:	d908      	bls.n	8000f26 <__udivmoddi4+0x1e2>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000f1c:	d26c      	bcs.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f1e:	458e      	cmp	lr, r1
 8000f20:	d96a      	bls.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f22:	3802      	subs	r0, #2
 8000f24:	4461      	add	r1, ip
 8000f26:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f2a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f2e:	eba1 010e 	sub.w	r1, r1, lr
 8000f32:	42a1      	cmp	r1, r4
 8000f34:	46c8      	mov	r8, r9
 8000f36:	46a6      	mov	lr, r4
 8000f38:	d356      	bcc.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f3a:	d053      	beq.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f3c:	b15d      	cbz	r5, 8000f56 <__udivmoddi4+0x212>
 8000f3e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f42:	eb61 010e 	sbc.w	r1, r1, lr
 8000f46:	fa01 f707 	lsl.w	r7, r1, r7
 8000f4a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f4e:	40f1      	lsrs	r1, r6
 8000f50:	431f      	orrs	r7, r3
 8000f52:	e9c5 7100 	strd	r7, r1, [r5]
 8000f56:	2600      	movs	r6, #0
 8000f58:	4631      	mov	r1, r6
 8000f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5e:	f1c2 0320 	rsb	r3, r2, #32
 8000f62:	40d8      	lsrs	r0, r3
 8000f64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f68:	fa21 f303 	lsr.w	r3, r1, r3
 8000f6c:	4091      	lsls	r1, r2
 8000f6e:	4301      	orrs	r1, r0
 8000f70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f74:	fa1f fe8c 	uxth.w	lr, ip
 8000f78:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f7c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f80:	0c0b      	lsrs	r3, r1, #16
 8000f82:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f86:	fb00 f60e 	mul.w	r6, r0, lr
 8000f8a:	429e      	cmp	r6, r3
 8000f8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f90:	d908      	bls.n	8000fa4 <__udivmoddi4+0x260>
 8000f92:	eb1c 0303 	adds.w	r3, ip, r3
 8000f96:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f9a:	d22f      	bcs.n	8000ffc <__udivmoddi4+0x2b8>
 8000f9c:	429e      	cmp	r6, r3
 8000f9e:	d92d      	bls.n	8000ffc <__udivmoddi4+0x2b8>
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	4463      	add	r3, ip
 8000fa4:	1b9b      	subs	r3, r3, r6
 8000fa6:	b289      	uxth	r1, r1
 8000fa8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fac:	fb07 3316 	mls	r3, r7, r6, r3
 8000fb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fb8:	428b      	cmp	r3, r1
 8000fba:	d908      	bls.n	8000fce <__udivmoddi4+0x28a>
 8000fbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000fc4:	d216      	bcs.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fc6:	428b      	cmp	r3, r1
 8000fc8:	d914      	bls.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fca:	3e02      	subs	r6, #2
 8000fcc:	4461      	add	r1, ip
 8000fce:	1ac9      	subs	r1, r1, r3
 8000fd0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fd4:	e738      	b.n	8000e48 <__udivmoddi4+0x104>
 8000fd6:	462e      	mov	r6, r5
 8000fd8:	4628      	mov	r0, r5
 8000fda:	e705      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	e6e3      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	e6f8      	b.n	8000dd6 <__udivmoddi4+0x92>
 8000fe4:	454b      	cmp	r3, r9
 8000fe6:	d2a9      	bcs.n	8000f3c <__udivmoddi4+0x1f8>
 8000fe8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fec:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	e7a3      	b.n	8000f3c <__udivmoddi4+0x1f8>
 8000ff4:	4646      	mov	r6, r8
 8000ff6:	e7ea      	b.n	8000fce <__udivmoddi4+0x28a>
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	e794      	b.n	8000f26 <__udivmoddi4+0x1e2>
 8000ffc:	4640      	mov	r0, r8
 8000ffe:	e7d1      	b.n	8000fa4 <__udivmoddi4+0x260>
 8001000:	46d0      	mov	r8, sl
 8001002:	e77b      	b.n	8000efc <__udivmoddi4+0x1b8>
 8001004:	3b02      	subs	r3, #2
 8001006:	4461      	add	r1, ip
 8001008:	e732      	b.n	8000e70 <__udivmoddi4+0x12c>
 800100a:	4630      	mov	r0, r6
 800100c:	e709      	b.n	8000e22 <__udivmoddi4+0xde>
 800100e:	4464      	add	r4, ip
 8001010:	3802      	subs	r0, #2
 8001012:	e742      	b.n	8000e9a <__udivmoddi4+0x156>

08001014 <__aeabi_idiv0>:
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800101c:	f000 fa75 	bl	800150a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001020:	f000 f818 	bl	8001054 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001024:	f000 f892 	bl	800114c <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8001028:	f000 f864 	bl	80010f4 <MX_LPUART1_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(HAL_UART_Receive(&hlpuart1, rx_buffer, 1, 250)== HAL_OK)
 800102c:	23fa      	movs	r3, #250	; 0xfa
 800102e:	2201      	movs	r2, #1
 8001030:	4906      	ldr	r1, [pc, #24]	; (800104c <main+0x34>)
 8001032:	4807      	ldr	r0, [pc, #28]	; (8001050 <main+0x38>)
 8001034:	f002 f9b4 	bl	80033a0 <HAL_UART_Receive>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d1f6      	bne.n	800102c <main+0x14>
	 	  {
	 		  HAL_UART_Transmit(&hlpuart1, rx_buffer, 1, 250);
 800103e:	23fa      	movs	r3, #250	; 0xfa
 8001040:	2201      	movs	r2, #1
 8001042:	4902      	ldr	r1, [pc, #8]	; (800104c <main+0x34>)
 8001044:	4802      	ldr	r0, [pc, #8]	; (8001050 <main+0x38>)
 8001046:	f002 f917 	bl	8003278 <HAL_UART_Transmit>
	  if(HAL_UART_Receive(&hlpuart1, rx_buffer, 1, 250)== HAL_OK)
 800104a:	e7ef      	b.n	800102c <main+0x14>
 800104c:	20000280 	.word	0x20000280
 8001050:	200001fc 	.word	0x200001fc

08001054 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b096      	sub	sp, #88	; 0x58
 8001058:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800105a:	f107 0314 	add.w	r3, r7, #20
 800105e:	2244      	movs	r2, #68	; 0x44
 8001060:	2100      	movs	r1, #0
 8001062:	4618      	mov	r0, r3
 8001064:	f002 ff00 	bl	8003e68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001068:	463b      	mov	r3, r7
 800106a:	2200      	movs	r2, #0
 800106c:	601a      	str	r2, [r3, #0]
 800106e:	605a      	str	r2, [r3, #4]
 8001070:	609a      	str	r2, [r3, #8]
 8001072:	60da      	str	r2, [r3, #12]
 8001074:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001076:	f44f 7000 	mov.w	r0, #512	; 0x200
 800107a:	f000 fd41 	bl	8001b00 <HAL_PWREx_ControlVoltageScaling>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001084:	f000 f892 	bl	80011ac <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001088:	2301      	movs	r3, #1
 800108a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800108c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001090:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001092:	2302      	movs	r3, #2
 8001094:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001096:	2303      	movs	r3, #3
 8001098:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800109a:	2301      	movs	r3, #1
 800109c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 800109e:	2314      	movs	r3, #20
 80010a0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010a2:	2302      	movs	r3, #2
 80010a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80010a6:	2302      	movs	r3, #2
 80010a8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80010aa:	2302      	movs	r3, #2
 80010ac:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010ae:	f107 0314 	add.w	r3, r7, #20
 80010b2:	4618      	mov	r0, r3
 80010b4:	f000 fd8a 	bl	8001bcc <HAL_RCC_OscConfig>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80010be:	f000 f875 	bl	80011ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010c2:	230f      	movs	r3, #15
 80010c4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010c6:	2303      	movs	r3, #3
 80010c8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010ca:	2300      	movs	r3, #0
 80010cc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010d4:	2300      	movs	r3, #0
 80010d6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80010d8:	463b      	mov	r3, r7
 80010da:	2104      	movs	r1, #4
 80010dc:	4618      	mov	r0, r3
 80010de:	f001 f98f 	bl	8002400 <HAL_RCC_ClockConfig>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <SystemClock_Config+0x98>
  {
    Error_Handler();
 80010e8:	f000 f860 	bl	80011ac <Error_Handler>
  }
}
 80010ec:	bf00      	nop
 80010ee:	3758      	adds	r7, #88	; 0x58
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80010f8:	4b12      	ldr	r3, [pc, #72]	; (8001144 <MX_LPUART1_UART_Init+0x50>)
 80010fa:	4a13      	ldr	r2, [pc, #76]	; (8001148 <MX_LPUART1_UART_Init+0x54>)
 80010fc:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80010fe:	4b11      	ldr	r3, [pc, #68]	; (8001144 <MX_LPUART1_UART_Init+0x50>)
 8001100:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001104:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001106:	4b0f      	ldr	r3, [pc, #60]	; (8001144 <MX_LPUART1_UART_Init+0x50>)
 8001108:	2200      	movs	r2, #0
 800110a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800110c:	4b0d      	ldr	r3, [pc, #52]	; (8001144 <MX_LPUART1_UART_Init+0x50>)
 800110e:	2200      	movs	r2, #0
 8001110:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001112:	4b0c      	ldr	r3, [pc, #48]	; (8001144 <MX_LPUART1_UART_Init+0x50>)
 8001114:	2200      	movs	r2, #0
 8001116:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001118:	4b0a      	ldr	r3, [pc, #40]	; (8001144 <MX_LPUART1_UART_Init+0x50>)
 800111a:	220c      	movs	r2, #12
 800111c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800111e:	4b09      	ldr	r3, [pc, #36]	; (8001144 <MX_LPUART1_UART_Init+0x50>)
 8001120:	2200      	movs	r2, #0
 8001122:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001124:	4b07      	ldr	r3, [pc, #28]	; (8001144 <MX_LPUART1_UART_Init+0x50>)
 8001126:	2200      	movs	r2, #0
 8001128:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800112a:	4b06      	ldr	r3, [pc, #24]	; (8001144 <MX_LPUART1_UART_Init+0x50>)
 800112c:	2200      	movs	r2, #0
 800112e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001130:	4804      	ldr	r0, [pc, #16]	; (8001144 <MX_LPUART1_UART_Init+0x50>)
 8001132:	f002 f853 	bl	80031dc <HAL_UART_Init>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 800113c:	f000 f836 	bl	80011ac <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001140:	bf00      	nop
 8001142:	bd80      	pop	{r7, pc}
 8001144:	200001fc 	.word	0x200001fc
 8001148:	40008000 	.word	0x40008000

0800114c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001152:	4b15      	ldr	r3, [pc, #84]	; (80011a8 <MX_GPIO_Init+0x5c>)
 8001154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001156:	4a14      	ldr	r2, [pc, #80]	; (80011a8 <MX_GPIO_Init+0x5c>)
 8001158:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800115c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800115e:	4b12      	ldr	r3, [pc, #72]	; (80011a8 <MX_GPIO_Init+0x5c>)
 8001160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001162:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001166:	60fb      	str	r3, [r7, #12]
 8001168:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800116a:	4b0f      	ldr	r3, [pc, #60]	; (80011a8 <MX_GPIO_Init+0x5c>)
 800116c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800116e:	4a0e      	ldr	r2, [pc, #56]	; (80011a8 <MX_GPIO_Init+0x5c>)
 8001170:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001174:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001176:	4b0c      	ldr	r3, [pc, #48]	; (80011a8 <MX_GPIO_Init+0x5c>)
 8001178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800117a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800117e:	60bb      	str	r3, [r7, #8]
 8001180:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 8001182:	f000 fd13 	bl	8001bac <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001186:	4b08      	ldr	r3, [pc, #32]	; (80011a8 <MX_GPIO_Init+0x5c>)
 8001188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800118a:	4a07      	ldr	r2, [pc, #28]	; (80011a8 <MX_GPIO_Init+0x5c>)
 800118c:	f043 0301 	orr.w	r3, r3, #1
 8001190:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001192:	4b05      	ldr	r3, [pc, #20]	; (80011a8 <MX_GPIO_Init+0x5c>)
 8001194:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001196:	f003 0301 	and.w	r3, r3, #1
 800119a:	607b      	str	r3, [r7, #4]
 800119c:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800119e:	bf00      	nop
 80011a0:	3710      	adds	r7, #16
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	40021000 	.word	0x40021000

080011ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011b0:	b672      	cpsid	i
}
 80011b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011b4:	e7fe      	b.n	80011b4 <Error_Handler+0x8>
	...

080011b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011be:	4b0f      	ldr	r3, [pc, #60]	; (80011fc <HAL_MspInit+0x44>)
 80011c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011c2:	4a0e      	ldr	r2, [pc, #56]	; (80011fc <HAL_MspInit+0x44>)
 80011c4:	f043 0301 	orr.w	r3, r3, #1
 80011c8:	6613      	str	r3, [r2, #96]	; 0x60
 80011ca:	4b0c      	ldr	r3, [pc, #48]	; (80011fc <HAL_MspInit+0x44>)
 80011cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011ce:	f003 0301 	and.w	r3, r3, #1
 80011d2:	607b      	str	r3, [r7, #4]
 80011d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011d6:	4b09      	ldr	r3, [pc, #36]	; (80011fc <HAL_MspInit+0x44>)
 80011d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011da:	4a08      	ldr	r2, [pc, #32]	; (80011fc <HAL_MspInit+0x44>)
 80011dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011e0:	6593      	str	r3, [r2, #88]	; 0x58
 80011e2:	4b06      	ldr	r3, [pc, #24]	; (80011fc <HAL_MspInit+0x44>)
 80011e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ea:	603b      	str	r3, [r7, #0]
 80011ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011ee:	bf00      	nop
 80011f0:	370c      	adds	r7, #12
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	40021000 	.word	0x40021000

08001200 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b0ac      	sub	sp, #176	; 0xb0
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001208:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	605a      	str	r2, [r3, #4]
 8001212:	609a      	str	r2, [r3, #8]
 8001214:	60da      	str	r2, [r3, #12]
 8001216:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001218:	f107 0310 	add.w	r3, r7, #16
 800121c:	228c      	movs	r2, #140	; 0x8c
 800121e:	2100      	movs	r1, #0
 8001220:	4618      	mov	r0, r3
 8001222:	f002 fe21 	bl	8003e68 <memset>
  if(huart->Instance==LPUART1)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4a22      	ldr	r2, [pc, #136]	; (80012b4 <HAL_UART_MspInit+0xb4>)
 800122c:	4293      	cmp	r3, r2
 800122e:	d13d      	bne.n	80012ac <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001230:	2320      	movs	r3, #32
 8001232:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001234:	2300      	movs	r3, #0
 8001236:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001238:	f107 0310 	add.w	r3, r7, #16
 800123c:	4618      	mov	r0, r3
 800123e:	f001 fb03 	bl	8002848 <HAL_RCCEx_PeriphCLKConfig>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001248:	f7ff ffb0 	bl	80011ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800124c:	4b1a      	ldr	r3, [pc, #104]	; (80012b8 <HAL_UART_MspInit+0xb8>)
 800124e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001250:	4a19      	ldr	r2, [pc, #100]	; (80012b8 <HAL_UART_MspInit+0xb8>)
 8001252:	f043 0301 	orr.w	r3, r3, #1
 8001256:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001258:	4b17      	ldr	r3, [pc, #92]	; (80012b8 <HAL_UART_MspInit+0xb8>)
 800125a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800125c:	f003 0301 	and.w	r3, r3, #1
 8001260:	60fb      	str	r3, [r7, #12]
 8001262:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001264:	4b14      	ldr	r3, [pc, #80]	; (80012b8 <HAL_UART_MspInit+0xb8>)
 8001266:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001268:	4a13      	ldr	r2, [pc, #76]	; (80012b8 <HAL_UART_MspInit+0xb8>)
 800126a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800126e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001270:	4b11      	ldr	r3, [pc, #68]	; (80012b8 <HAL_UART_MspInit+0xb8>)
 8001272:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001274:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001278:	60bb      	str	r3, [r7, #8]
 800127a:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 800127c:	f000 fc96 	bl	8001bac <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001280:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001284:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001288:	2302      	movs	r3, #2
 800128a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128e:	2300      	movs	r3, #0
 8001290:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001294:	2303      	movs	r3, #3
 8001296:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800129a:	2308      	movs	r3, #8
 800129c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012a0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80012a4:	4619      	mov	r1, r3
 80012a6:	4805      	ldr	r0, [pc, #20]	; (80012bc <HAL_UART_MspInit+0xbc>)
 80012a8:	f000 fa8a 	bl	80017c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80012ac:	bf00      	nop
 80012ae:	37b0      	adds	r7, #176	; 0xb0
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	40008000 	.word	0x40008000
 80012b8:	40021000 	.word	0x40021000
 80012bc:	48001800 	.word	0x48001800

080012c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012c4:	e7fe      	b.n	80012c4 <NMI_Handler+0x4>

080012c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012c6:	b480      	push	{r7}
 80012c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012ca:	e7fe      	b.n	80012ca <HardFault_Handler+0x4>

080012cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012d0:	e7fe      	b.n	80012d0 <MemManage_Handler+0x4>

080012d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012d2:	b480      	push	{r7}
 80012d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012d6:	e7fe      	b.n	80012d6 <BusFault_Handler+0x4>

080012d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012dc:	e7fe      	b.n	80012dc <UsageFault_Handler+0x4>

080012de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012de:	b480      	push	{r7}
 80012e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012e2:	bf00      	nop
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr

080012ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012f0:	bf00      	nop
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr

080012fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012fa:	b480      	push	{r7}
 80012fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012fe:	bf00      	nop
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr

08001308 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800130c:	f000 f952 	bl	80015b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001310:	bf00      	nop
 8001312:	bd80      	pop	{r7, pc}

08001314 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  return 1;
 8001318:	2301      	movs	r3, #1
}
 800131a:	4618      	mov	r0, r3
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr

08001324 <_kill>:

int _kill(int pid, int sig)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
 800132c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800132e:	f002 fd71 	bl	8003e14 <__errno>
 8001332:	4603      	mov	r3, r0
 8001334:	2216      	movs	r2, #22
 8001336:	601a      	str	r2, [r3, #0]
  return -1;
 8001338:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800133c:	4618      	mov	r0, r3
 800133e:	3708      	adds	r7, #8
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}

08001344 <_exit>:

void _exit (int status)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800134c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001350:	6878      	ldr	r0, [r7, #4]
 8001352:	f7ff ffe7 	bl	8001324 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001356:	e7fe      	b.n	8001356 <_exit+0x12>

08001358 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b086      	sub	sp, #24
 800135c:	af00      	add	r7, sp, #0
 800135e:	60f8      	str	r0, [r7, #12]
 8001360:	60b9      	str	r1, [r7, #8]
 8001362:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001364:	2300      	movs	r3, #0
 8001366:	617b      	str	r3, [r7, #20]
 8001368:	e00a      	b.n	8001380 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800136a:	f3af 8000 	nop.w
 800136e:	4601      	mov	r1, r0
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	1c5a      	adds	r2, r3, #1
 8001374:	60ba      	str	r2, [r7, #8]
 8001376:	b2ca      	uxtb	r2, r1
 8001378:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	3301      	adds	r3, #1
 800137e:	617b      	str	r3, [r7, #20]
 8001380:	697a      	ldr	r2, [r7, #20]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	429a      	cmp	r2, r3
 8001386:	dbf0      	blt.n	800136a <_read+0x12>
  }

  return len;
 8001388:	687b      	ldr	r3, [r7, #4]
}
 800138a:	4618      	mov	r0, r3
 800138c:	3718      	adds	r7, #24
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
	...

08001394 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
 800139a:	60f8      	str	r0, [r7, #12]
 800139c:	60b9      	str	r1, [r7, #8]
 800139e:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&hlpuart1, (uint8_t *)ptr, len,HAL_MAX_DELAY);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	b29a      	uxth	r2, r3
 80013a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013a8:	68b9      	ldr	r1, [r7, #8]
 80013aa:	4804      	ldr	r0, [pc, #16]	; (80013bc <_write+0x28>)
 80013ac:	f001 ff64 	bl	8003278 <HAL_UART_Transmit>

							return len;
 80013b0:	687b      	ldr	r3, [r7, #4]
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3710      	adds	r7, #16
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	200001fc 	.word	0x200001fc

080013c0 <_close>:

int _close(int file)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80013c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	370c      	adds	r7, #12
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr

080013d8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013e8:	605a      	str	r2, [r3, #4]
  return 0;
 80013ea:	2300      	movs	r3, #0
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	370c      	adds	r7, #12
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr

080013f8 <_isatty>:

int _isatty(int file)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001400:	2301      	movs	r3, #1
}
 8001402:	4618      	mov	r0, r3
 8001404:	370c      	adds	r7, #12
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr

0800140e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800140e:	b480      	push	{r7}
 8001410:	b085      	sub	sp, #20
 8001412:	af00      	add	r7, sp, #0
 8001414:	60f8      	str	r0, [r7, #12]
 8001416:	60b9      	str	r1, [r7, #8]
 8001418:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800141a:	2300      	movs	r3, #0
}
 800141c:	4618      	mov	r0, r3
 800141e:	3714      	adds	r7, #20
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr

08001428 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b086      	sub	sp, #24
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001430:	4a14      	ldr	r2, [pc, #80]	; (8001484 <_sbrk+0x5c>)
 8001432:	4b15      	ldr	r3, [pc, #84]	; (8001488 <_sbrk+0x60>)
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800143c:	4b13      	ldr	r3, [pc, #76]	; (800148c <_sbrk+0x64>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d102      	bne.n	800144a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001444:	4b11      	ldr	r3, [pc, #68]	; (800148c <_sbrk+0x64>)
 8001446:	4a12      	ldr	r2, [pc, #72]	; (8001490 <_sbrk+0x68>)
 8001448:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800144a:	4b10      	ldr	r3, [pc, #64]	; (800148c <_sbrk+0x64>)
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4413      	add	r3, r2
 8001452:	693a      	ldr	r2, [r7, #16]
 8001454:	429a      	cmp	r2, r3
 8001456:	d207      	bcs.n	8001468 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001458:	f002 fcdc 	bl	8003e14 <__errno>
 800145c:	4603      	mov	r3, r0
 800145e:	220c      	movs	r2, #12
 8001460:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001462:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001466:	e009      	b.n	800147c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001468:	4b08      	ldr	r3, [pc, #32]	; (800148c <_sbrk+0x64>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800146e:	4b07      	ldr	r3, [pc, #28]	; (800148c <_sbrk+0x64>)
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4413      	add	r3, r2
 8001476:	4a05      	ldr	r2, [pc, #20]	; (800148c <_sbrk+0x64>)
 8001478:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800147a:	68fb      	ldr	r3, [r7, #12]
}
 800147c:	4618      	mov	r0, r3
 800147e:	3718      	adds	r7, #24
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	20050000 	.word	0x20050000
 8001488:	00000400 	.word	0x00000400
 800148c:	2000028c 	.word	0x2000028c
 8001490:	200002a8 	.word	0x200002a8

08001494 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001498:	4b06      	ldr	r3, [pc, #24]	; (80014b4 <SystemInit+0x20>)
 800149a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800149e:	4a05      	ldr	r2, [pc, #20]	; (80014b4 <SystemInit+0x20>)
 80014a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80014a8:	bf00      	nop
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	e000ed00 	.word	0xe000ed00

080014b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80014b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014f0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014bc:	f7ff ffea 	bl	8001494 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014c0:	480c      	ldr	r0, [pc, #48]	; (80014f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80014c2:	490d      	ldr	r1, [pc, #52]	; (80014f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80014c4:	4a0d      	ldr	r2, [pc, #52]	; (80014fc <LoopForever+0xe>)
  movs r3, #0
 80014c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014c8:	e002      	b.n	80014d0 <LoopCopyDataInit>

080014ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014ce:	3304      	adds	r3, #4

080014d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014d4:	d3f9      	bcc.n	80014ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014d6:	4a0a      	ldr	r2, [pc, #40]	; (8001500 <LoopForever+0x12>)
  ldr r4, =_ebss
 80014d8:	4c0a      	ldr	r4, [pc, #40]	; (8001504 <LoopForever+0x16>)
  movs r3, #0
 80014da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014dc:	e001      	b.n	80014e2 <LoopFillZerobss>

080014de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014e0:	3204      	adds	r2, #4

080014e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014e4:	d3fb      	bcc.n	80014de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014e6:	f002 fc9b 	bl	8003e20 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014ea:	f7ff fd95 	bl	8001018 <main>

080014ee <LoopForever>:

LoopForever:
    b LoopForever
 80014ee:	e7fe      	b.n	80014ee <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80014f0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80014f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014f8:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80014fc:	08008c6c 	.word	0x08008c6c
  ldr r2, =_sbss
 8001500:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001504:	200002a4 	.word	0x200002a4

08001508 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001508:	e7fe      	b.n	8001508 <ADC1_2_IRQHandler>

0800150a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800150a:	b580      	push	{r7, lr}
 800150c:	b082      	sub	sp, #8
 800150e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001510:	2300      	movs	r3, #0
 8001512:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001514:	2003      	movs	r0, #3
 8001516:	f000 f91f 	bl	8001758 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800151a:	2000      	movs	r0, #0
 800151c:	f000 f80e 	bl	800153c <HAL_InitTick>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d002      	beq.n	800152c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	71fb      	strb	r3, [r7, #7]
 800152a:	e001      	b.n	8001530 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800152c:	f7ff fe44 	bl	80011b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001530:	79fb      	ldrb	r3, [r7, #7]
}
 8001532:	4618      	mov	r0, r3
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
	...

0800153c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001544:	2300      	movs	r3, #0
 8001546:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001548:	4b17      	ldr	r3, [pc, #92]	; (80015a8 <HAL_InitTick+0x6c>)
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d023      	beq.n	8001598 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001550:	4b16      	ldr	r3, [pc, #88]	; (80015ac <HAL_InitTick+0x70>)
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	4b14      	ldr	r3, [pc, #80]	; (80015a8 <HAL_InitTick+0x6c>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	4619      	mov	r1, r3
 800155a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800155e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001562:	fbb2 f3f3 	udiv	r3, r2, r3
 8001566:	4618      	mov	r0, r3
 8001568:	f000 f91d 	bl	80017a6 <HAL_SYSTICK_Config>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d10f      	bne.n	8001592 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2b0f      	cmp	r3, #15
 8001576:	d809      	bhi.n	800158c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001578:	2200      	movs	r2, #0
 800157a:	6879      	ldr	r1, [r7, #4]
 800157c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001580:	f000 f8f5 	bl	800176e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001584:	4a0a      	ldr	r2, [pc, #40]	; (80015b0 <HAL_InitTick+0x74>)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6013      	str	r3, [r2, #0]
 800158a:	e007      	b.n	800159c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800158c:	2301      	movs	r3, #1
 800158e:	73fb      	strb	r3, [r7, #15]
 8001590:	e004      	b.n	800159c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	73fb      	strb	r3, [r7, #15]
 8001596:	e001      	b.n	800159c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001598:	2301      	movs	r3, #1
 800159a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800159c:	7bfb      	ldrb	r3, [r7, #15]
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3710      	adds	r7, #16
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	20000008 	.word	0x20000008
 80015ac:	20000000 	.word	0x20000000
 80015b0:	20000004 	.word	0x20000004

080015b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80015b8:	4b06      	ldr	r3, [pc, #24]	; (80015d4 <HAL_IncTick+0x20>)
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	461a      	mov	r2, r3
 80015be:	4b06      	ldr	r3, [pc, #24]	; (80015d8 <HAL_IncTick+0x24>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4413      	add	r3, r2
 80015c4:	4a04      	ldr	r2, [pc, #16]	; (80015d8 <HAL_IncTick+0x24>)
 80015c6:	6013      	str	r3, [r2, #0]
}
 80015c8:	bf00      	nop
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	20000008 	.word	0x20000008
 80015d8:	20000290 	.word	0x20000290

080015dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  return uwTick;
 80015e0:	4b03      	ldr	r3, [pc, #12]	; (80015f0 <HAL_GetTick+0x14>)
 80015e2:	681b      	ldr	r3, [r3, #0]
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	20000290 	.word	0x20000290

080015f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b085      	sub	sp, #20
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	f003 0307 	and.w	r3, r3, #7
 8001602:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001604:	4b0c      	ldr	r3, [pc, #48]	; (8001638 <__NVIC_SetPriorityGrouping+0x44>)
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800160a:	68ba      	ldr	r2, [r7, #8]
 800160c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001610:	4013      	ands	r3, r2
 8001612:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800161c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001620:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001624:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001626:	4a04      	ldr	r2, [pc, #16]	; (8001638 <__NVIC_SetPriorityGrouping+0x44>)
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	60d3      	str	r3, [r2, #12]
}
 800162c:	bf00      	nop
 800162e:	3714      	adds	r7, #20
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr
 8001638:	e000ed00 	.word	0xe000ed00

0800163c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001640:	4b04      	ldr	r3, [pc, #16]	; (8001654 <__NVIC_GetPriorityGrouping+0x18>)
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	0a1b      	lsrs	r3, r3, #8
 8001646:	f003 0307 	and.w	r3, r3, #7
}
 800164a:	4618      	mov	r0, r3
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr
 8001654:	e000ed00 	.word	0xe000ed00

08001658 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	4603      	mov	r3, r0
 8001660:	6039      	str	r1, [r7, #0]
 8001662:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001664:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001668:	2b00      	cmp	r3, #0
 800166a:	db0a      	blt.n	8001682 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	b2da      	uxtb	r2, r3
 8001670:	490c      	ldr	r1, [pc, #48]	; (80016a4 <__NVIC_SetPriority+0x4c>)
 8001672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001676:	0112      	lsls	r2, r2, #4
 8001678:	b2d2      	uxtb	r2, r2
 800167a:	440b      	add	r3, r1
 800167c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001680:	e00a      	b.n	8001698 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	b2da      	uxtb	r2, r3
 8001686:	4908      	ldr	r1, [pc, #32]	; (80016a8 <__NVIC_SetPriority+0x50>)
 8001688:	79fb      	ldrb	r3, [r7, #7]
 800168a:	f003 030f 	and.w	r3, r3, #15
 800168e:	3b04      	subs	r3, #4
 8001690:	0112      	lsls	r2, r2, #4
 8001692:	b2d2      	uxtb	r2, r2
 8001694:	440b      	add	r3, r1
 8001696:	761a      	strb	r2, [r3, #24]
}
 8001698:	bf00      	nop
 800169a:	370c      	adds	r7, #12
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr
 80016a4:	e000e100 	.word	0xe000e100
 80016a8:	e000ed00 	.word	0xe000ed00

080016ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b089      	sub	sp, #36	; 0x24
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	60f8      	str	r0, [r7, #12]
 80016b4:	60b9      	str	r1, [r7, #8]
 80016b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	f003 0307 	and.w	r3, r3, #7
 80016be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	f1c3 0307 	rsb	r3, r3, #7
 80016c6:	2b04      	cmp	r3, #4
 80016c8:	bf28      	it	cs
 80016ca:	2304      	movcs	r3, #4
 80016cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	3304      	adds	r3, #4
 80016d2:	2b06      	cmp	r3, #6
 80016d4:	d902      	bls.n	80016dc <NVIC_EncodePriority+0x30>
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	3b03      	subs	r3, #3
 80016da:	e000      	b.n	80016de <NVIC_EncodePriority+0x32>
 80016dc:	2300      	movs	r3, #0
 80016de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80016e4:	69bb      	ldr	r3, [r7, #24]
 80016e6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ea:	43da      	mvns	r2, r3
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	401a      	ands	r2, r3
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016f4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	fa01 f303 	lsl.w	r3, r1, r3
 80016fe:	43d9      	mvns	r1, r3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001704:	4313      	orrs	r3, r2
         );
}
 8001706:	4618      	mov	r0, r3
 8001708:	3724      	adds	r7, #36	; 0x24
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
	...

08001714 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	3b01      	subs	r3, #1
 8001720:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001724:	d301      	bcc.n	800172a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001726:	2301      	movs	r3, #1
 8001728:	e00f      	b.n	800174a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800172a:	4a0a      	ldr	r2, [pc, #40]	; (8001754 <SysTick_Config+0x40>)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	3b01      	subs	r3, #1
 8001730:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001732:	210f      	movs	r1, #15
 8001734:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001738:	f7ff ff8e 	bl	8001658 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800173c:	4b05      	ldr	r3, [pc, #20]	; (8001754 <SysTick_Config+0x40>)
 800173e:	2200      	movs	r2, #0
 8001740:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001742:	4b04      	ldr	r3, [pc, #16]	; (8001754 <SysTick_Config+0x40>)
 8001744:	2207      	movs	r2, #7
 8001746:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001748:	2300      	movs	r3, #0
}
 800174a:	4618      	mov	r0, r3
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	e000e010 	.word	0xe000e010

08001758 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001760:	6878      	ldr	r0, [r7, #4]
 8001762:	f7ff ff47 	bl	80015f4 <__NVIC_SetPriorityGrouping>
}
 8001766:	bf00      	nop
 8001768:	3708      	adds	r7, #8
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}

0800176e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800176e:	b580      	push	{r7, lr}
 8001770:	b086      	sub	sp, #24
 8001772:	af00      	add	r7, sp, #0
 8001774:	4603      	mov	r3, r0
 8001776:	60b9      	str	r1, [r7, #8]
 8001778:	607a      	str	r2, [r7, #4]
 800177a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800177c:	2300      	movs	r3, #0
 800177e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001780:	f7ff ff5c 	bl	800163c <__NVIC_GetPriorityGrouping>
 8001784:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	68b9      	ldr	r1, [r7, #8]
 800178a:	6978      	ldr	r0, [r7, #20]
 800178c:	f7ff ff8e 	bl	80016ac <NVIC_EncodePriority>
 8001790:	4602      	mov	r2, r0
 8001792:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001796:	4611      	mov	r1, r2
 8001798:	4618      	mov	r0, r3
 800179a:	f7ff ff5d 	bl	8001658 <__NVIC_SetPriority>
}
 800179e:	bf00      	nop
 80017a0:	3718      	adds	r7, #24
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}

080017a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017a6:	b580      	push	{r7, lr}
 80017a8:	b082      	sub	sp, #8
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f7ff ffb0 	bl	8001714 <SysTick_Config>
 80017b4:	4603      	mov	r3, r0
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
	...

080017c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b087      	sub	sp, #28
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017ca:	2300      	movs	r3, #0
 80017cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017ce:	e166      	b.n	8001a9e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	2101      	movs	r1, #1
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	fa01 f303 	lsl.w	r3, r1, r3
 80017dc:	4013      	ands	r3, r2
 80017de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	f000 8158 	beq.w	8001a98 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f003 0303 	and.w	r3, r3, #3
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d005      	beq.n	8001800 <HAL_GPIO_Init+0x40>
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f003 0303 	and.w	r3, r3, #3
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	d130      	bne.n	8001862 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	005b      	lsls	r3, r3, #1
 800180a:	2203      	movs	r2, #3
 800180c:	fa02 f303 	lsl.w	r3, r2, r3
 8001810:	43db      	mvns	r3, r3
 8001812:	693a      	ldr	r2, [r7, #16]
 8001814:	4013      	ands	r3, r2
 8001816:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	68da      	ldr	r2, [r3, #12]
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	005b      	lsls	r3, r3, #1
 8001820:	fa02 f303 	lsl.w	r3, r2, r3
 8001824:	693a      	ldr	r2, [r7, #16]
 8001826:	4313      	orrs	r3, r2
 8001828:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	693a      	ldr	r2, [r7, #16]
 800182e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001836:	2201      	movs	r2, #1
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	fa02 f303 	lsl.w	r3, r2, r3
 800183e:	43db      	mvns	r3, r3
 8001840:	693a      	ldr	r2, [r7, #16]
 8001842:	4013      	ands	r3, r2
 8001844:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	091b      	lsrs	r3, r3, #4
 800184c:	f003 0201 	and.w	r2, r3, #1
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	fa02 f303 	lsl.w	r3, r2, r3
 8001856:	693a      	ldr	r2, [r7, #16]
 8001858:	4313      	orrs	r3, r2
 800185a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	693a      	ldr	r2, [r7, #16]
 8001860:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	f003 0303 	and.w	r3, r3, #3
 800186a:	2b03      	cmp	r3, #3
 800186c:	d017      	beq.n	800189e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	68db      	ldr	r3, [r3, #12]
 8001872:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	005b      	lsls	r3, r3, #1
 8001878:	2203      	movs	r2, #3
 800187a:	fa02 f303 	lsl.w	r3, r2, r3
 800187e:	43db      	mvns	r3, r3
 8001880:	693a      	ldr	r2, [r7, #16]
 8001882:	4013      	ands	r3, r2
 8001884:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	689a      	ldr	r2, [r3, #8]
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	005b      	lsls	r3, r3, #1
 800188e:	fa02 f303 	lsl.w	r3, r2, r3
 8001892:	693a      	ldr	r2, [r7, #16]
 8001894:	4313      	orrs	r3, r2
 8001896:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	693a      	ldr	r2, [r7, #16]
 800189c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f003 0303 	and.w	r3, r3, #3
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d123      	bne.n	80018f2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	08da      	lsrs	r2, r3, #3
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	3208      	adds	r2, #8
 80018b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	f003 0307 	and.w	r3, r3, #7
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	220f      	movs	r2, #15
 80018c2:	fa02 f303 	lsl.w	r3, r2, r3
 80018c6:	43db      	mvns	r3, r3
 80018c8:	693a      	ldr	r2, [r7, #16]
 80018ca:	4013      	ands	r3, r2
 80018cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	691a      	ldr	r2, [r3, #16]
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	f003 0307 	and.w	r3, r3, #7
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	fa02 f303 	lsl.w	r3, r2, r3
 80018de:	693a      	ldr	r2, [r7, #16]
 80018e0:	4313      	orrs	r3, r2
 80018e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	08da      	lsrs	r2, r3, #3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	3208      	adds	r2, #8
 80018ec:	6939      	ldr	r1, [r7, #16]
 80018ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	2203      	movs	r2, #3
 80018fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001902:	43db      	mvns	r3, r3
 8001904:	693a      	ldr	r2, [r7, #16]
 8001906:	4013      	ands	r3, r2
 8001908:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	f003 0203 	and.w	r2, r3, #3
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	005b      	lsls	r3, r3, #1
 8001916:	fa02 f303 	lsl.w	r3, r2, r3
 800191a:	693a      	ldr	r2, [r7, #16]
 800191c:	4313      	orrs	r3, r2
 800191e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	693a      	ldr	r2, [r7, #16]
 8001924:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800192e:	2b00      	cmp	r3, #0
 8001930:	f000 80b2 	beq.w	8001a98 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001934:	4b61      	ldr	r3, [pc, #388]	; (8001abc <HAL_GPIO_Init+0x2fc>)
 8001936:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001938:	4a60      	ldr	r2, [pc, #384]	; (8001abc <HAL_GPIO_Init+0x2fc>)
 800193a:	f043 0301 	orr.w	r3, r3, #1
 800193e:	6613      	str	r3, [r2, #96]	; 0x60
 8001940:	4b5e      	ldr	r3, [pc, #376]	; (8001abc <HAL_GPIO_Init+0x2fc>)
 8001942:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001944:	f003 0301 	and.w	r3, r3, #1
 8001948:	60bb      	str	r3, [r7, #8]
 800194a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800194c:	4a5c      	ldr	r2, [pc, #368]	; (8001ac0 <HAL_GPIO_Init+0x300>)
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	089b      	lsrs	r3, r3, #2
 8001952:	3302      	adds	r3, #2
 8001954:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001958:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	f003 0303 	and.w	r3, r3, #3
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	220f      	movs	r2, #15
 8001964:	fa02 f303 	lsl.w	r3, r2, r3
 8001968:	43db      	mvns	r3, r3
 800196a:	693a      	ldr	r2, [r7, #16]
 800196c:	4013      	ands	r3, r2
 800196e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001976:	d02b      	beq.n	80019d0 <HAL_GPIO_Init+0x210>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	4a52      	ldr	r2, [pc, #328]	; (8001ac4 <HAL_GPIO_Init+0x304>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d025      	beq.n	80019cc <HAL_GPIO_Init+0x20c>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	4a51      	ldr	r2, [pc, #324]	; (8001ac8 <HAL_GPIO_Init+0x308>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d01f      	beq.n	80019c8 <HAL_GPIO_Init+0x208>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	4a50      	ldr	r2, [pc, #320]	; (8001acc <HAL_GPIO_Init+0x30c>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d019      	beq.n	80019c4 <HAL_GPIO_Init+0x204>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	4a4f      	ldr	r2, [pc, #316]	; (8001ad0 <HAL_GPIO_Init+0x310>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d013      	beq.n	80019c0 <HAL_GPIO_Init+0x200>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	4a4e      	ldr	r2, [pc, #312]	; (8001ad4 <HAL_GPIO_Init+0x314>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d00d      	beq.n	80019bc <HAL_GPIO_Init+0x1fc>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	4a4d      	ldr	r2, [pc, #308]	; (8001ad8 <HAL_GPIO_Init+0x318>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d007      	beq.n	80019b8 <HAL_GPIO_Init+0x1f8>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	4a4c      	ldr	r2, [pc, #304]	; (8001adc <HAL_GPIO_Init+0x31c>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d101      	bne.n	80019b4 <HAL_GPIO_Init+0x1f4>
 80019b0:	2307      	movs	r3, #7
 80019b2:	e00e      	b.n	80019d2 <HAL_GPIO_Init+0x212>
 80019b4:	2308      	movs	r3, #8
 80019b6:	e00c      	b.n	80019d2 <HAL_GPIO_Init+0x212>
 80019b8:	2306      	movs	r3, #6
 80019ba:	e00a      	b.n	80019d2 <HAL_GPIO_Init+0x212>
 80019bc:	2305      	movs	r3, #5
 80019be:	e008      	b.n	80019d2 <HAL_GPIO_Init+0x212>
 80019c0:	2304      	movs	r3, #4
 80019c2:	e006      	b.n	80019d2 <HAL_GPIO_Init+0x212>
 80019c4:	2303      	movs	r3, #3
 80019c6:	e004      	b.n	80019d2 <HAL_GPIO_Init+0x212>
 80019c8:	2302      	movs	r3, #2
 80019ca:	e002      	b.n	80019d2 <HAL_GPIO_Init+0x212>
 80019cc:	2301      	movs	r3, #1
 80019ce:	e000      	b.n	80019d2 <HAL_GPIO_Init+0x212>
 80019d0:	2300      	movs	r3, #0
 80019d2:	697a      	ldr	r2, [r7, #20]
 80019d4:	f002 0203 	and.w	r2, r2, #3
 80019d8:	0092      	lsls	r2, r2, #2
 80019da:	4093      	lsls	r3, r2
 80019dc:	693a      	ldr	r2, [r7, #16]
 80019de:	4313      	orrs	r3, r2
 80019e0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80019e2:	4937      	ldr	r1, [pc, #220]	; (8001ac0 <HAL_GPIO_Init+0x300>)
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	089b      	lsrs	r3, r3, #2
 80019e8:	3302      	adds	r3, #2
 80019ea:	693a      	ldr	r2, [r7, #16]
 80019ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80019f0:	4b3b      	ldr	r3, [pc, #236]	; (8001ae0 <HAL_GPIO_Init+0x320>)
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	43db      	mvns	r3, r3
 80019fa:	693a      	ldr	r2, [r7, #16]
 80019fc:	4013      	ands	r3, r2
 80019fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d003      	beq.n	8001a14 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001a0c:	693a      	ldr	r2, [r7, #16]
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a14:	4a32      	ldr	r2, [pc, #200]	; (8001ae0 <HAL_GPIO_Init+0x320>)
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a1a:	4b31      	ldr	r3, [pc, #196]	; (8001ae0 <HAL_GPIO_Init+0x320>)
 8001a1c:	68db      	ldr	r3, [r3, #12]
 8001a1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	43db      	mvns	r3, r3
 8001a24:	693a      	ldr	r2, [r7, #16]
 8001a26:	4013      	ands	r3, r2
 8001a28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d003      	beq.n	8001a3e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001a36:	693a      	ldr	r2, [r7, #16]
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a3e:	4a28      	ldr	r2, [pc, #160]	; (8001ae0 <HAL_GPIO_Init+0x320>)
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001a44:	4b26      	ldr	r3, [pc, #152]	; (8001ae0 <HAL_GPIO_Init+0x320>)
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	43db      	mvns	r3, r3
 8001a4e:	693a      	ldr	r2, [r7, #16]
 8001a50:	4013      	ands	r3, r2
 8001a52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d003      	beq.n	8001a68 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001a60:	693a      	ldr	r2, [r7, #16]
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a68:	4a1d      	ldr	r2, [pc, #116]	; (8001ae0 <HAL_GPIO_Init+0x320>)
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001a6e:	4b1c      	ldr	r3, [pc, #112]	; (8001ae0 <HAL_GPIO_Init+0x320>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	43db      	mvns	r3, r3
 8001a78:	693a      	ldr	r2, [r7, #16]
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d003      	beq.n	8001a92 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001a8a:	693a      	ldr	r2, [r7, #16]
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a92:	4a13      	ldr	r2, [pc, #76]	; (8001ae0 <HAL_GPIO_Init+0x320>)
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	fa22 f303 	lsr.w	r3, r2, r3
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	f47f ae91 	bne.w	80017d0 <HAL_GPIO_Init+0x10>
  }
}
 8001aae:	bf00      	nop
 8001ab0:	bf00      	nop
 8001ab2:	371c      	adds	r7, #28
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr
 8001abc:	40021000 	.word	0x40021000
 8001ac0:	40010000 	.word	0x40010000
 8001ac4:	48000400 	.word	0x48000400
 8001ac8:	48000800 	.word	0x48000800
 8001acc:	48000c00 	.word	0x48000c00
 8001ad0:	48001000 	.word	0x48001000
 8001ad4:	48001400 	.word	0x48001400
 8001ad8:	48001800 	.word	0x48001800
 8001adc:	48001c00 	.word	0x48001c00
 8001ae0:	40010400 	.word	0x40010400

08001ae4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001ae8:	4b04      	ldr	r3, [pc, #16]	; (8001afc <HAL_PWREx_GetVoltageRange+0x18>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	40007000 	.word	0x40007000

08001b00 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b085      	sub	sp, #20
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b0e:	d130      	bne.n	8001b72 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b10:	4b23      	ldr	r3, [pc, #140]	; (8001ba0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b1c:	d038      	beq.n	8001b90 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b1e:	4b20      	ldr	r3, [pc, #128]	; (8001ba0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b26:	4a1e      	ldr	r2, [pc, #120]	; (8001ba0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b28:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b2c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001b2e:	4b1d      	ldr	r3, [pc, #116]	; (8001ba4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	2232      	movs	r2, #50	; 0x32
 8001b34:	fb02 f303 	mul.w	r3, r2, r3
 8001b38:	4a1b      	ldr	r2, [pc, #108]	; (8001ba8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b3e:	0c9b      	lsrs	r3, r3, #18
 8001b40:	3301      	adds	r3, #1
 8001b42:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b44:	e002      	b.n	8001b4c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	3b01      	subs	r3, #1
 8001b4a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b4c:	4b14      	ldr	r3, [pc, #80]	; (8001ba0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b4e:	695b      	ldr	r3, [r3, #20]
 8001b50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b58:	d102      	bne.n	8001b60 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d1f2      	bne.n	8001b46 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b60:	4b0f      	ldr	r3, [pc, #60]	; (8001ba0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b62:	695b      	ldr	r3, [r3, #20]
 8001b64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b6c:	d110      	bne.n	8001b90 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	e00f      	b.n	8001b92 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b72:	4b0b      	ldr	r3, [pc, #44]	; (8001ba0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b7e:	d007      	beq.n	8001b90 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001b80:	4b07      	ldr	r3, [pc, #28]	; (8001ba0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b88:	4a05      	ldr	r2, [pc, #20]	; (8001ba0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b8e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001b90:	2300      	movs	r3, #0
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3714      	adds	r7, #20
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	40007000 	.word	0x40007000
 8001ba4:	20000000 	.word	0x20000000
 8001ba8:	431bde83 	.word	0x431bde83

08001bac <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001bb0:	4b05      	ldr	r3, [pc, #20]	; (8001bc8 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	4a04      	ldr	r2, [pc, #16]	; (8001bc8 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001bb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bba:	6053      	str	r3, [r2, #4]
}
 8001bbc:	bf00      	nop
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	40007000 	.word	0x40007000

08001bcc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b088      	sub	sp, #32
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d102      	bne.n	8001be0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	f000 bc08 	b.w	80023f0 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001be0:	4b96      	ldr	r3, [pc, #600]	; (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	f003 030c 	and.w	r3, r3, #12
 8001be8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001bea:	4b94      	ldr	r3, [pc, #592]	; (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001bec:	68db      	ldr	r3, [r3, #12]
 8001bee:	f003 0303 	and.w	r3, r3, #3
 8001bf2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 0310 	and.w	r3, r3, #16
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	f000 80e4 	beq.w	8001dca <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c02:	69bb      	ldr	r3, [r7, #24]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d007      	beq.n	8001c18 <HAL_RCC_OscConfig+0x4c>
 8001c08:	69bb      	ldr	r3, [r7, #24]
 8001c0a:	2b0c      	cmp	r3, #12
 8001c0c:	f040 808b 	bne.w	8001d26 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	f040 8087 	bne.w	8001d26 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c18:	4b88      	ldr	r3, [pc, #544]	; (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 0302 	and.w	r3, r3, #2
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d005      	beq.n	8001c30 <HAL_RCC_OscConfig+0x64>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	699b      	ldr	r3, [r3, #24]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d101      	bne.n	8001c30 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e3df      	b.n	80023f0 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6a1a      	ldr	r2, [r3, #32]
 8001c34:	4b81      	ldr	r3, [pc, #516]	; (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 0308 	and.w	r3, r3, #8
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d004      	beq.n	8001c4a <HAL_RCC_OscConfig+0x7e>
 8001c40:	4b7e      	ldr	r3, [pc, #504]	; (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c48:	e005      	b.n	8001c56 <HAL_RCC_OscConfig+0x8a>
 8001c4a:	4b7c      	ldr	r3, [pc, #496]	; (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001c4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c50:	091b      	lsrs	r3, r3, #4
 8001c52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d223      	bcs.n	8001ca2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6a1b      	ldr	r3, [r3, #32]
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f000 fd92 	bl	8002788 <RCC_SetFlashLatencyFromMSIRange>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e3c0      	b.n	80023f0 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c6e:	4b73      	ldr	r3, [pc, #460]	; (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a72      	ldr	r2, [pc, #456]	; (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001c74:	f043 0308 	orr.w	r3, r3, #8
 8001c78:	6013      	str	r3, [r2, #0]
 8001c7a:	4b70      	ldr	r3, [pc, #448]	; (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6a1b      	ldr	r3, [r3, #32]
 8001c86:	496d      	ldr	r1, [pc, #436]	; (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c8c:	4b6b      	ldr	r3, [pc, #428]	; (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	69db      	ldr	r3, [r3, #28]
 8001c98:	021b      	lsls	r3, r3, #8
 8001c9a:	4968      	ldr	r1, [pc, #416]	; (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	604b      	str	r3, [r1, #4]
 8001ca0:	e025      	b.n	8001cee <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ca2:	4b66      	ldr	r3, [pc, #408]	; (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a65      	ldr	r2, [pc, #404]	; (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001ca8:	f043 0308 	orr.w	r3, r3, #8
 8001cac:	6013      	str	r3, [r2, #0]
 8001cae:	4b63      	ldr	r3, [pc, #396]	; (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6a1b      	ldr	r3, [r3, #32]
 8001cba:	4960      	ldr	r1, [pc, #384]	; (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001cc0:	4b5e      	ldr	r3, [pc, #376]	; (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	69db      	ldr	r3, [r3, #28]
 8001ccc:	021b      	lsls	r3, r3, #8
 8001cce:	495b      	ldr	r1, [pc, #364]	; (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001cd4:	69bb      	ldr	r3, [r7, #24]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d109      	bne.n	8001cee <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6a1b      	ldr	r3, [r3, #32]
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f000 fd52 	bl	8002788 <RCC_SetFlashLatencyFromMSIRange>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e380      	b.n	80023f0 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001cee:	f000 fc87 	bl	8002600 <HAL_RCC_GetSysClockFreq>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	4b51      	ldr	r3, [pc, #324]	; (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	091b      	lsrs	r3, r3, #4
 8001cfa:	f003 030f 	and.w	r3, r3, #15
 8001cfe:	4950      	ldr	r1, [pc, #320]	; (8001e40 <HAL_RCC_OscConfig+0x274>)
 8001d00:	5ccb      	ldrb	r3, [r1, r3]
 8001d02:	f003 031f 	and.w	r3, r3, #31
 8001d06:	fa22 f303 	lsr.w	r3, r2, r3
 8001d0a:	4a4e      	ldr	r2, [pc, #312]	; (8001e44 <HAL_RCC_OscConfig+0x278>)
 8001d0c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001d0e:	4b4e      	ldr	r3, [pc, #312]	; (8001e48 <HAL_RCC_OscConfig+0x27c>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7ff fc12 	bl	800153c <HAL_InitTick>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001d1c:	7bfb      	ldrb	r3, [r7, #15]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d052      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001d22:	7bfb      	ldrb	r3, [r7, #15]
 8001d24:	e364      	b.n	80023f0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	699b      	ldr	r3, [r3, #24]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d032      	beq.n	8001d94 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001d2e:	4b43      	ldr	r3, [pc, #268]	; (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a42      	ldr	r2, [pc, #264]	; (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001d34:	f043 0301 	orr.w	r3, r3, #1
 8001d38:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d3a:	f7ff fc4f 	bl	80015dc <HAL_GetTick>
 8001d3e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d40:	e008      	b.n	8001d54 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d42:	f7ff fc4b 	bl	80015dc <HAL_GetTick>
 8001d46:	4602      	mov	r2, r0
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	2b02      	cmp	r3, #2
 8001d4e:	d901      	bls.n	8001d54 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001d50:	2303      	movs	r3, #3
 8001d52:	e34d      	b.n	80023f0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d54:	4b39      	ldr	r3, [pc, #228]	; (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 0302 	and.w	r3, r3, #2
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d0f0      	beq.n	8001d42 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d60:	4b36      	ldr	r3, [pc, #216]	; (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a35      	ldr	r2, [pc, #212]	; (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001d66:	f043 0308 	orr.w	r3, r3, #8
 8001d6a:	6013      	str	r3, [r2, #0]
 8001d6c:	4b33      	ldr	r3, [pc, #204]	; (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6a1b      	ldr	r3, [r3, #32]
 8001d78:	4930      	ldr	r1, [pc, #192]	; (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d7e:	4b2f      	ldr	r3, [pc, #188]	; (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	69db      	ldr	r3, [r3, #28]
 8001d8a:	021b      	lsls	r3, r3, #8
 8001d8c:	492b      	ldr	r1, [pc, #172]	; (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	604b      	str	r3, [r1, #4]
 8001d92:	e01a      	b.n	8001dca <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001d94:	4b29      	ldr	r3, [pc, #164]	; (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a28      	ldr	r2, [pc, #160]	; (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001d9a:	f023 0301 	bic.w	r3, r3, #1
 8001d9e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001da0:	f7ff fc1c 	bl	80015dc <HAL_GetTick>
 8001da4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001da6:	e008      	b.n	8001dba <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001da8:	f7ff fc18 	bl	80015dc <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d901      	bls.n	8001dba <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001db6:	2303      	movs	r3, #3
 8001db8:	e31a      	b.n	80023f0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001dba:	4b20      	ldr	r3, [pc, #128]	; (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0302 	and.w	r3, r3, #2
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d1f0      	bne.n	8001da8 <HAL_RCC_OscConfig+0x1dc>
 8001dc6:	e000      	b.n	8001dca <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001dc8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 0301 	and.w	r3, r3, #1
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d073      	beq.n	8001ebe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001dd6:	69bb      	ldr	r3, [r7, #24]
 8001dd8:	2b08      	cmp	r3, #8
 8001dda:	d005      	beq.n	8001de8 <HAL_RCC_OscConfig+0x21c>
 8001ddc:	69bb      	ldr	r3, [r7, #24]
 8001dde:	2b0c      	cmp	r3, #12
 8001de0:	d10e      	bne.n	8001e00 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	2b03      	cmp	r3, #3
 8001de6:	d10b      	bne.n	8001e00 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001de8:	4b14      	ldr	r3, [pc, #80]	; (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d063      	beq.n	8001ebc <HAL_RCC_OscConfig+0x2f0>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d15f      	bne.n	8001ebc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e2f7      	b.n	80023f0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e08:	d106      	bne.n	8001e18 <HAL_RCC_OscConfig+0x24c>
 8001e0a:	4b0c      	ldr	r3, [pc, #48]	; (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a0b      	ldr	r2, [pc, #44]	; (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001e10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e14:	6013      	str	r3, [r2, #0]
 8001e16:	e025      	b.n	8001e64 <HAL_RCC_OscConfig+0x298>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e20:	d114      	bne.n	8001e4c <HAL_RCC_OscConfig+0x280>
 8001e22:	4b06      	ldr	r3, [pc, #24]	; (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a05      	ldr	r2, [pc, #20]	; (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001e28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e2c:	6013      	str	r3, [r2, #0]
 8001e2e:	4b03      	ldr	r3, [pc, #12]	; (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a02      	ldr	r2, [pc, #8]	; (8001e3c <HAL_RCC_OscConfig+0x270>)
 8001e34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e38:	6013      	str	r3, [r2, #0]
 8001e3a:	e013      	b.n	8001e64 <HAL_RCC_OscConfig+0x298>
 8001e3c:	40021000 	.word	0x40021000
 8001e40:	08008770 	.word	0x08008770
 8001e44:	20000000 	.word	0x20000000
 8001e48:	20000004 	.word	0x20000004
 8001e4c:	4ba0      	ldr	r3, [pc, #640]	; (80020d0 <HAL_RCC_OscConfig+0x504>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a9f      	ldr	r2, [pc, #636]	; (80020d0 <HAL_RCC_OscConfig+0x504>)
 8001e52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e56:	6013      	str	r3, [r2, #0]
 8001e58:	4b9d      	ldr	r3, [pc, #628]	; (80020d0 <HAL_RCC_OscConfig+0x504>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a9c      	ldr	r2, [pc, #624]	; (80020d0 <HAL_RCC_OscConfig+0x504>)
 8001e5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d013      	beq.n	8001e94 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e6c:	f7ff fbb6 	bl	80015dc <HAL_GetTick>
 8001e70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e72:	e008      	b.n	8001e86 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e74:	f7ff fbb2 	bl	80015dc <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	2b64      	cmp	r3, #100	; 0x64
 8001e80:	d901      	bls.n	8001e86 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e2b4      	b.n	80023f0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e86:	4b92      	ldr	r3, [pc, #584]	; (80020d0 <HAL_RCC_OscConfig+0x504>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d0f0      	beq.n	8001e74 <HAL_RCC_OscConfig+0x2a8>
 8001e92:	e014      	b.n	8001ebe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e94:	f7ff fba2 	bl	80015dc <HAL_GetTick>
 8001e98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e9a:	e008      	b.n	8001eae <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e9c:	f7ff fb9e 	bl	80015dc <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	2b64      	cmp	r3, #100	; 0x64
 8001ea8:	d901      	bls.n	8001eae <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e2a0      	b.n	80023f0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001eae:	4b88      	ldr	r3, [pc, #544]	; (80020d0 <HAL_RCC_OscConfig+0x504>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d1f0      	bne.n	8001e9c <HAL_RCC_OscConfig+0x2d0>
 8001eba:	e000      	b.n	8001ebe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ebc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0302 	and.w	r3, r3, #2
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d060      	beq.n	8001f8c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001eca:	69bb      	ldr	r3, [r7, #24]
 8001ecc:	2b04      	cmp	r3, #4
 8001ece:	d005      	beq.n	8001edc <HAL_RCC_OscConfig+0x310>
 8001ed0:	69bb      	ldr	r3, [r7, #24]
 8001ed2:	2b0c      	cmp	r3, #12
 8001ed4:	d119      	bne.n	8001f0a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	d116      	bne.n	8001f0a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001edc:	4b7c      	ldr	r3, [pc, #496]	; (80020d0 <HAL_RCC_OscConfig+0x504>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d005      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x328>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d101      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e27d      	b.n	80023f0 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ef4:	4b76      	ldr	r3, [pc, #472]	; (80020d0 <HAL_RCC_OscConfig+0x504>)
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	691b      	ldr	r3, [r3, #16]
 8001f00:	061b      	lsls	r3, r3, #24
 8001f02:	4973      	ldr	r1, [pc, #460]	; (80020d0 <HAL_RCC_OscConfig+0x504>)
 8001f04:	4313      	orrs	r3, r2
 8001f06:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f08:	e040      	b.n	8001f8c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	68db      	ldr	r3, [r3, #12]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d023      	beq.n	8001f5a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f12:	4b6f      	ldr	r3, [pc, #444]	; (80020d0 <HAL_RCC_OscConfig+0x504>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a6e      	ldr	r2, [pc, #440]	; (80020d0 <HAL_RCC_OscConfig+0x504>)
 8001f18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f1e:	f7ff fb5d 	bl	80015dc <HAL_GetTick>
 8001f22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f24:	e008      	b.n	8001f38 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f26:	f7ff fb59 	bl	80015dc <HAL_GetTick>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	2b02      	cmp	r3, #2
 8001f32:	d901      	bls.n	8001f38 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001f34:	2303      	movs	r3, #3
 8001f36:	e25b      	b.n	80023f0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f38:	4b65      	ldr	r3, [pc, #404]	; (80020d0 <HAL_RCC_OscConfig+0x504>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d0f0      	beq.n	8001f26 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f44:	4b62      	ldr	r3, [pc, #392]	; (80020d0 <HAL_RCC_OscConfig+0x504>)
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	691b      	ldr	r3, [r3, #16]
 8001f50:	061b      	lsls	r3, r3, #24
 8001f52:	495f      	ldr	r1, [pc, #380]	; (80020d0 <HAL_RCC_OscConfig+0x504>)
 8001f54:	4313      	orrs	r3, r2
 8001f56:	604b      	str	r3, [r1, #4]
 8001f58:	e018      	b.n	8001f8c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f5a:	4b5d      	ldr	r3, [pc, #372]	; (80020d0 <HAL_RCC_OscConfig+0x504>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a5c      	ldr	r2, [pc, #368]	; (80020d0 <HAL_RCC_OscConfig+0x504>)
 8001f60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f66:	f7ff fb39 	bl	80015dc <HAL_GetTick>
 8001f6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f6c:	e008      	b.n	8001f80 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f6e:	f7ff fb35 	bl	80015dc <HAL_GetTick>
 8001f72:	4602      	mov	r2, r0
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d901      	bls.n	8001f80 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	e237      	b.n	80023f0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f80:	4b53      	ldr	r3, [pc, #332]	; (80020d0 <HAL_RCC_OscConfig+0x504>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d1f0      	bne.n	8001f6e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0308 	and.w	r3, r3, #8
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d03c      	beq.n	8002012 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	695b      	ldr	r3, [r3, #20]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d01c      	beq.n	8001fda <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fa0:	4b4b      	ldr	r3, [pc, #300]	; (80020d0 <HAL_RCC_OscConfig+0x504>)
 8001fa2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fa6:	4a4a      	ldr	r2, [pc, #296]	; (80020d0 <HAL_RCC_OscConfig+0x504>)
 8001fa8:	f043 0301 	orr.w	r3, r3, #1
 8001fac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fb0:	f7ff fb14 	bl	80015dc <HAL_GetTick>
 8001fb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001fb6:	e008      	b.n	8001fca <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fb8:	f7ff fb10 	bl	80015dc <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d901      	bls.n	8001fca <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e212      	b.n	80023f0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001fca:	4b41      	ldr	r3, [pc, #260]	; (80020d0 <HAL_RCC_OscConfig+0x504>)
 8001fcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fd0:	f003 0302 	and.w	r3, r3, #2
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d0ef      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x3ec>
 8001fd8:	e01b      	b.n	8002012 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fda:	4b3d      	ldr	r3, [pc, #244]	; (80020d0 <HAL_RCC_OscConfig+0x504>)
 8001fdc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fe0:	4a3b      	ldr	r2, [pc, #236]	; (80020d0 <HAL_RCC_OscConfig+0x504>)
 8001fe2:	f023 0301 	bic.w	r3, r3, #1
 8001fe6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fea:	f7ff faf7 	bl	80015dc <HAL_GetTick>
 8001fee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ff0:	e008      	b.n	8002004 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ff2:	f7ff faf3 	bl	80015dc <HAL_GetTick>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d901      	bls.n	8002004 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002000:	2303      	movs	r3, #3
 8002002:	e1f5      	b.n	80023f0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002004:	4b32      	ldr	r3, [pc, #200]	; (80020d0 <HAL_RCC_OscConfig+0x504>)
 8002006:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800200a:	f003 0302 	and.w	r3, r3, #2
 800200e:	2b00      	cmp	r3, #0
 8002010:	d1ef      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0304 	and.w	r3, r3, #4
 800201a:	2b00      	cmp	r3, #0
 800201c:	f000 80a6 	beq.w	800216c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002020:	2300      	movs	r3, #0
 8002022:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002024:	4b2a      	ldr	r3, [pc, #168]	; (80020d0 <HAL_RCC_OscConfig+0x504>)
 8002026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002028:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800202c:	2b00      	cmp	r3, #0
 800202e:	d10d      	bne.n	800204c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002030:	4b27      	ldr	r3, [pc, #156]	; (80020d0 <HAL_RCC_OscConfig+0x504>)
 8002032:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002034:	4a26      	ldr	r2, [pc, #152]	; (80020d0 <HAL_RCC_OscConfig+0x504>)
 8002036:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800203a:	6593      	str	r3, [r2, #88]	; 0x58
 800203c:	4b24      	ldr	r3, [pc, #144]	; (80020d0 <HAL_RCC_OscConfig+0x504>)
 800203e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002040:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002044:	60bb      	str	r3, [r7, #8]
 8002046:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002048:	2301      	movs	r3, #1
 800204a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800204c:	4b21      	ldr	r3, [pc, #132]	; (80020d4 <HAL_RCC_OscConfig+0x508>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002054:	2b00      	cmp	r3, #0
 8002056:	d118      	bne.n	800208a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002058:	4b1e      	ldr	r3, [pc, #120]	; (80020d4 <HAL_RCC_OscConfig+0x508>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a1d      	ldr	r2, [pc, #116]	; (80020d4 <HAL_RCC_OscConfig+0x508>)
 800205e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002062:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002064:	f7ff faba 	bl	80015dc <HAL_GetTick>
 8002068:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800206a:	e008      	b.n	800207e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800206c:	f7ff fab6 	bl	80015dc <HAL_GetTick>
 8002070:	4602      	mov	r2, r0
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	2b02      	cmp	r3, #2
 8002078:	d901      	bls.n	800207e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e1b8      	b.n	80023f0 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800207e:	4b15      	ldr	r3, [pc, #84]	; (80020d4 <HAL_RCC_OscConfig+0x508>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002086:	2b00      	cmp	r3, #0
 8002088:	d0f0      	beq.n	800206c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	2b01      	cmp	r3, #1
 8002090:	d108      	bne.n	80020a4 <HAL_RCC_OscConfig+0x4d8>
 8002092:	4b0f      	ldr	r3, [pc, #60]	; (80020d0 <HAL_RCC_OscConfig+0x504>)
 8002094:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002098:	4a0d      	ldr	r2, [pc, #52]	; (80020d0 <HAL_RCC_OscConfig+0x504>)
 800209a:	f043 0301 	orr.w	r3, r3, #1
 800209e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020a2:	e029      	b.n	80020f8 <HAL_RCC_OscConfig+0x52c>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	2b05      	cmp	r3, #5
 80020aa:	d115      	bne.n	80020d8 <HAL_RCC_OscConfig+0x50c>
 80020ac:	4b08      	ldr	r3, [pc, #32]	; (80020d0 <HAL_RCC_OscConfig+0x504>)
 80020ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020b2:	4a07      	ldr	r2, [pc, #28]	; (80020d0 <HAL_RCC_OscConfig+0x504>)
 80020b4:	f043 0304 	orr.w	r3, r3, #4
 80020b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020bc:	4b04      	ldr	r3, [pc, #16]	; (80020d0 <HAL_RCC_OscConfig+0x504>)
 80020be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020c2:	4a03      	ldr	r2, [pc, #12]	; (80020d0 <HAL_RCC_OscConfig+0x504>)
 80020c4:	f043 0301 	orr.w	r3, r3, #1
 80020c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020cc:	e014      	b.n	80020f8 <HAL_RCC_OscConfig+0x52c>
 80020ce:	bf00      	nop
 80020d0:	40021000 	.word	0x40021000
 80020d4:	40007000 	.word	0x40007000
 80020d8:	4b9d      	ldr	r3, [pc, #628]	; (8002350 <HAL_RCC_OscConfig+0x784>)
 80020da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020de:	4a9c      	ldr	r2, [pc, #624]	; (8002350 <HAL_RCC_OscConfig+0x784>)
 80020e0:	f023 0301 	bic.w	r3, r3, #1
 80020e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020e8:	4b99      	ldr	r3, [pc, #612]	; (8002350 <HAL_RCC_OscConfig+0x784>)
 80020ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ee:	4a98      	ldr	r2, [pc, #608]	; (8002350 <HAL_RCC_OscConfig+0x784>)
 80020f0:	f023 0304 	bic.w	r3, r3, #4
 80020f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d016      	beq.n	800212e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002100:	f7ff fa6c 	bl	80015dc <HAL_GetTick>
 8002104:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002106:	e00a      	b.n	800211e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002108:	f7ff fa68 	bl	80015dc <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	f241 3288 	movw	r2, #5000	; 0x1388
 8002116:	4293      	cmp	r3, r2
 8002118:	d901      	bls.n	800211e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800211a:	2303      	movs	r3, #3
 800211c:	e168      	b.n	80023f0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800211e:	4b8c      	ldr	r3, [pc, #560]	; (8002350 <HAL_RCC_OscConfig+0x784>)
 8002120:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002124:	f003 0302 	and.w	r3, r3, #2
 8002128:	2b00      	cmp	r3, #0
 800212a:	d0ed      	beq.n	8002108 <HAL_RCC_OscConfig+0x53c>
 800212c:	e015      	b.n	800215a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800212e:	f7ff fa55 	bl	80015dc <HAL_GetTick>
 8002132:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002134:	e00a      	b.n	800214c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002136:	f7ff fa51 	bl	80015dc <HAL_GetTick>
 800213a:	4602      	mov	r2, r0
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	f241 3288 	movw	r2, #5000	; 0x1388
 8002144:	4293      	cmp	r3, r2
 8002146:	d901      	bls.n	800214c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002148:	2303      	movs	r3, #3
 800214a:	e151      	b.n	80023f0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800214c:	4b80      	ldr	r3, [pc, #512]	; (8002350 <HAL_RCC_OscConfig+0x784>)
 800214e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002152:	f003 0302 	and.w	r3, r3, #2
 8002156:	2b00      	cmp	r3, #0
 8002158:	d1ed      	bne.n	8002136 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800215a:	7ffb      	ldrb	r3, [r7, #31]
 800215c:	2b01      	cmp	r3, #1
 800215e:	d105      	bne.n	800216c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002160:	4b7b      	ldr	r3, [pc, #492]	; (8002350 <HAL_RCC_OscConfig+0x784>)
 8002162:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002164:	4a7a      	ldr	r2, [pc, #488]	; (8002350 <HAL_RCC_OscConfig+0x784>)
 8002166:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800216a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0320 	and.w	r3, r3, #32
 8002174:	2b00      	cmp	r3, #0
 8002176:	d03c      	beq.n	80021f2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217c:	2b00      	cmp	r3, #0
 800217e:	d01c      	beq.n	80021ba <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002180:	4b73      	ldr	r3, [pc, #460]	; (8002350 <HAL_RCC_OscConfig+0x784>)
 8002182:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002186:	4a72      	ldr	r2, [pc, #456]	; (8002350 <HAL_RCC_OscConfig+0x784>)
 8002188:	f043 0301 	orr.w	r3, r3, #1
 800218c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002190:	f7ff fa24 	bl	80015dc <HAL_GetTick>
 8002194:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002196:	e008      	b.n	80021aa <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002198:	f7ff fa20 	bl	80015dc <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d901      	bls.n	80021aa <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80021a6:	2303      	movs	r3, #3
 80021a8:	e122      	b.n	80023f0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80021aa:	4b69      	ldr	r3, [pc, #420]	; (8002350 <HAL_RCC_OscConfig+0x784>)
 80021ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80021b0:	f003 0302 	and.w	r3, r3, #2
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d0ef      	beq.n	8002198 <HAL_RCC_OscConfig+0x5cc>
 80021b8:	e01b      	b.n	80021f2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80021ba:	4b65      	ldr	r3, [pc, #404]	; (8002350 <HAL_RCC_OscConfig+0x784>)
 80021bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80021c0:	4a63      	ldr	r2, [pc, #396]	; (8002350 <HAL_RCC_OscConfig+0x784>)
 80021c2:	f023 0301 	bic.w	r3, r3, #1
 80021c6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021ca:	f7ff fa07 	bl	80015dc <HAL_GetTick>
 80021ce:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80021d0:	e008      	b.n	80021e4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021d2:	f7ff fa03 	bl	80015dc <HAL_GetTick>
 80021d6:	4602      	mov	r2, r0
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	2b02      	cmp	r3, #2
 80021de:	d901      	bls.n	80021e4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80021e0:	2303      	movs	r3, #3
 80021e2:	e105      	b.n	80023f0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80021e4:	4b5a      	ldr	r3, [pc, #360]	; (8002350 <HAL_RCC_OscConfig+0x784>)
 80021e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80021ea:	f003 0302 	and.w	r3, r3, #2
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d1ef      	bne.n	80021d2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	f000 80f9 	beq.w	80023ee <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002200:	2b02      	cmp	r3, #2
 8002202:	f040 80cf 	bne.w	80023a4 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002206:	4b52      	ldr	r3, [pc, #328]	; (8002350 <HAL_RCC_OscConfig+0x784>)
 8002208:	68db      	ldr	r3, [r3, #12]
 800220a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	f003 0203 	and.w	r2, r3, #3
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002216:	429a      	cmp	r2, r3
 8002218:	d12c      	bne.n	8002274 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002224:	3b01      	subs	r3, #1
 8002226:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002228:	429a      	cmp	r2, r3
 800222a:	d123      	bne.n	8002274 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002236:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002238:	429a      	cmp	r2, r3
 800223a:	d11b      	bne.n	8002274 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002246:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002248:	429a      	cmp	r2, r3
 800224a:	d113      	bne.n	8002274 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002256:	085b      	lsrs	r3, r3, #1
 8002258:	3b01      	subs	r3, #1
 800225a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800225c:	429a      	cmp	r2, r3
 800225e:	d109      	bne.n	8002274 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226a:	085b      	lsrs	r3, r3, #1
 800226c:	3b01      	subs	r3, #1
 800226e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002270:	429a      	cmp	r2, r3
 8002272:	d071      	beq.n	8002358 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002274:	69bb      	ldr	r3, [r7, #24]
 8002276:	2b0c      	cmp	r3, #12
 8002278:	d068      	beq.n	800234c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800227a:	4b35      	ldr	r3, [pc, #212]	; (8002350 <HAL_RCC_OscConfig+0x784>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d105      	bne.n	8002292 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002286:	4b32      	ldr	r3, [pc, #200]	; (8002350 <HAL_RCC_OscConfig+0x784>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d001      	beq.n	8002296 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e0ac      	b.n	80023f0 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002296:	4b2e      	ldr	r3, [pc, #184]	; (8002350 <HAL_RCC_OscConfig+0x784>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a2d      	ldr	r2, [pc, #180]	; (8002350 <HAL_RCC_OscConfig+0x784>)
 800229c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022a0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80022a2:	f7ff f99b 	bl	80015dc <HAL_GetTick>
 80022a6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022a8:	e008      	b.n	80022bc <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022aa:	f7ff f997 	bl	80015dc <HAL_GetTick>
 80022ae:	4602      	mov	r2, r0
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	1ad3      	subs	r3, r2, r3
 80022b4:	2b02      	cmp	r3, #2
 80022b6:	d901      	bls.n	80022bc <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80022b8:	2303      	movs	r3, #3
 80022ba:	e099      	b.n	80023f0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022bc:	4b24      	ldr	r3, [pc, #144]	; (8002350 <HAL_RCC_OscConfig+0x784>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d1f0      	bne.n	80022aa <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022c8:	4b21      	ldr	r3, [pc, #132]	; (8002350 <HAL_RCC_OscConfig+0x784>)
 80022ca:	68da      	ldr	r2, [r3, #12]
 80022cc:	4b21      	ldr	r3, [pc, #132]	; (8002354 <HAL_RCC_OscConfig+0x788>)
 80022ce:	4013      	ands	r3, r2
 80022d0:	687a      	ldr	r2, [r7, #4]
 80022d2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80022d8:	3a01      	subs	r2, #1
 80022da:	0112      	lsls	r2, r2, #4
 80022dc:	4311      	orrs	r1, r2
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80022e2:	0212      	lsls	r2, r2, #8
 80022e4:	4311      	orrs	r1, r2
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80022ea:	0852      	lsrs	r2, r2, #1
 80022ec:	3a01      	subs	r2, #1
 80022ee:	0552      	lsls	r2, r2, #21
 80022f0:	4311      	orrs	r1, r2
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80022f6:	0852      	lsrs	r2, r2, #1
 80022f8:	3a01      	subs	r2, #1
 80022fa:	0652      	lsls	r2, r2, #25
 80022fc:	4311      	orrs	r1, r2
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002302:	06d2      	lsls	r2, r2, #27
 8002304:	430a      	orrs	r2, r1
 8002306:	4912      	ldr	r1, [pc, #72]	; (8002350 <HAL_RCC_OscConfig+0x784>)
 8002308:	4313      	orrs	r3, r2
 800230a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800230c:	4b10      	ldr	r3, [pc, #64]	; (8002350 <HAL_RCC_OscConfig+0x784>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a0f      	ldr	r2, [pc, #60]	; (8002350 <HAL_RCC_OscConfig+0x784>)
 8002312:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002316:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002318:	4b0d      	ldr	r3, [pc, #52]	; (8002350 <HAL_RCC_OscConfig+0x784>)
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	4a0c      	ldr	r2, [pc, #48]	; (8002350 <HAL_RCC_OscConfig+0x784>)
 800231e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002322:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002324:	f7ff f95a 	bl	80015dc <HAL_GetTick>
 8002328:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800232a:	e008      	b.n	800233e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800232c:	f7ff f956 	bl	80015dc <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	2b02      	cmp	r3, #2
 8002338:	d901      	bls.n	800233e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	e058      	b.n	80023f0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800233e:	4b04      	ldr	r3, [pc, #16]	; (8002350 <HAL_RCC_OscConfig+0x784>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d0f0      	beq.n	800232c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800234a:	e050      	b.n	80023ee <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e04f      	b.n	80023f0 <HAL_RCC_OscConfig+0x824>
 8002350:	40021000 	.word	0x40021000
 8002354:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002358:	4b27      	ldr	r3, [pc, #156]	; (80023f8 <HAL_RCC_OscConfig+0x82c>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002360:	2b00      	cmp	r3, #0
 8002362:	d144      	bne.n	80023ee <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002364:	4b24      	ldr	r3, [pc, #144]	; (80023f8 <HAL_RCC_OscConfig+0x82c>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a23      	ldr	r2, [pc, #140]	; (80023f8 <HAL_RCC_OscConfig+0x82c>)
 800236a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800236e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002370:	4b21      	ldr	r3, [pc, #132]	; (80023f8 <HAL_RCC_OscConfig+0x82c>)
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	4a20      	ldr	r2, [pc, #128]	; (80023f8 <HAL_RCC_OscConfig+0x82c>)
 8002376:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800237a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800237c:	f7ff f92e 	bl	80015dc <HAL_GetTick>
 8002380:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002382:	e008      	b.n	8002396 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002384:	f7ff f92a 	bl	80015dc <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	2b02      	cmp	r3, #2
 8002390:	d901      	bls.n	8002396 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e02c      	b.n	80023f0 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002396:	4b18      	ldr	r3, [pc, #96]	; (80023f8 <HAL_RCC_OscConfig+0x82c>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d0f0      	beq.n	8002384 <HAL_RCC_OscConfig+0x7b8>
 80023a2:	e024      	b.n	80023ee <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80023a4:	69bb      	ldr	r3, [r7, #24]
 80023a6:	2b0c      	cmp	r3, #12
 80023a8:	d01f      	beq.n	80023ea <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023aa:	4b13      	ldr	r3, [pc, #76]	; (80023f8 <HAL_RCC_OscConfig+0x82c>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a12      	ldr	r2, [pc, #72]	; (80023f8 <HAL_RCC_OscConfig+0x82c>)
 80023b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023b6:	f7ff f911 	bl	80015dc <HAL_GetTick>
 80023ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023bc:	e008      	b.n	80023d0 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023be:	f7ff f90d 	bl	80015dc <HAL_GetTick>
 80023c2:	4602      	mov	r2, r0
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	1ad3      	subs	r3, r2, r3
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	d901      	bls.n	80023d0 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80023cc:	2303      	movs	r3, #3
 80023ce:	e00f      	b.n	80023f0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023d0:	4b09      	ldr	r3, [pc, #36]	; (80023f8 <HAL_RCC_OscConfig+0x82c>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d1f0      	bne.n	80023be <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80023dc:	4b06      	ldr	r3, [pc, #24]	; (80023f8 <HAL_RCC_OscConfig+0x82c>)
 80023de:	68da      	ldr	r2, [r3, #12]
 80023e0:	4905      	ldr	r1, [pc, #20]	; (80023f8 <HAL_RCC_OscConfig+0x82c>)
 80023e2:	4b06      	ldr	r3, [pc, #24]	; (80023fc <HAL_RCC_OscConfig+0x830>)
 80023e4:	4013      	ands	r3, r2
 80023e6:	60cb      	str	r3, [r1, #12]
 80023e8:	e001      	b.n	80023ee <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e000      	b.n	80023f0 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80023ee:	2300      	movs	r3, #0
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3720      	adds	r7, #32
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	40021000 	.word	0x40021000
 80023fc:	feeefffc 	.word	0xfeeefffc

08002400 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b084      	sub	sp, #16
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d101      	bne.n	8002414 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e0e7      	b.n	80025e4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002414:	4b75      	ldr	r3, [pc, #468]	; (80025ec <HAL_RCC_ClockConfig+0x1ec>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0307 	and.w	r3, r3, #7
 800241c:	683a      	ldr	r2, [r7, #0]
 800241e:	429a      	cmp	r2, r3
 8002420:	d910      	bls.n	8002444 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002422:	4b72      	ldr	r3, [pc, #456]	; (80025ec <HAL_RCC_ClockConfig+0x1ec>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f023 0207 	bic.w	r2, r3, #7
 800242a:	4970      	ldr	r1, [pc, #448]	; (80025ec <HAL_RCC_ClockConfig+0x1ec>)
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	4313      	orrs	r3, r2
 8002430:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002432:	4b6e      	ldr	r3, [pc, #440]	; (80025ec <HAL_RCC_ClockConfig+0x1ec>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0307 	and.w	r3, r3, #7
 800243a:	683a      	ldr	r2, [r7, #0]
 800243c:	429a      	cmp	r2, r3
 800243e:	d001      	beq.n	8002444 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e0cf      	b.n	80025e4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0302 	and.w	r3, r3, #2
 800244c:	2b00      	cmp	r3, #0
 800244e:	d010      	beq.n	8002472 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	689a      	ldr	r2, [r3, #8]
 8002454:	4b66      	ldr	r3, [pc, #408]	; (80025f0 <HAL_RCC_ClockConfig+0x1f0>)
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800245c:	429a      	cmp	r2, r3
 800245e:	d908      	bls.n	8002472 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002460:	4b63      	ldr	r3, [pc, #396]	; (80025f0 <HAL_RCC_ClockConfig+0x1f0>)
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	4960      	ldr	r1, [pc, #384]	; (80025f0 <HAL_RCC_ClockConfig+0x1f0>)
 800246e:	4313      	orrs	r3, r2
 8002470:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0301 	and.w	r3, r3, #1
 800247a:	2b00      	cmp	r3, #0
 800247c:	d04c      	beq.n	8002518 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	2b03      	cmp	r3, #3
 8002484:	d107      	bne.n	8002496 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002486:	4b5a      	ldr	r3, [pc, #360]	; (80025f0 <HAL_RCC_ClockConfig+0x1f0>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d121      	bne.n	80024d6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e0a6      	b.n	80025e4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	2b02      	cmp	r3, #2
 800249c:	d107      	bne.n	80024ae <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800249e:	4b54      	ldr	r3, [pc, #336]	; (80025f0 <HAL_RCC_ClockConfig+0x1f0>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d115      	bne.n	80024d6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e09a      	b.n	80025e4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d107      	bne.n	80024c6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80024b6:	4b4e      	ldr	r3, [pc, #312]	; (80025f0 <HAL_RCC_ClockConfig+0x1f0>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0302 	and.w	r3, r3, #2
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d109      	bne.n	80024d6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e08e      	b.n	80025e4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024c6:	4b4a      	ldr	r3, [pc, #296]	; (80025f0 <HAL_RCC_ClockConfig+0x1f0>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d101      	bne.n	80024d6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e086      	b.n	80025e4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80024d6:	4b46      	ldr	r3, [pc, #280]	; (80025f0 <HAL_RCC_ClockConfig+0x1f0>)
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	f023 0203 	bic.w	r2, r3, #3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	4943      	ldr	r1, [pc, #268]	; (80025f0 <HAL_RCC_ClockConfig+0x1f0>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024e8:	f7ff f878 	bl	80015dc <HAL_GetTick>
 80024ec:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ee:	e00a      	b.n	8002506 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024f0:	f7ff f874 	bl	80015dc <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80024fe:	4293      	cmp	r3, r2
 8002500:	d901      	bls.n	8002506 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e06e      	b.n	80025e4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002506:	4b3a      	ldr	r3, [pc, #232]	; (80025f0 <HAL_RCC_ClockConfig+0x1f0>)
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	f003 020c 	and.w	r2, r3, #12
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	429a      	cmp	r2, r3
 8002516:	d1eb      	bne.n	80024f0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0302 	and.w	r3, r3, #2
 8002520:	2b00      	cmp	r3, #0
 8002522:	d010      	beq.n	8002546 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	689a      	ldr	r2, [r3, #8]
 8002528:	4b31      	ldr	r3, [pc, #196]	; (80025f0 <HAL_RCC_ClockConfig+0x1f0>)
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002530:	429a      	cmp	r2, r3
 8002532:	d208      	bcs.n	8002546 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002534:	4b2e      	ldr	r3, [pc, #184]	; (80025f0 <HAL_RCC_ClockConfig+0x1f0>)
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	492b      	ldr	r1, [pc, #172]	; (80025f0 <HAL_RCC_ClockConfig+0x1f0>)
 8002542:	4313      	orrs	r3, r2
 8002544:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002546:	4b29      	ldr	r3, [pc, #164]	; (80025ec <HAL_RCC_ClockConfig+0x1ec>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0307 	and.w	r3, r3, #7
 800254e:	683a      	ldr	r2, [r7, #0]
 8002550:	429a      	cmp	r2, r3
 8002552:	d210      	bcs.n	8002576 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002554:	4b25      	ldr	r3, [pc, #148]	; (80025ec <HAL_RCC_ClockConfig+0x1ec>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f023 0207 	bic.w	r2, r3, #7
 800255c:	4923      	ldr	r1, [pc, #140]	; (80025ec <HAL_RCC_ClockConfig+0x1ec>)
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	4313      	orrs	r3, r2
 8002562:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002564:	4b21      	ldr	r3, [pc, #132]	; (80025ec <HAL_RCC_ClockConfig+0x1ec>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0307 	and.w	r3, r3, #7
 800256c:	683a      	ldr	r2, [r7, #0]
 800256e:	429a      	cmp	r2, r3
 8002570:	d001      	beq.n	8002576 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e036      	b.n	80025e4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0304 	and.w	r3, r3, #4
 800257e:	2b00      	cmp	r3, #0
 8002580:	d008      	beq.n	8002594 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002582:	4b1b      	ldr	r3, [pc, #108]	; (80025f0 <HAL_RCC_ClockConfig+0x1f0>)
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	68db      	ldr	r3, [r3, #12]
 800258e:	4918      	ldr	r1, [pc, #96]	; (80025f0 <HAL_RCC_ClockConfig+0x1f0>)
 8002590:	4313      	orrs	r3, r2
 8002592:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0308 	and.w	r3, r3, #8
 800259c:	2b00      	cmp	r3, #0
 800259e:	d009      	beq.n	80025b4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025a0:	4b13      	ldr	r3, [pc, #76]	; (80025f0 <HAL_RCC_ClockConfig+0x1f0>)
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	691b      	ldr	r3, [r3, #16]
 80025ac:	00db      	lsls	r3, r3, #3
 80025ae:	4910      	ldr	r1, [pc, #64]	; (80025f0 <HAL_RCC_ClockConfig+0x1f0>)
 80025b0:	4313      	orrs	r3, r2
 80025b2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80025b4:	f000 f824 	bl	8002600 <HAL_RCC_GetSysClockFreq>
 80025b8:	4602      	mov	r2, r0
 80025ba:	4b0d      	ldr	r3, [pc, #52]	; (80025f0 <HAL_RCC_ClockConfig+0x1f0>)
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	091b      	lsrs	r3, r3, #4
 80025c0:	f003 030f 	and.w	r3, r3, #15
 80025c4:	490b      	ldr	r1, [pc, #44]	; (80025f4 <HAL_RCC_ClockConfig+0x1f4>)
 80025c6:	5ccb      	ldrb	r3, [r1, r3]
 80025c8:	f003 031f 	and.w	r3, r3, #31
 80025cc:	fa22 f303 	lsr.w	r3, r2, r3
 80025d0:	4a09      	ldr	r2, [pc, #36]	; (80025f8 <HAL_RCC_ClockConfig+0x1f8>)
 80025d2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80025d4:	4b09      	ldr	r3, [pc, #36]	; (80025fc <HAL_RCC_ClockConfig+0x1fc>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4618      	mov	r0, r3
 80025da:	f7fe ffaf 	bl	800153c <HAL_InitTick>
 80025de:	4603      	mov	r3, r0
 80025e0:	72fb      	strb	r3, [r7, #11]

  return status;
 80025e2:	7afb      	ldrb	r3, [r7, #11]
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3710      	adds	r7, #16
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	40022000 	.word	0x40022000
 80025f0:	40021000 	.word	0x40021000
 80025f4:	08008770 	.word	0x08008770
 80025f8:	20000000 	.word	0x20000000
 80025fc:	20000004 	.word	0x20000004

08002600 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002600:	b480      	push	{r7}
 8002602:	b089      	sub	sp, #36	; 0x24
 8002604:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002606:	2300      	movs	r3, #0
 8002608:	61fb      	str	r3, [r7, #28]
 800260a:	2300      	movs	r3, #0
 800260c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800260e:	4b3e      	ldr	r3, [pc, #248]	; (8002708 <HAL_RCC_GetSysClockFreq+0x108>)
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	f003 030c 	and.w	r3, r3, #12
 8002616:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002618:	4b3b      	ldr	r3, [pc, #236]	; (8002708 <HAL_RCC_GetSysClockFreq+0x108>)
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	f003 0303 	and.w	r3, r3, #3
 8002620:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d005      	beq.n	8002634 <HAL_RCC_GetSysClockFreq+0x34>
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	2b0c      	cmp	r3, #12
 800262c:	d121      	bne.n	8002672 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2b01      	cmp	r3, #1
 8002632:	d11e      	bne.n	8002672 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002634:	4b34      	ldr	r3, [pc, #208]	; (8002708 <HAL_RCC_GetSysClockFreq+0x108>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0308 	and.w	r3, r3, #8
 800263c:	2b00      	cmp	r3, #0
 800263e:	d107      	bne.n	8002650 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002640:	4b31      	ldr	r3, [pc, #196]	; (8002708 <HAL_RCC_GetSysClockFreq+0x108>)
 8002642:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002646:	0a1b      	lsrs	r3, r3, #8
 8002648:	f003 030f 	and.w	r3, r3, #15
 800264c:	61fb      	str	r3, [r7, #28]
 800264e:	e005      	b.n	800265c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002650:	4b2d      	ldr	r3, [pc, #180]	; (8002708 <HAL_RCC_GetSysClockFreq+0x108>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	091b      	lsrs	r3, r3, #4
 8002656:	f003 030f 	and.w	r3, r3, #15
 800265a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800265c:	4a2b      	ldr	r2, [pc, #172]	; (800270c <HAL_RCC_GetSysClockFreq+0x10c>)
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002664:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d10d      	bne.n	8002688 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002670:	e00a      	b.n	8002688 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	2b04      	cmp	r3, #4
 8002676:	d102      	bne.n	800267e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002678:	4b25      	ldr	r3, [pc, #148]	; (8002710 <HAL_RCC_GetSysClockFreq+0x110>)
 800267a:	61bb      	str	r3, [r7, #24]
 800267c:	e004      	b.n	8002688 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	2b08      	cmp	r3, #8
 8002682:	d101      	bne.n	8002688 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002684:	4b23      	ldr	r3, [pc, #140]	; (8002714 <HAL_RCC_GetSysClockFreq+0x114>)
 8002686:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	2b0c      	cmp	r3, #12
 800268c:	d134      	bne.n	80026f8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800268e:	4b1e      	ldr	r3, [pc, #120]	; (8002708 <HAL_RCC_GetSysClockFreq+0x108>)
 8002690:	68db      	ldr	r3, [r3, #12]
 8002692:	f003 0303 	and.w	r3, r3, #3
 8002696:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	2b02      	cmp	r3, #2
 800269c:	d003      	beq.n	80026a6 <HAL_RCC_GetSysClockFreq+0xa6>
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	2b03      	cmp	r3, #3
 80026a2:	d003      	beq.n	80026ac <HAL_RCC_GetSysClockFreq+0xac>
 80026a4:	e005      	b.n	80026b2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80026a6:	4b1a      	ldr	r3, [pc, #104]	; (8002710 <HAL_RCC_GetSysClockFreq+0x110>)
 80026a8:	617b      	str	r3, [r7, #20]
      break;
 80026aa:	e005      	b.n	80026b8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80026ac:	4b19      	ldr	r3, [pc, #100]	; (8002714 <HAL_RCC_GetSysClockFreq+0x114>)
 80026ae:	617b      	str	r3, [r7, #20]
      break;
 80026b0:	e002      	b.n	80026b8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	617b      	str	r3, [r7, #20]
      break;
 80026b6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80026b8:	4b13      	ldr	r3, [pc, #76]	; (8002708 <HAL_RCC_GetSysClockFreq+0x108>)
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	091b      	lsrs	r3, r3, #4
 80026be:	f003 0307 	and.w	r3, r3, #7
 80026c2:	3301      	adds	r3, #1
 80026c4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80026c6:	4b10      	ldr	r3, [pc, #64]	; (8002708 <HAL_RCC_GetSysClockFreq+0x108>)
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	0a1b      	lsrs	r3, r3, #8
 80026cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80026d0:	697a      	ldr	r2, [r7, #20]
 80026d2:	fb03 f202 	mul.w	r2, r3, r2
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80026dc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80026de:	4b0a      	ldr	r3, [pc, #40]	; (8002708 <HAL_RCC_GetSysClockFreq+0x108>)
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	0e5b      	lsrs	r3, r3, #25
 80026e4:	f003 0303 	and.w	r3, r3, #3
 80026e8:	3301      	adds	r3, #1
 80026ea:	005b      	lsls	r3, r3, #1
 80026ec:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80026ee:	697a      	ldr	r2, [r7, #20]
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80026f6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80026f8:	69bb      	ldr	r3, [r7, #24]
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3724      	adds	r7, #36	; 0x24
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	40021000 	.word	0x40021000
 800270c:	08008788 	.word	0x08008788
 8002710:	00f42400 	.word	0x00f42400
 8002714:	007a1200 	.word	0x007a1200

08002718 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002718:	b480      	push	{r7}
 800271a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800271c:	4b03      	ldr	r3, [pc, #12]	; (800272c <HAL_RCC_GetHCLKFreq+0x14>)
 800271e:	681b      	ldr	r3, [r3, #0]
}
 8002720:	4618      	mov	r0, r3
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	20000000 	.word	0x20000000

08002730 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002734:	f7ff fff0 	bl	8002718 <HAL_RCC_GetHCLKFreq>
 8002738:	4602      	mov	r2, r0
 800273a:	4b06      	ldr	r3, [pc, #24]	; (8002754 <HAL_RCC_GetPCLK1Freq+0x24>)
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	0a1b      	lsrs	r3, r3, #8
 8002740:	f003 0307 	and.w	r3, r3, #7
 8002744:	4904      	ldr	r1, [pc, #16]	; (8002758 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002746:	5ccb      	ldrb	r3, [r1, r3]
 8002748:	f003 031f 	and.w	r3, r3, #31
 800274c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002750:	4618      	mov	r0, r3
 8002752:	bd80      	pop	{r7, pc}
 8002754:	40021000 	.word	0x40021000
 8002758:	08008780 	.word	0x08008780

0800275c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002760:	f7ff ffda 	bl	8002718 <HAL_RCC_GetHCLKFreq>
 8002764:	4602      	mov	r2, r0
 8002766:	4b06      	ldr	r3, [pc, #24]	; (8002780 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	0adb      	lsrs	r3, r3, #11
 800276c:	f003 0307 	and.w	r3, r3, #7
 8002770:	4904      	ldr	r1, [pc, #16]	; (8002784 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002772:	5ccb      	ldrb	r3, [r1, r3]
 8002774:	f003 031f 	and.w	r3, r3, #31
 8002778:	fa22 f303 	lsr.w	r3, r2, r3
}
 800277c:	4618      	mov	r0, r3
 800277e:	bd80      	pop	{r7, pc}
 8002780:	40021000 	.word	0x40021000
 8002784:	08008780 	.word	0x08008780

08002788 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b086      	sub	sp, #24
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002790:	2300      	movs	r3, #0
 8002792:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002794:	4b2a      	ldr	r3, [pc, #168]	; (8002840 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002796:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002798:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800279c:	2b00      	cmp	r3, #0
 800279e:	d003      	beq.n	80027a8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80027a0:	f7ff f9a0 	bl	8001ae4 <HAL_PWREx_GetVoltageRange>
 80027a4:	6178      	str	r0, [r7, #20]
 80027a6:	e014      	b.n	80027d2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80027a8:	4b25      	ldr	r3, [pc, #148]	; (8002840 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ac:	4a24      	ldr	r2, [pc, #144]	; (8002840 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027b2:	6593      	str	r3, [r2, #88]	; 0x58
 80027b4:	4b22      	ldr	r3, [pc, #136]	; (8002840 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027bc:	60fb      	str	r3, [r7, #12]
 80027be:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80027c0:	f7ff f990 	bl	8001ae4 <HAL_PWREx_GetVoltageRange>
 80027c4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80027c6:	4b1e      	ldr	r3, [pc, #120]	; (8002840 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ca:	4a1d      	ldr	r2, [pc, #116]	; (8002840 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027d0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027d8:	d10b      	bne.n	80027f2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2b80      	cmp	r3, #128	; 0x80
 80027de:	d919      	bls.n	8002814 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2ba0      	cmp	r3, #160	; 0xa0
 80027e4:	d902      	bls.n	80027ec <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80027e6:	2302      	movs	r3, #2
 80027e8:	613b      	str	r3, [r7, #16]
 80027ea:	e013      	b.n	8002814 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80027ec:	2301      	movs	r3, #1
 80027ee:	613b      	str	r3, [r7, #16]
 80027f0:	e010      	b.n	8002814 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2b80      	cmp	r3, #128	; 0x80
 80027f6:	d902      	bls.n	80027fe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80027f8:	2303      	movs	r3, #3
 80027fa:	613b      	str	r3, [r7, #16]
 80027fc:	e00a      	b.n	8002814 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2b80      	cmp	r3, #128	; 0x80
 8002802:	d102      	bne.n	800280a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002804:	2302      	movs	r3, #2
 8002806:	613b      	str	r3, [r7, #16]
 8002808:	e004      	b.n	8002814 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2b70      	cmp	r3, #112	; 0x70
 800280e:	d101      	bne.n	8002814 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002810:	2301      	movs	r3, #1
 8002812:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002814:	4b0b      	ldr	r3, [pc, #44]	; (8002844 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f023 0207 	bic.w	r2, r3, #7
 800281c:	4909      	ldr	r1, [pc, #36]	; (8002844 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	4313      	orrs	r3, r2
 8002822:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002824:	4b07      	ldr	r3, [pc, #28]	; (8002844 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0307 	and.w	r3, r3, #7
 800282c:	693a      	ldr	r2, [r7, #16]
 800282e:	429a      	cmp	r2, r3
 8002830:	d001      	beq.n	8002836 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e000      	b.n	8002838 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002836:	2300      	movs	r3, #0
}
 8002838:	4618      	mov	r0, r3
 800283a:	3718      	adds	r7, #24
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}
 8002840:	40021000 	.word	0x40021000
 8002844:	40022000 	.word	0x40022000

08002848 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b086      	sub	sp, #24
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002850:	2300      	movs	r3, #0
 8002852:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002854:	2300      	movs	r3, #0
 8002856:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002860:	2b00      	cmp	r3, #0
 8002862:	d041      	beq.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002868:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800286c:	d02a      	beq.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800286e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002872:	d824      	bhi.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002874:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002878:	d008      	beq.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800287a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800287e:	d81e      	bhi.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002880:	2b00      	cmp	r3, #0
 8002882:	d00a      	beq.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002884:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002888:	d010      	beq.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x64>
 800288a:	e018      	b.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800288c:	4b86      	ldr	r3, [pc, #536]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	4a85      	ldr	r2, [pc, #532]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002892:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002896:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002898:	e015      	b.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	3304      	adds	r3, #4
 800289e:	2100      	movs	r1, #0
 80028a0:	4618      	mov	r0, r3
 80028a2:	f000 facd 	bl	8002e40 <RCCEx_PLLSAI1_Config>
 80028a6:	4603      	mov	r3, r0
 80028a8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80028aa:	e00c      	b.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	3320      	adds	r3, #32
 80028b0:	2100      	movs	r1, #0
 80028b2:	4618      	mov	r0, r3
 80028b4:	f000 fbb6 	bl	8003024 <RCCEx_PLLSAI2_Config>
 80028b8:	4603      	mov	r3, r0
 80028ba:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80028bc:	e003      	b.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	74fb      	strb	r3, [r7, #19]
      break;
 80028c2:	e000      	b.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80028c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80028c6:	7cfb      	ldrb	r3, [r7, #19]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d10b      	bne.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80028cc:	4b76      	ldr	r3, [pc, #472]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028d2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028da:	4973      	ldr	r1, [pc, #460]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028dc:	4313      	orrs	r3, r2
 80028de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80028e2:	e001      	b.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028e4:	7cfb      	ldrb	r3, [r7, #19]
 80028e6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d041      	beq.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028f8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80028fc:	d02a      	beq.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80028fe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002902:	d824      	bhi.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002904:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002908:	d008      	beq.n	800291c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800290a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800290e:	d81e      	bhi.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002910:	2b00      	cmp	r3, #0
 8002912:	d00a      	beq.n	800292a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002914:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002918:	d010      	beq.n	800293c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800291a:	e018      	b.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800291c:	4b62      	ldr	r3, [pc, #392]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	4a61      	ldr	r2, [pc, #388]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002922:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002926:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002928:	e015      	b.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	3304      	adds	r3, #4
 800292e:	2100      	movs	r1, #0
 8002930:	4618      	mov	r0, r3
 8002932:	f000 fa85 	bl	8002e40 <RCCEx_PLLSAI1_Config>
 8002936:	4603      	mov	r3, r0
 8002938:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800293a:	e00c      	b.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	3320      	adds	r3, #32
 8002940:	2100      	movs	r1, #0
 8002942:	4618      	mov	r0, r3
 8002944:	f000 fb6e 	bl	8003024 <RCCEx_PLLSAI2_Config>
 8002948:	4603      	mov	r3, r0
 800294a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800294c:	e003      	b.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	74fb      	strb	r3, [r7, #19]
      break;
 8002952:	e000      	b.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002954:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002956:	7cfb      	ldrb	r3, [r7, #19]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d10b      	bne.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800295c:	4b52      	ldr	r3, [pc, #328]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800295e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002962:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800296a:	494f      	ldr	r1, [pc, #316]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800296c:	4313      	orrs	r3, r2
 800296e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002972:	e001      	b.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002974:	7cfb      	ldrb	r3, [r7, #19]
 8002976:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002980:	2b00      	cmp	r3, #0
 8002982:	f000 80a0 	beq.w	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002986:	2300      	movs	r3, #0
 8002988:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800298a:	4b47      	ldr	r3, [pc, #284]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800298c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800298e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d101      	bne.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002996:	2301      	movs	r3, #1
 8002998:	e000      	b.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800299a:	2300      	movs	r3, #0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d00d      	beq.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029a0:	4b41      	ldr	r3, [pc, #260]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029a4:	4a40      	ldr	r2, [pc, #256]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029aa:	6593      	str	r3, [r2, #88]	; 0x58
 80029ac:	4b3e      	ldr	r3, [pc, #248]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029b4:	60bb      	str	r3, [r7, #8]
 80029b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029b8:	2301      	movs	r3, #1
 80029ba:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029bc:	4b3b      	ldr	r3, [pc, #236]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a3a      	ldr	r2, [pc, #232]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80029c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029c6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80029c8:	f7fe fe08 	bl	80015dc <HAL_GetTick>
 80029cc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80029ce:	e009      	b.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029d0:	f7fe fe04 	bl	80015dc <HAL_GetTick>
 80029d4:	4602      	mov	r2, r0
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d902      	bls.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	74fb      	strb	r3, [r7, #19]
        break;
 80029e2:	e005      	b.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80029e4:	4b31      	ldr	r3, [pc, #196]	; (8002aac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d0ef      	beq.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80029f0:	7cfb      	ldrb	r3, [r7, #19]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d15c      	bne.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80029f6:	4b2c      	ldr	r3, [pc, #176]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a00:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d01f      	beq.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a0e:	697a      	ldr	r2, [r7, #20]
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d019      	beq.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002a14:	4b24      	ldr	r3, [pc, #144]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a1e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002a20:	4b21      	ldr	r3, [pc, #132]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a26:	4a20      	ldr	r2, [pc, #128]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002a30:	4b1d      	ldr	r3, [pc, #116]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a36:	4a1c      	ldr	r2, [pc, #112]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002a40:	4a19      	ldr	r2, [pc, #100]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	f003 0301 	and.w	r3, r3, #1
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d016      	beq.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a52:	f7fe fdc3 	bl	80015dc <HAL_GetTick>
 8002a56:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a58:	e00b      	b.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a5a:	f7fe fdbf 	bl	80015dc <HAL_GetTick>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	1ad3      	subs	r3, r2, r3
 8002a64:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d902      	bls.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	74fb      	strb	r3, [r7, #19]
            break;
 8002a70:	e006      	b.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a72:	4b0d      	ldr	r3, [pc, #52]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a78:	f003 0302 	and.w	r3, r3, #2
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d0ec      	beq.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002a80:	7cfb      	ldrb	r3, [r7, #19]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d10c      	bne.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a86:	4b08      	ldr	r3, [pc, #32]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a96:	4904      	ldr	r1, [pc, #16]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002a9e:	e009      	b.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002aa0:	7cfb      	ldrb	r3, [r7, #19]
 8002aa2:	74bb      	strb	r3, [r7, #18]
 8002aa4:	e006      	b.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002aa6:	bf00      	nop
 8002aa8:	40021000 	.word	0x40021000
 8002aac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ab0:	7cfb      	ldrb	r3, [r7, #19]
 8002ab2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ab4:	7c7b      	ldrb	r3, [r7, #17]
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d105      	bne.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002aba:	4ba6      	ldr	r3, [pc, #664]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002abc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002abe:	4aa5      	ldr	r2, [pc, #660]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002ac0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ac4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0301 	and.w	r3, r3, #1
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d00a      	beq.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ad2:	4ba0      	ldr	r3, [pc, #640]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002ad4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ad8:	f023 0203 	bic.w	r2, r3, #3
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ae0:	499c      	ldr	r1, [pc, #624]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 0302 	and.w	r3, r3, #2
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d00a      	beq.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002af4:	4b97      	ldr	r3, [pc, #604]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002afa:	f023 020c 	bic.w	r2, r3, #12
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b02:	4994      	ldr	r1, [pc, #592]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002b04:	4313      	orrs	r3, r2
 8002b06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0304 	and.w	r3, r3, #4
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d00a      	beq.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b16:	4b8f      	ldr	r3, [pc, #572]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002b18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b1c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b24:	498b      	ldr	r1, [pc, #556]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002b26:	4313      	orrs	r3, r2
 8002b28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0308 	and.w	r3, r3, #8
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d00a      	beq.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002b38:	4b86      	ldr	r3, [pc, #536]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b3e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b46:	4983      	ldr	r1, [pc, #524]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0310 	and.w	r3, r3, #16
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d00a      	beq.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002b5a:	4b7e      	ldr	r3, [pc, #504]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002b5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b60:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b68:	497a      	ldr	r1, [pc, #488]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 0320 	and.w	r3, r3, #32
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d00a      	beq.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002b7c:	4b75      	ldr	r3, [pc, #468]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b82:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b8a:	4972      	ldr	r1, [pc, #456]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d00a      	beq.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b9e:	4b6d      	ldr	r3, [pc, #436]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002ba0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ba4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bac:	4969      	ldr	r1, [pc, #420]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d00a      	beq.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002bc0:	4b64      	ldr	r3, [pc, #400]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bc6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002bce:	4961      	ldr	r1, [pc, #388]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d00a      	beq.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002be2:	4b5c      	ldr	r3, [pc, #368]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002be4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002be8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bf0:	4958      	ldr	r1, [pc, #352]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d00a      	beq.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002c04:	4b53      	ldr	r3, [pc, #332]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c0a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c12:	4950      	ldr	r1, [pc, #320]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002c14:	4313      	orrs	r3, r2
 8002c16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d00a      	beq.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002c26:	4b4b      	ldr	r3, [pc, #300]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002c28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c2c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c34:	4947      	ldr	r1, [pc, #284]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002c36:	4313      	orrs	r3, r2
 8002c38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d00a      	beq.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002c48:	4b42      	ldr	r3, [pc, #264]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002c4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002c4e:	f023 0203 	bic.w	r2, r3, #3
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c56:	493f      	ldr	r1, [pc, #252]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d028      	beq.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c6a:	4b3a      	ldr	r3, [pc, #232]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002c6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c70:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c78:	4936      	ldr	r1, [pc, #216]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c84:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c88:	d106      	bne.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c8a:	4b32      	ldr	r3, [pc, #200]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002c8c:	68db      	ldr	r3, [r3, #12]
 8002c8e:	4a31      	ldr	r2, [pc, #196]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002c90:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c94:	60d3      	str	r3, [r2, #12]
 8002c96:	e011      	b.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c9c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ca0:	d10c      	bne.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	3304      	adds	r3, #4
 8002ca6:	2101      	movs	r1, #1
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f000 f8c9 	bl	8002e40 <RCCEx_PLLSAI1_Config>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002cb2:	7cfb      	ldrb	r3, [r7, #19]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d001      	beq.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8002cb8:	7cfb      	ldrb	r3, [r7, #19]
 8002cba:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d028      	beq.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002cc8:	4b22      	ldr	r3, [pc, #136]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cd6:	491f      	ldr	r1, [pc, #124]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ce2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ce6:	d106      	bne.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ce8:	4b1a      	ldr	r3, [pc, #104]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	4a19      	ldr	r2, [pc, #100]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002cee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002cf2:	60d3      	str	r3, [r2, #12]
 8002cf4:	e011      	b.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cfa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002cfe:	d10c      	bne.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	3304      	adds	r3, #4
 8002d04:	2101      	movs	r1, #1
 8002d06:	4618      	mov	r0, r3
 8002d08:	f000 f89a 	bl	8002e40 <RCCEx_PLLSAI1_Config>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d10:	7cfb      	ldrb	r3, [r7, #19]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d001      	beq.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8002d16:	7cfb      	ldrb	r3, [r7, #19]
 8002d18:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d02a      	beq.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002d26:	4b0b      	ldr	r3, [pc, #44]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002d28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d2c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d34:	4907      	ldr	r1, [pc, #28]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002d36:	4313      	orrs	r3, r2
 8002d38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d40:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d44:	d108      	bne.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d46:	4b03      	ldr	r3, [pc, #12]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002d48:	68db      	ldr	r3, [r3, #12]
 8002d4a:	4a02      	ldr	r2, [pc, #8]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002d4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d50:	60d3      	str	r3, [r2, #12]
 8002d52:	e013      	b.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x534>
 8002d54:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d5c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d60:	d10c      	bne.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	3304      	adds	r3, #4
 8002d66:	2101      	movs	r1, #1
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f000 f869 	bl	8002e40 <RCCEx_PLLSAI1_Config>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d72:	7cfb      	ldrb	r3, [r7, #19]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d001      	beq.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8002d78:	7cfb      	ldrb	r3, [r7, #19]
 8002d7a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d02f      	beq.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002d88:	4b2c      	ldr	r3, [pc, #176]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d8e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d96:	4929      	ldr	r1, [pc, #164]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002da2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002da6:	d10d      	bne.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	3304      	adds	r3, #4
 8002dac:	2102      	movs	r1, #2
 8002dae:	4618      	mov	r0, r3
 8002db0:	f000 f846 	bl	8002e40 <RCCEx_PLLSAI1_Config>
 8002db4:	4603      	mov	r3, r0
 8002db6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002db8:	7cfb      	ldrb	r3, [r7, #19]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d014      	beq.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8002dbe:	7cfb      	ldrb	r3, [r7, #19]
 8002dc0:	74bb      	strb	r3, [r7, #18]
 8002dc2:	e011      	b.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002dc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002dcc:	d10c      	bne.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	3320      	adds	r3, #32
 8002dd2:	2102      	movs	r1, #2
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f000 f925 	bl	8003024 <RCCEx_PLLSAI2_Config>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002dde:	7cfb      	ldrb	r3, [r7, #19]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d001      	beq.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8002de4:	7cfb      	ldrb	r3, [r7, #19]
 8002de6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d00b      	beq.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002df4:	4b11      	ldr	r3, [pc, #68]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dfa:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e04:	490d      	ldr	r1, [pc, #52]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002e06:	4313      	orrs	r3, r2
 8002e08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d00b      	beq.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002e18:	4b08      	ldr	r3, [pc, #32]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e1e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e28:	4904      	ldr	r1, [pc, #16]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002e30:	7cbb      	ldrb	r3, [r7, #18]
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3718      	adds	r7, #24
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	40021000 	.word	0x40021000

08002e40 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b084      	sub	sp, #16
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002e4e:	4b74      	ldr	r3, [pc, #464]	; (8003020 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	f003 0303 	and.w	r3, r3, #3
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d018      	beq.n	8002e8c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002e5a:	4b71      	ldr	r3, [pc, #452]	; (8003020 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	f003 0203 	and.w	r2, r3, #3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d10d      	bne.n	8002e86 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
       ||
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d009      	beq.n	8002e86 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002e72:	4b6b      	ldr	r3, [pc, #428]	; (8003020 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e74:	68db      	ldr	r3, [r3, #12]
 8002e76:	091b      	lsrs	r3, r3, #4
 8002e78:	f003 0307 	and.w	r3, r3, #7
 8002e7c:	1c5a      	adds	r2, r3, #1
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	685b      	ldr	r3, [r3, #4]
       ||
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d047      	beq.n	8002f16 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	73fb      	strb	r3, [r7, #15]
 8002e8a:	e044      	b.n	8002f16 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2b03      	cmp	r3, #3
 8002e92:	d018      	beq.n	8002ec6 <RCCEx_PLLSAI1_Config+0x86>
 8002e94:	2b03      	cmp	r3, #3
 8002e96:	d825      	bhi.n	8002ee4 <RCCEx_PLLSAI1_Config+0xa4>
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d002      	beq.n	8002ea2 <RCCEx_PLLSAI1_Config+0x62>
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	d009      	beq.n	8002eb4 <RCCEx_PLLSAI1_Config+0x74>
 8002ea0:	e020      	b.n	8002ee4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002ea2:	4b5f      	ldr	r3, [pc, #380]	; (8003020 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0302 	and.w	r3, r3, #2
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d11d      	bne.n	8002eea <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002eb2:	e01a      	b.n	8002eea <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002eb4:	4b5a      	ldr	r3, [pc, #360]	; (8003020 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d116      	bne.n	8002eee <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ec4:	e013      	b.n	8002eee <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002ec6:	4b56      	ldr	r3, [pc, #344]	; (8003020 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d10f      	bne.n	8002ef2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002ed2:	4b53      	ldr	r3, [pc, #332]	; (8003020 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d109      	bne.n	8002ef2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002ee2:	e006      	b.n	8002ef2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	73fb      	strb	r3, [r7, #15]
      break;
 8002ee8:	e004      	b.n	8002ef4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002eea:	bf00      	nop
 8002eec:	e002      	b.n	8002ef4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002eee:	bf00      	nop
 8002ef0:	e000      	b.n	8002ef4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002ef2:	bf00      	nop
    }

    if(status == HAL_OK)
 8002ef4:	7bfb      	ldrb	r3, [r7, #15]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d10d      	bne.n	8002f16 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002efa:	4b49      	ldr	r3, [pc, #292]	; (8003020 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002efc:	68db      	ldr	r3, [r3, #12]
 8002efe:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6819      	ldr	r1, [r3, #0]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	3b01      	subs	r3, #1
 8002f0c:	011b      	lsls	r3, r3, #4
 8002f0e:	430b      	orrs	r3, r1
 8002f10:	4943      	ldr	r1, [pc, #268]	; (8003020 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f12:	4313      	orrs	r3, r2
 8002f14:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002f16:	7bfb      	ldrb	r3, [r7, #15]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d17c      	bne.n	8003016 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002f1c:	4b40      	ldr	r3, [pc, #256]	; (8003020 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a3f      	ldr	r2, [pc, #252]	; (8003020 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f22:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002f26:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f28:	f7fe fb58 	bl	80015dc <HAL_GetTick>
 8002f2c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002f2e:	e009      	b.n	8002f44 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f30:	f7fe fb54 	bl	80015dc <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d902      	bls.n	8002f44 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	73fb      	strb	r3, [r7, #15]
        break;
 8002f42:	e005      	b.n	8002f50 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002f44:	4b36      	ldr	r3, [pc, #216]	; (8003020 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d1ef      	bne.n	8002f30 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002f50:	7bfb      	ldrb	r3, [r7, #15]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d15f      	bne.n	8003016 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d110      	bne.n	8002f7e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f5c:	4b30      	ldr	r3, [pc, #192]	; (8003020 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f5e:	691b      	ldr	r3, [r3, #16]
 8002f60:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002f64:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002f68:	687a      	ldr	r2, [r7, #4]
 8002f6a:	6892      	ldr	r2, [r2, #8]
 8002f6c:	0211      	lsls	r1, r2, #8
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	68d2      	ldr	r2, [r2, #12]
 8002f72:	06d2      	lsls	r2, r2, #27
 8002f74:	430a      	orrs	r2, r1
 8002f76:	492a      	ldr	r1, [pc, #168]	; (8003020 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	610b      	str	r3, [r1, #16]
 8002f7c:	e027      	b.n	8002fce <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d112      	bne.n	8002faa <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f84:	4b26      	ldr	r3, [pc, #152]	; (8003020 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f86:	691b      	ldr	r3, [r3, #16]
 8002f88:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002f8c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	6892      	ldr	r2, [r2, #8]
 8002f94:	0211      	lsls	r1, r2, #8
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	6912      	ldr	r2, [r2, #16]
 8002f9a:	0852      	lsrs	r2, r2, #1
 8002f9c:	3a01      	subs	r2, #1
 8002f9e:	0552      	lsls	r2, r2, #21
 8002fa0:	430a      	orrs	r2, r1
 8002fa2:	491f      	ldr	r1, [pc, #124]	; (8003020 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	610b      	str	r3, [r1, #16]
 8002fa8:	e011      	b.n	8002fce <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002faa:	4b1d      	ldr	r3, [pc, #116]	; (8003020 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fac:	691b      	ldr	r3, [r3, #16]
 8002fae:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002fb2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	6892      	ldr	r2, [r2, #8]
 8002fba:	0211      	lsls	r1, r2, #8
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	6952      	ldr	r2, [r2, #20]
 8002fc0:	0852      	lsrs	r2, r2, #1
 8002fc2:	3a01      	subs	r2, #1
 8002fc4:	0652      	lsls	r2, r2, #25
 8002fc6:	430a      	orrs	r2, r1
 8002fc8:	4915      	ldr	r1, [pc, #84]	; (8003020 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002fce:	4b14      	ldr	r3, [pc, #80]	; (8003020 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a13      	ldr	r2, [pc, #76]	; (8003020 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fd4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002fd8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fda:	f7fe faff 	bl	80015dc <HAL_GetTick>
 8002fde:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002fe0:	e009      	b.n	8002ff6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002fe2:	f7fe fafb 	bl	80015dc <HAL_GetTick>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	1ad3      	subs	r3, r2, r3
 8002fec:	2b02      	cmp	r3, #2
 8002fee:	d902      	bls.n	8002ff6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002ff0:	2303      	movs	r3, #3
 8002ff2:	73fb      	strb	r3, [r7, #15]
          break;
 8002ff4:	e005      	b.n	8003002 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002ff6:	4b0a      	ldr	r3, [pc, #40]	; (8003020 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d0ef      	beq.n	8002fe2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003002:	7bfb      	ldrb	r3, [r7, #15]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d106      	bne.n	8003016 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003008:	4b05      	ldr	r3, [pc, #20]	; (8003020 <RCCEx_PLLSAI1_Config+0x1e0>)
 800300a:	691a      	ldr	r2, [r3, #16]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	699b      	ldr	r3, [r3, #24]
 8003010:	4903      	ldr	r1, [pc, #12]	; (8003020 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003012:	4313      	orrs	r3, r2
 8003014:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003016:	7bfb      	ldrb	r3, [r7, #15]
}
 8003018:	4618      	mov	r0, r3
 800301a:	3710      	adds	r7, #16
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}
 8003020:	40021000 	.word	0x40021000

08003024 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b084      	sub	sp, #16
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800302e:	2300      	movs	r3, #0
 8003030:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003032:	4b69      	ldr	r3, [pc, #420]	; (80031d8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003034:	68db      	ldr	r3, [r3, #12]
 8003036:	f003 0303 	and.w	r3, r3, #3
 800303a:	2b00      	cmp	r3, #0
 800303c:	d018      	beq.n	8003070 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800303e:	4b66      	ldr	r3, [pc, #408]	; (80031d8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003040:	68db      	ldr	r3, [r3, #12]
 8003042:	f003 0203 	and.w	r2, r3, #3
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	429a      	cmp	r2, r3
 800304c:	d10d      	bne.n	800306a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
       ||
 8003052:	2b00      	cmp	r3, #0
 8003054:	d009      	beq.n	800306a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003056:	4b60      	ldr	r3, [pc, #384]	; (80031d8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003058:	68db      	ldr	r3, [r3, #12]
 800305a:	091b      	lsrs	r3, r3, #4
 800305c:	f003 0307 	and.w	r3, r3, #7
 8003060:	1c5a      	adds	r2, r3, #1
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	685b      	ldr	r3, [r3, #4]
       ||
 8003066:	429a      	cmp	r2, r3
 8003068:	d047      	beq.n	80030fa <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	73fb      	strb	r3, [r7, #15]
 800306e:	e044      	b.n	80030fa <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2b03      	cmp	r3, #3
 8003076:	d018      	beq.n	80030aa <RCCEx_PLLSAI2_Config+0x86>
 8003078:	2b03      	cmp	r3, #3
 800307a:	d825      	bhi.n	80030c8 <RCCEx_PLLSAI2_Config+0xa4>
 800307c:	2b01      	cmp	r3, #1
 800307e:	d002      	beq.n	8003086 <RCCEx_PLLSAI2_Config+0x62>
 8003080:	2b02      	cmp	r3, #2
 8003082:	d009      	beq.n	8003098 <RCCEx_PLLSAI2_Config+0x74>
 8003084:	e020      	b.n	80030c8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003086:	4b54      	ldr	r3, [pc, #336]	; (80031d8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 0302 	and.w	r3, r3, #2
 800308e:	2b00      	cmp	r3, #0
 8003090:	d11d      	bne.n	80030ce <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003096:	e01a      	b.n	80030ce <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003098:	4b4f      	ldr	r3, [pc, #316]	; (80031d8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d116      	bne.n	80030d2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030a8:	e013      	b.n	80030d2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80030aa:	4b4b      	ldr	r3, [pc, #300]	; (80031d8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d10f      	bne.n	80030d6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80030b6:	4b48      	ldr	r3, [pc, #288]	; (80031d8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d109      	bne.n	80030d6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80030c6:	e006      	b.n	80030d6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	73fb      	strb	r3, [r7, #15]
      break;
 80030cc:	e004      	b.n	80030d8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80030ce:	bf00      	nop
 80030d0:	e002      	b.n	80030d8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80030d2:	bf00      	nop
 80030d4:	e000      	b.n	80030d8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80030d6:	bf00      	nop
    }

    if(status == HAL_OK)
 80030d8:	7bfb      	ldrb	r3, [r7, #15]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d10d      	bne.n	80030fa <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80030de:	4b3e      	ldr	r3, [pc, #248]	; (80031d8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6819      	ldr	r1, [r3, #0]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	3b01      	subs	r3, #1
 80030f0:	011b      	lsls	r3, r3, #4
 80030f2:	430b      	orrs	r3, r1
 80030f4:	4938      	ldr	r1, [pc, #224]	; (80031d8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80030f6:	4313      	orrs	r3, r2
 80030f8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80030fa:	7bfb      	ldrb	r3, [r7, #15]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d166      	bne.n	80031ce <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003100:	4b35      	ldr	r3, [pc, #212]	; (80031d8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a34      	ldr	r2, [pc, #208]	; (80031d8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003106:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800310a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800310c:	f7fe fa66 	bl	80015dc <HAL_GetTick>
 8003110:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003112:	e009      	b.n	8003128 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003114:	f7fe fa62 	bl	80015dc <HAL_GetTick>
 8003118:	4602      	mov	r2, r0
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	2b02      	cmp	r3, #2
 8003120:	d902      	bls.n	8003128 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003122:	2303      	movs	r3, #3
 8003124:	73fb      	strb	r3, [r7, #15]
        break;
 8003126:	e005      	b.n	8003134 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003128:	4b2b      	ldr	r3, [pc, #172]	; (80031d8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003130:	2b00      	cmp	r3, #0
 8003132:	d1ef      	bne.n	8003114 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003134:	7bfb      	ldrb	r3, [r7, #15]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d149      	bne.n	80031ce <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d110      	bne.n	8003162 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003140:	4b25      	ldr	r3, [pc, #148]	; (80031d8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003142:	695b      	ldr	r3, [r3, #20]
 8003144:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003148:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	6892      	ldr	r2, [r2, #8]
 8003150:	0211      	lsls	r1, r2, #8
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	68d2      	ldr	r2, [r2, #12]
 8003156:	06d2      	lsls	r2, r2, #27
 8003158:	430a      	orrs	r2, r1
 800315a:	491f      	ldr	r1, [pc, #124]	; (80031d8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800315c:	4313      	orrs	r3, r2
 800315e:	614b      	str	r3, [r1, #20]
 8003160:	e011      	b.n	8003186 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003162:	4b1d      	ldr	r3, [pc, #116]	; (80031d8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003164:	695b      	ldr	r3, [r3, #20]
 8003166:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800316a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	6892      	ldr	r2, [r2, #8]
 8003172:	0211      	lsls	r1, r2, #8
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	6912      	ldr	r2, [r2, #16]
 8003178:	0852      	lsrs	r2, r2, #1
 800317a:	3a01      	subs	r2, #1
 800317c:	0652      	lsls	r2, r2, #25
 800317e:	430a      	orrs	r2, r1
 8003180:	4915      	ldr	r1, [pc, #84]	; (80031d8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003182:	4313      	orrs	r3, r2
 8003184:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003186:	4b14      	ldr	r3, [pc, #80]	; (80031d8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a13      	ldr	r2, [pc, #76]	; (80031d8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800318c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003190:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003192:	f7fe fa23 	bl	80015dc <HAL_GetTick>
 8003196:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003198:	e009      	b.n	80031ae <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800319a:	f7fe fa1f 	bl	80015dc <HAL_GetTick>
 800319e:	4602      	mov	r2, r0
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	2b02      	cmp	r3, #2
 80031a6:	d902      	bls.n	80031ae <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 80031a8:	2303      	movs	r3, #3
 80031aa:	73fb      	strb	r3, [r7, #15]
          break;
 80031ac:	e005      	b.n	80031ba <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80031ae:	4b0a      	ldr	r3, [pc, #40]	; (80031d8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d0ef      	beq.n	800319a <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 80031ba:	7bfb      	ldrb	r3, [r7, #15]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d106      	bne.n	80031ce <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80031c0:	4b05      	ldr	r3, [pc, #20]	; (80031d8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80031c2:	695a      	ldr	r2, [r3, #20]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	695b      	ldr	r3, [r3, #20]
 80031c8:	4903      	ldr	r1, [pc, #12]	; (80031d8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80031ca:	4313      	orrs	r3, r2
 80031cc:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80031ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3710      	adds	r7, #16
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	40021000 	.word	0x40021000

080031dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b082      	sub	sp, #8
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d101      	bne.n	80031ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e040      	b.n	8003270 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d106      	bne.n	8003204 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f7fd fffe 	bl	8001200 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2224      	movs	r2, #36	; 0x24
 8003208:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f022 0201 	bic.w	r2, r2, #1
 8003218:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f000 f992 	bl	8003544 <UART_SetConfig>
 8003220:	4603      	mov	r3, r0
 8003222:	2b01      	cmp	r3, #1
 8003224:	d101      	bne.n	800322a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e022      	b.n	8003270 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322e:	2b00      	cmp	r3, #0
 8003230:	d002      	beq.n	8003238 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f000 fc3e 	bl	8003ab4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	685a      	ldr	r2, [r3, #4]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003246:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	689a      	ldr	r2, [r3, #8]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003256:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f042 0201 	orr.w	r2, r2, #1
 8003266:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	f000 fcc5 	bl	8003bf8 <UART_CheckIdleState>
 800326e:	4603      	mov	r3, r0
}
 8003270:	4618      	mov	r0, r3
 8003272:	3708      	adds	r7, #8
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}

08003278 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b08a      	sub	sp, #40	; 0x28
 800327c:	af02      	add	r7, sp, #8
 800327e:	60f8      	str	r0, [r7, #12]
 8003280:	60b9      	str	r1, [r7, #8]
 8003282:	603b      	str	r3, [r7, #0]
 8003284:	4613      	mov	r3, r2
 8003286:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800328c:	2b20      	cmp	r3, #32
 800328e:	f040 8082 	bne.w	8003396 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d002      	beq.n	800329e <HAL_UART_Transmit+0x26>
 8003298:	88fb      	ldrh	r3, [r7, #6]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d101      	bne.n	80032a2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e07a      	b.n	8003398 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d101      	bne.n	80032b0 <HAL_UART_Transmit+0x38>
 80032ac:	2302      	movs	r3, #2
 80032ae:	e073      	b.n	8003398 <HAL_UART_Transmit+0x120>
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2201      	movs	r2, #1
 80032b4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2200      	movs	r2, #0
 80032bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2221      	movs	r2, #33	; 0x21
 80032c4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80032c6:	f7fe f989 	bl	80015dc <HAL_GetTick>
 80032ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	88fa      	ldrh	r2, [r7, #6]
 80032d0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	88fa      	ldrh	r2, [r7, #6]
 80032d8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032e4:	d108      	bne.n	80032f8 <HAL_UART_Transmit+0x80>
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	691b      	ldr	r3, [r3, #16]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d104      	bne.n	80032f8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80032ee:	2300      	movs	r3, #0
 80032f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	61bb      	str	r3, [r7, #24]
 80032f6:	e003      	b.n	8003300 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80032fc:	2300      	movs	r3, #0
 80032fe:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2200      	movs	r2, #0
 8003304:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003308:	e02d      	b.n	8003366 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	9300      	str	r3, [sp, #0]
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	2200      	movs	r2, #0
 8003312:	2180      	movs	r1, #128	; 0x80
 8003314:	68f8      	ldr	r0, [r7, #12]
 8003316:	f000 fcb8 	bl	8003c8a <UART_WaitOnFlagUntilTimeout>
 800331a:	4603      	mov	r3, r0
 800331c:	2b00      	cmp	r3, #0
 800331e:	d001      	beq.n	8003324 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003320:	2303      	movs	r3, #3
 8003322:	e039      	b.n	8003398 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003324:	69fb      	ldr	r3, [r7, #28]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d10b      	bne.n	8003342 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800332a:	69bb      	ldr	r3, [r7, #24]
 800332c:	881a      	ldrh	r2, [r3, #0]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003336:	b292      	uxth	r2, r2
 8003338:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800333a:	69bb      	ldr	r3, [r7, #24]
 800333c:	3302      	adds	r3, #2
 800333e:	61bb      	str	r3, [r7, #24]
 8003340:	e008      	b.n	8003354 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	781a      	ldrb	r2, [r3, #0]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	b292      	uxth	r2, r2
 800334c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	3301      	adds	r3, #1
 8003352:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800335a:	b29b      	uxth	r3, r3
 800335c:	3b01      	subs	r3, #1
 800335e:	b29a      	uxth	r2, r3
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800336c:	b29b      	uxth	r3, r3
 800336e:	2b00      	cmp	r3, #0
 8003370:	d1cb      	bne.n	800330a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	9300      	str	r3, [sp, #0]
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	2200      	movs	r2, #0
 800337a:	2140      	movs	r1, #64	; 0x40
 800337c:	68f8      	ldr	r0, [r7, #12]
 800337e:	f000 fc84 	bl	8003c8a <UART_WaitOnFlagUntilTimeout>
 8003382:	4603      	mov	r3, r0
 8003384:	2b00      	cmp	r3, #0
 8003386:	d001      	beq.n	800338c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003388:	2303      	movs	r3, #3
 800338a:	e005      	b.n	8003398 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2220      	movs	r2, #32
 8003390:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003392:	2300      	movs	r3, #0
 8003394:	e000      	b.n	8003398 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003396:	2302      	movs	r3, #2
  }
}
 8003398:	4618      	mov	r0, r3
 800339a:	3720      	adds	r7, #32
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}

080033a0 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b08a      	sub	sp, #40	; 0x28
 80033a4:	af02      	add	r7, sp, #8
 80033a6:	60f8      	str	r0, [r7, #12]
 80033a8:	60b9      	str	r1, [r7, #8]
 80033aa:	603b      	str	r3, [r7, #0]
 80033ac:	4613      	mov	r3, r2
 80033ae:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033b4:	2b20      	cmp	r3, #32
 80033b6:	f040 80bf 	bne.w	8003538 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d002      	beq.n	80033c6 <HAL_UART_Receive+0x26>
 80033c0:	88fb      	ldrh	r3, [r7, #6]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d101      	bne.n	80033ca <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e0b7      	b.n	800353a <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d101      	bne.n	80033d8 <HAL_UART_Receive+0x38>
 80033d4:	2302      	movs	r3, #2
 80033d6:	e0b0      	b.n	800353a <HAL_UART_Receive+0x19a>
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2201      	movs	r2, #1
 80033dc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2200      	movs	r2, #0
 80033e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2222      	movs	r2, #34	; 0x22
 80033ec:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2200      	movs	r2, #0
 80033f2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80033f4:	f7fe f8f2 	bl	80015dc <HAL_GetTick>
 80033f8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	88fa      	ldrh	r2, [r7, #6]
 80033fe:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	88fa      	ldrh	r2, [r7, #6]
 8003406:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003412:	d10e      	bne.n	8003432 <HAL_UART_Receive+0x92>
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	691b      	ldr	r3, [r3, #16]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d105      	bne.n	8003428 <HAL_UART_Receive+0x88>
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003422:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003426:	e02d      	b.n	8003484 <HAL_UART_Receive+0xe4>
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	22ff      	movs	r2, #255	; 0xff
 800342c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003430:	e028      	b.n	8003484 <HAL_UART_Receive+0xe4>
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d10d      	bne.n	8003456 <HAL_UART_Receive+0xb6>
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	691b      	ldr	r3, [r3, #16]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d104      	bne.n	800344c <HAL_UART_Receive+0xac>
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	22ff      	movs	r2, #255	; 0xff
 8003446:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800344a:	e01b      	b.n	8003484 <HAL_UART_Receive+0xe4>
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	227f      	movs	r2, #127	; 0x7f
 8003450:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003454:	e016      	b.n	8003484 <HAL_UART_Receive+0xe4>
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800345e:	d10d      	bne.n	800347c <HAL_UART_Receive+0xdc>
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	691b      	ldr	r3, [r3, #16]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d104      	bne.n	8003472 <HAL_UART_Receive+0xd2>
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	227f      	movs	r2, #127	; 0x7f
 800346c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003470:	e008      	b.n	8003484 <HAL_UART_Receive+0xe4>
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	223f      	movs	r2, #63	; 0x3f
 8003476:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800347a:	e003      	b.n	8003484 <HAL_UART_Receive+0xe4>
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2200      	movs	r2, #0
 8003480:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800348a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003494:	d108      	bne.n	80034a8 <HAL_UART_Receive+0x108>
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	691b      	ldr	r3, [r3, #16]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d104      	bne.n	80034a8 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 800349e:	2300      	movs	r3, #0
 80034a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	61bb      	str	r3, [r7, #24]
 80034a6:	e003      	b.n	80034b0 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80034ac:	2300      	movs	r3, #0
 80034ae:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2200      	movs	r2, #0
 80034b4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80034b8:	e033      	b.n	8003522 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	9300      	str	r3, [sp, #0]
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	2200      	movs	r2, #0
 80034c2:	2120      	movs	r1, #32
 80034c4:	68f8      	ldr	r0, [r7, #12]
 80034c6:	f000 fbe0 	bl	8003c8a <UART_WaitOnFlagUntilTimeout>
 80034ca:	4603      	mov	r3, r0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d001      	beq.n	80034d4 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 80034d0:	2303      	movs	r3, #3
 80034d2:	e032      	b.n	800353a <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 80034d4:	69fb      	ldr	r3, [r7, #28]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d10c      	bne.n	80034f4 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80034e0:	b29a      	uxth	r2, r3
 80034e2:	8a7b      	ldrh	r3, [r7, #18]
 80034e4:	4013      	ands	r3, r2
 80034e6:	b29a      	uxth	r2, r3
 80034e8:	69bb      	ldr	r3, [r7, #24]
 80034ea:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80034ec:	69bb      	ldr	r3, [r7, #24]
 80034ee:	3302      	adds	r3, #2
 80034f0:	61bb      	str	r3, [r7, #24]
 80034f2:	e00d      	b.n	8003510 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80034fa:	b29b      	uxth	r3, r3
 80034fc:	b2da      	uxtb	r2, r3
 80034fe:	8a7b      	ldrh	r3, [r7, #18]
 8003500:	b2db      	uxtb	r3, r3
 8003502:	4013      	ands	r3, r2
 8003504:	b2da      	uxtb	r2, r3
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	3301      	adds	r3, #1
 800350e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003516:	b29b      	uxth	r3, r3
 8003518:	3b01      	subs	r3, #1
 800351a:	b29a      	uxth	r2, r3
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003528:	b29b      	uxth	r3, r3
 800352a:	2b00      	cmp	r3, #0
 800352c:	d1c5      	bne.n	80034ba <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2220      	movs	r2, #32
 8003532:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003534:	2300      	movs	r3, #0
 8003536:	e000      	b.n	800353a <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8003538:	2302      	movs	r3, #2
  }
}
 800353a:	4618      	mov	r0, r3
 800353c:	3720      	adds	r7, #32
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
	...

08003544 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003544:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003548:	b08a      	sub	sp, #40	; 0x28
 800354a:	af00      	add	r7, sp, #0
 800354c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800354e:	2300      	movs	r3, #0
 8003550:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	689a      	ldr	r2, [r3, #8]
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	691b      	ldr	r3, [r3, #16]
 800355c:	431a      	orrs	r2, r3
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	695b      	ldr	r3, [r3, #20]
 8003562:	431a      	orrs	r2, r3
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	69db      	ldr	r3, [r3, #28]
 8003568:	4313      	orrs	r3, r2
 800356a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	4ba4      	ldr	r3, [pc, #656]	; (8003804 <UART_SetConfig+0x2c0>)
 8003574:	4013      	ands	r3, r2
 8003576:	68fa      	ldr	r2, [r7, #12]
 8003578:	6812      	ldr	r2, [r2, #0]
 800357a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800357c:	430b      	orrs	r3, r1
 800357e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	68da      	ldr	r2, [r3, #12]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	430a      	orrs	r2, r1
 8003594:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	699b      	ldr	r3, [r3, #24]
 800359a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a99      	ldr	r2, [pc, #612]	; (8003808 <UART_SetConfig+0x2c4>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d004      	beq.n	80035b0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	6a1b      	ldr	r3, [r3, #32]
 80035aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035ac:	4313      	orrs	r3, r2
 80035ae:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035c0:	430a      	orrs	r2, r1
 80035c2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a90      	ldr	r2, [pc, #576]	; (800380c <UART_SetConfig+0x2c8>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d126      	bne.n	800361c <UART_SetConfig+0xd8>
 80035ce:	4b90      	ldr	r3, [pc, #576]	; (8003810 <UART_SetConfig+0x2cc>)
 80035d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035d4:	f003 0303 	and.w	r3, r3, #3
 80035d8:	2b03      	cmp	r3, #3
 80035da:	d81b      	bhi.n	8003614 <UART_SetConfig+0xd0>
 80035dc:	a201      	add	r2, pc, #4	; (adr r2, 80035e4 <UART_SetConfig+0xa0>)
 80035de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035e2:	bf00      	nop
 80035e4:	080035f5 	.word	0x080035f5
 80035e8:	08003605 	.word	0x08003605
 80035ec:	080035fd 	.word	0x080035fd
 80035f0:	0800360d 	.word	0x0800360d
 80035f4:	2301      	movs	r3, #1
 80035f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035fa:	e116      	b.n	800382a <UART_SetConfig+0x2e6>
 80035fc:	2302      	movs	r3, #2
 80035fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003602:	e112      	b.n	800382a <UART_SetConfig+0x2e6>
 8003604:	2304      	movs	r3, #4
 8003606:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800360a:	e10e      	b.n	800382a <UART_SetConfig+0x2e6>
 800360c:	2308      	movs	r3, #8
 800360e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003612:	e10a      	b.n	800382a <UART_SetConfig+0x2e6>
 8003614:	2310      	movs	r3, #16
 8003616:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800361a:	e106      	b.n	800382a <UART_SetConfig+0x2e6>
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a7c      	ldr	r2, [pc, #496]	; (8003814 <UART_SetConfig+0x2d0>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d138      	bne.n	8003698 <UART_SetConfig+0x154>
 8003626:	4b7a      	ldr	r3, [pc, #488]	; (8003810 <UART_SetConfig+0x2cc>)
 8003628:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800362c:	f003 030c 	and.w	r3, r3, #12
 8003630:	2b0c      	cmp	r3, #12
 8003632:	d82d      	bhi.n	8003690 <UART_SetConfig+0x14c>
 8003634:	a201      	add	r2, pc, #4	; (adr r2, 800363c <UART_SetConfig+0xf8>)
 8003636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800363a:	bf00      	nop
 800363c:	08003671 	.word	0x08003671
 8003640:	08003691 	.word	0x08003691
 8003644:	08003691 	.word	0x08003691
 8003648:	08003691 	.word	0x08003691
 800364c:	08003681 	.word	0x08003681
 8003650:	08003691 	.word	0x08003691
 8003654:	08003691 	.word	0x08003691
 8003658:	08003691 	.word	0x08003691
 800365c:	08003679 	.word	0x08003679
 8003660:	08003691 	.word	0x08003691
 8003664:	08003691 	.word	0x08003691
 8003668:	08003691 	.word	0x08003691
 800366c:	08003689 	.word	0x08003689
 8003670:	2300      	movs	r3, #0
 8003672:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003676:	e0d8      	b.n	800382a <UART_SetConfig+0x2e6>
 8003678:	2302      	movs	r3, #2
 800367a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800367e:	e0d4      	b.n	800382a <UART_SetConfig+0x2e6>
 8003680:	2304      	movs	r3, #4
 8003682:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003686:	e0d0      	b.n	800382a <UART_SetConfig+0x2e6>
 8003688:	2308      	movs	r3, #8
 800368a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800368e:	e0cc      	b.n	800382a <UART_SetConfig+0x2e6>
 8003690:	2310      	movs	r3, #16
 8003692:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003696:	e0c8      	b.n	800382a <UART_SetConfig+0x2e6>
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a5e      	ldr	r2, [pc, #376]	; (8003818 <UART_SetConfig+0x2d4>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d125      	bne.n	80036ee <UART_SetConfig+0x1aa>
 80036a2:	4b5b      	ldr	r3, [pc, #364]	; (8003810 <UART_SetConfig+0x2cc>)
 80036a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036a8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80036ac:	2b30      	cmp	r3, #48	; 0x30
 80036ae:	d016      	beq.n	80036de <UART_SetConfig+0x19a>
 80036b0:	2b30      	cmp	r3, #48	; 0x30
 80036b2:	d818      	bhi.n	80036e6 <UART_SetConfig+0x1a2>
 80036b4:	2b20      	cmp	r3, #32
 80036b6:	d00a      	beq.n	80036ce <UART_SetConfig+0x18a>
 80036b8:	2b20      	cmp	r3, #32
 80036ba:	d814      	bhi.n	80036e6 <UART_SetConfig+0x1a2>
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d002      	beq.n	80036c6 <UART_SetConfig+0x182>
 80036c0:	2b10      	cmp	r3, #16
 80036c2:	d008      	beq.n	80036d6 <UART_SetConfig+0x192>
 80036c4:	e00f      	b.n	80036e6 <UART_SetConfig+0x1a2>
 80036c6:	2300      	movs	r3, #0
 80036c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036cc:	e0ad      	b.n	800382a <UART_SetConfig+0x2e6>
 80036ce:	2302      	movs	r3, #2
 80036d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036d4:	e0a9      	b.n	800382a <UART_SetConfig+0x2e6>
 80036d6:	2304      	movs	r3, #4
 80036d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036dc:	e0a5      	b.n	800382a <UART_SetConfig+0x2e6>
 80036de:	2308      	movs	r3, #8
 80036e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036e4:	e0a1      	b.n	800382a <UART_SetConfig+0x2e6>
 80036e6:	2310      	movs	r3, #16
 80036e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036ec:	e09d      	b.n	800382a <UART_SetConfig+0x2e6>
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a4a      	ldr	r2, [pc, #296]	; (800381c <UART_SetConfig+0x2d8>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d125      	bne.n	8003744 <UART_SetConfig+0x200>
 80036f8:	4b45      	ldr	r3, [pc, #276]	; (8003810 <UART_SetConfig+0x2cc>)
 80036fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036fe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003702:	2bc0      	cmp	r3, #192	; 0xc0
 8003704:	d016      	beq.n	8003734 <UART_SetConfig+0x1f0>
 8003706:	2bc0      	cmp	r3, #192	; 0xc0
 8003708:	d818      	bhi.n	800373c <UART_SetConfig+0x1f8>
 800370a:	2b80      	cmp	r3, #128	; 0x80
 800370c:	d00a      	beq.n	8003724 <UART_SetConfig+0x1e0>
 800370e:	2b80      	cmp	r3, #128	; 0x80
 8003710:	d814      	bhi.n	800373c <UART_SetConfig+0x1f8>
 8003712:	2b00      	cmp	r3, #0
 8003714:	d002      	beq.n	800371c <UART_SetConfig+0x1d8>
 8003716:	2b40      	cmp	r3, #64	; 0x40
 8003718:	d008      	beq.n	800372c <UART_SetConfig+0x1e8>
 800371a:	e00f      	b.n	800373c <UART_SetConfig+0x1f8>
 800371c:	2300      	movs	r3, #0
 800371e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003722:	e082      	b.n	800382a <UART_SetConfig+0x2e6>
 8003724:	2302      	movs	r3, #2
 8003726:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800372a:	e07e      	b.n	800382a <UART_SetConfig+0x2e6>
 800372c:	2304      	movs	r3, #4
 800372e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003732:	e07a      	b.n	800382a <UART_SetConfig+0x2e6>
 8003734:	2308      	movs	r3, #8
 8003736:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800373a:	e076      	b.n	800382a <UART_SetConfig+0x2e6>
 800373c:	2310      	movs	r3, #16
 800373e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003742:	e072      	b.n	800382a <UART_SetConfig+0x2e6>
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a35      	ldr	r2, [pc, #212]	; (8003820 <UART_SetConfig+0x2dc>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d12a      	bne.n	80037a4 <UART_SetConfig+0x260>
 800374e:	4b30      	ldr	r3, [pc, #192]	; (8003810 <UART_SetConfig+0x2cc>)
 8003750:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003754:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003758:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800375c:	d01a      	beq.n	8003794 <UART_SetConfig+0x250>
 800375e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003762:	d81b      	bhi.n	800379c <UART_SetConfig+0x258>
 8003764:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003768:	d00c      	beq.n	8003784 <UART_SetConfig+0x240>
 800376a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800376e:	d815      	bhi.n	800379c <UART_SetConfig+0x258>
 8003770:	2b00      	cmp	r3, #0
 8003772:	d003      	beq.n	800377c <UART_SetConfig+0x238>
 8003774:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003778:	d008      	beq.n	800378c <UART_SetConfig+0x248>
 800377a:	e00f      	b.n	800379c <UART_SetConfig+0x258>
 800377c:	2300      	movs	r3, #0
 800377e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003782:	e052      	b.n	800382a <UART_SetConfig+0x2e6>
 8003784:	2302      	movs	r3, #2
 8003786:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800378a:	e04e      	b.n	800382a <UART_SetConfig+0x2e6>
 800378c:	2304      	movs	r3, #4
 800378e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003792:	e04a      	b.n	800382a <UART_SetConfig+0x2e6>
 8003794:	2308      	movs	r3, #8
 8003796:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800379a:	e046      	b.n	800382a <UART_SetConfig+0x2e6>
 800379c:	2310      	movs	r3, #16
 800379e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037a2:	e042      	b.n	800382a <UART_SetConfig+0x2e6>
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a17      	ldr	r2, [pc, #92]	; (8003808 <UART_SetConfig+0x2c4>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d13a      	bne.n	8003824 <UART_SetConfig+0x2e0>
 80037ae:	4b18      	ldr	r3, [pc, #96]	; (8003810 <UART_SetConfig+0x2cc>)
 80037b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037b4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80037b8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80037bc:	d01a      	beq.n	80037f4 <UART_SetConfig+0x2b0>
 80037be:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80037c2:	d81b      	bhi.n	80037fc <UART_SetConfig+0x2b8>
 80037c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037c8:	d00c      	beq.n	80037e4 <UART_SetConfig+0x2a0>
 80037ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037ce:	d815      	bhi.n	80037fc <UART_SetConfig+0x2b8>
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d003      	beq.n	80037dc <UART_SetConfig+0x298>
 80037d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037d8:	d008      	beq.n	80037ec <UART_SetConfig+0x2a8>
 80037da:	e00f      	b.n	80037fc <UART_SetConfig+0x2b8>
 80037dc:	2300      	movs	r3, #0
 80037de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037e2:	e022      	b.n	800382a <UART_SetConfig+0x2e6>
 80037e4:	2302      	movs	r3, #2
 80037e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037ea:	e01e      	b.n	800382a <UART_SetConfig+0x2e6>
 80037ec:	2304      	movs	r3, #4
 80037ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037f2:	e01a      	b.n	800382a <UART_SetConfig+0x2e6>
 80037f4:	2308      	movs	r3, #8
 80037f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037fa:	e016      	b.n	800382a <UART_SetConfig+0x2e6>
 80037fc:	2310      	movs	r3, #16
 80037fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003802:	e012      	b.n	800382a <UART_SetConfig+0x2e6>
 8003804:	efff69f3 	.word	0xefff69f3
 8003808:	40008000 	.word	0x40008000
 800380c:	40013800 	.word	0x40013800
 8003810:	40021000 	.word	0x40021000
 8003814:	40004400 	.word	0x40004400
 8003818:	40004800 	.word	0x40004800
 800381c:	40004c00 	.word	0x40004c00
 8003820:	40005000 	.word	0x40005000
 8003824:	2310      	movs	r3, #16
 8003826:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a9f      	ldr	r2, [pc, #636]	; (8003aac <UART_SetConfig+0x568>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d17a      	bne.n	800392a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003834:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003838:	2b08      	cmp	r3, #8
 800383a:	d824      	bhi.n	8003886 <UART_SetConfig+0x342>
 800383c:	a201      	add	r2, pc, #4	; (adr r2, 8003844 <UART_SetConfig+0x300>)
 800383e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003842:	bf00      	nop
 8003844:	08003869 	.word	0x08003869
 8003848:	08003887 	.word	0x08003887
 800384c:	08003871 	.word	0x08003871
 8003850:	08003887 	.word	0x08003887
 8003854:	08003877 	.word	0x08003877
 8003858:	08003887 	.word	0x08003887
 800385c:	08003887 	.word	0x08003887
 8003860:	08003887 	.word	0x08003887
 8003864:	0800387f 	.word	0x0800387f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003868:	f7fe ff62 	bl	8002730 <HAL_RCC_GetPCLK1Freq>
 800386c:	61f8      	str	r0, [r7, #28]
        break;
 800386e:	e010      	b.n	8003892 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003870:	4b8f      	ldr	r3, [pc, #572]	; (8003ab0 <UART_SetConfig+0x56c>)
 8003872:	61fb      	str	r3, [r7, #28]
        break;
 8003874:	e00d      	b.n	8003892 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003876:	f7fe fec3 	bl	8002600 <HAL_RCC_GetSysClockFreq>
 800387a:	61f8      	str	r0, [r7, #28]
        break;
 800387c:	e009      	b.n	8003892 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800387e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003882:	61fb      	str	r3, [r7, #28]
        break;
 8003884:	e005      	b.n	8003892 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003886:	2300      	movs	r3, #0
 8003888:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003890:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	2b00      	cmp	r3, #0
 8003896:	f000 80fb 	beq.w	8003a90 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	685a      	ldr	r2, [r3, #4]
 800389e:	4613      	mov	r3, r2
 80038a0:	005b      	lsls	r3, r3, #1
 80038a2:	4413      	add	r3, r2
 80038a4:	69fa      	ldr	r2, [r7, #28]
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d305      	bcc.n	80038b6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80038b0:	69fa      	ldr	r2, [r7, #28]
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d903      	bls.n	80038be <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80038bc:	e0e8      	b.n	8003a90 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	2200      	movs	r2, #0
 80038c2:	461c      	mov	r4, r3
 80038c4:	4615      	mov	r5, r2
 80038c6:	f04f 0200 	mov.w	r2, #0
 80038ca:	f04f 0300 	mov.w	r3, #0
 80038ce:	022b      	lsls	r3, r5, #8
 80038d0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80038d4:	0222      	lsls	r2, r4, #8
 80038d6:	68f9      	ldr	r1, [r7, #12]
 80038d8:	6849      	ldr	r1, [r1, #4]
 80038da:	0849      	lsrs	r1, r1, #1
 80038dc:	2000      	movs	r0, #0
 80038de:	4688      	mov	r8, r1
 80038e0:	4681      	mov	r9, r0
 80038e2:	eb12 0a08 	adds.w	sl, r2, r8
 80038e6:	eb43 0b09 	adc.w	fp, r3, r9
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	603b      	str	r3, [r7, #0]
 80038f2:	607a      	str	r2, [r7, #4]
 80038f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80038f8:	4650      	mov	r0, sl
 80038fa:	4659      	mov	r1, fp
 80038fc:	f7fd f9d4 	bl	8000ca8 <__aeabi_uldivmod>
 8003900:	4602      	mov	r2, r0
 8003902:	460b      	mov	r3, r1
 8003904:	4613      	mov	r3, r2
 8003906:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003908:	69bb      	ldr	r3, [r7, #24]
 800390a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800390e:	d308      	bcc.n	8003922 <UART_SetConfig+0x3de>
 8003910:	69bb      	ldr	r3, [r7, #24]
 8003912:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003916:	d204      	bcs.n	8003922 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	69ba      	ldr	r2, [r7, #24]
 800391e:	60da      	str	r2, [r3, #12]
 8003920:	e0b6      	b.n	8003a90 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003928:	e0b2      	b.n	8003a90 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	69db      	ldr	r3, [r3, #28]
 800392e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003932:	d15e      	bne.n	80039f2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003934:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003938:	2b08      	cmp	r3, #8
 800393a:	d828      	bhi.n	800398e <UART_SetConfig+0x44a>
 800393c:	a201      	add	r2, pc, #4	; (adr r2, 8003944 <UART_SetConfig+0x400>)
 800393e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003942:	bf00      	nop
 8003944:	08003969 	.word	0x08003969
 8003948:	08003971 	.word	0x08003971
 800394c:	08003979 	.word	0x08003979
 8003950:	0800398f 	.word	0x0800398f
 8003954:	0800397f 	.word	0x0800397f
 8003958:	0800398f 	.word	0x0800398f
 800395c:	0800398f 	.word	0x0800398f
 8003960:	0800398f 	.word	0x0800398f
 8003964:	08003987 	.word	0x08003987
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003968:	f7fe fee2 	bl	8002730 <HAL_RCC_GetPCLK1Freq>
 800396c:	61f8      	str	r0, [r7, #28]
        break;
 800396e:	e014      	b.n	800399a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003970:	f7fe fef4 	bl	800275c <HAL_RCC_GetPCLK2Freq>
 8003974:	61f8      	str	r0, [r7, #28]
        break;
 8003976:	e010      	b.n	800399a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003978:	4b4d      	ldr	r3, [pc, #308]	; (8003ab0 <UART_SetConfig+0x56c>)
 800397a:	61fb      	str	r3, [r7, #28]
        break;
 800397c:	e00d      	b.n	800399a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800397e:	f7fe fe3f 	bl	8002600 <HAL_RCC_GetSysClockFreq>
 8003982:	61f8      	str	r0, [r7, #28]
        break;
 8003984:	e009      	b.n	800399a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003986:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800398a:	61fb      	str	r3, [r7, #28]
        break;
 800398c:	e005      	b.n	800399a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800398e:	2300      	movs	r3, #0
 8003990:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003998:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d077      	beq.n	8003a90 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	005a      	lsls	r2, r3, #1
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	085b      	lsrs	r3, r3, #1
 80039aa:	441a      	add	r2, r3
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80039b4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039b6:	69bb      	ldr	r3, [r7, #24]
 80039b8:	2b0f      	cmp	r3, #15
 80039ba:	d916      	bls.n	80039ea <UART_SetConfig+0x4a6>
 80039bc:	69bb      	ldr	r3, [r7, #24]
 80039be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039c2:	d212      	bcs.n	80039ea <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80039c4:	69bb      	ldr	r3, [r7, #24]
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	f023 030f 	bic.w	r3, r3, #15
 80039cc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80039ce:	69bb      	ldr	r3, [r7, #24]
 80039d0:	085b      	lsrs	r3, r3, #1
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	f003 0307 	and.w	r3, r3, #7
 80039d8:	b29a      	uxth	r2, r3
 80039da:	8afb      	ldrh	r3, [r7, #22]
 80039dc:	4313      	orrs	r3, r2
 80039de:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	8afa      	ldrh	r2, [r7, #22]
 80039e6:	60da      	str	r2, [r3, #12]
 80039e8:	e052      	b.n	8003a90 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80039f0:	e04e      	b.n	8003a90 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80039f2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80039f6:	2b08      	cmp	r3, #8
 80039f8:	d827      	bhi.n	8003a4a <UART_SetConfig+0x506>
 80039fa:	a201      	add	r2, pc, #4	; (adr r2, 8003a00 <UART_SetConfig+0x4bc>)
 80039fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a00:	08003a25 	.word	0x08003a25
 8003a04:	08003a2d 	.word	0x08003a2d
 8003a08:	08003a35 	.word	0x08003a35
 8003a0c:	08003a4b 	.word	0x08003a4b
 8003a10:	08003a3b 	.word	0x08003a3b
 8003a14:	08003a4b 	.word	0x08003a4b
 8003a18:	08003a4b 	.word	0x08003a4b
 8003a1c:	08003a4b 	.word	0x08003a4b
 8003a20:	08003a43 	.word	0x08003a43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a24:	f7fe fe84 	bl	8002730 <HAL_RCC_GetPCLK1Freq>
 8003a28:	61f8      	str	r0, [r7, #28]
        break;
 8003a2a:	e014      	b.n	8003a56 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a2c:	f7fe fe96 	bl	800275c <HAL_RCC_GetPCLK2Freq>
 8003a30:	61f8      	str	r0, [r7, #28]
        break;
 8003a32:	e010      	b.n	8003a56 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a34:	4b1e      	ldr	r3, [pc, #120]	; (8003ab0 <UART_SetConfig+0x56c>)
 8003a36:	61fb      	str	r3, [r7, #28]
        break;
 8003a38:	e00d      	b.n	8003a56 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a3a:	f7fe fde1 	bl	8002600 <HAL_RCC_GetSysClockFreq>
 8003a3e:	61f8      	str	r0, [r7, #28]
        break;
 8003a40:	e009      	b.n	8003a56 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a46:	61fb      	str	r3, [r7, #28]
        break;
 8003a48:	e005      	b.n	8003a56 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003a54:	bf00      	nop
    }

    if (pclk != 0U)
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d019      	beq.n	8003a90 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	085a      	lsrs	r2, r3, #1
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	441a      	add	r2, r3
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a6e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a70:	69bb      	ldr	r3, [r7, #24]
 8003a72:	2b0f      	cmp	r3, #15
 8003a74:	d909      	bls.n	8003a8a <UART_SetConfig+0x546>
 8003a76:	69bb      	ldr	r3, [r7, #24]
 8003a78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a7c:	d205      	bcs.n	8003a8a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003a7e:	69bb      	ldr	r3, [r7, #24]
 8003a80:	b29a      	uxth	r2, r3
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	60da      	str	r2, [r3, #12]
 8003a88:	e002      	b.n	8003a90 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2200      	movs	r2, #0
 8003a94:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003a9c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3728      	adds	r7, #40	; 0x28
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003aaa:	bf00      	nop
 8003aac:	40008000 	.word	0x40008000
 8003ab0:	00f42400 	.word	0x00f42400

08003ab4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b083      	sub	sp, #12
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac0:	f003 0301 	and.w	r3, r3, #1
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d00a      	beq.n	8003ade <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	430a      	orrs	r2, r1
 8003adc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae2:	f003 0302 	and.w	r3, r3, #2
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d00a      	beq.n	8003b00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	430a      	orrs	r2, r1
 8003afe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b04:	f003 0304 	and.w	r3, r3, #4
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d00a      	beq.n	8003b22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	430a      	orrs	r2, r1
 8003b20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b26:	f003 0308 	and.w	r3, r3, #8
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d00a      	beq.n	8003b44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	430a      	orrs	r2, r1
 8003b42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b48:	f003 0310 	and.w	r3, r3, #16
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d00a      	beq.n	8003b66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	430a      	orrs	r2, r1
 8003b64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6a:	f003 0320 	and.w	r3, r3, #32
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d00a      	beq.n	8003b88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	430a      	orrs	r2, r1
 8003b86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d01a      	beq.n	8003bca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	430a      	orrs	r2, r1
 8003ba8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003bb2:	d10a      	bne.n	8003bca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	430a      	orrs	r2, r1
 8003bc8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d00a      	beq.n	8003bec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	430a      	orrs	r2, r1
 8003bea:	605a      	str	r2, [r3, #4]
  }
}
 8003bec:	bf00      	nop
 8003bee:	370c      	adds	r7, #12
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr

08003bf8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b086      	sub	sp, #24
 8003bfc:	af02      	add	r7, sp, #8
 8003bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2200      	movs	r2, #0
 8003c04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003c08:	f7fd fce8 	bl	80015dc <HAL_GetTick>
 8003c0c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0308 	and.w	r3, r3, #8
 8003c18:	2b08      	cmp	r3, #8
 8003c1a:	d10e      	bne.n	8003c3a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c1c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c20:	9300      	str	r3, [sp, #0]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2200      	movs	r2, #0
 8003c26:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f000 f82d 	bl	8003c8a <UART_WaitOnFlagUntilTimeout>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d001      	beq.n	8003c3a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c36:	2303      	movs	r3, #3
 8003c38:	e023      	b.n	8003c82 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 0304 	and.w	r3, r3, #4
 8003c44:	2b04      	cmp	r3, #4
 8003c46:	d10e      	bne.n	8003c66 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c48:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c4c:	9300      	str	r3, [sp, #0]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2200      	movs	r2, #0
 8003c52:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f000 f817 	bl	8003c8a <UART_WaitOnFlagUntilTimeout>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d001      	beq.n	8003c66 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	e00d      	b.n	8003c82 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2220      	movs	r2, #32
 8003c6a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2220      	movs	r2, #32
 8003c70:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003c80:	2300      	movs	r3, #0
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3710      	adds	r7, #16
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}

08003c8a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003c8a:	b580      	push	{r7, lr}
 8003c8c:	b09c      	sub	sp, #112	; 0x70
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	60f8      	str	r0, [r7, #12]
 8003c92:	60b9      	str	r1, [r7, #8]
 8003c94:	603b      	str	r3, [r7, #0]
 8003c96:	4613      	mov	r3, r2
 8003c98:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c9a:	e0a5      	b.n	8003de8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ca2:	f000 80a1 	beq.w	8003de8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ca6:	f7fd fc99 	bl	80015dc <HAL_GetTick>
 8003caa:	4602      	mov	r2, r0
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	1ad3      	subs	r3, r2, r3
 8003cb0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d302      	bcc.n	8003cbc <UART_WaitOnFlagUntilTimeout+0x32>
 8003cb6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d13e      	bne.n	8003d3a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cc4:	e853 3f00 	ldrex	r3, [r3]
 8003cc8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003cca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ccc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003cd0:	667b      	str	r3, [r7, #100]	; 0x64
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	461a      	mov	r2, r3
 8003cd8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003cda:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003cdc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cde:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003ce0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003ce2:	e841 2300 	strex	r3, r2, [r1]
 8003ce6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003ce8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d1e6      	bne.n	8003cbc <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	3308      	adds	r3, #8
 8003cf4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cf8:	e853 3f00 	ldrex	r3, [r3]
 8003cfc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d00:	f023 0301 	bic.w	r3, r3, #1
 8003d04:	663b      	str	r3, [r7, #96]	; 0x60
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	3308      	adds	r3, #8
 8003d0c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003d0e:	64ba      	str	r2, [r7, #72]	; 0x48
 8003d10:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d12:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003d14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d16:	e841 2300 	strex	r3, r2, [r1]
 8003d1a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003d1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d1e5      	bne.n	8003cee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2220      	movs	r2, #32
 8003d26:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2220      	movs	r2, #32
 8003d2c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2200      	movs	r2, #0
 8003d32:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003d36:	2303      	movs	r3, #3
 8003d38:	e067      	b.n	8003e0a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 0304 	and.w	r3, r3, #4
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d04f      	beq.n	8003de8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	69db      	ldr	r3, [r3, #28]
 8003d4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d56:	d147      	bne.n	8003de8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d60:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d6a:	e853 3f00 	ldrex	r3, [r3]
 8003d6e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d72:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003d76:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	461a      	mov	r2, r3
 8003d7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d80:	637b      	str	r3, [r7, #52]	; 0x34
 8003d82:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d84:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003d86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d88:	e841 2300 	strex	r3, r2, [r1]
 8003d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d1e6      	bne.n	8003d62 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	3308      	adds	r3, #8
 8003d9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	e853 3f00 	ldrex	r3, [r3]
 8003da2:	613b      	str	r3, [r7, #16]
   return(result);
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	f023 0301 	bic.w	r3, r3, #1
 8003daa:	66bb      	str	r3, [r7, #104]	; 0x68
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	3308      	adds	r3, #8
 8003db2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003db4:	623a      	str	r2, [r7, #32]
 8003db6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003db8:	69f9      	ldr	r1, [r7, #28]
 8003dba:	6a3a      	ldr	r2, [r7, #32]
 8003dbc:	e841 2300 	strex	r3, r2, [r1]
 8003dc0:	61bb      	str	r3, [r7, #24]
   return(result);
 8003dc2:	69bb      	ldr	r3, [r7, #24]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d1e5      	bne.n	8003d94 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2220      	movs	r2, #32
 8003dcc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2220      	movs	r2, #32
 8003dd2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2220      	movs	r2, #32
 8003dd8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2200      	movs	r2, #0
 8003de0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003de4:	2303      	movs	r3, #3
 8003de6:	e010      	b.n	8003e0a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	69da      	ldr	r2, [r3, #28]
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	4013      	ands	r3, r2
 8003df2:	68ba      	ldr	r2, [r7, #8]
 8003df4:	429a      	cmp	r2, r3
 8003df6:	bf0c      	ite	eq
 8003df8:	2301      	moveq	r3, #1
 8003dfa:	2300      	movne	r3, #0
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	461a      	mov	r2, r3
 8003e00:	79fb      	ldrb	r3, [r7, #7]
 8003e02:	429a      	cmp	r2, r3
 8003e04:	f43f af4a 	beq.w	8003c9c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e08:	2300      	movs	r3, #0
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3770      	adds	r7, #112	; 0x70
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
	...

08003e14 <__errno>:
 8003e14:	4b01      	ldr	r3, [pc, #4]	; (8003e1c <__errno+0x8>)
 8003e16:	6818      	ldr	r0, [r3, #0]
 8003e18:	4770      	bx	lr
 8003e1a:	bf00      	nop
 8003e1c:	2000000c 	.word	0x2000000c

08003e20 <__libc_init_array>:
 8003e20:	b570      	push	{r4, r5, r6, lr}
 8003e22:	4d0d      	ldr	r5, [pc, #52]	; (8003e58 <__libc_init_array+0x38>)
 8003e24:	4c0d      	ldr	r4, [pc, #52]	; (8003e5c <__libc_init_array+0x3c>)
 8003e26:	1b64      	subs	r4, r4, r5
 8003e28:	10a4      	asrs	r4, r4, #2
 8003e2a:	2600      	movs	r6, #0
 8003e2c:	42a6      	cmp	r6, r4
 8003e2e:	d109      	bne.n	8003e44 <__libc_init_array+0x24>
 8003e30:	4d0b      	ldr	r5, [pc, #44]	; (8003e60 <__libc_init_array+0x40>)
 8003e32:	4c0c      	ldr	r4, [pc, #48]	; (8003e64 <__libc_init_array+0x44>)
 8003e34:	f004 fc90 	bl	8008758 <_init>
 8003e38:	1b64      	subs	r4, r4, r5
 8003e3a:	10a4      	asrs	r4, r4, #2
 8003e3c:	2600      	movs	r6, #0
 8003e3e:	42a6      	cmp	r6, r4
 8003e40:	d105      	bne.n	8003e4e <__libc_init_array+0x2e>
 8003e42:	bd70      	pop	{r4, r5, r6, pc}
 8003e44:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e48:	4798      	blx	r3
 8003e4a:	3601      	adds	r6, #1
 8003e4c:	e7ee      	b.n	8003e2c <__libc_init_array+0xc>
 8003e4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e52:	4798      	blx	r3
 8003e54:	3601      	adds	r6, #1
 8003e56:	e7f2      	b.n	8003e3e <__libc_init_array+0x1e>
 8003e58:	08008c64 	.word	0x08008c64
 8003e5c:	08008c64 	.word	0x08008c64
 8003e60:	08008c64 	.word	0x08008c64
 8003e64:	08008c68 	.word	0x08008c68

08003e68 <memset>:
 8003e68:	4402      	add	r2, r0
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d100      	bne.n	8003e72 <memset+0xa>
 8003e70:	4770      	bx	lr
 8003e72:	f803 1b01 	strb.w	r1, [r3], #1
 8003e76:	e7f9      	b.n	8003e6c <memset+0x4>

08003e78 <__cvt>:
 8003e78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003e7c:	ec55 4b10 	vmov	r4, r5, d0
 8003e80:	2d00      	cmp	r5, #0
 8003e82:	460e      	mov	r6, r1
 8003e84:	4619      	mov	r1, r3
 8003e86:	462b      	mov	r3, r5
 8003e88:	bfbb      	ittet	lt
 8003e8a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003e8e:	461d      	movlt	r5, r3
 8003e90:	2300      	movge	r3, #0
 8003e92:	232d      	movlt	r3, #45	; 0x2d
 8003e94:	700b      	strb	r3, [r1, #0]
 8003e96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003e98:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003e9c:	4691      	mov	r9, r2
 8003e9e:	f023 0820 	bic.w	r8, r3, #32
 8003ea2:	bfbc      	itt	lt
 8003ea4:	4622      	movlt	r2, r4
 8003ea6:	4614      	movlt	r4, r2
 8003ea8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003eac:	d005      	beq.n	8003eba <__cvt+0x42>
 8003eae:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003eb2:	d100      	bne.n	8003eb6 <__cvt+0x3e>
 8003eb4:	3601      	adds	r6, #1
 8003eb6:	2102      	movs	r1, #2
 8003eb8:	e000      	b.n	8003ebc <__cvt+0x44>
 8003eba:	2103      	movs	r1, #3
 8003ebc:	ab03      	add	r3, sp, #12
 8003ebe:	9301      	str	r3, [sp, #4]
 8003ec0:	ab02      	add	r3, sp, #8
 8003ec2:	9300      	str	r3, [sp, #0]
 8003ec4:	ec45 4b10 	vmov	d0, r4, r5
 8003ec8:	4653      	mov	r3, sl
 8003eca:	4632      	mov	r2, r6
 8003ecc:	f001 fdac 	bl	8005a28 <_dtoa_r>
 8003ed0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003ed4:	4607      	mov	r7, r0
 8003ed6:	d102      	bne.n	8003ede <__cvt+0x66>
 8003ed8:	f019 0f01 	tst.w	r9, #1
 8003edc:	d022      	beq.n	8003f24 <__cvt+0xac>
 8003ede:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003ee2:	eb07 0906 	add.w	r9, r7, r6
 8003ee6:	d110      	bne.n	8003f0a <__cvt+0x92>
 8003ee8:	783b      	ldrb	r3, [r7, #0]
 8003eea:	2b30      	cmp	r3, #48	; 0x30
 8003eec:	d10a      	bne.n	8003f04 <__cvt+0x8c>
 8003eee:	2200      	movs	r2, #0
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	4620      	mov	r0, r4
 8003ef4:	4629      	mov	r1, r5
 8003ef6:	f7fc fdf7 	bl	8000ae8 <__aeabi_dcmpeq>
 8003efa:	b918      	cbnz	r0, 8003f04 <__cvt+0x8c>
 8003efc:	f1c6 0601 	rsb	r6, r6, #1
 8003f00:	f8ca 6000 	str.w	r6, [sl]
 8003f04:	f8da 3000 	ldr.w	r3, [sl]
 8003f08:	4499      	add	r9, r3
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	4620      	mov	r0, r4
 8003f10:	4629      	mov	r1, r5
 8003f12:	f7fc fde9 	bl	8000ae8 <__aeabi_dcmpeq>
 8003f16:	b108      	cbz	r0, 8003f1c <__cvt+0xa4>
 8003f18:	f8cd 900c 	str.w	r9, [sp, #12]
 8003f1c:	2230      	movs	r2, #48	; 0x30
 8003f1e:	9b03      	ldr	r3, [sp, #12]
 8003f20:	454b      	cmp	r3, r9
 8003f22:	d307      	bcc.n	8003f34 <__cvt+0xbc>
 8003f24:	9b03      	ldr	r3, [sp, #12]
 8003f26:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003f28:	1bdb      	subs	r3, r3, r7
 8003f2a:	4638      	mov	r0, r7
 8003f2c:	6013      	str	r3, [r2, #0]
 8003f2e:	b004      	add	sp, #16
 8003f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f34:	1c59      	adds	r1, r3, #1
 8003f36:	9103      	str	r1, [sp, #12]
 8003f38:	701a      	strb	r2, [r3, #0]
 8003f3a:	e7f0      	b.n	8003f1e <__cvt+0xa6>

08003f3c <__exponent>:
 8003f3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003f3e:	4603      	mov	r3, r0
 8003f40:	2900      	cmp	r1, #0
 8003f42:	bfb8      	it	lt
 8003f44:	4249      	neglt	r1, r1
 8003f46:	f803 2b02 	strb.w	r2, [r3], #2
 8003f4a:	bfb4      	ite	lt
 8003f4c:	222d      	movlt	r2, #45	; 0x2d
 8003f4e:	222b      	movge	r2, #43	; 0x2b
 8003f50:	2909      	cmp	r1, #9
 8003f52:	7042      	strb	r2, [r0, #1]
 8003f54:	dd2a      	ble.n	8003fac <__exponent+0x70>
 8003f56:	f10d 0407 	add.w	r4, sp, #7
 8003f5a:	46a4      	mov	ip, r4
 8003f5c:	270a      	movs	r7, #10
 8003f5e:	46a6      	mov	lr, r4
 8003f60:	460a      	mov	r2, r1
 8003f62:	fb91 f6f7 	sdiv	r6, r1, r7
 8003f66:	fb07 1516 	mls	r5, r7, r6, r1
 8003f6a:	3530      	adds	r5, #48	; 0x30
 8003f6c:	2a63      	cmp	r2, #99	; 0x63
 8003f6e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8003f72:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003f76:	4631      	mov	r1, r6
 8003f78:	dcf1      	bgt.n	8003f5e <__exponent+0x22>
 8003f7a:	3130      	adds	r1, #48	; 0x30
 8003f7c:	f1ae 0502 	sub.w	r5, lr, #2
 8003f80:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003f84:	1c44      	adds	r4, r0, #1
 8003f86:	4629      	mov	r1, r5
 8003f88:	4561      	cmp	r1, ip
 8003f8a:	d30a      	bcc.n	8003fa2 <__exponent+0x66>
 8003f8c:	f10d 0209 	add.w	r2, sp, #9
 8003f90:	eba2 020e 	sub.w	r2, r2, lr
 8003f94:	4565      	cmp	r5, ip
 8003f96:	bf88      	it	hi
 8003f98:	2200      	movhi	r2, #0
 8003f9a:	4413      	add	r3, r2
 8003f9c:	1a18      	subs	r0, r3, r0
 8003f9e:	b003      	add	sp, #12
 8003fa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003fa2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003fa6:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003faa:	e7ed      	b.n	8003f88 <__exponent+0x4c>
 8003fac:	2330      	movs	r3, #48	; 0x30
 8003fae:	3130      	adds	r1, #48	; 0x30
 8003fb0:	7083      	strb	r3, [r0, #2]
 8003fb2:	70c1      	strb	r1, [r0, #3]
 8003fb4:	1d03      	adds	r3, r0, #4
 8003fb6:	e7f1      	b.n	8003f9c <__exponent+0x60>

08003fb8 <_printf_float>:
 8003fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fbc:	ed2d 8b02 	vpush	{d8}
 8003fc0:	b08d      	sub	sp, #52	; 0x34
 8003fc2:	460c      	mov	r4, r1
 8003fc4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8003fc8:	4616      	mov	r6, r2
 8003fca:	461f      	mov	r7, r3
 8003fcc:	4605      	mov	r5, r0
 8003fce:	f002 fe89 	bl	8006ce4 <_localeconv_r>
 8003fd2:	f8d0 a000 	ldr.w	sl, [r0]
 8003fd6:	4650      	mov	r0, sl
 8003fd8:	f7fc f90a 	bl	80001f0 <strlen>
 8003fdc:	2300      	movs	r3, #0
 8003fde:	930a      	str	r3, [sp, #40]	; 0x28
 8003fe0:	6823      	ldr	r3, [r4, #0]
 8003fe2:	9305      	str	r3, [sp, #20]
 8003fe4:	f8d8 3000 	ldr.w	r3, [r8]
 8003fe8:	f894 b018 	ldrb.w	fp, [r4, #24]
 8003fec:	3307      	adds	r3, #7
 8003fee:	f023 0307 	bic.w	r3, r3, #7
 8003ff2:	f103 0208 	add.w	r2, r3, #8
 8003ff6:	f8c8 2000 	str.w	r2, [r8]
 8003ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ffe:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004002:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004006:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800400a:	9307      	str	r3, [sp, #28]
 800400c:	f8cd 8018 	str.w	r8, [sp, #24]
 8004010:	ee08 0a10 	vmov	s16, r0
 8004014:	4b9f      	ldr	r3, [pc, #636]	; (8004294 <_printf_float+0x2dc>)
 8004016:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800401a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800401e:	f7fc fd95 	bl	8000b4c <__aeabi_dcmpun>
 8004022:	bb88      	cbnz	r0, 8004088 <_printf_float+0xd0>
 8004024:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004028:	4b9a      	ldr	r3, [pc, #616]	; (8004294 <_printf_float+0x2dc>)
 800402a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800402e:	f7fc fd6f 	bl	8000b10 <__aeabi_dcmple>
 8004032:	bb48      	cbnz	r0, 8004088 <_printf_float+0xd0>
 8004034:	2200      	movs	r2, #0
 8004036:	2300      	movs	r3, #0
 8004038:	4640      	mov	r0, r8
 800403a:	4649      	mov	r1, r9
 800403c:	f7fc fd5e 	bl	8000afc <__aeabi_dcmplt>
 8004040:	b110      	cbz	r0, 8004048 <_printf_float+0x90>
 8004042:	232d      	movs	r3, #45	; 0x2d
 8004044:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004048:	4b93      	ldr	r3, [pc, #588]	; (8004298 <_printf_float+0x2e0>)
 800404a:	4894      	ldr	r0, [pc, #592]	; (800429c <_printf_float+0x2e4>)
 800404c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004050:	bf94      	ite	ls
 8004052:	4698      	movls	r8, r3
 8004054:	4680      	movhi	r8, r0
 8004056:	2303      	movs	r3, #3
 8004058:	6123      	str	r3, [r4, #16]
 800405a:	9b05      	ldr	r3, [sp, #20]
 800405c:	f023 0204 	bic.w	r2, r3, #4
 8004060:	6022      	str	r2, [r4, #0]
 8004062:	f04f 0900 	mov.w	r9, #0
 8004066:	9700      	str	r7, [sp, #0]
 8004068:	4633      	mov	r3, r6
 800406a:	aa0b      	add	r2, sp, #44	; 0x2c
 800406c:	4621      	mov	r1, r4
 800406e:	4628      	mov	r0, r5
 8004070:	f000 f9d8 	bl	8004424 <_printf_common>
 8004074:	3001      	adds	r0, #1
 8004076:	f040 8090 	bne.w	800419a <_printf_float+0x1e2>
 800407a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800407e:	b00d      	add	sp, #52	; 0x34
 8004080:	ecbd 8b02 	vpop	{d8}
 8004084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004088:	4642      	mov	r2, r8
 800408a:	464b      	mov	r3, r9
 800408c:	4640      	mov	r0, r8
 800408e:	4649      	mov	r1, r9
 8004090:	f7fc fd5c 	bl	8000b4c <__aeabi_dcmpun>
 8004094:	b140      	cbz	r0, 80040a8 <_printf_float+0xf0>
 8004096:	464b      	mov	r3, r9
 8004098:	2b00      	cmp	r3, #0
 800409a:	bfbc      	itt	lt
 800409c:	232d      	movlt	r3, #45	; 0x2d
 800409e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80040a2:	487f      	ldr	r0, [pc, #508]	; (80042a0 <_printf_float+0x2e8>)
 80040a4:	4b7f      	ldr	r3, [pc, #508]	; (80042a4 <_printf_float+0x2ec>)
 80040a6:	e7d1      	b.n	800404c <_printf_float+0x94>
 80040a8:	6863      	ldr	r3, [r4, #4]
 80040aa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80040ae:	9206      	str	r2, [sp, #24]
 80040b0:	1c5a      	adds	r2, r3, #1
 80040b2:	d13f      	bne.n	8004134 <_printf_float+0x17c>
 80040b4:	2306      	movs	r3, #6
 80040b6:	6063      	str	r3, [r4, #4]
 80040b8:	9b05      	ldr	r3, [sp, #20]
 80040ba:	6861      	ldr	r1, [r4, #4]
 80040bc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80040c0:	2300      	movs	r3, #0
 80040c2:	9303      	str	r3, [sp, #12]
 80040c4:	ab0a      	add	r3, sp, #40	; 0x28
 80040c6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80040ca:	ab09      	add	r3, sp, #36	; 0x24
 80040cc:	ec49 8b10 	vmov	d0, r8, r9
 80040d0:	9300      	str	r3, [sp, #0]
 80040d2:	6022      	str	r2, [r4, #0]
 80040d4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80040d8:	4628      	mov	r0, r5
 80040da:	f7ff fecd 	bl	8003e78 <__cvt>
 80040de:	9b06      	ldr	r3, [sp, #24]
 80040e0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80040e2:	2b47      	cmp	r3, #71	; 0x47
 80040e4:	4680      	mov	r8, r0
 80040e6:	d108      	bne.n	80040fa <_printf_float+0x142>
 80040e8:	1cc8      	adds	r0, r1, #3
 80040ea:	db02      	blt.n	80040f2 <_printf_float+0x13a>
 80040ec:	6863      	ldr	r3, [r4, #4]
 80040ee:	4299      	cmp	r1, r3
 80040f0:	dd41      	ble.n	8004176 <_printf_float+0x1be>
 80040f2:	f1ab 0b02 	sub.w	fp, fp, #2
 80040f6:	fa5f fb8b 	uxtb.w	fp, fp
 80040fa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80040fe:	d820      	bhi.n	8004142 <_printf_float+0x18a>
 8004100:	3901      	subs	r1, #1
 8004102:	465a      	mov	r2, fp
 8004104:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004108:	9109      	str	r1, [sp, #36]	; 0x24
 800410a:	f7ff ff17 	bl	8003f3c <__exponent>
 800410e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004110:	1813      	adds	r3, r2, r0
 8004112:	2a01      	cmp	r2, #1
 8004114:	4681      	mov	r9, r0
 8004116:	6123      	str	r3, [r4, #16]
 8004118:	dc02      	bgt.n	8004120 <_printf_float+0x168>
 800411a:	6822      	ldr	r2, [r4, #0]
 800411c:	07d2      	lsls	r2, r2, #31
 800411e:	d501      	bpl.n	8004124 <_printf_float+0x16c>
 8004120:	3301      	adds	r3, #1
 8004122:	6123      	str	r3, [r4, #16]
 8004124:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004128:	2b00      	cmp	r3, #0
 800412a:	d09c      	beq.n	8004066 <_printf_float+0xae>
 800412c:	232d      	movs	r3, #45	; 0x2d
 800412e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004132:	e798      	b.n	8004066 <_printf_float+0xae>
 8004134:	9a06      	ldr	r2, [sp, #24]
 8004136:	2a47      	cmp	r2, #71	; 0x47
 8004138:	d1be      	bne.n	80040b8 <_printf_float+0x100>
 800413a:	2b00      	cmp	r3, #0
 800413c:	d1bc      	bne.n	80040b8 <_printf_float+0x100>
 800413e:	2301      	movs	r3, #1
 8004140:	e7b9      	b.n	80040b6 <_printf_float+0xfe>
 8004142:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004146:	d118      	bne.n	800417a <_printf_float+0x1c2>
 8004148:	2900      	cmp	r1, #0
 800414a:	6863      	ldr	r3, [r4, #4]
 800414c:	dd0b      	ble.n	8004166 <_printf_float+0x1ae>
 800414e:	6121      	str	r1, [r4, #16]
 8004150:	b913      	cbnz	r3, 8004158 <_printf_float+0x1a0>
 8004152:	6822      	ldr	r2, [r4, #0]
 8004154:	07d0      	lsls	r0, r2, #31
 8004156:	d502      	bpl.n	800415e <_printf_float+0x1a6>
 8004158:	3301      	adds	r3, #1
 800415a:	440b      	add	r3, r1
 800415c:	6123      	str	r3, [r4, #16]
 800415e:	65a1      	str	r1, [r4, #88]	; 0x58
 8004160:	f04f 0900 	mov.w	r9, #0
 8004164:	e7de      	b.n	8004124 <_printf_float+0x16c>
 8004166:	b913      	cbnz	r3, 800416e <_printf_float+0x1b6>
 8004168:	6822      	ldr	r2, [r4, #0]
 800416a:	07d2      	lsls	r2, r2, #31
 800416c:	d501      	bpl.n	8004172 <_printf_float+0x1ba>
 800416e:	3302      	adds	r3, #2
 8004170:	e7f4      	b.n	800415c <_printf_float+0x1a4>
 8004172:	2301      	movs	r3, #1
 8004174:	e7f2      	b.n	800415c <_printf_float+0x1a4>
 8004176:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800417a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800417c:	4299      	cmp	r1, r3
 800417e:	db05      	blt.n	800418c <_printf_float+0x1d4>
 8004180:	6823      	ldr	r3, [r4, #0]
 8004182:	6121      	str	r1, [r4, #16]
 8004184:	07d8      	lsls	r0, r3, #31
 8004186:	d5ea      	bpl.n	800415e <_printf_float+0x1a6>
 8004188:	1c4b      	adds	r3, r1, #1
 800418a:	e7e7      	b.n	800415c <_printf_float+0x1a4>
 800418c:	2900      	cmp	r1, #0
 800418e:	bfd4      	ite	le
 8004190:	f1c1 0202 	rsble	r2, r1, #2
 8004194:	2201      	movgt	r2, #1
 8004196:	4413      	add	r3, r2
 8004198:	e7e0      	b.n	800415c <_printf_float+0x1a4>
 800419a:	6823      	ldr	r3, [r4, #0]
 800419c:	055a      	lsls	r2, r3, #21
 800419e:	d407      	bmi.n	80041b0 <_printf_float+0x1f8>
 80041a0:	6923      	ldr	r3, [r4, #16]
 80041a2:	4642      	mov	r2, r8
 80041a4:	4631      	mov	r1, r6
 80041a6:	4628      	mov	r0, r5
 80041a8:	47b8      	blx	r7
 80041aa:	3001      	adds	r0, #1
 80041ac:	d12c      	bne.n	8004208 <_printf_float+0x250>
 80041ae:	e764      	b.n	800407a <_printf_float+0xc2>
 80041b0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80041b4:	f240 80e0 	bls.w	8004378 <_printf_float+0x3c0>
 80041b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80041bc:	2200      	movs	r2, #0
 80041be:	2300      	movs	r3, #0
 80041c0:	f7fc fc92 	bl	8000ae8 <__aeabi_dcmpeq>
 80041c4:	2800      	cmp	r0, #0
 80041c6:	d034      	beq.n	8004232 <_printf_float+0x27a>
 80041c8:	4a37      	ldr	r2, [pc, #220]	; (80042a8 <_printf_float+0x2f0>)
 80041ca:	2301      	movs	r3, #1
 80041cc:	4631      	mov	r1, r6
 80041ce:	4628      	mov	r0, r5
 80041d0:	47b8      	blx	r7
 80041d2:	3001      	adds	r0, #1
 80041d4:	f43f af51 	beq.w	800407a <_printf_float+0xc2>
 80041d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80041dc:	429a      	cmp	r2, r3
 80041de:	db02      	blt.n	80041e6 <_printf_float+0x22e>
 80041e0:	6823      	ldr	r3, [r4, #0]
 80041e2:	07d8      	lsls	r0, r3, #31
 80041e4:	d510      	bpl.n	8004208 <_printf_float+0x250>
 80041e6:	ee18 3a10 	vmov	r3, s16
 80041ea:	4652      	mov	r2, sl
 80041ec:	4631      	mov	r1, r6
 80041ee:	4628      	mov	r0, r5
 80041f0:	47b8      	blx	r7
 80041f2:	3001      	adds	r0, #1
 80041f4:	f43f af41 	beq.w	800407a <_printf_float+0xc2>
 80041f8:	f04f 0800 	mov.w	r8, #0
 80041fc:	f104 091a 	add.w	r9, r4, #26
 8004200:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004202:	3b01      	subs	r3, #1
 8004204:	4543      	cmp	r3, r8
 8004206:	dc09      	bgt.n	800421c <_printf_float+0x264>
 8004208:	6823      	ldr	r3, [r4, #0]
 800420a:	079b      	lsls	r3, r3, #30
 800420c:	f100 8105 	bmi.w	800441a <_printf_float+0x462>
 8004210:	68e0      	ldr	r0, [r4, #12]
 8004212:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004214:	4298      	cmp	r0, r3
 8004216:	bfb8      	it	lt
 8004218:	4618      	movlt	r0, r3
 800421a:	e730      	b.n	800407e <_printf_float+0xc6>
 800421c:	2301      	movs	r3, #1
 800421e:	464a      	mov	r2, r9
 8004220:	4631      	mov	r1, r6
 8004222:	4628      	mov	r0, r5
 8004224:	47b8      	blx	r7
 8004226:	3001      	adds	r0, #1
 8004228:	f43f af27 	beq.w	800407a <_printf_float+0xc2>
 800422c:	f108 0801 	add.w	r8, r8, #1
 8004230:	e7e6      	b.n	8004200 <_printf_float+0x248>
 8004232:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004234:	2b00      	cmp	r3, #0
 8004236:	dc39      	bgt.n	80042ac <_printf_float+0x2f4>
 8004238:	4a1b      	ldr	r2, [pc, #108]	; (80042a8 <_printf_float+0x2f0>)
 800423a:	2301      	movs	r3, #1
 800423c:	4631      	mov	r1, r6
 800423e:	4628      	mov	r0, r5
 8004240:	47b8      	blx	r7
 8004242:	3001      	adds	r0, #1
 8004244:	f43f af19 	beq.w	800407a <_printf_float+0xc2>
 8004248:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800424c:	4313      	orrs	r3, r2
 800424e:	d102      	bne.n	8004256 <_printf_float+0x29e>
 8004250:	6823      	ldr	r3, [r4, #0]
 8004252:	07d9      	lsls	r1, r3, #31
 8004254:	d5d8      	bpl.n	8004208 <_printf_float+0x250>
 8004256:	ee18 3a10 	vmov	r3, s16
 800425a:	4652      	mov	r2, sl
 800425c:	4631      	mov	r1, r6
 800425e:	4628      	mov	r0, r5
 8004260:	47b8      	blx	r7
 8004262:	3001      	adds	r0, #1
 8004264:	f43f af09 	beq.w	800407a <_printf_float+0xc2>
 8004268:	f04f 0900 	mov.w	r9, #0
 800426c:	f104 0a1a 	add.w	sl, r4, #26
 8004270:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004272:	425b      	negs	r3, r3
 8004274:	454b      	cmp	r3, r9
 8004276:	dc01      	bgt.n	800427c <_printf_float+0x2c4>
 8004278:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800427a:	e792      	b.n	80041a2 <_printf_float+0x1ea>
 800427c:	2301      	movs	r3, #1
 800427e:	4652      	mov	r2, sl
 8004280:	4631      	mov	r1, r6
 8004282:	4628      	mov	r0, r5
 8004284:	47b8      	blx	r7
 8004286:	3001      	adds	r0, #1
 8004288:	f43f aef7 	beq.w	800407a <_printf_float+0xc2>
 800428c:	f109 0901 	add.w	r9, r9, #1
 8004290:	e7ee      	b.n	8004270 <_printf_float+0x2b8>
 8004292:	bf00      	nop
 8004294:	7fefffff 	.word	0x7fefffff
 8004298:	080087bc 	.word	0x080087bc
 800429c:	080087c0 	.word	0x080087c0
 80042a0:	080087c8 	.word	0x080087c8
 80042a4:	080087c4 	.word	0x080087c4
 80042a8:	080087cc 	.word	0x080087cc
 80042ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80042ae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80042b0:	429a      	cmp	r2, r3
 80042b2:	bfa8      	it	ge
 80042b4:	461a      	movge	r2, r3
 80042b6:	2a00      	cmp	r2, #0
 80042b8:	4691      	mov	r9, r2
 80042ba:	dc37      	bgt.n	800432c <_printf_float+0x374>
 80042bc:	f04f 0b00 	mov.w	fp, #0
 80042c0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80042c4:	f104 021a 	add.w	r2, r4, #26
 80042c8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80042ca:	9305      	str	r3, [sp, #20]
 80042cc:	eba3 0309 	sub.w	r3, r3, r9
 80042d0:	455b      	cmp	r3, fp
 80042d2:	dc33      	bgt.n	800433c <_printf_float+0x384>
 80042d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80042d8:	429a      	cmp	r2, r3
 80042da:	db3b      	blt.n	8004354 <_printf_float+0x39c>
 80042dc:	6823      	ldr	r3, [r4, #0]
 80042de:	07da      	lsls	r2, r3, #31
 80042e0:	d438      	bmi.n	8004354 <_printf_float+0x39c>
 80042e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80042e4:	9a05      	ldr	r2, [sp, #20]
 80042e6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80042e8:	1a9a      	subs	r2, r3, r2
 80042ea:	eba3 0901 	sub.w	r9, r3, r1
 80042ee:	4591      	cmp	r9, r2
 80042f0:	bfa8      	it	ge
 80042f2:	4691      	movge	r9, r2
 80042f4:	f1b9 0f00 	cmp.w	r9, #0
 80042f8:	dc35      	bgt.n	8004366 <_printf_float+0x3ae>
 80042fa:	f04f 0800 	mov.w	r8, #0
 80042fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004302:	f104 0a1a 	add.w	sl, r4, #26
 8004306:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800430a:	1a9b      	subs	r3, r3, r2
 800430c:	eba3 0309 	sub.w	r3, r3, r9
 8004310:	4543      	cmp	r3, r8
 8004312:	f77f af79 	ble.w	8004208 <_printf_float+0x250>
 8004316:	2301      	movs	r3, #1
 8004318:	4652      	mov	r2, sl
 800431a:	4631      	mov	r1, r6
 800431c:	4628      	mov	r0, r5
 800431e:	47b8      	blx	r7
 8004320:	3001      	adds	r0, #1
 8004322:	f43f aeaa 	beq.w	800407a <_printf_float+0xc2>
 8004326:	f108 0801 	add.w	r8, r8, #1
 800432a:	e7ec      	b.n	8004306 <_printf_float+0x34e>
 800432c:	4613      	mov	r3, r2
 800432e:	4631      	mov	r1, r6
 8004330:	4642      	mov	r2, r8
 8004332:	4628      	mov	r0, r5
 8004334:	47b8      	blx	r7
 8004336:	3001      	adds	r0, #1
 8004338:	d1c0      	bne.n	80042bc <_printf_float+0x304>
 800433a:	e69e      	b.n	800407a <_printf_float+0xc2>
 800433c:	2301      	movs	r3, #1
 800433e:	4631      	mov	r1, r6
 8004340:	4628      	mov	r0, r5
 8004342:	9205      	str	r2, [sp, #20]
 8004344:	47b8      	blx	r7
 8004346:	3001      	adds	r0, #1
 8004348:	f43f ae97 	beq.w	800407a <_printf_float+0xc2>
 800434c:	9a05      	ldr	r2, [sp, #20]
 800434e:	f10b 0b01 	add.w	fp, fp, #1
 8004352:	e7b9      	b.n	80042c8 <_printf_float+0x310>
 8004354:	ee18 3a10 	vmov	r3, s16
 8004358:	4652      	mov	r2, sl
 800435a:	4631      	mov	r1, r6
 800435c:	4628      	mov	r0, r5
 800435e:	47b8      	blx	r7
 8004360:	3001      	adds	r0, #1
 8004362:	d1be      	bne.n	80042e2 <_printf_float+0x32a>
 8004364:	e689      	b.n	800407a <_printf_float+0xc2>
 8004366:	9a05      	ldr	r2, [sp, #20]
 8004368:	464b      	mov	r3, r9
 800436a:	4442      	add	r2, r8
 800436c:	4631      	mov	r1, r6
 800436e:	4628      	mov	r0, r5
 8004370:	47b8      	blx	r7
 8004372:	3001      	adds	r0, #1
 8004374:	d1c1      	bne.n	80042fa <_printf_float+0x342>
 8004376:	e680      	b.n	800407a <_printf_float+0xc2>
 8004378:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800437a:	2a01      	cmp	r2, #1
 800437c:	dc01      	bgt.n	8004382 <_printf_float+0x3ca>
 800437e:	07db      	lsls	r3, r3, #31
 8004380:	d538      	bpl.n	80043f4 <_printf_float+0x43c>
 8004382:	2301      	movs	r3, #1
 8004384:	4642      	mov	r2, r8
 8004386:	4631      	mov	r1, r6
 8004388:	4628      	mov	r0, r5
 800438a:	47b8      	blx	r7
 800438c:	3001      	adds	r0, #1
 800438e:	f43f ae74 	beq.w	800407a <_printf_float+0xc2>
 8004392:	ee18 3a10 	vmov	r3, s16
 8004396:	4652      	mov	r2, sl
 8004398:	4631      	mov	r1, r6
 800439a:	4628      	mov	r0, r5
 800439c:	47b8      	blx	r7
 800439e:	3001      	adds	r0, #1
 80043a0:	f43f ae6b 	beq.w	800407a <_printf_float+0xc2>
 80043a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80043a8:	2200      	movs	r2, #0
 80043aa:	2300      	movs	r3, #0
 80043ac:	f7fc fb9c 	bl	8000ae8 <__aeabi_dcmpeq>
 80043b0:	b9d8      	cbnz	r0, 80043ea <_printf_float+0x432>
 80043b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80043b4:	f108 0201 	add.w	r2, r8, #1
 80043b8:	3b01      	subs	r3, #1
 80043ba:	4631      	mov	r1, r6
 80043bc:	4628      	mov	r0, r5
 80043be:	47b8      	blx	r7
 80043c0:	3001      	adds	r0, #1
 80043c2:	d10e      	bne.n	80043e2 <_printf_float+0x42a>
 80043c4:	e659      	b.n	800407a <_printf_float+0xc2>
 80043c6:	2301      	movs	r3, #1
 80043c8:	4652      	mov	r2, sl
 80043ca:	4631      	mov	r1, r6
 80043cc:	4628      	mov	r0, r5
 80043ce:	47b8      	blx	r7
 80043d0:	3001      	adds	r0, #1
 80043d2:	f43f ae52 	beq.w	800407a <_printf_float+0xc2>
 80043d6:	f108 0801 	add.w	r8, r8, #1
 80043da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80043dc:	3b01      	subs	r3, #1
 80043de:	4543      	cmp	r3, r8
 80043e0:	dcf1      	bgt.n	80043c6 <_printf_float+0x40e>
 80043e2:	464b      	mov	r3, r9
 80043e4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80043e8:	e6dc      	b.n	80041a4 <_printf_float+0x1ec>
 80043ea:	f04f 0800 	mov.w	r8, #0
 80043ee:	f104 0a1a 	add.w	sl, r4, #26
 80043f2:	e7f2      	b.n	80043da <_printf_float+0x422>
 80043f4:	2301      	movs	r3, #1
 80043f6:	4642      	mov	r2, r8
 80043f8:	e7df      	b.n	80043ba <_printf_float+0x402>
 80043fa:	2301      	movs	r3, #1
 80043fc:	464a      	mov	r2, r9
 80043fe:	4631      	mov	r1, r6
 8004400:	4628      	mov	r0, r5
 8004402:	47b8      	blx	r7
 8004404:	3001      	adds	r0, #1
 8004406:	f43f ae38 	beq.w	800407a <_printf_float+0xc2>
 800440a:	f108 0801 	add.w	r8, r8, #1
 800440e:	68e3      	ldr	r3, [r4, #12]
 8004410:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004412:	1a5b      	subs	r3, r3, r1
 8004414:	4543      	cmp	r3, r8
 8004416:	dcf0      	bgt.n	80043fa <_printf_float+0x442>
 8004418:	e6fa      	b.n	8004210 <_printf_float+0x258>
 800441a:	f04f 0800 	mov.w	r8, #0
 800441e:	f104 0919 	add.w	r9, r4, #25
 8004422:	e7f4      	b.n	800440e <_printf_float+0x456>

08004424 <_printf_common>:
 8004424:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004428:	4616      	mov	r6, r2
 800442a:	4699      	mov	r9, r3
 800442c:	688a      	ldr	r2, [r1, #8]
 800442e:	690b      	ldr	r3, [r1, #16]
 8004430:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004434:	4293      	cmp	r3, r2
 8004436:	bfb8      	it	lt
 8004438:	4613      	movlt	r3, r2
 800443a:	6033      	str	r3, [r6, #0]
 800443c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004440:	4607      	mov	r7, r0
 8004442:	460c      	mov	r4, r1
 8004444:	b10a      	cbz	r2, 800444a <_printf_common+0x26>
 8004446:	3301      	adds	r3, #1
 8004448:	6033      	str	r3, [r6, #0]
 800444a:	6823      	ldr	r3, [r4, #0]
 800444c:	0699      	lsls	r1, r3, #26
 800444e:	bf42      	ittt	mi
 8004450:	6833      	ldrmi	r3, [r6, #0]
 8004452:	3302      	addmi	r3, #2
 8004454:	6033      	strmi	r3, [r6, #0]
 8004456:	6825      	ldr	r5, [r4, #0]
 8004458:	f015 0506 	ands.w	r5, r5, #6
 800445c:	d106      	bne.n	800446c <_printf_common+0x48>
 800445e:	f104 0a19 	add.w	sl, r4, #25
 8004462:	68e3      	ldr	r3, [r4, #12]
 8004464:	6832      	ldr	r2, [r6, #0]
 8004466:	1a9b      	subs	r3, r3, r2
 8004468:	42ab      	cmp	r3, r5
 800446a:	dc26      	bgt.n	80044ba <_printf_common+0x96>
 800446c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004470:	1e13      	subs	r3, r2, #0
 8004472:	6822      	ldr	r2, [r4, #0]
 8004474:	bf18      	it	ne
 8004476:	2301      	movne	r3, #1
 8004478:	0692      	lsls	r2, r2, #26
 800447a:	d42b      	bmi.n	80044d4 <_printf_common+0xb0>
 800447c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004480:	4649      	mov	r1, r9
 8004482:	4638      	mov	r0, r7
 8004484:	47c0      	blx	r8
 8004486:	3001      	adds	r0, #1
 8004488:	d01e      	beq.n	80044c8 <_printf_common+0xa4>
 800448a:	6823      	ldr	r3, [r4, #0]
 800448c:	68e5      	ldr	r5, [r4, #12]
 800448e:	6832      	ldr	r2, [r6, #0]
 8004490:	f003 0306 	and.w	r3, r3, #6
 8004494:	2b04      	cmp	r3, #4
 8004496:	bf08      	it	eq
 8004498:	1aad      	subeq	r5, r5, r2
 800449a:	68a3      	ldr	r3, [r4, #8]
 800449c:	6922      	ldr	r2, [r4, #16]
 800449e:	bf0c      	ite	eq
 80044a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80044a4:	2500      	movne	r5, #0
 80044a6:	4293      	cmp	r3, r2
 80044a8:	bfc4      	itt	gt
 80044aa:	1a9b      	subgt	r3, r3, r2
 80044ac:	18ed      	addgt	r5, r5, r3
 80044ae:	2600      	movs	r6, #0
 80044b0:	341a      	adds	r4, #26
 80044b2:	42b5      	cmp	r5, r6
 80044b4:	d11a      	bne.n	80044ec <_printf_common+0xc8>
 80044b6:	2000      	movs	r0, #0
 80044b8:	e008      	b.n	80044cc <_printf_common+0xa8>
 80044ba:	2301      	movs	r3, #1
 80044bc:	4652      	mov	r2, sl
 80044be:	4649      	mov	r1, r9
 80044c0:	4638      	mov	r0, r7
 80044c2:	47c0      	blx	r8
 80044c4:	3001      	adds	r0, #1
 80044c6:	d103      	bne.n	80044d0 <_printf_common+0xac>
 80044c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80044cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044d0:	3501      	adds	r5, #1
 80044d2:	e7c6      	b.n	8004462 <_printf_common+0x3e>
 80044d4:	18e1      	adds	r1, r4, r3
 80044d6:	1c5a      	adds	r2, r3, #1
 80044d8:	2030      	movs	r0, #48	; 0x30
 80044da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80044de:	4422      	add	r2, r4
 80044e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80044e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80044e8:	3302      	adds	r3, #2
 80044ea:	e7c7      	b.n	800447c <_printf_common+0x58>
 80044ec:	2301      	movs	r3, #1
 80044ee:	4622      	mov	r2, r4
 80044f0:	4649      	mov	r1, r9
 80044f2:	4638      	mov	r0, r7
 80044f4:	47c0      	blx	r8
 80044f6:	3001      	adds	r0, #1
 80044f8:	d0e6      	beq.n	80044c8 <_printf_common+0xa4>
 80044fa:	3601      	adds	r6, #1
 80044fc:	e7d9      	b.n	80044b2 <_printf_common+0x8e>
	...

08004500 <_printf_i>:
 8004500:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004504:	7e0f      	ldrb	r7, [r1, #24]
 8004506:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004508:	2f78      	cmp	r7, #120	; 0x78
 800450a:	4691      	mov	r9, r2
 800450c:	4680      	mov	r8, r0
 800450e:	460c      	mov	r4, r1
 8004510:	469a      	mov	sl, r3
 8004512:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004516:	d807      	bhi.n	8004528 <_printf_i+0x28>
 8004518:	2f62      	cmp	r7, #98	; 0x62
 800451a:	d80a      	bhi.n	8004532 <_printf_i+0x32>
 800451c:	2f00      	cmp	r7, #0
 800451e:	f000 80d8 	beq.w	80046d2 <_printf_i+0x1d2>
 8004522:	2f58      	cmp	r7, #88	; 0x58
 8004524:	f000 80a3 	beq.w	800466e <_printf_i+0x16e>
 8004528:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800452c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004530:	e03a      	b.n	80045a8 <_printf_i+0xa8>
 8004532:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004536:	2b15      	cmp	r3, #21
 8004538:	d8f6      	bhi.n	8004528 <_printf_i+0x28>
 800453a:	a101      	add	r1, pc, #4	; (adr r1, 8004540 <_printf_i+0x40>)
 800453c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004540:	08004599 	.word	0x08004599
 8004544:	080045ad 	.word	0x080045ad
 8004548:	08004529 	.word	0x08004529
 800454c:	08004529 	.word	0x08004529
 8004550:	08004529 	.word	0x08004529
 8004554:	08004529 	.word	0x08004529
 8004558:	080045ad 	.word	0x080045ad
 800455c:	08004529 	.word	0x08004529
 8004560:	08004529 	.word	0x08004529
 8004564:	08004529 	.word	0x08004529
 8004568:	08004529 	.word	0x08004529
 800456c:	080046b9 	.word	0x080046b9
 8004570:	080045dd 	.word	0x080045dd
 8004574:	0800469b 	.word	0x0800469b
 8004578:	08004529 	.word	0x08004529
 800457c:	08004529 	.word	0x08004529
 8004580:	080046db 	.word	0x080046db
 8004584:	08004529 	.word	0x08004529
 8004588:	080045dd 	.word	0x080045dd
 800458c:	08004529 	.word	0x08004529
 8004590:	08004529 	.word	0x08004529
 8004594:	080046a3 	.word	0x080046a3
 8004598:	682b      	ldr	r3, [r5, #0]
 800459a:	1d1a      	adds	r2, r3, #4
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	602a      	str	r2, [r5, #0]
 80045a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80045a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80045a8:	2301      	movs	r3, #1
 80045aa:	e0a3      	b.n	80046f4 <_printf_i+0x1f4>
 80045ac:	6820      	ldr	r0, [r4, #0]
 80045ae:	6829      	ldr	r1, [r5, #0]
 80045b0:	0606      	lsls	r6, r0, #24
 80045b2:	f101 0304 	add.w	r3, r1, #4
 80045b6:	d50a      	bpl.n	80045ce <_printf_i+0xce>
 80045b8:	680e      	ldr	r6, [r1, #0]
 80045ba:	602b      	str	r3, [r5, #0]
 80045bc:	2e00      	cmp	r6, #0
 80045be:	da03      	bge.n	80045c8 <_printf_i+0xc8>
 80045c0:	232d      	movs	r3, #45	; 0x2d
 80045c2:	4276      	negs	r6, r6
 80045c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045c8:	485e      	ldr	r0, [pc, #376]	; (8004744 <_printf_i+0x244>)
 80045ca:	230a      	movs	r3, #10
 80045cc:	e019      	b.n	8004602 <_printf_i+0x102>
 80045ce:	680e      	ldr	r6, [r1, #0]
 80045d0:	602b      	str	r3, [r5, #0]
 80045d2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80045d6:	bf18      	it	ne
 80045d8:	b236      	sxthne	r6, r6
 80045da:	e7ef      	b.n	80045bc <_printf_i+0xbc>
 80045dc:	682b      	ldr	r3, [r5, #0]
 80045de:	6820      	ldr	r0, [r4, #0]
 80045e0:	1d19      	adds	r1, r3, #4
 80045e2:	6029      	str	r1, [r5, #0]
 80045e4:	0601      	lsls	r1, r0, #24
 80045e6:	d501      	bpl.n	80045ec <_printf_i+0xec>
 80045e8:	681e      	ldr	r6, [r3, #0]
 80045ea:	e002      	b.n	80045f2 <_printf_i+0xf2>
 80045ec:	0646      	lsls	r6, r0, #25
 80045ee:	d5fb      	bpl.n	80045e8 <_printf_i+0xe8>
 80045f0:	881e      	ldrh	r6, [r3, #0]
 80045f2:	4854      	ldr	r0, [pc, #336]	; (8004744 <_printf_i+0x244>)
 80045f4:	2f6f      	cmp	r7, #111	; 0x6f
 80045f6:	bf0c      	ite	eq
 80045f8:	2308      	moveq	r3, #8
 80045fa:	230a      	movne	r3, #10
 80045fc:	2100      	movs	r1, #0
 80045fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004602:	6865      	ldr	r5, [r4, #4]
 8004604:	60a5      	str	r5, [r4, #8]
 8004606:	2d00      	cmp	r5, #0
 8004608:	bfa2      	ittt	ge
 800460a:	6821      	ldrge	r1, [r4, #0]
 800460c:	f021 0104 	bicge.w	r1, r1, #4
 8004610:	6021      	strge	r1, [r4, #0]
 8004612:	b90e      	cbnz	r6, 8004618 <_printf_i+0x118>
 8004614:	2d00      	cmp	r5, #0
 8004616:	d04d      	beq.n	80046b4 <_printf_i+0x1b4>
 8004618:	4615      	mov	r5, r2
 800461a:	fbb6 f1f3 	udiv	r1, r6, r3
 800461e:	fb03 6711 	mls	r7, r3, r1, r6
 8004622:	5dc7      	ldrb	r7, [r0, r7]
 8004624:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004628:	4637      	mov	r7, r6
 800462a:	42bb      	cmp	r3, r7
 800462c:	460e      	mov	r6, r1
 800462e:	d9f4      	bls.n	800461a <_printf_i+0x11a>
 8004630:	2b08      	cmp	r3, #8
 8004632:	d10b      	bne.n	800464c <_printf_i+0x14c>
 8004634:	6823      	ldr	r3, [r4, #0]
 8004636:	07de      	lsls	r6, r3, #31
 8004638:	d508      	bpl.n	800464c <_printf_i+0x14c>
 800463a:	6923      	ldr	r3, [r4, #16]
 800463c:	6861      	ldr	r1, [r4, #4]
 800463e:	4299      	cmp	r1, r3
 8004640:	bfde      	ittt	le
 8004642:	2330      	movle	r3, #48	; 0x30
 8004644:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004648:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800464c:	1b52      	subs	r2, r2, r5
 800464e:	6122      	str	r2, [r4, #16]
 8004650:	f8cd a000 	str.w	sl, [sp]
 8004654:	464b      	mov	r3, r9
 8004656:	aa03      	add	r2, sp, #12
 8004658:	4621      	mov	r1, r4
 800465a:	4640      	mov	r0, r8
 800465c:	f7ff fee2 	bl	8004424 <_printf_common>
 8004660:	3001      	adds	r0, #1
 8004662:	d14c      	bne.n	80046fe <_printf_i+0x1fe>
 8004664:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004668:	b004      	add	sp, #16
 800466a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800466e:	4835      	ldr	r0, [pc, #212]	; (8004744 <_printf_i+0x244>)
 8004670:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004674:	6829      	ldr	r1, [r5, #0]
 8004676:	6823      	ldr	r3, [r4, #0]
 8004678:	f851 6b04 	ldr.w	r6, [r1], #4
 800467c:	6029      	str	r1, [r5, #0]
 800467e:	061d      	lsls	r5, r3, #24
 8004680:	d514      	bpl.n	80046ac <_printf_i+0x1ac>
 8004682:	07df      	lsls	r7, r3, #31
 8004684:	bf44      	itt	mi
 8004686:	f043 0320 	orrmi.w	r3, r3, #32
 800468a:	6023      	strmi	r3, [r4, #0]
 800468c:	b91e      	cbnz	r6, 8004696 <_printf_i+0x196>
 800468e:	6823      	ldr	r3, [r4, #0]
 8004690:	f023 0320 	bic.w	r3, r3, #32
 8004694:	6023      	str	r3, [r4, #0]
 8004696:	2310      	movs	r3, #16
 8004698:	e7b0      	b.n	80045fc <_printf_i+0xfc>
 800469a:	6823      	ldr	r3, [r4, #0]
 800469c:	f043 0320 	orr.w	r3, r3, #32
 80046a0:	6023      	str	r3, [r4, #0]
 80046a2:	2378      	movs	r3, #120	; 0x78
 80046a4:	4828      	ldr	r0, [pc, #160]	; (8004748 <_printf_i+0x248>)
 80046a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80046aa:	e7e3      	b.n	8004674 <_printf_i+0x174>
 80046ac:	0659      	lsls	r1, r3, #25
 80046ae:	bf48      	it	mi
 80046b0:	b2b6      	uxthmi	r6, r6
 80046b2:	e7e6      	b.n	8004682 <_printf_i+0x182>
 80046b4:	4615      	mov	r5, r2
 80046b6:	e7bb      	b.n	8004630 <_printf_i+0x130>
 80046b8:	682b      	ldr	r3, [r5, #0]
 80046ba:	6826      	ldr	r6, [r4, #0]
 80046bc:	6961      	ldr	r1, [r4, #20]
 80046be:	1d18      	adds	r0, r3, #4
 80046c0:	6028      	str	r0, [r5, #0]
 80046c2:	0635      	lsls	r5, r6, #24
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	d501      	bpl.n	80046cc <_printf_i+0x1cc>
 80046c8:	6019      	str	r1, [r3, #0]
 80046ca:	e002      	b.n	80046d2 <_printf_i+0x1d2>
 80046cc:	0670      	lsls	r0, r6, #25
 80046ce:	d5fb      	bpl.n	80046c8 <_printf_i+0x1c8>
 80046d0:	8019      	strh	r1, [r3, #0]
 80046d2:	2300      	movs	r3, #0
 80046d4:	6123      	str	r3, [r4, #16]
 80046d6:	4615      	mov	r5, r2
 80046d8:	e7ba      	b.n	8004650 <_printf_i+0x150>
 80046da:	682b      	ldr	r3, [r5, #0]
 80046dc:	1d1a      	adds	r2, r3, #4
 80046de:	602a      	str	r2, [r5, #0]
 80046e0:	681d      	ldr	r5, [r3, #0]
 80046e2:	6862      	ldr	r2, [r4, #4]
 80046e4:	2100      	movs	r1, #0
 80046e6:	4628      	mov	r0, r5
 80046e8:	f7fb fd8a 	bl	8000200 <memchr>
 80046ec:	b108      	cbz	r0, 80046f2 <_printf_i+0x1f2>
 80046ee:	1b40      	subs	r0, r0, r5
 80046f0:	6060      	str	r0, [r4, #4]
 80046f2:	6863      	ldr	r3, [r4, #4]
 80046f4:	6123      	str	r3, [r4, #16]
 80046f6:	2300      	movs	r3, #0
 80046f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046fc:	e7a8      	b.n	8004650 <_printf_i+0x150>
 80046fe:	6923      	ldr	r3, [r4, #16]
 8004700:	462a      	mov	r2, r5
 8004702:	4649      	mov	r1, r9
 8004704:	4640      	mov	r0, r8
 8004706:	47d0      	blx	sl
 8004708:	3001      	adds	r0, #1
 800470a:	d0ab      	beq.n	8004664 <_printf_i+0x164>
 800470c:	6823      	ldr	r3, [r4, #0]
 800470e:	079b      	lsls	r3, r3, #30
 8004710:	d413      	bmi.n	800473a <_printf_i+0x23a>
 8004712:	68e0      	ldr	r0, [r4, #12]
 8004714:	9b03      	ldr	r3, [sp, #12]
 8004716:	4298      	cmp	r0, r3
 8004718:	bfb8      	it	lt
 800471a:	4618      	movlt	r0, r3
 800471c:	e7a4      	b.n	8004668 <_printf_i+0x168>
 800471e:	2301      	movs	r3, #1
 8004720:	4632      	mov	r2, r6
 8004722:	4649      	mov	r1, r9
 8004724:	4640      	mov	r0, r8
 8004726:	47d0      	blx	sl
 8004728:	3001      	adds	r0, #1
 800472a:	d09b      	beq.n	8004664 <_printf_i+0x164>
 800472c:	3501      	adds	r5, #1
 800472e:	68e3      	ldr	r3, [r4, #12]
 8004730:	9903      	ldr	r1, [sp, #12]
 8004732:	1a5b      	subs	r3, r3, r1
 8004734:	42ab      	cmp	r3, r5
 8004736:	dcf2      	bgt.n	800471e <_printf_i+0x21e>
 8004738:	e7eb      	b.n	8004712 <_printf_i+0x212>
 800473a:	2500      	movs	r5, #0
 800473c:	f104 0619 	add.w	r6, r4, #25
 8004740:	e7f5      	b.n	800472e <_printf_i+0x22e>
 8004742:	bf00      	nop
 8004744:	080087ce 	.word	0x080087ce
 8004748:	080087df 	.word	0x080087df

0800474c <_scanf_float>:
 800474c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004750:	b087      	sub	sp, #28
 8004752:	4617      	mov	r7, r2
 8004754:	9303      	str	r3, [sp, #12]
 8004756:	688b      	ldr	r3, [r1, #8]
 8004758:	1e5a      	subs	r2, r3, #1
 800475a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800475e:	bf83      	ittte	hi
 8004760:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8004764:	195b      	addhi	r3, r3, r5
 8004766:	9302      	strhi	r3, [sp, #8]
 8004768:	2300      	movls	r3, #0
 800476a:	bf86      	itte	hi
 800476c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004770:	608b      	strhi	r3, [r1, #8]
 8004772:	9302      	strls	r3, [sp, #8]
 8004774:	680b      	ldr	r3, [r1, #0]
 8004776:	468b      	mov	fp, r1
 8004778:	2500      	movs	r5, #0
 800477a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800477e:	f84b 3b1c 	str.w	r3, [fp], #28
 8004782:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004786:	4680      	mov	r8, r0
 8004788:	460c      	mov	r4, r1
 800478a:	465e      	mov	r6, fp
 800478c:	46aa      	mov	sl, r5
 800478e:	46a9      	mov	r9, r5
 8004790:	9501      	str	r5, [sp, #4]
 8004792:	68a2      	ldr	r2, [r4, #8]
 8004794:	b152      	cbz	r2, 80047ac <_scanf_float+0x60>
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	781b      	ldrb	r3, [r3, #0]
 800479a:	2b4e      	cmp	r3, #78	; 0x4e
 800479c:	d864      	bhi.n	8004868 <_scanf_float+0x11c>
 800479e:	2b40      	cmp	r3, #64	; 0x40
 80047a0:	d83c      	bhi.n	800481c <_scanf_float+0xd0>
 80047a2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80047a6:	b2c8      	uxtb	r0, r1
 80047a8:	280e      	cmp	r0, #14
 80047aa:	d93a      	bls.n	8004822 <_scanf_float+0xd6>
 80047ac:	f1b9 0f00 	cmp.w	r9, #0
 80047b0:	d003      	beq.n	80047ba <_scanf_float+0x6e>
 80047b2:	6823      	ldr	r3, [r4, #0]
 80047b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047b8:	6023      	str	r3, [r4, #0]
 80047ba:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80047be:	f1ba 0f01 	cmp.w	sl, #1
 80047c2:	f200 8113 	bhi.w	80049ec <_scanf_float+0x2a0>
 80047c6:	455e      	cmp	r6, fp
 80047c8:	f200 8105 	bhi.w	80049d6 <_scanf_float+0x28a>
 80047cc:	2501      	movs	r5, #1
 80047ce:	4628      	mov	r0, r5
 80047d0:	b007      	add	sp, #28
 80047d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047d6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80047da:	2a0d      	cmp	r2, #13
 80047dc:	d8e6      	bhi.n	80047ac <_scanf_float+0x60>
 80047de:	a101      	add	r1, pc, #4	; (adr r1, 80047e4 <_scanf_float+0x98>)
 80047e0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80047e4:	08004923 	.word	0x08004923
 80047e8:	080047ad 	.word	0x080047ad
 80047ec:	080047ad 	.word	0x080047ad
 80047f0:	080047ad 	.word	0x080047ad
 80047f4:	08004983 	.word	0x08004983
 80047f8:	0800495b 	.word	0x0800495b
 80047fc:	080047ad 	.word	0x080047ad
 8004800:	080047ad 	.word	0x080047ad
 8004804:	08004931 	.word	0x08004931
 8004808:	080047ad 	.word	0x080047ad
 800480c:	080047ad 	.word	0x080047ad
 8004810:	080047ad 	.word	0x080047ad
 8004814:	080047ad 	.word	0x080047ad
 8004818:	080048e9 	.word	0x080048e9
 800481c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8004820:	e7db      	b.n	80047da <_scanf_float+0x8e>
 8004822:	290e      	cmp	r1, #14
 8004824:	d8c2      	bhi.n	80047ac <_scanf_float+0x60>
 8004826:	a001      	add	r0, pc, #4	; (adr r0, 800482c <_scanf_float+0xe0>)
 8004828:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800482c:	080048db 	.word	0x080048db
 8004830:	080047ad 	.word	0x080047ad
 8004834:	080048db 	.word	0x080048db
 8004838:	0800496f 	.word	0x0800496f
 800483c:	080047ad 	.word	0x080047ad
 8004840:	08004889 	.word	0x08004889
 8004844:	080048c5 	.word	0x080048c5
 8004848:	080048c5 	.word	0x080048c5
 800484c:	080048c5 	.word	0x080048c5
 8004850:	080048c5 	.word	0x080048c5
 8004854:	080048c5 	.word	0x080048c5
 8004858:	080048c5 	.word	0x080048c5
 800485c:	080048c5 	.word	0x080048c5
 8004860:	080048c5 	.word	0x080048c5
 8004864:	080048c5 	.word	0x080048c5
 8004868:	2b6e      	cmp	r3, #110	; 0x6e
 800486a:	d809      	bhi.n	8004880 <_scanf_float+0x134>
 800486c:	2b60      	cmp	r3, #96	; 0x60
 800486e:	d8b2      	bhi.n	80047d6 <_scanf_float+0x8a>
 8004870:	2b54      	cmp	r3, #84	; 0x54
 8004872:	d077      	beq.n	8004964 <_scanf_float+0x218>
 8004874:	2b59      	cmp	r3, #89	; 0x59
 8004876:	d199      	bne.n	80047ac <_scanf_float+0x60>
 8004878:	2d07      	cmp	r5, #7
 800487a:	d197      	bne.n	80047ac <_scanf_float+0x60>
 800487c:	2508      	movs	r5, #8
 800487e:	e029      	b.n	80048d4 <_scanf_float+0x188>
 8004880:	2b74      	cmp	r3, #116	; 0x74
 8004882:	d06f      	beq.n	8004964 <_scanf_float+0x218>
 8004884:	2b79      	cmp	r3, #121	; 0x79
 8004886:	e7f6      	b.n	8004876 <_scanf_float+0x12a>
 8004888:	6821      	ldr	r1, [r4, #0]
 800488a:	05c8      	lsls	r0, r1, #23
 800488c:	d51a      	bpl.n	80048c4 <_scanf_float+0x178>
 800488e:	9b02      	ldr	r3, [sp, #8]
 8004890:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004894:	6021      	str	r1, [r4, #0]
 8004896:	f109 0901 	add.w	r9, r9, #1
 800489a:	b11b      	cbz	r3, 80048a4 <_scanf_float+0x158>
 800489c:	3b01      	subs	r3, #1
 800489e:	3201      	adds	r2, #1
 80048a0:	9302      	str	r3, [sp, #8]
 80048a2:	60a2      	str	r2, [r4, #8]
 80048a4:	68a3      	ldr	r3, [r4, #8]
 80048a6:	3b01      	subs	r3, #1
 80048a8:	60a3      	str	r3, [r4, #8]
 80048aa:	6923      	ldr	r3, [r4, #16]
 80048ac:	3301      	adds	r3, #1
 80048ae:	6123      	str	r3, [r4, #16]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	3b01      	subs	r3, #1
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	607b      	str	r3, [r7, #4]
 80048b8:	f340 8084 	ble.w	80049c4 <_scanf_float+0x278>
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	3301      	adds	r3, #1
 80048c0:	603b      	str	r3, [r7, #0]
 80048c2:	e766      	b.n	8004792 <_scanf_float+0x46>
 80048c4:	eb1a 0f05 	cmn.w	sl, r5
 80048c8:	f47f af70 	bne.w	80047ac <_scanf_float+0x60>
 80048cc:	6822      	ldr	r2, [r4, #0]
 80048ce:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80048d2:	6022      	str	r2, [r4, #0]
 80048d4:	f806 3b01 	strb.w	r3, [r6], #1
 80048d8:	e7e4      	b.n	80048a4 <_scanf_float+0x158>
 80048da:	6822      	ldr	r2, [r4, #0]
 80048dc:	0610      	lsls	r0, r2, #24
 80048de:	f57f af65 	bpl.w	80047ac <_scanf_float+0x60>
 80048e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80048e6:	e7f4      	b.n	80048d2 <_scanf_float+0x186>
 80048e8:	f1ba 0f00 	cmp.w	sl, #0
 80048ec:	d10e      	bne.n	800490c <_scanf_float+0x1c0>
 80048ee:	f1b9 0f00 	cmp.w	r9, #0
 80048f2:	d10e      	bne.n	8004912 <_scanf_float+0x1c6>
 80048f4:	6822      	ldr	r2, [r4, #0]
 80048f6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80048fa:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80048fe:	d108      	bne.n	8004912 <_scanf_float+0x1c6>
 8004900:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004904:	6022      	str	r2, [r4, #0]
 8004906:	f04f 0a01 	mov.w	sl, #1
 800490a:	e7e3      	b.n	80048d4 <_scanf_float+0x188>
 800490c:	f1ba 0f02 	cmp.w	sl, #2
 8004910:	d055      	beq.n	80049be <_scanf_float+0x272>
 8004912:	2d01      	cmp	r5, #1
 8004914:	d002      	beq.n	800491c <_scanf_float+0x1d0>
 8004916:	2d04      	cmp	r5, #4
 8004918:	f47f af48 	bne.w	80047ac <_scanf_float+0x60>
 800491c:	3501      	adds	r5, #1
 800491e:	b2ed      	uxtb	r5, r5
 8004920:	e7d8      	b.n	80048d4 <_scanf_float+0x188>
 8004922:	f1ba 0f01 	cmp.w	sl, #1
 8004926:	f47f af41 	bne.w	80047ac <_scanf_float+0x60>
 800492a:	f04f 0a02 	mov.w	sl, #2
 800492e:	e7d1      	b.n	80048d4 <_scanf_float+0x188>
 8004930:	b97d      	cbnz	r5, 8004952 <_scanf_float+0x206>
 8004932:	f1b9 0f00 	cmp.w	r9, #0
 8004936:	f47f af3c 	bne.w	80047b2 <_scanf_float+0x66>
 800493a:	6822      	ldr	r2, [r4, #0]
 800493c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004940:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004944:	f47f af39 	bne.w	80047ba <_scanf_float+0x6e>
 8004948:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800494c:	6022      	str	r2, [r4, #0]
 800494e:	2501      	movs	r5, #1
 8004950:	e7c0      	b.n	80048d4 <_scanf_float+0x188>
 8004952:	2d03      	cmp	r5, #3
 8004954:	d0e2      	beq.n	800491c <_scanf_float+0x1d0>
 8004956:	2d05      	cmp	r5, #5
 8004958:	e7de      	b.n	8004918 <_scanf_float+0x1cc>
 800495a:	2d02      	cmp	r5, #2
 800495c:	f47f af26 	bne.w	80047ac <_scanf_float+0x60>
 8004960:	2503      	movs	r5, #3
 8004962:	e7b7      	b.n	80048d4 <_scanf_float+0x188>
 8004964:	2d06      	cmp	r5, #6
 8004966:	f47f af21 	bne.w	80047ac <_scanf_float+0x60>
 800496a:	2507      	movs	r5, #7
 800496c:	e7b2      	b.n	80048d4 <_scanf_float+0x188>
 800496e:	6822      	ldr	r2, [r4, #0]
 8004970:	0591      	lsls	r1, r2, #22
 8004972:	f57f af1b 	bpl.w	80047ac <_scanf_float+0x60>
 8004976:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800497a:	6022      	str	r2, [r4, #0]
 800497c:	f8cd 9004 	str.w	r9, [sp, #4]
 8004980:	e7a8      	b.n	80048d4 <_scanf_float+0x188>
 8004982:	6822      	ldr	r2, [r4, #0]
 8004984:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8004988:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800498c:	d006      	beq.n	800499c <_scanf_float+0x250>
 800498e:	0550      	lsls	r0, r2, #21
 8004990:	f57f af0c 	bpl.w	80047ac <_scanf_float+0x60>
 8004994:	f1b9 0f00 	cmp.w	r9, #0
 8004998:	f43f af0f 	beq.w	80047ba <_scanf_float+0x6e>
 800499c:	0591      	lsls	r1, r2, #22
 800499e:	bf58      	it	pl
 80049a0:	9901      	ldrpl	r1, [sp, #4]
 80049a2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80049a6:	bf58      	it	pl
 80049a8:	eba9 0101 	subpl.w	r1, r9, r1
 80049ac:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80049b0:	bf58      	it	pl
 80049b2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80049b6:	6022      	str	r2, [r4, #0]
 80049b8:	f04f 0900 	mov.w	r9, #0
 80049bc:	e78a      	b.n	80048d4 <_scanf_float+0x188>
 80049be:	f04f 0a03 	mov.w	sl, #3
 80049c2:	e787      	b.n	80048d4 <_scanf_float+0x188>
 80049c4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80049c8:	4639      	mov	r1, r7
 80049ca:	4640      	mov	r0, r8
 80049cc:	4798      	blx	r3
 80049ce:	2800      	cmp	r0, #0
 80049d0:	f43f aedf 	beq.w	8004792 <_scanf_float+0x46>
 80049d4:	e6ea      	b.n	80047ac <_scanf_float+0x60>
 80049d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80049da:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80049de:	463a      	mov	r2, r7
 80049e0:	4640      	mov	r0, r8
 80049e2:	4798      	blx	r3
 80049e4:	6923      	ldr	r3, [r4, #16]
 80049e6:	3b01      	subs	r3, #1
 80049e8:	6123      	str	r3, [r4, #16]
 80049ea:	e6ec      	b.n	80047c6 <_scanf_float+0x7a>
 80049ec:	1e6b      	subs	r3, r5, #1
 80049ee:	2b06      	cmp	r3, #6
 80049f0:	d825      	bhi.n	8004a3e <_scanf_float+0x2f2>
 80049f2:	2d02      	cmp	r5, #2
 80049f4:	d836      	bhi.n	8004a64 <_scanf_float+0x318>
 80049f6:	455e      	cmp	r6, fp
 80049f8:	f67f aee8 	bls.w	80047cc <_scanf_float+0x80>
 80049fc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004a00:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004a04:	463a      	mov	r2, r7
 8004a06:	4640      	mov	r0, r8
 8004a08:	4798      	blx	r3
 8004a0a:	6923      	ldr	r3, [r4, #16]
 8004a0c:	3b01      	subs	r3, #1
 8004a0e:	6123      	str	r3, [r4, #16]
 8004a10:	e7f1      	b.n	80049f6 <_scanf_float+0x2aa>
 8004a12:	9802      	ldr	r0, [sp, #8]
 8004a14:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004a18:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8004a1c:	9002      	str	r0, [sp, #8]
 8004a1e:	463a      	mov	r2, r7
 8004a20:	4640      	mov	r0, r8
 8004a22:	4798      	blx	r3
 8004a24:	6923      	ldr	r3, [r4, #16]
 8004a26:	3b01      	subs	r3, #1
 8004a28:	6123      	str	r3, [r4, #16]
 8004a2a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004a2e:	fa5f fa8a 	uxtb.w	sl, sl
 8004a32:	f1ba 0f02 	cmp.w	sl, #2
 8004a36:	d1ec      	bne.n	8004a12 <_scanf_float+0x2c6>
 8004a38:	3d03      	subs	r5, #3
 8004a3a:	b2ed      	uxtb	r5, r5
 8004a3c:	1b76      	subs	r6, r6, r5
 8004a3e:	6823      	ldr	r3, [r4, #0]
 8004a40:	05da      	lsls	r2, r3, #23
 8004a42:	d52f      	bpl.n	8004aa4 <_scanf_float+0x358>
 8004a44:	055b      	lsls	r3, r3, #21
 8004a46:	d510      	bpl.n	8004a6a <_scanf_float+0x31e>
 8004a48:	455e      	cmp	r6, fp
 8004a4a:	f67f aebf 	bls.w	80047cc <_scanf_float+0x80>
 8004a4e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004a52:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004a56:	463a      	mov	r2, r7
 8004a58:	4640      	mov	r0, r8
 8004a5a:	4798      	blx	r3
 8004a5c:	6923      	ldr	r3, [r4, #16]
 8004a5e:	3b01      	subs	r3, #1
 8004a60:	6123      	str	r3, [r4, #16]
 8004a62:	e7f1      	b.n	8004a48 <_scanf_float+0x2fc>
 8004a64:	46aa      	mov	sl, r5
 8004a66:	9602      	str	r6, [sp, #8]
 8004a68:	e7df      	b.n	8004a2a <_scanf_float+0x2de>
 8004a6a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8004a6e:	6923      	ldr	r3, [r4, #16]
 8004a70:	2965      	cmp	r1, #101	; 0x65
 8004a72:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8004a76:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8004a7a:	6123      	str	r3, [r4, #16]
 8004a7c:	d00c      	beq.n	8004a98 <_scanf_float+0x34c>
 8004a7e:	2945      	cmp	r1, #69	; 0x45
 8004a80:	d00a      	beq.n	8004a98 <_scanf_float+0x34c>
 8004a82:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004a86:	463a      	mov	r2, r7
 8004a88:	4640      	mov	r0, r8
 8004a8a:	4798      	blx	r3
 8004a8c:	6923      	ldr	r3, [r4, #16]
 8004a8e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8004a92:	3b01      	subs	r3, #1
 8004a94:	1eb5      	subs	r5, r6, #2
 8004a96:	6123      	str	r3, [r4, #16]
 8004a98:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004a9c:	463a      	mov	r2, r7
 8004a9e:	4640      	mov	r0, r8
 8004aa0:	4798      	blx	r3
 8004aa2:	462e      	mov	r6, r5
 8004aa4:	6825      	ldr	r5, [r4, #0]
 8004aa6:	f015 0510 	ands.w	r5, r5, #16
 8004aaa:	d159      	bne.n	8004b60 <_scanf_float+0x414>
 8004aac:	7035      	strb	r5, [r6, #0]
 8004aae:	6823      	ldr	r3, [r4, #0]
 8004ab0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004ab4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ab8:	d11b      	bne.n	8004af2 <_scanf_float+0x3a6>
 8004aba:	9b01      	ldr	r3, [sp, #4]
 8004abc:	454b      	cmp	r3, r9
 8004abe:	eba3 0209 	sub.w	r2, r3, r9
 8004ac2:	d123      	bne.n	8004b0c <_scanf_float+0x3c0>
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	4659      	mov	r1, fp
 8004ac8:	4640      	mov	r0, r8
 8004aca:	f000 fe97 	bl	80057fc <_strtod_r>
 8004ace:	6822      	ldr	r2, [r4, #0]
 8004ad0:	9b03      	ldr	r3, [sp, #12]
 8004ad2:	f012 0f02 	tst.w	r2, #2
 8004ad6:	ec57 6b10 	vmov	r6, r7, d0
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	d021      	beq.n	8004b22 <_scanf_float+0x3d6>
 8004ade:	9903      	ldr	r1, [sp, #12]
 8004ae0:	1d1a      	adds	r2, r3, #4
 8004ae2:	600a      	str	r2, [r1, #0]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	e9c3 6700 	strd	r6, r7, [r3]
 8004aea:	68e3      	ldr	r3, [r4, #12]
 8004aec:	3301      	adds	r3, #1
 8004aee:	60e3      	str	r3, [r4, #12]
 8004af0:	e66d      	b.n	80047ce <_scanf_float+0x82>
 8004af2:	9b04      	ldr	r3, [sp, #16]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d0e5      	beq.n	8004ac4 <_scanf_float+0x378>
 8004af8:	9905      	ldr	r1, [sp, #20]
 8004afa:	230a      	movs	r3, #10
 8004afc:	462a      	mov	r2, r5
 8004afe:	3101      	adds	r1, #1
 8004b00:	4640      	mov	r0, r8
 8004b02:	f000 ff03 	bl	800590c <_strtol_r>
 8004b06:	9b04      	ldr	r3, [sp, #16]
 8004b08:	9e05      	ldr	r6, [sp, #20]
 8004b0a:	1ac2      	subs	r2, r0, r3
 8004b0c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8004b10:	429e      	cmp	r6, r3
 8004b12:	bf28      	it	cs
 8004b14:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8004b18:	4912      	ldr	r1, [pc, #72]	; (8004b64 <_scanf_float+0x418>)
 8004b1a:	4630      	mov	r0, r6
 8004b1c:	f000 f82c 	bl	8004b78 <siprintf>
 8004b20:	e7d0      	b.n	8004ac4 <_scanf_float+0x378>
 8004b22:	9903      	ldr	r1, [sp, #12]
 8004b24:	f012 0f04 	tst.w	r2, #4
 8004b28:	f103 0204 	add.w	r2, r3, #4
 8004b2c:	600a      	str	r2, [r1, #0]
 8004b2e:	d1d9      	bne.n	8004ae4 <_scanf_float+0x398>
 8004b30:	f8d3 8000 	ldr.w	r8, [r3]
 8004b34:	ee10 2a10 	vmov	r2, s0
 8004b38:	ee10 0a10 	vmov	r0, s0
 8004b3c:	463b      	mov	r3, r7
 8004b3e:	4639      	mov	r1, r7
 8004b40:	f7fc f804 	bl	8000b4c <__aeabi_dcmpun>
 8004b44:	b128      	cbz	r0, 8004b52 <_scanf_float+0x406>
 8004b46:	4808      	ldr	r0, [pc, #32]	; (8004b68 <_scanf_float+0x41c>)
 8004b48:	f000 f810 	bl	8004b6c <nanf>
 8004b4c:	ed88 0a00 	vstr	s0, [r8]
 8004b50:	e7cb      	b.n	8004aea <_scanf_float+0x39e>
 8004b52:	4630      	mov	r0, r6
 8004b54:	4639      	mov	r1, r7
 8004b56:	f7fc f857 	bl	8000c08 <__aeabi_d2f>
 8004b5a:	f8c8 0000 	str.w	r0, [r8]
 8004b5e:	e7c4      	b.n	8004aea <_scanf_float+0x39e>
 8004b60:	2500      	movs	r5, #0
 8004b62:	e634      	b.n	80047ce <_scanf_float+0x82>
 8004b64:	080087f0 	.word	0x080087f0
 8004b68:	08008bf8 	.word	0x08008bf8

08004b6c <nanf>:
 8004b6c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8004b74 <nanf+0x8>
 8004b70:	4770      	bx	lr
 8004b72:	bf00      	nop
 8004b74:	7fc00000 	.word	0x7fc00000

08004b78 <siprintf>:
 8004b78:	b40e      	push	{r1, r2, r3}
 8004b7a:	b500      	push	{lr}
 8004b7c:	b09c      	sub	sp, #112	; 0x70
 8004b7e:	ab1d      	add	r3, sp, #116	; 0x74
 8004b80:	9002      	str	r0, [sp, #8]
 8004b82:	9006      	str	r0, [sp, #24]
 8004b84:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004b88:	4809      	ldr	r0, [pc, #36]	; (8004bb0 <siprintf+0x38>)
 8004b8a:	9107      	str	r1, [sp, #28]
 8004b8c:	9104      	str	r1, [sp, #16]
 8004b8e:	4909      	ldr	r1, [pc, #36]	; (8004bb4 <siprintf+0x3c>)
 8004b90:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b94:	9105      	str	r1, [sp, #20]
 8004b96:	6800      	ldr	r0, [r0, #0]
 8004b98:	9301      	str	r3, [sp, #4]
 8004b9a:	a902      	add	r1, sp, #8
 8004b9c:	f002 fee2 	bl	8007964 <_svfiprintf_r>
 8004ba0:	9b02      	ldr	r3, [sp, #8]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	701a      	strb	r2, [r3, #0]
 8004ba6:	b01c      	add	sp, #112	; 0x70
 8004ba8:	f85d eb04 	ldr.w	lr, [sp], #4
 8004bac:	b003      	add	sp, #12
 8004bae:	4770      	bx	lr
 8004bb0:	2000000c 	.word	0x2000000c
 8004bb4:	ffff0208 	.word	0xffff0208

08004bb8 <sulp>:
 8004bb8:	b570      	push	{r4, r5, r6, lr}
 8004bba:	4604      	mov	r4, r0
 8004bbc:	460d      	mov	r5, r1
 8004bbe:	ec45 4b10 	vmov	d0, r4, r5
 8004bc2:	4616      	mov	r6, r2
 8004bc4:	f002 fc2c 	bl	8007420 <__ulp>
 8004bc8:	ec51 0b10 	vmov	r0, r1, d0
 8004bcc:	b17e      	cbz	r6, 8004bee <sulp+0x36>
 8004bce:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8004bd2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	dd09      	ble.n	8004bee <sulp+0x36>
 8004bda:	051b      	lsls	r3, r3, #20
 8004bdc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8004be0:	2400      	movs	r4, #0
 8004be2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8004be6:	4622      	mov	r2, r4
 8004be8:	462b      	mov	r3, r5
 8004bea:	f7fb fd15 	bl	8000618 <__aeabi_dmul>
 8004bee:	bd70      	pop	{r4, r5, r6, pc}

08004bf0 <_strtod_l>:
 8004bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bf4:	ed2d 8b02 	vpush	{d8}
 8004bf8:	b09d      	sub	sp, #116	; 0x74
 8004bfa:	461f      	mov	r7, r3
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	9318      	str	r3, [sp, #96]	; 0x60
 8004c00:	4ba2      	ldr	r3, [pc, #648]	; (8004e8c <_strtod_l+0x29c>)
 8004c02:	9213      	str	r2, [sp, #76]	; 0x4c
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	9305      	str	r3, [sp, #20]
 8004c08:	4604      	mov	r4, r0
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	4688      	mov	r8, r1
 8004c0e:	f7fb faef 	bl	80001f0 <strlen>
 8004c12:	f04f 0a00 	mov.w	sl, #0
 8004c16:	4605      	mov	r5, r0
 8004c18:	f04f 0b00 	mov.w	fp, #0
 8004c1c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8004c20:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004c22:	781a      	ldrb	r2, [r3, #0]
 8004c24:	2a2b      	cmp	r2, #43	; 0x2b
 8004c26:	d04e      	beq.n	8004cc6 <_strtod_l+0xd6>
 8004c28:	d83b      	bhi.n	8004ca2 <_strtod_l+0xb2>
 8004c2a:	2a0d      	cmp	r2, #13
 8004c2c:	d834      	bhi.n	8004c98 <_strtod_l+0xa8>
 8004c2e:	2a08      	cmp	r2, #8
 8004c30:	d834      	bhi.n	8004c9c <_strtod_l+0xac>
 8004c32:	2a00      	cmp	r2, #0
 8004c34:	d03e      	beq.n	8004cb4 <_strtod_l+0xc4>
 8004c36:	2300      	movs	r3, #0
 8004c38:	930a      	str	r3, [sp, #40]	; 0x28
 8004c3a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8004c3c:	7833      	ldrb	r3, [r6, #0]
 8004c3e:	2b30      	cmp	r3, #48	; 0x30
 8004c40:	f040 80b0 	bne.w	8004da4 <_strtod_l+0x1b4>
 8004c44:	7873      	ldrb	r3, [r6, #1]
 8004c46:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004c4a:	2b58      	cmp	r3, #88	; 0x58
 8004c4c:	d168      	bne.n	8004d20 <_strtod_l+0x130>
 8004c4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c50:	9301      	str	r3, [sp, #4]
 8004c52:	ab18      	add	r3, sp, #96	; 0x60
 8004c54:	9702      	str	r7, [sp, #8]
 8004c56:	9300      	str	r3, [sp, #0]
 8004c58:	4a8d      	ldr	r2, [pc, #564]	; (8004e90 <_strtod_l+0x2a0>)
 8004c5a:	ab19      	add	r3, sp, #100	; 0x64
 8004c5c:	a917      	add	r1, sp, #92	; 0x5c
 8004c5e:	4620      	mov	r0, r4
 8004c60:	f001 fd38 	bl	80066d4 <__gethex>
 8004c64:	f010 0707 	ands.w	r7, r0, #7
 8004c68:	4605      	mov	r5, r0
 8004c6a:	d005      	beq.n	8004c78 <_strtod_l+0x88>
 8004c6c:	2f06      	cmp	r7, #6
 8004c6e:	d12c      	bne.n	8004cca <_strtod_l+0xda>
 8004c70:	3601      	adds	r6, #1
 8004c72:	2300      	movs	r3, #0
 8004c74:	9617      	str	r6, [sp, #92]	; 0x5c
 8004c76:	930a      	str	r3, [sp, #40]	; 0x28
 8004c78:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	f040 8590 	bne.w	80057a0 <_strtod_l+0xbb0>
 8004c80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c82:	b1eb      	cbz	r3, 8004cc0 <_strtod_l+0xd0>
 8004c84:	4652      	mov	r2, sl
 8004c86:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8004c8a:	ec43 2b10 	vmov	d0, r2, r3
 8004c8e:	b01d      	add	sp, #116	; 0x74
 8004c90:	ecbd 8b02 	vpop	{d8}
 8004c94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c98:	2a20      	cmp	r2, #32
 8004c9a:	d1cc      	bne.n	8004c36 <_strtod_l+0x46>
 8004c9c:	3301      	adds	r3, #1
 8004c9e:	9317      	str	r3, [sp, #92]	; 0x5c
 8004ca0:	e7be      	b.n	8004c20 <_strtod_l+0x30>
 8004ca2:	2a2d      	cmp	r2, #45	; 0x2d
 8004ca4:	d1c7      	bne.n	8004c36 <_strtod_l+0x46>
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	920a      	str	r2, [sp, #40]	; 0x28
 8004caa:	1c5a      	adds	r2, r3, #1
 8004cac:	9217      	str	r2, [sp, #92]	; 0x5c
 8004cae:	785b      	ldrb	r3, [r3, #1]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d1c2      	bne.n	8004c3a <_strtod_l+0x4a>
 8004cb4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004cb6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	f040 856e 	bne.w	800579c <_strtod_l+0xbac>
 8004cc0:	4652      	mov	r2, sl
 8004cc2:	465b      	mov	r3, fp
 8004cc4:	e7e1      	b.n	8004c8a <_strtod_l+0x9a>
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	e7ee      	b.n	8004ca8 <_strtod_l+0xb8>
 8004cca:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8004ccc:	b13a      	cbz	r2, 8004cde <_strtod_l+0xee>
 8004cce:	2135      	movs	r1, #53	; 0x35
 8004cd0:	a81a      	add	r0, sp, #104	; 0x68
 8004cd2:	f002 fcb0 	bl	8007636 <__copybits>
 8004cd6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004cd8:	4620      	mov	r0, r4
 8004cda:	f002 f86f 	bl	8006dbc <_Bfree>
 8004cde:	3f01      	subs	r7, #1
 8004ce0:	2f04      	cmp	r7, #4
 8004ce2:	d806      	bhi.n	8004cf2 <_strtod_l+0x102>
 8004ce4:	e8df f007 	tbb	[pc, r7]
 8004ce8:	1714030a 	.word	0x1714030a
 8004cec:	0a          	.byte	0x0a
 8004ced:	00          	.byte	0x00
 8004cee:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8004cf2:	0728      	lsls	r0, r5, #28
 8004cf4:	d5c0      	bpl.n	8004c78 <_strtod_l+0x88>
 8004cf6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8004cfa:	e7bd      	b.n	8004c78 <_strtod_l+0x88>
 8004cfc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8004d00:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004d02:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004d06:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8004d0a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8004d0e:	e7f0      	b.n	8004cf2 <_strtod_l+0x102>
 8004d10:	f8df b180 	ldr.w	fp, [pc, #384]	; 8004e94 <_strtod_l+0x2a4>
 8004d14:	e7ed      	b.n	8004cf2 <_strtod_l+0x102>
 8004d16:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8004d1a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8004d1e:	e7e8      	b.n	8004cf2 <_strtod_l+0x102>
 8004d20:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004d22:	1c5a      	adds	r2, r3, #1
 8004d24:	9217      	str	r2, [sp, #92]	; 0x5c
 8004d26:	785b      	ldrb	r3, [r3, #1]
 8004d28:	2b30      	cmp	r3, #48	; 0x30
 8004d2a:	d0f9      	beq.n	8004d20 <_strtod_l+0x130>
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d0a3      	beq.n	8004c78 <_strtod_l+0x88>
 8004d30:	2301      	movs	r3, #1
 8004d32:	f04f 0900 	mov.w	r9, #0
 8004d36:	9304      	str	r3, [sp, #16]
 8004d38:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004d3a:	9308      	str	r3, [sp, #32]
 8004d3c:	f8cd 901c 	str.w	r9, [sp, #28]
 8004d40:	464f      	mov	r7, r9
 8004d42:	220a      	movs	r2, #10
 8004d44:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8004d46:	7806      	ldrb	r6, [r0, #0]
 8004d48:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8004d4c:	b2d9      	uxtb	r1, r3
 8004d4e:	2909      	cmp	r1, #9
 8004d50:	d92a      	bls.n	8004da8 <_strtod_l+0x1b8>
 8004d52:	9905      	ldr	r1, [sp, #20]
 8004d54:	462a      	mov	r2, r5
 8004d56:	f002 ff1f 	bl	8007b98 <strncmp>
 8004d5a:	b398      	cbz	r0, 8004dc4 <_strtod_l+0x1d4>
 8004d5c:	2000      	movs	r0, #0
 8004d5e:	4632      	mov	r2, r6
 8004d60:	463d      	mov	r5, r7
 8004d62:	9005      	str	r0, [sp, #20]
 8004d64:	4603      	mov	r3, r0
 8004d66:	2a65      	cmp	r2, #101	; 0x65
 8004d68:	d001      	beq.n	8004d6e <_strtod_l+0x17e>
 8004d6a:	2a45      	cmp	r2, #69	; 0x45
 8004d6c:	d118      	bne.n	8004da0 <_strtod_l+0x1b0>
 8004d6e:	b91d      	cbnz	r5, 8004d78 <_strtod_l+0x188>
 8004d70:	9a04      	ldr	r2, [sp, #16]
 8004d72:	4302      	orrs	r2, r0
 8004d74:	d09e      	beq.n	8004cb4 <_strtod_l+0xc4>
 8004d76:	2500      	movs	r5, #0
 8004d78:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8004d7c:	f108 0201 	add.w	r2, r8, #1
 8004d80:	9217      	str	r2, [sp, #92]	; 0x5c
 8004d82:	f898 2001 	ldrb.w	r2, [r8, #1]
 8004d86:	2a2b      	cmp	r2, #43	; 0x2b
 8004d88:	d075      	beq.n	8004e76 <_strtod_l+0x286>
 8004d8a:	2a2d      	cmp	r2, #45	; 0x2d
 8004d8c:	d07b      	beq.n	8004e86 <_strtod_l+0x296>
 8004d8e:	f04f 0c00 	mov.w	ip, #0
 8004d92:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8004d96:	2909      	cmp	r1, #9
 8004d98:	f240 8082 	bls.w	8004ea0 <_strtod_l+0x2b0>
 8004d9c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8004da0:	2600      	movs	r6, #0
 8004da2:	e09d      	b.n	8004ee0 <_strtod_l+0x2f0>
 8004da4:	2300      	movs	r3, #0
 8004da6:	e7c4      	b.n	8004d32 <_strtod_l+0x142>
 8004da8:	2f08      	cmp	r7, #8
 8004daa:	bfd8      	it	le
 8004dac:	9907      	ldrle	r1, [sp, #28]
 8004dae:	f100 0001 	add.w	r0, r0, #1
 8004db2:	bfda      	itte	le
 8004db4:	fb02 3301 	mlale	r3, r2, r1, r3
 8004db8:	9307      	strle	r3, [sp, #28]
 8004dba:	fb02 3909 	mlagt	r9, r2, r9, r3
 8004dbe:	3701      	adds	r7, #1
 8004dc0:	9017      	str	r0, [sp, #92]	; 0x5c
 8004dc2:	e7bf      	b.n	8004d44 <_strtod_l+0x154>
 8004dc4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004dc6:	195a      	adds	r2, r3, r5
 8004dc8:	9217      	str	r2, [sp, #92]	; 0x5c
 8004dca:	5d5a      	ldrb	r2, [r3, r5]
 8004dcc:	2f00      	cmp	r7, #0
 8004dce:	d037      	beq.n	8004e40 <_strtod_l+0x250>
 8004dd0:	9005      	str	r0, [sp, #20]
 8004dd2:	463d      	mov	r5, r7
 8004dd4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8004dd8:	2b09      	cmp	r3, #9
 8004dda:	d912      	bls.n	8004e02 <_strtod_l+0x212>
 8004ddc:	2301      	movs	r3, #1
 8004dde:	e7c2      	b.n	8004d66 <_strtod_l+0x176>
 8004de0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004de2:	1c5a      	adds	r2, r3, #1
 8004de4:	9217      	str	r2, [sp, #92]	; 0x5c
 8004de6:	785a      	ldrb	r2, [r3, #1]
 8004de8:	3001      	adds	r0, #1
 8004dea:	2a30      	cmp	r2, #48	; 0x30
 8004dec:	d0f8      	beq.n	8004de0 <_strtod_l+0x1f0>
 8004dee:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8004df2:	2b08      	cmp	r3, #8
 8004df4:	f200 84d9 	bhi.w	80057aa <_strtod_l+0xbba>
 8004df8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004dfa:	9005      	str	r0, [sp, #20]
 8004dfc:	2000      	movs	r0, #0
 8004dfe:	9308      	str	r3, [sp, #32]
 8004e00:	4605      	mov	r5, r0
 8004e02:	3a30      	subs	r2, #48	; 0x30
 8004e04:	f100 0301 	add.w	r3, r0, #1
 8004e08:	d014      	beq.n	8004e34 <_strtod_l+0x244>
 8004e0a:	9905      	ldr	r1, [sp, #20]
 8004e0c:	4419      	add	r1, r3
 8004e0e:	9105      	str	r1, [sp, #20]
 8004e10:	462b      	mov	r3, r5
 8004e12:	eb00 0e05 	add.w	lr, r0, r5
 8004e16:	210a      	movs	r1, #10
 8004e18:	4573      	cmp	r3, lr
 8004e1a:	d113      	bne.n	8004e44 <_strtod_l+0x254>
 8004e1c:	182b      	adds	r3, r5, r0
 8004e1e:	2b08      	cmp	r3, #8
 8004e20:	f105 0501 	add.w	r5, r5, #1
 8004e24:	4405      	add	r5, r0
 8004e26:	dc1c      	bgt.n	8004e62 <_strtod_l+0x272>
 8004e28:	9907      	ldr	r1, [sp, #28]
 8004e2a:	230a      	movs	r3, #10
 8004e2c:	fb03 2301 	mla	r3, r3, r1, r2
 8004e30:	9307      	str	r3, [sp, #28]
 8004e32:	2300      	movs	r3, #0
 8004e34:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004e36:	1c51      	adds	r1, r2, #1
 8004e38:	9117      	str	r1, [sp, #92]	; 0x5c
 8004e3a:	7852      	ldrb	r2, [r2, #1]
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	e7c9      	b.n	8004dd4 <_strtod_l+0x1e4>
 8004e40:	4638      	mov	r0, r7
 8004e42:	e7d2      	b.n	8004dea <_strtod_l+0x1fa>
 8004e44:	2b08      	cmp	r3, #8
 8004e46:	dc04      	bgt.n	8004e52 <_strtod_l+0x262>
 8004e48:	9e07      	ldr	r6, [sp, #28]
 8004e4a:	434e      	muls	r6, r1
 8004e4c:	9607      	str	r6, [sp, #28]
 8004e4e:	3301      	adds	r3, #1
 8004e50:	e7e2      	b.n	8004e18 <_strtod_l+0x228>
 8004e52:	f103 0c01 	add.w	ip, r3, #1
 8004e56:	f1bc 0f10 	cmp.w	ip, #16
 8004e5a:	bfd8      	it	le
 8004e5c:	fb01 f909 	mulle.w	r9, r1, r9
 8004e60:	e7f5      	b.n	8004e4e <_strtod_l+0x25e>
 8004e62:	2d10      	cmp	r5, #16
 8004e64:	bfdc      	itt	le
 8004e66:	230a      	movle	r3, #10
 8004e68:	fb03 2909 	mlale	r9, r3, r9, r2
 8004e6c:	e7e1      	b.n	8004e32 <_strtod_l+0x242>
 8004e6e:	2300      	movs	r3, #0
 8004e70:	9305      	str	r3, [sp, #20]
 8004e72:	2301      	movs	r3, #1
 8004e74:	e77c      	b.n	8004d70 <_strtod_l+0x180>
 8004e76:	f04f 0c00 	mov.w	ip, #0
 8004e7a:	f108 0202 	add.w	r2, r8, #2
 8004e7e:	9217      	str	r2, [sp, #92]	; 0x5c
 8004e80:	f898 2002 	ldrb.w	r2, [r8, #2]
 8004e84:	e785      	b.n	8004d92 <_strtod_l+0x1a2>
 8004e86:	f04f 0c01 	mov.w	ip, #1
 8004e8a:	e7f6      	b.n	8004e7a <_strtod_l+0x28a>
 8004e8c:	08008a40 	.word	0x08008a40
 8004e90:	080087f8 	.word	0x080087f8
 8004e94:	7ff00000 	.word	0x7ff00000
 8004e98:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004e9a:	1c51      	adds	r1, r2, #1
 8004e9c:	9117      	str	r1, [sp, #92]	; 0x5c
 8004e9e:	7852      	ldrb	r2, [r2, #1]
 8004ea0:	2a30      	cmp	r2, #48	; 0x30
 8004ea2:	d0f9      	beq.n	8004e98 <_strtod_l+0x2a8>
 8004ea4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8004ea8:	2908      	cmp	r1, #8
 8004eaa:	f63f af79 	bhi.w	8004da0 <_strtod_l+0x1b0>
 8004eae:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8004eb2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004eb4:	9206      	str	r2, [sp, #24]
 8004eb6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004eb8:	1c51      	adds	r1, r2, #1
 8004eba:	9117      	str	r1, [sp, #92]	; 0x5c
 8004ebc:	7852      	ldrb	r2, [r2, #1]
 8004ebe:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8004ec2:	2e09      	cmp	r6, #9
 8004ec4:	d937      	bls.n	8004f36 <_strtod_l+0x346>
 8004ec6:	9e06      	ldr	r6, [sp, #24]
 8004ec8:	1b89      	subs	r1, r1, r6
 8004eca:	2908      	cmp	r1, #8
 8004ecc:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8004ed0:	dc02      	bgt.n	8004ed8 <_strtod_l+0x2e8>
 8004ed2:	4576      	cmp	r6, lr
 8004ed4:	bfa8      	it	ge
 8004ed6:	4676      	movge	r6, lr
 8004ed8:	f1bc 0f00 	cmp.w	ip, #0
 8004edc:	d000      	beq.n	8004ee0 <_strtod_l+0x2f0>
 8004ede:	4276      	negs	r6, r6
 8004ee0:	2d00      	cmp	r5, #0
 8004ee2:	d14d      	bne.n	8004f80 <_strtod_l+0x390>
 8004ee4:	9904      	ldr	r1, [sp, #16]
 8004ee6:	4301      	orrs	r1, r0
 8004ee8:	f47f aec6 	bne.w	8004c78 <_strtod_l+0x88>
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	f47f aee1 	bne.w	8004cb4 <_strtod_l+0xc4>
 8004ef2:	2a69      	cmp	r2, #105	; 0x69
 8004ef4:	d027      	beq.n	8004f46 <_strtod_l+0x356>
 8004ef6:	dc24      	bgt.n	8004f42 <_strtod_l+0x352>
 8004ef8:	2a49      	cmp	r2, #73	; 0x49
 8004efa:	d024      	beq.n	8004f46 <_strtod_l+0x356>
 8004efc:	2a4e      	cmp	r2, #78	; 0x4e
 8004efe:	f47f aed9 	bne.w	8004cb4 <_strtod_l+0xc4>
 8004f02:	499f      	ldr	r1, [pc, #636]	; (8005180 <_strtod_l+0x590>)
 8004f04:	a817      	add	r0, sp, #92	; 0x5c
 8004f06:	f001 fe3d 	bl	8006b84 <__match>
 8004f0a:	2800      	cmp	r0, #0
 8004f0c:	f43f aed2 	beq.w	8004cb4 <_strtod_l+0xc4>
 8004f10:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004f12:	781b      	ldrb	r3, [r3, #0]
 8004f14:	2b28      	cmp	r3, #40	; 0x28
 8004f16:	d12d      	bne.n	8004f74 <_strtod_l+0x384>
 8004f18:	499a      	ldr	r1, [pc, #616]	; (8005184 <_strtod_l+0x594>)
 8004f1a:	aa1a      	add	r2, sp, #104	; 0x68
 8004f1c:	a817      	add	r0, sp, #92	; 0x5c
 8004f1e:	f001 fe45 	bl	8006bac <__hexnan>
 8004f22:	2805      	cmp	r0, #5
 8004f24:	d126      	bne.n	8004f74 <_strtod_l+0x384>
 8004f26:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004f28:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8004f2c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8004f30:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8004f34:	e6a0      	b.n	8004c78 <_strtod_l+0x88>
 8004f36:	210a      	movs	r1, #10
 8004f38:	fb01 2e0e 	mla	lr, r1, lr, r2
 8004f3c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8004f40:	e7b9      	b.n	8004eb6 <_strtod_l+0x2c6>
 8004f42:	2a6e      	cmp	r2, #110	; 0x6e
 8004f44:	e7db      	b.n	8004efe <_strtod_l+0x30e>
 8004f46:	4990      	ldr	r1, [pc, #576]	; (8005188 <_strtod_l+0x598>)
 8004f48:	a817      	add	r0, sp, #92	; 0x5c
 8004f4a:	f001 fe1b 	bl	8006b84 <__match>
 8004f4e:	2800      	cmp	r0, #0
 8004f50:	f43f aeb0 	beq.w	8004cb4 <_strtod_l+0xc4>
 8004f54:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004f56:	498d      	ldr	r1, [pc, #564]	; (800518c <_strtod_l+0x59c>)
 8004f58:	3b01      	subs	r3, #1
 8004f5a:	a817      	add	r0, sp, #92	; 0x5c
 8004f5c:	9317      	str	r3, [sp, #92]	; 0x5c
 8004f5e:	f001 fe11 	bl	8006b84 <__match>
 8004f62:	b910      	cbnz	r0, 8004f6a <_strtod_l+0x37a>
 8004f64:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004f66:	3301      	adds	r3, #1
 8004f68:	9317      	str	r3, [sp, #92]	; 0x5c
 8004f6a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800519c <_strtod_l+0x5ac>
 8004f6e:	f04f 0a00 	mov.w	sl, #0
 8004f72:	e681      	b.n	8004c78 <_strtod_l+0x88>
 8004f74:	4886      	ldr	r0, [pc, #536]	; (8005190 <_strtod_l+0x5a0>)
 8004f76:	f002 fdf7 	bl	8007b68 <nan>
 8004f7a:	ec5b ab10 	vmov	sl, fp, d0
 8004f7e:	e67b      	b.n	8004c78 <_strtod_l+0x88>
 8004f80:	9b05      	ldr	r3, [sp, #20]
 8004f82:	9807      	ldr	r0, [sp, #28]
 8004f84:	1af3      	subs	r3, r6, r3
 8004f86:	2f00      	cmp	r7, #0
 8004f88:	bf08      	it	eq
 8004f8a:	462f      	moveq	r7, r5
 8004f8c:	2d10      	cmp	r5, #16
 8004f8e:	9306      	str	r3, [sp, #24]
 8004f90:	46a8      	mov	r8, r5
 8004f92:	bfa8      	it	ge
 8004f94:	f04f 0810 	movge.w	r8, #16
 8004f98:	f7fb fac4 	bl	8000524 <__aeabi_ui2d>
 8004f9c:	2d09      	cmp	r5, #9
 8004f9e:	4682      	mov	sl, r0
 8004fa0:	468b      	mov	fp, r1
 8004fa2:	dd13      	ble.n	8004fcc <_strtod_l+0x3dc>
 8004fa4:	4b7b      	ldr	r3, [pc, #492]	; (8005194 <_strtod_l+0x5a4>)
 8004fa6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8004faa:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8004fae:	f7fb fb33 	bl	8000618 <__aeabi_dmul>
 8004fb2:	4682      	mov	sl, r0
 8004fb4:	4648      	mov	r0, r9
 8004fb6:	468b      	mov	fp, r1
 8004fb8:	f7fb fab4 	bl	8000524 <__aeabi_ui2d>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	460b      	mov	r3, r1
 8004fc0:	4650      	mov	r0, sl
 8004fc2:	4659      	mov	r1, fp
 8004fc4:	f7fb f972 	bl	80002ac <__adddf3>
 8004fc8:	4682      	mov	sl, r0
 8004fca:	468b      	mov	fp, r1
 8004fcc:	2d0f      	cmp	r5, #15
 8004fce:	dc38      	bgt.n	8005042 <_strtod_l+0x452>
 8004fd0:	9b06      	ldr	r3, [sp, #24]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	f43f ae50 	beq.w	8004c78 <_strtod_l+0x88>
 8004fd8:	dd24      	ble.n	8005024 <_strtod_l+0x434>
 8004fda:	2b16      	cmp	r3, #22
 8004fdc:	dc0b      	bgt.n	8004ff6 <_strtod_l+0x406>
 8004fde:	496d      	ldr	r1, [pc, #436]	; (8005194 <_strtod_l+0x5a4>)
 8004fe0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004fe4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004fe8:	4652      	mov	r2, sl
 8004fea:	465b      	mov	r3, fp
 8004fec:	f7fb fb14 	bl	8000618 <__aeabi_dmul>
 8004ff0:	4682      	mov	sl, r0
 8004ff2:	468b      	mov	fp, r1
 8004ff4:	e640      	b.n	8004c78 <_strtod_l+0x88>
 8004ff6:	9a06      	ldr	r2, [sp, #24]
 8004ff8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	db20      	blt.n	8005042 <_strtod_l+0x452>
 8005000:	4c64      	ldr	r4, [pc, #400]	; (8005194 <_strtod_l+0x5a4>)
 8005002:	f1c5 050f 	rsb	r5, r5, #15
 8005006:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800500a:	4652      	mov	r2, sl
 800500c:	465b      	mov	r3, fp
 800500e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005012:	f7fb fb01 	bl	8000618 <__aeabi_dmul>
 8005016:	9b06      	ldr	r3, [sp, #24]
 8005018:	1b5d      	subs	r5, r3, r5
 800501a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800501e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8005022:	e7e3      	b.n	8004fec <_strtod_l+0x3fc>
 8005024:	9b06      	ldr	r3, [sp, #24]
 8005026:	3316      	adds	r3, #22
 8005028:	db0b      	blt.n	8005042 <_strtod_l+0x452>
 800502a:	9b05      	ldr	r3, [sp, #20]
 800502c:	1b9e      	subs	r6, r3, r6
 800502e:	4b59      	ldr	r3, [pc, #356]	; (8005194 <_strtod_l+0x5a4>)
 8005030:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8005034:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005038:	4650      	mov	r0, sl
 800503a:	4659      	mov	r1, fp
 800503c:	f7fb fc16 	bl	800086c <__aeabi_ddiv>
 8005040:	e7d6      	b.n	8004ff0 <_strtod_l+0x400>
 8005042:	9b06      	ldr	r3, [sp, #24]
 8005044:	eba5 0808 	sub.w	r8, r5, r8
 8005048:	4498      	add	r8, r3
 800504a:	f1b8 0f00 	cmp.w	r8, #0
 800504e:	dd74      	ble.n	800513a <_strtod_l+0x54a>
 8005050:	f018 030f 	ands.w	r3, r8, #15
 8005054:	d00a      	beq.n	800506c <_strtod_l+0x47c>
 8005056:	494f      	ldr	r1, [pc, #316]	; (8005194 <_strtod_l+0x5a4>)
 8005058:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800505c:	4652      	mov	r2, sl
 800505e:	465b      	mov	r3, fp
 8005060:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005064:	f7fb fad8 	bl	8000618 <__aeabi_dmul>
 8005068:	4682      	mov	sl, r0
 800506a:	468b      	mov	fp, r1
 800506c:	f038 080f 	bics.w	r8, r8, #15
 8005070:	d04f      	beq.n	8005112 <_strtod_l+0x522>
 8005072:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8005076:	dd22      	ble.n	80050be <_strtod_l+0x4ce>
 8005078:	2500      	movs	r5, #0
 800507a:	462e      	mov	r6, r5
 800507c:	9507      	str	r5, [sp, #28]
 800507e:	9505      	str	r5, [sp, #20]
 8005080:	2322      	movs	r3, #34	; 0x22
 8005082:	f8df b118 	ldr.w	fp, [pc, #280]	; 800519c <_strtod_l+0x5ac>
 8005086:	6023      	str	r3, [r4, #0]
 8005088:	f04f 0a00 	mov.w	sl, #0
 800508c:	9b07      	ldr	r3, [sp, #28]
 800508e:	2b00      	cmp	r3, #0
 8005090:	f43f adf2 	beq.w	8004c78 <_strtod_l+0x88>
 8005094:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005096:	4620      	mov	r0, r4
 8005098:	f001 fe90 	bl	8006dbc <_Bfree>
 800509c:	9905      	ldr	r1, [sp, #20]
 800509e:	4620      	mov	r0, r4
 80050a0:	f001 fe8c 	bl	8006dbc <_Bfree>
 80050a4:	4631      	mov	r1, r6
 80050a6:	4620      	mov	r0, r4
 80050a8:	f001 fe88 	bl	8006dbc <_Bfree>
 80050ac:	9907      	ldr	r1, [sp, #28]
 80050ae:	4620      	mov	r0, r4
 80050b0:	f001 fe84 	bl	8006dbc <_Bfree>
 80050b4:	4629      	mov	r1, r5
 80050b6:	4620      	mov	r0, r4
 80050b8:	f001 fe80 	bl	8006dbc <_Bfree>
 80050bc:	e5dc      	b.n	8004c78 <_strtod_l+0x88>
 80050be:	4b36      	ldr	r3, [pc, #216]	; (8005198 <_strtod_l+0x5a8>)
 80050c0:	9304      	str	r3, [sp, #16]
 80050c2:	2300      	movs	r3, #0
 80050c4:	ea4f 1828 	mov.w	r8, r8, asr #4
 80050c8:	4650      	mov	r0, sl
 80050ca:	4659      	mov	r1, fp
 80050cc:	4699      	mov	r9, r3
 80050ce:	f1b8 0f01 	cmp.w	r8, #1
 80050d2:	dc21      	bgt.n	8005118 <_strtod_l+0x528>
 80050d4:	b10b      	cbz	r3, 80050da <_strtod_l+0x4ea>
 80050d6:	4682      	mov	sl, r0
 80050d8:	468b      	mov	fp, r1
 80050da:	4b2f      	ldr	r3, [pc, #188]	; (8005198 <_strtod_l+0x5a8>)
 80050dc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80050e0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80050e4:	4652      	mov	r2, sl
 80050e6:	465b      	mov	r3, fp
 80050e8:	e9d9 0100 	ldrd	r0, r1, [r9]
 80050ec:	f7fb fa94 	bl	8000618 <__aeabi_dmul>
 80050f0:	4b2a      	ldr	r3, [pc, #168]	; (800519c <_strtod_l+0x5ac>)
 80050f2:	460a      	mov	r2, r1
 80050f4:	400b      	ands	r3, r1
 80050f6:	492a      	ldr	r1, [pc, #168]	; (80051a0 <_strtod_l+0x5b0>)
 80050f8:	428b      	cmp	r3, r1
 80050fa:	4682      	mov	sl, r0
 80050fc:	d8bc      	bhi.n	8005078 <_strtod_l+0x488>
 80050fe:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8005102:	428b      	cmp	r3, r1
 8005104:	bf86      	itte	hi
 8005106:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80051a4 <_strtod_l+0x5b4>
 800510a:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 800510e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8005112:	2300      	movs	r3, #0
 8005114:	9304      	str	r3, [sp, #16]
 8005116:	e084      	b.n	8005222 <_strtod_l+0x632>
 8005118:	f018 0f01 	tst.w	r8, #1
 800511c:	d005      	beq.n	800512a <_strtod_l+0x53a>
 800511e:	9b04      	ldr	r3, [sp, #16]
 8005120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005124:	f7fb fa78 	bl	8000618 <__aeabi_dmul>
 8005128:	2301      	movs	r3, #1
 800512a:	9a04      	ldr	r2, [sp, #16]
 800512c:	3208      	adds	r2, #8
 800512e:	f109 0901 	add.w	r9, r9, #1
 8005132:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005136:	9204      	str	r2, [sp, #16]
 8005138:	e7c9      	b.n	80050ce <_strtod_l+0x4de>
 800513a:	d0ea      	beq.n	8005112 <_strtod_l+0x522>
 800513c:	f1c8 0800 	rsb	r8, r8, #0
 8005140:	f018 020f 	ands.w	r2, r8, #15
 8005144:	d00a      	beq.n	800515c <_strtod_l+0x56c>
 8005146:	4b13      	ldr	r3, [pc, #76]	; (8005194 <_strtod_l+0x5a4>)
 8005148:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800514c:	4650      	mov	r0, sl
 800514e:	4659      	mov	r1, fp
 8005150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005154:	f7fb fb8a 	bl	800086c <__aeabi_ddiv>
 8005158:	4682      	mov	sl, r0
 800515a:	468b      	mov	fp, r1
 800515c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8005160:	d0d7      	beq.n	8005112 <_strtod_l+0x522>
 8005162:	f1b8 0f1f 	cmp.w	r8, #31
 8005166:	dd1f      	ble.n	80051a8 <_strtod_l+0x5b8>
 8005168:	2500      	movs	r5, #0
 800516a:	462e      	mov	r6, r5
 800516c:	9507      	str	r5, [sp, #28]
 800516e:	9505      	str	r5, [sp, #20]
 8005170:	2322      	movs	r3, #34	; 0x22
 8005172:	f04f 0a00 	mov.w	sl, #0
 8005176:	f04f 0b00 	mov.w	fp, #0
 800517a:	6023      	str	r3, [r4, #0]
 800517c:	e786      	b.n	800508c <_strtod_l+0x49c>
 800517e:	bf00      	nop
 8005180:	080087c9 	.word	0x080087c9
 8005184:	0800880c 	.word	0x0800880c
 8005188:	080087c1 	.word	0x080087c1
 800518c:	0800894c 	.word	0x0800894c
 8005190:	08008bf8 	.word	0x08008bf8
 8005194:	08008ad8 	.word	0x08008ad8
 8005198:	08008ab0 	.word	0x08008ab0
 800519c:	7ff00000 	.word	0x7ff00000
 80051a0:	7ca00000 	.word	0x7ca00000
 80051a4:	7fefffff 	.word	0x7fefffff
 80051a8:	f018 0310 	ands.w	r3, r8, #16
 80051ac:	bf18      	it	ne
 80051ae:	236a      	movne	r3, #106	; 0x6a
 80051b0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8005560 <_strtod_l+0x970>
 80051b4:	9304      	str	r3, [sp, #16]
 80051b6:	4650      	mov	r0, sl
 80051b8:	4659      	mov	r1, fp
 80051ba:	2300      	movs	r3, #0
 80051bc:	f018 0f01 	tst.w	r8, #1
 80051c0:	d004      	beq.n	80051cc <_strtod_l+0x5dc>
 80051c2:	e9d9 2300 	ldrd	r2, r3, [r9]
 80051c6:	f7fb fa27 	bl	8000618 <__aeabi_dmul>
 80051ca:	2301      	movs	r3, #1
 80051cc:	ea5f 0868 	movs.w	r8, r8, asr #1
 80051d0:	f109 0908 	add.w	r9, r9, #8
 80051d4:	d1f2      	bne.n	80051bc <_strtod_l+0x5cc>
 80051d6:	b10b      	cbz	r3, 80051dc <_strtod_l+0x5ec>
 80051d8:	4682      	mov	sl, r0
 80051da:	468b      	mov	fp, r1
 80051dc:	9b04      	ldr	r3, [sp, #16]
 80051de:	b1c3      	cbz	r3, 8005212 <_strtod_l+0x622>
 80051e0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80051e4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	4659      	mov	r1, fp
 80051ec:	dd11      	ble.n	8005212 <_strtod_l+0x622>
 80051ee:	2b1f      	cmp	r3, #31
 80051f0:	f340 8124 	ble.w	800543c <_strtod_l+0x84c>
 80051f4:	2b34      	cmp	r3, #52	; 0x34
 80051f6:	bfde      	ittt	le
 80051f8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80051fc:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8005200:	fa03 f202 	lslle.w	r2, r3, r2
 8005204:	f04f 0a00 	mov.w	sl, #0
 8005208:	bfcc      	ite	gt
 800520a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800520e:	ea02 0b01 	andle.w	fp, r2, r1
 8005212:	2200      	movs	r2, #0
 8005214:	2300      	movs	r3, #0
 8005216:	4650      	mov	r0, sl
 8005218:	4659      	mov	r1, fp
 800521a:	f7fb fc65 	bl	8000ae8 <__aeabi_dcmpeq>
 800521e:	2800      	cmp	r0, #0
 8005220:	d1a2      	bne.n	8005168 <_strtod_l+0x578>
 8005222:	9b07      	ldr	r3, [sp, #28]
 8005224:	9300      	str	r3, [sp, #0]
 8005226:	9908      	ldr	r1, [sp, #32]
 8005228:	462b      	mov	r3, r5
 800522a:	463a      	mov	r2, r7
 800522c:	4620      	mov	r0, r4
 800522e:	f001 fe2d 	bl	8006e8c <__s2b>
 8005232:	9007      	str	r0, [sp, #28]
 8005234:	2800      	cmp	r0, #0
 8005236:	f43f af1f 	beq.w	8005078 <_strtod_l+0x488>
 800523a:	9b05      	ldr	r3, [sp, #20]
 800523c:	1b9e      	subs	r6, r3, r6
 800523e:	9b06      	ldr	r3, [sp, #24]
 8005240:	2b00      	cmp	r3, #0
 8005242:	bfb4      	ite	lt
 8005244:	4633      	movlt	r3, r6
 8005246:	2300      	movge	r3, #0
 8005248:	930c      	str	r3, [sp, #48]	; 0x30
 800524a:	9b06      	ldr	r3, [sp, #24]
 800524c:	2500      	movs	r5, #0
 800524e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005252:	9312      	str	r3, [sp, #72]	; 0x48
 8005254:	462e      	mov	r6, r5
 8005256:	9b07      	ldr	r3, [sp, #28]
 8005258:	4620      	mov	r0, r4
 800525a:	6859      	ldr	r1, [r3, #4]
 800525c:	f001 fd6e 	bl	8006d3c <_Balloc>
 8005260:	9005      	str	r0, [sp, #20]
 8005262:	2800      	cmp	r0, #0
 8005264:	f43f af0c 	beq.w	8005080 <_strtod_l+0x490>
 8005268:	9b07      	ldr	r3, [sp, #28]
 800526a:	691a      	ldr	r2, [r3, #16]
 800526c:	3202      	adds	r2, #2
 800526e:	f103 010c 	add.w	r1, r3, #12
 8005272:	0092      	lsls	r2, r2, #2
 8005274:	300c      	adds	r0, #12
 8005276:	f001 fd53 	bl	8006d20 <memcpy>
 800527a:	ec4b ab10 	vmov	d0, sl, fp
 800527e:	aa1a      	add	r2, sp, #104	; 0x68
 8005280:	a919      	add	r1, sp, #100	; 0x64
 8005282:	4620      	mov	r0, r4
 8005284:	f002 f948 	bl	8007518 <__d2b>
 8005288:	ec4b ab18 	vmov	d8, sl, fp
 800528c:	9018      	str	r0, [sp, #96]	; 0x60
 800528e:	2800      	cmp	r0, #0
 8005290:	f43f aef6 	beq.w	8005080 <_strtod_l+0x490>
 8005294:	2101      	movs	r1, #1
 8005296:	4620      	mov	r0, r4
 8005298:	f001 fe92 	bl	8006fc0 <__i2b>
 800529c:	4606      	mov	r6, r0
 800529e:	2800      	cmp	r0, #0
 80052a0:	f43f aeee 	beq.w	8005080 <_strtod_l+0x490>
 80052a4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80052a6:	9904      	ldr	r1, [sp, #16]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	bfab      	itete	ge
 80052ac:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80052ae:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80052b0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80052b2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80052b6:	bfac      	ite	ge
 80052b8:	eb03 0902 	addge.w	r9, r3, r2
 80052bc:	1ad7      	sublt	r7, r2, r3
 80052be:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80052c0:	eba3 0801 	sub.w	r8, r3, r1
 80052c4:	4490      	add	r8, r2
 80052c6:	4ba1      	ldr	r3, [pc, #644]	; (800554c <_strtod_l+0x95c>)
 80052c8:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80052cc:	4598      	cmp	r8, r3
 80052ce:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80052d2:	f280 80c7 	bge.w	8005464 <_strtod_l+0x874>
 80052d6:	eba3 0308 	sub.w	r3, r3, r8
 80052da:	2b1f      	cmp	r3, #31
 80052dc:	eba2 0203 	sub.w	r2, r2, r3
 80052e0:	f04f 0101 	mov.w	r1, #1
 80052e4:	f300 80b1 	bgt.w	800544a <_strtod_l+0x85a>
 80052e8:	fa01 f303 	lsl.w	r3, r1, r3
 80052ec:	930d      	str	r3, [sp, #52]	; 0x34
 80052ee:	2300      	movs	r3, #0
 80052f0:	9308      	str	r3, [sp, #32]
 80052f2:	eb09 0802 	add.w	r8, r9, r2
 80052f6:	9b04      	ldr	r3, [sp, #16]
 80052f8:	45c1      	cmp	r9, r8
 80052fa:	4417      	add	r7, r2
 80052fc:	441f      	add	r7, r3
 80052fe:	464b      	mov	r3, r9
 8005300:	bfa8      	it	ge
 8005302:	4643      	movge	r3, r8
 8005304:	42bb      	cmp	r3, r7
 8005306:	bfa8      	it	ge
 8005308:	463b      	movge	r3, r7
 800530a:	2b00      	cmp	r3, #0
 800530c:	bfc2      	ittt	gt
 800530e:	eba8 0803 	subgt.w	r8, r8, r3
 8005312:	1aff      	subgt	r7, r7, r3
 8005314:	eba9 0903 	subgt.w	r9, r9, r3
 8005318:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800531a:	2b00      	cmp	r3, #0
 800531c:	dd17      	ble.n	800534e <_strtod_l+0x75e>
 800531e:	4631      	mov	r1, r6
 8005320:	461a      	mov	r2, r3
 8005322:	4620      	mov	r0, r4
 8005324:	f001 ff0c 	bl	8007140 <__pow5mult>
 8005328:	4606      	mov	r6, r0
 800532a:	2800      	cmp	r0, #0
 800532c:	f43f aea8 	beq.w	8005080 <_strtod_l+0x490>
 8005330:	4601      	mov	r1, r0
 8005332:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8005334:	4620      	mov	r0, r4
 8005336:	f001 fe59 	bl	8006fec <__multiply>
 800533a:	900b      	str	r0, [sp, #44]	; 0x2c
 800533c:	2800      	cmp	r0, #0
 800533e:	f43f ae9f 	beq.w	8005080 <_strtod_l+0x490>
 8005342:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005344:	4620      	mov	r0, r4
 8005346:	f001 fd39 	bl	8006dbc <_Bfree>
 800534a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800534c:	9318      	str	r3, [sp, #96]	; 0x60
 800534e:	f1b8 0f00 	cmp.w	r8, #0
 8005352:	f300 808c 	bgt.w	800546e <_strtod_l+0x87e>
 8005356:	9b06      	ldr	r3, [sp, #24]
 8005358:	2b00      	cmp	r3, #0
 800535a:	dd08      	ble.n	800536e <_strtod_l+0x77e>
 800535c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800535e:	9905      	ldr	r1, [sp, #20]
 8005360:	4620      	mov	r0, r4
 8005362:	f001 feed 	bl	8007140 <__pow5mult>
 8005366:	9005      	str	r0, [sp, #20]
 8005368:	2800      	cmp	r0, #0
 800536a:	f43f ae89 	beq.w	8005080 <_strtod_l+0x490>
 800536e:	2f00      	cmp	r7, #0
 8005370:	dd08      	ble.n	8005384 <_strtod_l+0x794>
 8005372:	9905      	ldr	r1, [sp, #20]
 8005374:	463a      	mov	r2, r7
 8005376:	4620      	mov	r0, r4
 8005378:	f001 ff3c 	bl	80071f4 <__lshift>
 800537c:	9005      	str	r0, [sp, #20]
 800537e:	2800      	cmp	r0, #0
 8005380:	f43f ae7e 	beq.w	8005080 <_strtod_l+0x490>
 8005384:	f1b9 0f00 	cmp.w	r9, #0
 8005388:	dd08      	ble.n	800539c <_strtod_l+0x7ac>
 800538a:	4631      	mov	r1, r6
 800538c:	464a      	mov	r2, r9
 800538e:	4620      	mov	r0, r4
 8005390:	f001 ff30 	bl	80071f4 <__lshift>
 8005394:	4606      	mov	r6, r0
 8005396:	2800      	cmp	r0, #0
 8005398:	f43f ae72 	beq.w	8005080 <_strtod_l+0x490>
 800539c:	9a05      	ldr	r2, [sp, #20]
 800539e:	9918      	ldr	r1, [sp, #96]	; 0x60
 80053a0:	4620      	mov	r0, r4
 80053a2:	f001 ffb3 	bl	800730c <__mdiff>
 80053a6:	4605      	mov	r5, r0
 80053a8:	2800      	cmp	r0, #0
 80053aa:	f43f ae69 	beq.w	8005080 <_strtod_l+0x490>
 80053ae:	68c3      	ldr	r3, [r0, #12]
 80053b0:	930b      	str	r3, [sp, #44]	; 0x2c
 80053b2:	2300      	movs	r3, #0
 80053b4:	60c3      	str	r3, [r0, #12]
 80053b6:	4631      	mov	r1, r6
 80053b8:	f001 ff8c 	bl	80072d4 <__mcmp>
 80053bc:	2800      	cmp	r0, #0
 80053be:	da60      	bge.n	8005482 <_strtod_l+0x892>
 80053c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80053c2:	ea53 030a 	orrs.w	r3, r3, sl
 80053c6:	f040 8082 	bne.w	80054ce <_strtod_l+0x8de>
 80053ca:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d17d      	bne.n	80054ce <_strtod_l+0x8de>
 80053d2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80053d6:	0d1b      	lsrs	r3, r3, #20
 80053d8:	051b      	lsls	r3, r3, #20
 80053da:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80053de:	d976      	bls.n	80054ce <_strtod_l+0x8de>
 80053e0:	696b      	ldr	r3, [r5, #20]
 80053e2:	b913      	cbnz	r3, 80053ea <_strtod_l+0x7fa>
 80053e4:	692b      	ldr	r3, [r5, #16]
 80053e6:	2b01      	cmp	r3, #1
 80053e8:	dd71      	ble.n	80054ce <_strtod_l+0x8de>
 80053ea:	4629      	mov	r1, r5
 80053ec:	2201      	movs	r2, #1
 80053ee:	4620      	mov	r0, r4
 80053f0:	f001 ff00 	bl	80071f4 <__lshift>
 80053f4:	4631      	mov	r1, r6
 80053f6:	4605      	mov	r5, r0
 80053f8:	f001 ff6c 	bl	80072d4 <__mcmp>
 80053fc:	2800      	cmp	r0, #0
 80053fe:	dd66      	ble.n	80054ce <_strtod_l+0x8de>
 8005400:	9904      	ldr	r1, [sp, #16]
 8005402:	4a53      	ldr	r2, [pc, #332]	; (8005550 <_strtod_l+0x960>)
 8005404:	465b      	mov	r3, fp
 8005406:	2900      	cmp	r1, #0
 8005408:	f000 8081 	beq.w	800550e <_strtod_l+0x91e>
 800540c:	ea02 010b 	and.w	r1, r2, fp
 8005410:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8005414:	dc7b      	bgt.n	800550e <_strtod_l+0x91e>
 8005416:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800541a:	f77f aea9 	ble.w	8005170 <_strtod_l+0x580>
 800541e:	4b4d      	ldr	r3, [pc, #308]	; (8005554 <_strtod_l+0x964>)
 8005420:	4650      	mov	r0, sl
 8005422:	4659      	mov	r1, fp
 8005424:	2200      	movs	r2, #0
 8005426:	f7fb f8f7 	bl	8000618 <__aeabi_dmul>
 800542a:	460b      	mov	r3, r1
 800542c:	4303      	orrs	r3, r0
 800542e:	bf08      	it	eq
 8005430:	2322      	moveq	r3, #34	; 0x22
 8005432:	4682      	mov	sl, r0
 8005434:	468b      	mov	fp, r1
 8005436:	bf08      	it	eq
 8005438:	6023      	streq	r3, [r4, #0]
 800543a:	e62b      	b.n	8005094 <_strtod_l+0x4a4>
 800543c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005440:	fa02 f303 	lsl.w	r3, r2, r3
 8005444:	ea03 0a0a 	and.w	sl, r3, sl
 8005448:	e6e3      	b.n	8005212 <_strtod_l+0x622>
 800544a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800544e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8005452:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8005456:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800545a:	fa01 f308 	lsl.w	r3, r1, r8
 800545e:	9308      	str	r3, [sp, #32]
 8005460:	910d      	str	r1, [sp, #52]	; 0x34
 8005462:	e746      	b.n	80052f2 <_strtod_l+0x702>
 8005464:	2300      	movs	r3, #0
 8005466:	9308      	str	r3, [sp, #32]
 8005468:	2301      	movs	r3, #1
 800546a:	930d      	str	r3, [sp, #52]	; 0x34
 800546c:	e741      	b.n	80052f2 <_strtod_l+0x702>
 800546e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005470:	4642      	mov	r2, r8
 8005472:	4620      	mov	r0, r4
 8005474:	f001 febe 	bl	80071f4 <__lshift>
 8005478:	9018      	str	r0, [sp, #96]	; 0x60
 800547a:	2800      	cmp	r0, #0
 800547c:	f47f af6b 	bne.w	8005356 <_strtod_l+0x766>
 8005480:	e5fe      	b.n	8005080 <_strtod_l+0x490>
 8005482:	465f      	mov	r7, fp
 8005484:	d16e      	bne.n	8005564 <_strtod_l+0x974>
 8005486:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005488:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800548c:	b342      	cbz	r2, 80054e0 <_strtod_l+0x8f0>
 800548e:	4a32      	ldr	r2, [pc, #200]	; (8005558 <_strtod_l+0x968>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d128      	bne.n	80054e6 <_strtod_l+0x8f6>
 8005494:	9b04      	ldr	r3, [sp, #16]
 8005496:	4651      	mov	r1, sl
 8005498:	b1eb      	cbz	r3, 80054d6 <_strtod_l+0x8e6>
 800549a:	4b2d      	ldr	r3, [pc, #180]	; (8005550 <_strtod_l+0x960>)
 800549c:	403b      	ands	r3, r7
 800549e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80054a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80054a6:	d819      	bhi.n	80054dc <_strtod_l+0x8ec>
 80054a8:	0d1b      	lsrs	r3, r3, #20
 80054aa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80054ae:	fa02 f303 	lsl.w	r3, r2, r3
 80054b2:	4299      	cmp	r1, r3
 80054b4:	d117      	bne.n	80054e6 <_strtod_l+0x8f6>
 80054b6:	4b29      	ldr	r3, [pc, #164]	; (800555c <_strtod_l+0x96c>)
 80054b8:	429f      	cmp	r7, r3
 80054ba:	d102      	bne.n	80054c2 <_strtod_l+0x8d2>
 80054bc:	3101      	adds	r1, #1
 80054be:	f43f addf 	beq.w	8005080 <_strtod_l+0x490>
 80054c2:	4b23      	ldr	r3, [pc, #140]	; (8005550 <_strtod_l+0x960>)
 80054c4:	403b      	ands	r3, r7
 80054c6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80054ca:	f04f 0a00 	mov.w	sl, #0
 80054ce:	9b04      	ldr	r3, [sp, #16]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d1a4      	bne.n	800541e <_strtod_l+0x82e>
 80054d4:	e5de      	b.n	8005094 <_strtod_l+0x4a4>
 80054d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80054da:	e7ea      	b.n	80054b2 <_strtod_l+0x8c2>
 80054dc:	4613      	mov	r3, r2
 80054de:	e7e8      	b.n	80054b2 <_strtod_l+0x8c2>
 80054e0:	ea53 030a 	orrs.w	r3, r3, sl
 80054e4:	d08c      	beq.n	8005400 <_strtod_l+0x810>
 80054e6:	9b08      	ldr	r3, [sp, #32]
 80054e8:	b1db      	cbz	r3, 8005522 <_strtod_l+0x932>
 80054ea:	423b      	tst	r3, r7
 80054ec:	d0ef      	beq.n	80054ce <_strtod_l+0x8de>
 80054ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80054f0:	9a04      	ldr	r2, [sp, #16]
 80054f2:	4650      	mov	r0, sl
 80054f4:	4659      	mov	r1, fp
 80054f6:	b1c3      	cbz	r3, 800552a <_strtod_l+0x93a>
 80054f8:	f7ff fb5e 	bl	8004bb8 <sulp>
 80054fc:	4602      	mov	r2, r0
 80054fe:	460b      	mov	r3, r1
 8005500:	ec51 0b18 	vmov	r0, r1, d8
 8005504:	f7fa fed2 	bl	80002ac <__adddf3>
 8005508:	4682      	mov	sl, r0
 800550a:	468b      	mov	fp, r1
 800550c:	e7df      	b.n	80054ce <_strtod_l+0x8de>
 800550e:	4013      	ands	r3, r2
 8005510:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8005514:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8005518:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800551c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8005520:	e7d5      	b.n	80054ce <_strtod_l+0x8de>
 8005522:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005524:	ea13 0f0a 	tst.w	r3, sl
 8005528:	e7e0      	b.n	80054ec <_strtod_l+0x8fc>
 800552a:	f7ff fb45 	bl	8004bb8 <sulp>
 800552e:	4602      	mov	r2, r0
 8005530:	460b      	mov	r3, r1
 8005532:	ec51 0b18 	vmov	r0, r1, d8
 8005536:	f7fa feb7 	bl	80002a8 <__aeabi_dsub>
 800553a:	2200      	movs	r2, #0
 800553c:	2300      	movs	r3, #0
 800553e:	4682      	mov	sl, r0
 8005540:	468b      	mov	fp, r1
 8005542:	f7fb fad1 	bl	8000ae8 <__aeabi_dcmpeq>
 8005546:	2800      	cmp	r0, #0
 8005548:	d0c1      	beq.n	80054ce <_strtod_l+0x8de>
 800554a:	e611      	b.n	8005170 <_strtod_l+0x580>
 800554c:	fffffc02 	.word	0xfffffc02
 8005550:	7ff00000 	.word	0x7ff00000
 8005554:	39500000 	.word	0x39500000
 8005558:	000fffff 	.word	0x000fffff
 800555c:	7fefffff 	.word	0x7fefffff
 8005560:	08008820 	.word	0x08008820
 8005564:	4631      	mov	r1, r6
 8005566:	4628      	mov	r0, r5
 8005568:	f002 f832 	bl	80075d0 <__ratio>
 800556c:	ec59 8b10 	vmov	r8, r9, d0
 8005570:	ee10 0a10 	vmov	r0, s0
 8005574:	2200      	movs	r2, #0
 8005576:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800557a:	4649      	mov	r1, r9
 800557c:	f7fb fac8 	bl	8000b10 <__aeabi_dcmple>
 8005580:	2800      	cmp	r0, #0
 8005582:	d07a      	beq.n	800567a <_strtod_l+0xa8a>
 8005584:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005586:	2b00      	cmp	r3, #0
 8005588:	d04a      	beq.n	8005620 <_strtod_l+0xa30>
 800558a:	4b95      	ldr	r3, [pc, #596]	; (80057e0 <_strtod_l+0xbf0>)
 800558c:	2200      	movs	r2, #0
 800558e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005592:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80057e0 <_strtod_l+0xbf0>
 8005596:	f04f 0800 	mov.w	r8, #0
 800559a:	4b92      	ldr	r3, [pc, #584]	; (80057e4 <_strtod_l+0xbf4>)
 800559c:	403b      	ands	r3, r7
 800559e:	930d      	str	r3, [sp, #52]	; 0x34
 80055a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80055a2:	4b91      	ldr	r3, [pc, #580]	; (80057e8 <_strtod_l+0xbf8>)
 80055a4:	429a      	cmp	r2, r3
 80055a6:	f040 80b0 	bne.w	800570a <_strtod_l+0xb1a>
 80055aa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80055ae:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80055b2:	ec4b ab10 	vmov	d0, sl, fp
 80055b6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80055ba:	f001 ff31 	bl	8007420 <__ulp>
 80055be:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80055c2:	ec53 2b10 	vmov	r2, r3, d0
 80055c6:	f7fb f827 	bl	8000618 <__aeabi_dmul>
 80055ca:	4652      	mov	r2, sl
 80055cc:	465b      	mov	r3, fp
 80055ce:	f7fa fe6d 	bl	80002ac <__adddf3>
 80055d2:	460b      	mov	r3, r1
 80055d4:	4983      	ldr	r1, [pc, #524]	; (80057e4 <_strtod_l+0xbf4>)
 80055d6:	4a85      	ldr	r2, [pc, #532]	; (80057ec <_strtod_l+0xbfc>)
 80055d8:	4019      	ands	r1, r3
 80055da:	4291      	cmp	r1, r2
 80055dc:	4682      	mov	sl, r0
 80055de:	d960      	bls.n	80056a2 <_strtod_l+0xab2>
 80055e0:	ee18 3a90 	vmov	r3, s17
 80055e4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d104      	bne.n	80055f6 <_strtod_l+0xa06>
 80055ec:	ee18 3a10 	vmov	r3, s16
 80055f0:	3301      	adds	r3, #1
 80055f2:	f43f ad45 	beq.w	8005080 <_strtod_l+0x490>
 80055f6:	f8df b200 	ldr.w	fp, [pc, #512]	; 80057f8 <_strtod_l+0xc08>
 80055fa:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80055fe:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005600:	4620      	mov	r0, r4
 8005602:	f001 fbdb 	bl	8006dbc <_Bfree>
 8005606:	9905      	ldr	r1, [sp, #20]
 8005608:	4620      	mov	r0, r4
 800560a:	f001 fbd7 	bl	8006dbc <_Bfree>
 800560e:	4631      	mov	r1, r6
 8005610:	4620      	mov	r0, r4
 8005612:	f001 fbd3 	bl	8006dbc <_Bfree>
 8005616:	4629      	mov	r1, r5
 8005618:	4620      	mov	r0, r4
 800561a:	f001 fbcf 	bl	8006dbc <_Bfree>
 800561e:	e61a      	b.n	8005256 <_strtod_l+0x666>
 8005620:	f1ba 0f00 	cmp.w	sl, #0
 8005624:	d11b      	bne.n	800565e <_strtod_l+0xa6e>
 8005626:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800562a:	b9f3      	cbnz	r3, 800566a <_strtod_l+0xa7a>
 800562c:	4b6c      	ldr	r3, [pc, #432]	; (80057e0 <_strtod_l+0xbf0>)
 800562e:	2200      	movs	r2, #0
 8005630:	4640      	mov	r0, r8
 8005632:	4649      	mov	r1, r9
 8005634:	f7fb fa62 	bl	8000afc <__aeabi_dcmplt>
 8005638:	b9d0      	cbnz	r0, 8005670 <_strtod_l+0xa80>
 800563a:	4640      	mov	r0, r8
 800563c:	4649      	mov	r1, r9
 800563e:	4b6c      	ldr	r3, [pc, #432]	; (80057f0 <_strtod_l+0xc00>)
 8005640:	2200      	movs	r2, #0
 8005642:	f7fa ffe9 	bl	8000618 <__aeabi_dmul>
 8005646:	4680      	mov	r8, r0
 8005648:	4689      	mov	r9, r1
 800564a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800564e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8005652:	9315      	str	r3, [sp, #84]	; 0x54
 8005654:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8005658:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800565c:	e79d      	b.n	800559a <_strtod_l+0x9aa>
 800565e:	f1ba 0f01 	cmp.w	sl, #1
 8005662:	d102      	bne.n	800566a <_strtod_l+0xa7a>
 8005664:	2f00      	cmp	r7, #0
 8005666:	f43f ad83 	beq.w	8005170 <_strtod_l+0x580>
 800566a:	4b62      	ldr	r3, [pc, #392]	; (80057f4 <_strtod_l+0xc04>)
 800566c:	2200      	movs	r2, #0
 800566e:	e78e      	b.n	800558e <_strtod_l+0x99e>
 8005670:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80057f0 <_strtod_l+0xc00>
 8005674:	f04f 0800 	mov.w	r8, #0
 8005678:	e7e7      	b.n	800564a <_strtod_l+0xa5a>
 800567a:	4b5d      	ldr	r3, [pc, #372]	; (80057f0 <_strtod_l+0xc00>)
 800567c:	4640      	mov	r0, r8
 800567e:	4649      	mov	r1, r9
 8005680:	2200      	movs	r2, #0
 8005682:	f7fa ffc9 	bl	8000618 <__aeabi_dmul>
 8005686:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005688:	4680      	mov	r8, r0
 800568a:	4689      	mov	r9, r1
 800568c:	b933      	cbnz	r3, 800569c <_strtod_l+0xaac>
 800568e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005692:	900e      	str	r0, [sp, #56]	; 0x38
 8005694:	930f      	str	r3, [sp, #60]	; 0x3c
 8005696:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800569a:	e7dd      	b.n	8005658 <_strtod_l+0xa68>
 800569c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80056a0:	e7f9      	b.n	8005696 <_strtod_l+0xaa6>
 80056a2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80056a6:	9b04      	ldr	r3, [sp, #16]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d1a8      	bne.n	80055fe <_strtod_l+0xa0e>
 80056ac:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80056b0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80056b2:	0d1b      	lsrs	r3, r3, #20
 80056b4:	051b      	lsls	r3, r3, #20
 80056b6:	429a      	cmp	r2, r3
 80056b8:	d1a1      	bne.n	80055fe <_strtod_l+0xa0e>
 80056ba:	4640      	mov	r0, r8
 80056bc:	4649      	mov	r1, r9
 80056be:	f7fb fb0b 	bl	8000cd8 <__aeabi_d2lz>
 80056c2:	f7fa ff7b 	bl	80005bc <__aeabi_l2d>
 80056c6:	4602      	mov	r2, r0
 80056c8:	460b      	mov	r3, r1
 80056ca:	4640      	mov	r0, r8
 80056cc:	4649      	mov	r1, r9
 80056ce:	f7fa fdeb 	bl	80002a8 <__aeabi_dsub>
 80056d2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80056d4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80056d8:	ea43 030a 	orr.w	r3, r3, sl
 80056dc:	4313      	orrs	r3, r2
 80056de:	4680      	mov	r8, r0
 80056e0:	4689      	mov	r9, r1
 80056e2:	d055      	beq.n	8005790 <_strtod_l+0xba0>
 80056e4:	a336      	add	r3, pc, #216	; (adr r3, 80057c0 <_strtod_l+0xbd0>)
 80056e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ea:	f7fb fa07 	bl	8000afc <__aeabi_dcmplt>
 80056ee:	2800      	cmp	r0, #0
 80056f0:	f47f acd0 	bne.w	8005094 <_strtod_l+0x4a4>
 80056f4:	a334      	add	r3, pc, #208	; (adr r3, 80057c8 <_strtod_l+0xbd8>)
 80056f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056fa:	4640      	mov	r0, r8
 80056fc:	4649      	mov	r1, r9
 80056fe:	f7fb fa1b 	bl	8000b38 <__aeabi_dcmpgt>
 8005702:	2800      	cmp	r0, #0
 8005704:	f43f af7b 	beq.w	80055fe <_strtod_l+0xa0e>
 8005708:	e4c4      	b.n	8005094 <_strtod_l+0x4a4>
 800570a:	9b04      	ldr	r3, [sp, #16]
 800570c:	b333      	cbz	r3, 800575c <_strtod_l+0xb6c>
 800570e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005710:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005714:	d822      	bhi.n	800575c <_strtod_l+0xb6c>
 8005716:	a32e      	add	r3, pc, #184	; (adr r3, 80057d0 <_strtod_l+0xbe0>)
 8005718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800571c:	4640      	mov	r0, r8
 800571e:	4649      	mov	r1, r9
 8005720:	f7fb f9f6 	bl	8000b10 <__aeabi_dcmple>
 8005724:	b1a0      	cbz	r0, 8005750 <_strtod_l+0xb60>
 8005726:	4649      	mov	r1, r9
 8005728:	4640      	mov	r0, r8
 800572a:	f7fb fa4d 	bl	8000bc8 <__aeabi_d2uiz>
 800572e:	2801      	cmp	r0, #1
 8005730:	bf38      	it	cc
 8005732:	2001      	movcc	r0, #1
 8005734:	f7fa fef6 	bl	8000524 <__aeabi_ui2d>
 8005738:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800573a:	4680      	mov	r8, r0
 800573c:	4689      	mov	r9, r1
 800573e:	bb23      	cbnz	r3, 800578a <_strtod_l+0xb9a>
 8005740:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005744:	9010      	str	r0, [sp, #64]	; 0x40
 8005746:	9311      	str	r3, [sp, #68]	; 0x44
 8005748:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800574c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005750:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005752:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005754:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8005758:	1a9b      	subs	r3, r3, r2
 800575a:	9309      	str	r3, [sp, #36]	; 0x24
 800575c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005760:	eeb0 0a48 	vmov.f32	s0, s16
 8005764:	eef0 0a68 	vmov.f32	s1, s17
 8005768:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800576c:	f001 fe58 	bl	8007420 <__ulp>
 8005770:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005774:	ec53 2b10 	vmov	r2, r3, d0
 8005778:	f7fa ff4e 	bl	8000618 <__aeabi_dmul>
 800577c:	ec53 2b18 	vmov	r2, r3, d8
 8005780:	f7fa fd94 	bl	80002ac <__adddf3>
 8005784:	4682      	mov	sl, r0
 8005786:	468b      	mov	fp, r1
 8005788:	e78d      	b.n	80056a6 <_strtod_l+0xab6>
 800578a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800578e:	e7db      	b.n	8005748 <_strtod_l+0xb58>
 8005790:	a311      	add	r3, pc, #68	; (adr r3, 80057d8 <_strtod_l+0xbe8>)
 8005792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005796:	f7fb f9b1 	bl	8000afc <__aeabi_dcmplt>
 800579a:	e7b2      	b.n	8005702 <_strtod_l+0xb12>
 800579c:	2300      	movs	r3, #0
 800579e:	930a      	str	r3, [sp, #40]	; 0x28
 80057a0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80057a2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80057a4:	6013      	str	r3, [r2, #0]
 80057a6:	f7ff ba6b 	b.w	8004c80 <_strtod_l+0x90>
 80057aa:	2a65      	cmp	r2, #101	; 0x65
 80057ac:	f43f ab5f 	beq.w	8004e6e <_strtod_l+0x27e>
 80057b0:	2a45      	cmp	r2, #69	; 0x45
 80057b2:	f43f ab5c 	beq.w	8004e6e <_strtod_l+0x27e>
 80057b6:	2301      	movs	r3, #1
 80057b8:	f7ff bb94 	b.w	8004ee4 <_strtod_l+0x2f4>
 80057bc:	f3af 8000 	nop.w
 80057c0:	94a03595 	.word	0x94a03595
 80057c4:	3fdfffff 	.word	0x3fdfffff
 80057c8:	35afe535 	.word	0x35afe535
 80057cc:	3fe00000 	.word	0x3fe00000
 80057d0:	ffc00000 	.word	0xffc00000
 80057d4:	41dfffff 	.word	0x41dfffff
 80057d8:	94a03595 	.word	0x94a03595
 80057dc:	3fcfffff 	.word	0x3fcfffff
 80057e0:	3ff00000 	.word	0x3ff00000
 80057e4:	7ff00000 	.word	0x7ff00000
 80057e8:	7fe00000 	.word	0x7fe00000
 80057ec:	7c9fffff 	.word	0x7c9fffff
 80057f0:	3fe00000 	.word	0x3fe00000
 80057f4:	bff00000 	.word	0xbff00000
 80057f8:	7fefffff 	.word	0x7fefffff

080057fc <_strtod_r>:
 80057fc:	4b01      	ldr	r3, [pc, #4]	; (8005804 <_strtod_r+0x8>)
 80057fe:	f7ff b9f7 	b.w	8004bf0 <_strtod_l>
 8005802:	bf00      	nop
 8005804:	20000074 	.word	0x20000074

08005808 <_strtol_l.constprop.0>:
 8005808:	2b01      	cmp	r3, #1
 800580a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800580e:	d001      	beq.n	8005814 <_strtol_l.constprop.0+0xc>
 8005810:	2b24      	cmp	r3, #36	; 0x24
 8005812:	d906      	bls.n	8005822 <_strtol_l.constprop.0+0x1a>
 8005814:	f7fe fafe 	bl	8003e14 <__errno>
 8005818:	2316      	movs	r3, #22
 800581a:	6003      	str	r3, [r0, #0]
 800581c:	2000      	movs	r0, #0
 800581e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005822:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8005908 <_strtol_l.constprop.0+0x100>
 8005826:	460d      	mov	r5, r1
 8005828:	462e      	mov	r6, r5
 800582a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800582e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8005832:	f017 0708 	ands.w	r7, r7, #8
 8005836:	d1f7      	bne.n	8005828 <_strtol_l.constprop.0+0x20>
 8005838:	2c2d      	cmp	r4, #45	; 0x2d
 800583a:	d132      	bne.n	80058a2 <_strtol_l.constprop.0+0x9a>
 800583c:	782c      	ldrb	r4, [r5, #0]
 800583e:	2701      	movs	r7, #1
 8005840:	1cb5      	adds	r5, r6, #2
 8005842:	2b00      	cmp	r3, #0
 8005844:	d05b      	beq.n	80058fe <_strtol_l.constprop.0+0xf6>
 8005846:	2b10      	cmp	r3, #16
 8005848:	d109      	bne.n	800585e <_strtol_l.constprop.0+0x56>
 800584a:	2c30      	cmp	r4, #48	; 0x30
 800584c:	d107      	bne.n	800585e <_strtol_l.constprop.0+0x56>
 800584e:	782c      	ldrb	r4, [r5, #0]
 8005850:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005854:	2c58      	cmp	r4, #88	; 0x58
 8005856:	d14d      	bne.n	80058f4 <_strtol_l.constprop.0+0xec>
 8005858:	786c      	ldrb	r4, [r5, #1]
 800585a:	2310      	movs	r3, #16
 800585c:	3502      	adds	r5, #2
 800585e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8005862:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8005866:	f04f 0c00 	mov.w	ip, #0
 800586a:	fbb8 f9f3 	udiv	r9, r8, r3
 800586e:	4666      	mov	r6, ip
 8005870:	fb03 8a19 	mls	sl, r3, r9, r8
 8005874:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8005878:	f1be 0f09 	cmp.w	lr, #9
 800587c:	d816      	bhi.n	80058ac <_strtol_l.constprop.0+0xa4>
 800587e:	4674      	mov	r4, lr
 8005880:	42a3      	cmp	r3, r4
 8005882:	dd24      	ble.n	80058ce <_strtol_l.constprop.0+0xc6>
 8005884:	f1bc 0f00 	cmp.w	ip, #0
 8005888:	db1e      	blt.n	80058c8 <_strtol_l.constprop.0+0xc0>
 800588a:	45b1      	cmp	r9, r6
 800588c:	d31c      	bcc.n	80058c8 <_strtol_l.constprop.0+0xc0>
 800588e:	d101      	bne.n	8005894 <_strtol_l.constprop.0+0x8c>
 8005890:	45a2      	cmp	sl, r4
 8005892:	db19      	blt.n	80058c8 <_strtol_l.constprop.0+0xc0>
 8005894:	fb06 4603 	mla	r6, r6, r3, r4
 8005898:	f04f 0c01 	mov.w	ip, #1
 800589c:	f815 4b01 	ldrb.w	r4, [r5], #1
 80058a0:	e7e8      	b.n	8005874 <_strtol_l.constprop.0+0x6c>
 80058a2:	2c2b      	cmp	r4, #43	; 0x2b
 80058a4:	bf04      	itt	eq
 80058a6:	782c      	ldrbeq	r4, [r5, #0]
 80058a8:	1cb5      	addeq	r5, r6, #2
 80058aa:	e7ca      	b.n	8005842 <_strtol_l.constprop.0+0x3a>
 80058ac:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80058b0:	f1be 0f19 	cmp.w	lr, #25
 80058b4:	d801      	bhi.n	80058ba <_strtol_l.constprop.0+0xb2>
 80058b6:	3c37      	subs	r4, #55	; 0x37
 80058b8:	e7e2      	b.n	8005880 <_strtol_l.constprop.0+0x78>
 80058ba:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80058be:	f1be 0f19 	cmp.w	lr, #25
 80058c2:	d804      	bhi.n	80058ce <_strtol_l.constprop.0+0xc6>
 80058c4:	3c57      	subs	r4, #87	; 0x57
 80058c6:	e7db      	b.n	8005880 <_strtol_l.constprop.0+0x78>
 80058c8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80058cc:	e7e6      	b.n	800589c <_strtol_l.constprop.0+0x94>
 80058ce:	f1bc 0f00 	cmp.w	ip, #0
 80058d2:	da05      	bge.n	80058e0 <_strtol_l.constprop.0+0xd8>
 80058d4:	2322      	movs	r3, #34	; 0x22
 80058d6:	6003      	str	r3, [r0, #0]
 80058d8:	4646      	mov	r6, r8
 80058da:	b942      	cbnz	r2, 80058ee <_strtol_l.constprop.0+0xe6>
 80058dc:	4630      	mov	r0, r6
 80058de:	e79e      	b.n	800581e <_strtol_l.constprop.0+0x16>
 80058e0:	b107      	cbz	r7, 80058e4 <_strtol_l.constprop.0+0xdc>
 80058e2:	4276      	negs	r6, r6
 80058e4:	2a00      	cmp	r2, #0
 80058e6:	d0f9      	beq.n	80058dc <_strtol_l.constprop.0+0xd4>
 80058e8:	f1bc 0f00 	cmp.w	ip, #0
 80058ec:	d000      	beq.n	80058f0 <_strtol_l.constprop.0+0xe8>
 80058ee:	1e69      	subs	r1, r5, #1
 80058f0:	6011      	str	r1, [r2, #0]
 80058f2:	e7f3      	b.n	80058dc <_strtol_l.constprop.0+0xd4>
 80058f4:	2430      	movs	r4, #48	; 0x30
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d1b1      	bne.n	800585e <_strtol_l.constprop.0+0x56>
 80058fa:	2308      	movs	r3, #8
 80058fc:	e7af      	b.n	800585e <_strtol_l.constprop.0+0x56>
 80058fe:	2c30      	cmp	r4, #48	; 0x30
 8005900:	d0a5      	beq.n	800584e <_strtol_l.constprop.0+0x46>
 8005902:	230a      	movs	r3, #10
 8005904:	e7ab      	b.n	800585e <_strtol_l.constprop.0+0x56>
 8005906:	bf00      	nop
 8005908:	08008849 	.word	0x08008849

0800590c <_strtol_r>:
 800590c:	f7ff bf7c 	b.w	8005808 <_strtol_l.constprop.0>

08005910 <quorem>:
 8005910:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005914:	6903      	ldr	r3, [r0, #16]
 8005916:	690c      	ldr	r4, [r1, #16]
 8005918:	42a3      	cmp	r3, r4
 800591a:	4607      	mov	r7, r0
 800591c:	f2c0 8081 	blt.w	8005a22 <quorem+0x112>
 8005920:	3c01      	subs	r4, #1
 8005922:	f101 0814 	add.w	r8, r1, #20
 8005926:	f100 0514 	add.w	r5, r0, #20
 800592a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800592e:	9301      	str	r3, [sp, #4]
 8005930:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005934:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005938:	3301      	adds	r3, #1
 800593a:	429a      	cmp	r2, r3
 800593c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005940:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005944:	fbb2 f6f3 	udiv	r6, r2, r3
 8005948:	d331      	bcc.n	80059ae <quorem+0x9e>
 800594a:	f04f 0e00 	mov.w	lr, #0
 800594e:	4640      	mov	r0, r8
 8005950:	46ac      	mov	ip, r5
 8005952:	46f2      	mov	sl, lr
 8005954:	f850 2b04 	ldr.w	r2, [r0], #4
 8005958:	b293      	uxth	r3, r2
 800595a:	fb06 e303 	mla	r3, r6, r3, lr
 800595e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005962:	b29b      	uxth	r3, r3
 8005964:	ebaa 0303 	sub.w	r3, sl, r3
 8005968:	f8dc a000 	ldr.w	sl, [ip]
 800596c:	0c12      	lsrs	r2, r2, #16
 800596e:	fa13 f38a 	uxtah	r3, r3, sl
 8005972:	fb06 e202 	mla	r2, r6, r2, lr
 8005976:	9300      	str	r3, [sp, #0]
 8005978:	9b00      	ldr	r3, [sp, #0]
 800597a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800597e:	b292      	uxth	r2, r2
 8005980:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005984:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005988:	f8bd 3000 	ldrh.w	r3, [sp]
 800598c:	4581      	cmp	r9, r0
 800598e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005992:	f84c 3b04 	str.w	r3, [ip], #4
 8005996:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800599a:	d2db      	bcs.n	8005954 <quorem+0x44>
 800599c:	f855 300b 	ldr.w	r3, [r5, fp]
 80059a0:	b92b      	cbnz	r3, 80059ae <quorem+0x9e>
 80059a2:	9b01      	ldr	r3, [sp, #4]
 80059a4:	3b04      	subs	r3, #4
 80059a6:	429d      	cmp	r5, r3
 80059a8:	461a      	mov	r2, r3
 80059aa:	d32e      	bcc.n	8005a0a <quorem+0xfa>
 80059ac:	613c      	str	r4, [r7, #16]
 80059ae:	4638      	mov	r0, r7
 80059b0:	f001 fc90 	bl	80072d4 <__mcmp>
 80059b4:	2800      	cmp	r0, #0
 80059b6:	db24      	blt.n	8005a02 <quorem+0xf2>
 80059b8:	3601      	adds	r6, #1
 80059ba:	4628      	mov	r0, r5
 80059bc:	f04f 0c00 	mov.w	ip, #0
 80059c0:	f858 2b04 	ldr.w	r2, [r8], #4
 80059c4:	f8d0 e000 	ldr.w	lr, [r0]
 80059c8:	b293      	uxth	r3, r2
 80059ca:	ebac 0303 	sub.w	r3, ip, r3
 80059ce:	0c12      	lsrs	r2, r2, #16
 80059d0:	fa13 f38e 	uxtah	r3, r3, lr
 80059d4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80059d8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80059dc:	b29b      	uxth	r3, r3
 80059de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80059e2:	45c1      	cmp	r9, r8
 80059e4:	f840 3b04 	str.w	r3, [r0], #4
 80059e8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80059ec:	d2e8      	bcs.n	80059c0 <quorem+0xb0>
 80059ee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80059f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80059f6:	b922      	cbnz	r2, 8005a02 <quorem+0xf2>
 80059f8:	3b04      	subs	r3, #4
 80059fa:	429d      	cmp	r5, r3
 80059fc:	461a      	mov	r2, r3
 80059fe:	d30a      	bcc.n	8005a16 <quorem+0x106>
 8005a00:	613c      	str	r4, [r7, #16]
 8005a02:	4630      	mov	r0, r6
 8005a04:	b003      	add	sp, #12
 8005a06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a0a:	6812      	ldr	r2, [r2, #0]
 8005a0c:	3b04      	subs	r3, #4
 8005a0e:	2a00      	cmp	r2, #0
 8005a10:	d1cc      	bne.n	80059ac <quorem+0x9c>
 8005a12:	3c01      	subs	r4, #1
 8005a14:	e7c7      	b.n	80059a6 <quorem+0x96>
 8005a16:	6812      	ldr	r2, [r2, #0]
 8005a18:	3b04      	subs	r3, #4
 8005a1a:	2a00      	cmp	r2, #0
 8005a1c:	d1f0      	bne.n	8005a00 <quorem+0xf0>
 8005a1e:	3c01      	subs	r4, #1
 8005a20:	e7eb      	b.n	80059fa <quorem+0xea>
 8005a22:	2000      	movs	r0, #0
 8005a24:	e7ee      	b.n	8005a04 <quorem+0xf4>
	...

08005a28 <_dtoa_r>:
 8005a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a2c:	ed2d 8b04 	vpush	{d8-d9}
 8005a30:	ec57 6b10 	vmov	r6, r7, d0
 8005a34:	b093      	sub	sp, #76	; 0x4c
 8005a36:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005a38:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005a3c:	9106      	str	r1, [sp, #24]
 8005a3e:	ee10 aa10 	vmov	sl, s0
 8005a42:	4604      	mov	r4, r0
 8005a44:	9209      	str	r2, [sp, #36]	; 0x24
 8005a46:	930c      	str	r3, [sp, #48]	; 0x30
 8005a48:	46bb      	mov	fp, r7
 8005a4a:	b975      	cbnz	r5, 8005a6a <_dtoa_r+0x42>
 8005a4c:	2010      	movs	r0, #16
 8005a4e:	f001 f94d 	bl	8006cec <malloc>
 8005a52:	4602      	mov	r2, r0
 8005a54:	6260      	str	r0, [r4, #36]	; 0x24
 8005a56:	b920      	cbnz	r0, 8005a62 <_dtoa_r+0x3a>
 8005a58:	4ba7      	ldr	r3, [pc, #668]	; (8005cf8 <_dtoa_r+0x2d0>)
 8005a5a:	21ea      	movs	r1, #234	; 0xea
 8005a5c:	48a7      	ldr	r0, [pc, #668]	; (8005cfc <_dtoa_r+0x2d4>)
 8005a5e:	f002 f8bd 	bl	8007bdc <__assert_func>
 8005a62:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005a66:	6005      	str	r5, [r0, #0]
 8005a68:	60c5      	str	r5, [r0, #12]
 8005a6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a6c:	6819      	ldr	r1, [r3, #0]
 8005a6e:	b151      	cbz	r1, 8005a86 <_dtoa_r+0x5e>
 8005a70:	685a      	ldr	r2, [r3, #4]
 8005a72:	604a      	str	r2, [r1, #4]
 8005a74:	2301      	movs	r3, #1
 8005a76:	4093      	lsls	r3, r2
 8005a78:	608b      	str	r3, [r1, #8]
 8005a7a:	4620      	mov	r0, r4
 8005a7c:	f001 f99e 	bl	8006dbc <_Bfree>
 8005a80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a82:	2200      	movs	r2, #0
 8005a84:	601a      	str	r2, [r3, #0]
 8005a86:	1e3b      	subs	r3, r7, #0
 8005a88:	bfaa      	itet	ge
 8005a8a:	2300      	movge	r3, #0
 8005a8c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8005a90:	f8c8 3000 	strge.w	r3, [r8]
 8005a94:	4b9a      	ldr	r3, [pc, #616]	; (8005d00 <_dtoa_r+0x2d8>)
 8005a96:	bfbc      	itt	lt
 8005a98:	2201      	movlt	r2, #1
 8005a9a:	f8c8 2000 	strlt.w	r2, [r8]
 8005a9e:	ea33 030b 	bics.w	r3, r3, fp
 8005aa2:	d11b      	bne.n	8005adc <_dtoa_r+0xb4>
 8005aa4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005aa6:	f242 730f 	movw	r3, #9999	; 0x270f
 8005aaa:	6013      	str	r3, [r2, #0]
 8005aac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005ab0:	4333      	orrs	r3, r6
 8005ab2:	f000 8592 	beq.w	80065da <_dtoa_r+0xbb2>
 8005ab6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005ab8:	b963      	cbnz	r3, 8005ad4 <_dtoa_r+0xac>
 8005aba:	4b92      	ldr	r3, [pc, #584]	; (8005d04 <_dtoa_r+0x2dc>)
 8005abc:	e022      	b.n	8005b04 <_dtoa_r+0xdc>
 8005abe:	4b92      	ldr	r3, [pc, #584]	; (8005d08 <_dtoa_r+0x2e0>)
 8005ac0:	9301      	str	r3, [sp, #4]
 8005ac2:	3308      	adds	r3, #8
 8005ac4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005ac6:	6013      	str	r3, [r2, #0]
 8005ac8:	9801      	ldr	r0, [sp, #4]
 8005aca:	b013      	add	sp, #76	; 0x4c
 8005acc:	ecbd 8b04 	vpop	{d8-d9}
 8005ad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ad4:	4b8b      	ldr	r3, [pc, #556]	; (8005d04 <_dtoa_r+0x2dc>)
 8005ad6:	9301      	str	r3, [sp, #4]
 8005ad8:	3303      	adds	r3, #3
 8005ada:	e7f3      	b.n	8005ac4 <_dtoa_r+0x9c>
 8005adc:	2200      	movs	r2, #0
 8005ade:	2300      	movs	r3, #0
 8005ae0:	4650      	mov	r0, sl
 8005ae2:	4659      	mov	r1, fp
 8005ae4:	f7fb f800 	bl	8000ae8 <__aeabi_dcmpeq>
 8005ae8:	ec4b ab19 	vmov	d9, sl, fp
 8005aec:	4680      	mov	r8, r0
 8005aee:	b158      	cbz	r0, 8005b08 <_dtoa_r+0xe0>
 8005af0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005af2:	2301      	movs	r3, #1
 8005af4:	6013      	str	r3, [r2, #0]
 8005af6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	f000 856b 	beq.w	80065d4 <_dtoa_r+0xbac>
 8005afe:	4883      	ldr	r0, [pc, #524]	; (8005d0c <_dtoa_r+0x2e4>)
 8005b00:	6018      	str	r0, [r3, #0]
 8005b02:	1e43      	subs	r3, r0, #1
 8005b04:	9301      	str	r3, [sp, #4]
 8005b06:	e7df      	b.n	8005ac8 <_dtoa_r+0xa0>
 8005b08:	ec4b ab10 	vmov	d0, sl, fp
 8005b0c:	aa10      	add	r2, sp, #64	; 0x40
 8005b0e:	a911      	add	r1, sp, #68	; 0x44
 8005b10:	4620      	mov	r0, r4
 8005b12:	f001 fd01 	bl	8007518 <__d2b>
 8005b16:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8005b1a:	ee08 0a10 	vmov	s16, r0
 8005b1e:	2d00      	cmp	r5, #0
 8005b20:	f000 8084 	beq.w	8005c2c <_dtoa_r+0x204>
 8005b24:	ee19 3a90 	vmov	r3, s19
 8005b28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b2c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005b30:	4656      	mov	r6, sl
 8005b32:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005b36:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005b3a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8005b3e:	4b74      	ldr	r3, [pc, #464]	; (8005d10 <_dtoa_r+0x2e8>)
 8005b40:	2200      	movs	r2, #0
 8005b42:	4630      	mov	r0, r6
 8005b44:	4639      	mov	r1, r7
 8005b46:	f7fa fbaf 	bl	80002a8 <__aeabi_dsub>
 8005b4a:	a365      	add	r3, pc, #404	; (adr r3, 8005ce0 <_dtoa_r+0x2b8>)
 8005b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b50:	f7fa fd62 	bl	8000618 <__aeabi_dmul>
 8005b54:	a364      	add	r3, pc, #400	; (adr r3, 8005ce8 <_dtoa_r+0x2c0>)
 8005b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b5a:	f7fa fba7 	bl	80002ac <__adddf3>
 8005b5e:	4606      	mov	r6, r0
 8005b60:	4628      	mov	r0, r5
 8005b62:	460f      	mov	r7, r1
 8005b64:	f7fa fcee 	bl	8000544 <__aeabi_i2d>
 8005b68:	a361      	add	r3, pc, #388	; (adr r3, 8005cf0 <_dtoa_r+0x2c8>)
 8005b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b6e:	f7fa fd53 	bl	8000618 <__aeabi_dmul>
 8005b72:	4602      	mov	r2, r0
 8005b74:	460b      	mov	r3, r1
 8005b76:	4630      	mov	r0, r6
 8005b78:	4639      	mov	r1, r7
 8005b7a:	f7fa fb97 	bl	80002ac <__adddf3>
 8005b7e:	4606      	mov	r6, r0
 8005b80:	460f      	mov	r7, r1
 8005b82:	f7fa fff9 	bl	8000b78 <__aeabi_d2iz>
 8005b86:	2200      	movs	r2, #0
 8005b88:	9000      	str	r0, [sp, #0]
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	4630      	mov	r0, r6
 8005b8e:	4639      	mov	r1, r7
 8005b90:	f7fa ffb4 	bl	8000afc <__aeabi_dcmplt>
 8005b94:	b150      	cbz	r0, 8005bac <_dtoa_r+0x184>
 8005b96:	9800      	ldr	r0, [sp, #0]
 8005b98:	f7fa fcd4 	bl	8000544 <__aeabi_i2d>
 8005b9c:	4632      	mov	r2, r6
 8005b9e:	463b      	mov	r3, r7
 8005ba0:	f7fa ffa2 	bl	8000ae8 <__aeabi_dcmpeq>
 8005ba4:	b910      	cbnz	r0, 8005bac <_dtoa_r+0x184>
 8005ba6:	9b00      	ldr	r3, [sp, #0]
 8005ba8:	3b01      	subs	r3, #1
 8005baa:	9300      	str	r3, [sp, #0]
 8005bac:	9b00      	ldr	r3, [sp, #0]
 8005bae:	2b16      	cmp	r3, #22
 8005bb0:	d85a      	bhi.n	8005c68 <_dtoa_r+0x240>
 8005bb2:	9a00      	ldr	r2, [sp, #0]
 8005bb4:	4b57      	ldr	r3, [pc, #348]	; (8005d14 <_dtoa_r+0x2ec>)
 8005bb6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bbe:	ec51 0b19 	vmov	r0, r1, d9
 8005bc2:	f7fa ff9b 	bl	8000afc <__aeabi_dcmplt>
 8005bc6:	2800      	cmp	r0, #0
 8005bc8:	d050      	beq.n	8005c6c <_dtoa_r+0x244>
 8005bca:	9b00      	ldr	r3, [sp, #0]
 8005bcc:	3b01      	subs	r3, #1
 8005bce:	9300      	str	r3, [sp, #0]
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	930b      	str	r3, [sp, #44]	; 0x2c
 8005bd4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005bd6:	1b5d      	subs	r5, r3, r5
 8005bd8:	1e6b      	subs	r3, r5, #1
 8005bda:	9305      	str	r3, [sp, #20]
 8005bdc:	bf45      	ittet	mi
 8005bde:	f1c5 0301 	rsbmi	r3, r5, #1
 8005be2:	9304      	strmi	r3, [sp, #16]
 8005be4:	2300      	movpl	r3, #0
 8005be6:	2300      	movmi	r3, #0
 8005be8:	bf4c      	ite	mi
 8005bea:	9305      	strmi	r3, [sp, #20]
 8005bec:	9304      	strpl	r3, [sp, #16]
 8005bee:	9b00      	ldr	r3, [sp, #0]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	db3d      	blt.n	8005c70 <_dtoa_r+0x248>
 8005bf4:	9b05      	ldr	r3, [sp, #20]
 8005bf6:	9a00      	ldr	r2, [sp, #0]
 8005bf8:	920a      	str	r2, [sp, #40]	; 0x28
 8005bfa:	4413      	add	r3, r2
 8005bfc:	9305      	str	r3, [sp, #20]
 8005bfe:	2300      	movs	r3, #0
 8005c00:	9307      	str	r3, [sp, #28]
 8005c02:	9b06      	ldr	r3, [sp, #24]
 8005c04:	2b09      	cmp	r3, #9
 8005c06:	f200 8089 	bhi.w	8005d1c <_dtoa_r+0x2f4>
 8005c0a:	2b05      	cmp	r3, #5
 8005c0c:	bfc4      	itt	gt
 8005c0e:	3b04      	subgt	r3, #4
 8005c10:	9306      	strgt	r3, [sp, #24]
 8005c12:	9b06      	ldr	r3, [sp, #24]
 8005c14:	f1a3 0302 	sub.w	r3, r3, #2
 8005c18:	bfcc      	ite	gt
 8005c1a:	2500      	movgt	r5, #0
 8005c1c:	2501      	movle	r5, #1
 8005c1e:	2b03      	cmp	r3, #3
 8005c20:	f200 8087 	bhi.w	8005d32 <_dtoa_r+0x30a>
 8005c24:	e8df f003 	tbb	[pc, r3]
 8005c28:	59383a2d 	.word	0x59383a2d
 8005c2c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005c30:	441d      	add	r5, r3
 8005c32:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005c36:	2b20      	cmp	r3, #32
 8005c38:	bfc1      	itttt	gt
 8005c3a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005c3e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005c42:	fa0b f303 	lslgt.w	r3, fp, r3
 8005c46:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005c4a:	bfda      	itte	le
 8005c4c:	f1c3 0320 	rsble	r3, r3, #32
 8005c50:	fa06 f003 	lslle.w	r0, r6, r3
 8005c54:	4318      	orrgt	r0, r3
 8005c56:	f7fa fc65 	bl	8000524 <__aeabi_ui2d>
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	4606      	mov	r6, r0
 8005c5e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005c62:	3d01      	subs	r5, #1
 8005c64:	930e      	str	r3, [sp, #56]	; 0x38
 8005c66:	e76a      	b.n	8005b3e <_dtoa_r+0x116>
 8005c68:	2301      	movs	r3, #1
 8005c6a:	e7b2      	b.n	8005bd2 <_dtoa_r+0x1aa>
 8005c6c:	900b      	str	r0, [sp, #44]	; 0x2c
 8005c6e:	e7b1      	b.n	8005bd4 <_dtoa_r+0x1ac>
 8005c70:	9b04      	ldr	r3, [sp, #16]
 8005c72:	9a00      	ldr	r2, [sp, #0]
 8005c74:	1a9b      	subs	r3, r3, r2
 8005c76:	9304      	str	r3, [sp, #16]
 8005c78:	4253      	negs	r3, r2
 8005c7a:	9307      	str	r3, [sp, #28]
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	930a      	str	r3, [sp, #40]	; 0x28
 8005c80:	e7bf      	b.n	8005c02 <_dtoa_r+0x1da>
 8005c82:	2300      	movs	r3, #0
 8005c84:	9308      	str	r3, [sp, #32]
 8005c86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	dc55      	bgt.n	8005d38 <_dtoa_r+0x310>
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005c92:	461a      	mov	r2, r3
 8005c94:	9209      	str	r2, [sp, #36]	; 0x24
 8005c96:	e00c      	b.n	8005cb2 <_dtoa_r+0x28a>
 8005c98:	2301      	movs	r3, #1
 8005c9a:	e7f3      	b.n	8005c84 <_dtoa_r+0x25c>
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ca0:	9308      	str	r3, [sp, #32]
 8005ca2:	9b00      	ldr	r3, [sp, #0]
 8005ca4:	4413      	add	r3, r2
 8005ca6:	9302      	str	r3, [sp, #8]
 8005ca8:	3301      	adds	r3, #1
 8005caa:	2b01      	cmp	r3, #1
 8005cac:	9303      	str	r3, [sp, #12]
 8005cae:	bfb8      	it	lt
 8005cb0:	2301      	movlt	r3, #1
 8005cb2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	6042      	str	r2, [r0, #4]
 8005cb8:	2204      	movs	r2, #4
 8005cba:	f102 0614 	add.w	r6, r2, #20
 8005cbe:	429e      	cmp	r6, r3
 8005cc0:	6841      	ldr	r1, [r0, #4]
 8005cc2:	d93d      	bls.n	8005d40 <_dtoa_r+0x318>
 8005cc4:	4620      	mov	r0, r4
 8005cc6:	f001 f839 	bl	8006d3c <_Balloc>
 8005cca:	9001      	str	r0, [sp, #4]
 8005ccc:	2800      	cmp	r0, #0
 8005cce:	d13b      	bne.n	8005d48 <_dtoa_r+0x320>
 8005cd0:	4b11      	ldr	r3, [pc, #68]	; (8005d18 <_dtoa_r+0x2f0>)
 8005cd2:	4602      	mov	r2, r0
 8005cd4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005cd8:	e6c0      	b.n	8005a5c <_dtoa_r+0x34>
 8005cda:	2301      	movs	r3, #1
 8005cdc:	e7df      	b.n	8005c9e <_dtoa_r+0x276>
 8005cde:	bf00      	nop
 8005ce0:	636f4361 	.word	0x636f4361
 8005ce4:	3fd287a7 	.word	0x3fd287a7
 8005ce8:	8b60c8b3 	.word	0x8b60c8b3
 8005cec:	3fc68a28 	.word	0x3fc68a28
 8005cf0:	509f79fb 	.word	0x509f79fb
 8005cf4:	3fd34413 	.word	0x3fd34413
 8005cf8:	08008956 	.word	0x08008956
 8005cfc:	0800896d 	.word	0x0800896d
 8005d00:	7ff00000 	.word	0x7ff00000
 8005d04:	08008952 	.word	0x08008952
 8005d08:	08008949 	.word	0x08008949
 8005d0c:	080087cd 	.word	0x080087cd
 8005d10:	3ff80000 	.word	0x3ff80000
 8005d14:	08008ad8 	.word	0x08008ad8
 8005d18:	080089c8 	.word	0x080089c8
 8005d1c:	2501      	movs	r5, #1
 8005d1e:	2300      	movs	r3, #0
 8005d20:	9306      	str	r3, [sp, #24]
 8005d22:	9508      	str	r5, [sp, #32]
 8005d24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d28:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	2312      	movs	r3, #18
 8005d30:	e7b0      	b.n	8005c94 <_dtoa_r+0x26c>
 8005d32:	2301      	movs	r3, #1
 8005d34:	9308      	str	r3, [sp, #32]
 8005d36:	e7f5      	b.n	8005d24 <_dtoa_r+0x2fc>
 8005d38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d3a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005d3e:	e7b8      	b.n	8005cb2 <_dtoa_r+0x28a>
 8005d40:	3101      	adds	r1, #1
 8005d42:	6041      	str	r1, [r0, #4]
 8005d44:	0052      	lsls	r2, r2, #1
 8005d46:	e7b8      	b.n	8005cba <_dtoa_r+0x292>
 8005d48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d4a:	9a01      	ldr	r2, [sp, #4]
 8005d4c:	601a      	str	r2, [r3, #0]
 8005d4e:	9b03      	ldr	r3, [sp, #12]
 8005d50:	2b0e      	cmp	r3, #14
 8005d52:	f200 809d 	bhi.w	8005e90 <_dtoa_r+0x468>
 8005d56:	2d00      	cmp	r5, #0
 8005d58:	f000 809a 	beq.w	8005e90 <_dtoa_r+0x468>
 8005d5c:	9b00      	ldr	r3, [sp, #0]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	dd32      	ble.n	8005dc8 <_dtoa_r+0x3a0>
 8005d62:	4ab7      	ldr	r2, [pc, #732]	; (8006040 <_dtoa_r+0x618>)
 8005d64:	f003 030f 	and.w	r3, r3, #15
 8005d68:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005d6c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005d70:	9b00      	ldr	r3, [sp, #0]
 8005d72:	05d8      	lsls	r0, r3, #23
 8005d74:	ea4f 1723 	mov.w	r7, r3, asr #4
 8005d78:	d516      	bpl.n	8005da8 <_dtoa_r+0x380>
 8005d7a:	4bb2      	ldr	r3, [pc, #712]	; (8006044 <_dtoa_r+0x61c>)
 8005d7c:	ec51 0b19 	vmov	r0, r1, d9
 8005d80:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005d84:	f7fa fd72 	bl	800086c <__aeabi_ddiv>
 8005d88:	f007 070f 	and.w	r7, r7, #15
 8005d8c:	4682      	mov	sl, r0
 8005d8e:	468b      	mov	fp, r1
 8005d90:	2503      	movs	r5, #3
 8005d92:	4eac      	ldr	r6, [pc, #688]	; (8006044 <_dtoa_r+0x61c>)
 8005d94:	b957      	cbnz	r7, 8005dac <_dtoa_r+0x384>
 8005d96:	4642      	mov	r2, r8
 8005d98:	464b      	mov	r3, r9
 8005d9a:	4650      	mov	r0, sl
 8005d9c:	4659      	mov	r1, fp
 8005d9e:	f7fa fd65 	bl	800086c <__aeabi_ddiv>
 8005da2:	4682      	mov	sl, r0
 8005da4:	468b      	mov	fp, r1
 8005da6:	e028      	b.n	8005dfa <_dtoa_r+0x3d2>
 8005da8:	2502      	movs	r5, #2
 8005daa:	e7f2      	b.n	8005d92 <_dtoa_r+0x36a>
 8005dac:	07f9      	lsls	r1, r7, #31
 8005dae:	d508      	bpl.n	8005dc2 <_dtoa_r+0x39a>
 8005db0:	4640      	mov	r0, r8
 8005db2:	4649      	mov	r1, r9
 8005db4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005db8:	f7fa fc2e 	bl	8000618 <__aeabi_dmul>
 8005dbc:	3501      	adds	r5, #1
 8005dbe:	4680      	mov	r8, r0
 8005dc0:	4689      	mov	r9, r1
 8005dc2:	107f      	asrs	r7, r7, #1
 8005dc4:	3608      	adds	r6, #8
 8005dc6:	e7e5      	b.n	8005d94 <_dtoa_r+0x36c>
 8005dc8:	f000 809b 	beq.w	8005f02 <_dtoa_r+0x4da>
 8005dcc:	9b00      	ldr	r3, [sp, #0]
 8005dce:	4f9d      	ldr	r7, [pc, #628]	; (8006044 <_dtoa_r+0x61c>)
 8005dd0:	425e      	negs	r6, r3
 8005dd2:	4b9b      	ldr	r3, [pc, #620]	; (8006040 <_dtoa_r+0x618>)
 8005dd4:	f006 020f 	and.w	r2, r6, #15
 8005dd8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005de0:	ec51 0b19 	vmov	r0, r1, d9
 8005de4:	f7fa fc18 	bl	8000618 <__aeabi_dmul>
 8005de8:	1136      	asrs	r6, r6, #4
 8005dea:	4682      	mov	sl, r0
 8005dec:	468b      	mov	fp, r1
 8005dee:	2300      	movs	r3, #0
 8005df0:	2502      	movs	r5, #2
 8005df2:	2e00      	cmp	r6, #0
 8005df4:	d17a      	bne.n	8005eec <_dtoa_r+0x4c4>
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d1d3      	bne.n	8005da2 <_dtoa_r+0x37a>
 8005dfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	f000 8082 	beq.w	8005f06 <_dtoa_r+0x4de>
 8005e02:	4b91      	ldr	r3, [pc, #580]	; (8006048 <_dtoa_r+0x620>)
 8005e04:	2200      	movs	r2, #0
 8005e06:	4650      	mov	r0, sl
 8005e08:	4659      	mov	r1, fp
 8005e0a:	f7fa fe77 	bl	8000afc <__aeabi_dcmplt>
 8005e0e:	2800      	cmp	r0, #0
 8005e10:	d079      	beq.n	8005f06 <_dtoa_r+0x4de>
 8005e12:	9b03      	ldr	r3, [sp, #12]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d076      	beq.n	8005f06 <_dtoa_r+0x4de>
 8005e18:	9b02      	ldr	r3, [sp, #8]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	dd36      	ble.n	8005e8c <_dtoa_r+0x464>
 8005e1e:	9b00      	ldr	r3, [sp, #0]
 8005e20:	4650      	mov	r0, sl
 8005e22:	4659      	mov	r1, fp
 8005e24:	1e5f      	subs	r7, r3, #1
 8005e26:	2200      	movs	r2, #0
 8005e28:	4b88      	ldr	r3, [pc, #544]	; (800604c <_dtoa_r+0x624>)
 8005e2a:	f7fa fbf5 	bl	8000618 <__aeabi_dmul>
 8005e2e:	9e02      	ldr	r6, [sp, #8]
 8005e30:	4682      	mov	sl, r0
 8005e32:	468b      	mov	fp, r1
 8005e34:	3501      	adds	r5, #1
 8005e36:	4628      	mov	r0, r5
 8005e38:	f7fa fb84 	bl	8000544 <__aeabi_i2d>
 8005e3c:	4652      	mov	r2, sl
 8005e3e:	465b      	mov	r3, fp
 8005e40:	f7fa fbea 	bl	8000618 <__aeabi_dmul>
 8005e44:	4b82      	ldr	r3, [pc, #520]	; (8006050 <_dtoa_r+0x628>)
 8005e46:	2200      	movs	r2, #0
 8005e48:	f7fa fa30 	bl	80002ac <__adddf3>
 8005e4c:	46d0      	mov	r8, sl
 8005e4e:	46d9      	mov	r9, fp
 8005e50:	4682      	mov	sl, r0
 8005e52:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8005e56:	2e00      	cmp	r6, #0
 8005e58:	d158      	bne.n	8005f0c <_dtoa_r+0x4e4>
 8005e5a:	4b7e      	ldr	r3, [pc, #504]	; (8006054 <_dtoa_r+0x62c>)
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	4640      	mov	r0, r8
 8005e60:	4649      	mov	r1, r9
 8005e62:	f7fa fa21 	bl	80002a8 <__aeabi_dsub>
 8005e66:	4652      	mov	r2, sl
 8005e68:	465b      	mov	r3, fp
 8005e6a:	4680      	mov	r8, r0
 8005e6c:	4689      	mov	r9, r1
 8005e6e:	f7fa fe63 	bl	8000b38 <__aeabi_dcmpgt>
 8005e72:	2800      	cmp	r0, #0
 8005e74:	f040 8295 	bne.w	80063a2 <_dtoa_r+0x97a>
 8005e78:	4652      	mov	r2, sl
 8005e7a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005e7e:	4640      	mov	r0, r8
 8005e80:	4649      	mov	r1, r9
 8005e82:	f7fa fe3b 	bl	8000afc <__aeabi_dcmplt>
 8005e86:	2800      	cmp	r0, #0
 8005e88:	f040 8289 	bne.w	800639e <_dtoa_r+0x976>
 8005e8c:	ec5b ab19 	vmov	sl, fp, d9
 8005e90:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	f2c0 8148 	blt.w	8006128 <_dtoa_r+0x700>
 8005e98:	9a00      	ldr	r2, [sp, #0]
 8005e9a:	2a0e      	cmp	r2, #14
 8005e9c:	f300 8144 	bgt.w	8006128 <_dtoa_r+0x700>
 8005ea0:	4b67      	ldr	r3, [pc, #412]	; (8006040 <_dtoa_r+0x618>)
 8005ea2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005ea6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005eaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	f280 80d5 	bge.w	800605c <_dtoa_r+0x634>
 8005eb2:	9b03      	ldr	r3, [sp, #12]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	f300 80d1 	bgt.w	800605c <_dtoa_r+0x634>
 8005eba:	f040 826f 	bne.w	800639c <_dtoa_r+0x974>
 8005ebe:	4b65      	ldr	r3, [pc, #404]	; (8006054 <_dtoa_r+0x62c>)
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	4640      	mov	r0, r8
 8005ec4:	4649      	mov	r1, r9
 8005ec6:	f7fa fba7 	bl	8000618 <__aeabi_dmul>
 8005eca:	4652      	mov	r2, sl
 8005ecc:	465b      	mov	r3, fp
 8005ece:	f7fa fe29 	bl	8000b24 <__aeabi_dcmpge>
 8005ed2:	9e03      	ldr	r6, [sp, #12]
 8005ed4:	4637      	mov	r7, r6
 8005ed6:	2800      	cmp	r0, #0
 8005ed8:	f040 8245 	bne.w	8006366 <_dtoa_r+0x93e>
 8005edc:	9d01      	ldr	r5, [sp, #4]
 8005ede:	2331      	movs	r3, #49	; 0x31
 8005ee0:	f805 3b01 	strb.w	r3, [r5], #1
 8005ee4:	9b00      	ldr	r3, [sp, #0]
 8005ee6:	3301      	adds	r3, #1
 8005ee8:	9300      	str	r3, [sp, #0]
 8005eea:	e240      	b.n	800636e <_dtoa_r+0x946>
 8005eec:	07f2      	lsls	r2, r6, #31
 8005eee:	d505      	bpl.n	8005efc <_dtoa_r+0x4d4>
 8005ef0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ef4:	f7fa fb90 	bl	8000618 <__aeabi_dmul>
 8005ef8:	3501      	adds	r5, #1
 8005efa:	2301      	movs	r3, #1
 8005efc:	1076      	asrs	r6, r6, #1
 8005efe:	3708      	adds	r7, #8
 8005f00:	e777      	b.n	8005df2 <_dtoa_r+0x3ca>
 8005f02:	2502      	movs	r5, #2
 8005f04:	e779      	b.n	8005dfa <_dtoa_r+0x3d2>
 8005f06:	9f00      	ldr	r7, [sp, #0]
 8005f08:	9e03      	ldr	r6, [sp, #12]
 8005f0a:	e794      	b.n	8005e36 <_dtoa_r+0x40e>
 8005f0c:	9901      	ldr	r1, [sp, #4]
 8005f0e:	4b4c      	ldr	r3, [pc, #304]	; (8006040 <_dtoa_r+0x618>)
 8005f10:	4431      	add	r1, r6
 8005f12:	910d      	str	r1, [sp, #52]	; 0x34
 8005f14:	9908      	ldr	r1, [sp, #32]
 8005f16:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005f1a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005f1e:	2900      	cmp	r1, #0
 8005f20:	d043      	beq.n	8005faa <_dtoa_r+0x582>
 8005f22:	494d      	ldr	r1, [pc, #308]	; (8006058 <_dtoa_r+0x630>)
 8005f24:	2000      	movs	r0, #0
 8005f26:	f7fa fca1 	bl	800086c <__aeabi_ddiv>
 8005f2a:	4652      	mov	r2, sl
 8005f2c:	465b      	mov	r3, fp
 8005f2e:	f7fa f9bb 	bl	80002a8 <__aeabi_dsub>
 8005f32:	9d01      	ldr	r5, [sp, #4]
 8005f34:	4682      	mov	sl, r0
 8005f36:	468b      	mov	fp, r1
 8005f38:	4649      	mov	r1, r9
 8005f3a:	4640      	mov	r0, r8
 8005f3c:	f7fa fe1c 	bl	8000b78 <__aeabi_d2iz>
 8005f40:	4606      	mov	r6, r0
 8005f42:	f7fa faff 	bl	8000544 <__aeabi_i2d>
 8005f46:	4602      	mov	r2, r0
 8005f48:	460b      	mov	r3, r1
 8005f4a:	4640      	mov	r0, r8
 8005f4c:	4649      	mov	r1, r9
 8005f4e:	f7fa f9ab 	bl	80002a8 <__aeabi_dsub>
 8005f52:	3630      	adds	r6, #48	; 0x30
 8005f54:	f805 6b01 	strb.w	r6, [r5], #1
 8005f58:	4652      	mov	r2, sl
 8005f5a:	465b      	mov	r3, fp
 8005f5c:	4680      	mov	r8, r0
 8005f5e:	4689      	mov	r9, r1
 8005f60:	f7fa fdcc 	bl	8000afc <__aeabi_dcmplt>
 8005f64:	2800      	cmp	r0, #0
 8005f66:	d163      	bne.n	8006030 <_dtoa_r+0x608>
 8005f68:	4642      	mov	r2, r8
 8005f6a:	464b      	mov	r3, r9
 8005f6c:	4936      	ldr	r1, [pc, #216]	; (8006048 <_dtoa_r+0x620>)
 8005f6e:	2000      	movs	r0, #0
 8005f70:	f7fa f99a 	bl	80002a8 <__aeabi_dsub>
 8005f74:	4652      	mov	r2, sl
 8005f76:	465b      	mov	r3, fp
 8005f78:	f7fa fdc0 	bl	8000afc <__aeabi_dcmplt>
 8005f7c:	2800      	cmp	r0, #0
 8005f7e:	f040 80b5 	bne.w	80060ec <_dtoa_r+0x6c4>
 8005f82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005f84:	429d      	cmp	r5, r3
 8005f86:	d081      	beq.n	8005e8c <_dtoa_r+0x464>
 8005f88:	4b30      	ldr	r3, [pc, #192]	; (800604c <_dtoa_r+0x624>)
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	4650      	mov	r0, sl
 8005f8e:	4659      	mov	r1, fp
 8005f90:	f7fa fb42 	bl	8000618 <__aeabi_dmul>
 8005f94:	4b2d      	ldr	r3, [pc, #180]	; (800604c <_dtoa_r+0x624>)
 8005f96:	4682      	mov	sl, r0
 8005f98:	468b      	mov	fp, r1
 8005f9a:	4640      	mov	r0, r8
 8005f9c:	4649      	mov	r1, r9
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	f7fa fb3a 	bl	8000618 <__aeabi_dmul>
 8005fa4:	4680      	mov	r8, r0
 8005fa6:	4689      	mov	r9, r1
 8005fa8:	e7c6      	b.n	8005f38 <_dtoa_r+0x510>
 8005faa:	4650      	mov	r0, sl
 8005fac:	4659      	mov	r1, fp
 8005fae:	f7fa fb33 	bl	8000618 <__aeabi_dmul>
 8005fb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005fb4:	9d01      	ldr	r5, [sp, #4]
 8005fb6:	930f      	str	r3, [sp, #60]	; 0x3c
 8005fb8:	4682      	mov	sl, r0
 8005fba:	468b      	mov	fp, r1
 8005fbc:	4649      	mov	r1, r9
 8005fbe:	4640      	mov	r0, r8
 8005fc0:	f7fa fdda 	bl	8000b78 <__aeabi_d2iz>
 8005fc4:	4606      	mov	r6, r0
 8005fc6:	f7fa fabd 	bl	8000544 <__aeabi_i2d>
 8005fca:	3630      	adds	r6, #48	; 0x30
 8005fcc:	4602      	mov	r2, r0
 8005fce:	460b      	mov	r3, r1
 8005fd0:	4640      	mov	r0, r8
 8005fd2:	4649      	mov	r1, r9
 8005fd4:	f7fa f968 	bl	80002a8 <__aeabi_dsub>
 8005fd8:	f805 6b01 	strb.w	r6, [r5], #1
 8005fdc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005fde:	429d      	cmp	r5, r3
 8005fe0:	4680      	mov	r8, r0
 8005fe2:	4689      	mov	r9, r1
 8005fe4:	f04f 0200 	mov.w	r2, #0
 8005fe8:	d124      	bne.n	8006034 <_dtoa_r+0x60c>
 8005fea:	4b1b      	ldr	r3, [pc, #108]	; (8006058 <_dtoa_r+0x630>)
 8005fec:	4650      	mov	r0, sl
 8005fee:	4659      	mov	r1, fp
 8005ff0:	f7fa f95c 	bl	80002ac <__adddf3>
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	460b      	mov	r3, r1
 8005ff8:	4640      	mov	r0, r8
 8005ffa:	4649      	mov	r1, r9
 8005ffc:	f7fa fd9c 	bl	8000b38 <__aeabi_dcmpgt>
 8006000:	2800      	cmp	r0, #0
 8006002:	d173      	bne.n	80060ec <_dtoa_r+0x6c4>
 8006004:	4652      	mov	r2, sl
 8006006:	465b      	mov	r3, fp
 8006008:	4913      	ldr	r1, [pc, #76]	; (8006058 <_dtoa_r+0x630>)
 800600a:	2000      	movs	r0, #0
 800600c:	f7fa f94c 	bl	80002a8 <__aeabi_dsub>
 8006010:	4602      	mov	r2, r0
 8006012:	460b      	mov	r3, r1
 8006014:	4640      	mov	r0, r8
 8006016:	4649      	mov	r1, r9
 8006018:	f7fa fd70 	bl	8000afc <__aeabi_dcmplt>
 800601c:	2800      	cmp	r0, #0
 800601e:	f43f af35 	beq.w	8005e8c <_dtoa_r+0x464>
 8006022:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006024:	1e6b      	subs	r3, r5, #1
 8006026:	930f      	str	r3, [sp, #60]	; 0x3c
 8006028:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800602c:	2b30      	cmp	r3, #48	; 0x30
 800602e:	d0f8      	beq.n	8006022 <_dtoa_r+0x5fa>
 8006030:	9700      	str	r7, [sp, #0]
 8006032:	e049      	b.n	80060c8 <_dtoa_r+0x6a0>
 8006034:	4b05      	ldr	r3, [pc, #20]	; (800604c <_dtoa_r+0x624>)
 8006036:	f7fa faef 	bl	8000618 <__aeabi_dmul>
 800603a:	4680      	mov	r8, r0
 800603c:	4689      	mov	r9, r1
 800603e:	e7bd      	b.n	8005fbc <_dtoa_r+0x594>
 8006040:	08008ad8 	.word	0x08008ad8
 8006044:	08008ab0 	.word	0x08008ab0
 8006048:	3ff00000 	.word	0x3ff00000
 800604c:	40240000 	.word	0x40240000
 8006050:	401c0000 	.word	0x401c0000
 8006054:	40140000 	.word	0x40140000
 8006058:	3fe00000 	.word	0x3fe00000
 800605c:	9d01      	ldr	r5, [sp, #4]
 800605e:	4656      	mov	r6, sl
 8006060:	465f      	mov	r7, fp
 8006062:	4642      	mov	r2, r8
 8006064:	464b      	mov	r3, r9
 8006066:	4630      	mov	r0, r6
 8006068:	4639      	mov	r1, r7
 800606a:	f7fa fbff 	bl	800086c <__aeabi_ddiv>
 800606e:	f7fa fd83 	bl	8000b78 <__aeabi_d2iz>
 8006072:	4682      	mov	sl, r0
 8006074:	f7fa fa66 	bl	8000544 <__aeabi_i2d>
 8006078:	4642      	mov	r2, r8
 800607a:	464b      	mov	r3, r9
 800607c:	f7fa facc 	bl	8000618 <__aeabi_dmul>
 8006080:	4602      	mov	r2, r0
 8006082:	460b      	mov	r3, r1
 8006084:	4630      	mov	r0, r6
 8006086:	4639      	mov	r1, r7
 8006088:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800608c:	f7fa f90c 	bl	80002a8 <__aeabi_dsub>
 8006090:	f805 6b01 	strb.w	r6, [r5], #1
 8006094:	9e01      	ldr	r6, [sp, #4]
 8006096:	9f03      	ldr	r7, [sp, #12]
 8006098:	1bae      	subs	r6, r5, r6
 800609a:	42b7      	cmp	r7, r6
 800609c:	4602      	mov	r2, r0
 800609e:	460b      	mov	r3, r1
 80060a0:	d135      	bne.n	800610e <_dtoa_r+0x6e6>
 80060a2:	f7fa f903 	bl	80002ac <__adddf3>
 80060a6:	4642      	mov	r2, r8
 80060a8:	464b      	mov	r3, r9
 80060aa:	4606      	mov	r6, r0
 80060ac:	460f      	mov	r7, r1
 80060ae:	f7fa fd43 	bl	8000b38 <__aeabi_dcmpgt>
 80060b2:	b9d0      	cbnz	r0, 80060ea <_dtoa_r+0x6c2>
 80060b4:	4642      	mov	r2, r8
 80060b6:	464b      	mov	r3, r9
 80060b8:	4630      	mov	r0, r6
 80060ba:	4639      	mov	r1, r7
 80060bc:	f7fa fd14 	bl	8000ae8 <__aeabi_dcmpeq>
 80060c0:	b110      	cbz	r0, 80060c8 <_dtoa_r+0x6a0>
 80060c2:	f01a 0f01 	tst.w	sl, #1
 80060c6:	d110      	bne.n	80060ea <_dtoa_r+0x6c2>
 80060c8:	4620      	mov	r0, r4
 80060ca:	ee18 1a10 	vmov	r1, s16
 80060ce:	f000 fe75 	bl	8006dbc <_Bfree>
 80060d2:	2300      	movs	r3, #0
 80060d4:	9800      	ldr	r0, [sp, #0]
 80060d6:	702b      	strb	r3, [r5, #0]
 80060d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80060da:	3001      	adds	r0, #1
 80060dc:	6018      	str	r0, [r3, #0]
 80060de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	f43f acf1 	beq.w	8005ac8 <_dtoa_r+0xa0>
 80060e6:	601d      	str	r5, [r3, #0]
 80060e8:	e4ee      	b.n	8005ac8 <_dtoa_r+0xa0>
 80060ea:	9f00      	ldr	r7, [sp, #0]
 80060ec:	462b      	mov	r3, r5
 80060ee:	461d      	mov	r5, r3
 80060f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80060f4:	2a39      	cmp	r2, #57	; 0x39
 80060f6:	d106      	bne.n	8006106 <_dtoa_r+0x6de>
 80060f8:	9a01      	ldr	r2, [sp, #4]
 80060fa:	429a      	cmp	r2, r3
 80060fc:	d1f7      	bne.n	80060ee <_dtoa_r+0x6c6>
 80060fe:	9901      	ldr	r1, [sp, #4]
 8006100:	2230      	movs	r2, #48	; 0x30
 8006102:	3701      	adds	r7, #1
 8006104:	700a      	strb	r2, [r1, #0]
 8006106:	781a      	ldrb	r2, [r3, #0]
 8006108:	3201      	adds	r2, #1
 800610a:	701a      	strb	r2, [r3, #0]
 800610c:	e790      	b.n	8006030 <_dtoa_r+0x608>
 800610e:	4ba6      	ldr	r3, [pc, #664]	; (80063a8 <_dtoa_r+0x980>)
 8006110:	2200      	movs	r2, #0
 8006112:	f7fa fa81 	bl	8000618 <__aeabi_dmul>
 8006116:	2200      	movs	r2, #0
 8006118:	2300      	movs	r3, #0
 800611a:	4606      	mov	r6, r0
 800611c:	460f      	mov	r7, r1
 800611e:	f7fa fce3 	bl	8000ae8 <__aeabi_dcmpeq>
 8006122:	2800      	cmp	r0, #0
 8006124:	d09d      	beq.n	8006062 <_dtoa_r+0x63a>
 8006126:	e7cf      	b.n	80060c8 <_dtoa_r+0x6a0>
 8006128:	9a08      	ldr	r2, [sp, #32]
 800612a:	2a00      	cmp	r2, #0
 800612c:	f000 80d7 	beq.w	80062de <_dtoa_r+0x8b6>
 8006130:	9a06      	ldr	r2, [sp, #24]
 8006132:	2a01      	cmp	r2, #1
 8006134:	f300 80ba 	bgt.w	80062ac <_dtoa_r+0x884>
 8006138:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800613a:	2a00      	cmp	r2, #0
 800613c:	f000 80b2 	beq.w	80062a4 <_dtoa_r+0x87c>
 8006140:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006144:	9e07      	ldr	r6, [sp, #28]
 8006146:	9d04      	ldr	r5, [sp, #16]
 8006148:	9a04      	ldr	r2, [sp, #16]
 800614a:	441a      	add	r2, r3
 800614c:	9204      	str	r2, [sp, #16]
 800614e:	9a05      	ldr	r2, [sp, #20]
 8006150:	2101      	movs	r1, #1
 8006152:	441a      	add	r2, r3
 8006154:	4620      	mov	r0, r4
 8006156:	9205      	str	r2, [sp, #20]
 8006158:	f000 ff32 	bl	8006fc0 <__i2b>
 800615c:	4607      	mov	r7, r0
 800615e:	2d00      	cmp	r5, #0
 8006160:	dd0c      	ble.n	800617c <_dtoa_r+0x754>
 8006162:	9b05      	ldr	r3, [sp, #20]
 8006164:	2b00      	cmp	r3, #0
 8006166:	dd09      	ble.n	800617c <_dtoa_r+0x754>
 8006168:	42ab      	cmp	r3, r5
 800616a:	9a04      	ldr	r2, [sp, #16]
 800616c:	bfa8      	it	ge
 800616e:	462b      	movge	r3, r5
 8006170:	1ad2      	subs	r2, r2, r3
 8006172:	9204      	str	r2, [sp, #16]
 8006174:	9a05      	ldr	r2, [sp, #20]
 8006176:	1aed      	subs	r5, r5, r3
 8006178:	1ad3      	subs	r3, r2, r3
 800617a:	9305      	str	r3, [sp, #20]
 800617c:	9b07      	ldr	r3, [sp, #28]
 800617e:	b31b      	cbz	r3, 80061c8 <_dtoa_r+0x7a0>
 8006180:	9b08      	ldr	r3, [sp, #32]
 8006182:	2b00      	cmp	r3, #0
 8006184:	f000 80af 	beq.w	80062e6 <_dtoa_r+0x8be>
 8006188:	2e00      	cmp	r6, #0
 800618a:	dd13      	ble.n	80061b4 <_dtoa_r+0x78c>
 800618c:	4639      	mov	r1, r7
 800618e:	4632      	mov	r2, r6
 8006190:	4620      	mov	r0, r4
 8006192:	f000 ffd5 	bl	8007140 <__pow5mult>
 8006196:	ee18 2a10 	vmov	r2, s16
 800619a:	4601      	mov	r1, r0
 800619c:	4607      	mov	r7, r0
 800619e:	4620      	mov	r0, r4
 80061a0:	f000 ff24 	bl	8006fec <__multiply>
 80061a4:	ee18 1a10 	vmov	r1, s16
 80061a8:	4680      	mov	r8, r0
 80061aa:	4620      	mov	r0, r4
 80061ac:	f000 fe06 	bl	8006dbc <_Bfree>
 80061b0:	ee08 8a10 	vmov	s16, r8
 80061b4:	9b07      	ldr	r3, [sp, #28]
 80061b6:	1b9a      	subs	r2, r3, r6
 80061b8:	d006      	beq.n	80061c8 <_dtoa_r+0x7a0>
 80061ba:	ee18 1a10 	vmov	r1, s16
 80061be:	4620      	mov	r0, r4
 80061c0:	f000 ffbe 	bl	8007140 <__pow5mult>
 80061c4:	ee08 0a10 	vmov	s16, r0
 80061c8:	2101      	movs	r1, #1
 80061ca:	4620      	mov	r0, r4
 80061cc:	f000 fef8 	bl	8006fc0 <__i2b>
 80061d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	4606      	mov	r6, r0
 80061d6:	f340 8088 	ble.w	80062ea <_dtoa_r+0x8c2>
 80061da:	461a      	mov	r2, r3
 80061dc:	4601      	mov	r1, r0
 80061de:	4620      	mov	r0, r4
 80061e0:	f000 ffae 	bl	8007140 <__pow5mult>
 80061e4:	9b06      	ldr	r3, [sp, #24]
 80061e6:	2b01      	cmp	r3, #1
 80061e8:	4606      	mov	r6, r0
 80061ea:	f340 8081 	ble.w	80062f0 <_dtoa_r+0x8c8>
 80061ee:	f04f 0800 	mov.w	r8, #0
 80061f2:	6933      	ldr	r3, [r6, #16]
 80061f4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80061f8:	6918      	ldr	r0, [r3, #16]
 80061fa:	f000 fe91 	bl	8006f20 <__hi0bits>
 80061fe:	f1c0 0020 	rsb	r0, r0, #32
 8006202:	9b05      	ldr	r3, [sp, #20]
 8006204:	4418      	add	r0, r3
 8006206:	f010 001f 	ands.w	r0, r0, #31
 800620a:	f000 8092 	beq.w	8006332 <_dtoa_r+0x90a>
 800620e:	f1c0 0320 	rsb	r3, r0, #32
 8006212:	2b04      	cmp	r3, #4
 8006214:	f340 808a 	ble.w	800632c <_dtoa_r+0x904>
 8006218:	f1c0 001c 	rsb	r0, r0, #28
 800621c:	9b04      	ldr	r3, [sp, #16]
 800621e:	4403      	add	r3, r0
 8006220:	9304      	str	r3, [sp, #16]
 8006222:	9b05      	ldr	r3, [sp, #20]
 8006224:	4403      	add	r3, r0
 8006226:	4405      	add	r5, r0
 8006228:	9305      	str	r3, [sp, #20]
 800622a:	9b04      	ldr	r3, [sp, #16]
 800622c:	2b00      	cmp	r3, #0
 800622e:	dd07      	ble.n	8006240 <_dtoa_r+0x818>
 8006230:	ee18 1a10 	vmov	r1, s16
 8006234:	461a      	mov	r2, r3
 8006236:	4620      	mov	r0, r4
 8006238:	f000 ffdc 	bl	80071f4 <__lshift>
 800623c:	ee08 0a10 	vmov	s16, r0
 8006240:	9b05      	ldr	r3, [sp, #20]
 8006242:	2b00      	cmp	r3, #0
 8006244:	dd05      	ble.n	8006252 <_dtoa_r+0x82a>
 8006246:	4631      	mov	r1, r6
 8006248:	461a      	mov	r2, r3
 800624a:	4620      	mov	r0, r4
 800624c:	f000 ffd2 	bl	80071f4 <__lshift>
 8006250:	4606      	mov	r6, r0
 8006252:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006254:	2b00      	cmp	r3, #0
 8006256:	d06e      	beq.n	8006336 <_dtoa_r+0x90e>
 8006258:	ee18 0a10 	vmov	r0, s16
 800625c:	4631      	mov	r1, r6
 800625e:	f001 f839 	bl	80072d4 <__mcmp>
 8006262:	2800      	cmp	r0, #0
 8006264:	da67      	bge.n	8006336 <_dtoa_r+0x90e>
 8006266:	9b00      	ldr	r3, [sp, #0]
 8006268:	3b01      	subs	r3, #1
 800626a:	ee18 1a10 	vmov	r1, s16
 800626e:	9300      	str	r3, [sp, #0]
 8006270:	220a      	movs	r2, #10
 8006272:	2300      	movs	r3, #0
 8006274:	4620      	mov	r0, r4
 8006276:	f000 fdc3 	bl	8006e00 <__multadd>
 800627a:	9b08      	ldr	r3, [sp, #32]
 800627c:	ee08 0a10 	vmov	s16, r0
 8006280:	2b00      	cmp	r3, #0
 8006282:	f000 81b1 	beq.w	80065e8 <_dtoa_r+0xbc0>
 8006286:	2300      	movs	r3, #0
 8006288:	4639      	mov	r1, r7
 800628a:	220a      	movs	r2, #10
 800628c:	4620      	mov	r0, r4
 800628e:	f000 fdb7 	bl	8006e00 <__multadd>
 8006292:	9b02      	ldr	r3, [sp, #8]
 8006294:	2b00      	cmp	r3, #0
 8006296:	4607      	mov	r7, r0
 8006298:	f300 808e 	bgt.w	80063b8 <_dtoa_r+0x990>
 800629c:	9b06      	ldr	r3, [sp, #24]
 800629e:	2b02      	cmp	r3, #2
 80062a0:	dc51      	bgt.n	8006346 <_dtoa_r+0x91e>
 80062a2:	e089      	b.n	80063b8 <_dtoa_r+0x990>
 80062a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80062a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80062aa:	e74b      	b.n	8006144 <_dtoa_r+0x71c>
 80062ac:	9b03      	ldr	r3, [sp, #12]
 80062ae:	1e5e      	subs	r6, r3, #1
 80062b0:	9b07      	ldr	r3, [sp, #28]
 80062b2:	42b3      	cmp	r3, r6
 80062b4:	bfbf      	itttt	lt
 80062b6:	9b07      	ldrlt	r3, [sp, #28]
 80062b8:	9607      	strlt	r6, [sp, #28]
 80062ba:	1af2      	sublt	r2, r6, r3
 80062bc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80062be:	bfb6      	itet	lt
 80062c0:	189b      	addlt	r3, r3, r2
 80062c2:	1b9e      	subge	r6, r3, r6
 80062c4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80062c6:	9b03      	ldr	r3, [sp, #12]
 80062c8:	bfb8      	it	lt
 80062ca:	2600      	movlt	r6, #0
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	bfb7      	itett	lt
 80062d0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80062d4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80062d8:	1a9d      	sublt	r5, r3, r2
 80062da:	2300      	movlt	r3, #0
 80062dc:	e734      	b.n	8006148 <_dtoa_r+0x720>
 80062de:	9e07      	ldr	r6, [sp, #28]
 80062e0:	9d04      	ldr	r5, [sp, #16]
 80062e2:	9f08      	ldr	r7, [sp, #32]
 80062e4:	e73b      	b.n	800615e <_dtoa_r+0x736>
 80062e6:	9a07      	ldr	r2, [sp, #28]
 80062e8:	e767      	b.n	80061ba <_dtoa_r+0x792>
 80062ea:	9b06      	ldr	r3, [sp, #24]
 80062ec:	2b01      	cmp	r3, #1
 80062ee:	dc18      	bgt.n	8006322 <_dtoa_r+0x8fa>
 80062f0:	f1ba 0f00 	cmp.w	sl, #0
 80062f4:	d115      	bne.n	8006322 <_dtoa_r+0x8fa>
 80062f6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80062fa:	b993      	cbnz	r3, 8006322 <_dtoa_r+0x8fa>
 80062fc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006300:	0d1b      	lsrs	r3, r3, #20
 8006302:	051b      	lsls	r3, r3, #20
 8006304:	b183      	cbz	r3, 8006328 <_dtoa_r+0x900>
 8006306:	9b04      	ldr	r3, [sp, #16]
 8006308:	3301      	adds	r3, #1
 800630a:	9304      	str	r3, [sp, #16]
 800630c:	9b05      	ldr	r3, [sp, #20]
 800630e:	3301      	adds	r3, #1
 8006310:	9305      	str	r3, [sp, #20]
 8006312:	f04f 0801 	mov.w	r8, #1
 8006316:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006318:	2b00      	cmp	r3, #0
 800631a:	f47f af6a 	bne.w	80061f2 <_dtoa_r+0x7ca>
 800631e:	2001      	movs	r0, #1
 8006320:	e76f      	b.n	8006202 <_dtoa_r+0x7da>
 8006322:	f04f 0800 	mov.w	r8, #0
 8006326:	e7f6      	b.n	8006316 <_dtoa_r+0x8ee>
 8006328:	4698      	mov	r8, r3
 800632a:	e7f4      	b.n	8006316 <_dtoa_r+0x8ee>
 800632c:	f43f af7d 	beq.w	800622a <_dtoa_r+0x802>
 8006330:	4618      	mov	r0, r3
 8006332:	301c      	adds	r0, #28
 8006334:	e772      	b.n	800621c <_dtoa_r+0x7f4>
 8006336:	9b03      	ldr	r3, [sp, #12]
 8006338:	2b00      	cmp	r3, #0
 800633a:	dc37      	bgt.n	80063ac <_dtoa_r+0x984>
 800633c:	9b06      	ldr	r3, [sp, #24]
 800633e:	2b02      	cmp	r3, #2
 8006340:	dd34      	ble.n	80063ac <_dtoa_r+0x984>
 8006342:	9b03      	ldr	r3, [sp, #12]
 8006344:	9302      	str	r3, [sp, #8]
 8006346:	9b02      	ldr	r3, [sp, #8]
 8006348:	b96b      	cbnz	r3, 8006366 <_dtoa_r+0x93e>
 800634a:	4631      	mov	r1, r6
 800634c:	2205      	movs	r2, #5
 800634e:	4620      	mov	r0, r4
 8006350:	f000 fd56 	bl	8006e00 <__multadd>
 8006354:	4601      	mov	r1, r0
 8006356:	4606      	mov	r6, r0
 8006358:	ee18 0a10 	vmov	r0, s16
 800635c:	f000 ffba 	bl	80072d4 <__mcmp>
 8006360:	2800      	cmp	r0, #0
 8006362:	f73f adbb 	bgt.w	8005edc <_dtoa_r+0x4b4>
 8006366:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006368:	9d01      	ldr	r5, [sp, #4]
 800636a:	43db      	mvns	r3, r3
 800636c:	9300      	str	r3, [sp, #0]
 800636e:	f04f 0800 	mov.w	r8, #0
 8006372:	4631      	mov	r1, r6
 8006374:	4620      	mov	r0, r4
 8006376:	f000 fd21 	bl	8006dbc <_Bfree>
 800637a:	2f00      	cmp	r7, #0
 800637c:	f43f aea4 	beq.w	80060c8 <_dtoa_r+0x6a0>
 8006380:	f1b8 0f00 	cmp.w	r8, #0
 8006384:	d005      	beq.n	8006392 <_dtoa_r+0x96a>
 8006386:	45b8      	cmp	r8, r7
 8006388:	d003      	beq.n	8006392 <_dtoa_r+0x96a>
 800638a:	4641      	mov	r1, r8
 800638c:	4620      	mov	r0, r4
 800638e:	f000 fd15 	bl	8006dbc <_Bfree>
 8006392:	4639      	mov	r1, r7
 8006394:	4620      	mov	r0, r4
 8006396:	f000 fd11 	bl	8006dbc <_Bfree>
 800639a:	e695      	b.n	80060c8 <_dtoa_r+0x6a0>
 800639c:	2600      	movs	r6, #0
 800639e:	4637      	mov	r7, r6
 80063a0:	e7e1      	b.n	8006366 <_dtoa_r+0x93e>
 80063a2:	9700      	str	r7, [sp, #0]
 80063a4:	4637      	mov	r7, r6
 80063a6:	e599      	b.n	8005edc <_dtoa_r+0x4b4>
 80063a8:	40240000 	.word	0x40240000
 80063ac:	9b08      	ldr	r3, [sp, #32]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	f000 80ca 	beq.w	8006548 <_dtoa_r+0xb20>
 80063b4:	9b03      	ldr	r3, [sp, #12]
 80063b6:	9302      	str	r3, [sp, #8]
 80063b8:	2d00      	cmp	r5, #0
 80063ba:	dd05      	ble.n	80063c8 <_dtoa_r+0x9a0>
 80063bc:	4639      	mov	r1, r7
 80063be:	462a      	mov	r2, r5
 80063c0:	4620      	mov	r0, r4
 80063c2:	f000 ff17 	bl	80071f4 <__lshift>
 80063c6:	4607      	mov	r7, r0
 80063c8:	f1b8 0f00 	cmp.w	r8, #0
 80063cc:	d05b      	beq.n	8006486 <_dtoa_r+0xa5e>
 80063ce:	6879      	ldr	r1, [r7, #4]
 80063d0:	4620      	mov	r0, r4
 80063d2:	f000 fcb3 	bl	8006d3c <_Balloc>
 80063d6:	4605      	mov	r5, r0
 80063d8:	b928      	cbnz	r0, 80063e6 <_dtoa_r+0x9be>
 80063da:	4b87      	ldr	r3, [pc, #540]	; (80065f8 <_dtoa_r+0xbd0>)
 80063dc:	4602      	mov	r2, r0
 80063de:	f240 21ea 	movw	r1, #746	; 0x2ea
 80063e2:	f7ff bb3b 	b.w	8005a5c <_dtoa_r+0x34>
 80063e6:	693a      	ldr	r2, [r7, #16]
 80063e8:	3202      	adds	r2, #2
 80063ea:	0092      	lsls	r2, r2, #2
 80063ec:	f107 010c 	add.w	r1, r7, #12
 80063f0:	300c      	adds	r0, #12
 80063f2:	f000 fc95 	bl	8006d20 <memcpy>
 80063f6:	2201      	movs	r2, #1
 80063f8:	4629      	mov	r1, r5
 80063fa:	4620      	mov	r0, r4
 80063fc:	f000 fefa 	bl	80071f4 <__lshift>
 8006400:	9b01      	ldr	r3, [sp, #4]
 8006402:	f103 0901 	add.w	r9, r3, #1
 8006406:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800640a:	4413      	add	r3, r2
 800640c:	9305      	str	r3, [sp, #20]
 800640e:	f00a 0301 	and.w	r3, sl, #1
 8006412:	46b8      	mov	r8, r7
 8006414:	9304      	str	r3, [sp, #16]
 8006416:	4607      	mov	r7, r0
 8006418:	4631      	mov	r1, r6
 800641a:	ee18 0a10 	vmov	r0, s16
 800641e:	f7ff fa77 	bl	8005910 <quorem>
 8006422:	4641      	mov	r1, r8
 8006424:	9002      	str	r0, [sp, #8]
 8006426:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800642a:	ee18 0a10 	vmov	r0, s16
 800642e:	f000 ff51 	bl	80072d4 <__mcmp>
 8006432:	463a      	mov	r2, r7
 8006434:	9003      	str	r0, [sp, #12]
 8006436:	4631      	mov	r1, r6
 8006438:	4620      	mov	r0, r4
 800643a:	f000 ff67 	bl	800730c <__mdiff>
 800643e:	68c2      	ldr	r2, [r0, #12]
 8006440:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8006444:	4605      	mov	r5, r0
 8006446:	bb02      	cbnz	r2, 800648a <_dtoa_r+0xa62>
 8006448:	4601      	mov	r1, r0
 800644a:	ee18 0a10 	vmov	r0, s16
 800644e:	f000 ff41 	bl	80072d4 <__mcmp>
 8006452:	4602      	mov	r2, r0
 8006454:	4629      	mov	r1, r5
 8006456:	4620      	mov	r0, r4
 8006458:	9207      	str	r2, [sp, #28]
 800645a:	f000 fcaf 	bl	8006dbc <_Bfree>
 800645e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006462:	ea43 0102 	orr.w	r1, r3, r2
 8006466:	9b04      	ldr	r3, [sp, #16]
 8006468:	430b      	orrs	r3, r1
 800646a:	464d      	mov	r5, r9
 800646c:	d10f      	bne.n	800648e <_dtoa_r+0xa66>
 800646e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006472:	d02a      	beq.n	80064ca <_dtoa_r+0xaa2>
 8006474:	9b03      	ldr	r3, [sp, #12]
 8006476:	2b00      	cmp	r3, #0
 8006478:	dd02      	ble.n	8006480 <_dtoa_r+0xa58>
 800647a:	9b02      	ldr	r3, [sp, #8]
 800647c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006480:	f88b a000 	strb.w	sl, [fp]
 8006484:	e775      	b.n	8006372 <_dtoa_r+0x94a>
 8006486:	4638      	mov	r0, r7
 8006488:	e7ba      	b.n	8006400 <_dtoa_r+0x9d8>
 800648a:	2201      	movs	r2, #1
 800648c:	e7e2      	b.n	8006454 <_dtoa_r+0xa2c>
 800648e:	9b03      	ldr	r3, [sp, #12]
 8006490:	2b00      	cmp	r3, #0
 8006492:	db04      	blt.n	800649e <_dtoa_r+0xa76>
 8006494:	9906      	ldr	r1, [sp, #24]
 8006496:	430b      	orrs	r3, r1
 8006498:	9904      	ldr	r1, [sp, #16]
 800649a:	430b      	orrs	r3, r1
 800649c:	d122      	bne.n	80064e4 <_dtoa_r+0xabc>
 800649e:	2a00      	cmp	r2, #0
 80064a0:	ddee      	ble.n	8006480 <_dtoa_r+0xa58>
 80064a2:	ee18 1a10 	vmov	r1, s16
 80064a6:	2201      	movs	r2, #1
 80064a8:	4620      	mov	r0, r4
 80064aa:	f000 fea3 	bl	80071f4 <__lshift>
 80064ae:	4631      	mov	r1, r6
 80064b0:	ee08 0a10 	vmov	s16, r0
 80064b4:	f000 ff0e 	bl	80072d4 <__mcmp>
 80064b8:	2800      	cmp	r0, #0
 80064ba:	dc03      	bgt.n	80064c4 <_dtoa_r+0xa9c>
 80064bc:	d1e0      	bne.n	8006480 <_dtoa_r+0xa58>
 80064be:	f01a 0f01 	tst.w	sl, #1
 80064c2:	d0dd      	beq.n	8006480 <_dtoa_r+0xa58>
 80064c4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80064c8:	d1d7      	bne.n	800647a <_dtoa_r+0xa52>
 80064ca:	2339      	movs	r3, #57	; 0x39
 80064cc:	f88b 3000 	strb.w	r3, [fp]
 80064d0:	462b      	mov	r3, r5
 80064d2:	461d      	mov	r5, r3
 80064d4:	3b01      	subs	r3, #1
 80064d6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80064da:	2a39      	cmp	r2, #57	; 0x39
 80064dc:	d071      	beq.n	80065c2 <_dtoa_r+0xb9a>
 80064de:	3201      	adds	r2, #1
 80064e0:	701a      	strb	r2, [r3, #0]
 80064e2:	e746      	b.n	8006372 <_dtoa_r+0x94a>
 80064e4:	2a00      	cmp	r2, #0
 80064e6:	dd07      	ble.n	80064f8 <_dtoa_r+0xad0>
 80064e8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80064ec:	d0ed      	beq.n	80064ca <_dtoa_r+0xaa2>
 80064ee:	f10a 0301 	add.w	r3, sl, #1
 80064f2:	f88b 3000 	strb.w	r3, [fp]
 80064f6:	e73c      	b.n	8006372 <_dtoa_r+0x94a>
 80064f8:	9b05      	ldr	r3, [sp, #20]
 80064fa:	f809 ac01 	strb.w	sl, [r9, #-1]
 80064fe:	4599      	cmp	r9, r3
 8006500:	d047      	beq.n	8006592 <_dtoa_r+0xb6a>
 8006502:	ee18 1a10 	vmov	r1, s16
 8006506:	2300      	movs	r3, #0
 8006508:	220a      	movs	r2, #10
 800650a:	4620      	mov	r0, r4
 800650c:	f000 fc78 	bl	8006e00 <__multadd>
 8006510:	45b8      	cmp	r8, r7
 8006512:	ee08 0a10 	vmov	s16, r0
 8006516:	f04f 0300 	mov.w	r3, #0
 800651a:	f04f 020a 	mov.w	r2, #10
 800651e:	4641      	mov	r1, r8
 8006520:	4620      	mov	r0, r4
 8006522:	d106      	bne.n	8006532 <_dtoa_r+0xb0a>
 8006524:	f000 fc6c 	bl	8006e00 <__multadd>
 8006528:	4680      	mov	r8, r0
 800652a:	4607      	mov	r7, r0
 800652c:	f109 0901 	add.w	r9, r9, #1
 8006530:	e772      	b.n	8006418 <_dtoa_r+0x9f0>
 8006532:	f000 fc65 	bl	8006e00 <__multadd>
 8006536:	4639      	mov	r1, r7
 8006538:	4680      	mov	r8, r0
 800653a:	2300      	movs	r3, #0
 800653c:	220a      	movs	r2, #10
 800653e:	4620      	mov	r0, r4
 8006540:	f000 fc5e 	bl	8006e00 <__multadd>
 8006544:	4607      	mov	r7, r0
 8006546:	e7f1      	b.n	800652c <_dtoa_r+0xb04>
 8006548:	9b03      	ldr	r3, [sp, #12]
 800654a:	9302      	str	r3, [sp, #8]
 800654c:	9d01      	ldr	r5, [sp, #4]
 800654e:	ee18 0a10 	vmov	r0, s16
 8006552:	4631      	mov	r1, r6
 8006554:	f7ff f9dc 	bl	8005910 <quorem>
 8006558:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800655c:	9b01      	ldr	r3, [sp, #4]
 800655e:	f805 ab01 	strb.w	sl, [r5], #1
 8006562:	1aea      	subs	r2, r5, r3
 8006564:	9b02      	ldr	r3, [sp, #8]
 8006566:	4293      	cmp	r3, r2
 8006568:	dd09      	ble.n	800657e <_dtoa_r+0xb56>
 800656a:	ee18 1a10 	vmov	r1, s16
 800656e:	2300      	movs	r3, #0
 8006570:	220a      	movs	r2, #10
 8006572:	4620      	mov	r0, r4
 8006574:	f000 fc44 	bl	8006e00 <__multadd>
 8006578:	ee08 0a10 	vmov	s16, r0
 800657c:	e7e7      	b.n	800654e <_dtoa_r+0xb26>
 800657e:	9b02      	ldr	r3, [sp, #8]
 8006580:	2b00      	cmp	r3, #0
 8006582:	bfc8      	it	gt
 8006584:	461d      	movgt	r5, r3
 8006586:	9b01      	ldr	r3, [sp, #4]
 8006588:	bfd8      	it	le
 800658a:	2501      	movle	r5, #1
 800658c:	441d      	add	r5, r3
 800658e:	f04f 0800 	mov.w	r8, #0
 8006592:	ee18 1a10 	vmov	r1, s16
 8006596:	2201      	movs	r2, #1
 8006598:	4620      	mov	r0, r4
 800659a:	f000 fe2b 	bl	80071f4 <__lshift>
 800659e:	4631      	mov	r1, r6
 80065a0:	ee08 0a10 	vmov	s16, r0
 80065a4:	f000 fe96 	bl	80072d4 <__mcmp>
 80065a8:	2800      	cmp	r0, #0
 80065aa:	dc91      	bgt.n	80064d0 <_dtoa_r+0xaa8>
 80065ac:	d102      	bne.n	80065b4 <_dtoa_r+0xb8c>
 80065ae:	f01a 0f01 	tst.w	sl, #1
 80065b2:	d18d      	bne.n	80064d0 <_dtoa_r+0xaa8>
 80065b4:	462b      	mov	r3, r5
 80065b6:	461d      	mov	r5, r3
 80065b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80065bc:	2a30      	cmp	r2, #48	; 0x30
 80065be:	d0fa      	beq.n	80065b6 <_dtoa_r+0xb8e>
 80065c0:	e6d7      	b.n	8006372 <_dtoa_r+0x94a>
 80065c2:	9a01      	ldr	r2, [sp, #4]
 80065c4:	429a      	cmp	r2, r3
 80065c6:	d184      	bne.n	80064d2 <_dtoa_r+0xaaa>
 80065c8:	9b00      	ldr	r3, [sp, #0]
 80065ca:	3301      	adds	r3, #1
 80065cc:	9300      	str	r3, [sp, #0]
 80065ce:	2331      	movs	r3, #49	; 0x31
 80065d0:	7013      	strb	r3, [r2, #0]
 80065d2:	e6ce      	b.n	8006372 <_dtoa_r+0x94a>
 80065d4:	4b09      	ldr	r3, [pc, #36]	; (80065fc <_dtoa_r+0xbd4>)
 80065d6:	f7ff ba95 	b.w	8005b04 <_dtoa_r+0xdc>
 80065da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80065dc:	2b00      	cmp	r3, #0
 80065de:	f47f aa6e 	bne.w	8005abe <_dtoa_r+0x96>
 80065e2:	4b07      	ldr	r3, [pc, #28]	; (8006600 <_dtoa_r+0xbd8>)
 80065e4:	f7ff ba8e 	b.w	8005b04 <_dtoa_r+0xdc>
 80065e8:	9b02      	ldr	r3, [sp, #8]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	dcae      	bgt.n	800654c <_dtoa_r+0xb24>
 80065ee:	9b06      	ldr	r3, [sp, #24]
 80065f0:	2b02      	cmp	r3, #2
 80065f2:	f73f aea8 	bgt.w	8006346 <_dtoa_r+0x91e>
 80065f6:	e7a9      	b.n	800654c <_dtoa_r+0xb24>
 80065f8:	080089c8 	.word	0x080089c8
 80065fc:	080087cc 	.word	0x080087cc
 8006600:	08008949 	.word	0x08008949

08006604 <rshift>:
 8006604:	6903      	ldr	r3, [r0, #16]
 8006606:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800660a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800660e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8006612:	f100 0414 	add.w	r4, r0, #20
 8006616:	dd45      	ble.n	80066a4 <rshift+0xa0>
 8006618:	f011 011f 	ands.w	r1, r1, #31
 800661c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8006620:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8006624:	d10c      	bne.n	8006640 <rshift+0x3c>
 8006626:	f100 0710 	add.w	r7, r0, #16
 800662a:	4629      	mov	r1, r5
 800662c:	42b1      	cmp	r1, r6
 800662e:	d334      	bcc.n	800669a <rshift+0x96>
 8006630:	1a9b      	subs	r3, r3, r2
 8006632:	009b      	lsls	r3, r3, #2
 8006634:	1eea      	subs	r2, r5, #3
 8006636:	4296      	cmp	r6, r2
 8006638:	bf38      	it	cc
 800663a:	2300      	movcc	r3, #0
 800663c:	4423      	add	r3, r4
 800663e:	e015      	b.n	800666c <rshift+0x68>
 8006640:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8006644:	f1c1 0820 	rsb	r8, r1, #32
 8006648:	40cf      	lsrs	r7, r1
 800664a:	f105 0e04 	add.w	lr, r5, #4
 800664e:	46a1      	mov	r9, r4
 8006650:	4576      	cmp	r6, lr
 8006652:	46f4      	mov	ip, lr
 8006654:	d815      	bhi.n	8006682 <rshift+0x7e>
 8006656:	1a9a      	subs	r2, r3, r2
 8006658:	0092      	lsls	r2, r2, #2
 800665a:	3a04      	subs	r2, #4
 800665c:	3501      	adds	r5, #1
 800665e:	42ae      	cmp	r6, r5
 8006660:	bf38      	it	cc
 8006662:	2200      	movcc	r2, #0
 8006664:	18a3      	adds	r3, r4, r2
 8006666:	50a7      	str	r7, [r4, r2]
 8006668:	b107      	cbz	r7, 800666c <rshift+0x68>
 800666a:	3304      	adds	r3, #4
 800666c:	1b1a      	subs	r2, r3, r4
 800666e:	42a3      	cmp	r3, r4
 8006670:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006674:	bf08      	it	eq
 8006676:	2300      	moveq	r3, #0
 8006678:	6102      	str	r2, [r0, #16]
 800667a:	bf08      	it	eq
 800667c:	6143      	streq	r3, [r0, #20]
 800667e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006682:	f8dc c000 	ldr.w	ip, [ip]
 8006686:	fa0c fc08 	lsl.w	ip, ip, r8
 800668a:	ea4c 0707 	orr.w	r7, ip, r7
 800668e:	f849 7b04 	str.w	r7, [r9], #4
 8006692:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006696:	40cf      	lsrs	r7, r1
 8006698:	e7da      	b.n	8006650 <rshift+0x4c>
 800669a:	f851 cb04 	ldr.w	ip, [r1], #4
 800669e:	f847 cf04 	str.w	ip, [r7, #4]!
 80066a2:	e7c3      	b.n	800662c <rshift+0x28>
 80066a4:	4623      	mov	r3, r4
 80066a6:	e7e1      	b.n	800666c <rshift+0x68>

080066a8 <__hexdig_fun>:
 80066a8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80066ac:	2b09      	cmp	r3, #9
 80066ae:	d802      	bhi.n	80066b6 <__hexdig_fun+0xe>
 80066b0:	3820      	subs	r0, #32
 80066b2:	b2c0      	uxtb	r0, r0
 80066b4:	4770      	bx	lr
 80066b6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80066ba:	2b05      	cmp	r3, #5
 80066bc:	d801      	bhi.n	80066c2 <__hexdig_fun+0x1a>
 80066be:	3847      	subs	r0, #71	; 0x47
 80066c0:	e7f7      	b.n	80066b2 <__hexdig_fun+0xa>
 80066c2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80066c6:	2b05      	cmp	r3, #5
 80066c8:	d801      	bhi.n	80066ce <__hexdig_fun+0x26>
 80066ca:	3827      	subs	r0, #39	; 0x27
 80066cc:	e7f1      	b.n	80066b2 <__hexdig_fun+0xa>
 80066ce:	2000      	movs	r0, #0
 80066d0:	4770      	bx	lr
	...

080066d4 <__gethex>:
 80066d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066d8:	ed2d 8b02 	vpush	{d8}
 80066dc:	b089      	sub	sp, #36	; 0x24
 80066de:	ee08 0a10 	vmov	s16, r0
 80066e2:	9304      	str	r3, [sp, #16]
 80066e4:	4bb4      	ldr	r3, [pc, #720]	; (80069b8 <__gethex+0x2e4>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	9301      	str	r3, [sp, #4]
 80066ea:	4618      	mov	r0, r3
 80066ec:	468b      	mov	fp, r1
 80066ee:	4690      	mov	r8, r2
 80066f0:	f7f9 fd7e 	bl	80001f0 <strlen>
 80066f4:	9b01      	ldr	r3, [sp, #4]
 80066f6:	f8db 2000 	ldr.w	r2, [fp]
 80066fa:	4403      	add	r3, r0
 80066fc:	4682      	mov	sl, r0
 80066fe:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8006702:	9305      	str	r3, [sp, #20]
 8006704:	1c93      	adds	r3, r2, #2
 8006706:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800670a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800670e:	32fe      	adds	r2, #254	; 0xfe
 8006710:	18d1      	adds	r1, r2, r3
 8006712:	461f      	mov	r7, r3
 8006714:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006718:	9100      	str	r1, [sp, #0]
 800671a:	2830      	cmp	r0, #48	; 0x30
 800671c:	d0f8      	beq.n	8006710 <__gethex+0x3c>
 800671e:	f7ff ffc3 	bl	80066a8 <__hexdig_fun>
 8006722:	4604      	mov	r4, r0
 8006724:	2800      	cmp	r0, #0
 8006726:	d13a      	bne.n	800679e <__gethex+0xca>
 8006728:	9901      	ldr	r1, [sp, #4]
 800672a:	4652      	mov	r2, sl
 800672c:	4638      	mov	r0, r7
 800672e:	f001 fa33 	bl	8007b98 <strncmp>
 8006732:	4605      	mov	r5, r0
 8006734:	2800      	cmp	r0, #0
 8006736:	d168      	bne.n	800680a <__gethex+0x136>
 8006738:	f817 000a 	ldrb.w	r0, [r7, sl]
 800673c:	eb07 060a 	add.w	r6, r7, sl
 8006740:	f7ff ffb2 	bl	80066a8 <__hexdig_fun>
 8006744:	2800      	cmp	r0, #0
 8006746:	d062      	beq.n	800680e <__gethex+0x13a>
 8006748:	4633      	mov	r3, r6
 800674a:	7818      	ldrb	r0, [r3, #0]
 800674c:	2830      	cmp	r0, #48	; 0x30
 800674e:	461f      	mov	r7, r3
 8006750:	f103 0301 	add.w	r3, r3, #1
 8006754:	d0f9      	beq.n	800674a <__gethex+0x76>
 8006756:	f7ff ffa7 	bl	80066a8 <__hexdig_fun>
 800675a:	2301      	movs	r3, #1
 800675c:	fab0 f480 	clz	r4, r0
 8006760:	0964      	lsrs	r4, r4, #5
 8006762:	4635      	mov	r5, r6
 8006764:	9300      	str	r3, [sp, #0]
 8006766:	463a      	mov	r2, r7
 8006768:	4616      	mov	r6, r2
 800676a:	3201      	adds	r2, #1
 800676c:	7830      	ldrb	r0, [r6, #0]
 800676e:	f7ff ff9b 	bl	80066a8 <__hexdig_fun>
 8006772:	2800      	cmp	r0, #0
 8006774:	d1f8      	bne.n	8006768 <__gethex+0x94>
 8006776:	9901      	ldr	r1, [sp, #4]
 8006778:	4652      	mov	r2, sl
 800677a:	4630      	mov	r0, r6
 800677c:	f001 fa0c 	bl	8007b98 <strncmp>
 8006780:	b980      	cbnz	r0, 80067a4 <__gethex+0xd0>
 8006782:	b94d      	cbnz	r5, 8006798 <__gethex+0xc4>
 8006784:	eb06 050a 	add.w	r5, r6, sl
 8006788:	462a      	mov	r2, r5
 800678a:	4616      	mov	r6, r2
 800678c:	3201      	adds	r2, #1
 800678e:	7830      	ldrb	r0, [r6, #0]
 8006790:	f7ff ff8a 	bl	80066a8 <__hexdig_fun>
 8006794:	2800      	cmp	r0, #0
 8006796:	d1f8      	bne.n	800678a <__gethex+0xb6>
 8006798:	1bad      	subs	r5, r5, r6
 800679a:	00ad      	lsls	r5, r5, #2
 800679c:	e004      	b.n	80067a8 <__gethex+0xd4>
 800679e:	2400      	movs	r4, #0
 80067a0:	4625      	mov	r5, r4
 80067a2:	e7e0      	b.n	8006766 <__gethex+0x92>
 80067a4:	2d00      	cmp	r5, #0
 80067a6:	d1f7      	bne.n	8006798 <__gethex+0xc4>
 80067a8:	7833      	ldrb	r3, [r6, #0]
 80067aa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80067ae:	2b50      	cmp	r3, #80	; 0x50
 80067b0:	d13b      	bne.n	800682a <__gethex+0x156>
 80067b2:	7873      	ldrb	r3, [r6, #1]
 80067b4:	2b2b      	cmp	r3, #43	; 0x2b
 80067b6:	d02c      	beq.n	8006812 <__gethex+0x13e>
 80067b8:	2b2d      	cmp	r3, #45	; 0x2d
 80067ba:	d02e      	beq.n	800681a <__gethex+0x146>
 80067bc:	1c71      	adds	r1, r6, #1
 80067be:	f04f 0900 	mov.w	r9, #0
 80067c2:	7808      	ldrb	r0, [r1, #0]
 80067c4:	f7ff ff70 	bl	80066a8 <__hexdig_fun>
 80067c8:	1e43      	subs	r3, r0, #1
 80067ca:	b2db      	uxtb	r3, r3
 80067cc:	2b18      	cmp	r3, #24
 80067ce:	d82c      	bhi.n	800682a <__gethex+0x156>
 80067d0:	f1a0 0210 	sub.w	r2, r0, #16
 80067d4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80067d8:	f7ff ff66 	bl	80066a8 <__hexdig_fun>
 80067dc:	1e43      	subs	r3, r0, #1
 80067de:	b2db      	uxtb	r3, r3
 80067e0:	2b18      	cmp	r3, #24
 80067e2:	d91d      	bls.n	8006820 <__gethex+0x14c>
 80067e4:	f1b9 0f00 	cmp.w	r9, #0
 80067e8:	d000      	beq.n	80067ec <__gethex+0x118>
 80067ea:	4252      	negs	r2, r2
 80067ec:	4415      	add	r5, r2
 80067ee:	f8cb 1000 	str.w	r1, [fp]
 80067f2:	b1e4      	cbz	r4, 800682e <__gethex+0x15a>
 80067f4:	9b00      	ldr	r3, [sp, #0]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	bf14      	ite	ne
 80067fa:	2700      	movne	r7, #0
 80067fc:	2706      	moveq	r7, #6
 80067fe:	4638      	mov	r0, r7
 8006800:	b009      	add	sp, #36	; 0x24
 8006802:	ecbd 8b02 	vpop	{d8}
 8006806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800680a:	463e      	mov	r6, r7
 800680c:	4625      	mov	r5, r4
 800680e:	2401      	movs	r4, #1
 8006810:	e7ca      	b.n	80067a8 <__gethex+0xd4>
 8006812:	f04f 0900 	mov.w	r9, #0
 8006816:	1cb1      	adds	r1, r6, #2
 8006818:	e7d3      	b.n	80067c2 <__gethex+0xee>
 800681a:	f04f 0901 	mov.w	r9, #1
 800681e:	e7fa      	b.n	8006816 <__gethex+0x142>
 8006820:	230a      	movs	r3, #10
 8006822:	fb03 0202 	mla	r2, r3, r2, r0
 8006826:	3a10      	subs	r2, #16
 8006828:	e7d4      	b.n	80067d4 <__gethex+0x100>
 800682a:	4631      	mov	r1, r6
 800682c:	e7df      	b.n	80067ee <__gethex+0x11a>
 800682e:	1bf3      	subs	r3, r6, r7
 8006830:	3b01      	subs	r3, #1
 8006832:	4621      	mov	r1, r4
 8006834:	2b07      	cmp	r3, #7
 8006836:	dc0b      	bgt.n	8006850 <__gethex+0x17c>
 8006838:	ee18 0a10 	vmov	r0, s16
 800683c:	f000 fa7e 	bl	8006d3c <_Balloc>
 8006840:	4604      	mov	r4, r0
 8006842:	b940      	cbnz	r0, 8006856 <__gethex+0x182>
 8006844:	4b5d      	ldr	r3, [pc, #372]	; (80069bc <__gethex+0x2e8>)
 8006846:	4602      	mov	r2, r0
 8006848:	21de      	movs	r1, #222	; 0xde
 800684a:	485d      	ldr	r0, [pc, #372]	; (80069c0 <__gethex+0x2ec>)
 800684c:	f001 f9c6 	bl	8007bdc <__assert_func>
 8006850:	3101      	adds	r1, #1
 8006852:	105b      	asrs	r3, r3, #1
 8006854:	e7ee      	b.n	8006834 <__gethex+0x160>
 8006856:	f100 0914 	add.w	r9, r0, #20
 800685a:	f04f 0b00 	mov.w	fp, #0
 800685e:	f1ca 0301 	rsb	r3, sl, #1
 8006862:	f8cd 9008 	str.w	r9, [sp, #8]
 8006866:	f8cd b000 	str.w	fp, [sp]
 800686a:	9306      	str	r3, [sp, #24]
 800686c:	42b7      	cmp	r7, r6
 800686e:	d340      	bcc.n	80068f2 <__gethex+0x21e>
 8006870:	9802      	ldr	r0, [sp, #8]
 8006872:	9b00      	ldr	r3, [sp, #0]
 8006874:	f840 3b04 	str.w	r3, [r0], #4
 8006878:	eba0 0009 	sub.w	r0, r0, r9
 800687c:	1080      	asrs	r0, r0, #2
 800687e:	0146      	lsls	r6, r0, #5
 8006880:	6120      	str	r0, [r4, #16]
 8006882:	4618      	mov	r0, r3
 8006884:	f000 fb4c 	bl	8006f20 <__hi0bits>
 8006888:	1a30      	subs	r0, r6, r0
 800688a:	f8d8 6000 	ldr.w	r6, [r8]
 800688e:	42b0      	cmp	r0, r6
 8006890:	dd63      	ble.n	800695a <__gethex+0x286>
 8006892:	1b87      	subs	r7, r0, r6
 8006894:	4639      	mov	r1, r7
 8006896:	4620      	mov	r0, r4
 8006898:	f000 fef0 	bl	800767c <__any_on>
 800689c:	4682      	mov	sl, r0
 800689e:	b1a8      	cbz	r0, 80068cc <__gethex+0x1f8>
 80068a0:	1e7b      	subs	r3, r7, #1
 80068a2:	1159      	asrs	r1, r3, #5
 80068a4:	f003 021f 	and.w	r2, r3, #31
 80068a8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80068ac:	f04f 0a01 	mov.w	sl, #1
 80068b0:	fa0a f202 	lsl.w	r2, sl, r2
 80068b4:	420a      	tst	r2, r1
 80068b6:	d009      	beq.n	80068cc <__gethex+0x1f8>
 80068b8:	4553      	cmp	r3, sl
 80068ba:	dd05      	ble.n	80068c8 <__gethex+0x1f4>
 80068bc:	1eb9      	subs	r1, r7, #2
 80068be:	4620      	mov	r0, r4
 80068c0:	f000 fedc 	bl	800767c <__any_on>
 80068c4:	2800      	cmp	r0, #0
 80068c6:	d145      	bne.n	8006954 <__gethex+0x280>
 80068c8:	f04f 0a02 	mov.w	sl, #2
 80068cc:	4639      	mov	r1, r7
 80068ce:	4620      	mov	r0, r4
 80068d0:	f7ff fe98 	bl	8006604 <rshift>
 80068d4:	443d      	add	r5, r7
 80068d6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80068da:	42ab      	cmp	r3, r5
 80068dc:	da4c      	bge.n	8006978 <__gethex+0x2a4>
 80068de:	ee18 0a10 	vmov	r0, s16
 80068e2:	4621      	mov	r1, r4
 80068e4:	f000 fa6a 	bl	8006dbc <_Bfree>
 80068e8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80068ea:	2300      	movs	r3, #0
 80068ec:	6013      	str	r3, [r2, #0]
 80068ee:	27a3      	movs	r7, #163	; 0xa3
 80068f0:	e785      	b.n	80067fe <__gethex+0x12a>
 80068f2:	1e73      	subs	r3, r6, #1
 80068f4:	9a05      	ldr	r2, [sp, #20]
 80068f6:	9303      	str	r3, [sp, #12]
 80068f8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d019      	beq.n	8006934 <__gethex+0x260>
 8006900:	f1bb 0f20 	cmp.w	fp, #32
 8006904:	d107      	bne.n	8006916 <__gethex+0x242>
 8006906:	9b02      	ldr	r3, [sp, #8]
 8006908:	9a00      	ldr	r2, [sp, #0]
 800690a:	f843 2b04 	str.w	r2, [r3], #4
 800690e:	9302      	str	r3, [sp, #8]
 8006910:	2300      	movs	r3, #0
 8006912:	9300      	str	r3, [sp, #0]
 8006914:	469b      	mov	fp, r3
 8006916:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800691a:	f7ff fec5 	bl	80066a8 <__hexdig_fun>
 800691e:	9b00      	ldr	r3, [sp, #0]
 8006920:	f000 000f 	and.w	r0, r0, #15
 8006924:	fa00 f00b 	lsl.w	r0, r0, fp
 8006928:	4303      	orrs	r3, r0
 800692a:	9300      	str	r3, [sp, #0]
 800692c:	f10b 0b04 	add.w	fp, fp, #4
 8006930:	9b03      	ldr	r3, [sp, #12]
 8006932:	e00d      	b.n	8006950 <__gethex+0x27c>
 8006934:	9b03      	ldr	r3, [sp, #12]
 8006936:	9a06      	ldr	r2, [sp, #24]
 8006938:	4413      	add	r3, r2
 800693a:	42bb      	cmp	r3, r7
 800693c:	d3e0      	bcc.n	8006900 <__gethex+0x22c>
 800693e:	4618      	mov	r0, r3
 8006940:	9901      	ldr	r1, [sp, #4]
 8006942:	9307      	str	r3, [sp, #28]
 8006944:	4652      	mov	r2, sl
 8006946:	f001 f927 	bl	8007b98 <strncmp>
 800694a:	9b07      	ldr	r3, [sp, #28]
 800694c:	2800      	cmp	r0, #0
 800694e:	d1d7      	bne.n	8006900 <__gethex+0x22c>
 8006950:	461e      	mov	r6, r3
 8006952:	e78b      	b.n	800686c <__gethex+0x198>
 8006954:	f04f 0a03 	mov.w	sl, #3
 8006958:	e7b8      	b.n	80068cc <__gethex+0x1f8>
 800695a:	da0a      	bge.n	8006972 <__gethex+0x29e>
 800695c:	1a37      	subs	r7, r6, r0
 800695e:	4621      	mov	r1, r4
 8006960:	ee18 0a10 	vmov	r0, s16
 8006964:	463a      	mov	r2, r7
 8006966:	f000 fc45 	bl	80071f4 <__lshift>
 800696a:	1bed      	subs	r5, r5, r7
 800696c:	4604      	mov	r4, r0
 800696e:	f100 0914 	add.w	r9, r0, #20
 8006972:	f04f 0a00 	mov.w	sl, #0
 8006976:	e7ae      	b.n	80068d6 <__gethex+0x202>
 8006978:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800697c:	42a8      	cmp	r0, r5
 800697e:	dd72      	ble.n	8006a66 <__gethex+0x392>
 8006980:	1b45      	subs	r5, r0, r5
 8006982:	42ae      	cmp	r6, r5
 8006984:	dc36      	bgt.n	80069f4 <__gethex+0x320>
 8006986:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800698a:	2b02      	cmp	r3, #2
 800698c:	d02a      	beq.n	80069e4 <__gethex+0x310>
 800698e:	2b03      	cmp	r3, #3
 8006990:	d02c      	beq.n	80069ec <__gethex+0x318>
 8006992:	2b01      	cmp	r3, #1
 8006994:	d11c      	bne.n	80069d0 <__gethex+0x2fc>
 8006996:	42ae      	cmp	r6, r5
 8006998:	d11a      	bne.n	80069d0 <__gethex+0x2fc>
 800699a:	2e01      	cmp	r6, #1
 800699c:	d112      	bne.n	80069c4 <__gethex+0x2f0>
 800699e:	9a04      	ldr	r2, [sp, #16]
 80069a0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80069a4:	6013      	str	r3, [r2, #0]
 80069a6:	2301      	movs	r3, #1
 80069a8:	6123      	str	r3, [r4, #16]
 80069aa:	f8c9 3000 	str.w	r3, [r9]
 80069ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80069b0:	2762      	movs	r7, #98	; 0x62
 80069b2:	601c      	str	r4, [r3, #0]
 80069b4:	e723      	b.n	80067fe <__gethex+0x12a>
 80069b6:	bf00      	nop
 80069b8:	08008a40 	.word	0x08008a40
 80069bc:	080089c8 	.word	0x080089c8
 80069c0:	080089d9 	.word	0x080089d9
 80069c4:	1e71      	subs	r1, r6, #1
 80069c6:	4620      	mov	r0, r4
 80069c8:	f000 fe58 	bl	800767c <__any_on>
 80069cc:	2800      	cmp	r0, #0
 80069ce:	d1e6      	bne.n	800699e <__gethex+0x2ca>
 80069d0:	ee18 0a10 	vmov	r0, s16
 80069d4:	4621      	mov	r1, r4
 80069d6:	f000 f9f1 	bl	8006dbc <_Bfree>
 80069da:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80069dc:	2300      	movs	r3, #0
 80069de:	6013      	str	r3, [r2, #0]
 80069e0:	2750      	movs	r7, #80	; 0x50
 80069e2:	e70c      	b.n	80067fe <__gethex+0x12a>
 80069e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d1f2      	bne.n	80069d0 <__gethex+0x2fc>
 80069ea:	e7d8      	b.n	800699e <__gethex+0x2ca>
 80069ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d1d5      	bne.n	800699e <__gethex+0x2ca>
 80069f2:	e7ed      	b.n	80069d0 <__gethex+0x2fc>
 80069f4:	1e6f      	subs	r7, r5, #1
 80069f6:	f1ba 0f00 	cmp.w	sl, #0
 80069fa:	d131      	bne.n	8006a60 <__gethex+0x38c>
 80069fc:	b127      	cbz	r7, 8006a08 <__gethex+0x334>
 80069fe:	4639      	mov	r1, r7
 8006a00:	4620      	mov	r0, r4
 8006a02:	f000 fe3b 	bl	800767c <__any_on>
 8006a06:	4682      	mov	sl, r0
 8006a08:	117b      	asrs	r3, r7, #5
 8006a0a:	2101      	movs	r1, #1
 8006a0c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8006a10:	f007 071f 	and.w	r7, r7, #31
 8006a14:	fa01 f707 	lsl.w	r7, r1, r7
 8006a18:	421f      	tst	r7, r3
 8006a1a:	4629      	mov	r1, r5
 8006a1c:	4620      	mov	r0, r4
 8006a1e:	bf18      	it	ne
 8006a20:	f04a 0a02 	orrne.w	sl, sl, #2
 8006a24:	1b76      	subs	r6, r6, r5
 8006a26:	f7ff fded 	bl	8006604 <rshift>
 8006a2a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8006a2e:	2702      	movs	r7, #2
 8006a30:	f1ba 0f00 	cmp.w	sl, #0
 8006a34:	d048      	beq.n	8006ac8 <__gethex+0x3f4>
 8006a36:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006a3a:	2b02      	cmp	r3, #2
 8006a3c:	d015      	beq.n	8006a6a <__gethex+0x396>
 8006a3e:	2b03      	cmp	r3, #3
 8006a40:	d017      	beq.n	8006a72 <__gethex+0x39e>
 8006a42:	2b01      	cmp	r3, #1
 8006a44:	d109      	bne.n	8006a5a <__gethex+0x386>
 8006a46:	f01a 0f02 	tst.w	sl, #2
 8006a4a:	d006      	beq.n	8006a5a <__gethex+0x386>
 8006a4c:	f8d9 0000 	ldr.w	r0, [r9]
 8006a50:	ea4a 0a00 	orr.w	sl, sl, r0
 8006a54:	f01a 0f01 	tst.w	sl, #1
 8006a58:	d10e      	bne.n	8006a78 <__gethex+0x3a4>
 8006a5a:	f047 0710 	orr.w	r7, r7, #16
 8006a5e:	e033      	b.n	8006ac8 <__gethex+0x3f4>
 8006a60:	f04f 0a01 	mov.w	sl, #1
 8006a64:	e7d0      	b.n	8006a08 <__gethex+0x334>
 8006a66:	2701      	movs	r7, #1
 8006a68:	e7e2      	b.n	8006a30 <__gethex+0x35c>
 8006a6a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006a6c:	f1c3 0301 	rsb	r3, r3, #1
 8006a70:	9315      	str	r3, [sp, #84]	; 0x54
 8006a72:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d0f0      	beq.n	8006a5a <__gethex+0x386>
 8006a78:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8006a7c:	f104 0314 	add.w	r3, r4, #20
 8006a80:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8006a84:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8006a88:	f04f 0c00 	mov.w	ip, #0
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a92:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8006a96:	d01c      	beq.n	8006ad2 <__gethex+0x3fe>
 8006a98:	3201      	adds	r2, #1
 8006a9a:	6002      	str	r2, [r0, #0]
 8006a9c:	2f02      	cmp	r7, #2
 8006a9e:	f104 0314 	add.w	r3, r4, #20
 8006aa2:	d13f      	bne.n	8006b24 <__gethex+0x450>
 8006aa4:	f8d8 2000 	ldr.w	r2, [r8]
 8006aa8:	3a01      	subs	r2, #1
 8006aaa:	42b2      	cmp	r2, r6
 8006aac:	d10a      	bne.n	8006ac4 <__gethex+0x3f0>
 8006aae:	1171      	asrs	r1, r6, #5
 8006ab0:	2201      	movs	r2, #1
 8006ab2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006ab6:	f006 061f 	and.w	r6, r6, #31
 8006aba:	fa02 f606 	lsl.w	r6, r2, r6
 8006abe:	421e      	tst	r6, r3
 8006ac0:	bf18      	it	ne
 8006ac2:	4617      	movne	r7, r2
 8006ac4:	f047 0720 	orr.w	r7, r7, #32
 8006ac8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006aca:	601c      	str	r4, [r3, #0]
 8006acc:	9b04      	ldr	r3, [sp, #16]
 8006ace:	601d      	str	r5, [r3, #0]
 8006ad0:	e695      	b.n	80067fe <__gethex+0x12a>
 8006ad2:	4299      	cmp	r1, r3
 8006ad4:	f843 cc04 	str.w	ip, [r3, #-4]
 8006ad8:	d8d8      	bhi.n	8006a8c <__gethex+0x3b8>
 8006ada:	68a3      	ldr	r3, [r4, #8]
 8006adc:	459b      	cmp	fp, r3
 8006ade:	db19      	blt.n	8006b14 <__gethex+0x440>
 8006ae0:	6861      	ldr	r1, [r4, #4]
 8006ae2:	ee18 0a10 	vmov	r0, s16
 8006ae6:	3101      	adds	r1, #1
 8006ae8:	f000 f928 	bl	8006d3c <_Balloc>
 8006aec:	4681      	mov	r9, r0
 8006aee:	b918      	cbnz	r0, 8006af8 <__gethex+0x424>
 8006af0:	4b1a      	ldr	r3, [pc, #104]	; (8006b5c <__gethex+0x488>)
 8006af2:	4602      	mov	r2, r0
 8006af4:	2184      	movs	r1, #132	; 0x84
 8006af6:	e6a8      	b.n	800684a <__gethex+0x176>
 8006af8:	6922      	ldr	r2, [r4, #16]
 8006afa:	3202      	adds	r2, #2
 8006afc:	f104 010c 	add.w	r1, r4, #12
 8006b00:	0092      	lsls	r2, r2, #2
 8006b02:	300c      	adds	r0, #12
 8006b04:	f000 f90c 	bl	8006d20 <memcpy>
 8006b08:	4621      	mov	r1, r4
 8006b0a:	ee18 0a10 	vmov	r0, s16
 8006b0e:	f000 f955 	bl	8006dbc <_Bfree>
 8006b12:	464c      	mov	r4, r9
 8006b14:	6923      	ldr	r3, [r4, #16]
 8006b16:	1c5a      	adds	r2, r3, #1
 8006b18:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006b1c:	6122      	str	r2, [r4, #16]
 8006b1e:	2201      	movs	r2, #1
 8006b20:	615a      	str	r2, [r3, #20]
 8006b22:	e7bb      	b.n	8006a9c <__gethex+0x3c8>
 8006b24:	6922      	ldr	r2, [r4, #16]
 8006b26:	455a      	cmp	r2, fp
 8006b28:	dd0b      	ble.n	8006b42 <__gethex+0x46e>
 8006b2a:	2101      	movs	r1, #1
 8006b2c:	4620      	mov	r0, r4
 8006b2e:	f7ff fd69 	bl	8006604 <rshift>
 8006b32:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006b36:	3501      	adds	r5, #1
 8006b38:	42ab      	cmp	r3, r5
 8006b3a:	f6ff aed0 	blt.w	80068de <__gethex+0x20a>
 8006b3e:	2701      	movs	r7, #1
 8006b40:	e7c0      	b.n	8006ac4 <__gethex+0x3f0>
 8006b42:	f016 061f 	ands.w	r6, r6, #31
 8006b46:	d0fa      	beq.n	8006b3e <__gethex+0x46a>
 8006b48:	4453      	add	r3, sl
 8006b4a:	f1c6 0620 	rsb	r6, r6, #32
 8006b4e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8006b52:	f000 f9e5 	bl	8006f20 <__hi0bits>
 8006b56:	42b0      	cmp	r0, r6
 8006b58:	dbe7      	blt.n	8006b2a <__gethex+0x456>
 8006b5a:	e7f0      	b.n	8006b3e <__gethex+0x46a>
 8006b5c:	080089c8 	.word	0x080089c8

08006b60 <L_shift>:
 8006b60:	f1c2 0208 	rsb	r2, r2, #8
 8006b64:	0092      	lsls	r2, r2, #2
 8006b66:	b570      	push	{r4, r5, r6, lr}
 8006b68:	f1c2 0620 	rsb	r6, r2, #32
 8006b6c:	6843      	ldr	r3, [r0, #4]
 8006b6e:	6804      	ldr	r4, [r0, #0]
 8006b70:	fa03 f506 	lsl.w	r5, r3, r6
 8006b74:	432c      	orrs	r4, r5
 8006b76:	40d3      	lsrs	r3, r2
 8006b78:	6004      	str	r4, [r0, #0]
 8006b7a:	f840 3f04 	str.w	r3, [r0, #4]!
 8006b7e:	4288      	cmp	r0, r1
 8006b80:	d3f4      	bcc.n	8006b6c <L_shift+0xc>
 8006b82:	bd70      	pop	{r4, r5, r6, pc}

08006b84 <__match>:
 8006b84:	b530      	push	{r4, r5, lr}
 8006b86:	6803      	ldr	r3, [r0, #0]
 8006b88:	3301      	adds	r3, #1
 8006b8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b8e:	b914      	cbnz	r4, 8006b96 <__match+0x12>
 8006b90:	6003      	str	r3, [r0, #0]
 8006b92:	2001      	movs	r0, #1
 8006b94:	bd30      	pop	{r4, r5, pc}
 8006b96:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006b9a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8006b9e:	2d19      	cmp	r5, #25
 8006ba0:	bf98      	it	ls
 8006ba2:	3220      	addls	r2, #32
 8006ba4:	42a2      	cmp	r2, r4
 8006ba6:	d0f0      	beq.n	8006b8a <__match+0x6>
 8006ba8:	2000      	movs	r0, #0
 8006baa:	e7f3      	b.n	8006b94 <__match+0x10>

08006bac <__hexnan>:
 8006bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bb0:	680b      	ldr	r3, [r1, #0]
 8006bb2:	115e      	asrs	r6, r3, #5
 8006bb4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8006bb8:	f013 031f 	ands.w	r3, r3, #31
 8006bbc:	b087      	sub	sp, #28
 8006bbe:	bf18      	it	ne
 8006bc0:	3604      	addne	r6, #4
 8006bc2:	2500      	movs	r5, #0
 8006bc4:	1f37      	subs	r7, r6, #4
 8006bc6:	4690      	mov	r8, r2
 8006bc8:	6802      	ldr	r2, [r0, #0]
 8006bca:	9301      	str	r3, [sp, #4]
 8006bcc:	4682      	mov	sl, r0
 8006bce:	f846 5c04 	str.w	r5, [r6, #-4]
 8006bd2:	46b9      	mov	r9, r7
 8006bd4:	463c      	mov	r4, r7
 8006bd6:	9502      	str	r5, [sp, #8]
 8006bd8:	46ab      	mov	fp, r5
 8006bda:	7851      	ldrb	r1, [r2, #1]
 8006bdc:	1c53      	adds	r3, r2, #1
 8006bde:	9303      	str	r3, [sp, #12]
 8006be0:	b341      	cbz	r1, 8006c34 <__hexnan+0x88>
 8006be2:	4608      	mov	r0, r1
 8006be4:	9205      	str	r2, [sp, #20]
 8006be6:	9104      	str	r1, [sp, #16]
 8006be8:	f7ff fd5e 	bl	80066a8 <__hexdig_fun>
 8006bec:	2800      	cmp	r0, #0
 8006bee:	d14f      	bne.n	8006c90 <__hexnan+0xe4>
 8006bf0:	9904      	ldr	r1, [sp, #16]
 8006bf2:	9a05      	ldr	r2, [sp, #20]
 8006bf4:	2920      	cmp	r1, #32
 8006bf6:	d818      	bhi.n	8006c2a <__hexnan+0x7e>
 8006bf8:	9b02      	ldr	r3, [sp, #8]
 8006bfa:	459b      	cmp	fp, r3
 8006bfc:	dd13      	ble.n	8006c26 <__hexnan+0x7a>
 8006bfe:	454c      	cmp	r4, r9
 8006c00:	d206      	bcs.n	8006c10 <__hexnan+0x64>
 8006c02:	2d07      	cmp	r5, #7
 8006c04:	dc04      	bgt.n	8006c10 <__hexnan+0x64>
 8006c06:	462a      	mov	r2, r5
 8006c08:	4649      	mov	r1, r9
 8006c0a:	4620      	mov	r0, r4
 8006c0c:	f7ff ffa8 	bl	8006b60 <L_shift>
 8006c10:	4544      	cmp	r4, r8
 8006c12:	d950      	bls.n	8006cb6 <__hexnan+0x10a>
 8006c14:	2300      	movs	r3, #0
 8006c16:	f1a4 0904 	sub.w	r9, r4, #4
 8006c1a:	f844 3c04 	str.w	r3, [r4, #-4]
 8006c1e:	f8cd b008 	str.w	fp, [sp, #8]
 8006c22:	464c      	mov	r4, r9
 8006c24:	461d      	mov	r5, r3
 8006c26:	9a03      	ldr	r2, [sp, #12]
 8006c28:	e7d7      	b.n	8006bda <__hexnan+0x2e>
 8006c2a:	2929      	cmp	r1, #41	; 0x29
 8006c2c:	d156      	bne.n	8006cdc <__hexnan+0x130>
 8006c2e:	3202      	adds	r2, #2
 8006c30:	f8ca 2000 	str.w	r2, [sl]
 8006c34:	f1bb 0f00 	cmp.w	fp, #0
 8006c38:	d050      	beq.n	8006cdc <__hexnan+0x130>
 8006c3a:	454c      	cmp	r4, r9
 8006c3c:	d206      	bcs.n	8006c4c <__hexnan+0xa0>
 8006c3e:	2d07      	cmp	r5, #7
 8006c40:	dc04      	bgt.n	8006c4c <__hexnan+0xa0>
 8006c42:	462a      	mov	r2, r5
 8006c44:	4649      	mov	r1, r9
 8006c46:	4620      	mov	r0, r4
 8006c48:	f7ff ff8a 	bl	8006b60 <L_shift>
 8006c4c:	4544      	cmp	r4, r8
 8006c4e:	d934      	bls.n	8006cba <__hexnan+0x10e>
 8006c50:	f1a8 0204 	sub.w	r2, r8, #4
 8006c54:	4623      	mov	r3, r4
 8006c56:	f853 1b04 	ldr.w	r1, [r3], #4
 8006c5a:	f842 1f04 	str.w	r1, [r2, #4]!
 8006c5e:	429f      	cmp	r7, r3
 8006c60:	d2f9      	bcs.n	8006c56 <__hexnan+0xaa>
 8006c62:	1b3b      	subs	r3, r7, r4
 8006c64:	f023 0303 	bic.w	r3, r3, #3
 8006c68:	3304      	adds	r3, #4
 8006c6a:	3401      	adds	r4, #1
 8006c6c:	3e03      	subs	r6, #3
 8006c6e:	42b4      	cmp	r4, r6
 8006c70:	bf88      	it	hi
 8006c72:	2304      	movhi	r3, #4
 8006c74:	4443      	add	r3, r8
 8006c76:	2200      	movs	r2, #0
 8006c78:	f843 2b04 	str.w	r2, [r3], #4
 8006c7c:	429f      	cmp	r7, r3
 8006c7e:	d2fb      	bcs.n	8006c78 <__hexnan+0xcc>
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	b91b      	cbnz	r3, 8006c8c <__hexnan+0xe0>
 8006c84:	4547      	cmp	r7, r8
 8006c86:	d127      	bne.n	8006cd8 <__hexnan+0x12c>
 8006c88:	2301      	movs	r3, #1
 8006c8a:	603b      	str	r3, [r7, #0]
 8006c8c:	2005      	movs	r0, #5
 8006c8e:	e026      	b.n	8006cde <__hexnan+0x132>
 8006c90:	3501      	adds	r5, #1
 8006c92:	2d08      	cmp	r5, #8
 8006c94:	f10b 0b01 	add.w	fp, fp, #1
 8006c98:	dd06      	ble.n	8006ca8 <__hexnan+0xfc>
 8006c9a:	4544      	cmp	r4, r8
 8006c9c:	d9c3      	bls.n	8006c26 <__hexnan+0x7a>
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	f844 3c04 	str.w	r3, [r4, #-4]
 8006ca4:	2501      	movs	r5, #1
 8006ca6:	3c04      	subs	r4, #4
 8006ca8:	6822      	ldr	r2, [r4, #0]
 8006caa:	f000 000f 	and.w	r0, r0, #15
 8006cae:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8006cb2:	6022      	str	r2, [r4, #0]
 8006cb4:	e7b7      	b.n	8006c26 <__hexnan+0x7a>
 8006cb6:	2508      	movs	r5, #8
 8006cb8:	e7b5      	b.n	8006c26 <__hexnan+0x7a>
 8006cba:	9b01      	ldr	r3, [sp, #4]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d0df      	beq.n	8006c80 <__hexnan+0xd4>
 8006cc0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006cc4:	f1c3 0320 	rsb	r3, r3, #32
 8006cc8:	fa22 f303 	lsr.w	r3, r2, r3
 8006ccc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8006cd0:	401a      	ands	r2, r3
 8006cd2:	f846 2c04 	str.w	r2, [r6, #-4]
 8006cd6:	e7d3      	b.n	8006c80 <__hexnan+0xd4>
 8006cd8:	3f04      	subs	r7, #4
 8006cda:	e7d1      	b.n	8006c80 <__hexnan+0xd4>
 8006cdc:	2004      	movs	r0, #4
 8006cde:	b007      	add	sp, #28
 8006ce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006ce4 <_localeconv_r>:
 8006ce4:	4800      	ldr	r0, [pc, #0]	; (8006ce8 <_localeconv_r+0x4>)
 8006ce6:	4770      	bx	lr
 8006ce8:	20000164 	.word	0x20000164

08006cec <malloc>:
 8006cec:	4b02      	ldr	r3, [pc, #8]	; (8006cf8 <malloc+0xc>)
 8006cee:	4601      	mov	r1, r0
 8006cf0:	6818      	ldr	r0, [r3, #0]
 8006cf2:	f000 bd67 	b.w	80077c4 <_malloc_r>
 8006cf6:	bf00      	nop
 8006cf8:	2000000c 	.word	0x2000000c

08006cfc <__ascii_mbtowc>:
 8006cfc:	b082      	sub	sp, #8
 8006cfe:	b901      	cbnz	r1, 8006d02 <__ascii_mbtowc+0x6>
 8006d00:	a901      	add	r1, sp, #4
 8006d02:	b142      	cbz	r2, 8006d16 <__ascii_mbtowc+0x1a>
 8006d04:	b14b      	cbz	r3, 8006d1a <__ascii_mbtowc+0x1e>
 8006d06:	7813      	ldrb	r3, [r2, #0]
 8006d08:	600b      	str	r3, [r1, #0]
 8006d0a:	7812      	ldrb	r2, [r2, #0]
 8006d0c:	1e10      	subs	r0, r2, #0
 8006d0e:	bf18      	it	ne
 8006d10:	2001      	movne	r0, #1
 8006d12:	b002      	add	sp, #8
 8006d14:	4770      	bx	lr
 8006d16:	4610      	mov	r0, r2
 8006d18:	e7fb      	b.n	8006d12 <__ascii_mbtowc+0x16>
 8006d1a:	f06f 0001 	mvn.w	r0, #1
 8006d1e:	e7f8      	b.n	8006d12 <__ascii_mbtowc+0x16>

08006d20 <memcpy>:
 8006d20:	440a      	add	r2, r1
 8006d22:	4291      	cmp	r1, r2
 8006d24:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006d28:	d100      	bne.n	8006d2c <memcpy+0xc>
 8006d2a:	4770      	bx	lr
 8006d2c:	b510      	push	{r4, lr}
 8006d2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d32:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d36:	4291      	cmp	r1, r2
 8006d38:	d1f9      	bne.n	8006d2e <memcpy+0xe>
 8006d3a:	bd10      	pop	{r4, pc}

08006d3c <_Balloc>:
 8006d3c:	b570      	push	{r4, r5, r6, lr}
 8006d3e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006d40:	4604      	mov	r4, r0
 8006d42:	460d      	mov	r5, r1
 8006d44:	b976      	cbnz	r6, 8006d64 <_Balloc+0x28>
 8006d46:	2010      	movs	r0, #16
 8006d48:	f7ff ffd0 	bl	8006cec <malloc>
 8006d4c:	4602      	mov	r2, r0
 8006d4e:	6260      	str	r0, [r4, #36]	; 0x24
 8006d50:	b920      	cbnz	r0, 8006d5c <_Balloc+0x20>
 8006d52:	4b18      	ldr	r3, [pc, #96]	; (8006db4 <_Balloc+0x78>)
 8006d54:	4818      	ldr	r0, [pc, #96]	; (8006db8 <_Balloc+0x7c>)
 8006d56:	2166      	movs	r1, #102	; 0x66
 8006d58:	f000 ff40 	bl	8007bdc <__assert_func>
 8006d5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006d60:	6006      	str	r6, [r0, #0]
 8006d62:	60c6      	str	r6, [r0, #12]
 8006d64:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006d66:	68f3      	ldr	r3, [r6, #12]
 8006d68:	b183      	cbz	r3, 8006d8c <_Balloc+0x50>
 8006d6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d6c:	68db      	ldr	r3, [r3, #12]
 8006d6e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006d72:	b9b8      	cbnz	r0, 8006da4 <_Balloc+0x68>
 8006d74:	2101      	movs	r1, #1
 8006d76:	fa01 f605 	lsl.w	r6, r1, r5
 8006d7a:	1d72      	adds	r2, r6, #5
 8006d7c:	0092      	lsls	r2, r2, #2
 8006d7e:	4620      	mov	r0, r4
 8006d80:	f000 fc9d 	bl	80076be <_calloc_r>
 8006d84:	b160      	cbz	r0, 8006da0 <_Balloc+0x64>
 8006d86:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006d8a:	e00e      	b.n	8006daa <_Balloc+0x6e>
 8006d8c:	2221      	movs	r2, #33	; 0x21
 8006d8e:	2104      	movs	r1, #4
 8006d90:	4620      	mov	r0, r4
 8006d92:	f000 fc94 	bl	80076be <_calloc_r>
 8006d96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d98:	60f0      	str	r0, [r6, #12]
 8006d9a:	68db      	ldr	r3, [r3, #12]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d1e4      	bne.n	8006d6a <_Balloc+0x2e>
 8006da0:	2000      	movs	r0, #0
 8006da2:	bd70      	pop	{r4, r5, r6, pc}
 8006da4:	6802      	ldr	r2, [r0, #0]
 8006da6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006daa:	2300      	movs	r3, #0
 8006dac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006db0:	e7f7      	b.n	8006da2 <_Balloc+0x66>
 8006db2:	bf00      	nop
 8006db4:	08008956 	.word	0x08008956
 8006db8:	08008a54 	.word	0x08008a54

08006dbc <_Bfree>:
 8006dbc:	b570      	push	{r4, r5, r6, lr}
 8006dbe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006dc0:	4605      	mov	r5, r0
 8006dc2:	460c      	mov	r4, r1
 8006dc4:	b976      	cbnz	r6, 8006de4 <_Bfree+0x28>
 8006dc6:	2010      	movs	r0, #16
 8006dc8:	f7ff ff90 	bl	8006cec <malloc>
 8006dcc:	4602      	mov	r2, r0
 8006dce:	6268      	str	r0, [r5, #36]	; 0x24
 8006dd0:	b920      	cbnz	r0, 8006ddc <_Bfree+0x20>
 8006dd2:	4b09      	ldr	r3, [pc, #36]	; (8006df8 <_Bfree+0x3c>)
 8006dd4:	4809      	ldr	r0, [pc, #36]	; (8006dfc <_Bfree+0x40>)
 8006dd6:	218a      	movs	r1, #138	; 0x8a
 8006dd8:	f000 ff00 	bl	8007bdc <__assert_func>
 8006ddc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006de0:	6006      	str	r6, [r0, #0]
 8006de2:	60c6      	str	r6, [r0, #12]
 8006de4:	b13c      	cbz	r4, 8006df6 <_Bfree+0x3a>
 8006de6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006de8:	6862      	ldr	r2, [r4, #4]
 8006dea:	68db      	ldr	r3, [r3, #12]
 8006dec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006df0:	6021      	str	r1, [r4, #0]
 8006df2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006df6:	bd70      	pop	{r4, r5, r6, pc}
 8006df8:	08008956 	.word	0x08008956
 8006dfc:	08008a54 	.word	0x08008a54

08006e00 <__multadd>:
 8006e00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e04:	690d      	ldr	r5, [r1, #16]
 8006e06:	4607      	mov	r7, r0
 8006e08:	460c      	mov	r4, r1
 8006e0a:	461e      	mov	r6, r3
 8006e0c:	f101 0c14 	add.w	ip, r1, #20
 8006e10:	2000      	movs	r0, #0
 8006e12:	f8dc 3000 	ldr.w	r3, [ip]
 8006e16:	b299      	uxth	r1, r3
 8006e18:	fb02 6101 	mla	r1, r2, r1, r6
 8006e1c:	0c1e      	lsrs	r6, r3, #16
 8006e1e:	0c0b      	lsrs	r3, r1, #16
 8006e20:	fb02 3306 	mla	r3, r2, r6, r3
 8006e24:	b289      	uxth	r1, r1
 8006e26:	3001      	adds	r0, #1
 8006e28:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006e2c:	4285      	cmp	r5, r0
 8006e2e:	f84c 1b04 	str.w	r1, [ip], #4
 8006e32:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006e36:	dcec      	bgt.n	8006e12 <__multadd+0x12>
 8006e38:	b30e      	cbz	r6, 8006e7e <__multadd+0x7e>
 8006e3a:	68a3      	ldr	r3, [r4, #8]
 8006e3c:	42ab      	cmp	r3, r5
 8006e3e:	dc19      	bgt.n	8006e74 <__multadd+0x74>
 8006e40:	6861      	ldr	r1, [r4, #4]
 8006e42:	4638      	mov	r0, r7
 8006e44:	3101      	adds	r1, #1
 8006e46:	f7ff ff79 	bl	8006d3c <_Balloc>
 8006e4a:	4680      	mov	r8, r0
 8006e4c:	b928      	cbnz	r0, 8006e5a <__multadd+0x5a>
 8006e4e:	4602      	mov	r2, r0
 8006e50:	4b0c      	ldr	r3, [pc, #48]	; (8006e84 <__multadd+0x84>)
 8006e52:	480d      	ldr	r0, [pc, #52]	; (8006e88 <__multadd+0x88>)
 8006e54:	21b5      	movs	r1, #181	; 0xb5
 8006e56:	f000 fec1 	bl	8007bdc <__assert_func>
 8006e5a:	6922      	ldr	r2, [r4, #16]
 8006e5c:	3202      	adds	r2, #2
 8006e5e:	f104 010c 	add.w	r1, r4, #12
 8006e62:	0092      	lsls	r2, r2, #2
 8006e64:	300c      	adds	r0, #12
 8006e66:	f7ff ff5b 	bl	8006d20 <memcpy>
 8006e6a:	4621      	mov	r1, r4
 8006e6c:	4638      	mov	r0, r7
 8006e6e:	f7ff ffa5 	bl	8006dbc <_Bfree>
 8006e72:	4644      	mov	r4, r8
 8006e74:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006e78:	3501      	adds	r5, #1
 8006e7a:	615e      	str	r6, [r3, #20]
 8006e7c:	6125      	str	r5, [r4, #16]
 8006e7e:	4620      	mov	r0, r4
 8006e80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e84:	080089c8 	.word	0x080089c8
 8006e88:	08008a54 	.word	0x08008a54

08006e8c <__s2b>:
 8006e8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e90:	460c      	mov	r4, r1
 8006e92:	4615      	mov	r5, r2
 8006e94:	461f      	mov	r7, r3
 8006e96:	2209      	movs	r2, #9
 8006e98:	3308      	adds	r3, #8
 8006e9a:	4606      	mov	r6, r0
 8006e9c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006ea0:	2100      	movs	r1, #0
 8006ea2:	2201      	movs	r2, #1
 8006ea4:	429a      	cmp	r2, r3
 8006ea6:	db09      	blt.n	8006ebc <__s2b+0x30>
 8006ea8:	4630      	mov	r0, r6
 8006eaa:	f7ff ff47 	bl	8006d3c <_Balloc>
 8006eae:	b940      	cbnz	r0, 8006ec2 <__s2b+0x36>
 8006eb0:	4602      	mov	r2, r0
 8006eb2:	4b19      	ldr	r3, [pc, #100]	; (8006f18 <__s2b+0x8c>)
 8006eb4:	4819      	ldr	r0, [pc, #100]	; (8006f1c <__s2b+0x90>)
 8006eb6:	21ce      	movs	r1, #206	; 0xce
 8006eb8:	f000 fe90 	bl	8007bdc <__assert_func>
 8006ebc:	0052      	lsls	r2, r2, #1
 8006ebe:	3101      	adds	r1, #1
 8006ec0:	e7f0      	b.n	8006ea4 <__s2b+0x18>
 8006ec2:	9b08      	ldr	r3, [sp, #32]
 8006ec4:	6143      	str	r3, [r0, #20]
 8006ec6:	2d09      	cmp	r5, #9
 8006ec8:	f04f 0301 	mov.w	r3, #1
 8006ecc:	6103      	str	r3, [r0, #16]
 8006ece:	dd16      	ble.n	8006efe <__s2b+0x72>
 8006ed0:	f104 0909 	add.w	r9, r4, #9
 8006ed4:	46c8      	mov	r8, r9
 8006ed6:	442c      	add	r4, r5
 8006ed8:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006edc:	4601      	mov	r1, r0
 8006ede:	3b30      	subs	r3, #48	; 0x30
 8006ee0:	220a      	movs	r2, #10
 8006ee2:	4630      	mov	r0, r6
 8006ee4:	f7ff ff8c 	bl	8006e00 <__multadd>
 8006ee8:	45a0      	cmp	r8, r4
 8006eea:	d1f5      	bne.n	8006ed8 <__s2b+0x4c>
 8006eec:	f1a5 0408 	sub.w	r4, r5, #8
 8006ef0:	444c      	add	r4, r9
 8006ef2:	1b2d      	subs	r5, r5, r4
 8006ef4:	1963      	adds	r3, r4, r5
 8006ef6:	42bb      	cmp	r3, r7
 8006ef8:	db04      	blt.n	8006f04 <__s2b+0x78>
 8006efa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006efe:	340a      	adds	r4, #10
 8006f00:	2509      	movs	r5, #9
 8006f02:	e7f6      	b.n	8006ef2 <__s2b+0x66>
 8006f04:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006f08:	4601      	mov	r1, r0
 8006f0a:	3b30      	subs	r3, #48	; 0x30
 8006f0c:	220a      	movs	r2, #10
 8006f0e:	4630      	mov	r0, r6
 8006f10:	f7ff ff76 	bl	8006e00 <__multadd>
 8006f14:	e7ee      	b.n	8006ef4 <__s2b+0x68>
 8006f16:	bf00      	nop
 8006f18:	080089c8 	.word	0x080089c8
 8006f1c:	08008a54 	.word	0x08008a54

08006f20 <__hi0bits>:
 8006f20:	0c03      	lsrs	r3, r0, #16
 8006f22:	041b      	lsls	r3, r3, #16
 8006f24:	b9d3      	cbnz	r3, 8006f5c <__hi0bits+0x3c>
 8006f26:	0400      	lsls	r0, r0, #16
 8006f28:	2310      	movs	r3, #16
 8006f2a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006f2e:	bf04      	itt	eq
 8006f30:	0200      	lsleq	r0, r0, #8
 8006f32:	3308      	addeq	r3, #8
 8006f34:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006f38:	bf04      	itt	eq
 8006f3a:	0100      	lsleq	r0, r0, #4
 8006f3c:	3304      	addeq	r3, #4
 8006f3e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006f42:	bf04      	itt	eq
 8006f44:	0080      	lsleq	r0, r0, #2
 8006f46:	3302      	addeq	r3, #2
 8006f48:	2800      	cmp	r0, #0
 8006f4a:	db05      	blt.n	8006f58 <__hi0bits+0x38>
 8006f4c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006f50:	f103 0301 	add.w	r3, r3, #1
 8006f54:	bf08      	it	eq
 8006f56:	2320      	moveq	r3, #32
 8006f58:	4618      	mov	r0, r3
 8006f5a:	4770      	bx	lr
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	e7e4      	b.n	8006f2a <__hi0bits+0xa>

08006f60 <__lo0bits>:
 8006f60:	6803      	ldr	r3, [r0, #0]
 8006f62:	f013 0207 	ands.w	r2, r3, #7
 8006f66:	4601      	mov	r1, r0
 8006f68:	d00b      	beq.n	8006f82 <__lo0bits+0x22>
 8006f6a:	07da      	lsls	r2, r3, #31
 8006f6c:	d423      	bmi.n	8006fb6 <__lo0bits+0x56>
 8006f6e:	0798      	lsls	r0, r3, #30
 8006f70:	bf49      	itett	mi
 8006f72:	085b      	lsrmi	r3, r3, #1
 8006f74:	089b      	lsrpl	r3, r3, #2
 8006f76:	2001      	movmi	r0, #1
 8006f78:	600b      	strmi	r3, [r1, #0]
 8006f7a:	bf5c      	itt	pl
 8006f7c:	600b      	strpl	r3, [r1, #0]
 8006f7e:	2002      	movpl	r0, #2
 8006f80:	4770      	bx	lr
 8006f82:	b298      	uxth	r0, r3
 8006f84:	b9a8      	cbnz	r0, 8006fb2 <__lo0bits+0x52>
 8006f86:	0c1b      	lsrs	r3, r3, #16
 8006f88:	2010      	movs	r0, #16
 8006f8a:	b2da      	uxtb	r2, r3
 8006f8c:	b90a      	cbnz	r2, 8006f92 <__lo0bits+0x32>
 8006f8e:	3008      	adds	r0, #8
 8006f90:	0a1b      	lsrs	r3, r3, #8
 8006f92:	071a      	lsls	r2, r3, #28
 8006f94:	bf04      	itt	eq
 8006f96:	091b      	lsreq	r3, r3, #4
 8006f98:	3004      	addeq	r0, #4
 8006f9a:	079a      	lsls	r2, r3, #30
 8006f9c:	bf04      	itt	eq
 8006f9e:	089b      	lsreq	r3, r3, #2
 8006fa0:	3002      	addeq	r0, #2
 8006fa2:	07da      	lsls	r2, r3, #31
 8006fa4:	d403      	bmi.n	8006fae <__lo0bits+0x4e>
 8006fa6:	085b      	lsrs	r3, r3, #1
 8006fa8:	f100 0001 	add.w	r0, r0, #1
 8006fac:	d005      	beq.n	8006fba <__lo0bits+0x5a>
 8006fae:	600b      	str	r3, [r1, #0]
 8006fb0:	4770      	bx	lr
 8006fb2:	4610      	mov	r0, r2
 8006fb4:	e7e9      	b.n	8006f8a <__lo0bits+0x2a>
 8006fb6:	2000      	movs	r0, #0
 8006fb8:	4770      	bx	lr
 8006fba:	2020      	movs	r0, #32
 8006fbc:	4770      	bx	lr
	...

08006fc0 <__i2b>:
 8006fc0:	b510      	push	{r4, lr}
 8006fc2:	460c      	mov	r4, r1
 8006fc4:	2101      	movs	r1, #1
 8006fc6:	f7ff feb9 	bl	8006d3c <_Balloc>
 8006fca:	4602      	mov	r2, r0
 8006fcc:	b928      	cbnz	r0, 8006fda <__i2b+0x1a>
 8006fce:	4b05      	ldr	r3, [pc, #20]	; (8006fe4 <__i2b+0x24>)
 8006fd0:	4805      	ldr	r0, [pc, #20]	; (8006fe8 <__i2b+0x28>)
 8006fd2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006fd6:	f000 fe01 	bl	8007bdc <__assert_func>
 8006fda:	2301      	movs	r3, #1
 8006fdc:	6144      	str	r4, [r0, #20]
 8006fde:	6103      	str	r3, [r0, #16]
 8006fe0:	bd10      	pop	{r4, pc}
 8006fe2:	bf00      	nop
 8006fe4:	080089c8 	.word	0x080089c8
 8006fe8:	08008a54 	.word	0x08008a54

08006fec <__multiply>:
 8006fec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ff0:	4691      	mov	r9, r2
 8006ff2:	690a      	ldr	r2, [r1, #16]
 8006ff4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006ff8:	429a      	cmp	r2, r3
 8006ffa:	bfb8      	it	lt
 8006ffc:	460b      	movlt	r3, r1
 8006ffe:	460c      	mov	r4, r1
 8007000:	bfbc      	itt	lt
 8007002:	464c      	movlt	r4, r9
 8007004:	4699      	movlt	r9, r3
 8007006:	6927      	ldr	r7, [r4, #16]
 8007008:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800700c:	68a3      	ldr	r3, [r4, #8]
 800700e:	6861      	ldr	r1, [r4, #4]
 8007010:	eb07 060a 	add.w	r6, r7, sl
 8007014:	42b3      	cmp	r3, r6
 8007016:	b085      	sub	sp, #20
 8007018:	bfb8      	it	lt
 800701a:	3101      	addlt	r1, #1
 800701c:	f7ff fe8e 	bl	8006d3c <_Balloc>
 8007020:	b930      	cbnz	r0, 8007030 <__multiply+0x44>
 8007022:	4602      	mov	r2, r0
 8007024:	4b44      	ldr	r3, [pc, #272]	; (8007138 <__multiply+0x14c>)
 8007026:	4845      	ldr	r0, [pc, #276]	; (800713c <__multiply+0x150>)
 8007028:	f240 115d 	movw	r1, #349	; 0x15d
 800702c:	f000 fdd6 	bl	8007bdc <__assert_func>
 8007030:	f100 0514 	add.w	r5, r0, #20
 8007034:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007038:	462b      	mov	r3, r5
 800703a:	2200      	movs	r2, #0
 800703c:	4543      	cmp	r3, r8
 800703e:	d321      	bcc.n	8007084 <__multiply+0x98>
 8007040:	f104 0314 	add.w	r3, r4, #20
 8007044:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007048:	f109 0314 	add.w	r3, r9, #20
 800704c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007050:	9202      	str	r2, [sp, #8]
 8007052:	1b3a      	subs	r2, r7, r4
 8007054:	3a15      	subs	r2, #21
 8007056:	f022 0203 	bic.w	r2, r2, #3
 800705a:	3204      	adds	r2, #4
 800705c:	f104 0115 	add.w	r1, r4, #21
 8007060:	428f      	cmp	r7, r1
 8007062:	bf38      	it	cc
 8007064:	2204      	movcc	r2, #4
 8007066:	9201      	str	r2, [sp, #4]
 8007068:	9a02      	ldr	r2, [sp, #8]
 800706a:	9303      	str	r3, [sp, #12]
 800706c:	429a      	cmp	r2, r3
 800706e:	d80c      	bhi.n	800708a <__multiply+0x9e>
 8007070:	2e00      	cmp	r6, #0
 8007072:	dd03      	ble.n	800707c <__multiply+0x90>
 8007074:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007078:	2b00      	cmp	r3, #0
 800707a:	d05a      	beq.n	8007132 <__multiply+0x146>
 800707c:	6106      	str	r6, [r0, #16]
 800707e:	b005      	add	sp, #20
 8007080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007084:	f843 2b04 	str.w	r2, [r3], #4
 8007088:	e7d8      	b.n	800703c <__multiply+0x50>
 800708a:	f8b3 a000 	ldrh.w	sl, [r3]
 800708e:	f1ba 0f00 	cmp.w	sl, #0
 8007092:	d024      	beq.n	80070de <__multiply+0xf2>
 8007094:	f104 0e14 	add.w	lr, r4, #20
 8007098:	46a9      	mov	r9, r5
 800709a:	f04f 0c00 	mov.w	ip, #0
 800709e:	f85e 2b04 	ldr.w	r2, [lr], #4
 80070a2:	f8d9 1000 	ldr.w	r1, [r9]
 80070a6:	fa1f fb82 	uxth.w	fp, r2
 80070aa:	b289      	uxth	r1, r1
 80070ac:	fb0a 110b 	mla	r1, sl, fp, r1
 80070b0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80070b4:	f8d9 2000 	ldr.w	r2, [r9]
 80070b8:	4461      	add	r1, ip
 80070ba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80070be:	fb0a c20b 	mla	r2, sl, fp, ip
 80070c2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80070c6:	b289      	uxth	r1, r1
 80070c8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80070cc:	4577      	cmp	r7, lr
 80070ce:	f849 1b04 	str.w	r1, [r9], #4
 80070d2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80070d6:	d8e2      	bhi.n	800709e <__multiply+0xb2>
 80070d8:	9a01      	ldr	r2, [sp, #4]
 80070da:	f845 c002 	str.w	ip, [r5, r2]
 80070de:	9a03      	ldr	r2, [sp, #12]
 80070e0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80070e4:	3304      	adds	r3, #4
 80070e6:	f1b9 0f00 	cmp.w	r9, #0
 80070ea:	d020      	beq.n	800712e <__multiply+0x142>
 80070ec:	6829      	ldr	r1, [r5, #0]
 80070ee:	f104 0c14 	add.w	ip, r4, #20
 80070f2:	46ae      	mov	lr, r5
 80070f4:	f04f 0a00 	mov.w	sl, #0
 80070f8:	f8bc b000 	ldrh.w	fp, [ip]
 80070fc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007100:	fb09 220b 	mla	r2, r9, fp, r2
 8007104:	4492      	add	sl, r2
 8007106:	b289      	uxth	r1, r1
 8007108:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800710c:	f84e 1b04 	str.w	r1, [lr], #4
 8007110:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007114:	f8be 1000 	ldrh.w	r1, [lr]
 8007118:	0c12      	lsrs	r2, r2, #16
 800711a:	fb09 1102 	mla	r1, r9, r2, r1
 800711e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007122:	4567      	cmp	r7, ip
 8007124:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007128:	d8e6      	bhi.n	80070f8 <__multiply+0x10c>
 800712a:	9a01      	ldr	r2, [sp, #4]
 800712c:	50a9      	str	r1, [r5, r2]
 800712e:	3504      	adds	r5, #4
 8007130:	e79a      	b.n	8007068 <__multiply+0x7c>
 8007132:	3e01      	subs	r6, #1
 8007134:	e79c      	b.n	8007070 <__multiply+0x84>
 8007136:	bf00      	nop
 8007138:	080089c8 	.word	0x080089c8
 800713c:	08008a54 	.word	0x08008a54

08007140 <__pow5mult>:
 8007140:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007144:	4615      	mov	r5, r2
 8007146:	f012 0203 	ands.w	r2, r2, #3
 800714a:	4606      	mov	r6, r0
 800714c:	460f      	mov	r7, r1
 800714e:	d007      	beq.n	8007160 <__pow5mult+0x20>
 8007150:	4c25      	ldr	r4, [pc, #148]	; (80071e8 <__pow5mult+0xa8>)
 8007152:	3a01      	subs	r2, #1
 8007154:	2300      	movs	r3, #0
 8007156:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800715a:	f7ff fe51 	bl	8006e00 <__multadd>
 800715e:	4607      	mov	r7, r0
 8007160:	10ad      	asrs	r5, r5, #2
 8007162:	d03d      	beq.n	80071e0 <__pow5mult+0xa0>
 8007164:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007166:	b97c      	cbnz	r4, 8007188 <__pow5mult+0x48>
 8007168:	2010      	movs	r0, #16
 800716a:	f7ff fdbf 	bl	8006cec <malloc>
 800716e:	4602      	mov	r2, r0
 8007170:	6270      	str	r0, [r6, #36]	; 0x24
 8007172:	b928      	cbnz	r0, 8007180 <__pow5mult+0x40>
 8007174:	4b1d      	ldr	r3, [pc, #116]	; (80071ec <__pow5mult+0xac>)
 8007176:	481e      	ldr	r0, [pc, #120]	; (80071f0 <__pow5mult+0xb0>)
 8007178:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800717c:	f000 fd2e 	bl	8007bdc <__assert_func>
 8007180:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007184:	6004      	str	r4, [r0, #0]
 8007186:	60c4      	str	r4, [r0, #12]
 8007188:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800718c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007190:	b94c      	cbnz	r4, 80071a6 <__pow5mult+0x66>
 8007192:	f240 2171 	movw	r1, #625	; 0x271
 8007196:	4630      	mov	r0, r6
 8007198:	f7ff ff12 	bl	8006fc0 <__i2b>
 800719c:	2300      	movs	r3, #0
 800719e:	f8c8 0008 	str.w	r0, [r8, #8]
 80071a2:	4604      	mov	r4, r0
 80071a4:	6003      	str	r3, [r0, #0]
 80071a6:	f04f 0900 	mov.w	r9, #0
 80071aa:	07eb      	lsls	r3, r5, #31
 80071ac:	d50a      	bpl.n	80071c4 <__pow5mult+0x84>
 80071ae:	4639      	mov	r1, r7
 80071b0:	4622      	mov	r2, r4
 80071b2:	4630      	mov	r0, r6
 80071b4:	f7ff ff1a 	bl	8006fec <__multiply>
 80071b8:	4639      	mov	r1, r7
 80071ba:	4680      	mov	r8, r0
 80071bc:	4630      	mov	r0, r6
 80071be:	f7ff fdfd 	bl	8006dbc <_Bfree>
 80071c2:	4647      	mov	r7, r8
 80071c4:	106d      	asrs	r5, r5, #1
 80071c6:	d00b      	beq.n	80071e0 <__pow5mult+0xa0>
 80071c8:	6820      	ldr	r0, [r4, #0]
 80071ca:	b938      	cbnz	r0, 80071dc <__pow5mult+0x9c>
 80071cc:	4622      	mov	r2, r4
 80071ce:	4621      	mov	r1, r4
 80071d0:	4630      	mov	r0, r6
 80071d2:	f7ff ff0b 	bl	8006fec <__multiply>
 80071d6:	6020      	str	r0, [r4, #0]
 80071d8:	f8c0 9000 	str.w	r9, [r0]
 80071dc:	4604      	mov	r4, r0
 80071de:	e7e4      	b.n	80071aa <__pow5mult+0x6a>
 80071e0:	4638      	mov	r0, r7
 80071e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071e6:	bf00      	nop
 80071e8:	08008ba0 	.word	0x08008ba0
 80071ec:	08008956 	.word	0x08008956
 80071f0:	08008a54 	.word	0x08008a54

080071f4 <__lshift>:
 80071f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071f8:	460c      	mov	r4, r1
 80071fa:	6849      	ldr	r1, [r1, #4]
 80071fc:	6923      	ldr	r3, [r4, #16]
 80071fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007202:	68a3      	ldr	r3, [r4, #8]
 8007204:	4607      	mov	r7, r0
 8007206:	4691      	mov	r9, r2
 8007208:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800720c:	f108 0601 	add.w	r6, r8, #1
 8007210:	42b3      	cmp	r3, r6
 8007212:	db0b      	blt.n	800722c <__lshift+0x38>
 8007214:	4638      	mov	r0, r7
 8007216:	f7ff fd91 	bl	8006d3c <_Balloc>
 800721a:	4605      	mov	r5, r0
 800721c:	b948      	cbnz	r0, 8007232 <__lshift+0x3e>
 800721e:	4602      	mov	r2, r0
 8007220:	4b2a      	ldr	r3, [pc, #168]	; (80072cc <__lshift+0xd8>)
 8007222:	482b      	ldr	r0, [pc, #172]	; (80072d0 <__lshift+0xdc>)
 8007224:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007228:	f000 fcd8 	bl	8007bdc <__assert_func>
 800722c:	3101      	adds	r1, #1
 800722e:	005b      	lsls	r3, r3, #1
 8007230:	e7ee      	b.n	8007210 <__lshift+0x1c>
 8007232:	2300      	movs	r3, #0
 8007234:	f100 0114 	add.w	r1, r0, #20
 8007238:	f100 0210 	add.w	r2, r0, #16
 800723c:	4618      	mov	r0, r3
 800723e:	4553      	cmp	r3, sl
 8007240:	db37      	blt.n	80072b2 <__lshift+0xbe>
 8007242:	6920      	ldr	r0, [r4, #16]
 8007244:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007248:	f104 0314 	add.w	r3, r4, #20
 800724c:	f019 091f 	ands.w	r9, r9, #31
 8007250:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007254:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007258:	d02f      	beq.n	80072ba <__lshift+0xc6>
 800725a:	f1c9 0e20 	rsb	lr, r9, #32
 800725e:	468a      	mov	sl, r1
 8007260:	f04f 0c00 	mov.w	ip, #0
 8007264:	681a      	ldr	r2, [r3, #0]
 8007266:	fa02 f209 	lsl.w	r2, r2, r9
 800726a:	ea42 020c 	orr.w	r2, r2, ip
 800726e:	f84a 2b04 	str.w	r2, [sl], #4
 8007272:	f853 2b04 	ldr.w	r2, [r3], #4
 8007276:	4298      	cmp	r0, r3
 8007278:	fa22 fc0e 	lsr.w	ip, r2, lr
 800727c:	d8f2      	bhi.n	8007264 <__lshift+0x70>
 800727e:	1b03      	subs	r3, r0, r4
 8007280:	3b15      	subs	r3, #21
 8007282:	f023 0303 	bic.w	r3, r3, #3
 8007286:	3304      	adds	r3, #4
 8007288:	f104 0215 	add.w	r2, r4, #21
 800728c:	4290      	cmp	r0, r2
 800728e:	bf38      	it	cc
 8007290:	2304      	movcc	r3, #4
 8007292:	f841 c003 	str.w	ip, [r1, r3]
 8007296:	f1bc 0f00 	cmp.w	ip, #0
 800729a:	d001      	beq.n	80072a0 <__lshift+0xac>
 800729c:	f108 0602 	add.w	r6, r8, #2
 80072a0:	3e01      	subs	r6, #1
 80072a2:	4638      	mov	r0, r7
 80072a4:	612e      	str	r6, [r5, #16]
 80072a6:	4621      	mov	r1, r4
 80072a8:	f7ff fd88 	bl	8006dbc <_Bfree>
 80072ac:	4628      	mov	r0, r5
 80072ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072b2:	f842 0f04 	str.w	r0, [r2, #4]!
 80072b6:	3301      	adds	r3, #1
 80072b8:	e7c1      	b.n	800723e <__lshift+0x4a>
 80072ba:	3904      	subs	r1, #4
 80072bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80072c0:	f841 2f04 	str.w	r2, [r1, #4]!
 80072c4:	4298      	cmp	r0, r3
 80072c6:	d8f9      	bhi.n	80072bc <__lshift+0xc8>
 80072c8:	e7ea      	b.n	80072a0 <__lshift+0xac>
 80072ca:	bf00      	nop
 80072cc:	080089c8 	.word	0x080089c8
 80072d0:	08008a54 	.word	0x08008a54

080072d4 <__mcmp>:
 80072d4:	b530      	push	{r4, r5, lr}
 80072d6:	6902      	ldr	r2, [r0, #16]
 80072d8:	690c      	ldr	r4, [r1, #16]
 80072da:	1b12      	subs	r2, r2, r4
 80072dc:	d10e      	bne.n	80072fc <__mcmp+0x28>
 80072de:	f100 0314 	add.w	r3, r0, #20
 80072e2:	3114      	adds	r1, #20
 80072e4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80072e8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80072ec:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80072f0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80072f4:	42a5      	cmp	r5, r4
 80072f6:	d003      	beq.n	8007300 <__mcmp+0x2c>
 80072f8:	d305      	bcc.n	8007306 <__mcmp+0x32>
 80072fa:	2201      	movs	r2, #1
 80072fc:	4610      	mov	r0, r2
 80072fe:	bd30      	pop	{r4, r5, pc}
 8007300:	4283      	cmp	r3, r0
 8007302:	d3f3      	bcc.n	80072ec <__mcmp+0x18>
 8007304:	e7fa      	b.n	80072fc <__mcmp+0x28>
 8007306:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800730a:	e7f7      	b.n	80072fc <__mcmp+0x28>

0800730c <__mdiff>:
 800730c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007310:	460c      	mov	r4, r1
 8007312:	4606      	mov	r6, r0
 8007314:	4611      	mov	r1, r2
 8007316:	4620      	mov	r0, r4
 8007318:	4690      	mov	r8, r2
 800731a:	f7ff ffdb 	bl	80072d4 <__mcmp>
 800731e:	1e05      	subs	r5, r0, #0
 8007320:	d110      	bne.n	8007344 <__mdiff+0x38>
 8007322:	4629      	mov	r1, r5
 8007324:	4630      	mov	r0, r6
 8007326:	f7ff fd09 	bl	8006d3c <_Balloc>
 800732a:	b930      	cbnz	r0, 800733a <__mdiff+0x2e>
 800732c:	4b3a      	ldr	r3, [pc, #232]	; (8007418 <__mdiff+0x10c>)
 800732e:	4602      	mov	r2, r0
 8007330:	f240 2132 	movw	r1, #562	; 0x232
 8007334:	4839      	ldr	r0, [pc, #228]	; (800741c <__mdiff+0x110>)
 8007336:	f000 fc51 	bl	8007bdc <__assert_func>
 800733a:	2301      	movs	r3, #1
 800733c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007340:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007344:	bfa4      	itt	ge
 8007346:	4643      	movge	r3, r8
 8007348:	46a0      	movge	r8, r4
 800734a:	4630      	mov	r0, r6
 800734c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007350:	bfa6      	itte	ge
 8007352:	461c      	movge	r4, r3
 8007354:	2500      	movge	r5, #0
 8007356:	2501      	movlt	r5, #1
 8007358:	f7ff fcf0 	bl	8006d3c <_Balloc>
 800735c:	b920      	cbnz	r0, 8007368 <__mdiff+0x5c>
 800735e:	4b2e      	ldr	r3, [pc, #184]	; (8007418 <__mdiff+0x10c>)
 8007360:	4602      	mov	r2, r0
 8007362:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007366:	e7e5      	b.n	8007334 <__mdiff+0x28>
 8007368:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800736c:	6926      	ldr	r6, [r4, #16]
 800736e:	60c5      	str	r5, [r0, #12]
 8007370:	f104 0914 	add.w	r9, r4, #20
 8007374:	f108 0514 	add.w	r5, r8, #20
 8007378:	f100 0e14 	add.w	lr, r0, #20
 800737c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007380:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007384:	f108 0210 	add.w	r2, r8, #16
 8007388:	46f2      	mov	sl, lr
 800738a:	2100      	movs	r1, #0
 800738c:	f859 3b04 	ldr.w	r3, [r9], #4
 8007390:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007394:	fa1f f883 	uxth.w	r8, r3
 8007398:	fa11 f18b 	uxtah	r1, r1, fp
 800739c:	0c1b      	lsrs	r3, r3, #16
 800739e:	eba1 0808 	sub.w	r8, r1, r8
 80073a2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80073a6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80073aa:	fa1f f888 	uxth.w	r8, r8
 80073ae:	1419      	asrs	r1, r3, #16
 80073b0:	454e      	cmp	r6, r9
 80073b2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80073b6:	f84a 3b04 	str.w	r3, [sl], #4
 80073ba:	d8e7      	bhi.n	800738c <__mdiff+0x80>
 80073bc:	1b33      	subs	r3, r6, r4
 80073be:	3b15      	subs	r3, #21
 80073c0:	f023 0303 	bic.w	r3, r3, #3
 80073c4:	3304      	adds	r3, #4
 80073c6:	3415      	adds	r4, #21
 80073c8:	42a6      	cmp	r6, r4
 80073ca:	bf38      	it	cc
 80073cc:	2304      	movcc	r3, #4
 80073ce:	441d      	add	r5, r3
 80073d0:	4473      	add	r3, lr
 80073d2:	469e      	mov	lr, r3
 80073d4:	462e      	mov	r6, r5
 80073d6:	4566      	cmp	r6, ip
 80073d8:	d30e      	bcc.n	80073f8 <__mdiff+0xec>
 80073da:	f10c 0203 	add.w	r2, ip, #3
 80073de:	1b52      	subs	r2, r2, r5
 80073e0:	f022 0203 	bic.w	r2, r2, #3
 80073e4:	3d03      	subs	r5, #3
 80073e6:	45ac      	cmp	ip, r5
 80073e8:	bf38      	it	cc
 80073ea:	2200      	movcc	r2, #0
 80073ec:	441a      	add	r2, r3
 80073ee:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80073f2:	b17b      	cbz	r3, 8007414 <__mdiff+0x108>
 80073f4:	6107      	str	r7, [r0, #16]
 80073f6:	e7a3      	b.n	8007340 <__mdiff+0x34>
 80073f8:	f856 8b04 	ldr.w	r8, [r6], #4
 80073fc:	fa11 f288 	uxtah	r2, r1, r8
 8007400:	1414      	asrs	r4, r2, #16
 8007402:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007406:	b292      	uxth	r2, r2
 8007408:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800740c:	f84e 2b04 	str.w	r2, [lr], #4
 8007410:	1421      	asrs	r1, r4, #16
 8007412:	e7e0      	b.n	80073d6 <__mdiff+0xca>
 8007414:	3f01      	subs	r7, #1
 8007416:	e7ea      	b.n	80073ee <__mdiff+0xe2>
 8007418:	080089c8 	.word	0x080089c8
 800741c:	08008a54 	.word	0x08008a54

08007420 <__ulp>:
 8007420:	b082      	sub	sp, #8
 8007422:	ed8d 0b00 	vstr	d0, [sp]
 8007426:	9b01      	ldr	r3, [sp, #4]
 8007428:	4912      	ldr	r1, [pc, #72]	; (8007474 <__ulp+0x54>)
 800742a:	4019      	ands	r1, r3
 800742c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8007430:	2900      	cmp	r1, #0
 8007432:	dd05      	ble.n	8007440 <__ulp+0x20>
 8007434:	2200      	movs	r2, #0
 8007436:	460b      	mov	r3, r1
 8007438:	ec43 2b10 	vmov	d0, r2, r3
 800743c:	b002      	add	sp, #8
 800743e:	4770      	bx	lr
 8007440:	4249      	negs	r1, r1
 8007442:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8007446:	ea4f 5021 	mov.w	r0, r1, asr #20
 800744a:	f04f 0200 	mov.w	r2, #0
 800744e:	f04f 0300 	mov.w	r3, #0
 8007452:	da04      	bge.n	800745e <__ulp+0x3e>
 8007454:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8007458:	fa41 f300 	asr.w	r3, r1, r0
 800745c:	e7ec      	b.n	8007438 <__ulp+0x18>
 800745e:	f1a0 0114 	sub.w	r1, r0, #20
 8007462:	291e      	cmp	r1, #30
 8007464:	bfda      	itte	le
 8007466:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800746a:	fa20 f101 	lsrle.w	r1, r0, r1
 800746e:	2101      	movgt	r1, #1
 8007470:	460a      	mov	r2, r1
 8007472:	e7e1      	b.n	8007438 <__ulp+0x18>
 8007474:	7ff00000 	.word	0x7ff00000

08007478 <__b2d>:
 8007478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800747a:	6905      	ldr	r5, [r0, #16]
 800747c:	f100 0714 	add.w	r7, r0, #20
 8007480:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8007484:	1f2e      	subs	r6, r5, #4
 8007486:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800748a:	4620      	mov	r0, r4
 800748c:	f7ff fd48 	bl	8006f20 <__hi0bits>
 8007490:	f1c0 0320 	rsb	r3, r0, #32
 8007494:	280a      	cmp	r0, #10
 8007496:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8007514 <__b2d+0x9c>
 800749a:	600b      	str	r3, [r1, #0]
 800749c:	dc14      	bgt.n	80074c8 <__b2d+0x50>
 800749e:	f1c0 0e0b 	rsb	lr, r0, #11
 80074a2:	fa24 f10e 	lsr.w	r1, r4, lr
 80074a6:	42b7      	cmp	r7, r6
 80074a8:	ea41 030c 	orr.w	r3, r1, ip
 80074ac:	bf34      	ite	cc
 80074ae:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80074b2:	2100      	movcs	r1, #0
 80074b4:	3015      	adds	r0, #21
 80074b6:	fa04 f000 	lsl.w	r0, r4, r0
 80074ba:	fa21 f10e 	lsr.w	r1, r1, lr
 80074be:	ea40 0201 	orr.w	r2, r0, r1
 80074c2:	ec43 2b10 	vmov	d0, r2, r3
 80074c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074c8:	42b7      	cmp	r7, r6
 80074ca:	bf3a      	itte	cc
 80074cc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80074d0:	f1a5 0608 	subcc.w	r6, r5, #8
 80074d4:	2100      	movcs	r1, #0
 80074d6:	380b      	subs	r0, #11
 80074d8:	d017      	beq.n	800750a <__b2d+0x92>
 80074da:	f1c0 0c20 	rsb	ip, r0, #32
 80074de:	fa04 f500 	lsl.w	r5, r4, r0
 80074e2:	42be      	cmp	r6, r7
 80074e4:	fa21 f40c 	lsr.w	r4, r1, ip
 80074e8:	ea45 0504 	orr.w	r5, r5, r4
 80074ec:	bf8c      	ite	hi
 80074ee:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80074f2:	2400      	movls	r4, #0
 80074f4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80074f8:	fa01 f000 	lsl.w	r0, r1, r0
 80074fc:	fa24 f40c 	lsr.w	r4, r4, ip
 8007500:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007504:	ea40 0204 	orr.w	r2, r0, r4
 8007508:	e7db      	b.n	80074c2 <__b2d+0x4a>
 800750a:	ea44 030c 	orr.w	r3, r4, ip
 800750e:	460a      	mov	r2, r1
 8007510:	e7d7      	b.n	80074c2 <__b2d+0x4a>
 8007512:	bf00      	nop
 8007514:	3ff00000 	.word	0x3ff00000

08007518 <__d2b>:
 8007518:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800751c:	4689      	mov	r9, r1
 800751e:	2101      	movs	r1, #1
 8007520:	ec57 6b10 	vmov	r6, r7, d0
 8007524:	4690      	mov	r8, r2
 8007526:	f7ff fc09 	bl	8006d3c <_Balloc>
 800752a:	4604      	mov	r4, r0
 800752c:	b930      	cbnz	r0, 800753c <__d2b+0x24>
 800752e:	4602      	mov	r2, r0
 8007530:	4b25      	ldr	r3, [pc, #148]	; (80075c8 <__d2b+0xb0>)
 8007532:	4826      	ldr	r0, [pc, #152]	; (80075cc <__d2b+0xb4>)
 8007534:	f240 310a 	movw	r1, #778	; 0x30a
 8007538:	f000 fb50 	bl	8007bdc <__assert_func>
 800753c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007540:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007544:	bb35      	cbnz	r5, 8007594 <__d2b+0x7c>
 8007546:	2e00      	cmp	r6, #0
 8007548:	9301      	str	r3, [sp, #4]
 800754a:	d028      	beq.n	800759e <__d2b+0x86>
 800754c:	4668      	mov	r0, sp
 800754e:	9600      	str	r6, [sp, #0]
 8007550:	f7ff fd06 	bl	8006f60 <__lo0bits>
 8007554:	9900      	ldr	r1, [sp, #0]
 8007556:	b300      	cbz	r0, 800759a <__d2b+0x82>
 8007558:	9a01      	ldr	r2, [sp, #4]
 800755a:	f1c0 0320 	rsb	r3, r0, #32
 800755e:	fa02 f303 	lsl.w	r3, r2, r3
 8007562:	430b      	orrs	r3, r1
 8007564:	40c2      	lsrs	r2, r0
 8007566:	6163      	str	r3, [r4, #20]
 8007568:	9201      	str	r2, [sp, #4]
 800756a:	9b01      	ldr	r3, [sp, #4]
 800756c:	61a3      	str	r3, [r4, #24]
 800756e:	2b00      	cmp	r3, #0
 8007570:	bf14      	ite	ne
 8007572:	2202      	movne	r2, #2
 8007574:	2201      	moveq	r2, #1
 8007576:	6122      	str	r2, [r4, #16]
 8007578:	b1d5      	cbz	r5, 80075b0 <__d2b+0x98>
 800757a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800757e:	4405      	add	r5, r0
 8007580:	f8c9 5000 	str.w	r5, [r9]
 8007584:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007588:	f8c8 0000 	str.w	r0, [r8]
 800758c:	4620      	mov	r0, r4
 800758e:	b003      	add	sp, #12
 8007590:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007598:	e7d5      	b.n	8007546 <__d2b+0x2e>
 800759a:	6161      	str	r1, [r4, #20]
 800759c:	e7e5      	b.n	800756a <__d2b+0x52>
 800759e:	a801      	add	r0, sp, #4
 80075a0:	f7ff fcde 	bl	8006f60 <__lo0bits>
 80075a4:	9b01      	ldr	r3, [sp, #4]
 80075a6:	6163      	str	r3, [r4, #20]
 80075a8:	2201      	movs	r2, #1
 80075aa:	6122      	str	r2, [r4, #16]
 80075ac:	3020      	adds	r0, #32
 80075ae:	e7e3      	b.n	8007578 <__d2b+0x60>
 80075b0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80075b4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80075b8:	f8c9 0000 	str.w	r0, [r9]
 80075bc:	6918      	ldr	r0, [r3, #16]
 80075be:	f7ff fcaf 	bl	8006f20 <__hi0bits>
 80075c2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80075c6:	e7df      	b.n	8007588 <__d2b+0x70>
 80075c8:	080089c8 	.word	0x080089c8
 80075cc:	08008a54 	.word	0x08008a54

080075d0 <__ratio>:
 80075d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075d4:	4688      	mov	r8, r1
 80075d6:	4669      	mov	r1, sp
 80075d8:	4681      	mov	r9, r0
 80075da:	f7ff ff4d 	bl	8007478 <__b2d>
 80075de:	a901      	add	r1, sp, #4
 80075e0:	4640      	mov	r0, r8
 80075e2:	ec55 4b10 	vmov	r4, r5, d0
 80075e6:	f7ff ff47 	bl	8007478 <__b2d>
 80075ea:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80075ee:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80075f2:	eba3 0c02 	sub.w	ip, r3, r2
 80075f6:	e9dd 3200 	ldrd	r3, r2, [sp]
 80075fa:	1a9b      	subs	r3, r3, r2
 80075fc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007600:	ec51 0b10 	vmov	r0, r1, d0
 8007604:	2b00      	cmp	r3, #0
 8007606:	bfd6      	itet	le
 8007608:	460a      	movle	r2, r1
 800760a:	462a      	movgt	r2, r5
 800760c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007610:	468b      	mov	fp, r1
 8007612:	462f      	mov	r7, r5
 8007614:	bfd4      	ite	le
 8007616:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800761a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800761e:	4620      	mov	r0, r4
 8007620:	ee10 2a10 	vmov	r2, s0
 8007624:	465b      	mov	r3, fp
 8007626:	4639      	mov	r1, r7
 8007628:	f7f9 f920 	bl	800086c <__aeabi_ddiv>
 800762c:	ec41 0b10 	vmov	d0, r0, r1
 8007630:	b003      	add	sp, #12
 8007632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007636 <__copybits>:
 8007636:	3901      	subs	r1, #1
 8007638:	b570      	push	{r4, r5, r6, lr}
 800763a:	1149      	asrs	r1, r1, #5
 800763c:	6914      	ldr	r4, [r2, #16]
 800763e:	3101      	adds	r1, #1
 8007640:	f102 0314 	add.w	r3, r2, #20
 8007644:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007648:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800764c:	1f05      	subs	r5, r0, #4
 800764e:	42a3      	cmp	r3, r4
 8007650:	d30c      	bcc.n	800766c <__copybits+0x36>
 8007652:	1aa3      	subs	r3, r4, r2
 8007654:	3b11      	subs	r3, #17
 8007656:	f023 0303 	bic.w	r3, r3, #3
 800765a:	3211      	adds	r2, #17
 800765c:	42a2      	cmp	r2, r4
 800765e:	bf88      	it	hi
 8007660:	2300      	movhi	r3, #0
 8007662:	4418      	add	r0, r3
 8007664:	2300      	movs	r3, #0
 8007666:	4288      	cmp	r0, r1
 8007668:	d305      	bcc.n	8007676 <__copybits+0x40>
 800766a:	bd70      	pop	{r4, r5, r6, pc}
 800766c:	f853 6b04 	ldr.w	r6, [r3], #4
 8007670:	f845 6f04 	str.w	r6, [r5, #4]!
 8007674:	e7eb      	b.n	800764e <__copybits+0x18>
 8007676:	f840 3b04 	str.w	r3, [r0], #4
 800767a:	e7f4      	b.n	8007666 <__copybits+0x30>

0800767c <__any_on>:
 800767c:	f100 0214 	add.w	r2, r0, #20
 8007680:	6900      	ldr	r0, [r0, #16]
 8007682:	114b      	asrs	r3, r1, #5
 8007684:	4298      	cmp	r0, r3
 8007686:	b510      	push	{r4, lr}
 8007688:	db11      	blt.n	80076ae <__any_on+0x32>
 800768a:	dd0a      	ble.n	80076a2 <__any_on+0x26>
 800768c:	f011 011f 	ands.w	r1, r1, #31
 8007690:	d007      	beq.n	80076a2 <__any_on+0x26>
 8007692:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007696:	fa24 f001 	lsr.w	r0, r4, r1
 800769a:	fa00 f101 	lsl.w	r1, r0, r1
 800769e:	428c      	cmp	r4, r1
 80076a0:	d10b      	bne.n	80076ba <__any_on+0x3e>
 80076a2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d803      	bhi.n	80076b2 <__any_on+0x36>
 80076aa:	2000      	movs	r0, #0
 80076ac:	bd10      	pop	{r4, pc}
 80076ae:	4603      	mov	r3, r0
 80076b0:	e7f7      	b.n	80076a2 <__any_on+0x26>
 80076b2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80076b6:	2900      	cmp	r1, #0
 80076b8:	d0f5      	beq.n	80076a6 <__any_on+0x2a>
 80076ba:	2001      	movs	r0, #1
 80076bc:	e7f6      	b.n	80076ac <__any_on+0x30>

080076be <_calloc_r>:
 80076be:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80076c0:	fba1 2402 	umull	r2, r4, r1, r2
 80076c4:	b94c      	cbnz	r4, 80076da <_calloc_r+0x1c>
 80076c6:	4611      	mov	r1, r2
 80076c8:	9201      	str	r2, [sp, #4]
 80076ca:	f000 f87b 	bl	80077c4 <_malloc_r>
 80076ce:	9a01      	ldr	r2, [sp, #4]
 80076d0:	4605      	mov	r5, r0
 80076d2:	b930      	cbnz	r0, 80076e2 <_calloc_r+0x24>
 80076d4:	4628      	mov	r0, r5
 80076d6:	b003      	add	sp, #12
 80076d8:	bd30      	pop	{r4, r5, pc}
 80076da:	220c      	movs	r2, #12
 80076dc:	6002      	str	r2, [r0, #0]
 80076de:	2500      	movs	r5, #0
 80076e0:	e7f8      	b.n	80076d4 <_calloc_r+0x16>
 80076e2:	4621      	mov	r1, r4
 80076e4:	f7fc fbc0 	bl	8003e68 <memset>
 80076e8:	e7f4      	b.n	80076d4 <_calloc_r+0x16>
	...

080076ec <_free_r>:
 80076ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80076ee:	2900      	cmp	r1, #0
 80076f0:	d044      	beq.n	800777c <_free_r+0x90>
 80076f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80076f6:	9001      	str	r0, [sp, #4]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	f1a1 0404 	sub.w	r4, r1, #4
 80076fe:	bfb8      	it	lt
 8007700:	18e4      	addlt	r4, r4, r3
 8007702:	f000 fab5 	bl	8007c70 <__malloc_lock>
 8007706:	4a1e      	ldr	r2, [pc, #120]	; (8007780 <_free_r+0x94>)
 8007708:	9801      	ldr	r0, [sp, #4]
 800770a:	6813      	ldr	r3, [r2, #0]
 800770c:	b933      	cbnz	r3, 800771c <_free_r+0x30>
 800770e:	6063      	str	r3, [r4, #4]
 8007710:	6014      	str	r4, [r2, #0]
 8007712:	b003      	add	sp, #12
 8007714:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007718:	f000 bab0 	b.w	8007c7c <__malloc_unlock>
 800771c:	42a3      	cmp	r3, r4
 800771e:	d908      	bls.n	8007732 <_free_r+0x46>
 8007720:	6825      	ldr	r5, [r4, #0]
 8007722:	1961      	adds	r1, r4, r5
 8007724:	428b      	cmp	r3, r1
 8007726:	bf01      	itttt	eq
 8007728:	6819      	ldreq	r1, [r3, #0]
 800772a:	685b      	ldreq	r3, [r3, #4]
 800772c:	1949      	addeq	r1, r1, r5
 800772e:	6021      	streq	r1, [r4, #0]
 8007730:	e7ed      	b.n	800770e <_free_r+0x22>
 8007732:	461a      	mov	r2, r3
 8007734:	685b      	ldr	r3, [r3, #4]
 8007736:	b10b      	cbz	r3, 800773c <_free_r+0x50>
 8007738:	42a3      	cmp	r3, r4
 800773a:	d9fa      	bls.n	8007732 <_free_r+0x46>
 800773c:	6811      	ldr	r1, [r2, #0]
 800773e:	1855      	adds	r5, r2, r1
 8007740:	42a5      	cmp	r5, r4
 8007742:	d10b      	bne.n	800775c <_free_r+0x70>
 8007744:	6824      	ldr	r4, [r4, #0]
 8007746:	4421      	add	r1, r4
 8007748:	1854      	adds	r4, r2, r1
 800774a:	42a3      	cmp	r3, r4
 800774c:	6011      	str	r1, [r2, #0]
 800774e:	d1e0      	bne.n	8007712 <_free_r+0x26>
 8007750:	681c      	ldr	r4, [r3, #0]
 8007752:	685b      	ldr	r3, [r3, #4]
 8007754:	6053      	str	r3, [r2, #4]
 8007756:	4421      	add	r1, r4
 8007758:	6011      	str	r1, [r2, #0]
 800775a:	e7da      	b.n	8007712 <_free_r+0x26>
 800775c:	d902      	bls.n	8007764 <_free_r+0x78>
 800775e:	230c      	movs	r3, #12
 8007760:	6003      	str	r3, [r0, #0]
 8007762:	e7d6      	b.n	8007712 <_free_r+0x26>
 8007764:	6825      	ldr	r5, [r4, #0]
 8007766:	1961      	adds	r1, r4, r5
 8007768:	428b      	cmp	r3, r1
 800776a:	bf04      	itt	eq
 800776c:	6819      	ldreq	r1, [r3, #0]
 800776e:	685b      	ldreq	r3, [r3, #4]
 8007770:	6063      	str	r3, [r4, #4]
 8007772:	bf04      	itt	eq
 8007774:	1949      	addeq	r1, r1, r5
 8007776:	6021      	streq	r1, [r4, #0]
 8007778:	6054      	str	r4, [r2, #4]
 800777a:	e7ca      	b.n	8007712 <_free_r+0x26>
 800777c:	b003      	add	sp, #12
 800777e:	bd30      	pop	{r4, r5, pc}
 8007780:	20000294 	.word	0x20000294

08007784 <sbrk_aligned>:
 8007784:	b570      	push	{r4, r5, r6, lr}
 8007786:	4e0e      	ldr	r6, [pc, #56]	; (80077c0 <sbrk_aligned+0x3c>)
 8007788:	460c      	mov	r4, r1
 800778a:	6831      	ldr	r1, [r6, #0]
 800778c:	4605      	mov	r5, r0
 800778e:	b911      	cbnz	r1, 8007796 <sbrk_aligned+0x12>
 8007790:	f000 f9f2 	bl	8007b78 <_sbrk_r>
 8007794:	6030      	str	r0, [r6, #0]
 8007796:	4621      	mov	r1, r4
 8007798:	4628      	mov	r0, r5
 800779a:	f000 f9ed 	bl	8007b78 <_sbrk_r>
 800779e:	1c43      	adds	r3, r0, #1
 80077a0:	d00a      	beq.n	80077b8 <sbrk_aligned+0x34>
 80077a2:	1cc4      	adds	r4, r0, #3
 80077a4:	f024 0403 	bic.w	r4, r4, #3
 80077a8:	42a0      	cmp	r0, r4
 80077aa:	d007      	beq.n	80077bc <sbrk_aligned+0x38>
 80077ac:	1a21      	subs	r1, r4, r0
 80077ae:	4628      	mov	r0, r5
 80077b0:	f000 f9e2 	bl	8007b78 <_sbrk_r>
 80077b4:	3001      	adds	r0, #1
 80077b6:	d101      	bne.n	80077bc <sbrk_aligned+0x38>
 80077b8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80077bc:	4620      	mov	r0, r4
 80077be:	bd70      	pop	{r4, r5, r6, pc}
 80077c0:	20000298 	.word	0x20000298

080077c4 <_malloc_r>:
 80077c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077c8:	1ccd      	adds	r5, r1, #3
 80077ca:	f025 0503 	bic.w	r5, r5, #3
 80077ce:	3508      	adds	r5, #8
 80077d0:	2d0c      	cmp	r5, #12
 80077d2:	bf38      	it	cc
 80077d4:	250c      	movcc	r5, #12
 80077d6:	2d00      	cmp	r5, #0
 80077d8:	4607      	mov	r7, r0
 80077da:	db01      	blt.n	80077e0 <_malloc_r+0x1c>
 80077dc:	42a9      	cmp	r1, r5
 80077de:	d905      	bls.n	80077ec <_malloc_r+0x28>
 80077e0:	230c      	movs	r3, #12
 80077e2:	603b      	str	r3, [r7, #0]
 80077e4:	2600      	movs	r6, #0
 80077e6:	4630      	mov	r0, r6
 80077e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077ec:	4e2e      	ldr	r6, [pc, #184]	; (80078a8 <_malloc_r+0xe4>)
 80077ee:	f000 fa3f 	bl	8007c70 <__malloc_lock>
 80077f2:	6833      	ldr	r3, [r6, #0]
 80077f4:	461c      	mov	r4, r3
 80077f6:	bb34      	cbnz	r4, 8007846 <_malloc_r+0x82>
 80077f8:	4629      	mov	r1, r5
 80077fa:	4638      	mov	r0, r7
 80077fc:	f7ff ffc2 	bl	8007784 <sbrk_aligned>
 8007800:	1c43      	adds	r3, r0, #1
 8007802:	4604      	mov	r4, r0
 8007804:	d14d      	bne.n	80078a2 <_malloc_r+0xde>
 8007806:	6834      	ldr	r4, [r6, #0]
 8007808:	4626      	mov	r6, r4
 800780a:	2e00      	cmp	r6, #0
 800780c:	d140      	bne.n	8007890 <_malloc_r+0xcc>
 800780e:	6823      	ldr	r3, [r4, #0]
 8007810:	4631      	mov	r1, r6
 8007812:	4638      	mov	r0, r7
 8007814:	eb04 0803 	add.w	r8, r4, r3
 8007818:	f000 f9ae 	bl	8007b78 <_sbrk_r>
 800781c:	4580      	cmp	r8, r0
 800781e:	d13a      	bne.n	8007896 <_malloc_r+0xd2>
 8007820:	6821      	ldr	r1, [r4, #0]
 8007822:	3503      	adds	r5, #3
 8007824:	1a6d      	subs	r5, r5, r1
 8007826:	f025 0503 	bic.w	r5, r5, #3
 800782a:	3508      	adds	r5, #8
 800782c:	2d0c      	cmp	r5, #12
 800782e:	bf38      	it	cc
 8007830:	250c      	movcc	r5, #12
 8007832:	4629      	mov	r1, r5
 8007834:	4638      	mov	r0, r7
 8007836:	f7ff ffa5 	bl	8007784 <sbrk_aligned>
 800783a:	3001      	adds	r0, #1
 800783c:	d02b      	beq.n	8007896 <_malloc_r+0xd2>
 800783e:	6823      	ldr	r3, [r4, #0]
 8007840:	442b      	add	r3, r5
 8007842:	6023      	str	r3, [r4, #0]
 8007844:	e00e      	b.n	8007864 <_malloc_r+0xa0>
 8007846:	6822      	ldr	r2, [r4, #0]
 8007848:	1b52      	subs	r2, r2, r5
 800784a:	d41e      	bmi.n	800788a <_malloc_r+0xc6>
 800784c:	2a0b      	cmp	r2, #11
 800784e:	d916      	bls.n	800787e <_malloc_r+0xba>
 8007850:	1961      	adds	r1, r4, r5
 8007852:	42a3      	cmp	r3, r4
 8007854:	6025      	str	r5, [r4, #0]
 8007856:	bf18      	it	ne
 8007858:	6059      	strne	r1, [r3, #4]
 800785a:	6863      	ldr	r3, [r4, #4]
 800785c:	bf08      	it	eq
 800785e:	6031      	streq	r1, [r6, #0]
 8007860:	5162      	str	r2, [r4, r5]
 8007862:	604b      	str	r3, [r1, #4]
 8007864:	4638      	mov	r0, r7
 8007866:	f104 060b 	add.w	r6, r4, #11
 800786a:	f000 fa07 	bl	8007c7c <__malloc_unlock>
 800786e:	f026 0607 	bic.w	r6, r6, #7
 8007872:	1d23      	adds	r3, r4, #4
 8007874:	1af2      	subs	r2, r6, r3
 8007876:	d0b6      	beq.n	80077e6 <_malloc_r+0x22>
 8007878:	1b9b      	subs	r3, r3, r6
 800787a:	50a3      	str	r3, [r4, r2]
 800787c:	e7b3      	b.n	80077e6 <_malloc_r+0x22>
 800787e:	6862      	ldr	r2, [r4, #4]
 8007880:	42a3      	cmp	r3, r4
 8007882:	bf0c      	ite	eq
 8007884:	6032      	streq	r2, [r6, #0]
 8007886:	605a      	strne	r2, [r3, #4]
 8007888:	e7ec      	b.n	8007864 <_malloc_r+0xa0>
 800788a:	4623      	mov	r3, r4
 800788c:	6864      	ldr	r4, [r4, #4]
 800788e:	e7b2      	b.n	80077f6 <_malloc_r+0x32>
 8007890:	4634      	mov	r4, r6
 8007892:	6876      	ldr	r6, [r6, #4]
 8007894:	e7b9      	b.n	800780a <_malloc_r+0x46>
 8007896:	230c      	movs	r3, #12
 8007898:	603b      	str	r3, [r7, #0]
 800789a:	4638      	mov	r0, r7
 800789c:	f000 f9ee 	bl	8007c7c <__malloc_unlock>
 80078a0:	e7a1      	b.n	80077e6 <_malloc_r+0x22>
 80078a2:	6025      	str	r5, [r4, #0]
 80078a4:	e7de      	b.n	8007864 <_malloc_r+0xa0>
 80078a6:	bf00      	nop
 80078a8:	20000294 	.word	0x20000294

080078ac <__ssputs_r>:
 80078ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078b0:	688e      	ldr	r6, [r1, #8]
 80078b2:	429e      	cmp	r6, r3
 80078b4:	4682      	mov	sl, r0
 80078b6:	460c      	mov	r4, r1
 80078b8:	4690      	mov	r8, r2
 80078ba:	461f      	mov	r7, r3
 80078bc:	d838      	bhi.n	8007930 <__ssputs_r+0x84>
 80078be:	898a      	ldrh	r2, [r1, #12]
 80078c0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80078c4:	d032      	beq.n	800792c <__ssputs_r+0x80>
 80078c6:	6825      	ldr	r5, [r4, #0]
 80078c8:	6909      	ldr	r1, [r1, #16]
 80078ca:	eba5 0901 	sub.w	r9, r5, r1
 80078ce:	6965      	ldr	r5, [r4, #20]
 80078d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80078d4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80078d8:	3301      	adds	r3, #1
 80078da:	444b      	add	r3, r9
 80078dc:	106d      	asrs	r5, r5, #1
 80078de:	429d      	cmp	r5, r3
 80078e0:	bf38      	it	cc
 80078e2:	461d      	movcc	r5, r3
 80078e4:	0553      	lsls	r3, r2, #21
 80078e6:	d531      	bpl.n	800794c <__ssputs_r+0xa0>
 80078e8:	4629      	mov	r1, r5
 80078ea:	f7ff ff6b 	bl	80077c4 <_malloc_r>
 80078ee:	4606      	mov	r6, r0
 80078f0:	b950      	cbnz	r0, 8007908 <__ssputs_r+0x5c>
 80078f2:	230c      	movs	r3, #12
 80078f4:	f8ca 3000 	str.w	r3, [sl]
 80078f8:	89a3      	ldrh	r3, [r4, #12]
 80078fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078fe:	81a3      	strh	r3, [r4, #12]
 8007900:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007904:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007908:	6921      	ldr	r1, [r4, #16]
 800790a:	464a      	mov	r2, r9
 800790c:	f7ff fa08 	bl	8006d20 <memcpy>
 8007910:	89a3      	ldrh	r3, [r4, #12]
 8007912:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007916:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800791a:	81a3      	strh	r3, [r4, #12]
 800791c:	6126      	str	r6, [r4, #16]
 800791e:	6165      	str	r5, [r4, #20]
 8007920:	444e      	add	r6, r9
 8007922:	eba5 0509 	sub.w	r5, r5, r9
 8007926:	6026      	str	r6, [r4, #0]
 8007928:	60a5      	str	r5, [r4, #8]
 800792a:	463e      	mov	r6, r7
 800792c:	42be      	cmp	r6, r7
 800792e:	d900      	bls.n	8007932 <__ssputs_r+0x86>
 8007930:	463e      	mov	r6, r7
 8007932:	6820      	ldr	r0, [r4, #0]
 8007934:	4632      	mov	r2, r6
 8007936:	4641      	mov	r1, r8
 8007938:	f000 f980 	bl	8007c3c <memmove>
 800793c:	68a3      	ldr	r3, [r4, #8]
 800793e:	1b9b      	subs	r3, r3, r6
 8007940:	60a3      	str	r3, [r4, #8]
 8007942:	6823      	ldr	r3, [r4, #0]
 8007944:	4433      	add	r3, r6
 8007946:	6023      	str	r3, [r4, #0]
 8007948:	2000      	movs	r0, #0
 800794a:	e7db      	b.n	8007904 <__ssputs_r+0x58>
 800794c:	462a      	mov	r2, r5
 800794e:	f000 f99b 	bl	8007c88 <_realloc_r>
 8007952:	4606      	mov	r6, r0
 8007954:	2800      	cmp	r0, #0
 8007956:	d1e1      	bne.n	800791c <__ssputs_r+0x70>
 8007958:	6921      	ldr	r1, [r4, #16]
 800795a:	4650      	mov	r0, sl
 800795c:	f7ff fec6 	bl	80076ec <_free_r>
 8007960:	e7c7      	b.n	80078f2 <__ssputs_r+0x46>
	...

08007964 <_svfiprintf_r>:
 8007964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007968:	4698      	mov	r8, r3
 800796a:	898b      	ldrh	r3, [r1, #12]
 800796c:	061b      	lsls	r3, r3, #24
 800796e:	b09d      	sub	sp, #116	; 0x74
 8007970:	4607      	mov	r7, r0
 8007972:	460d      	mov	r5, r1
 8007974:	4614      	mov	r4, r2
 8007976:	d50e      	bpl.n	8007996 <_svfiprintf_r+0x32>
 8007978:	690b      	ldr	r3, [r1, #16]
 800797a:	b963      	cbnz	r3, 8007996 <_svfiprintf_r+0x32>
 800797c:	2140      	movs	r1, #64	; 0x40
 800797e:	f7ff ff21 	bl	80077c4 <_malloc_r>
 8007982:	6028      	str	r0, [r5, #0]
 8007984:	6128      	str	r0, [r5, #16]
 8007986:	b920      	cbnz	r0, 8007992 <_svfiprintf_r+0x2e>
 8007988:	230c      	movs	r3, #12
 800798a:	603b      	str	r3, [r7, #0]
 800798c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007990:	e0d1      	b.n	8007b36 <_svfiprintf_r+0x1d2>
 8007992:	2340      	movs	r3, #64	; 0x40
 8007994:	616b      	str	r3, [r5, #20]
 8007996:	2300      	movs	r3, #0
 8007998:	9309      	str	r3, [sp, #36]	; 0x24
 800799a:	2320      	movs	r3, #32
 800799c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80079a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80079a4:	2330      	movs	r3, #48	; 0x30
 80079a6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007b50 <_svfiprintf_r+0x1ec>
 80079aa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80079ae:	f04f 0901 	mov.w	r9, #1
 80079b2:	4623      	mov	r3, r4
 80079b4:	469a      	mov	sl, r3
 80079b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80079ba:	b10a      	cbz	r2, 80079c0 <_svfiprintf_r+0x5c>
 80079bc:	2a25      	cmp	r2, #37	; 0x25
 80079be:	d1f9      	bne.n	80079b4 <_svfiprintf_r+0x50>
 80079c0:	ebba 0b04 	subs.w	fp, sl, r4
 80079c4:	d00b      	beq.n	80079de <_svfiprintf_r+0x7a>
 80079c6:	465b      	mov	r3, fp
 80079c8:	4622      	mov	r2, r4
 80079ca:	4629      	mov	r1, r5
 80079cc:	4638      	mov	r0, r7
 80079ce:	f7ff ff6d 	bl	80078ac <__ssputs_r>
 80079d2:	3001      	adds	r0, #1
 80079d4:	f000 80aa 	beq.w	8007b2c <_svfiprintf_r+0x1c8>
 80079d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80079da:	445a      	add	r2, fp
 80079dc:	9209      	str	r2, [sp, #36]	; 0x24
 80079de:	f89a 3000 	ldrb.w	r3, [sl]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	f000 80a2 	beq.w	8007b2c <_svfiprintf_r+0x1c8>
 80079e8:	2300      	movs	r3, #0
 80079ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80079ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80079f2:	f10a 0a01 	add.w	sl, sl, #1
 80079f6:	9304      	str	r3, [sp, #16]
 80079f8:	9307      	str	r3, [sp, #28]
 80079fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80079fe:	931a      	str	r3, [sp, #104]	; 0x68
 8007a00:	4654      	mov	r4, sl
 8007a02:	2205      	movs	r2, #5
 8007a04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a08:	4851      	ldr	r0, [pc, #324]	; (8007b50 <_svfiprintf_r+0x1ec>)
 8007a0a:	f7f8 fbf9 	bl	8000200 <memchr>
 8007a0e:	9a04      	ldr	r2, [sp, #16]
 8007a10:	b9d8      	cbnz	r0, 8007a4a <_svfiprintf_r+0xe6>
 8007a12:	06d0      	lsls	r0, r2, #27
 8007a14:	bf44      	itt	mi
 8007a16:	2320      	movmi	r3, #32
 8007a18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a1c:	0711      	lsls	r1, r2, #28
 8007a1e:	bf44      	itt	mi
 8007a20:	232b      	movmi	r3, #43	; 0x2b
 8007a22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a26:	f89a 3000 	ldrb.w	r3, [sl]
 8007a2a:	2b2a      	cmp	r3, #42	; 0x2a
 8007a2c:	d015      	beq.n	8007a5a <_svfiprintf_r+0xf6>
 8007a2e:	9a07      	ldr	r2, [sp, #28]
 8007a30:	4654      	mov	r4, sl
 8007a32:	2000      	movs	r0, #0
 8007a34:	f04f 0c0a 	mov.w	ip, #10
 8007a38:	4621      	mov	r1, r4
 8007a3a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a3e:	3b30      	subs	r3, #48	; 0x30
 8007a40:	2b09      	cmp	r3, #9
 8007a42:	d94e      	bls.n	8007ae2 <_svfiprintf_r+0x17e>
 8007a44:	b1b0      	cbz	r0, 8007a74 <_svfiprintf_r+0x110>
 8007a46:	9207      	str	r2, [sp, #28]
 8007a48:	e014      	b.n	8007a74 <_svfiprintf_r+0x110>
 8007a4a:	eba0 0308 	sub.w	r3, r0, r8
 8007a4e:	fa09 f303 	lsl.w	r3, r9, r3
 8007a52:	4313      	orrs	r3, r2
 8007a54:	9304      	str	r3, [sp, #16]
 8007a56:	46a2      	mov	sl, r4
 8007a58:	e7d2      	b.n	8007a00 <_svfiprintf_r+0x9c>
 8007a5a:	9b03      	ldr	r3, [sp, #12]
 8007a5c:	1d19      	adds	r1, r3, #4
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	9103      	str	r1, [sp, #12]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	bfbb      	ittet	lt
 8007a66:	425b      	neglt	r3, r3
 8007a68:	f042 0202 	orrlt.w	r2, r2, #2
 8007a6c:	9307      	strge	r3, [sp, #28]
 8007a6e:	9307      	strlt	r3, [sp, #28]
 8007a70:	bfb8      	it	lt
 8007a72:	9204      	strlt	r2, [sp, #16]
 8007a74:	7823      	ldrb	r3, [r4, #0]
 8007a76:	2b2e      	cmp	r3, #46	; 0x2e
 8007a78:	d10c      	bne.n	8007a94 <_svfiprintf_r+0x130>
 8007a7a:	7863      	ldrb	r3, [r4, #1]
 8007a7c:	2b2a      	cmp	r3, #42	; 0x2a
 8007a7e:	d135      	bne.n	8007aec <_svfiprintf_r+0x188>
 8007a80:	9b03      	ldr	r3, [sp, #12]
 8007a82:	1d1a      	adds	r2, r3, #4
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	9203      	str	r2, [sp, #12]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	bfb8      	it	lt
 8007a8c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007a90:	3402      	adds	r4, #2
 8007a92:	9305      	str	r3, [sp, #20]
 8007a94:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007b60 <_svfiprintf_r+0x1fc>
 8007a98:	7821      	ldrb	r1, [r4, #0]
 8007a9a:	2203      	movs	r2, #3
 8007a9c:	4650      	mov	r0, sl
 8007a9e:	f7f8 fbaf 	bl	8000200 <memchr>
 8007aa2:	b140      	cbz	r0, 8007ab6 <_svfiprintf_r+0x152>
 8007aa4:	2340      	movs	r3, #64	; 0x40
 8007aa6:	eba0 000a 	sub.w	r0, r0, sl
 8007aaa:	fa03 f000 	lsl.w	r0, r3, r0
 8007aae:	9b04      	ldr	r3, [sp, #16]
 8007ab0:	4303      	orrs	r3, r0
 8007ab2:	3401      	adds	r4, #1
 8007ab4:	9304      	str	r3, [sp, #16]
 8007ab6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007aba:	4826      	ldr	r0, [pc, #152]	; (8007b54 <_svfiprintf_r+0x1f0>)
 8007abc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007ac0:	2206      	movs	r2, #6
 8007ac2:	f7f8 fb9d 	bl	8000200 <memchr>
 8007ac6:	2800      	cmp	r0, #0
 8007ac8:	d038      	beq.n	8007b3c <_svfiprintf_r+0x1d8>
 8007aca:	4b23      	ldr	r3, [pc, #140]	; (8007b58 <_svfiprintf_r+0x1f4>)
 8007acc:	bb1b      	cbnz	r3, 8007b16 <_svfiprintf_r+0x1b2>
 8007ace:	9b03      	ldr	r3, [sp, #12]
 8007ad0:	3307      	adds	r3, #7
 8007ad2:	f023 0307 	bic.w	r3, r3, #7
 8007ad6:	3308      	adds	r3, #8
 8007ad8:	9303      	str	r3, [sp, #12]
 8007ada:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007adc:	4433      	add	r3, r6
 8007ade:	9309      	str	r3, [sp, #36]	; 0x24
 8007ae0:	e767      	b.n	80079b2 <_svfiprintf_r+0x4e>
 8007ae2:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ae6:	460c      	mov	r4, r1
 8007ae8:	2001      	movs	r0, #1
 8007aea:	e7a5      	b.n	8007a38 <_svfiprintf_r+0xd4>
 8007aec:	2300      	movs	r3, #0
 8007aee:	3401      	adds	r4, #1
 8007af0:	9305      	str	r3, [sp, #20]
 8007af2:	4619      	mov	r1, r3
 8007af4:	f04f 0c0a 	mov.w	ip, #10
 8007af8:	4620      	mov	r0, r4
 8007afa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007afe:	3a30      	subs	r2, #48	; 0x30
 8007b00:	2a09      	cmp	r2, #9
 8007b02:	d903      	bls.n	8007b0c <_svfiprintf_r+0x1a8>
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d0c5      	beq.n	8007a94 <_svfiprintf_r+0x130>
 8007b08:	9105      	str	r1, [sp, #20]
 8007b0a:	e7c3      	b.n	8007a94 <_svfiprintf_r+0x130>
 8007b0c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b10:	4604      	mov	r4, r0
 8007b12:	2301      	movs	r3, #1
 8007b14:	e7f0      	b.n	8007af8 <_svfiprintf_r+0x194>
 8007b16:	ab03      	add	r3, sp, #12
 8007b18:	9300      	str	r3, [sp, #0]
 8007b1a:	462a      	mov	r2, r5
 8007b1c:	4b0f      	ldr	r3, [pc, #60]	; (8007b5c <_svfiprintf_r+0x1f8>)
 8007b1e:	a904      	add	r1, sp, #16
 8007b20:	4638      	mov	r0, r7
 8007b22:	f7fc fa49 	bl	8003fb8 <_printf_float>
 8007b26:	1c42      	adds	r2, r0, #1
 8007b28:	4606      	mov	r6, r0
 8007b2a:	d1d6      	bne.n	8007ada <_svfiprintf_r+0x176>
 8007b2c:	89ab      	ldrh	r3, [r5, #12]
 8007b2e:	065b      	lsls	r3, r3, #25
 8007b30:	f53f af2c 	bmi.w	800798c <_svfiprintf_r+0x28>
 8007b34:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007b36:	b01d      	add	sp, #116	; 0x74
 8007b38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b3c:	ab03      	add	r3, sp, #12
 8007b3e:	9300      	str	r3, [sp, #0]
 8007b40:	462a      	mov	r2, r5
 8007b42:	4b06      	ldr	r3, [pc, #24]	; (8007b5c <_svfiprintf_r+0x1f8>)
 8007b44:	a904      	add	r1, sp, #16
 8007b46:	4638      	mov	r0, r7
 8007b48:	f7fc fcda 	bl	8004500 <_printf_i>
 8007b4c:	e7eb      	b.n	8007b26 <_svfiprintf_r+0x1c2>
 8007b4e:	bf00      	nop
 8007b50:	08008bac 	.word	0x08008bac
 8007b54:	08008bb6 	.word	0x08008bb6
 8007b58:	08003fb9 	.word	0x08003fb9
 8007b5c:	080078ad 	.word	0x080078ad
 8007b60:	08008bb2 	.word	0x08008bb2
 8007b64:	00000000 	.word	0x00000000

08007b68 <nan>:
 8007b68:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007b70 <nan+0x8>
 8007b6c:	4770      	bx	lr
 8007b6e:	bf00      	nop
 8007b70:	00000000 	.word	0x00000000
 8007b74:	7ff80000 	.word	0x7ff80000

08007b78 <_sbrk_r>:
 8007b78:	b538      	push	{r3, r4, r5, lr}
 8007b7a:	4d06      	ldr	r5, [pc, #24]	; (8007b94 <_sbrk_r+0x1c>)
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	4604      	mov	r4, r0
 8007b80:	4608      	mov	r0, r1
 8007b82:	602b      	str	r3, [r5, #0]
 8007b84:	f7f9 fc50 	bl	8001428 <_sbrk>
 8007b88:	1c43      	adds	r3, r0, #1
 8007b8a:	d102      	bne.n	8007b92 <_sbrk_r+0x1a>
 8007b8c:	682b      	ldr	r3, [r5, #0]
 8007b8e:	b103      	cbz	r3, 8007b92 <_sbrk_r+0x1a>
 8007b90:	6023      	str	r3, [r4, #0]
 8007b92:	bd38      	pop	{r3, r4, r5, pc}
 8007b94:	2000029c 	.word	0x2000029c

08007b98 <strncmp>:
 8007b98:	b510      	push	{r4, lr}
 8007b9a:	b17a      	cbz	r2, 8007bbc <strncmp+0x24>
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	3901      	subs	r1, #1
 8007ba0:	1884      	adds	r4, r0, r2
 8007ba2:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007ba6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007baa:	4290      	cmp	r0, r2
 8007bac:	d101      	bne.n	8007bb2 <strncmp+0x1a>
 8007bae:	42a3      	cmp	r3, r4
 8007bb0:	d101      	bne.n	8007bb6 <strncmp+0x1e>
 8007bb2:	1a80      	subs	r0, r0, r2
 8007bb4:	bd10      	pop	{r4, pc}
 8007bb6:	2800      	cmp	r0, #0
 8007bb8:	d1f3      	bne.n	8007ba2 <strncmp+0xa>
 8007bba:	e7fa      	b.n	8007bb2 <strncmp+0x1a>
 8007bbc:	4610      	mov	r0, r2
 8007bbe:	e7f9      	b.n	8007bb4 <strncmp+0x1c>

08007bc0 <__ascii_wctomb>:
 8007bc0:	b149      	cbz	r1, 8007bd6 <__ascii_wctomb+0x16>
 8007bc2:	2aff      	cmp	r2, #255	; 0xff
 8007bc4:	bf85      	ittet	hi
 8007bc6:	238a      	movhi	r3, #138	; 0x8a
 8007bc8:	6003      	strhi	r3, [r0, #0]
 8007bca:	700a      	strbls	r2, [r1, #0]
 8007bcc:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8007bd0:	bf98      	it	ls
 8007bd2:	2001      	movls	r0, #1
 8007bd4:	4770      	bx	lr
 8007bd6:	4608      	mov	r0, r1
 8007bd8:	4770      	bx	lr
	...

08007bdc <__assert_func>:
 8007bdc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007bde:	4614      	mov	r4, r2
 8007be0:	461a      	mov	r2, r3
 8007be2:	4b09      	ldr	r3, [pc, #36]	; (8007c08 <__assert_func+0x2c>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	4605      	mov	r5, r0
 8007be8:	68d8      	ldr	r0, [r3, #12]
 8007bea:	b14c      	cbz	r4, 8007c00 <__assert_func+0x24>
 8007bec:	4b07      	ldr	r3, [pc, #28]	; (8007c0c <__assert_func+0x30>)
 8007bee:	9100      	str	r1, [sp, #0]
 8007bf0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007bf4:	4906      	ldr	r1, [pc, #24]	; (8007c10 <__assert_func+0x34>)
 8007bf6:	462b      	mov	r3, r5
 8007bf8:	f000 f80e 	bl	8007c18 <fiprintf>
 8007bfc:	f000 fa8c 	bl	8008118 <abort>
 8007c00:	4b04      	ldr	r3, [pc, #16]	; (8007c14 <__assert_func+0x38>)
 8007c02:	461c      	mov	r4, r3
 8007c04:	e7f3      	b.n	8007bee <__assert_func+0x12>
 8007c06:	bf00      	nop
 8007c08:	2000000c 	.word	0x2000000c
 8007c0c:	08008bbd 	.word	0x08008bbd
 8007c10:	08008bca 	.word	0x08008bca
 8007c14:	08008bf8 	.word	0x08008bf8

08007c18 <fiprintf>:
 8007c18:	b40e      	push	{r1, r2, r3}
 8007c1a:	b503      	push	{r0, r1, lr}
 8007c1c:	4601      	mov	r1, r0
 8007c1e:	ab03      	add	r3, sp, #12
 8007c20:	4805      	ldr	r0, [pc, #20]	; (8007c38 <fiprintf+0x20>)
 8007c22:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c26:	6800      	ldr	r0, [r0, #0]
 8007c28:	9301      	str	r3, [sp, #4]
 8007c2a:	f000 f885 	bl	8007d38 <_vfiprintf_r>
 8007c2e:	b002      	add	sp, #8
 8007c30:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c34:	b003      	add	sp, #12
 8007c36:	4770      	bx	lr
 8007c38:	2000000c 	.word	0x2000000c

08007c3c <memmove>:
 8007c3c:	4288      	cmp	r0, r1
 8007c3e:	b510      	push	{r4, lr}
 8007c40:	eb01 0402 	add.w	r4, r1, r2
 8007c44:	d902      	bls.n	8007c4c <memmove+0x10>
 8007c46:	4284      	cmp	r4, r0
 8007c48:	4623      	mov	r3, r4
 8007c4a:	d807      	bhi.n	8007c5c <memmove+0x20>
 8007c4c:	1e43      	subs	r3, r0, #1
 8007c4e:	42a1      	cmp	r1, r4
 8007c50:	d008      	beq.n	8007c64 <memmove+0x28>
 8007c52:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007c56:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007c5a:	e7f8      	b.n	8007c4e <memmove+0x12>
 8007c5c:	4402      	add	r2, r0
 8007c5e:	4601      	mov	r1, r0
 8007c60:	428a      	cmp	r2, r1
 8007c62:	d100      	bne.n	8007c66 <memmove+0x2a>
 8007c64:	bd10      	pop	{r4, pc}
 8007c66:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007c6a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007c6e:	e7f7      	b.n	8007c60 <memmove+0x24>

08007c70 <__malloc_lock>:
 8007c70:	4801      	ldr	r0, [pc, #4]	; (8007c78 <__malloc_lock+0x8>)
 8007c72:	f000 bc11 	b.w	8008498 <__retarget_lock_acquire_recursive>
 8007c76:	bf00      	nop
 8007c78:	200002a0 	.word	0x200002a0

08007c7c <__malloc_unlock>:
 8007c7c:	4801      	ldr	r0, [pc, #4]	; (8007c84 <__malloc_unlock+0x8>)
 8007c7e:	f000 bc0c 	b.w	800849a <__retarget_lock_release_recursive>
 8007c82:	bf00      	nop
 8007c84:	200002a0 	.word	0x200002a0

08007c88 <_realloc_r>:
 8007c88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c8c:	4680      	mov	r8, r0
 8007c8e:	4614      	mov	r4, r2
 8007c90:	460e      	mov	r6, r1
 8007c92:	b921      	cbnz	r1, 8007c9e <_realloc_r+0x16>
 8007c94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c98:	4611      	mov	r1, r2
 8007c9a:	f7ff bd93 	b.w	80077c4 <_malloc_r>
 8007c9e:	b92a      	cbnz	r2, 8007cac <_realloc_r+0x24>
 8007ca0:	f7ff fd24 	bl	80076ec <_free_r>
 8007ca4:	4625      	mov	r5, r4
 8007ca6:	4628      	mov	r0, r5
 8007ca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cac:	f000 fc5c 	bl	8008568 <_malloc_usable_size_r>
 8007cb0:	4284      	cmp	r4, r0
 8007cb2:	4607      	mov	r7, r0
 8007cb4:	d802      	bhi.n	8007cbc <_realloc_r+0x34>
 8007cb6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007cba:	d812      	bhi.n	8007ce2 <_realloc_r+0x5a>
 8007cbc:	4621      	mov	r1, r4
 8007cbe:	4640      	mov	r0, r8
 8007cc0:	f7ff fd80 	bl	80077c4 <_malloc_r>
 8007cc4:	4605      	mov	r5, r0
 8007cc6:	2800      	cmp	r0, #0
 8007cc8:	d0ed      	beq.n	8007ca6 <_realloc_r+0x1e>
 8007cca:	42bc      	cmp	r4, r7
 8007ccc:	4622      	mov	r2, r4
 8007cce:	4631      	mov	r1, r6
 8007cd0:	bf28      	it	cs
 8007cd2:	463a      	movcs	r2, r7
 8007cd4:	f7ff f824 	bl	8006d20 <memcpy>
 8007cd8:	4631      	mov	r1, r6
 8007cda:	4640      	mov	r0, r8
 8007cdc:	f7ff fd06 	bl	80076ec <_free_r>
 8007ce0:	e7e1      	b.n	8007ca6 <_realloc_r+0x1e>
 8007ce2:	4635      	mov	r5, r6
 8007ce4:	e7df      	b.n	8007ca6 <_realloc_r+0x1e>

08007ce6 <__sfputc_r>:
 8007ce6:	6893      	ldr	r3, [r2, #8]
 8007ce8:	3b01      	subs	r3, #1
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	b410      	push	{r4}
 8007cee:	6093      	str	r3, [r2, #8]
 8007cf0:	da08      	bge.n	8007d04 <__sfputc_r+0x1e>
 8007cf2:	6994      	ldr	r4, [r2, #24]
 8007cf4:	42a3      	cmp	r3, r4
 8007cf6:	db01      	blt.n	8007cfc <__sfputc_r+0x16>
 8007cf8:	290a      	cmp	r1, #10
 8007cfa:	d103      	bne.n	8007d04 <__sfputc_r+0x1e>
 8007cfc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d00:	f000 b94a 	b.w	8007f98 <__swbuf_r>
 8007d04:	6813      	ldr	r3, [r2, #0]
 8007d06:	1c58      	adds	r0, r3, #1
 8007d08:	6010      	str	r0, [r2, #0]
 8007d0a:	7019      	strb	r1, [r3, #0]
 8007d0c:	4608      	mov	r0, r1
 8007d0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d12:	4770      	bx	lr

08007d14 <__sfputs_r>:
 8007d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d16:	4606      	mov	r6, r0
 8007d18:	460f      	mov	r7, r1
 8007d1a:	4614      	mov	r4, r2
 8007d1c:	18d5      	adds	r5, r2, r3
 8007d1e:	42ac      	cmp	r4, r5
 8007d20:	d101      	bne.n	8007d26 <__sfputs_r+0x12>
 8007d22:	2000      	movs	r0, #0
 8007d24:	e007      	b.n	8007d36 <__sfputs_r+0x22>
 8007d26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d2a:	463a      	mov	r2, r7
 8007d2c:	4630      	mov	r0, r6
 8007d2e:	f7ff ffda 	bl	8007ce6 <__sfputc_r>
 8007d32:	1c43      	adds	r3, r0, #1
 8007d34:	d1f3      	bne.n	8007d1e <__sfputs_r+0xa>
 8007d36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007d38 <_vfiprintf_r>:
 8007d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d3c:	460d      	mov	r5, r1
 8007d3e:	b09d      	sub	sp, #116	; 0x74
 8007d40:	4614      	mov	r4, r2
 8007d42:	4698      	mov	r8, r3
 8007d44:	4606      	mov	r6, r0
 8007d46:	b118      	cbz	r0, 8007d50 <_vfiprintf_r+0x18>
 8007d48:	6983      	ldr	r3, [r0, #24]
 8007d4a:	b90b      	cbnz	r3, 8007d50 <_vfiprintf_r+0x18>
 8007d4c:	f000 fb06 	bl	800835c <__sinit>
 8007d50:	4b89      	ldr	r3, [pc, #548]	; (8007f78 <_vfiprintf_r+0x240>)
 8007d52:	429d      	cmp	r5, r3
 8007d54:	d11b      	bne.n	8007d8e <_vfiprintf_r+0x56>
 8007d56:	6875      	ldr	r5, [r6, #4]
 8007d58:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d5a:	07d9      	lsls	r1, r3, #31
 8007d5c:	d405      	bmi.n	8007d6a <_vfiprintf_r+0x32>
 8007d5e:	89ab      	ldrh	r3, [r5, #12]
 8007d60:	059a      	lsls	r2, r3, #22
 8007d62:	d402      	bmi.n	8007d6a <_vfiprintf_r+0x32>
 8007d64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007d66:	f000 fb97 	bl	8008498 <__retarget_lock_acquire_recursive>
 8007d6a:	89ab      	ldrh	r3, [r5, #12]
 8007d6c:	071b      	lsls	r3, r3, #28
 8007d6e:	d501      	bpl.n	8007d74 <_vfiprintf_r+0x3c>
 8007d70:	692b      	ldr	r3, [r5, #16]
 8007d72:	b9eb      	cbnz	r3, 8007db0 <_vfiprintf_r+0x78>
 8007d74:	4629      	mov	r1, r5
 8007d76:	4630      	mov	r0, r6
 8007d78:	f000 f960 	bl	800803c <__swsetup_r>
 8007d7c:	b1c0      	cbz	r0, 8007db0 <_vfiprintf_r+0x78>
 8007d7e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d80:	07dc      	lsls	r4, r3, #31
 8007d82:	d50e      	bpl.n	8007da2 <_vfiprintf_r+0x6a>
 8007d84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007d88:	b01d      	add	sp, #116	; 0x74
 8007d8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d8e:	4b7b      	ldr	r3, [pc, #492]	; (8007f7c <_vfiprintf_r+0x244>)
 8007d90:	429d      	cmp	r5, r3
 8007d92:	d101      	bne.n	8007d98 <_vfiprintf_r+0x60>
 8007d94:	68b5      	ldr	r5, [r6, #8]
 8007d96:	e7df      	b.n	8007d58 <_vfiprintf_r+0x20>
 8007d98:	4b79      	ldr	r3, [pc, #484]	; (8007f80 <_vfiprintf_r+0x248>)
 8007d9a:	429d      	cmp	r5, r3
 8007d9c:	bf08      	it	eq
 8007d9e:	68f5      	ldreq	r5, [r6, #12]
 8007da0:	e7da      	b.n	8007d58 <_vfiprintf_r+0x20>
 8007da2:	89ab      	ldrh	r3, [r5, #12]
 8007da4:	0598      	lsls	r0, r3, #22
 8007da6:	d4ed      	bmi.n	8007d84 <_vfiprintf_r+0x4c>
 8007da8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007daa:	f000 fb76 	bl	800849a <__retarget_lock_release_recursive>
 8007dae:	e7e9      	b.n	8007d84 <_vfiprintf_r+0x4c>
 8007db0:	2300      	movs	r3, #0
 8007db2:	9309      	str	r3, [sp, #36]	; 0x24
 8007db4:	2320      	movs	r3, #32
 8007db6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007dba:	f8cd 800c 	str.w	r8, [sp, #12]
 8007dbe:	2330      	movs	r3, #48	; 0x30
 8007dc0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007f84 <_vfiprintf_r+0x24c>
 8007dc4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007dc8:	f04f 0901 	mov.w	r9, #1
 8007dcc:	4623      	mov	r3, r4
 8007dce:	469a      	mov	sl, r3
 8007dd0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007dd4:	b10a      	cbz	r2, 8007dda <_vfiprintf_r+0xa2>
 8007dd6:	2a25      	cmp	r2, #37	; 0x25
 8007dd8:	d1f9      	bne.n	8007dce <_vfiprintf_r+0x96>
 8007dda:	ebba 0b04 	subs.w	fp, sl, r4
 8007dde:	d00b      	beq.n	8007df8 <_vfiprintf_r+0xc0>
 8007de0:	465b      	mov	r3, fp
 8007de2:	4622      	mov	r2, r4
 8007de4:	4629      	mov	r1, r5
 8007de6:	4630      	mov	r0, r6
 8007de8:	f7ff ff94 	bl	8007d14 <__sfputs_r>
 8007dec:	3001      	adds	r0, #1
 8007dee:	f000 80aa 	beq.w	8007f46 <_vfiprintf_r+0x20e>
 8007df2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007df4:	445a      	add	r2, fp
 8007df6:	9209      	str	r2, [sp, #36]	; 0x24
 8007df8:	f89a 3000 	ldrb.w	r3, [sl]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	f000 80a2 	beq.w	8007f46 <_vfiprintf_r+0x20e>
 8007e02:	2300      	movs	r3, #0
 8007e04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007e08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e0c:	f10a 0a01 	add.w	sl, sl, #1
 8007e10:	9304      	str	r3, [sp, #16]
 8007e12:	9307      	str	r3, [sp, #28]
 8007e14:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007e18:	931a      	str	r3, [sp, #104]	; 0x68
 8007e1a:	4654      	mov	r4, sl
 8007e1c:	2205      	movs	r2, #5
 8007e1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e22:	4858      	ldr	r0, [pc, #352]	; (8007f84 <_vfiprintf_r+0x24c>)
 8007e24:	f7f8 f9ec 	bl	8000200 <memchr>
 8007e28:	9a04      	ldr	r2, [sp, #16]
 8007e2a:	b9d8      	cbnz	r0, 8007e64 <_vfiprintf_r+0x12c>
 8007e2c:	06d1      	lsls	r1, r2, #27
 8007e2e:	bf44      	itt	mi
 8007e30:	2320      	movmi	r3, #32
 8007e32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e36:	0713      	lsls	r3, r2, #28
 8007e38:	bf44      	itt	mi
 8007e3a:	232b      	movmi	r3, #43	; 0x2b
 8007e3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e40:	f89a 3000 	ldrb.w	r3, [sl]
 8007e44:	2b2a      	cmp	r3, #42	; 0x2a
 8007e46:	d015      	beq.n	8007e74 <_vfiprintf_r+0x13c>
 8007e48:	9a07      	ldr	r2, [sp, #28]
 8007e4a:	4654      	mov	r4, sl
 8007e4c:	2000      	movs	r0, #0
 8007e4e:	f04f 0c0a 	mov.w	ip, #10
 8007e52:	4621      	mov	r1, r4
 8007e54:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e58:	3b30      	subs	r3, #48	; 0x30
 8007e5a:	2b09      	cmp	r3, #9
 8007e5c:	d94e      	bls.n	8007efc <_vfiprintf_r+0x1c4>
 8007e5e:	b1b0      	cbz	r0, 8007e8e <_vfiprintf_r+0x156>
 8007e60:	9207      	str	r2, [sp, #28]
 8007e62:	e014      	b.n	8007e8e <_vfiprintf_r+0x156>
 8007e64:	eba0 0308 	sub.w	r3, r0, r8
 8007e68:	fa09 f303 	lsl.w	r3, r9, r3
 8007e6c:	4313      	orrs	r3, r2
 8007e6e:	9304      	str	r3, [sp, #16]
 8007e70:	46a2      	mov	sl, r4
 8007e72:	e7d2      	b.n	8007e1a <_vfiprintf_r+0xe2>
 8007e74:	9b03      	ldr	r3, [sp, #12]
 8007e76:	1d19      	adds	r1, r3, #4
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	9103      	str	r1, [sp, #12]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	bfbb      	ittet	lt
 8007e80:	425b      	neglt	r3, r3
 8007e82:	f042 0202 	orrlt.w	r2, r2, #2
 8007e86:	9307      	strge	r3, [sp, #28]
 8007e88:	9307      	strlt	r3, [sp, #28]
 8007e8a:	bfb8      	it	lt
 8007e8c:	9204      	strlt	r2, [sp, #16]
 8007e8e:	7823      	ldrb	r3, [r4, #0]
 8007e90:	2b2e      	cmp	r3, #46	; 0x2e
 8007e92:	d10c      	bne.n	8007eae <_vfiprintf_r+0x176>
 8007e94:	7863      	ldrb	r3, [r4, #1]
 8007e96:	2b2a      	cmp	r3, #42	; 0x2a
 8007e98:	d135      	bne.n	8007f06 <_vfiprintf_r+0x1ce>
 8007e9a:	9b03      	ldr	r3, [sp, #12]
 8007e9c:	1d1a      	adds	r2, r3, #4
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	9203      	str	r2, [sp, #12]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	bfb8      	it	lt
 8007ea6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007eaa:	3402      	adds	r4, #2
 8007eac:	9305      	str	r3, [sp, #20]
 8007eae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007f94 <_vfiprintf_r+0x25c>
 8007eb2:	7821      	ldrb	r1, [r4, #0]
 8007eb4:	2203      	movs	r2, #3
 8007eb6:	4650      	mov	r0, sl
 8007eb8:	f7f8 f9a2 	bl	8000200 <memchr>
 8007ebc:	b140      	cbz	r0, 8007ed0 <_vfiprintf_r+0x198>
 8007ebe:	2340      	movs	r3, #64	; 0x40
 8007ec0:	eba0 000a 	sub.w	r0, r0, sl
 8007ec4:	fa03 f000 	lsl.w	r0, r3, r0
 8007ec8:	9b04      	ldr	r3, [sp, #16]
 8007eca:	4303      	orrs	r3, r0
 8007ecc:	3401      	adds	r4, #1
 8007ece:	9304      	str	r3, [sp, #16]
 8007ed0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ed4:	482c      	ldr	r0, [pc, #176]	; (8007f88 <_vfiprintf_r+0x250>)
 8007ed6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007eda:	2206      	movs	r2, #6
 8007edc:	f7f8 f990 	bl	8000200 <memchr>
 8007ee0:	2800      	cmp	r0, #0
 8007ee2:	d03f      	beq.n	8007f64 <_vfiprintf_r+0x22c>
 8007ee4:	4b29      	ldr	r3, [pc, #164]	; (8007f8c <_vfiprintf_r+0x254>)
 8007ee6:	bb1b      	cbnz	r3, 8007f30 <_vfiprintf_r+0x1f8>
 8007ee8:	9b03      	ldr	r3, [sp, #12]
 8007eea:	3307      	adds	r3, #7
 8007eec:	f023 0307 	bic.w	r3, r3, #7
 8007ef0:	3308      	adds	r3, #8
 8007ef2:	9303      	str	r3, [sp, #12]
 8007ef4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ef6:	443b      	add	r3, r7
 8007ef8:	9309      	str	r3, [sp, #36]	; 0x24
 8007efa:	e767      	b.n	8007dcc <_vfiprintf_r+0x94>
 8007efc:	fb0c 3202 	mla	r2, ip, r2, r3
 8007f00:	460c      	mov	r4, r1
 8007f02:	2001      	movs	r0, #1
 8007f04:	e7a5      	b.n	8007e52 <_vfiprintf_r+0x11a>
 8007f06:	2300      	movs	r3, #0
 8007f08:	3401      	adds	r4, #1
 8007f0a:	9305      	str	r3, [sp, #20]
 8007f0c:	4619      	mov	r1, r3
 8007f0e:	f04f 0c0a 	mov.w	ip, #10
 8007f12:	4620      	mov	r0, r4
 8007f14:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f18:	3a30      	subs	r2, #48	; 0x30
 8007f1a:	2a09      	cmp	r2, #9
 8007f1c:	d903      	bls.n	8007f26 <_vfiprintf_r+0x1ee>
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d0c5      	beq.n	8007eae <_vfiprintf_r+0x176>
 8007f22:	9105      	str	r1, [sp, #20]
 8007f24:	e7c3      	b.n	8007eae <_vfiprintf_r+0x176>
 8007f26:	fb0c 2101 	mla	r1, ip, r1, r2
 8007f2a:	4604      	mov	r4, r0
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	e7f0      	b.n	8007f12 <_vfiprintf_r+0x1da>
 8007f30:	ab03      	add	r3, sp, #12
 8007f32:	9300      	str	r3, [sp, #0]
 8007f34:	462a      	mov	r2, r5
 8007f36:	4b16      	ldr	r3, [pc, #88]	; (8007f90 <_vfiprintf_r+0x258>)
 8007f38:	a904      	add	r1, sp, #16
 8007f3a:	4630      	mov	r0, r6
 8007f3c:	f7fc f83c 	bl	8003fb8 <_printf_float>
 8007f40:	4607      	mov	r7, r0
 8007f42:	1c78      	adds	r0, r7, #1
 8007f44:	d1d6      	bne.n	8007ef4 <_vfiprintf_r+0x1bc>
 8007f46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007f48:	07d9      	lsls	r1, r3, #31
 8007f4a:	d405      	bmi.n	8007f58 <_vfiprintf_r+0x220>
 8007f4c:	89ab      	ldrh	r3, [r5, #12]
 8007f4e:	059a      	lsls	r2, r3, #22
 8007f50:	d402      	bmi.n	8007f58 <_vfiprintf_r+0x220>
 8007f52:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007f54:	f000 faa1 	bl	800849a <__retarget_lock_release_recursive>
 8007f58:	89ab      	ldrh	r3, [r5, #12]
 8007f5a:	065b      	lsls	r3, r3, #25
 8007f5c:	f53f af12 	bmi.w	8007d84 <_vfiprintf_r+0x4c>
 8007f60:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007f62:	e711      	b.n	8007d88 <_vfiprintf_r+0x50>
 8007f64:	ab03      	add	r3, sp, #12
 8007f66:	9300      	str	r3, [sp, #0]
 8007f68:	462a      	mov	r2, r5
 8007f6a:	4b09      	ldr	r3, [pc, #36]	; (8007f90 <_vfiprintf_r+0x258>)
 8007f6c:	a904      	add	r1, sp, #16
 8007f6e:	4630      	mov	r0, r6
 8007f70:	f7fc fac6 	bl	8004500 <_printf_i>
 8007f74:	e7e4      	b.n	8007f40 <_vfiprintf_r+0x208>
 8007f76:	bf00      	nop
 8007f78:	08008c1c 	.word	0x08008c1c
 8007f7c:	08008c3c 	.word	0x08008c3c
 8007f80:	08008bfc 	.word	0x08008bfc
 8007f84:	08008bac 	.word	0x08008bac
 8007f88:	08008bb6 	.word	0x08008bb6
 8007f8c:	08003fb9 	.word	0x08003fb9
 8007f90:	08007d15 	.word	0x08007d15
 8007f94:	08008bb2 	.word	0x08008bb2

08007f98 <__swbuf_r>:
 8007f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f9a:	460e      	mov	r6, r1
 8007f9c:	4614      	mov	r4, r2
 8007f9e:	4605      	mov	r5, r0
 8007fa0:	b118      	cbz	r0, 8007faa <__swbuf_r+0x12>
 8007fa2:	6983      	ldr	r3, [r0, #24]
 8007fa4:	b90b      	cbnz	r3, 8007faa <__swbuf_r+0x12>
 8007fa6:	f000 f9d9 	bl	800835c <__sinit>
 8007faa:	4b21      	ldr	r3, [pc, #132]	; (8008030 <__swbuf_r+0x98>)
 8007fac:	429c      	cmp	r4, r3
 8007fae:	d12b      	bne.n	8008008 <__swbuf_r+0x70>
 8007fb0:	686c      	ldr	r4, [r5, #4]
 8007fb2:	69a3      	ldr	r3, [r4, #24]
 8007fb4:	60a3      	str	r3, [r4, #8]
 8007fb6:	89a3      	ldrh	r3, [r4, #12]
 8007fb8:	071a      	lsls	r2, r3, #28
 8007fba:	d52f      	bpl.n	800801c <__swbuf_r+0x84>
 8007fbc:	6923      	ldr	r3, [r4, #16]
 8007fbe:	b36b      	cbz	r3, 800801c <__swbuf_r+0x84>
 8007fc0:	6923      	ldr	r3, [r4, #16]
 8007fc2:	6820      	ldr	r0, [r4, #0]
 8007fc4:	1ac0      	subs	r0, r0, r3
 8007fc6:	6963      	ldr	r3, [r4, #20]
 8007fc8:	b2f6      	uxtb	r6, r6
 8007fca:	4283      	cmp	r3, r0
 8007fcc:	4637      	mov	r7, r6
 8007fce:	dc04      	bgt.n	8007fda <__swbuf_r+0x42>
 8007fd0:	4621      	mov	r1, r4
 8007fd2:	4628      	mov	r0, r5
 8007fd4:	f000 f92e 	bl	8008234 <_fflush_r>
 8007fd8:	bb30      	cbnz	r0, 8008028 <__swbuf_r+0x90>
 8007fda:	68a3      	ldr	r3, [r4, #8]
 8007fdc:	3b01      	subs	r3, #1
 8007fde:	60a3      	str	r3, [r4, #8]
 8007fe0:	6823      	ldr	r3, [r4, #0]
 8007fe2:	1c5a      	adds	r2, r3, #1
 8007fe4:	6022      	str	r2, [r4, #0]
 8007fe6:	701e      	strb	r6, [r3, #0]
 8007fe8:	6963      	ldr	r3, [r4, #20]
 8007fea:	3001      	adds	r0, #1
 8007fec:	4283      	cmp	r3, r0
 8007fee:	d004      	beq.n	8007ffa <__swbuf_r+0x62>
 8007ff0:	89a3      	ldrh	r3, [r4, #12]
 8007ff2:	07db      	lsls	r3, r3, #31
 8007ff4:	d506      	bpl.n	8008004 <__swbuf_r+0x6c>
 8007ff6:	2e0a      	cmp	r6, #10
 8007ff8:	d104      	bne.n	8008004 <__swbuf_r+0x6c>
 8007ffa:	4621      	mov	r1, r4
 8007ffc:	4628      	mov	r0, r5
 8007ffe:	f000 f919 	bl	8008234 <_fflush_r>
 8008002:	b988      	cbnz	r0, 8008028 <__swbuf_r+0x90>
 8008004:	4638      	mov	r0, r7
 8008006:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008008:	4b0a      	ldr	r3, [pc, #40]	; (8008034 <__swbuf_r+0x9c>)
 800800a:	429c      	cmp	r4, r3
 800800c:	d101      	bne.n	8008012 <__swbuf_r+0x7a>
 800800e:	68ac      	ldr	r4, [r5, #8]
 8008010:	e7cf      	b.n	8007fb2 <__swbuf_r+0x1a>
 8008012:	4b09      	ldr	r3, [pc, #36]	; (8008038 <__swbuf_r+0xa0>)
 8008014:	429c      	cmp	r4, r3
 8008016:	bf08      	it	eq
 8008018:	68ec      	ldreq	r4, [r5, #12]
 800801a:	e7ca      	b.n	8007fb2 <__swbuf_r+0x1a>
 800801c:	4621      	mov	r1, r4
 800801e:	4628      	mov	r0, r5
 8008020:	f000 f80c 	bl	800803c <__swsetup_r>
 8008024:	2800      	cmp	r0, #0
 8008026:	d0cb      	beq.n	8007fc0 <__swbuf_r+0x28>
 8008028:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800802c:	e7ea      	b.n	8008004 <__swbuf_r+0x6c>
 800802e:	bf00      	nop
 8008030:	08008c1c 	.word	0x08008c1c
 8008034:	08008c3c 	.word	0x08008c3c
 8008038:	08008bfc 	.word	0x08008bfc

0800803c <__swsetup_r>:
 800803c:	4b32      	ldr	r3, [pc, #200]	; (8008108 <__swsetup_r+0xcc>)
 800803e:	b570      	push	{r4, r5, r6, lr}
 8008040:	681d      	ldr	r5, [r3, #0]
 8008042:	4606      	mov	r6, r0
 8008044:	460c      	mov	r4, r1
 8008046:	b125      	cbz	r5, 8008052 <__swsetup_r+0x16>
 8008048:	69ab      	ldr	r3, [r5, #24]
 800804a:	b913      	cbnz	r3, 8008052 <__swsetup_r+0x16>
 800804c:	4628      	mov	r0, r5
 800804e:	f000 f985 	bl	800835c <__sinit>
 8008052:	4b2e      	ldr	r3, [pc, #184]	; (800810c <__swsetup_r+0xd0>)
 8008054:	429c      	cmp	r4, r3
 8008056:	d10f      	bne.n	8008078 <__swsetup_r+0x3c>
 8008058:	686c      	ldr	r4, [r5, #4]
 800805a:	89a3      	ldrh	r3, [r4, #12]
 800805c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008060:	0719      	lsls	r1, r3, #28
 8008062:	d42c      	bmi.n	80080be <__swsetup_r+0x82>
 8008064:	06dd      	lsls	r5, r3, #27
 8008066:	d411      	bmi.n	800808c <__swsetup_r+0x50>
 8008068:	2309      	movs	r3, #9
 800806a:	6033      	str	r3, [r6, #0]
 800806c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008070:	81a3      	strh	r3, [r4, #12]
 8008072:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008076:	e03e      	b.n	80080f6 <__swsetup_r+0xba>
 8008078:	4b25      	ldr	r3, [pc, #148]	; (8008110 <__swsetup_r+0xd4>)
 800807a:	429c      	cmp	r4, r3
 800807c:	d101      	bne.n	8008082 <__swsetup_r+0x46>
 800807e:	68ac      	ldr	r4, [r5, #8]
 8008080:	e7eb      	b.n	800805a <__swsetup_r+0x1e>
 8008082:	4b24      	ldr	r3, [pc, #144]	; (8008114 <__swsetup_r+0xd8>)
 8008084:	429c      	cmp	r4, r3
 8008086:	bf08      	it	eq
 8008088:	68ec      	ldreq	r4, [r5, #12]
 800808a:	e7e6      	b.n	800805a <__swsetup_r+0x1e>
 800808c:	0758      	lsls	r0, r3, #29
 800808e:	d512      	bpl.n	80080b6 <__swsetup_r+0x7a>
 8008090:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008092:	b141      	cbz	r1, 80080a6 <__swsetup_r+0x6a>
 8008094:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008098:	4299      	cmp	r1, r3
 800809a:	d002      	beq.n	80080a2 <__swsetup_r+0x66>
 800809c:	4630      	mov	r0, r6
 800809e:	f7ff fb25 	bl	80076ec <_free_r>
 80080a2:	2300      	movs	r3, #0
 80080a4:	6363      	str	r3, [r4, #52]	; 0x34
 80080a6:	89a3      	ldrh	r3, [r4, #12]
 80080a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80080ac:	81a3      	strh	r3, [r4, #12]
 80080ae:	2300      	movs	r3, #0
 80080b0:	6063      	str	r3, [r4, #4]
 80080b2:	6923      	ldr	r3, [r4, #16]
 80080b4:	6023      	str	r3, [r4, #0]
 80080b6:	89a3      	ldrh	r3, [r4, #12]
 80080b8:	f043 0308 	orr.w	r3, r3, #8
 80080bc:	81a3      	strh	r3, [r4, #12]
 80080be:	6923      	ldr	r3, [r4, #16]
 80080c0:	b94b      	cbnz	r3, 80080d6 <__swsetup_r+0x9a>
 80080c2:	89a3      	ldrh	r3, [r4, #12]
 80080c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80080c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080cc:	d003      	beq.n	80080d6 <__swsetup_r+0x9a>
 80080ce:	4621      	mov	r1, r4
 80080d0:	4630      	mov	r0, r6
 80080d2:	f000 fa09 	bl	80084e8 <__smakebuf_r>
 80080d6:	89a0      	ldrh	r0, [r4, #12]
 80080d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80080dc:	f010 0301 	ands.w	r3, r0, #1
 80080e0:	d00a      	beq.n	80080f8 <__swsetup_r+0xbc>
 80080e2:	2300      	movs	r3, #0
 80080e4:	60a3      	str	r3, [r4, #8]
 80080e6:	6963      	ldr	r3, [r4, #20]
 80080e8:	425b      	negs	r3, r3
 80080ea:	61a3      	str	r3, [r4, #24]
 80080ec:	6923      	ldr	r3, [r4, #16]
 80080ee:	b943      	cbnz	r3, 8008102 <__swsetup_r+0xc6>
 80080f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80080f4:	d1ba      	bne.n	800806c <__swsetup_r+0x30>
 80080f6:	bd70      	pop	{r4, r5, r6, pc}
 80080f8:	0781      	lsls	r1, r0, #30
 80080fa:	bf58      	it	pl
 80080fc:	6963      	ldrpl	r3, [r4, #20]
 80080fe:	60a3      	str	r3, [r4, #8]
 8008100:	e7f4      	b.n	80080ec <__swsetup_r+0xb0>
 8008102:	2000      	movs	r0, #0
 8008104:	e7f7      	b.n	80080f6 <__swsetup_r+0xba>
 8008106:	bf00      	nop
 8008108:	2000000c 	.word	0x2000000c
 800810c:	08008c1c 	.word	0x08008c1c
 8008110:	08008c3c 	.word	0x08008c3c
 8008114:	08008bfc 	.word	0x08008bfc

08008118 <abort>:
 8008118:	b508      	push	{r3, lr}
 800811a:	2006      	movs	r0, #6
 800811c:	f000 fa54 	bl	80085c8 <raise>
 8008120:	2001      	movs	r0, #1
 8008122:	f7f9 f90f 	bl	8001344 <_exit>
	...

08008128 <__sflush_r>:
 8008128:	898a      	ldrh	r2, [r1, #12]
 800812a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800812e:	4605      	mov	r5, r0
 8008130:	0710      	lsls	r0, r2, #28
 8008132:	460c      	mov	r4, r1
 8008134:	d458      	bmi.n	80081e8 <__sflush_r+0xc0>
 8008136:	684b      	ldr	r3, [r1, #4]
 8008138:	2b00      	cmp	r3, #0
 800813a:	dc05      	bgt.n	8008148 <__sflush_r+0x20>
 800813c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800813e:	2b00      	cmp	r3, #0
 8008140:	dc02      	bgt.n	8008148 <__sflush_r+0x20>
 8008142:	2000      	movs	r0, #0
 8008144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008148:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800814a:	2e00      	cmp	r6, #0
 800814c:	d0f9      	beq.n	8008142 <__sflush_r+0x1a>
 800814e:	2300      	movs	r3, #0
 8008150:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008154:	682f      	ldr	r7, [r5, #0]
 8008156:	602b      	str	r3, [r5, #0]
 8008158:	d032      	beq.n	80081c0 <__sflush_r+0x98>
 800815a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800815c:	89a3      	ldrh	r3, [r4, #12]
 800815e:	075a      	lsls	r2, r3, #29
 8008160:	d505      	bpl.n	800816e <__sflush_r+0x46>
 8008162:	6863      	ldr	r3, [r4, #4]
 8008164:	1ac0      	subs	r0, r0, r3
 8008166:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008168:	b10b      	cbz	r3, 800816e <__sflush_r+0x46>
 800816a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800816c:	1ac0      	subs	r0, r0, r3
 800816e:	2300      	movs	r3, #0
 8008170:	4602      	mov	r2, r0
 8008172:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008174:	6a21      	ldr	r1, [r4, #32]
 8008176:	4628      	mov	r0, r5
 8008178:	47b0      	blx	r6
 800817a:	1c43      	adds	r3, r0, #1
 800817c:	89a3      	ldrh	r3, [r4, #12]
 800817e:	d106      	bne.n	800818e <__sflush_r+0x66>
 8008180:	6829      	ldr	r1, [r5, #0]
 8008182:	291d      	cmp	r1, #29
 8008184:	d82c      	bhi.n	80081e0 <__sflush_r+0xb8>
 8008186:	4a2a      	ldr	r2, [pc, #168]	; (8008230 <__sflush_r+0x108>)
 8008188:	40ca      	lsrs	r2, r1
 800818a:	07d6      	lsls	r6, r2, #31
 800818c:	d528      	bpl.n	80081e0 <__sflush_r+0xb8>
 800818e:	2200      	movs	r2, #0
 8008190:	6062      	str	r2, [r4, #4]
 8008192:	04d9      	lsls	r1, r3, #19
 8008194:	6922      	ldr	r2, [r4, #16]
 8008196:	6022      	str	r2, [r4, #0]
 8008198:	d504      	bpl.n	80081a4 <__sflush_r+0x7c>
 800819a:	1c42      	adds	r2, r0, #1
 800819c:	d101      	bne.n	80081a2 <__sflush_r+0x7a>
 800819e:	682b      	ldr	r3, [r5, #0]
 80081a0:	b903      	cbnz	r3, 80081a4 <__sflush_r+0x7c>
 80081a2:	6560      	str	r0, [r4, #84]	; 0x54
 80081a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80081a6:	602f      	str	r7, [r5, #0]
 80081a8:	2900      	cmp	r1, #0
 80081aa:	d0ca      	beq.n	8008142 <__sflush_r+0x1a>
 80081ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80081b0:	4299      	cmp	r1, r3
 80081b2:	d002      	beq.n	80081ba <__sflush_r+0x92>
 80081b4:	4628      	mov	r0, r5
 80081b6:	f7ff fa99 	bl	80076ec <_free_r>
 80081ba:	2000      	movs	r0, #0
 80081bc:	6360      	str	r0, [r4, #52]	; 0x34
 80081be:	e7c1      	b.n	8008144 <__sflush_r+0x1c>
 80081c0:	6a21      	ldr	r1, [r4, #32]
 80081c2:	2301      	movs	r3, #1
 80081c4:	4628      	mov	r0, r5
 80081c6:	47b0      	blx	r6
 80081c8:	1c41      	adds	r1, r0, #1
 80081ca:	d1c7      	bne.n	800815c <__sflush_r+0x34>
 80081cc:	682b      	ldr	r3, [r5, #0]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d0c4      	beq.n	800815c <__sflush_r+0x34>
 80081d2:	2b1d      	cmp	r3, #29
 80081d4:	d001      	beq.n	80081da <__sflush_r+0xb2>
 80081d6:	2b16      	cmp	r3, #22
 80081d8:	d101      	bne.n	80081de <__sflush_r+0xb6>
 80081da:	602f      	str	r7, [r5, #0]
 80081dc:	e7b1      	b.n	8008142 <__sflush_r+0x1a>
 80081de:	89a3      	ldrh	r3, [r4, #12]
 80081e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081e4:	81a3      	strh	r3, [r4, #12]
 80081e6:	e7ad      	b.n	8008144 <__sflush_r+0x1c>
 80081e8:	690f      	ldr	r7, [r1, #16]
 80081ea:	2f00      	cmp	r7, #0
 80081ec:	d0a9      	beq.n	8008142 <__sflush_r+0x1a>
 80081ee:	0793      	lsls	r3, r2, #30
 80081f0:	680e      	ldr	r6, [r1, #0]
 80081f2:	bf08      	it	eq
 80081f4:	694b      	ldreq	r3, [r1, #20]
 80081f6:	600f      	str	r7, [r1, #0]
 80081f8:	bf18      	it	ne
 80081fa:	2300      	movne	r3, #0
 80081fc:	eba6 0807 	sub.w	r8, r6, r7
 8008200:	608b      	str	r3, [r1, #8]
 8008202:	f1b8 0f00 	cmp.w	r8, #0
 8008206:	dd9c      	ble.n	8008142 <__sflush_r+0x1a>
 8008208:	6a21      	ldr	r1, [r4, #32]
 800820a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800820c:	4643      	mov	r3, r8
 800820e:	463a      	mov	r2, r7
 8008210:	4628      	mov	r0, r5
 8008212:	47b0      	blx	r6
 8008214:	2800      	cmp	r0, #0
 8008216:	dc06      	bgt.n	8008226 <__sflush_r+0xfe>
 8008218:	89a3      	ldrh	r3, [r4, #12]
 800821a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800821e:	81a3      	strh	r3, [r4, #12]
 8008220:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008224:	e78e      	b.n	8008144 <__sflush_r+0x1c>
 8008226:	4407      	add	r7, r0
 8008228:	eba8 0800 	sub.w	r8, r8, r0
 800822c:	e7e9      	b.n	8008202 <__sflush_r+0xda>
 800822e:	bf00      	nop
 8008230:	20400001 	.word	0x20400001

08008234 <_fflush_r>:
 8008234:	b538      	push	{r3, r4, r5, lr}
 8008236:	690b      	ldr	r3, [r1, #16]
 8008238:	4605      	mov	r5, r0
 800823a:	460c      	mov	r4, r1
 800823c:	b913      	cbnz	r3, 8008244 <_fflush_r+0x10>
 800823e:	2500      	movs	r5, #0
 8008240:	4628      	mov	r0, r5
 8008242:	bd38      	pop	{r3, r4, r5, pc}
 8008244:	b118      	cbz	r0, 800824e <_fflush_r+0x1a>
 8008246:	6983      	ldr	r3, [r0, #24]
 8008248:	b90b      	cbnz	r3, 800824e <_fflush_r+0x1a>
 800824a:	f000 f887 	bl	800835c <__sinit>
 800824e:	4b14      	ldr	r3, [pc, #80]	; (80082a0 <_fflush_r+0x6c>)
 8008250:	429c      	cmp	r4, r3
 8008252:	d11b      	bne.n	800828c <_fflush_r+0x58>
 8008254:	686c      	ldr	r4, [r5, #4]
 8008256:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d0ef      	beq.n	800823e <_fflush_r+0xa>
 800825e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008260:	07d0      	lsls	r0, r2, #31
 8008262:	d404      	bmi.n	800826e <_fflush_r+0x3a>
 8008264:	0599      	lsls	r1, r3, #22
 8008266:	d402      	bmi.n	800826e <_fflush_r+0x3a>
 8008268:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800826a:	f000 f915 	bl	8008498 <__retarget_lock_acquire_recursive>
 800826e:	4628      	mov	r0, r5
 8008270:	4621      	mov	r1, r4
 8008272:	f7ff ff59 	bl	8008128 <__sflush_r>
 8008276:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008278:	07da      	lsls	r2, r3, #31
 800827a:	4605      	mov	r5, r0
 800827c:	d4e0      	bmi.n	8008240 <_fflush_r+0xc>
 800827e:	89a3      	ldrh	r3, [r4, #12]
 8008280:	059b      	lsls	r3, r3, #22
 8008282:	d4dd      	bmi.n	8008240 <_fflush_r+0xc>
 8008284:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008286:	f000 f908 	bl	800849a <__retarget_lock_release_recursive>
 800828a:	e7d9      	b.n	8008240 <_fflush_r+0xc>
 800828c:	4b05      	ldr	r3, [pc, #20]	; (80082a4 <_fflush_r+0x70>)
 800828e:	429c      	cmp	r4, r3
 8008290:	d101      	bne.n	8008296 <_fflush_r+0x62>
 8008292:	68ac      	ldr	r4, [r5, #8]
 8008294:	e7df      	b.n	8008256 <_fflush_r+0x22>
 8008296:	4b04      	ldr	r3, [pc, #16]	; (80082a8 <_fflush_r+0x74>)
 8008298:	429c      	cmp	r4, r3
 800829a:	bf08      	it	eq
 800829c:	68ec      	ldreq	r4, [r5, #12]
 800829e:	e7da      	b.n	8008256 <_fflush_r+0x22>
 80082a0:	08008c1c 	.word	0x08008c1c
 80082a4:	08008c3c 	.word	0x08008c3c
 80082a8:	08008bfc 	.word	0x08008bfc

080082ac <std>:
 80082ac:	2300      	movs	r3, #0
 80082ae:	b510      	push	{r4, lr}
 80082b0:	4604      	mov	r4, r0
 80082b2:	e9c0 3300 	strd	r3, r3, [r0]
 80082b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80082ba:	6083      	str	r3, [r0, #8]
 80082bc:	8181      	strh	r1, [r0, #12]
 80082be:	6643      	str	r3, [r0, #100]	; 0x64
 80082c0:	81c2      	strh	r2, [r0, #14]
 80082c2:	6183      	str	r3, [r0, #24]
 80082c4:	4619      	mov	r1, r3
 80082c6:	2208      	movs	r2, #8
 80082c8:	305c      	adds	r0, #92	; 0x5c
 80082ca:	f7fb fdcd 	bl	8003e68 <memset>
 80082ce:	4b05      	ldr	r3, [pc, #20]	; (80082e4 <std+0x38>)
 80082d0:	6263      	str	r3, [r4, #36]	; 0x24
 80082d2:	4b05      	ldr	r3, [pc, #20]	; (80082e8 <std+0x3c>)
 80082d4:	62a3      	str	r3, [r4, #40]	; 0x28
 80082d6:	4b05      	ldr	r3, [pc, #20]	; (80082ec <std+0x40>)
 80082d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80082da:	4b05      	ldr	r3, [pc, #20]	; (80082f0 <std+0x44>)
 80082dc:	6224      	str	r4, [r4, #32]
 80082de:	6323      	str	r3, [r4, #48]	; 0x30
 80082e0:	bd10      	pop	{r4, pc}
 80082e2:	bf00      	nop
 80082e4:	08008601 	.word	0x08008601
 80082e8:	08008623 	.word	0x08008623
 80082ec:	0800865b 	.word	0x0800865b
 80082f0:	0800867f 	.word	0x0800867f

080082f4 <_cleanup_r>:
 80082f4:	4901      	ldr	r1, [pc, #4]	; (80082fc <_cleanup_r+0x8>)
 80082f6:	f000 b8af 	b.w	8008458 <_fwalk_reent>
 80082fa:	bf00      	nop
 80082fc:	08008235 	.word	0x08008235

08008300 <__sfmoreglue>:
 8008300:	b570      	push	{r4, r5, r6, lr}
 8008302:	2268      	movs	r2, #104	; 0x68
 8008304:	1e4d      	subs	r5, r1, #1
 8008306:	4355      	muls	r5, r2
 8008308:	460e      	mov	r6, r1
 800830a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800830e:	f7ff fa59 	bl	80077c4 <_malloc_r>
 8008312:	4604      	mov	r4, r0
 8008314:	b140      	cbz	r0, 8008328 <__sfmoreglue+0x28>
 8008316:	2100      	movs	r1, #0
 8008318:	e9c0 1600 	strd	r1, r6, [r0]
 800831c:	300c      	adds	r0, #12
 800831e:	60a0      	str	r0, [r4, #8]
 8008320:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008324:	f7fb fda0 	bl	8003e68 <memset>
 8008328:	4620      	mov	r0, r4
 800832a:	bd70      	pop	{r4, r5, r6, pc}

0800832c <__sfp_lock_acquire>:
 800832c:	4801      	ldr	r0, [pc, #4]	; (8008334 <__sfp_lock_acquire+0x8>)
 800832e:	f000 b8b3 	b.w	8008498 <__retarget_lock_acquire_recursive>
 8008332:	bf00      	nop
 8008334:	200002a1 	.word	0x200002a1

08008338 <__sfp_lock_release>:
 8008338:	4801      	ldr	r0, [pc, #4]	; (8008340 <__sfp_lock_release+0x8>)
 800833a:	f000 b8ae 	b.w	800849a <__retarget_lock_release_recursive>
 800833e:	bf00      	nop
 8008340:	200002a1 	.word	0x200002a1

08008344 <__sinit_lock_acquire>:
 8008344:	4801      	ldr	r0, [pc, #4]	; (800834c <__sinit_lock_acquire+0x8>)
 8008346:	f000 b8a7 	b.w	8008498 <__retarget_lock_acquire_recursive>
 800834a:	bf00      	nop
 800834c:	200002a2 	.word	0x200002a2

08008350 <__sinit_lock_release>:
 8008350:	4801      	ldr	r0, [pc, #4]	; (8008358 <__sinit_lock_release+0x8>)
 8008352:	f000 b8a2 	b.w	800849a <__retarget_lock_release_recursive>
 8008356:	bf00      	nop
 8008358:	200002a2 	.word	0x200002a2

0800835c <__sinit>:
 800835c:	b510      	push	{r4, lr}
 800835e:	4604      	mov	r4, r0
 8008360:	f7ff fff0 	bl	8008344 <__sinit_lock_acquire>
 8008364:	69a3      	ldr	r3, [r4, #24]
 8008366:	b11b      	cbz	r3, 8008370 <__sinit+0x14>
 8008368:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800836c:	f7ff bff0 	b.w	8008350 <__sinit_lock_release>
 8008370:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008374:	6523      	str	r3, [r4, #80]	; 0x50
 8008376:	4b13      	ldr	r3, [pc, #76]	; (80083c4 <__sinit+0x68>)
 8008378:	4a13      	ldr	r2, [pc, #76]	; (80083c8 <__sinit+0x6c>)
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	62a2      	str	r2, [r4, #40]	; 0x28
 800837e:	42a3      	cmp	r3, r4
 8008380:	bf04      	itt	eq
 8008382:	2301      	moveq	r3, #1
 8008384:	61a3      	streq	r3, [r4, #24]
 8008386:	4620      	mov	r0, r4
 8008388:	f000 f820 	bl	80083cc <__sfp>
 800838c:	6060      	str	r0, [r4, #4]
 800838e:	4620      	mov	r0, r4
 8008390:	f000 f81c 	bl	80083cc <__sfp>
 8008394:	60a0      	str	r0, [r4, #8]
 8008396:	4620      	mov	r0, r4
 8008398:	f000 f818 	bl	80083cc <__sfp>
 800839c:	2200      	movs	r2, #0
 800839e:	60e0      	str	r0, [r4, #12]
 80083a0:	2104      	movs	r1, #4
 80083a2:	6860      	ldr	r0, [r4, #4]
 80083a4:	f7ff ff82 	bl	80082ac <std>
 80083a8:	68a0      	ldr	r0, [r4, #8]
 80083aa:	2201      	movs	r2, #1
 80083ac:	2109      	movs	r1, #9
 80083ae:	f7ff ff7d 	bl	80082ac <std>
 80083b2:	68e0      	ldr	r0, [r4, #12]
 80083b4:	2202      	movs	r2, #2
 80083b6:	2112      	movs	r1, #18
 80083b8:	f7ff ff78 	bl	80082ac <std>
 80083bc:	2301      	movs	r3, #1
 80083be:	61a3      	str	r3, [r4, #24]
 80083c0:	e7d2      	b.n	8008368 <__sinit+0xc>
 80083c2:	bf00      	nop
 80083c4:	080087b8 	.word	0x080087b8
 80083c8:	080082f5 	.word	0x080082f5

080083cc <__sfp>:
 80083cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083ce:	4607      	mov	r7, r0
 80083d0:	f7ff ffac 	bl	800832c <__sfp_lock_acquire>
 80083d4:	4b1e      	ldr	r3, [pc, #120]	; (8008450 <__sfp+0x84>)
 80083d6:	681e      	ldr	r6, [r3, #0]
 80083d8:	69b3      	ldr	r3, [r6, #24]
 80083da:	b913      	cbnz	r3, 80083e2 <__sfp+0x16>
 80083dc:	4630      	mov	r0, r6
 80083de:	f7ff ffbd 	bl	800835c <__sinit>
 80083e2:	3648      	adds	r6, #72	; 0x48
 80083e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80083e8:	3b01      	subs	r3, #1
 80083ea:	d503      	bpl.n	80083f4 <__sfp+0x28>
 80083ec:	6833      	ldr	r3, [r6, #0]
 80083ee:	b30b      	cbz	r3, 8008434 <__sfp+0x68>
 80083f0:	6836      	ldr	r6, [r6, #0]
 80083f2:	e7f7      	b.n	80083e4 <__sfp+0x18>
 80083f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80083f8:	b9d5      	cbnz	r5, 8008430 <__sfp+0x64>
 80083fa:	4b16      	ldr	r3, [pc, #88]	; (8008454 <__sfp+0x88>)
 80083fc:	60e3      	str	r3, [r4, #12]
 80083fe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008402:	6665      	str	r5, [r4, #100]	; 0x64
 8008404:	f000 f847 	bl	8008496 <__retarget_lock_init_recursive>
 8008408:	f7ff ff96 	bl	8008338 <__sfp_lock_release>
 800840c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008410:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008414:	6025      	str	r5, [r4, #0]
 8008416:	61a5      	str	r5, [r4, #24]
 8008418:	2208      	movs	r2, #8
 800841a:	4629      	mov	r1, r5
 800841c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008420:	f7fb fd22 	bl	8003e68 <memset>
 8008424:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008428:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800842c:	4620      	mov	r0, r4
 800842e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008430:	3468      	adds	r4, #104	; 0x68
 8008432:	e7d9      	b.n	80083e8 <__sfp+0x1c>
 8008434:	2104      	movs	r1, #4
 8008436:	4638      	mov	r0, r7
 8008438:	f7ff ff62 	bl	8008300 <__sfmoreglue>
 800843c:	4604      	mov	r4, r0
 800843e:	6030      	str	r0, [r6, #0]
 8008440:	2800      	cmp	r0, #0
 8008442:	d1d5      	bne.n	80083f0 <__sfp+0x24>
 8008444:	f7ff ff78 	bl	8008338 <__sfp_lock_release>
 8008448:	230c      	movs	r3, #12
 800844a:	603b      	str	r3, [r7, #0]
 800844c:	e7ee      	b.n	800842c <__sfp+0x60>
 800844e:	bf00      	nop
 8008450:	080087b8 	.word	0x080087b8
 8008454:	ffff0001 	.word	0xffff0001

08008458 <_fwalk_reent>:
 8008458:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800845c:	4606      	mov	r6, r0
 800845e:	4688      	mov	r8, r1
 8008460:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008464:	2700      	movs	r7, #0
 8008466:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800846a:	f1b9 0901 	subs.w	r9, r9, #1
 800846e:	d505      	bpl.n	800847c <_fwalk_reent+0x24>
 8008470:	6824      	ldr	r4, [r4, #0]
 8008472:	2c00      	cmp	r4, #0
 8008474:	d1f7      	bne.n	8008466 <_fwalk_reent+0xe>
 8008476:	4638      	mov	r0, r7
 8008478:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800847c:	89ab      	ldrh	r3, [r5, #12]
 800847e:	2b01      	cmp	r3, #1
 8008480:	d907      	bls.n	8008492 <_fwalk_reent+0x3a>
 8008482:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008486:	3301      	adds	r3, #1
 8008488:	d003      	beq.n	8008492 <_fwalk_reent+0x3a>
 800848a:	4629      	mov	r1, r5
 800848c:	4630      	mov	r0, r6
 800848e:	47c0      	blx	r8
 8008490:	4307      	orrs	r7, r0
 8008492:	3568      	adds	r5, #104	; 0x68
 8008494:	e7e9      	b.n	800846a <_fwalk_reent+0x12>

08008496 <__retarget_lock_init_recursive>:
 8008496:	4770      	bx	lr

08008498 <__retarget_lock_acquire_recursive>:
 8008498:	4770      	bx	lr

0800849a <__retarget_lock_release_recursive>:
 800849a:	4770      	bx	lr

0800849c <__swhatbuf_r>:
 800849c:	b570      	push	{r4, r5, r6, lr}
 800849e:	460e      	mov	r6, r1
 80084a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084a4:	2900      	cmp	r1, #0
 80084a6:	b096      	sub	sp, #88	; 0x58
 80084a8:	4614      	mov	r4, r2
 80084aa:	461d      	mov	r5, r3
 80084ac:	da08      	bge.n	80084c0 <__swhatbuf_r+0x24>
 80084ae:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80084b2:	2200      	movs	r2, #0
 80084b4:	602a      	str	r2, [r5, #0]
 80084b6:	061a      	lsls	r2, r3, #24
 80084b8:	d410      	bmi.n	80084dc <__swhatbuf_r+0x40>
 80084ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80084be:	e00e      	b.n	80084de <__swhatbuf_r+0x42>
 80084c0:	466a      	mov	r2, sp
 80084c2:	f000 f903 	bl	80086cc <_fstat_r>
 80084c6:	2800      	cmp	r0, #0
 80084c8:	dbf1      	blt.n	80084ae <__swhatbuf_r+0x12>
 80084ca:	9a01      	ldr	r2, [sp, #4]
 80084cc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80084d0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80084d4:	425a      	negs	r2, r3
 80084d6:	415a      	adcs	r2, r3
 80084d8:	602a      	str	r2, [r5, #0]
 80084da:	e7ee      	b.n	80084ba <__swhatbuf_r+0x1e>
 80084dc:	2340      	movs	r3, #64	; 0x40
 80084de:	2000      	movs	r0, #0
 80084e0:	6023      	str	r3, [r4, #0]
 80084e2:	b016      	add	sp, #88	; 0x58
 80084e4:	bd70      	pop	{r4, r5, r6, pc}
	...

080084e8 <__smakebuf_r>:
 80084e8:	898b      	ldrh	r3, [r1, #12]
 80084ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80084ec:	079d      	lsls	r5, r3, #30
 80084ee:	4606      	mov	r6, r0
 80084f0:	460c      	mov	r4, r1
 80084f2:	d507      	bpl.n	8008504 <__smakebuf_r+0x1c>
 80084f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80084f8:	6023      	str	r3, [r4, #0]
 80084fa:	6123      	str	r3, [r4, #16]
 80084fc:	2301      	movs	r3, #1
 80084fe:	6163      	str	r3, [r4, #20]
 8008500:	b002      	add	sp, #8
 8008502:	bd70      	pop	{r4, r5, r6, pc}
 8008504:	ab01      	add	r3, sp, #4
 8008506:	466a      	mov	r2, sp
 8008508:	f7ff ffc8 	bl	800849c <__swhatbuf_r>
 800850c:	9900      	ldr	r1, [sp, #0]
 800850e:	4605      	mov	r5, r0
 8008510:	4630      	mov	r0, r6
 8008512:	f7ff f957 	bl	80077c4 <_malloc_r>
 8008516:	b948      	cbnz	r0, 800852c <__smakebuf_r+0x44>
 8008518:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800851c:	059a      	lsls	r2, r3, #22
 800851e:	d4ef      	bmi.n	8008500 <__smakebuf_r+0x18>
 8008520:	f023 0303 	bic.w	r3, r3, #3
 8008524:	f043 0302 	orr.w	r3, r3, #2
 8008528:	81a3      	strh	r3, [r4, #12]
 800852a:	e7e3      	b.n	80084f4 <__smakebuf_r+0xc>
 800852c:	4b0d      	ldr	r3, [pc, #52]	; (8008564 <__smakebuf_r+0x7c>)
 800852e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008530:	89a3      	ldrh	r3, [r4, #12]
 8008532:	6020      	str	r0, [r4, #0]
 8008534:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008538:	81a3      	strh	r3, [r4, #12]
 800853a:	9b00      	ldr	r3, [sp, #0]
 800853c:	6163      	str	r3, [r4, #20]
 800853e:	9b01      	ldr	r3, [sp, #4]
 8008540:	6120      	str	r0, [r4, #16]
 8008542:	b15b      	cbz	r3, 800855c <__smakebuf_r+0x74>
 8008544:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008548:	4630      	mov	r0, r6
 800854a:	f000 f8d1 	bl	80086f0 <_isatty_r>
 800854e:	b128      	cbz	r0, 800855c <__smakebuf_r+0x74>
 8008550:	89a3      	ldrh	r3, [r4, #12]
 8008552:	f023 0303 	bic.w	r3, r3, #3
 8008556:	f043 0301 	orr.w	r3, r3, #1
 800855a:	81a3      	strh	r3, [r4, #12]
 800855c:	89a0      	ldrh	r0, [r4, #12]
 800855e:	4305      	orrs	r5, r0
 8008560:	81a5      	strh	r5, [r4, #12]
 8008562:	e7cd      	b.n	8008500 <__smakebuf_r+0x18>
 8008564:	080082f5 	.word	0x080082f5

08008568 <_malloc_usable_size_r>:
 8008568:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800856c:	1f18      	subs	r0, r3, #4
 800856e:	2b00      	cmp	r3, #0
 8008570:	bfbc      	itt	lt
 8008572:	580b      	ldrlt	r3, [r1, r0]
 8008574:	18c0      	addlt	r0, r0, r3
 8008576:	4770      	bx	lr

08008578 <_raise_r>:
 8008578:	291f      	cmp	r1, #31
 800857a:	b538      	push	{r3, r4, r5, lr}
 800857c:	4604      	mov	r4, r0
 800857e:	460d      	mov	r5, r1
 8008580:	d904      	bls.n	800858c <_raise_r+0x14>
 8008582:	2316      	movs	r3, #22
 8008584:	6003      	str	r3, [r0, #0]
 8008586:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800858a:	bd38      	pop	{r3, r4, r5, pc}
 800858c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800858e:	b112      	cbz	r2, 8008596 <_raise_r+0x1e>
 8008590:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008594:	b94b      	cbnz	r3, 80085aa <_raise_r+0x32>
 8008596:	4620      	mov	r0, r4
 8008598:	f000 f830 	bl	80085fc <_getpid_r>
 800859c:	462a      	mov	r2, r5
 800859e:	4601      	mov	r1, r0
 80085a0:	4620      	mov	r0, r4
 80085a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80085a6:	f000 b817 	b.w	80085d8 <_kill_r>
 80085aa:	2b01      	cmp	r3, #1
 80085ac:	d00a      	beq.n	80085c4 <_raise_r+0x4c>
 80085ae:	1c59      	adds	r1, r3, #1
 80085b0:	d103      	bne.n	80085ba <_raise_r+0x42>
 80085b2:	2316      	movs	r3, #22
 80085b4:	6003      	str	r3, [r0, #0]
 80085b6:	2001      	movs	r0, #1
 80085b8:	e7e7      	b.n	800858a <_raise_r+0x12>
 80085ba:	2400      	movs	r4, #0
 80085bc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80085c0:	4628      	mov	r0, r5
 80085c2:	4798      	blx	r3
 80085c4:	2000      	movs	r0, #0
 80085c6:	e7e0      	b.n	800858a <_raise_r+0x12>

080085c8 <raise>:
 80085c8:	4b02      	ldr	r3, [pc, #8]	; (80085d4 <raise+0xc>)
 80085ca:	4601      	mov	r1, r0
 80085cc:	6818      	ldr	r0, [r3, #0]
 80085ce:	f7ff bfd3 	b.w	8008578 <_raise_r>
 80085d2:	bf00      	nop
 80085d4:	2000000c 	.word	0x2000000c

080085d8 <_kill_r>:
 80085d8:	b538      	push	{r3, r4, r5, lr}
 80085da:	4d07      	ldr	r5, [pc, #28]	; (80085f8 <_kill_r+0x20>)
 80085dc:	2300      	movs	r3, #0
 80085de:	4604      	mov	r4, r0
 80085e0:	4608      	mov	r0, r1
 80085e2:	4611      	mov	r1, r2
 80085e4:	602b      	str	r3, [r5, #0]
 80085e6:	f7f8 fe9d 	bl	8001324 <_kill>
 80085ea:	1c43      	adds	r3, r0, #1
 80085ec:	d102      	bne.n	80085f4 <_kill_r+0x1c>
 80085ee:	682b      	ldr	r3, [r5, #0]
 80085f0:	b103      	cbz	r3, 80085f4 <_kill_r+0x1c>
 80085f2:	6023      	str	r3, [r4, #0]
 80085f4:	bd38      	pop	{r3, r4, r5, pc}
 80085f6:	bf00      	nop
 80085f8:	2000029c 	.word	0x2000029c

080085fc <_getpid_r>:
 80085fc:	f7f8 be8a 	b.w	8001314 <_getpid>

08008600 <__sread>:
 8008600:	b510      	push	{r4, lr}
 8008602:	460c      	mov	r4, r1
 8008604:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008608:	f000 f894 	bl	8008734 <_read_r>
 800860c:	2800      	cmp	r0, #0
 800860e:	bfab      	itete	ge
 8008610:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008612:	89a3      	ldrhlt	r3, [r4, #12]
 8008614:	181b      	addge	r3, r3, r0
 8008616:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800861a:	bfac      	ite	ge
 800861c:	6563      	strge	r3, [r4, #84]	; 0x54
 800861e:	81a3      	strhlt	r3, [r4, #12]
 8008620:	bd10      	pop	{r4, pc}

08008622 <__swrite>:
 8008622:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008626:	461f      	mov	r7, r3
 8008628:	898b      	ldrh	r3, [r1, #12]
 800862a:	05db      	lsls	r3, r3, #23
 800862c:	4605      	mov	r5, r0
 800862e:	460c      	mov	r4, r1
 8008630:	4616      	mov	r6, r2
 8008632:	d505      	bpl.n	8008640 <__swrite+0x1e>
 8008634:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008638:	2302      	movs	r3, #2
 800863a:	2200      	movs	r2, #0
 800863c:	f000 f868 	bl	8008710 <_lseek_r>
 8008640:	89a3      	ldrh	r3, [r4, #12]
 8008642:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008646:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800864a:	81a3      	strh	r3, [r4, #12]
 800864c:	4632      	mov	r2, r6
 800864e:	463b      	mov	r3, r7
 8008650:	4628      	mov	r0, r5
 8008652:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008656:	f000 b817 	b.w	8008688 <_write_r>

0800865a <__sseek>:
 800865a:	b510      	push	{r4, lr}
 800865c:	460c      	mov	r4, r1
 800865e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008662:	f000 f855 	bl	8008710 <_lseek_r>
 8008666:	1c43      	adds	r3, r0, #1
 8008668:	89a3      	ldrh	r3, [r4, #12]
 800866a:	bf15      	itete	ne
 800866c:	6560      	strne	r0, [r4, #84]	; 0x54
 800866e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008672:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008676:	81a3      	strheq	r3, [r4, #12]
 8008678:	bf18      	it	ne
 800867a:	81a3      	strhne	r3, [r4, #12]
 800867c:	bd10      	pop	{r4, pc}

0800867e <__sclose>:
 800867e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008682:	f000 b813 	b.w	80086ac <_close_r>
	...

08008688 <_write_r>:
 8008688:	b538      	push	{r3, r4, r5, lr}
 800868a:	4d07      	ldr	r5, [pc, #28]	; (80086a8 <_write_r+0x20>)
 800868c:	4604      	mov	r4, r0
 800868e:	4608      	mov	r0, r1
 8008690:	4611      	mov	r1, r2
 8008692:	2200      	movs	r2, #0
 8008694:	602a      	str	r2, [r5, #0]
 8008696:	461a      	mov	r2, r3
 8008698:	f7f8 fe7c 	bl	8001394 <_write>
 800869c:	1c43      	adds	r3, r0, #1
 800869e:	d102      	bne.n	80086a6 <_write_r+0x1e>
 80086a0:	682b      	ldr	r3, [r5, #0]
 80086a2:	b103      	cbz	r3, 80086a6 <_write_r+0x1e>
 80086a4:	6023      	str	r3, [r4, #0]
 80086a6:	bd38      	pop	{r3, r4, r5, pc}
 80086a8:	2000029c 	.word	0x2000029c

080086ac <_close_r>:
 80086ac:	b538      	push	{r3, r4, r5, lr}
 80086ae:	4d06      	ldr	r5, [pc, #24]	; (80086c8 <_close_r+0x1c>)
 80086b0:	2300      	movs	r3, #0
 80086b2:	4604      	mov	r4, r0
 80086b4:	4608      	mov	r0, r1
 80086b6:	602b      	str	r3, [r5, #0]
 80086b8:	f7f8 fe82 	bl	80013c0 <_close>
 80086bc:	1c43      	adds	r3, r0, #1
 80086be:	d102      	bne.n	80086c6 <_close_r+0x1a>
 80086c0:	682b      	ldr	r3, [r5, #0]
 80086c2:	b103      	cbz	r3, 80086c6 <_close_r+0x1a>
 80086c4:	6023      	str	r3, [r4, #0]
 80086c6:	bd38      	pop	{r3, r4, r5, pc}
 80086c8:	2000029c 	.word	0x2000029c

080086cc <_fstat_r>:
 80086cc:	b538      	push	{r3, r4, r5, lr}
 80086ce:	4d07      	ldr	r5, [pc, #28]	; (80086ec <_fstat_r+0x20>)
 80086d0:	2300      	movs	r3, #0
 80086d2:	4604      	mov	r4, r0
 80086d4:	4608      	mov	r0, r1
 80086d6:	4611      	mov	r1, r2
 80086d8:	602b      	str	r3, [r5, #0]
 80086da:	f7f8 fe7d 	bl	80013d8 <_fstat>
 80086de:	1c43      	adds	r3, r0, #1
 80086e0:	d102      	bne.n	80086e8 <_fstat_r+0x1c>
 80086e2:	682b      	ldr	r3, [r5, #0]
 80086e4:	b103      	cbz	r3, 80086e8 <_fstat_r+0x1c>
 80086e6:	6023      	str	r3, [r4, #0]
 80086e8:	bd38      	pop	{r3, r4, r5, pc}
 80086ea:	bf00      	nop
 80086ec:	2000029c 	.word	0x2000029c

080086f0 <_isatty_r>:
 80086f0:	b538      	push	{r3, r4, r5, lr}
 80086f2:	4d06      	ldr	r5, [pc, #24]	; (800870c <_isatty_r+0x1c>)
 80086f4:	2300      	movs	r3, #0
 80086f6:	4604      	mov	r4, r0
 80086f8:	4608      	mov	r0, r1
 80086fa:	602b      	str	r3, [r5, #0]
 80086fc:	f7f8 fe7c 	bl	80013f8 <_isatty>
 8008700:	1c43      	adds	r3, r0, #1
 8008702:	d102      	bne.n	800870a <_isatty_r+0x1a>
 8008704:	682b      	ldr	r3, [r5, #0]
 8008706:	b103      	cbz	r3, 800870a <_isatty_r+0x1a>
 8008708:	6023      	str	r3, [r4, #0]
 800870a:	bd38      	pop	{r3, r4, r5, pc}
 800870c:	2000029c 	.word	0x2000029c

08008710 <_lseek_r>:
 8008710:	b538      	push	{r3, r4, r5, lr}
 8008712:	4d07      	ldr	r5, [pc, #28]	; (8008730 <_lseek_r+0x20>)
 8008714:	4604      	mov	r4, r0
 8008716:	4608      	mov	r0, r1
 8008718:	4611      	mov	r1, r2
 800871a:	2200      	movs	r2, #0
 800871c:	602a      	str	r2, [r5, #0]
 800871e:	461a      	mov	r2, r3
 8008720:	f7f8 fe75 	bl	800140e <_lseek>
 8008724:	1c43      	adds	r3, r0, #1
 8008726:	d102      	bne.n	800872e <_lseek_r+0x1e>
 8008728:	682b      	ldr	r3, [r5, #0]
 800872a:	b103      	cbz	r3, 800872e <_lseek_r+0x1e>
 800872c:	6023      	str	r3, [r4, #0]
 800872e:	bd38      	pop	{r3, r4, r5, pc}
 8008730:	2000029c 	.word	0x2000029c

08008734 <_read_r>:
 8008734:	b538      	push	{r3, r4, r5, lr}
 8008736:	4d07      	ldr	r5, [pc, #28]	; (8008754 <_read_r+0x20>)
 8008738:	4604      	mov	r4, r0
 800873a:	4608      	mov	r0, r1
 800873c:	4611      	mov	r1, r2
 800873e:	2200      	movs	r2, #0
 8008740:	602a      	str	r2, [r5, #0]
 8008742:	461a      	mov	r2, r3
 8008744:	f7f8 fe08 	bl	8001358 <_read>
 8008748:	1c43      	adds	r3, r0, #1
 800874a:	d102      	bne.n	8008752 <_read_r+0x1e>
 800874c:	682b      	ldr	r3, [r5, #0]
 800874e:	b103      	cbz	r3, 8008752 <_read_r+0x1e>
 8008750:	6023      	str	r3, [r4, #0]
 8008752:	bd38      	pop	{r3, r4, r5, pc}
 8008754:	2000029c 	.word	0x2000029c

08008758 <_init>:
 8008758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800875a:	bf00      	nop
 800875c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800875e:	bc08      	pop	{r3}
 8008760:	469e      	mov	lr, r3
 8008762:	4770      	bx	lr

08008764 <_fini>:
 8008764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008766:	bf00      	nop
 8008768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800876a:	bc08      	pop	{r3}
 800876c:	469e      	mov	lr, r3
 800876e:	4770      	bx	lr
