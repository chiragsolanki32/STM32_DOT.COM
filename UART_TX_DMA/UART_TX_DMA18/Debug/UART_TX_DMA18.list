
UART_TX_DMA18.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003760  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  0800390c  0800390c  0001390c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003954  08003954  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003954  08003954  00013954  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800395c  0800395c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800395c  0800395c  0001395c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003960  08003960  00013960  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003964  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  2000000c  08003970  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000110  08003970  00020110  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b7da  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a1b  00000000  00000000  0002b816  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000970  00000000  00000000  0002d238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008d8  00000000  00000000  0002dba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027408  00000000  00000000  0002e480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000aeb7  00000000  00000000  00055888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f1ee9  00000000  00000000  0006073f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00152628  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000025d8  00000000  00000000  00152678  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080038f4 	.word	0x080038f4

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	080038f4 	.word	0x080038f4

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <HAL_UART_TxHalfCpltCallback>:
uint8_t data[20];
uint8_t count =0;


void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80004f0:	b480      	push	{r7}
 80004f2:	b085      	sub	sp, #20
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
  for (int i=0; i<10; i++)
 80004f8:	2300      	movs	r3, #0
 80004fa:	60fb      	str	r3, [r7, #12]
 80004fc:	e007      	b.n	800050e <HAL_UART_TxHalfCpltCallback+0x1e>
    {
	data[i] = 1;
 80004fe:	4a09      	ldr	r2, [pc, #36]	; (8000524 <HAL_UART_TxHalfCpltCallback+0x34>)
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	4413      	add	r3, r2
 8000504:	2201      	movs	r2, #1
 8000506:	701a      	strb	r2, [r3, #0]
  for (int i=0; i<10; i++)
 8000508:	68fb      	ldr	r3, [r7, #12]
 800050a:	3301      	adds	r3, #1
 800050c:	60fb      	str	r3, [r7, #12]
 800050e:	68fb      	ldr	r3, [r7, #12]
 8000510:	2b09      	cmp	r3, #9
 8000512:	ddf4      	ble.n	80004fe <HAL_UART_TxHalfCpltCallback+0xe>
    }
}
 8000514:	bf00      	nop
 8000516:	bf00      	nop
 8000518:	3714      	adds	r7, #20
 800051a:	46bd      	mov	sp, r7
 800051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop
 8000524:	200000f4 	.word	0x200000f4

08000528 <HAL_UART_TxCpltCallback>:



void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000528:	b480      	push	{r7}
 800052a:	b085      	sub	sp, #20
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
    for (int i=0; i<10; i++)
 8000530:	2300      	movs	r3, #0
 8000532:	60fb      	str	r3, [r7, #12]
 8000534:	e007      	b.n	8000546 <HAL_UART_TxCpltCallback+0x1e>
    {
	data[i] = 2;
 8000536:	4a09      	ldr	r2, [pc, #36]	; (800055c <HAL_UART_TxCpltCallback+0x34>)
 8000538:	68fb      	ldr	r3, [r7, #12]
 800053a:	4413      	add	r3, r2
 800053c:	2202      	movs	r2, #2
 800053e:	701a      	strb	r2, [r3, #0]
    for (int i=0; i<10; i++)
 8000540:	68fb      	ldr	r3, [r7, #12]
 8000542:	3301      	adds	r3, #1
 8000544:	60fb      	str	r3, [r7, #12]
 8000546:	68fb      	ldr	r3, [r7, #12]
 8000548:	2b09      	cmp	r3, #9
 800054a:	ddf4      	ble.n	8000536 <HAL_UART_TxCpltCallback+0xe>
    }
}
 800054c:	bf00      	nop
 800054e:	bf00      	nop
 8000550:	3714      	adds	r7, #20
 8000552:	46bd      	mov	sp, r7
 8000554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop
 800055c:	200000f4 	.word	0x200000f4

08000560 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000566:	f000 fa44 	bl	80009f2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800056a:	f000 f831 	bl	80005d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800056e:	f000 f8cd 	bl	800070c <MX_GPIO_Init>
  MX_DMA_Init();
 8000572:	f000 f8ad 	bl	80006d0 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000576:	f000 f87f 	bl	8000678 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */


  for (int i=0; i<20; i++)
 800057a:	2300      	movs	r3, #0
 800057c:	607b      	str	r3, [r7, #4]
 800057e:	e007      	b.n	8000590 <main+0x30>
     {
 	data[i] = 3;
 8000580:	4a0f      	ldr	r2, [pc, #60]	; (80005c0 <main+0x60>)
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	4413      	add	r3, r2
 8000586:	2203      	movs	r2, #3
 8000588:	701a      	strb	r2, [r3, #0]
  for (int i=0; i<20; i++)
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	3301      	adds	r3, #1
 800058e:	607b      	str	r3, [r7, #4]
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	2b13      	cmp	r3, #19
 8000594:	ddf4      	ble.n	8000580 <main+0x20>
     }

 HAL_UART_Transmit_DMA(&hlpuart1, data,sizeof(data));
 8000596:	2214      	movs	r2, #20
 8000598:	4909      	ldr	r1, [pc, #36]	; (80005c0 <main+0x60>)
 800059a:	480a      	ldr	r0, [pc, #40]	; (80005c4 <main+0x64>)
 800059c:	f002 fb5a 	bl	8002c54 <HAL_UART_Transmit_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(GPIO_LED_GPIO_Port, GPIO_LED_Pin);
 80005a0:	2180      	movs	r1, #128	; 0x80
 80005a2:	4809      	ldr	r0, [pc, #36]	; (80005c8 <main+0x68>)
 80005a4:	f000 ff72 	bl	800148c <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 80005a8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005ac:	f000 fa96 	bl	8000adc <HAL_Delay>
		count++;
 80005b0:	4b06      	ldr	r3, [pc, #24]	; (80005cc <main+0x6c>)
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	3301      	adds	r3, #1
 80005b6:	b2da      	uxtb	r2, r3
 80005b8:	4b04      	ldr	r3, [pc, #16]	; (80005cc <main+0x6c>)
 80005ba:	701a      	strb	r2, [r3, #0]
	  HAL_GPIO_TogglePin(GPIO_LED_GPIO_Port, GPIO_LED_Pin);
 80005bc:	e7f0      	b.n	80005a0 <main+0x40>
 80005be:	bf00      	nop
 80005c0:	200000f4 	.word	0x200000f4
 80005c4:	20000028 	.word	0x20000028
 80005c8:	48000800 	.word	0x48000800
 80005cc:	20000108 	.word	0x20000108

080005d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b096      	sub	sp, #88	; 0x58
 80005d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d6:	f107 0314 	add.w	r3, r7, #20
 80005da:	2244      	movs	r2, #68	; 0x44
 80005dc:	2100      	movs	r1, #0
 80005de:	4618      	mov	r0, r3
 80005e0:	f003 f980 	bl	80038e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e4:	463b      	mov	r3, r7
 80005e6:	2200      	movs	r2, #0
 80005e8:	601a      	str	r2, [r3, #0]
 80005ea:	605a      	str	r2, [r3, #4]
 80005ec:	609a      	str	r2, [r3, #8]
 80005ee:	60da      	str	r2, [r3, #12]
 80005f0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005f2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005f6:	f000 ff71 	bl	80014dc <HAL_PWREx_ControlVoltageScaling>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000600:	f000 f8d0 	bl	80007a4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000604:	2310      	movs	r3, #16
 8000606:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000608:	2301      	movs	r3, #1
 800060a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800060c:	2300      	movs	r3, #0
 800060e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_9;
 8000610:	2390      	movs	r3, #144	; 0x90
 8000612:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000614:	2302      	movs	r3, #2
 8000616:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000618:	2301      	movs	r3, #1
 800061a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 5;
 800061c:	2305      	movs	r3, #5
 800061e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 71;
 8000620:	2347      	movs	r3, #71	; 0x47
 8000622:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000624:	2302      	movs	r3, #2
 8000626:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000628:	2302      	movs	r3, #2
 800062a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV6;
 800062c:	2306      	movs	r3, #6
 800062e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000630:	f107 0314 	add.w	r3, r7, #20
 8000634:	4618      	mov	r0, r3
 8000636:	f000 ffb7 	bl	80015a8 <HAL_RCC_OscConfig>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000640:	f000 f8b0 	bl	80007a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000644:	230f      	movs	r3, #15
 8000646:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000648:	2303      	movs	r3, #3
 800064a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 800064c:	2390      	movs	r3, #144	; 0x90
 800064e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000650:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000654:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000656:	2300      	movs	r3, #0
 8000658:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800065a:	463b      	mov	r3, r7
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f001 fbbc 	bl	8001ddc <HAL_RCC_ClockConfig>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800066a:	f000 f89b 	bl	80007a4 <Error_Handler>
  }
}
 800066e:	bf00      	nop
 8000670:	3758      	adds	r7, #88	; 0x58
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
	...

08000678 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800067c:	4b12      	ldr	r3, [pc, #72]	; (80006c8 <MX_LPUART1_UART_Init+0x50>)
 800067e:	4a13      	ldr	r2, [pc, #76]	; (80006cc <MX_LPUART1_UART_Init+0x54>)
 8000680:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 15200;
 8000682:	4b11      	ldr	r3, [pc, #68]	; (80006c8 <MX_LPUART1_UART_Init+0x50>)
 8000684:	f643 3260 	movw	r2, #15200	; 0x3b60
 8000688:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800068a:	4b0f      	ldr	r3, [pc, #60]	; (80006c8 <MX_LPUART1_UART_Init+0x50>)
 800068c:	2200      	movs	r2, #0
 800068e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000690:	4b0d      	ldr	r3, [pc, #52]	; (80006c8 <MX_LPUART1_UART_Init+0x50>)
 8000692:	2200      	movs	r2, #0
 8000694:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000696:	4b0c      	ldr	r3, [pc, #48]	; (80006c8 <MX_LPUART1_UART_Init+0x50>)
 8000698:	2200      	movs	r2, #0
 800069a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800069c:	4b0a      	ldr	r3, [pc, #40]	; (80006c8 <MX_LPUART1_UART_Init+0x50>)
 800069e:	220c      	movs	r2, #12
 80006a0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006a2:	4b09      	ldr	r3, [pc, #36]	; (80006c8 <MX_LPUART1_UART_Init+0x50>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006a8:	4b07      	ldr	r3, [pc, #28]	; (80006c8 <MX_LPUART1_UART_Init+0x50>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006ae:	4b06      	ldr	r3, [pc, #24]	; (80006c8 <MX_LPUART1_UART_Init+0x50>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80006b4:	4804      	ldr	r0, [pc, #16]	; (80006c8 <MX_LPUART1_UART_Init+0x50>)
 80006b6:	f002 fa7f 	bl	8002bb8 <HAL_UART_Init>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 80006c0:	f000 f870 	bl	80007a4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80006c4:	bf00      	nop
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	20000028 	.word	0x20000028
 80006cc:	40008000 	.word	0x40008000

080006d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80006d6:	4b0c      	ldr	r3, [pc, #48]	; (8000708 <MX_DMA_Init+0x38>)
 80006d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006da:	4a0b      	ldr	r2, [pc, #44]	; (8000708 <MX_DMA_Init+0x38>)
 80006dc:	f043 0302 	orr.w	r3, r3, #2
 80006e0:	6493      	str	r3, [r2, #72]	; 0x48
 80006e2:	4b09      	ldr	r3, [pc, #36]	; (8000708 <MX_DMA_Init+0x38>)
 80006e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006e6:	f003 0302 	and.w	r3, r3, #2
 80006ea:	607b      	str	r3, [r7, #4]
 80006ec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel6_IRQn, 0, 0);
 80006ee:	2200      	movs	r2, #0
 80006f0:	2100      	movs	r1, #0
 80006f2:	2044      	movs	r0, #68	; 0x44
 80006f4:	f000 faf1 	bl	8000cda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel6_IRQn);
 80006f8:	2044      	movs	r0, #68	; 0x44
 80006fa:	f000 fb0a 	bl	8000d12 <HAL_NVIC_EnableIRQ>

}
 80006fe:	bf00      	nop
 8000700:	3708      	adds	r7, #8
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	40021000 	.word	0x40021000

0800070c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b088      	sub	sp, #32
 8000710:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000712:	f107 030c 	add.w	r3, r7, #12
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
 800071a:	605a      	str	r2, [r3, #4]
 800071c:	609a      	str	r2, [r3, #8]
 800071e:	60da      	str	r2, [r3, #12]
 8000720:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000722:	4b1e      	ldr	r3, [pc, #120]	; (800079c <MX_GPIO_Init+0x90>)
 8000724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000726:	4a1d      	ldr	r2, [pc, #116]	; (800079c <MX_GPIO_Init+0x90>)
 8000728:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800072c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800072e:	4b1b      	ldr	r3, [pc, #108]	; (800079c <MX_GPIO_Init+0x90>)
 8000730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000732:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000736:	60bb      	str	r3, [r7, #8]
 8000738:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 800073a:	f000 ff25 	bl	8001588 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800073e:	4b17      	ldr	r3, [pc, #92]	; (800079c <MX_GPIO_Init+0x90>)
 8000740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000742:	4a16      	ldr	r2, [pc, #88]	; (800079c <MX_GPIO_Init+0x90>)
 8000744:	f043 0304 	orr.w	r3, r3, #4
 8000748:	64d3      	str	r3, [r2, #76]	; 0x4c
 800074a:	4b14      	ldr	r3, [pc, #80]	; (800079c <MX_GPIO_Init+0x90>)
 800074c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800074e:	f003 0304 	and.w	r3, r3, #4
 8000752:	607b      	str	r3, [r7, #4]
 8000754:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000756:	4b11      	ldr	r3, [pc, #68]	; (800079c <MX_GPIO_Init+0x90>)
 8000758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075a:	4a10      	ldr	r2, [pc, #64]	; (800079c <MX_GPIO_Init+0x90>)
 800075c:	f043 0301 	orr.w	r3, r3, #1
 8000760:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000762:	4b0e      	ldr	r3, [pc, #56]	; (800079c <MX_GPIO_Init+0x90>)
 8000764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000766:	f003 0301 	and.w	r3, r3, #1
 800076a:	603b      	str	r3, [r7, #0]
 800076c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_LED_GPIO_Port, GPIO_LED_Pin, GPIO_PIN_RESET);
 800076e:	2200      	movs	r2, #0
 8000770:	2180      	movs	r1, #128	; 0x80
 8000772:	480b      	ldr	r0, [pc, #44]	; (80007a0 <MX_GPIO_Init+0x94>)
 8000774:	f000 fe72 	bl	800145c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GPIO_LED_Pin */
  GPIO_InitStruct.Pin = GPIO_LED_Pin;
 8000778:	2380      	movs	r3, #128	; 0x80
 800077a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800077c:	2301      	movs	r3, #1
 800077e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000780:	2300      	movs	r3, #0
 8000782:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000784:	2300      	movs	r3, #0
 8000786:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIO_LED_GPIO_Port, &GPIO_InitStruct);
 8000788:	f107 030c 	add.w	r3, r7, #12
 800078c:	4619      	mov	r1, r3
 800078e:	4804      	ldr	r0, [pc, #16]	; (80007a0 <MX_GPIO_Init+0x94>)
 8000790:	f000 fcd2 	bl	8001138 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000794:	bf00      	nop
 8000796:	3720      	adds	r7, #32
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	40021000 	.word	0x40021000
 80007a0:	48000800 	.word	0x48000800

080007a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007a8:	b672      	cpsid	i
}
 80007aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007ac:	e7fe      	b.n	80007ac <Error_Handler+0x8>
	...

080007b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007b6:	4b0f      	ldr	r3, [pc, #60]	; (80007f4 <HAL_MspInit+0x44>)
 80007b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007ba:	4a0e      	ldr	r2, [pc, #56]	; (80007f4 <HAL_MspInit+0x44>)
 80007bc:	f043 0301 	orr.w	r3, r3, #1
 80007c0:	6613      	str	r3, [r2, #96]	; 0x60
 80007c2:	4b0c      	ldr	r3, [pc, #48]	; (80007f4 <HAL_MspInit+0x44>)
 80007c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007c6:	f003 0301 	and.w	r3, r3, #1
 80007ca:	607b      	str	r3, [r7, #4]
 80007cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ce:	4b09      	ldr	r3, [pc, #36]	; (80007f4 <HAL_MspInit+0x44>)
 80007d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007d2:	4a08      	ldr	r2, [pc, #32]	; (80007f4 <HAL_MspInit+0x44>)
 80007d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007d8:	6593      	str	r3, [r2, #88]	; 0x58
 80007da:	4b06      	ldr	r3, [pc, #24]	; (80007f4 <HAL_MspInit+0x44>)
 80007dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007e2:	603b      	str	r3, [r7, #0]
 80007e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007e6:	bf00      	nop
 80007e8:	370c      	adds	r7, #12
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop
 80007f4:	40021000 	.word	0x40021000

080007f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b0ac      	sub	sp, #176	; 0xb0
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000800:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000804:	2200      	movs	r2, #0
 8000806:	601a      	str	r2, [r3, #0]
 8000808:	605a      	str	r2, [r3, #4]
 800080a:	609a      	str	r2, [r3, #8]
 800080c:	60da      	str	r2, [r3, #12]
 800080e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000810:	f107 0310 	add.w	r3, r7, #16
 8000814:	228c      	movs	r2, #140	; 0x8c
 8000816:	2100      	movs	r1, #0
 8000818:	4618      	mov	r0, r3
 800081a:	f003 f863 	bl	80038e4 <memset>
  if(huart->Instance==LPUART1)
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	4a37      	ldr	r2, [pc, #220]	; (8000900 <HAL_UART_MspInit+0x108>)
 8000824:	4293      	cmp	r3, r2
 8000826:	d166      	bne.n	80008f6 <HAL_UART_MspInit+0xfe>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000828:	2320      	movs	r3, #32
 800082a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800082c:	2300      	movs	r3, #0
 800082e:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000830:	f107 0310 	add.w	r3, r7, #16
 8000834:	4618      	mov	r0, r3
 8000836:	f001 fcf5 	bl	8002224 <HAL_RCCEx_PeriphCLKConfig>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000840:	f7ff ffb0 	bl	80007a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000844:	4b2f      	ldr	r3, [pc, #188]	; (8000904 <HAL_UART_MspInit+0x10c>)
 8000846:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000848:	4a2e      	ldr	r2, [pc, #184]	; (8000904 <HAL_UART_MspInit+0x10c>)
 800084a:	f043 0301 	orr.w	r3, r3, #1
 800084e:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000850:	4b2c      	ldr	r3, [pc, #176]	; (8000904 <HAL_UART_MspInit+0x10c>)
 8000852:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000854:	f003 0301 	and.w	r3, r3, #1
 8000858:	60fb      	str	r3, [r7, #12]
 800085a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800085c:	4b29      	ldr	r3, [pc, #164]	; (8000904 <HAL_UART_MspInit+0x10c>)
 800085e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000860:	4a28      	ldr	r2, [pc, #160]	; (8000904 <HAL_UART_MspInit+0x10c>)
 8000862:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000866:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000868:	4b26      	ldr	r3, [pc, #152]	; (8000904 <HAL_UART_MspInit+0x10c>)
 800086a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000870:	60bb      	str	r3, [r7, #8]
 8000872:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8000874:	f000 fe88 	bl	8001588 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000878:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800087c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000880:	2302      	movs	r3, #2
 8000882:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	2300      	movs	r3, #0
 8000888:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800088c:	2303      	movs	r3, #3
 800088e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000892:	2308      	movs	r3, #8
 8000894:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000898:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800089c:	4619      	mov	r1, r3
 800089e:	481a      	ldr	r0, [pc, #104]	; (8000908 <HAL_UART_MspInit+0x110>)
 80008a0:	f000 fc4a 	bl	8001138 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART_TX Init */
    hdma_lpuart_tx.Instance = DMA2_Channel6;
 80008a4:	4b19      	ldr	r3, [pc, #100]	; (800090c <HAL_UART_MspInit+0x114>)
 80008a6:	4a1a      	ldr	r2, [pc, #104]	; (8000910 <HAL_UART_MspInit+0x118>)
 80008a8:	601a      	str	r2, [r3, #0]
    hdma_lpuart_tx.Init.Request = DMA_REQUEST_4;
 80008aa:	4b18      	ldr	r3, [pc, #96]	; (800090c <HAL_UART_MspInit+0x114>)
 80008ac:	2204      	movs	r2, #4
 80008ae:	605a      	str	r2, [r3, #4]
    hdma_lpuart_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80008b0:	4b16      	ldr	r3, [pc, #88]	; (800090c <HAL_UART_MspInit+0x114>)
 80008b2:	2210      	movs	r2, #16
 80008b4:	609a      	str	r2, [r3, #8]
    hdma_lpuart_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008b6:	4b15      	ldr	r3, [pc, #84]	; (800090c <HAL_UART_MspInit+0x114>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	60da      	str	r2, [r3, #12]
    hdma_lpuart_tx.Init.MemInc = DMA_MINC_ENABLE;
 80008bc:	4b13      	ldr	r3, [pc, #76]	; (800090c <HAL_UART_MspInit+0x114>)
 80008be:	2280      	movs	r2, #128	; 0x80
 80008c0:	611a      	str	r2, [r3, #16]
    hdma_lpuart_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80008c2:	4b12      	ldr	r3, [pc, #72]	; (800090c <HAL_UART_MspInit+0x114>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	615a      	str	r2, [r3, #20]
    hdma_lpuart_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80008c8:	4b10      	ldr	r3, [pc, #64]	; (800090c <HAL_UART_MspInit+0x114>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	619a      	str	r2, [r3, #24]
    hdma_lpuart_tx.Init.Mode = DMA_CIRCULAR;
 80008ce:	4b0f      	ldr	r3, [pc, #60]	; (800090c <HAL_UART_MspInit+0x114>)
 80008d0:	2220      	movs	r2, #32
 80008d2:	61da      	str	r2, [r3, #28]
    hdma_lpuart_tx.Init.Priority = DMA_PRIORITY_LOW;
 80008d4:	4b0d      	ldr	r3, [pc, #52]	; (800090c <HAL_UART_MspInit+0x114>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart_tx) != HAL_OK)
 80008da:	480c      	ldr	r0, [pc, #48]	; (800090c <HAL_UART_MspInit+0x114>)
 80008dc:	f000 fa34 	bl	8000d48 <HAL_DMA_Init>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <HAL_UART_MspInit+0xf2>
    {
      Error_Handler();
 80008e6:	f7ff ff5d 	bl	80007a4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart_tx);
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	4a07      	ldr	r2, [pc, #28]	; (800090c <HAL_UART_MspInit+0x114>)
 80008ee:	66da      	str	r2, [r3, #108]	; 0x6c
 80008f0:	4a06      	ldr	r2, [pc, #24]	; (800090c <HAL_UART_MspInit+0x114>)
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80008f6:	bf00      	nop
 80008f8:	37b0      	adds	r7, #176	; 0xb0
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	40008000 	.word	0x40008000
 8000904:	40021000 	.word	0x40021000
 8000908:	48001800 	.word	0x48001800
 800090c:	200000ac 	.word	0x200000ac
 8000910:	4002046c 	.word	0x4002046c

08000914 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000918:	e7fe      	b.n	8000918 <NMI_Handler+0x4>

0800091a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800091a:	b480      	push	{r7}
 800091c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800091e:	e7fe      	b.n	800091e <HardFault_Handler+0x4>

08000920 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000924:	e7fe      	b.n	8000924 <MemManage_Handler+0x4>

08000926 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000926:	b480      	push	{r7}
 8000928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800092a:	e7fe      	b.n	800092a <BusFault_Handler+0x4>

0800092c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000930:	e7fe      	b.n	8000930 <UsageFault_Handler+0x4>

08000932 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000932:	b480      	push	{r7}
 8000934:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000936:	bf00      	nop
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr

08000940 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000944:	bf00      	nop
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr

0800094e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800094e:	b480      	push	{r7}
 8000950:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000952:	bf00      	nop
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr

0800095c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000960:	f000 f89c 	bl	8000a9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000964:	bf00      	nop
 8000966:	bd80      	pop	{r7, pc}

08000968 <DMA2_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA2 channel6 global interrupt.
  */
void DMA2_Channel6_IRQHandler(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel6_IRQn 0 */

  /* USER CODE END DMA2_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart_tx);
 800096c:	4802      	ldr	r0, [pc, #8]	; (8000978 <DMA2_Channel6_IRQHandler+0x10>)
 800096e:	f000 fb03 	bl	8000f78 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel6_IRQn 1 */

  /* USER CODE END DMA2_Channel6_IRQn 1 */
}
 8000972:	bf00      	nop
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	200000ac 	.word	0x200000ac

0800097c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000980:	4b06      	ldr	r3, [pc, #24]	; (800099c <SystemInit+0x20>)
 8000982:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000986:	4a05      	ldr	r2, [pc, #20]	; (800099c <SystemInit+0x20>)
 8000988:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800098c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000990:	bf00      	nop
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	e000ed00 	.word	0xe000ed00

080009a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80009a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009d8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80009a4:	f7ff ffea 	bl	800097c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009a8:	480c      	ldr	r0, [pc, #48]	; (80009dc <LoopForever+0x6>)
  ldr r1, =_edata
 80009aa:	490d      	ldr	r1, [pc, #52]	; (80009e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009ac:	4a0d      	ldr	r2, [pc, #52]	; (80009e4 <LoopForever+0xe>)
  movs r3, #0
 80009ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009b0:	e002      	b.n	80009b8 <LoopCopyDataInit>

080009b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009b6:	3304      	adds	r3, #4

080009b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009bc:	d3f9      	bcc.n	80009b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009be:	4a0a      	ldr	r2, [pc, #40]	; (80009e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009c0:	4c0a      	ldr	r4, [pc, #40]	; (80009ec <LoopForever+0x16>)
  movs r3, #0
 80009c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009c4:	e001      	b.n	80009ca <LoopFillZerobss>

080009c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009c8:	3204      	adds	r2, #4

080009ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009cc:	d3fb      	bcc.n	80009c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009ce:	f002 ff65 	bl	800389c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009d2:	f7ff fdc5 	bl	8000560 <main>

080009d6 <LoopForever>:

LoopForever:
    b LoopForever
 80009d6:	e7fe      	b.n	80009d6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80009d8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80009dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009e0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009e4:	08003964 	.word	0x08003964
  ldr r2, =_sbss
 80009e8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009ec:	20000110 	.word	0x20000110

080009f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009f0:	e7fe      	b.n	80009f0 <ADC1_2_IRQHandler>

080009f2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009f2:	b580      	push	{r7, lr}
 80009f4:	b082      	sub	sp, #8
 80009f6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009f8:	2300      	movs	r3, #0
 80009fa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009fc:	2003      	movs	r0, #3
 80009fe:	f000 f961 	bl	8000cc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a02:	2000      	movs	r0, #0
 8000a04:	f000 f80e 	bl	8000a24 <HAL_InitTick>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d002      	beq.n	8000a14 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	71fb      	strb	r3, [r7, #7]
 8000a12:	e001      	b.n	8000a18 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a14:	f7ff fecc 	bl	80007b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a18:	79fb      	ldrb	r3, [r7, #7]
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	3708      	adds	r7, #8
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
	...

08000a24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b084      	sub	sp, #16
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000a30:	4b17      	ldr	r3, [pc, #92]	; (8000a90 <HAL_InitTick+0x6c>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d023      	beq.n	8000a80 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000a38:	4b16      	ldr	r3, [pc, #88]	; (8000a94 <HAL_InitTick+0x70>)
 8000a3a:	681a      	ldr	r2, [r3, #0]
 8000a3c:	4b14      	ldr	r3, [pc, #80]	; (8000a90 <HAL_InitTick+0x6c>)
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	4619      	mov	r1, r3
 8000a42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a46:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f000 f96d 	bl	8000d2e <HAL_SYSTICK_Config>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d10f      	bne.n	8000a7a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	2b0f      	cmp	r3, #15
 8000a5e:	d809      	bhi.n	8000a74 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a60:	2200      	movs	r2, #0
 8000a62:	6879      	ldr	r1, [r7, #4]
 8000a64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a68:	f000 f937 	bl	8000cda <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a6c:	4a0a      	ldr	r2, [pc, #40]	; (8000a98 <HAL_InitTick+0x74>)
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	6013      	str	r3, [r2, #0]
 8000a72:	e007      	b.n	8000a84 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000a74:	2301      	movs	r3, #1
 8000a76:	73fb      	strb	r3, [r7, #15]
 8000a78:	e004      	b.n	8000a84 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	73fb      	strb	r3, [r7, #15]
 8000a7e:	e001      	b.n	8000a84 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a80:	2301      	movs	r3, #1
 8000a82:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	3710      	adds	r7, #16
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	20000008 	.word	0x20000008
 8000a94:	20000000 	.word	0x20000000
 8000a98:	20000004 	.word	0x20000004

08000a9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000aa0:	4b06      	ldr	r3, [pc, #24]	; (8000abc <HAL_IncTick+0x20>)
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	461a      	mov	r2, r3
 8000aa6:	4b06      	ldr	r3, [pc, #24]	; (8000ac0 <HAL_IncTick+0x24>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	4413      	add	r3, r2
 8000aac:	4a04      	ldr	r2, [pc, #16]	; (8000ac0 <HAL_IncTick+0x24>)
 8000aae:	6013      	str	r3, [r2, #0]
}
 8000ab0:	bf00      	nop
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	20000008 	.word	0x20000008
 8000ac0:	2000010c 	.word	0x2000010c

08000ac4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ac8:	4b03      	ldr	r3, [pc, #12]	; (8000ad8 <HAL_GetTick+0x14>)
 8000aca:	681b      	ldr	r3, [r3, #0]
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	2000010c 	.word	0x2000010c

08000adc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b084      	sub	sp, #16
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ae4:	f7ff ffee 	bl	8000ac4 <HAL_GetTick>
 8000ae8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000af4:	d005      	beq.n	8000b02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000af6:	4b0a      	ldr	r3, [pc, #40]	; (8000b20 <HAL_Delay+0x44>)
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	461a      	mov	r2, r3
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	4413      	add	r3, r2
 8000b00:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b02:	bf00      	nop
 8000b04:	f7ff ffde 	bl	8000ac4 <HAL_GetTick>
 8000b08:	4602      	mov	r2, r0
 8000b0a:	68bb      	ldr	r3, [r7, #8]
 8000b0c:	1ad3      	subs	r3, r2, r3
 8000b0e:	68fa      	ldr	r2, [r7, #12]
 8000b10:	429a      	cmp	r2, r3
 8000b12:	d8f7      	bhi.n	8000b04 <HAL_Delay+0x28>
  {
  }
}
 8000b14:	bf00      	nop
 8000b16:	bf00      	nop
 8000b18:	3710      	adds	r7, #16
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	20000008 	.word	0x20000008

08000b24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b085      	sub	sp, #20
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	f003 0307 	and.w	r3, r3, #7
 8000b32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b34:	4b0c      	ldr	r3, [pc, #48]	; (8000b68 <__NVIC_SetPriorityGrouping+0x44>)
 8000b36:	68db      	ldr	r3, [r3, #12]
 8000b38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b3a:	68ba      	ldr	r2, [r7, #8]
 8000b3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b40:	4013      	ands	r3, r2
 8000b42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b48:	68bb      	ldr	r3, [r7, #8]
 8000b4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b56:	4a04      	ldr	r2, [pc, #16]	; (8000b68 <__NVIC_SetPriorityGrouping+0x44>)
 8000b58:	68bb      	ldr	r3, [r7, #8]
 8000b5a:	60d3      	str	r3, [r2, #12]
}
 8000b5c:	bf00      	nop
 8000b5e:	3714      	adds	r7, #20
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr
 8000b68:	e000ed00 	.word	0xe000ed00

08000b6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b70:	4b04      	ldr	r3, [pc, #16]	; (8000b84 <__NVIC_GetPriorityGrouping+0x18>)
 8000b72:	68db      	ldr	r3, [r3, #12]
 8000b74:	0a1b      	lsrs	r3, r3, #8
 8000b76:	f003 0307 	and.w	r3, r3, #7
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr
 8000b84:	e000ed00 	.word	0xe000ed00

08000b88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	4603      	mov	r3, r0
 8000b90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	db0b      	blt.n	8000bb2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b9a:	79fb      	ldrb	r3, [r7, #7]
 8000b9c:	f003 021f 	and.w	r2, r3, #31
 8000ba0:	4907      	ldr	r1, [pc, #28]	; (8000bc0 <__NVIC_EnableIRQ+0x38>)
 8000ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba6:	095b      	lsrs	r3, r3, #5
 8000ba8:	2001      	movs	r0, #1
 8000baa:	fa00 f202 	lsl.w	r2, r0, r2
 8000bae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000bb2:	bf00      	nop
 8000bb4:	370c      	adds	r7, #12
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	e000e100 	.word	0xe000e100

08000bc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	4603      	mov	r3, r0
 8000bcc:	6039      	str	r1, [r7, #0]
 8000bce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	db0a      	blt.n	8000bee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	b2da      	uxtb	r2, r3
 8000bdc:	490c      	ldr	r1, [pc, #48]	; (8000c10 <__NVIC_SetPriority+0x4c>)
 8000bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be2:	0112      	lsls	r2, r2, #4
 8000be4:	b2d2      	uxtb	r2, r2
 8000be6:	440b      	add	r3, r1
 8000be8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bec:	e00a      	b.n	8000c04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	b2da      	uxtb	r2, r3
 8000bf2:	4908      	ldr	r1, [pc, #32]	; (8000c14 <__NVIC_SetPriority+0x50>)
 8000bf4:	79fb      	ldrb	r3, [r7, #7]
 8000bf6:	f003 030f 	and.w	r3, r3, #15
 8000bfa:	3b04      	subs	r3, #4
 8000bfc:	0112      	lsls	r2, r2, #4
 8000bfe:	b2d2      	uxtb	r2, r2
 8000c00:	440b      	add	r3, r1
 8000c02:	761a      	strb	r2, [r3, #24]
}
 8000c04:	bf00      	nop
 8000c06:	370c      	adds	r7, #12
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr
 8000c10:	e000e100 	.word	0xe000e100
 8000c14:	e000ed00 	.word	0xe000ed00

08000c18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b089      	sub	sp, #36	; 0x24
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	60f8      	str	r0, [r7, #12]
 8000c20:	60b9      	str	r1, [r7, #8]
 8000c22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	f003 0307 	and.w	r3, r3, #7
 8000c2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c2c:	69fb      	ldr	r3, [r7, #28]
 8000c2e:	f1c3 0307 	rsb	r3, r3, #7
 8000c32:	2b04      	cmp	r3, #4
 8000c34:	bf28      	it	cs
 8000c36:	2304      	movcs	r3, #4
 8000c38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c3a:	69fb      	ldr	r3, [r7, #28]
 8000c3c:	3304      	adds	r3, #4
 8000c3e:	2b06      	cmp	r3, #6
 8000c40:	d902      	bls.n	8000c48 <NVIC_EncodePriority+0x30>
 8000c42:	69fb      	ldr	r3, [r7, #28]
 8000c44:	3b03      	subs	r3, #3
 8000c46:	e000      	b.n	8000c4a <NVIC_EncodePriority+0x32>
 8000c48:	2300      	movs	r3, #0
 8000c4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c50:	69bb      	ldr	r3, [r7, #24]
 8000c52:	fa02 f303 	lsl.w	r3, r2, r3
 8000c56:	43da      	mvns	r2, r3
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	401a      	ands	r2, r3
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c60:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	fa01 f303 	lsl.w	r3, r1, r3
 8000c6a:	43d9      	mvns	r1, r3
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c70:	4313      	orrs	r3, r2
         );
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	3724      	adds	r7, #36	; 0x24
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
	...

08000c80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	3b01      	subs	r3, #1
 8000c8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c90:	d301      	bcc.n	8000c96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c92:	2301      	movs	r3, #1
 8000c94:	e00f      	b.n	8000cb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c96:	4a0a      	ldr	r2, [pc, #40]	; (8000cc0 <SysTick_Config+0x40>)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	3b01      	subs	r3, #1
 8000c9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c9e:	210f      	movs	r1, #15
 8000ca0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ca4:	f7ff ff8e 	bl	8000bc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ca8:	4b05      	ldr	r3, [pc, #20]	; (8000cc0 <SysTick_Config+0x40>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cae:	4b04      	ldr	r3, [pc, #16]	; (8000cc0 <SysTick_Config+0x40>)
 8000cb0:	2207      	movs	r2, #7
 8000cb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cb4:	2300      	movs	r3, #0
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	e000e010 	.word	0xe000e010

08000cc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ccc:	6878      	ldr	r0, [r7, #4]
 8000cce:	f7ff ff29 	bl	8000b24 <__NVIC_SetPriorityGrouping>
}
 8000cd2:	bf00      	nop
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}

08000cda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cda:	b580      	push	{r7, lr}
 8000cdc:	b086      	sub	sp, #24
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	60b9      	str	r1, [r7, #8]
 8000ce4:	607a      	str	r2, [r7, #4]
 8000ce6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000cec:	f7ff ff3e 	bl	8000b6c <__NVIC_GetPriorityGrouping>
 8000cf0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cf2:	687a      	ldr	r2, [r7, #4]
 8000cf4:	68b9      	ldr	r1, [r7, #8]
 8000cf6:	6978      	ldr	r0, [r7, #20]
 8000cf8:	f7ff ff8e 	bl	8000c18 <NVIC_EncodePriority>
 8000cfc:	4602      	mov	r2, r0
 8000cfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d02:	4611      	mov	r1, r2
 8000d04:	4618      	mov	r0, r3
 8000d06:	f7ff ff5d 	bl	8000bc4 <__NVIC_SetPriority>
}
 8000d0a:	bf00      	nop
 8000d0c:	3718      	adds	r7, #24
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}

08000d12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d12:	b580      	push	{r7, lr}
 8000d14:	b082      	sub	sp, #8
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	4603      	mov	r3, r0
 8000d1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d20:	4618      	mov	r0, r3
 8000d22:	f7ff ff31 	bl	8000b88 <__NVIC_EnableIRQ>
}
 8000d26:	bf00      	nop
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}

08000d2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d2e:	b580      	push	{r7, lr}
 8000d30:	b082      	sub	sp, #8
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d36:	6878      	ldr	r0, [r7, #4]
 8000d38:	f7ff ffa2 	bl	8000c80 <SysTick_Config>
 8000d3c:	4603      	mov	r3, r0
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
	...

08000d48 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b085      	sub	sp, #20
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d101      	bne.n	8000d5a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000d56:	2301      	movs	r3, #1
 8000d58:	e098      	b.n	8000e8c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	461a      	mov	r2, r3
 8000d60:	4b4d      	ldr	r3, [pc, #308]	; (8000e98 <HAL_DMA_Init+0x150>)
 8000d62:	429a      	cmp	r2, r3
 8000d64:	d80f      	bhi.n	8000d86 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	461a      	mov	r2, r3
 8000d6c:	4b4b      	ldr	r3, [pc, #300]	; (8000e9c <HAL_DMA_Init+0x154>)
 8000d6e:	4413      	add	r3, r2
 8000d70:	4a4b      	ldr	r2, [pc, #300]	; (8000ea0 <HAL_DMA_Init+0x158>)
 8000d72:	fba2 2303 	umull	r2, r3, r2, r3
 8000d76:	091b      	lsrs	r3, r3, #4
 8000d78:	009a      	lsls	r2, r3, #2
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	4a48      	ldr	r2, [pc, #288]	; (8000ea4 <HAL_DMA_Init+0x15c>)
 8000d82:	641a      	str	r2, [r3, #64]	; 0x40
 8000d84:	e00e      	b.n	8000da4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	461a      	mov	r2, r3
 8000d8c:	4b46      	ldr	r3, [pc, #280]	; (8000ea8 <HAL_DMA_Init+0x160>)
 8000d8e:	4413      	add	r3, r2
 8000d90:	4a43      	ldr	r2, [pc, #268]	; (8000ea0 <HAL_DMA_Init+0x158>)
 8000d92:	fba2 2303 	umull	r2, r3, r2, r3
 8000d96:	091b      	lsrs	r3, r3, #4
 8000d98:	009a      	lsls	r2, r3, #2
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	4a42      	ldr	r2, [pc, #264]	; (8000eac <HAL_DMA_Init+0x164>)
 8000da2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	2202      	movs	r2, #2
 8000da8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000dba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000dbe:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000dc8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	691b      	ldr	r3, [r3, #16]
 8000dce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000dd4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	699b      	ldr	r3, [r3, #24]
 8000dda:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000de0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	6a1b      	ldr	r3, [r3, #32]
 8000de6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000de8:	68fa      	ldr	r2, [r7, #12]
 8000dea:	4313      	orrs	r3, r2
 8000dec:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	68fa      	ldr	r2, [r7, #12]
 8000df4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	689b      	ldr	r3, [r3, #8]
 8000dfa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000dfe:	d039      	beq.n	8000e74 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e04:	4a27      	ldr	r2, [pc, #156]	; (8000ea4 <HAL_DMA_Init+0x15c>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d11a      	bne.n	8000e40 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000e0a:	4b29      	ldr	r3, [pc, #164]	; (8000eb0 <HAL_DMA_Init+0x168>)
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e12:	f003 031c 	and.w	r3, r3, #28
 8000e16:	210f      	movs	r1, #15
 8000e18:	fa01 f303 	lsl.w	r3, r1, r3
 8000e1c:	43db      	mvns	r3, r3
 8000e1e:	4924      	ldr	r1, [pc, #144]	; (8000eb0 <HAL_DMA_Init+0x168>)
 8000e20:	4013      	ands	r3, r2
 8000e22:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000e24:	4b22      	ldr	r3, [pc, #136]	; (8000eb0 <HAL_DMA_Init+0x168>)
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	6859      	ldr	r1, [r3, #4]
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e30:	f003 031c 	and.w	r3, r3, #28
 8000e34:	fa01 f303 	lsl.w	r3, r1, r3
 8000e38:	491d      	ldr	r1, [pc, #116]	; (8000eb0 <HAL_DMA_Init+0x168>)
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	600b      	str	r3, [r1, #0]
 8000e3e:	e019      	b.n	8000e74 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000e40:	4b1c      	ldr	r3, [pc, #112]	; (8000eb4 <HAL_DMA_Init+0x16c>)
 8000e42:	681a      	ldr	r2, [r3, #0]
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e48:	f003 031c 	and.w	r3, r3, #28
 8000e4c:	210f      	movs	r1, #15
 8000e4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e52:	43db      	mvns	r3, r3
 8000e54:	4917      	ldr	r1, [pc, #92]	; (8000eb4 <HAL_DMA_Init+0x16c>)
 8000e56:	4013      	ands	r3, r2
 8000e58:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000e5a:	4b16      	ldr	r3, [pc, #88]	; (8000eb4 <HAL_DMA_Init+0x16c>)
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	6859      	ldr	r1, [r3, #4]
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e66:	f003 031c 	and.w	r3, r3, #28
 8000e6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e6e:	4911      	ldr	r1, [pc, #68]	; (8000eb4 <HAL_DMA_Init+0x16c>)
 8000e70:	4313      	orrs	r3, r2
 8000e72:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2200      	movs	r2, #0
 8000e78:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2200      	movs	r2, #0
 8000e86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8000e8a:	2300      	movs	r3, #0
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	3714      	adds	r7, #20
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr
 8000e98:	40020407 	.word	0x40020407
 8000e9c:	bffdfff8 	.word	0xbffdfff8
 8000ea0:	cccccccd 	.word	0xcccccccd
 8000ea4:	40020000 	.word	0x40020000
 8000ea8:	bffdfbf8 	.word	0xbffdfbf8
 8000eac:	40020400 	.word	0x40020400
 8000eb0:	400200a8 	.word	0x400200a8
 8000eb4:	400204a8 	.word	0x400204a8

08000eb8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b086      	sub	sp, #24
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	60f8      	str	r0, [r7, #12]
 8000ec0:	60b9      	str	r1, [r7, #8]
 8000ec2:	607a      	str	r2, [r7, #4]
 8000ec4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000ed0:	2b01      	cmp	r3, #1
 8000ed2:	d101      	bne.n	8000ed8 <HAL_DMA_Start_IT+0x20>
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	e04b      	b.n	8000f70 <HAL_DMA_Start_IT+0xb8>
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	2201      	movs	r2, #1
 8000edc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000ee6:	b2db      	uxtb	r3, r3
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	d13a      	bne.n	8000f62 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	2202      	movs	r2, #2
 8000ef0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f022 0201 	bic.w	r2, r2, #1
 8000f08:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	687a      	ldr	r2, [r7, #4]
 8000f0e:	68b9      	ldr	r1, [r7, #8]
 8000f10:	68f8      	ldr	r0, [r7, #12]
 8000f12:	f000 f8e0 	bl	80010d6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d008      	beq.n	8000f30 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f042 020e 	orr.w	r2, r2, #14
 8000f2c:	601a      	str	r2, [r3, #0]
 8000f2e:	e00f      	b.n	8000f50 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f022 0204 	bic.w	r2, r2, #4
 8000f3e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f042 020a 	orr.w	r2, r2, #10
 8000f4e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	681a      	ldr	r2, [r3, #0]
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f042 0201 	orr.w	r2, r2, #1
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	e005      	b.n	8000f6e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	2200      	movs	r2, #0
 8000f66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8000f6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3718      	adds	r7, #24
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f94:	f003 031c 	and.w	r3, r3, #28
 8000f98:	2204      	movs	r2, #4
 8000f9a:	409a      	lsls	r2, r3
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d026      	beq.n	8000ff2 <HAL_DMA_IRQHandler+0x7a>
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	f003 0304 	and.w	r3, r3, #4
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d021      	beq.n	8000ff2 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f003 0320 	and.w	r3, r3, #32
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d107      	bne.n	8000fcc <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f022 0204 	bic.w	r2, r2, #4
 8000fca:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd0:	f003 021c 	and.w	r2, r3, #28
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd8:	2104      	movs	r1, #4
 8000fda:	fa01 f202 	lsl.w	r2, r1, r2
 8000fde:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d071      	beq.n	80010cc <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fec:	6878      	ldr	r0, [r7, #4]
 8000fee:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8000ff0:	e06c      	b.n	80010cc <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ff6:	f003 031c 	and.w	r3, r3, #28
 8000ffa:	2202      	movs	r2, #2
 8000ffc:	409a      	lsls	r2, r3
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	4013      	ands	r3, r2
 8001002:	2b00      	cmp	r3, #0
 8001004:	d02e      	beq.n	8001064 <HAL_DMA_IRQHandler+0xec>
 8001006:	68bb      	ldr	r3, [r7, #8]
 8001008:	f003 0302 	and.w	r3, r3, #2
 800100c:	2b00      	cmp	r3, #0
 800100e:	d029      	beq.n	8001064 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f003 0320 	and.w	r3, r3, #32
 800101a:	2b00      	cmp	r3, #0
 800101c:	d10b      	bne.n	8001036 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f022 020a 	bic.w	r2, r2, #10
 800102c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2201      	movs	r2, #1
 8001032:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800103a:	f003 021c 	and.w	r2, r3, #28
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001042:	2102      	movs	r1, #2
 8001044:	fa01 f202 	lsl.w	r2, r1, r2
 8001048:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2200      	movs	r2, #0
 800104e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001056:	2b00      	cmp	r3, #0
 8001058:	d038      	beq.n	80010cc <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001062:	e033      	b.n	80010cc <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001068:	f003 031c 	and.w	r3, r3, #28
 800106c:	2208      	movs	r2, #8
 800106e:	409a      	lsls	r2, r3
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	4013      	ands	r3, r2
 8001074:	2b00      	cmp	r3, #0
 8001076:	d02a      	beq.n	80010ce <HAL_DMA_IRQHandler+0x156>
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	f003 0308 	and.w	r3, r3, #8
 800107e:	2b00      	cmp	r3, #0
 8001080:	d025      	beq.n	80010ce <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f022 020e 	bic.w	r2, r2, #14
 8001090:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001096:	f003 021c 	and.w	r2, r3, #28
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109e:	2101      	movs	r1, #1
 80010a0:	fa01 f202 	lsl.w	r2, r1, r2
 80010a4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2201      	movs	r2, #1
 80010aa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2201      	movs	r2, #1
 80010b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2200      	movs	r2, #0
 80010b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d004      	beq.n	80010ce <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80010cc:	bf00      	nop
 80010ce:	bf00      	nop
}
 80010d0:	3710      	adds	r7, #16
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}

080010d6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80010d6:	b480      	push	{r7}
 80010d8:	b085      	sub	sp, #20
 80010da:	af00      	add	r7, sp, #0
 80010dc:	60f8      	str	r0, [r7, #12]
 80010de:	60b9      	str	r1, [r7, #8]
 80010e0:	607a      	str	r2, [r7, #4]
 80010e2:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e8:	f003 021c 	and.w	r2, r3, #28
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f0:	2101      	movs	r1, #1
 80010f2:	fa01 f202 	lsl.w	r2, r1, r2
 80010f6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	683a      	ldr	r2, [r7, #0]
 80010fe:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	2b10      	cmp	r3, #16
 8001106:	d108      	bne.n	800111a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	687a      	ldr	r2, [r7, #4]
 800110e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	68ba      	ldr	r2, [r7, #8]
 8001116:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001118:	e007      	b.n	800112a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	68ba      	ldr	r2, [r7, #8]
 8001120:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	687a      	ldr	r2, [r7, #4]
 8001128:	60da      	str	r2, [r3, #12]
}
 800112a:	bf00      	nop
 800112c:	3714      	adds	r7, #20
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
	...

08001138 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001138:	b480      	push	{r7}
 800113a:	b087      	sub	sp, #28
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
 8001140:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001142:	2300      	movs	r3, #0
 8001144:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001146:	e166      	b.n	8001416 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	2101      	movs	r1, #1
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	fa01 f303 	lsl.w	r3, r1, r3
 8001154:	4013      	ands	r3, r2
 8001156:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	2b00      	cmp	r3, #0
 800115c:	f000 8158 	beq.w	8001410 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f003 0303 	and.w	r3, r3, #3
 8001168:	2b01      	cmp	r3, #1
 800116a:	d005      	beq.n	8001178 <HAL_GPIO_Init+0x40>
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f003 0303 	and.w	r3, r3, #3
 8001174:	2b02      	cmp	r3, #2
 8001176:	d130      	bne.n	80011da <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	689b      	ldr	r3, [r3, #8]
 800117c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	005b      	lsls	r3, r3, #1
 8001182:	2203      	movs	r2, #3
 8001184:	fa02 f303 	lsl.w	r3, r2, r3
 8001188:	43db      	mvns	r3, r3
 800118a:	693a      	ldr	r2, [r7, #16]
 800118c:	4013      	ands	r3, r2
 800118e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	68da      	ldr	r2, [r3, #12]
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	005b      	lsls	r3, r3, #1
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	693a      	ldr	r2, [r7, #16]
 800119e:	4313      	orrs	r3, r2
 80011a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	693a      	ldr	r2, [r7, #16]
 80011a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011ae:	2201      	movs	r2, #1
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	fa02 f303 	lsl.w	r3, r2, r3
 80011b6:	43db      	mvns	r3, r3
 80011b8:	693a      	ldr	r2, [r7, #16]
 80011ba:	4013      	ands	r3, r2
 80011bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	091b      	lsrs	r3, r3, #4
 80011c4:	f003 0201 	and.w	r2, r3, #1
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	fa02 f303 	lsl.w	r3, r2, r3
 80011ce:	693a      	ldr	r2, [r7, #16]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	693a      	ldr	r2, [r7, #16]
 80011d8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	f003 0303 	and.w	r3, r3, #3
 80011e2:	2b03      	cmp	r3, #3
 80011e4:	d017      	beq.n	8001216 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	68db      	ldr	r3, [r3, #12]
 80011ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	005b      	lsls	r3, r3, #1
 80011f0:	2203      	movs	r2, #3
 80011f2:	fa02 f303 	lsl.w	r3, r2, r3
 80011f6:	43db      	mvns	r3, r3
 80011f8:	693a      	ldr	r2, [r7, #16]
 80011fa:	4013      	ands	r3, r2
 80011fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	689a      	ldr	r2, [r3, #8]
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	005b      	lsls	r3, r3, #1
 8001206:	fa02 f303 	lsl.w	r3, r2, r3
 800120a:	693a      	ldr	r2, [r7, #16]
 800120c:	4313      	orrs	r3, r2
 800120e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	f003 0303 	and.w	r3, r3, #3
 800121e:	2b02      	cmp	r3, #2
 8001220:	d123      	bne.n	800126a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	08da      	lsrs	r2, r3, #3
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	3208      	adds	r2, #8
 800122a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800122e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	f003 0307 	and.w	r3, r3, #7
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	220f      	movs	r2, #15
 800123a:	fa02 f303 	lsl.w	r3, r2, r3
 800123e:	43db      	mvns	r3, r3
 8001240:	693a      	ldr	r2, [r7, #16]
 8001242:	4013      	ands	r3, r2
 8001244:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	691a      	ldr	r2, [r3, #16]
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	f003 0307 	and.w	r3, r3, #7
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	fa02 f303 	lsl.w	r3, r2, r3
 8001256:	693a      	ldr	r2, [r7, #16]
 8001258:	4313      	orrs	r3, r2
 800125a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	08da      	lsrs	r2, r3, #3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	3208      	adds	r2, #8
 8001264:	6939      	ldr	r1, [r7, #16]
 8001266:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	2203      	movs	r2, #3
 8001276:	fa02 f303 	lsl.w	r3, r2, r3
 800127a:	43db      	mvns	r3, r3
 800127c:	693a      	ldr	r2, [r7, #16]
 800127e:	4013      	ands	r3, r2
 8001280:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	f003 0203 	and.w	r2, r3, #3
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	005b      	lsls	r3, r3, #1
 800128e:	fa02 f303 	lsl.w	r3, r2, r3
 8001292:	693a      	ldr	r2, [r7, #16]
 8001294:	4313      	orrs	r3, r2
 8001296:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	693a      	ldr	r2, [r7, #16]
 800129c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	f000 80b2 	beq.w	8001410 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ac:	4b61      	ldr	r3, [pc, #388]	; (8001434 <HAL_GPIO_Init+0x2fc>)
 80012ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012b0:	4a60      	ldr	r2, [pc, #384]	; (8001434 <HAL_GPIO_Init+0x2fc>)
 80012b2:	f043 0301 	orr.w	r3, r3, #1
 80012b6:	6613      	str	r3, [r2, #96]	; 0x60
 80012b8:	4b5e      	ldr	r3, [pc, #376]	; (8001434 <HAL_GPIO_Init+0x2fc>)
 80012ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012bc:	f003 0301 	and.w	r3, r3, #1
 80012c0:	60bb      	str	r3, [r7, #8]
 80012c2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80012c4:	4a5c      	ldr	r2, [pc, #368]	; (8001438 <HAL_GPIO_Init+0x300>)
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	089b      	lsrs	r3, r3, #2
 80012ca:	3302      	adds	r3, #2
 80012cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	f003 0303 	and.w	r3, r3, #3
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	220f      	movs	r2, #15
 80012dc:	fa02 f303 	lsl.w	r3, r2, r3
 80012e0:	43db      	mvns	r3, r3
 80012e2:	693a      	ldr	r2, [r7, #16]
 80012e4:	4013      	ands	r3, r2
 80012e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80012ee:	d02b      	beq.n	8001348 <HAL_GPIO_Init+0x210>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	4a52      	ldr	r2, [pc, #328]	; (800143c <HAL_GPIO_Init+0x304>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d025      	beq.n	8001344 <HAL_GPIO_Init+0x20c>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	4a51      	ldr	r2, [pc, #324]	; (8001440 <HAL_GPIO_Init+0x308>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d01f      	beq.n	8001340 <HAL_GPIO_Init+0x208>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	4a50      	ldr	r2, [pc, #320]	; (8001444 <HAL_GPIO_Init+0x30c>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d019      	beq.n	800133c <HAL_GPIO_Init+0x204>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	4a4f      	ldr	r2, [pc, #316]	; (8001448 <HAL_GPIO_Init+0x310>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d013      	beq.n	8001338 <HAL_GPIO_Init+0x200>
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	4a4e      	ldr	r2, [pc, #312]	; (800144c <HAL_GPIO_Init+0x314>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d00d      	beq.n	8001334 <HAL_GPIO_Init+0x1fc>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	4a4d      	ldr	r2, [pc, #308]	; (8001450 <HAL_GPIO_Init+0x318>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d007      	beq.n	8001330 <HAL_GPIO_Init+0x1f8>
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	4a4c      	ldr	r2, [pc, #304]	; (8001454 <HAL_GPIO_Init+0x31c>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d101      	bne.n	800132c <HAL_GPIO_Init+0x1f4>
 8001328:	2307      	movs	r3, #7
 800132a:	e00e      	b.n	800134a <HAL_GPIO_Init+0x212>
 800132c:	2308      	movs	r3, #8
 800132e:	e00c      	b.n	800134a <HAL_GPIO_Init+0x212>
 8001330:	2306      	movs	r3, #6
 8001332:	e00a      	b.n	800134a <HAL_GPIO_Init+0x212>
 8001334:	2305      	movs	r3, #5
 8001336:	e008      	b.n	800134a <HAL_GPIO_Init+0x212>
 8001338:	2304      	movs	r3, #4
 800133a:	e006      	b.n	800134a <HAL_GPIO_Init+0x212>
 800133c:	2303      	movs	r3, #3
 800133e:	e004      	b.n	800134a <HAL_GPIO_Init+0x212>
 8001340:	2302      	movs	r3, #2
 8001342:	e002      	b.n	800134a <HAL_GPIO_Init+0x212>
 8001344:	2301      	movs	r3, #1
 8001346:	e000      	b.n	800134a <HAL_GPIO_Init+0x212>
 8001348:	2300      	movs	r3, #0
 800134a:	697a      	ldr	r2, [r7, #20]
 800134c:	f002 0203 	and.w	r2, r2, #3
 8001350:	0092      	lsls	r2, r2, #2
 8001352:	4093      	lsls	r3, r2
 8001354:	693a      	ldr	r2, [r7, #16]
 8001356:	4313      	orrs	r3, r2
 8001358:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800135a:	4937      	ldr	r1, [pc, #220]	; (8001438 <HAL_GPIO_Init+0x300>)
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	089b      	lsrs	r3, r3, #2
 8001360:	3302      	adds	r3, #2
 8001362:	693a      	ldr	r2, [r7, #16]
 8001364:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001368:	4b3b      	ldr	r3, [pc, #236]	; (8001458 <HAL_GPIO_Init+0x320>)
 800136a:	689b      	ldr	r3, [r3, #8]
 800136c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	43db      	mvns	r3, r3
 8001372:	693a      	ldr	r2, [r7, #16]
 8001374:	4013      	ands	r3, r2
 8001376:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001380:	2b00      	cmp	r3, #0
 8001382:	d003      	beq.n	800138c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001384:	693a      	ldr	r2, [r7, #16]
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	4313      	orrs	r3, r2
 800138a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800138c:	4a32      	ldr	r2, [pc, #200]	; (8001458 <HAL_GPIO_Init+0x320>)
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001392:	4b31      	ldr	r3, [pc, #196]	; (8001458 <HAL_GPIO_Init+0x320>)
 8001394:	68db      	ldr	r3, [r3, #12]
 8001396:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	43db      	mvns	r3, r3
 800139c:	693a      	ldr	r2, [r7, #16]
 800139e:	4013      	ands	r3, r2
 80013a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d003      	beq.n	80013b6 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80013ae:	693a      	ldr	r2, [r7, #16]
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	4313      	orrs	r3, r2
 80013b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80013b6:	4a28      	ldr	r2, [pc, #160]	; (8001458 <HAL_GPIO_Init+0x320>)
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80013bc:	4b26      	ldr	r3, [pc, #152]	; (8001458 <HAL_GPIO_Init+0x320>)
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	43db      	mvns	r3, r3
 80013c6:	693a      	ldr	r2, [r7, #16]
 80013c8:	4013      	ands	r3, r2
 80013ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d003      	beq.n	80013e0 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80013d8:	693a      	ldr	r2, [r7, #16]
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	4313      	orrs	r3, r2
 80013de:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80013e0:	4a1d      	ldr	r2, [pc, #116]	; (8001458 <HAL_GPIO_Init+0x320>)
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80013e6:	4b1c      	ldr	r3, [pc, #112]	; (8001458 <HAL_GPIO_Init+0x320>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	43db      	mvns	r3, r3
 80013f0:	693a      	ldr	r2, [r7, #16]
 80013f2:	4013      	ands	r3, r2
 80013f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d003      	beq.n	800140a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001402:	693a      	ldr	r2, [r7, #16]
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	4313      	orrs	r3, r2
 8001408:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800140a:	4a13      	ldr	r2, [pc, #76]	; (8001458 <HAL_GPIO_Init+0x320>)
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	3301      	adds	r3, #1
 8001414:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	fa22 f303 	lsr.w	r3, r2, r3
 8001420:	2b00      	cmp	r3, #0
 8001422:	f47f ae91 	bne.w	8001148 <HAL_GPIO_Init+0x10>
  }
}
 8001426:	bf00      	nop
 8001428:	bf00      	nop
 800142a:	371c      	adds	r7, #28
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr
 8001434:	40021000 	.word	0x40021000
 8001438:	40010000 	.word	0x40010000
 800143c:	48000400 	.word	0x48000400
 8001440:	48000800 	.word	0x48000800
 8001444:	48000c00 	.word	0x48000c00
 8001448:	48001000 	.word	0x48001000
 800144c:	48001400 	.word	0x48001400
 8001450:	48001800 	.word	0x48001800
 8001454:	48001c00 	.word	0x48001c00
 8001458:	40010400 	.word	0x40010400

0800145c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	460b      	mov	r3, r1
 8001466:	807b      	strh	r3, [r7, #2]
 8001468:	4613      	mov	r3, r2
 800146a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800146c:	787b      	ldrb	r3, [r7, #1]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d003      	beq.n	800147a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001472:	887a      	ldrh	r2, [r7, #2]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001478:	e002      	b.n	8001480 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800147a:	887a      	ldrh	r2, [r7, #2]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001480:	bf00      	nop
 8001482:	370c      	adds	r7, #12
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr

0800148c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800148c:	b480      	push	{r7}
 800148e:	b085      	sub	sp, #20
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
 8001494:	460b      	mov	r3, r1
 8001496:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	695b      	ldr	r3, [r3, #20]
 800149c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800149e:	887a      	ldrh	r2, [r7, #2]
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	4013      	ands	r3, r2
 80014a4:	041a      	lsls	r2, r3, #16
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	43d9      	mvns	r1, r3
 80014aa:	887b      	ldrh	r3, [r7, #2]
 80014ac:	400b      	ands	r3, r1
 80014ae:	431a      	orrs	r2, r3
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	619a      	str	r2, [r3, #24]
}
 80014b4:	bf00      	nop
 80014b6:	3714      	adds	r7, #20
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr

080014c0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80014c4:	4b04      	ldr	r3, [pc, #16]	; (80014d8 <HAL_PWREx_GetVoltageRange+0x18>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	40007000 	.word	0x40007000

080014dc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80014dc:	b480      	push	{r7}
 80014de:	b085      	sub	sp, #20
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80014ea:	d130      	bne.n	800154e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80014ec:	4b23      	ldr	r3, [pc, #140]	; (800157c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80014f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80014f8:	d038      	beq.n	800156c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80014fa:	4b20      	ldr	r3, [pc, #128]	; (800157c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001502:	4a1e      	ldr	r2, [pc, #120]	; (800157c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001504:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001508:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800150a:	4b1d      	ldr	r3, [pc, #116]	; (8001580 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	2232      	movs	r2, #50	; 0x32
 8001510:	fb02 f303 	mul.w	r3, r2, r3
 8001514:	4a1b      	ldr	r2, [pc, #108]	; (8001584 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001516:	fba2 2303 	umull	r2, r3, r2, r3
 800151a:	0c9b      	lsrs	r3, r3, #18
 800151c:	3301      	adds	r3, #1
 800151e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001520:	e002      	b.n	8001528 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	3b01      	subs	r3, #1
 8001526:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001528:	4b14      	ldr	r3, [pc, #80]	; (800157c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800152a:	695b      	ldr	r3, [r3, #20]
 800152c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001530:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001534:	d102      	bne.n	800153c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d1f2      	bne.n	8001522 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800153c:	4b0f      	ldr	r3, [pc, #60]	; (800157c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800153e:	695b      	ldr	r3, [r3, #20]
 8001540:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001544:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001548:	d110      	bne.n	800156c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800154a:	2303      	movs	r3, #3
 800154c:	e00f      	b.n	800156e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800154e:	4b0b      	ldr	r3, [pc, #44]	; (800157c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001556:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800155a:	d007      	beq.n	800156c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800155c:	4b07      	ldr	r3, [pc, #28]	; (800157c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001564:	4a05      	ldr	r2, [pc, #20]	; (800157c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001566:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800156a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800156c:	2300      	movs	r3, #0
}
 800156e:	4618      	mov	r0, r3
 8001570:	3714      	adds	r7, #20
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	40007000 	.word	0x40007000
 8001580:	20000000 	.word	0x20000000
 8001584:	431bde83 	.word	0x431bde83

08001588 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 800158c:	4b05      	ldr	r3, [pc, #20]	; (80015a4 <HAL_PWREx_EnableVddIO2+0x1c>)
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	4a04      	ldr	r2, [pc, #16]	; (80015a4 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001592:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001596:	6053      	str	r3, [r2, #4]
}
 8001598:	bf00      	nop
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	40007000 	.word	0x40007000

080015a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b088      	sub	sp, #32
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d102      	bne.n	80015bc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	f000 bc08 	b.w	8001dcc <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015bc:	4b96      	ldr	r3, [pc, #600]	; (8001818 <HAL_RCC_OscConfig+0x270>)
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	f003 030c 	and.w	r3, r3, #12
 80015c4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015c6:	4b94      	ldr	r3, [pc, #592]	; (8001818 <HAL_RCC_OscConfig+0x270>)
 80015c8:	68db      	ldr	r3, [r3, #12]
 80015ca:	f003 0303 	and.w	r3, r3, #3
 80015ce:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f003 0310 	and.w	r3, r3, #16
 80015d8:	2b00      	cmp	r3, #0
 80015da:	f000 80e4 	beq.w	80017a6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80015de:	69bb      	ldr	r3, [r7, #24]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d007      	beq.n	80015f4 <HAL_RCC_OscConfig+0x4c>
 80015e4:	69bb      	ldr	r3, [r7, #24]
 80015e6:	2b0c      	cmp	r3, #12
 80015e8:	f040 808b 	bne.w	8001702 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	f040 8087 	bne.w	8001702 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80015f4:	4b88      	ldr	r3, [pc, #544]	; (8001818 <HAL_RCC_OscConfig+0x270>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 0302 	and.w	r3, r3, #2
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d005      	beq.n	800160c <HAL_RCC_OscConfig+0x64>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	699b      	ldr	r3, [r3, #24]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d101      	bne.n	800160c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001608:	2301      	movs	r3, #1
 800160a:	e3df      	b.n	8001dcc <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6a1a      	ldr	r2, [r3, #32]
 8001610:	4b81      	ldr	r3, [pc, #516]	; (8001818 <HAL_RCC_OscConfig+0x270>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 0308 	and.w	r3, r3, #8
 8001618:	2b00      	cmp	r3, #0
 800161a:	d004      	beq.n	8001626 <HAL_RCC_OscConfig+0x7e>
 800161c:	4b7e      	ldr	r3, [pc, #504]	; (8001818 <HAL_RCC_OscConfig+0x270>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001624:	e005      	b.n	8001632 <HAL_RCC_OscConfig+0x8a>
 8001626:	4b7c      	ldr	r3, [pc, #496]	; (8001818 <HAL_RCC_OscConfig+0x270>)
 8001628:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800162c:	091b      	lsrs	r3, r3, #4
 800162e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001632:	4293      	cmp	r3, r2
 8001634:	d223      	bcs.n	800167e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6a1b      	ldr	r3, [r3, #32]
 800163a:	4618      	mov	r0, r3
 800163c:	f000 fd92 	bl	8002164 <RCC_SetFlashLatencyFromMSIRange>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	e3c0      	b.n	8001dcc <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800164a:	4b73      	ldr	r3, [pc, #460]	; (8001818 <HAL_RCC_OscConfig+0x270>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a72      	ldr	r2, [pc, #456]	; (8001818 <HAL_RCC_OscConfig+0x270>)
 8001650:	f043 0308 	orr.w	r3, r3, #8
 8001654:	6013      	str	r3, [r2, #0]
 8001656:	4b70      	ldr	r3, [pc, #448]	; (8001818 <HAL_RCC_OscConfig+0x270>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6a1b      	ldr	r3, [r3, #32]
 8001662:	496d      	ldr	r1, [pc, #436]	; (8001818 <HAL_RCC_OscConfig+0x270>)
 8001664:	4313      	orrs	r3, r2
 8001666:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001668:	4b6b      	ldr	r3, [pc, #428]	; (8001818 <HAL_RCC_OscConfig+0x270>)
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	69db      	ldr	r3, [r3, #28]
 8001674:	021b      	lsls	r3, r3, #8
 8001676:	4968      	ldr	r1, [pc, #416]	; (8001818 <HAL_RCC_OscConfig+0x270>)
 8001678:	4313      	orrs	r3, r2
 800167a:	604b      	str	r3, [r1, #4]
 800167c:	e025      	b.n	80016ca <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800167e:	4b66      	ldr	r3, [pc, #408]	; (8001818 <HAL_RCC_OscConfig+0x270>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a65      	ldr	r2, [pc, #404]	; (8001818 <HAL_RCC_OscConfig+0x270>)
 8001684:	f043 0308 	orr.w	r3, r3, #8
 8001688:	6013      	str	r3, [r2, #0]
 800168a:	4b63      	ldr	r3, [pc, #396]	; (8001818 <HAL_RCC_OscConfig+0x270>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6a1b      	ldr	r3, [r3, #32]
 8001696:	4960      	ldr	r1, [pc, #384]	; (8001818 <HAL_RCC_OscConfig+0x270>)
 8001698:	4313      	orrs	r3, r2
 800169a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800169c:	4b5e      	ldr	r3, [pc, #376]	; (8001818 <HAL_RCC_OscConfig+0x270>)
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	69db      	ldr	r3, [r3, #28]
 80016a8:	021b      	lsls	r3, r3, #8
 80016aa:	495b      	ldr	r1, [pc, #364]	; (8001818 <HAL_RCC_OscConfig+0x270>)
 80016ac:	4313      	orrs	r3, r2
 80016ae:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80016b0:	69bb      	ldr	r3, [r7, #24]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d109      	bne.n	80016ca <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6a1b      	ldr	r3, [r3, #32]
 80016ba:	4618      	mov	r0, r3
 80016bc:	f000 fd52 	bl	8002164 <RCC_SetFlashLatencyFromMSIRange>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e380      	b.n	8001dcc <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80016ca:	f000 fc87 	bl	8001fdc <HAL_RCC_GetSysClockFreq>
 80016ce:	4602      	mov	r2, r0
 80016d0:	4b51      	ldr	r3, [pc, #324]	; (8001818 <HAL_RCC_OscConfig+0x270>)
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	091b      	lsrs	r3, r3, #4
 80016d6:	f003 030f 	and.w	r3, r3, #15
 80016da:	4950      	ldr	r1, [pc, #320]	; (800181c <HAL_RCC_OscConfig+0x274>)
 80016dc:	5ccb      	ldrb	r3, [r1, r3]
 80016de:	f003 031f 	and.w	r3, r3, #31
 80016e2:	fa22 f303 	lsr.w	r3, r2, r3
 80016e6:	4a4e      	ldr	r2, [pc, #312]	; (8001820 <HAL_RCC_OscConfig+0x278>)
 80016e8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80016ea:	4b4e      	ldr	r3, [pc, #312]	; (8001824 <HAL_RCC_OscConfig+0x27c>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4618      	mov	r0, r3
 80016f0:	f7ff f998 	bl	8000a24 <HAL_InitTick>
 80016f4:	4603      	mov	r3, r0
 80016f6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80016f8:	7bfb      	ldrb	r3, [r7, #15]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d052      	beq.n	80017a4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80016fe:	7bfb      	ldrb	r3, [r7, #15]
 8001700:	e364      	b.n	8001dcc <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	699b      	ldr	r3, [r3, #24]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d032      	beq.n	8001770 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800170a:	4b43      	ldr	r3, [pc, #268]	; (8001818 <HAL_RCC_OscConfig+0x270>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a42      	ldr	r2, [pc, #264]	; (8001818 <HAL_RCC_OscConfig+0x270>)
 8001710:	f043 0301 	orr.w	r3, r3, #1
 8001714:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001716:	f7ff f9d5 	bl	8000ac4 <HAL_GetTick>
 800171a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800171c:	e008      	b.n	8001730 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800171e:	f7ff f9d1 	bl	8000ac4 <HAL_GetTick>
 8001722:	4602      	mov	r2, r0
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	2b02      	cmp	r3, #2
 800172a:	d901      	bls.n	8001730 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800172c:	2303      	movs	r3, #3
 800172e:	e34d      	b.n	8001dcc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001730:	4b39      	ldr	r3, [pc, #228]	; (8001818 <HAL_RCC_OscConfig+0x270>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f003 0302 	and.w	r3, r3, #2
 8001738:	2b00      	cmp	r3, #0
 800173a:	d0f0      	beq.n	800171e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800173c:	4b36      	ldr	r3, [pc, #216]	; (8001818 <HAL_RCC_OscConfig+0x270>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a35      	ldr	r2, [pc, #212]	; (8001818 <HAL_RCC_OscConfig+0x270>)
 8001742:	f043 0308 	orr.w	r3, r3, #8
 8001746:	6013      	str	r3, [r2, #0]
 8001748:	4b33      	ldr	r3, [pc, #204]	; (8001818 <HAL_RCC_OscConfig+0x270>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6a1b      	ldr	r3, [r3, #32]
 8001754:	4930      	ldr	r1, [pc, #192]	; (8001818 <HAL_RCC_OscConfig+0x270>)
 8001756:	4313      	orrs	r3, r2
 8001758:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800175a:	4b2f      	ldr	r3, [pc, #188]	; (8001818 <HAL_RCC_OscConfig+0x270>)
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	69db      	ldr	r3, [r3, #28]
 8001766:	021b      	lsls	r3, r3, #8
 8001768:	492b      	ldr	r1, [pc, #172]	; (8001818 <HAL_RCC_OscConfig+0x270>)
 800176a:	4313      	orrs	r3, r2
 800176c:	604b      	str	r3, [r1, #4]
 800176e:	e01a      	b.n	80017a6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001770:	4b29      	ldr	r3, [pc, #164]	; (8001818 <HAL_RCC_OscConfig+0x270>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a28      	ldr	r2, [pc, #160]	; (8001818 <HAL_RCC_OscConfig+0x270>)
 8001776:	f023 0301 	bic.w	r3, r3, #1
 800177a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800177c:	f7ff f9a2 	bl	8000ac4 <HAL_GetTick>
 8001780:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001782:	e008      	b.n	8001796 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001784:	f7ff f99e 	bl	8000ac4 <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	2b02      	cmp	r3, #2
 8001790:	d901      	bls.n	8001796 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001792:	2303      	movs	r3, #3
 8001794:	e31a      	b.n	8001dcc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001796:	4b20      	ldr	r3, [pc, #128]	; (8001818 <HAL_RCC_OscConfig+0x270>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 0302 	and.w	r3, r3, #2
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d1f0      	bne.n	8001784 <HAL_RCC_OscConfig+0x1dc>
 80017a2:	e000      	b.n	80017a6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80017a4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 0301 	and.w	r3, r3, #1
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d073      	beq.n	800189a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80017b2:	69bb      	ldr	r3, [r7, #24]
 80017b4:	2b08      	cmp	r3, #8
 80017b6:	d005      	beq.n	80017c4 <HAL_RCC_OscConfig+0x21c>
 80017b8:	69bb      	ldr	r3, [r7, #24]
 80017ba:	2b0c      	cmp	r3, #12
 80017bc:	d10e      	bne.n	80017dc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	2b03      	cmp	r3, #3
 80017c2:	d10b      	bne.n	80017dc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017c4:	4b14      	ldr	r3, [pc, #80]	; (8001818 <HAL_RCC_OscConfig+0x270>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d063      	beq.n	8001898 <HAL_RCC_OscConfig+0x2f0>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d15f      	bne.n	8001898 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80017d8:	2301      	movs	r3, #1
 80017da:	e2f7      	b.n	8001dcc <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017e4:	d106      	bne.n	80017f4 <HAL_RCC_OscConfig+0x24c>
 80017e6:	4b0c      	ldr	r3, [pc, #48]	; (8001818 <HAL_RCC_OscConfig+0x270>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a0b      	ldr	r2, [pc, #44]	; (8001818 <HAL_RCC_OscConfig+0x270>)
 80017ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017f0:	6013      	str	r3, [r2, #0]
 80017f2:	e025      	b.n	8001840 <HAL_RCC_OscConfig+0x298>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017fc:	d114      	bne.n	8001828 <HAL_RCC_OscConfig+0x280>
 80017fe:	4b06      	ldr	r3, [pc, #24]	; (8001818 <HAL_RCC_OscConfig+0x270>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a05      	ldr	r2, [pc, #20]	; (8001818 <HAL_RCC_OscConfig+0x270>)
 8001804:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001808:	6013      	str	r3, [r2, #0]
 800180a:	4b03      	ldr	r3, [pc, #12]	; (8001818 <HAL_RCC_OscConfig+0x270>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a02      	ldr	r2, [pc, #8]	; (8001818 <HAL_RCC_OscConfig+0x270>)
 8001810:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001814:	6013      	str	r3, [r2, #0]
 8001816:	e013      	b.n	8001840 <HAL_RCC_OscConfig+0x298>
 8001818:	40021000 	.word	0x40021000
 800181c:	0800390c 	.word	0x0800390c
 8001820:	20000000 	.word	0x20000000
 8001824:	20000004 	.word	0x20000004
 8001828:	4ba0      	ldr	r3, [pc, #640]	; (8001aac <HAL_RCC_OscConfig+0x504>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a9f      	ldr	r2, [pc, #636]	; (8001aac <HAL_RCC_OscConfig+0x504>)
 800182e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001832:	6013      	str	r3, [r2, #0]
 8001834:	4b9d      	ldr	r3, [pc, #628]	; (8001aac <HAL_RCC_OscConfig+0x504>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a9c      	ldr	r2, [pc, #624]	; (8001aac <HAL_RCC_OscConfig+0x504>)
 800183a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800183e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d013      	beq.n	8001870 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001848:	f7ff f93c 	bl	8000ac4 <HAL_GetTick>
 800184c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800184e:	e008      	b.n	8001862 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001850:	f7ff f938 	bl	8000ac4 <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	2b64      	cmp	r3, #100	; 0x64
 800185c:	d901      	bls.n	8001862 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e2b4      	b.n	8001dcc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001862:	4b92      	ldr	r3, [pc, #584]	; (8001aac <HAL_RCC_OscConfig+0x504>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d0f0      	beq.n	8001850 <HAL_RCC_OscConfig+0x2a8>
 800186e:	e014      	b.n	800189a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001870:	f7ff f928 	bl	8000ac4 <HAL_GetTick>
 8001874:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001876:	e008      	b.n	800188a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001878:	f7ff f924 	bl	8000ac4 <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	2b64      	cmp	r3, #100	; 0x64
 8001884:	d901      	bls.n	800188a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	e2a0      	b.n	8001dcc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800188a:	4b88      	ldr	r3, [pc, #544]	; (8001aac <HAL_RCC_OscConfig+0x504>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d1f0      	bne.n	8001878 <HAL_RCC_OscConfig+0x2d0>
 8001896:	e000      	b.n	800189a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001898:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 0302 	and.w	r3, r3, #2
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d060      	beq.n	8001968 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80018a6:	69bb      	ldr	r3, [r7, #24]
 80018a8:	2b04      	cmp	r3, #4
 80018aa:	d005      	beq.n	80018b8 <HAL_RCC_OscConfig+0x310>
 80018ac:	69bb      	ldr	r3, [r7, #24]
 80018ae:	2b0c      	cmp	r3, #12
 80018b0:	d119      	bne.n	80018e6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	2b02      	cmp	r3, #2
 80018b6:	d116      	bne.n	80018e6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018b8:	4b7c      	ldr	r3, [pc, #496]	; (8001aac <HAL_RCC_OscConfig+0x504>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d005      	beq.n	80018d0 <HAL_RCC_OscConfig+0x328>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d101      	bne.n	80018d0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	e27d      	b.n	8001dcc <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018d0:	4b76      	ldr	r3, [pc, #472]	; (8001aac <HAL_RCC_OscConfig+0x504>)
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	691b      	ldr	r3, [r3, #16]
 80018dc:	061b      	lsls	r3, r3, #24
 80018de:	4973      	ldr	r1, [pc, #460]	; (8001aac <HAL_RCC_OscConfig+0x504>)
 80018e0:	4313      	orrs	r3, r2
 80018e2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018e4:	e040      	b.n	8001968 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	68db      	ldr	r3, [r3, #12]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d023      	beq.n	8001936 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018ee:	4b6f      	ldr	r3, [pc, #444]	; (8001aac <HAL_RCC_OscConfig+0x504>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a6e      	ldr	r2, [pc, #440]	; (8001aac <HAL_RCC_OscConfig+0x504>)
 80018f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018fa:	f7ff f8e3 	bl	8000ac4 <HAL_GetTick>
 80018fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001900:	e008      	b.n	8001914 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001902:	f7ff f8df 	bl	8000ac4 <HAL_GetTick>
 8001906:	4602      	mov	r2, r0
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	1ad3      	subs	r3, r2, r3
 800190c:	2b02      	cmp	r3, #2
 800190e:	d901      	bls.n	8001914 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001910:	2303      	movs	r3, #3
 8001912:	e25b      	b.n	8001dcc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001914:	4b65      	ldr	r3, [pc, #404]	; (8001aac <HAL_RCC_OscConfig+0x504>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800191c:	2b00      	cmp	r3, #0
 800191e:	d0f0      	beq.n	8001902 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001920:	4b62      	ldr	r3, [pc, #392]	; (8001aac <HAL_RCC_OscConfig+0x504>)
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	691b      	ldr	r3, [r3, #16]
 800192c:	061b      	lsls	r3, r3, #24
 800192e:	495f      	ldr	r1, [pc, #380]	; (8001aac <HAL_RCC_OscConfig+0x504>)
 8001930:	4313      	orrs	r3, r2
 8001932:	604b      	str	r3, [r1, #4]
 8001934:	e018      	b.n	8001968 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001936:	4b5d      	ldr	r3, [pc, #372]	; (8001aac <HAL_RCC_OscConfig+0x504>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a5c      	ldr	r2, [pc, #368]	; (8001aac <HAL_RCC_OscConfig+0x504>)
 800193c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001940:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001942:	f7ff f8bf 	bl	8000ac4 <HAL_GetTick>
 8001946:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001948:	e008      	b.n	800195c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800194a:	f7ff f8bb 	bl	8000ac4 <HAL_GetTick>
 800194e:	4602      	mov	r2, r0
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	2b02      	cmp	r3, #2
 8001956:	d901      	bls.n	800195c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001958:	2303      	movs	r3, #3
 800195a:	e237      	b.n	8001dcc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800195c:	4b53      	ldr	r3, [pc, #332]	; (8001aac <HAL_RCC_OscConfig+0x504>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001964:	2b00      	cmp	r3, #0
 8001966:	d1f0      	bne.n	800194a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 0308 	and.w	r3, r3, #8
 8001970:	2b00      	cmp	r3, #0
 8001972:	d03c      	beq.n	80019ee <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	695b      	ldr	r3, [r3, #20]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d01c      	beq.n	80019b6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800197c:	4b4b      	ldr	r3, [pc, #300]	; (8001aac <HAL_RCC_OscConfig+0x504>)
 800197e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001982:	4a4a      	ldr	r2, [pc, #296]	; (8001aac <HAL_RCC_OscConfig+0x504>)
 8001984:	f043 0301 	orr.w	r3, r3, #1
 8001988:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800198c:	f7ff f89a 	bl	8000ac4 <HAL_GetTick>
 8001990:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001992:	e008      	b.n	80019a6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001994:	f7ff f896 	bl	8000ac4 <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d901      	bls.n	80019a6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	e212      	b.n	8001dcc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019a6:	4b41      	ldr	r3, [pc, #260]	; (8001aac <HAL_RCC_OscConfig+0x504>)
 80019a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019ac:	f003 0302 	and.w	r3, r3, #2
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d0ef      	beq.n	8001994 <HAL_RCC_OscConfig+0x3ec>
 80019b4:	e01b      	b.n	80019ee <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019b6:	4b3d      	ldr	r3, [pc, #244]	; (8001aac <HAL_RCC_OscConfig+0x504>)
 80019b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019bc:	4a3b      	ldr	r2, [pc, #236]	; (8001aac <HAL_RCC_OscConfig+0x504>)
 80019be:	f023 0301 	bic.w	r3, r3, #1
 80019c2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019c6:	f7ff f87d 	bl	8000ac4 <HAL_GetTick>
 80019ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019cc:	e008      	b.n	80019e0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019ce:	f7ff f879 	bl	8000ac4 <HAL_GetTick>
 80019d2:	4602      	mov	r2, r0
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	1ad3      	subs	r3, r2, r3
 80019d8:	2b02      	cmp	r3, #2
 80019da:	d901      	bls.n	80019e0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80019dc:	2303      	movs	r3, #3
 80019de:	e1f5      	b.n	8001dcc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019e0:	4b32      	ldr	r3, [pc, #200]	; (8001aac <HAL_RCC_OscConfig+0x504>)
 80019e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019e6:	f003 0302 	and.w	r3, r3, #2
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d1ef      	bne.n	80019ce <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 0304 	and.w	r3, r3, #4
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	f000 80a6 	beq.w	8001b48 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019fc:	2300      	movs	r3, #0
 80019fe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001a00:	4b2a      	ldr	r3, [pc, #168]	; (8001aac <HAL_RCC_OscConfig+0x504>)
 8001a02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d10d      	bne.n	8001a28 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a0c:	4b27      	ldr	r3, [pc, #156]	; (8001aac <HAL_RCC_OscConfig+0x504>)
 8001a0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a10:	4a26      	ldr	r2, [pc, #152]	; (8001aac <HAL_RCC_OscConfig+0x504>)
 8001a12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a16:	6593      	str	r3, [r2, #88]	; 0x58
 8001a18:	4b24      	ldr	r3, [pc, #144]	; (8001aac <HAL_RCC_OscConfig+0x504>)
 8001a1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a20:	60bb      	str	r3, [r7, #8]
 8001a22:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a24:	2301      	movs	r3, #1
 8001a26:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a28:	4b21      	ldr	r3, [pc, #132]	; (8001ab0 <HAL_RCC_OscConfig+0x508>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d118      	bne.n	8001a66 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a34:	4b1e      	ldr	r3, [pc, #120]	; (8001ab0 <HAL_RCC_OscConfig+0x508>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a1d      	ldr	r2, [pc, #116]	; (8001ab0 <HAL_RCC_OscConfig+0x508>)
 8001a3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a3e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a40:	f7ff f840 	bl	8000ac4 <HAL_GetTick>
 8001a44:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a46:	e008      	b.n	8001a5a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a48:	f7ff f83c 	bl	8000ac4 <HAL_GetTick>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	2b02      	cmp	r3, #2
 8001a54:	d901      	bls.n	8001a5a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001a56:	2303      	movs	r3, #3
 8001a58:	e1b8      	b.n	8001dcc <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a5a:	4b15      	ldr	r3, [pc, #84]	; (8001ab0 <HAL_RCC_OscConfig+0x508>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d0f0      	beq.n	8001a48 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d108      	bne.n	8001a80 <HAL_RCC_OscConfig+0x4d8>
 8001a6e:	4b0f      	ldr	r3, [pc, #60]	; (8001aac <HAL_RCC_OscConfig+0x504>)
 8001a70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a74:	4a0d      	ldr	r2, [pc, #52]	; (8001aac <HAL_RCC_OscConfig+0x504>)
 8001a76:	f043 0301 	orr.w	r3, r3, #1
 8001a7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a7e:	e029      	b.n	8001ad4 <HAL_RCC_OscConfig+0x52c>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	2b05      	cmp	r3, #5
 8001a86:	d115      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x50c>
 8001a88:	4b08      	ldr	r3, [pc, #32]	; (8001aac <HAL_RCC_OscConfig+0x504>)
 8001a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a8e:	4a07      	ldr	r2, [pc, #28]	; (8001aac <HAL_RCC_OscConfig+0x504>)
 8001a90:	f043 0304 	orr.w	r3, r3, #4
 8001a94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a98:	4b04      	ldr	r3, [pc, #16]	; (8001aac <HAL_RCC_OscConfig+0x504>)
 8001a9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a9e:	4a03      	ldr	r2, [pc, #12]	; (8001aac <HAL_RCC_OscConfig+0x504>)
 8001aa0:	f043 0301 	orr.w	r3, r3, #1
 8001aa4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001aa8:	e014      	b.n	8001ad4 <HAL_RCC_OscConfig+0x52c>
 8001aaa:	bf00      	nop
 8001aac:	40021000 	.word	0x40021000
 8001ab0:	40007000 	.word	0x40007000
 8001ab4:	4b9d      	ldr	r3, [pc, #628]	; (8001d2c <HAL_RCC_OscConfig+0x784>)
 8001ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aba:	4a9c      	ldr	r2, [pc, #624]	; (8001d2c <HAL_RCC_OscConfig+0x784>)
 8001abc:	f023 0301 	bic.w	r3, r3, #1
 8001ac0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ac4:	4b99      	ldr	r3, [pc, #612]	; (8001d2c <HAL_RCC_OscConfig+0x784>)
 8001ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aca:	4a98      	ldr	r2, [pc, #608]	; (8001d2c <HAL_RCC_OscConfig+0x784>)
 8001acc:	f023 0304 	bic.w	r3, r3, #4
 8001ad0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d016      	beq.n	8001b0a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001adc:	f7fe fff2 	bl	8000ac4 <HAL_GetTick>
 8001ae0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ae2:	e00a      	b.n	8001afa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ae4:	f7fe ffee 	bl	8000ac4 <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	f241 3288 	movw	r2, #5000	; 0x1388
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d901      	bls.n	8001afa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e168      	b.n	8001dcc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001afa:	4b8c      	ldr	r3, [pc, #560]	; (8001d2c <HAL_RCC_OscConfig+0x784>)
 8001afc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b00:	f003 0302 	and.w	r3, r3, #2
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d0ed      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x53c>
 8001b08:	e015      	b.n	8001b36 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b0a:	f7fe ffdb 	bl	8000ac4 <HAL_GetTick>
 8001b0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b10:	e00a      	b.n	8001b28 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b12:	f7fe ffd7 	bl	8000ac4 <HAL_GetTick>
 8001b16:	4602      	mov	r2, r0
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d901      	bls.n	8001b28 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001b24:	2303      	movs	r3, #3
 8001b26:	e151      	b.n	8001dcc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b28:	4b80      	ldr	r3, [pc, #512]	; (8001d2c <HAL_RCC_OscConfig+0x784>)
 8001b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b2e:	f003 0302 	and.w	r3, r3, #2
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d1ed      	bne.n	8001b12 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b36:	7ffb      	ldrb	r3, [r7, #31]
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d105      	bne.n	8001b48 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b3c:	4b7b      	ldr	r3, [pc, #492]	; (8001d2c <HAL_RCC_OscConfig+0x784>)
 8001b3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b40:	4a7a      	ldr	r2, [pc, #488]	; (8001d2c <HAL_RCC_OscConfig+0x784>)
 8001b42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b46:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 0320 	and.w	r3, r3, #32
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d03c      	beq.n	8001bce <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d01c      	beq.n	8001b96 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001b5c:	4b73      	ldr	r3, [pc, #460]	; (8001d2c <HAL_RCC_OscConfig+0x784>)
 8001b5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b62:	4a72      	ldr	r2, [pc, #456]	; (8001d2c <HAL_RCC_OscConfig+0x784>)
 8001b64:	f043 0301 	orr.w	r3, r3, #1
 8001b68:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b6c:	f7fe ffaa 	bl	8000ac4 <HAL_GetTick>
 8001b70:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001b72:	e008      	b.n	8001b86 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b74:	f7fe ffa6 	bl	8000ac4 <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	2b02      	cmp	r3, #2
 8001b80:	d901      	bls.n	8001b86 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e122      	b.n	8001dcc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001b86:	4b69      	ldr	r3, [pc, #420]	; (8001d2c <HAL_RCC_OscConfig+0x784>)
 8001b88:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b8c:	f003 0302 	and.w	r3, r3, #2
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d0ef      	beq.n	8001b74 <HAL_RCC_OscConfig+0x5cc>
 8001b94:	e01b      	b.n	8001bce <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001b96:	4b65      	ldr	r3, [pc, #404]	; (8001d2c <HAL_RCC_OscConfig+0x784>)
 8001b98:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b9c:	4a63      	ldr	r2, [pc, #396]	; (8001d2c <HAL_RCC_OscConfig+0x784>)
 8001b9e:	f023 0301 	bic.w	r3, r3, #1
 8001ba2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ba6:	f7fe ff8d 	bl	8000ac4 <HAL_GetTick>
 8001baa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001bac:	e008      	b.n	8001bc0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001bae:	f7fe ff89 	bl	8000ac4 <HAL_GetTick>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d901      	bls.n	8001bc0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	e105      	b.n	8001dcc <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001bc0:	4b5a      	ldr	r3, [pc, #360]	; (8001d2c <HAL_RCC_OscConfig+0x784>)
 8001bc2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001bc6:	f003 0302 	and.w	r3, r3, #2
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d1ef      	bne.n	8001bae <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	f000 80f9 	beq.w	8001dca <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	f040 80cf 	bne.w	8001d80 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001be2:	4b52      	ldr	r3, [pc, #328]	; (8001d2c <HAL_RCC_OscConfig+0x784>)
 8001be4:	68db      	ldr	r3, [r3, #12]
 8001be6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	f003 0203 	and.w	r2, r3, #3
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d12c      	bne.n	8001c50 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c00:	3b01      	subs	r3, #1
 8001c02:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d123      	bne.n	8001c50 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c12:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d11b      	bne.n	8001c50 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c22:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d113      	bne.n	8001c50 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c32:	085b      	lsrs	r3, r3, #1
 8001c34:	3b01      	subs	r3, #1
 8001c36:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d109      	bne.n	8001c50 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c46:	085b      	lsrs	r3, r3, #1
 8001c48:	3b01      	subs	r3, #1
 8001c4a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d071      	beq.n	8001d34 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c50:	69bb      	ldr	r3, [r7, #24]
 8001c52:	2b0c      	cmp	r3, #12
 8001c54:	d068      	beq.n	8001d28 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001c56:	4b35      	ldr	r3, [pc, #212]	; (8001d2c <HAL_RCC_OscConfig+0x784>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d105      	bne.n	8001c6e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001c62:	4b32      	ldr	r3, [pc, #200]	; (8001d2c <HAL_RCC_OscConfig+0x784>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e0ac      	b.n	8001dcc <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001c72:	4b2e      	ldr	r3, [pc, #184]	; (8001d2c <HAL_RCC_OscConfig+0x784>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a2d      	ldr	r2, [pc, #180]	; (8001d2c <HAL_RCC_OscConfig+0x784>)
 8001c78:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c7c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c7e:	f7fe ff21 	bl	8000ac4 <HAL_GetTick>
 8001c82:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c84:	e008      	b.n	8001c98 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c86:	f7fe ff1d 	bl	8000ac4 <HAL_GetTick>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d901      	bls.n	8001c98 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001c94:	2303      	movs	r3, #3
 8001c96:	e099      	b.n	8001dcc <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c98:	4b24      	ldr	r3, [pc, #144]	; (8001d2c <HAL_RCC_OscConfig+0x784>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d1f0      	bne.n	8001c86 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ca4:	4b21      	ldr	r3, [pc, #132]	; (8001d2c <HAL_RCC_OscConfig+0x784>)
 8001ca6:	68da      	ldr	r2, [r3, #12]
 8001ca8:	4b21      	ldr	r3, [pc, #132]	; (8001d30 <HAL_RCC_OscConfig+0x788>)
 8001caa:	4013      	ands	r3, r2
 8001cac:	687a      	ldr	r2, [r7, #4]
 8001cae:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001cb4:	3a01      	subs	r2, #1
 8001cb6:	0112      	lsls	r2, r2, #4
 8001cb8:	4311      	orrs	r1, r2
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001cbe:	0212      	lsls	r2, r2, #8
 8001cc0:	4311      	orrs	r1, r2
 8001cc2:	687a      	ldr	r2, [r7, #4]
 8001cc4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001cc6:	0852      	lsrs	r2, r2, #1
 8001cc8:	3a01      	subs	r2, #1
 8001cca:	0552      	lsls	r2, r2, #21
 8001ccc:	4311      	orrs	r1, r2
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001cd2:	0852      	lsrs	r2, r2, #1
 8001cd4:	3a01      	subs	r2, #1
 8001cd6:	0652      	lsls	r2, r2, #25
 8001cd8:	4311      	orrs	r1, r2
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001cde:	06d2      	lsls	r2, r2, #27
 8001ce0:	430a      	orrs	r2, r1
 8001ce2:	4912      	ldr	r1, [pc, #72]	; (8001d2c <HAL_RCC_OscConfig+0x784>)
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001ce8:	4b10      	ldr	r3, [pc, #64]	; (8001d2c <HAL_RCC_OscConfig+0x784>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a0f      	ldr	r2, [pc, #60]	; (8001d2c <HAL_RCC_OscConfig+0x784>)
 8001cee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cf2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001cf4:	4b0d      	ldr	r3, [pc, #52]	; (8001d2c <HAL_RCC_OscConfig+0x784>)
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	4a0c      	ldr	r2, [pc, #48]	; (8001d2c <HAL_RCC_OscConfig+0x784>)
 8001cfa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cfe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d00:	f7fe fee0 	bl	8000ac4 <HAL_GetTick>
 8001d04:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d06:	e008      	b.n	8001d1a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d08:	f7fe fedc 	bl	8000ac4 <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d901      	bls.n	8001d1a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001d16:	2303      	movs	r3, #3
 8001d18:	e058      	b.n	8001dcc <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d1a:	4b04      	ldr	r3, [pc, #16]	; (8001d2c <HAL_RCC_OscConfig+0x784>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d0f0      	beq.n	8001d08 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d26:	e050      	b.n	8001dca <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e04f      	b.n	8001dcc <HAL_RCC_OscConfig+0x824>
 8001d2c:	40021000 	.word	0x40021000
 8001d30:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d34:	4b27      	ldr	r3, [pc, #156]	; (8001dd4 <HAL_RCC_OscConfig+0x82c>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d144      	bne.n	8001dca <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001d40:	4b24      	ldr	r3, [pc, #144]	; (8001dd4 <HAL_RCC_OscConfig+0x82c>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a23      	ldr	r2, [pc, #140]	; (8001dd4 <HAL_RCC_OscConfig+0x82c>)
 8001d46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d4a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d4c:	4b21      	ldr	r3, [pc, #132]	; (8001dd4 <HAL_RCC_OscConfig+0x82c>)
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	4a20      	ldr	r2, [pc, #128]	; (8001dd4 <HAL_RCC_OscConfig+0x82c>)
 8001d52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d56:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001d58:	f7fe feb4 	bl	8000ac4 <HAL_GetTick>
 8001d5c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d5e:	e008      	b.n	8001d72 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d60:	f7fe feb0 	bl	8000ac4 <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d901      	bls.n	8001d72 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e02c      	b.n	8001dcc <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d72:	4b18      	ldr	r3, [pc, #96]	; (8001dd4 <HAL_RCC_OscConfig+0x82c>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d0f0      	beq.n	8001d60 <HAL_RCC_OscConfig+0x7b8>
 8001d7e:	e024      	b.n	8001dca <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d80:	69bb      	ldr	r3, [r7, #24]
 8001d82:	2b0c      	cmp	r3, #12
 8001d84:	d01f      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d86:	4b13      	ldr	r3, [pc, #76]	; (8001dd4 <HAL_RCC_OscConfig+0x82c>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a12      	ldr	r2, [pc, #72]	; (8001dd4 <HAL_RCC_OscConfig+0x82c>)
 8001d8c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d92:	f7fe fe97 	bl	8000ac4 <HAL_GetTick>
 8001d96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d98:	e008      	b.n	8001dac <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d9a:	f7fe fe93 	bl	8000ac4 <HAL_GetTick>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	d901      	bls.n	8001dac <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001da8:	2303      	movs	r3, #3
 8001daa:	e00f      	b.n	8001dcc <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dac:	4b09      	ldr	r3, [pc, #36]	; (8001dd4 <HAL_RCC_OscConfig+0x82c>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d1f0      	bne.n	8001d9a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001db8:	4b06      	ldr	r3, [pc, #24]	; (8001dd4 <HAL_RCC_OscConfig+0x82c>)
 8001dba:	68da      	ldr	r2, [r3, #12]
 8001dbc:	4905      	ldr	r1, [pc, #20]	; (8001dd4 <HAL_RCC_OscConfig+0x82c>)
 8001dbe:	4b06      	ldr	r3, [pc, #24]	; (8001dd8 <HAL_RCC_OscConfig+0x830>)
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	60cb      	str	r3, [r1, #12]
 8001dc4:	e001      	b.n	8001dca <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e000      	b.n	8001dcc <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8001dca:	2300      	movs	r3, #0
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3720      	adds	r7, #32
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	40021000 	.word	0x40021000
 8001dd8:	feeefffc 	.word	0xfeeefffc

08001ddc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b084      	sub	sp, #16
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d101      	bne.n	8001df0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	e0e7      	b.n	8001fc0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001df0:	4b75      	ldr	r3, [pc, #468]	; (8001fc8 <HAL_RCC_ClockConfig+0x1ec>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0307 	and.w	r3, r3, #7
 8001df8:	683a      	ldr	r2, [r7, #0]
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d910      	bls.n	8001e20 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dfe:	4b72      	ldr	r3, [pc, #456]	; (8001fc8 <HAL_RCC_ClockConfig+0x1ec>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f023 0207 	bic.w	r2, r3, #7
 8001e06:	4970      	ldr	r1, [pc, #448]	; (8001fc8 <HAL_RCC_ClockConfig+0x1ec>)
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e0e:	4b6e      	ldr	r3, [pc, #440]	; (8001fc8 <HAL_RCC_ClockConfig+0x1ec>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0307 	and.w	r3, r3, #7
 8001e16:	683a      	ldr	r2, [r7, #0]
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d001      	beq.n	8001e20 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e0cf      	b.n	8001fc0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0302 	and.w	r3, r3, #2
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d010      	beq.n	8001e4e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	689a      	ldr	r2, [r3, #8]
 8001e30:	4b66      	ldr	r3, [pc, #408]	; (8001fcc <HAL_RCC_ClockConfig+0x1f0>)
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d908      	bls.n	8001e4e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e3c:	4b63      	ldr	r3, [pc, #396]	; (8001fcc <HAL_RCC_ClockConfig+0x1f0>)
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	4960      	ldr	r1, [pc, #384]	; (8001fcc <HAL_RCC_ClockConfig+0x1f0>)
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 0301 	and.w	r3, r3, #1
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d04c      	beq.n	8001ef4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	2b03      	cmp	r3, #3
 8001e60:	d107      	bne.n	8001e72 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e62:	4b5a      	ldr	r3, [pc, #360]	; (8001fcc <HAL_RCC_ClockConfig+0x1f0>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d121      	bne.n	8001eb2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e0a6      	b.n	8001fc0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d107      	bne.n	8001e8a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e7a:	4b54      	ldr	r3, [pc, #336]	; (8001fcc <HAL_RCC_ClockConfig+0x1f0>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d115      	bne.n	8001eb2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e09a      	b.n	8001fc0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d107      	bne.n	8001ea2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e92:	4b4e      	ldr	r3, [pc, #312]	; (8001fcc <HAL_RCC_ClockConfig+0x1f0>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 0302 	and.w	r3, r3, #2
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d109      	bne.n	8001eb2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e08e      	b.n	8001fc0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ea2:	4b4a      	ldr	r3, [pc, #296]	; (8001fcc <HAL_RCC_ClockConfig+0x1f0>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d101      	bne.n	8001eb2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e086      	b.n	8001fc0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001eb2:	4b46      	ldr	r3, [pc, #280]	; (8001fcc <HAL_RCC_ClockConfig+0x1f0>)
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	f023 0203 	bic.w	r2, r3, #3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	4943      	ldr	r1, [pc, #268]	; (8001fcc <HAL_RCC_ClockConfig+0x1f0>)
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ec4:	f7fe fdfe 	bl	8000ac4 <HAL_GetTick>
 8001ec8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eca:	e00a      	b.n	8001ee2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ecc:	f7fe fdfa 	bl	8000ac4 <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e06e      	b.n	8001fc0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ee2:	4b3a      	ldr	r3, [pc, #232]	; (8001fcc <HAL_RCC_ClockConfig+0x1f0>)
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	f003 020c 	and.w	r2, r3, #12
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d1eb      	bne.n	8001ecc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 0302 	and.w	r3, r3, #2
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d010      	beq.n	8001f22 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	689a      	ldr	r2, [r3, #8]
 8001f04:	4b31      	ldr	r3, [pc, #196]	; (8001fcc <HAL_RCC_ClockConfig+0x1f0>)
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d208      	bcs.n	8001f22 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f10:	4b2e      	ldr	r3, [pc, #184]	; (8001fcc <HAL_RCC_ClockConfig+0x1f0>)
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	492b      	ldr	r1, [pc, #172]	; (8001fcc <HAL_RCC_ClockConfig+0x1f0>)
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f22:	4b29      	ldr	r3, [pc, #164]	; (8001fc8 <HAL_RCC_ClockConfig+0x1ec>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 0307 	and.w	r3, r3, #7
 8001f2a:	683a      	ldr	r2, [r7, #0]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d210      	bcs.n	8001f52 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f30:	4b25      	ldr	r3, [pc, #148]	; (8001fc8 <HAL_RCC_ClockConfig+0x1ec>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f023 0207 	bic.w	r2, r3, #7
 8001f38:	4923      	ldr	r1, [pc, #140]	; (8001fc8 <HAL_RCC_ClockConfig+0x1ec>)
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f40:	4b21      	ldr	r3, [pc, #132]	; (8001fc8 <HAL_RCC_ClockConfig+0x1ec>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0307 	and.w	r3, r3, #7
 8001f48:	683a      	ldr	r2, [r7, #0]
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d001      	beq.n	8001f52 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e036      	b.n	8001fc0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0304 	and.w	r3, r3, #4
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d008      	beq.n	8001f70 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f5e:	4b1b      	ldr	r3, [pc, #108]	; (8001fcc <HAL_RCC_ClockConfig+0x1f0>)
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	68db      	ldr	r3, [r3, #12]
 8001f6a:	4918      	ldr	r1, [pc, #96]	; (8001fcc <HAL_RCC_ClockConfig+0x1f0>)
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 0308 	and.w	r3, r3, #8
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d009      	beq.n	8001f90 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f7c:	4b13      	ldr	r3, [pc, #76]	; (8001fcc <HAL_RCC_ClockConfig+0x1f0>)
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	691b      	ldr	r3, [r3, #16]
 8001f88:	00db      	lsls	r3, r3, #3
 8001f8a:	4910      	ldr	r1, [pc, #64]	; (8001fcc <HAL_RCC_ClockConfig+0x1f0>)
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f90:	f000 f824 	bl	8001fdc <HAL_RCC_GetSysClockFreq>
 8001f94:	4602      	mov	r2, r0
 8001f96:	4b0d      	ldr	r3, [pc, #52]	; (8001fcc <HAL_RCC_ClockConfig+0x1f0>)
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	091b      	lsrs	r3, r3, #4
 8001f9c:	f003 030f 	and.w	r3, r3, #15
 8001fa0:	490b      	ldr	r1, [pc, #44]	; (8001fd0 <HAL_RCC_ClockConfig+0x1f4>)
 8001fa2:	5ccb      	ldrb	r3, [r1, r3]
 8001fa4:	f003 031f 	and.w	r3, r3, #31
 8001fa8:	fa22 f303 	lsr.w	r3, r2, r3
 8001fac:	4a09      	ldr	r2, [pc, #36]	; (8001fd4 <HAL_RCC_ClockConfig+0x1f8>)
 8001fae:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001fb0:	4b09      	ldr	r3, [pc, #36]	; (8001fd8 <HAL_RCC_ClockConfig+0x1fc>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7fe fd35 	bl	8000a24 <HAL_InitTick>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	72fb      	strb	r3, [r7, #11]

  return status;
 8001fbe:	7afb      	ldrb	r3, [r7, #11]
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3710      	adds	r7, #16
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	40022000 	.word	0x40022000
 8001fcc:	40021000 	.word	0x40021000
 8001fd0:	0800390c 	.word	0x0800390c
 8001fd4:	20000000 	.word	0x20000000
 8001fd8:	20000004 	.word	0x20000004

08001fdc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b089      	sub	sp, #36	; 0x24
 8001fe0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	61fb      	str	r3, [r7, #28]
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fea:	4b3e      	ldr	r3, [pc, #248]	; (80020e4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	f003 030c 	and.w	r3, r3, #12
 8001ff2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ff4:	4b3b      	ldr	r3, [pc, #236]	; (80020e4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	f003 0303 	and.w	r3, r3, #3
 8001ffc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d005      	beq.n	8002010 <HAL_RCC_GetSysClockFreq+0x34>
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	2b0c      	cmp	r3, #12
 8002008:	d121      	bne.n	800204e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	2b01      	cmp	r3, #1
 800200e:	d11e      	bne.n	800204e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002010:	4b34      	ldr	r3, [pc, #208]	; (80020e4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0308 	and.w	r3, r3, #8
 8002018:	2b00      	cmp	r3, #0
 800201a:	d107      	bne.n	800202c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800201c:	4b31      	ldr	r3, [pc, #196]	; (80020e4 <HAL_RCC_GetSysClockFreq+0x108>)
 800201e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002022:	0a1b      	lsrs	r3, r3, #8
 8002024:	f003 030f 	and.w	r3, r3, #15
 8002028:	61fb      	str	r3, [r7, #28]
 800202a:	e005      	b.n	8002038 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800202c:	4b2d      	ldr	r3, [pc, #180]	; (80020e4 <HAL_RCC_GetSysClockFreq+0x108>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	091b      	lsrs	r3, r3, #4
 8002032:	f003 030f 	and.w	r3, r3, #15
 8002036:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002038:	4a2b      	ldr	r2, [pc, #172]	; (80020e8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002040:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d10d      	bne.n	8002064 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800204c:	e00a      	b.n	8002064 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	2b04      	cmp	r3, #4
 8002052:	d102      	bne.n	800205a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002054:	4b25      	ldr	r3, [pc, #148]	; (80020ec <HAL_RCC_GetSysClockFreq+0x110>)
 8002056:	61bb      	str	r3, [r7, #24]
 8002058:	e004      	b.n	8002064 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	2b08      	cmp	r3, #8
 800205e:	d101      	bne.n	8002064 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002060:	4b23      	ldr	r3, [pc, #140]	; (80020f0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002062:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	2b0c      	cmp	r3, #12
 8002068:	d134      	bne.n	80020d4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800206a:	4b1e      	ldr	r3, [pc, #120]	; (80020e4 <HAL_RCC_GetSysClockFreq+0x108>)
 800206c:	68db      	ldr	r3, [r3, #12]
 800206e:	f003 0303 	and.w	r3, r3, #3
 8002072:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	2b02      	cmp	r3, #2
 8002078:	d003      	beq.n	8002082 <HAL_RCC_GetSysClockFreq+0xa6>
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	2b03      	cmp	r3, #3
 800207e:	d003      	beq.n	8002088 <HAL_RCC_GetSysClockFreq+0xac>
 8002080:	e005      	b.n	800208e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002082:	4b1a      	ldr	r3, [pc, #104]	; (80020ec <HAL_RCC_GetSysClockFreq+0x110>)
 8002084:	617b      	str	r3, [r7, #20]
      break;
 8002086:	e005      	b.n	8002094 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002088:	4b19      	ldr	r3, [pc, #100]	; (80020f0 <HAL_RCC_GetSysClockFreq+0x114>)
 800208a:	617b      	str	r3, [r7, #20]
      break;
 800208c:	e002      	b.n	8002094 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	617b      	str	r3, [r7, #20]
      break;
 8002092:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002094:	4b13      	ldr	r3, [pc, #76]	; (80020e4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	091b      	lsrs	r3, r3, #4
 800209a:	f003 0307 	and.w	r3, r3, #7
 800209e:	3301      	adds	r3, #1
 80020a0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80020a2:	4b10      	ldr	r3, [pc, #64]	; (80020e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80020a4:	68db      	ldr	r3, [r3, #12]
 80020a6:	0a1b      	lsrs	r3, r3, #8
 80020a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80020ac:	697a      	ldr	r2, [r7, #20]
 80020ae:	fb03 f202 	mul.w	r2, r3, r2
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80020b8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80020ba:	4b0a      	ldr	r3, [pc, #40]	; (80020e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80020bc:	68db      	ldr	r3, [r3, #12]
 80020be:	0e5b      	lsrs	r3, r3, #25
 80020c0:	f003 0303 	and.w	r3, r3, #3
 80020c4:	3301      	adds	r3, #1
 80020c6:	005b      	lsls	r3, r3, #1
 80020c8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80020ca:	697a      	ldr	r2, [r7, #20]
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80020d2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80020d4:	69bb      	ldr	r3, [r7, #24]
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3724      	adds	r7, #36	; 0x24
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	40021000 	.word	0x40021000
 80020e8:	08003924 	.word	0x08003924
 80020ec:	00f42400 	.word	0x00f42400
 80020f0:	007a1200 	.word	0x007a1200

080020f4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020f8:	4b03      	ldr	r3, [pc, #12]	; (8002108 <HAL_RCC_GetHCLKFreq+0x14>)
 80020fa:	681b      	ldr	r3, [r3, #0]
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	20000000 	.word	0x20000000

0800210c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002110:	f7ff fff0 	bl	80020f4 <HAL_RCC_GetHCLKFreq>
 8002114:	4602      	mov	r2, r0
 8002116:	4b06      	ldr	r3, [pc, #24]	; (8002130 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	0a1b      	lsrs	r3, r3, #8
 800211c:	f003 0307 	and.w	r3, r3, #7
 8002120:	4904      	ldr	r1, [pc, #16]	; (8002134 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002122:	5ccb      	ldrb	r3, [r1, r3]
 8002124:	f003 031f 	and.w	r3, r3, #31
 8002128:	fa22 f303 	lsr.w	r3, r2, r3
}
 800212c:	4618      	mov	r0, r3
 800212e:	bd80      	pop	{r7, pc}
 8002130:	40021000 	.word	0x40021000
 8002134:	0800391c 	.word	0x0800391c

08002138 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800213c:	f7ff ffda 	bl	80020f4 <HAL_RCC_GetHCLKFreq>
 8002140:	4602      	mov	r2, r0
 8002142:	4b06      	ldr	r3, [pc, #24]	; (800215c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	0adb      	lsrs	r3, r3, #11
 8002148:	f003 0307 	and.w	r3, r3, #7
 800214c:	4904      	ldr	r1, [pc, #16]	; (8002160 <HAL_RCC_GetPCLK2Freq+0x28>)
 800214e:	5ccb      	ldrb	r3, [r1, r3]
 8002150:	f003 031f 	and.w	r3, r3, #31
 8002154:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002158:	4618      	mov	r0, r3
 800215a:	bd80      	pop	{r7, pc}
 800215c:	40021000 	.word	0x40021000
 8002160:	0800391c 	.word	0x0800391c

08002164 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b086      	sub	sp, #24
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800216c:	2300      	movs	r3, #0
 800216e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002170:	4b2a      	ldr	r3, [pc, #168]	; (800221c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002174:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002178:	2b00      	cmp	r3, #0
 800217a:	d003      	beq.n	8002184 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800217c:	f7ff f9a0 	bl	80014c0 <HAL_PWREx_GetVoltageRange>
 8002180:	6178      	str	r0, [r7, #20]
 8002182:	e014      	b.n	80021ae <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002184:	4b25      	ldr	r3, [pc, #148]	; (800221c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002186:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002188:	4a24      	ldr	r2, [pc, #144]	; (800221c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800218a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800218e:	6593      	str	r3, [r2, #88]	; 0x58
 8002190:	4b22      	ldr	r3, [pc, #136]	; (800221c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002192:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002194:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002198:	60fb      	str	r3, [r7, #12]
 800219a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800219c:	f7ff f990 	bl	80014c0 <HAL_PWREx_GetVoltageRange>
 80021a0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80021a2:	4b1e      	ldr	r3, [pc, #120]	; (800221c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021a6:	4a1d      	ldr	r2, [pc, #116]	; (800221c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021ac:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021b4:	d10b      	bne.n	80021ce <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2b80      	cmp	r3, #128	; 0x80
 80021ba:	d919      	bls.n	80021f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2ba0      	cmp	r3, #160	; 0xa0
 80021c0:	d902      	bls.n	80021c8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80021c2:	2302      	movs	r3, #2
 80021c4:	613b      	str	r3, [r7, #16]
 80021c6:	e013      	b.n	80021f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80021c8:	2301      	movs	r3, #1
 80021ca:	613b      	str	r3, [r7, #16]
 80021cc:	e010      	b.n	80021f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2b80      	cmp	r3, #128	; 0x80
 80021d2:	d902      	bls.n	80021da <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80021d4:	2303      	movs	r3, #3
 80021d6:	613b      	str	r3, [r7, #16]
 80021d8:	e00a      	b.n	80021f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2b80      	cmp	r3, #128	; 0x80
 80021de:	d102      	bne.n	80021e6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80021e0:	2302      	movs	r3, #2
 80021e2:	613b      	str	r3, [r7, #16]
 80021e4:	e004      	b.n	80021f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2b70      	cmp	r3, #112	; 0x70
 80021ea:	d101      	bne.n	80021f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80021ec:	2301      	movs	r3, #1
 80021ee:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80021f0:	4b0b      	ldr	r3, [pc, #44]	; (8002220 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f023 0207 	bic.w	r2, r3, #7
 80021f8:	4909      	ldr	r1, [pc, #36]	; (8002220 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	4313      	orrs	r3, r2
 80021fe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002200:	4b07      	ldr	r3, [pc, #28]	; (8002220 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0307 	and.w	r3, r3, #7
 8002208:	693a      	ldr	r2, [r7, #16]
 800220a:	429a      	cmp	r2, r3
 800220c:	d001      	beq.n	8002212 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e000      	b.n	8002214 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002212:	2300      	movs	r3, #0
}
 8002214:	4618      	mov	r0, r3
 8002216:	3718      	adds	r7, #24
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}
 800221c:	40021000 	.word	0x40021000
 8002220:	40022000 	.word	0x40022000

08002224 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b086      	sub	sp, #24
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800222c:	2300      	movs	r3, #0
 800222e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002230:	2300      	movs	r3, #0
 8002232:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800223c:	2b00      	cmp	r3, #0
 800223e:	d041      	beq.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002244:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002248:	d02a      	beq.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800224a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800224e:	d824      	bhi.n	800229a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002250:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002254:	d008      	beq.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002256:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800225a:	d81e      	bhi.n	800229a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800225c:	2b00      	cmp	r3, #0
 800225e:	d00a      	beq.n	8002276 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002260:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002264:	d010      	beq.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002266:	e018      	b.n	800229a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002268:	4b86      	ldr	r3, [pc, #536]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	4a85      	ldr	r2, [pc, #532]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800226e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002272:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002274:	e015      	b.n	80022a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	3304      	adds	r3, #4
 800227a:	2100      	movs	r1, #0
 800227c:	4618      	mov	r0, r3
 800227e:	f000 facd 	bl	800281c <RCCEx_PLLSAI1_Config>
 8002282:	4603      	mov	r3, r0
 8002284:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002286:	e00c      	b.n	80022a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	3320      	adds	r3, #32
 800228c:	2100      	movs	r1, #0
 800228e:	4618      	mov	r0, r3
 8002290:	f000 fbb6 	bl	8002a00 <RCCEx_PLLSAI2_Config>
 8002294:	4603      	mov	r3, r0
 8002296:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002298:	e003      	b.n	80022a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	74fb      	strb	r3, [r7, #19]
      break;
 800229e:	e000      	b.n	80022a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80022a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80022a2:	7cfb      	ldrb	r3, [r7, #19]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d10b      	bne.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80022a8:	4b76      	ldr	r3, [pc, #472]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ae:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80022b6:	4973      	ldr	r1, [pc, #460]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022b8:	4313      	orrs	r3, r2
 80022ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80022be:	e001      	b.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022c0:	7cfb      	ldrb	r3, [r7, #19]
 80022c2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d041      	beq.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022d4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80022d8:	d02a      	beq.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80022da:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80022de:	d824      	bhi.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80022e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80022e4:	d008      	beq.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80022e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80022ea:	d81e      	bhi.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d00a      	beq.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80022f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022f4:	d010      	beq.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80022f6:	e018      	b.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80022f8:	4b62      	ldr	r3, [pc, #392]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	4a61      	ldr	r2, [pc, #388]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002302:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002304:	e015      	b.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	3304      	adds	r3, #4
 800230a:	2100      	movs	r1, #0
 800230c:	4618      	mov	r0, r3
 800230e:	f000 fa85 	bl	800281c <RCCEx_PLLSAI1_Config>
 8002312:	4603      	mov	r3, r0
 8002314:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002316:	e00c      	b.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	3320      	adds	r3, #32
 800231c:	2100      	movs	r1, #0
 800231e:	4618      	mov	r0, r3
 8002320:	f000 fb6e 	bl	8002a00 <RCCEx_PLLSAI2_Config>
 8002324:	4603      	mov	r3, r0
 8002326:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002328:	e003      	b.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	74fb      	strb	r3, [r7, #19]
      break;
 800232e:	e000      	b.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002330:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002332:	7cfb      	ldrb	r3, [r7, #19]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d10b      	bne.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002338:	4b52      	ldr	r3, [pc, #328]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800233a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800233e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002346:	494f      	ldr	r1, [pc, #316]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002348:	4313      	orrs	r3, r2
 800234a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800234e:	e001      	b.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002350:	7cfb      	ldrb	r3, [r7, #19]
 8002352:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800235c:	2b00      	cmp	r3, #0
 800235e:	f000 80a0 	beq.w	80024a2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002362:	2300      	movs	r3, #0
 8002364:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002366:	4b47      	ldr	r3, [pc, #284]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800236a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d101      	bne.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002372:	2301      	movs	r3, #1
 8002374:	e000      	b.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002376:	2300      	movs	r3, #0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d00d      	beq.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800237c:	4b41      	ldr	r3, [pc, #260]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800237e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002380:	4a40      	ldr	r2, [pc, #256]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002382:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002386:	6593      	str	r3, [r2, #88]	; 0x58
 8002388:	4b3e      	ldr	r3, [pc, #248]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800238a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800238c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002390:	60bb      	str	r3, [r7, #8]
 8002392:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002394:	2301      	movs	r3, #1
 8002396:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002398:	4b3b      	ldr	r3, [pc, #236]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a3a      	ldr	r2, [pc, #232]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800239e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023a2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80023a4:	f7fe fb8e 	bl	8000ac4 <HAL_GetTick>
 80023a8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80023aa:	e009      	b.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023ac:	f7fe fb8a 	bl	8000ac4 <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d902      	bls.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80023ba:	2303      	movs	r3, #3
 80023bc:	74fb      	strb	r3, [r7, #19]
        break;
 80023be:	e005      	b.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80023c0:	4b31      	ldr	r3, [pc, #196]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d0ef      	beq.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80023cc:	7cfb      	ldrb	r3, [r7, #19]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d15c      	bne.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80023d2:	4b2c      	ldr	r3, [pc, #176]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023dc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d01f      	beq.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ea:	697a      	ldr	r2, [r7, #20]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d019      	beq.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80023f0:	4b24      	ldr	r3, [pc, #144]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023fa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80023fc:	4b21      	ldr	r3, [pc, #132]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002402:	4a20      	ldr	r2, [pc, #128]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002404:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002408:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800240c:	4b1d      	ldr	r3, [pc, #116]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800240e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002412:	4a1c      	ldr	r2, [pc, #112]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002414:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002418:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800241c:	4a19      	ldr	r2, [pc, #100]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	f003 0301 	and.w	r3, r3, #1
 800242a:	2b00      	cmp	r3, #0
 800242c:	d016      	beq.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800242e:	f7fe fb49 	bl	8000ac4 <HAL_GetTick>
 8002432:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002434:	e00b      	b.n	800244e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002436:	f7fe fb45 	bl	8000ac4 <HAL_GetTick>
 800243a:	4602      	mov	r2, r0
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	f241 3288 	movw	r2, #5000	; 0x1388
 8002444:	4293      	cmp	r3, r2
 8002446:	d902      	bls.n	800244e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002448:	2303      	movs	r3, #3
 800244a:	74fb      	strb	r3, [r7, #19]
            break;
 800244c:	e006      	b.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800244e:	4b0d      	ldr	r3, [pc, #52]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002450:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002454:	f003 0302 	and.w	r3, r3, #2
 8002458:	2b00      	cmp	r3, #0
 800245a:	d0ec      	beq.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800245c:	7cfb      	ldrb	r3, [r7, #19]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d10c      	bne.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002462:	4b08      	ldr	r3, [pc, #32]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002464:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002468:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002472:	4904      	ldr	r1, [pc, #16]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002474:	4313      	orrs	r3, r2
 8002476:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800247a:	e009      	b.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800247c:	7cfb      	ldrb	r3, [r7, #19]
 800247e:	74bb      	strb	r3, [r7, #18]
 8002480:	e006      	b.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002482:	bf00      	nop
 8002484:	40021000 	.word	0x40021000
 8002488:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800248c:	7cfb      	ldrb	r3, [r7, #19]
 800248e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002490:	7c7b      	ldrb	r3, [r7, #17]
 8002492:	2b01      	cmp	r3, #1
 8002494:	d105      	bne.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002496:	4ba6      	ldr	r3, [pc, #664]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800249a:	4aa5      	ldr	r2, [pc, #660]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800249c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024a0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0301 	and.w	r3, r3, #1
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d00a      	beq.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80024ae:	4ba0      	ldr	r3, [pc, #640]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024b4:	f023 0203 	bic.w	r2, r3, #3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024bc:	499c      	ldr	r1, [pc, #624]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024be:	4313      	orrs	r3, r2
 80024c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 0302 	and.w	r3, r3, #2
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d00a      	beq.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80024d0:	4b97      	ldr	r3, [pc, #604]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024d6:	f023 020c 	bic.w	r2, r3, #12
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024de:	4994      	ldr	r1, [pc, #592]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024e0:	4313      	orrs	r3, r2
 80024e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0304 	and.w	r3, r3, #4
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d00a      	beq.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80024f2:	4b8f      	ldr	r3, [pc, #572]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024f8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002500:	498b      	ldr	r1, [pc, #556]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002502:	4313      	orrs	r3, r2
 8002504:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0308 	and.w	r3, r3, #8
 8002510:	2b00      	cmp	r3, #0
 8002512:	d00a      	beq.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002514:	4b86      	ldr	r3, [pc, #536]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002516:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800251a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002522:	4983      	ldr	r1, [pc, #524]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002524:	4313      	orrs	r3, r2
 8002526:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0310 	and.w	r3, r3, #16
 8002532:	2b00      	cmp	r3, #0
 8002534:	d00a      	beq.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002536:	4b7e      	ldr	r3, [pc, #504]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002538:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800253c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002544:	497a      	ldr	r1, [pc, #488]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002546:	4313      	orrs	r3, r2
 8002548:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0320 	and.w	r3, r3, #32
 8002554:	2b00      	cmp	r3, #0
 8002556:	d00a      	beq.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002558:	4b75      	ldr	r3, [pc, #468]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800255a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800255e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002566:	4972      	ldr	r1, [pc, #456]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002568:	4313      	orrs	r3, r2
 800256a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002576:	2b00      	cmp	r3, #0
 8002578:	d00a      	beq.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800257a:	4b6d      	ldr	r3, [pc, #436]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800257c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002580:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002588:	4969      	ldr	r1, [pc, #420]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800258a:	4313      	orrs	r3, r2
 800258c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002598:	2b00      	cmp	r3, #0
 800259a:	d00a      	beq.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800259c:	4b64      	ldr	r3, [pc, #400]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800259e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025a2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80025aa:	4961      	ldr	r1, [pc, #388]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80025ac:	4313      	orrs	r3, r2
 80025ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d00a      	beq.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025be:	4b5c      	ldr	r3, [pc, #368]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80025c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025c4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025cc:	4958      	ldr	r1, [pc, #352]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80025ce:	4313      	orrs	r3, r2
 80025d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d00a      	beq.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80025e0:	4b53      	ldr	r3, [pc, #332]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80025e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025e6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ee:	4950      	ldr	r1, [pc, #320]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80025f0:	4313      	orrs	r3, r2
 80025f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d00a      	beq.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002602:	4b4b      	ldr	r3, [pc, #300]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002604:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002608:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002610:	4947      	ldr	r1, [pc, #284]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002612:	4313      	orrs	r3, r2
 8002614:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002620:	2b00      	cmp	r3, #0
 8002622:	d00a      	beq.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002624:	4b42      	ldr	r3, [pc, #264]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002626:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800262a:	f023 0203 	bic.w	r2, r3, #3
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002632:	493f      	ldr	r1, [pc, #252]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002634:	4313      	orrs	r3, r2
 8002636:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d028      	beq.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002646:	4b3a      	ldr	r3, [pc, #232]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002648:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800264c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002654:	4936      	ldr	r1, [pc, #216]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002656:	4313      	orrs	r3, r2
 8002658:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002660:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002664:	d106      	bne.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002666:	4b32      	ldr	r3, [pc, #200]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002668:	68db      	ldr	r3, [r3, #12]
 800266a:	4a31      	ldr	r2, [pc, #196]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800266c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002670:	60d3      	str	r3, [r2, #12]
 8002672:	e011      	b.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002678:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800267c:	d10c      	bne.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	3304      	adds	r3, #4
 8002682:	2101      	movs	r1, #1
 8002684:	4618      	mov	r0, r3
 8002686:	f000 f8c9 	bl	800281c <RCCEx_PLLSAI1_Config>
 800268a:	4603      	mov	r3, r0
 800268c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800268e:	7cfb      	ldrb	r3, [r7, #19]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d001      	beq.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8002694:	7cfb      	ldrb	r3, [r7, #19]
 8002696:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d028      	beq.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80026a4:	4b22      	ldr	r3, [pc, #136]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80026a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026aa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026b2:	491f      	ldr	r1, [pc, #124]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80026b4:	4313      	orrs	r3, r2
 80026b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026c2:	d106      	bne.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026c4:	4b1a      	ldr	r3, [pc, #104]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	4a19      	ldr	r2, [pc, #100]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80026ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026ce:	60d3      	str	r3, [r2, #12]
 80026d0:	e011      	b.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026d6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80026da:	d10c      	bne.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	3304      	adds	r3, #4
 80026e0:	2101      	movs	r1, #1
 80026e2:	4618      	mov	r0, r3
 80026e4:	f000 f89a 	bl	800281c <RCCEx_PLLSAI1_Config>
 80026e8:	4603      	mov	r3, r0
 80026ea:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80026ec:	7cfb      	ldrb	r3, [r7, #19]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d001      	beq.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 80026f2:	7cfb      	ldrb	r3, [r7, #19]
 80026f4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d02a      	beq.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002702:	4b0b      	ldr	r3, [pc, #44]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002704:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002708:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002710:	4907      	ldr	r1, [pc, #28]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002712:	4313      	orrs	r3, r2
 8002714:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800271c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002720:	d108      	bne.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002722:	4b03      	ldr	r3, [pc, #12]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	4a02      	ldr	r2, [pc, #8]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002728:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800272c:	60d3      	str	r3, [r2, #12]
 800272e:	e013      	b.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8002730:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002738:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800273c:	d10c      	bne.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	3304      	adds	r3, #4
 8002742:	2101      	movs	r1, #1
 8002744:	4618      	mov	r0, r3
 8002746:	f000 f869 	bl	800281c <RCCEx_PLLSAI1_Config>
 800274a:	4603      	mov	r3, r0
 800274c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800274e:	7cfb      	ldrb	r3, [r7, #19]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d001      	beq.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8002754:	7cfb      	ldrb	r3, [r7, #19]
 8002756:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d02f      	beq.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002764:	4b2c      	ldr	r3, [pc, #176]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800276a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002772:	4929      	ldr	r1, [pc, #164]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002774:	4313      	orrs	r3, r2
 8002776:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800277e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002782:	d10d      	bne.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	3304      	adds	r3, #4
 8002788:	2102      	movs	r1, #2
 800278a:	4618      	mov	r0, r3
 800278c:	f000 f846 	bl	800281c <RCCEx_PLLSAI1_Config>
 8002790:	4603      	mov	r3, r0
 8002792:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002794:	7cfb      	ldrb	r3, [r7, #19]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d014      	beq.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 800279a:	7cfb      	ldrb	r3, [r7, #19]
 800279c:	74bb      	strb	r3, [r7, #18]
 800279e:	e011      	b.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027a8:	d10c      	bne.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	3320      	adds	r3, #32
 80027ae:	2102      	movs	r1, #2
 80027b0:	4618      	mov	r0, r3
 80027b2:	f000 f925 	bl	8002a00 <RCCEx_PLLSAI2_Config>
 80027b6:	4603      	mov	r3, r0
 80027b8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027ba:	7cfb      	ldrb	r3, [r7, #19]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d001      	beq.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80027c0:	7cfb      	ldrb	r3, [r7, #19]
 80027c2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d00b      	beq.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80027d0:	4b11      	ldr	r3, [pc, #68]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80027d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027d6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80027e0:	490d      	ldr	r1, [pc, #52]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80027e2:	4313      	orrs	r3, r2
 80027e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d00b      	beq.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80027f4:	4b08      	ldr	r3, [pc, #32]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80027f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027fa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002804:	4904      	ldr	r1, [pc, #16]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002806:	4313      	orrs	r3, r2
 8002808:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800280c:	7cbb      	ldrb	r3, [r7, #18]
}
 800280e:	4618      	mov	r0, r3
 8002810:	3718      	adds	r7, #24
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	40021000 	.word	0x40021000

0800281c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b084      	sub	sp, #16
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002826:	2300      	movs	r3, #0
 8002828:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800282a:	4b74      	ldr	r3, [pc, #464]	; (80029fc <RCCEx_PLLSAI1_Config+0x1e0>)
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	f003 0303 	and.w	r3, r3, #3
 8002832:	2b00      	cmp	r3, #0
 8002834:	d018      	beq.n	8002868 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002836:	4b71      	ldr	r3, [pc, #452]	; (80029fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002838:	68db      	ldr	r3, [r3, #12]
 800283a:	f003 0203 	and.w	r2, r3, #3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	429a      	cmp	r2, r3
 8002844:	d10d      	bne.n	8002862 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
       ||
 800284a:	2b00      	cmp	r3, #0
 800284c:	d009      	beq.n	8002862 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800284e:	4b6b      	ldr	r3, [pc, #428]	; (80029fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002850:	68db      	ldr	r3, [r3, #12]
 8002852:	091b      	lsrs	r3, r3, #4
 8002854:	f003 0307 	and.w	r3, r3, #7
 8002858:	1c5a      	adds	r2, r3, #1
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	685b      	ldr	r3, [r3, #4]
       ||
 800285e:	429a      	cmp	r2, r3
 8002860:	d047      	beq.n	80028f2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	73fb      	strb	r3, [r7, #15]
 8002866:	e044      	b.n	80028f2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2b03      	cmp	r3, #3
 800286e:	d018      	beq.n	80028a2 <RCCEx_PLLSAI1_Config+0x86>
 8002870:	2b03      	cmp	r3, #3
 8002872:	d825      	bhi.n	80028c0 <RCCEx_PLLSAI1_Config+0xa4>
 8002874:	2b01      	cmp	r3, #1
 8002876:	d002      	beq.n	800287e <RCCEx_PLLSAI1_Config+0x62>
 8002878:	2b02      	cmp	r3, #2
 800287a:	d009      	beq.n	8002890 <RCCEx_PLLSAI1_Config+0x74>
 800287c:	e020      	b.n	80028c0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800287e:	4b5f      	ldr	r3, [pc, #380]	; (80029fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0302 	and.w	r3, r3, #2
 8002886:	2b00      	cmp	r3, #0
 8002888:	d11d      	bne.n	80028c6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800288e:	e01a      	b.n	80028c6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002890:	4b5a      	ldr	r3, [pc, #360]	; (80029fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002898:	2b00      	cmp	r3, #0
 800289a:	d116      	bne.n	80028ca <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028a0:	e013      	b.n	80028ca <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80028a2:	4b56      	ldr	r3, [pc, #344]	; (80029fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d10f      	bne.n	80028ce <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80028ae:	4b53      	ldr	r3, [pc, #332]	; (80029fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d109      	bne.n	80028ce <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80028be:	e006      	b.n	80028ce <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	73fb      	strb	r3, [r7, #15]
      break;
 80028c4:	e004      	b.n	80028d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80028c6:	bf00      	nop
 80028c8:	e002      	b.n	80028d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80028ca:	bf00      	nop
 80028cc:	e000      	b.n	80028d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80028ce:	bf00      	nop
    }

    if(status == HAL_OK)
 80028d0:	7bfb      	ldrb	r3, [r7, #15]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d10d      	bne.n	80028f2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80028d6:	4b49      	ldr	r3, [pc, #292]	; (80029fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80028d8:	68db      	ldr	r3, [r3, #12]
 80028da:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6819      	ldr	r1, [r3, #0]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	3b01      	subs	r3, #1
 80028e8:	011b      	lsls	r3, r3, #4
 80028ea:	430b      	orrs	r3, r1
 80028ec:	4943      	ldr	r1, [pc, #268]	; (80029fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80028f2:	7bfb      	ldrb	r3, [r7, #15]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d17c      	bne.n	80029f2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80028f8:	4b40      	ldr	r3, [pc, #256]	; (80029fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a3f      	ldr	r2, [pc, #252]	; (80029fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80028fe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002902:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002904:	f7fe f8de 	bl	8000ac4 <HAL_GetTick>
 8002908:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800290a:	e009      	b.n	8002920 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800290c:	f7fe f8da 	bl	8000ac4 <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	2b02      	cmp	r3, #2
 8002918:	d902      	bls.n	8002920 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	73fb      	strb	r3, [r7, #15]
        break;
 800291e:	e005      	b.n	800292c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002920:	4b36      	ldr	r3, [pc, #216]	; (80029fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002928:	2b00      	cmp	r3, #0
 800292a:	d1ef      	bne.n	800290c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800292c:	7bfb      	ldrb	r3, [r7, #15]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d15f      	bne.n	80029f2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d110      	bne.n	800295a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002938:	4b30      	ldr	r3, [pc, #192]	; (80029fc <RCCEx_PLLSAI1_Config+0x1e0>)
 800293a:	691b      	ldr	r3, [r3, #16]
 800293c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002940:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002944:	687a      	ldr	r2, [r7, #4]
 8002946:	6892      	ldr	r2, [r2, #8]
 8002948:	0211      	lsls	r1, r2, #8
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	68d2      	ldr	r2, [r2, #12]
 800294e:	06d2      	lsls	r2, r2, #27
 8002950:	430a      	orrs	r2, r1
 8002952:	492a      	ldr	r1, [pc, #168]	; (80029fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002954:	4313      	orrs	r3, r2
 8002956:	610b      	str	r3, [r1, #16]
 8002958:	e027      	b.n	80029aa <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	2b01      	cmp	r3, #1
 800295e:	d112      	bne.n	8002986 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002960:	4b26      	ldr	r3, [pc, #152]	; (80029fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002962:	691b      	ldr	r3, [r3, #16]
 8002964:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002968:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800296c:	687a      	ldr	r2, [r7, #4]
 800296e:	6892      	ldr	r2, [r2, #8]
 8002970:	0211      	lsls	r1, r2, #8
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	6912      	ldr	r2, [r2, #16]
 8002976:	0852      	lsrs	r2, r2, #1
 8002978:	3a01      	subs	r2, #1
 800297a:	0552      	lsls	r2, r2, #21
 800297c:	430a      	orrs	r2, r1
 800297e:	491f      	ldr	r1, [pc, #124]	; (80029fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002980:	4313      	orrs	r3, r2
 8002982:	610b      	str	r3, [r1, #16]
 8002984:	e011      	b.n	80029aa <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002986:	4b1d      	ldr	r3, [pc, #116]	; (80029fc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002988:	691b      	ldr	r3, [r3, #16]
 800298a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800298e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	6892      	ldr	r2, [r2, #8]
 8002996:	0211      	lsls	r1, r2, #8
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	6952      	ldr	r2, [r2, #20]
 800299c:	0852      	lsrs	r2, r2, #1
 800299e:	3a01      	subs	r2, #1
 80029a0:	0652      	lsls	r2, r2, #25
 80029a2:	430a      	orrs	r2, r1
 80029a4:	4915      	ldr	r1, [pc, #84]	; (80029fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80029a6:	4313      	orrs	r3, r2
 80029a8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80029aa:	4b14      	ldr	r3, [pc, #80]	; (80029fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a13      	ldr	r2, [pc, #76]	; (80029fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80029b0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80029b4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029b6:	f7fe f885 	bl	8000ac4 <HAL_GetTick>
 80029ba:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80029bc:	e009      	b.n	80029d2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80029be:	f7fe f881 	bl	8000ac4 <HAL_GetTick>
 80029c2:	4602      	mov	r2, r0
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	d902      	bls.n	80029d2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80029cc:	2303      	movs	r3, #3
 80029ce:	73fb      	strb	r3, [r7, #15]
          break;
 80029d0:	e005      	b.n	80029de <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80029d2:	4b0a      	ldr	r3, [pc, #40]	; (80029fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d0ef      	beq.n	80029be <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80029de:	7bfb      	ldrb	r3, [r7, #15]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d106      	bne.n	80029f2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80029e4:	4b05      	ldr	r3, [pc, #20]	; (80029fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80029e6:	691a      	ldr	r2, [r3, #16]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	699b      	ldr	r3, [r3, #24]
 80029ec:	4903      	ldr	r1, [pc, #12]	; (80029fc <RCCEx_PLLSAI1_Config+0x1e0>)
 80029ee:	4313      	orrs	r3, r2
 80029f0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80029f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3710      	adds	r7, #16
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	40021000 	.word	0x40021000

08002a00 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b084      	sub	sp, #16
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002a0e:	4b69      	ldr	r3, [pc, #420]	; (8002bb4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002a10:	68db      	ldr	r3, [r3, #12]
 8002a12:	f003 0303 	and.w	r3, r3, #3
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d018      	beq.n	8002a4c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002a1a:	4b66      	ldr	r3, [pc, #408]	; (8002bb4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002a1c:	68db      	ldr	r3, [r3, #12]
 8002a1e:	f003 0203 	and.w	r2, r3, #3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d10d      	bne.n	8002a46 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
       ||
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d009      	beq.n	8002a46 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002a32:	4b60      	ldr	r3, [pc, #384]	; (8002bb4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	091b      	lsrs	r3, r3, #4
 8002a38:	f003 0307 	and.w	r3, r3, #7
 8002a3c:	1c5a      	adds	r2, r3, #1
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685b      	ldr	r3, [r3, #4]
       ||
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d047      	beq.n	8002ad6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	73fb      	strb	r3, [r7, #15]
 8002a4a:	e044      	b.n	8002ad6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	2b03      	cmp	r3, #3
 8002a52:	d018      	beq.n	8002a86 <RCCEx_PLLSAI2_Config+0x86>
 8002a54:	2b03      	cmp	r3, #3
 8002a56:	d825      	bhi.n	8002aa4 <RCCEx_PLLSAI2_Config+0xa4>
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d002      	beq.n	8002a62 <RCCEx_PLLSAI2_Config+0x62>
 8002a5c:	2b02      	cmp	r3, #2
 8002a5e:	d009      	beq.n	8002a74 <RCCEx_PLLSAI2_Config+0x74>
 8002a60:	e020      	b.n	8002aa4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002a62:	4b54      	ldr	r3, [pc, #336]	; (8002bb4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0302 	and.w	r3, r3, #2
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d11d      	bne.n	8002aaa <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a72:	e01a      	b.n	8002aaa <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002a74:	4b4f      	ldr	r3, [pc, #316]	; (8002bb4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d116      	bne.n	8002aae <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a84:	e013      	b.n	8002aae <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002a86:	4b4b      	ldr	r3, [pc, #300]	; (8002bb4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d10f      	bne.n	8002ab2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002a92:	4b48      	ldr	r3, [pc, #288]	; (8002bb4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d109      	bne.n	8002ab2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002aa2:	e006      	b.n	8002ab2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	73fb      	strb	r3, [r7, #15]
      break;
 8002aa8:	e004      	b.n	8002ab4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002aaa:	bf00      	nop
 8002aac:	e002      	b.n	8002ab4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002aae:	bf00      	nop
 8002ab0:	e000      	b.n	8002ab4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002ab2:	bf00      	nop
    }

    if(status == HAL_OK)
 8002ab4:	7bfb      	ldrb	r3, [r7, #15]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d10d      	bne.n	8002ad6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002aba:	4b3e      	ldr	r3, [pc, #248]	; (8002bb4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002abc:	68db      	ldr	r3, [r3, #12]
 8002abe:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6819      	ldr	r1, [r3, #0]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	3b01      	subs	r3, #1
 8002acc:	011b      	lsls	r3, r3, #4
 8002ace:	430b      	orrs	r3, r1
 8002ad0:	4938      	ldr	r1, [pc, #224]	; (8002bb4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002ad6:	7bfb      	ldrb	r3, [r7, #15]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d166      	bne.n	8002baa <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002adc:	4b35      	ldr	r3, [pc, #212]	; (8002bb4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a34      	ldr	r2, [pc, #208]	; (8002bb4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002ae2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ae6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ae8:	f7fd ffec 	bl	8000ac4 <HAL_GetTick>
 8002aec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002aee:	e009      	b.n	8002b04 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002af0:	f7fd ffe8 	bl	8000ac4 <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d902      	bls.n	8002b04 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	73fb      	strb	r3, [r7, #15]
        break;
 8002b02:	e005      	b.n	8002b10 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002b04:	4b2b      	ldr	r3, [pc, #172]	; (8002bb4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d1ef      	bne.n	8002af0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002b10:	7bfb      	ldrb	r3, [r7, #15]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d149      	bne.n	8002baa <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d110      	bne.n	8002b3e <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002b1c:	4b25      	ldr	r3, [pc, #148]	; (8002bb4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002b1e:	695b      	ldr	r3, [r3, #20]
 8002b20:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002b24:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	6892      	ldr	r2, [r2, #8]
 8002b2c:	0211      	lsls	r1, r2, #8
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	68d2      	ldr	r2, [r2, #12]
 8002b32:	06d2      	lsls	r2, r2, #27
 8002b34:	430a      	orrs	r2, r1
 8002b36:	491f      	ldr	r1, [pc, #124]	; (8002bb4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	614b      	str	r3, [r1, #20]
 8002b3c:	e011      	b.n	8002b62 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002b3e:	4b1d      	ldr	r3, [pc, #116]	; (8002bb4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002b40:	695b      	ldr	r3, [r3, #20]
 8002b42:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002b46:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	6892      	ldr	r2, [r2, #8]
 8002b4e:	0211      	lsls	r1, r2, #8
 8002b50:	687a      	ldr	r2, [r7, #4]
 8002b52:	6912      	ldr	r2, [r2, #16]
 8002b54:	0852      	lsrs	r2, r2, #1
 8002b56:	3a01      	subs	r2, #1
 8002b58:	0652      	lsls	r2, r2, #25
 8002b5a:	430a      	orrs	r2, r1
 8002b5c:	4915      	ldr	r1, [pc, #84]	; (8002bb4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002b62:	4b14      	ldr	r3, [pc, #80]	; (8002bb4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a13      	ldr	r2, [pc, #76]	; (8002bb4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002b68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b6c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b6e:	f7fd ffa9 	bl	8000ac4 <HAL_GetTick>
 8002b72:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002b74:	e009      	b.n	8002b8a <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002b76:	f7fd ffa5 	bl	8000ac4 <HAL_GetTick>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	2b02      	cmp	r3, #2
 8002b82:	d902      	bls.n	8002b8a <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8002b84:	2303      	movs	r3, #3
 8002b86:	73fb      	strb	r3, [r7, #15]
          break;
 8002b88:	e005      	b.n	8002b96 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002b8a:	4b0a      	ldr	r3, [pc, #40]	; (8002bb4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d0ef      	beq.n	8002b76 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8002b96:	7bfb      	ldrb	r3, [r7, #15]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d106      	bne.n	8002baa <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002b9c:	4b05      	ldr	r3, [pc, #20]	; (8002bb4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002b9e:	695a      	ldr	r2, [r3, #20]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	695b      	ldr	r3, [r3, #20]
 8002ba4:	4903      	ldr	r1, [pc, #12]	; (8002bb4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002baa:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3710      	adds	r7, #16
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	40021000 	.word	0x40021000

08002bb8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d101      	bne.n	8002bca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e040      	b.n	8002c4c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d106      	bne.n	8002be0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f7fd fe0c 	bl	80007f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2224      	movs	r2, #36	; 0x24
 8002be4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f022 0201 	bic.w	r2, r2, #1
 8002bf4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f000 f8c6 	bl	8002d88 <UART_SetConfig>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d101      	bne.n	8002c06 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e022      	b.n	8002c4c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d002      	beq.n	8002c14 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f000 fb72 	bl	80032f8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	685a      	ldr	r2, [r3, #4]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c22:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	689a      	ldr	r2, [r3, #8]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c32:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f042 0201 	orr.w	r2, r2, #1
 8002c42:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f000 fbf9 	bl	800343c <UART_CheckIdleState>
 8002c4a:	4603      	mov	r3, r0
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3708      	adds	r7, #8
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}

08002c54 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b08a      	sub	sp, #40	; 0x28
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	60f8      	str	r0, [r7, #12]
 8002c5c:	60b9      	str	r1, [r7, #8]
 8002c5e:	4613      	mov	r3, r2
 8002c60:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c66:	2b20      	cmp	r3, #32
 8002c68:	d178      	bne.n	8002d5c <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d002      	beq.n	8002c76 <HAL_UART_Transmit_DMA+0x22>
 8002c70:	88fb      	ldrh	r3, [r7, #6]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d101      	bne.n	8002c7a <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e071      	b.n	8002d5e <HAL_UART_Transmit_DMA+0x10a>
    }

    __HAL_LOCK(huart);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d101      	bne.n	8002c88 <HAL_UART_Transmit_DMA+0x34>
 8002c84:	2302      	movs	r3, #2
 8002c86:	e06a      	b.n	8002d5e <HAL_UART_Transmit_DMA+0x10a>
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	68ba      	ldr	r2, [r7, #8]
 8002c94:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	88fa      	ldrh	r2, [r7, #6]
 8002c9a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	88fa      	ldrh	r2, [r7, #6]
 8002ca2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2221      	movs	r2, #33	; 0x21
 8002cb2:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d02b      	beq.n	8002d14 <HAL_UART_Transmit_DMA+0xc0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cc0:	4a29      	ldr	r2, [pc, #164]	; (8002d68 <HAL_UART_Transmit_DMA+0x114>)
 8002cc2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cc8:	4a28      	ldr	r2, [pc, #160]	; (8002d6c <HAL_UART_Transmit_DMA+0x118>)
 8002cca:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cd0:	4a27      	ldr	r2, [pc, #156]	; (8002d70 <HAL_UART_Transmit_DMA+0x11c>)
 8002cd2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cd8:	2200      	movs	r2, #0
 8002cda:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	3328      	adds	r3, #40	; 0x28
 8002cec:	461a      	mov	r2, r3
 8002cee:	88fb      	ldrh	r3, [r7, #6]
 8002cf0:	f7fe f8e2 	bl	8000eb8 <HAL_DMA_Start_IT>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d00c      	beq.n	8002d14 <HAL_UART_Transmit_DMA+0xc0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2210      	movs	r2, #16
 8002cfe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2200      	movs	r2, #0
 8002d06:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2220      	movs	r2, #32
 8002d0e:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e024      	b.n	8002d5e <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	2240      	movs	r2, #64	; 0x40
 8002d1a:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	3308      	adds	r3, #8
 8002d2a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	e853 3f00 	ldrex	r3, [r3]
 8002d32:	613b      	str	r3, [r7, #16]
   return(result);
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d3a:	627b      	str	r3, [r7, #36]	; 0x24
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	3308      	adds	r3, #8
 8002d42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d44:	623a      	str	r2, [r7, #32]
 8002d46:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d48:	69f9      	ldr	r1, [r7, #28]
 8002d4a:	6a3a      	ldr	r2, [r7, #32]
 8002d4c:	e841 2300 	strex	r3, r2, [r1]
 8002d50:	61bb      	str	r3, [r7, #24]
   return(result);
 8002d52:	69bb      	ldr	r3, [r7, #24]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d1e5      	bne.n	8002d24 <HAL_UART_Transmit_DMA+0xd0>

    return HAL_OK;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	e000      	b.n	8002d5e <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002d5c:	2302      	movs	r3, #2
  }
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3728      	adds	r7, #40	; 0x28
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	08003769 	.word	0x08003769
 8002d6c:	08003803 	.word	0x08003803
 8002d70:	0800381f 	.word	0x0800381f

08002d74 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002d7c:	bf00      	nop
 8002d7e:	370c      	adds	r7, #12
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr

08002d88 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d8c:	b08a      	sub	sp, #40	; 0x28
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d92:	2300      	movs	r3, #0
 8002d94:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	689a      	ldr	r2, [r3, #8]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	691b      	ldr	r3, [r3, #16]
 8002da0:	431a      	orrs	r2, r3
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	695b      	ldr	r3, [r3, #20]
 8002da6:	431a      	orrs	r2, r3
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	69db      	ldr	r3, [r3, #28]
 8002dac:	4313      	orrs	r3, r2
 8002dae:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	4ba4      	ldr	r3, [pc, #656]	; (8003048 <UART_SetConfig+0x2c0>)
 8002db8:	4013      	ands	r3, r2
 8002dba:	68fa      	ldr	r2, [r7, #12]
 8002dbc:	6812      	ldr	r2, [r2, #0]
 8002dbe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002dc0:	430b      	orrs	r3, r1
 8002dc2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	68da      	ldr	r2, [r3, #12]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	430a      	orrs	r2, r1
 8002dd8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	699b      	ldr	r3, [r3, #24]
 8002dde:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a99      	ldr	r2, [pc, #612]	; (800304c <UART_SetConfig+0x2c4>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d004      	beq.n	8002df4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	6a1b      	ldr	r3, [r3, #32]
 8002dee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002df0:	4313      	orrs	r3, r2
 8002df2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e04:	430a      	orrs	r2, r1
 8002e06:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a90      	ldr	r2, [pc, #576]	; (8003050 <UART_SetConfig+0x2c8>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d126      	bne.n	8002e60 <UART_SetConfig+0xd8>
 8002e12:	4b90      	ldr	r3, [pc, #576]	; (8003054 <UART_SetConfig+0x2cc>)
 8002e14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e18:	f003 0303 	and.w	r3, r3, #3
 8002e1c:	2b03      	cmp	r3, #3
 8002e1e:	d81b      	bhi.n	8002e58 <UART_SetConfig+0xd0>
 8002e20:	a201      	add	r2, pc, #4	; (adr r2, 8002e28 <UART_SetConfig+0xa0>)
 8002e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e26:	bf00      	nop
 8002e28:	08002e39 	.word	0x08002e39
 8002e2c:	08002e49 	.word	0x08002e49
 8002e30:	08002e41 	.word	0x08002e41
 8002e34:	08002e51 	.word	0x08002e51
 8002e38:	2301      	movs	r3, #1
 8002e3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e3e:	e116      	b.n	800306e <UART_SetConfig+0x2e6>
 8002e40:	2302      	movs	r3, #2
 8002e42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e46:	e112      	b.n	800306e <UART_SetConfig+0x2e6>
 8002e48:	2304      	movs	r3, #4
 8002e4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e4e:	e10e      	b.n	800306e <UART_SetConfig+0x2e6>
 8002e50:	2308      	movs	r3, #8
 8002e52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e56:	e10a      	b.n	800306e <UART_SetConfig+0x2e6>
 8002e58:	2310      	movs	r3, #16
 8002e5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e5e:	e106      	b.n	800306e <UART_SetConfig+0x2e6>
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a7c      	ldr	r2, [pc, #496]	; (8003058 <UART_SetConfig+0x2d0>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d138      	bne.n	8002edc <UART_SetConfig+0x154>
 8002e6a:	4b7a      	ldr	r3, [pc, #488]	; (8003054 <UART_SetConfig+0x2cc>)
 8002e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e70:	f003 030c 	and.w	r3, r3, #12
 8002e74:	2b0c      	cmp	r3, #12
 8002e76:	d82d      	bhi.n	8002ed4 <UART_SetConfig+0x14c>
 8002e78:	a201      	add	r2, pc, #4	; (adr r2, 8002e80 <UART_SetConfig+0xf8>)
 8002e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e7e:	bf00      	nop
 8002e80:	08002eb5 	.word	0x08002eb5
 8002e84:	08002ed5 	.word	0x08002ed5
 8002e88:	08002ed5 	.word	0x08002ed5
 8002e8c:	08002ed5 	.word	0x08002ed5
 8002e90:	08002ec5 	.word	0x08002ec5
 8002e94:	08002ed5 	.word	0x08002ed5
 8002e98:	08002ed5 	.word	0x08002ed5
 8002e9c:	08002ed5 	.word	0x08002ed5
 8002ea0:	08002ebd 	.word	0x08002ebd
 8002ea4:	08002ed5 	.word	0x08002ed5
 8002ea8:	08002ed5 	.word	0x08002ed5
 8002eac:	08002ed5 	.word	0x08002ed5
 8002eb0:	08002ecd 	.word	0x08002ecd
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002eba:	e0d8      	b.n	800306e <UART_SetConfig+0x2e6>
 8002ebc:	2302      	movs	r3, #2
 8002ebe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ec2:	e0d4      	b.n	800306e <UART_SetConfig+0x2e6>
 8002ec4:	2304      	movs	r3, #4
 8002ec6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002eca:	e0d0      	b.n	800306e <UART_SetConfig+0x2e6>
 8002ecc:	2308      	movs	r3, #8
 8002ece:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ed2:	e0cc      	b.n	800306e <UART_SetConfig+0x2e6>
 8002ed4:	2310      	movs	r3, #16
 8002ed6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002eda:	e0c8      	b.n	800306e <UART_SetConfig+0x2e6>
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a5e      	ldr	r2, [pc, #376]	; (800305c <UART_SetConfig+0x2d4>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d125      	bne.n	8002f32 <UART_SetConfig+0x1aa>
 8002ee6:	4b5b      	ldr	r3, [pc, #364]	; (8003054 <UART_SetConfig+0x2cc>)
 8002ee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eec:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002ef0:	2b30      	cmp	r3, #48	; 0x30
 8002ef2:	d016      	beq.n	8002f22 <UART_SetConfig+0x19a>
 8002ef4:	2b30      	cmp	r3, #48	; 0x30
 8002ef6:	d818      	bhi.n	8002f2a <UART_SetConfig+0x1a2>
 8002ef8:	2b20      	cmp	r3, #32
 8002efa:	d00a      	beq.n	8002f12 <UART_SetConfig+0x18a>
 8002efc:	2b20      	cmp	r3, #32
 8002efe:	d814      	bhi.n	8002f2a <UART_SetConfig+0x1a2>
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d002      	beq.n	8002f0a <UART_SetConfig+0x182>
 8002f04:	2b10      	cmp	r3, #16
 8002f06:	d008      	beq.n	8002f1a <UART_SetConfig+0x192>
 8002f08:	e00f      	b.n	8002f2a <UART_SetConfig+0x1a2>
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f10:	e0ad      	b.n	800306e <UART_SetConfig+0x2e6>
 8002f12:	2302      	movs	r3, #2
 8002f14:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f18:	e0a9      	b.n	800306e <UART_SetConfig+0x2e6>
 8002f1a:	2304      	movs	r3, #4
 8002f1c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f20:	e0a5      	b.n	800306e <UART_SetConfig+0x2e6>
 8002f22:	2308      	movs	r3, #8
 8002f24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f28:	e0a1      	b.n	800306e <UART_SetConfig+0x2e6>
 8002f2a:	2310      	movs	r3, #16
 8002f2c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f30:	e09d      	b.n	800306e <UART_SetConfig+0x2e6>
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a4a      	ldr	r2, [pc, #296]	; (8003060 <UART_SetConfig+0x2d8>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d125      	bne.n	8002f88 <UART_SetConfig+0x200>
 8002f3c:	4b45      	ldr	r3, [pc, #276]	; (8003054 <UART_SetConfig+0x2cc>)
 8002f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f42:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002f46:	2bc0      	cmp	r3, #192	; 0xc0
 8002f48:	d016      	beq.n	8002f78 <UART_SetConfig+0x1f0>
 8002f4a:	2bc0      	cmp	r3, #192	; 0xc0
 8002f4c:	d818      	bhi.n	8002f80 <UART_SetConfig+0x1f8>
 8002f4e:	2b80      	cmp	r3, #128	; 0x80
 8002f50:	d00a      	beq.n	8002f68 <UART_SetConfig+0x1e0>
 8002f52:	2b80      	cmp	r3, #128	; 0x80
 8002f54:	d814      	bhi.n	8002f80 <UART_SetConfig+0x1f8>
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d002      	beq.n	8002f60 <UART_SetConfig+0x1d8>
 8002f5a:	2b40      	cmp	r3, #64	; 0x40
 8002f5c:	d008      	beq.n	8002f70 <UART_SetConfig+0x1e8>
 8002f5e:	e00f      	b.n	8002f80 <UART_SetConfig+0x1f8>
 8002f60:	2300      	movs	r3, #0
 8002f62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f66:	e082      	b.n	800306e <UART_SetConfig+0x2e6>
 8002f68:	2302      	movs	r3, #2
 8002f6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f6e:	e07e      	b.n	800306e <UART_SetConfig+0x2e6>
 8002f70:	2304      	movs	r3, #4
 8002f72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f76:	e07a      	b.n	800306e <UART_SetConfig+0x2e6>
 8002f78:	2308      	movs	r3, #8
 8002f7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f7e:	e076      	b.n	800306e <UART_SetConfig+0x2e6>
 8002f80:	2310      	movs	r3, #16
 8002f82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f86:	e072      	b.n	800306e <UART_SetConfig+0x2e6>
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a35      	ldr	r2, [pc, #212]	; (8003064 <UART_SetConfig+0x2dc>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d12a      	bne.n	8002fe8 <UART_SetConfig+0x260>
 8002f92:	4b30      	ldr	r3, [pc, #192]	; (8003054 <UART_SetConfig+0x2cc>)
 8002f94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f9c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002fa0:	d01a      	beq.n	8002fd8 <UART_SetConfig+0x250>
 8002fa2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002fa6:	d81b      	bhi.n	8002fe0 <UART_SetConfig+0x258>
 8002fa8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fac:	d00c      	beq.n	8002fc8 <UART_SetConfig+0x240>
 8002fae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fb2:	d815      	bhi.n	8002fe0 <UART_SetConfig+0x258>
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d003      	beq.n	8002fc0 <UART_SetConfig+0x238>
 8002fb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fbc:	d008      	beq.n	8002fd0 <UART_SetConfig+0x248>
 8002fbe:	e00f      	b.n	8002fe0 <UART_SetConfig+0x258>
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fc6:	e052      	b.n	800306e <UART_SetConfig+0x2e6>
 8002fc8:	2302      	movs	r3, #2
 8002fca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fce:	e04e      	b.n	800306e <UART_SetConfig+0x2e6>
 8002fd0:	2304      	movs	r3, #4
 8002fd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fd6:	e04a      	b.n	800306e <UART_SetConfig+0x2e6>
 8002fd8:	2308      	movs	r3, #8
 8002fda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fde:	e046      	b.n	800306e <UART_SetConfig+0x2e6>
 8002fe0:	2310      	movs	r3, #16
 8002fe2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fe6:	e042      	b.n	800306e <UART_SetConfig+0x2e6>
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a17      	ldr	r2, [pc, #92]	; (800304c <UART_SetConfig+0x2c4>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d13a      	bne.n	8003068 <UART_SetConfig+0x2e0>
 8002ff2:	4b18      	ldr	r3, [pc, #96]	; (8003054 <UART_SetConfig+0x2cc>)
 8002ff4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ff8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002ffc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003000:	d01a      	beq.n	8003038 <UART_SetConfig+0x2b0>
 8003002:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003006:	d81b      	bhi.n	8003040 <UART_SetConfig+0x2b8>
 8003008:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800300c:	d00c      	beq.n	8003028 <UART_SetConfig+0x2a0>
 800300e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003012:	d815      	bhi.n	8003040 <UART_SetConfig+0x2b8>
 8003014:	2b00      	cmp	r3, #0
 8003016:	d003      	beq.n	8003020 <UART_SetConfig+0x298>
 8003018:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800301c:	d008      	beq.n	8003030 <UART_SetConfig+0x2a8>
 800301e:	e00f      	b.n	8003040 <UART_SetConfig+0x2b8>
 8003020:	2300      	movs	r3, #0
 8003022:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003026:	e022      	b.n	800306e <UART_SetConfig+0x2e6>
 8003028:	2302      	movs	r3, #2
 800302a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800302e:	e01e      	b.n	800306e <UART_SetConfig+0x2e6>
 8003030:	2304      	movs	r3, #4
 8003032:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003036:	e01a      	b.n	800306e <UART_SetConfig+0x2e6>
 8003038:	2308      	movs	r3, #8
 800303a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800303e:	e016      	b.n	800306e <UART_SetConfig+0x2e6>
 8003040:	2310      	movs	r3, #16
 8003042:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003046:	e012      	b.n	800306e <UART_SetConfig+0x2e6>
 8003048:	efff69f3 	.word	0xefff69f3
 800304c:	40008000 	.word	0x40008000
 8003050:	40013800 	.word	0x40013800
 8003054:	40021000 	.word	0x40021000
 8003058:	40004400 	.word	0x40004400
 800305c:	40004800 	.word	0x40004800
 8003060:	40004c00 	.word	0x40004c00
 8003064:	40005000 	.word	0x40005000
 8003068:	2310      	movs	r3, #16
 800306a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a9f      	ldr	r2, [pc, #636]	; (80032f0 <UART_SetConfig+0x568>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d17a      	bne.n	800316e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003078:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800307c:	2b08      	cmp	r3, #8
 800307e:	d824      	bhi.n	80030ca <UART_SetConfig+0x342>
 8003080:	a201      	add	r2, pc, #4	; (adr r2, 8003088 <UART_SetConfig+0x300>)
 8003082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003086:	bf00      	nop
 8003088:	080030ad 	.word	0x080030ad
 800308c:	080030cb 	.word	0x080030cb
 8003090:	080030b5 	.word	0x080030b5
 8003094:	080030cb 	.word	0x080030cb
 8003098:	080030bb 	.word	0x080030bb
 800309c:	080030cb 	.word	0x080030cb
 80030a0:	080030cb 	.word	0x080030cb
 80030a4:	080030cb 	.word	0x080030cb
 80030a8:	080030c3 	.word	0x080030c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030ac:	f7ff f82e 	bl	800210c <HAL_RCC_GetPCLK1Freq>
 80030b0:	61f8      	str	r0, [r7, #28]
        break;
 80030b2:	e010      	b.n	80030d6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80030b4:	4b8f      	ldr	r3, [pc, #572]	; (80032f4 <UART_SetConfig+0x56c>)
 80030b6:	61fb      	str	r3, [r7, #28]
        break;
 80030b8:	e00d      	b.n	80030d6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030ba:	f7fe ff8f 	bl	8001fdc <HAL_RCC_GetSysClockFreq>
 80030be:	61f8      	str	r0, [r7, #28]
        break;
 80030c0:	e009      	b.n	80030d6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030c6:	61fb      	str	r3, [r7, #28]
        break;
 80030c8:	e005      	b.n	80030d6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80030ca:	2300      	movs	r3, #0
 80030cc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80030d4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	f000 80fb 	beq.w	80032d4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	685a      	ldr	r2, [r3, #4]
 80030e2:	4613      	mov	r3, r2
 80030e4:	005b      	lsls	r3, r3, #1
 80030e6:	4413      	add	r3, r2
 80030e8:	69fa      	ldr	r2, [r7, #28]
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d305      	bcc.n	80030fa <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80030f4:	69fa      	ldr	r2, [r7, #28]
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d903      	bls.n	8003102 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003100:	e0e8      	b.n	80032d4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	2200      	movs	r2, #0
 8003106:	461c      	mov	r4, r3
 8003108:	4615      	mov	r5, r2
 800310a:	f04f 0200 	mov.w	r2, #0
 800310e:	f04f 0300 	mov.w	r3, #0
 8003112:	022b      	lsls	r3, r5, #8
 8003114:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003118:	0222      	lsls	r2, r4, #8
 800311a:	68f9      	ldr	r1, [r7, #12]
 800311c:	6849      	ldr	r1, [r1, #4]
 800311e:	0849      	lsrs	r1, r1, #1
 8003120:	2000      	movs	r0, #0
 8003122:	4688      	mov	r8, r1
 8003124:	4681      	mov	r9, r0
 8003126:	eb12 0a08 	adds.w	sl, r2, r8
 800312a:	eb43 0b09 	adc.w	fp, r3, r9
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	603b      	str	r3, [r7, #0]
 8003136:	607a      	str	r2, [r7, #4]
 8003138:	e9d7 2300 	ldrd	r2, r3, [r7]
 800313c:	4650      	mov	r0, sl
 800313e:	4659      	mov	r1, fp
 8003140:	f7fd f854 	bl	80001ec <__aeabi_uldivmod>
 8003144:	4602      	mov	r2, r0
 8003146:	460b      	mov	r3, r1
 8003148:	4613      	mov	r3, r2
 800314a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800314c:	69bb      	ldr	r3, [r7, #24]
 800314e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003152:	d308      	bcc.n	8003166 <UART_SetConfig+0x3de>
 8003154:	69bb      	ldr	r3, [r7, #24]
 8003156:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800315a:	d204      	bcs.n	8003166 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	69ba      	ldr	r2, [r7, #24]
 8003162:	60da      	str	r2, [r3, #12]
 8003164:	e0b6      	b.n	80032d4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800316c:	e0b2      	b.n	80032d4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	69db      	ldr	r3, [r3, #28]
 8003172:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003176:	d15e      	bne.n	8003236 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003178:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800317c:	2b08      	cmp	r3, #8
 800317e:	d828      	bhi.n	80031d2 <UART_SetConfig+0x44a>
 8003180:	a201      	add	r2, pc, #4	; (adr r2, 8003188 <UART_SetConfig+0x400>)
 8003182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003186:	bf00      	nop
 8003188:	080031ad 	.word	0x080031ad
 800318c:	080031b5 	.word	0x080031b5
 8003190:	080031bd 	.word	0x080031bd
 8003194:	080031d3 	.word	0x080031d3
 8003198:	080031c3 	.word	0x080031c3
 800319c:	080031d3 	.word	0x080031d3
 80031a0:	080031d3 	.word	0x080031d3
 80031a4:	080031d3 	.word	0x080031d3
 80031a8:	080031cb 	.word	0x080031cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031ac:	f7fe ffae 	bl	800210c <HAL_RCC_GetPCLK1Freq>
 80031b0:	61f8      	str	r0, [r7, #28]
        break;
 80031b2:	e014      	b.n	80031de <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80031b4:	f7fe ffc0 	bl	8002138 <HAL_RCC_GetPCLK2Freq>
 80031b8:	61f8      	str	r0, [r7, #28]
        break;
 80031ba:	e010      	b.n	80031de <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031bc:	4b4d      	ldr	r3, [pc, #308]	; (80032f4 <UART_SetConfig+0x56c>)
 80031be:	61fb      	str	r3, [r7, #28]
        break;
 80031c0:	e00d      	b.n	80031de <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031c2:	f7fe ff0b 	bl	8001fdc <HAL_RCC_GetSysClockFreq>
 80031c6:	61f8      	str	r0, [r7, #28]
        break;
 80031c8:	e009      	b.n	80031de <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031ce:	61fb      	str	r3, [r7, #28]
        break;
 80031d0:	e005      	b.n	80031de <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80031d2:	2300      	movs	r3, #0
 80031d4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80031dc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d077      	beq.n	80032d4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	005a      	lsls	r2, r3, #1
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	085b      	lsrs	r3, r3, #1
 80031ee:	441a      	add	r2, r3
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80031f8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031fa:	69bb      	ldr	r3, [r7, #24]
 80031fc:	2b0f      	cmp	r3, #15
 80031fe:	d916      	bls.n	800322e <UART_SetConfig+0x4a6>
 8003200:	69bb      	ldr	r3, [r7, #24]
 8003202:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003206:	d212      	bcs.n	800322e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003208:	69bb      	ldr	r3, [r7, #24]
 800320a:	b29b      	uxth	r3, r3
 800320c:	f023 030f 	bic.w	r3, r3, #15
 8003210:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003212:	69bb      	ldr	r3, [r7, #24]
 8003214:	085b      	lsrs	r3, r3, #1
 8003216:	b29b      	uxth	r3, r3
 8003218:	f003 0307 	and.w	r3, r3, #7
 800321c:	b29a      	uxth	r2, r3
 800321e:	8afb      	ldrh	r3, [r7, #22]
 8003220:	4313      	orrs	r3, r2
 8003222:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	8afa      	ldrh	r2, [r7, #22]
 800322a:	60da      	str	r2, [r3, #12]
 800322c:	e052      	b.n	80032d4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003234:	e04e      	b.n	80032d4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003236:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800323a:	2b08      	cmp	r3, #8
 800323c:	d827      	bhi.n	800328e <UART_SetConfig+0x506>
 800323e:	a201      	add	r2, pc, #4	; (adr r2, 8003244 <UART_SetConfig+0x4bc>)
 8003240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003244:	08003269 	.word	0x08003269
 8003248:	08003271 	.word	0x08003271
 800324c:	08003279 	.word	0x08003279
 8003250:	0800328f 	.word	0x0800328f
 8003254:	0800327f 	.word	0x0800327f
 8003258:	0800328f 	.word	0x0800328f
 800325c:	0800328f 	.word	0x0800328f
 8003260:	0800328f 	.word	0x0800328f
 8003264:	08003287 	.word	0x08003287
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003268:	f7fe ff50 	bl	800210c <HAL_RCC_GetPCLK1Freq>
 800326c:	61f8      	str	r0, [r7, #28]
        break;
 800326e:	e014      	b.n	800329a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003270:	f7fe ff62 	bl	8002138 <HAL_RCC_GetPCLK2Freq>
 8003274:	61f8      	str	r0, [r7, #28]
        break;
 8003276:	e010      	b.n	800329a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003278:	4b1e      	ldr	r3, [pc, #120]	; (80032f4 <UART_SetConfig+0x56c>)
 800327a:	61fb      	str	r3, [r7, #28]
        break;
 800327c:	e00d      	b.n	800329a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800327e:	f7fe fead 	bl	8001fdc <HAL_RCC_GetSysClockFreq>
 8003282:	61f8      	str	r0, [r7, #28]
        break;
 8003284:	e009      	b.n	800329a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003286:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800328a:	61fb      	str	r3, [r7, #28]
        break;
 800328c:	e005      	b.n	800329a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800328e:	2300      	movs	r3, #0
 8003290:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003298:	bf00      	nop
    }

    if (pclk != 0U)
 800329a:	69fb      	ldr	r3, [r7, #28]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d019      	beq.n	80032d4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	085a      	lsrs	r2, r3, #1
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	441a      	add	r2, r3
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80032b2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032b4:	69bb      	ldr	r3, [r7, #24]
 80032b6:	2b0f      	cmp	r3, #15
 80032b8:	d909      	bls.n	80032ce <UART_SetConfig+0x546>
 80032ba:	69bb      	ldr	r3, [r7, #24]
 80032bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032c0:	d205      	bcs.n	80032ce <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80032c2:	69bb      	ldr	r3, [r7, #24]
 80032c4:	b29a      	uxth	r2, r3
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	60da      	str	r2, [r3, #12]
 80032cc:	e002      	b.n	80032d4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2200      	movs	r2, #0
 80032d8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2200      	movs	r2, #0
 80032de:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80032e0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3728      	adds	r7, #40	; 0x28
 80032e8:	46bd      	mov	sp, r7
 80032ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032ee:	bf00      	nop
 80032f0:	40008000 	.word	0x40008000
 80032f4:	00f42400 	.word	0x00f42400

080032f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003304:	f003 0301 	and.w	r3, r3, #1
 8003308:	2b00      	cmp	r3, #0
 800330a:	d00a      	beq.n	8003322 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	430a      	orrs	r2, r1
 8003320:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003326:	f003 0302 	and.w	r3, r3, #2
 800332a:	2b00      	cmp	r3, #0
 800332c:	d00a      	beq.n	8003344 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	430a      	orrs	r2, r1
 8003342:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003348:	f003 0304 	and.w	r3, r3, #4
 800334c:	2b00      	cmp	r3, #0
 800334e:	d00a      	beq.n	8003366 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	430a      	orrs	r2, r1
 8003364:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336a:	f003 0308 	and.w	r3, r3, #8
 800336e:	2b00      	cmp	r3, #0
 8003370:	d00a      	beq.n	8003388 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	430a      	orrs	r2, r1
 8003386:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338c:	f003 0310 	and.w	r3, r3, #16
 8003390:	2b00      	cmp	r3, #0
 8003392:	d00a      	beq.n	80033aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	430a      	orrs	r2, r1
 80033a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ae:	f003 0320 	and.w	r3, r3, #32
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d00a      	beq.n	80033cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	430a      	orrs	r2, r1
 80033ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d01a      	beq.n	800340e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	430a      	orrs	r2, r1
 80033ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033f6:	d10a      	bne.n	800340e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	430a      	orrs	r2, r1
 800340c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003412:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003416:	2b00      	cmp	r3, #0
 8003418:	d00a      	beq.n	8003430 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	430a      	orrs	r2, r1
 800342e:	605a      	str	r2, [r3, #4]
  }
}
 8003430:	bf00      	nop
 8003432:	370c      	adds	r7, #12
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr

0800343c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b086      	sub	sp, #24
 8003440:	af02      	add	r7, sp, #8
 8003442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2200      	movs	r2, #0
 8003448:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800344c:	f7fd fb3a 	bl	8000ac4 <HAL_GetTick>
 8003450:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0308 	and.w	r3, r3, #8
 800345c:	2b08      	cmp	r3, #8
 800345e:	d10e      	bne.n	800347e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003460:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003464:	9300      	str	r3, [sp, #0]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2200      	movs	r2, #0
 800346a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f000 f82d 	bl	80034ce <UART_WaitOnFlagUntilTimeout>
 8003474:	4603      	mov	r3, r0
 8003476:	2b00      	cmp	r3, #0
 8003478:	d001      	beq.n	800347e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e023      	b.n	80034c6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 0304 	and.w	r3, r3, #4
 8003488:	2b04      	cmp	r3, #4
 800348a:	d10e      	bne.n	80034aa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800348c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003490:	9300      	str	r3, [sp, #0]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2200      	movs	r2, #0
 8003496:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f000 f817 	bl	80034ce <UART_WaitOnFlagUntilTimeout>
 80034a0:	4603      	mov	r3, r0
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d001      	beq.n	80034aa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	e00d      	b.n	80034c6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2220      	movs	r2, #32
 80034ae:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2220      	movs	r2, #32
 80034b4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2200      	movs	r2, #0
 80034ba:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2200      	movs	r2, #0
 80034c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80034c4:	2300      	movs	r3, #0
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3710      	adds	r7, #16
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}

080034ce <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80034ce:	b580      	push	{r7, lr}
 80034d0:	b09c      	sub	sp, #112	; 0x70
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	60f8      	str	r0, [r7, #12]
 80034d6:	60b9      	str	r1, [r7, #8]
 80034d8:	603b      	str	r3, [r7, #0]
 80034da:	4613      	mov	r3, r2
 80034dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034de:	e0a5      	b.n	800362c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034e6:	f000 80a1 	beq.w	800362c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034ea:	f7fd faeb 	bl	8000ac4 <HAL_GetTick>
 80034ee:	4602      	mov	r2, r0
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	1ad3      	subs	r3, r2, r3
 80034f4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80034f6:	429a      	cmp	r2, r3
 80034f8:	d302      	bcc.n	8003500 <UART_WaitOnFlagUntilTimeout+0x32>
 80034fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d13e      	bne.n	800357e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003506:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003508:	e853 3f00 	ldrex	r3, [r3]
 800350c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800350e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003510:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003514:	667b      	str	r3, [r7, #100]	; 0x64
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	461a      	mov	r2, r3
 800351c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800351e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003520:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003522:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003524:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003526:	e841 2300 	strex	r3, r2, [r1]
 800352a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800352c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800352e:	2b00      	cmp	r3, #0
 8003530:	d1e6      	bne.n	8003500 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	3308      	adds	r3, #8
 8003538:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800353a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800353c:	e853 3f00 	ldrex	r3, [r3]
 8003540:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003544:	f023 0301 	bic.w	r3, r3, #1
 8003548:	663b      	str	r3, [r7, #96]	; 0x60
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	3308      	adds	r3, #8
 8003550:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003552:	64ba      	str	r2, [r7, #72]	; 0x48
 8003554:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003556:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003558:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800355a:	e841 2300 	strex	r3, r2, [r1]
 800355e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003560:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003562:	2b00      	cmp	r3, #0
 8003564:	d1e5      	bne.n	8003532 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2220      	movs	r2, #32
 800356a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2220      	movs	r2, #32
 8003570:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2200      	movs	r2, #0
 8003576:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800357a:	2303      	movs	r3, #3
 800357c:	e067      	b.n	800364e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 0304 	and.w	r3, r3, #4
 8003588:	2b00      	cmp	r3, #0
 800358a:	d04f      	beq.n	800362c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	69db      	ldr	r3, [r3, #28]
 8003592:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003596:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800359a:	d147      	bne.n	800362c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80035a4:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ae:	e853 3f00 	ldrex	r3, [r3]
 80035b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80035b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80035ba:	66fb      	str	r3, [r7, #108]	; 0x6c
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	461a      	mov	r2, r3
 80035c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035c4:	637b      	str	r3, [r7, #52]	; 0x34
 80035c6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80035ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80035cc:	e841 2300 	strex	r3, r2, [r1]
 80035d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80035d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d1e6      	bne.n	80035a6 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	3308      	adds	r3, #8
 80035de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	e853 3f00 	ldrex	r3, [r3]
 80035e6:	613b      	str	r3, [r7, #16]
   return(result);
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	f023 0301 	bic.w	r3, r3, #1
 80035ee:	66bb      	str	r3, [r7, #104]	; 0x68
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	3308      	adds	r3, #8
 80035f6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80035f8:	623a      	str	r2, [r7, #32]
 80035fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035fc:	69f9      	ldr	r1, [r7, #28]
 80035fe:	6a3a      	ldr	r2, [r7, #32]
 8003600:	e841 2300 	strex	r3, r2, [r1]
 8003604:	61bb      	str	r3, [r7, #24]
   return(result);
 8003606:	69bb      	ldr	r3, [r7, #24]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d1e5      	bne.n	80035d8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2220      	movs	r2, #32
 8003610:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2220      	movs	r2, #32
 8003616:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2220      	movs	r2, #32
 800361c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2200      	movs	r2, #0
 8003624:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003628:	2303      	movs	r3, #3
 800362a:	e010      	b.n	800364e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	69da      	ldr	r2, [r3, #28]
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	4013      	ands	r3, r2
 8003636:	68ba      	ldr	r2, [r7, #8]
 8003638:	429a      	cmp	r2, r3
 800363a:	bf0c      	ite	eq
 800363c:	2301      	moveq	r3, #1
 800363e:	2300      	movne	r3, #0
 8003640:	b2db      	uxtb	r3, r3
 8003642:	461a      	mov	r2, r3
 8003644:	79fb      	ldrb	r3, [r7, #7]
 8003646:	429a      	cmp	r2, r3
 8003648:	f43f af4a 	beq.w	80034e0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800364c:	2300      	movs	r3, #0
}
 800364e:	4618      	mov	r0, r3
 8003650:	3770      	adds	r7, #112	; 0x70
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}

08003656 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003656:	b480      	push	{r7}
 8003658:	b089      	sub	sp, #36	; 0x24
 800365a:	af00      	add	r7, sp, #0
 800365c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	e853 3f00 	ldrex	r3, [r3]
 800366a:	60bb      	str	r3, [r7, #8]
   return(result);
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003672:	61fb      	str	r3, [r7, #28]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	461a      	mov	r2, r3
 800367a:	69fb      	ldr	r3, [r7, #28]
 800367c:	61bb      	str	r3, [r7, #24]
 800367e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003680:	6979      	ldr	r1, [r7, #20]
 8003682:	69ba      	ldr	r2, [r7, #24]
 8003684:	e841 2300 	strex	r3, r2, [r1]
 8003688:	613b      	str	r3, [r7, #16]
   return(result);
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d1e6      	bne.n	800365e <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2220      	movs	r2, #32
 8003694:	679a      	str	r2, [r3, #120]	; 0x78
}
 8003696:	bf00      	nop
 8003698:	3724      	adds	r7, #36	; 0x24
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr

080036a2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80036a2:	b480      	push	{r7}
 80036a4:	b095      	sub	sp, #84	; 0x54
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036b2:	e853 3f00 	ldrex	r3, [r3]
 80036b6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80036b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80036be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	461a      	mov	r2, r3
 80036c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036c8:	643b      	str	r3, [r7, #64]	; 0x40
 80036ca:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036cc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80036ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80036d0:	e841 2300 	strex	r3, r2, [r1]
 80036d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80036d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d1e6      	bne.n	80036aa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	3308      	adds	r3, #8
 80036e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036e4:	6a3b      	ldr	r3, [r7, #32]
 80036e6:	e853 3f00 	ldrex	r3, [r3]
 80036ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	f023 0301 	bic.w	r3, r3, #1
 80036f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	3308      	adds	r3, #8
 80036fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80036fc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80036fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003700:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003702:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003704:	e841 2300 	strex	r3, r2, [r1]
 8003708:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800370a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370c:	2b00      	cmp	r3, #0
 800370e:	d1e5      	bne.n	80036dc <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003714:	2b01      	cmp	r3, #1
 8003716:	d118      	bne.n	800374a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	e853 3f00 	ldrex	r3, [r3]
 8003724:	60bb      	str	r3, [r7, #8]
   return(result);
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	f023 0310 	bic.w	r3, r3, #16
 800372c:	647b      	str	r3, [r7, #68]	; 0x44
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	461a      	mov	r2, r3
 8003734:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003736:	61bb      	str	r3, [r7, #24]
 8003738:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800373a:	6979      	ldr	r1, [r7, #20]
 800373c:	69ba      	ldr	r2, [r7, #24]
 800373e:	e841 2300 	strex	r3, r2, [r1]
 8003742:	613b      	str	r3, [r7, #16]
   return(result);
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d1e6      	bne.n	8003718 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2220      	movs	r2, #32
 800374e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2200      	movs	r2, #0
 8003754:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	665a      	str	r2, [r3, #100]	; 0x64
}
 800375c:	bf00      	nop
 800375e:	3754      	adds	r7, #84	; 0x54
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr

08003768 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b090      	sub	sp, #64	; 0x40
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003774:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0320 	and.w	r3, r3, #32
 8003780:	2b00      	cmp	r3, #0
 8003782:	d137      	bne.n	80037f4 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8003784:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003786:	2200      	movs	r2, #0
 8003788:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800378c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	3308      	adds	r3, #8
 8003792:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003796:	e853 3f00 	ldrex	r3, [r3]
 800379a:	623b      	str	r3, [r7, #32]
   return(result);
 800379c:	6a3b      	ldr	r3, [r7, #32]
 800379e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80037a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	3308      	adds	r3, #8
 80037aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80037ac:	633a      	str	r2, [r7, #48]	; 0x30
 80037ae:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037b0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80037b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037b4:	e841 2300 	strex	r3, r2, [r1]
 80037b8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80037ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d1e5      	bne.n	800378c <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80037c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	e853 3f00 	ldrex	r3, [r3]
 80037cc:	60fb      	str	r3, [r7, #12]
   return(result);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037d4:	637b      	str	r3, [r7, #52]	; 0x34
 80037d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	461a      	mov	r2, r3
 80037dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037de:	61fb      	str	r3, [r7, #28]
 80037e0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037e2:	69b9      	ldr	r1, [r7, #24]
 80037e4:	69fa      	ldr	r2, [r7, #28]
 80037e6:	e841 2300 	strex	r3, r2, [r1]
 80037ea:	617b      	str	r3, [r7, #20]
   return(result);
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d1e6      	bne.n	80037c0 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80037f2:	e002      	b.n	80037fa <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80037f4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80037f6:	f7fc fe97 	bl	8000528 <HAL_UART_TxCpltCallback>
}
 80037fa:	bf00      	nop
 80037fc:	3740      	adds	r7, #64	; 0x40
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}

08003802 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003802:	b580      	push	{r7, lr}
 8003804:	b084      	sub	sp, #16
 8003806:	af00      	add	r7, sp, #0
 8003808:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800380e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003810:	68f8      	ldr	r0, [r7, #12]
 8003812:	f7fc fe6d 	bl	80004f0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003816:	bf00      	nop
 8003818:	3710      	adds	r7, #16
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}

0800381e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800381e:	b580      	push	{r7, lr}
 8003820:	b086      	sub	sp, #24
 8003822:	af00      	add	r7, sp, #0
 8003824:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800382a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003830:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003836:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003842:	2b80      	cmp	r3, #128	; 0x80
 8003844:	d109      	bne.n	800385a <UART_DMAError+0x3c>
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	2b21      	cmp	r3, #33	; 0x21
 800384a:	d106      	bne.n	800385a <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	2200      	movs	r2, #0
 8003850:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8003854:	6978      	ldr	r0, [r7, #20]
 8003856:	f7ff fefe 	bl	8003656 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003864:	2b40      	cmp	r3, #64	; 0x40
 8003866:	d109      	bne.n	800387c <UART_DMAError+0x5e>
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2b22      	cmp	r3, #34	; 0x22
 800386c:	d106      	bne.n	800387c <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	2200      	movs	r2, #0
 8003872:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8003876:	6978      	ldr	r0, [r7, #20]
 8003878:	f7ff ff13 	bl	80036a2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003882:	f043 0210 	orr.w	r2, r3, #16
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800388c:	6978      	ldr	r0, [r7, #20]
 800388e:	f7ff fa71 	bl	8002d74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003892:	bf00      	nop
 8003894:	3718      	adds	r7, #24
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
	...

0800389c <__libc_init_array>:
 800389c:	b570      	push	{r4, r5, r6, lr}
 800389e:	4d0d      	ldr	r5, [pc, #52]	; (80038d4 <__libc_init_array+0x38>)
 80038a0:	4c0d      	ldr	r4, [pc, #52]	; (80038d8 <__libc_init_array+0x3c>)
 80038a2:	1b64      	subs	r4, r4, r5
 80038a4:	10a4      	asrs	r4, r4, #2
 80038a6:	2600      	movs	r6, #0
 80038a8:	42a6      	cmp	r6, r4
 80038aa:	d109      	bne.n	80038c0 <__libc_init_array+0x24>
 80038ac:	4d0b      	ldr	r5, [pc, #44]	; (80038dc <__libc_init_array+0x40>)
 80038ae:	4c0c      	ldr	r4, [pc, #48]	; (80038e0 <__libc_init_array+0x44>)
 80038b0:	f000 f820 	bl	80038f4 <_init>
 80038b4:	1b64      	subs	r4, r4, r5
 80038b6:	10a4      	asrs	r4, r4, #2
 80038b8:	2600      	movs	r6, #0
 80038ba:	42a6      	cmp	r6, r4
 80038bc:	d105      	bne.n	80038ca <__libc_init_array+0x2e>
 80038be:	bd70      	pop	{r4, r5, r6, pc}
 80038c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80038c4:	4798      	blx	r3
 80038c6:	3601      	adds	r6, #1
 80038c8:	e7ee      	b.n	80038a8 <__libc_init_array+0xc>
 80038ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80038ce:	4798      	blx	r3
 80038d0:	3601      	adds	r6, #1
 80038d2:	e7f2      	b.n	80038ba <__libc_init_array+0x1e>
 80038d4:	0800395c 	.word	0x0800395c
 80038d8:	0800395c 	.word	0x0800395c
 80038dc:	0800395c 	.word	0x0800395c
 80038e0:	08003960 	.word	0x08003960

080038e4 <memset>:
 80038e4:	4402      	add	r2, r0
 80038e6:	4603      	mov	r3, r0
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d100      	bne.n	80038ee <memset+0xa>
 80038ec:	4770      	bx	lr
 80038ee:	f803 1b01 	strb.w	r1, [r3], #1
 80038f2:	e7f9      	b.n	80038e8 <memset+0x4>

080038f4 <_init>:
 80038f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038f6:	bf00      	nop
 80038f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038fa:	bc08      	pop	{r3}
 80038fc:	469e      	mov	lr, r3
 80038fe:	4770      	bx	lr

08003900 <_fini>:
 8003900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003902:	bf00      	nop
 8003904:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003906:	bc08      	pop	{r3}
 8003908:	469e      	mov	lr, r3
 800390a:	4770      	bx	lr
