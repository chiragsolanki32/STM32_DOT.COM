
power_stop_mode_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000091ac  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08009358  08009358  00019358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080093a8  080093a8  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  080093a8  080093a8  000193a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080093b0  080093b0  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080093b0  080093b0  000193b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080093b4  080093b4  000193b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  080093b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000868  20000090  08009448  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008f8  08009448  000208f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001755d  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034ba  00000000  00000000  0003761d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001088  00000000  00000000  0003aad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f40  00000000  00000000  0003bb60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a794  00000000  00000000  0003caa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014941  00000000  00000000  00067234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fb768  00000000  00000000  0007bb75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001772dd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004580  00000000  00000000  00177330  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000090 	.word	0x20000090
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08009340 	.word	0x08009340

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000094 	.word	0x20000094
 80001e8:	08009340 	.word	0x08009340

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f4:	f000 fa67 	bl	80009c6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f8:	f000 f80a 	bl	8000510 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004fc:	f000 f89a 	bl	8000634 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000500:	f000 f86a 	bl	80005d8 <MX_LPUART1_UART_Init>
  MX_USB_HOST_Init();
 8000504:	f008 fab8 	bl	8008a78 <MX_USB_HOST_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000508:	f008 fadc 	bl	8008ac4 <MX_USB_HOST_Process>
 800050c:	e7fc      	b.n	8000508 <main+0x18>
	...

08000510 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b096      	sub	sp, #88	; 0x58
 8000514:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000516:	f107 0314 	add.w	r3, r7, #20
 800051a:	2244      	movs	r2, #68	; 0x44
 800051c:	2100      	movs	r1, #0
 800051e:	4618      	mov	r0, r3
 8000520:	f008 fe08 	bl	8009134 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000524:	463b      	mov	r3, r7
 8000526:	2200      	movs	r2, #0
 8000528:	601a      	str	r2, [r3, #0]
 800052a:	605a      	str	r2, [r3, #4]
 800052c:	609a      	str	r2, [r3, #8]
 800052e:	60da      	str	r2, [r3, #12]
 8000530:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000532:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000536:	f002 f923 	bl	8002780 <HAL_PWREx_ControlVoltageScaling>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
 800053e:	d001      	beq.n	8000544 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000540:	f000 f912 	bl	8000768 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000544:	f002 f8fe 	bl	8002744 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000548:	4b22      	ldr	r3, [pc, #136]	; (80005d4 <SystemClock_Config+0xc4>)
 800054a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800054e:	4a21      	ldr	r2, [pc, #132]	; (80005d4 <SystemClock_Config+0xc4>)
 8000550:	f023 0318 	bic.w	r3, r3, #24
 8000554:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000558:	2314      	movs	r3, #20
 800055a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800055c:	2301      	movs	r3, #1
 800055e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000560:	2301      	movs	r3, #1
 8000562:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000564:	2300      	movs	r3, #0
 8000566:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_9;
 8000568:	2390      	movs	r3, #144	; 0x90
 800056a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800056c:	2302      	movs	r3, #2
 800056e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000570:	2301      	movs	r3, #1
 8000572:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000574:	2305      	movs	r3, #5
 8000576:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 71;
 8000578:	2347      	movs	r3, #71	; 0x47
 800057a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800057c:	2302      	movs	r3, #2
 800057e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000580:	2302      	movs	r3, #2
 8000582:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV6;
 8000584:	2306      	movs	r3, #6
 8000586:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000588:	f107 0314 	add.w	r3, r7, #20
 800058c:	4618      	mov	r0, r3
 800058e:	f002 f96d 	bl	800286c <HAL_RCC_OscConfig>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d001      	beq.n	800059c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000598:	f000 f8e6 	bl	8000768 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800059c:	230f      	movs	r3, #15
 800059e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a0:	2303      	movs	r3, #3
 80005a2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 80005a4:	2390      	movs	r3, #144	; 0x90
 80005a6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ae:	2300      	movs	r3, #0
 80005b0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005b2:	463b      	mov	r3, r7
 80005b4:	2100      	movs	r1, #0
 80005b6:	4618      	mov	r0, r3
 80005b8:	f002 fd72 	bl	80030a0 <HAL_RCC_ClockConfig>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80005c2:	f000 f8d1 	bl	8000768 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80005c6:	f003 fa8b 	bl	8003ae0 <HAL_RCCEx_EnableMSIPLLMode>
}
 80005ca:	bf00      	nop
 80005cc:	3758      	adds	r7, #88	; 0x58
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	40021000 	.word	0x40021000

080005d8 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80005dc:	4b12      	ldr	r3, [pc, #72]	; (8000628 <MX_LPUART1_UART_Init+0x50>)
 80005de:	4a13      	ldr	r2, [pc, #76]	; (800062c <MX_LPUART1_UART_Init+0x54>)
 80005e0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 80005e2:	4b11      	ldr	r3, [pc, #68]	; (8000628 <MX_LPUART1_UART_Init+0x50>)
 80005e4:	4a12      	ldr	r2, [pc, #72]	; (8000630 <MX_LPUART1_UART_Init+0x58>)
 80005e6:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 80005e8:	4b0f      	ldr	r3, [pc, #60]	; (8000628 <MX_LPUART1_UART_Init+0x50>)
 80005ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80005ee:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80005f0:	4b0d      	ldr	r3, [pc, #52]	; (8000628 <MX_LPUART1_UART_Init+0x50>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80005f6:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <MX_LPUART1_UART_Init+0x50>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80005fc:	4b0a      	ldr	r3, [pc, #40]	; (8000628 <MX_LPUART1_UART_Init+0x50>)
 80005fe:	220c      	movs	r2, #12
 8000600:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000602:	4b09      	ldr	r3, [pc, #36]	; (8000628 <MX_LPUART1_UART_Init+0x50>)
 8000604:	2200      	movs	r2, #0
 8000606:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000608:	4b07      	ldr	r3, [pc, #28]	; (8000628 <MX_LPUART1_UART_Init+0x50>)
 800060a:	2200      	movs	r2, #0
 800060c:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800060e:	4b06      	ldr	r3, [pc, #24]	; (8000628 <MX_LPUART1_UART_Init+0x50>)
 8000610:	2200      	movs	r2, #0
 8000612:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000614:	4804      	ldr	r0, [pc, #16]	; (8000628 <MX_LPUART1_UART_Init+0x50>)
 8000616:	f003 fc41 	bl	8003e9c <HAL_UART_Init>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8000620:	f000 f8a2 	bl	8000768 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000624:	bf00      	nop
 8000626:	bd80      	pop	{r7, pc}
 8000628:	200000ac 	.word	0x200000ac
 800062c:	40008000 	.word	0x40008000
 8000630:	00033324 	.word	0x00033324

08000634 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b08a      	sub	sp, #40	; 0x28
 8000638:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800063a:	f107 0314 	add.w	r3, r7, #20
 800063e:	2200      	movs	r2, #0
 8000640:	601a      	str	r2, [r3, #0]
 8000642:	605a      	str	r2, [r3, #4]
 8000644:	609a      	str	r2, [r3, #8]
 8000646:	60da      	str	r2, [r3, #12]
 8000648:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800064a:	4b43      	ldr	r3, [pc, #268]	; (8000758 <MX_GPIO_Init+0x124>)
 800064c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800064e:	4a42      	ldr	r2, [pc, #264]	; (8000758 <MX_GPIO_Init+0x124>)
 8000650:	f043 0304 	orr.w	r3, r3, #4
 8000654:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000656:	4b40      	ldr	r3, [pc, #256]	; (8000758 <MX_GPIO_Init+0x124>)
 8000658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800065a:	f003 0304 	and.w	r3, r3, #4
 800065e:	613b      	str	r3, [r7, #16]
 8000660:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000662:	4b3d      	ldr	r3, [pc, #244]	; (8000758 <MX_GPIO_Init+0x124>)
 8000664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000666:	4a3c      	ldr	r2, [pc, #240]	; (8000758 <MX_GPIO_Init+0x124>)
 8000668:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800066c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800066e:	4b3a      	ldr	r3, [pc, #232]	; (8000758 <MX_GPIO_Init+0x124>)
 8000670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000672:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000676:	60fb      	str	r3, [r7, #12]
 8000678:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800067a:	4b37      	ldr	r3, [pc, #220]	; (8000758 <MX_GPIO_Init+0x124>)
 800067c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800067e:	4a36      	ldr	r2, [pc, #216]	; (8000758 <MX_GPIO_Init+0x124>)
 8000680:	f043 0302 	orr.w	r3, r3, #2
 8000684:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000686:	4b34      	ldr	r3, [pc, #208]	; (8000758 <MX_GPIO_Init+0x124>)
 8000688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800068a:	f003 0302 	and.w	r3, r3, #2
 800068e:	60bb      	str	r3, [r7, #8]
 8000690:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000692:	4b31      	ldr	r3, [pc, #196]	; (8000758 <MX_GPIO_Init+0x124>)
 8000694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000696:	4a30      	ldr	r2, [pc, #192]	; (8000758 <MX_GPIO_Init+0x124>)
 8000698:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800069c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800069e:	4b2e      	ldr	r3, [pc, #184]	; (8000758 <MX_GPIO_Init+0x124>)
 80006a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006a6:	607b      	str	r3, [r7, #4]
 80006a8:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 80006aa:	f002 f8cf 	bl	800284c <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ae:	4b2a      	ldr	r3, [pc, #168]	; (8000758 <MX_GPIO_Init+0x124>)
 80006b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006b2:	4a29      	ldr	r2, [pc, #164]	; (8000758 <MX_GPIO_Init+0x124>)
 80006b4:	f043 0301 	orr.w	r3, r3, #1
 80006b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006ba:	4b27      	ldr	r3, [pc, #156]	; (8000758 <MX_GPIO_Init+0x124>)
 80006bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006be:	f003 0301 	and.w	r3, r3, #1
 80006c2:	603b      	str	r3, [r7, #0]
 80006c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80006c6:	2200      	movs	r2, #0
 80006c8:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 80006cc:	4823      	ldr	r0, [pc, #140]	; (800075c <MX_GPIO_Init+0x128>)
 80006ce:	f000 fcb7 	bl	8001040 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USB_PowerSwitchOn_Pin|SMPS_V1_Pin|SMPS_EN_Pin|SMPS_SW_Pin, GPIO_PIN_RESET);
 80006d2:	2200      	movs	r2, #0
 80006d4:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
 80006d8:	4821      	ldr	r0, [pc, #132]	; (8000760 <MX_GPIO_Init+0x12c>)
 80006da:	f000 fcb1 	bl	8001040 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006e4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80006e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ea:	2300      	movs	r3, #0
 80006ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006ee:	f107 0314 	add.w	r3, r7, #20
 80006f2:	4619      	mov	r1, r3
 80006f4:	481b      	ldr	r0, [pc, #108]	; (8000764 <MX_GPIO_Init+0x130>)
 80006f6:	f000 fb11 	bl	8000d1c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80006fa:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 80006fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000700:	2301      	movs	r3, #1
 8000702:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000704:	2300      	movs	r3, #0
 8000706:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000708:	2300      	movs	r3, #0
 800070a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800070c:	f107 0314 	add.w	r3, r7, #20
 8000710:	4619      	mov	r1, r3
 8000712:	4812      	ldr	r0, [pc, #72]	; (800075c <MX_GPIO_Init+0x128>)
 8000714:	f000 fb02 	bl	8000d1c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OverCurrent_Pin SMPS_PG_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin|SMPS_PG_Pin;
 8000718:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 800071c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800071e:	2300      	movs	r3, #0
 8000720:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000722:	2300      	movs	r3, #0
 8000724:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000726:	f107 0314 	add.w	r3, r7, #20
 800072a:	4619      	mov	r1, r3
 800072c:	480c      	ldr	r0, [pc, #48]	; (8000760 <MX_GPIO_Init+0x12c>)
 800072e:	f000 faf5 	bl	8000d1c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_PowerSwitchOn_Pin SMPS_V1_Pin SMPS_EN_Pin SMPS_SW_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin|SMPS_V1_Pin|SMPS_EN_Pin|SMPS_SW_Pin;
 8000732:	f44f 5331 	mov.w	r3, #11328	; 0x2c40
 8000736:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000738:	2301      	movs	r3, #1
 800073a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073c:	2300      	movs	r3, #0
 800073e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000740:	2300      	movs	r3, #0
 8000742:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000744:	f107 0314 	add.w	r3, r7, #20
 8000748:	4619      	mov	r1, r3
 800074a:	4805      	ldr	r0, [pc, #20]	; (8000760 <MX_GPIO_Init+0x12c>)
 800074c:	f000 fae6 	bl	8000d1c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000750:	bf00      	nop
 8000752:	3728      	adds	r7, #40	; 0x28
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	40021000 	.word	0x40021000
 800075c:	48000400 	.word	0x48000400
 8000760:	48001800 	.word	0x48001800
 8000764:	48000800 	.word	0x48000800

08000768 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800076c:	b672      	cpsid	i
}
 800076e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000770:	e7fe      	b.n	8000770 <Error_Handler+0x8>
	...

08000774 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000774:	b480      	push	{r7}
 8000776:	b083      	sub	sp, #12
 8000778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800077a:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <HAL_MspInit+0x44>)
 800077c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800077e:	4a0e      	ldr	r2, [pc, #56]	; (80007b8 <HAL_MspInit+0x44>)
 8000780:	f043 0301 	orr.w	r3, r3, #1
 8000784:	6613      	str	r3, [r2, #96]	; 0x60
 8000786:	4b0c      	ldr	r3, [pc, #48]	; (80007b8 <HAL_MspInit+0x44>)
 8000788:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800078a:	f003 0301 	and.w	r3, r3, #1
 800078e:	607b      	str	r3, [r7, #4]
 8000790:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000792:	4b09      	ldr	r3, [pc, #36]	; (80007b8 <HAL_MspInit+0x44>)
 8000794:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000796:	4a08      	ldr	r2, [pc, #32]	; (80007b8 <HAL_MspInit+0x44>)
 8000798:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800079c:	6593      	str	r3, [r2, #88]	; 0x58
 800079e:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <HAL_MspInit+0x44>)
 80007a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007a6:	603b      	str	r3, [r7, #0]
 80007a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007aa:	bf00      	nop
 80007ac:	370c      	adds	r7, #12
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr
 80007b6:	bf00      	nop
 80007b8:	40021000 	.word	0x40021000

080007bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b0ac      	sub	sp, #176	; 0xb0
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]
 80007cc:	605a      	str	r2, [r3, #4]
 80007ce:	609a      	str	r2, [r3, #8]
 80007d0:	60da      	str	r2, [r3, #12]
 80007d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007d4:	f107 0310 	add.w	r3, r7, #16
 80007d8:	228c      	movs	r2, #140	; 0x8c
 80007da:	2100      	movs	r1, #0
 80007dc:	4618      	mov	r0, r3
 80007de:	f008 fca9 	bl	8009134 <memset>
  if(huart->Instance==LPUART1)
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	4a22      	ldr	r2, [pc, #136]	; (8000870 <HAL_UART_MspInit+0xb4>)
 80007e8:	4293      	cmp	r3, r2
 80007ea:	d13d      	bne.n	8000868 <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80007ec:	2320      	movs	r3, #32
 80007ee:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80007f0:	2300      	movs	r3, #0
 80007f2:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007f4:	f107 0310 	add.w	r3, r7, #16
 80007f8:	4618      	mov	r0, r3
 80007fa:	f002 fe75 	bl	80034e8 <HAL_RCCEx_PeriphCLKConfig>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000804:	f7ff ffb0 	bl	8000768 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000808:	4b1a      	ldr	r3, [pc, #104]	; (8000874 <HAL_UART_MspInit+0xb8>)
 800080a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800080c:	4a19      	ldr	r2, [pc, #100]	; (8000874 <HAL_UART_MspInit+0xb8>)
 800080e:	f043 0301 	orr.w	r3, r3, #1
 8000812:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000814:	4b17      	ldr	r3, [pc, #92]	; (8000874 <HAL_UART_MspInit+0xb8>)
 8000816:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000818:	f003 0301 	and.w	r3, r3, #1
 800081c:	60fb      	str	r3, [r7, #12]
 800081e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000820:	4b14      	ldr	r3, [pc, #80]	; (8000874 <HAL_UART_MspInit+0xb8>)
 8000822:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000824:	4a13      	ldr	r2, [pc, #76]	; (8000874 <HAL_UART_MspInit+0xb8>)
 8000826:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800082a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800082c:	4b11      	ldr	r3, [pc, #68]	; (8000874 <HAL_UART_MspInit+0xb8>)
 800082e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000830:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000834:	60bb      	str	r3, [r7, #8]
 8000836:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8000838:	f002 f808 	bl	800284c <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800083c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000840:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000844:	2302      	movs	r3, #2
 8000846:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084a:	2300      	movs	r3, #0
 800084c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000850:	2303      	movs	r3, #3
 8000852:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000856:	2308      	movs	r3, #8
 8000858:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800085c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000860:	4619      	mov	r1, r3
 8000862:	4805      	ldr	r0, [pc, #20]	; (8000878 <HAL_UART_MspInit+0xbc>)
 8000864:	f000 fa5a 	bl	8000d1c <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000868:	bf00      	nop
 800086a:	37b0      	adds	r7, #176	; 0xb0
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	40008000 	.word	0x40008000
 8000874:	40021000 	.word	0x40021000
 8000878:	48001800 	.word	0x48001800

0800087c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000880:	e7fe      	b.n	8000880 <NMI_Handler+0x4>

08000882 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000882:	b480      	push	{r7}
 8000884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000886:	e7fe      	b.n	8000886 <HardFault_Handler+0x4>

08000888 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800088c:	e7fe      	b.n	800088c <MemManage_Handler+0x4>

0800088e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800088e:	b480      	push	{r7}
 8000890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000892:	e7fe      	b.n	8000892 <BusFault_Handler+0x4>

08000894 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000898:	e7fe      	b.n	8000898 <UsageFault_Handler+0x4>

0800089a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800089a:	b480      	push	{r7}
 800089c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800089e:	bf00      	nop
 80008a0:	46bd      	mov	sp, r7
 80008a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a6:	4770      	bx	lr

080008a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008ac:	bf00      	nop
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr

080008b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008b6:	b480      	push	{r7}
 80008b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008ba:	bf00      	nop
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr

080008c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008c8:	f000 f8d2 	bl	8000a70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008cc:	bf00      	nop
 80008ce:	bd80      	pop	{r7, pc}

080008d0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80008d4:	4802      	ldr	r0, [pc, #8]	; (80008e0 <OTG_FS_IRQHandler+0x10>)
 80008d6:	f000 fe31 	bl	800153c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	200005e4 	.word	0x200005e4

080008e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b086      	sub	sp, #24
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008ec:	4a14      	ldr	r2, [pc, #80]	; (8000940 <_sbrk+0x5c>)
 80008ee:	4b15      	ldr	r3, [pc, #84]	; (8000944 <_sbrk+0x60>)
 80008f0:	1ad3      	subs	r3, r2, r3
 80008f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008f4:	697b      	ldr	r3, [r7, #20]
 80008f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008f8:	4b13      	ldr	r3, [pc, #76]	; (8000948 <_sbrk+0x64>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d102      	bne.n	8000906 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000900:	4b11      	ldr	r3, [pc, #68]	; (8000948 <_sbrk+0x64>)
 8000902:	4a12      	ldr	r2, [pc, #72]	; (800094c <_sbrk+0x68>)
 8000904:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000906:	4b10      	ldr	r3, [pc, #64]	; (8000948 <_sbrk+0x64>)
 8000908:	681a      	ldr	r2, [r3, #0]
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	4413      	add	r3, r2
 800090e:	693a      	ldr	r2, [r7, #16]
 8000910:	429a      	cmp	r2, r3
 8000912:	d207      	bcs.n	8000924 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000914:	f008 fbd4 	bl	80090c0 <__errno>
 8000918:	4603      	mov	r3, r0
 800091a:	220c      	movs	r2, #12
 800091c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800091e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000922:	e009      	b.n	8000938 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000924:	4b08      	ldr	r3, [pc, #32]	; (8000948 <_sbrk+0x64>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800092a:	4b07      	ldr	r3, [pc, #28]	; (8000948 <_sbrk+0x64>)
 800092c:	681a      	ldr	r2, [r3, #0]
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	4413      	add	r3, r2
 8000932:	4a05      	ldr	r2, [pc, #20]	; (8000948 <_sbrk+0x64>)
 8000934:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000936:	68fb      	ldr	r3, [r7, #12]
}
 8000938:	4618      	mov	r0, r3
 800093a:	3718      	adds	r7, #24
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	20050000 	.word	0x20050000
 8000944:	00000400 	.word	0x00000400
 8000948:	20000130 	.word	0x20000130
 800094c:	200008f8 	.word	0x200008f8

08000950 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000954:	4b06      	ldr	r3, [pc, #24]	; (8000970 <SystemInit+0x20>)
 8000956:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800095a:	4a05      	ldr	r2, [pc, #20]	; (8000970 <SystemInit+0x20>)
 800095c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000960:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000964:	bf00      	nop
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	e000ed00 	.word	0xe000ed00

08000974 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000974:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009ac <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000978:	f7ff ffea 	bl	8000950 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800097c:	480c      	ldr	r0, [pc, #48]	; (80009b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800097e:	490d      	ldr	r1, [pc, #52]	; (80009b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000980:	4a0d      	ldr	r2, [pc, #52]	; (80009b8 <LoopForever+0xe>)
  movs r3, #0
 8000982:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000984:	e002      	b.n	800098c <LoopCopyDataInit>

08000986 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000986:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000988:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800098a:	3304      	adds	r3, #4

0800098c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800098c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800098e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000990:	d3f9      	bcc.n	8000986 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000992:	4a0a      	ldr	r2, [pc, #40]	; (80009bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000994:	4c0a      	ldr	r4, [pc, #40]	; (80009c0 <LoopForever+0x16>)
  movs r3, #0
 8000996:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000998:	e001      	b.n	800099e <LoopFillZerobss>

0800099a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800099a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800099c:	3204      	adds	r2, #4

0800099e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800099e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009a0:	d3fb      	bcc.n	800099a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009a2:	f008 fb93 	bl	80090cc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009a6:	f7ff fda3 	bl	80004f0 <main>

080009aa <LoopForever>:

LoopForever:
    b LoopForever
 80009aa:	e7fe      	b.n	80009aa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80009ac:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80009b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009b4:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 80009b8:	080093b8 	.word	0x080093b8
  ldr r2, =_sbss
 80009bc:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 80009c0:	200008f8 	.word	0x200008f8

080009c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009c4:	e7fe      	b.n	80009c4 <ADC1_2_IRQHandler>

080009c6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009c6:	b580      	push	{r7, lr}
 80009c8:	b082      	sub	sp, #8
 80009ca:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009cc:	2300      	movs	r3, #0
 80009ce:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009d0:	2003      	movs	r0, #3
 80009d2:	f000 f961 	bl	8000c98 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009d6:	2000      	movs	r0, #0
 80009d8:	f000 f80e 	bl	80009f8 <HAL_InitTick>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d002      	beq.n	80009e8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80009e2:	2301      	movs	r3, #1
 80009e4:	71fb      	strb	r3, [r7, #7]
 80009e6:	e001      	b.n	80009ec <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80009e8:	f7ff fec4 	bl	8000774 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80009ec:	79fb      	ldrb	r3, [r7, #7]
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	3708      	adds	r7, #8
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
	...

080009f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b084      	sub	sp, #16
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a00:	2300      	movs	r3, #0
 8000a02:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000a04:	4b17      	ldr	r3, [pc, #92]	; (8000a64 <HAL_InitTick+0x6c>)
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d023      	beq.n	8000a54 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000a0c:	4b16      	ldr	r3, [pc, #88]	; (8000a68 <HAL_InitTick+0x70>)
 8000a0e:	681a      	ldr	r2, [r3, #0]
 8000a10:	4b14      	ldr	r3, [pc, #80]	; (8000a64 <HAL_InitTick+0x6c>)
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	4619      	mov	r1, r3
 8000a16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a22:	4618      	mov	r0, r3
 8000a24:	f000 f96d 	bl	8000d02 <HAL_SYSTICK_Config>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d10f      	bne.n	8000a4e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	2b0f      	cmp	r3, #15
 8000a32:	d809      	bhi.n	8000a48 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a34:	2200      	movs	r2, #0
 8000a36:	6879      	ldr	r1, [r7, #4]
 8000a38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a3c:	f000 f937 	bl	8000cae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a40:	4a0a      	ldr	r2, [pc, #40]	; (8000a6c <HAL_InitTick+0x74>)
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	6013      	str	r3, [r2, #0]
 8000a46:	e007      	b.n	8000a58 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	73fb      	strb	r3, [r7, #15]
 8000a4c:	e004      	b.n	8000a58 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	73fb      	strb	r3, [r7, #15]
 8000a52:	e001      	b.n	8000a58 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a54:	2301      	movs	r3, #1
 8000a56:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	3710      	adds	r7, #16
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	20000008 	.word	0x20000008
 8000a68:	20000000 	.word	0x20000000
 8000a6c:	20000004 	.word	0x20000004

08000a70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a74:	4b06      	ldr	r3, [pc, #24]	; (8000a90 <HAL_IncTick+0x20>)
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	461a      	mov	r2, r3
 8000a7a:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <HAL_IncTick+0x24>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	4413      	add	r3, r2
 8000a80:	4a04      	ldr	r2, [pc, #16]	; (8000a94 <HAL_IncTick+0x24>)
 8000a82:	6013      	str	r3, [r2, #0]
}
 8000a84:	bf00      	nop
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	20000008 	.word	0x20000008
 8000a94:	20000134 	.word	0x20000134

08000a98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a9c:	4b03      	ldr	r3, [pc, #12]	; (8000aac <HAL_GetTick+0x14>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	20000134 	.word	0x20000134

08000ab0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b084      	sub	sp, #16
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ab8:	f7ff ffee 	bl	8000a98 <HAL_GetTick>
 8000abc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ac8:	d005      	beq.n	8000ad6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000aca:	4b0a      	ldr	r3, [pc, #40]	; (8000af4 <HAL_Delay+0x44>)
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	461a      	mov	r2, r3
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	4413      	add	r3, r2
 8000ad4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ad6:	bf00      	nop
 8000ad8:	f7ff ffde 	bl	8000a98 <HAL_GetTick>
 8000adc:	4602      	mov	r2, r0
 8000ade:	68bb      	ldr	r3, [r7, #8]
 8000ae0:	1ad3      	subs	r3, r2, r3
 8000ae2:	68fa      	ldr	r2, [r7, #12]
 8000ae4:	429a      	cmp	r2, r3
 8000ae6:	d8f7      	bhi.n	8000ad8 <HAL_Delay+0x28>
  {
  }
}
 8000ae8:	bf00      	nop
 8000aea:	bf00      	nop
 8000aec:	3710      	adds	r7, #16
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	20000008 	.word	0x20000008

08000af8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b085      	sub	sp, #20
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	f003 0307 	and.w	r3, r3, #7
 8000b06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b08:	4b0c      	ldr	r3, [pc, #48]	; (8000b3c <__NVIC_SetPriorityGrouping+0x44>)
 8000b0a:	68db      	ldr	r3, [r3, #12]
 8000b0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b0e:	68ba      	ldr	r2, [r7, #8]
 8000b10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b14:	4013      	ands	r3, r2
 8000b16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b1c:	68bb      	ldr	r3, [r7, #8]
 8000b1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b2a:	4a04      	ldr	r2, [pc, #16]	; (8000b3c <__NVIC_SetPriorityGrouping+0x44>)
 8000b2c:	68bb      	ldr	r3, [r7, #8]
 8000b2e:	60d3      	str	r3, [r2, #12]
}
 8000b30:	bf00      	nop
 8000b32:	3714      	adds	r7, #20
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr
 8000b3c:	e000ed00 	.word	0xe000ed00

08000b40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b44:	4b04      	ldr	r3, [pc, #16]	; (8000b58 <__NVIC_GetPriorityGrouping+0x18>)
 8000b46:	68db      	ldr	r3, [r3, #12]
 8000b48:	0a1b      	lsrs	r3, r3, #8
 8000b4a:	f003 0307 	and.w	r3, r3, #7
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr
 8000b58:	e000ed00 	.word	0xe000ed00

08000b5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	4603      	mov	r3, r0
 8000b64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	db0b      	blt.n	8000b86 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b6e:	79fb      	ldrb	r3, [r7, #7]
 8000b70:	f003 021f 	and.w	r2, r3, #31
 8000b74:	4907      	ldr	r1, [pc, #28]	; (8000b94 <__NVIC_EnableIRQ+0x38>)
 8000b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7a:	095b      	lsrs	r3, r3, #5
 8000b7c:	2001      	movs	r0, #1
 8000b7e:	fa00 f202 	lsl.w	r2, r0, r2
 8000b82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b86:	bf00      	nop
 8000b88:	370c      	adds	r7, #12
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	e000e100 	.word	0xe000e100

08000b98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	6039      	str	r1, [r7, #0]
 8000ba2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	db0a      	blt.n	8000bc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	b2da      	uxtb	r2, r3
 8000bb0:	490c      	ldr	r1, [pc, #48]	; (8000be4 <__NVIC_SetPriority+0x4c>)
 8000bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb6:	0112      	lsls	r2, r2, #4
 8000bb8:	b2d2      	uxtb	r2, r2
 8000bba:	440b      	add	r3, r1
 8000bbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bc0:	e00a      	b.n	8000bd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	b2da      	uxtb	r2, r3
 8000bc6:	4908      	ldr	r1, [pc, #32]	; (8000be8 <__NVIC_SetPriority+0x50>)
 8000bc8:	79fb      	ldrb	r3, [r7, #7]
 8000bca:	f003 030f 	and.w	r3, r3, #15
 8000bce:	3b04      	subs	r3, #4
 8000bd0:	0112      	lsls	r2, r2, #4
 8000bd2:	b2d2      	uxtb	r2, r2
 8000bd4:	440b      	add	r3, r1
 8000bd6:	761a      	strb	r2, [r3, #24]
}
 8000bd8:	bf00      	nop
 8000bda:	370c      	adds	r7, #12
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr
 8000be4:	e000e100 	.word	0xe000e100
 8000be8:	e000ed00 	.word	0xe000ed00

08000bec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b089      	sub	sp, #36	; 0x24
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	60f8      	str	r0, [r7, #12]
 8000bf4:	60b9      	str	r1, [r7, #8]
 8000bf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	f003 0307 	and.w	r3, r3, #7
 8000bfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c00:	69fb      	ldr	r3, [r7, #28]
 8000c02:	f1c3 0307 	rsb	r3, r3, #7
 8000c06:	2b04      	cmp	r3, #4
 8000c08:	bf28      	it	cs
 8000c0a:	2304      	movcs	r3, #4
 8000c0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c0e:	69fb      	ldr	r3, [r7, #28]
 8000c10:	3304      	adds	r3, #4
 8000c12:	2b06      	cmp	r3, #6
 8000c14:	d902      	bls.n	8000c1c <NVIC_EncodePriority+0x30>
 8000c16:	69fb      	ldr	r3, [r7, #28]
 8000c18:	3b03      	subs	r3, #3
 8000c1a:	e000      	b.n	8000c1e <NVIC_EncodePriority+0x32>
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c24:	69bb      	ldr	r3, [r7, #24]
 8000c26:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2a:	43da      	mvns	r2, r3
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	401a      	ands	r2, r3
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c34:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c3e:	43d9      	mvns	r1, r3
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c44:	4313      	orrs	r3, r2
         );
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3724      	adds	r7, #36	; 0x24
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
	...

08000c54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	3b01      	subs	r3, #1
 8000c60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c64:	d301      	bcc.n	8000c6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c66:	2301      	movs	r3, #1
 8000c68:	e00f      	b.n	8000c8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c6a:	4a0a      	ldr	r2, [pc, #40]	; (8000c94 <SysTick_Config+0x40>)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	3b01      	subs	r3, #1
 8000c70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c72:	210f      	movs	r1, #15
 8000c74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c78:	f7ff ff8e 	bl	8000b98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c7c:	4b05      	ldr	r3, [pc, #20]	; (8000c94 <SysTick_Config+0x40>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c82:	4b04      	ldr	r3, [pc, #16]	; (8000c94 <SysTick_Config+0x40>)
 8000c84:	2207      	movs	r2, #7
 8000c86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c88:	2300      	movs	r3, #0
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	3708      	adds	r7, #8
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	e000e010 	.word	0xe000e010

08000c98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ca0:	6878      	ldr	r0, [r7, #4]
 8000ca2:	f7ff ff29 	bl	8000af8 <__NVIC_SetPriorityGrouping>
}
 8000ca6:	bf00      	nop
 8000ca8:	3708      	adds	r7, #8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}

08000cae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	b086      	sub	sp, #24
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	60b9      	str	r1, [r7, #8]
 8000cb8:	607a      	str	r2, [r7, #4]
 8000cba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000cc0:	f7ff ff3e 	bl	8000b40 <__NVIC_GetPriorityGrouping>
 8000cc4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cc6:	687a      	ldr	r2, [r7, #4]
 8000cc8:	68b9      	ldr	r1, [r7, #8]
 8000cca:	6978      	ldr	r0, [r7, #20]
 8000ccc:	f7ff ff8e 	bl	8000bec <NVIC_EncodePriority>
 8000cd0:	4602      	mov	r2, r0
 8000cd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cd6:	4611      	mov	r1, r2
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f7ff ff5d 	bl	8000b98 <__NVIC_SetPriority>
}
 8000cde:	bf00      	nop
 8000ce0:	3718      	adds	r7, #24
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}

08000ce6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ce6:	b580      	push	{r7, lr}
 8000ce8:	b082      	sub	sp, #8
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	4603      	mov	r3, r0
 8000cee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f7ff ff31 	bl	8000b5c <__NVIC_EnableIRQ>
}
 8000cfa:	bf00      	nop
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}

08000d02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d02:	b580      	push	{r7, lr}
 8000d04:	b082      	sub	sp, #8
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d0a:	6878      	ldr	r0, [r7, #4]
 8000d0c:	f7ff ffa2 	bl	8000c54 <SysTick_Config>
 8000d10:	4603      	mov	r3, r0
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3708      	adds	r7, #8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
	...

08000d1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b087      	sub	sp, #28
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
 8000d24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d26:	2300      	movs	r3, #0
 8000d28:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d2a:	e166      	b.n	8000ffa <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	681a      	ldr	r2, [r3, #0]
 8000d30:	2101      	movs	r1, #1
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	fa01 f303 	lsl.w	r3, r1, r3
 8000d38:	4013      	ands	r3, r2
 8000d3a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	f000 8158 	beq.w	8000ff4 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	f003 0303 	and.w	r3, r3, #3
 8000d4c:	2b01      	cmp	r3, #1
 8000d4e:	d005      	beq.n	8000d5c <HAL_GPIO_Init+0x40>
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	f003 0303 	and.w	r3, r3, #3
 8000d58:	2b02      	cmp	r3, #2
 8000d5a:	d130      	bne.n	8000dbe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	689b      	ldr	r3, [r3, #8]
 8000d60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	005b      	lsls	r3, r3, #1
 8000d66:	2203      	movs	r2, #3
 8000d68:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6c:	43db      	mvns	r3, r3
 8000d6e:	693a      	ldr	r2, [r7, #16]
 8000d70:	4013      	ands	r3, r2
 8000d72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	68da      	ldr	r2, [r3, #12]
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	005b      	lsls	r3, r3, #1
 8000d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d80:	693a      	ldr	r2, [r7, #16]
 8000d82:	4313      	orrs	r3, r2
 8000d84:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	693a      	ldr	r2, [r7, #16]
 8000d8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d92:	2201      	movs	r2, #1
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9a:	43db      	mvns	r3, r3
 8000d9c:	693a      	ldr	r2, [r7, #16]
 8000d9e:	4013      	ands	r3, r2
 8000da0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	091b      	lsrs	r3, r3, #4
 8000da8:	f003 0201 	and.w	r2, r3, #1
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	fa02 f303 	lsl.w	r3, r2, r3
 8000db2:	693a      	ldr	r2, [r7, #16]
 8000db4:	4313      	orrs	r3, r2
 8000db6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	693a      	ldr	r2, [r7, #16]
 8000dbc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	f003 0303 	and.w	r3, r3, #3
 8000dc6:	2b03      	cmp	r3, #3
 8000dc8:	d017      	beq.n	8000dfa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	68db      	ldr	r3, [r3, #12]
 8000dce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	005b      	lsls	r3, r3, #1
 8000dd4:	2203      	movs	r2, #3
 8000dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dda:	43db      	mvns	r3, r3
 8000ddc:	693a      	ldr	r2, [r7, #16]
 8000dde:	4013      	ands	r3, r2
 8000de0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	689a      	ldr	r2, [r3, #8]
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	005b      	lsls	r3, r3, #1
 8000dea:	fa02 f303 	lsl.w	r3, r2, r3
 8000dee:	693a      	ldr	r2, [r7, #16]
 8000df0:	4313      	orrs	r3, r2
 8000df2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	693a      	ldr	r2, [r7, #16]
 8000df8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	f003 0303 	and.w	r3, r3, #3
 8000e02:	2b02      	cmp	r3, #2
 8000e04:	d123      	bne.n	8000e4e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	08da      	lsrs	r2, r3, #3
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	3208      	adds	r2, #8
 8000e0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e12:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	f003 0307 	and.w	r3, r3, #7
 8000e1a:	009b      	lsls	r3, r3, #2
 8000e1c:	220f      	movs	r2, #15
 8000e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e22:	43db      	mvns	r3, r3
 8000e24:	693a      	ldr	r2, [r7, #16]
 8000e26:	4013      	ands	r3, r2
 8000e28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	691a      	ldr	r2, [r3, #16]
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	f003 0307 	and.w	r3, r3, #7
 8000e34:	009b      	lsls	r3, r3, #2
 8000e36:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3a:	693a      	ldr	r2, [r7, #16]
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	08da      	lsrs	r2, r3, #3
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	3208      	adds	r2, #8
 8000e48:	6939      	ldr	r1, [r7, #16]
 8000e4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	005b      	lsls	r3, r3, #1
 8000e58:	2203      	movs	r2, #3
 8000e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5e:	43db      	mvns	r3, r3
 8000e60:	693a      	ldr	r2, [r7, #16]
 8000e62:	4013      	ands	r3, r2
 8000e64:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	f003 0203 	and.w	r2, r3, #3
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	005b      	lsls	r3, r3, #1
 8000e72:	fa02 f303 	lsl.w	r3, r2, r3
 8000e76:	693a      	ldr	r2, [r7, #16]
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	693a      	ldr	r2, [r7, #16]
 8000e80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	f000 80b2 	beq.w	8000ff4 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e90:	4b61      	ldr	r3, [pc, #388]	; (8001018 <HAL_GPIO_Init+0x2fc>)
 8000e92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e94:	4a60      	ldr	r2, [pc, #384]	; (8001018 <HAL_GPIO_Init+0x2fc>)
 8000e96:	f043 0301 	orr.w	r3, r3, #1
 8000e9a:	6613      	str	r3, [r2, #96]	; 0x60
 8000e9c:	4b5e      	ldr	r3, [pc, #376]	; (8001018 <HAL_GPIO_Init+0x2fc>)
 8000e9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ea0:	f003 0301 	and.w	r3, r3, #1
 8000ea4:	60bb      	str	r3, [r7, #8]
 8000ea6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ea8:	4a5c      	ldr	r2, [pc, #368]	; (800101c <HAL_GPIO_Init+0x300>)
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	089b      	lsrs	r3, r3, #2
 8000eae:	3302      	adds	r3, #2
 8000eb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eb4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	f003 0303 	and.w	r3, r3, #3
 8000ebc:	009b      	lsls	r3, r3, #2
 8000ebe:	220f      	movs	r2, #15
 8000ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec4:	43db      	mvns	r3, r3
 8000ec6:	693a      	ldr	r2, [r7, #16]
 8000ec8:	4013      	ands	r3, r2
 8000eca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000ed2:	d02b      	beq.n	8000f2c <HAL_GPIO_Init+0x210>
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	4a52      	ldr	r2, [pc, #328]	; (8001020 <HAL_GPIO_Init+0x304>)
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d025      	beq.n	8000f28 <HAL_GPIO_Init+0x20c>
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	4a51      	ldr	r2, [pc, #324]	; (8001024 <HAL_GPIO_Init+0x308>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d01f      	beq.n	8000f24 <HAL_GPIO_Init+0x208>
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	4a50      	ldr	r2, [pc, #320]	; (8001028 <HAL_GPIO_Init+0x30c>)
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d019      	beq.n	8000f20 <HAL_GPIO_Init+0x204>
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	4a4f      	ldr	r2, [pc, #316]	; (800102c <HAL_GPIO_Init+0x310>)
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d013      	beq.n	8000f1c <HAL_GPIO_Init+0x200>
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	4a4e      	ldr	r2, [pc, #312]	; (8001030 <HAL_GPIO_Init+0x314>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d00d      	beq.n	8000f18 <HAL_GPIO_Init+0x1fc>
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	4a4d      	ldr	r2, [pc, #308]	; (8001034 <HAL_GPIO_Init+0x318>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d007      	beq.n	8000f14 <HAL_GPIO_Init+0x1f8>
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	4a4c      	ldr	r2, [pc, #304]	; (8001038 <HAL_GPIO_Init+0x31c>)
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	d101      	bne.n	8000f10 <HAL_GPIO_Init+0x1f4>
 8000f0c:	2307      	movs	r3, #7
 8000f0e:	e00e      	b.n	8000f2e <HAL_GPIO_Init+0x212>
 8000f10:	2308      	movs	r3, #8
 8000f12:	e00c      	b.n	8000f2e <HAL_GPIO_Init+0x212>
 8000f14:	2306      	movs	r3, #6
 8000f16:	e00a      	b.n	8000f2e <HAL_GPIO_Init+0x212>
 8000f18:	2305      	movs	r3, #5
 8000f1a:	e008      	b.n	8000f2e <HAL_GPIO_Init+0x212>
 8000f1c:	2304      	movs	r3, #4
 8000f1e:	e006      	b.n	8000f2e <HAL_GPIO_Init+0x212>
 8000f20:	2303      	movs	r3, #3
 8000f22:	e004      	b.n	8000f2e <HAL_GPIO_Init+0x212>
 8000f24:	2302      	movs	r3, #2
 8000f26:	e002      	b.n	8000f2e <HAL_GPIO_Init+0x212>
 8000f28:	2301      	movs	r3, #1
 8000f2a:	e000      	b.n	8000f2e <HAL_GPIO_Init+0x212>
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	697a      	ldr	r2, [r7, #20]
 8000f30:	f002 0203 	and.w	r2, r2, #3
 8000f34:	0092      	lsls	r2, r2, #2
 8000f36:	4093      	lsls	r3, r2
 8000f38:	693a      	ldr	r2, [r7, #16]
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f3e:	4937      	ldr	r1, [pc, #220]	; (800101c <HAL_GPIO_Init+0x300>)
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	089b      	lsrs	r3, r3, #2
 8000f44:	3302      	adds	r3, #2
 8000f46:	693a      	ldr	r2, [r7, #16]
 8000f48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f4c:	4b3b      	ldr	r3, [pc, #236]	; (800103c <HAL_GPIO_Init+0x320>)
 8000f4e:	689b      	ldr	r3, [r3, #8]
 8000f50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	43db      	mvns	r3, r3
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	4013      	ands	r3, r2
 8000f5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d003      	beq.n	8000f70 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8000f68:	693a      	ldr	r2, [r7, #16]
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f70:	4a32      	ldr	r2, [pc, #200]	; (800103c <HAL_GPIO_Init+0x320>)
 8000f72:	693b      	ldr	r3, [r7, #16]
 8000f74:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000f76:	4b31      	ldr	r3, [pc, #196]	; (800103c <HAL_GPIO_Init+0x320>)
 8000f78:	68db      	ldr	r3, [r3, #12]
 8000f7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	43db      	mvns	r3, r3
 8000f80:	693a      	ldr	r2, [r7, #16]
 8000f82:	4013      	ands	r3, r2
 8000f84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d003      	beq.n	8000f9a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8000f92:	693a      	ldr	r2, [r7, #16]
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	4313      	orrs	r3, r2
 8000f98:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f9a:	4a28      	ldr	r2, [pc, #160]	; (800103c <HAL_GPIO_Init+0x320>)
 8000f9c:	693b      	ldr	r3, [r7, #16]
 8000f9e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000fa0:	4b26      	ldr	r3, [pc, #152]	; (800103c <HAL_GPIO_Init+0x320>)
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	43db      	mvns	r3, r3
 8000faa:	693a      	ldr	r2, [r7, #16]
 8000fac:	4013      	ands	r3, r2
 8000fae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d003      	beq.n	8000fc4 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8000fbc:	693a      	ldr	r2, [r7, #16]
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000fc4:	4a1d      	ldr	r2, [pc, #116]	; (800103c <HAL_GPIO_Init+0x320>)
 8000fc6:	693b      	ldr	r3, [r7, #16]
 8000fc8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000fca:	4b1c      	ldr	r3, [pc, #112]	; (800103c <HAL_GPIO_Init+0x320>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	43db      	mvns	r3, r3
 8000fd4:	693a      	ldr	r2, [r7, #16]
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d003      	beq.n	8000fee <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	4313      	orrs	r3, r2
 8000fec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000fee:	4a13      	ldr	r2, [pc, #76]	; (800103c <HAL_GPIO_Init+0x320>)
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	fa22 f303 	lsr.w	r3, r2, r3
 8001004:	2b00      	cmp	r3, #0
 8001006:	f47f ae91 	bne.w	8000d2c <HAL_GPIO_Init+0x10>
  }
}
 800100a:	bf00      	nop
 800100c:	bf00      	nop
 800100e:	371c      	adds	r7, #28
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr
 8001018:	40021000 	.word	0x40021000
 800101c:	40010000 	.word	0x40010000
 8001020:	48000400 	.word	0x48000400
 8001024:	48000800 	.word	0x48000800
 8001028:	48000c00 	.word	0x48000c00
 800102c:	48001000 	.word	0x48001000
 8001030:	48001400 	.word	0x48001400
 8001034:	48001800 	.word	0x48001800
 8001038:	48001c00 	.word	0x48001c00
 800103c:	40010400 	.word	0x40010400

08001040 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	460b      	mov	r3, r1
 800104a:	807b      	strh	r3, [r7, #2]
 800104c:	4613      	mov	r3, r2
 800104e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001050:	787b      	ldrb	r3, [r7, #1]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d003      	beq.n	800105e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001056:	887a      	ldrh	r2, [r7, #2]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800105c:	e002      	b.n	8001064 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800105e:	887a      	ldrh	r2, [r7, #2]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001064:	bf00      	nop
 8001066:	370c      	adds	r7, #12
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr

08001070 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001070:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001072:	b08f      	sub	sp, #60	; 0x3c
 8001074:	af0a      	add	r7, sp, #40	; 0x28
 8001076:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d101      	bne.n	8001082 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800107e:	2301      	movs	r3, #1
 8001080:	e054      	b.n	800112c <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 800108e:	b2db      	uxtb	r3, r3
 8001090:	2b00      	cmp	r3, #0
 8001092:	d106      	bne.n	80010a2 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2200      	movs	r2, #0
 8001098:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800109c:	6878      	ldr	r0, [r7, #4]
 800109e:	f007 fd49 	bl	8008b34 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2203      	movs	r2, #3
 80010a6:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d102      	bne.n	80010bc <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2200      	movs	r2, #0
 80010ba:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4618      	mov	r0, r3
 80010c2:	f003 fbdd 	bl	8004880 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	603b      	str	r3, [r7, #0]
 80010cc:	687e      	ldr	r6, [r7, #4]
 80010ce:	466d      	mov	r5, sp
 80010d0:	f106 0410 	add.w	r4, r6, #16
 80010d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010dc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80010e0:	e885 0003 	stmia.w	r5, {r0, r1}
 80010e4:	1d33      	adds	r3, r6, #4
 80010e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010e8:	6838      	ldr	r0, [r7, #0]
 80010ea:	f003 fb8c 	bl	8004806 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	2101      	movs	r1, #1
 80010f4:	4618      	mov	r0, r3
 80010f6:	f003 fbd4 	bl	80048a2 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	603b      	str	r3, [r7, #0]
 8001100:	687e      	ldr	r6, [r7, #4]
 8001102:	466d      	mov	r5, sp
 8001104:	f106 0410 	add.w	r4, r6, #16
 8001108:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800110a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800110c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800110e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001110:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001114:	e885 0003 	stmia.w	r5, {r0, r1}
 8001118:	1d33      	adds	r3, r6, #4
 800111a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800111c:	6838      	ldr	r0, [r7, #0]
 800111e:	f003 fd59 	bl	8004bd4 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2201      	movs	r2, #1
 8001126:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 800112a:	2300      	movs	r3, #0
}
 800112c:	4618      	mov	r0, r3
 800112e:	3714      	adds	r7, #20
 8001130:	46bd      	mov	sp, r7
 8001132:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001134 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001134:	b590      	push	{r4, r7, lr}
 8001136:	b089      	sub	sp, #36	; 0x24
 8001138:	af04      	add	r7, sp, #16
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	4608      	mov	r0, r1
 800113e:	4611      	mov	r1, r2
 8001140:	461a      	mov	r2, r3
 8001142:	4603      	mov	r3, r0
 8001144:	70fb      	strb	r3, [r7, #3]
 8001146:	460b      	mov	r3, r1
 8001148:	70bb      	strb	r3, [r7, #2]
 800114a:	4613      	mov	r3, r2
 800114c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001154:	2b01      	cmp	r3, #1
 8001156:	d101      	bne.n	800115c <HAL_HCD_HC_Init+0x28>
 8001158:	2302      	movs	r3, #2
 800115a:	e076      	b.n	800124a <HAL_HCD_HC_Init+0x116>
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2201      	movs	r2, #1
 8001160:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001164:	78fb      	ldrb	r3, [r7, #3]
 8001166:	687a      	ldr	r2, [r7, #4]
 8001168:	212c      	movs	r1, #44	; 0x2c
 800116a:	fb01 f303 	mul.w	r3, r1, r3
 800116e:	4413      	add	r3, r2
 8001170:	333d      	adds	r3, #61	; 0x3d
 8001172:	2200      	movs	r2, #0
 8001174:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001176:	78fb      	ldrb	r3, [r7, #3]
 8001178:	687a      	ldr	r2, [r7, #4]
 800117a:	212c      	movs	r1, #44	; 0x2c
 800117c:	fb01 f303 	mul.w	r3, r1, r3
 8001180:	4413      	add	r3, r2
 8001182:	3338      	adds	r3, #56	; 0x38
 8001184:	787a      	ldrb	r2, [r7, #1]
 8001186:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001188:	78fb      	ldrb	r3, [r7, #3]
 800118a:	687a      	ldr	r2, [r7, #4]
 800118c:	212c      	movs	r1, #44	; 0x2c
 800118e:	fb01 f303 	mul.w	r3, r1, r3
 8001192:	4413      	add	r3, r2
 8001194:	3340      	adds	r3, #64	; 0x40
 8001196:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001198:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800119a:	78fb      	ldrb	r3, [r7, #3]
 800119c:	687a      	ldr	r2, [r7, #4]
 800119e:	212c      	movs	r1, #44	; 0x2c
 80011a0:	fb01 f303 	mul.w	r3, r1, r3
 80011a4:	4413      	add	r3, r2
 80011a6:	3339      	adds	r3, #57	; 0x39
 80011a8:	78fa      	ldrb	r2, [r7, #3]
 80011aa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80011ac:	78fb      	ldrb	r3, [r7, #3]
 80011ae:	687a      	ldr	r2, [r7, #4]
 80011b0:	212c      	movs	r1, #44	; 0x2c
 80011b2:	fb01 f303 	mul.w	r3, r1, r3
 80011b6:	4413      	add	r3, r2
 80011b8:	333f      	adds	r3, #63	; 0x3f
 80011ba:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80011be:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80011c0:	78fb      	ldrb	r3, [r7, #3]
 80011c2:	78ba      	ldrb	r2, [r7, #2]
 80011c4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80011c8:	b2d0      	uxtb	r0, r2
 80011ca:	687a      	ldr	r2, [r7, #4]
 80011cc:	212c      	movs	r1, #44	; 0x2c
 80011ce:	fb01 f303 	mul.w	r3, r1, r3
 80011d2:	4413      	add	r3, r2
 80011d4:	333a      	adds	r3, #58	; 0x3a
 80011d6:	4602      	mov	r2, r0
 80011d8:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80011da:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	da09      	bge.n	80011f6 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80011e2:	78fb      	ldrb	r3, [r7, #3]
 80011e4:	687a      	ldr	r2, [r7, #4]
 80011e6:	212c      	movs	r1, #44	; 0x2c
 80011e8:	fb01 f303 	mul.w	r3, r1, r3
 80011ec:	4413      	add	r3, r2
 80011ee:	333b      	adds	r3, #59	; 0x3b
 80011f0:	2201      	movs	r2, #1
 80011f2:	701a      	strb	r2, [r3, #0]
 80011f4:	e008      	b.n	8001208 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80011f6:	78fb      	ldrb	r3, [r7, #3]
 80011f8:	687a      	ldr	r2, [r7, #4]
 80011fa:	212c      	movs	r1, #44	; 0x2c
 80011fc:	fb01 f303 	mul.w	r3, r1, r3
 8001200:	4413      	add	r3, r2
 8001202:	333b      	adds	r3, #59	; 0x3b
 8001204:	2200      	movs	r2, #0
 8001206:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001208:	78fb      	ldrb	r3, [r7, #3]
 800120a:	687a      	ldr	r2, [r7, #4]
 800120c:	212c      	movs	r1, #44	; 0x2c
 800120e:	fb01 f303 	mul.w	r3, r1, r3
 8001212:	4413      	add	r3, r2
 8001214:	333c      	adds	r3, #60	; 0x3c
 8001216:	f897 2020 	ldrb.w	r2, [r7, #32]
 800121a:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6818      	ldr	r0, [r3, #0]
 8001220:	787c      	ldrb	r4, [r7, #1]
 8001222:	78ba      	ldrb	r2, [r7, #2]
 8001224:	78f9      	ldrb	r1, [r7, #3]
 8001226:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001228:	9302      	str	r3, [sp, #8]
 800122a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800122e:	9301      	str	r3, [sp, #4]
 8001230:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001234:	9300      	str	r3, [sp, #0]
 8001236:	4623      	mov	r3, r4
 8001238:	f003 fe14 	bl	8004e64 <USB_HC_Init>
 800123c:	4603      	mov	r3, r0
 800123e:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2200      	movs	r2, #0
 8001244:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001248:	7bfb      	ldrb	r3, [r7, #15]
}
 800124a:	4618      	mov	r0, r3
 800124c:	3714      	adds	r7, #20
 800124e:	46bd      	mov	sp, r7
 8001250:	bd90      	pop	{r4, r7, pc}

08001252 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001252:	b580      	push	{r7, lr}
 8001254:	b084      	sub	sp, #16
 8001256:	af00      	add	r7, sp, #0
 8001258:	6078      	str	r0, [r7, #4]
 800125a:	460b      	mov	r3, r1
 800125c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800125e:	2300      	movs	r3, #0
 8001260:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001268:	2b01      	cmp	r3, #1
 800126a:	d101      	bne.n	8001270 <HAL_HCD_HC_Halt+0x1e>
 800126c:	2302      	movs	r3, #2
 800126e:	e00f      	b.n	8001290 <HAL_HCD_HC_Halt+0x3e>
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2201      	movs	r2, #1
 8001274:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	78fa      	ldrb	r2, [r7, #3]
 800127e:	4611      	mov	r1, r2
 8001280:	4618      	mov	r0, r3
 8001282:	f004 f804 	bl	800528e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2200      	movs	r2, #0
 800128a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800128e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001290:	4618      	mov	r0, r3
 8001292:	3710      	adds	r7, #16
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}

08001298 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	4608      	mov	r0, r1
 80012a2:	4611      	mov	r1, r2
 80012a4:	461a      	mov	r2, r3
 80012a6:	4603      	mov	r3, r0
 80012a8:	70fb      	strb	r3, [r7, #3]
 80012aa:	460b      	mov	r3, r1
 80012ac:	70bb      	strb	r3, [r7, #2]
 80012ae:	4613      	mov	r3, r2
 80012b0:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80012b2:	78fb      	ldrb	r3, [r7, #3]
 80012b4:	687a      	ldr	r2, [r7, #4]
 80012b6:	212c      	movs	r1, #44	; 0x2c
 80012b8:	fb01 f303 	mul.w	r3, r1, r3
 80012bc:	4413      	add	r3, r2
 80012be:	333b      	adds	r3, #59	; 0x3b
 80012c0:	78ba      	ldrb	r2, [r7, #2]
 80012c2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80012c4:	78fb      	ldrb	r3, [r7, #3]
 80012c6:	687a      	ldr	r2, [r7, #4]
 80012c8:	212c      	movs	r1, #44	; 0x2c
 80012ca:	fb01 f303 	mul.w	r3, r1, r3
 80012ce:	4413      	add	r3, r2
 80012d0:	333f      	adds	r3, #63	; 0x3f
 80012d2:	787a      	ldrb	r2, [r7, #1]
 80012d4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80012d6:	7c3b      	ldrb	r3, [r7, #16]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d112      	bne.n	8001302 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80012dc:	78fb      	ldrb	r3, [r7, #3]
 80012de:	687a      	ldr	r2, [r7, #4]
 80012e0:	212c      	movs	r1, #44	; 0x2c
 80012e2:	fb01 f303 	mul.w	r3, r1, r3
 80012e6:	4413      	add	r3, r2
 80012e8:	3342      	adds	r3, #66	; 0x42
 80012ea:	2203      	movs	r2, #3
 80012ec:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80012ee:	78fb      	ldrb	r3, [r7, #3]
 80012f0:	687a      	ldr	r2, [r7, #4]
 80012f2:	212c      	movs	r1, #44	; 0x2c
 80012f4:	fb01 f303 	mul.w	r3, r1, r3
 80012f8:	4413      	add	r3, r2
 80012fa:	333d      	adds	r3, #61	; 0x3d
 80012fc:	7f3a      	ldrb	r2, [r7, #28]
 80012fe:	701a      	strb	r2, [r3, #0]
 8001300:	e008      	b.n	8001314 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001302:	78fb      	ldrb	r3, [r7, #3]
 8001304:	687a      	ldr	r2, [r7, #4]
 8001306:	212c      	movs	r1, #44	; 0x2c
 8001308:	fb01 f303 	mul.w	r3, r1, r3
 800130c:	4413      	add	r3, r2
 800130e:	3342      	adds	r3, #66	; 0x42
 8001310:	2202      	movs	r2, #2
 8001312:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001314:	787b      	ldrb	r3, [r7, #1]
 8001316:	2b03      	cmp	r3, #3
 8001318:	f200 80c6 	bhi.w	80014a8 <HAL_HCD_HC_SubmitRequest+0x210>
 800131c:	a201      	add	r2, pc, #4	; (adr r2, 8001324 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800131e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001322:	bf00      	nop
 8001324:	08001335 	.word	0x08001335
 8001328:	08001495 	.word	0x08001495
 800132c:	08001399 	.word	0x08001399
 8001330:	08001417 	.word	0x08001417
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001334:	7c3b      	ldrb	r3, [r7, #16]
 8001336:	2b01      	cmp	r3, #1
 8001338:	f040 80b8 	bne.w	80014ac <HAL_HCD_HC_SubmitRequest+0x214>
 800133c:	78bb      	ldrb	r3, [r7, #2]
 800133e:	2b00      	cmp	r3, #0
 8001340:	f040 80b4 	bne.w	80014ac <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001344:	8b3b      	ldrh	r3, [r7, #24]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d108      	bne.n	800135c <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800134a:	78fb      	ldrb	r3, [r7, #3]
 800134c:	687a      	ldr	r2, [r7, #4]
 800134e:	212c      	movs	r1, #44	; 0x2c
 8001350:	fb01 f303 	mul.w	r3, r1, r3
 8001354:	4413      	add	r3, r2
 8001356:	3355      	adds	r3, #85	; 0x55
 8001358:	2201      	movs	r2, #1
 800135a:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800135c:	78fb      	ldrb	r3, [r7, #3]
 800135e:	687a      	ldr	r2, [r7, #4]
 8001360:	212c      	movs	r1, #44	; 0x2c
 8001362:	fb01 f303 	mul.w	r3, r1, r3
 8001366:	4413      	add	r3, r2
 8001368:	3355      	adds	r3, #85	; 0x55
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d109      	bne.n	8001384 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001370:	78fb      	ldrb	r3, [r7, #3]
 8001372:	687a      	ldr	r2, [r7, #4]
 8001374:	212c      	movs	r1, #44	; 0x2c
 8001376:	fb01 f303 	mul.w	r3, r1, r3
 800137a:	4413      	add	r3, r2
 800137c:	3342      	adds	r3, #66	; 0x42
 800137e:	2200      	movs	r2, #0
 8001380:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001382:	e093      	b.n	80014ac <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001384:	78fb      	ldrb	r3, [r7, #3]
 8001386:	687a      	ldr	r2, [r7, #4]
 8001388:	212c      	movs	r1, #44	; 0x2c
 800138a:	fb01 f303 	mul.w	r3, r1, r3
 800138e:	4413      	add	r3, r2
 8001390:	3342      	adds	r3, #66	; 0x42
 8001392:	2202      	movs	r2, #2
 8001394:	701a      	strb	r2, [r3, #0]
      break;
 8001396:	e089      	b.n	80014ac <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001398:	78bb      	ldrb	r3, [r7, #2]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d11d      	bne.n	80013da <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800139e:	78fb      	ldrb	r3, [r7, #3]
 80013a0:	687a      	ldr	r2, [r7, #4]
 80013a2:	212c      	movs	r1, #44	; 0x2c
 80013a4:	fb01 f303 	mul.w	r3, r1, r3
 80013a8:	4413      	add	r3, r2
 80013aa:	3355      	adds	r3, #85	; 0x55
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d109      	bne.n	80013c6 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80013b2:	78fb      	ldrb	r3, [r7, #3]
 80013b4:	687a      	ldr	r2, [r7, #4]
 80013b6:	212c      	movs	r1, #44	; 0x2c
 80013b8:	fb01 f303 	mul.w	r3, r1, r3
 80013bc:	4413      	add	r3, r2
 80013be:	3342      	adds	r3, #66	; 0x42
 80013c0:	2200      	movs	r2, #0
 80013c2:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80013c4:	e073      	b.n	80014ae <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80013c6:	78fb      	ldrb	r3, [r7, #3]
 80013c8:	687a      	ldr	r2, [r7, #4]
 80013ca:	212c      	movs	r1, #44	; 0x2c
 80013cc:	fb01 f303 	mul.w	r3, r1, r3
 80013d0:	4413      	add	r3, r2
 80013d2:	3342      	adds	r3, #66	; 0x42
 80013d4:	2202      	movs	r2, #2
 80013d6:	701a      	strb	r2, [r3, #0]
      break;
 80013d8:	e069      	b.n	80014ae <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80013da:	78fb      	ldrb	r3, [r7, #3]
 80013dc:	687a      	ldr	r2, [r7, #4]
 80013de:	212c      	movs	r1, #44	; 0x2c
 80013e0:	fb01 f303 	mul.w	r3, r1, r3
 80013e4:	4413      	add	r3, r2
 80013e6:	3354      	adds	r3, #84	; 0x54
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d109      	bne.n	8001402 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80013ee:	78fb      	ldrb	r3, [r7, #3]
 80013f0:	687a      	ldr	r2, [r7, #4]
 80013f2:	212c      	movs	r1, #44	; 0x2c
 80013f4:	fb01 f303 	mul.w	r3, r1, r3
 80013f8:	4413      	add	r3, r2
 80013fa:	3342      	adds	r3, #66	; 0x42
 80013fc:	2200      	movs	r2, #0
 80013fe:	701a      	strb	r2, [r3, #0]
      break;
 8001400:	e055      	b.n	80014ae <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001402:	78fb      	ldrb	r3, [r7, #3]
 8001404:	687a      	ldr	r2, [r7, #4]
 8001406:	212c      	movs	r1, #44	; 0x2c
 8001408:	fb01 f303 	mul.w	r3, r1, r3
 800140c:	4413      	add	r3, r2
 800140e:	3342      	adds	r3, #66	; 0x42
 8001410:	2202      	movs	r2, #2
 8001412:	701a      	strb	r2, [r3, #0]
      break;
 8001414:	e04b      	b.n	80014ae <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001416:	78bb      	ldrb	r3, [r7, #2]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d11d      	bne.n	8001458 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800141c:	78fb      	ldrb	r3, [r7, #3]
 800141e:	687a      	ldr	r2, [r7, #4]
 8001420:	212c      	movs	r1, #44	; 0x2c
 8001422:	fb01 f303 	mul.w	r3, r1, r3
 8001426:	4413      	add	r3, r2
 8001428:	3355      	adds	r3, #85	; 0x55
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d109      	bne.n	8001444 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001430:	78fb      	ldrb	r3, [r7, #3]
 8001432:	687a      	ldr	r2, [r7, #4]
 8001434:	212c      	movs	r1, #44	; 0x2c
 8001436:	fb01 f303 	mul.w	r3, r1, r3
 800143a:	4413      	add	r3, r2
 800143c:	3342      	adds	r3, #66	; 0x42
 800143e:	2200      	movs	r2, #0
 8001440:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001442:	e034      	b.n	80014ae <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001444:	78fb      	ldrb	r3, [r7, #3]
 8001446:	687a      	ldr	r2, [r7, #4]
 8001448:	212c      	movs	r1, #44	; 0x2c
 800144a:	fb01 f303 	mul.w	r3, r1, r3
 800144e:	4413      	add	r3, r2
 8001450:	3342      	adds	r3, #66	; 0x42
 8001452:	2202      	movs	r2, #2
 8001454:	701a      	strb	r2, [r3, #0]
      break;
 8001456:	e02a      	b.n	80014ae <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001458:	78fb      	ldrb	r3, [r7, #3]
 800145a:	687a      	ldr	r2, [r7, #4]
 800145c:	212c      	movs	r1, #44	; 0x2c
 800145e:	fb01 f303 	mul.w	r3, r1, r3
 8001462:	4413      	add	r3, r2
 8001464:	3354      	adds	r3, #84	; 0x54
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d109      	bne.n	8001480 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800146c:	78fb      	ldrb	r3, [r7, #3]
 800146e:	687a      	ldr	r2, [r7, #4]
 8001470:	212c      	movs	r1, #44	; 0x2c
 8001472:	fb01 f303 	mul.w	r3, r1, r3
 8001476:	4413      	add	r3, r2
 8001478:	3342      	adds	r3, #66	; 0x42
 800147a:	2200      	movs	r2, #0
 800147c:	701a      	strb	r2, [r3, #0]
      break;
 800147e:	e016      	b.n	80014ae <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001480:	78fb      	ldrb	r3, [r7, #3]
 8001482:	687a      	ldr	r2, [r7, #4]
 8001484:	212c      	movs	r1, #44	; 0x2c
 8001486:	fb01 f303 	mul.w	r3, r1, r3
 800148a:	4413      	add	r3, r2
 800148c:	3342      	adds	r3, #66	; 0x42
 800148e:	2202      	movs	r2, #2
 8001490:	701a      	strb	r2, [r3, #0]
      break;
 8001492:	e00c      	b.n	80014ae <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001494:	78fb      	ldrb	r3, [r7, #3]
 8001496:	687a      	ldr	r2, [r7, #4]
 8001498:	212c      	movs	r1, #44	; 0x2c
 800149a:	fb01 f303 	mul.w	r3, r1, r3
 800149e:	4413      	add	r3, r2
 80014a0:	3342      	adds	r3, #66	; 0x42
 80014a2:	2200      	movs	r2, #0
 80014a4:	701a      	strb	r2, [r3, #0]
      break;
 80014a6:	e002      	b.n	80014ae <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80014a8:	bf00      	nop
 80014aa:	e000      	b.n	80014ae <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80014ac:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80014ae:	78fb      	ldrb	r3, [r7, #3]
 80014b0:	687a      	ldr	r2, [r7, #4]
 80014b2:	212c      	movs	r1, #44	; 0x2c
 80014b4:	fb01 f303 	mul.w	r3, r1, r3
 80014b8:	4413      	add	r3, r2
 80014ba:	3344      	adds	r3, #68	; 0x44
 80014bc:	697a      	ldr	r2, [r7, #20]
 80014be:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80014c0:	78fb      	ldrb	r3, [r7, #3]
 80014c2:	8b3a      	ldrh	r2, [r7, #24]
 80014c4:	6879      	ldr	r1, [r7, #4]
 80014c6:	202c      	movs	r0, #44	; 0x2c
 80014c8:	fb00 f303 	mul.w	r3, r0, r3
 80014cc:	440b      	add	r3, r1
 80014ce:	334c      	adds	r3, #76	; 0x4c
 80014d0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80014d2:	78fb      	ldrb	r3, [r7, #3]
 80014d4:	687a      	ldr	r2, [r7, #4]
 80014d6:	212c      	movs	r1, #44	; 0x2c
 80014d8:	fb01 f303 	mul.w	r3, r1, r3
 80014dc:	4413      	add	r3, r2
 80014de:	3360      	adds	r3, #96	; 0x60
 80014e0:	2200      	movs	r2, #0
 80014e2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80014e4:	78fb      	ldrb	r3, [r7, #3]
 80014e6:	687a      	ldr	r2, [r7, #4]
 80014e8:	212c      	movs	r1, #44	; 0x2c
 80014ea:	fb01 f303 	mul.w	r3, r1, r3
 80014ee:	4413      	add	r3, r2
 80014f0:	3350      	adds	r3, #80	; 0x50
 80014f2:	2200      	movs	r2, #0
 80014f4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80014f6:	78fb      	ldrb	r3, [r7, #3]
 80014f8:	687a      	ldr	r2, [r7, #4]
 80014fa:	212c      	movs	r1, #44	; 0x2c
 80014fc:	fb01 f303 	mul.w	r3, r1, r3
 8001500:	4413      	add	r3, r2
 8001502:	3339      	adds	r3, #57	; 0x39
 8001504:	78fa      	ldrb	r2, [r7, #3]
 8001506:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001508:	78fb      	ldrb	r3, [r7, #3]
 800150a:	687a      	ldr	r2, [r7, #4]
 800150c:	212c      	movs	r1, #44	; 0x2c
 800150e:	fb01 f303 	mul.w	r3, r1, r3
 8001512:	4413      	add	r3, r2
 8001514:	3361      	adds	r3, #97	; 0x61
 8001516:	2200      	movs	r2, #0
 8001518:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num]);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6818      	ldr	r0, [r3, #0]
 800151e:	78fb      	ldrb	r3, [r7, #3]
 8001520:	222c      	movs	r2, #44	; 0x2c
 8001522:	fb02 f303 	mul.w	r3, r2, r3
 8001526:	3338      	adds	r3, #56	; 0x38
 8001528:	687a      	ldr	r2, [r7, #4]
 800152a:	4413      	add	r3, r2
 800152c:	4619      	mov	r1, r3
 800152e:	f003 fda5 	bl	800507c <USB_HC_StartXfer>
 8001532:	4603      	mov	r3, r0
}
 8001534:	4618      	mov	r0, r3
 8001536:	3708      	adds	r7, #8
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}

0800153c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b086      	sub	sp, #24
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4618      	mov	r0, r3
 8001554:	f003 fafb 	bl	8004b4e <USB_GetMode>
 8001558:	4603      	mov	r3, r0
 800155a:	2b01      	cmp	r3, #1
 800155c:	f040 80f6 	bne.w	800174c <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4618      	mov	r0, r3
 8001566:	f003 fadf 	bl	8004b28 <USB_ReadInterrupts>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	f000 80ec 	beq.w	800174a <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4618      	mov	r0, r3
 8001578:	f003 fad6 	bl	8004b28 <USB_ReadInterrupts>
 800157c:	4603      	mov	r3, r0
 800157e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001582:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001586:	d104      	bne.n	8001592 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001590:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4618      	mov	r0, r3
 8001598:	f003 fac6 	bl	8004b28 <USB_ReadInterrupts>
 800159c:	4603      	mov	r3, r0
 800159e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80015a6:	d104      	bne.n	80015b2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80015b0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4618      	mov	r0, r3
 80015b8:	f003 fab6 	bl	8004b28 <USB_ReadInterrupts>
 80015bc:	4603      	mov	r3, r0
 80015be:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80015c2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80015c6:	d104      	bne.n	80015d2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80015d0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4618      	mov	r0, r3
 80015d8:	f003 faa6 	bl	8004b28 <USB_ReadInterrupts>
 80015dc:	4603      	mov	r3, r0
 80015de:	f003 0302 	and.w	r3, r3, #2
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d103      	bne.n	80015ee <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	2202      	movs	r2, #2
 80015ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4618      	mov	r0, r3
 80015f4:	f003 fa98 	bl	8004b28 <USB_ReadInterrupts>
 80015f8:	4603      	mov	r3, r0
 80015fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80015fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001602:	d11c      	bne.n	800163e <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800160c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 0301 	and.w	r3, r3, #1
 800161a:	2b00      	cmp	r3, #0
 800161c:	d10f      	bne.n	800163e <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800161e:	2110      	movs	r1, #16
 8001620:	6938      	ldr	r0, [r7, #16]
 8001622:	f003 f98b 	bl	800493c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001626:	6938      	ldr	r0, [r7, #16]
 8001628:	f003 f9bc 	bl	80049a4 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2101      	movs	r1, #1
 8001632:	4618      	mov	r0, r3
 8001634:	f003 fb50 	bl	8004cd8 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f007 fb29 	bl	8008c90 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4618      	mov	r0, r3
 8001644:	f003 fa70 	bl	8004b28 <USB_ReadInterrupts>
 8001648:	4603      	mov	r3, r0
 800164a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800164e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001652:	d102      	bne.n	800165a <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001654:	6878      	ldr	r0, [r7, #4]
 8001656:	f001 f801 	bl	800265c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4618      	mov	r0, r3
 8001660:	f003 fa62 	bl	8004b28 <USB_ReadInterrupts>
 8001664:	4603      	mov	r3, r0
 8001666:	f003 0308 	and.w	r3, r3, #8
 800166a:	2b08      	cmp	r3, #8
 800166c:	d106      	bne.n	800167c <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f007 faf2 	bl	8008c58 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	2208      	movs	r2, #8
 800167a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4618      	mov	r0, r3
 8001682:	f003 fa51 	bl	8004b28 <USB_ReadInterrupts>
 8001686:	4603      	mov	r3, r0
 8001688:	f003 0310 	and.w	r3, r3, #16
 800168c:	2b10      	cmp	r3, #16
 800168e:	d101      	bne.n	8001694 <HAL_HCD_IRQHandler+0x158>
 8001690:	2301      	movs	r3, #1
 8001692:	e000      	b.n	8001696 <HAL_HCD_IRQHandler+0x15a>
 8001694:	2300      	movs	r3, #0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d012      	beq.n	80016c0 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	699a      	ldr	r2, [r3, #24]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f022 0210 	bic.w	r2, r2, #16
 80016a8:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f000 ff04 	bl	80024b8 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	699a      	ldr	r2, [r3, #24]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f042 0210 	orr.w	r2, r2, #16
 80016be:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4618      	mov	r0, r3
 80016c6:	f003 fa2f 	bl	8004b28 <USB_ReadInterrupts>
 80016ca:	4603      	mov	r3, r0
 80016cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80016d4:	d13a      	bne.n	800174c <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4618      	mov	r0, r3
 80016dc:	f003 fdc6 	bl	800526c <USB_HC_ReadInterrupt>
 80016e0:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80016e2:	2300      	movs	r3, #0
 80016e4:	617b      	str	r3, [r7, #20]
 80016e6:	e025      	b.n	8001734 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	f003 030f 	and.w	r3, r3, #15
 80016ee:	68ba      	ldr	r2, [r7, #8]
 80016f0:	fa22 f303 	lsr.w	r3, r2, r3
 80016f4:	f003 0301 	and.w	r3, r3, #1
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d018      	beq.n	800172e <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	015a      	lsls	r2, r3, #5
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	4413      	add	r3, r2
 8001704:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800170e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001712:	d106      	bne.n	8001722 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	b2db      	uxtb	r3, r3
 8001718:	4619      	mov	r1, r3
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	f000 f897 	bl	800184e <HCD_HC_IN_IRQHandler>
 8001720:	e005      	b.n	800172e <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	b2db      	uxtb	r3, r3
 8001726:	4619      	mov	r1, r3
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	f000 fbc3 	bl	8001eb4 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	3301      	adds	r3, #1
 8001732:	617b      	str	r3, [r7, #20]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	697a      	ldr	r2, [r7, #20]
 800173a:	429a      	cmp	r2, r3
 800173c:	d3d4      	bcc.n	80016e8 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001746:	615a      	str	r2, [r3, #20]
 8001748:	e000      	b.n	800174c <HAL_HCD_IRQHandler+0x210>
      return;
 800174a:	bf00      	nop
    }
  }
}
 800174c:	3718      	adds	r7, #24
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}

08001752 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001752:	b580      	push	{r7, lr}
 8001754:	b082      	sub	sp, #8
 8001756:	af00      	add	r7, sp, #0
 8001758:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001760:	2b01      	cmp	r3, #1
 8001762:	d101      	bne.n	8001768 <HAL_HCD_Start+0x16>
 8001764:	2302      	movs	r3, #2
 8001766:	e013      	b.n	8001790 <HAL_HCD_Start+0x3e>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2201      	movs	r2, #1
 800176c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2101      	movs	r1, #1
 8001776:	4618      	mov	r0, r3
 8001778:	f003 fb12 	bl	8004da0 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4618      	mov	r0, r3
 8001782:	f003 f86c 	bl	800485e <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2200      	movs	r2, #0
 800178a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800178e:	2300      	movs	r3, #0
}
 8001790:	4618      	mov	r0, r3
 8001792:	3708      	adds	r7, #8
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}

08001798 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d101      	bne.n	80017ae <HAL_HCD_Stop+0x16>
 80017aa:	2302      	movs	r3, #2
 80017ac:	e00d      	b.n	80017ca <HAL_HCD_Stop+0x32>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2201      	movs	r2, #1
 80017b2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f003 fe63 	bl	8005486 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2200      	movs	r2, #0
 80017c4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80017c8:	2300      	movs	r3, #0
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}

080017d2 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80017d2:	b580      	push	{r7, lr}
 80017d4:	b082      	sub	sp, #8
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4618      	mov	r0, r3
 80017e0:	f003 fab4 	bl	8004d4c <USB_ResetPort>
 80017e4:	4603      	mov	r3, r0
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3708      	adds	r7, #8
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}

080017ee <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80017ee:	b480      	push	{r7}
 80017f0:	b083      	sub	sp, #12
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	6078      	str	r0, [r7, #4]
 80017f6:	460b      	mov	r3, r1
 80017f8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80017fa:	78fb      	ldrb	r3, [r7, #3]
 80017fc:	687a      	ldr	r2, [r7, #4]
 80017fe:	212c      	movs	r1, #44	; 0x2c
 8001800:	fb01 f303 	mul.w	r3, r1, r3
 8001804:	4413      	add	r3, r2
 8001806:	3360      	adds	r3, #96	; 0x60
 8001808:	781b      	ldrb	r3, [r3, #0]
}
 800180a:	4618      	mov	r0, r3
 800180c:	370c      	adds	r7, #12
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr

08001816 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001816:	b580      	push	{r7, lr}
 8001818:	b082      	sub	sp, #8
 800181a:	af00      	add	r7, sp, #0
 800181c:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4618      	mov	r0, r3
 8001824:	f003 fb0c 	bl	8004e40 <USB_GetCurrentFrame>
 8001828:	4603      	mov	r3, r0
}
 800182a:	4618      	mov	r0, r3
 800182c:	3708      	adds	r7, #8
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}

08001832 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001832:	b580      	push	{r7, lr}
 8001834:	b082      	sub	sp, #8
 8001836:	af00      	add	r7, sp, #0
 8001838:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4618      	mov	r0, r3
 8001840:	f003 fae7 	bl	8004e12 <USB_GetHostSpeed>
 8001844:	4603      	mov	r3, r0
}
 8001846:	4618      	mov	r0, r3
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}

0800184e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800184e:	b580      	push	{r7, lr}
 8001850:	b086      	sub	sp, #24
 8001852:	af00      	add	r7, sp, #0
 8001854:	6078      	str	r0, [r7, #4]
 8001856:	460b      	mov	r3, r1
 8001858:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001864:	78fb      	ldrb	r3, [r7, #3]
 8001866:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	015a      	lsls	r2, r3, #5
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	4413      	add	r3, r2
 8001870:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	f003 0304 	and.w	r3, r3, #4
 800187a:	2b04      	cmp	r3, #4
 800187c:	d11a      	bne.n	80018b4 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	015a      	lsls	r2, r3, #5
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	4413      	add	r3, r2
 8001886:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800188a:	461a      	mov	r2, r3
 800188c:	2304      	movs	r3, #4
 800188e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001890:	687a      	ldr	r2, [r7, #4]
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	212c      	movs	r1, #44	; 0x2c
 8001896:	fb01 f303 	mul.w	r3, r1, r3
 800189a:	4413      	add	r3, r2
 800189c:	3361      	adds	r3, #97	; 0x61
 800189e:	2206      	movs	r2, #6
 80018a0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	68fa      	ldr	r2, [r7, #12]
 80018a8:	b2d2      	uxtb	r2, r2
 80018aa:	4611      	mov	r1, r2
 80018ac:	4618      	mov	r0, r3
 80018ae:	f003 fcee 	bl	800528e <USB_HC_Halt>
 80018b2:	e0af      	b.n	8001a14 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	015a      	lsls	r2, r3, #5
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	4413      	add	r3, r2
 80018bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018ca:	d11b      	bne.n	8001904 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	015a      	lsls	r2, r3, #5
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	4413      	add	r3, r2
 80018d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018d8:	461a      	mov	r2, r3
 80018da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018de:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80018e0:	687a      	ldr	r2, [r7, #4]
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	212c      	movs	r1, #44	; 0x2c
 80018e6:	fb01 f303 	mul.w	r3, r1, r3
 80018ea:	4413      	add	r3, r2
 80018ec:	3361      	adds	r3, #97	; 0x61
 80018ee:	2207      	movs	r2, #7
 80018f0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	68fa      	ldr	r2, [r7, #12]
 80018f8:	b2d2      	uxtb	r2, r2
 80018fa:	4611      	mov	r1, r2
 80018fc:	4618      	mov	r0, r3
 80018fe:	f003 fcc6 	bl	800528e <USB_HC_Halt>
 8001902:	e087      	b.n	8001a14 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	015a      	lsls	r2, r3, #5
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	4413      	add	r3, r2
 800190c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	f003 0320 	and.w	r3, r3, #32
 8001916:	2b20      	cmp	r3, #32
 8001918:	d109      	bne.n	800192e <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	015a      	lsls	r2, r3, #5
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	4413      	add	r3, r2
 8001922:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001926:	461a      	mov	r2, r3
 8001928:	2320      	movs	r3, #32
 800192a:	6093      	str	r3, [r2, #8]
 800192c:	e072      	b.n	8001a14 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	015a      	lsls	r2, r3, #5
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	4413      	add	r3, r2
 8001936:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	f003 0308 	and.w	r3, r3, #8
 8001940:	2b08      	cmp	r3, #8
 8001942:	d11a      	bne.n	800197a <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	015a      	lsls	r2, r3, #5
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	4413      	add	r3, r2
 800194c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001950:	461a      	mov	r2, r3
 8001952:	2308      	movs	r3, #8
 8001954:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8001956:	687a      	ldr	r2, [r7, #4]
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	212c      	movs	r1, #44	; 0x2c
 800195c:	fb01 f303 	mul.w	r3, r1, r3
 8001960:	4413      	add	r3, r2
 8001962:	3361      	adds	r3, #97	; 0x61
 8001964:	2205      	movs	r2, #5
 8001966:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	68fa      	ldr	r2, [r7, #12]
 800196e:	b2d2      	uxtb	r2, r2
 8001970:	4611      	mov	r1, r2
 8001972:	4618      	mov	r0, r3
 8001974:	f003 fc8b 	bl	800528e <USB_HC_Halt>
 8001978:	e04c      	b.n	8001a14 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	015a      	lsls	r2, r3, #5
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	4413      	add	r3, r2
 8001982:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800198c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001990:	d11b      	bne.n	80019ca <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	015a      	lsls	r2, r3, #5
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	4413      	add	r3, r2
 800199a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800199e:	461a      	mov	r2, r3
 80019a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019a4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	212c      	movs	r1, #44	; 0x2c
 80019ac:	fb01 f303 	mul.w	r3, r1, r3
 80019b0:	4413      	add	r3, r2
 80019b2:	3361      	adds	r3, #97	; 0x61
 80019b4:	2208      	movs	r2, #8
 80019b6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	68fa      	ldr	r2, [r7, #12]
 80019be:	b2d2      	uxtb	r2, r2
 80019c0:	4611      	mov	r1, r2
 80019c2:	4618      	mov	r0, r3
 80019c4:	f003 fc63 	bl	800528e <USB_HC_Halt>
 80019c8:	e024      	b.n	8001a14 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	015a      	lsls	r2, r3, #5
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	4413      	add	r3, r2
 80019d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019dc:	2b80      	cmp	r3, #128	; 0x80
 80019de:	d119      	bne.n	8001a14 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	015a      	lsls	r2, r3, #5
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	4413      	add	r3, r2
 80019e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019ec:	461a      	mov	r2, r3
 80019ee:	2380      	movs	r3, #128	; 0x80
 80019f0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	212c      	movs	r1, #44	; 0x2c
 80019f8:	fb01 f303 	mul.w	r3, r1, r3
 80019fc:	4413      	add	r3, r2
 80019fe:	3361      	adds	r3, #97	; 0x61
 8001a00:	2206      	movs	r2, #6
 8001a02:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	68fa      	ldr	r2, [r7, #12]
 8001a0a:	b2d2      	uxtb	r2, r2
 8001a0c:	4611      	mov	r1, r2
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f003 fc3d 	bl	800528e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	015a      	lsls	r2, r3, #5
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	4413      	add	r3, r2
 8001a1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a2a:	d112      	bne.n	8001a52 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	68fa      	ldr	r2, [r7, #12]
 8001a32:	b2d2      	uxtb	r2, r2
 8001a34:	4611      	mov	r1, r2
 8001a36:	4618      	mov	r0, r3
 8001a38:	f003 fc29 	bl	800528e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	015a      	lsls	r2, r3, #5
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	4413      	add	r3, r2
 8001a44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a48:	461a      	mov	r2, r3
 8001a4a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a4e:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001a50:	e22c      	b.n	8001eac <HCD_HC_IN_IRQHandler+0x65e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	015a      	lsls	r2, r3, #5
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	4413      	add	r3, r2
 8001a5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	f003 0301 	and.w	r3, r3, #1
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	f040 80c1 	bne.w	8001bec <HCD_HC_IN_IRQHandler+0x39e>
    hhcd->hc[ch_num].state = HC_XFRC;
 8001a6a:	687a      	ldr	r2, [r7, #4]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	212c      	movs	r1, #44	; 0x2c
 8001a70:	fb01 f303 	mul.w	r3, r1, r3
 8001a74:	4413      	add	r3, r2
 8001a76:	3361      	adds	r3, #97	; 0x61
 8001a78:	2201      	movs	r2, #1
 8001a7a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001a7c:	687a      	ldr	r2, [r7, #4]
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	212c      	movs	r1, #44	; 0x2c
 8001a82:	fb01 f303 	mul.w	r3, r1, r3
 8001a86:	4413      	add	r3, r2
 8001a88:	335c      	adds	r3, #92	; 0x5c
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	015a      	lsls	r2, r3, #5
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	4413      	add	r3, r2
 8001a96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001aa0:	687a      	ldr	r2, [r7, #4]
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	212c      	movs	r1, #44	; 0x2c
 8001aa6:	fb01 f303 	mul.w	r3, r1, r3
 8001aaa:	4413      	add	r3, r2
 8001aac:	333f      	adds	r3, #63	; 0x3f
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d009      	beq.n	8001ac8 <HCD_HC_IN_IRQHandler+0x27a>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001ab4:	687a      	ldr	r2, [r7, #4]
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	212c      	movs	r1, #44	; 0x2c
 8001aba:	fb01 f303 	mul.w	r3, r1, r3
 8001abe:	4413      	add	r3, r2
 8001ac0:	333f      	adds	r3, #63	; 0x3f
 8001ac2:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001ac4:	2b02      	cmp	r3, #2
 8001ac6:	d111      	bne.n	8001aec <HCD_HC_IN_IRQHandler+0x29e>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	68fa      	ldr	r2, [r7, #12]
 8001ace:	b2d2      	uxtb	r2, r2
 8001ad0:	4611      	mov	r1, r2
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f003 fbdb 	bl	800528e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	015a      	lsls	r2, r3, #5
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	4413      	add	r3, r2
 8001ae0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	2310      	movs	r3, #16
 8001ae8:	6093      	str	r3, [r2, #8]
 8001aea:	e03a      	b.n	8001b62 <HCD_HC_IN_IRQHandler+0x314>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8001aec:	687a      	ldr	r2, [r7, #4]
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	212c      	movs	r1, #44	; 0x2c
 8001af2:	fb01 f303 	mul.w	r3, r1, r3
 8001af6:	4413      	add	r3, r2
 8001af8:	333f      	adds	r3, #63	; 0x3f
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	2b03      	cmp	r3, #3
 8001afe:	d009      	beq.n	8001b14 <HCD_HC_IN_IRQHandler+0x2c6>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8001b00:	687a      	ldr	r2, [r7, #4]
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	212c      	movs	r1, #44	; 0x2c
 8001b06:	fb01 f303 	mul.w	r3, r1, r3
 8001b0a:	4413      	add	r3, r2
 8001b0c:	333f      	adds	r3, #63	; 0x3f
 8001b0e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d126      	bne.n	8001b62 <HCD_HC_IN_IRQHandler+0x314>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	015a      	lsls	r2, r3, #5
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	4413      	add	r3, r2
 8001b1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	68fa      	ldr	r2, [r7, #12]
 8001b24:	0151      	lsls	r1, r2, #5
 8001b26:	693a      	ldr	r2, [r7, #16]
 8001b28:	440a      	add	r2, r1
 8001b2a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001b2e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001b32:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	212c      	movs	r1, #44	; 0x2c
 8001b3a:	fb01 f303 	mul.w	r3, r1, r3
 8001b3e:	4413      	add	r3, r2
 8001b40:	3360      	adds	r3, #96	; 0x60
 8001b42:	2201      	movs	r2, #1
 8001b44:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	b2d9      	uxtb	r1, r3
 8001b4a:	687a      	ldr	r2, [r7, #4]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	202c      	movs	r0, #44	; 0x2c
 8001b50:	fb00 f303 	mul.w	r3, r0, r3
 8001b54:	4413      	add	r3, r2
 8001b56:	3360      	adds	r3, #96	; 0x60
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f007 f8a5 	bl	8008cac <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	691b      	ldr	r3, [r3, #16]
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d12b      	bne.n	8001bc2 <HCD_HC_IN_IRQHandler+0x374>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8001b6a:	687a      	ldr	r2, [r7, #4]
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	212c      	movs	r1, #44	; 0x2c
 8001b70:	fb01 f303 	mul.w	r3, r1, r3
 8001b74:	4413      	add	r3, r2
 8001b76:	3348      	adds	r3, #72	; 0x48
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	6879      	ldr	r1, [r7, #4]
 8001b7c:	68fa      	ldr	r2, [r7, #12]
 8001b7e:	202c      	movs	r0, #44	; 0x2c
 8001b80:	fb00 f202 	mul.w	r2, r0, r2
 8001b84:	440a      	add	r2, r1
 8001b86:	3240      	adds	r2, #64	; 0x40
 8001b88:	8812      	ldrh	r2, [r2, #0]
 8001b8a:	fbb3 f3f2 	udiv	r3, r3, r2
 8001b8e:	f003 0301 	and.w	r3, r3, #1
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	f000 818a 	beq.w	8001eac <HCD_HC_IN_IRQHandler+0x65e>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8001b98:	687a      	ldr	r2, [r7, #4]
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	212c      	movs	r1, #44	; 0x2c
 8001b9e:	fb01 f303 	mul.w	r3, r1, r3
 8001ba2:	4413      	add	r3, r2
 8001ba4:	3354      	adds	r3, #84	; 0x54
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	f083 0301 	eor.w	r3, r3, #1
 8001bac:	b2d8      	uxtb	r0, r3
 8001bae:	687a      	ldr	r2, [r7, #4]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	212c      	movs	r1, #44	; 0x2c
 8001bb4:	fb01 f303 	mul.w	r3, r1, r3
 8001bb8:	4413      	add	r3, r2
 8001bba:	3354      	adds	r3, #84	; 0x54
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	701a      	strb	r2, [r3, #0]
}
 8001bc0:	e174      	b.n	8001eac <HCD_HC_IN_IRQHandler+0x65e>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	212c      	movs	r1, #44	; 0x2c
 8001bc8:	fb01 f303 	mul.w	r3, r1, r3
 8001bcc:	4413      	add	r3, r2
 8001bce:	3354      	adds	r3, #84	; 0x54
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	f083 0301 	eor.w	r3, r3, #1
 8001bd6:	b2d8      	uxtb	r0, r3
 8001bd8:	687a      	ldr	r2, [r7, #4]
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	212c      	movs	r1, #44	; 0x2c
 8001bde:	fb01 f303 	mul.w	r3, r1, r3
 8001be2:	4413      	add	r3, r2
 8001be4:	3354      	adds	r3, #84	; 0x54
 8001be6:	4602      	mov	r2, r0
 8001be8:	701a      	strb	r2, [r3, #0]
}
 8001bea:	e15f      	b.n	8001eac <HCD_HC_IN_IRQHandler+0x65e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	015a      	lsls	r2, r3, #5
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	4413      	add	r3, r2
 8001bf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	f003 0302 	and.w	r3, r3, #2
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	f040 80f6 	bne.w	8001df0 <HCD_HC_IN_IRQHandler+0x5a2>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001c04:	687a      	ldr	r2, [r7, #4]
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	212c      	movs	r1, #44	; 0x2c
 8001c0a:	fb01 f303 	mul.w	r3, r1, r3
 8001c0e:	4413      	add	r3, r2
 8001c10:	3361      	adds	r3, #97	; 0x61
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d109      	bne.n	8001c2c <HCD_HC_IN_IRQHandler+0x3de>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001c18:	687a      	ldr	r2, [r7, #4]
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	212c      	movs	r1, #44	; 0x2c
 8001c1e:	fb01 f303 	mul.w	r3, r1, r3
 8001c22:	4413      	add	r3, r2
 8001c24:	3360      	adds	r3, #96	; 0x60
 8001c26:	2201      	movs	r2, #1
 8001c28:	701a      	strb	r2, [r3, #0]
 8001c2a:	e0c9      	b.n	8001dc0 <HCD_HC_IN_IRQHandler+0x572>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001c2c:	687a      	ldr	r2, [r7, #4]
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	212c      	movs	r1, #44	; 0x2c
 8001c32:	fb01 f303 	mul.w	r3, r1, r3
 8001c36:	4413      	add	r3, r2
 8001c38:	3361      	adds	r3, #97	; 0x61
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	2b05      	cmp	r3, #5
 8001c3e:	d109      	bne.n	8001c54 <HCD_HC_IN_IRQHandler+0x406>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8001c40:	687a      	ldr	r2, [r7, #4]
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	212c      	movs	r1, #44	; 0x2c
 8001c46:	fb01 f303 	mul.w	r3, r1, r3
 8001c4a:	4413      	add	r3, r2
 8001c4c:	3360      	adds	r3, #96	; 0x60
 8001c4e:	2205      	movs	r2, #5
 8001c50:	701a      	strb	r2, [r3, #0]
 8001c52:	e0b5      	b.n	8001dc0 <HCD_HC_IN_IRQHandler+0x572>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001c54:	687a      	ldr	r2, [r7, #4]
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	212c      	movs	r1, #44	; 0x2c
 8001c5a:	fb01 f303 	mul.w	r3, r1, r3
 8001c5e:	4413      	add	r3, r2
 8001c60:	3361      	adds	r3, #97	; 0x61
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	2b06      	cmp	r3, #6
 8001c66:	d009      	beq.n	8001c7c <HCD_HC_IN_IRQHandler+0x42e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8001c68:	687a      	ldr	r2, [r7, #4]
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	212c      	movs	r1, #44	; 0x2c
 8001c6e:	fb01 f303 	mul.w	r3, r1, r3
 8001c72:	4413      	add	r3, r2
 8001c74:	3361      	adds	r3, #97	; 0x61
 8001c76:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001c78:	2b08      	cmp	r3, #8
 8001c7a:	d150      	bne.n	8001d1e <HCD_HC_IN_IRQHandler+0x4d0>
      hhcd->hc[ch_num].ErrCnt++;
 8001c7c:	687a      	ldr	r2, [r7, #4]
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	212c      	movs	r1, #44	; 0x2c
 8001c82:	fb01 f303 	mul.w	r3, r1, r3
 8001c86:	4413      	add	r3, r2
 8001c88:	335c      	adds	r3, #92	; 0x5c
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	1c5a      	adds	r2, r3, #1
 8001c8e:	6879      	ldr	r1, [r7, #4]
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	202c      	movs	r0, #44	; 0x2c
 8001c94:	fb00 f303 	mul.w	r3, r0, r3
 8001c98:	440b      	add	r3, r1
 8001c9a:	335c      	adds	r3, #92	; 0x5c
 8001c9c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001c9e:	687a      	ldr	r2, [r7, #4]
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	212c      	movs	r1, #44	; 0x2c
 8001ca4:	fb01 f303 	mul.w	r3, r1, r3
 8001ca8:	4413      	add	r3, r2
 8001caa:	335c      	adds	r3, #92	; 0x5c
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d912      	bls.n	8001cd8 <HCD_HC_IN_IRQHandler+0x48a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	212c      	movs	r1, #44	; 0x2c
 8001cb8:	fb01 f303 	mul.w	r3, r1, r3
 8001cbc:	4413      	add	r3, r2
 8001cbe:	335c      	adds	r3, #92	; 0x5c
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001cc4:	687a      	ldr	r2, [r7, #4]
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	212c      	movs	r1, #44	; 0x2c
 8001cca:	fb01 f303 	mul.w	r3, r1, r3
 8001cce:	4413      	add	r3, r2
 8001cd0:	3360      	adds	r3, #96	; 0x60
 8001cd2:	2204      	movs	r2, #4
 8001cd4:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001cd6:	e073      	b.n	8001dc0 <HCD_HC_IN_IRQHandler+0x572>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	212c      	movs	r1, #44	; 0x2c
 8001cde:	fb01 f303 	mul.w	r3, r1, r3
 8001ce2:	4413      	add	r3, r2
 8001ce4:	3360      	adds	r3, #96	; 0x60
 8001ce6:	2202      	movs	r2, #2
 8001ce8:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	015a      	lsls	r2, r3, #5
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	4413      	add	r3, r2
 8001cf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001d00:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001d08:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	015a      	lsls	r2, r3, #5
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	4413      	add	r3, r2
 8001d12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d16:	461a      	mov	r2, r3
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001d1c:	e050      	b.n	8001dc0 <HCD_HC_IN_IRQHandler+0x572>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8001d1e:	687a      	ldr	r2, [r7, #4]
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	212c      	movs	r1, #44	; 0x2c
 8001d24:	fb01 f303 	mul.w	r3, r1, r3
 8001d28:	4413      	add	r3, r2
 8001d2a:	3361      	adds	r3, #97	; 0x61
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	2b03      	cmp	r3, #3
 8001d30:	d122      	bne.n	8001d78 <HCD_HC_IN_IRQHandler+0x52a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	212c      	movs	r1, #44	; 0x2c
 8001d38:	fb01 f303 	mul.w	r3, r1, r3
 8001d3c:	4413      	add	r3, r2
 8001d3e:	3360      	adds	r3, #96	; 0x60
 8001d40:	2202      	movs	r2, #2
 8001d42:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	015a      	lsls	r2, r3, #5
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	4413      	add	r3, r2
 8001d4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001d5a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001d62:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	015a      	lsls	r2, r3, #5
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	4413      	add	r3, r2
 8001d6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d70:	461a      	mov	r2, r3
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	6013      	str	r3, [r2, #0]
 8001d76:	e023      	b.n	8001dc0 <HCD_HC_IN_IRQHandler+0x572>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8001d78:	687a      	ldr	r2, [r7, #4]
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	212c      	movs	r1, #44	; 0x2c
 8001d7e:	fb01 f303 	mul.w	r3, r1, r3
 8001d82:	4413      	add	r3, r2
 8001d84:	3361      	adds	r3, #97	; 0x61
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	2b07      	cmp	r3, #7
 8001d8a:	d119      	bne.n	8001dc0 <HCD_HC_IN_IRQHandler+0x572>
      hhcd->hc[ch_num].ErrCnt++;
 8001d8c:	687a      	ldr	r2, [r7, #4]
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	212c      	movs	r1, #44	; 0x2c
 8001d92:	fb01 f303 	mul.w	r3, r1, r3
 8001d96:	4413      	add	r3, r2
 8001d98:	335c      	adds	r3, #92	; 0x5c
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	1c5a      	adds	r2, r3, #1
 8001d9e:	6879      	ldr	r1, [r7, #4]
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	202c      	movs	r0, #44	; 0x2c
 8001da4:	fb00 f303 	mul.w	r3, r0, r3
 8001da8:	440b      	add	r3, r1
 8001daa:	335c      	adds	r3, #92	; 0x5c
 8001dac:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	212c      	movs	r1, #44	; 0x2c
 8001db4:	fb01 f303 	mul.w	r3, r1, r3
 8001db8:	4413      	add	r3, r2
 8001dba:	3360      	adds	r3, #96	; 0x60
 8001dbc:	2204      	movs	r2, #4
 8001dbe:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	015a      	lsls	r2, r3, #5
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	4413      	add	r3, r2
 8001dc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dcc:	461a      	mov	r2, r3
 8001dce:	2302      	movs	r3, #2
 8001dd0:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	b2d9      	uxtb	r1, r3
 8001dd6:	687a      	ldr	r2, [r7, #4]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	202c      	movs	r0, #44	; 0x2c
 8001ddc:	fb00 f303 	mul.w	r3, r0, r3
 8001de0:	4413      	add	r3, r2
 8001de2:	3360      	adds	r3, #96	; 0x60
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	461a      	mov	r2, r3
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f006 ff5f 	bl	8008cac <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8001dee:	e05d      	b.n	8001eac <HCD_HC_IN_IRQHandler+0x65e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	015a      	lsls	r2, r3, #5
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	4413      	add	r3, r2
 8001df8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	f003 0310 	and.w	r3, r3, #16
 8001e02:	2b10      	cmp	r3, #16
 8001e04:	d152      	bne.n	8001eac <HCD_HC_IN_IRQHandler+0x65e>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001e06:	687a      	ldr	r2, [r7, #4]
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	212c      	movs	r1, #44	; 0x2c
 8001e0c:	fb01 f303 	mul.w	r3, r1, r3
 8001e10:	4413      	add	r3, r2
 8001e12:	333f      	adds	r3, #63	; 0x3f
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	2b03      	cmp	r3, #3
 8001e18:	d111      	bne.n	8001e3e <HCD_HC_IN_IRQHandler+0x5f0>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	212c      	movs	r1, #44	; 0x2c
 8001e20:	fb01 f303 	mul.w	r3, r1, r3
 8001e24:	4413      	add	r3, r2
 8001e26:	335c      	adds	r3, #92	; 0x5c
 8001e28:	2200      	movs	r2, #0
 8001e2a:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	68fa      	ldr	r2, [r7, #12]
 8001e32:	b2d2      	uxtb	r2, r2
 8001e34:	4611      	mov	r1, r2
 8001e36:	4618      	mov	r0, r3
 8001e38:	f003 fa29 	bl	800528e <USB_HC_Halt>
 8001e3c:	e02d      	b.n	8001e9a <HCD_HC_IN_IRQHandler+0x64c>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	212c      	movs	r1, #44	; 0x2c
 8001e44:	fb01 f303 	mul.w	r3, r1, r3
 8001e48:	4413      	add	r3, r2
 8001e4a:	333f      	adds	r3, #63	; 0x3f
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d009      	beq.n	8001e66 <HCD_HC_IN_IRQHandler+0x618>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	212c      	movs	r1, #44	; 0x2c
 8001e58:	fb01 f303 	mul.w	r3, r1, r3
 8001e5c:	4413      	add	r3, r2
 8001e5e:	333f      	adds	r3, #63	; 0x3f
 8001e60:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001e62:	2b02      	cmp	r3, #2
 8001e64:	d119      	bne.n	8001e9a <HCD_HC_IN_IRQHandler+0x64c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	212c      	movs	r1, #44	; 0x2c
 8001e6c:	fb01 f303 	mul.w	r3, r1, r3
 8001e70:	4413      	add	r3, r2
 8001e72:	335c      	adds	r3, #92	; 0x5c
 8001e74:	2200      	movs	r2, #0
 8001e76:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_NAK;
 8001e78:	687a      	ldr	r2, [r7, #4]
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	212c      	movs	r1, #44	; 0x2c
 8001e7e:	fb01 f303 	mul.w	r3, r1, r3
 8001e82:	4413      	add	r3, r2
 8001e84:	3361      	adds	r3, #97	; 0x61
 8001e86:	2203      	movs	r2, #3
 8001e88:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	68fa      	ldr	r2, [r7, #12]
 8001e90:	b2d2      	uxtb	r2, r2
 8001e92:	4611      	mov	r1, r2
 8001e94:	4618      	mov	r0, r3
 8001e96:	f003 f9fa 	bl	800528e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	015a      	lsls	r2, r3, #5
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	4413      	add	r3, r2
 8001ea2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	2310      	movs	r3, #16
 8001eaa:	6093      	str	r3, [r2, #8]
}
 8001eac:	bf00      	nop
 8001eae:	3718      	adds	r7, #24
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b088      	sub	sp, #32
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	460b      	mov	r3, r1
 8001ebe:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8001eca:	78fb      	ldrb	r3, [r7, #3]
 8001ecc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	015a      	lsls	r2, r3, #5
 8001ed2:	69bb      	ldr	r3, [r7, #24]
 8001ed4:	4413      	add	r3, r2
 8001ed6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	f003 0304 	and.w	r3, r3, #4
 8001ee0:	2b04      	cmp	r3, #4
 8001ee2:	d11a      	bne.n	8001f1a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	015a      	lsls	r2, r3, #5
 8001ee8:	69bb      	ldr	r3, [r7, #24]
 8001eea:	4413      	add	r3, r2
 8001eec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	2304      	movs	r3, #4
 8001ef4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	212c      	movs	r1, #44	; 0x2c
 8001efc:	fb01 f303 	mul.w	r3, r1, r3
 8001f00:	4413      	add	r3, r2
 8001f02:	3361      	adds	r3, #97	; 0x61
 8001f04:	2206      	movs	r2, #6
 8001f06:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	697a      	ldr	r2, [r7, #20]
 8001f0e:	b2d2      	uxtb	r2, r2
 8001f10:	4611      	mov	r1, r2
 8001f12:	4618      	mov	r0, r3
 8001f14:	f003 f9bb 	bl	800528e <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8001f18:	e2ca      	b.n	80024b0 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	015a      	lsls	r2, r3, #5
 8001f1e:	69bb      	ldr	r3, [r7, #24]
 8001f20:	4413      	add	r3, r2
 8001f22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	f003 0320 	and.w	r3, r3, #32
 8001f2c:	2b20      	cmp	r3, #32
 8001f2e:	d12e      	bne.n	8001f8e <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	015a      	lsls	r2, r3, #5
 8001f34:	69bb      	ldr	r3, [r7, #24]
 8001f36:	4413      	add	r3, r2
 8001f38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	2320      	movs	r3, #32
 8001f40:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8001f42:	687a      	ldr	r2, [r7, #4]
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	212c      	movs	r1, #44	; 0x2c
 8001f48:	fb01 f303 	mul.w	r3, r1, r3
 8001f4c:	4413      	add	r3, r2
 8001f4e:	333d      	adds	r3, #61	; 0x3d
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	f040 82ac 	bne.w	80024b0 <HCD_HC_OUT_IRQHandler+0x5fc>
      hhcd->hc[ch_num].do_ping = 0U;
 8001f58:	687a      	ldr	r2, [r7, #4]
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	212c      	movs	r1, #44	; 0x2c
 8001f5e:	fb01 f303 	mul.w	r3, r1, r3
 8001f62:	4413      	add	r3, r2
 8001f64:	333d      	adds	r3, #61	; 0x3d
 8001f66:	2200      	movs	r2, #0
 8001f68:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	212c      	movs	r1, #44	; 0x2c
 8001f70:	fb01 f303 	mul.w	r3, r1, r3
 8001f74:	4413      	add	r3, r2
 8001f76:	3360      	adds	r3, #96	; 0x60
 8001f78:	2202      	movs	r2, #2
 8001f7a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	697a      	ldr	r2, [r7, #20]
 8001f82:	b2d2      	uxtb	r2, r2
 8001f84:	4611      	mov	r1, r2
 8001f86:	4618      	mov	r0, r3
 8001f88:	f003 f981 	bl	800528e <USB_HC_Halt>
}
 8001f8c:	e290      	b.n	80024b0 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	015a      	lsls	r2, r3, #5
 8001f92:	69bb      	ldr	r3, [r7, #24]
 8001f94:	4413      	add	r3, r2
 8001f96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fa0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fa4:	d112      	bne.n	8001fcc <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	015a      	lsls	r2, r3, #5
 8001faa:	69bb      	ldr	r3, [r7, #24]
 8001fac:	4413      	add	r3, r2
 8001fae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fb8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	697a      	ldr	r2, [r7, #20]
 8001fc0:	b2d2      	uxtb	r2, r2
 8001fc2:	4611      	mov	r1, r2
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f003 f962 	bl	800528e <USB_HC_Halt>
}
 8001fca:	e271      	b.n	80024b0 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	015a      	lsls	r2, r3, #5
 8001fd0:	69bb      	ldr	r3, [r7, #24]
 8001fd2:	4413      	add	r3, r2
 8001fd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	f003 0301 	and.w	r3, r3, #1
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d140      	bne.n	8002064 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	212c      	movs	r1, #44	; 0x2c
 8001fe8:	fb01 f303 	mul.w	r3, r1, r3
 8001fec:	4413      	add	r3, r2
 8001fee:	335c      	adds	r3, #92	; 0x5c
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	015a      	lsls	r2, r3, #5
 8001ff8:	69bb      	ldr	r3, [r7, #24]
 8001ffa:	4413      	add	r3, r2
 8001ffc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002006:	2b40      	cmp	r3, #64	; 0x40
 8002008:	d111      	bne.n	800202e <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	212c      	movs	r1, #44	; 0x2c
 8002010:	fb01 f303 	mul.w	r3, r1, r3
 8002014:	4413      	add	r3, r2
 8002016:	333d      	adds	r3, #61	; 0x3d
 8002018:	2201      	movs	r2, #1
 800201a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	015a      	lsls	r2, r3, #5
 8002020:	69bb      	ldr	r3, [r7, #24]
 8002022:	4413      	add	r3, r2
 8002024:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002028:	461a      	mov	r2, r3
 800202a:	2340      	movs	r3, #64	; 0x40
 800202c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	015a      	lsls	r2, r3, #5
 8002032:	69bb      	ldr	r3, [r7, #24]
 8002034:	4413      	add	r3, r2
 8002036:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800203a:	461a      	mov	r2, r3
 800203c:	2301      	movs	r3, #1
 800203e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	212c      	movs	r1, #44	; 0x2c
 8002046:	fb01 f303 	mul.w	r3, r1, r3
 800204a:	4413      	add	r3, r2
 800204c:	3361      	adds	r3, #97	; 0x61
 800204e:	2201      	movs	r2, #1
 8002050:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	697a      	ldr	r2, [r7, #20]
 8002058:	b2d2      	uxtb	r2, r2
 800205a:	4611      	mov	r1, r2
 800205c:	4618      	mov	r0, r3
 800205e:	f003 f916 	bl	800528e <USB_HC_Halt>
}
 8002062:	e225      	b.n	80024b0 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	015a      	lsls	r2, r3, #5
 8002068:	69bb      	ldr	r3, [r7, #24]
 800206a:	4413      	add	r3, r2
 800206c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002076:	2b40      	cmp	r3, #64	; 0x40
 8002078:	d12c      	bne.n	80020d4 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 800207a:	687a      	ldr	r2, [r7, #4]
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	212c      	movs	r1, #44	; 0x2c
 8002080:	fb01 f303 	mul.w	r3, r1, r3
 8002084:	4413      	add	r3, r2
 8002086:	3361      	adds	r3, #97	; 0x61
 8002088:	2204      	movs	r2, #4
 800208a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800208c:	687a      	ldr	r2, [r7, #4]
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	212c      	movs	r1, #44	; 0x2c
 8002092:	fb01 f303 	mul.w	r3, r1, r3
 8002096:	4413      	add	r3, r2
 8002098:	333d      	adds	r3, #61	; 0x3d
 800209a:	2201      	movs	r2, #1
 800209c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800209e:	687a      	ldr	r2, [r7, #4]
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	212c      	movs	r1, #44	; 0x2c
 80020a4:	fb01 f303 	mul.w	r3, r1, r3
 80020a8:	4413      	add	r3, r2
 80020aa:	335c      	adds	r3, #92	; 0x5c
 80020ac:	2200      	movs	r2, #0
 80020ae:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	697a      	ldr	r2, [r7, #20]
 80020b6:	b2d2      	uxtb	r2, r2
 80020b8:	4611      	mov	r1, r2
 80020ba:	4618      	mov	r0, r3
 80020bc:	f003 f8e7 	bl	800528e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	015a      	lsls	r2, r3, #5
 80020c4:	69bb      	ldr	r3, [r7, #24]
 80020c6:	4413      	add	r3, r2
 80020c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020cc:	461a      	mov	r2, r3
 80020ce:	2340      	movs	r3, #64	; 0x40
 80020d0:	6093      	str	r3, [r2, #8]
}
 80020d2:	e1ed      	b.n	80024b0 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	015a      	lsls	r2, r3, #5
 80020d8:	69bb      	ldr	r3, [r7, #24]
 80020da:	4413      	add	r3, r2
 80020dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	f003 0308 	and.w	r3, r3, #8
 80020e6:	2b08      	cmp	r3, #8
 80020e8:	d11a      	bne.n	8002120 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	015a      	lsls	r2, r3, #5
 80020ee:	69bb      	ldr	r3, [r7, #24]
 80020f0:	4413      	add	r3, r2
 80020f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020f6:	461a      	mov	r2, r3
 80020f8:	2308      	movs	r3, #8
 80020fa:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80020fc:	687a      	ldr	r2, [r7, #4]
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	212c      	movs	r1, #44	; 0x2c
 8002102:	fb01 f303 	mul.w	r3, r1, r3
 8002106:	4413      	add	r3, r2
 8002108:	3361      	adds	r3, #97	; 0x61
 800210a:	2205      	movs	r2, #5
 800210c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	697a      	ldr	r2, [r7, #20]
 8002114:	b2d2      	uxtb	r2, r2
 8002116:	4611      	mov	r1, r2
 8002118:	4618      	mov	r0, r3
 800211a:	f003 f8b8 	bl	800528e <USB_HC_Halt>
}
 800211e:	e1c7      	b.n	80024b0 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	015a      	lsls	r2, r3, #5
 8002124:	69bb      	ldr	r3, [r7, #24]
 8002126:	4413      	add	r3, r2
 8002128:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	f003 0310 	and.w	r3, r3, #16
 8002132:	2b10      	cmp	r3, #16
 8002134:	d123      	bne.n	800217e <HCD_HC_OUT_IRQHandler+0x2ca>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	212c      	movs	r1, #44	; 0x2c
 800213c:	fb01 f303 	mul.w	r3, r1, r3
 8002140:	4413      	add	r3, r2
 8002142:	335c      	adds	r3, #92	; 0x5c
 8002144:	2200      	movs	r2, #0
 8002146:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	212c      	movs	r1, #44	; 0x2c
 800214e:	fb01 f303 	mul.w	r3, r1, r3
 8002152:	4413      	add	r3, r2
 8002154:	3361      	adds	r3, #97	; 0x61
 8002156:	2203      	movs	r2, #3
 8002158:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	697a      	ldr	r2, [r7, #20]
 8002160:	b2d2      	uxtb	r2, r2
 8002162:	4611      	mov	r1, r2
 8002164:	4618      	mov	r0, r3
 8002166:	f003 f892 	bl	800528e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	015a      	lsls	r2, r3, #5
 800216e:	69bb      	ldr	r3, [r7, #24]
 8002170:	4413      	add	r3, r2
 8002172:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002176:	461a      	mov	r2, r3
 8002178:	2310      	movs	r3, #16
 800217a:	6093      	str	r3, [r2, #8]
}
 800217c:	e198      	b.n	80024b0 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	015a      	lsls	r2, r3, #5
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	4413      	add	r3, r2
 8002186:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002190:	2b80      	cmp	r3, #128	; 0x80
 8002192:	d11a      	bne.n	80021ca <HCD_HC_OUT_IRQHandler+0x316>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	212c      	movs	r1, #44	; 0x2c
 800219a:	fb01 f303 	mul.w	r3, r1, r3
 800219e:	4413      	add	r3, r2
 80021a0:	3361      	adds	r3, #97	; 0x61
 80021a2:	2206      	movs	r2, #6
 80021a4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	697a      	ldr	r2, [r7, #20]
 80021ac:	b2d2      	uxtb	r2, r2
 80021ae:	4611      	mov	r1, r2
 80021b0:	4618      	mov	r0, r3
 80021b2:	f003 f86c 	bl	800528e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	015a      	lsls	r2, r3, #5
 80021ba:	69bb      	ldr	r3, [r7, #24]
 80021bc:	4413      	add	r3, r2
 80021be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021c2:	461a      	mov	r2, r3
 80021c4:	2380      	movs	r3, #128	; 0x80
 80021c6:	6093      	str	r3, [r2, #8]
}
 80021c8:	e172      	b.n	80024b0 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	015a      	lsls	r2, r3, #5
 80021ce:	69bb      	ldr	r3, [r7, #24]
 80021d0:	4413      	add	r3, r2
 80021d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021e0:	d11b      	bne.n	800221a <HCD_HC_OUT_IRQHandler+0x366>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	212c      	movs	r1, #44	; 0x2c
 80021e8:	fb01 f303 	mul.w	r3, r1, r3
 80021ec:	4413      	add	r3, r2
 80021ee:	3361      	adds	r3, #97	; 0x61
 80021f0:	2208      	movs	r2, #8
 80021f2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	697a      	ldr	r2, [r7, #20]
 80021fa:	b2d2      	uxtb	r2, r2
 80021fc:	4611      	mov	r1, r2
 80021fe:	4618      	mov	r0, r3
 8002200:	f003 f845 	bl	800528e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	015a      	lsls	r2, r3, #5
 8002208:	69bb      	ldr	r3, [r7, #24]
 800220a:	4413      	add	r3, r2
 800220c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002210:	461a      	mov	r2, r3
 8002212:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002216:	6093      	str	r3, [r2, #8]
}
 8002218:	e14a      	b.n	80024b0 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	015a      	lsls	r2, r3, #5
 800221e:	69bb      	ldr	r3, [r7, #24]
 8002220:	4413      	add	r3, r2
 8002222:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	f003 0302 	and.w	r3, r3, #2
 800222c:	2b02      	cmp	r3, #2
 800222e:	f040 813f 	bne.w	80024b0 <HCD_HC_OUT_IRQHandler+0x5fc>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	212c      	movs	r1, #44	; 0x2c
 8002238:	fb01 f303 	mul.w	r3, r1, r3
 800223c:	4413      	add	r3, r2
 800223e:	3361      	adds	r3, #97	; 0x61
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	2b01      	cmp	r3, #1
 8002244:	d17d      	bne.n	8002342 <HCD_HC_OUT_IRQHandler+0x48e>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	212c      	movs	r1, #44	; 0x2c
 800224c:	fb01 f303 	mul.w	r3, r1, r3
 8002250:	4413      	add	r3, r2
 8002252:	3360      	adds	r3, #96	; 0x60
 8002254:	2201      	movs	r2, #1
 8002256:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002258:	687a      	ldr	r2, [r7, #4]
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	212c      	movs	r1, #44	; 0x2c
 800225e:	fb01 f303 	mul.w	r3, r1, r3
 8002262:	4413      	add	r3, r2
 8002264:	333f      	adds	r3, #63	; 0x3f
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	2b02      	cmp	r3, #2
 800226a:	d00a      	beq.n	8002282 <HCD_HC_OUT_IRQHandler+0x3ce>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	212c      	movs	r1, #44	; 0x2c
 8002272:	fb01 f303 	mul.w	r3, r1, r3
 8002276:	4413      	add	r3, r2
 8002278:	333f      	adds	r3, #63	; 0x3f
 800227a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800227c:	2b03      	cmp	r3, #3
 800227e:	f040 8100 	bne.w	8002482 <HCD_HC_OUT_IRQHandler+0x5ce>
        if (hhcd->Init.dma_enable == 0U)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	691b      	ldr	r3, [r3, #16]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d113      	bne.n	80022b2 <HCD_HC_OUT_IRQHandler+0x3fe>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	212c      	movs	r1, #44	; 0x2c
 8002290:	fb01 f303 	mul.w	r3, r1, r3
 8002294:	4413      	add	r3, r2
 8002296:	3355      	adds	r3, #85	; 0x55
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	f083 0301 	eor.w	r3, r3, #1
 800229e:	b2d8      	uxtb	r0, r3
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	212c      	movs	r1, #44	; 0x2c
 80022a6:	fb01 f303 	mul.w	r3, r1, r3
 80022aa:	4413      	add	r3, r2
 80022ac:	3355      	adds	r3, #85	; 0x55
 80022ae:	4602      	mov	r2, r0
 80022b0:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	691b      	ldr	r3, [r3, #16]
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	f040 80e3 	bne.w	8002482 <HCD_HC_OUT_IRQHandler+0x5ce>
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	212c      	movs	r1, #44	; 0x2c
 80022c2:	fb01 f303 	mul.w	r3, r1, r3
 80022c6:	4413      	add	r3, r2
 80022c8:	334c      	adds	r3, #76	; 0x4c
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	f000 80d8 	beq.w	8002482 <HCD_HC_OUT_IRQHandler+0x5ce>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	212c      	movs	r1, #44	; 0x2c
 80022d8:	fb01 f303 	mul.w	r3, r1, r3
 80022dc:	4413      	add	r3, r2
 80022de:	334c      	adds	r3, #76	; 0x4c
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	6879      	ldr	r1, [r7, #4]
 80022e4:	697a      	ldr	r2, [r7, #20]
 80022e6:	202c      	movs	r0, #44	; 0x2c
 80022e8:	fb00 f202 	mul.w	r2, r0, r2
 80022ec:	440a      	add	r2, r1
 80022ee:	3240      	adds	r2, #64	; 0x40
 80022f0:	8812      	ldrh	r2, [r2, #0]
 80022f2:	4413      	add	r3, r2
 80022f4:	3b01      	subs	r3, #1
 80022f6:	6879      	ldr	r1, [r7, #4]
 80022f8:	697a      	ldr	r2, [r7, #20]
 80022fa:	202c      	movs	r0, #44	; 0x2c
 80022fc:	fb00 f202 	mul.w	r2, r0, r2
 8002300:	440a      	add	r2, r1
 8002302:	3240      	adds	r2, #64	; 0x40
 8002304:	8812      	ldrh	r2, [r2, #0]
 8002306:	fbb3 f3f2 	udiv	r3, r3, r2
 800230a:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	f003 0301 	and.w	r3, r3, #1
 8002312:	2b00      	cmp	r3, #0
 8002314:	f000 80b5 	beq.w	8002482 <HCD_HC_OUT_IRQHandler+0x5ce>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002318:	687a      	ldr	r2, [r7, #4]
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	212c      	movs	r1, #44	; 0x2c
 800231e:	fb01 f303 	mul.w	r3, r1, r3
 8002322:	4413      	add	r3, r2
 8002324:	3355      	adds	r3, #85	; 0x55
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	f083 0301 	eor.w	r3, r3, #1
 800232c:	b2d8      	uxtb	r0, r3
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	212c      	movs	r1, #44	; 0x2c
 8002334:	fb01 f303 	mul.w	r3, r1, r3
 8002338:	4413      	add	r3, r2
 800233a:	3355      	adds	r3, #85	; 0x55
 800233c:	4602      	mov	r2, r0
 800233e:	701a      	strb	r2, [r3, #0]
 8002340:	e09f      	b.n	8002482 <HCD_HC_OUT_IRQHandler+0x5ce>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	212c      	movs	r1, #44	; 0x2c
 8002348:	fb01 f303 	mul.w	r3, r1, r3
 800234c:	4413      	add	r3, r2
 800234e:	3361      	adds	r3, #97	; 0x61
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	2b03      	cmp	r3, #3
 8002354:	d109      	bne.n	800236a <HCD_HC_OUT_IRQHandler+0x4b6>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	212c      	movs	r1, #44	; 0x2c
 800235c:	fb01 f303 	mul.w	r3, r1, r3
 8002360:	4413      	add	r3, r2
 8002362:	3360      	adds	r3, #96	; 0x60
 8002364:	2202      	movs	r2, #2
 8002366:	701a      	strb	r2, [r3, #0]
 8002368:	e08b      	b.n	8002482 <HCD_HC_OUT_IRQHandler+0x5ce>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	212c      	movs	r1, #44	; 0x2c
 8002370:	fb01 f303 	mul.w	r3, r1, r3
 8002374:	4413      	add	r3, r2
 8002376:	3361      	adds	r3, #97	; 0x61
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	2b04      	cmp	r3, #4
 800237c:	d109      	bne.n	8002392 <HCD_HC_OUT_IRQHandler+0x4de>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	212c      	movs	r1, #44	; 0x2c
 8002384:	fb01 f303 	mul.w	r3, r1, r3
 8002388:	4413      	add	r3, r2
 800238a:	3360      	adds	r3, #96	; 0x60
 800238c:	2202      	movs	r2, #2
 800238e:	701a      	strb	r2, [r3, #0]
 8002390:	e077      	b.n	8002482 <HCD_HC_OUT_IRQHandler+0x5ce>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	212c      	movs	r1, #44	; 0x2c
 8002398:	fb01 f303 	mul.w	r3, r1, r3
 800239c:	4413      	add	r3, r2
 800239e:	3361      	adds	r3, #97	; 0x61
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	2b05      	cmp	r3, #5
 80023a4:	d109      	bne.n	80023ba <HCD_HC_OUT_IRQHandler+0x506>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	212c      	movs	r1, #44	; 0x2c
 80023ac:	fb01 f303 	mul.w	r3, r1, r3
 80023b0:	4413      	add	r3, r2
 80023b2:	3360      	adds	r3, #96	; 0x60
 80023b4:	2205      	movs	r2, #5
 80023b6:	701a      	strb	r2, [r3, #0]
 80023b8:	e063      	b.n	8002482 <HCD_HC_OUT_IRQHandler+0x5ce>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	212c      	movs	r1, #44	; 0x2c
 80023c0:	fb01 f303 	mul.w	r3, r1, r3
 80023c4:	4413      	add	r3, r2
 80023c6:	3361      	adds	r3, #97	; 0x61
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	2b06      	cmp	r3, #6
 80023cc:	d009      	beq.n	80023e2 <HCD_HC_OUT_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	212c      	movs	r1, #44	; 0x2c
 80023d4:	fb01 f303 	mul.w	r3, r1, r3
 80023d8:	4413      	add	r3, r2
 80023da:	3361      	adds	r3, #97	; 0x61
 80023dc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80023de:	2b08      	cmp	r3, #8
 80023e0:	d14f      	bne.n	8002482 <HCD_HC_OUT_IRQHandler+0x5ce>
      hhcd->hc[ch_num].ErrCnt++;
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	212c      	movs	r1, #44	; 0x2c
 80023e8:	fb01 f303 	mul.w	r3, r1, r3
 80023ec:	4413      	add	r3, r2
 80023ee:	335c      	adds	r3, #92	; 0x5c
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	1c5a      	adds	r2, r3, #1
 80023f4:	6879      	ldr	r1, [r7, #4]
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	202c      	movs	r0, #44	; 0x2c
 80023fa:	fb00 f303 	mul.w	r3, r0, r3
 80023fe:	440b      	add	r3, r1
 8002400:	335c      	adds	r3, #92	; 0x5c
 8002402:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002404:	687a      	ldr	r2, [r7, #4]
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	212c      	movs	r1, #44	; 0x2c
 800240a:	fb01 f303 	mul.w	r3, r1, r3
 800240e:	4413      	add	r3, r2
 8002410:	335c      	adds	r3, #92	; 0x5c
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2b02      	cmp	r3, #2
 8002416:	d912      	bls.n	800243e <HCD_HC_OUT_IRQHandler+0x58a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	212c      	movs	r1, #44	; 0x2c
 800241e:	fb01 f303 	mul.w	r3, r1, r3
 8002422:	4413      	add	r3, r2
 8002424:	335c      	adds	r3, #92	; 0x5c
 8002426:	2200      	movs	r2, #0
 8002428:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	212c      	movs	r1, #44	; 0x2c
 8002430:	fb01 f303 	mul.w	r3, r1, r3
 8002434:	4413      	add	r3, r2
 8002436:	3360      	adds	r3, #96	; 0x60
 8002438:	2204      	movs	r2, #4
 800243a:	701a      	strb	r2, [r3, #0]
 800243c:	e021      	b.n	8002482 <HCD_HC_OUT_IRQHandler+0x5ce>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	212c      	movs	r1, #44	; 0x2c
 8002444:	fb01 f303 	mul.w	r3, r1, r3
 8002448:	4413      	add	r3, r2
 800244a:	3360      	adds	r3, #96	; 0x60
 800244c:	2202      	movs	r2, #2
 800244e:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	015a      	lsls	r2, r3, #5
 8002454:	69bb      	ldr	r3, [r7, #24]
 8002456:	4413      	add	r3, r2
 8002458:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002466:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800246e:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	015a      	lsls	r2, r3, #5
 8002474:	69bb      	ldr	r3, [r7, #24]
 8002476:	4413      	add	r3, r2
 8002478:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800247c:	461a      	mov	r2, r3
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	015a      	lsls	r2, r3, #5
 8002486:	69bb      	ldr	r3, [r7, #24]
 8002488:	4413      	add	r3, r2
 800248a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800248e:	461a      	mov	r2, r3
 8002490:	2302      	movs	r3, #2
 8002492:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	b2d9      	uxtb	r1, r3
 8002498:	687a      	ldr	r2, [r7, #4]
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	202c      	movs	r0, #44	; 0x2c
 800249e:	fb00 f303 	mul.w	r3, r0, r3
 80024a2:	4413      	add	r3, r2
 80024a4:	3360      	adds	r3, #96	; 0x60
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	461a      	mov	r2, r3
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f006 fbfe 	bl	8008cac <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80024b0:	bf00      	nop
 80024b2:	3720      	adds	r7, #32
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}

080024b8 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b08a      	sub	sp, #40	; 0x28
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c8:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	6a1b      	ldr	r3, [r3, #32]
 80024d0:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	f003 030f 	and.w	r3, r3, #15
 80024d8:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	0c5b      	lsrs	r3, r3, #17
 80024de:	f003 030f 	and.w	r3, r3, #15
 80024e2:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	091b      	lsrs	r3, r3, #4
 80024e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80024ec:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d004      	beq.n	80024fe <HCD_RXQLVL_IRQHandler+0x46>
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	2b05      	cmp	r3, #5
 80024f8:	f000 80a9 	beq.w	800264e <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80024fc:	e0aa      	b.n	8002654 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	2b00      	cmp	r3, #0
 8002502:	f000 80a6 	beq.w	8002652 <HCD_RXQLVL_IRQHandler+0x19a>
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	69bb      	ldr	r3, [r7, #24]
 800250a:	212c      	movs	r1, #44	; 0x2c
 800250c:	fb01 f303 	mul.w	r3, r1, r3
 8002510:	4413      	add	r3, r2
 8002512:	3344      	adds	r3, #68	; 0x44
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	2b00      	cmp	r3, #0
 8002518:	f000 809b 	beq.w	8002652 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800251c:	687a      	ldr	r2, [r7, #4]
 800251e:	69bb      	ldr	r3, [r7, #24]
 8002520:	212c      	movs	r1, #44	; 0x2c
 8002522:	fb01 f303 	mul.w	r3, r1, r3
 8002526:	4413      	add	r3, r2
 8002528:	3350      	adds	r3, #80	; 0x50
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	441a      	add	r2, r3
 8002530:	6879      	ldr	r1, [r7, #4]
 8002532:	69bb      	ldr	r3, [r7, #24]
 8002534:	202c      	movs	r0, #44	; 0x2c
 8002536:	fb00 f303 	mul.w	r3, r0, r3
 800253a:	440b      	add	r3, r1
 800253c:	334c      	adds	r3, #76	; 0x4c
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	429a      	cmp	r2, r3
 8002542:	d87a      	bhi.n	800263a <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6818      	ldr	r0, [r3, #0]
 8002548:	687a      	ldr	r2, [r7, #4]
 800254a:	69bb      	ldr	r3, [r7, #24]
 800254c:	212c      	movs	r1, #44	; 0x2c
 800254e:	fb01 f303 	mul.w	r3, r1, r3
 8002552:	4413      	add	r3, r2
 8002554:	3344      	adds	r3, #68	; 0x44
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	693a      	ldr	r2, [r7, #16]
 800255a:	b292      	uxth	r2, r2
 800255c:	4619      	mov	r1, r3
 800255e:	f002 fa8b 	bl	8004a78 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	69bb      	ldr	r3, [r7, #24]
 8002566:	212c      	movs	r1, #44	; 0x2c
 8002568:	fb01 f303 	mul.w	r3, r1, r3
 800256c:	4413      	add	r3, r2
 800256e:	3344      	adds	r3, #68	; 0x44
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	441a      	add	r2, r3
 8002576:	6879      	ldr	r1, [r7, #4]
 8002578:	69bb      	ldr	r3, [r7, #24]
 800257a:	202c      	movs	r0, #44	; 0x2c
 800257c:	fb00 f303 	mul.w	r3, r0, r3
 8002580:	440b      	add	r3, r1
 8002582:	3344      	adds	r3, #68	; 0x44
 8002584:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	69bb      	ldr	r3, [r7, #24]
 800258a:	212c      	movs	r1, #44	; 0x2c
 800258c:	fb01 f303 	mul.w	r3, r1, r3
 8002590:	4413      	add	r3, r2
 8002592:	3350      	adds	r3, #80	; 0x50
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	441a      	add	r2, r3
 800259a:	6879      	ldr	r1, [r7, #4]
 800259c:	69bb      	ldr	r3, [r7, #24]
 800259e:	202c      	movs	r0, #44	; 0x2c
 80025a0:	fb00 f303 	mul.w	r3, r0, r3
 80025a4:	440b      	add	r3, r1
 80025a6:	3350      	adds	r3, #80	; 0x50
 80025a8:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	015a      	lsls	r2, r3, #5
 80025ae:	6a3b      	ldr	r3, [r7, #32]
 80025b0:	4413      	add	r3, r2
 80025b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025b6:	691b      	ldr	r3, [r3, #16]
 80025b8:	0cdb      	lsrs	r3, r3, #19
 80025ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025be:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	69bb      	ldr	r3, [r7, #24]
 80025c4:	212c      	movs	r1, #44	; 0x2c
 80025c6:	fb01 f303 	mul.w	r3, r1, r3
 80025ca:	4413      	add	r3, r2
 80025cc:	3340      	adds	r3, #64	; 0x40
 80025ce:	881b      	ldrh	r3, [r3, #0]
 80025d0:	461a      	mov	r2, r3
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d13c      	bne.n	8002652 <HCD_RXQLVL_IRQHandler+0x19a>
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d039      	beq.n	8002652 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80025de:	69bb      	ldr	r3, [r7, #24]
 80025e0:	015a      	lsls	r2, r3, #5
 80025e2:	6a3b      	ldr	r3, [r7, #32]
 80025e4:	4413      	add	r3, r2
 80025e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80025f4:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80025fc:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80025fe:	69bb      	ldr	r3, [r7, #24]
 8002600:	015a      	lsls	r2, r3, #5
 8002602:	6a3b      	ldr	r3, [r7, #32]
 8002604:	4413      	add	r3, r2
 8002606:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800260a:	461a      	mov	r2, r3
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002610:	687a      	ldr	r2, [r7, #4]
 8002612:	69bb      	ldr	r3, [r7, #24]
 8002614:	212c      	movs	r1, #44	; 0x2c
 8002616:	fb01 f303 	mul.w	r3, r1, r3
 800261a:	4413      	add	r3, r2
 800261c:	3354      	adds	r3, #84	; 0x54
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	f083 0301 	eor.w	r3, r3, #1
 8002624:	b2d8      	uxtb	r0, r3
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	69bb      	ldr	r3, [r7, #24]
 800262a:	212c      	movs	r1, #44	; 0x2c
 800262c:	fb01 f303 	mul.w	r3, r1, r3
 8002630:	4413      	add	r3, r2
 8002632:	3354      	adds	r3, #84	; 0x54
 8002634:	4602      	mov	r2, r0
 8002636:	701a      	strb	r2, [r3, #0]
      break;
 8002638:	e00b      	b.n	8002652 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	69bb      	ldr	r3, [r7, #24]
 800263e:	212c      	movs	r1, #44	; 0x2c
 8002640:	fb01 f303 	mul.w	r3, r1, r3
 8002644:	4413      	add	r3, r2
 8002646:	3360      	adds	r3, #96	; 0x60
 8002648:	2204      	movs	r2, #4
 800264a:	701a      	strb	r2, [r3, #0]
      break;
 800264c:	e001      	b.n	8002652 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 800264e:	bf00      	nop
 8002650:	e000      	b.n	8002654 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002652:	bf00      	nop
  }
}
 8002654:	bf00      	nop
 8002656:	3728      	adds	r7, #40	; 0x28
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}

0800265c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b086      	sub	sp, #24
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002688:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	f003 0302 	and.w	r3, r3, #2
 8002690:	2b02      	cmp	r3, #2
 8002692:	d10b      	bne.n	80026ac <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	f003 0301 	and.w	r3, r3, #1
 800269a:	2b01      	cmp	r3, #1
 800269c:	d102      	bne.n	80026a4 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f006 fae8 	bl	8008c74 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	f043 0302 	orr.w	r3, r3, #2
 80026aa:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	f003 0308 	and.w	r3, r3, #8
 80026b2:	2b08      	cmp	r3, #8
 80026b4:	d132      	bne.n	800271c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	f043 0308 	orr.w	r3, r3, #8
 80026bc:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	f003 0304 	and.w	r3, r3, #4
 80026c4:	2b04      	cmp	r3, #4
 80026c6:	d126      	bne.n	8002716 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	699b      	ldr	r3, [r3, #24]
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d113      	bne.n	80026f8 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80026d6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80026da:	d106      	bne.n	80026ea <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	2102      	movs	r1, #2
 80026e2:	4618      	mov	r0, r3
 80026e4:	f002 faf8 	bl	8004cd8 <USB_InitFSLSPClkSel>
 80026e8:	e011      	b.n	800270e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	2101      	movs	r1, #1
 80026f0:	4618      	mov	r0, r3
 80026f2:	f002 faf1 	bl	8004cd8 <USB_InitFSLSPClkSel>
 80026f6:	e00a      	b.n	800270e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d106      	bne.n	800270e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002706:	461a      	mov	r2, r3
 8002708:	f64e 2360 	movw	r3, #60000	; 0xea60
 800270c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f006 fada 	bl	8008cc8 <HAL_HCD_PortEnabled_Callback>
 8002714:	e002      	b.n	800271c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f006 fae4 	bl	8008ce4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f003 0320 	and.w	r3, r3, #32
 8002722:	2b20      	cmp	r3, #32
 8002724:	d103      	bne.n	800272e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	f043 0320 	orr.w	r3, r3, #32
 800272c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002734:	461a      	mov	r2, r3
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	6013      	str	r3, [r2, #0]
}
 800273a:	bf00      	nop
 800273c:	3718      	adds	r7, #24
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
	...

08002744 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002744:	b480      	push	{r7}
 8002746:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002748:	4b05      	ldr	r3, [pc, #20]	; (8002760 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a04      	ldr	r2, [pc, #16]	; (8002760 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800274e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002752:	6013      	str	r3, [r2, #0]
}
 8002754:	bf00      	nop
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr
 800275e:	bf00      	nop
 8002760:	40007000 	.word	0x40007000

08002764 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002764:	b480      	push	{r7}
 8002766:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002768:	4b04      	ldr	r3, [pc, #16]	; (800277c <HAL_PWREx_GetVoltageRange+0x18>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002770:	4618      	mov	r0, r3
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	40007000 	.word	0x40007000

08002780 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002780:	b480      	push	{r7}
 8002782:	b085      	sub	sp, #20
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800278e:	d130      	bne.n	80027f2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002790:	4b23      	ldr	r3, [pc, #140]	; (8002820 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002798:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800279c:	d038      	beq.n	8002810 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800279e:	4b20      	ldr	r3, [pc, #128]	; (8002820 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80027a6:	4a1e      	ldr	r2, [pc, #120]	; (8002820 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027ac:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80027ae:	4b1d      	ldr	r3, [pc, #116]	; (8002824 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	2232      	movs	r2, #50	; 0x32
 80027b4:	fb02 f303 	mul.w	r3, r2, r3
 80027b8:	4a1b      	ldr	r2, [pc, #108]	; (8002828 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80027ba:	fba2 2303 	umull	r2, r3, r2, r3
 80027be:	0c9b      	lsrs	r3, r3, #18
 80027c0:	3301      	adds	r3, #1
 80027c2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80027c4:	e002      	b.n	80027cc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	3b01      	subs	r3, #1
 80027ca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80027cc:	4b14      	ldr	r3, [pc, #80]	; (8002820 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027ce:	695b      	ldr	r3, [r3, #20]
 80027d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027d8:	d102      	bne.n	80027e0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d1f2      	bne.n	80027c6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80027e0:	4b0f      	ldr	r3, [pc, #60]	; (8002820 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027e2:	695b      	ldr	r3, [r3, #20]
 80027e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027ec:	d110      	bne.n	8002810 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e00f      	b.n	8002812 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80027f2:	4b0b      	ldr	r3, [pc, #44]	; (8002820 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80027fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027fe:	d007      	beq.n	8002810 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002800:	4b07      	ldr	r3, [pc, #28]	; (8002820 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002808:	4a05      	ldr	r2, [pc, #20]	; (8002820 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800280a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800280e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002810:	2300      	movs	r3, #0
}
 8002812:	4618      	mov	r0, r3
 8002814:	3714      	adds	r7, #20
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop
 8002820:	40007000 	.word	0x40007000
 8002824:	20000000 	.word	0x20000000
 8002828:	431bde83 	.word	0x431bde83

0800282c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800282c:	b480      	push	{r7}
 800282e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002830:	4b05      	ldr	r3, [pc, #20]	; (8002848 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	4a04      	ldr	r2, [pc, #16]	; (8002848 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002836:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800283a:	6053      	str	r3, [r2, #4]
}
 800283c:	bf00      	nop
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop
 8002848:	40007000 	.word	0x40007000

0800284c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800284c:	b480      	push	{r7}
 800284e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002850:	4b05      	ldr	r3, [pc, #20]	; (8002868 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	4a04      	ldr	r2, [pc, #16]	; (8002868 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002856:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800285a:	6053      	str	r3, [r2, #4]
}
 800285c:	bf00      	nop
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr
 8002866:	bf00      	nop
 8002868:	40007000 	.word	0x40007000

0800286c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b088      	sub	sp, #32
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d102      	bne.n	8002880 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	f000 bc08 	b.w	8003090 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002880:	4b96      	ldr	r3, [pc, #600]	; (8002adc <HAL_RCC_OscConfig+0x270>)
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	f003 030c 	and.w	r3, r3, #12
 8002888:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800288a:	4b94      	ldr	r3, [pc, #592]	; (8002adc <HAL_RCC_OscConfig+0x270>)
 800288c:	68db      	ldr	r3, [r3, #12]
 800288e:	f003 0303 	and.w	r3, r3, #3
 8002892:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0310 	and.w	r3, r3, #16
 800289c:	2b00      	cmp	r3, #0
 800289e:	f000 80e4 	beq.w	8002a6a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80028a2:	69bb      	ldr	r3, [r7, #24]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d007      	beq.n	80028b8 <HAL_RCC_OscConfig+0x4c>
 80028a8:	69bb      	ldr	r3, [r7, #24]
 80028aa:	2b0c      	cmp	r3, #12
 80028ac:	f040 808b 	bne.w	80029c6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	f040 8087 	bne.w	80029c6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80028b8:	4b88      	ldr	r3, [pc, #544]	; (8002adc <HAL_RCC_OscConfig+0x270>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0302 	and.w	r3, r3, #2
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d005      	beq.n	80028d0 <HAL_RCC_OscConfig+0x64>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	699b      	ldr	r3, [r3, #24]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d101      	bne.n	80028d0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e3df      	b.n	8003090 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6a1a      	ldr	r2, [r3, #32]
 80028d4:	4b81      	ldr	r3, [pc, #516]	; (8002adc <HAL_RCC_OscConfig+0x270>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0308 	and.w	r3, r3, #8
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d004      	beq.n	80028ea <HAL_RCC_OscConfig+0x7e>
 80028e0:	4b7e      	ldr	r3, [pc, #504]	; (8002adc <HAL_RCC_OscConfig+0x270>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028e8:	e005      	b.n	80028f6 <HAL_RCC_OscConfig+0x8a>
 80028ea:	4b7c      	ldr	r3, [pc, #496]	; (8002adc <HAL_RCC_OscConfig+0x270>)
 80028ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028f0:	091b      	lsrs	r3, r3, #4
 80028f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d223      	bcs.n	8002942 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6a1b      	ldr	r3, [r3, #32]
 80028fe:	4618      	mov	r0, r3
 8002900:	f000 fd92 	bl	8003428 <RCC_SetFlashLatencyFromMSIRange>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d001      	beq.n	800290e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e3c0      	b.n	8003090 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800290e:	4b73      	ldr	r3, [pc, #460]	; (8002adc <HAL_RCC_OscConfig+0x270>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a72      	ldr	r2, [pc, #456]	; (8002adc <HAL_RCC_OscConfig+0x270>)
 8002914:	f043 0308 	orr.w	r3, r3, #8
 8002918:	6013      	str	r3, [r2, #0]
 800291a:	4b70      	ldr	r3, [pc, #448]	; (8002adc <HAL_RCC_OscConfig+0x270>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6a1b      	ldr	r3, [r3, #32]
 8002926:	496d      	ldr	r1, [pc, #436]	; (8002adc <HAL_RCC_OscConfig+0x270>)
 8002928:	4313      	orrs	r3, r2
 800292a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800292c:	4b6b      	ldr	r3, [pc, #428]	; (8002adc <HAL_RCC_OscConfig+0x270>)
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	69db      	ldr	r3, [r3, #28]
 8002938:	021b      	lsls	r3, r3, #8
 800293a:	4968      	ldr	r1, [pc, #416]	; (8002adc <HAL_RCC_OscConfig+0x270>)
 800293c:	4313      	orrs	r3, r2
 800293e:	604b      	str	r3, [r1, #4]
 8002940:	e025      	b.n	800298e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002942:	4b66      	ldr	r3, [pc, #408]	; (8002adc <HAL_RCC_OscConfig+0x270>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a65      	ldr	r2, [pc, #404]	; (8002adc <HAL_RCC_OscConfig+0x270>)
 8002948:	f043 0308 	orr.w	r3, r3, #8
 800294c:	6013      	str	r3, [r2, #0]
 800294e:	4b63      	ldr	r3, [pc, #396]	; (8002adc <HAL_RCC_OscConfig+0x270>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6a1b      	ldr	r3, [r3, #32]
 800295a:	4960      	ldr	r1, [pc, #384]	; (8002adc <HAL_RCC_OscConfig+0x270>)
 800295c:	4313      	orrs	r3, r2
 800295e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002960:	4b5e      	ldr	r3, [pc, #376]	; (8002adc <HAL_RCC_OscConfig+0x270>)
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	69db      	ldr	r3, [r3, #28]
 800296c:	021b      	lsls	r3, r3, #8
 800296e:	495b      	ldr	r1, [pc, #364]	; (8002adc <HAL_RCC_OscConfig+0x270>)
 8002970:	4313      	orrs	r3, r2
 8002972:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002974:	69bb      	ldr	r3, [r7, #24]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d109      	bne.n	800298e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6a1b      	ldr	r3, [r3, #32]
 800297e:	4618      	mov	r0, r3
 8002980:	f000 fd52 	bl	8003428 <RCC_SetFlashLatencyFromMSIRange>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d001      	beq.n	800298e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e380      	b.n	8003090 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800298e:	f000 fc87 	bl	80032a0 <HAL_RCC_GetSysClockFreq>
 8002992:	4602      	mov	r2, r0
 8002994:	4b51      	ldr	r3, [pc, #324]	; (8002adc <HAL_RCC_OscConfig+0x270>)
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	091b      	lsrs	r3, r3, #4
 800299a:	f003 030f 	and.w	r3, r3, #15
 800299e:	4950      	ldr	r1, [pc, #320]	; (8002ae0 <HAL_RCC_OscConfig+0x274>)
 80029a0:	5ccb      	ldrb	r3, [r1, r3]
 80029a2:	f003 031f 	and.w	r3, r3, #31
 80029a6:	fa22 f303 	lsr.w	r3, r2, r3
 80029aa:	4a4e      	ldr	r2, [pc, #312]	; (8002ae4 <HAL_RCC_OscConfig+0x278>)
 80029ac:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80029ae:	4b4e      	ldr	r3, [pc, #312]	; (8002ae8 <HAL_RCC_OscConfig+0x27c>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4618      	mov	r0, r3
 80029b4:	f7fe f820 	bl	80009f8 <HAL_InitTick>
 80029b8:	4603      	mov	r3, r0
 80029ba:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80029bc:	7bfb      	ldrb	r3, [r7, #15]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d052      	beq.n	8002a68 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80029c2:	7bfb      	ldrb	r3, [r7, #15]
 80029c4:	e364      	b.n	8003090 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	699b      	ldr	r3, [r3, #24]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d032      	beq.n	8002a34 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80029ce:	4b43      	ldr	r3, [pc, #268]	; (8002adc <HAL_RCC_OscConfig+0x270>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a42      	ldr	r2, [pc, #264]	; (8002adc <HAL_RCC_OscConfig+0x270>)
 80029d4:	f043 0301 	orr.w	r3, r3, #1
 80029d8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80029da:	f7fe f85d 	bl	8000a98 <HAL_GetTick>
 80029de:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80029e0:	e008      	b.n	80029f4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80029e2:	f7fe f859 	bl	8000a98 <HAL_GetTick>
 80029e6:	4602      	mov	r2, r0
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d901      	bls.n	80029f4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80029f0:	2303      	movs	r3, #3
 80029f2:	e34d      	b.n	8003090 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80029f4:	4b39      	ldr	r3, [pc, #228]	; (8002adc <HAL_RCC_OscConfig+0x270>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0302 	and.w	r3, r3, #2
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d0f0      	beq.n	80029e2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a00:	4b36      	ldr	r3, [pc, #216]	; (8002adc <HAL_RCC_OscConfig+0x270>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a35      	ldr	r2, [pc, #212]	; (8002adc <HAL_RCC_OscConfig+0x270>)
 8002a06:	f043 0308 	orr.w	r3, r3, #8
 8002a0a:	6013      	str	r3, [r2, #0]
 8002a0c:	4b33      	ldr	r3, [pc, #204]	; (8002adc <HAL_RCC_OscConfig+0x270>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6a1b      	ldr	r3, [r3, #32]
 8002a18:	4930      	ldr	r1, [pc, #192]	; (8002adc <HAL_RCC_OscConfig+0x270>)
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a1e:	4b2f      	ldr	r3, [pc, #188]	; (8002adc <HAL_RCC_OscConfig+0x270>)
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	69db      	ldr	r3, [r3, #28]
 8002a2a:	021b      	lsls	r3, r3, #8
 8002a2c:	492b      	ldr	r1, [pc, #172]	; (8002adc <HAL_RCC_OscConfig+0x270>)
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	604b      	str	r3, [r1, #4]
 8002a32:	e01a      	b.n	8002a6a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002a34:	4b29      	ldr	r3, [pc, #164]	; (8002adc <HAL_RCC_OscConfig+0x270>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a28      	ldr	r2, [pc, #160]	; (8002adc <HAL_RCC_OscConfig+0x270>)
 8002a3a:	f023 0301 	bic.w	r3, r3, #1
 8002a3e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a40:	f7fe f82a 	bl	8000a98 <HAL_GetTick>
 8002a44:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a46:	e008      	b.n	8002a5a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a48:	f7fe f826 	bl	8000a98 <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d901      	bls.n	8002a5a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e31a      	b.n	8003090 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a5a:	4b20      	ldr	r3, [pc, #128]	; (8002adc <HAL_RCC_OscConfig+0x270>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0302 	and.w	r3, r3, #2
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d1f0      	bne.n	8002a48 <HAL_RCC_OscConfig+0x1dc>
 8002a66:	e000      	b.n	8002a6a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a68:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0301 	and.w	r3, r3, #1
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d073      	beq.n	8002b5e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002a76:	69bb      	ldr	r3, [r7, #24]
 8002a78:	2b08      	cmp	r3, #8
 8002a7a:	d005      	beq.n	8002a88 <HAL_RCC_OscConfig+0x21c>
 8002a7c:	69bb      	ldr	r3, [r7, #24]
 8002a7e:	2b0c      	cmp	r3, #12
 8002a80:	d10e      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	2b03      	cmp	r3, #3
 8002a86:	d10b      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a88:	4b14      	ldr	r3, [pc, #80]	; (8002adc <HAL_RCC_OscConfig+0x270>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d063      	beq.n	8002b5c <HAL_RCC_OscConfig+0x2f0>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d15f      	bne.n	8002b5c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e2f7      	b.n	8003090 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002aa8:	d106      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x24c>
 8002aaa:	4b0c      	ldr	r3, [pc, #48]	; (8002adc <HAL_RCC_OscConfig+0x270>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a0b      	ldr	r2, [pc, #44]	; (8002adc <HAL_RCC_OscConfig+0x270>)
 8002ab0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ab4:	6013      	str	r3, [r2, #0]
 8002ab6:	e025      	b.n	8002b04 <HAL_RCC_OscConfig+0x298>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ac0:	d114      	bne.n	8002aec <HAL_RCC_OscConfig+0x280>
 8002ac2:	4b06      	ldr	r3, [pc, #24]	; (8002adc <HAL_RCC_OscConfig+0x270>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a05      	ldr	r2, [pc, #20]	; (8002adc <HAL_RCC_OscConfig+0x270>)
 8002ac8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002acc:	6013      	str	r3, [r2, #0]
 8002ace:	4b03      	ldr	r3, [pc, #12]	; (8002adc <HAL_RCC_OscConfig+0x270>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a02      	ldr	r2, [pc, #8]	; (8002adc <HAL_RCC_OscConfig+0x270>)
 8002ad4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ad8:	6013      	str	r3, [r2, #0]
 8002ada:	e013      	b.n	8002b04 <HAL_RCC_OscConfig+0x298>
 8002adc:	40021000 	.word	0x40021000
 8002ae0:	08009360 	.word	0x08009360
 8002ae4:	20000000 	.word	0x20000000
 8002ae8:	20000004 	.word	0x20000004
 8002aec:	4ba0      	ldr	r3, [pc, #640]	; (8002d70 <HAL_RCC_OscConfig+0x504>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a9f      	ldr	r2, [pc, #636]	; (8002d70 <HAL_RCC_OscConfig+0x504>)
 8002af2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002af6:	6013      	str	r3, [r2, #0]
 8002af8:	4b9d      	ldr	r3, [pc, #628]	; (8002d70 <HAL_RCC_OscConfig+0x504>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a9c      	ldr	r2, [pc, #624]	; (8002d70 <HAL_RCC_OscConfig+0x504>)
 8002afe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d013      	beq.n	8002b34 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b0c:	f7fd ffc4 	bl	8000a98 <HAL_GetTick>
 8002b10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b12:	e008      	b.n	8002b26 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b14:	f7fd ffc0 	bl	8000a98 <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	2b64      	cmp	r3, #100	; 0x64
 8002b20:	d901      	bls.n	8002b26 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e2b4      	b.n	8003090 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b26:	4b92      	ldr	r3, [pc, #584]	; (8002d70 <HAL_RCC_OscConfig+0x504>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d0f0      	beq.n	8002b14 <HAL_RCC_OscConfig+0x2a8>
 8002b32:	e014      	b.n	8002b5e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b34:	f7fd ffb0 	bl	8000a98 <HAL_GetTick>
 8002b38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b3a:	e008      	b.n	8002b4e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b3c:	f7fd ffac 	bl	8000a98 <HAL_GetTick>
 8002b40:	4602      	mov	r2, r0
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	2b64      	cmp	r3, #100	; 0x64
 8002b48:	d901      	bls.n	8002b4e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	e2a0      	b.n	8003090 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b4e:	4b88      	ldr	r3, [pc, #544]	; (8002d70 <HAL_RCC_OscConfig+0x504>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d1f0      	bne.n	8002b3c <HAL_RCC_OscConfig+0x2d0>
 8002b5a:	e000      	b.n	8002b5e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0302 	and.w	r3, r3, #2
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d060      	beq.n	8002c2c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002b6a:	69bb      	ldr	r3, [r7, #24]
 8002b6c:	2b04      	cmp	r3, #4
 8002b6e:	d005      	beq.n	8002b7c <HAL_RCC_OscConfig+0x310>
 8002b70:	69bb      	ldr	r3, [r7, #24]
 8002b72:	2b0c      	cmp	r3, #12
 8002b74:	d119      	bne.n	8002baa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d116      	bne.n	8002baa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b7c:	4b7c      	ldr	r3, [pc, #496]	; (8002d70 <HAL_RCC_OscConfig+0x504>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d005      	beq.n	8002b94 <HAL_RCC_OscConfig+0x328>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d101      	bne.n	8002b94 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e27d      	b.n	8003090 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b94:	4b76      	ldr	r3, [pc, #472]	; (8002d70 <HAL_RCC_OscConfig+0x504>)
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	691b      	ldr	r3, [r3, #16]
 8002ba0:	061b      	lsls	r3, r3, #24
 8002ba2:	4973      	ldr	r1, [pc, #460]	; (8002d70 <HAL_RCC_OscConfig+0x504>)
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ba8:	e040      	b.n	8002c2c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d023      	beq.n	8002bfa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bb2:	4b6f      	ldr	r3, [pc, #444]	; (8002d70 <HAL_RCC_OscConfig+0x504>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a6e      	ldr	r2, [pc, #440]	; (8002d70 <HAL_RCC_OscConfig+0x504>)
 8002bb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bbe:	f7fd ff6b 	bl	8000a98 <HAL_GetTick>
 8002bc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bc4:	e008      	b.n	8002bd8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bc6:	f7fd ff67 	bl	8000a98 <HAL_GetTick>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	2b02      	cmp	r3, #2
 8002bd2:	d901      	bls.n	8002bd8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002bd4:	2303      	movs	r3, #3
 8002bd6:	e25b      	b.n	8003090 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bd8:	4b65      	ldr	r3, [pc, #404]	; (8002d70 <HAL_RCC_OscConfig+0x504>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d0f0      	beq.n	8002bc6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002be4:	4b62      	ldr	r3, [pc, #392]	; (8002d70 <HAL_RCC_OscConfig+0x504>)
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	691b      	ldr	r3, [r3, #16]
 8002bf0:	061b      	lsls	r3, r3, #24
 8002bf2:	495f      	ldr	r1, [pc, #380]	; (8002d70 <HAL_RCC_OscConfig+0x504>)
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	604b      	str	r3, [r1, #4]
 8002bf8:	e018      	b.n	8002c2c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bfa:	4b5d      	ldr	r3, [pc, #372]	; (8002d70 <HAL_RCC_OscConfig+0x504>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a5c      	ldr	r2, [pc, #368]	; (8002d70 <HAL_RCC_OscConfig+0x504>)
 8002c00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c06:	f7fd ff47 	bl	8000a98 <HAL_GetTick>
 8002c0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c0c:	e008      	b.n	8002c20 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c0e:	f7fd ff43 	bl	8000a98 <HAL_GetTick>
 8002c12:	4602      	mov	r2, r0
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	2b02      	cmp	r3, #2
 8002c1a:	d901      	bls.n	8002c20 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002c1c:	2303      	movs	r3, #3
 8002c1e:	e237      	b.n	8003090 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c20:	4b53      	ldr	r3, [pc, #332]	; (8002d70 <HAL_RCC_OscConfig+0x504>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d1f0      	bne.n	8002c0e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0308 	and.w	r3, r3, #8
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d03c      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	695b      	ldr	r3, [r3, #20]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d01c      	beq.n	8002c7a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c40:	4b4b      	ldr	r3, [pc, #300]	; (8002d70 <HAL_RCC_OscConfig+0x504>)
 8002c42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c46:	4a4a      	ldr	r2, [pc, #296]	; (8002d70 <HAL_RCC_OscConfig+0x504>)
 8002c48:	f043 0301 	orr.w	r3, r3, #1
 8002c4c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c50:	f7fd ff22 	bl	8000a98 <HAL_GetTick>
 8002c54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c56:	e008      	b.n	8002c6a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c58:	f7fd ff1e 	bl	8000a98 <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d901      	bls.n	8002c6a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e212      	b.n	8003090 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c6a:	4b41      	ldr	r3, [pc, #260]	; (8002d70 <HAL_RCC_OscConfig+0x504>)
 8002c6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c70:	f003 0302 	and.w	r3, r3, #2
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d0ef      	beq.n	8002c58 <HAL_RCC_OscConfig+0x3ec>
 8002c78:	e01b      	b.n	8002cb2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c7a:	4b3d      	ldr	r3, [pc, #244]	; (8002d70 <HAL_RCC_OscConfig+0x504>)
 8002c7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c80:	4a3b      	ldr	r2, [pc, #236]	; (8002d70 <HAL_RCC_OscConfig+0x504>)
 8002c82:	f023 0301 	bic.w	r3, r3, #1
 8002c86:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c8a:	f7fd ff05 	bl	8000a98 <HAL_GetTick>
 8002c8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c90:	e008      	b.n	8002ca4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c92:	f7fd ff01 	bl	8000a98 <HAL_GetTick>
 8002c96:	4602      	mov	r2, r0
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	d901      	bls.n	8002ca4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	e1f5      	b.n	8003090 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ca4:	4b32      	ldr	r3, [pc, #200]	; (8002d70 <HAL_RCC_OscConfig+0x504>)
 8002ca6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002caa:	f003 0302 	and.w	r3, r3, #2
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d1ef      	bne.n	8002c92 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0304 	and.w	r3, r3, #4
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	f000 80a6 	beq.w	8002e0c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002cc4:	4b2a      	ldr	r3, [pc, #168]	; (8002d70 <HAL_RCC_OscConfig+0x504>)
 8002cc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d10d      	bne.n	8002cec <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cd0:	4b27      	ldr	r3, [pc, #156]	; (8002d70 <HAL_RCC_OscConfig+0x504>)
 8002cd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cd4:	4a26      	ldr	r2, [pc, #152]	; (8002d70 <HAL_RCC_OscConfig+0x504>)
 8002cd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cda:	6593      	str	r3, [r2, #88]	; 0x58
 8002cdc:	4b24      	ldr	r3, [pc, #144]	; (8002d70 <HAL_RCC_OscConfig+0x504>)
 8002cde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ce0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ce4:	60bb      	str	r3, [r7, #8]
 8002ce6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cec:	4b21      	ldr	r3, [pc, #132]	; (8002d74 <HAL_RCC_OscConfig+0x508>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d118      	bne.n	8002d2a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002cf8:	4b1e      	ldr	r3, [pc, #120]	; (8002d74 <HAL_RCC_OscConfig+0x508>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a1d      	ldr	r2, [pc, #116]	; (8002d74 <HAL_RCC_OscConfig+0x508>)
 8002cfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d02:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d04:	f7fd fec8 	bl	8000a98 <HAL_GetTick>
 8002d08:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d0a:	e008      	b.n	8002d1e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d0c:	f7fd fec4 	bl	8000a98 <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	d901      	bls.n	8002d1e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e1b8      	b.n	8003090 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d1e:	4b15      	ldr	r3, [pc, #84]	; (8002d74 <HAL_RCC_OscConfig+0x508>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d0f0      	beq.n	8002d0c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d108      	bne.n	8002d44 <HAL_RCC_OscConfig+0x4d8>
 8002d32:	4b0f      	ldr	r3, [pc, #60]	; (8002d70 <HAL_RCC_OscConfig+0x504>)
 8002d34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d38:	4a0d      	ldr	r2, [pc, #52]	; (8002d70 <HAL_RCC_OscConfig+0x504>)
 8002d3a:	f043 0301 	orr.w	r3, r3, #1
 8002d3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d42:	e029      	b.n	8002d98 <HAL_RCC_OscConfig+0x52c>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	2b05      	cmp	r3, #5
 8002d4a:	d115      	bne.n	8002d78 <HAL_RCC_OscConfig+0x50c>
 8002d4c:	4b08      	ldr	r3, [pc, #32]	; (8002d70 <HAL_RCC_OscConfig+0x504>)
 8002d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d52:	4a07      	ldr	r2, [pc, #28]	; (8002d70 <HAL_RCC_OscConfig+0x504>)
 8002d54:	f043 0304 	orr.w	r3, r3, #4
 8002d58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d5c:	4b04      	ldr	r3, [pc, #16]	; (8002d70 <HAL_RCC_OscConfig+0x504>)
 8002d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d62:	4a03      	ldr	r2, [pc, #12]	; (8002d70 <HAL_RCC_OscConfig+0x504>)
 8002d64:	f043 0301 	orr.w	r3, r3, #1
 8002d68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d6c:	e014      	b.n	8002d98 <HAL_RCC_OscConfig+0x52c>
 8002d6e:	bf00      	nop
 8002d70:	40021000 	.word	0x40021000
 8002d74:	40007000 	.word	0x40007000
 8002d78:	4b9d      	ldr	r3, [pc, #628]	; (8002ff0 <HAL_RCC_OscConfig+0x784>)
 8002d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d7e:	4a9c      	ldr	r2, [pc, #624]	; (8002ff0 <HAL_RCC_OscConfig+0x784>)
 8002d80:	f023 0301 	bic.w	r3, r3, #1
 8002d84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d88:	4b99      	ldr	r3, [pc, #612]	; (8002ff0 <HAL_RCC_OscConfig+0x784>)
 8002d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d8e:	4a98      	ldr	r2, [pc, #608]	; (8002ff0 <HAL_RCC_OscConfig+0x784>)
 8002d90:	f023 0304 	bic.w	r3, r3, #4
 8002d94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d016      	beq.n	8002dce <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002da0:	f7fd fe7a 	bl	8000a98 <HAL_GetTick>
 8002da4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002da6:	e00a      	b.n	8002dbe <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002da8:	f7fd fe76 	bl	8000a98 <HAL_GetTick>
 8002dac:	4602      	mov	r2, r0
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d901      	bls.n	8002dbe <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e168      	b.n	8003090 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dbe:	4b8c      	ldr	r3, [pc, #560]	; (8002ff0 <HAL_RCC_OscConfig+0x784>)
 8002dc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dc4:	f003 0302 	and.w	r3, r3, #2
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d0ed      	beq.n	8002da8 <HAL_RCC_OscConfig+0x53c>
 8002dcc:	e015      	b.n	8002dfa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dce:	f7fd fe63 	bl	8000a98 <HAL_GetTick>
 8002dd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002dd4:	e00a      	b.n	8002dec <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dd6:	f7fd fe5f 	bl	8000a98 <HAL_GetTick>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d901      	bls.n	8002dec <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002de8:	2303      	movs	r3, #3
 8002dea:	e151      	b.n	8003090 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002dec:	4b80      	ldr	r3, [pc, #512]	; (8002ff0 <HAL_RCC_OscConfig+0x784>)
 8002dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002df2:	f003 0302 	and.w	r3, r3, #2
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d1ed      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002dfa:	7ffb      	ldrb	r3, [r7, #31]
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d105      	bne.n	8002e0c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e00:	4b7b      	ldr	r3, [pc, #492]	; (8002ff0 <HAL_RCC_OscConfig+0x784>)
 8002e02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e04:	4a7a      	ldr	r2, [pc, #488]	; (8002ff0 <HAL_RCC_OscConfig+0x784>)
 8002e06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e0a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0320 	and.w	r3, r3, #32
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d03c      	beq.n	8002e92 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d01c      	beq.n	8002e5a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002e20:	4b73      	ldr	r3, [pc, #460]	; (8002ff0 <HAL_RCC_OscConfig+0x784>)
 8002e22:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e26:	4a72      	ldr	r2, [pc, #456]	; (8002ff0 <HAL_RCC_OscConfig+0x784>)
 8002e28:	f043 0301 	orr.w	r3, r3, #1
 8002e2c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e30:	f7fd fe32 	bl	8000a98 <HAL_GetTick>
 8002e34:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002e36:	e008      	b.n	8002e4a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e38:	f7fd fe2e 	bl	8000a98 <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d901      	bls.n	8002e4a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e122      	b.n	8003090 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002e4a:	4b69      	ldr	r3, [pc, #420]	; (8002ff0 <HAL_RCC_OscConfig+0x784>)
 8002e4c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e50:	f003 0302 	and.w	r3, r3, #2
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d0ef      	beq.n	8002e38 <HAL_RCC_OscConfig+0x5cc>
 8002e58:	e01b      	b.n	8002e92 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002e5a:	4b65      	ldr	r3, [pc, #404]	; (8002ff0 <HAL_RCC_OscConfig+0x784>)
 8002e5c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e60:	4a63      	ldr	r2, [pc, #396]	; (8002ff0 <HAL_RCC_OscConfig+0x784>)
 8002e62:	f023 0301 	bic.w	r3, r3, #1
 8002e66:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e6a:	f7fd fe15 	bl	8000a98 <HAL_GetTick>
 8002e6e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002e70:	e008      	b.n	8002e84 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e72:	f7fd fe11 	bl	8000a98 <HAL_GetTick>
 8002e76:	4602      	mov	r2, r0
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	2b02      	cmp	r3, #2
 8002e7e:	d901      	bls.n	8002e84 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002e80:	2303      	movs	r3, #3
 8002e82:	e105      	b.n	8003090 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002e84:	4b5a      	ldr	r3, [pc, #360]	; (8002ff0 <HAL_RCC_OscConfig+0x784>)
 8002e86:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e8a:	f003 0302 	and.w	r3, r3, #2
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d1ef      	bne.n	8002e72 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	f000 80f9 	beq.w	800308e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ea0:	2b02      	cmp	r3, #2
 8002ea2:	f040 80cf 	bne.w	8003044 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002ea6:	4b52      	ldr	r3, [pc, #328]	; (8002ff0 <HAL_RCC_OscConfig+0x784>)
 8002ea8:	68db      	ldr	r3, [r3, #12]
 8002eaa:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	f003 0203 	and.w	r2, r3, #3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d12c      	bne.n	8002f14 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec4:	3b01      	subs	r3, #1
 8002ec6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d123      	bne.n	8002f14 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ed6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d11b      	bne.n	8002f14 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d113      	bne.n	8002f14 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ef6:	085b      	lsrs	r3, r3, #1
 8002ef8:	3b01      	subs	r3, #1
 8002efa:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d109      	bne.n	8002f14 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0a:	085b      	lsrs	r3, r3, #1
 8002f0c:	3b01      	subs	r3, #1
 8002f0e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d071      	beq.n	8002ff8 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f14:	69bb      	ldr	r3, [r7, #24]
 8002f16:	2b0c      	cmp	r3, #12
 8002f18:	d068      	beq.n	8002fec <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002f1a:	4b35      	ldr	r3, [pc, #212]	; (8002ff0 <HAL_RCC_OscConfig+0x784>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d105      	bne.n	8002f32 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002f26:	4b32      	ldr	r3, [pc, #200]	; (8002ff0 <HAL_RCC_OscConfig+0x784>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d001      	beq.n	8002f36 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e0ac      	b.n	8003090 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002f36:	4b2e      	ldr	r3, [pc, #184]	; (8002ff0 <HAL_RCC_OscConfig+0x784>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a2d      	ldr	r2, [pc, #180]	; (8002ff0 <HAL_RCC_OscConfig+0x784>)
 8002f3c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f40:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002f42:	f7fd fda9 	bl	8000a98 <HAL_GetTick>
 8002f46:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f48:	e008      	b.n	8002f5c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f4a:	f7fd fda5 	bl	8000a98 <HAL_GetTick>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	2b02      	cmp	r3, #2
 8002f56:	d901      	bls.n	8002f5c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002f58:	2303      	movs	r3, #3
 8002f5a:	e099      	b.n	8003090 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f5c:	4b24      	ldr	r3, [pc, #144]	; (8002ff0 <HAL_RCC_OscConfig+0x784>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d1f0      	bne.n	8002f4a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f68:	4b21      	ldr	r3, [pc, #132]	; (8002ff0 <HAL_RCC_OscConfig+0x784>)
 8002f6a:	68da      	ldr	r2, [r3, #12]
 8002f6c:	4b21      	ldr	r3, [pc, #132]	; (8002ff4 <HAL_RCC_OscConfig+0x788>)
 8002f6e:	4013      	ands	r3, r2
 8002f70:	687a      	ldr	r2, [r7, #4]
 8002f72:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002f78:	3a01      	subs	r2, #1
 8002f7a:	0112      	lsls	r2, r2, #4
 8002f7c:	4311      	orrs	r1, r2
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002f82:	0212      	lsls	r2, r2, #8
 8002f84:	4311      	orrs	r1, r2
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002f8a:	0852      	lsrs	r2, r2, #1
 8002f8c:	3a01      	subs	r2, #1
 8002f8e:	0552      	lsls	r2, r2, #21
 8002f90:	4311      	orrs	r1, r2
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002f96:	0852      	lsrs	r2, r2, #1
 8002f98:	3a01      	subs	r2, #1
 8002f9a:	0652      	lsls	r2, r2, #25
 8002f9c:	4311      	orrs	r1, r2
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002fa2:	06d2      	lsls	r2, r2, #27
 8002fa4:	430a      	orrs	r2, r1
 8002fa6:	4912      	ldr	r1, [pc, #72]	; (8002ff0 <HAL_RCC_OscConfig+0x784>)
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002fac:	4b10      	ldr	r3, [pc, #64]	; (8002ff0 <HAL_RCC_OscConfig+0x784>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a0f      	ldr	r2, [pc, #60]	; (8002ff0 <HAL_RCC_OscConfig+0x784>)
 8002fb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fb6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002fb8:	4b0d      	ldr	r3, [pc, #52]	; (8002ff0 <HAL_RCC_OscConfig+0x784>)
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	4a0c      	ldr	r2, [pc, #48]	; (8002ff0 <HAL_RCC_OscConfig+0x784>)
 8002fbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fc2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002fc4:	f7fd fd68 	bl	8000a98 <HAL_GetTick>
 8002fc8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fca:	e008      	b.n	8002fde <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fcc:	f7fd fd64 	bl	8000a98 <HAL_GetTick>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d901      	bls.n	8002fde <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e058      	b.n	8003090 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fde:	4b04      	ldr	r3, [pc, #16]	; (8002ff0 <HAL_RCC_OscConfig+0x784>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d0f0      	beq.n	8002fcc <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002fea:	e050      	b.n	800308e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	e04f      	b.n	8003090 <HAL_RCC_OscConfig+0x824>
 8002ff0:	40021000 	.word	0x40021000
 8002ff4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ff8:	4b27      	ldr	r3, [pc, #156]	; (8003098 <HAL_RCC_OscConfig+0x82c>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003000:	2b00      	cmp	r3, #0
 8003002:	d144      	bne.n	800308e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003004:	4b24      	ldr	r3, [pc, #144]	; (8003098 <HAL_RCC_OscConfig+0x82c>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a23      	ldr	r2, [pc, #140]	; (8003098 <HAL_RCC_OscConfig+0x82c>)
 800300a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800300e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003010:	4b21      	ldr	r3, [pc, #132]	; (8003098 <HAL_RCC_OscConfig+0x82c>)
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	4a20      	ldr	r2, [pc, #128]	; (8003098 <HAL_RCC_OscConfig+0x82c>)
 8003016:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800301a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800301c:	f7fd fd3c 	bl	8000a98 <HAL_GetTick>
 8003020:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003022:	e008      	b.n	8003036 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003024:	f7fd fd38 	bl	8000a98 <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	2b02      	cmp	r3, #2
 8003030:	d901      	bls.n	8003036 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e02c      	b.n	8003090 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003036:	4b18      	ldr	r3, [pc, #96]	; (8003098 <HAL_RCC_OscConfig+0x82c>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d0f0      	beq.n	8003024 <HAL_RCC_OscConfig+0x7b8>
 8003042:	e024      	b.n	800308e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003044:	69bb      	ldr	r3, [r7, #24]
 8003046:	2b0c      	cmp	r3, #12
 8003048:	d01f      	beq.n	800308a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800304a:	4b13      	ldr	r3, [pc, #76]	; (8003098 <HAL_RCC_OscConfig+0x82c>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a12      	ldr	r2, [pc, #72]	; (8003098 <HAL_RCC_OscConfig+0x82c>)
 8003050:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003054:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003056:	f7fd fd1f 	bl	8000a98 <HAL_GetTick>
 800305a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800305c:	e008      	b.n	8003070 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800305e:	f7fd fd1b 	bl	8000a98 <HAL_GetTick>
 8003062:	4602      	mov	r2, r0
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	1ad3      	subs	r3, r2, r3
 8003068:	2b02      	cmp	r3, #2
 800306a:	d901      	bls.n	8003070 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 800306c:	2303      	movs	r3, #3
 800306e:	e00f      	b.n	8003090 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003070:	4b09      	ldr	r3, [pc, #36]	; (8003098 <HAL_RCC_OscConfig+0x82c>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003078:	2b00      	cmp	r3, #0
 800307a:	d1f0      	bne.n	800305e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800307c:	4b06      	ldr	r3, [pc, #24]	; (8003098 <HAL_RCC_OscConfig+0x82c>)
 800307e:	68da      	ldr	r2, [r3, #12]
 8003080:	4905      	ldr	r1, [pc, #20]	; (8003098 <HAL_RCC_OscConfig+0x82c>)
 8003082:	4b06      	ldr	r3, [pc, #24]	; (800309c <HAL_RCC_OscConfig+0x830>)
 8003084:	4013      	ands	r3, r2
 8003086:	60cb      	str	r3, [r1, #12]
 8003088:	e001      	b.n	800308e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e000      	b.n	8003090 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800308e:	2300      	movs	r3, #0
}
 8003090:	4618      	mov	r0, r3
 8003092:	3720      	adds	r7, #32
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}
 8003098:	40021000 	.word	0x40021000
 800309c:	feeefffc 	.word	0xfeeefffc

080030a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b084      	sub	sp, #16
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d101      	bne.n	80030b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e0e7      	b.n	8003284 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030b4:	4b75      	ldr	r3, [pc, #468]	; (800328c <HAL_RCC_ClockConfig+0x1ec>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0307 	and.w	r3, r3, #7
 80030bc:	683a      	ldr	r2, [r7, #0]
 80030be:	429a      	cmp	r2, r3
 80030c0:	d910      	bls.n	80030e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030c2:	4b72      	ldr	r3, [pc, #456]	; (800328c <HAL_RCC_ClockConfig+0x1ec>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f023 0207 	bic.w	r2, r3, #7
 80030ca:	4970      	ldr	r1, [pc, #448]	; (800328c <HAL_RCC_ClockConfig+0x1ec>)
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	4313      	orrs	r3, r2
 80030d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030d2:	4b6e      	ldr	r3, [pc, #440]	; (800328c <HAL_RCC_ClockConfig+0x1ec>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0307 	and.w	r3, r3, #7
 80030da:	683a      	ldr	r2, [r7, #0]
 80030dc:	429a      	cmp	r2, r3
 80030de:	d001      	beq.n	80030e4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e0cf      	b.n	8003284 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0302 	and.w	r3, r3, #2
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d010      	beq.n	8003112 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	689a      	ldr	r2, [r3, #8]
 80030f4:	4b66      	ldr	r3, [pc, #408]	; (8003290 <HAL_RCC_ClockConfig+0x1f0>)
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d908      	bls.n	8003112 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003100:	4b63      	ldr	r3, [pc, #396]	; (8003290 <HAL_RCC_ClockConfig+0x1f0>)
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	4960      	ldr	r1, [pc, #384]	; (8003290 <HAL_RCC_ClockConfig+0x1f0>)
 800310e:	4313      	orrs	r3, r2
 8003110:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 0301 	and.w	r3, r3, #1
 800311a:	2b00      	cmp	r3, #0
 800311c:	d04c      	beq.n	80031b8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	2b03      	cmp	r3, #3
 8003124:	d107      	bne.n	8003136 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003126:	4b5a      	ldr	r3, [pc, #360]	; (8003290 <HAL_RCC_ClockConfig+0x1f0>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800312e:	2b00      	cmp	r3, #0
 8003130:	d121      	bne.n	8003176 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e0a6      	b.n	8003284 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	2b02      	cmp	r3, #2
 800313c:	d107      	bne.n	800314e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800313e:	4b54      	ldr	r3, [pc, #336]	; (8003290 <HAL_RCC_ClockConfig+0x1f0>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d115      	bne.n	8003176 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e09a      	b.n	8003284 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d107      	bne.n	8003166 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003156:	4b4e      	ldr	r3, [pc, #312]	; (8003290 <HAL_RCC_ClockConfig+0x1f0>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0302 	and.w	r3, r3, #2
 800315e:	2b00      	cmp	r3, #0
 8003160:	d109      	bne.n	8003176 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e08e      	b.n	8003284 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003166:	4b4a      	ldr	r3, [pc, #296]	; (8003290 <HAL_RCC_ClockConfig+0x1f0>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800316e:	2b00      	cmp	r3, #0
 8003170:	d101      	bne.n	8003176 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e086      	b.n	8003284 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003176:	4b46      	ldr	r3, [pc, #280]	; (8003290 <HAL_RCC_ClockConfig+0x1f0>)
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	f023 0203 	bic.w	r2, r3, #3
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	4943      	ldr	r1, [pc, #268]	; (8003290 <HAL_RCC_ClockConfig+0x1f0>)
 8003184:	4313      	orrs	r3, r2
 8003186:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003188:	f7fd fc86 	bl	8000a98 <HAL_GetTick>
 800318c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800318e:	e00a      	b.n	80031a6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003190:	f7fd fc82 	bl	8000a98 <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	f241 3288 	movw	r2, #5000	; 0x1388
 800319e:	4293      	cmp	r3, r2
 80031a0:	d901      	bls.n	80031a6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80031a2:	2303      	movs	r3, #3
 80031a4:	e06e      	b.n	8003284 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031a6:	4b3a      	ldr	r3, [pc, #232]	; (8003290 <HAL_RCC_ClockConfig+0x1f0>)
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	f003 020c 	and.w	r2, r3, #12
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d1eb      	bne.n	8003190 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0302 	and.w	r3, r3, #2
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d010      	beq.n	80031e6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	689a      	ldr	r2, [r3, #8]
 80031c8:	4b31      	ldr	r3, [pc, #196]	; (8003290 <HAL_RCC_ClockConfig+0x1f0>)
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d208      	bcs.n	80031e6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031d4:	4b2e      	ldr	r3, [pc, #184]	; (8003290 <HAL_RCC_ClockConfig+0x1f0>)
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	492b      	ldr	r1, [pc, #172]	; (8003290 <HAL_RCC_ClockConfig+0x1f0>)
 80031e2:	4313      	orrs	r3, r2
 80031e4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031e6:	4b29      	ldr	r3, [pc, #164]	; (800328c <HAL_RCC_ClockConfig+0x1ec>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0307 	and.w	r3, r3, #7
 80031ee:	683a      	ldr	r2, [r7, #0]
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d210      	bcs.n	8003216 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031f4:	4b25      	ldr	r3, [pc, #148]	; (800328c <HAL_RCC_ClockConfig+0x1ec>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f023 0207 	bic.w	r2, r3, #7
 80031fc:	4923      	ldr	r1, [pc, #140]	; (800328c <HAL_RCC_ClockConfig+0x1ec>)
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	4313      	orrs	r3, r2
 8003202:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003204:	4b21      	ldr	r3, [pc, #132]	; (800328c <HAL_RCC_ClockConfig+0x1ec>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0307 	and.w	r3, r3, #7
 800320c:	683a      	ldr	r2, [r7, #0]
 800320e:	429a      	cmp	r2, r3
 8003210:	d001      	beq.n	8003216 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e036      	b.n	8003284 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0304 	and.w	r3, r3, #4
 800321e:	2b00      	cmp	r3, #0
 8003220:	d008      	beq.n	8003234 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003222:	4b1b      	ldr	r3, [pc, #108]	; (8003290 <HAL_RCC_ClockConfig+0x1f0>)
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	68db      	ldr	r3, [r3, #12]
 800322e:	4918      	ldr	r1, [pc, #96]	; (8003290 <HAL_RCC_ClockConfig+0x1f0>)
 8003230:	4313      	orrs	r3, r2
 8003232:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0308 	and.w	r3, r3, #8
 800323c:	2b00      	cmp	r3, #0
 800323e:	d009      	beq.n	8003254 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003240:	4b13      	ldr	r3, [pc, #76]	; (8003290 <HAL_RCC_ClockConfig+0x1f0>)
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	691b      	ldr	r3, [r3, #16]
 800324c:	00db      	lsls	r3, r3, #3
 800324e:	4910      	ldr	r1, [pc, #64]	; (8003290 <HAL_RCC_ClockConfig+0x1f0>)
 8003250:	4313      	orrs	r3, r2
 8003252:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003254:	f000 f824 	bl	80032a0 <HAL_RCC_GetSysClockFreq>
 8003258:	4602      	mov	r2, r0
 800325a:	4b0d      	ldr	r3, [pc, #52]	; (8003290 <HAL_RCC_ClockConfig+0x1f0>)
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	091b      	lsrs	r3, r3, #4
 8003260:	f003 030f 	and.w	r3, r3, #15
 8003264:	490b      	ldr	r1, [pc, #44]	; (8003294 <HAL_RCC_ClockConfig+0x1f4>)
 8003266:	5ccb      	ldrb	r3, [r1, r3]
 8003268:	f003 031f 	and.w	r3, r3, #31
 800326c:	fa22 f303 	lsr.w	r3, r2, r3
 8003270:	4a09      	ldr	r2, [pc, #36]	; (8003298 <HAL_RCC_ClockConfig+0x1f8>)
 8003272:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003274:	4b09      	ldr	r3, [pc, #36]	; (800329c <HAL_RCC_ClockConfig+0x1fc>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4618      	mov	r0, r3
 800327a:	f7fd fbbd 	bl	80009f8 <HAL_InitTick>
 800327e:	4603      	mov	r3, r0
 8003280:	72fb      	strb	r3, [r7, #11]

  return status;
 8003282:	7afb      	ldrb	r3, [r7, #11]
}
 8003284:	4618      	mov	r0, r3
 8003286:	3710      	adds	r7, #16
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}
 800328c:	40022000 	.word	0x40022000
 8003290:	40021000 	.word	0x40021000
 8003294:	08009360 	.word	0x08009360
 8003298:	20000000 	.word	0x20000000
 800329c:	20000004 	.word	0x20000004

080032a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b089      	sub	sp, #36	; 0x24
 80032a4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80032a6:	2300      	movs	r3, #0
 80032a8:	61fb      	str	r3, [r7, #28]
 80032aa:	2300      	movs	r3, #0
 80032ac:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032ae:	4b3e      	ldr	r3, [pc, #248]	; (80033a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	f003 030c 	and.w	r3, r3, #12
 80032b6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80032b8:	4b3b      	ldr	r3, [pc, #236]	; (80033a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	f003 0303 	and.w	r3, r3, #3
 80032c0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d005      	beq.n	80032d4 <HAL_RCC_GetSysClockFreq+0x34>
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	2b0c      	cmp	r3, #12
 80032cc:	d121      	bne.n	8003312 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d11e      	bne.n	8003312 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80032d4:	4b34      	ldr	r3, [pc, #208]	; (80033a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 0308 	and.w	r3, r3, #8
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d107      	bne.n	80032f0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80032e0:	4b31      	ldr	r3, [pc, #196]	; (80033a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80032e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032e6:	0a1b      	lsrs	r3, r3, #8
 80032e8:	f003 030f 	and.w	r3, r3, #15
 80032ec:	61fb      	str	r3, [r7, #28]
 80032ee:	e005      	b.n	80032fc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80032f0:	4b2d      	ldr	r3, [pc, #180]	; (80033a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	091b      	lsrs	r3, r3, #4
 80032f6:	f003 030f 	and.w	r3, r3, #15
 80032fa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80032fc:	4a2b      	ldr	r2, [pc, #172]	; (80033ac <HAL_RCC_GetSysClockFreq+0x10c>)
 80032fe:	69fb      	ldr	r3, [r7, #28]
 8003300:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003304:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d10d      	bne.n	8003328 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003310:	e00a      	b.n	8003328 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	2b04      	cmp	r3, #4
 8003316:	d102      	bne.n	800331e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003318:	4b25      	ldr	r3, [pc, #148]	; (80033b0 <HAL_RCC_GetSysClockFreq+0x110>)
 800331a:	61bb      	str	r3, [r7, #24]
 800331c:	e004      	b.n	8003328 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	2b08      	cmp	r3, #8
 8003322:	d101      	bne.n	8003328 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003324:	4b23      	ldr	r3, [pc, #140]	; (80033b4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003326:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	2b0c      	cmp	r3, #12
 800332c:	d134      	bne.n	8003398 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800332e:	4b1e      	ldr	r3, [pc, #120]	; (80033a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003330:	68db      	ldr	r3, [r3, #12]
 8003332:	f003 0303 	and.w	r3, r3, #3
 8003336:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	2b02      	cmp	r3, #2
 800333c:	d003      	beq.n	8003346 <HAL_RCC_GetSysClockFreq+0xa6>
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	2b03      	cmp	r3, #3
 8003342:	d003      	beq.n	800334c <HAL_RCC_GetSysClockFreq+0xac>
 8003344:	e005      	b.n	8003352 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003346:	4b1a      	ldr	r3, [pc, #104]	; (80033b0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003348:	617b      	str	r3, [r7, #20]
      break;
 800334a:	e005      	b.n	8003358 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800334c:	4b19      	ldr	r3, [pc, #100]	; (80033b4 <HAL_RCC_GetSysClockFreq+0x114>)
 800334e:	617b      	str	r3, [r7, #20]
      break;
 8003350:	e002      	b.n	8003358 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	617b      	str	r3, [r7, #20]
      break;
 8003356:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003358:	4b13      	ldr	r3, [pc, #76]	; (80033a8 <HAL_RCC_GetSysClockFreq+0x108>)
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	091b      	lsrs	r3, r3, #4
 800335e:	f003 0307 	and.w	r3, r3, #7
 8003362:	3301      	adds	r3, #1
 8003364:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003366:	4b10      	ldr	r3, [pc, #64]	; (80033a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003368:	68db      	ldr	r3, [r3, #12]
 800336a:	0a1b      	lsrs	r3, r3, #8
 800336c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003370:	697a      	ldr	r2, [r7, #20]
 8003372:	fb03 f202 	mul.w	r2, r3, r2
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	fbb2 f3f3 	udiv	r3, r2, r3
 800337c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800337e:	4b0a      	ldr	r3, [pc, #40]	; (80033a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003380:	68db      	ldr	r3, [r3, #12]
 8003382:	0e5b      	lsrs	r3, r3, #25
 8003384:	f003 0303 	and.w	r3, r3, #3
 8003388:	3301      	adds	r3, #1
 800338a:	005b      	lsls	r3, r3, #1
 800338c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800338e:	697a      	ldr	r2, [r7, #20]
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	fbb2 f3f3 	udiv	r3, r2, r3
 8003396:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003398:	69bb      	ldr	r3, [r7, #24]
}
 800339a:	4618      	mov	r0, r3
 800339c:	3724      	adds	r7, #36	; 0x24
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr
 80033a6:	bf00      	nop
 80033a8:	40021000 	.word	0x40021000
 80033ac:	08009378 	.word	0x08009378
 80033b0:	00f42400 	.word	0x00f42400
 80033b4:	007a1200 	.word	0x007a1200

080033b8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033b8:	b480      	push	{r7}
 80033ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033bc:	4b03      	ldr	r3, [pc, #12]	; (80033cc <HAL_RCC_GetHCLKFreq+0x14>)
 80033be:	681b      	ldr	r3, [r3, #0]
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr
 80033ca:	bf00      	nop
 80033cc:	20000000 	.word	0x20000000

080033d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80033d4:	f7ff fff0 	bl	80033b8 <HAL_RCC_GetHCLKFreq>
 80033d8:	4602      	mov	r2, r0
 80033da:	4b06      	ldr	r3, [pc, #24]	; (80033f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	0a1b      	lsrs	r3, r3, #8
 80033e0:	f003 0307 	and.w	r3, r3, #7
 80033e4:	4904      	ldr	r1, [pc, #16]	; (80033f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80033e6:	5ccb      	ldrb	r3, [r1, r3]
 80033e8:	f003 031f 	and.w	r3, r3, #31
 80033ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	40021000 	.word	0x40021000
 80033f8:	08009370 	.word	0x08009370

080033fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003400:	f7ff ffda 	bl	80033b8 <HAL_RCC_GetHCLKFreq>
 8003404:	4602      	mov	r2, r0
 8003406:	4b06      	ldr	r3, [pc, #24]	; (8003420 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	0adb      	lsrs	r3, r3, #11
 800340c:	f003 0307 	and.w	r3, r3, #7
 8003410:	4904      	ldr	r1, [pc, #16]	; (8003424 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003412:	5ccb      	ldrb	r3, [r1, r3]
 8003414:	f003 031f 	and.w	r3, r3, #31
 8003418:	fa22 f303 	lsr.w	r3, r2, r3
}
 800341c:	4618      	mov	r0, r3
 800341e:	bd80      	pop	{r7, pc}
 8003420:	40021000 	.word	0x40021000
 8003424:	08009370 	.word	0x08009370

08003428 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b086      	sub	sp, #24
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003430:	2300      	movs	r3, #0
 8003432:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003434:	4b2a      	ldr	r3, [pc, #168]	; (80034e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003436:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003438:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800343c:	2b00      	cmp	r3, #0
 800343e:	d003      	beq.n	8003448 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003440:	f7ff f990 	bl	8002764 <HAL_PWREx_GetVoltageRange>
 8003444:	6178      	str	r0, [r7, #20]
 8003446:	e014      	b.n	8003472 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003448:	4b25      	ldr	r3, [pc, #148]	; (80034e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800344a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800344c:	4a24      	ldr	r2, [pc, #144]	; (80034e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800344e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003452:	6593      	str	r3, [r2, #88]	; 0x58
 8003454:	4b22      	ldr	r3, [pc, #136]	; (80034e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003456:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003458:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800345c:	60fb      	str	r3, [r7, #12]
 800345e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003460:	f7ff f980 	bl	8002764 <HAL_PWREx_GetVoltageRange>
 8003464:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003466:	4b1e      	ldr	r3, [pc, #120]	; (80034e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800346a:	4a1d      	ldr	r2, [pc, #116]	; (80034e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800346c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003470:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003478:	d10b      	bne.n	8003492 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2b80      	cmp	r3, #128	; 0x80
 800347e:	d919      	bls.n	80034b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2ba0      	cmp	r3, #160	; 0xa0
 8003484:	d902      	bls.n	800348c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003486:	2302      	movs	r3, #2
 8003488:	613b      	str	r3, [r7, #16]
 800348a:	e013      	b.n	80034b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800348c:	2301      	movs	r3, #1
 800348e:	613b      	str	r3, [r7, #16]
 8003490:	e010      	b.n	80034b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2b80      	cmp	r3, #128	; 0x80
 8003496:	d902      	bls.n	800349e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003498:	2303      	movs	r3, #3
 800349a:	613b      	str	r3, [r7, #16]
 800349c:	e00a      	b.n	80034b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2b80      	cmp	r3, #128	; 0x80
 80034a2:	d102      	bne.n	80034aa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80034a4:	2302      	movs	r3, #2
 80034a6:	613b      	str	r3, [r7, #16]
 80034a8:	e004      	b.n	80034b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2b70      	cmp	r3, #112	; 0x70
 80034ae:	d101      	bne.n	80034b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80034b0:	2301      	movs	r3, #1
 80034b2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80034b4:	4b0b      	ldr	r3, [pc, #44]	; (80034e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f023 0207 	bic.w	r2, r3, #7
 80034bc:	4909      	ldr	r1, [pc, #36]	; (80034e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80034c4:	4b07      	ldr	r3, [pc, #28]	; (80034e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0307 	and.w	r3, r3, #7
 80034cc:	693a      	ldr	r2, [r7, #16]
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d001      	beq.n	80034d6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e000      	b.n	80034d8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80034d6:	2300      	movs	r3, #0
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3718      	adds	r7, #24
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	40021000 	.word	0x40021000
 80034e4:	40022000 	.word	0x40022000

080034e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b086      	sub	sp, #24
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80034f0:	2300      	movs	r3, #0
 80034f2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80034f4:	2300      	movs	r3, #0
 80034f6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003500:	2b00      	cmp	r3, #0
 8003502:	d041      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003508:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800350c:	d02a      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800350e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003512:	d824      	bhi.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003514:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003518:	d008      	beq.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800351a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800351e:	d81e      	bhi.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003520:	2b00      	cmp	r3, #0
 8003522:	d00a      	beq.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003524:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003528:	d010      	beq.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800352a:	e018      	b.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800352c:	4b86      	ldr	r3, [pc, #536]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	4a85      	ldr	r2, [pc, #532]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003532:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003536:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003538:	e015      	b.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	3304      	adds	r3, #4
 800353e:	2100      	movs	r1, #0
 8003540:	4618      	mov	r0, r3
 8003542:	f000 fadd 	bl	8003b00 <RCCEx_PLLSAI1_Config>
 8003546:	4603      	mov	r3, r0
 8003548:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800354a:	e00c      	b.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	3320      	adds	r3, #32
 8003550:	2100      	movs	r1, #0
 8003552:	4618      	mov	r0, r3
 8003554:	f000 fbc6 	bl	8003ce4 <RCCEx_PLLSAI2_Config>
 8003558:	4603      	mov	r3, r0
 800355a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800355c:	e003      	b.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	74fb      	strb	r3, [r7, #19]
      break;
 8003562:	e000      	b.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003564:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003566:	7cfb      	ldrb	r3, [r7, #19]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d10b      	bne.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800356c:	4b76      	ldr	r3, [pc, #472]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800356e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003572:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800357a:	4973      	ldr	r1, [pc, #460]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800357c:	4313      	orrs	r3, r2
 800357e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003582:	e001      	b.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003584:	7cfb      	ldrb	r3, [r7, #19]
 8003586:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003590:	2b00      	cmp	r3, #0
 8003592:	d041      	beq.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003598:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800359c:	d02a      	beq.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800359e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80035a2:	d824      	bhi.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x106>
 80035a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80035a8:	d008      	beq.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80035aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80035ae:	d81e      	bhi.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x106>
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d00a      	beq.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80035b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80035b8:	d010      	beq.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80035ba:	e018      	b.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80035bc:	4b62      	ldr	r3, [pc, #392]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	4a61      	ldr	r2, [pc, #388]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035c6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80035c8:	e015      	b.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	3304      	adds	r3, #4
 80035ce:	2100      	movs	r1, #0
 80035d0:	4618      	mov	r0, r3
 80035d2:	f000 fa95 	bl	8003b00 <RCCEx_PLLSAI1_Config>
 80035d6:	4603      	mov	r3, r0
 80035d8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80035da:	e00c      	b.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	3320      	adds	r3, #32
 80035e0:	2100      	movs	r1, #0
 80035e2:	4618      	mov	r0, r3
 80035e4:	f000 fb7e 	bl	8003ce4 <RCCEx_PLLSAI2_Config>
 80035e8:	4603      	mov	r3, r0
 80035ea:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80035ec:	e003      	b.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	74fb      	strb	r3, [r7, #19]
      break;
 80035f2:	e000      	b.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80035f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035f6:	7cfb      	ldrb	r3, [r7, #19]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d10b      	bne.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80035fc:	4b52      	ldr	r3, [pc, #328]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003602:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800360a:	494f      	ldr	r1, [pc, #316]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800360c:	4313      	orrs	r3, r2
 800360e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003612:	e001      	b.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003614:	7cfb      	ldrb	r3, [r7, #19]
 8003616:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003620:	2b00      	cmp	r3, #0
 8003622:	f000 80a0 	beq.w	8003766 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003626:	2300      	movs	r3, #0
 8003628:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800362a:	4b47      	ldr	r3, [pc, #284]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800362c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800362e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d101      	bne.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003636:	2301      	movs	r3, #1
 8003638:	e000      	b.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800363a:	2300      	movs	r3, #0
 800363c:	2b00      	cmp	r3, #0
 800363e:	d00d      	beq.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003640:	4b41      	ldr	r3, [pc, #260]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003642:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003644:	4a40      	ldr	r2, [pc, #256]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003646:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800364a:	6593      	str	r3, [r2, #88]	; 0x58
 800364c:	4b3e      	ldr	r3, [pc, #248]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800364e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003650:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003654:	60bb      	str	r3, [r7, #8]
 8003656:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003658:	2301      	movs	r3, #1
 800365a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800365c:	4b3b      	ldr	r3, [pc, #236]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a3a      	ldr	r2, [pc, #232]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003662:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003666:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003668:	f7fd fa16 	bl	8000a98 <HAL_GetTick>
 800366c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800366e:	e009      	b.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003670:	f7fd fa12 	bl	8000a98 <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	2b02      	cmp	r3, #2
 800367c:	d902      	bls.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	74fb      	strb	r3, [r7, #19]
        break;
 8003682:	e005      	b.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003684:	4b31      	ldr	r3, [pc, #196]	; (800374c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800368c:	2b00      	cmp	r3, #0
 800368e:	d0ef      	beq.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003690:	7cfb      	ldrb	r3, [r7, #19]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d15c      	bne.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003696:	4b2c      	ldr	r3, [pc, #176]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003698:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800369c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036a0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d01f      	beq.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ae:	697a      	ldr	r2, [r7, #20]
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d019      	beq.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80036b4:	4b24      	ldr	r3, [pc, #144]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036be:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80036c0:	4b21      	ldr	r3, [pc, #132]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036c6:	4a20      	ldr	r2, [pc, #128]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80036d0:	4b1d      	ldr	r3, [pc, #116]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036d6:	4a1c      	ldr	r2, [pc, #112]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80036e0:	4a19      	ldr	r2, [pc, #100]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	f003 0301 	and.w	r3, r3, #1
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d016      	beq.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036f2:	f7fd f9d1 	bl	8000a98 <HAL_GetTick>
 80036f6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036f8:	e00b      	b.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036fa:	f7fd f9cd 	bl	8000a98 <HAL_GetTick>
 80036fe:	4602      	mov	r2, r0
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	f241 3288 	movw	r2, #5000	; 0x1388
 8003708:	4293      	cmp	r3, r2
 800370a:	d902      	bls.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800370c:	2303      	movs	r3, #3
 800370e:	74fb      	strb	r3, [r7, #19]
            break;
 8003710:	e006      	b.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003712:	4b0d      	ldr	r3, [pc, #52]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003714:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003718:	f003 0302 	and.w	r3, r3, #2
 800371c:	2b00      	cmp	r3, #0
 800371e:	d0ec      	beq.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003720:	7cfb      	ldrb	r3, [r7, #19]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d10c      	bne.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003726:	4b08      	ldr	r3, [pc, #32]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003728:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800372c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003736:	4904      	ldr	r1, [pc, #16]	; (8003748 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003738:	4313      	orrs	r3, r2
 800373a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800373e:	e009      	b.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003740:	7cfb      	ldrb	r3, [r7, #19]
 8003742:	74bb      	strb	r3, [r7, #18]
 8003744:	e006      	b.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003746:	bf00      	nop
 8003748:	40021000 	.word	0x40021000
 800374c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003750:	7cfb      	ldrb	r3, [r7, #19]
 8003752:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003754:	7c7b      	ldrb	r3, [r7, #17]
 8003756:	2b01      	cmp	r3, #1
 8003758:	d105      	bne.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800375a:	4ba6      	ldr	r3, [pc, #664]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800375c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800375e:	4aa5      	ldr	r2, [pc, #660]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003760:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003764:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 0301 	and.w	r3, r3, #1
 800376e:	2b00      	cmp	r3, #0
 8003770:	d00a      	beq.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003772:	4ba0      	ldr	r3, [pc, #640]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003774:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003778:	f023 0203 	bic.w	r2, r3, #3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003780:	499c      	ldr	r1, [pc, #624]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003782:	4313      	orrs	r3, r2
 8003784:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0302 	and.w	r3, r3, #2
 8003790:	2b00      	cmp	r3, #0
 8003792:	d00a      	beq.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003794:	4b97      	ldr	r3, [pc, #604]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003796:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800379a:	f023 020c 	bic.w	r2, r3, #12
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037a2:	4994      	ldr	r1, [pc, #592]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80037a4:	4313      	orrs	r3, r2
 80037a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0304 	and.w	r3, r3, #4
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d00a      	beq.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80037b6:	4b8f      	ldr	r3, [pc, #572]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80037b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037bc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c4:	498b      	ldr	r1, [pc, #556]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80037c6:	4313      	orrs	r3, r2
 80037c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 0308 	and.w	r3, r3, #8
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d00a      	beq.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80037d8:	4b86      	ldr	r3, [pc, #536]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80037da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037de:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037e6:	4983      	ldr	r1, [pc, #524]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80037e8:	4313      	orrs	r3, r2
 80037ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 0310 	and.w	r3, r3, #16
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d00a      	beq.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80037fa:	4b7e      	ldr	r3, [pc, #504]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80037fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003800:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003808:	497a      	ldr	r1, [pc, #488]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800380a:	4313      	orrs	r3, r2
 800380c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 0320 	and.w	r3, r3, #32
 8003818:	2b00      	cmp	r3, #0
 800381a:	d00a      	beq.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800381c:	4b75      	ldr	r3, [pc, #468]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800381e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003822:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800382a:	4972      	ldr	r1, [pc, #456]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800382c:	4313      	orrs	r3, r2
 800382e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800383a:	2b00      	cmp	r3, #0
 800383c:	d00a      	beq.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800383e:	4b6d      	ldr	r3, [pc, #436]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003840:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003844:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800384c:	4969      	ldr	r1, [pc, #420]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800384e:	4313      	orrs	r3, r2
 8003850:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800385c:	2b00      	cmp	r3, #0
 800385e:	d00a      	beq.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003860:	4b64      	ldr	r3, [pc, #400]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003862:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003866:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800386e:	4961      	ldr	r1, [pc, #388]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003870:	4313      	orrs	r3, r2
 8003872:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800387e:	2b00      	cmp	r3, #0
 8003880:	d00a      	beq.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003882:	4b5c      	ldr	r3, [pc, #368]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003884:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003888:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003890:	4958      	ldr	r1, [pc, #352]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003892:	4313      	orrs	r3, r2
 8003894:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d00a      	beq.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80038a4:	4b53      	ldr	r3, [pc, #332]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80038a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038aa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038b2:	4950      	ldr	r1, [pc, #320]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80038b4:	4313      	orrs	r3, r2
 80038b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d00a      	beq.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80038c6:	4b4b      	ldr	r3, [pc, #300]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80038c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038d4:	4947      	ldr	r1, [pc, #284]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80038d6:	4313      	orrs	r3, r2
 80038d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d00a      	beq.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80038e8:	4b42      	ldr	r3, [pc, #264]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80038ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80038ee:	f023 0203 	bic.w	r2, r3, #3
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038f6:	493f      	ldr	r1, [pc, #252]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80038f8:	4313      	orrs	r3, r2
 80038fa:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d028      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800390a:	4b3a      	ldr	r3, [pc, #232]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800390c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003910:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003918:	4936      	ldr	r1, [pc, #216]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800391a:	4313      	orrs	r3, r2
 800391c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003924:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003928:	d106      	bne.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800392a:	4b32      	ldr	r3, [pc, #200]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	4a31      	ldr	r2, [pc, #196]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003930:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003934:	60d3      	str	r3, [r2, #12]
 8003936:	e011      	b.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800393c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003940:	d10c      	bne.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	3304      	adds	r3, #4
 8003946:	2101      	movs	r1, #1
 8003948:	4618      	mov	r0, r3
 800394a:	f000 f8d9 	bl	8003b00 <RCCEx_PLLSAI1_Config>
 800394e:	4603      	mov	r3, r0
 8003950:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003952:	7cfb      	ldrb	r3, [r7, #19]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d001      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8003958:	7cfb      	ldrb	r3, [r7, #19]
 800395a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003964:	2b00      	cmp	r3, #0
 8003966:	d028      	beq.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003968:	4b22      	ldr	r3, [pc, #136]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800396a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800396e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003976:	491f      	ldr	r1, [pc, #124]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003978:	4313      	orrs	r3, r2
 800397a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003982:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003986:	d106      	bne.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003988:	4b1a      	ldr	r3, [pc, #104]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	4a19      	ldr	r2, [pc, #100]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800398e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003992:	60d3      	str	r3, [r2, #12]
 8003994:	e011      	b.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800399a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800399e:	d10c      	bne.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	3304      	adds	r3, #4
 80039a4:	2101      	movs	r1, #1
 80039a6:	4618      	mov	r0, r3
 80039a8:	f000 f8aa 	bl	8003b00 <RCCEx_PLLSAI1_Config>
 80039ac:	4603      	mov	r3, r0
 80039ae:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80039b0:	7cfb      	ldrb	r3, [r7, #19]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d001      	beq.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 80039b6:	7cfb      	ldrb	r3, [r7, #19]
 80039b8:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d02a      	beq.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80039c6:	4b0b      	ldr	r3, [pc, #44]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80039c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039cc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039d4:	4907      	ldr	r1, [pc, #28]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80039d6:	4313      	orrs	r3, r2
 80039d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039e4:	d108      	bne.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039e6:	4b03      	ldr	r3, [pc, #12]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80039e8:	68db      	ldr	r3, [r3, #12]
 80039ea:	4a02      	ldr	r2, [pc, #8]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80039ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80039f0:	60d3      	str	r3, [r2, #12]
 80039f2:	e013      	b.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x534>
 80039f4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a00:	d10c      	bne.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	3304      	adds	r3, #4
 8003a06:	2101      	movs	r1, #1
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f000 f879 	bl	8003b00 <RCCEx_PLLSAI1_Config>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a12:	7cfb      	ldrb	r3, [r7, #19]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d001      	beq.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8003a18:	7cfb      	ldrb	r3, [r7, #19]
 8003a1a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d02f      	beq.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003a28:	4b2c      	ldr	r3, [pc, #176]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a2e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a36:	4929      	ldr	r1, [pc, #164]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a46:	d10d      	bne.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	3304      	adds	r3, #4
 8003a4c:	2102      	movs	r1, #2
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f000 f856 	bl	8003b00 <RCCEx_PLLSAI1_Config>
 8003a54:	4603      	mov	r3, r0
 8003a56:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a58:	7cfb      	ldrb	r3, [r7, #19]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d014      	beq.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8003a5e:	7cfb      	ldrb	r3, [r7, #19]
 8003a60:	74bb      	strb	r3, [r7, #18]
 8003a62:	e011      	b.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a6c:	d10c      	bne.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	3320      	adds	r3, #32
 8003a72:	2102      	movs	r1, #2
 8003a74:	4618      	mov	r0, r3
 8003a76:	f000 f935 	bl	8003ce4 <RCCEx_PLLSAI2_Config>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a7e:	7cfb      	ldrb	r3, [r7, #19]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d001      	beq.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8003a84:	7cfb      	ldrb	r3, [r7, #19]
 8003a86:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d00b      	beq.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003a94:	4b11      	ldr	r3, [pc, #68]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a9a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003aa4:	490d      	ldr	r1, [pc, #52]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d00b      	beq.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003ab8:	4b08      	ldr	r3, [pc, #32]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003abe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ac8:	4904      	ldr	r1, [pc, #16]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003aca:	4313      	orrs	r3, r2
 8003acc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003ad0:	7cbb      	ldrb	r3, [r7, #18]
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3718      	adds	r7, #24
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	bf00      	nop
 8003adc:	40021000 	.word	0x40021000

08003ae0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003ae4:	4b05      	ldr	r3, [pc, #20]	; (8003afc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a04      	ldr	r2, [pc, #16]	; (8003afc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003aea:	f043 0304 	orr.w	r3, r3, #4
 8003aee:	6013      	str	r3, [r2, #0]
}
 8003af0:	bf00      	nop
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr
 8003afa:	bf00      	nop
 8003afc:	40021000 	.word	0x40021000

08003b00 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b084      	sub	sp, #16
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
 8003b08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003b0e:	4b74      	ldr	r3, [pc, #464]	; (8003ce0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b10:	68db      	ldr	r3, [r3, #12]
 8003b12:	f003 0303 	and.w	r3, r3, #3
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d018      	beq.n	8003b4c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003b1a:	4b71      	ldr	r3, [pc, #452]	; (8003ce0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b1c:	68db      	ldr	r3, [r3, #12]
 8003b1e:	f003 0203 	and.w	r2, r3, #3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d10d      	bne.n	8003b46 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
       ||
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d009      	beq.n	8003b46 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003b32:	4b6b      	ldr	r3, [pc, #428]	; (8003ce0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b34:	68db      	ldr	r3, [r3, #12]
 8003b36:	091b      	lsrs	r3, r3, #4
 8003b38:	f003 0307 	and.w	r3, r3, #7
 8003b3c:	1c5a      	adds	r2, r3, #1
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	685b      	ldr	r3, [r3, #4]
       ||
 8003b42:	429a      	cmp	r2, r3
 8003b44:	d047      	beq.n	8003bd6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	73fb      	strb	r3, [r7, #15]
 8003b4a:	e044      	b.n	8003bd6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	2b03      	cmp	r3, #3
 8003b52:	d018      	beq.n	8003b86 <RCCEx_PLLSAI1_Config+0x86>
 8003b54:	2b03      	cmp	r3, #3
 8003b56:	d825      	bhi.n	8003ba4 <RCCEx_PLLSAI1_Config+0xa4>
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d002      	beq.n	8003b62 <RCCEx_PLLSAI1_Config+0x62>
 8003b5c:	2b02      	cmp	r3, #2
 8003b5e:	d009      	beq.n	8003b74 <RCCEx_PLLSAI1_Config+0x74>
 8003b60:	e020      	b.n	8003ba4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003b62:	4b5f      	ldr	r3, [pc, #380]	; (8003ce0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 0302 	and.w	r3, r3, #2
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d11d      	bne.n	8003baa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b72:	e01a      	b.n	8003baa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003b74:	4b5a      	ldr	r3, [pc, #360]	; (8003ce0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d116      	bne.n	8003bae <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b84:	e013      	b.n	8003bae <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003b86:	4b56      	ldr	r3, [pc, #344]	; (8003ce0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d10f      	bne.n	8003bb2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003b92:	4b53      	ldr	r3, [pc, #332]	; (8003ce0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d109      	bne.n	8003bb2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003ba2:	e006      	b.n	8003bb2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	73fb      	strb	r3, [r7, #15]
      break;
 8003ba8:	e004      	b.n	8003bb4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003baa:	bf00      	nop
 8003bac:	e002      	b.n	8003bb4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003bae:	bf00      	nop
 8003bb0:	e000      	b.n	8003bb4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003bb2:	bf00      	nop
    }

    if(status == HAL_OK)
 8003bb4:	7bfb      	ldrb	r3, [r7, #15]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d10d      	bne.n	8003bd6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003bba:	4b49      	ldr	r3, [pc, #292]	; (8003ce0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6819      	ldr	r1, [r3, #0]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	3b01      	subs	r3, #1
 8003bcc:	011b      	lsls	r3, r3, #4
 8003bce:	430b      	orrs	r3, r1
 8003bd0:	4943      	ldr	r1, [pc, #268]	; (8003ce0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003bd6:	7bfb      	ldrb	r3, [r7, #15]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d17c      	bne.n	8003cd6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003bdc:	4b40      	ldr	r3, [pc, #256]	; (8003ce0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a3f      	ldr	r2, [pc, #252]	; (8003ce0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003be2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003be6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003be8:	f7fc ff56 	bl	8000a98 <HAL_GetTick>
 8003bec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003bee:	e009      	b.n	8003c04 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003bf0:	f7fc ff52 	bl	8000a98 <HAL_GetTick>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	2b02      	cmp	r3, #2
 8003bfc:	d902      	bls.n	8003c04 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	73fb      	strb	r3, [r7, #15]
        break;
 8003c02:	e005      	b.n	8003c10 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003c04:	4b36      	ldr	r3, [pc, #216]	; (8003ce0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d1ef      	bne.n	8003bf0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003c10:	7bfb      	ldrb	r3, [r7, #15]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d15f      	bne.n	8003cd6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d110      	bne.n	8003c3e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c1c:	4b30      	ldr	r3, [pc, #192]	; (8003ce0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c1e:	691b      	ldr	r3, [r3, #16]
 8003c20:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003c24:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	6892      	ldr	r2, [r2, #8]
 8003c2c:	0211      	lsls	r1, r2, #8
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	68d2      	ldr	r2, [r2, #12]
 8003c32:	06d2      	lsls	r2, r2, #27
 8003c34:	430a      	orrs	r2, r1
 8003c36:	492a      	ldr	r1, [pc, #168]	; (8003ce0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	610b      	str	r3, [r1, #16]
 8003c3c:	e027      	b.n	8003c8e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d112      	bne.n	8003c6a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c44:	4b26      	ldr	r3, [pc, #152]	; (8003ce0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c46:	691b      	ldr	r3, [r3, #16]
 8003c48:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003c4c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	6892      	ldr	r2, [r2, #8]
 8003c54:	0211      	lsls	r1, r2, #8
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	6912      	ldr	r2, [r2, #16]
 8003c5a:	0852      	lsrs	r2, r2, #1
 8003c5c:	3a01      	subs	r2, #1
 8003c5e:	0552      	lsls	r2, r2, #21
 8003c60:	430a      	orrs	r2, r1
 8003c62:	491f      	ldr	r1, [pc, #124]	; (8003ce0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c64:	4313      	orrs	r3, r2
 8003c66:	610b      	str	r3, [r1, #16]
 8003c68:	e011      	b.n	8003c8e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c6a:	4b1d      	ldr	r3, [pc, #116]	; (8003ce0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c6c:	691b      	ldr	r3, [r3, #16]
 8003c6e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003c72:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003c76:	687a      	ldr	r2, [r7, #4]
 8003c78:	6892      	ldr	r2, [r2, #8]
 8003c7a:	0211      	lsls	r1, r2, #8
 8003c7c:	687a      	ldr	r2, [r7, #4]
 8003c7e:	6952      	ldr	r2, [r2, #20]
 8003c80:	0852      	lsrs	r2, r2, #1
 8003c82:	3a01      	subs	r2, #1
 8003c84:	0652      	lsls	r2, r2, #25
 8003c86:	430a      	orrs	r2, r1
 8003c88:	4915      	ldr	r1, [pc, #84]	; (8003ce0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003c8e:	4b14      	ldr	r3, [pc, #80]	; (8003ce0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a13      	ldr	r2, [pc, #76]	; (8003ce0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c94:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003c98:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c9a:	f7fc fefd 	bl	8000a98 <HAL_GetTick>
 8003c9e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003ca0:	e009      	b.n	8003cb6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003ca2:	f7fc fef9 	bl	8000a98 <HAL_GetTick>
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	1ad3      	subs	r3, r2, r3
 8003cac:	2b02      	cmp	r3, #2
 8003cae:	d902      	bls.n	8003cb6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003cb0:	2303      	movs	r3, #3
 8003cb2:	73fb      	strb	r3, [r7, #15]
          break;
 8003cb4:	e005      	b.n	8003cc2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003cb6:	4b0a      	ldr	r3, [pc, #40]	; (8003ce0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d0ef      	beq.n	8003ca2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003cc2:	7bfb      	ldrb	r3, [r7, #15]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d106      	bne.n	8003cd6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003cc8:	4b05      	ldr	r3, [pc, #20]	; (8003ce0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cca:	691a      	ldr	r2, [r3, #16]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	699b      	ldr	r3, [r3, #24]
 8003cd0:	4903      	ldr	r1, [pc, #12]	; (8003ce0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003cd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	3710      	adds	r7, #16
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}
 8003ce0:	40021000 	.word	0x40021000

08003ce4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b084      	sub	sp, #16
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003cf2:	4b69      	ldr	r3, [pc, #420]	; (8003e98 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003cf4:	68db      	ldr	r3, [r3, #12]
 8003cf6:	f003 0303 	and.w	r3, r3, #3
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d018      	beq.n	8003d30 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003cfe:	4b66      	ldr	r3, [pc, #408]	; (8003e98 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003d00:	68db      	ldr	r3, [r3, #12]
 8003d02:	f003 0203 	and.w	r2, r3, #3
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	d10d      	bne.n	8003d2a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
       ||
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d009      	beq.n	8003d2a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003d16:	4b60      	ldr	r3, [pc, #384]	; (8003e98 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003d18:	68db      	ldr	r3, [r3, #12]
 8003d1a:	091b      	lsrs	r3, r3, #4
 8003d1c:	f003 0307 	and.w	r3, r3, #7
 8003d20:	1c5a      	adds	r2, r3, #1
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	685b      	ldr	r3, [r3, #4]
       ||
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d047      	beq.n	8003dba <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	73fb      	strb	r3, [r7, #15]
 8003d2e:	e044      	b.n	8003dba <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	2b03      	cmp	r3, #3
 8003d36:	d018      	beq.n	8003d6a <RCCEx_PLLSAI2_Config+0x86>
 8003d38:	2b03      	cmp	r3, #3
 8003d3a:	d825      	bhi.n	8003d88 <RCCEx_PLLSAI2_Config+0xa4>
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d002      	beq.n	8003d46 <RCCEx_PLLSAI2_Config+0x62>
 8003d40:	2b02      	cmp	r3, #2
 8003d42:	d009      	beq.n	8003d58 <RCCEx_PLLSAI2_Config+0x74>
 8003d44:	e020      	b.n	8003d88 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003d46:	4b54      	ldr	r3, [pc, #336]	; (8003e98 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 0302 	and.w	r3, r3, #2
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d11d      	bne.n	8003d8e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d56:	e01a      	b.n	8003d8e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003d58:	4b4f      	ldr	r3, [pc, #316]	; (8003e98 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d116      	bne.n	8003d92 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d68:	e013      	b.n	8003d92 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003d6a:	4b4b      	ldr	r3, [pc, #300]	; (8003e98 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d10f      	bne.n	8003d96 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003d76:	4b48      	ldr	r3, [pc, #288]	; (8003e98 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d109      	bne.n	8003d96 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003d86:	e006      	b.n	8003d96 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	73fb      	strb	r3, [r7, #15]
      break;
 8003d8c:	e004      	b.n	8003d98 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003d8e:	bf00      	nop
 8003d90:	e002      	b.n	8003d98 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003d92:	bf00      	nop
 8003d94:	e000      	b.n	8003d98 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003d96:	bf00      	nop
    }

    if(status == HAL_OK)
 8003d98:	7bfb      	ldrb	r3, [r7, #15]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d10d      	bne.n	8003dba <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003d9e:	4b3e      	ldr	r3, [pc, #248]	; (8003e98 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003da0:	68db      	ldr	r3, [r3, #12]
 8003da2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6819      	ldr	r1, [r3, #0]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	3b01      	subs	r3, #1
 8003db0:	011b      	lsls	r3, r3, #4
 8003db2:	430b      	orrs	r3, r1
 8003db4:	4938      	ldr	r1, [pc, #224]	; (8003e98 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003db6:	4313      	orrs	r3, r2
 8003db8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003dba:	7bfb      	ldrb	r3, [r7, #15]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d166      	bne.n	8003e8e <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003dc0:	4b35      	ldr	r3, [pc, #212]	; (8003e98 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a34      	ldr	r2, [pc, #208]	; (8003e98 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003dc6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dcc:	f7fc fe64 	bl	8000a98 <HAL_GetTick>
 8003dd0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003dd2:	e009      	b.n	8003de8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003dd4:	f7fc fe60 	bl	8000a98 <HAL_GetTick>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	1ad3      	subs	r3, r2, r3
 8003dde:	2b02      	cmp	r3, #2
 8003de0:	d902      	bls.n	8003de8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003de2:	2303      	movs	r3, #3
 8003de4:	73fb      	strb	r3, [r7, #15]
        break;
 8003de6:	e005      	b.n	8003df4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003de8:	4b2b      	ldr	r3, [pc, #172]	; (8003e98 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d1ef      	bne.n	8003dd4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003df4:	7bfb      	ldrb	r3, [r7, #15]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d149      	bne.n	8003e8e <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d110      	bne.n	8003e22 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003e00:	4b25      	ldr	r3, [pc, #148]	; (8003e98 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003e02:	695b      	ldr	r3, [r3, #20]
 8003e04:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003e08:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003e0c:	687a      	ldr	r2, [r7, #4]
 8003e0e:	6892      	ldr	r2, [r2, #8]
 8003e10:	0211      	lsls	r1, r2, #8
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	68d2      	ldr	r2, [r2, #12]
 8003e16:	06d2      	lsls	r2, r2, #27
 8003e18:	430a      	orrs	r2, r1
 8003e1a:	491f      	ldr	r1, [pc, #124]	; (8003e98 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	614b      	str	r3, [r1, #20]
 8003e20:	e011      	b.n	8003e46 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003e22:	4b1d      	ldr	r3, [pc, #116]	; (8003e98 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003e24:	695b      	ldr	r3, [r3, #20]
 8003e26:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003e2a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	6892      	ldr	r2, [r2, #8]
 8003e32:	0211      	lsls	r1, r2, #8
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	6912      	ldr	r2, [r2, #16]
 8003e38:	0852      	lsrs	r2, r2, #1
 8003e3a:	3a01      	subs	r2, #1
 8003e3c:	0652      	lsls	r2, r2, #25
 8003e3e:	430a      	orrs	r2, r1
 8003e40:	4915      	ldr	r1, [pc, #84]	; (8003e98 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003e42:	4313      	orrs	r3, r2
 8003e44:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003e46:	4b14      	ldr	r3, [pc, #80]	; (8003e98 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a13      	ldr	r2, [pc, #76]	; (8003e98 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003e4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e50:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e52:	f7fc fe21 	bl	8000a98 <HAL_GetTick>
 8003e56:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003e58:	e009      	b.n	8003e6e <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003e5a:	f7fc fe1d 	bl	8000a98 <HAL_GetTick>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	1ad3      	subs	r3, r2, r3
 8003e64:	2b02      	cmp	r3, #2
 8003e66:	d902      	bls.n	8003e6e <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8003e68:	2303      	movs	r3, #3
 8003e6a:	73fb      	strb	r3, [r7, #15]
          break;
 8003e6c:	e005      	b.n	8003e7a <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003e6e:	4b0a      	ldr	r3, [pc, #40]	; (8003e98 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d0ef      	beq.n	8003e5a <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8003e7a:	7bfb      	ldrb	r3, [r7, #15]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d106      	bne.n	8003e8e <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003e80:	4b05      	ldr	r3, [pc, #20]	; (8003e98 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003e82:	695a      	ldr	r2, [r3, #20]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	695b      	ldr	r3, [r3, #20]
 8003e88:	4903      	ldr	r1, [pc, #12]	; (8003e98 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003e8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3710      	adds	r7, #16
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}
 8003e98:	40021000 	.word	0x40021000

08003e9c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b082      	sub	sp, #8
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d101      	bne.n	8003eae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e040      	b.n	8003f30 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d106      	bne.n	8003ec4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f7fc fc7c 	bl	80007bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2224      	movs	r2, #36	; 0x24
 8003ec8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f022 0201 	bic.w	r2, r2, #1
 8003ed8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f000 f82c 	bl	8003f38 <UART_SetConfig>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d101      	bne.n	8003eea <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e022      	b.n	8003f30 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d002      	beq.n	8003ef8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f000 fad8 	bl	80044a8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	685a      	ldr	r2, [r3, #4]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f06:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	689a      	ldr	r2, [r3, #8]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f16:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f042 0201 	orr.w	r2, r2, #1
 8003f26:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f000 fb5f 	bl	80045ec <UART_CheckIdleState>
 8003f2e:	4603      	mov	r3, r0
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3708      	adds	r7, #8
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}

08003f38 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f3c:	b08a      	sub	sp, #40	; 0x28
 8003f3e:	af00      	add	r7, sp, #0
 8003f40:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f42:	2300      	movs	r3, #0
 8003f44:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	689a      	ldr	r2, [r3, #8]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	691b      	ldr	r3, [r3, #16]
 8003f50:	431a      	orrs	r2, r3
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	695b      	ldr	r3, [r3, #20]
 8003f56:	431a      	orrs	r2, r3
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	69db      	ldr	r3, [r3, #28]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	4ba4      	ldr	r3, [pc, #656]	; (80041f8 <UART_SetConfig+0x2c0>)
 8003f68:	4013      	ands	r3, r2
 8003f6a:	68fa      	ldr	r2, [r7, #12]
 8003f6c:	6812      	ldr	r2, [r2, #0]
 8003f6e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003f70:	430b      	orrs	r3, r1
 8003f72:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	68da      	ldr	r2, [r3, #12]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	430a      	orrs	r2, r1
 8003f88:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	699b      	ldr	r3, [r3, #24]
 8003f8e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a99      	ldr	r2, [pc, #612]	; (80041fc <UART_SetConfig+0x2c4>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d004      	beq.n	8003fa4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	6a1b      	ldr	r3, [r3, #32]
 8003f9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fb4:	430a      	orrs	r2, r1
 8003fb6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a90      	ldr	r2, [pc, #576]	; (8004200 <UART_SetConfig+0x2c8>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d126      	bne.n	8004010 <UART_SetConfig+0xd8>
 8003fc2:	4b90      	ldr	r3, [pc, #576]	; (8004204 <UART_SetConfig+0x2cc>)
 8003fc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fc8:	f003 0303 	and.w	r3, r3, #3
 8003fcc:	2b03      	cmp	r3, #3
 8003fce:	d81b      	bhi.n	8004008 <UART_SetConfig+0xd0>
 8003fd0:	a201      	add	r2, pc, #4	; (adr r2, 8003fd8 <UART_SetConfig+0xa0>)
 8003fd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fd6:	bf00      	nop
 8003fd8:	08003fe9 	.word	0x08003fe9
 8003fdc:	08003ff9 	.word	0x08003ff9
 8003fe0:	08003ff1 	.word	0x08003ff1
 8003fe4:	08004001 	.word	0x08004001
 8003fe8:	2301      	movs	r3, #1
 8003fea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fee:	e116      	b.n	800421e <UART_SetConfig+0x2e6>
 8003ff0:	2302      	movs	r3, #2
 8003ff2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ff6:	e112      	b.n	800421e <UART_SetConfig+0x2e6>
 8003ff8:	2304      	movs	r3, #4
 8003ffa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ffe:	e10e      	b.n	800421e <UART_SetConfig+0x2e6>
 8004000:	2308      	movs	r3, #8
 8004002:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004006:	e10a      	b.n	800421e <UART_SetConfig+0x2e6>
 8004008:	2310      	movs	r3, #16
 800400a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800400e:	e106      	b.n	800421e <UART_SetConfig+0x2e6>
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a7c      	ldr	r2, [pc, #496]	; (8004208 <UART_SetConfig+0x2d0>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d138      	bne.n	800408c <UART_SetConfig+0x154>
 800401a:	4b7a      	ldr	r3, [pc, #488]	; (8004204 <UART_SetConfig+0x2cc>)
 800401c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004020:	f003 030c 	and.w	r3, r3, #12
 8004024:	2b0c      	cmp	r3, #12
 8004026:	d82d      	bhi.n	8004084 <UART_SetConfig+0x14c>
 8004028:	a201      	add	r2, pc, #4	; (adr r2, 8004030 <UART_SetConfig+0xf8>)
 800402a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800402e:	bf00      	nop
 8004030:	08004065 	.word	0x08004065
 8004034:	08004085 	.word	0x08004085
 8004038:	08004085 	.word	0x08004085
 800403c:	08004085 	.word	0x08004085
 8004040:	08004075 	.word	0x08004075
 8004044:	08004085 	.word	0x08004085
 8004048:	08004085 	.word	0x08004085
 800404c:	08004085 	.word	0x08004085
 8004050:	0800406d 	.word	0x0800406d
 8004054:	08004085 	.word	0x08004085
 8004058:	08004085 	.word	0x08004085
 800405c:	08004085 	.word	0x08004085
 8004060:	0800407d 	.word	0x0800407d
 8004064:	2300      	movs	r3, #0
 8004066:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800406a:	e0d8      	b.n	800421e <UART_SetConfig+0x2e6>
 800406c:	2302      	movs	r3, #2
 800406e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004072:	e0d4      	b.n	800421e <UART_SetConfig+0x2e6>
 8004074:	2304      	movs	r3, #4
 8004076:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800407a:	e0d0      	b.n	800421e <UART_SetConfig+0x2e6>
 800407c:	2308      	movs	r3, #8
 800407e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004082:	e0cc      	b.n	800421e <UART_SetConfig+0x2e6>
 8004084:	2310      	movs	r3, #16
 8004086:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800408a:	e0c8      	b.n	800421e <UART_SetConfig+0x2e6>
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a5e      	ldr	r2, [pc, #376]	; (800420c <UART_SetConfig+0x2d4>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d125      	bne.n	80040e2 <UART_SetConfig+0x1aa>
 8004096:	4b5b      	ldr	r3, [pc, #364]	; (8004204 <UART_SetConfig+0x2cc>)
 8004098:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800409c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80040a0:	2b30      	cmp	r3, #48	; 0x30
 80040a2:	d016      	beq.n	80040d2 <UART_SetConfig+0x19a>
 80040a4:	2b30      	cmp	r3, #48	; 0x30
 80040a6:	d818      	bhi.n	80040da <UART_SetConfig+0x1a2>
 80040a8:	2b20      	cmp	r3, #32
 80040aa:	d00a      	beq.n	80040c2 <UART_SetConfig+0x18a>
 80040ac:	2b20      	cmp	r3, #32
 80040ae:	d814      	bhi.n	80040da <UART_SetConfig+0x1a2>
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d002      	beq.n	80040ba <UART_SetConfig+0x182>
 80040b4:	2b10      	cmp	r3, #16
 80040b6:	d008      	beq.n	80040ca <UART_SetConfig+0x192>
 80040b8:	e00f      	b.n	80040da <UART_SetConfig+0x1a2>
 80040ba:	2300      	movs	r3, #0
 80040bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040c0:	e0ad      	b.n	800421e <UART_SetConfig+0x2e6>
 80040c2:	2302      	movs	r3, #2
 80040c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040c8:	e0a9      	b.n	800421e <UART_SetConfig+0x2e6>
 80040ca:	2304      	movs	r3, #4
 80040cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040d0:	e0a5      	b.n	800421e <UART_SetConfig+0x2e6>
 80040d2:	2308      	movs	r3, #8
 80040d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040d8:	e0a1      	b.n	800421e <UART_SetConfig+0x2e6>
 80040da:	2310      	movs	r3, #16
 80040dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040e0:	e09d      	b.n	800421e <UART_SetConfig+0x2e6>
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a4a      	ldr	r2, [pc, #296]	; (8004210 <UART_SetConfig+0x2d8>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d125      	bne.n	8004138 <UART_SetConfig+0x200>
 80040ec:	4b45      	ldr	r3, [pc, #276]	; (8004204 <UART_SetConfig+0x2cc>)
 80040ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040f2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80040f6:	2bc0      	cmp	r3, #192	; 0xc0
 80040f8:	d016      	beq.n	8004128 <UART_SetConfig+0x1f0>
 80040fa:	2bc0      	cmp	r3, #192	; 0xc0
 80040fc:	d818      	bhi.n	8004130 <UART_SetConfig+0x1f8>
 80040fe:	2b80      	cmp	r3, #128	; 0x80
 8004100:	d00a      	beq.n	8004118 <UART_SetConfig+0x1e0>
 8004102:	2b80      	cmp	r3, #128	; 0x80
 8004104:	d814      	bhi.n	8004130 <UART_SetConfig+0x1f8>
 8004106:	2b00      	cmp	r3, #0
 8004108:	d002      	beq.n	8004110 <UART_SetConfig+0x1d8>
 800410a:	2b40      	cmp	r3, #64	; 0x40
 800410c:	d008      	beq.n	8004120 <UART_SetConfig+0x1e8>
 800410e:	e00f      	b.n	8004130 <UART_SetConfig+0x1f8>
 8004110:	2300      	movs	r3, #0
 8004112:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004116:	e082      	b.n	800421e <UART_SetConfig+0x2e6>
 8004118:	2302      	movs	r3, #2
 800411a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800411e:	e07e      	b.n	800421e <UART_SetConfig+0x2e6>
 8004120:	2304      	movs	r3, #4
 8004122:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004126:	e07a      	b.n	800421e <UART_SetConfig+0x2e6>
 8004128:	2308      	movs	r3, #8
 800412a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800412e:	e076      	b.n	800421e <UART_SetConfig+0x2e6>
 8004130:	2310      	movs	r3, #16
 8004132:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004136:	e072      	b.n	800421e <UART_SetConfig+0x2e6>
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a35      	ldr	r2, [pc, #212]	; (8004214 <UART_SetConfig+0x2dc>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d12a      	bne.n	8004198 <UART_SetConfig+0x260>
 8004142:	4b30      	ldr	r3, [pc, #192]	; (8004204 <UART_SetConfig+0x2cc>)
 8004144:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004148:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800414c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004150:	d01a      	beq.n	8004188 <UART_SetConfig+0x250>
 8004152:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004156:	d81b      	bhi.n	8004190 <UART_SetConfig+0x258>
 8004158:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800415c:	d00c      	beq.n	8004178 <UART_SetConfig+0x240>
 800415e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004162:	d815      	bhi.n	8004190 <UART_SetConfig+0x258>
 8004164:	2b00      	cmp	r3, #0
 8004166:	d003      	beq.n	8004170 <UART_SetConfig+0x238>
 8004168:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800416c:	d008      	beq.n	8004180 <UART_SetConfig+0x248>
 800416e:	e00f      	b.n	8004190 <UART_SetConfig+0x258>
 8004170:	2300      	movs	r3, #0
 8004172:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004176:	e052      	b.n	800421e <UART_SetConfig+0x2e6>
 8004178:	2302      	movs	r3, #2
 800417a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800417e:	e04e      	b.n	800421e <UART_SetConfig+0x2e6>
 8004180:	2304      	movs	r3, #4
 8004182:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004186:	e04a      	b.n	800421e <UART_SetConfig+0x2e6>
 8004188:	2308      	movs	r3, #8
 800418a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800418e:	e046      	b.n	800421e <UART_SetConfig+0x2e6>
 8004190:	2310      	movs	r3, #16
 8004192:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004196:	e042      	b.n	800421e <UART_SetConfig+0x2e6>
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a17      	ldr	r2, [pc, #92]	; (80041fc <UART_SetConfig+0x2c4>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d13a      	bne.n	8004218 <UART_SetConfig+0x2e0>
 80041a2:	4b18      	ldr	r3, [pc, #96]	; (8004204 <UART_SetConfig+0x2cc>)
 80041a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041a8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80041ac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80041b0:	d01a      	beq.n	80041e8 <UART_SetConfig+0x2b0>
 80041b2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80041b6:	d81b      	bhi.n	80041f0 <UART_SetConfig+0x2b8>
 80041b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041bc:	d00c      	beq.n	80041d8 <UART_SetConfig+0x2a0>
 80041be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041c2:	d815      	bhi.n	80041f0 <UART_SetConfig+0x2b8>
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d003      	beq.n	80041d0 <UART_SetConfig+0x298>
 80041c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041cc:	d008      	beq.n	80041e0 <UART_SetConfig+0x2a8>
 80041ce:	e00f      	b.n	80041f0 <UART_SetConfig+0x2b8>
 80041d0:	2300      	movs	r3, #0
 80041d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041d6:	e022      	b.n	800421e <UART_SetConfig+0x2e6>
 80041d8:	2302      	movs	r3, #2
 80041da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041de:	e01e      	b.n	800421e <UART_SetConfig+0x2e6>
 80041e0:	2304      	movs	r3, #4
 80041e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041e6:	e01a      	b.n	800421e <UART_SetConfig+0x2e6>
 80041e8:	2308      	movs	r3, #8
 80041ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041ee:	e016      	b.n	800421e <UART_SetConfig+0x2e6>
 80041f0:	2310      	movs	r3, #16
 80041f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041f6:	e012      	b.n	800421e <UART_SetConfig+0x2e6>
 80041f8:	efff69f3 	.word	0xefff69f3
 80041fc:	40008000 	.word	0x40008000
 8004200:	40013800 	.word	0x40013800
 8004204:	40021000 	.word	0x40021000
 8004208:	40004400 	.word	0x40004400
 800420c:	40004800 	.word	0x40004800
 8004210:	40004c00 	.word	0x40004c00
 8004214:	40005000 	.word	0x40005000
 8004218:	2310      	movs	r3, #16
 800421a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a9f      	ldr	r2, [pc, #636]	; (80044a0 <UART_SetConfig+0x568>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d17a      	bne.n	800431e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004228:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800422c:	2b08      	cmp	r3, #8
 800422e:	d824      	bhi.n	800427a <UART_SetConfig+0x342>
 8004230:	a201      	add	r2, pc, #4	; (adr r2, 8004238 <UART_SetConfig+0x300>)
 8004232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004236:	bf00      	nop
 8004238:	0800425d 	.word	0x0800425d
 800423c:	0800427b 	.word	0x0800427b
 8004240:	08004265 	.word	0x08004265
 8004244:	0800427b 	.word	0x0800427b
 8004248:	0800426b 	.word	0x0800426b
 800424c:	0800427b 	.word	0x0800427b
 8004250:	0800427b 	.word	0x0800427b
 8004254:	0800427b 	.word	0x0800427b
 8004258:	08004273 	.word	0x08004273
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800425c:	f7ff f8b8 	bl	80033d0 <HAL_RCC_GetPCLK1Freq>
 8004260:	61f8      	str	r0, [r7, #28]
        break;
 8004262:	e010      	b.n	8004286 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004264:	4b8f      	ldr	r3, [pc, #572]	; (80044a4 <UART_SetConfig+0x56c>)
 8004266:	61fb      	str	r3, [r7, #28]
        break;
 8004268:	e00d      	b.n	8004286 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800426a:	f7ff f819 	bl	80032a0 <HAL_RCC_GetSysClockFreq>
 800426e:	61f8      	str	r0, [r7, #28]
        break;
 8004270:	e009      	b.n	8004286 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004272:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004276:	61fb      	str	r3, [r7, #28]
        break;
 8004278:	e005      	b.n	8004286 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800427a:	2300      	movs	r3, #0
 800427c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004284:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004286:	69fb      	ldr	r3, [r7, #28]
 8004288:	2b00      	cmp	r3, #0
 800428a:	f000 80fb 	beq.w	8004484 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	685a      	ldr	r2, [r3, #4]
 8004292:	4613      	mov	r3, r2
 8004294:	005b      	lsls	r3, r3, #1
 8004296:	4413      	add	r3, r2
 8004298:	69fa      	ldr	r2, [r7, #28]
 800429a:	429a      	cmp	r2, r3
 800429c:	d305      	bcc.n	80042aa <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80042a4:	69fa      	ldr	r2, [r7, #28]
 80042a6:	429a      	cmp	r2, r3
 80042a8:	d903      	bls.n	80042b2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80042b0:	e0e8      	b.n	8004484 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80042b2:	69fb      	ldr	r3, [r7, #28]
 80042b4:	2200      	movs	r2, #0
 80042b6:	461c      	mov	r4, r3
 80042b8:	4615      	mov	r5, r2
 80042ba:	f04f 0200 	mov.w	r2, #0
 80042be:	f04f 0300 	mov.w	r3, #0
 80042c2:	022b      	lsls	r3, r5, #8
 80042c4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80042c8:	0222      	lsls	r2, r4, #8
 80042ca:	68f9      	ldr	r1, [r7, #12]
 80042cc:	6849      	ldr	r1, [r1, #4]
 80042ce:	0849      	lsrs	r1, r1, #1
 80042d0:	2000      	movs	r0, #0
 80042d2:	4688      	mov	r8, r1
 80042d4:	4681      	mov	r9, r0
 80042d6:	eb12 0a08 	adds.w	sl, r2, r8
 80042da:	eb43 0b09 	adc.w	fp, r3, r9
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	2200      	movs	r2, #0
 80042e4:	603b      	str	r3, [r7, #0]
 80042e6:	607a      	str	r2, [r7, #4]
 80042e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80042ec:	4650      	mov	r0, sl
 80042ee:	4659      	mov	r1, fp
 80042f0:	f7fb ff7c 	bl	80001ec <__aeabi_uldivmod>
 80042f4:	4602      	mov	r2, r0
 80042f6:	460b      	mov	r3, r1
 80042f8:	4613      	mov	r3, r2
 80042fa:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80042fc:	69bb      	ldr	r3, [r7, #24]
 80042fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004302:	d308      	bcc.n	8004316 <UART_SetConfig+0x3de>
 8004304:	69bb      	ldr	r3, [r7, #24]
 8004306:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800430a:	d204      	bcs.n	8004316 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	69ba      	ldr	r2, [r7, #24]
 8004312:	60da      	str	r2, [r3, #12]
 8004314:	e0b6      	b.n	8004484 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800431c:	e0b2      	b.n	8004484 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	69db      	ldr	r3, [r3, #28]
 8004322:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004326:	d15e      	bne.n	80043e6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004328:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800432c:	2b08      	cmp	r3, #8
 800432e:	d828      	bhi.n	8004382 <UART_SetConfig+0x44a>
 8004330:	a201      	add	r2, pc, #4	; (adr r2, 8004338 <UART_SetConfig+0x400>)
 8004332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004336:	bf00      	nop
 8004338:	0800435d 	.word	0x0800435d
 800433c:	08004365 	.word	0x08004365
 8004340:	0800436d 	.word	0x0800436d
 8004344:	08004383 	.word	0x08004383
 8004348:	08004373 	.word	0x08004373
 800434c:	08004383 	.word	0x08004383
 8004350:	08004383 	.word	0x08004383
 8004354:	08004383 	.word	0x08004383
 8004358:	0800437b 	.word	0x0800437b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800435c:	f7ff f838 	bl	80033d0 <HAL_RCC_GetPCLK1Freq>
 8004360:	61f8      	str	r0, [r7, #28]
        break;
 8004362:	e014      	b.n	800438e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004364:	f7ff f84a 	bl	80033fc <HAL_RCC_GetPCLK2Freq>
 8004368:	61f8      	str	r0, [r7, #28]
        break;
 800436a:	e010      	b.n	800438e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800436c:	4b4d      	ldr	r3, [pc, #308]	; (80044a4 <UART_SetConfig+0x56c>)
 800436e:	61fb      	str	r3, [r7, #28]
        break;
 8004370:	e00d      	b.n	800438e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004372:	f7fe ff95 	bl	80032a0 <HAL_RCC_GetSysClockFreq>
 8004376:	61f8      	str	r0, [r7, #28]
        break;
 8004378:	e009      	b.n	800438e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800437a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800437e:	61fb      	str	r3, [r7, #28]
        break;
 8004380:	e005      	b.n	800438e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004382:	2300      	movs	r3, #0
 8004384:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800438c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800438e:	69fb      	ldr	r3, [r7, #28]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d077      	beq.n	8004484 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004394:	69fb      	ldr	r3, [r7, #28]
 8004396:	005a      	lsls	r2, r3, #1
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	085b      	lsrs	r3, r3, #1
 800439e:	441a      	add	r2, r3
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043a8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043aa:	69bb      	ldr	r3, [r7, #24]
 80043ac:	2b0f      	cmp	r3, #15
 80043ae:	d916      	bls.n	80043de <UART_SetConfig+0x4a6>
 80043b0:	69bb      	ldr	r3, [r7, #24]
 80043b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043b6:	d212      	bcs.n	80043de <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80043b8:	69bb      	ldr	r3, [r7, #24]
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	f023 030f 	bic.w	r3, r3, #15
 80043c0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80043c2:	69bb      	ldr	r3, [r7, #24]
 80043c4:	085b      	lsrs	r3, r3, #1
 80043c6:	b29b      	uxth	r3, r3
 80043c8:	f003 0307 	and.w	r3, r3, #7
 80043cc:	b29a      	uxth	r2, r3
 80043ce:	8afb      	ldrh	r3, [r7, #22]
 80043d0:	4313      	orrs	r3, r2
 80043d2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	8afa      	ldrh	r2, [r7, #22]
 80043da:	60da      	str	r2, [r3, #12]
 80043dc:	e052      	b.n	8004484 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80043e4:	e04e      	b.n	8004484 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80043e6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80043ea:	2b08      	cmp	r3, #8
 80043ec:	d827      	bhi.n	800443e <UART_SetConfig+0x506>
 80043ee:	a201      	add	r2, pc, #4	; (adr r2, 80043f4 <UART_SetConfig+0x4bc>)
 80043f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043f4:	08004419 	.word	0x08004419
 80043f8:	08004421 	.word	0x08004421
 80043fc:	08004429 	.word	0x08004429
 8004400:	0800443f 	.word	0x0800443f
 8004404:	0800442f 	.word	0x0800442f
 8004408:	0800443f 	.word	0x0800443f
 800440c:	0800443f 	.word	0x0800443f
 8004410:	0800443f 	.word	0x0800443f
 8004414:	08004437 	.word	0x08004437
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004418:	f7fe ffda 	bl	80033d0 <HAL_RCC_GetPCLK1Freq>
 800441c:	61f8      	str	r0, [r7, #28]
        break;
 800441e:	e014      	b.n	800444a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004420:	f7fe ffec 	bl	80033fc <HAL_RCC_GetPCLK2Freq>
 8004424:	61f8      	str	r0, [r7, #28]
        break;
 8004426:	e010      	b.n	800444a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004428:	4b1e      	ldr	r3, [pc, #120]	; (80044a4 <UART_SetConfig+0x56c>)
 800442a:	61fb      	str	r3, [r7, #28]
        break;
 800442c:	e00d      	b.n	800444a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800442e:	f7fe ff37 	bl	80032a0 <HAL_RCC_GetSysClockFreq>
 8004432:	61f8      	str	r0, [r7, #28]
        break;
 8004434:	e009      	b.n	800444a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004436:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800443a:	61fb      	str	r3, [r7, #28]
        break;
 800443c:	e005      	b.n	800444a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800443e:	2300      	movs	r3, #0
 8004440:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004448:	bf00      	nop
    }

    if (pclk != 0U)
 800444a:	69fb      	ldr	r3, [r7, #28]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d019      	beq.n	8004484 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	085a      	lsrs	r2, r3, #1
 8004456:	69fb      	ldr	r3, [r7, #28]
 8004458:	441a      	add	r2, r3
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004462:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004464:	69bb      	ldr	r3, [r7, #24]
 8004466:	2b0f      	cmp	r3, #15
 8004468:	d909      	bls.n	800447e <UART_SetConfig+0x546>
 800446a:	69bb      	ldr	r3, [r7, #24]
 800446c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004470:	d205      	bcs.n	800447e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004472:	69bb      	ldr	r3, [r7, #24]
 8004474:	b29a      	uxth	r2, r3
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	60da      	str	r2, [r3, #12]
 800447c:	e002      	b.n	8004484 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2200      	movs	r2, #0
 8004488:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2200      	movs	r2, #0
 800448e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004490:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004494:	4618      	mov	r0, r3
 8004496:	3728      	adds	r7, #40	; 0x28
 8004498:	46bd      	mov	sp, r7
 800449a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800449e:	bf00      	nop
 80044a0:	40008000 	.word	0x40008000
 80044a4:	00f42400 	.word	0x00f42400

080044a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b083      	sub	sp, #12
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b4:	f003 0301 	and.w	r3, r3, #1
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d00a      	beq.n	80044d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	430a      	orrs	r2, r1
 80044d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d6:	f003 0302 	and.w	r3, r3, #2
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d00a      	beq.n	80044f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	430a      	orrs	r2, r1
 80044f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f8:	f003 0304 	and.w	r3, r3, #4
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d00a      	beq.n	8004516 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	430a      	orrs	r2, r1
 8004514:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800451a:	f003 0308 	and.w	r3, r3, #8
 800451e:	2b00      	cmp	r3, #0
 8004520:	d00a      	beq.n	8004538 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	430a      	orrs	r2, r1
 8004536:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800453c:	f003 0310 	and.w	r3, r3, #16
 8004540:	2b00      	cmp	r3, #0
 8004542:	d00a      	beq.n	800455a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	430a      	orrs	r2, r1
 8004558:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800455e:	f003 0320 	and.w	r3, r3, #32
 8004562:	2b00      	cmp	r3, #0
 8004564:	d00a      	beq.n	800457c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	430a      	orrs	r2, r1
 800457a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004580:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004584:	2b00      	cmp	r3, #0
 8004586:	d01a      	beq.n	80045be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	430a      	orrs	r2, r1
 800459c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045a6:	d10a      	bne.n	80045be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	430a      	orrs	r2, r1
 80045bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d00a      	beq.n	80045e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	430a      	orrs	r2, r1
 80045de:	605a      	str	r2, [r3, #4]
  }
}
 80045e0:	bf00      	nop
 80045e2:	370c      	adds	r7, #12
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr

080045ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b086      	sub	sp, #24
 80045f0:	af02      	add	r7, sp, #8
 80045f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2200      	movs	r2, #0
 80045f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80045fc:	f7fc fa4c 	bl	8000a98 <HAL_GetTick>
 8004600:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 0308 	and.w	r3, r3, #8
 800460c:	2b08      	cmp	r3, #8
 800460e:	d10e      	bne.n	800462e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004610:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004614:	9300      	str	r3, [sp, #0]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2200      	movs	r2, #0
 800461a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f000 f82d 	bl	800467e <UART_WaitOnFlagUntilTimeout>
 8004624:	4603      	mov	r3, r0
 8004626:	2b00      	cmp	r3, #0
 8004628:	d001      	beq.n	800462e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800462a:	2303      	movs	r3, #3
 800462c:	e023      	b.n	8004676 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f003 0304 	and.w	r3, r3, #4
 8004638:	2b04      	cmp	r3, #4
 800463a:	d10e      	bne.n	800465a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800463c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004640:	9300      	str	r3, [sp, #0]
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2200      	movs	r2, #0
 8004646:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f000 f817 	bl	800467e <UART_WaitOnFlagUntilTimeout>
 8004650:	4603      	mov	r3, r0
 8004652:	2b00      	cmp	r3, #0
 8004654:	d001      	beq.n	800465a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004656:	2303      	movs	r3, #3
 8004658:	e00d      	b.n	8004676 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2220      	movs	r2, #32
 800465e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2220      	movs	r2, #32
 8004664:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2200      	movs	r2, #0
 800466a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2200      	movs	r2, #0
 8004670:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004674:	2300      	movs	r3, #0
}
 8004676:	4618      	mov	r0, r3
 8004678:	3710      	adds	r7, #16
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}

0800467e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800467e:	b580      	push	{r7, lr}
 8004680:	b09c      	sub	sp, #112	; 0x70
 8004682:	af00      	add	r7, sp, #0
 8004684:	60f8      	str	r0, [r7, #12]
 8004686:	60b9      	str	r1, [r7, #8]
 8004688:	603b      	str	r3, [r7, #0]
 800468a:	4613      	mov	r3, r2
 800468c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800468e:	e0a5      	b.n	80047dc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004690:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004692:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004696:	f000 80a1 	beq.w	80047dc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800469a:	f7fc f9fd 	bl	8000a98 <HAL_GetTick>
 800469e:	4602      	mov	r2, r0
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	1ad3      	subs	r3, r2, r3
 80046a4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d302      	bcc.n	80046b0 <UART_WaitOnFlagUntilTimeout+0x32>
 80046aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d13e      	bne.n	800472e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046b8:	e853 3f00 	ldrex	r3, [r3]
 80046bc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80046be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046c0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80046c4:	667b      	str	r3, [r7, #100]	; 0x64
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	461a      	mov	r2, r3
 80046cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80046ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80046d0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046d2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80046d4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80046d6:	e841 2300 	strex	r3, r2, [r1]
 80046da:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80046dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d1e6      	bne.n	80046b0 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	3308      	adds	r3, #8
 80046e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046ec:	e853 3f00 	ldrex	r3, [r3]
 80046f0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80046f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046f4:	f023 0301 	bic.w	r3, r3, #1
 80046f8:	663b      	str	r3, [r7, #96]	; 0x60
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	3308      	adds	r3, #8
 8004700:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004702:	64ba      	str	r2, [r7, #72]	; 0x48
 8004704:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004706:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004708:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800470a:	e841 2300 	strex	r3, r2, [r1]
 800470e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004710:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004712:	2b00      	cmp	r3, #0
 8004714:	d1e5      	bne.n	80046e2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2220      	movs	r2, #32
 800471a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2220      	movs	r2, #32
 8004720:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2200      	movs	r2, #0
 8004726:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800472a:	2303      	movs	r3, #3
 800472c:	e067      	b.n	80047fe <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f003 0304 	and.w	r3, r3, #4
 8004738:	2b00      	cmp	r3, #0
 800473a:	d04f      	beq.n	80047dc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	69db      	ldr	r3, [r3, #28]
 8004742:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004746:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800474a:	d147      	bne.n	80047dc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004754:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800475c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800475e:	e853 3f00 	ldrex	r3, [r3]
 8004762:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004766:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800476a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	461a      	mov	r2, r3
 8004772:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004774:	637b      	str	r3, [r7, #52]	; 0x34
 8004776:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004778:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800477a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800477c:	e841 2300 	strex	r3, r2, [r1]
 8004780:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004784:	2b00      	cmp	r3, #0
 8004786:	d1e6      	bne.n	8004756 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	3308      	adds	r3, #8
 800478e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	e853 3f00 	ldrex	r3, [r3]
 8004796:	613b      	str	r3, [r7, #16]
   return(result);
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	f023 0301 	bic.w	r3, r3, #1
 800479e:	66bb      	str	r3, [r7, #104]	; 0x68
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	3308      	adds	r3, #8
 80047a6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80047a8:	623a      	str	r2, [r7, #32]
 80047aa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ac:	69f9      	ldr	r1, [r7, #28]
 80047ae:	6a3a      	ldr	r2, [r7, #32]
 80047b0:	e841 2300 	strex	r3, r2, [r1]
 80047b4:	61bb      	str	r3, [r7, #24]
   return(result);
 80047b6:	69bb      	ldr	r3, [r7, #24]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d1e5      	bne.n	8004788 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2220      	movs	r2, #32
 80047c0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2220      	movs	r2, #32
 80047c6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2220      	movs	r2, #32
 80047cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2200      	movs	r2, #0
 80047d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80047d8:	2303      	movs	r3, #3
 80047da:	e010      	b.n	80047fe <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	69da      	ldr	r2, [r3, #28]
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	4013      	ands	r3, r2
 80047e6:	68ba      	ldr	r2, [r7, #8]
 80047e8:	429a      	cmp	r2, r3
 80047ea:	bf0c      	ite	eq
 80047ec:	2301      	moveq	r3, #1
 80047ee:	2300      	movne	r3, #0
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	461a      	mov	r2, r3
 80047f4:	79fb      	ldrb	r3, [r7, #7]
 80047f6:	429a      	cmp	r2, r3
 80047f8:	f43f af4a 	beq.w	8004690 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80047fc:	2300      	movs	r3, #0
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3770      	adds	r7, #112	; 0x70
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}

08004806 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004806:	b084      	sub	sp, #16
 8004808:	b580      	push	{r7, lr}
 800480a:	b084      	sub	sp, #16
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	f107 001c 	add.w	r0, r7, #28
 8004814:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	68db      	ldr	r3, [r3, #12]
 800481c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f000 f9a1 	bl	8004b6c <USB_CoreReset>
 800482a:	4603      	mov	r3, r0
 800482c:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800482e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004830:	2b00      	cmp	r3, #0
 8004832:	d106      	bne.n	8004842 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004838:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	639a      	str	r2, [r3, #56]	; 0x38
 8004840:	e005      	b.n	800484e <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004846:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 800484e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004850:	4618      	mov	r0, r3
 8004852:	3710      	adds	r7, #16
 8004854:	46bd      	mov	sp, r7
 8004856:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800485a:	b004      	add	sp, #16
 800485c:	4770      	bx	lr

0800485e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800485e:	b480      	push	{r7}
 8004860:	b083      	sub	sp, #12
 8004862:	af00      	add	r7, sp, #0
 8004864:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	f043 0201 	orr.w	r2, r3, #1
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004872:	2300      	movs	r3, #0
}
 8004874:	4618      	mov	r0, r3
 8004876:	370c      	adds	r7, #12
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr

08004880 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004880:	b480      	push	{r7}
 8004882:	b083      	sub	sp, #12
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	f023 0201 	bic.w	r2, r3, #1
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004894:	2300      	movs	r3, #0
}
 8004896:	4618      	mov	r0, r3
 8004898:	370c      	adds	r7, #12
 800489a:	46bd      	mov	sp, r7
 800489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a0:	4770      	bx	lr

080048a2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80048a2:	b580      	push	{r7, lr}
 80048a4:	b084      	sub	sp, #16
 80048a6:	af00      	add	r7, sp, #0
 80048a8:	6078      	str	r0, [r7, #4]
 80048aa:	460b      	mov	r3, r1
 80048ac:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80048ae:	2300      	movs	r3, #0
 80048b0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	68db      	ldr	r3, [r3, #12]
 80048b6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80048be:	78fb      	ldrb	r3, [r7, #3]
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d115      	bne.n	80048f0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	68db      	ldr	r3, [r3, #12]
 80048c8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80048d0:	2001      	movs	r0, #1
 80048d2:	f7fc f8ed 	bl	8000ab0 <HAL_Delay>
      ms++;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	3301      	adds	r3, #1
 80048da:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	f000 f936 	bl	8004b4e <USB_GetMode>
 80048e2:	4603      	mov	r3, r0
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d01e      	beq.n	8004926 <USB_SetCurrentMode+0x84>
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2b31      	cmp	r3, #49	; 0x31
 80048ec:	d9f0      	bls.n	80048d0 <USB_SetCurrentMode+0x2e>
 80048ee:	e01a      	b.n	8004926 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80048f0:	78fb      	ldrb	r3, [r7, #3]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d115      	bne.n	8004922 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	68db      	ldr	r3, [r3, #12]
 80048fa:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004902:	2001      	movs	r0, #1
 8004904:	f7fc f8d4 	bl	8000ab0 <HAL_Delay>
      ms++;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	3301      	adds	r3, #1
 800490c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f000 f91d 	bl	8004b4e <USB_GetMode>
 8004914:	4603      	mov	r3, r0
 8004916:	2b00      	cmp	r3, #0
 8004918:	d005      	beq.n	8004926 <USB_SetCurrentMode+0x84>
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2b31      	cmp	r3, #49	; 0x31
 800491e:	d9f0      	bls.n	8004902 <USB_SetCurrentMode+0x60>
 8004920:	e001      	b.n	8004926 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e005      	b.n	8004932 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2b32      	cmp	r3, #50	; 0x32
 800492a:	d101      	bne.n	8004930 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	e000      	b.n	8004932 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004930:	2300      	movs	r3, #0
}
 8004932:	4618      	mov	r0, r3
 8004934:	3710      	adds	r7, #16
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}
	...

0800493c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800493c:	b480      	push	{r7}
 800493e:	b085      	sub	sp, #20
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
 8004944:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004946:	2300      	movs	r3, #0
 8004948:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	3301      	adds	r3, #1
 800494e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	4a13      	ldr	r2, [pc, #76]	; (80049a0 <USB_FlushTxFifo+0x64>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d901      	bls.n	800495c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004958:	2303      	movs	r3, #3
 800495a:	e01b      	b.n	8004994 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	691b      	ldr	r3, [r3, #16]
 8004960:	2b00      	cmp	r3, #0
 8004962:	daf2      	bge.n	800494a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004964:	2300      	movs	r3, #0
 8004966:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	019b      	lsls	r3, r3, #6
 800496c:	f043 0220 	orr.w	r2, r3, #32
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	3301      	adds	r3, #1
 8004978:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	4a08      	ldr	r2, [pc, #32]	; (80049a0 <USB_FlushTxFifo+0x64>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d901      	bls.n	8004986 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004982:	2303      	movs	r3, #3
 8004984:	e006      	b.n	8004994 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	691b      	ldr	r3, [r3, #16]
 800498a:	f003 0320 	and.w	r3, r3, #32
 800498e:	2b20      	cmp	r3, #32
 8004990:	d0f0      	beq.n	8004974 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004992:	2300      	movs	r3, #0
}
 8004994:	4618      	mov	r0, r3
 8004996:	3714      	adds	r7, #20
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr
 80049a0:	00030d40 	.word	0x00030d40

080049a4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b085      	sub	sp, #20
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80049ac:	2300      	movs	r3, #0
 80049ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	3301      	adds	r3, #1
 80049b4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	4a11      	ldr	r2, [pc, #68]	; (8004a00 <USB_FlushRxFifo+0x5c>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d901      	bls.n	80049c2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80049be:	2303      	movs	r3, #3
 80049c0:	e018      	b.n	80049f4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	691b      	ldr	r3, [r3, #16]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	daf2      	bge.n	80049b0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80049ca:	2300      	movs	r3, #0
 80049cc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2210      	movs	r2, #16
 80049d2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	3301      	adds	r3, #1
 80049d8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	4a08      	ldr	r2, [pc, #32]	; (8004a00 <USB_FlushRxFifo+0x5c>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d901      	bls.n	80049e6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80049e2:	2303      	movs	r3, #3
 80049e4:	e006      	b.n	80049f4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	691b      	ldr	r3, [r3, #16]
 80049ea:	f003 0310 	and.w	r3, r3, #16
 80049ee:	2b10      	cmp	r3, #16
 80049f0:	d0f0      	beq.n	80049d4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80049f2:	2300      	movs	r3, #0
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	3714      	adds	r7, #20
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr
 8004a00:	00030d40 	.word	0x00030d40

08004a04 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b089      	sub	sp, #36	; 0x24
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	60f8      	str	r0, [r7, #12]
 8004a0c:	60b9      	str	r1, [r7, #8]
 8004a0e:	4611      	mov	r1, r2
 8004a10:	461a      	mov	r2, r3
 8004a12:	460b      	mov	r3, r1
 8004a14:	71fb      	strb	r3, [r7, #7]
 8004a16:	4613      	mov	r3, r2
 8004a18:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8004a22:	88bb      	ldrh	r3, [r7, #4]
 8004a24:	3303      	adds	r3, #3
 8004a26:	089b      	lsrs	r3, r3, #2
 8004a28:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	61bb      	str	r3, [r7, #24]
 8004a2e:	e018      	b.n	8004a62 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004a30:	79fb      	ldrb	r3, [r7, #7]
 8004a32:	031a      	lsls	r2, r3, #12
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	4413      	add	r3, r2
 8004a38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a3c:	461a      	mov	r2, r3
 8004a3e:	69fb      	ldr	r3, [r7, #28]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	6013      	str	r3, [r2, #0]
    pSrc++;
 8004a44:	69fb      	ldr	r3, [r7, #28]
 8004a46:	3301      	adds	r3, #1
 8004a48:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8004a4a:	69fb      	ldr	r3, [r7, #28]
 8004a4c:	3301      	adds	r3, #1
 8004a4e:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8004a50:	69fb      	ldr	r3, [r7, #28]
 8004a52:	3301      	adds	r3, #1
 8004a54:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8004a56:	69fb      	ldr	r3, [r7, #28]
 8004a58:	3301      	adds	r3, #1
 8004a5a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8004a5c:	69bb      	ldr	r3, [r7, #24]
 8004a5e:	3301      	adds	r3, #1
 8004a60:	61bb      	str	r3, [r7, #24]
 8004a62:	69ba      	ldr	r2, [r7, #24]
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	429a      	cmp	r2, r3
 8004a68:	d3e2      	bcc.n	8004a30 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8004a6a:	2300      	movs	r3, #0
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	3724      	adds	r7, #36	; 0x24
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr

08004a78 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b08b      	sub	sp, #44	; 0x2c
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	60f8      	str	r0, [r7, #12]
 8004a80:	60b9      	str	r1, [r7, #8]
 8004a82:	4613      	mov	r3, r2
 8004a84:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004a8e:	88fb      	ldrh	r3, [r7, #6]
 8004a90:	089b      	lsrs	r3, r3, #2
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004a96:	88fb      	ldrh	r3, [r7, #6]
 8004a98:	f003 0303 	and.w	r3, r3, #3
 8004a9c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	623b      	str	r3, [r7, #32]
 8004aa2:	e014      	b.n	8004ace <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004aa4:	69bb      	ldr	r3, [r7, #24]
 8004aa6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aae:	601a      	str	r2, [r3, #0]
    pDest++;
 8004ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab2:	3301      	adds	r3, #1
 8004ab4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab8:	3301      	adds	r3, #1
 8004aba:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004abe:	3301      	adds	r3, #1
 8004ac0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac4:	3301      	adds	r3, #1
 8004ac6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004ac8:	6a3b      	ldr	r3, [r7, #32]
 8004aca:	3301      	adds	r3, #1
 8004acc:	623b      	str	r3, [r7, #32]
 8004ace:	6a3a      	ldr	r2, [r7, #32]
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	429a      	cmp	r2, r3
 8004ad4:	d3e6      	bcc.n	8004aa4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004ad6:	8bfb      	ldrh	r3, [r7, #30]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d01e      	beq.n	8004b1a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004adc:	2300      	movs	r3, #0
 8004ade:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004ae0:	69bb      	ldr	r3, [r7, #24]
 8004ae2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ae6:	461a      	mov	r2, r3
 8004ae8:	f107 0310 	add.w	r3, r7, #16
 8004aec:	6812      	ldr	r2, [r2, #0]
 8004aee:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004af0:	693a      	ldr	r2, [r7, #16]
 8004af2:	6a3b      	ldr	r3, [r7, #32]
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	00db      	lsls	r3, r3, #3
 8004af8:	fa22 f303 	lsr.w	r3, r2, r3
 8004afc:	b2da      	uxtb	r2, r3
 8004afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b00:	701a      	strb	r2, [r3, #0]
      i++;
 8004b02:	6a3b      	ldr	r3, [r7, #32]
 8004b04:	3301      	adds	r3, #1
 8004b06:	623b      	str	r3, [r7, #32]
      pDest++;
 8004b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0a:	3301      	adds	r3, #1
 8004b0c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004b0e:	8bfb      	ldrh	r3, [r7, #30]
 8004b10:	3b01      	subs	r3, #1
 8004b12:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004b14:	8bfb      	ldrh	r3, [r7, #30]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d1ea      	bne.n	8004af0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	372c      	adds	r7, #44	; 0x2c
 8004b20:	46bd      	mov	sp, r7
 8004b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b26:	4770      	bx	lr

08004b28 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b085      	sub	sp, #20
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	695b      	ldr	r3, [r3, #20]
 8004b34:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	699b      	ldr	r3, [r3, #24]
 8004b3a:	68fa      	ldr	r2, [r7, #12]
 8004b3c:	4013      	ands	r3, r2
 8004b3e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004b40:	68fb      	ldr	r3, [r7, #12]
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3714      	adds	r7, #20
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr

08004b4e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004b4e:	b480      	push	{r7}
 8004b50:	b083      	sub	sp, #12
 8004b52:	af00      	add	r7, sp, #0
 8004b54:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	695b      	ldr	r3, [r3, #20]
 8004b5a:	f003 0301 	and.w	r3, r3, #1
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	370c      	adds	r7, #12
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr
	...

08004b6c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b085      	sub	sp, #20
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004b74:	2300      	movs	r3, #0
 8004b76:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	3301      	adds	r3, #1
 8004b7c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	4a13      	ldr	r2, [pc, #76]	; (8004bd0 <USB_CoreReset+0x64>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d901      	bls.n	8004b8a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004b86:	2303      	movs	r3, #3
 8004b88:	e01b      	b.n	8004bc2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	691b      	ldr	r3, [r3, #16]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	daf2      	bge.n	8004b78 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004b92:	2300      	movs	r3, #0
 8004b94:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	691b      	ldr	r3, [r3, #16]
 8004b9a:	f043 0201 	orr.w	r2, r3, #1
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	3301      	adds	r3, #1
 8004ba6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	4a09      	ldr	r2, [pc, #36]	; (8004bd0 <USB_CoreReset+0x64>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d901      	bls.n	8004bb4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004bb0:	2303      	movs	r3, #3
 8004bb2:	e006      	b.n	8004bc2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	691b      	ldr	r3, [r3, #16]
 8004bb8:	f003 0301 	and.w	r3, r3, #1
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d0f0      	beq.n	8004ba2 <USB_CoreReset+0x36>

  return HAL_OK;
 8004bc0:	2300      	movs	r3, #0
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3714      	adds	r7, #20
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bcc:	4770      	bx	lr
 8004bce:	bf00      	nop
 8004bd0:	00030d40 	.word	0x00030d40

08004bd4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004bd4:	b084      	sub	sp, #16
 8004bd6:	b580      	push	{r7, lr}
 8004bd8:	b086      	sub	sp, #24
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	6078      	str	r0, [r7, #4]
 8004bde:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004be2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004be6:	2300      	movs	r3, #0
 8004be8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004bf4:	461a      	mov	r2, r3
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bfe:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c0a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	639a      	str	r2, [r3, #56]	; 0x38

  /* Set default Max speed support */
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	68fa      	ldr	r2, [r7, #12]
 8004c1c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004c20:	f023 0304 	bic.w	r3, r3, #4
 8004c24:	6013      	str	r3, [r2, #0]

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004c26:	2110      	movs	r1, #16
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f7ff fe87 	bl	800493c <USB_FlushTxFifo>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d001      	beq.n	8004c38 <USB_HostInit+0x64>
  {
    ret = HAL_ERROR;
 8004c34:	2301      	movs	r3, #1
 8004c36:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	f7ff feb3 	bl	80049a4 <USB_FlushRxFifo>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d001      	beq.n	8004c48 <USB_HostInit+0x74>
  {
    ret = HAL_ERROR;
 8004c44:	2301      	movs	r3, #1
 8004c46:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004c48:	2300      	movs	r3, #0
 8004c4a:	613b      	str	r3, [r7, #16]
 8004c4c:	e015      	b.n	8004c7a <USB_HostInit+0xa6>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	015a      	lsls	r2, r3, #5
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	4413      	add	r3, r2
 8004c56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c5a:	461a      	mov	r2, r3
 8004c5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004c60:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	015a      	lsls	r2, r3, #5
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	4413      	add	r3, r2
 8004c6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c6e:	461a      	mov	r2, r3
 8004c70:	2300      	movs	r3, #0
 8004c72:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	3301      	adds	r3, #1
 8004c78:	613b      	str	r3, [r7, #16]
 8004c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c7c:	693a      	ldr	r2, [r7, #16]
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d3e5      	bcc.n	8004c4e <USB_HostInit+0x7a>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2200      	movs	r2, #0
 8004c86:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004c8e:	615a      	str	r2, [r3, #20]

  /* set Rx FIFO size */
  USBx->GRXFSIZ  = 0x80U;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2280      	movs	r2, #128	; 0x80
 8004c94:	625a      	str	r2, [r3, #36]	; 0x24
  USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	4a0c      	ldr	r2, [pc, #48]	; (8004ccc <USB_HostInit+0xf8>)
 8004c9a:	629a      	str	r2, [r3, #40]	; 0x28
  USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	4a0c      	ldr	r2, [pc, #48]	; (8004cd0 <USB_HostInit+0xfc>)
 8004ca0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	699b      	ldr	r3, [r3, #24]
 8004ca8:	f043 0210 	orr.w	r2, r3, #16
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	699a      	ldr	r2, [r3, #24]
 8004cb4:	4b07      	ldr	r3, [pc, #28]	; (8004cd4 <USB_HostInit+0x100>)
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	687a      	ldr	r2, [r7, #4]
 8004cba:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8004cbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3718      	adds	r7, #24
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004cc8:	b004      	add	sp, #16
 8004cca:	4770      	bx	lr
 8004ccc:	00600080 	.word	0x00600080
 8004cd0:	004000e0 	.word	0x004000e0
 8004cd4:	a3200008 	.word	0xa3200008

08004cd8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b085      	sub	sp, #20
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
 8004ce0:	460b      	mov	r3, r1
 8004ce2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	68fa      	ldr	r2, [r7, #12]
 8004cf2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004cf6:	f023 0303 	bic.w	r3, r3, #3
 8004cfa:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	78fb      	ldrb	r3, [r7, #3]
 8004d06:	f003 0303 	and.w	r3, r3, #3
 8004d0a:	68f9      	ldr	r1, [r7, #12]
 8004d0c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004d10:	4313      	orrs	r3, r2
 8004d12:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004d14:	78fb      	ldrb	r3, [r7, #3]
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	d107      	bne.n	8004d2a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d20:	461a      	mov	r2, r3
 8004d22:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004d26:	6053      	str	r3, [r2, #4]
 8004d28:	e009      	b.n	8004d3e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8004d2a:	78fb      	ldrb	r3, [r7, #3]
 8004d2c:	2b02      	cmp	r3, #2
 8004d2e:	d106      	bne.n	8004d3e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d36:	461a      	mov	r2, r3
 8004d38:	f241 7370 	movw	r3, #6000	; 0x1770
 8004d3c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8004d3e:	2300      	movs	r3, #0
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	3714      	adds	r7, #20
 8004d44:	46bd      	mov	sp, r7
 8004d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4a:	4770      	bx	lr

08004d4c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b084      	sub	sp, #16
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004d6c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	68fa      	ldr	r2, [r7, #12]
 8004d72:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004d76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d7a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8004d7c:	2064      	movs	r0, #100	; 0x64
 8004d7e:	f7fb fe97 	bl	8000ab0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	68fa      	ldr	r2, [r7, #12]
 8004d86:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004d8a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d8e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8004d90:	200a      	movs	r0, #10
 8004d92:	f7fb fe8d 	bl	8000ab0 <HAL_Delay>

  return HAL_OK;
 8004d96:	2300      	movs	r3, #0
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3710      	adds	r7, #16
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}

08004da0 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b085      	sub	sp, #20
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	460b      	mov	r3, r1
 8004daa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004db0:	2300      	movs	r3, #0
 8004db2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004dc4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d109      	bne.n	8004de4 <USB_DriveVbus+0x44>
 8004dd0:	78fb      	ldrb	r3, [r7, #3]
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d106      	bne.n	8004de4 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	68fa      	ldr	r2, [r7, #12]
 8004dda:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004dde:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004de2:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004dea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dee:	d109      	bne.n	8004e04 <USB_DriveVbus+0x64>
 8004df0:	78fb      	ldrb	r3, [r7, #3]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d106      	bne.n	8004e04 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	68fa      	ldr	r2, [r7, #12]
 8004dfa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004dfe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e02:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8004e04:	2300      	movs	r3, #0
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	3714      	adds	r7, #20
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr

08004e12 <USB_GetHostSpeed>:
  *          This parameter can be one of these values:
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004e12:	b480      	push	{r7}
 8004e14:	b085      	sub	sp, #20
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	0c5b      	lsrs	r3, r3, #17
 8004e30:	f003 0303 	and.w	r3, r3, #3
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	3714      	adds	r7, #20
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3e:	4770      	bx	lr

08004e40 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b085      	sub	sp, #20
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	b29b      	uxth	r3, r3
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3714      	adds	r7, #20
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e60:	4770      	bx	lr
	...

08004e64 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b088      	sub	sp, #32
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
 8004e6c:	4608      	mov	r0, r1
 8004e6e:	4611      	mov	r1, r2
 8004e70:	461a      	mov	r2, r3
 8004e72:	4603      	mov	r3, r0
 8004e74:	70fb      	strb	r3, [r7, #3]
 8004e76:	460b      	mov	r3, r1
 8004e78:	70bb      	strb	r3, [r7, #2]
 8004e7a:	4613      	mov	r3, r2
 8004e7c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8004e86:	78fb      	ldrb	r3, [r7, #3]
 8004e88:	015a      	lsls	r2, r3, #5
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	4413      	add	r3, r2
 8004e8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e92:	461a      	mov	r2, r3
 8004e94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004e98:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8004e9a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004e9e:	2b03      	cmp	r3, #3
 8004ea0:	d867      	bhi.n	8004f72 <USB_HC_Init+0x10e>
 8004ea2:	a201      	add	r2, pc, #4	; (adr r2, 8004ea8 <USB_HC_Init+0x44>)
 8004ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ea8:	08004eb9 	.word	0x08004eb9
 8004eac:	08004f35 	.word	0x08004f35
 8004eb0:	08004eb9 	.word	0x08004eb9
 8004eb4:	08004ef7 	.word	0x08004ef7
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004eb8:	78fb      	ldrb	r3, [r7, #3]
 8004eba:	015a      	lsls	r2, r3, #5
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	4413      	add	r3, r2
 8004ec0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ec4:	461a      	mov	r2, r3
 8004ec6:	f240 439d 	movw	r3, #1181	; 0x49d
 8004eca:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8004ecc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	da51      	bge.n	8004f78 <USB_HC_Init+0x114>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004ed4:	78fb      	ldrb	r3, [r7, #3]
 8004ed6:	015a      	lsls	r2, r3, #5
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	4413      	add	r3, r2
 8004edc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ee0:	68db      	ldr	r3, [r3, #12]
 8004ee2:	78fa      	ldrb	r2, [r7, #3]
 8004ee4:	0151      	lsls	r1, r2, #5
 8004ee6:	693a      	ldr	r2, [r7, #16]
 8004ee8:	440a      	add	r2, r1
 8004eea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004eee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ef2:	60d3      	str	r3, [r2, #12]
      }
      break;
 8004ef4:	e040      	b.n	8004f78 <USB_HC_Init+0x114>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004ef6:	78fb      	ldrb	r3, [r7, #3]
 8004ef8:	015a      	lsls	r2, r3, #5
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	4413      	add	r3, r2
 8004efe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f02:	461a      	mov	r2, r3
 8004f04:	f240 639d 	movw	r3, #1693	; 0x69d
 8004f08:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004f0a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	da34      	bge.n	8004f7c <USB_HC_Init+0x118>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004f12:	78fb      	ldrb	r3, [r7, #3]
 8004f14:	015a      	lsls	r2, r3, #5
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	4413      	add	r3, r2
 8004f1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f1e:	68db      	ldr	r3, [r3, #12]
 8004f20:	78fa      	ldrb	r2, [r7, #3]
 8004f22:	0151      	lsls	r1, r2, #5
 8004f24:	693a      	ldr	r2, [r7, #16]
 8004f26:	440a      	add	r2, r1
 8004f28:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f30:	60d3      	str	r3, [r2, #12]
      }

      break;
 8004f32:	e023      	b.n	8004f7c <USB_HC_Init+0x118>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004f34:	78fb      	ldrb	r3, [r7, #3]
 8004f36:	015a      	lsls	r2, r3, #5
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	4413      	add	r3, r2
 8004f3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f40:	461a      	mov	r2, r3
 8004f42:	f240 2325 	movw	r3, #549	; 0x225
 8004f46:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004f48:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	da17      	bge.n	8004f80 <USB_HC_Init+0x11c>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8004f50:	78fb      	ldrb	r3, [r7, #3]
 8004f52:	015a      	lsls	r2, r3, #5
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	4413      	add	r3, r2
 8004f58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	78fa      	ldrb	r2, [r7, #3]
 8004f60:	0151      	lsls	r1, r2, #5
 8004f62:	693a      	ldr	r2, [r7, #16]
 8004f64:	440a      	add	r2, r1
 8004f66:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f6a:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8004f6e:	60d3      	str	r3, [r2, #12]
      }
      break;
 8004f70:	e006      	b.n	8004f80 <USB_HC_Init+0x11c>

    default:
      ret = HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	77fb      	strb	r3, [r7, #31]
      break;
 8004f76:	e004      	b.n	8004f82 <USB_HC_Init+0x11e>
      break;
 8004f78:	bf00      	nop
 8004f7a:	e002      	b.n	8004f82 <USB_HC_Init+0x11e>
      break;
 8004f7c:	bf00      	nop
 8004f7e:	e000      	b.n	8004f82 <USB_HC_Init+0x11e>
      break;
 8004f80:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8004f82:	78fb      	ldrb	r3, [r7, #3]
 8004f84:	015a      	lsls	r2, r3, #5
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	4413      	add	r3, r2
 8004f8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f8e:	68db      	ldr	r3, [r3, #12]
 8004f90:	78fa      	ldrb	r2, [r7, #3]
 8004f92:	0151      	lsls	r1, r2, #5
 8004f94:	693a      	ldr	r2, [r7, #16]
 8004f96:	440a      	add	r2, r1
 8004f98:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f9c:	f043 0302 	orr.w	r3, r3, #2
 8004fa0:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004fa8:	699a      	ldr	r2, [r3, #24]
 8004faa:	78fb      	ldrb	r3, [r7, #3]
 8004fac:	f003 030f 	and.w	r3, r3, #15
 8004fb0:	2101      	movs	r1, #1
 8004fb2:	fa01 f303 	lsl.w	r3, r1, r3
 8004fb6:	6939      	ldr	r1, [r7, #16]
 8004fb8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	699b      	ldr	r3, [r3, #24]
 8004fc4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8004fcc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	da03      	bge.n	8004fdc <USB_HC_Init+0x178>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8004fd4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fd8:	61bb      	str	r3, [r7, #24]
 8004fda:	e001      	b.n	8004fe0 <USB_HC_Init+0x17c>
  }
  else
  {
    HCcharEpDir = 0U;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f7ff ff16 	bl	8004e12 <USB_GetHostSpeed>
 8004fe6:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8004fe8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004fec:	2b02      	cmp	r3, #2
 8004fee:	d106      	bne.n	8004ffe <USB_HC_Init+0x19a>
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2b02      	cmp	r3, #2
 8004ff4:	d003      	beq.n	8004ffe <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8004ff6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004ffa:	617b      	str	r3, [r7, #20]
 8004ffc:	e001      	b.n	8005002 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8004ffe:	2300      	movs	r3, #0
 8005000:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005002:	787b      	ldrb	r3, [r7, #1]
 8005004:	059b      	lsls	r3, r3, #22
 8005006:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800500a:	78bb      	ldrb	r3, [r7, #2]
 800500c:	02db      	lsls	r3, r3, #11
 800500e:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005012:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005014:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005018:	049b      	lsls	r3, r3, #18
 800501a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800501e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005020:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005022:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005026:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005028:	69bb      	ldr	r3, [r7, #24]
 800502a:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800502c:	78fb      	ldrb	r3, [r7, #3]
 800502e:	0159      	lsls	r1, r3, #5
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	440b      	add	r3, r1
 8005034:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005038:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800503e:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8005040:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005044:	2b03      	cmp	r3, #3
 8005046:	d003      	beq.n	8005050 <USB_HC_Init+0x1ec>
 8005048:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800504c:	2b01      	cmp	r3, #1
 800504e:	d10f      	bne.n	8005070 <USB_HC_Init+0x20c>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005050:	78fb      	ldrb	r3, [r7, #3]
 8005052:	015a      	lsls	r2, r3, #5
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	4413      	add	r3, r2
 8005058:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	78fa      	ldrb	r2, [r7, #3]
 8005060:	0151      	lsls	r1, r2, #5
 8005062:	693a      	ldr	r2, [r7, #16]
 8005064:	440a      	add	r2, r1
 8005066:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800506a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800506e:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005070:	7ffb      	ldrb	r3, [r7, #31]
}
 8005072:	4618      	mov	r0, r3
 8005074:	3720      	adds	r7, #32
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}
 800507a:	bf00      	nop

0800507c <USB_HC_StartXfer>:
  * @param  USBx  Selected device
  * @param  hc  pointer to host channel structure
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b088      	sub	sp, #32
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
 8005084:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	785b      	ldrb	r3, [r3, #1]
 800508e:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005090:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005094:	827b      	strh	r3, [r7, #18]

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	695b      	ldr	r3, [r3, #20]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d018      	beq.n	80050d0 <USB_HC_StartXfer+0x54>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	695b      	ldr	r3, [r3, #20]
 80050a2:	683a      	ldr	r2, [r7, #0]
 80050a4:	8912      	ldrh	r2, [r2, #8]
 80050a6:	4413      	add	r3, r2
 80050a8:	3b01      	subs	r3, #1
 80050aa:	683a      	ldr	r2, [r7, #0]
 80050ac:	8912      	ldrh	r2, [r2, #8]
 80050ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80050b2:	83fb      	strh	r3, [r7, #30]

    if (num_packets > max_hc_pkt_count)
 80050b4:	8bfa      	ldrh	r2, [r7, #30]
 80050b6:	8a7b      	ldrh	r3, [r7, #18]
 80050b8:	429a      	cmp	r2, r3
 80050ba:	d90b      	bls.n	80050d4 <USB_HC_StartXfer+0x58>
    {
      num_packets = max_hc_pkt_count;
 80050bc:	8a7b      	ldrh	r3, [r7, #18]
 80050be:	83fb      	strh	r3, [r7, #30]
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80050c0:	8bfb      	ldrh	r3, [r7, #30]
 80050c2:	683a      	ldr	r2, [r7, #0]
 80050c4:	8912      	ldrh	r2, [r2, #8]
 80050c6:	fb03 f202 	mul.w	r2, r3, r2
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	611a      	str	r2, [r3, #16]
 80050ce:	e001      	b.n	80050d4 <USB_HC_StartXfer+0x58>
    }
  }
  else
  {
    num_packets = 1U;
 80050d0:	2301      	movs	r3, #1
 80050d2:	83fb      	strh	r3, [r7, #30]

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	78db      	ldrb	r3, [r3, #3]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d007      	beq.n	80050ec <USB_HC_StartXfer+0x70>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80050dc:	8bfb      	ldrh	r3, [r7, #30]
 80050de:	683a      	ldr	r2, [r7, #0]
 80050e0:	8912      	ldrh	r2, [r2, #8]
 80050e2:	fb03 f202 	mul.w	r2, r3, r2
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	611a      	str	r2, [r3, #16]
 80050ea:	e003      	b.n	80050f4 <USB_HC_StartXfer+0x78>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	695a      	ldr	r2, [r3, #20]
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	691b      	ldr	r3, [r3, #16]
 80050f8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80050fc:	8bfb      	ldrh	r3, [r7, #30]
 80050fe:	04d9      	lsls	r1, r3, #19
 8005100:	4b59      	ldr	r3, [pc, #356]	; (8005268 <USB_HC_StartXfer+0x1ec>)
 8005102:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005104:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	7a9b      	ldrb	r3, [r3, #10]
 800510a:	075b      	lsls	r3, r3, #29
 800510c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005110:	6979      	ldr	r1, [r7, #20]
 8005112:	0148      	lsls	r0, r1, #5
 8005114:	69b9      	ldr	r1, [r7, #24]
 8005116:	4401      	add	r1, r0
 8005118:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800511c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800511e:	610b      	str	r3, [r1, #16]

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005120:	69bb      	ldr	r3, [r7, #24]
 8005122:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	f003 0301 	and.w	r3, r3, #1
 800512c:	2b00      	cmp	r3, #0
 800512e:	bf0c      	ite	eq
 8005130:	2301      	moveq	r3, #1
 8005132:	2300      	movne	r3, #0
 8005134:	b2db      	uxtb	r3, r3
 8005136:	747b      	strb	r3, [r7, #17]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	015a      	lsls	r2, r3, #5
 800513c:	69bb      	ldr	r3, [r7, #24]
 800513e:	4413      	add	r3, r2
 8005140:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	697a      	ldr	r2, [r7, #20]
 8005148:	0151      	lsls	r1, r2, #5
 800514a:	69ba      	ldr	r2, [r7, #24]
 800514c:	440a      	add	r2, r1
 800514e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005152:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005156:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	015a      	lsls	r2, r3, #5
 800515c:	69bb      	ldr	r3, [r7, #24]
 800515e:	4413      	add	r3, r2
 8005160:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	7c7b      	ldrb	r3, [r7, #17]
 8005168:	075b      	lsls	r3, r3, #29
 800516a:	6979      	ldr	r1, [r7, #20]
 800516c:	0148      	lsls	r0, r1, #5
 800516e:	69b9      	ldr	r1, [r7, #24]
 8005170:	4401      	add	r1, r0
 8005172:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005176:	4313      	orrs	r3, r2
 8005178:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	015a      	lsls	r2, r3, #5
 800517e:	69bb      	ldr	r3, [r7, #24]
 8005180:	4413      	add	r3, r2
 8005182:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005190:	60bb      	str	r3, [r7, #8]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	78db      	ldrb	r3, [r3, #3]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d004      	beq.n	80051a4 <USB_HC_StartXfer+0x128>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051a0:	60bb      	str	r3, [r7, #8]
 80051a2:	e003      	b.n	80051ac <USB_HC_StartXfer+0x130>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80051aa:	60bb      	str	r3, [r7, #8]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80051b2:	60bb      	str	r3, [r7, #8]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	015a      	lsls	r2, r3, #5
 80051b8:	69bb      	ldr	r3, [r7, #24]
 80051ba:	4413      	add	r3, r2
 80051bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051c0:	461a      	mov	r2, r3
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	6013      	str	r3, [r2, #0]

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	78db      	ldrb	r3, [r3, #3]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d147      	bne.n	800525e <USB_HC_StartXfer+0x1e2>
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	695b      	ldr	r3, [r3, #20]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d043      	beq.n	800525e <USB_HC_StartXfer+0x1e2>
  {
    switch (hc->ep_type)
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	79db      	ldrb	r3, [r3, #7]
 80051da:	2b03      	cmp	r3, #3
 80051dc:	d830      	bhi.n	8005240 <USB_HC_StartXfer+0x1c4>
 80051de:	a201      	add	r2, pc, #4	; (adr r2, 80051e4 <USB_HC_StartXfer+0x168>)
 80051e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051e4:	080051f5 	.word	0x080051f5
 80051e8:	08005219 	.word	0x08005219
 80051ec:	080051f5 	.word	0x080051f5
 80051f0:	08005219 	.word	0x08005219
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	695b      	ldr	r3, [r3, #20]
 80051f8:	3303      	adds	r3, #3
 80051fa:	089b      	lsrs	r3, r3, #2
 80051fc:	81fb      	strh	r3, [r7, #14]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80051fe:	89fa      	ldrh	r2, [r7, #14]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005204:	b29b      	uxth	r3, r3
 8005206:	429a      	cmp	r2, r3
 8005208:	d91c      	bls.n	8005244 <USB_HC_StartXfer+0x1c8>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	699b      	ldr	r3, [r3, #24]
 800520e:	f043 0220 	orr.w	r2, r3, #32
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	619a      	str	r2, [r3, #24]
        }
        break;
 8005216:	e015      	b.n	8005244 <USB_HC_StartXfer+0x1c8>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	695b      	ldr	r3, [r3, #20]
 800521c:	3303      	adds	r3, #3
 800521e:	089b      	lsrs	r3, r3, #2
 8005220:	81fb      	strh	r3, [r7, #14]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005222:	89fa      	ldrh	r2, [r7, #14]
 8005224:	69bb      	ldr	r3, [r7, #24]
 8005226:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800522a:	691b      	ldr	r3, [r3, #16]
 800522c:	b29b      	uxth	r3, r3
 800522e:	429a      	cmp	r2, r3
 8005230:	d90a      	bls.n	8005248 <USB_HC_StartXfer+0x1cc>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	699b      	ldr	r3, [r3, #24]
 8005236:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	619a      	str	r2, [r3, #24]
        }
        break;
 800523e:	e003      	b.n	8005248 <USB_HC_StartXfer+0x1cc>

      default:
        break;
 8005240:	bf00      	nop
 8005242:	e002      	b.n	800524a <USB_HC_StartXfer+0x1ce>
        break;
 8005244:	bf00      	nop
 8005246:	e000      	b.n	800524a <USB_HC_StartXfer+0x1ce>
        break;
 8005248:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len);
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	68d9      	ldr	r1, [r3, #12]
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	785a      	ldrb	r2, [r3, #1]
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	695b      	ldr	r3, [r3, #20]
 8005256:	b29b      	uxth	r3, r3
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	f7ff fbd3 	bl	8004a04 <USB_WritePacket>
  }

  return HAL_OK;
 800525e:	2300      	movs	r3, #0
}
 8005260:	4618      	mov	r0, r3
 8005262:	3720      	adds	r7, #32
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}
 8005268:	1ff80000 	.word	0x1ff80000

0800526c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800526c:	b480      	push	{r7}
 800526e:	b085      	sub	sp, #20
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800527e:	695b      	ldr	r3, [r3, #20]
 8005280:	b29b      	uxth	r3, r3
}
 8005282:	4618      	mov	r0, r3
 8005284:	3714      	adds	r7, #20
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr

0800528e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800528e:	b480      	push	{r7}
 8005290:	b089      	sub	sp, #36	; 0x24
 8005292:	af00      	add	r7, sp, #0
 8005294:	6078      	str	r0, [r7, #4]
 8005296:	460b      	mov	r3, r1
 8005298:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800529e:	78fb      	ldrb	r3, [r7, #3]
 80052a0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80052a2:	2300      	movs	r3, #0
 80052a4:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80052a6:	69bb      	ldr	r3, [r7, #24]
 80052a8:	015a      	lsls	r2, r3, #5
 80052aa:	69fb      	ldr	r3, [r7, #28]
 80052ac:	4413      	add	r3, r2
 80052ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	0c9b      	lsrs	r3, r3, #18
 80052b6:	f003 0303 	and.w	r3, r3, #3
 80052ba:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80052bc:	69bb      	ldr	r3, [r7, #24]
 80052be:	015a      	lsls	r2, r3, #5
 80052c0:	69fb      	ldr	r3, [r7, #28]
 80052c2:	4413      	add	r3, r2
 80052c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	0fdb      	lsrs	r3, r3, #31
 80052cc:	f003 0301 	and.w	r3, r3, #1
 80052d0:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	f003 0320 	and.w	r3, r3, #32
 80052da:	2b20      	cmp	r3, #32
 80052dc:	d104      	bne.n	80052e8 <USB_HC_Halt+0x5a>
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d101      	bne.n	80052e8 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80052e4:	2300      	movs	r3, #0
 80052e6:	e0c8      	b.n	800547a <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d002      	beq.n	80052f4 <USB_HC_Halt+0x66>
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	2b02      	cmp	r3, #2
 80052f2:	d163      	bne.n	80053bc <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80052f4:	69bb      	ldr	r3, [r7, #24]
 80052f6:	015a      	lsls	r2, r3, #5
 80052f8:	69fb      	ldr	r3, [r7, #28]
 80052fa:	4413      	add	r3, r2
 80052fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	69ba      	ldr	r2, [r7, #24]
 8005304:	0151      	lsls	r1, r2, #5
 8005306:	69fa      	ldr	r2, [r7, #28]
 8005308:	440a      	add	r2, r1
 800530a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800530e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005312:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	f003 0320 	and.w	r3, r3, #32
 800531c:	2b00      	cmp	r3, #0
 800531e:	f040 80ab 	bne.w	8005478 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005326:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800532a:	2b00      	cmp	r3, #0
 800532c:	d133      	bne.n	8005396 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800532e:	69bb      	ldr	r3, [r7, #24]
 8005330:	015a      	lsls	r2, r3, #5
 8005332:	69fb      	ldr	r3, [r7, #28]
 8005334:	4413      	add	r3, r2
 8005336:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	69ba      	ldr	r2, [r7, #24]
 800533e:	0151      	lsls	r1, r2, #5
 8005340:	69fa      	ldr	r2, [r7, #28]
 8005342:	440a      	add	r2, r1
 8005344:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005348:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800534c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800534e:	69bb      	ldr	r3, [r7, #24]
 8005350:	015a      	lsls	r2, r3, #5
 8005352:	69fb      	ldr	r3, [r7, #28]
 8005354:	4413      	add	r3, r2
 8005356:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	69ba      	ldr	r2, [r7, #24]
 800535e:	0151      	lsls	r1, r2, #5
 8005360:	69fa      	ldr	r2, [r7, #28]
 8005362:	440a      	add	r2, r1
 8005364:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005368:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800536c:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	3301      	adds	r3, #1
 8005372:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800537a:	d81d      	bhi.n	80053b8 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800537c:	69bb      	ldr	r3, [r7, #24]
 800537e:	015a      	lsls	r2, r3, #5
 8005380:	69fb      	ldr	r3, [r7, #28]
 8005382:	4413      	add	r3, r2
 8005384:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800538e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005392:	d0ec      	beq.n	800536e <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005394:	e070      	b.n	8005478 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005396:	69bb      	ldr	r3, [r7, #24]
 8005398:	015a      	lsls	r2, r3, #5
 800539a:	69fb      	ldr	r3, [r7, #28]
 800539c:	4413      	add	r3, r2
 800539e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	69ba      	ldr	r2, [r7, #24]
 80053a6:	0151      	lsls	r1, r2, #5
 80053a8:	69fa      	ldr	r2, [r7, #28]
 80053aa:	440a      	add	r2, r1
 80053ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80053b4:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80053b6:	e05f      	b.n	8005478 <USB_HC_Halt+0x1ea>
            break;
 80053b8:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80053ba:	e05d      	b.n	8005478 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80053bc:	69bb      	ldr	r3, [r7, #24]
 80053be:	015a      	lsls	r2, r3, #5
 80053c0:	69fb      	ldr	r3, [r7, #28]
 80053c2:	4413      	add	r3, r2
 80053c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	69ba      	ldr	r2, [r7, #24]
 80053cc:	0151      	lsls	r1, r2, #5
 80053ce:	69fa      	ldr	r2, [r7, #28]
 80053d0:	440a      	add	r2, r1
 80053d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053d6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80053da:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80053dc:	69fb      	ldr	r3, [r7, #28]
 80053de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053e2:	691b      	ldr	r3, [r3, #16]
 80053e4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d133      	bne.n	8005454 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80053ec:	69bb      	ldr	r3, [r7, #24]
 80053ee:	015a      	lsls	r2, r3, #5
 80053f0:	69fb      	ldr	r3, [r7, #28]
 80053f2:	4413      	add	r3, r2
 80053f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	69ba      	ldr	r2, [r7, #24]
 80053fc:	0151      	lsls	r1, r2, #5
 80053fe:	69fa      	ldr	r2, [r7, #28]
 8005400:	440a      	add	r2, r1
 8005402:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005406:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800540a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800540c:	69bb      	ldr	r3, [r7, #24]
 800540e:	015a      	lsls	r2, r3, #5
 8005410:	69fb      	ldr	r3, [r7, #28]
 8005412:	4413      	add	r3, r2
 8005414:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	69ba      	ldr	r2, [r7, #24]
 800541c:	0151      	lsls	r1, r2, #5
 800541e:	69fa      	ldr	r2, [r7, #28]
 8005420:	440a      	add	r2, r1
 8005422:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005426:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800542a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	3301      	adds	r3, #1
 8005430:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005438:	d81d      	bhi.n	8005476 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800543a:	69bb      	ldr	r3, [r7, #24]
 800543c:	015a      	lsls	r2, r3, #5
 800543e:	69fb      	ldr	r3, [r7, #28]
 8005440:	4413      	add	r3, r2
 8005442:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800544c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005450:	d0ec      	beq.n	800542c <USB_HC_Halt+0x19e>
 8005452:	e011      	b.n	8005478 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005454:	69bb      	ldr	r3, [r7, #24]
 8005456:	015a      	lsls	r2, r3, #5
 8005458:	69fb      	ldr	r3, [r7, #28]
 800545a:	4413      	add	r3, r2
 800545c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	69ba      	ldr	r2, [r7, #24]
 8005464:	0151      	lsls	r1, r2, #5
 8005466:	69fa      	ldr	r2, [r7, #28]
 8005468:	440a      	add	r2, r1
 800546a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800546e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005472:	6013      	str	r3, [r2, #0]
 8005474:	e000      	b.n	8005478 <USB_HC_Halt+0x1ea>
          break;
 8005476:	bf00      	nop
    }
  }

  return HAL_OK;
 8005478:	2300      	movs	r3, #0
}
 800547a:	4618      	mov	r0, r3
 800547c:	3724      	adds	r7, #36	; 0x24
 800547e:	46bd      	mov	sp, r7
 8005480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005484:	4770      	bx	lr

08005486 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005486:	b580      	push	{r7, lr}
 8005488:	b088      	sub	sp, #32
 800548a:	af00      	add	r7, sp, #0
 800548c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800548e:	2300      	movs	r3, #0
 8005490:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8005496:	2300      	movs	r3, #0
 8005498:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f7ff f9f0 	bl	8004880 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80054a0:	2110      	movs	r1, #16
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f7ff fa4a 	bl	800493c <USB_FlushTxFifo>
 80054a8:	4603      	mov	r3, r0
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d001      	beq.n	80054b2 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f7ff fa76 	bl	80049a4 <USB_FlushRxFifo>
 80054b8:	4603      	mov	r3, r0
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d001      	beq.n	80054c2 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80054c2:	2300      	movs	r3, #0
 80054c4:	61bb      	str	r3, [r7, #24]
 80054c6:	e01f      	b.n	8005508 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80054c8:	69bb      	ldr	r3, [r7, #24]
 80054ca:	015a      	lsls	r2, r3, #5
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	4413      	add	r3, r2
 80054d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80054de:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80054e6:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80054ee:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80054f0:	69bb      	ldr	r3, [r7, #24]
 80054f2:	015a      	lsls	r2, r3, #5
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	4413      	add	r3, r2
 80054f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054fc:	461a      	mov	r2, r3
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005502:	69bb      	ldr	r3, [r7, #24]
 8005504:	3301      	adds	r3, #1
 8005506:	61bb      	str	r3, [r7, #24]
 8005508:	69bb      	ldr	r3, [r7, #24]
 800550a:	2b0f      	cmp	r3, #15
 800550c:	d9dc      	bls.n	80054c8 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800550e:	2300      	movs	r3, #0
 8005510:	61bb      	str	r3, [r7, #24]
 8005512:	e034      	b.n	800557e <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8005514:	69bb      	ldr	r3, [r7, #24]
 8005516:	015a      	lsls	r2, r3, #5
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	4413      	add	r3, r2
 800551c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800552a:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005532:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800553a:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800553c:	69bb      	ldr	r3, [r7, #24]
 800553e:	015a      	lsls	r2, r3, #5
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	4413      	add	r3, r2
 8005544:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005548:	461a      	mov	r2, r3
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	3301      	adds	r3, #1
 8005552:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800555a:	d80c      	bhi.n	8005576 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800555c:	69bb      	ldr	r3, [r7, #24]
 800555e:	015a      	lsls	r2, r3, #5
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	4413      	add	r3, r2
 8005564:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800556e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005572:	d0ec      	beq.n	800554e <USB_StopHost+0xc8>
 8005574:	e000      	b.n	8005578 <USB_StopHost+0xf2>
        break;
 8005576:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005578:	69bb      	ldr	r3, [r7, #24]
 800557a:	3301      	adds	r3, #1
 800557c:	61bb      	str	r3, [r7, #24]
 800557e:	69bb      	ldr	r3, [r7, #24]
 8005580:	2b0f      	cmp	r3, #15
 8005582:	d9c7      	bls.n	8005514 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800558a:	461a      	mov	r2, r3
 800558c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005590:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005598:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f7ff f95f 	bl	800485e <USB_EnableGlobalInt>

  return ret;
 80055a0:	7ffb      	ldrb	r3, [r7, #31]
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	3720      	adds	r7, #32
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}

080055aa <USBH_AUDIO_InterfaceInit>:
  *         The function init the Audio class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80055aa:	b590      	push	{r4, r7, lr}
 80055ac:	b08b      	sub	sp, #44	; 0x2c
 80055ae:	af04      	add	r7, sp, #16
 80055b0:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef out_status, in_status;
  AUDIO_HandleTypeDef *AUDIO_Handle;
  uint8_t  interface, index;
  uint16_t ep_size_out = 0U;
 80055b2:	2300      	movs	r3, #0
 80055b4:	82bb      	strh	r3, [r7, #20]
  uint16_t ep_size_in = 0U;
 80055b6:	2300      	movs	r3, #0
 80055b8:	827b      	strh	r3, [r7, #18]

  interface = USBH_FindInterface(phost, AC_CLASS, USB_SUBCLASS_AUDIOCONTROL, 0x00U);
 80055ba:	2300      	movs	r3, #0
 80055bc:	2201      	movs	r2, #1
 80055be:	2101      	movs	r1, #1
 80055c0:	6878      	ldr	r0, [r7, #4]
 80055c2:	f001 ffa0 	bl	8007506 <USBH_FindInterface>
 80055c6:	4603      	mov	r3, r0
 80055c8:	747b      	strb	r3, [r7, #17]

  if (interface == 0xFFU) /* Not Valid Interface */
 80055ca:	7c7b      	ldrb	r3, [r7, #17]
 80055cc:	2bff      	cmp	r3, #255	; 0xff
 80055ce:	d101      	bne.n	80055d4 <USBH_AUDIO_InterfaceInit+0x2a>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80055d0:	2302      	movs	r3, #2
 80055d2:	e1a5      	b.n	8005920 <USBH_AUDIO_InterfaceInit+0x376>
  }

  phost->pActiveClass->pData = (AUDIO_HandleTypeDef *)USBH_malloc(sizeof(AUDIO_HandleTypeDef));
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f8d3 444c 	ldr.w	r4, [r3, #1100]	; 0x44c
 80055da:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 80055de:	f003 fd99 	bl	8009114 <malloc>
 80055e2:	4603      	mov	r3, r0
 80055e4:	61e3      	str	r3, [r4, #28]
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80055ec:	69db      	ldr	r3, [r3, #28]
 80055ee:	60fb      	str	r3, [r7, #12]

  if (AUDIO_Handle == NULL)
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d101      	bne.n	80055fa <USBH_AUDIO_InterfaceInit+0x50>
  {
    USBH_DbgLog("Cannot allocate memory for AUDIO Handle");
    return USBH_FAIL;
 80055f6:	2302      	movs	r3, #2
 80055f8:	e192      	b.n	8005920 <USBH_AUDIO_InterfaceInit+0x376>
  }

  /* Initialize audio handler */
  USBH_memset(AUDIO_Handle, 0, sizeof(AUDIO_HandleTypeDef));
 80055fa:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 80055fe:	2100      	movs	r1, #0
 8005600:	68f8      	ldr	r0, [r7, #12]
 8005602:	f003 fd97 	bl	8009134 <memset>

  /* 1st Step:  Find Audio Interfaces */
  out_status = USBH_AUDIO_FindAudioStreamingIN(phost);
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f000 fc0f 	bl	8005e2a <USBH_AUDIO_FindAudioStreamingIN>
 800560c:	4603      	mov	r3, r0
 800560e:	72fb      	strb	r3, [r7, #11]

  in_status = USBH_AUDIO_FindAudioStreamingOUT(phost);
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	f000 fcc9 	bl	8005fa8 <USBH_AUDIO_FindAudioStreamingOUT>
 8005616:	4603      	mov	r3, r0
 8005618:	72bb      	strb	r3, [r7, #10]

  if ((out_status == USBH_FAIL) && (in_status == USBH_FAIL))
 800561a:	7afb      	ldrb	r3, [r7, #11]
 800561c:	2b02      	cmp	r3, #2
 800561e:	d104      	bne.n	800562a <USBH_AUDIO_InterfaceInit+0x80>
 8005620:	7abb      	ldrb	r3, [r7, #10]
 8005622:	2b02      	cmp	r3, #2
 8005624:	d101      	bne.n	800562a <USBH_AUDIO_InterfaceInit+0x80>
  {
    USBH_DbgLog("%s class configuration not supported.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005626:	2302      	movs	r3, #2
 8005628:	e17a      	b.n	8005920 <USBH_AUDIO_InterfaceInit+0x376>
  }

  /* 2nd Step:  Select Audio Streaming Interfaces with largest endpoint size : default behavior */
  for (index = 0U; index < AUDIO_MAX_AUDIO_STD_INTERFACE; index ++)
 800562a:	2300      	movs	r3, #0
 800562c:	75fb      	strb	r3, [r7, #23]
 800562e:	e0c6      	b.n	80057be <USBH_AUDIO_InterfaceInit+0x214>
  {
    if (AUDIO_Handle->stream_out[index].valid == 1U)
 8005630:	7dfa      	ldrb	r2, [r7, #23]
 8005632:	68f9      	ldr	r1, [r7, #12]
 8005634:	4613      	mov	r3, r2
 8005636:	009b      	lsls	r3, r3, #2
 8005638:	4413      	add	r3, r2
 800563a:	005b      	lsls	r3, r3, #1
 800563c:	440b      	add	r3, r1
 800563e:	333e      	adds	r3, #62	; 0x3e
 8005640:	781b      	ldrb	r3, [r3, #0]
 8005642:	2b01      	cmp	r3, #1
 8005644:	d156      	bne.n	80056f4 <USBH_AUDIO_InterfaceInit+0x14a>
    {
      if (ep_size_out < AUDIO_Handle->stream_out[index].EpSize)
 8005646:	7dfa      	ldrb	r2, [r7, #23]
 8005648:	68f9      	ldr	r1, [r7, #12]
 800564a:	4613      	mov	r3, r2
 800564c:	009b      	lsls	r3, r3, #2
 800564e:	4413      	add	r3, r2
 8005650:	005b      	lsls	r3, r3, #1
 8005652:	440b      	add	r3, r1
 8005654:	333a      	adds	r3, #58	; 0x3a
 8005656:	881b      	ldrh	r3, [r3, #0]
 8005658:	8aba      	ldrh	r2, [r7, #20]
 800565a:	429a      	cmp	r2, r3
 800565c:	d24a      	bcs.n	80056f4 <USBH_AUDIO_InterfaceInit+0x14a>
      {
        ep_size_out = AUDIO_Handle->stream_out[index].EpSize;
 800565e:	7dfa      	ldrb	r2, [r7, #23]
 8005660:	68f9      	ldr	r1, [r7, #12]
 8005662:	4613      	mov	r3, r2
 8005664:	009b      	lsls	r3, r3, #2
 8005666:	4413      	add	r3, r2
 8005668:	005b      	lsls	r3, r3, #1
 800566a:	440b      	add	r3, r1
 800566c:	333a      	adds	r3, #58	; 0x3a
 800566e:	881b      	ldrh	r3, [r3, #0]
 8005670:	82bb      	strh	r3, [r7, #20]
        AUDIO_Handle->headphone.interface = AUDIO_Handle->stream_out[index].interface;
 8005672:	7dfa      	ldrb	r2, [r7, #23]
 8005674:	68f9      	ldr	r1, [r7, #12]
 8005676:	4613      	mov	r3, r2
 8005678:	009b      	lsls	r3, r3, #2
 800567a:	4413      	add	r3, r2
 800567c:	005b      	lsls	r3, r3, #1
 800567e:	440b      	add	r3, r1
 8005680:	333d      	adds	r3, #61	; 0x3d
 8005682:	781a      	ldrb	r2, [r3, #0]
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
        AUDIO_Handle->headphone.AltSettings = AUDIO_Handle->stream_out[index].AltSettings;
 800568a:	7dfa      	ldrb	r2, [r7, #23]
 800568c:	68f9      	ldr	r1, [r7, #12]
 800568e:	4613      	mov	r3, r2
 8005690:	009b      	lsls	r3, r3, #2
 8005692:	4413      	add	r3, r2
 8005694:	005b      	lsls	r3, r3, #1
 8005696:	440b      	add	r3, r1
 8005698:	333c      	adds	r3, #60	; 0x3c
 800569a:	781a      	ldrb	r2, [r3, #0]
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f883 20f9 	strb.w	r2, [r3, #249]	; 0xf9
        AUDIO_Handle->headphone.Ep = AUDIO_Handle->stream_out[index].Ep;
 80056a2:	7dfa      	ldrb	r2, [r7, #23]
 80056a4:	68f9      	ldr	r1, [r7, #12]
 80056a6:	4613      	mov	r3, r2
 80056a8:	009b      	lsls	r3, r3, #2
 80056aa:	4413      	add	r3, r2
 80056ac:	005b      	lsls	r3, r3, #1
 80056ae:	440b      	add	r3, r1
 80056b0:	3338      	adds	r3, #56	; 0x38
 80056b2:	781a      	ldrb	r2, [r3, #0]
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
        AUDIO_Handle->headphone.EpSize = AUDIO_Handle->stream_out[index].EpSize;
 80056ba:	7dfa      	ldrb	r2, [r7, #23]
 80056bc:	68f9      	ldr	r1, [r7, #12]
 80056be:	4613      	mov	r3, r2
 80056c0:	009b      	lsls	r3, r3, #2
 80056c2:	4413      	add	r3, r2
 80056c4:	005b      	lsls	r3, r3, #1
 80056c6:	440b      	add	r3, r1
 80056c8:	333a      	adds	r3, #58	; 0x3a
 80056ca:	881a      	ldrh	r2, [r3, #0]
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f8a3 20f6 	strh.w	r2, [r3, #246]	; 0xf6
        AUDIO_Handle->headphone.Poll = (uint8_t)AUDIO_Handle->stream_out[index].Poll;
 80056d2:	7dfa      	ldrb	r2, [r7, #23]
 80056d4:	68f9      	ldr	r1, [r7, #12]
 80056d6:	4613      	mov	r3, r2
 80056d8:	009b      	lsls	r3, r3, #2
 80056da:	4413      	add	r3, r2
 80056dc:	005b      	lsls	r3, r3, #1
 80056de:	440b      	add	r3, r1
 80056e0:	3340      	adds	r3, #64	; 0x40
 80056e2:	881b      	ldrh	r3, [r3, #0]
 80056e4:	b2da      	uxtb	r2, r3
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
        AUDIO_Handle->headphone.supported = 1U;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2201      	movs	r2, #1
 80056f0:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
      }
    }

    if (AUDIO_Handle->stream_in[index].valid == 1U)
 80056f4:	7dfa      	ldrb	r2, [r7, #23]
 80056f6:	68f9      	ldr	r1, [r7, #12]
 80056f8:	4613      	mov	r3, r2
 80056fa:	009b      	lsls	r3, r3, #2
 80056fc:	4413      	add	r3, r2
 80056fe:	005b      	lsls	r3, r3, #1
 8005700:	440b      	add	r3, r1
 8005702:	330c      	adds	r3, #12
 8005704:	781b      	ldrb	r3, [r3, #0]
 8005706:	2b01      	cmp	r3, #1
 8005708:	d156      	bne.n	80057b8 <USBH_AUDIO_InterfaceInit+0x20e>
    {
      if (ep_size_in < AUDIO_Handle->stream_in[index].EpSize)
 800570a:	7dfa      	ldrb	r2, [r7, #23]
 800570c:	68f9      	ldr	r1, [r7, #12]
 800570e:	4613      	mov	r3, r2
 8005710:	009b      	lsls	r3, r3, #2
 8005712:	4413      	add	r3, r2
 8005714:	005b      	lsls	r3, r3, #1
 8005716:	440b      	add	r3, r1
 8005718:	3308      	adds	r3, #8
 800571a:	881b      	ldrh	r3, [r3, #0]
 800571c:	8a7a      	ldrh	r2, [r7, #18]
 800571e:	429a      	cmp	r2, r3
 8005720:	d24a      	bcs.n	80057b8 <USBH_AUDIO_InterfaceInit+0x20e>
      {
        ep_size_in = AUDIO_Handle->stream_in[index].EpSize;
 8005722:	7dfa      	ldrb	r2, [r7, #23]
 8005724:	68f9      	ldr	r1, [r7, #12]
 8005726:	4613      	mov	r3, r2
 8005728:	009b      	lsls	r3, r3, #2
 800572a:	4413      	add	r3, r2
 800572c:	005b      	lsls	r3, r3, #1
 800572e:	440b      	add	r3, r1
 8005730:	3308      	adds	r3, #8
 8005732:	881b      	ldrh	r3, [r3, #0]
 8005734:	827b      	strh	r3, [r7, #18]
        AUDIO_Handle->microphone.interface = AUDIO_Handle->stream_in[index].interface;
 8005736:	7dfa      	ldrb	r2, [r7, #23]
 8005738:	68f9      	ldr	r1, [r7, #12]
 800573a:	4613      	mov	r3, r2
 800573c:	009b      	lsls	r3, r3, #2
 800573e:	4413      	add	r3, r2
 8005740:	005b      	lsls	r3, r3, #1
 8005742:	440b      	add	r3, r1
 8005744:	330b      	adds	r3, #11
 8005746:	781a      	ldrb	r2, [r3, #0]
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
        AUDIO_Handle->microphone.AltSettings = AUDIO_Handle->stream_in[index].AltSettings;
 800574e:	7dfa      	ldrb	r2, [r7, #23]
 8005750:	68f9      	ldr	r1, [r7, #12]
 8005752:	4613      	mov	r3, r2
 8005754:	009b      	lsls	r3, r3, #2
 8005756:	4413      	add	r3, r2
 8005758:	005b      	lsls	r3, r3, #1
 800575a:	440b      	add	r3, r1
 800575c:	330a      	adds	r3, #10
 800575e:	781a      	ldrb	r2, [r3, #0]
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141
        AUDIO_Handle->microphone.Ep = AUDIO_Handle->stream_in[index].Ep;
 8005766:	7dfa      	ldrb	r2, [r7, #23]
 8005768:	68f9      	ldr	r1, [r7, #12]
 800576a:	4613      	mov	r3, r2
 800576c:	009b      	lsls	r3, r3, #2
 800576e:	4413      	add	r3, r2
 8005770:	005b      	lsls	r3, r3, #1
 8005772:	440b      	add	r3, r1
 8005774:	3306      	adds	r3, #6
 8005776:	781a      	ldrb	r2, [r3, #0]
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
        AUDIO_Handle->microphone.EpSize = AUDIO_Handle->stream_in[index].EpSize;
 800577e:	7dfa      	ldrb	r2, [r7, #23]
 8005780:	68f9      	ldr	r1, [r7, #12]
 8005782:	4613      	mov	r3, r2
 8005784:	009b      	lsls	r3, r3, #2
 8005786:	4413      	add	r3, r2
 8005788:	005b      	lsls	r3, r3, #1
 800578a:	440b      	add	r3, r1
 800578c:	3308      	adds	r3, #8
 800578e:	881a      	ldrh	r2, [r3, #0]
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	f8a3 213e 	strh.w	r2, [r3, #318]	; 0x13e
        AUDIO_Handle->microphone.Poll = (uint8_t)AUDIO_Handle->stream_out[index].Poll;
 8005796:	7dfa      	ldrb	r2, [r7, #23]
 8005798:	68f9      	ldr	r1, [r7, #12]
 800579a:	4613      	mov	r3, r2
 800579c:	009b      	lsls	r3, r3, #2
 800579e:	4413      	add	r3, r2
 80057a0:	005b      	lsls	r3, r3, #1
 80057a2:	440b      	add	r3, r1
 80057a4:	3340      	adds	r3, #64	; 0x40
 80057a6:	881b      	ldrh	r3, [r3, #0]
 80057a8:	b2da      	uxtb	r2, r3
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
        AUDIO_Handle->microphone.supported = 1U;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2201      	movs	r2, #1
 80057b4:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
  for (index = 0U; index < AUDIO_MAX_AUDIO_STD_INTERFACE; index ++)
 80057b8:	7dfb      	ldrb	r3, [r7, #23]
 80057ba:	3301      	adds	r3, #1
 80057bc:	75fb      	strb	r3, [r7, #23]
 80057be:	7dfb      	ldrb	r3, [r7, #23]
 80057c0:	2b04      	cmp	r3, #4
 80057c2:	f67f af35 	bls.w	8005630 <USBH_AUDIO_InterfaceInit+0x86>
      }
    }
  }

  if (USBH_AUDIO_FindHIDControl(phost) == USBH_OK)
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f000 fcad 	bl	8006126 <USBH_AUDIO_FindHIDControl>
 80057cc:	4603      	mov	r3, r0
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d103      	bne.n	80057da <USBH_AUDIO_InterfaceInit+0x230>
  {
    AUDIO_Handle->control.supported = 1U;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2201      	movs	r2, #1
 80057d6:	f883 2189 	strb.w	r2, [r3, #393]	; 0x189
  }

  /* 3rd Step:  Find and Parse Audio interfaces */
  USBH_AUDIO_ParseCSDescriptors(phost);
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f000 fd25 	bl	800622a <USBH_AUDIO_ParseCSDescriptors>


  /* 4th Step:  Open the Audio streaming pipes*/
  if (AUDIO_Handle->headphone.supported == 1U)
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 80057e6:	2b01      	cmp	r3, #1
 80057e8:	d12e      	bne.n	8005848 <USBH_AUDIO_InterfaceInit+0x29e>
  {
    USBH_AUDIO_BuildHeadphonePath(phost);
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f000 ff68 	bl	80066c0 <USBH_AUDIO_BuildHeadphonePath>

    AUDIO_Handle->headphone.Pipe = USBH_AllocPipe(phost, AUDIO_Handle->headphone.Ep);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 80057f6:	4619      	mov	r1, r3
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	f003 f8d5 	bl	80089a8 <USBH_AllocPipe>
 80057fe:	4603      	mov	r3, r0
 8005800:	461a      	mov	r2, r3
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	f883 20fb 	strb.w	r2, [r3, #251]	; 0xfb

    /* Open pipe for IN endpoint */
    USBH_OpenPipe(phost,
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	f893 10fb 	ldrb.w	r1, [r3, #251]	; 0xfb
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	f893 00f4 	ldrb.w	r0, [r3, #244]	; 0xf4
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005820:	68fa      	ldr	r2, [r7, #12]
 8005822:	f8b2 20f6 	ldrh.w	r2, [r2, #246]	; 0xf6
 8005826:	9202      	str	r2, [sp, #8]
 8005828:	2201      	movs	r2, #1
 800582a:	9201      	str	r2, [sp, #4]
 800582c:	9300      	str	r3, [sp, #0]
 800582e:	4623      	mov	r3, r4
 8005830:	4602      	mov	r2, r0
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f003 f889 	bl	800894a <USBH_OpenPipe>
                  phost->device.address,
                  phost->device.speed,
                  USB_EP_TYPE_ISOC,
                  AUDIO_Handle->headphone.EpSize);

    USBH_LL_SetToggle(phost,  AUDIO_Handle->headphone.Pipe, 0U);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 800583e:	2200      	movs	r2, #0
 8005840:	4619      	mov	r1, r3
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f003 fbb9 	bl	8008fba <USBH_LL_SetToggle>
  }

  if (AUDIO_Handle->microphone.supported == 1U)
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	f893 3142 	ldrb.w	r3, [r3, #322]	; 0x142
 800584e:	2b01      	cmp	r3, #1
 8005850:	d12e      	bne.n	80058b0 <USBH_AUDIO_InterfaceInit+0x306>
  {
    USBH_AUDIO_BuildMicrophonePath(phost);
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f000 feac 	bl	80065b0 <USBH_AUDIO_BuildMicrophonePath>
    AUDIO_Handle->microphone.Pipe = USBH_AllocPipe(phost, AUDIO_Handle->microphone.Ep);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 800585e:	4619      	mov	r1, r3
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	f003 f8a1 	bl	80089a8 <USBH_AllocPipe>
 8005866:	4603      	mov	r3, r0
 8005868:	461a      	mov	r2, r3
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	f883 2143 	strb.w	r2, [r3, #323]	; 0x143

    /* Open pipe for IN endpoint */
    USBH_OpenPipe(phost,
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	f893 1143 	ldrb.w	r1, [r3, #323]	; 0x143
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	f893 013c 	ldrb.w	r0, [r3, #316]	; 0x13c
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005888:	68fa      	ldr	r2, [r7, #12]
 800588a:	f8b2 213e 	ldrh.w	r2, [r2, #318]	; 0x13e
 800588e:	9202      	str	r2, [sp, #8]
 8005890:	2201      	movs	r2, #1
 8005892:	9201      	str	r2, [sp, #4]
 8005894:	9300      	str	r3, [sp, #0]
 8005896:	4623      	mov	r3, r4
 8005898:	4602      	mov	r2, r0
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f003 f855 	bl	800894a <USBH_OpenPipe>
                  phost->device.address,
                  phost->device.speed,
                  USB_EP_TYPE_ISOC,
                  AUDIO_Handle->microphone.EpSize);

    USBH_LL_SetToggle(phost,  AUDIO_Handle->microphone.Pipe, 0U);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f893 3143 	ldrb.w	r3, [r3, #323]	; 0x143
 80058a6:	2200      	movs	r2, #0
 80058a8:	4619      	mov	r1, r3
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f003 fb85 	bl	8008fba <USBH_LL_SetToggle>
  }

  if (AUDIO_Handle->control.supported == 1U)
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f893 3189 	ldrb.w	r3, [r3, #393]	; 0x189
 80058b6:	2b01      	cmp	r3, #1
 80058b8:	d12b      	bne.n	8005912 <USBH_AUDIO_InterfaceInit+0x368>
  {
    AUDIO_Handle->control.Pipe  = USBH_AllocPipe(phost, AUDIO_Handle->control.Ep);
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	f893 3184 	ldrb.w	r3, [r3, #388]	; 0x184
 80058c0:	4619      	mov	r1, r3
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f003 f870 	bl	80089a8 <USBH_AllocPipe>
 80058c8:	4603      	mov	r3, r0
 80058ca:	461a      	mov	r2, r3
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f883 218a 	strb.w	r2, [r3, #394]	; 0x18a

    /* Open pipe for IN endpoint */
    USBH_OpenPipe(phost,
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	f893 118a 	ldrb.w	r1, [r3, #394]	; 0x18a
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f893 0184 	ldrb.w	r0, [r3, #388]	; 0x184
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80058ea:	68fa      	ldr	r2, [r7, #12]
 80058ec:	f8b2 2186 	ldrh.w	r2, [r2, #390]	; 0x186
 80058f0:	9202      	str	r2, [sp, #8]
 80058f2:	2203      	movs	r2, #3
 80058f4:	9201      	str	r2, [sp, #4]
 80058f6:	9300      	str	r3, [sp, #0]
 80058f8:	4623      	mov	r3, r4
 80058fa:	4602      	mov	r2, r0
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f003 f824 	bl	800894a <USBH_OpenPipe>
                  phost->device.address,
                  phost->device.speed,
                  USB_EP_TYPE_INTR,
                  AUDIO_Handle->control.EpSize);

    USBH_LL_SetToggle(phost,  AUDIO_Handle->control.Pipe, 0U);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 8005908:	2200      	movs	r2, #0
 800590a:	4619      	mov	r1, r3
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f003 fb54 	bl	8008fba <USBH_LL_SetToggle>

  }

  AUDIO_Handle->req_state = AUDIO_REQ_INIT;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2201      	movs	r2, #1
 8005916:	701a      	strb	r2, [r3, #0]
  AUDIO_Handle->control_state = AUDIO_CONTROL_INIT;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2201      	movs	r2, #1
 800591c:	70da      	strb	r2, [r3, #3]

  return USBH_OK;
 800591e:	2300      	movs	r3, #0
}
 8005920:	4618      	mov	r0, r3
 8005922:	371c      	adds	r7, #28
 8005924:	46bd      	mov	sp, r7
 8005926:	bd90      	pop	{r4, r7, pc}

08005928 <USBH_AUDIO_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the Audio class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b084      	sub	sp, #16
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8005936:	69db      	ldr	r3, [r3, #28]
 8005938:	60fb      	str	r3, [r7, #12]

  if (AUDIO_Handle->microphone.Pipe != 0x00U)
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	f893 3143 	ldrb.w	r3, [r3, #323]	; 0x143
 8005940:	2b00      	cmp	r3, #0
 8005942:	d011      	beq.n	8005968 <USBH_AUDIO_InterfaceDeInit+0x40>
  {
    USBH_ClosePipe(phost, AUDIO_Handle->microphone.Pipe);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f893 3143 	ldrb.w	r3, [r3, #323]	; 0x143
 800594a:	4619      	mov	r1, r3
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f003 f81b 	bl	8008988 <USBH_ClosePipe>
    USBH_FreePipe(phost, AUDIO_Handle->microphone.Pipe);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	f893 3143 	ldrb.w	r3, [r3, #323]	; 0x143
 8005958:	4619      	mov	r1, r3
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f003 f846 	bl	80089ec <USBH_FreePipe>
    AUDIO_Handle->microphone.Pipe = 0U;     /* Reset the pipe as Free */
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2200      	movs	r2, #0
 8005964:	f883 2143 	strb.w	r2, [r3, #323]	; 0x143
  }

  if (AUDIO_Handle->headphone.Pipe != 0x00U)
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 800596e:	2b00      	cmp	r3, #0
 8005970:	d011      	beq.n	8005996 <USBH_AUDIO_InterfaceDeInit+0x6e>
  {
    USBH_ClosePipe(phost,  AUDIO_Handle->headphone.Pipe);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8005978:	4619      	mov	r1, r3
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f003 f804 	bl	8008988 <USBH_ClosePipe>
    USBH_FreePipe(phost,  AUDIO_Handle->headphone.Pipe);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8005986:	4619      	mov	r1, r3
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f003 f82f 	bl	80089ec <USBH_FreePipe>
    AUDIO_Handle->headphone.Pipe = 0U;     /* Reset the pipe as Free */
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2200      	movs	r2, #0
 8005992:	f883 20fb 	strb.w	r2, [r3, #251]	; 0xfb
  }

  if (AUDIO_Handle->control.Pipe != 0x00U)
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 800599c:	2b00      	cmp	r3, #0
 800599e:	d011      	beq.n	80059c4 <USBH_AUDIO_InterfaceDeInit+0x9c>
  {
    USBH_ClosePipe(phost,  AUDIO_Handle->control.Pipe);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 80059a6:	4619      	mov	r1, r3
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	f002 ffed 	bl	8008988 <USBH_ClosePipe>
    USBH_FreePipe(phost,  AUDIO_Handle->control.Pipe);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 80059b4:	4619      	mov	r1, r3
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f003 f818 	bl	80089ec <USBH_FreePipe>
    AUDIO_Handle->control.Pipe = 0U;     /* Reset the pipe as Free */
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2200      	movs	r2, #0
 80059c0:	f883 218a 	strb.w	r2, [r3, #394]	; 0x18a
  }

  if (phost->pActiveClass->pData)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80059ca:	69db      	ldr	r3, [r3, #28]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d00b      	beq.n	80059e8 <USBH_AUDIO_InterfaceDeInit+0xc0>
  {
    USBH_free(phost->pActiveClass->pData);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80059d6:	69db      	ldr	r3, [r3, #28]
 80059d8:	4618      	mov	r0, r3
 80059da:	f003 fba3 	bl	8009124 <free>
    phost->pActiveClass->pData = 0U;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80059e4:	2200      	movs	r2, #0
 80059e6:	61da      	str	r2, [r3, #28]
  }
  return USBH_OK ;
 80059e8:	2300      	movs	r3, #0
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3710      	adds	r7, #16
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}
	...

080059f4 <USBH_AUDIO_ClassRequest>:
  *         for Audio class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_ClassRequest(USBH_HandleTypeDef *phost)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b086      	sub	sp, #24
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8005a02:	69db      	ldr	r3, [r3, #28]
 8005a04:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005a06:	2301      	movs	r3, #1
 8005a08:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef req_status = USBH_BUSY;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	73fb      	strb	r3, [r7, #15]

  /* Switch AUDIO REQ state machine */
  switch (AUDIO_Handle->req_state)
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	781b      	ldrb	r3, [r3, #0]
 8005a12:	3b01      	subs	r3, #1
 8005a14:	2b06      	cmp	r3, #6
 8005a16:	f200 80be 	bhi.w	8005b96 <USBH_AUDIO_ClassRequest+0x1a2>
 8005a1a:	a201      	add	r2, pc, #4	; (adr r2, 8005a20 <USBH_AUDIO_ClassRequest+0x2c>)
 8005a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a20:	08005a3d 	.word	0x08005a3d
 8005a24:	08005b7f 	.word	0x08005b7f
 8005a28:	08005a3d 	.word	0x08005a3d
 8005a2c:	08005a7f 	.word	0x08005a7f
 8005a30:	08005af7 	.word	0x08005af7
 8005a34:	08005b3b 	.word	0x08005b3b
 8005a38:	08005ae3 	.word	0x08005ae3
  {
  case AUDIO_REQ_INIT:
  case AUDIO_REQ_SET_DEFAULT_IN_INTERFACE:
    if (AUDIO_Handle->microphone.supported == 1U)
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	f893 3142 	ldrb.w	r3, [r3, #322]	; 0x142
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	d117      	bne.n	8005a76 <USBH_AUDIO_ClassRequest+0x82>
    {
      req_status = USBH_SetInterface(phost,
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	4619      	mov	r1, r3
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f002 fb2a 	bl	80080aa <USBH_SetInterface>
 8005a56:	4603      	mov	r3, r0
 8005a58:	73fb      	strb	r3, [r7, #15]
                                     AUDIO_Handle->microphone.interface,
                                     0U);

      if (req_status == USBH_OK)
 8005a5a:	7bfb      	ldrb	r3, [r7, #15]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d103      	bne.n	8005a68 <USBH_AUDIO_ClassRequest+0x74>
      {
        AUDIO_Handle->req_state = AUDIO_REQ_SET_DEFAULT_OUT_INTERFACE;
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	2204      	movs	r2, #4
 8005a64:	701a      	strb	r2, [r3, #0]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8005a66:	e098      	b.n	8005b9a <USBH_AUDIO_ClassRequest+0x1a6>
      else if (req_status == USBH_NOT_SUPPORTED)
 8005a68:	7bfb      	ldrb	r3, [r7, #15]
 8005a6a:	2b03      	cmp	r3, #3
 8005a6c:	f040 8095 	bne.w	8005b9a <USBH_AUDIO_ClassRequest+0x1a6>
        status = USBH_FAIL;
 8005a70:	2302      	movs	r3, #2
 8005a72:	75fb      	strb	r3, [r7, #23]
    break;
 8005a74:	e091      	b.n	8005b9a <USBH_AUDIO_ClassRequest+0x1a6>
      AUDIO_Handle->req_state = AUDIO_REQ_SET_DEFAULT_OUT_INTERFACE;
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	2204      	movs	r2, #4
 8005a7a:	701a      	strb	r2, [r3, #0]
    break;
 8005a7c:	e08d      	b.n	8005b9a <USBH_AUDIO_ClassRequest+0x1a6>

  case AUDIO_REQ_SET_DEFAULT_OUT_INTERFACE:
    if (AUDIO_Handle->headphone.supported == 1U)
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	d125      	bne.n	8005ad4 <USBH_AUDIO_ClassRequest+0xe0>
    {
      req_status = USBH_SetInterface(phost,
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
 8005a8e:	2200      	movs	r2, #0
 8005a90:	4619      	mov	r1, r3
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f002 fb09 	bl	80080aa <USBH_SetInterface>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	73fb      	strb	r3, [r7, #15]
                                     AUDIO_Handle->headphone.interface,
                                     0U);

      if (req_status == USBH_OK)
 8005a9c:	7bfb      	ldrb	r3, [r7, #15]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d112      	bne.n	8005ac8 <USBH_AUDIO_ClassRequest+0xd4>
      {
        AUDIO_Handle->req_state = AUDIO_REQ_CS_REQUESTS;
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	2207      	movs	r2, #7
 8005aa6:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_VOLUME;
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	2206      	movs	r2, #6
 8005aac:	705a      	strb	r2, [r3, #1]

        AUDIO_Handle->temp_feature  = AUDIO_Handle->headphone.asociated_feature;
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
        AUDIO_Handle->temp_channels = AUDIO_Handle->headphone.asociated_channels;
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	f893 2109 	ldrb.w	r2, [r3, #265]	; 0x109
 8005ac0:	693b      	ldr	r3, [r7, #16]
 8005ac2:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8005ac6:	e06a      	b.n	8005b9e <USBH_AUDIO_ClassRequest+0x1aa>
      else if (req_status == USBH_NOT_SUPPORTED)
 8005ac8:	7bfb      	ldrb	r3, [r7, #15]
 8005aca:	2b03      	cmp	r3, #3
 8005acc:	d167      	bne.n	8005b9e <USBH_AUDIO_ClassRequest+0x1aa>
        status = USBH_FAIL;
 8005ace:	2302      	movs	r3, #2
 8005ad0:	75fb      	strb	r3, [r7, #23]
    break;
 8005ad2:	e064      	b.n	8005b9e <USBH_AUDIO_ClassRequest+0x1aa>
      AUDIO_Handle->req_state = AUDIO_REQ_CS_REQUESTS;
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	2207      	movs	r2, #7
 8005ad8:	701a      	strb	r2, [r3, #0]
      AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_VOLUME;
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	2206      	movs	r2, #6
 8005ade:	705a      	strb	r2, [r3, #1]
    break;
 8005ae0:	e05d      	b.n	8005b9e <USBH_AUDIO_ClassRequest+0x1aa>

  case AUDIO_REQ_CS_REQUESTS:
    if (USBH_AUDIO_HandleCSRequest(phost) == USBH_OK)
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f000 f938 	bl	8005d58 <USBH_AUDIO_HandleCSRequest>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d159      	bne.n	8005ba2 <USBH_AUDIO_ClassRequest+0x1ae>
    {
      AUDIO_Handle->req_state = AUDIO_REQ_SET_IN_INTERFACE;
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	2205      	movs	r2, #5
 8005af2:	701a      	strb	r2, [r3, #0]
    }
    break;
 8005af4:	e055      	b.n	8005ba2 <USBH_AUDIO_ClassRequest+0x1ae>

  case AUDIO_REQ_SET_IN_INTERFACE:
    if (AUDIO_Handle->microphone.supported == 1U)
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	f893 3142 	ldrb.w	r3, [r3, #322]	; 0x142
 8005afc:	2b01      	cmp	r3, #1
 8005afe:	d118      	bne.n	8005b32 <USBH_AUDIO_ClassRequest+0x13e>
    {
      req_status = USBH_SetInterface(phost,
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	f893 1140 	ldrb.w	r1, [r3, #320]	; 0x140
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	f893 3141 	ldrb.w	r3, [r3, #321]	; 0x141
 8005b0c:	461a      	mov	r2, r3
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f002 facb 	bl	80080aa <USBH_SetInterface>
 8005b14:	4603      	mov	r3, r0
 8005b16:	73fb      	strb	r3, [r7, #15]
                                     AUDIO_Handle->microphone.interface,
                                     AUDIO_Handle->microphone.AltSettings);

      if (req_status == USBH_OK)
 8005b18:	7bfb      	ldrb	r3, [r7, #15]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d103      	bne.n	8005b26 <USBH_AUDIO_ClassRequest+0x132>
      {
        AUDIO_Handle->req_state = AUDIO_REQ_SET_OUT_INTERFACE;
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	2206      	movs	r2, #6
 8005b22:	701a      	strb	r2, [r3, #0]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8005b24:	e03f      	b.n	8005ba6 <USBH_AUDIO_ClassRequest+0x1b2>
      else if (req_status == USBH_NOT_SUPPORTED)
 8005b26:	7bfb      	ldrb	r3, [r7, #15]
 8005b28:	2b03      	cmp	r3, #3
 8005b2a:	d13c      	bne.n	8005ba6 <USBH_AUDIO_ClassRequest+0x1b2>
        status = USBH_FAIL;
 8005b2c:	2302      	movs	r3, #2
 8005b2e:	75fb      	strb	r3, [r7, #23]
    break;
 8005b30:	e039      	b.n	8005ba6 <USBH_AUDIO_ClassRequest+0x1b2>
      AUDIO_Handle->req_state = AUDIO_REQ_SET_OUT_INTERFACE;
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	2206      	movs	r2, #6
 8005b36:	701a      	strb	r2, [r3, #0]
    break;
 8005b38:	e035      	b.n	8005ba6 <USBH_AUDIO_ClassRequest+0x1b2>
  case AUDIO_REQ_SET_OUT_INTERFACE:
    if (AUDIO_Handle->headphone.supported == 1U)
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d118      	bne.n	8005b76 <USBH_AUDIO_ClassRequest+0x182>
    {
      req_status = USBH_SetInterface(phost,
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	f893 10f8 	ldrb.w	r1, [r3, #248]	; 0xf8
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	f893 30f9 	ldrb.w	r3, [r3, #249]	; 0xf9
 8005b50:	461a      	mov	r2, r3
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f002 faa9 	bl	80080aa <USBH_SetInterface>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	73fb      	strb	r3, [r7, #15]
                                     AUDIO_Handle->headphone.interface,
                                     AUDIO_Handle->headphone.AltSettings);

      if (req_status == USBH_OK)
 8005b5c:	7bfb      	ldrb	r3, [r7, #15]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d103      	bne.n	8005b6a <USBH_AUDIO_ClassRequest+0x176>
      {
        AUDIO_Handle->req_state = AUDIO_REQ_IDLE;
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	2202      	movs	r2, #2
 8005b66:	701a      	strb	r2, [r3, #0]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8005b68:	e01f      	b.n	8005baa <USBH_AUDIO_ClassRequest+0x1b6>
      else if (req_status == USBH_NOT_SUPPORTED)
 8005b6a:	7bfb      	ldrb	r3, [r7, #15]
 8005b6c:	2b03      	cmp	r3, #3
 8005b6e:	d11c      	bne.n	8005baa <USBH_AUDIO_ClassRequest+0x1b6>
        status = USBH_FAIL;
 8005b70:	2302      	movs	r3, #2
 8005b72:	75fb      	strb	r3, [r7, #23]
    break;
 8005b74:	e019      	b.n	8005baa <USBH_AUDIO_ClassRequest+0x1b6>
      AUDIO_Handle->req_state = AUDIO_REQ_IDLE;
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	2202      	movs	r2, #2
 8005b7a:	701a      	strb	r2, [r3, #0]
    break;
 8005b7c:	e015      	b.n	8005baa <USBH_AUDIO_ClassRequest+0x1b6>
  case AUDIO_REQ_IDLE:
    AUDIO_Handle->play_state = AUDIO_PLAYBACK_INIT;
 8005b7e:	693b      	ldr	r3, [r7, #16]
 8005b80:	2201      	movs	r2, #1
 8005b82:	709a      	strb	r2, [r3, #2]
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8005b8a:	2102      	movs	r1, #2
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	4798      	blx	r3
    status  = USBH_OK;
 8005b90:	2300      	movs	r3, #0
 8005b92:	75fb      	strb	r3, [r7, #23]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8005b94:	e00a      	b.n	8005bac <USBH_AUDIO_ClassRequest+0x1b8>

  default:
    break;
 8005b96:	bf00      	nop
 8005b98:	e008      	b.n	8005bac <USBH_AUDIO_ClassRequest+0x1b8>
    break;
 8005b9a:	bf00      	nop
 8005b9c:	e006      	b.n	8005bac <USBH_AUDIO_ClassRequest+0x1b8>
    break;
 8005b9e:	bf00      	nop
 8005ba0:	e004      	b.n	8005bac <USBH_AUDIO_ClassRequest+0x1b8>
    break;
 8005ba2:	bf00      	nop
 8005ba4:	e002      	b.n	8005bac <USBH_AUDIO_ClassRequest+0x1b8>
    break;
 8005ba6:	bf00      	nop
 8005ba8:	e000      	b.n	8005bac <USBH_AUDIO_ClassRequest+0x1b8>
    break;
 8005baa:	bf00      	nop
  }
  return status;
 8005bac:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3718      	adds	r7, #24
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}
 8005bb6:	bf00      	nop

08005bb8 <USBH_AUDIO_CSRequest>:
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_CSRequest(USBH_HandleTypeDef *phost,
                                               uint8_t feature, uint8_t channel)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b088      	sub	sp, #32
 8005bbc:	af02      	add	r7, sp, #8
 8005bbe:	6078      	str	r0, [r7, #4]
 8005bc0:	460b      	mov	r3, r1
 8005bc2:	70fb      	strb	r3, [r7, #3]
 8005bc4:	4613      	mov	r3, r2
 8005bc6:	70bb      	strb	r3, [r7, #2]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8005bce:	69db      	ldr	r3, [r3, #28]
 8005bd0:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef req_status = USBH_BUSY;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	73fb      	strb	r3, [r7, #15]
  uint16_t VolumeCtl, ResolutionCtl;

  /* Switch AUDIO REQ state machine */
  switch (AUDIO_Handle->cs_req_state)
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	785b      	ldrb	r3, [r3, #1]
 8005bde:	3b04      	subs	r3, #4
 8005be0:	2b04      	cmp	r3, #4
 8005be2:	f200 80aa 	bhi.w	8005d3a <USBH_AUDIO_CSRequest+0x182>
 8005be6:	a201      	add	r2, pc, #4	; (adr r2, 8005bec <USBH_AUDIO_CSRequest+0x34>)
 8005be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bec:	08005c49 	.word	0x08005c49
 8005bf0:	08005c8f 	.word	0x08005c8f
 8005bf4:	08005c01 	.word	0x08005c01
 8005bf8:	08005cef 	.word	0x08005cef
 8005bfc:	08005d35 	.word	0x08005d35
  {
    case AUDIO_REQ_GET_VOLUME:
      req_status = USBH_AC_GetCur(phost,
 8005c00:	78fa      	ldrb	r2, [r7, #3]
 8005c02:	2302      	movs	r3, #2
 8005c04:	9301      	str	r3, [sp, #4]
 8005c06:	78bb      	ldrb	r3, [r7, #2]
 8005c08:	9300      	str	r3, [sp, #0]
 8005c0a:	2302      	movs	r3, #2
 8005c0c:	2106      	movs	r1, #6
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f000 fe94 	bl	800693c <USBH_AC_GetCur>
 8005c14:	4603      	mov	r3, r0
 8005c16:	73fb      	strb	r3, [r7, #15]
                                  UAC_FEATURE_UNIT,     /* subtype  */
                                  feature,              /* feature  */
                                  VOLUME_CONTROL,       /* Selector */
                                  channel,              /* channel  */
                                  0x02U);               /* length   */
      if (req_status != USBH_BUSY)
 8005c18:	7bfb      	ldrb	r3, [r7, #15]
 8005c1a:	2b01      	cmp	r3, #1
 8005c1c:	f000 808f 	beq.w	8005d3e <USBH_AUDIO_CSRequest+0x186>
      {
        AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_MIN_VOLUME;
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	2204      	movs	r2, #4
 8005c24:	705a      	strb	r2, [r3, #1]
        VolumeCtl = LE16(&(AUDIO_Handle->mem[0]));
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	f8b3 2190 	ldrh.w	r2, [r3, #400]	; 0x190
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8005c32:	3302      	adds	r3, #2
 8005c34:	881b      	ldrh	r3, [r3, #0]
 8005c36:	021b      	lsls	r3, r3, #8
 8005c38:	b29b      	uxth	r3, r3
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	817b      	strh	r3, [r7, #10]
        AUDIO_Handle->headphone.attribute.volume = (uint32_t)VolumeCtl;
 8005c3e:	897a      	ldrh	r2, [r7, #10]
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
      }
      break;
 8005c46:	e07a      	b.n	8005d3e <USBH_AUDIO_CSRequest+0x186>

    case AUDIO_REQ_GET_MIN_VOLUME:
      req_status = USBH_AC_GetMin(phost,
 8005c48:	78fa      	ldrb	r2, [r7, #3]
 8005c4a:	2302      	movs	r3, #2
 8005c4c:	9301      	str	r3, [sp, #4]
 8005c4e:	78bb      	ldrb	r3, [r7, #2]
 8005c50:	9300      	str	r3, [sp, #0]
 8005c52:	2302      	movs	r3, #2
 8005c54:	2106      	movs	r1, #6
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	f001 f835 	bl	8006cc6 <USBH_AC_GetMin>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	73fb      	strb	r3, [r7, #15]
                                  UAC_FEATURE_UNIT,     /* subtype  */
                                  feature,              /* feature  */
                                  VOLUME_CONTROL,       /* Selector */
                                  channel,              /* channel  */
                                  0x02U);               /* length   */
      if (req_status != USBH_BUSY)
 8005c60:	7bfb      	ldrb	r3, [r7, #15]
 8005c62:	2b01      	cmp	r3, #1
 8005c64:	d06d      	beq.n	8005d42 <USBH_AUDIO_CSRequest+0x18a>
      {
        AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_MAX_VOLUME;
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	2205      	movs	r2, #5
 8005c6a:	705a      	strb	r2, [r3, #1]
        VolumeCtl = LE16(&(AUDIO_Handle->mem[0]));
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	f8b3 2190 	ldrh.w	r2, [r3, #400]	; 0x190
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8005c78:	3302      	adds	r3, #2
 8005c7a:	881b      	ldrh	r3, [r3, #0]
 8005c7c:	021b      	lsls	r3, r3, #8
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	4313      	orrs	r3, r2
 8005c82:	817b      	strh	r3, [r7, #10]
        AUDIO_Handle->headphone.attribute.volumeMin = (uint32_t)VolumeCtl;
 8005c84:	897a      	ldrh	r2, [r7, #10]
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
      }
      break;
 8005c8c:	e059      	b.n	8005d42 <USBH_AUDIO_CSRequest+0x18a>

    case AUDIO_REQ_GET_MAX_VOLUME:
      req_status = USBH_AC_GetMax(phost,
 8005c8e:	78fa      	ldrb	r2, [r7, #3]
 8005c90:	2302      	movs	r3, #2
 8005c92:	9301      	str	r3, [sp, #4]
 8005c94:	78bb      	ldrb	r3, [r7, #2]
 8005c96:	9300      	str	r3, [sp, #0]
 8005c98:	2302      	movs	r3, #2
 8005c9a:	2106      	movs	r1, #6
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	f000 fee4 	bl	8006a6a <USBH_AC_GetMax>
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	73fb      	strb	r3, [r7, #15]
                                  UAC_FEATURE_UNIT,     /* subtype  */
                                  feature,              /* feature  */
                                  VOLUME_CONTROL,       /* Selector */
                                  channel,              /* channel  */
                                  0x02U);               /* length   */
      if (req_status != USBH_BUSY)
 8005ca6:	7bfb      	ldrb	r3, [r7, #15]
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	d04c      	beq.n	8005d46 <USBH_AUDIO_CSRequest+0x18e>
      {
        AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_RESOLUTION;
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	2207      	movs	r2, #7
 8005cb0:	705a      	strb	r2, [r3, #1]
        VolumeCtl = LE16(&(AUDIO_Handle->mem[0]));
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	f8b3 2190 	ldrh.w	r2, [r3, #400]	; 0x190
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8005cbe:	3302      	adds	r3, #2
 8005cc0:	881b      	ldrh	r3, [r3, #0]
 8005cc2:	021b      	lsls	r3, r3, #8
 8005cc4:	b29b      	uxth	r3, r3
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	817b      	strh	r3, [r7, #10]
        AUDIO_Handle->headphone.attribute.volumeMax = (uint32_t)VolumeCtl;
 8005cca:	897a      	ldrh	r2, [r7, #10]
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130

        if (AUDIO_Handle->headphone.attribute.volumeMax < AUDIO_Handle->headphone.attribute.volumeMin)
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8005cde:	429a      	cmp	r2, r3
 8005ce0:	d231      	bcs.n	8005d46 <USBH_AUDIO_CSRequest+0x18e>
        {
          AUDIO_Handle->headphone.attribute.volumeMax = 0xFF00U;
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 8005ce8:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
        }
      }
      break;
 8005cec:	e02b      	b.n	8005d46 <USBH_AUDIO_CSRequest+0x18e>

    case AUDIO_REQ_GET_RESOLUTION:
      req_status = USBH_AC_GetRes(phost,
 8005cee:	78fa      	ldrb	r2, [r7, #3]
 8005cf0:	2302      	movs	r3, #2
 8005cf2:	9301      	str	r3, [sp, #4]
 8005cf4:	78bb      	ldrb	r3, [r7, #2]
 8005cf6:	9300      	str	r3, [sp, #0]
 8005cf8:	2302      	movs	r3, #2
 8005cfa:	2106      	movs	r1, #6
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f000 ff4b 	bl	8006b98 <USBH_AC_GetRes>
 8005d02:	4603      	mov	r3, r0
 8005d04:	73fb      	strb	r3, [r7, #15]
                                  UAC_FEATURE_UNIT,     /* subtype  */
                                  feature,              /* feature  */
                                  VOLUME_CONTROL,       /* Selector */
                                  channel,              /* channel  */
                                  0x02U);                /* length   */
      if (req_status != USBH_BUSY)
 8005d06:	7bfb      	ldrb	r3, [r7, #15]
 8005d08:	2b01      	cmp	r3, #1
 8005d0a:	d01e      	beq.n	8005d4a <USBH_AUDIO_CSRequest+0x192>
      {
        AUDIO_Handle->cs_req_state = AUDIO_REQ_CS_IDLE;
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	2208      	movs	r2, #8
 8005d10:	705a      	strb	r2, [r3, #1]
        ResolutionCtl = LE16(&AUDIO_Handle->mem[0]);
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	f8b3 2190 	ldrh.w	r2, [r3, #400]	; 0x190
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8005d1e:	3302      	adds	r3, #2
 8005d20:	881b      	ldrh	r3, [r3, #0]
 8005d22:	021b      	lsls	r3, r3, #8
 8005d24:	b29b      	uxth	r3, r3
 8005d26:	4313      	orrs	r3, r2
 8005d28:	81bb      	strh	r3, [r7, #12]
        AUDIO_Handle->headphone.attribute.resolution = (uint32_t)ResolutionCtl;
 8005d2a:	89ba      	ldrh	r2, [r7, #12]
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
      }
      break;
 8005d32:	e00a      	b.n	8005d4a <USBH_AUDIO_CSRequest+0x192>


    case AUDIO_REQ_CS_IDLE:
      status = USBH_OK;
 8005d34:	2300      	movs	r3, #0
 8005d36:	75fb      	strb	r3, [r7, #23]
      break;
 8005d38:	e008      	b.n	8005d4c <USBH_AUDIO_CSRequest+0x194>

    default:
      break;
 8005d3a:	bf00      	nop
 8005d3c:	e006      	b.n	8005d4c <USBH_AUDIO_CSRequest+0x194>
      break;
 8005d3e:	bf00      	nop
 8005d40:	e004      	b.n	8005d4c <USBH_AUDIO_CSRequest+0x194>
      break;
 8005d42:	bf00      	nop
 8005d44:	e002      	b.n	8005d4c <USBH_AUDIO_CSRequest+0x194>
      break;
 8005d46:	bf00      	nop
 8005d48:	e000      	b.n	8005d4c <USBH_AUDIO_CSRequest+0x194>
      break;
 8005d4a:	bf00      	nop
  }
  return status;
 8005d4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3718      	adds	r7, #24
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}
 8005d56:	bf00      	nop

08005d58 <USBH_AUDIO_HandleCSRequest>:
  *         and associated channels for Audio class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_HandleCSRequest(USBH_HandleTypeDef *phost)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b084      	sub	sp, #16
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status = USBH_BUSY;
 8005d60:	2301      	movs	r3, #1
 8005d62:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef cs_status = USBH_BUSY;
 8005d64:	2301      	movs	r3, #1
 8005d66:	73bb      	strb	r3, [r7, #14]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8005d6e:	69db      	ldr	r3, [r3, #28]
 8005d70:	60bb      	str	r3, [r7, #8]

  cs_status = USBH_AUDIO_CSRequest(phost,
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	f893 11a0 	ldrb.w	r1, [r3, #416]	; 0x1a0
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 8005d7e:	461a      	mov	r2, r3
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	f7ff ff19 	bl	8005bb8 <USBH_AUDIO_CSRequest>
 8005d86:	4603      	mov	r3, r0
 8005d88:	73bb      	strb	r3, [r7, #14]
                                   AUDIO_Handle->temp_feature,
                                   AUDIO_Handle->temp_channels);

  if (cs_status != USBH_BUSY)
 8005d8a:	7bbb      	ldrb	r3, [r7, #14]
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d01c      	beq.n	8005dca <USBH_AUDIO_HandleCSRequest+0x72>
  {

    if (AUDIO_Handle->temp_channels == 1U)
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 8005d96:	2b01      	cmp	r3, #1
 8005d98:	d10c      	bne.n	8005db4 <USBH_AUDIO_HandleCSRequest+0x5c>
    {
      AUDIO_Handle->temp_feature = AUDIO_Handle->headphone.asociated_feature;
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
      AUDIO_Handle->temp_channels = 0U;
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	2200      	movs	r2, #0
 8005daa:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
      status = USBH_OK;
 8005dae:	2300      	movs	r3, #0
 8005db0:	73fb      	strb	r3, [r7, #15]
 8005db2:	e007      	b.n	8005dc4 <USBH_AUDIO_HandleCSRequest+0x6c>
    }
    else
    {
      AUDIO_Handle->temp_channels--;
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 8005dba:	3b01      	subs	r3, #1
 8005dbc:	b2da      	uxtb	r2, r3
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
    }
    AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_VOLUME;
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	2206      	movs	r2, #6
 8005dc8:	705a      	strb	r2, [r3, #1]
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
  }

  return status;
 8005dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	3710      	adds	r7, #16
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}

08005dd4 <USBH_AUDIO_Process>:
  *         The function is for managing state machine for Audio data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_Process(USBH_HandleTypeDef *phost)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b084      	sub	sp, #16
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *)  phost->pActiveClass->pData;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8005de6:	69db      	ldr	r3, [r3, #28]
 8005de8:	60bb      	str	r3, [r7, #8]

  if (AUDIO_Handle->headphone.supported == 1U)
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8005df0:	2b01      	cmp	r3, #1
 8005df2:	d102      	bne.n	8005dfa <USBH_AUDIO_Process+0x26>
  {
    USBH_AUDIO_OutputStream(phost);
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	f001 f8e7 	bl	8006fc8 <USBH_AUDIO_OutputStream>
  }

  if (AUDIO_Handle->microphone.supported == 1U)
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	f893 3142 	ldrb.w	r3, [r3, #322]	; 0x142
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d102      	bne.n	8005e0a <USBH_AUDIO_Process+0x36>
  {
    USBH_AUDIO_InputStream(phost);
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	f001 f81d 	bl	8006e44 <USBH_AUDIO_InputStream>
  }

  return status;
 8005e0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	3710      	adds	r7, #16
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd80      	pop	{r7, pc}

08005e14 <USBH_AUDIO_SOFProcess>:
  *         The function is for managing the SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_SOFProcess(USBH_HandleTypeDef *phost)
{
 8005e14:	b480      	push	{r7}
 8005e16:	b083      	sub	sp, #12
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8005e1c:	2300      	movs	r3, #0
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	370c      	adds	r7, #12
 8005e22:	46bd      	mov	sp, r7
 8005e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e28:	4770      	bx	lr

08005e2a <USBH_AUDIO_FindAudioStreamingIN>:
  * @brief  Find IN Audio Streaming interfaces
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_FindAudioStreamingIN(USBH_HandleTypeDef *phost)
{
 8005e2a:	b480      	push	{r7}
 8005e2c:	b085      	sub	sp, #20
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	6078      	str	r0, [r7, #4]
  uint8_t interface, alt_settings;
  USBH_StatusTypeDef status = USBH_FAIL ;
 8005e32:	2302      	movs	r3, #2
 8005e34:	737b      	strb	r3, [r7, #13]
  AUDIO_HandleTypeDef *AUDIO_Handle;

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8005e3c:	69db      	ldr	r3, [r3, #28]
 8005e3e:	60bb      	str	r3, [r7, #8]

  /* Look For AUDIOSTREAMING IN interface */
  alt_settings = 0U;
 8005e40:	2300      	movs	r3, #0
 8005e42:	73bb      	strb	r3, [r7, #14]
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 8005e44:	2300      	movs	r3, #0
 8005e46:	73fb      	strb	r3, [r7, #15]
 8005e48:	e09e      	b.n	8005f88 <USBH_AUDIO_FindAudioStreamingIN+0x15e>
  {
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == AC_CLASS) &&
 8005e4a:	7bfb      	ldrb	r3, [r7, #15]
 8005e4c:	687a      	ldr	r2, [r7, #4]
 8005e4e:	211a      	movs	r1, #26
 8005e50:	fb01 f303 	mul.w	r3, r1, r3
 8005e54:	4413      	add	r3, r2
 8005e56:	f203 3347 	addw	r3, r3, #839	; 0x347
 8005e5a:	781b      	ldrb	r3, [r3, #0]
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	f040 8090 	bne.w	8005f82 <USBH_AUDIO_FindAudioStreamingIN+0x158>
        (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceSubClass == USB_SUBCLASS_AUDIOSTREAMING))
 8005e62:	7bfb      	ldrb	r3, [r7, #15]
 8005e64:	687a      	ldr	r2, [r7, #4]
 8005e66:	211a      	movs	r1, #26
 8005e68:	fb01 f303 	mul.w	r3, r1, r3
 8005e6c:	4413      	add	r3, r2
 8005e6e:	f503 7352 	add.w	r3, r3, #840	; 0x348
 8005e72:	781b      	ldrb	r3, [r3, #0]
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == AC_CLASS) &&
 8005e74:	2b02      	cmp	r3, #2
 8005e76:	f040 8084 	bne.w	8005f82 <USBH_AUDIO_FindAudioStreamingIN+0x158>
    {
      if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) &&
 8005e7a:	7bfb      	ldrb	r3, [r7, #15]
 8005e7c:	687a      	ldr	r2, [r7, #4]
 8005e7e:	211a      	movs	r1, #26
 8005e80:	fb01 f303 	mul.w	r3, r1, r3
 8005e84:	4413      	add	r3, r2
 8005e86:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005e8a:	781b      	ldrb	r3, [r3, #0]
 8005e8c:	b25b      	sxtb	r3, r3
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	da77      	bge.n	8005f82 <USBH_AUDIO_FindAudioStreamingIN+0x158>
          (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize > 0U))
 8005e92:	7bfb      	ldrb	r3, [r7, #15]
 8005e94:	687a      	ldr	r2, [r7, #4]
 8005e96:	211a      	movs	r1, #26
 8005e98:	fb01 f303 	mul.w	r3, r1, r3
 8005e9c:	4413      	add	r3, r2
 8005e9e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005ea2:	881b      	ldrh	r3, [r3, #0]
      if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) &&
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d06c      	beq.n	8005f82 <USBH_AUDIO_FindAudioStreamingIN+0x158>
      {
        AUDIO_Handle->stream_in[alt_settings].Ep = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005ea8:	7bfb      	ldrb	r3, [r7, #15]
 8005eaa:	7bba      	ldrb	r2, [r7, #14]
 8005eac:	6879      	ldr	r1, [r7, #4]
 8005eae:	201a      	movs	r0, #26
 8005eb0:	fb00 f303 	mul.w	r3, r0, r3
 8005eb4:	440b      	add	r3, r1
 8005eb6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005eba:	7818      	ldrb	r0, [r3, #0]
 8005ebc:	68b9      	ldr	r1, [r7, #8]
 8005ebe:	4613      	mov	r3, r2
 8005ec0:	009b      	lsls	r3, r3, #2
 8005ec2:	4413      	add	r3, r2
 8005ec4:	005b      	lsls	r3, r3, #1
 8005ec6:	440b      	add	r3, r1
 8005ec8:	3306      	adds	r3, #6
 8005eca:	4602      	mov	r2, r0
 8005ecc:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_in[alt_settings].EpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005ece:	7bfb      	ldrb	r3, [r7, #15]
 8005ed0:	7bba      	ldrb	r2, [r7, #14]
 8005ed2:	6879      	ldr	r1, [r7, #4]
 8005ed4:	201a      	movs	r0, #26
 8005ed6:	fb00 f303 	mul.w	r3, r0, r3
 8005eda:	440b      	add	r3, r1
 8005edc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005ee0:	8818      	ldrh	r0, [r3, #0]
 8005ee2:	68b9      	ldr	r1, [r7, #8]
 8005ee4:	4613      	mov	r3, r2
 8005ee6:	009b      	lsls	r3, r3, #2
 8005ee8:	4413      	add	r3, r2
 8005eea:	005b      	lsls	r3, r3, #1
 8005eec:	440b      	add	r3, r1
 8005eee:	3308      	adds	r3, #8
 8005ef0:	4602      	mov	r2, r0
 8005ef2:	801a      	strh	r2, [r3, #0]
        AUDIO_Handle->stream_in[alt_settings].interface = phost->device.CfgDesc.Itf_Desc[interface].bInterfaceNumber;
 8005ef4:	7bfb      	ldrb	r3, [r7, #15]
 8005ef6:	7bba      	ldrb	r2, [r7, #14]
 8005ef8:	6879      	ldr	r1, [r7, #4]
 8005efa:	201a      	movs	r0, #26
 8005efc:	fb00 f303 	mul.w	r3, r0, r3
 8005f00:	440b      	add	r3, r1
 8005f02:	f503 7351 	add.w	r3, r3, #836	; 0x344
 8005f06:	7818      	ldrb	r0, [r3, #0]
 8005f08:	68b9      	ldr	r1, [r7, #8]
 8005f0a:	4613      	mov	r3, r2
 8005f0c:	009b      	lsls	r3, r3, #2
 8005f0e:	4413      	add	r3, r2
 8005f10:	005b      	lsls	r3, r3, #1
 8005f12:	440b      	add	r3, r1
 8005f14:	330b      	adds	r3, #11
 8005f16:	4602      	mov	r2, r0
 8005f18:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_in[alt_settings].AltSettings = phost->device.CfgDesc.Itf_Desc[interface].bAlternateSetting;
 8005f1a:	7bfb      	ldrb	r3, [r7, #15]
 8005f1c:	7bba      	ldrb	r2, [r7, #14]
 8005f1e:	6879      	ldr	r1, [r7, #4]
 8005f20:	201a      	movs	r0, #26
 8005f22:	fb00 f303 	mul.w	r3, r0, r3
 8005f26:	440b      	add	r3, r1
 8005f28:	f203 3345 	addw	r3, r3, #837	; 0x345
 8005f2c:	7818      	ldrb	r0, [r3, #0]
 8005f2e:	68b9      	ldr	r1, [r7, #8]
 8005f30:	4613      	mov	r3, r2
 8005f32:	009b      	lsls	r3, r3, #2
 8005f34:	4413      	add	r3, r2
 8005f36:	005b      	lsls	r3, r3, #1
 8005f38:	440b      	add	r3, r1
 8005f3a:	330a      	adds	r3, #10
 8005f3c:	4602      	mov	r2, r0
 8005f3e:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_in[alt_settings].Poll = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 8005f40:	7bfb      	ldrb	r3, [r7, #15]
 8005f42:	687a      	ldr	r2, [r7, #4]
 8005f44:	211a      	movs	r1, #26
 8005f46:	fb01 f303 	mul.w	r3, r1, r3
 8005f4a:	4413      	add	r3, r2
 8005f4c:	f203 3352 	addw	r3, r3, #850	; 0x352
 8005f50:	781b      	ldrb	r3, [r3, #0]
 8005f52:	7bba      	ldrb	r2, [r7, #14]
 8005f54:	b298      	uxth	r0, r3
 8005f56:	68b9      	ldr	r1, [r7, #8]
 8005f58:	4613      	mov	r3, r2
 8005f5a:	009b      	lsls	r3, r3, #2
 8005f5c:	4413      	add	r3, r2
 8005f5e:	005b      	lsls	r3, r3, #1
 8005f60:	440b      	add	r3, r1
 8005f62:	330e      	adds	r3, #14
 8005f64:	4602      	mov	r2, r0
 8005f66:	801a      	strh	r2, [r3, #0]
        AUDIO_Handle->stream_in[alt_settings].valid = 1U;
 8005f68:	7bba      	ldrb	r2, [r7, #14]
 8005f6a:	68b9      	ldr	r1, [r7, #8]
 8005f6c:	4613      	mov	r3, r2
 8005f6e:	009b      	lsls	r3, r3, #2
 8005f70:	4413      	add	r3, r2
 8005f72:	005b      	lsls	r3, r3, #1
 8005f74:	440b      	add	r3, r1
 8005f76:	330c      	adds	r3, #12
 8005f78:	2201      	movs	r2, #1
 8005f7a:	701a      	strb	r2, [r3, #0]
        alt_settings++;
 8005f7c:	7bbb      	ldrb	r3, [r7, #14]
 8005f7e:	3301      	adds	r3, #1
 8005f80:	73bb      	strb	r3, [r7, #14]
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 8005f82:	7bfb      	ldrb	r3, [r7, #15]
 8005f84:	3301      	adds	r3, #1
 8005f86:	73fb      	strb	r3, [r7, #15]
 8005f88:	7bfb      	ldrb	r3, [r7, #15]
 8005f8a:	2b09      	cmp	r3, #9
 8005f8c:	f67f af5d 	bls.w	8005e4a <USBH_AUDIO_FindAudioStreamingIN+0x20>
      }
    }
  }

  if (alt_settings > 0U)
 8005f90:	7bbb      	ldrb	r3, [r7, #14]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d001      	beq.n	8005f9a <USBH_AUDIO_FindAudioStreamingIN+0x170>
  {
    status = USBH_OK;
 8005f96:	2300      	movs	r3, #0
 8005f98:	737b      	strb	r3, [r7, #13]
  }

  return status;
 8005f9a:	7b7b      	ldrb	r3, [r7, #13]
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3714      	adds	r7, #20
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa6:	4770      	bx	lr

08005fa8 <USBH_AUDIO_FindAudioStreamingOUT>:
  * @brief  Find OUT Audio Streaming interfaces
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_FindAudioStreamingOUT(USBH_HandleTypeDef *phost)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b085      	sub	sp, #20
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  uint8_t interface, alt_settings;
  USBH_StatusTypeDef status = USBH_FAIL ;
 8005fb0:	2302      	movs	r3, #2
 8005fb2:	737b      	strb	r3, [r7, #13]
  AUDIO_HandleTypeDef *AUDIO_Handle;

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8005fba:	69db      	ldr	r3, [r3, #28]
 8005fbc:	60bb      	str	r3, [r7, #8]

  /* Look For AUDIOSTREAMING IN interface */
  alt_settings = 0U;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	73bb      	strb	r3, [r7, #14]
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	73fb      	strb	r3, [r7, #15]
 8005fc6:	e09e      	b.n	8006106 <USBH_AUDIO_FindAudioStreamingOUT+0x15e>
  {
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == AC_CLASS) &&
 8005fc8:	7bfb      	ldrb	r3, [r7, #15]
 8005fca:	687a      	ldr	r2, [r7, #4]
 8005fcc:	211a      	movs	r1, #26
 8005fce:	fb01 f303 	mul.w	r3, r1, r3
 8005fd2:	4413      	add	r3, r2
 8005fd4:	f203 3347 	addw	r3, r3, #839	; 0x347
 8005fd8:	781b      	ldrb	r3, [r3, #0]
 8005fda:	2b01      	cmp	r3, #1
 8005fdc:	f040 8090 	bne.w	8006100 <USBH_AUDIO_FindAudioStreamingOUT+0x158>
        (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceSubClass == USB_SUBCLASS_AUDIOSTREAMING))
 8005fe0:	7bfb      	ldrb	r3, [r7, #15]
 8005fe2:	687a      	ldr	r2, [r7, #4]
 8005fe4:	211a      	movs	r1, #26
 8005fe6:	fb01 f303 	mul.w	r3, r1, r3
 8005fea:	4413      	add	r3, r2
 8005fec:	f503 7352 	add.w	r3, r3, #840	; 0x348
 8005ff0:	781b      	ldrb	r3, [r3, #0]
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == AC_CLASS) &&
 8005ff2:	2b02      	cmp	r3, #2
 8005ff4:	f040 8084 	bne.w	8006100 <USBH_AUDIO_FindAudioStreamingOUT+0x158>
    {
      if (((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) == 0x00U) &&
 8005ff8:	7bfb      	ldrb	r3, [r7, #15]
 8005ffa:	687a      	ldr	r2, [r7, #4]
 8005ffc:	211a      	movs	r1, #26
 8005ffe:	fb01 f303 	mul.w	r3, r1, r3
 8006002:	4413      	add	r3, r2
 8006004:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006008:	781b      	ldrb	r3, [r3, #0]
 800600a:	b25b      	sxtb	r3, r3
 800600c:	2b00      	cmp	r3, #0
 800600e:	db77      	blt.n	8006100 <USBH_AUDIO_FindAudioStreamingOUT+0x158>
          (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize > 0U))
 8006010:	7bfb      	ldrb	r3, [r7, #15]
 8006012:	687a      	ldr	r2, [r7, #4]
 8006014:	211a      	movs	r1, #26
 8006016:	fb01 f303 	mul.w	r3, r1, r3
 800601a:	4413      	add	r3, r2
 800601c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006020:	881b      	ldrh	r3, [r3, #0]
      if (((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) == 0x00U) &&
 8006022:	2b00      	cmp	r3, #0
 8006024:	d06c      	beq.n	8006100 <USBH_AUDIO_FindAudioStreamingOUT+0x158>
      {
        AUDIO_Handle->stream_out[alt_settings].Ep = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006026:	7bfb      	ldrb	r3, [r7, #15]
 8006028:	7bba      	ldrb	r2, [r7, #14]
 800602a:	6879      	ldr	r1, [r7, #4]
 800602c:	201a      	movs	r0, #26
 800602e:	fb00 f303 	mul.w	r3, r0, r3
 8006032:	440b      	add	r3, r1
 8006034:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006038:	7818      	ldrb	r0, [r3, #0]
 800603a:	68b9      	ldr	r1, [r7, #8]
 800603c:	4613      	mov	r3, r2
 800603e:	009b      	lsls	r3, r3, #2
 8006040:	4413      	add	r3, r2
 8006042:	005b      	lsls	r3, r3, #1
 8006044:	440b      	add	r3, r1
 8006046:	3338      	adds	r3, #56	; 0x38
 8006048:	4602      	mov	r2, r0
 800604a:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_out[alt_settings].EpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800604c:	7bfb      	ldrb	r3, [r7, #15]
 800604e:	7bba      	ldrb	r2, [r7, #14]
 8006050:	6879      	ldr	r1, [r7, #4]
 8006052:	201a      	movs	r0, #26
 8006054:	fb00 f303 	mul.w	r3, r0, r3
 8006058:	440b      	add	r3, r1
 800605a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800605e:	8818      	ldrh	r0, [r3, #0]
 8006060:	68b9      	ldr	r1, [r7, #8]
 8006062:	4613      	mov	r3, r2
 8006064:	009b      	lsls	r3, r3, #2
 8006066:	4413      	add	r3, r2
 8006068:	005b      	lsls	r3, r3, #1
 800606a:	440b      	add	r3, r1
 800606c:	333a      	adds	r3, #58	; 0x3a
 800606e:	4602      	mov	r2, r0
 8006070:	801a      	strh	r2, [r3, #0]
        AUDIO_Handle->stream_out[alt_settings].interface = phost->device.CfgDesc.Itf_Desc[interface].bInterfaceNumber;
 8006072:	7bfb      	ldrb	r3, [r7, #15]
 8006074:	7bba      	ldrb	r2, [r7, #14]
 8006076:	6879      	ldr	r1, [r7, #4]
 8006078:	201a      	movs	r0, #26
 800607a:	fb00 f303 	mul.w	r3, r0, r3
 800607e:	440b      	add	r3, r1
 8006080:	f503 7351 	add.w	r3, r3, #836	; 0x344
 8006084:	7818      	ldrb	r0, [r3, #0]
 8006086:	68b9      	ldr	r1, [r7, #8]
 8006088:	4613      	mov	r3, r2
 800608a:	009b      	lsls	r3, r3, #2
 800608c:	4413      	add	r3, r2
 800608e:	005b      	lsls	r3, r3, #1
 8006090:	440b      	add	r3, r1
 8006092:	333d      	adds	r3, #61	; 0x3d
 8006094:	4602      	mov	r2, r0
 8006096:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_out[alt_settings].AltSettings = phost->device.CfgDesc.Itf_Desc[interface].bAlternateSetting;
 8006098:	7bfb      	ldrb	r3, [r7, #15]
 800609a:	7bba      	ldrb	r2, [r7, #14]
 800609c:	6879      	ldr	r1, [r7, #4]
 800609e:	201a      	movs	r0, #26
 80060a0:	fb00 f303 	mul.w	r3, r0, r3
 80060a4:	440b      	add	r3, r1
 80060a6:	f203 3345 	addw	r3, r3, #837	; 0x345
 80060aa:	7818      	ldrb	r0, [r3, #0]
 80060ac:	68b9      	ldr	r1, [r7, #8]
 80060ae:	4613      	mov	r3, r2
 80060b0:	009b      	lsls	r3, r3, #2
 80060b2:	4413      	add	r3, r2
 80060b4:	005b      	lsls	r3, r3, #1
 80060b6:	440b      	add	r3, r1
 80060b8:	333c      	adds	r3, #60	; 0x3c
 80060ba:	4602      	mov	r2, r0
 80060bc:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_out[alt_settings].Poll = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 80060be:	7bfb      	ldrb	r3, [r7, #15]
 80060c0:	687a      	ldr	r2, [r7, #4]
 80060c2:	211a      	movs	r1, #26
 80060c4:	fb01 f303 	mul.w	r3, r1, r3
 80060c8:	4413      	add	r3, r2
 80060ca:	f203 3352 	addw	r3, r3, #850	; 0x352
 80060ce:	781b      	ldrb	r3, [r3, #0]
 80060d0:	7bba      	ldrb	r2, [r7, #14]
 80060d2:	b298      	uxth	r0, r3
 80060d4:	68b9      	ldr	r1, [r7, #8]
 80060d6:	4613      	mov	r3, r2
 80060d8:	009b      	lsls	r3, r3, #2
 80060da:	4413      	add	r3, r2
 80060dc:	005b      	lsls	r3, r3, #1
 80060de:	440b      	add	r3, r1
 80060e0:	3340      	adds	r3, #64	; 0x40
 80060e2:	4602      	mov	r2, r0
 80060e4:	801a      	strh	r2, [r3, #0]
        AUDIO_Handle->stream_out[alt_settings].valid = 1U;
 80060e6:	7bba      	ldrb	r2, [r7, #14]
 80060e8:	68b9      	ldr	r1, [r7, #8]
 80060ea:	4613      	mov	r3, r2
 80060ec:	009b      	lsls	r3, r3, #2
 80060ee:	4413      	add	r3, r2
 80060f0:	005b      	lsls	r3, r3, #1
 80060f2:	440b      	add	r3, r1
 80060f4:	333e      	adds	r3, #62	; 0x3e
 80060f6:	2201      	movs	r2, #1
 80060f8:	701a      	strb	r2, [r3, #0]
        alt_settings++;
 80060fa:	7bbb      	ldrb	r3, [r7, #14]
 80060fc:	3301      	adds	r3, #1
 80060fe:	73bb      	strb	r3, [r7, #14]
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 8006100:	7bfb      	ldrb	r3, [r7, #15]
 8006102:	3301      	adds	r3, #1
 8006104:	73fb      	strb	r3, [r7, #15]
 8006106:	7bfb      	ldrb	r3, [r7, #15]
 8006108:	2b09      	cmp	r3, #9
 800610a:	f67f af5d 	bls.w	8005fc8 <USBH_AUDIO_FindAudioStreamingOUT+0x20>
      }
    }
  }

  if (alt_settings > 0U)
 800610e:	7bbb      	ldrb	r3, [r7, #14]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d001      	beq.n	8006118 <USBH_AUDIO_FindAudioStreamingOUT+0x170>
  {
    status = USBH_OK;
 8006114:	2300      	movs	r3, #0
 8006116:	737b      	strb	r3, [r7, #13]
  }

  return status;
 8006118:	7b7b      	ldrb	r3, [r7, #13]
}
 800611a:	4618      	mov	r0, r3
 800611c:	3714      	adds	r7, #20
 800611e:	46bd      	mov	sp, r7
 8006120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006124:	4770      	bx	lr

08006126 <USBH_AUDIO_FindHIDControl>:
  * @brief  Find HID Control interfaces
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_FindHIDControl(USBH_HandleTypeDef *phost)
{
 8006126:	b580      	push	{r7, lr}
 8006128:	b084      	sub	sp, #16
 800612a:	af00      	add	r7, sp, #0
 800612c:	6078      	str	r0, [r7, #4]
  uint8_t interface;
  USBH_StatusTypeDef status = USBH_FAIL;
 800612e:	2302      	movs	r3, #2
 8006130:	73bb      	strb	r3, [r7, #14]
  AUDIO_HandleTypeDef *AUDIO_Handle;

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8006138:	69db      	ldr	r3, [r3, #28]
 800613a:	60bb      	str	r3, [r7, #8]

  /* Look For AUDIOCONTROL  interface */
  interface = USBH_FindInterface(phost, AC_CLASS, USB_SUBCLASS_AUDIOCONTROL, 0xFFU);
 800613c:	23ff      	movs	r3, #255	; 0xff
 800613e:	2201      	movs	r2, #1
 8006140:	2101      	movs	r1, #1
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f001 f9df 	bl	8007506 <USBH_FindInterface>
 8006148:	4603      	mov	r3, r0
 800614a:	73fb      	strb	r3, [r7, #15]
  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES))
 800614c:	7bfb      	ldrb	r3, [r7, #15]
 800614e:	2bff      	cmp	r3, #255	; 0xff
 8006150:	d002      	beq.n	8006158 <USBH_AUDIO_FindHIDControl+0x32>
 8006152:	7bfb      	ldrb	r3, [r7, #15]
 8006154:	2b09      	cmp	r3, #9
 8006156:	d901      	bls.n	800615c <USBH_AUDIO_FindHIDControl+0x36>
  {
    return USBH_FAIL;
 8006158:	2302      	movs	r3, #2
 800615a:	e062      	b.n	8006222 <USBH_AUDIO_FindHIDControl+0xfc>
  }

  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 800615c:	2300      	movs	r3, #0
 800615e:	73fb      	strb	r3, [r7, #15]
 8006160:	e05b      	b.n	800621a <USBH_AUDIO_FindHIDControl+0xf4>
  {
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == 0x03U) && /*HID*/
 8006162:	7bfb      	ldrb	r3, [r7, #15]
 8006164:	687a      	ldr	r2, [r7, #4]
 8006166:	211a      	movs	r1, #26
 8006168:	fb01 f303 	mul.w	r3, r1, r3
 800616c:	4413      	add	r3, r2
 800616e:	f203 3347 	addw	r3, r3, #839	; 0x347
 8006172:	781b      	ldrb	r3, [r3, #0]
 8006174:	2b03      	cmp	r3, #3
 8006176:	d14d      	bne.n	8006214 <USBH_AUDIO_FindHIDControl+0xee>
        (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize > 0U))
 8006178:	7bfb      	ldrb	r3, [r7, #15]
 800617a:	687a      	ldr	r2, [r7, #4]
 800617c:	211a      	movs	r1, #26
 800617e:	fb01 f303 	mul.w	r3, r1, r3
 8006182:	4413      	add	r3, r2
 8006184:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006188:	881b      	ldrh	r3, [r3, #0]
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == 0x03U) && /*HID*/
 800618a:	2b00      	cmp	r3, #0
 800618c:	d042      	beq.n	8006214 <USBH_AUDIO_FindHIDControl+0xee>
    {
      if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) == 0x80U)
 800618e:	7bfb      	ldrb	r3, [r7, #15]
 8006190:	687a      	ldr	r2, [r7, #4]
 8006192:	211a      	movs	r1, #26
 8006194:	fb01 f303 	mul.w	r3, r1, r3
 8006198:	4413      	add	r3, r2
 800619a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800619e:	781b      	ldrb	r3, [r3, #0]
 80061a0:	b25b      	sxtb	r3, r3
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	da36      	bge.n	8006214 <USBH_AUDIO_FindHIDControl+0xee>
      {
        AUDIO_Handle->control.Ep = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80061a6:	7bfb      	ldrb	r3, [r7, #15]
 80061a8:	687a      	ldr	r2, [r7, #4]
 80061aa:	211a      	movs	r1, #26
 80061ac:	fb01 f303 	mul.w	r3, r1, r3
 80061b0:	4413      	add	r3, r2
 80061b2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80061b6:	781a      	ldrb	r2, [r3, #0]
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	f883 2184 	strb.w	r2, [r3, #388]	; 0x184
        AUDIO_Handle->control.EpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80061be:	7bfb      	ldrb	r3, [r7, #15]
 80061c0:	687a      	ldr	r2, [r7, #4]
 80061c2:	211a      	movs	r1, #26
 80061c4:	fb01 f303 	mul.w	r3, r1, r3
 80061c8:	4413      	add	r3, r2
 80061ca:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80061ce:	881a      	ldrh	r2, [r3, #0]
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	f8a3 2186 	strh.w	r2, [r3, #390]	; 0x186
        AUDIO_Handle->control.interface = phost->device.CfgDesc.Itf_Desc[interface].bInterfaceNumber;
 80061d6:	7bfb      	ldrb	r3, [r7, #15]
 80061d8:	687a      	ldr	r2, [r7, #4]
 80061da:	211a      	movs	r1, #26
 80061dc:	fb01 f303 	mul.w	r3, r1, r3
 80061e0:	4413      	add	r3, r2
 80061e2:	f503 7351 	add.w	r3, r3, #836	; 0x344
 80061e6:	781a      	ldrb	r2, [r3, #0]
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
        AUDIO_Handle->control.Poll = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 80061ee:	7bfb      	ldrb	r3, [r7, #15]
 80061f0:	687a      	ldr	r2, [r7, #4]
 80061f2:	211a      	movs	r1, #26
 80061f4:	fb01 f303 	mul.w	r3, r1, r3
 80061f8:	4413      	add	r3, r2
 80061fa:	f203 3352 	addw	r3, r3, #850	; 0x352
 80061fe:	781a      	ldrb	r2, [r3, #0]
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	f883 218b 	strb.w	r2, [r3, #395]	; 0x18b
        AUDIO_Handle->control.supported = 1U;
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	2201      	movs	r2, #1
 800620a:	f883 2189 	strb.w	r2, [r3, #393]	; 0x189
        status = USBH_OK;
 800620e:	2300      	movs	r3, #0
 8006210:	73bb      	strb	r3, [r7, #14]
        break;
 8006212:	e005      	b.n	8006220 <USBH_AUDIO_FindHIDControl+0xfa>
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 8006214:	7bfb      	ldrb	r3, [r7, #15]
 8006216:	3301      	adds	r3, #1
 8006218:	73fb      	strb	r3, [r7, #15]
 800621a:	7bfb      	ldrb	r3, [r7, #15]
 800621c:	2b09      	cmp	r3, #9
 800621e:	d9a0      	bls.n	8006162 <USBH_AUDIO_FindHIDControl+0x3c>
      }
    }
  }

  return status;
 8006220:	7bbb      	ldrb	r3, [r7, #14]
}
 8006222:	4618      	mov	r0, r3
 8006224:	3710      	adds	r7, #16
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}

0800622a <USBH_AUDIO_ParseCSDescriptors>:
  * @brief  Parse AC and interfaces Descriptors
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_ParseCSDescriptors(USBH_HandleTypeDef *phost)
{
 800622a:	b580      	push	{r7, lr}
 800622c:	b088      	sub	sp, #32
 800622e:	af00      	add	r7, sp, #0
 8006230:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8006232:	2300      	movs	r3, #0
 8006234:	77fb      	strb	r3, [r7, #31]
  USBH_DescHeader_t            *pdesc;
  uint16_t                      ptr;
  uint8_t                       itf_index = 0U;
 8006236:	2300      	movs	r3, #0
 8006238:	75fb      	strb	r3, [r7, #23]
  uint8_t                       itf_number = 0U;
 800623a:	2300      	movs	r3, #0
 800623c:	75bb      	strb	r3, [r7, #22]
  uint8_t                       alt_setting;
  AUDIO_HandleTypeDef           *AUDIO_Handle;

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8006244:	69db      	ldr	r3, [r3, #28]
 8006246:	613b      	str	r3, [r7, #16]
  pdesc   = (USBH_DescHeader_t *)(void *)(phost->device.CfgDesc_Raw);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	331c      	adds	r3, #28
 800624c:	61bb      	str	r3, [r7, #24]
  ptr = USB_LEN_CFG_DESC;
 800624e:	2309      	movs	r3, #9
 8006250:	81bb      	strh	r3, [r7, #12]

  AUDIO_Handle->class_desc.FeatureUnitNum = 0U;
 8006252:	693b      	ldr	r3, [r7, #16]
 8006254:	2200      	movs	r2, #0
 8006256:	f8a3 20ee 	strh.w	r2, [r3, #238]	; 0xee
  AUDIO_Handle->class_desc.InputTerminalNum = 0U;
 800625a:	693b      	ldr	r3, [r7, #16]
 800625c:	2200      	movs	r2, #0
 800625e:	f8a3 20ea 	strh.w	r2, [r3, #234]	; 0xea
  AUDIO_Handle->class_desc.OutputTerminalNum = 0U;
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	2200      	movs	r2, #0
 8006266:	f8a3 20ec 	strh.w	r2, [r3, #236]	; 0xec
  AUDIO_Handle->class_desc.ASNum = 0U;
 800626a:	693b      	ldr	r3, [r7, #16]
 800626c:	2200      	movs	r2, #0
 800626e:	f8a3 20e8 	strh.w	r2, [r3, #232]	; 0xe8

  while (ptr < phost->device.CfgDesc.wTotalLength)
 8006272:	e03d      	b.n	80062f0 <USBH_AUDIO_ParseCSDescriptors+0xc6>
  {
    pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006274:	f107 030c 	add.w	r3, r7, #12
 8006278:	4619      	mov	r1, r3
 800627a:	69b8      	ldr	r0, [r7, #24]
 800627c:	f002 f901 	bl	8008482 <USBH_GetNextDesc>
 8006280:	61b8      	str	r0, [r7, #24]

    switch (pdesc->bDescriptorType)
 8006282:	69bb      	ldr	r3, [r7, #24]
 8006284:	785b      	ldrb	r3, [r3, #1]
 8006286:	2b04      	cmp	r3, #4
 8006288:	d002      	beq.n	8006290 <USBH_AUDIO_ParseCSDescriptors+0x66>
 800628a:	2b24      	cmp	r3, #36	; 0x24
 800628c:	d00f      	beq.n	80062ae <USBH_AUDIO_ParseCSDescriptors+0x84>
 800628e:	e02e      	b.n	80062ee <USBH_AUDIO_ParseCSDescriptors+0xc4>
    {

      case USB_DESC_TYPE_INTERFACE:
        itf_number = *((uint8_t *)(void *)pdesc + 2U);
 8006290:	69bb      	ldr	r3, [r7, #24]
 8006292:	789b      	ldrb	r3, [r3, #2]
 8006294:	75bb      	strb	r3, [r7, #22]
        alt_setting = *((uint8_t *)(void *)pdesc + 3U);
 8006296:	69bb      	ldr	r3, [r7, #24]
 8006298:	78db      	ldrb	r3, [r3, #3]
 800629a:	73fb      	strb	r3, [r7, #15]
        itf_index = USBH_FindInterfaceIndex(phost, itf_number, alt_setting);
 800629c:	7bfa      	ldrb	r2, [r7, #15]
 800629e:	7dbb      	ldrb	r3, [r7, #22]
 80062a0:	4619      	mov	r1, r3
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f001 f975 	bl	8007592 <USBH_FindInterfaceIndex>
 80062a8:	4603      	mov	r3, r0
 80062aa:	75fb      	strb	r3, [r7, #23]
        break;
 80062ac:	e020      	b.n	80062f0 <USBH_AUDIO_ParseCSDescriptors+0xc6>

      case USB_DESC_TYPE_CS_INTERFACE:
        if (itf_number <= phost->device.CfgDesc.bNumInterfaces)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80062b4:	7dba      	ldrb	r2, [r7, #22]
 80062b6:	429a      	cmp	r2, r3
 80062b8:	d81a      	bhi.n	80062f0 <USBH_AUDIO_ParseCSDescriptors+0xc6>
        {
          if ((itf_index == 0xFFU) || (itf_index >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80062ba:	7dfb      	ldrb	r3, [r7, #23]
 80062bc:	2bff      	cmp	r3, #255	; 0xff
 80062be:	d002      	beq.n	80062c6 <USBH_AUDIO_ParseCSDescriptors+0x9c>
 80062c0:	7dfb      	ldrb	r3, [r7, #23]
 80062c2:	2b09      	cmp	r3, #9
 80062c4:	d902      	bls.n	80062cc <USBH_AUDIO_ParseCSDescriptors+0xa2>
          {
            USBH_DbgLog("Cannot Find the audio interface index for %s class.", phost->pActiveClass->Name);
            status = USBH_FAIL;
 80062c6:	2302      	movs	r3, #2
 80062c8:	77fb      	strb	r3, [r7, #31]
 80062ca:	e00f      	b.n	80062ec <USBH_AUDIO_ParseCSDescriptors+0xc2>
          }
          else
          {

            ParseCSDescriptors(&AUDIO_Handle->class_desc,
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 80062d2:	7dfb      	ldrb	r3, [r7, #23]
 80062d4:	687a      	ldr	r2, [r7, #4]
 80062d6:	211a      	movs	r1, #26
 80062d8:	fb01 f303 	mul.w	r3, r1, r3
 80062dc:	4413      	add	r3, r2
 80062de:	f503 7352 	add.w	r3, r3, #840	; 0x348
 80062e2:	781b      	ldrb	r3, [r3, #0]
 80062e4:	69ba      	ldr	r2, [r7, #24]
 80062e6:	4619      	mov	r1, r3
 80062e8:	f000 f80e 	bl	8006308 <ParseCSDescriptors>
                               phost->device.CfgDesc.Itf_Desc[itf_index].bInterfaceSubClass,
                               (uint8_t *)pdesc);
          }
        }
        break;
 80062ec:	e000      	b.n	80062f0 <USBH_AUDIO_ParseCSDescriptors+0xc6>

      default:
        break;
 80062ee:	bf00      	nop
  while (ptr < phost->device.CfgDesc.wTotalLength)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	f8b3 233a 	ldrh.w	r2, [r3, #826]	; 0x33a
 80062f6:	89bb      	ldrh	r3, [r7, #12]
 80062f8:	429a      	cmp	r2, r3
 80062fa:	d8bb      	bhi.n	8006274 <USBH_AUDIO_ParseCSDescriptors+0x4a>
    }
  }

  return status;
 80062fc:	7ffb      	ldrb	r3, [r7, #31]
}
 80062fe:	4618      	mov	r0, r3
 8006300:	3720      	adds	r7, #32
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}
	...

08006308 <ParseCSDescriptors>:
  * @retval USBH Status
  */
static USBH_StatusTypeDef ParseCSDescriptors(AUDIO_ClassSpecificDescTypedef *class_desc,
                                             uint8_t ac_subclass,
                                             uint8_t *pdesc)
{
 8006308:	b480      	push	{r7}
 800630a:	b085      	sub	sp, #20
 800630c:	af00      	add	r7, sp, #0
 800630e:	60f8      	str	r0, [r7, #12]
 8006310:	460b      	mov	r3, r1
 8006312:	607a      	str	r2, [r7, #4]
 8006314:	72fb      	strb	r3, [r7, #11]
  if (ac_subclass == USB_SUBCLASS_AUDIOCONTROL)
 8006316:	7afb      	ldrb	r3, [r7, #11]
 8006318:	2b01      	cmp	r3, #1
 800631a:	d163      	bne.n	80063e4 <ParseCSDescriptors+0xdc>
  {
    switch (pdesc[2])
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	3302      	adds	r3, #2
 8006320:	781b      	ldrb	r3, [r3, #0]
 8006322:	3b01      	subs	r3, #1
 8006324:	2b05      	cmp	r3, #5
 8006326:	f200 8081 	bhi.w	800642c <ParseCSDescriptors+0x124>
 800632a:	a201      	add	r2, pc, #4	; (adr r2, 8006330 <ParseCSDescriptors+0x28>)
 800632c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006330:	08006349 	.word	0x08006349
 8006334:	08006351 	.word	0x08006351
 8006338:	0800636d 	.word	0x0800636d
 800633c:	080063c7 	.word	0x080063c7
 8006340:	080063a9 	.word	0x080063a9
 8006344:	0800638b 	.word	0x0800638b
    {
      case UAC_HEADER:
        class_desc->cs_desc.HeaderDesc = (AUDIO_HeaderDescTypeDef *)(void *)pdesc;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	687a      	ldr	r2, [r7, #4]
 800634c:	601a      	str	r2, [r3, #0]
        break;
 800634e:	e070      	b.n	8006432 <ParseCSDescriptors+0x12a>

      case UAC_INPUT_TERMINAL:
        class_desc->cs_desc.InputTerminalDesc[class_desc->InputTerminalNum++] = (AUDIO_ITDescTypeDef *)(void *)pdesc;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 8006356:	1c5a      	adds	r2, r3, #1
 8006358:	b291      	uxth	r1, r2
 800635a:	68fa      	ldr	r2, [r7, #12]
 800635c:	f8a2 107e 	strh.w	r1, [r2, #126]	; 0x7e
 8006360:	68fa      	ldr	r2, [r7, #12]
 8006362:	009b      	lsls	r3, r3, #2
 8006364:	4413      	add	r3, r2
 8006366:	687a      	ldr	r2, [r7, #4]
 8006368:	605a      	str	r2, [r3, #4]
        break;
 800636a:	e062      	b.n	8006432 <ParseCSDescriptors+0x12a>

      case UAC_OUTPUT_TERMINAL:
        class_desc->cs_desc.OutputTerminalDesc[class_desc->OutputTerminalNum++] = (AUDIO_OTDescTypeDef *)(void *)pdesc;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8006372:	1c5a      	adds	r2, r3, #1
 8006374:	b291      	uxth	r1, r2
 8006376:	68fa      	ldr	r2, [r7, #12]
 8006378:	f8a2 1080 	strh.w	r1, [r2, #128]	; 0x80
 800637c:	68fa      	ldr	r2, [r7, #12]
 800637e:	3304      	adds	r3, #4
 8006380:	009b      	lsls	r3, r3, #2
 8006382:	4413      	add	r3, r2
 8006384:	687a      	ldr	r2, [r7, #4]
 8006386:	605a      	str	r2, [r3, #4]
        break;
 8006388:	e053      	b.n	8006432 <ParseCSDescriptors+0x12a>

      case UAC_FEATURE_UNIT:
        class_desc->cs_desc.FeatureUnitDesc[class_desc->FeatureUnitNum++] = (AUDIO_FeatureDescTypeDef *)(void *)pdesc;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8006390:	1c5a      	adds	r2, r3, #1
 8006392:	b291      	uxth	r1, r2
 8006394:	68fa      	ldr	r2, [r7, #12]
 8006396:	f8a2 1082 	strh.w	r1, [r2, #130]	; 0x82
 800639a:	68fa      	ldr	r2, [r7, #12]
 800639c:	3308      	adds	r3, #8
 800639e:	009b      	lsls	r3, r3, #2
 80063a0:	4413      	add	r3, r2
 80063a2:	687a      	ldr	r2, [r7, #4]
 80063a4:	605a      	str	r2, [r3, #4]
        break;
 80063a6:	e044      	b.n	8006432 <ParseCSDescriptors+0x12a>

      case UAC_SELECTOR_UNIT:
        class_desc->cs_desc.SelectorUnitDesc[class_desc->SelectorUnitNum++] = (AUDIO_SelectorDescTypeDef *)(void *)pdesc;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80063ae:	1c5a      	adds	r2, r3, #1
 80063b0:	b291      	uxth	r1, r2
 80063b2:	68fa      	ldr	r2, [r7, #12]
 80063b4:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
 80063b8:	68fa      	ldr	r2, [r7, #12]
 80063ba:	3310      	adds	r3, #16
 80063bc:	009b      	lsls	r3, r3, #2
 80063be:	4413      	add	r3, r2
 80063c0:	687a      	ldr	r2, [r7, #4]
 80063c2:	605a      	str	r2, [r3, #4]
        break;
 80063c4:	e035      	b.n	8006432 <ParseCSDescriptors+0x12a>

      case UAC_MIXER_UNIT:
        class_desc->cs_desc.MixerUnitDesc[class_desc->MixerUnitNum++] = (AUDIO_MixerDescTypeDef *)(void *)pdesc;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 80063cc:	1c5a      	adds	r2, r3, #1
 80063ce:	b291      	uxth	r1, r2
 80063d0:	68fa      	ldr	r2, [r7, #12]
 80063d2:	f8a2 1086 	strh.w	r1, [r2, #134]	; 0x86
 80063d6:	68fa      	ldr	r2, [r7, #12]
 80063d8:	330c      	adds	r3, #12
 80063da:	009b      	lsls	r3, r3, #2
 80063dc:	4413      	add	r3, r2
 80063de:	687a      	ldr	r2, [r7, #4]
 80063e0:	605a      	str	r2, [r3, #4]
        break;
 80063e2:	e026      	b.n	8006432 <ParseCSDescriptors+0x12a>
        break;
    }
  }
  else
  {
    if (ac_subclass == USB_SUBCLASS_AUDIOSTREAMING)
 80063e4:	7afb      	ldrb	r3, [r7, #11]
 80063e6:	2b02      	cmp	r3, #2
 80063e8:	d122      	bne.n	8006430 <ParseCSDescriptors+0x128>
    {
      switch (pdesc[2])
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	3302      	adds	r3, #2
 80063ee:	781b      	ldrb	r3, [r3, #0]
 80063f0:	2b01      	cmp	r3, #1
 80063f2:	d002      	beq.n	80063fa <ParseCSDescriptors+0xf2>
 80063f4:	2b02      	cmp	r3, #2
 80063f6:	d00a      	beq.n	800640e <ParseCSDescriptors+0x106>
          break;
        case UAC_FORMAT_TYPE:
          class_desc->as_desc[class_desc->ASNum++].FormatTypeDesc = (AUDIO_ASFormatTypeDescTypeDef *)(void *)pdesc;
          break;
        default:
          break;
 80063f8:	e01b      	b.n	8006432 <ParseCSDescriptors+0x12a>
          class_desc->as_desc[class_desc->ASNum].GeneralDesc = (AUDIO_ASGeneralDescTypeDef *)(void *)pdesc;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8006400:	68fa      	ldr	r2, [r7, #12]
 8006402:	330a      	adds	r3, #10
 8006404:	00db      	lsls	r3, r3, #3
 8006406:	4413      	add	r3, r2
 8006408:	687a      	ldr	r2, [r7, #4]
 800640a:	605a      	str	r2, [r3, #4]
          break;
 800640c:	e011      	b.n	8006432 <ParseCSDescriptors+0x12a>
          class_desc->as_desc[class_desc->ASNum++].FormatTypeDesc = (AUDIO_ASFormatTypeDescTypeDef *)(void *)pdesc;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8006414:	1c5a      	adds	r2, r3, #1
 8006416:	b291      	uxth	r1, r2
 8006418:	68fa      	ldr	r2, [r7, #12]
 800641a:	f8a2 107c 	strh.w	r1, [r2, #124]	; 0x7c
 800641e:	68fa      	ldr	r2, [r7, #12]
 8006420:	330a      	adds	r3, #10
 8006422:	00db      	lsls	r3, r3, #3
 8006424:	4413      	add	r3, r2
 8006426:	687a      	ldr	r2, [r7, #4]
 8006428:	609a      	str	r2, [r3, #8]
          break;
 800642a:	e002      	b.n	8006432 <ParseCSDescriptors+0x12a>
        break;
 800642c:	bf00      	nop
 800642e:	e000      	b.n	8006432 <ParseCSDescriptors+0x12a>
      }
    }
 8006430:	bf00      	nop
  }

  return USBH_OK;
 8006432:	2300      	movs	r3, #0
}
 8006434:	4618      	mov	r0, r3
 8006436:	3714      	adds	r7, #20
 8006438:	46bd      	mov	sp, r7
 800643a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643e:	4770      	bx	lr

08006440 <USBH_AUDIO_FindLinkedUnit>:
  * @param  phost: Host handle
  * @param  UnitID: Unit identifer
  * @retval UnitID, Index and Type of the associated Unit
  */
static uint32_t USBH_AUDIO_FindLinkedUnit(USBH_HandleTypeDef *phost, uint8_t UnitID)
{
 8006440:	b480      	push	{r7}
 8006442:	b085      	sub	sp, #20
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
 8006448:	460b      	mov	r3, r1
 800644a:	70fb      	strb	r3, [r7, #3]
  uint8_t Index;
  AUDIO_HandleTypeDef *AUDIO_Handle;

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8006452:	69db      	ldr	r3, [r3, #28]
 8006454:	60bb      	str	r3, [r7, #8]

  /* Find Feature Unit */
  for (Index = 0U; Index < AUDIO_Handle->class_desc.FeatureUnitNum; Index ++)
 8006456:	2300      	movs	r3, #0
 8006458:	73fb      	strb	r3, [r7, #15]
 800645a:	e01b      	b.n	8006494 <USBH_AUDIO_FindLinkedUnit+0x54>
  {
    if (AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[Index]->bSourceID == UnitID)
 800645c:	7bfb      	ldrb	r3, [r7, #15]
 800645e:	68ba      	ldr	r2, [r7, #8]
 8006460:	3322      	adds	r3, #34	; 0x22
 8006462:	009b      	lsls	r3, r3, #2
 8006464:	4413      	add	r3, r2
 8006466:	689b      	ldr	r3, [r3, #8]
 8006468:	791b      	ldrb	r3, [r3, #4]
 800646a:	78fa      	ldrb	r2, [r7, #3]
 800646c:	429a      	cmp	r2, r3
 800646e:	d10e      	bne.n	800648e <USBH_AUDIO_FindLinkedUnit+0x4e>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[Index]->bUnitID;
 8006470:	7bfb      	ldrb	r3, [r7, #15]
 8006472:	68ba      	ldr	r2, [r7, #8]
 8006474:	3322      	adds	r3, #34	; 0x22
 8006476:	009b      	lsls	r3, r3, #2
 8006478:	4413      	add	r3, r2
 800647a:	689b      	ldr	r3, [r3, #8]
 800647c:	78db      	ldrb	r3, [r3, #3]
 800647e:	70fb      	strb	r3, [r7, #3]

      return (((uint32_t)UnitID << 16U) | (UAC_FEATURE_UNIT << 8U) | (uint32_t)Index);
 8006480:	78fb      	ldrb	r3, [r7, #3]
 8006482:	041a      	lsls	r2, r3, #16
 8006484:	7bfb      	ldrb	r3, [r7, #15]
 8006486:	4313      	orrs	r3, r2
 8006488:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800648c:	e089      	b.n	80065a2 <USBH_AUDIO_FindLinkedUnit+0x162>
  for (Index = 0U; Index < AUDIO_Handle->class_desc.FeatureUnitNum; Index ++)
 800648e:	7bfb      	ldrb	r3, [r7, #15]
 8006490:	3301      	adds	r3, #1
 8006492:	73fb      	strb	r3, [r7, #15]
 8006494:	7bfb      	ldrb	r3, [r7, #15]
 8006496:	b29a      	uxth	r2, r3
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	f8b3 30ee 	ldrh.w	r3, [r3, #238]	; 0xee
 800649e:	429a      	cmp	r2, r3
 80064a0:	d3dc      	bcc.n	800645c <USBH_AUDIO_FindLinkedUnit+0x1c>
    }
  }

  /* Find Mixer Unit */
  for (Index = 0U; Index < AUDIO_Handle->class_desc.MixerUnitNum; Index ++)
 80064a2:	2300      	movs	r3, #0
 80064a4:	73fb      	strb	r3, [r7, #15]
 80064a6:	e026      	b.n	80064f6 <USBH_AUDIO_FindLinkedUnit+0xb6>
  {
    if ((AUDIO_Handle->class_desc.cs_desc.MixerUnitDesc[Index]->bSourceID0 == UnitID) ||
 80064a8:	7bfb      	ldrb	r3, [r7, #15]
 80064aa:	68ba      	ldr	r2, [r7, #8]
 80064ac:	3326      	adds	r3, #38	; 0x26
 80064ae:	009b      	lsls	r3, r3, #2
 80064b0:	4413      	add	r3, r2
 80064b2:	689b      	ldr	r3, [r3, #8]
 80064b4:	795b      	ldrb	r3, [r3, #5]
 80064b6:	78fa      	ldrb	r2, [r7, #3]
 80064b8:	429a      	cmp	r2, r3
 80064ba:	d009      	beq.n	80064d0 <USBH_AUDIO_FindLinkedUnit+0x90>
        (AUDIO_Handle->class_desc.cs_desc.MixerUnitDesc[Index]->bSourceID1 == UnitID))
 80064bc:	7bfb      	ldrb	r3, [r7, #15]
 80064be:	68ba      	ldr	r2, [r7, #8]
 80064c0:	3326      	adds	r3, #38	; 0x26
 80064c2:	009b      	lsls	r3, r3, #2
 80064c4:	4413      	add	r3, r2
 80064c6:	689b      	ldr	r3, [r3, #8]
 80064c8:	799b      	ldrb	r3, [r3, #6]
    if ((AUDIO_Handle->class_desc.cs_desc.MixerUnitDesc[Index]->bSourceID0 == UnitID) ||
 80064ca:	78fa      	ldrb	r2, [r7, #3]
 80064cc:	429a      	cmp	r2, r3
 80064ce:	d10f      	bne.n	80064f0 <USBH_AUDIO_FindLinkedUnit+0xb0>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.MixerUnitDesc[Index]->bUnitID;
 80064d0:	7bfb      	ldrb	r3, [r7, #15]
 80064d2:	68ba      	ldr	r2, [r7, #8]
 80064d4:	3326      	adds	r3, #38	; 0x26
 80064d6:	009b      	lsls	r3, r3, #2
 80064d8:	4413      	add	r3, r2
 80064da:	689b      	ldr	r3, [r3, #8]
 80064dc:	78db      	ldrb	r3, [r3, #3]
 80064de:	70fb      	strb	r3, [r7, #3]

      return ((UnitID << 16U) | (UAC_MIXER_UNIT << 8U) | Index);
 80064e0:	78fb      	ldrb	r3, [r7, #3]
 80064e2:	041b      	lsls	r3, r3, #16
 80064e4:	461a      	mov	r2, r3
 80064e6:	7bfb      	ldrb	r3, [r7, #15]
 80064e8:	4313      	orrs	r3, r2
 80064ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80064ee:	e058      	b.n	80065a2 <USBH_AUDIO_FindLinkedUnit+0x162>
  for (Index = 0U; Index < AUDIO_Handle->class_desc.MixerUnitNum; Index ++)
 80064f0:	7bfb      	ldrb	r3, [r7, #15]
 80064f2:	3301      	adds	r3, #1
 80064f4:	73fb      	strb	r3, [r7, #15]
 80064f6:	7bfb      	ldrb	r3, [r7, #15]
 80064f8:	b29a      	uxth	r2, r3
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	f8b3 30f2 	ldrh.w	r3, [r3, #242]	; 0xf2
 8006500:	429a      	cmp	r2, r3
 8006502:	d3d1      	bcc.n	80064a8 <USBH_AUDIO_FindLinkedUnit+0x68>
    }
  }

  /* Find Selector Unit */
  for (Index = 0U; Index < AUDIO_Handle->class_desc.SelectorUnitNum; Index ++)
 8006504:	2300      	movs	r3, #0
 8006506:	73fb      	strb	r3, [r7, #15]
 8006508:	e01c      	b.n	8006544 <USBH_AUDIO_FindLinkedUnit+0x104>
  {
    if (AUDIO_Handle->class_desc.cs_desc.SelectorUnitDesc[Index]->bSourceID0 == UnitID)
 800650a:	7bfb      	ldrb	r3, [r7, #15]
 800650c:	68ba      	ldr	r2, [r7, #8]
 800650e:	332a      	adds	r3, #42	; 0x2a
 8006510:	009b      	lsls	r3, r3, #2
 8006512:	4413      	add	r3, r2
 8006514:	689b      	ldr	r3, [r3, #8]
 8006516:	795b      	ldrb	r3, [r3, #5]
 8006518:	78fa      	ldrb	r2, [r7, #3]
 800651a:	429a      	cmp	r2, r3
 800651c:	d10f      	bne.n	800653e <USBH_AUDIO_FindLinkedUnit+0xfe>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.SelectorUnitDesc[Index]->bUnitID;
 800651e:	7bfb      	ldrb	r3, [r7, #15]
 8006520:	68ba      	ldr	r2, [r7, #8]
 8006522:	332a      	adds	r3, #42	; 0x2a
 8006524:	009b      	lsls	r3, r3, #2
 8006526:	4413      	add	r3, r2
 8006528:	689b      	ldr	r3, [r3, #8]
 800652a:	78db      	ldrb	r3, [r3, #3]
 800652c:	70fb      	strb	r3, [r7, #3]

      return ((UnitID << 16U) | (UAC_SELECTOR_UNIT << 8U) | Index);
 800652e:	78fb      	ldrb	r3, [r7, #3]
 8006530:	041b      	lsls	r3, r3, #16
 8006532:	461a      	mov	r2, r3
 8006534:	7bfb      	ldrb	r3, [r7, #15]
 8006536:	4313      	orrs	r3, r2
 8006538:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 800653c:	e031      	b.n	80065a2 <USBH_AUDIO_FindLinkedUnit+0x162>
  for (Index = 0U; Index < AUDIO_Handle->class_desc.SelectorUnitNum; Index ++)
 800653e:	7bfb      	ldrb	r3, [r7, #15]
 8006540:	3301      	adds	r3, #1
 8006542:	73fb      	strb	r3, [r7, #15]
 8006544:	7bfb      	ldrb	r3, [r7, #15]
 8006546:	b29a      	uxth	r2, r3
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	f8b3 30f0 	ldrh.w	r3, [r3, #240]	; 0xf0
 800654e:	429a      	cmp	r2, r3
 8006550:	d3db      	bcc.n	800650a <USBH_AUDIO_FindLinkedUnit+0xca>
    }
  }

  /* Find OT Unit */
  for (Index = 0U; Index < AUDIO_Handle->class_desc.OutputTerminalNum; Index ++)
 8006552:	2300      	movs	r3, #0
 8006554:	73fb      	strb	r3, [r7, #15]
 8006556:	e01c      	b.n	8006592 <USBH_AUDIO_FindLinkedUnit+0x152>
  {
    if (AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[Index]->bSourceID == UnitID)
 8006558:	7bfb      	ldrb	r3, [r7, #15]
 800655a:	68ba      	ldr	r2, [r7, #8]
 800655c:	331e      	adds	r3, #30
 800655e:	009b      	lsls	r3, r3, #2
 8006560:	4413      	add	r3, r2
 8006562:	689b      	ldr	r3, [r3, #8]
 8006564:	79db      	ldrb	r3, [r3, #7]
 8006566:	78fa      	ldrb	r2, [r7, #3]
 8006568:	429a      	cmp	r2, r3
 800656a:	d10f      	bne.n	800658c <USBH_AUDIO_FindLinkedUnit+0x14c>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[Index]->bTerminalID;
 800656c:	7bfb      	ldrb	r3, [r7, #15]
 800656e:	68ba      	ldr	r2, [r7, #8]
 8006570:	331e      	adds	r3, #30
 8006572:	009b      	lsls	r3, r3, #2
 8006574:	4413      	add	r3, r2
 8006576:	689b      	ldr	r3, [r3, #8]
 8006578:	78db      	ldrb	r3, [r3, #3]
 800657a:	70fb      	strb	r3, [r7, #3]

      return ((UnitID << 16U) | (UAC_OUTPUT_TERMINAL << 8U) | Index);
 800657c:	78fb      	ldrb	r3, [r7, #3]
 800657e:	041b      	lsls	r3, r3, #16
 8006580:	461a      	mov	r2, r3
 8006582:	7bfb      	ldrb	r3, [r7, #15]
 8006584:	4313      	orrs	r3, r2
 8006586:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800658a:	e00a      	b.n	80065a2 <USBH_AUDIO_FindLinkedUnit+0x162>
  for (Index = 0U; Index < AUDIO_Handle->class_desc.OutputTerminalNum; Index ++)
 800658c:	7bfb      	ldrb	r3, [r7, #15]
 800658e:	3301      	adds	r3, #1
 8006590:	73fb      	strb	r3, [r7, #15]
 8006592:	7bfb      	ldrb	r3, [r7, #15]
 8006594:	b29a      	uxth	r2, r3
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	f8b3 30ec 	ldrh.w	r3, [r3, #236]	; 0xec
 800659c:	429a      	cmp	r2, r3
 800659e:	d3db      	bcc.n	8006558 <USBH_AUDIO_FindLinkedUnit+0x118>
    }
  }

  /* No associated Unit found return undefined ID 0x00*/
  return 0U;
 80065a0:	2300      	movs	r3, #0
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	3714      	adds	r7, #20
 80065a6:	46bd      	mov	sp, r7
 80065a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ac:	4770      	bx	lr
	...

080065b0 <USBH_AUDIO_BuildMicrophonePath>:
  * @brief  Build full path for Microphone device
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_BuildMicrophonePath(USBH_HandleTypeDef *phost)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b086      	sub	sp, #24
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
  uint8_t UnitID = 0U, Type, Index;
 80065b8:	2300      	movs	r3, #0
 80065ba:	75fb      	strb	r3, [r7, #23]
  uint32_t value;
  uint8_t terminalIndex;
  AUDIO_HandleTypeDef *AUDIO_Handle;
  USBH_StatusTypeDef ret = USBH_OK;
 80065bc:	2300      	movs	r3, #0
 80065be:	757b      	strb	r3, [r7, #21]

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80065c6:	69db      	ldr	r3, [r3, #28]
 80065c8:	613b      	str	r3, [r7, #16]

  /*Find microphone IT*/
  for (terminalIndex = 0U; terminalIndex < AUDIO_Handle->class_desc.InputTerminalNum; terminalIndex++)
 80065ca:	2300      	movs	r3, #0
 80065cc:	75bb      	strb	r3, [r7, #22]
 80065ce:	e02c      	b.n	800662a <USBH_AUDIO_BuildMicrophonePath+0x7a>
  {
    if (LE16(AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->wTerminalType) == 0x201)
 80065d0:	7dbb      	ldrb	r3, [r7, #22]
 80065d2:	693a      	ldr	r2, [r7, #16]
 80065d4:	331a      	adds	r3, #26
 80065d6:	009b      	lsls	r3, r3, #2
 80065d8:	4413      	add	r3, r2
 80065da:	689b      	ldr	r3, [r3, #8]
 80065dc:	791b      	ldrb	r3, [r3, #4]
 80065de:	4619      	mov	r1, r3
 80065e0:	7dbb      	ldrb	r3, [r7, #22]
 80065e2:	693a      	ldr	r2, [r7, #16]
 80065e4:	331a      	adds	r3, #26
 80065e6:	009b      	lsls	r3, r3, #2
 80065e8:	4413      	add	r3, r2
 80065ea:	689b      	ldr	r3, [r3, #8]
 80065ec:	795b      	ldrb	r3, [r3, #5]
 80065ee:	b29b      	uxth	r3, r3
 80065f0:	021b      	lsls	r3, r3, #8
 80065f2:	b29b      	uxth	r3, r3
 80065f4:	430b      	orrs	r3, r1
 80065f6:	f240 2201 	movw	r2, #513	; 0x201
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d112      	bne.n	8006624 <USBH_AUDIO_BuildMicrophonePath+0x74>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->bTerminalID;
 80065fe:	7dbb      	ldrb	r3, [r7, #22]
 8006600:	693a      	ldr	r2, [r7, #16]
 8006602:	331a      	adds	r3, #26
 8006604:	009b      	lsls	r3, r3, #2
 8006606:	4413      	add	r3, r2
 8006608:	689b      	ldr	r3, [r3, #8]
 800660a:	78db      	ldrb	r3, [r3, #3]
 800660c:	75fb      	strb	r3, [r7, #23]
      AUDIO_Handle->microphone.asociated_channels =  AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->bNrChannels;
 800660e:	7dbb      	ldrb	r3, [r7, #22]
 8006610:	693a      	ldr	r2, [r7, #16]
 8006612:	331a      	adds	r3, #26
 8006614:	009b      	lsls	r3, r3, #2
 8006616:	4413      	add	r3, r2
 8006618:	689b      	ldr	r3, [r3, #8]
 800661a:	79da      	ldrb	r2, [r3, #7]
 800661c:	693b      	ldr	r3, [r7, #16]
 800661e:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151
      break;
 8006622:	e009      	b.n	8006638 <USBH_AUDIO_BuildMicrophonePath+0x88>
  for (terminalIndex = 0U; terminalIndex < AUDIO_Handle->class_desc.InputTerminalNum; terminalIndex++)
 8006624:	7dbb      	ldrb	r3, [r7, #22]
 8006626:	3301      	adds	r3, #1
 8006628:	75bb      	strb	r3, [r7, #22]
 800662a:	7dbb      	ldrb	r3, [r7, #22]
 800662c:	b29a      	uxth	r2, r3
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	f8b3 30ea 	ldrh.w	r3, [r3, #234]	; 0xea
 8006634:	429a      	cmp	r2, r3
 8006636:	d3cb      	bcc.n	80065d0 <USBH_AUDIO_BuildMicrophonePath+0x20>
    }
  }

  do
  {
    value = USBH_AUDIO_FindLinkedUnit(phost, UnitID);
 8006638:	7dfb      	ldrb	r3, [r7, #23]
 800663a:	4619      	mov	r1, r3
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f7ff feff 	bl	8006440 <USBH_AUDIO_FindLinkedUnit>
 8006642:	60f8      	str	r0, [r7, #12]

    if (!value)
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d101      	bne.n	800664e <USBH_AUDIO_BuildMicrophonePath+0x9e>
    {
      return USBH_FAIL;
 800664a:	2302      	movs	r3, #2
 800664c:	e034      	b.n	80066b8 <USBH_AUDIO_BuildMicrophonePath+0x108>
    }

    Index = (uint8_t)(value & 0xFFU);
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	72fb      	strb	r3, [r7, #11]
    Type = (uint8_t)((value >> 8U) & 0xFFU);
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	0a1b      	lsrs	r3, r3, #8
 8006656:	72bb      	strb	r3, [r7, #10]
    UnitID = (uint8_t)((value >> 16U) & 0xFFU);
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	0c1b      	lsrs	r3, r3, #16
 800665c:	75fb      	strb	r3, [r7, #23]

    switch (Type)
 800665e:	7abb      	ldrb	r3, [r7, #10]
 8006660:	3b03      	subs	r3, #3
 8006662:	2b03      	cmp	r3, #3
 8006664:	d81e      	bhi.n	80066a4 <USBH_AUDIO_BuildMicrophonePath+0xf4>
 8006666:	a201      	add	r2, pc, #4	; (adr r2, 800666c <USBH_AUDIO_BuildMicrophonePath+0xbc>)
 8006668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800666c:	0800669b 	.word	0x0800669b
 8006670:	08006687 	.word	0x08006687
 8006674:	08006691 	.word	0x08006691
 8006678:	0800667d 	.word	0x0800667d
    {
      case UAC_FEATURE_UNIT:
        AUDIO_Handle->microphone.asociated_feature = Index;
 800667c:	693b      	ldr	r3, [r7, #16]
 800667e:	7afa      	ldrb	r2, [r7, #11]
 8006680:	f883 214f 	strb.w	r2, [r3, #335]	; 0x14f
        break;
 8006684:	e011      	b.n	80066aa <USBH_AUDIO_BuildMicrophonePath+0xfa>

      case UAC_MIXER_UNIT:
        AUDIO_Handle->microphone.asociated_mixer = Index;
 8006686:	693b      	ldr	r3, [r7, #16]
 8006688:	7afa      	ldrb	r2, [r7, #11]
 800668a:	f883 214d 	strb.w	r2, [r3, #333]	; 0x14d
        break;
 800668e:	e00c      	b.n	80066aa <USBH_AUDIO_BuildMicrophonePath+0xfa>

      case UAC_SELECTOR_UNIT:
        AUDIO_Handle->microphone.asociated_selector = Index;
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	7afa      	ldrb	r2, [r7, #11]
 8006694:	f883 214e 	strb.w	r2, [r3, #334]	; 0x14e
        break;
 8006698:	e007      	b.n	80066aa <USBH_AUDIO_BuildMicrophonePath+0xfa>

      case UAC_OUTPUT_TERMINAL:
        AUDIO_Handle->microphone.asociated_terminal = Index;
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	7afa      	ldrb	r2, [r7, #11]
 800669e:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
        break;
 80066a2:	e002      	b.n	80066aa <USBH_AUDIO_BuildMicrophonePath+0xfa>

      default:
        ret = USBH_FAIL;
 80066a4:	2302      	movs	r3, #2
 80066a6:	757b      	strb	r3, [r7, #21]
        break;
 80066a8:	bf00      	nop
    }
  }
  while ((Type != UAC_OUTPUT_TERMINAL) && (value > 0U));
 80066aa:	7abb      	ldrb	r3, [r7, #10]
 80066ac:	2b03      	cmp	r3, #3
 80066ae:	d002      	beq.n	80066b6 <USBH_AUDIO_BuildMicrophonePath+0x106>
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d1c0      	bne.n	8006638 <USBH_AUDIO_BuildMicrophonePath+0x88>

  return ret;
 80066b6:	7d7b      	ldrb	r3, [r7, #21]
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	3718      	adds	r7, #24
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}

080066c0 <USBH_AUDIO_BuildHeadphonePath>:
  * @brief  Build full path for Headphone device
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_BuildHeadphonePath(USBH_HandleTypeDef *phost)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b086      	sub	sp, #24
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  uint8_t UnitID = 0U, Type, Index;
 80066c8:	2300      	movs	r3, #0
 80066ca:	75fb      	strb	r3, [r7, #23]
  uint32_t value;
  uint8_t terminalIndex;
  AUDIO_HandleTypeDef *AUDIO_Handle;
  USBH_StatusTypeDef ret = USBH_OK;
 80066cc:	2300      	movs	r3, #0
 80066ce:	753b      	strb	r3, [r7, #20]

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80066d6:	69db      	ldr	r3, [r3, #28]
 80066d8:	613b      	str	r3, [r7, #16]

  /* Find association between audio streaming and microphone */
  for (terminalIndex = 0U; terminalIndex < AUDIO_Handle->class_desc.InputTerminalNum; terminalIndex++)
 80066da:	2300      	movs	r3, #0
 80066dc:	757b      	strb	r3, [r7, #21]
 80066de:	e02c      	b.n	800673a <USBH_AUDIO_BuildHeadphonePath+0x7a>
  {
    if (LE16(AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->wTerminalType) == 0x101)
 80066e0:	7d7b      	ldrb	r3, [r7, #21]
 80066e2:	693a      	ldr	r2, [r7, #16]
 80066e4:	331a      	adds	r3, #26
 80066e6:	009b      	lsls	r3, r3, #2
 80066e8:	4413      	add	r3, r2
 80066ea:	689b      	ldr	r3, [r3, #8]
 80066ec:	791b      	ldrb	r3, [r3, #4]
 80066ee:	4619      	mov	r1, r3
 80066f0:	7d7b      	ldrb	r3, [r7, #21]
 80066f2:	693a      	ldr	r2, [r7, #16]
 80066f4:	331a      	adds	r3, #26
 80066f6:	009b      	lsls	r3, r3, #2
 80066f8:	4413      	add	r3, r2
 80066fa:	689b      	ldr	r3, [r3, #8]
 80066fc:	795b      	ldrb	r3, [r3, #5]
 80066fe:	b29b      	uxth	r3, r3
 8006700:	021b      	lsls	r3, r3, #8
 8006702:	b29b      	uxth	r3, r3
 8006704:	430b      	orrs	r3, r1
 8006706:	f240 1201 	movw	r2, #257	; 0x101
 800670a:	4293      	cmp	r3, r2
 800670c:	d112      	bne.n	8006734 <USBH_AUDIO_BuildHeadphonePath+0x74>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->bTerminalID;
 800670e:	7d7b      	ldrb	r3, [r7, #21]
 8006710:	693a      	ldr	r2, [r7, #16]
 8006712:	331a      	adds	r3, #26
 8006714:	009b      	lsls	r3, r3, #2
 8006716:	4413      	add	r3, r2
 8006718:	689b      	ldr	r3, [r3, #8]
 800671a:	78db      	ldrb	r3, [r3, #3]
 800671c:	75fb      	strb	r3, [r7, #23]
      AUDIO_Handle->headphone.asociated_channels =  AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->bNrChannels;
 800671e:	7d7b      	ldrb	r3, [r7, #21]
 8006720:	693a      	ldr	r2, [r7, #16]
 8006722:	331a      	adds	r3, #26
 8006724:	009b      	lsls	r3, r3, #2
 8006726:	4413      	add	r3, r2
 8006728:	689b      	ldr	r3, [r3, #8]
 800672a:	79da      	ldrb	r2, [r3, #7]
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
      break;
 8006732:	e009      	b.n	8006748 <USBH_AUDIO_BuildHeadphonePath+0x88>
  for (terminalIndex = 0U; terminalIndex < AUDIO_Handle->class_desc.InputTerminalNum; terminalIndex++)
 8006734:	7d7b      	ldrb	r3, [r7, #21]
 8006736:	3301      	adds	r3, #1
 8006738:	757b      	strb	r3, [r7, #21]
 800673a:	7d7b      	ldrb	r3, [r7, #21]
 800673c:	b29a      	uxth	r2, r3
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	f8b3 30ea 	ldrh.w	r3, [r3, #234]	; 0xea
 8006744:	429a      	cmp	r2, r3
 8006746:	d3cb      	bcc.n	80066e0 <USBH_AUDIO_BuildHeadphonePath+0x20>
    }
  }

  for (Index = 0U; Index < AUDIO_Handle->class_desc.ASNum; Index++)
 8006748:	2300      	movs	r3, #0
 800674a:	75bb      	strb	r3, [r7, #22]
 800674c:	e011      	b.n	8006772 <USBH_AUDIO_BuildHeadphonePath+0xb2>
  {
    if (AUDIO_Handle->class_desc.as_desc[Index].GeneralDesc->bTerminalLink == UnitID)
 800674e:	7dbb      	ldrb	r3, [r7, #22]
 8006750:	693a      	ldr	r2, [r7, #16]
 8006752:	3317      	adds	r3, #23
 8006754:	00db      	lsls	r3, r3, #3
 8006756:	4413      	add	r3, r2
 8006758:	689b      	ldr	r3, [r3, #8]
 800675a:	78db      	ldrb	r3, [r3, #3]
 800675c:	7dfa      	ldrb	r2, [r7, #23]
 800675e:	429a      	cmp	r2, r3
 8006760:	d104      	bne.n	800676c <USBH_AUDIO_BuildHeadphonePath+0xac>
    {
      AUDIO_Handle->headphone.asociated_as = Index;
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	7dba      	ldrb	r2, [r7, #22]
 8006766:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
      break;
 800676a:	e009      	b.n	8006780 <USBH_AUDIO_BuildHeadphonePath+0xc0>
  for (Index = 0U; Index < AUDIO_Handle->class_desc.ASNum; Index++)
 800676c:	7dbb      	ldrb	r3, [r7, #22]
 800676e:	3301      	adds	r3, #1
 8006770:	75bb      	strb	r3, [r7, #22]
 8006772:	7dbb      	ldrb	r3, [r7, #22]
 8006774:	b29a      	uxth	r2, r3
 8006776:	693b      	ldr	r3, [r7, #16]
 8006778:	f8b3 30e8 	ldrh.w	r3, [r3, #232]	; 0xe8
 800677c:	429a      	cmp	r2, r3
 800677e:	d3e6      	bcc.n	800674e <USBH_AUDIO_BuildHeadphonePath+0x8e>
    }
  }

  do
  {
    value = USBH_AUDIO_FindLinkedUnit(phost, UnitID);
 8006780:	7dfb      	ldrb	r3, [r7, #23]
 8006782:	4619      	mov	r1, r3
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f7ff fe5b 	bl	8006440 <USBH_AUDIO_FindLinkedUnit>
 800678a:	60f8      	str	r0, [r7, #12]

    if (!value)
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d101      	bne.n	8006796 <USBH_AUDIO_BuildHeadphonePath+0xd6>
    {
      return USBH_FAIL;
 8006792:	2302      	movs	r3, #2
 8006794:	e053      	b.n	800683e <USBH_AUDIO_BuildHeadphonePath+0x17e>
    }

    Index = (uint8_t)(value & 0xFFU);
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	75bb      	strb	r3, [r7, #22]
    Type = (uint8_t)((value >> 8U) & 0xFFU);
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	0a1b      	lsrs	r3, r3, #8
 800679e:	72fb      	strb	r3, [r7, #11]
    UnitID = (uint8_t)((value >> 16U) & 0xFFU);
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	0c1b      	lsrs	r3, r3, #16
 80067a4:	75fb      	strb	r3, [r7, #23]

    switch (Type)
 80067a6:	7afb      	ldrb	r3, [r7, #11]
 80067a8:	3b03      	subs	r3, #3
 80067aa:	2b03      	cmp	r3, #3
 80067ac:	d83c      	bhi.n	8006828 <USBH_AUDIO_BuildHeadphonePath+0x168>
 80067ae:	a201      	add	r2, pc, #4	; (adr r2, 80067b4 <USBH_AUDIO_BuildHeadphonePath+0xf4>)
 80067b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067b4:	080067e3 	.word	0x080067e3
 80067b8:	080067cf 	.word	0x080067cf
 80067bc:	080067d9 	.word	0x080067d9
 80067c0:	080067c5 	.word	0x080067c5
    {
      case UAC_FEATURE_UNIT:
        AUDIO_Handle->headphone.asociated_feature = Index;
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	7dba      	ldrb	r2, [r7, #22]
 80067c8:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
        break;
 80067cc:	e030      	b.n	8006830 <USBH_AUDIO_BuildHeadphonePath+0x170>

      case UAC_MIXER_UNIT:
        AUDIO_Handle->headphone.asociated_mixer = Index;
 80067ce:	693b      	ldr	r3, [r7, #16]
 80067d0:	7dba      	ldrb	r2, [r7, #22]
 80067d2:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
        break;
 80067d6:	e02b      	b.n	8006830 <USBH_AUDIO_BuildHeadphonePath+0x170>

      case UAC_SELECTOR_UNIT:
        AUDIO_Handle->headphone.asociated_selector = Index;
 80067d8:	693b      	ldr	r3, [r7, #16]
 80067da:	7dba      	ldrb	r2, [r7, #22]
 80067dc:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
        break;
 80067e0:	e026      	b.n	8006830 <USBH_AUDIO_BuildHeadphonePath+0x170>

      case UAC_OUTPUT_TERMINAL:
        AUDIO_Handle->headphone.asociated_terminal = Index;
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	7dba      	ldrb	r2, [r7, #22]
 80067e6:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
        if (Index < AUDIO_MAX_NUM_OUT_TERMINAL)
 80067ea:	7dbb      	ldrb	r3, [r7, #22]
 80067ec:	2b03      	cmp	r3, #3
 80067ee:	d818      	bhi.n	8006822 <USBH_AUDIO_BuildHeadphonePath+0x162>
        {
          if (LE16(AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[Index]->wTerminalType) != 0x103)
 80067f0:	7dbb      	ldrb	r3, [r7, #22]
 80067f2:	693a      	ldr	r2, [r7, #16]
 80067f4:	331e      	adds	r3, #30
 80067f6:	009b      	lsls	r3, r3, #2
 80067f8:	4413      	add	r3, r2
 80067fa:	689b      	ldr	r3, [r3, #8]
 80067fc:	791b      	ldrb	r3, [r3, #4]
 80067fe:	4619      	mov	r1, r3
 8006800:	7dbb      	ldrb	r3, [r7, #22]
 8006802:	693a      	ldr	r2, [r7, #16]
 8006804:	331e      	adds	r3, #30
 8006806:	009b      	lsls	r3, r3, #2
 8006808:	4413      	add	r3, r2
 800680a:	689b      	ldr	r3, [r3, #8]
 800680c:	795b      	ldrb	r3, [r3, #5]
 800680e:	b29b      	uxth	r3, r3
 8006810:	021b      	lsls	r3, r3, #8
 8006812:	b29b      	uxth	r3, r3
 8006814:	430b      	orrs	r3, r1
 8006816:	f240 1203 	movw	r2, #259	; 0x103
 800681a:	4293      	cmp	r3, r2
 800681c:	d007      	beq.n	800682e <USBH_AUDIO_BuildHeadphonePath+0x16e>
          {
            return  USBH_OK;
 800681e:	2300      	movs	r3, #0
 8006820:	e00d      	b.n	800683e <USBH_AUDIO_BuildHeadphonePath+0x17e>
          }
        }
        else
        {
          ret = USBH_FAIL;
 8006822:	2302      	movs	r3, #2
 8006824:	753b      	strb	r3, [r7, #20]
        }
        break;
 8006826:	e002      	b.n	800682e <USBH_AUDIO_BuildHeadphonePath+0x16e>

      default:
        ret = USBH_FAIL;
 8006828:	2302      	movs	r3, #2
 800682a:	753b      	strb	r3, [r7, #20]
        break;
 800682c:	e000      	b.n	8006830 <USBH_AUDIO_BuildHeadphonePath+0x170>
        break;
 800682e:	bf00      	nop
    }
  }
  while ((Type != UAC_OUTPUT_TERMINAL) && (value > 0U));
 8006830:	7afb      	ldrb	r3, [r7, #11]
 8006832:	2b03      	cmp	r3, #3
 8006834:	d002      	beq.n	800683c <USBH_AUDIO_BuildHeadphonePath+0x17c>
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d1a1      	bne.n	8006780 <USBH_AUDIO_BuildHeadphonePath+0xc0>

  return ret;
 800683c:	7d3b      	ldrb	r3, [r7, #20]
}
 800683e:	4618      	mov	r0, r3
 8006840:	3718      	adds	r7, #24
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}
 8006846:	bf00      	nop

08006848 <USBH_AC_SetCur>:
                                         uint8_t subtype,
                                         uint8_t feature,
                                         uint8_t controlSelector,
                                         uint8_t channel,
                                         uint16_t length)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b086      	sub	sp, #24
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
 8006850:	4608      	mov	r0, r1
 8006852:	4611      	mov	r1, r2
 8006854:	461a      	mov	r2, r3
 8006856:	4603      	mov	r3, r0
 8006858:	70fb      	strb	r3, [r7, #3]
 800685a:	460b      	mov	r3, r1
 800685c:	70bb      	strb	r3, [r7, #2]
 800685e:	4613      	mov	r3, r2
 8006860:	707b      	strb	r3, [r7, #1]
  uint16_t wValue = 0U, wIndex = 0U, wLength = 0U;
 8006862:	2300      	movs	r3, #0
 8006864:	82fb      	strh	r3, [r7, #22]
 8006866:	2300      	movs	r3, #0
 8006868:	82bb      	strh	r3, [r7, #20]
 800686a:	2300      	movs	r3, #0
 800686c:	827b      	strh	r3, [r7, #18]
  uint8_t UnitID, InterfaceNum;
  AUDIO_HandleTypeDef *AUDIO_Handle;
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8006874:	69db      	ldr	r3, [r3, #28]
 8006876:	60fb      	str	r3, [r7, #12]
  USBH_StatusTypeDef ret = USBH_OK;
 8006878:	2300      	movs	r3, #0
 800687a:	747b      	strb	r3, [r7, #17]

  switch (subtype)
 800687c:	78fb      	ldrb	r3, [r7, #3]
 800687e:	2b02      	cmp	r3, #2
 8006880:	d002      	beq.n	8006888 <USBH_AC_SetCur+0x40>
 8006882:	2b06      	cmp	r3, #6
 8006884:	d018      	beq.n	80068b8 <USBH_AC_SetCur+0x70>
 8006886:	e035      	b.n	80068f4 <USBH_AC_SetCur+0xac>
  {
    case UAC_INPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[0]->bTerminalID;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800688c:	78db      	ldrb	r3, [r3, #3]
 800688e:	72fb      	strb	r3, [r7, #11]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8006890:	2300      	movs	r3, #0
 8006892:	72bb      	strb	r3, [r7, #10]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8006894:	7afb      	ldrb	r3, [r7, #11]
 8006896:	b29b      	uxth	r3, r3
 8006898:	021b      	lsls	r3, r3, #8
 800689a:	b29a      	uxth	r2, r3
 800689c:	7abb      	ldrb	r3, [r7, #10]
 800689e:	b29b      	uxth	r3, r3
 80068a0:	4313      	orrs	r3, r2
 80068a2:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 80068a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80068a8:	82fb      	strh	r3, [r7, #22]
      AUDIO_Handle->mem[0] = 0x00U;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2200      	movs	r2, #0
 80068ae:	f8a3 2190 	strh.w	r2, [r3, #400]	; 0x190

      wLength = 1U;
 80068b2:	2301      	movs	r3, #1
 80068b4:	827b      	strh	r3, [r7, #18]
      break;
 80068b6:	e020      	b.n	80068fa <USBH_AC_SetCur+0xb2>
    case UAC_FEATURE_UNIT:
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 80068b8:	78bb      	ldrb	r3, [r7, #2]
 80068ba:	68fa      	ldr	r2, [r7, #12]
 80068bc:	3322      	adds	r3, #34	; 0x22
 80068be:	009b      	lsls	r3, r3, #2
 80068c0:	4413      	add	r3, r2
 80068c2:	689b      	ldr	r3, [r3, #8]
 80068c4:	78db      	ldrb	r3, [r3, #3]
 80068c6:	72fb      	strb	r3, [r7, #11]
      InterfaceNum = 0U; /*Always zero Control Interface */
 80068c8:	2300      	movs	r3, #0
 80068ca:	72bb      	strb	r3, [r7, #10]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum ;
 80068cc:	7afb      	ldrb	r3, [r7, #11]
 80068ce:	b29b      	uxth	r3, r3
 80068d0:	021b      	lsls	r3, r3, #8
 80068d2:	b29a      	uxth	r2, r3
 80068d4:	7abb      	ldrb	r3, [r7, #10]
 80068d6:	b29b      	uxth	r3, r3
 80068d8:	4313      	orrs	r3, r2
 80068da:	82bb      	strh	r3, [r7, #20]
      /*holds the CS(control selector ) and CN (channel number)*/
      wValue = (uint16_t)((uint32_t)controlSelector << 8U) | (uint16_t)channel;
 80068dc:	787b      	ldrb	r3, [r7, #1]
 80068de:	b29b      	uxth	r3, r3
 80068e0:	021b      	lsls	r3, r3, #8
 80068e2:	b29a      	uxth	r2, r3
 80068e4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80068e8:	b29b      	uxth	r3, r3
 80068ea:	4313      	orrs	r3, r2
 80068ec:	82fb      	strh	r3, [r7, #22]
      wLength = length;
 80068ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80068f0:	827b      	strh	r3, [r7, #18]
      break;
 80068f2:	e002      	b.n	80068fa <USBH_AC_SetCur+0xb2>

    default:
      ret = USBH_FAIL;
 80068f4:	2302      	movs	r3, #2
 80068f6:	747b      	strb	r3, [r7, #17]
      break;
 80068f8:	bf00      	nop
  }

  if (ret != USBH_OK)
 80068fa:	7c7b      	ldrb	r3, [r7, #17]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d001      	beq.n	8006904 <USBH_AC_SetCur+0xbc>
  {
    return ret;
 8006900:	7c7b      	ldrb	r3, [r7, #17]
 8006902:	e017      	b.n	8006934 <USBH_AC_SetCur+0xec>
  }

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2221      	movs	r2, #33	; 0x21
 8006908:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_SET_CUR;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2201      	movs	r2, #1
 800690e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	8afa      	ldrh	r2, [r7, #22]
 8006914:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	8aba      	ldrh	r2, [r7, #20]
 800691a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	8a7a      	ldrh	r2, [r7, #18]
 8006920:	82da      	strh	r2, [r3, #22]

  return (USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem), wLength));
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8006928:	8a7a      	ldrh	r2, [r7, #18]
 800692a:	4619      	mov	r1, r3
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f001 fdc3 	bl	80084b8 <USBH_CtlReq>
 8006932:	4603      	mov	r3, r0
}
 8006934:	4618      	mov	r0, r3
 8006936:	3718      	adds	r7, #24
 8006938:	46bd      	mov	sp, r7
 800693a:	bd80      	pop	{r7, pc}

0800693c <USBH_AC_GetCur>:
                                         uint8_t subtype,
                                         uint8_t feature,
                                         uint8_t controlSelector,
                                         uint8_t channel,
                                         uint16_t length)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b086      	sub	sp, #24
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
 8006944:	4608      	mov	r0, r1
 8006946:	4611      	mov	r1, r2
 8006948:	461a      	mov	r2, r3
 800694a:	4603      	mov	r3, r0
 800694c:	70fb      	strb	r3, [r7, #3]
 800694e:	460b      	mov	r3, r1
 8006950:	70bb      	strb	r3, [r7, #2]
 8006952:	4613      	mov	r3, r2
 8006954:	707b      	strb	r3, [r7, #1]
  uint16_t wValue = 0U, wIndex = 0U, wLength = 0U;
 8006956:	2300      	movs	r3, #0
 8006958:	82fb      	strh	r3, [r7, #22]
 800695a:	2300      	movs	r3, #0
 800695c:	82bb      	strh	r3, [r7, #20]
 800695e:	2300      	movs	r3, #0
 8006960:	827b      	strh	r3, [r7, #18]
  uint8_t UnitID = 0U, InterfaceNum = 0U;
 8006962:	2300      	movs	r3, #0
 8006964:	743b      	strb	r3, [r7, #16]
 8006966:	2300      	movs	r3, #0
 8006968:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8006970:	69db      	ldr	r3, [r3, #28]
 8006972:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef ret = USBH_OK;
 8006974:	2300      	movs	r3, #0
 8006976:	747b      	strb	r3, [r7, #17]

  switch (subtype)
 8006978:	78fb      	ldrb	r3, [r7, #3]
 800697a:	2b06      	cmp	r3, #6
 800697c:	d01e      	beq.n	80069bc <USBH_AC_GetCur+0x80>
 800697e:	2b06      	cmp	r3, #6
 8006980:	dc4f      	bgt.n	8006a22 <USBH_AC_GetCur+0xe6>
 8006982:	2b02      	cmp	r3, #2
 8006984:	d002      	beq.n	800698c <USBH_AC_GetCur+0x50>
 8006986:	2b03      	cmp	r3, #3
 8006988:	d036      	beq.n	80069f8 <USBH_AC_GetCur+0xbc>
 800698a:	e04a      	b.n	8006a22 <USBH_AC_GetCur+0xe6>
  {
    case UAC_INPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[0]->bTerminalID;
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006990:	78db      	ldrb	r3, [r3, #3]
 8006992:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8006994:	2300      	movs	r3, #0
 8006996:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8006998:	7c3b      	ldrb	r3, [r7, #16]
 800699a:	b29b      	uxth	r3, r3
 800699c:	021b      	lsls	r3, r3, #8
 800699e:	b29a      	uxth	r2, r3
 80069a0:	7bfb      	ldrb	r3, [r7, #15]
 80069a2:	b29b      	uxth	r3, r3
 80069a4:	4313      	orrs	r3, r2
 80069a6:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 80069a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80069ac:	82fb      	strh	r3, [r7, #22]
      AUDIO_Handle->mem[0] = 0x00U;
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	2200      	movs	r2, #0
 80069b2:	f8a3 2190 	strh.w	r2, [r3, #400]	; 0x190

      wLength = 1U;
 80069b6:	2301      	movs	r3, #1
 80069b8:	827b      	strh	r3, [r7, #18]
      break;
 80069ba:	e035      	b.n	8006a28 <USBH_AC_GetCur+0xec>
    case UAC_FEATURE_UNIT:
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 80069bc:	78bb      	ldrb	r3, [r7, #2]
 80069be:	68ba      	ldr	r2, [r7, #8]
 80069c0:	3322      	adds	r3, #34	; 0x22
 80069c2:	009b      	lsls	r3, r3, #2
 80069c4:	4413      	add	r3, r2
 80069c6:	689b      	ldr	r3, [r3, #8]
 80069c8:	78db      	ldrb	r3, [r3, #3]
 80069ca:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 80069cc:	2300      	movs	r3, #0
 80069ce:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 80069d0:	7c3b      	ldrb	r3, [r7, #16]
 80069d2:	b29b      	uxth	r3, r3
 80069d4:	021b      	lsls	r3, r3, #8
 80069d6:	b29a      	uxth	r2, r3
 80069d8:	7bfb      	ldrb	r3, [r7, #15]
 80069da:	b29b      	uxth	r3, r3
 80069dc:	4313      	orrs	r3, r2
 80069de:	82bb      	strh	r3, [r7, #20]
      /*holds the CS(control selector ) and CN (channel number)*/
      wValue = (uint16_t)((uint32_t)controlSelector << 8U) | (uint16_t)channel;
 80069e0:	787b      	ldrb	r3, [r7, #1]
 80069e2:	b29b      	uxth	r3, r3
 80069e4:	021b      	lsls	r3, r3, #8
 80069e6:	b29a      	uxth	r2, r3
 80069e8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80069ec:	b29b      	uxth	r3, r3
 80069ee:	4313      	orrs	r3, r2
 80069f0:	82fb      	strh	r3, [r7, #22]
      wLength = length;
 80069f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80069f4:	827b      	strh	r3, [r7, #18]
      break;
 80069f6:	e017      	b.n	8006a28 <USBH_AC_GetCur+0xec>

    case UAC_OUTPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[0]->bTerminalID;
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069fe:	78db      	ldrb	r3, [r3, #3]
 8006a00:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8006a02:	2300      	movs	r3, #0
 8006a04:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8006a06:	7c3b      	ldrb	r3, [r7, #16]
 8006a08:	b29b      	uxth	r3, r3
 8006a0a:	021b      	lsls	r3, r3, #8
 8006a0c:	b29a      	uxth	r2, r3
 8006a0e:	7bfb      	ldrb	r3, [r7, #15]
 8006a10:	b29b      	uxth	r3, r3
 8006a12:	4313      	orrs	r3, r2
 8006a14:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 8006a16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006a1a:	82fb      	strh	r3, [r7, #22]
      wLength = 1U;
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	827b      	strh	r3, [r7, #18]
      break;
 8006a20:	e002      	b.n	8006a28 <USBH_AC_GetCur+0xec>

    default:
      ret = USBH_FAIL;
 8006a22:	2302      	movs	r3, #2
 8006a24:	747b      	strb	r3, [r7, #17]
      break;
 8006a26:	bf00      	nop
  }

  if (ret != USBH_OK)
 8006a28:	7c7b      	ldrb	r3, [r7, #17]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d001      	beq.n	8006a32 <USBH_AC_GetCur+0xf6>
  {
    return ret;
 8006a2e:	7c7b      	ldrb	r3, [r7, #17]
 8006a30:	e017      	b.n	8006a62 <USBH_AC_GetCur+0x126>
  }

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	22a1      	movs	r2, #161	; 0xa1
 8006a36:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_GET_CUR;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2281      	movs	r2, #129	; 0x81
 8006a3c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	8afa      	ldrh	r2, [r7, #22]
 8006a42:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	8aba      	ldrh	r2, [r7, #20]
 8006a48:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	8a7a      	ldrh	r2, [r7, #18]
 8006a4e:	82da      	strh	r2, [r3, #22]

  return (USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem), wLength));
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8006a56:	8a7a      	ldrh	r2, [r7, #18]
 8006a58:	4619      	mov	r1, r3
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f001 fd2c 	bl	80084b8 <USBH_CtlReq>
 8006a60:	4603      	mov	r3, r0
}
 8006a62:	4618      	mov	r0, r3
 8006a64:	3718      	adds	r7, #24
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}

08006a6a <USBH_AC_GetMax>:
                                         uint8_t subtype,
                                         uint8_t feature,
                                         uint8_t controlSelector,
                                         uint8_t channel,
                                         uint16_t length)
{
 8006a6a:	b580      	push	{r7, lr}
 8006a6c:	b086      	sub	sp, #24
 8006a6e:	af00      	add	r7, sp, #0
 8006a70:	6078      	str	r0, [r7, #4]
 8006a72:	4608      	mov	r0, r1
 8006a74:	4611      	mov	r1, r2
 8006a76:	461a      	mov	r2, r3
 8006a78:	4603      	mov	r3, r0
 8006a7a:	70fb      	strb	r3, [r7, #3]
 8006a7c:	460b      	mov	r3, r1
 8006a7e:	70bb      	strb	r3, [r7, #2]
 8006a80:	4613      	mov	r3, r2
 8006a82:	707b      	strb	r3, [r7, #1]
  uint16_t wValue = 0U, wIndex = 0U, wLength = 0U;
 8006a84:	2300      	movs	r3, #0
 8006a86:	82fb      	strh	r3, [r7, #22]
 8006a88:	2300      	movs	r3, #0
 8006a8a:	82bb      	strh	r3, [r7, #20]
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	827b      	strh	r3, [r7, #18]
  uint8_t UnitID = 0U, InterfaceNum = 0U;
 8006a90:	2300      	movs	r3, #0
 8006a92:	743b      	strb	r3, [r7, #16]
 8006a94:	2300      	movs	r3, #0
 8006a96:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8006a9e:	69db      	ldr	r3, [r3, #28]
 8006aa0:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef ret = USBH_OK;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	747b      	strb	r3, [r7, #17]

  switch (subtype)
 8006aa6:	78fb      	ldrb	r3, [r7, #3]
 8006aa8:	2b06      	cmp	r3, #6
 8006aaa:	d01e      	beq.n	8006aea <USBH_AC_GetMax+0x80>
 8006aac:	2b06      	cmp	r3, #6
 8006aae:	dc4f      	bgt.n	8006b50 <USBH_AC_GetMax+0xe6>
 8006ab0:	2b02      	cmp	r3, #2
 8006ab2:	d002      	beq.n	8006aba <USBH_AC_GetMax+0x50>
 8006ab4:	2b03      	cmp	r3, #3
 8006ab6:	d036      	beq.n	8006b26 <USBH_AC_GetMax+0xbc>
 8006ab8:	e04a      	b.n	8006b50 <USBH_AC_GetMax+0xe6>
  {
    case UAC_INPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[0]->bTerminalID;
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006abe:	78db      	ldrb	r3, [r3, #3]
 8006ac0:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8006ac6:	7c3b      	ldrb	r3, [r7, #16]
 8006ac8:	b29b      	uxth	r3, r3
 8006aca:	021b      	lsls	r3, r3, #8
 8006acc:	b29a      	uxth	r2, r3
 8006ace:	7bfb      	ldrb	r3, [r7, #15]
 8006ad0:	b29b      	uxth	r3, r3
 8006ad2:	4313      	orrs	r3, r2
 8006ad4:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 8006ad6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006ada:	82fb      	strh	r3, [r7, #22]
      AUDIO_Handle->mem[0] = 0x00U;
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	f8a3 2190 	strh.w	r2, [r3, #400]	; 0x190

      wLength = 1U;
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	827b      	strh	r3, [r7, #18]
      break;
 8006ae8:	e035      	b.n	8006b56 <USBH_AC_GetMax+0xec>
    case UAC_FEATURE_UNIT:
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 8006aea:	78bb      	ldrb	r3, [r7, #2]
 8006aec:	68ba      	ldr	r2, [r7, #8]
 8006aee:	3322      	adds	r3, #34	; 0x22
 8006af0:	009b      	lsls	r3, r3, #2
 8006af2:	4413      	add	r3, r2
 8006af4:	689b      	ldr	r3, [r3, #8]
 8006af6:	78db      	ldrb	r3, [r3, #3]
 8006af8:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8006afa:	2300      	movs	r3, #0
 8006afc:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum ;
 8006afe:	7c3b      	ldrb	r3, [r7, #16]
 8006b00:	b29b      	uxth	r3, r3
 8006b02:	021b      	lsls	r3, r3, #8
 8006b04:	b29a      	uxth	r2, r3
 8006b06:	7bfb      	ldrb	r3, [r7, #15]
 8006b08:	b29b      	uxth	r3, r3
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	82bb      	strh	r3, [r7, #20]
      /*holds the CS(control selector ) and CN (channel number)*/
      wValue = (uint16_t)((uint32_t)controlSelector << 8U) | (uint16_t)channel;
 8006b0e:	787b      	ldrb	r3, [r7, #1]
 8006b10:	b29b      	uxth	r3, r3
 8006b12:	021b      	lsls	r3, r3, #8
 8006b14:	b29a      	uxth	r2, r3
 8006b16:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006b1a:	b29b      	uxth	r3, r3
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	82fb      	strh	r3, [r7, #22]
      wLength = length;
 8006b20:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006b22:	827b      	strh	r3, [r7, #18]
      break;
 8006b24:	e017      	b.n	8006b56 <USBH_AC_GetMax+0xec>

    case UAC_OUTPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[0]->bTerminalID;
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b2c:	78db      	ldrb	r3, [r3, #3]
 8006b2e:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8006b30:	2300      	movs	r3, #0
 8006b32:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum ;
 8006b34:	7c3b      	ldrb	r3, [r7, #16]
 8006b36:	b29b      	uxth	r3, r3
 8006b38:	021b      	lsls	r3, r3, #8
 8006b3a:	b29a      	uxth	r2, r3
 8006b3c:	7bfb      	ldrb	r3, [r7, #15]
 8006b3e:	b29b      	uxth	r3, r3
 8006b40:	4313      	orrs	r3, r2
 8006b42:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U) ;
 8006b44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006b48:	82fb      	strh	r3, [r7, #22]
      wLength = 1U;
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	827b      	strh	r3, [r7, #18]
      break;
 8006b4e:	e002      	b.n	8006b56 <USBH_AC_GetMax+0xec>

    default:
      ret = USBH_FAIL;
 8006b50:	2302      	movs	r3, #2
 8006b52:	747b      	strb	r3, [r7, #17]
      break;
 8006b54:	bf00      	nop
  }

  if (ret != USBH_OK)
 8006b56:	7c7b      	ldrb	r3, [r7, #17]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d001      	beq.n	8006b60 <USBH_AC_GetMax+0xf6>
  {
    return ret;
 8006b5c:	7c7b      	ldrb	r3, [r7, #17]
 8006b5e:	e017      	b.n	8006b90 <USBH_AC_GetMax+0x126>
  }

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	22a1      	movs	r2, #161	; 0xa1
 8006b64:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_GET_MAX;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2283      	movs	r2, #131	; 0x83
 8006b6a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	8afa      	ldrh	r2, [r7, #22]
 8006b70:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	8aba      	ldrh	r2, [r7, #20]
 8006b76:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	8a7a      	ldrh	r2, [r7, #18]
 8006b7c:	82da      	strh	r2, [r3, #22]

  return (USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem), wLength));
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8006b84:	8a7a      	ldrh	r2, [r7, #18]
 8006b86:	4619      	mov	r1, r3
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f001 fc95 	bl	80084b8 <USBH_CtlReq>
 8006b8e:	4603      	mov	r3, r0

}
 8006b90:	4618      	mov	r0, r3
 8006b92:	3718      	adds	r7, #24
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bd80      	pop	{r7, pc}

08006b98 <USBH_AC_GetRes>:
                                         uint8_t subtype,
                                         uint8_t feature,
                                         uint8_t controlSelector,
                                         uint8_t channel,
                                         uint16_t length)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b086      	sub	sp, #24
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
 8006ba0:	4608      	mov	r0, r1
 8006ba2:	4611      	mov	r1, r2
 8006ba4:	461a      	mov	r2, r3
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	70fb      	strb	r3, [r7, #3]
 8006baa:	460b      	mov	r3, r1
 8006bac:	70bb      	strb	r3, [r7, #2]
 8006bae:	4613      	mov	r3, r2
 8006bb0:	707b      	strb	r3, [r7, #1]
  uint16_t wValue = 0U, wIndex = 0U, wLength = 0U;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	82fb      	strh	r3, [r7, #22]
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	82bb      	strh	r3, [r7, #20]
 8006bba:	2300      	movs	r3, #0
 8006bbc:	827b      	strh	r3, [r7, #18]
  uint8_t UnitID = 0U, InterfaceNum = 0U;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	743b      	strb	r3, [r7, #16]
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8006bcc:	69db      	ldr	r3, [r3, #28]
 8006bce:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef ret = USBH_OK;
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	747b      	strb	r3, [r7, #17]

  switch (subtype)
 8006bd4:	78fb      	ldrb	r3, [r7, #3]
 8006bd6:	2b06      	cmp	r3, #6
 8006bd8:	d01e      	beq.n	8006c18 <USBH_AC_GetRes+0x80>
 8006bda:	2b06      	cmp	r3, #6
 8006bdc:	dc4f      	bgt.n	8006c7e <USBH_AC_GetRes+0xe6>
 8006bde:	2b02      	cmp	r3, #2
 8006be0:	d002      	beq.n	8006be8 <USBH_AC_GetRes+0x50>
 8006be2:	2b03      	cmp	r3, #3
 8006be4:	d036      	beq.n	8006c54 <USBH_AC_GetRes+0xbc>
 8006be6:	e04a      	b.n	8006c7e <USBH_AC_GetRes+0xe6>
  {
    case UAC_INPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[0]->bTerminalID;
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bec:	78db      	ldrb	r3, [r3, #3]
 8006bee:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8006bf4:	7c3b      	ldrb	r3, [r7, #16]
 8006bf6:	b29b      	uxth	r3, r3
 8006bf8:	021b      	lsls	r3, r3, #8
 8006bfa:	b29a      	uxth	r2, r3
 8006bfc:	7bfb      	ldrb	r3, [r7, #15]
 8006bfe:	b29b      	uxth	r3, r3
 8006c00:	4313      	orrs	r3, r2
 8006c02:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U) ;
 8006c04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006c08:	82fb      	strh	r3, [r7, #22]
      AUDIO_Handle->mem[0] = 0x00U;
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	f8a3 2190 	strh.w	r2, [r3, #400]	; 0x190

      wLength = 1U;
 8006c12:	2301      	movs	r3, #1
 8006c14:	827b      	strh	r3, [r7, #18]
      break;
 8006c16:	e035      	b.n	8006c84 <USBH_AC_GetRes+0xec>
    case UAC_FEATURE_UNIT:
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 8006c18:	78bb      	ldrb	r3, [r7, #2]
 8006c1a:	68ba      	ldr	r2, [r7, #8]
 8006c1c:	3322      	adds	r3, #34	; 0x22
 8006c1e:	009b      	lsls	r3, r3, #2
 8006c20:	4413      	add	r3, r2
 8006c22:	689b      	ldr	r3, [r3, #8]
 8006c24:	78db      	ldrb	r3, [r3, #3]
 8006c26:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8006c28:	2300      	movs	r3, #0
 8006c2a:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8006c2c:	7c3b      	ldrb	r3, [r7, #16]
 8006c2e:	b29b      	uxth	r3, r3
 8006c30:	021b      	lsls	r3, r3, #8
 8006c32:	b29a      	uxth	r2, r3
 8006c34:	7bfb      	ldrb	r3, [r7, #15]
 8006c36:	b29b      	uxth	r3, r3
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	82bb      	strh	r3, [r7, #20]
      /*holds the CS(control selector ) and CN (channel number)*/
      wValue = (uint16_t)((uint32_t)controlSelector << 8U) | (uint16_t)channel;
 8006c3c:	787b      	ldrb	r3, [r7, #1]
 8006c3e:	b29b      	uxth	r3, r3
 8006c40:	021b      	lsls	r3, r3, #8
 8006c42:	b29a      	uxth	r2, r3
 8006c44:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006c48:	b29b      	uxth	r3, r3
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	82fb      	strh	r3, [r7, #22]
      wLength = length;
 8006c4e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006c50:	827b      	strh	r3, [r7, #18]
      break;
 8006c52:	e017      	b.n	8006c84 <USBH_AC_GetRes+0xec>

    case UAC_OUTPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[0]->bTerminalID;
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c5a:	78db      	ldrb	r3, [r3, #3]
 8006c5c:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8006c5e:	2300      	movs	r3, #0
 8006c60:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8006c62:	7c3b      	ldrb	r3, [r7, #16]
 8006c64:	b29b      	uxth	r3, r3
 8006c66:	021b      	lsls	r3, r3, #8
 8006c68:	b29a      	uxth	r2, r3
 8006c6a:	7bfb      	ldrb	r3, [r7, #15]
 8006c6c:	b29b      	uxth	r3, r3
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U) ;
 8006c72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006c76:	82fb      	strh	r3, [r7, #22]
      wLength = 1U;
 8006c78:	2301      	movs	r3, #1
 8006c7a:	827b      	strh	r3, [r7, #18]
      break;
 8006c7c:	e002      	b.n	8006c84 <USBH_AC_GetRes+0xec>

    default:
      ret = USBH_FAIL;
 8006c7e:	2302      	movs	r3, #2
 8006c80:	747b      	strb	r3, [r7, #17]
      break;
 8006c82:	bf00      	nop
  }

  if (ret != USBH_OK)
 8006c84:	7c7b      	ldrb	r3, [r7, #17]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d001      	beq.n	8006c8e <USBH_AC_GetRes+0xf6>
  {
    return ret;
 8006c8a:	7c7b      	ldrb	r3, [r7, #17]
 8006c8c:	e017      	b.n	8006cbe <USBH_AC_GetRes+0x126>
  }

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	22a1      	movs	r2, #161	; 0xa1
 8006c92:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_GET_RES;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2284      	movs	r2, #132	; 0x84
 8006c98:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	8afa      	ldrh	r2, [r7, #22]
 8006c9e:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	8aba      	ldrh	r2, [r7, #20]
 8006ca4:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	8a7a      	ldrh	r2, [r7, #18]
 8006caa:	82da      	strh	r2, [r3, #22]

  return (USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem), wLength));
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8006cb2:	8a7a      	ldrh	r2, [r7, #18]
 8006cb4:	4619      	mov	r1, r3
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f001 fbfe 	bl	80084b8 <USBH_CtlReq>
 8006cbc:	4603      	mov	r3, r0

}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	3718      	adds	r7, #24
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}

08006cc6 <USBH_AC_GetMin>:
                                         uint8_t subtype,
                                         uint8_t feature,
                                         uint8_t controlSelector,
                                         uint8_t channel,
                                         uint16_t length)
{
 8006cc6:	b580      	push	{r7, lr}
 8006cc8:	b086      	sub	sp, #24
 8006cca:	af00      	add	r7, sp, #0
 8006ccc:	6078      	str	r0, [r7, #4]
 8006cce:	4608      	mov	r0, r1
 8006cd0:	4611      	mov	r1, r2
 8006cd2:	461a      	mov	r2, r3
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	70fb      	strb	r3, [r7, #3]
 8006cd8:	460b      	mov	r3, r1
 8006cda:	70bb      	strb	r3, [r7, #2]
 8006cdc:	4613      	mov	r3, r2
 8006cde:	707b      	strb	r3, [r7, #1]
  uint16_t wValue = 0U, wIndex = 0U, wLength = 0U;
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	82fb      	strh	r3, [r7, #22]
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	82bb      	strh	r3, [r7, #20]
 8006ce8:	2300      	movs	r3, #0
 8006cea:	827b      	strh	r3, [r7, #18]
  uint8_t UnitID = 0U, InterfaceNum = 0U;
 8006cec:	2300      	movs	r3, #0
 8006cee:	743b      	strb	r3, [r7, #16]
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8006cfa:	69db      	ldr	r3, [r3, #28]
 8006cfc:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef ret = USBH_OK;
 8006cfe:	2300      	movs	r3, #0
 8006d00:	747b      	strb	r3, [r7, #17]

  switch (subtype)
 8006d02:	78fb      	ldrb	r3, [r7, #3]
 8006d04:	2b06      	cmp	r3, #6
 8006d06:	d01e      	beq.n	8006d46 <USBH_AC_GetMin+0x80>
 8006d08:	2b06      	cmp	r3, #6
 8006d0a:	dc4f      	bgt.n	8006dac <USBH_AC_GetMin+0xe6>
 8006d0c:	2b02      	cmp	r3, #2
 8006d0e:	d002      	beq.n	8006d16 <USBH_AC_GetMin+0x50>
 8006d10:	2b03      	cmp	r3, #3
 8006d12:	d036      	beq.n	8006d82 <USBH_AC_GetMin+0xbc>
 8006d14:	e04a      	b.n	8006dac <USBH_AC_GetMin+0xe6>
  {
    case UAC_INPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[0]->bTerminalID;
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d1a:	78db      	ldrb	r3, [r3, #3]
 8006d1c:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8006d1e:	2300      	movs	r3, #0
 8006d20:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8006d22:	7c3b      	ldrb	r3, [r7, #16]
 8006d24:	b29b      	uxth	r3, r3
 8006d26:	021b      	lsls	r3, r3, #8
 8006d28:	b29a      	uxth	r2, r3
 8006d2a:	7bfb      	ldrb	r3, [r7, #15]
 8006d2c:	b29b      	uxth	r3, r3
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 8006d32:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006d36:	82fb      	strh	r3, [r7, #22]
      AUDIO_Handle->mem[0] = 0x00U;
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	f8a3 2190 	strh.w	r2, [r3, #400]	; 0x190

      wLength = 1U;
 8006d40:	2301      	movs	r3, #1
 8006d42:	827b      	strh	r3, [r7, #18]
      break;
 8006d44:	e035      	b.n	8006db2 <USBH_AC_GetMin+0xec>
    case UAC_FEATURE_UNIT:
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 8006d46:	78bb      	ldrb	r3, [r7, #2]
 8006d48:	68ba      	ldr	r2, [r7, #8]
 8006d4a:	3322      	adds	r3, #34	; 0x22
 8006d4c:	009b      	lsls	r3, r3, #2
 8006d4e:	4413      	add	r3, r2
 8006d50:	689b      	ldr	r3, [r3, #8]
 8006d52:	78db      	ldrb	r3, [r3, #3]
 8006d54:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8006d56:	2300      	movs	r3, #0
 8006d58:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8006d5a:	7c3b      	ldrb	r3, [r7, #16]
 8006d5c:	b29b      	uxth	r3, r3
 8006d5e:	021b      	lsls	r3, r3, #8
 8006d60:	b29a      	uxth	r2, r3
 8006d62:	7bfb      	ldrb	r3, [r7, #15]
 8006d64:	b29b      	uxth	r3, r3
 8006d66:	4313      	orrs	r3, r2
 8006d68:	82bb      	strh	r3, [r7, #20]
      /*holds the CS(control selector ) and CN (channel number)*/
      wValue = (uint16_t)((uint32_t)controlSelector << 8U) | (uint16_t)channel;
 8006d6a:	787b      	ldrb	r3, [r7, #1]
 8006d6c:	b29b      	uxth	r3, r3
 8006d6e:	021b      	lsls	r3, r3, #8
 8006d70:	b29a      	uxth	r2, r3
 8006d72:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006d76:	b29b      	uxth	r3, r3
 8006d78:	4313      	orrs	r3, r2
 8006d7a:	82fb      	strh	r3, [r7, #22]
      wLength = length;
 8006d7c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006d7e:	827b      	strh	r3, [r7, #18]
      break;
 8006d80:	e017      	b.n	8006db2 <USBH_AC_GetMin+0xec>

    case UAC_OUTPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[0]->bTerminalID;
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d88:	78db      	ldrb	r3, [r3, #3]
 8006d8a:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8006d90:	7c3b      	ldrb	r3, [r7, #16]
 8006d92:	b29b      	uxth	r3, r3
 8006d94:	021b      	lsls	r3, r3, #8
 8006d96:	b29a      	uxth	r2, r3
 8006d98:	7bfb      	ldrb	r3, [r7, #15]
 8006d9a:	b29b      	uxth	r3, r3
 8006d9c:	4313      	orrs	r3, r2
 8006d9e:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 8006da0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006da4:	82fb      	strh	r3, [r7, #22]
      wLength = 1U;
 8006da6:	2301      	movs	r3, #1
 8006da8:	827b      	strh	r3, [r7, #18]
      break;
 8006daa:	e002      	b.n	8006db2 <USBH_AC_GetMin+0xec>

    default:
      ret = USBH_FAIL;
 8006dac:	2302      	movs	r3, #2
 8006dae:	747b      	strb	r3, [r7, #17]
      break;
 8006db0:	bf00      	nop
  }

  if (ret != USBH_OK)
 8006db2:	7c7b      	ldrb	r3, [r7, #17]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d001      	beq.n	8006dbc <USBH_AC_GetMin+0xf6>
  {
    return ret;
 8006db8:	7c7b      	ldrb	r3, [r7, #17]
 8006dba:	e017      	b.n	8006dec <USBH_AC_GetMin+0x126>
  }

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	22a1      	movs	r2, #161	; 0xa1
 8006dc0:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_GET_MIN;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2282      	movs	r2, #130	; 0x82
 8006dc6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	8afa      	ldrh	r2, [r7, #22]
 8006dcc:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	8aba      	ldrh	r2, [r7, #20]
 8006dd2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	8a7a      	ldrh	r2, [r7, #18]
 8006dd8:	82da      	strh	r2, [r3, #22]

  return (USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem), wLength));
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8006de0:	8a7a      	ldrh	r2, [r7, #18]
 8006de2:	4619      	mov	r1, r3
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f001 fb67 	bl	80084b8 <USBH_CtlReq>
 8006dea:	4603      	mov	r3, r0

}
 8006dec:	4618      	mov	r0, r3
 8006dee:	3718      	adds	r7, #24
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bd80      	pop	{r7, pc}

08006df4 <USBH_AUDIO_SetEndpointControls>:
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_SetEndpointControls(USBH_HandleTypeDef *phost,
                                                         uint8_t  Ep,
                                                         uint8_t *buff)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b086      	sub	sp, #24
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	60f8      	str	r0, [r7, #12]
 8006dfc:	460b      	mov	r3, r1
 8006dfe:	607a      	str	r2, [r7, #4]
 8006e00:	72fb      	strb	r3, [r7, #11]
  uint16_t wValue, wIndex, wLength;

  wValue = SAMPLING_FREQ_CONTROL << 8U;
 8006e02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006e06:	82fb      	strh	r3, [r7, #22]
  wIndex = Ep;
 8006e08:	7afb      	ldrb	r3, [r7, #11]
 8006e0a:	82bb      	strh	r3, [r7, #20]
  wLength = 3U; /*length of the frequency parameter*/
 8006e0c:	2303      	movs	r3, #3
 8006e0e:	827b      	strh	r3, [r7, #18]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT | \
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	2222      	movs	r2, #34	; 0x22
 8006e14:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_SET_CUR;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	2201      	movs	r2, #1
 8006e1a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	8afa      	ldrh	r2, [r7, #22]
 8006e20:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	8aba      	ldrh	r2, [r7, #20]
 8006e26:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	8a7a      	ldrh	r2, [r7, #18]
 8006e2c:	82da      	strh	r2, [r3, #22]

  return (USBH_CtlReq(phost, (uint8_t *)buff, wLength));
 8006e2e:	8a7b      	ldrh	r3, [r7, #18]
 8006e30:	461a      	mov	r2, r3
 8006e32:	6879      	ldr	r1, [r7, #4]
 8006e34:	68f8      	ldr	r0, [r7, #12]
 8006e36:	f001 fb3f 	bl	80084b8 <USBH_CtlReq>
 8006e3a:	4603      	mov	r3, r0

}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	3718      	adds	r7, #24
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}

08006e44 <USBH_AUDIO_InputStream>:
  * @brief  Handle Input stream process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_InputStream(USBH_HandleTypeDef *phost)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b085      	sub	sp, #20
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  USBH_StatusTypeDef status = USBH_BUSY;
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	73fb      	strb	r3, [r7, #15]

  return status;
 8006e50:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e52:	4618      	mov	r0, r3
 8006e54:	3714      	adds	r7, #20
 8006e56:	46bd      	mov	sp, r7
 8006e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5c:	4770      	bx	lr
	...

08006e60 <USBH_AUDIO_Control>:
  * @brief  Handle HID Control process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_Control(USBH_HandleTypeDef *phost)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b086      	sub	sp, #24
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY ;
 8006e68:	2301      	movs	r3, #1
 8006e6a:	75fb      	strb	r3, [r7, #23]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8006e72:	69db      	ldr	r3, [r3, #28]
 8006e74:	613b      	str	r3, [r7, #16]
  uint16_t attribute  = 0U;
 8006e76:	2300      	movs	r3, #0
 8006e78:	81fb      	strh	r3, [r7, #14]

  switch (AUDIO_Handle->control_state)
 8006e7a:	693b      	ldr	r3, [r7, #16]
 8006e7c:	78db      	ldrb	r3, [r3, #3]
 8006e7e:	3b01      	subs	r3, #1
 8006e80:	2b04      	cmp	r3, #4
 8006e82:	f200 8090 	bhi.w	8006fa6 <USBH_AUDIO_Control+0x146>
 8006e86:	a201      	add	r2, pc, #4	; (adr r2, 8006e8c <USBH_AUDIO_Control+0x2c>)
 8006e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e8c:	08006ea1 	.word	0x08006ea1
 8006e90:	08006ef5 	.word	0x08006ef5
 8006e94:	08006fa7 	.word	0x08006fa7
 8006e98:	08006f73 	.word	0x08006f73
 8006e9c:	08006f8d 	.word	0x08006f8d
  {
    case AUDIO_CONTROL_INIT:
      if ((phost->Timer & 1U) == 0U)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8006ea6:	f003 0301 	and.w	r3, r3, #1
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d17d      	bne.n	8006faa <USBH_AUDIO_Control+0x14a>
      {
        AUDIO_Handle->control.timer = phost->Timer;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f8d3 2494 	ldr.w	r2, [r3, #1172]	; 0x494
 8006eb4:	693b      	ldr	r3, [r7, #16]
 8006eb6:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
        USBH_InterruptReceiveData(phost,
                                  (uint8_t *)(void *)(AUDIO_Handle->mem),
 8006eba:	693b      	ldr	r3, [r7, #16]
 8006ebc:	f503 71c8 	add.w	r1, r3, #400	; 0x190
                                  (uint8_t)AUDIO_Handle->control.EpSize,
 8006ec0:	693b      	ldr	r3, [r7, #16]
 8006ec2:	f8b3 3186 	ldrh.w	r3, [r3, #390]	; 0x186
        USBH_InterruptReceiveData(phost,
 8006ec6:	b2da      	uxtb	r2, r3
 8006ec8:	693b      	ldr	r3, [r7, #16]
 8006eca:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f001 fd01 	bl	80088d6 <USBH_InterruptReceiveData>
                                  AUDIO_Handle->control.Pipe);

        AUDIO_Handle->temp_feature  = AUDIO_Handle->headphone.asociated_feature;
 8006ed4:	693b      	ldr	r3, [r7, #16]
 8006ed6:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
 8006eda:	693b      	ldr	r3, [r7, #16]
 8006edc:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
        AUDIO_Handle->temp_channels = AUDIO_Handle->headphone.asociated_channels;
 8006ee0:	693b      	ldr	r3, [r7, #16]
 8006ee2:	f893 2109 	ldrb.w	r2, [r3, #265]	; 0x109
 8006ee6:	693b      	ldr	r3, [r7, #16]
 8006ee8:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1

        AUDIO_Handle->control_state = AUDIO_CONTROL_CHANGE ;
 8006eec:	693b      	ldr	r3, [r7, #16]
 8006eee:	2202      	movs	r2, #2
 8006ef0:	70da      	strb	r2, [r3, #3]
      }
      break;
 8006ef2:	e05a      	b.n	8006faa <USBH_AUDIO_Control+0x14a>

    case AUDIO_CONTROL_CHANGE:
      if (USBH_LL_GetURBState(phost, AUDIO_Handle->control.Pipe) == USBH_URB_DONE)
 8006ef4:	693b      	ldr	r3, [r7, #16]
 8006ef6:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 8006efa:	4619      	mov	r1, r3
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f002 f832 	bl	8008f66 <USBH_LL_GetURBState>
 8006f02:	4603      	mov	r3, r0
 8006f04:	2b01      	cmp	r3, #1
 8006f06:	d114      	bne.n	8006f32 <USBH_AUDIO_Control+0xd2>
      {
        attribute = LE16(&AUDIO_Handle->mem[0]);
 8006f08:	693b      	ldr	r3, [r7, #16]
 8006f0a:	f8b3 2190 	ldrh.w	r2, [r3, #400]	; 0x190
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8006f14:	3302      	adds	r3, #2
 8006f16:	881b      	ldrh	r3, [r3, #0]
 8006f18:	021b      	lsls	r3, r3, #8
 8006f1a:	b29b      	uxth	r3, r3
 8006f1c:	4313      	orrs	r3, r2
 8006f1e:	81fb      	strh	r3, [r7, #14]
        if (USBH_AUDIO_SetControlAttribute(phost, (uint8_t)attribute) == USBH_BUSY)
 8006f20:	89fb      	ldrh	r3, [r7, #14]
 8006f22:	b2db      	uxtb	r3, r3
 8006f24:	4619      	mov	r1, r3
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f000 f97a 	bl	8007220 <USBH_AUDIO_SetControlAttribute>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	2b01      	cmp	r3, #1
 8006f30:	d03d      	beq.n	8006fae <USBH_AUDIO_Control+0x14e>
        {
          break;
        }
      }

      if ((phost->Timer - AUDIO_Handle->control.timer) >= AUDIO_Handle->control.Poll)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f8d3 2494 	ldr.w	r2, [r3, #1172]	; 0x494
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 8006f3e:	1ad3      	subs	r3, r2, r3
 8006f40:	693a      	ldr	r2, [r7, #16]
 8006f42:	f892 218b 	ldrb.w	r2, [r2, #395]	; 0x18b
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d333      	bcc.n	8006fb2 <USBH_AUDIO_Control+0x152>
      {
        AUDIO_Handle->control.timer = phost->Timer;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	f8d3 2494 	ldr.w	r2, [r3, #1172]	; 0x494
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c

        USBH_InterruptReceiveData(phost,
                                  (uint8_t *)(void *)(AUDIO_Handle->mem),
 8006f56:	693b      	ldr	r3, [r7, #16]
 8006f58:	f503 71c8 	add.w	r1, r3, #400	; 0x190
                                  (uint8_t)AUDIO_Handle->control.EpSize,
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	f8b3 3186 	ldrh.w	r3, [r3, #390]	; 0x186
        USBH_InterruptReceiveData(phost,
 8006f62:	b2da      	uxtb	r2, r3
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f001 fcb3 	bl	80088d6 <USBH_InterruptReceiveData>
                                  AUDIO_Handle->control.Pipe);

      }
      break;
 8006f70:	e01f      	b.n	8006fb2 <USBH_AUDIO_Control+0x152>

    case AUDIO_CONTROL_VOLUME_UP:
      if (USBH_AUDIO_SetControlAttribute(phost, 1U) == USBH_OK)
 8006f72:	2101      	movs	r1, #1
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f000 f953 	bl	8007220 <USBH_AUDIO_SetControlAttribute>
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d11a      	bne.n	8006fb6 <USBH_AUDIO_Control+0x156>
      {
        AUDIO_Handle->control_state = AUDIO_CONTROL_INIT;
 8006f80:	693b      	ldr	r3, [r7, #16]
 8006f82:	2201      	movs	r2, #1
 8006f84:	70da      	strb	r2, [r3, #3]
        status = USBH_OK;
 8006f86:	2300      	movs	r3, #0
 8006f88:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006f8a:	e014      	b.n	8006fb6 <USBH_AUDIO_Control+0x156>

    case AUDIO_CONTROL_VOLUME_DOWN:
      if (USBH_AUDIO_SetControlAttribute(phost, 2U) == USBH_OK)
 8006f8c:	2102      	movs	r1, #2
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f000 f946 	bl	8007220 <USBH_AUDIO_SetControlAttribute>
 8006f94:	4603      	mov	r3, r0
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d10f      	bne.n	8006fba <USBH_AUDIO_Control+0x15a>
      {
        AUDIO_Handle->control_state = AUDIO_CONTROL_INIT;
 8006f9a:	693b      	ldr	r3, [r7, #16]
 8006f9c:	2201      	movs	r2, #1
 8006f9e:	70da      	strb	r2, [r3, #3]
        status = USBH_OK;
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006fa4:	e009      	b.n	8006fba <USBH_AUDIO_Control+0x15a>

    case AUDIO_CONTROL_IDLE:
    default:
      break;
 8006fa6:	bf00      	nop
 8006fa8:	e008      	b.n	8006fbc <USBH_AUDIO_Control+0x15c>
      break;
 8006faa:	bf00      	nop
 8006fac:	e006      	b.n	8006fbc <USBH_AUDIO_Control+0x15c>
          break;
 8006fae:	bf00      	nop
 8006fb0:	e004      	b.n	8006fbc <USBH_AUDIO_Control+0x15c>
      break;
 8006fb2:	bf00      	nop
 8006fb4:	e002      	b.n	8006fbc <USBH_AUDIO_Control+0x15c>
      break;
 8006fb6:	bf00      	nop
 8006fb8:	e000      	b.n	8006fbc <USBH_AUDIO_Control+0x15c>
      break;
 8006fba:	bf00      	nop
  }

  return status;
 8006fbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	3718      	adds	r7, #24
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}
 8006fc6:	bf00      	nop

08006fc8 <USBH_AUDIO_OutputStream>:
  * @brief  Handle Output stream process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_OutputStream(USBH_HandleTypeDef *phost)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b086      	sub	sp, #24
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY ;
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	75fb      	strb	r3, [r7, #23]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8006fda:	69db      	ldr	r3, [r3, #28]
 8006fdc:	613b      	str	r3, [r7, #16]
  uint8_t *buff;


  switch (AUDIO_Handle->play_state)
 8006fde:	693b      	ldr	r3, [r7, #16]
 8006fe0:	789b      	ldrb	r3, [r3, #2]
 8006fe2:	3b01      	subs	r3, #1
 8006fe4:	2b04      	cmp	r3, #4
 8006fe6:	d85c      	bhi.n	80070a2 <USBH_AUDIO_OutputStream+0xda>
 8006fe8:	a201      	add	r2, pc, #4	; (adr r2, 8006ff0 <USBH_AUDIO_OutputStream+0x28>)
 8006fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fee:	bf00      	nop
 8006ff0:	08007005 	.word	0x08007005
 8006ff4:	08007061 	.word	0x08007061
 8006ff8:	0800702b 	.word	0x0800702b
 8006ffc:	08007097 	.word	0x08007097
 8007000:	08007091 	.word	0x08007091
  {
    case AUDIO_PLAYBACK_INIT:

      if (AUDIO_Handle->class_desc.as_desc[AUDIO_Handle->headphone.asociated_as].FormatTypeDesc->bSamFreqType == 0U)
 8007004:	693b      	ldr	r3, [r7, #16]
 8007006:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800700a:	693a      	ldr	r2, [r7, #16]
 800700c:	3317      	adds	r3, #23
 800700e:	00db      	lsls	r3, r3, #3
 8007010:	4413      	add	r3, r2
 8007012:	68db      	ldr	r3, [r3, #12]
 8007014:	79db      	ldrb	r3, [r3, #7]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d103      	bne.n	8007022 <USBH_AUDIO_OutputStream+0x5a>
      {
        AUDIO_Handle->play_state = AUDIO_PLAYBACK_SET_EP_FREQ;
 800701a:	693b      	ldr	r3, [r7, #16]
 800701c:	2203      	movs	r2, #3
 800701e:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007020:	e044      	b.n	80070ac <USBH_AUDIO_OutputStream+0xe4>
        AUDIO_Handle->play_state = AUDIO_PLAYBACK_SET_EP;
 8007022:	693b      	ldr	r3, [r7, #16]
 8007024:	2202      	movs	r2, #2
 8007026:	709a      	strb	r2, [r3, #2]
      break;
 8007028:	e040      	b.n	80070ac <USBH_AUDIO_OutputStream+0xe4>

    case AUDIO_PLAYBACK_SET_EP_FREQ:

      buff = (uint8_t *)AUDIO_Handle->class_desc.as_desc[AUDIO_Handle->headphone.asociated_as].FormatTypeDesc->tSamFreq[0];
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8007030:	693a      	ldr	r2, [r7, #16]
 8007032:	3317      	adds	r3, #23
 8007034:	00db      	lsls	r3, r3, #3
 8007036:	4413      	add	r3, r2
 8007038:	68db      	ldr	r3, [r3, #12]
 800703a:	3308      	adds	r3, #8
 800703c:	60fb      	str	r3, [r7, #12]

      status = USBH_AUDIO_SetEndpointControls(phost, AUDIO_Handle->headphone.Ep, buff);
 800703e:	693b      	ldr	r3, [r7, #16]
 8007040:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 8007044:	68fa      	ldr	r2, [r7, #12]
 8007046:	4619      	mov	r1, r3
 8007048:	6878      	ldr	r0, [r7, #4]
 800704a:	f7ff fed3 	bl	8006df4 <USBH_AUDIO_SetEndpointControls>
 800704e:	4603      	mov	r3, r0
 8007050:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8007052:	7dfb      	ldrb	r3, [r7, #23]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d126      	bne.n	80070a6 <USBH_AUDIO_OutputStream+0xde>
      {
        AUDIO_Handle->play_state = AUDIO_PLAYBACK_IDLE;
 8007058:	693b      	ldr	r3, [r7, #16]
 800705a:	2205      	movs	r2, #5
 800705c:	709a      	strb	r2, [r3, #2]
      }
      break;
 800705e:	e022      	b.n	80070a6 <USBH_AUDIO_OutputStream+0xde>

    case AUDIO_PLAYBACK_SET_EP:
      buff = (uint8_t *)(void *)&AUDIO_Handle->headphone.frequency;
 8007060:	693b      	ldr	r3, [r7, #16]
 8007062:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8007066:	60fb      	str	r3, [r7, #12]
      status = USBH_AUDIO_SetEndpointControls(phost, AUDIO_Handle->headphone.Ep, buff);
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 800706e:	68fa      	ldr	r2, [r7, #12]
 8007070:	4619      	mov	r1, r3
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f7ff febe 	bl	8006df4 <USBH_AUDIO_SetEndpointControls>
 8007078:	4603      	mov	r3, r0
 800707a:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 800707c:	7dfb      	ldrb	r3, [r7, #23]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d113      	bne.n	80070aa <USBH_AUDIO_OutputStream+0xe2>
      {
        AUDIO_Handle->play_state = AUDIO_PLAYBACK_IDLE;
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	2205      	movs	r2, #5
 8007086:	709a      	strb	r2, [r3, #2]
        USBH_AUDIO_FrequencySet(phost);
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	f000 f96e 	bl	800736a <USBH_AUDIO_FrequencySet>
      }
      break;
 800708e:	e00c      	b.n	80070aa <USBH_AUDIO_OutputStream+0xe2>

    case AUDIO_PLAYBACK_IDLE:
      status = USBH_OK;
 8007090:	2300      	movs	r3, #0
 8007092:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007094:	e00a      	b.n	80070ac <USBH_AUDIO_OutputStream+0xe4>

    case AUDIO_PLAYBACK_PLAY:
      USBH_AUDIO_Transmit(phost);
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f000 f80e 	bl	80070b8 <USBH_AUDIO_Transmit>
      status = USBH_OK;
 800709c:	2300      	movs	r3, #0
 800709e:	75fb      	strb	r3, [r7, #23]
      break;
 80070a0:	e004      	b.n	80070ac <USBH_AUDIO_OutputStream+0xe4>

    default:
      break;
 80070a2:	bf00      	nop
 80070a4:	e002      	b.n	80070ac <USBH_AUDIO_OutputStream+0xe4>
      break;
 80070a6:	bf00      	nop
 80070a8:	e000      	b.n	80070ac <USBH_AUDIO_OutputStream+0xe4>
      break;
 80070aa:	bf00      	nop
  }

  return status;
 80070ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80070ae:	4618      	mov	r0, r3
 80070b0:	3718      	adds	r7, #24
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd80      	pop	{r7, pc}
 80070b6:	bf00      	nop

080070b8 <USBH_AUDIO_Transmit>:
  * @brief  Handle Transmission process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_Transmit(USBH_HandleTypeDef *phost)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b084      	sub	sp, #16
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY ;
 80070c0:	2301      	movs	r3, #1
 80070c2:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80070ca:	69db      	ldr	r3, [r3, #28]
 80070cc:	60bb      	str	r3, [r7, #8]

  switch (AUDIO_Handle->processing_state)
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	791b      	ldrb	r3, [r3, #4]
 80070d2:	2b01      	cmp	r3, #1
 80070d4:	d002      	beq.n	80070dc <USBH_AUDIO_Transmit+0x24>
 80070d6:	2b02      	cmp	r3, #2
 80070d8:	d033      	beq.n	8007142 <USBH_AUDIO_Transmit+0x8a>
 80070da:	e096      	b.n	800720a <USBH_AUDIO_Transmit+0x152>
  {
    case AUDIO_DATA_START_OUT:
      /* Sync with start of Even Frame */
      if ((phost->Timer & 1U) == 0U)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 80070e2:	f003 0301 	and.w	r3, r3, #1
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	f040 8092 	bne.w	8007210 <USBH_AUDIO_Transmit+0x158>
      {
        AUDIO_Handle->headphone.timer = phost->Timer;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f8d3 2494 	ldr.w	r2, [r3, #1172]	; 0x494
 80070f2:	68bb      	ldr	r3, [r7, #8]
 80070f4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        AUDIO_Handle->processing_state = AUDIO_DATA_OUT;
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	2202      	movs	r2, #2
 80070fc:	711a      	strb	r2, [r3, #4]
        USBH_IsocSendData(phost,
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
                          AUDIO_Handle->headphone.buf,
                          (uint32_t)AUDIO_Handle->headphone.frame_length,
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	f8b3 3120 	ldrh.w	r3, [r3, #288]	; 0x120
        USBH_IsocSendData(phost,
 800710a:	461a      	mov	r2, r3
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f001 fbfe 	bl	8008914 <USBH_IsocSendData>
                          AUDIO_Handle->headphone.Pipe);

        AUDIO_Handle->headphone.partial_ptr = AUDIO_Handle->headphone.frame_length;
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	f8b3 3120 	ldrh.w	r3, [r3, #288]	; 0x120
 800711e:	461a      	mov	r2, r3
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
        AUDIO_Handle->headphone.global_ptr = AUDIO_Handle->headphone.frame_length;
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	f8b3 3120 	ldrh.w	r3, [r3, #288]	; 0x120
 800712c:	461a      	mov	r2, r3
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
        AUDIO_Handle->headphone.cbuf = AUDIO_Handle->headphone.buf;
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007140:	e066      	b.n	8007210 <USBH_AUDIO_Transmit+0x158>

    case AUDIO_DATA_OUT:
      if ((USBH_LL_GetURBState(phost, AUDIO_Handle->headphone.Pipe) == USBH_URB_DONE) &&
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8007148:	4619      	mov	r1, r3
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f001 ff0b 	bl	8008f66 <USBH_LL_GetURBState>
 8007150:	4603      	mov	r3, r0
 8007152:	2b01      	cmp	r3, #1
 8007154:	d15e      	bne.n	8007214 <USBH_AUDIO_Transmit+0x15c>
          ((phost->Timer - AUDIO_Handle->headphone.timer) >= AUDIO_Handle->headphone.Poll))
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f8d3 2494 	ldr.w	r2, [r3, #1172]	; 0x494
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8007162:	1ad3      	subs	r3, r2, r3
 8007164:	68ba      	ldr	r2, [r7, #8]
 8007166:	f892 20fc 	ldrb.w	r2, [r2, #252]	; 0xfc
      if ((USBH_LL_GetURBState(phost, AUDIO_Handle->headphone.Pipe) == USBH_URB_DONE) &&
 800716a:	4293      	cmp	r3, r2
 800716c:	d352      	bcc.n	8007214 <USBH_AUDIO_Transmit+0x15c>
      {
        AUDIO_Handle->headphone.timer = phost->Timer;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	f8d3 2494 	ldr.w	r2, [r3, #1172]	; 0x494
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

        if (AUDIO_Handle->control.supported == 1U)
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	f893 3189 	ldrb.w	r3, [r3, #393]	; 0x189
 8007180:	2b01      	cmp	r3, #1
 8007182:	d102      	bne.n	800718a <USBH_AUDIO_Transmit+0xd2>
        {
          USBH_AUDIO_Control(phost);
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f7ff fe6b 	bl	8006e60 <USBH_AUDIO_Control>
        }

        if (AUDIO_Handle->headphone.global_ptr <= AUDIO_Handle->headphone.total_length)
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8007196:	429a      	cmp	r2, r3
 8007198:	d82b      	bhi.n	80071f2 <USBH_AUDIO_Transmit+0x13a>
        {
          USBH_IsocSendData(phost,
 800719a:	68bb      	ldr	r3, [r7, #8]
 800719c:	f8d3 1114 	ldr.w	r1, [r3, #276]	; 0x114
                            AUDIO_Handle->headphone.cbuf,
                            (uint32_t)AUDIO_Handle->headphone.frame_length,
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	f8b3 3120 	ldrh.w	r3, [r3, #288]	; 0x120
          USBH_IsocSendData(phost,
 80071a6:	461a      	mov	r2, r3
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f001 fbb0 	bl	8008914 <USBH_IsocSendData>
                            AUDIO_Handle->headphone.Pipe);

          AUDIO_Handle->headphone.cbuf += AUDIO_Handle->headphone.frame_length;
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80071ba:	68ba      	ldr	r2, [r7, #8]
 80071bc:	f8b2 2120 	ldrh.w	r2, [r2, #288]	; 0x120
 80071c0:	441a      	add	r2, r3
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
          AUDIO_Handle->headphone.partial_ptr += AUDIO_Handle->headphone.frame_length;
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 80071ce:	68ba      	ldr	r2, [r7, #8]
 80071d0:	f8b2 2120 	ldrh.w	r2, [r2, #288]	; 0x120
 80071d4:	441a      	add	r2, r3
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
          AUDIO_Handle->headphone.global_ptr += AUDIO_Handle->headphone.frame_length;
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 80071e2:	68ba      	ldr	r2, [r7, #8]
 80071e4:	f8b2 2120 	ldrh.w	r2, [r2, #288]	; 0x120
 80071e8:	441a      	add	r2, r3
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
          AUDIO_Handle->headphone.partial_ptr = 0xFFFFFFFFU;
          AUDIO_Handle->play_state = AUDIO_PLAYBACK_IDLE;
          USBH_AUDIO_BufferEmptyCallback(phost);
        }
      }
      break;
 80071f0:	e010      	b.n	8007214 <USBH_AUDIO_Transmit+0x15c>
          AUDIO_Handle->headphone.partial_ptr = 0xFFFFFFFFU;
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80071f8:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
          AUDIO_Handle->play_state = AUDIO_PLAYBACK_IDLE;
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	2205      	movs	r2, #5
 8007200:	709a      	strb	r2, [r3, #2]
          USBH_AUDIO_BufferEmptyCallback(phost);
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f000 f8bb 	bl	800737e <USBH_AUDIO_BufferEmptyCallback>
      break;
 8007208:	e004      	b.n	8007214 <USBH_AUDIO_Transmit+0x15c>

    default:
      status = USBH_FAIL;
 800720a:	2302      	movs	r3, #2
 800720c:	73fb      	strb	r3, [r7, #15]
      break;
 800720e:	e002      	b.n	8007216 <USBH_AUDIO_Transmit+0x15e>
      break;
 8007210:	bf00      	nop
 8007212:	e000      	b.n	8007216 <USBH_AUDIO_Transmit+0x15e>
      break;
 8007214:	bf00      	nop
  }
  return status;
 8007216:	7bfb      	ldrb	r3, [r7, #15]
}
 8007218:	4618      	mov	r0, r3
 800721a:	3710      	adds	r7, #16
 800721c:	46bd      	mov	sp, r7
 800721e:	bd80      	pop	{r7, pc}

08007220 <USBH_AUDIO_SetControlAttribute>:
  * @param  phost: Host handle
  * @param  attrib: control attribute
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_SetControlAttribute(USBH_HandleTypeDef *phost, uint8_t attrib)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b084      	sub	sp, #16
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
 8007228:	460b      	mov	r3, r1
 800722a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_BUSY;
 800722c:	2301      	movs	r3, #1
 800722e:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;


  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8007236:	69db      	ldr	r3, [r3, #28]
 8007238:	60bb      	str	r3, [r7, #8]

  switch (attrib)
 800723a:	78fb      	ldrb	r3, [r7, #3]
 800723c:	2b01      	cmp	r3, #1
 800723e:	d002      	beq.n	8007246 <USBH_AUDIO_SetControlAttribute+0x26>
 8007240:	2b02      	cmp	r3, #2
 8007242:	d00b      	beq.n	800725c <USBH_AUDIO_SetControlAttribute+0x3c>
 8007244:	e015      	b.n	8007272 <USBH_AUDIO_SetControlAttribute+0x52>
  {
    case 0x01:
      AUDIO_Handle->headphone.attribute.volume += AUDIO_Handle->headphone.attribute.resolution;
 8007246:	68bb      	ldr	r3, [r7, #8]
 8007248:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8007252:	441a      	add	r2, r3
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
      break;
 800725a:	e00d      	b.n	8007278 <USBH_AUDIO_SetControlAttribute+0x58>

    case 0x02:
      AUDIO_Handle->headphone.attribute.volume -= AUDIO_Handle->headphone.attribute.resolution;
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8007268:	1ad2      	subs	r2, r2, r3
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
      break;
 8007270:	e002      	b.n	8007278 <USBH_AUDIO_SetControlAttribute+0x58>

    default :
      status = USBH_FAIL;
 8007272:	2302      	movs	r3, #2
 8007274:	73fb      	strb	r3, [r7, #15]
      break;
 8007276:	bf00      	nop
  }

  if (AUDIO_Handle->headphone.attribute.volume > AUDIO_Handle->headphone.attribute.volumeMax)
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 8007284:	429a      	cmp	r2, r3
 8007286:	d905      	bls.n	8007294 <USBH_AUDIO_SetControlAttribute+0x74>
  {
    AUDIO_Handle->headphone.attribute.volume = AUDIO_Handle->headphone.attribute.volumeMax;
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
  }

  if (AUDIO_Handle->headphone.attribute.volume < AUDIO_Handle->headphone.attribute.volumeMin)
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 80072a0:	429a      	cmp	r2, r3
 80072a2:	d205      	bcs.n	80072b0 <USBH_AUDIO_SetControlAttribute+0x90>
  {
    AUDIO_Handle->headphone.attribute.volume = AUDIO_Handle->headphone.attribute.volumeMin;
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
  }

  if (AUDIO_SetVolume(phost,
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	f893 11a0 	ldrb.w	r1, [r3, #416]	; 0x1a0
                      AUDIO_Handle->temp_feature,
                      (uint8_t)AUDIO_Handle->temp_channels,
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	f893 21a1 	ldrb.w	r2, [r3, #417]	; 0x1a1
                      (uint16_t)AUDIO_Handle->headphone.attribute.volume) != USBH_BUSY)
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
  if (AUDIO_SetVolume(phost,
 80072c2:	b29b      	uxth	r3, r3
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f000 f827 	bl	8007318 <AUDIO_SetVolume>
 80072ca:	4603      	mov	r3, r0
 80072cc:	2b01      	cmp	r3, #1
 80072ce:	d01e      	beq.n	800730e <USBH_AUDIO_SetControlAttribute+0xee>
  {

    if (AUDIO_Handle->temp_channels == 1U)
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 80072d6:	2b01      	cmp	r3, #1
 80072d8:	d10e      	bne.n	80072f8 <USBH_AUDIO_SetControlAttribute+0xd8>
    {
      AUDIO_Handle->temp_feature = AUDIO_Handle->headphone.asociated_feature;
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
      AUDIO_Handle->temp_channels = AUDIO_Handle->headphone.asociated_channels;
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	f893 2109 	ldrb.w	r2, [r3, #265]	; 0x109
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
      status = USBH_OK;
 80072f2:	2300      	movs	r3, #0
 80072f4:	73fb      	strb	r3, [r7, #15]
 80072f6:	e007      	b.n	8007308 <USBH_AUDIO_SetControlAttribute+0xe8>
    }
    else
    {
      AUDIO_Handle->temp_channels--;
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 80072fe:	3b01      	subs	r3, #1
 8007300:	b2da      	uxtb	r2, r3
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
    }
    AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_VOLUME;
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	2206      	movs	r2, #6
 800730c:	705a      	strb	r2, [r3, #1]
  }


  return status;
 800730e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007310:	4618      	mov	r0, r3
 8007312:	3710      	adds	r7, #16
 8007314:	46bd      	mov	sp, r7
 8007316:	bd80      	pop	{r7, pc}

08007318 <AUDIO_SetVolume>:
  * @param  channel: channel index
  * @param  volume: new volume
  * @retval USBH Status
  */
static USBH_StatusTypeDef AUDIO_SetVolume(USBH_HandleTypeDef *phost, uint8_t feature, uint8_t channel, uint16_t volume)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b086      	sub	sp, #24
 800731c:	af02      	add	r7, sp, #8
 800731e:	6078      	str	r0, [r7, #4]
 8007320:	4608      	mov	r0, r1
 8007322:	4611      	mov	r1, r2
 8007324:	461a      	mov	r2, r3
 8007326:	4603      	mov	r3, r0
 8007328:	70fb      	strb	r3, [r7, #3]
 800732a:	460b      	mov	r3, r1
 800732c:	70bb      	strb	r3, [r7, #2]
 800732e:	4613      	mov	r3, r2
 8007330:	803b      	strh	r3, [r7, #0]
  USBH_StatusTypeDef status = USBH_BUSY ;
 8007332:	2301      	movs	r3, #1
 8007334:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;


  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 800733c:	69db      	ldr	r3, [r3, #28]
 800733e:	60bb      	str	r3, [r7, #8]

  AUDIO_Handle->mem[0] = volume;
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	883a      	ldrh	r2, [r7, #0]
 8007344:	f8a3 2190 	strh.w	r2, [r3, #400]	; 0x190

  status = USBH_AC_SetCur(phost, UAC_FEATURE_UNIT, feature,
 8007348:	78fa      	ldrb	r2, [r7, #3]
 800734a:	2302      	movs	r3, #2
 800734c:	9301      	str	r3, [sp, #4]
 800734e:	78bb      	ldrb	r3, [r7, #2]
 8007350:	9300      	str	r3, [sp, #0]
 8007352:	2302      	movs	r3, #2
 8007354:	2106      	movs	r1, #6
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	f7ff fa76 	bl	8006848 <USBH_AC_SetCur>
 800735c:	4603      	mov	r3, r0
 800735e:	73fb      	strb	r3, [r7, #15]
                          VOLUME_CONTROL, channel, 2U);

  return status;
 8007360:	7bfb      	ldrb	r3, [r7, #15]
}
 8007362:	4618      	mov	r0, r3
 8007364:	3710      	adds	r7, #16
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}

0800736a <USBH_AUDIO_FrequencySet>:
  * @brief  The function informs user that Settings have been changed
  *  @param  phost: Selected device
  * @retval None
  */
__weak void USBH_AUDIO_FrequencySet(USBH_HandleTypeDef *phost)
{
 800736a:	b480      	push	{r7}
 800736c:	b083      	sub	sp, #12
 800736e:	af00      	add	r7, sp, #0
 8007370:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007372:	bf00      	nop
 8007374:	370c      	adds	r7, #12
 8007376:	46bd      	mov	sp, r7
 8007378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737c:	4770      	bx	lr

0800737e <USBH_AUDIO_BufferEmptyCallback>:
  * @brief  The function informs user that User data are processed
  *  @param  phost: Selected device
  * @retval None
  */
__weak void  USBH_AUDIO_BufferEmptyCallback(USBH_HandleTypeDef *phost)
{
 800737e:	b480      	push	{r7}
 8007380:	b083      	sub	sp, #12
 8007382:	af00      	add	r7, sp, #0
 8007384:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007386:	bf00      	nop
 8007388:	370c      	adds	r7, #12
 800738a:	46bd      	mov	sp, r7
 800738c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007390:	4770      	bx	lr

08007392 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8007392:	b580      	push	{r7, lr}
 8007394:	b084      	sub	sp, #16
 8007396:	af00      	add	r7, sp, #0
 8007398:	60f8      	str	r0, [r7, #12]
 800739a:	60b9      	str	r1, [r7, #8]
 800739c:	4613      	mov	r3, r2
 800739e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d101      	bne.n	80073aa <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80073a6:	2302      	movs	r3, #2
 80073a8:	e029      	b.n	80073fe <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	79fa      	ldrb	r2, [r7, #7]
 80073ae:	f883 249c 	strb.w	r2, [r3, #1180]	; 0x49c

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	2200      	movs	r2, #0
 80073b6:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
  phost->ClassNumber = 0U;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	2200      	movs	r2, #0
 80073be:	f8c3 2450 	str.w	r2, [r3, #1104]	; 0x450

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 80073c2:	68f8      	ldr	r0, [r7, #12]
 80073c4:	f000 f81f 	bl	8007406 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	2200      	movs	r2, #0
 80073cc:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	2200      	movs	r2, #0
 80073d4:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	2200      	movs	r2, #0
 80073dc:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	2200      	movs	r2, #0
 80073e4:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d003      	beq.n	80073f6 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	68ba      	ldr	r2, [r7, #8]
 80073f2:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 80073f6:	68f8      	ldr	r0, [r7, #12]
 80073f8:	f001 fc82 	bl	8008d00 <USBH_LL_Init>

  return USBH_OK;
 80073fc:	2300      	movs	r3, #0
}
 80073fe:	4618      	mov	r0, r3
 8007400:	3710      	adds	r7, #16
 8007402:	46bd      	mov	sp, r7
 8007404:	bd80      	pop	{r7, pc}

08007406 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007406:	b480      	push	{r7}
 8007408:	b085      	sub	sp, #20
 800740a:	af00      	add	r7, sp, #0
 800740c:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800740e:	2300      	movs	r3, #0
 8007410:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007412:	2300      	movs	r3, #0
 8007414:	60fb      	str	r3, [r7, #12]
 8007416:	e00a      	b.n	800742e <DeInitStateMachine+0x28>
  {
    phost->Pipes[i] = 0U;
 8007418:	687a      	ldr	r2, [r7, #4]
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8007420:	009b      	lsls	r3, r3, #2
 8007422:	4413      	add	r3, r2
 8007424:	2200      	movs	r2, #0
 8007426:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	3301      	adds	r3, #1
 800742c:	60fb      	str	r3, [r7, #12]
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	2b0e      	cmp	r3, #14
 8007432:	d9f1      	bls.n	8007418 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007434:	2300      	movs	r3, #0
 8007436:	60fb      	str	r3, [r7, #12]
 8007438:	e009      	b.n	800744e <DeInitStateMachine+0x48>
  {
    phost->device.Data[i] = 0U;
 800743a:	687a      	ldr	r2, [r7, #4]
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	4413      	add	r3, r2
 8007440:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007444:	2200      	movs	r2, #0
 8007446:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	3301      	adds	r3, #1
 800744c:	60fb      	str	r3, [r7, #12]
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007454:	d3f1      	bcc.n	800743a <DeInitStateMachine+0x34>
  }

  phost->gState = HOST_IDLE;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2200      	movs	r2, #0
 800745a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2200      	movs	r2, #0
 8007460:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2201      	movs	r2, #1
 8007466:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2200      	movs	r2, #0
 800746c:	f8c3 2494 	str.w	r2, [r3, #1172]	; 0x494

  phost->Control.state = CTRL_SETUP;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2201      	movs	r2, #1
 8007474:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2240      	movs	r2, #64	; 0x40
 800747a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2200      	movs	r2, #0
 8007480:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2200      	movs	r2, #0
 8007486:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2201      	movs	r2, #1
 800748e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2200      	movs	r2, #0
 8007496:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2200      	movs	r2, #0
 800749e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80074a2:	2300      	movs	r3, #0
}
 80074a4:	4618      	mov	r0, r3
 80074a6:	3714      	adds	r7, #20
 80074a8:	46bd      	mov	sp, r7
 80074aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ae:	4770      	bx	lr

080074b0 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80074b0:	b480      	push	{r7}
 80074b2:	b085      	sub	sp, #20
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
 80074b8:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80074ba:	2300      	movs	r3, #0
 80074bc:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d017      	beq.n	80074f4 <USBH_RegisterClass+0x44>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	f8d3 3450 	ldr.w	r3, [r3, #1104]	; 0x450
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d10f      	bne.n	80074ee <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f8d3 3450 	ldr.w	r3, [r3, #1104]	; 0x450
 80074d4:	1c59      	adds	r1, r3, #1
 80074d6:	687a      	ldr	r2, [r7, #4]
 80074d8:	f8c2 1450 	str.w	r1, [r2, #1104]	; 0x450
 80074dc:	687a      	ldr	r2, [r7, #4]
 80074de:	f503 7389 	add.w	r3, r3, #274	; 0x112
 80074e2:	6839      	ldr	r1, [r7, #0]
 80074e4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80074e8:	2300      	movs	r3, #0
 80074ea:	73fb      	strb	r3, [r7, #15]
 80074ec:	e004      	b.n	80074f8 <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80074ee:	2302      	movs	r3, #2
 80074f0:	73fb      	strb	r3, [r7, #15]
 80074f2:	e001      	b.n	80074f8 <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80074f4:	2302      	movs	r3, #2
 80074f6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80074f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80074fa:	4618      	mov	r0, r3
 80074fc:	3714      	adds	r7, #20
 80074fe:	46bd      	mov	sp, r7
 8007500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007504:	4770      	bx	lr

08007506 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007506:	b480      	push	{r7}
 8007508:	b087      	sub	sp, #28
 800750a:	af00      	add	r7, sp, #0
 800750c:	6078      	str	r0, [r7, #4]
 800750e:	4608      	mov	r0, r1
 8007510:	4611      	mov	r1, r2
 8007512:	461a      	mov	r2, r3
 8007514:	4603      	mov	r3, r0
 8007516:	70fb      	strb	r3, [r7, #3]
 8007518:	460b      	mov	r3, r1
 800751a:	70bb      	strb	r3, [r7, #2]
 800751c:	4613      	mov	r3, r2
 800751e:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007520:	2300      	movs	r3, #0
 8007522:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8007524:	2300      	movs	r3, #0
 8007526:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800752e:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007530:	e025      	b.n	800757e <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007532:	7dfb      	ldrb	r3, [r7, #23]
 8007534:	221a      	movs	r2, #26
 8007536:	fb02 f303 	mul.w	r3, r2, r3
 800753a:	3308      	adds	r3, #8
 800753c:	68fa      	ldr	r2, [r7, #12]
 800753e:	4413      	add	r3, r2
 8007540:	3302      	adds	r3, #2
 8007542:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007544:	693b      	ldr	r3, [r7, #16]
 8007546:	795b      	ldrb	r3, [r3, #5]
 8007548:	78fa      	ldrb	r2, [r7, #3]
 800754a:	429a      	cmp	r2, r3
 800754c:	d002      	beq.n	8007554 <USBH_FindInterface+0x4e>
 800754e:	78fb      	ldrb	r3, [r7, #3]
 8007550:	2bff      	cmp	r3, #255	; 0xff
 8007552:	d111      	bne.n	8007578 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007554:	693b      	ldr	r3, [r7, #16]
 8007556:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007558:	78ba      	ldrb	r2, [r7, #2]
 800755a:	429a      	cmp	r2, r3
 800755c:	d002      	beq.n	8007564 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800755e:	78bb      	ldrb	r3, [r7, #2]
 8007560:	2bff      	cmp	r3, #255	; 0xff
 8007562:	d109      	bne.n	8007578 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007564:	693b      	ldr	r3, [r7, #16]
 8007566:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007568:	787a      	ldrb	r2, [r7, #1]
 800756a:	429a      	cmp	r2, r3
 800756c:	d002      	beq.n	8007574 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800756e:	787b      	ldrb	r3, [r7, #1]
 8007570:	2bff      	cmp	r3, #255	; 0xff
 8007572:	d101      	bne.n	8007578 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007574:	7dfb      	ldrb	r3, [r7, #23]
 8007576:	e006      	b.n	8007586 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007578:	7dfb      	ldrb	r3, [r7, #23]
 800757a:	3301      	adds	r3, #1
 800757c:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800757e:	7dfb      	ldrb	r3, [r7, #23]
 8007580:	2b09      	cmp	r3, #9
 8007582:	d9d6      	bls.n	8007532 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007584:	23ff      	movs	r3, #255	; 0xff
}
 8007586:	4618      	mov	r0, r3
 8007588:	371c      	adds	r7, #28
 800758a:	46bd      	mov	sp, r7
 800758c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007590:	4770      	bx	lr

08007592 <USBH_FindInterfaceIndex>:
  * @param  alt_settings    : alternate setting number
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterfaceIndex(USBH_HandleTypeDef *phost, uint8_t interface_number, uint8_t alt_settings)
{
 8007592:	b480      	push	{r7}
 8007594:	b087      	sub	sp, #28
 8007596:	af00      	add	r7, sp, #0
 8007598:	6078      	str	r0, [r7, #4]
 800759a:	460b      	mov	r3, r1
 800759c:	70fb      	strb	r3, [r7, #3]
 800759e:	4613      	mov	r3, r2
 80075a0:	70bb      	strb	r3, [r7, #2]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80075a2:	2300      	movs	r3, #0
 80075a4:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 80075a6:	2300      	movs	r3, #0
 80075a8:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80075b0:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80075b2:	e017      	b.n	80075e4 <USBH_FindInterfaceIndex+0x52>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80075b4:	7dfb      	ldrb	r3, [r7, #23]
 80075b6:	221a      	movs	r2, #26
 80075b8:	fb02 f303 	mul.w	r3, r2, r3
 80075bc:	3308      	adds	r3, #8
 80075be:	68fa      	ldr	r2, [r7, #12]
 80075c0:	4413      	add	r3, r2
 80075c2:	3302      	adds	r3, #2
 80075c4:	613b      	str	r3, [r7, #16]
    if ((pif->bInterfaceNumber == interface_number) && (pif->bAlternateSetting == alt_settings))
 80075c6:	693b      	ldr	r3, [r7, #16]
 80075c8:	789b      	ldrb	r3, [r3, #2]
 80075ca:	78fa      	ldrb	r2, [r7, #3]
 80075cc:	429a      	cmp	r2, r3
 80075ce:	d106      	bne.n	80075de <USBH_FindInterfaceIndex+0x4c>
 80075d0:	693b      	ldr	r3, [r7, #16]
 80075d2:	78db      	ldrb	r3, [r3, #3]
 80075d4:	78ba      	ldrb	r2, [r7, #2]
 80075d6:	429a      	cmp	r2, r3
 80075d8:	d101      	bne.n	80075de <USBH_FindInterfaceIndex+0x4c>
    {
      return  if_ix;
 80075da:	7dfb      	ldrb	r3, [r7, #23]
 80075dc:	e006      	b.n	80075ec <USBH_FindInterfaceIndex+0x5a>
    }
    if_ix++;
 80075de:	7dfb      	ldrb	r3, [r7, #23]
 80075e0:	3301      	adds	r3, #1
 80075e2:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80075e4:	7dfb      	ldrb	r3, [r7, #23]
 80075e6:	2b09      	cmp	r3, #9
 80075e8:	d9e4      	bls.n	80075b4 <USBH_FindInterfaceIndex+0x22>
  }
  return 0xFFU;
 80075ea:	23ff      	movs	r3, #255	; 0xff
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	371c      	adds	r7, #28
 80075f0:	46bd      	mov	sp, r7
 80075f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f6:	4770      	bx	lr

080075f8 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b082      	sub	sp, #8
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8007600:	6878      	ldr	r0, [r7, #4]
 8007602:	f001 fbb9 	bl	8008d78 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8007606:	2101      	movs	r1, #1
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f001 fcbf 	bl	8008f8c <USBH_LL_DriverVBUS>

  return USBH_OK;
 800760e:	2300      	movs	r3, #0
}
 8007610:	4618      	mov	r0, r3
 8007612:	3708      	adds	r7, #8
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}

08007618 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b088      	sub	sp, #32
 800761c:	af04      	add	r7, sp, #16
 800761e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007620:	2302      	movs	r3, #2
 8007622:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007624:	2300      	movs	r3, #0
 8007626:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800762e:	b2db      	uxtb	r3, r3
 8007630:	2b01      	cmp	r3, #1
 8007632:	d102      	bne.n	800763a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2203      	movs	r2, #3
 8007638:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	781b      	ldrb	r3, [r3, #0]
 800763e:	b2db      	uxtb	r3, r3
 8007640:	2b0b      	cmp	r3, #11
 8007642:	f200 81b5 	bhi.w	80079b0 <USBH_Process+0x398>
 8007646:	a201      	add	r2, pc, #4	; (adr r2, 800764c <USBH_Process+0x34>)
 8007648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800764c:	0800767d 	.word	0x0800767d
 8007650:	080076af 	.word	0x080076af
 8007654:	08007717 	.word	0x08007717
 8007658:	0800794b 	.word	0x0800794b
 800765c:	080079b1 	.word	0x080079b1
 8007660:	080077bb 	.word	0x080077bb
 8007664:	080078f1 	.word	0x080078f1
 8007668:	080077f1 	.word	0x080077f1
 800766c:	08007811 	.word	0x08007811
 8007670:	08007831 	.word	0x08007831
 8007674:	0800785f 	.word	0x0800785f
 8007678:	08007933 	.word	0x08007933
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007682:	b2db      	uxtb	r3, r3
 8007684:	2b00      	cmp	r3, #0
 8007686:	f000 8195 	beq.w	80079b4 <USBH_Process+0x39c>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2201      	movs	r2, #1
 800768e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007690:	20c8      	movs	r0, #200	; 0xc8
 8007692:	f001 fcc2 	bl	800901a <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f001 fbcb 	bl	8008e32 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2200      	movs	r2, #0
 80076a0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2200      	movs	r2, #0
 80076a8:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80076ac:	e182      	b.n	80079b4 <USBH_Process+0x39c>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80076b4:	2b01      	cmp	r3, #1
 80076b6:	d107      	bne.n	80076c8 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2200      	movs	r2, #0
 80076bc:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2202      	movs	r2, #2
 80076c4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80076c6:	e184      	b.n	80079d2 <USBH_Process+0x3ba>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 80076ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80076d2:	d914      	bls.n	80076fe <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80076da:	3301      	adds	r3, #1
 80076dc:	b2da      	uxtb	r2, r3
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80076ea:	2b03      	cmp	r3, #3
 80076ec:	d903      	bls.n	80076f6 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	220d      	movs	r2, #13
 80076f2:	701a      	strb	r2, [r3, #0]
      break;
 80076f4:	e16d      	b.n	80079d2 <USBH_Process+0x3ba>
            phost->gState = HOST_IDLE;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2200      	movs	r2, #0
 80076fa:	701a      	strb	r2, [r3, #0]
      break;
 80076fc:	e169      	b.n	80079d2 <USBH_Process+0x3ba>
          phost->Timeout += 10U;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 8007704:	f103 020a 	add.w	r2, r3, #10
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498
          USBH_Delay(10U);
 800770e:	200a      	movs	r0, #10
 8007710:	f001 fc83 	bl	800901a <USBH_Delay>
      break;
 8007714:	e15d      	b.n	80079d2 <USBH_Process+0x3ba>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 800771c:	2b00      	cmp	r3, #0
 800771e:	d005      	beq.n	800772c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8007726:	2104      	movs	r1, #4
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800772c:	2064      	movs	r0, #100	; 0x64
 800772e:	f001 fc74 	bl	800901a <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f001 fb56 	bl	8008de4 <USBH_LL_GetSpeed>
 8007738:	4603      	mov	r3, r0
 800773a:	461a      	mov	r2, r3
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2205      	movs	r2, #5
 8007746:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007748:	2100      	movs	r1, #0
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	f001 f92c 	bl	80089a8 <USBH_AllocPipe>
 8007750:	4603      	mov	r3, r0
 8007752:	461a      	mov	r2, r3
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007758:	2180      	movs	r1, #128	; 0x80
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	f001 f924 	bl	80089a8 <USBH_AllocPipe>
 8007760:	4603      	mov	r3, r0
 8007762:	461a      	mov	r2, r3
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	7919      	ldrb	r1, [r3, #4]
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007778:	687a      	ldr	r2, [r7, #4]
 800777a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800777c:	b292      	uxth	r2, r2
 800777e:	9202      	str	r2, [sp, #8]
 8007780:	2200      	movs	r2, #0
 8007782:	9201      	str	r2, [sp, #4]
 8007784:	9300      	str	r3, [sp, #0]
 8007786:	4603      	mov	r3, r0
 8007788:	2280      	movs	r2, #128	; 0x80
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f001 f8dd 	bl	800894a <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	7959      	ldrb	r1, [r3, #5]
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80077a0:	687a      	ldr	r2, [r7, #4]
 80077a2:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80077a4:	b292      	uxth	r2, r2
 80077a6:	9202      	str	r2, [sp, #8]
 80077a8:	2200      	movs	r2, #0
 80077aa:	9201      	str	r2, [sp, #4]
 80077ac:	9300      	str	r3, [sp, #0]
 80077ae:	4603      	mov	r3, r0
 80077b0:	2200      	movs	r2, #0
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f001 f8c9 	bl	800894a <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80077b8:	e10b      	b.n	80079d2 <USBH_Process+0x3ba>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f000 f90e 	bl	80079dc <USBH_HandleEnum>
 80077c0:	4603      	mov	r3, r0
 80077c2:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80077c4:	7bbb      	ldrb	r3, [r7, #14]
 80077c6:	b2db      	uxtb	r3, r3
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	f040 80f5 	bne.w	80079b8 <USBH_Process+0x3a0>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2200      	movs	r2, #0
 80077d2:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80077dc:	2b01      	cmp	r3, #1
 80077de:	d103      	bne.n	80077e8 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2208      	movs	r2, #8
 80077e4:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80077e6:	e0e7      	b.n	80079b8 <USBH_Process+0x3a0>
          phost->gState = HOST_INPUT;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2207      	movs	r2, #7
 80077ec:	701a      	strb	r2, [r3, #0]
      break;
 80077ee:	e0e3      	b.n	80079b8 <USBH_Process+0x3a0>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	f000 80e0 	beq.w	80079bc <USBH_Process+0x3a4>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8007802:	2101      	movs	r1, #1
 8007804:	6878      	ldr	r0, [r7, #4]
 8007806:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2208      	movs	r2, #8
 800780c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800780e:	e0d5      	b.n	80079bc <USBH_Process+0x3a4>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8007816:	b29b      	uxth	r3, r3
 8007818:	4619      	mov	r1, r3
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f000 fc22 	bl	8008064 <USBH_SetCfg>
 8007820:	4603      	mov	r3, r0
 8007822:	2b00      	cmp	r3, #0
 8007824:	f040 80cc 	bne.w	80079c0 <USBH_Process+0x3a8>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2209      	movs	r2, #9
 800782c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800782e:	e0c7      	b.n	80079c0 <USBH_Process+0x3a8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8007836:	f003 0320 	and.w	r3, r3, #32
 800783a:	2b00      	cmp	r3, #0
 800783c:	d00b      	beq.n	8007856 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800783e:	2101      	movs	r1, #1
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f000 fc59 	bl	80080f8 <USBH_SetFeature>
 8007846:	4603      	mov	r3, r0
 8007848:	2b00      	cmp	r3, #0
 800784a:	f040 80bb 	bne.w	80079c4 <USBH_Process+0x3ac>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	220a      	movs	r2, #10
 8007852:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007854:	e0b6      	b.n	80079c4 <USBH_Process+0x3ac>
        phost->gState = HOST_CHECK_CLASS;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	220a      	movs	r2, #10
 800785a:	701a      	strb	r2, [r3, #0]
      break;
 800785c:	e0b2      	b.n	80079c4 <USBH_Process+0x3ac>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	f8d3 3450 	ldr.w	r3, [r3, #1104]	; 0x450
 8007864:	2b00      	cmp	r3, #0
 8007866:	f000 80af 	beq.w	80079c8 <USBH_Process+0x3b0>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2200      	movs	r2, #0
 800786e:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007872:	2300      	movs	r3, #0
 8007874:	73fb      	strb	r3, [r7, #15]
 8007876:	e018      	b.n	80078aa <USBH_Process+0x292>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007878:	7bfa      	ldrb	r2, [r7, #15]
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	f502 7289 	add.w	r2, r2, #274	; 0x112
 8007880:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007884:	791a      	ldrb	r2, [r3, #4]
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800788c:	429a      	cmp	r2, r3
 800788e:	d109      	bne.n	80078a4 <USBH_Process+0x28c>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007890:	7bfa      	ldrb	r2, [r7, #15]
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	f502 7289 	add.w	r2, r2, #274	; 0x112
 8007898:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
            break;
 80078a2:	e005      	b.n	80078b0 <USBH_Process+0x298>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80078a4:	7bfb      	ldrb	r3, [r7, #15]
 80078a6:	3301      	adds	r3, #1
 80078a8:	73fb      	strb	r3, [r7, #15]
 80078aa:	7bfb      	ldrb	r3, [r7, #15]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d0e3      	beq.n	8007878 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d016      	beq.n	80078e8 <USBH_Process+0x2d0>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80078c0:	689b      	ldr	r3, [r3, #8]
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	4798      	blx	r3
 80078c6:	4603      	mov	r3, r0
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d109      	bne.n	80078e0 <USBH_Process+0x2c8>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2206      	movs	r2, #6
 80078d0:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 80078d8:	2103      	movs	r1, #3
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80078de:	e073      	b.n	80079c8 <USBH_Process+0x3b0>
            phost->gState = HOST_ABORT_STATE;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	220d      	movs	r2, #13
 80078e4:	701a      	strb	r2, [r3, #0]
      break;
 80078e6:	e06f      	b.n	80079c8 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	220d      	movs	r2, #13
 80078ec:	701a      	strb	r2, [r3, #0]
      break;
 80078ee:	e06b      	b.n	80079c8 <USBH_Process+0x3b0>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d017      	beq.n	800792a <USBH_Process+0x312>
      {
        status = phost->pActiveClass->Requests(phost);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8007900:	691b      	ldr	r3, [r3, #16]
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	4798      	blx	r3
 8007906:	4603      	mov	r3, r0
 8007908:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800790a:	7bbb      	ldrb	r3, [r7, #14]
 800790c:	b2db      	uxtb	r3, r3
 800790e:	2b00      	cmp	r3, #0
 8007910:	d103      	bne.n	800791a <USBH_Process+0x302>
        {
          phost->gState = HOST_CLASS;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	220b      	movs	r2, #11
 8007916:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007918:	e058      	b.n	80079cc <USBH_Process+0x3b4>
        else if (status == USBH_FAIL)
 800791a:	7bbb      	ldrb	r3, [r7, #14]
 800791c:	b2db      	uxtb	r3, r3
 800791e:	2b02      	cmp	r3, #2
 8007920:	d154      	bne.n	80079cc <USBH_Process+0x3b4>
          phost->gState = HOST_ABORT_STATE;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	220d      	movs	r2, #13
 8007926:	701a      	strb	r2, [r3, #0]
      break;
 8007928:	e050      	b.n	80079cc <USBH_Process+0x3b4>
        phost->gState = HOST_ABORT_STATE;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	220d      	movs	r2, #13
 800792e:	701a      	strb	r2, [r3, #0]
      break;
 8007930:	e04c      	b.n	80079cc <USBH_Process+0x3b4>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8007938:	2b00      	cmp	r3, #0
 800793a:	d049      	beq.n	80079d0 <USBH_Process+0x3b8>
      {
        phost->pActiveClass->BgndProcess(phost);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8007942:	695b      	ldr	r3, [r3, #20]
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	4798      	blx	r3
      }
      break;
 8007948:	e042      	b.n	80079d0 <USBH_Process+0x3b8>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2200      	movs	r2, #0
 800794e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f7ff fd57 	bl	8007406 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 800795e:	2b00      	cmp	r3, #0
 8007960:	d009      	beq.n	8007976 <USBH_Process+0x35e>
      {
        phost->pActiveClass->DeInit(phost);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8007968:	68db      	ldr	r3, [r3, #12]
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2200      	movs	r2, #0
 8007972:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
      }

      if (phost->pUser != NULL)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 800797c:	2b00      	cmp	r3, #0
 800797e:	d005      	beq.n	800798c <USBH_Process+0x374>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8007986:	2105      	movs	r1, #5
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8007992:	b2db      	uxtb	r3, r3
 8007994:	2b01      	cmp	r3, #1
 8007996:	d107      	bne.n	80079a8 <USBH_Process+0x390>
      {
        phost->device.is_ReEnumerated = 0U;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2200      	movs	r2, #0
 800799c:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f7ff fe29 	bl	80075f8 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80079a6:	e014      	b.n	80079d2 <USBH_Process+0x3ba>
        USBH_LL_Start(phost);
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f001 f9e5 	bl	8008d78 <USBH_LL_Start>
      break;
 80079ae:	e010      	b.n	80079d2 <USBH_Process+0x3ba>

    case HOST_ABORT_STATE:
    default :
      break;
 80079b0:	bf00      	nop
 80079b2:	e00e      	b.n	80079d2 <USBH_Process+0x3ba>
      break;
 80079b4:	bf00      	nop
 80079b6:	e00c      	b.n	80079d2 <USBH_Process+0x3ba>
      break;
 80079b8:	bf00      	nop
 80079ba:	e00a      	b.n	80079d2 <USBH_Process+0x3ba>
    break;
 80079bc:	bf00      	nop
 80079be:	e008      	b.n	80079d2 <USBH_Process+0x3ba>
      break;
 80079c0:	bf00      	nop
 80079c2:	e006      	b.n	80079d2 <USBH_Process+0x3ba>
      break;
 80079c4:	bf00      	nop
 80079c6:	e004      	b.n	80079d2 <USBH_Process+0x3ba>
      break;
 80079c8:	bf00      	nop
 80079ca:	e002      	b.n	80079d2 <USBH_Process+0x3ba>
      break;
 80079cc:	bf00      	nop
 80079ce:	e000      	b.n	80079d2 <USBH_Process+0x3ba>
      break;
 80079d0:	bf00      	nop
  }
  return USBH_OK;
 80079d2:	2300      	movs	r3, #0
}
 80079d4:	4618      	mov	r0, r3
 80079d6:	3710      	adds	r7, #16
 80079d8:	46bd      	mov	sp, r7
 80079da:	bd80      	pop	{r7, pc}

080079dc <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b088      	sub	sp, #32
 80079e0:	af04      	add	r7, sp, #16
 80079e2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80079e4:	2301      	movs	r3, #1
 80079e6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80079e8:	2301      	movs	r3, #1
 80079ea:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	785b      	ldrb	r3, [r3, #1]
 80079f0:	2b07      	cmp	r3, #7
 80079f2:	f200 81c1 	bhi.w	8007d78 <USBH_HandleEnum+0x39c>
 80079f6:	a201      	add	r2, pc, #4	; (adr r2, 80079fc <USBH_HandleEnum+0x20>)
 80079f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079fc:	08007a1d 	.word	0x08007a1d
 8007a00:	08007adb 	.word	0x08007adb
 8007a04:	08007b45 	.word	0x08007b45
 8007a08:	08007bd3 	.word	0x08007bd3
 8007a0c:	08007c3d 	.word	0x08007c3d
 8007a10:	08007cad 	.word	0x08007cad
 8007a14:	08007cf3 	.word	0x08007cf3
 8007a18:	08007d39 	.word	0x08007d39
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007a1c:	2108      	movs	r1, #8
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f000 fa50 	bl	8007ec4 <USBH_Get_DevDesc>
 8007a24:	4603      	mov	r3, r0
 8007a26:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007a28:	7bbb      	ldrb	r3, [r7, #14]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d130      	bne.n	8007a90 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2201      	movs	r2, #1
 8007a3c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	7919      	ldrb	r1, [r3, #4]
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007a4e:	687a      	ldr	r2, [r7, #4]
 8007a50:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007a52:	b292      	uxth	r2, r2
 8007a54:	9202      	str	r2, [sp, #8]
 8007a56:	2200      	movs	r2, #0
 8007a58:	9201      	str	r2, [sp, #4]
 8007a5a:	9300      	str	r3, [sp, #0]
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	2280      	movs	r2, #128	; 0x80
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f000 ff72 	bl	800894a <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	7959      	ldrb	r1, [r3, #5]
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007a76:	687a      	ldr	r2, [r7, #4]
 8007a78:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007a7a:	b292      	uxth	r2, r2
 8007a7c:	9202      	str	r2, [sp, #8]
 8007a7e:	2200      	movs	r2, #0
 8007a80:	9201      	str	r2, [sp, #4]
 8007a82:	9300      	str	r3, [sp, #0]
 8007a84:	4603      	mov	r3, r0
 8007a86:	2200      	movs	r2, #0
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f000 ff5e 	bl	800894a <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007a8e:	e175      	b.n	8007d7c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007a90:	7bbb      	ldrb	r3, [r7, #14]
 8007a92:	2b03      	cmp	r3, #3
 8007a94:	f040 8172 	bne.w	8007d7c <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007a9e:	3301      	adds	r3, #1
 8007aa0:	b2da      	uxtb	r2, r3
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007aae:	2b03      	cmp	r3, #3
 8007ab0:	d903      	bls.n	8007aba <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	220d      	movs	r2, #13
 8007ab6:	701a      	strb	r2, [r3, #0]
      break;
 8007ab8:	e160      	b.n	8007d7c <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	795b      	ldrb	r3, [r3, #5]
 8007abe:	4619      	mov	r1, r3
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	f000 ff93 	bl	80089ec <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	791b      	ldrb	r3, [r3, #4]
 8007aca:	4619      	mov	r1, r3
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	f000 ff8d 	bl	80089ec <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	701a      	strb	r2, [r3, #0]
      break;
 8007ad8:	e150      	b.n	8007d7c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007ada:	2112      	movs	r1, #18
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f000 f9f1 	bl	8007ec4 <USBH_Get_DevDesc>
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007ae6:	7bbb      	ldrb	r3, [r7, #14]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d103      	bne.n	8007af4 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2202      	movs	r2, #2
 8007af0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007af2:	e145      	b.n	8007d80 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007af4:	7bbb      	ldrb	r3, [r7, #14]
 8007af6:	2b03      	cmp	r3, #3
 8007af8:	f040 8142 	bne.w	8007d80 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007b02:	3301      	adds	r3, #1
 8007b04:	b2da      	uxtb	r2, r3
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007b12:	2b03      	cmp	r3, #3
 8007b14:	d903      	bls.n	8007b1e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	220d      	movs	r2, #13
 8007b1a:	701a      	strb	r2, [r3, #0]
      break;
 8007b1c:	e130      	b.n	8007d80 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	795b      	ldrb	r3, [r3, #5]
 8007b22:	4619      	mov	r1, r3
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f000 ff61 	bl	80089ec <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	791b      	ldrb	r3, [r3, #4]
 8007b2e:	4619      	mov	r1, r3
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f000 ff5b 	bl	80089ec <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2200      	movs	r2, #0
 8007b3a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2200      	movs	r2, #0
 8007b40:	701a      	strb	r2, [r3, #0]
      break;
 8007b42:	e11d      	b.n	8007d80 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007b44:	2101      	movs	r1, #1
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	f000 fa68 	bl	800801c <USBH_SetAddress>
 8007b4c:	4603      	mov	r3, r0
 8007b4e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007b50:	7bbb      	ldrb	r3, [r7, #14]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d132      	bne.n	8007bbc <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8007b56:	2002      	movs	r0, #2
 8007b58:	f001 fa5f 	bl	800901a <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2201      	movs	r2, #1
 8007b60:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2203      	movs	r2, #3
 8007b68:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	7919      	ldrb	r1, [r3, #4]
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007b7a:	687a      	ldr	r2, [r7, #4]
 8007b7c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007b7e:	b292      	uxth	r2, r2
 8007b80:	9202      	str	r2, [sp, #8]
 8007b82:	2200      	movs	r2, #0
 8007b84:	9201      	str	r2, [sp, #4]
 8007b86:	9300      	str	r3, [sp, #0]
 8007b88:	4603      	mov	r3, r0
 8007b8a:	2280      	movs	r2, #128	; 0x80
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f000 fedc 	bl	800894a <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	7959      	ldrb	r1, [r3, #5]
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007ba2:	687a      	ldr	r2, [r7, #4]
 8007ba4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007ba6:	b292      	uxth	r2, r2
 8007ba8:	9202      	str	r2, [sp, #8]
 8007baa:	2200      	movs	r2, #0
 8007bac:	9201      	str	r2, [sp, #4]
 8007bae:	9300      	str	r3, [sp, #0]
 8007bb0:	4603      	mov	r3, r0
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f000 fec8 	bl	800894a <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007bba:	e0e3      	b.n	8007d84 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007bbc:	7bbb      	ldrb	r3, [r7, #14]
 8007bbe:	2b03      	cmp	r3, #3
 8007bc0:	f040 80e0 	bne.w	8007d84 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	220d      	movs	r2, #13
 8007bc8:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2200      	movs	r2, #0
 8007bce:	705a      	strb	r2, [r3, #1]
      break;
 8007bd0:	e0d8      	b.n	8007d84 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007bd2:	2109      	movs	r1, #9
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f000 f99d 	bl	8007f14 <USBH_Get_CfgDesc>
 8007bda:	4603      	mov	r3, r0
 8007bdc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007bde:	7bbb      	ldrb	r3, [r7, #14]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d103      	bne.n	8007bec <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2204      	movs	r2, #4
 8007be8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007bea:	e0cd      	b.n	8007d88 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007bec:	7bbb      	ldrb	r3, [r7, #14]
 8007bee:	2b03      	cmp	r3, #3
 8007bf0:	f040 80ca 	bne.w	8007d88 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007bfa:	3301      	adds	r3, #1
 8007bfc:	b2da      	uxtb	r2, r3
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007c0a:	2b03      	cmp	r3, #3
 8007c0c:	d903      	bls.n	8007c16 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	220d      	movs	r2, #13
 8007c12:	701a      	strb	r2, [r3, #0]
      break;
 8007c14:	e0b8      	b.n	8007d88 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	795b      	ldrb	r3, [r3, #5]
 8007c1a:	4619      	mov	r1, r3
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	f000 fee5 	bl	80089ec <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	791b      	ldrb	r3, [r3, #4]
 8007c26:	4619      	mov	r1, r3
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	f000 fedf 	bl	80089ec <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2200      	movs	r2, #0
 8007c32:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2200      	movs	r2, #0
 8007c38:	701a      	strb	r2, [r3, #0]
      break;
 8007c3a:	e0a5      	b.n	8007d88 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8007c42:	4619      	mov	r1, r3
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	f000 f965 	bl	8007f14 <USBH_Get_CfgDesc>
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007c4e:	7bbb      	ldrb	r3, [r7, #14]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d103      	bne.n	8007c5c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2205      	movs	r2, #5
 8007c58:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007c5a:	e097      	b.n	8007d8c <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007c5c:	7bbb      	ldrb	r3, [r7, #14]
 8007c5e:	2b03      	cmp	r3, #3
 8007c60:	f040 8094 	bne.w	8007d8c <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007c6a:	3301      	adds	r3, #1
 8007c6c:	b2da      	uxtb	r2, r3
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007c7a:	2b03      	cmp	r3, #3
 8007c7c:	d903      	bls.n	8007c86 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	220d      	movs	r2, #13
 8007c82:	701a      	strb	r2, [r3, #0]
      break;
 8007c84:	e082      	b.n	8007d8c <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	795b      	ldrb	r3, [r3, #5]
 8007c8a:	4619      	mov	r1, r3
 8007c8c:	6878      	ldr	r0, [r7, #4]
 8007c8e:	f000 fead 	bl	80089ec <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	791b      	ldrb	r3, [r3, #4]
 8007c96:	4619      	mov	r1, r3
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	f000 fea7 	bl	80089ec <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	701a      	strb	r2, [r3, #0]
      break;
 8007caa:	e06f      	b.n	8007d8c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d019      	beq.n	8007cea <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007cc2:	23ff      	movs	r3, #255	; 0xff
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	f000 f949 	bl	8007f5c <USBH_Get_StringDesc>
 8007cca:	4603      	mov	r3, r0
 8007ccc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007cce:	7bbb      	ldrb	r3, [r7, #14]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d103      	bne.n	8007cdc <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2206      	movs	r2, #6
 8007cd8:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007cda:	e059      	b.n	8007d90 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007cdc:	7bbb      	ldrb	r3, [r7, #14]
 8007cde:	2b03      	cmp	r3, #3
 8007ce0:	d156      	bne.n	8007d90 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2206      	movs	r2, #6
 8007ce6:	705a      	strb	r2, [r3, #1]
      break;
 8007ce8:	e052      	b.n	8007d90 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2206      	movs	r2, #6
 8007cee:	705a      	strb	r2, [r3, #1]
      break;
 8007cf0:	e04e      	b.n	8007d90 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d019      	beq.n	8007d30 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007d08:	23ff      	movs	r3, #255	; 0xff
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f000 f926 	bl	8007f5c <USBH_Get_StringDesc>
 8007d10:	4603      	mov	r3, r0
 8007d12:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007d14:	7bbb      	ldrb	r3, [r7, #14]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d103      	bne.n	8007d22 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2207      	movs	r2, #7
 8007d1e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007d20:	e038      	b.n	8007d94 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007d22:	7bbb      	ldrb	r3, [r7, #14]
 8007d24:	2b03      	cmp	r3, #3
 8007d26:	d135      	bne.n	8007d94 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2207      	movs	r2, #7
 8007d2c:	705a      	strb	r2, [r3, #1]
      break;
 8007d2e:	e031      	b.n	8007d94 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2207      	movs	r2, #7
 8007d34:	705a      	strb	r2, [r3, #1]
      break;
 8007d36:	e02d      	b.n	8007d94 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d017      	beq.n	8007d72 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007d4e:	23ff      	movs	r3, #255	; 0xff
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	f000 f903 	bl	8007f5c <USBH_Get_StringDesc>
 8007d56:	4603      	mov	r3, r0
 8007d58:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007d5a:	7bbb      	ldrb	r3, [r7, #14]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d102      	bne.n	8007d66 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007d60:	2300      	movs	r3, #0
 8007d62:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007d64:	e018      	b.n	8007d98 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007d66:	7bbb      	ldrb	r3, [r7, #14]
 8007d68:	2b03      	cmp	r3, #3
 8007d6a:	d115      	bne.n	8007d98 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	73fb      	strb	r3, [r7, #15]
      break;
 8007d70:	e012      	b.n	8007d98 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8007d72:	2300      	movs	r3, #0
 8007d74:	73fb      	strb	r3, [r7, #15]
      break;
 8007d76:	e00f      	b.n	8007d98 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007d78:	bf00      	nop
 8007d7a:	e00e      	b.n	8007d9a <USBH_HandleEnum+0x3be>
      break;
 8007d7c:	bf00      	nop
 8007d7e:	e00c      	b.n	8007d9a <USBH_HandleEnum+0x3be>
      break;
 8007d80:	bf00      	nop
 8007d82:	e00a      	b.n	8007d9a <USBH_HandleEnum+0x3be>
      break;
 8007d84:	bf00      	nop
 8007d86:	e008      	b.n	8007d9a <USBH_HandleEnum+0x3be>
      break;
 8007d88:	bf00      	nop
 8007d8a:	e006      	b.n	8007d9a <USBH_HandleEnum+0x3be>
      break;
 8007d8c:	bf00      	nop
 8007d8e:	e004      	b.n	8007d9a <USBH_HandleEnum+0x3be>
      break;
 8007d90:	bf00      	nop
 8007d92:	e002      	b.n	8007d9a <USBH_HandleEnum+0x3be>
      break;
 8007d94:	bf00      	nop
 8007d96:	e000      	b.n	8007d9a <USBH_HandleEnum+0x3be>
      break;
 8007d98:	bf00      	nop
  }
  return Status;
 8007d9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	3710      	adds	r7, #16
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}

08007da4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007da4:	b480      	push	{r7}
 8007da6:	b083      	sub	sp, #12
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
 8007dac:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	683a      	ldr	r2, [r7, #0]
 8007db2:	f8c3 2494 	str.w	r2, [r3, #1172]	; 0x494
}
 8007db6:	bf00      	nop
 8007db8:	370c      	adds	r7, #12
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc0:	4770      	bx	lr

08007dc2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007dc2:	b580      	push	{r7, lr}
 8007dc4:	b082      	sub	sp, #8
 8007dc6:	af00      	add	r7, sp, #0
 8007dc8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8007dd0:	1c5a      	adds	r2, r3, #1
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f8c3 2494 	str.w	r2, [r3, #1172]	; 0x494
  USBH_HandleSof(phost);
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	f000 f804 	bl	8007de6 <USBH_HandleSof>
}
 8007dde:	bf00      	nop
 8007de0:	3708      	adds	r7, #8
 8007de2:	46bd      	mov	sp, r7
 8007de4:	bd80      	pop	{r7, pc}

08007de6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007de6:	b580      	push	{r7, lr}
 8007de8:	b082      	sub	sp, #8
 8007dea:	af00      	add	r7, sp, #0
 8007dec:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	781b      	ldrb	r3, [r3, #0]
 8007df2:	b2db      	uxtb	r3, r3
 8007df4:	2b0b      	cmp	r3, #11
 8007df6:	d10a      	bne.n	8007e0e <USBH_HandleSof+0x28>
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d005      	beq.n	8007e0e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8007e08:	699b      	ldr	r3, [r3, #24]
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	4798      	blx	r3
  }
}
 8007e0e:	bf00      	nop
 8007e10:	3708      	adds	r7, #8
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bd80      	pop	{r7, pc}

08007e16 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007e16:	b480      	push	{r7}
 8007e18:	b083      	sub	sp, #12
 8007e1a:	af00      	add	r7, sp, #0
 8007e1c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2201      	movs	r2, #1
 8007e22:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8007e26:	bf00      	nop
}
 8007e28:	370c      	adds	r7, #12
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e30:	4770      	bx	lr

08007e32 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007e32:	b480      	push	{r7}
 8007e34:	b083      	sub	sp, #12
 8007e36:	af00      	add	r7, sp, #0
 8007e38:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007e42:	bf00      	nop
}
 8007e44:	370c      	adds	r7, #12
 8007e46:	46bd      	mov	sp, r7
 8007e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4c:	4770      	bx	lr

08007e4e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007e4e:	b480      	push	{r7}
 8007e50:	b083      	sub	sp, #12
 8007e52:	af00      	add	r7, sp, #0
 8007e54:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2201      	movs	r2, #1
 8007e5a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2200      	movs	r2, #0
 8007e62:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2200      	movs	r2, #0
 8007e6a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007e6e:	2300      	movs	r3, #0
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	370c      	adds	r7, #12
 8007e74:	46bd      	mov	sp, r7
 8007e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7a:	4770      	bx	lr

08007e7c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b082      	sub	sp, #8
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2201      	movs	r2, #1
 8007e88:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2200      	movs	r2, #0
 8007e90:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2200      	movs	r2, #0
 8007e98:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	f000 ff86 	bl	8008dae <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	791b      	ldrb	r3, [r3, #4]
 8007ea6:	4619      	mov	r1, r3
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	f000 fd9f 	bl	80089ec <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	795b      	ldrb	r3, [r3, #5]
 8007eb2:	4619      	mov	r1, r3
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	f000 fd99 	bl	80089ec <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007eba:	2300      	movs	r3, #0
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	3708      	adds	r7, #8
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bd80      	pop	{r7, pc}

08007ec4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b086      	sub	sp, #24
 8007ec8:	af02      	add	r7, sp, #8
 8007eca:	6078      	str	r0, [r7, #4]
 8007ecc:	460b      	mov	r3, r1
 8007ece:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007ed6:	78fb      	ldrb	r3, [r7, #3]
 8007ed8:	b29b      	uxth	r3, r3
 8007eda:	9300      	str	r3, [sp, #0]
 8007edc:	4613      	mov	r3, r2
 8007ede:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007ee2:	2100      	movs	r1, #0
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f000 f864 	bl	8007fb2 <USBH_GetDescriptor>
 8007eea:	4603      	mov	r3, r0
 8007eec:	73fb      	strb	r3, [r7, #15]
 8007eee:	7bfb      	ldrb	r3, [r7, #15]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d10a      	bne.n	8007f0a <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f203 3026 	addw	r0, r3, #806	; 0x326
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007f00:	78fa      	ldrb	r2, [r7, #3]
 8007f02:	b292      	uxth	r2, r2
 8007f04:	4619      	mov	r1, r3
 8007f06:	f000 f91b 	bl	8008140 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007f0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	3710      	adds	r7, #16
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd80      	pop	{r7, pc}

08007f14 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b086      	sub	sp, #24
 8007f18:	af02      	add	r7, sp, #8
 8007f1a:	6078      	str	r0, [r7, #4]
 8007f1c:	460b      	mov	r3, r1
 8007f1e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	331c      	adds	r3, #28
 8007f24:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007f26:	887b      	ldrh	r3, [r7, #2]
 8007f28:	9300      	str	r3, [sp, #0]
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f30:	2100      	movs	r1, #0
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f000 f83d 	bl	8007fb2 <USBH_GetDescriptor>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	72fb      	strb	r3, [r7, #11]
 8007f3c:	7afb      	ldrb	r3, [r7, #11]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d107      	bne.n	8007f52 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007f48:	887a      	ldrh	r2, [r7, #2]
 8007f4a:	68f9      	ldr	r1, [r7, #12]
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	f000 f967 	bl	8008220 <USBH_ParseCfgDesc>
  }

  return status;
 8007f52:	7afb      	ldrb	r3, [r7, #11]
}
 8007f54:	4618      	mov	r0, r3
 8007f56:	3710      	adds	r7, #16
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}

08007f5c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b088      	sub	sp, #32
 8007f60:	af02      	add	r7, sp, #8
 8007f62:	60f8      	str	r0, [r7, #12]
 8007f64:	607a      	str	r2, [r7, #4]
 8007f66:	461a      	mov	r2, r3
 8007f68:	460b      	mov	r3, r1
 8007f6a:	72fb      	strb	r3, [r7, #11]
 8007f6c:	4613      	mov	r3, r2
 8007f6e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8007f70:	7afb      	ldrb	r3, [r7, #11]
 8007f72:	b29b      	uxth	r3, r3
 8007f74:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007f78:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007f80:	893b      	ldrh	r3, [r7, #8]
 8007f82:	9300      	str	r3, [sp, #0]
 8007f84:	460b      	mov	r3, r1
 8007f86:	2100      	movs	r1, #0
 8007f88:	68f8      	ldr	r0, [r7, #12]
 8007f8a:	f000 f812 	bl	8007fb2 <USBH_GetDescriptor>
 8007f8e:	4603      	mov	r3, r0
 8007f90:	75fb      	strb	r3, [r7, #23]
 8007f92:	7dfb      	ldrb	r3, [r7, #23]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d107      	bne.n	8007fa8 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007f9e:	893a      	ldrh	r2, [r7, #8]
 8007fa0:	6879      	ldr	r1, [r7, #4]
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	f000 fa3a 	bl	800841c <USBH_ParseStringDesc>
  }

  return status;
 8007fa8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007faa:	4618      	mov	r0, r3
 8007fac:	3718      	adds	r7, #24
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd80      	pop	{r7, pc}

08007fb2 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007fb2:	b580      	push	{r7, lr}
 8007fb4:	b084      	sub	sp, #16
 8007fb6:	af00      	add	r7, sp, #0
 8007fb8:	60f8      	str	r0, [r7, #12]
 8007fba:	607b      	str	r3, [r7, #4]
 8007fbc:	460b      	mov	r3, r1
 8007fbe:	72fb      	strb	r3, [r7, #11]
 8007fc0:	4613      	mov	r3, r2
 8007fc2:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	789b      	ldrb	r3, [r3, #2]
 8007fc8:	2b01      	cmp	r3, #1
 8007fca:	d11c      	bne.n	8008006 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007fcc:	7afb      	ldrb	r3, [r7, #11]
 8007fce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007fd2:	b2da      	uxtb	r2, r3
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	2206      	movs	r2, #6
 8007fdc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	893a      	ldrh	r2, [r7, #8]
 8007fe2:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007fe4:	893b      	ldrh	r3, [r7, #8]
 8007fe6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007fea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007fee:	d104      	bne.n	8007ffa <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	f240 4209 	movw	r2, #1033	; 0x409
 8007ff6:	829a      	strh	r2, [r3, #20]
 8007ff8:	e002      	b.n	8008000 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	8b3a      	ldrh	r2, [r7, #24]
 8008004:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008006:	8b3b      	ldrh	r3, [r7, #24]
 8008008:	461a      	mov	r2, r3
 800800a:	6879      	ldr	r1, [r7, #4]
 800800c:	68f8      	ldr	r0, [r7, #12]
 800800e:	f000 fa53 	bl	80084b8 <USBH_CtlReq>
 8008012:	4603      	mov	r3, r0
}
 8008014:	4618      	mov	r0, r3
 8008016:	3710      	adds	r7, #16
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}

0800801c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b082      	sub	sp, #8
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
 8008024:	460b      	mov	r3, r1
 8008026:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	789b      	ldrb	r3, [r3, #2]
 800802c:	2b01      	cmp	r3, #1
 800802e:	d10f      	bne.n	8008050 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2200      	movs	r2, #0
 8008034:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2205      	movs	r2, #5
 800803a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800803c:	78fb      	ldrb	r3, [r7, #3]
 800803e:	b29a      	uxth	r2, r3
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2200      	movs	r2, #0
 8008048:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2200      	movs	r2, #0
 800804e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008050:	2200      	movs	r2, #0
 8008052:	2100      	movs	r1, #0
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	f000 fa2f 	bl	80084b8 <USBH_CtlReq>
 800805a:	4603      	mov	r3, r0
}
 800805c:	4618      	mov	r0, r3
 800805e:	3708      	adds	r7, #8
 8008060:	46bd      	mov	sp, r7
 8008062:	bd80      	pop	{r7, pc}

08008064 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b082      	sub	sp, #8
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
 800806c:	460b      	mov	r3, r1
 800806e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	789b      	ldrb	r3, [r3, #2]
 8008074:	2b01      	cmp	r3, #1
 8008076:	d10e      	bne.n	8008096 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2200      	movs	r2, #0
 800807c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2209      	movs	r2, #9
 8008082:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	887a      	ldrh	r2, [r7, #2]
 8008088:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2200      	movs	r2, #0
 800808e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2200      	movs	r2, #0
 8008094:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008096:	2200      	movs	r2, #0
 8008098:	2100      	movs	r1, #0
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f000 fa0c 	bl	80084b8 <USBH_CtlReq>
 80080a0:	4603      	mov	r3, r0
}
 80080a2:	4618      	mov	r0, r3
 80080a4:	3708      	adds	r7, #8
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}

080080aa <USBH_SetInterface>:
  * @param  altSetting: Interface value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetInterface(USBH_HandleTypeDef *phost, uint8_t ep_num,
                                     uint8_t altSetting)
{
 80080aa:	b580      	push	{r7, lr}
 80080ac:	b082      	sub	sp, #8
 80080ae:	af00      	add	r7, sp, #0
 80080b0:	6078      	str	r0, [r7, #4]
 80080b2:	460b      	mov	r3, r1
 80080b4:	70fb      	strb	r3, [r7, #3]
 80080b6:	4613      	mov	r3, r2
 80080b8:	70bb      	strb	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	789b      	ldrb	r3, [r3, #2]
 80080be:	2b01      	cmp	r3, #1
 80080c0:	d110      	bne.n	80080e4 <USBH_SetInterface+0x3a>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2201      	movs	r2, #1
 80080c6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_INTERFACE;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	220b      	movs	r2, #11
 80080cc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = altSetting;
 80080ce:	78bb      	ldrb	r3, [r7, #2]
 80080d0:	b29a      	uxth	r2, r3
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80080d6:	78fb      	ldrb	r3, [r7, #3]
 80080d8:	b29a      	uxth	r2, r3
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2200      	movs	r2, #0
 80080e2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80080e4:	2200      	movs	r2, #0
 80080e6:	2100      	movs	r1, #0
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	f000 f9e5 	bl	80084b8 <USBH_CtlReq>
 80080ee:	4603      	mov	r3, r0
}
 80080f0:	4618      	mov	r0, r3
 80080f2:	3708      	adds	r7, #8
 80080f4:	46bd      	mov	sp, r7
 80080f6:	bd80      	pop	{r7, pc}

080080f8 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b082      	sub	sp, #8
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
 8008100:	460b      	mov	r3, r1
 8008102:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	789b      	ldrb	r3, [r3, #2]
 8008108:	2b01      	cmp	r3, #1
 800810a:	d10f      	bne.n	800812c <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2200      	movs	r2, #0
 8008110:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2203      	movs	r2, #3
 8008116:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8008118:	78fb      	ldrb	r3, [r7, #3]
 800811a:	b29a      	uxth	r2, r3
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2200      	movs	r2, #0
 8008124:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2200      	movs	r2, #0
 800812a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800812c:	2200      	movs	r2, #0
 800812e:	2100      	movs	r1, #0
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	f000 f9c1 	bl	80084b8 <USBH_CtlReq>
 8008136:	4603      	mov	r3, r0
}
 8008138:	4618      	mov	r0, r3
 800813a:	3708      	adds	r7, #8
 800813c:	46bd      	mov	sp, r7
 800813e:	bd80      	pop	{r7, pc}

08008140 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8008140:	b480      	push	{r7}
 8008142:	b085      	sub	sp, #20
 8008144:	af00      	add	r7, sp, #0
 8008146:	60f8      	str	r0, [r7, #12]
 8008148:	60b9      	str	r1, [r7, #8]
 800814a:	4613      	mov	r3, r2
 800814c:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800814e:	68bb      	ldr	r3, [r7, #8]
 8008150:	781a      	ldrb	r2, [r3, #0]
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	785a      	ldrb	r2, [r3, #1]
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	3302      	adds	r3, #2
 8008162:	781b      	ldrb	r3, [r3, #0]
 8008164:	b29a      	uxth	r2, r3
 8008166:	68bb      	ldr	r3, [r7, #8]
 8008168:	3303      	adds	r3, #3
 800816a:	781b      	ldrb	r3, [r3, #0]
 800816c:	b29b      	uxth	r3, r3
 800816e:	021b      	lsls	r3, r3, #8
 8008170:	b29b      	uxth	r3, r3
 8008172:	4313      	orrs	r3, r2
 8008174:	b29a      	uxth	r2, r3
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	791a      	ldrb	r2, [r3, #4]
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8008182:	68bb      	ldr	r3, [r7, #8]
 8008184:	795a      	ldrb	r2, [r3, #5]
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800818a:	68bb      	ldr	r3, [r7, #8]
 800818c:	799a      	ldrb	r2, [r3, #6]
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8008192:	68bb      	ldr	r3, [r7, #8]
 8008194:	79da      	ldrb	r2, [r3, #7]
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800819a:	88fb      	ldrh	r3, [r7, #6]
 800819c:	2b08      	cmp	r3, #8
 800819e:	d939      	bls.n	8008214 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 80081a0:	68bb      	ldr	r3, [r7, #8]
 80081a2:	3308      	adds	r3, #8
 80081a4:	781b      	ldrb	r3, [r3, #0]
 80081a6:	b29a      	uxth	r2, r3
 80081a8:	68bb      	ldr	r3, [r7, #8]
 80081aa:	3309      	adds	r3, #9
 80081ac:	781b      	ldrb	r3, [r3, #0]
 80081ae:	b29b      	uxth	r3, r3
 80081b0:	021b      	lsls	r3, r3, #8
 80081b2:	b29b      	uxth	r3, r3
 80081b4:	4313      	orrs	r3, r2
 80081b6:	b29a      	uxth	r2, r3
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 80081bc:	68bb      	ldr	r3, [r7, #8]
 80081be:	330a      	adds	r3, #10
 80081c0:	781b      	ldrb	r3, [r3, #0]
 80081c2:	b29a      	uxth	r2, r3
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	330b      	adds	r3, #11
 80081c8:	781b      	ldrb	r3, [r3, #0]
 80081ca:	b29b      	uxth	r3, r3
 80081cc:	021b      	lsls	r3, r3, #8
 80081ce:	b29b      	uxth	r3, r3
 80081d0:	4313      	orrs	r3, r2
 80081d2:	b29a      	uxth	r2, r3
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	330c      	adds	r3, #12
 80081dc:	781b      	ldrb	r3, [r3, #0]
 80081de:	b29a      	uxth	r2, r3
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	330d      	adds	r3, #13
 80081e4:	781b      	ldrb	r3, [r3, #0]
 80081e6:	b29b      	uxth	r3, r3
 80081e8:	021b      	lsls	r3, r3, #8
 80081ea:	b29b      	uxth	r3, r3
 80081ec:	4313      	orrs	r3, r2
 80081ee:	b29a      	uxth	r2, r3
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	7b9a      	ldrb	r2, [r3, #14]
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	7bda      	ldrb	r2, [r3, #15]
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8008204:	68bb      	ldr	r3, [r7, #8]
 8008206:	7c1a      	ldrb	r2, [r3, #16]
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800820c:	68bb      	ldr	r3, [r7, #8]
 800820e:	7c5a      	ldrb	r2, [r3, #17]
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	745a      	strb	r2, [r3, #17]
  }
}
 8008214:	bf00      	nop
 8008216:	3714      	adds	r7, #20
 8008218:	46bd      	mov	sp, r7
 800821a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821e:	4770      	bx	lr

08008220 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b08a      	sub	sp, #40	; 0x28
 8008224:	af00      	add	r7, sp, #0
 8008226:	60f8      	str	r0, [r7, #12]
 8008228:	60b9      	str	r1, [r7, #8]
 800822a:	4613      	mov	r3, r2
 800822c:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800822e:	68bb      	ldr	r3, [r7, #8]
 8008230:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008232:	2300      	movs	r3, #0
 8008234:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8008238:	2300      	movs	r3, #0
 800823a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800823e:	68bb      	ldr	r3, [r7, #8]
 8008240:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8008242:	68bb      	ldr	r3, [r7, #8]
 8008244:	781a      	ldrb	r2, [r3, #0]
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800824a:	68bb      	ldr	r3, [r7, #8]
 800824c:	785a      	ldrb	r2, [r3, #1]
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8008252:	68bb      	ldr	r3, [r7, #8]
 8008254:	3302      	adds	r3, #2
 8008256:	781b      	ldrb	r3, [r3, #0]
 8008258:	b29a      	uxth	r2, r3
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	3303      	adds	r3, #3
 800825e:	781b      	ldrb	r3, [r3, #0]
 8008260:	b29b      	uxth	r3, r3
 8008262:	021b      	lsls	r3, r3, #8
 8008264:	b29b      	uxth	r3, r3
 8008266:	4313      	orrs	r3, r2
 8008268:	b29a      	uxth	r2, r3
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800826e:	68bb      	ldr	r3, [r7, #8]
 8008270:	791a      	ldrb	r2, [r3, #4]
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	795a      	ldrb	r2, [r3, #5]
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800827e:	68bb      	ldr	r3, [r7, #8]
 8008280:	799a      	ldrb	r2, [r3, #6]
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	79da      	ldrb	r2, [r3, #7]
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	7a1a      	ldrb	r2, [r3, #8]
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008296:	88fb      	ldrh	r3, [r7, #6]
 8008298:	2b09      	cmp	r3, #9
 800829a:	d95f      	bls.n	800835c <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800829c:	2309      	movs	r3, #9
 800829e:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 80082a0:	2300      	movs	r3, #0
 80082a2:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80082a4:	e051      	b.n	800834a <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80082a6:	f107 0316 	add.w	r3, r7, #22
 80082aa:	4619      	mov	r1, r3
 80082ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80082ae:	f000 f8e8 	bl	8008482 <USBH_GetNextDesc>
 80082b2:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 80082b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082b6:	785b      	ldrb	r3, [r3, #1]
 80082b8:	2b04      	cmp	r3, #4
 80082ba:	d146      	bne.n	800834a <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 80082bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80082c0:	221a      	movs	r2, #26
 80082c2:	fb02 f303 	mul.w	r3, r2, r3
 80082c6:	3308      	adds	r3, #8
 80082c8:	68fa      	ldr	r2, [r7, #12]
 80082ca:	4413      	add	r3, r2
 80082cc:	3302      	adds	r3, #2
 80082ce:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80082d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80082d2:	69f8      	ldr	r0, [r7, #28]
 80082d4:	f000 f846 	bl	8008364 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80082d8:	2300      	movs	r3, #0
 80082da:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 80082de:	2300      	movs	r3, #0
 80082e0:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80082e2:	e022      	b.n	800832a <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80082e4:	f107 0316 	add.w	r3, r7, #22
 80082e8:	4619      	mov	r1, r3
 80082ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80082ec:	f000 f8c9 	bl	8008482 <USBH_GetNextDesc>
 80082f0:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 80082f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f4:	785b      	ldrb	r3, [r3, #1]
 80082f6:	2b05      	cmp	r3, #5
 80082f8:	d117      	bne.n	800832a <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80082fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80082fe:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008302:	3201      	adds	r2, #1
 8008304:	00d2      	lsls	r2, r2, #3
 8008306:	211a      	movs	r1, #26
 8008308:	fb01 f303 	mul.w	r3, r1, r3
 800830c:	4413      	add	r3, r2
 800830e:	3308      	adds	r3, #8
 8008310:	68fa      	ldr	r2, [r7, #12]
 8008312:	4413      	add	r3, r2
 8008314:	3304      	adds	r3, #4
 8008316:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8008318:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800831a:	69b8      	ldr	r0, [r7, #24]
 800831c:	f000 f851 	bl	80083c2 <USBH_ParseEPDesc>
            ep_ix++;
 8008320:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8008324:	3301      	adds	r3, #1
 8008326:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800832a:	69fb      	ldr	r3, [r7, #28]
 800832c:	791b      	ldrb	r3, [r3, #4]
 800832e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008332:	429a      	cmp	r2, r3
 8008334:	d204      	bcs.n	8008340 <USBH_ParseCfgDesc+0x120>
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	885a      	ldrh	r2, [r3, #2]
 800833a:	8afb      	ldrh	r3, [r7, #22]
 800833c:	429a      	cmp	r2, r3
 800833e:	d8d1      	bhi.n	80082e4 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8008340:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008344:	3301      	adds	r3, #1
 8008346:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800834a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800834e:	2b09      	cmp	r3, #9
 8008350:	d804      	bhi.n	800835c <USBH_ParseCfgDesc+0x13c>
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	885a      	ldrh	r2, [r3, #2]
 8008356:	8afb      	ldrh	r3, [r7, #22]
 8008358:	429a      	cmp	r2, r3
 800835a:	d8a4      	bhi.n	80082a6 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800835c:	bf00      	nop
 800835e:	3728      	adds	r7, #40	; 0x28
 8008360:	46bd      	mov	sp, r7
 8008362:	bd80      	pop	{r7, pc}

08008364 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8008364:	b480      	push	{r7}
 8008366:	b083      	sub	sp, #12
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
 800836c:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	781a      	ldrb	r2, [r3, #0]
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	785a      	ldrb	r2, [r3, #1]
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	789a      	ldrb	r2, [r3, #2]
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	78da      	ldrb	r2, [r3, #3]
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	791a      	ldrb	r2, [r3, #4]
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	795a      	ldrb	r2, [r3, #5]
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	799a      	ldrb	r2, [r3, #6]
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	79da      	ldrb	r2, [r3, #7]
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	7a1a      	ldrb	r2, [r3, #8]
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	721a      	strb	r2, [r3, #8]
}
 80083b6:	bf00      	nop
 80083b8:	370c      	adds	r7, #12
 80083ba:	46bd      	mov	sp, r7
 80083bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c0:	4770      	bx	lr

080083c2 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 80083c2:	b480      	push	{r7}
 80083c4:	b083      	sub	sp, #12
 80083c6:	af00      	add	r7, sp, #0
 80083c8:	6078      	str	r0, [r7, #4]
 80083ca:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	781a      	ldrb	r2, [r3, #0]
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	785a      	ldrb	r2, [r3, #1]
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	789a      	ldrb	r2, [r3, #2]
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	78da      	ldrb	r2, [r3, #3]
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	3304      	adds	r3, #4
 80083f0:	781b      	ldrb	r3, [r3, #0]
 80083f2:	b29a      	uxth	r2, r3
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	3305      	adds	r3, #5
 80083f8:	781b      	ldrb	r3, [r3, #0]
 80083fa:	b29b      	uxth	r3, r3
 80083fc:	021b      	lsls	r3, r3, #8
 80083fe:	b29b      	uxth	r3, r3
 8008400:	4313      	orrs	r3, r2
 8008402:	b29a      	uxth	r2, r3
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	799a      	ldrb	r2, [r3, #6]
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	719a      	strb	r2, [r3, #6]
}
 8008410:	bf00      	nop
 8008412:	370c      	adds	r7, #12
 8008414:	46bd      	mov	sp, r7
 8008416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841a:	4770      	bx	lr

0800841c <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800841c:	b480      	push	{r7}
 800841e:	b087      	sub	sp, #28
 8008420:	af00      	add	r7, sp, #0
 8008422:	60f8      	str	r0, [r7, #12]
 8008424:	60b9      	str	r1, [r7, #8]
 8008426:	4613      	mov	r3, r2
 8008428:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	3301      	adds	r3, #1
 800842e:	781b      	ldrb	r3, [r3, #0]
 8008430:	2b03      	cmp	r3, #3
 8008432:	d120      	bne.n	8008476 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	781b      	ldrb	r3, [r3, #0]
 8008438:	1e9a      	subs	r2, r3, #2
 800843a:	88fb      	ldrh	r3, [r7, #6]
 800843c:	4293      	cmp	r3, r2
 800843e:	bf28      	it	cs
 8008440:	4613      	movcs	r3, r2
 8008442:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	3302      	adds	r3, #2
 8008448:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800844a:	2300      	movs	r3, #0
 800844c:	82fb      	strh	r3, [r7, #22]
 800844e:	e00b      	b.n	8008468 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008450:	8afb      	ldrh	r3, [r7, #22]
 8008452:	68fa      	ldr	r2, [r7, #12]
 8008454:	4413      	add	r3, r2
 8008456:	781a      	ldrb	r2, [r3, #0]
 8008458:	68bb      	ldr	r3, [r7, #8]
 800845a:	701a      	strb	r2, [r3, #0]
      pdest++;
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	3301      	adds	r3, #1
 8008460:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008462:	8afb      	ldrh	r3, [r7, #22]
 8008464:	3302      	adds	r3, #2
 8008466:	82fb      	strh	r3, [r7, #22]
 8008468:	8afa      	ldrh	r2, [r7, #22]
 800846a:	8abb      	ldrh	r3, [r7, #20]
 800846c:	429a      	cmp	r2, r3
 800846e:	d3ef      	bcc.n	8008450 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	2200      	movs	r2, #0
 8008474:	701a      	strb	r2, [r3, #0]
  }
}
 8008476:	bf00      	nop
 8008478:	371c      	adds	r7, #28
 800847a:	46bd      	mov	sp, r7
 800847c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008480:	4770      	bx	lr

08008482 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8008482:	b480      	push	{r7}
 8008484:	b085      	sub	sp, #20
 8008486:	af00      	add	r7, sp, #0
 8008488:	6078      	str	r0, [r7, #4]
 800848a:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	881a      	ldrh	r2, [r3, #0]
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	781b      	ldrb	r3, [r3, #0]
 8008494:	b29b      	uxth	r3, r3
 8008496:	4413      	add	r3, r2
 8008498:	b29a      	uxth	r2, r3
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	781b      	ldrb	r3, [r3, #0]
 80084a2:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	4413      	add	r3, r2
 80084a8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80084aa:	68fb      	ldr	r3, [r7, #12]
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	3714      	adds	r7, #20
 80084b0:	46bd      	mov	sp, r7
 80084b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b6:	4770      	bx	lr

080084b8 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b086      	sub	sp, #24
 80084bc:	af00      	add	r7, sp, #0
 80084be:	60f8      	str	r0, [r7, #12]
 80084c0:	60b9      	str	r1, [r7, #8]
 80084c2:	4613      	mov	r3, r2
 80084c4:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80084c6:	2301      	movs	r3, #1
 80084c8:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	789b      	ldrb	r3, [r3, #2]
 80084ce:	2b01      	cmp	r3, #1
 80084d0:	d002      	beq.n	80084d8 <USBH_CtlReq+0x20>
 80084d2:	2b02      	cmp	r3, #2
 80084d4:	d00f      	beq.n	80084f6 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80084d6:	e027      	b.n	8008528 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	68ba      	ldr	r2, [r7, #8]
 80084dc:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	88fa      	ldrh	r2, [r7, #6]
 80084e2:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	2201      	movs	r2, #1
 80084e8:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	2202      	movs	r2, #2
 80084ee:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80084f0:	2301      	movs	r3, #1
 80084f2:	75fb      	strb	r3, [r7, #23]
      break;
 80084f4:	e018      	b.n	8008528 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80084f6:	68f8      	ldr	r0, [r7, #12]
 80084f8:	f000 f81c 	bl	8008534 <USBH_HandleControl>
 80084fc:	4603      	mov	r3, r0
 80084fe:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008500:	7dfb      	ldrb	r3, [r7, #23]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d002      	beq.n	800850c <USBH_CtlReq+0x54>
 8008506:	7dfb      	ldrb	r3, [r7, #23]
 8008508:	2b03      	cmp	r3, #3
 800850a:	d106      	bne.n	800851a <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	2201      	movs	r2, #1
 8008510:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	2200      	movs	r2, #0
 8008516:	761a      	strb	r2, [r3, #24]
      break;
 8008518:	e005      	b.n	8008526 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800851a:	7dfb      	ldrb	r3, [r7, #23]
 800851c:	2b02      	cmp	r3, #2
 800851e:	d102      	bne.n	8008526 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	2201      	movs	r2, #1
 8008524:	709a      	strb	r2, [r3, #2]
      break;
 8008526:	bf00      	nop
  }
  return status;
 8008528:	7dfb      	ldrb	r3, [r7, #23]
}
 800852a:	4618      	mov	r0, r3
 800852c:	3718      	adds	r7, #24
 800852e:	46bd      	mov	sp, r7
 8008530:	bd80      	pop	{r7, pc}
	...

08008534 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b086      	sub	sp, #24
 8008538:	af02      	add	r7, sp, #8
 800853a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800853c:	2301      	movs	r3, #1
 800853e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008540:	2300      	movs	r3, #0
 8008542:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	7e1b      	ldrb	r3, [r3, #24]
 8008548:	3b01      	subs	r3, #1
 800854a:	2b0a      	cmp	r3, #10
 800854c:	f200 8156 	bhi.w	80087fc <USBH_HandleControl+0x2c8>
 8008550:	a201      	add	r2, pc, #4	; (adr r2, 8008558 <USBH_HandleControl+0x24>)
 8008552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008556:	bf00      	nop
 8008558:	08008585 	.word	0x08008585
 800855c:	0800859f 	.word	0x0800859f
 8008560:	08008609 	.word	0x08008609
 8008564:	0800862f 	.word	0x0800862f
 8008568:	08008667 	.word	0x08008667
 800856c:	08008691 	.word	0x08008691
 8008570:	080086e3 	.word	0x080086e3
 8008574:	08008705 	.word	0x08008705
 8008578:	08008741 	.word	0x08008741
 800857c:	08008767 	.word	0x08008767
 8008580:	080087a5 	.word	0x080087a5
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f103 0110 	add.w	r1, r3, #16
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	795b      	ldrb	r3, [r3, #5]
 800858e:	461a      	mov	r2, r3
 8008590:	6878      	ldr	r0, [r7, #4]
 8008592:	f000 f943 	bl	800881c <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2202      	movs	r2, #2
 800859a:	761a      	strb	r2, [r3, #24]
      break;
 800859c:	e139      	b.n	8008812 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	795b      	ldrb	r3, [r3, #5]
 80085a2:	4619      	mov	r1, r3
 80085a4:	6878      	ldr	r0, [r7, #4]
 80085a6:	f000 fcde 	bl	8008f66 <USBH_LL_GetURBState>
 80085aa:	4603      	mov	r3, r0
 80085ac:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80085ae:	7bbb      	ldrb	r3, [r7, #14]
 80085b0:	2b01      	cmp	r3, #1
 80085b2:	d11e      	bne.n	80085f2 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	7c1b      	ldrb	r3, [r3, #16]
 80085b8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80085bc:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	8adb      	ldrh	r3, [r3, #22]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d00a      	beq.n	80085dc <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80085c6:	7b7b      	ldrb	r3, [r7, #13]
 80085c8:	2b80      	cmp	r3, #128	; 0x80
 80085ca:	d103      	bne.n	80085d4 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2203      	movs	r2, #3
 80085d0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80085d2:	e115      	b.n	8008800 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2205      	movs	r2, #5
 80085d8:	761a      	strb	r2, [r3, #24]
      break;
 80085da:	e111      	b.n	8008800 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 80085dc:	7b7b      	ldrb	r3, [r7, #13]
 80085de:	2b80      	cmp	r3, #128	; 0x80
 80085e0:	d103      	bne.n	80085ea <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2209      	movs	r2, #9
 80085e6:	761a      	strb	r2, [r3, #24]
      break;
 80085e8:	e10a      	b.n	8008800 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2207      	movs	r2, #7
 80085ee:	761a      	strb	r2, [r3, #24]
      break;
 80085f0:	e106      	b.n	8008800 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80085f2:	7bbb      	ldrb	r3, [r7, #14]
 80085f4:	2b04      	cmp	r3, #4
 80085f6:	d003      	beq.n	8008600 <USBH_HandleControl+0xcc>
 80085f8:	7bbb      	ldrb	r3, [r7, #14]
 80085fa:	2b02      	cmp	r3, #2
 80085fc:	f040 8100 	bne.w	8008800 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	220b      	movs	r2, #11
 8008604:	761a      	strb	r2, [r3, #24]
      break;
 8008606:	e0fb      	b.n	8008800 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 800860e:	b29a      	uxth	r2, r3
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	6899      	ldr	r1, [r3, #8]
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	899a      	ldrh	r2, [r3, #12]
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	791b      	ldrb	r3, [r3, #4]
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	f000 f93a 	bl	800889a <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2204      	movs	r2, #4
 800862a:	761a      	strb	r2, [r3, #24]
      break;
 800862c:	e0f1      	b.n	8008812 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	791b      	ldrb	r3, [r3, #4]
 8008632:	4619      	mov	r1, r3
 8008634:	6878      	ldr	r0, [r7, #4]
 8008636:	f000 fc96 	bl	8008f66 <USBH_LL_GetURBState>
 800863a:	4603      	mov	r3, r0
 800863c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800863e:	7bbb      	ldrb	r3, [r7, #14]
 8008640:	2b01      	cmp	r3, #1
 8008642:	d102      	bne.n	800864a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2209      	movs	r2, #9
 8008648:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800864a:	7bbb      	ldrb	r3, [r7, #14]
 800864c:	2b05      	cmp	r3, #5
 800864e:	d102      	bne.n	8008656 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008650:	2303      	movs	r3, #3
 8008652:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008654:	e0d6      	b.n	8008804 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8008656:	7bbb      	ldrb	r3, [r7, #14]
 8008658:	2b04      	cmp	r3, #4
 800865a:	f040 80d3 	bne.w	8008804 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	220b      	movs	r2, #11
 8008662:	761a      	strb	r2, [r3, #24]
      break;
 8008664:	e0ce      	b.n	8008804 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6899      	ldr	r1, [r3, #8]
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	899a      	ldrh	r2, [r3, #12]
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	795b      	ldrb	r3, [r3, #5]
 8008672:	2001      	movs	r0, #1
 8008674:	9000      	str	r0, [sp, #0]
 8008676:	6878      	ldr	r0, [r7, #4]
 8008678:	f000 f8ea 	bl	8008850 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8008682:	b29a      	uxth	r2, r3
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2206      	movs	r2, #6
 800868c:	761a      	strb	r2, [r3, #24]
      break;
 800868e:	e0c0      	b.n	8008812 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	795b      	ldrb	r3, [r3, #5]
 8008694:	4619      	mov	r1, r3
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	f000 fc65 	bl	8008f66 <USBH_LL_GetURBState>
 800869c:	4603      	mov	r3, r0
 800869e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80086a0:	7bbb      	ldrb	r3, [r7, #14]
 80086a2:	2b01      	cmp	r3, #1
 80086a4:	d103      	bne.n	80086ae <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2207      	movs	r2, #7
 80086aa:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80086ac:	e0ac      	b.n	8008808 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80086ae:	7bbb      	ldrb	r3, [r7, #14]
 80086b0:	2b05      	cmp	r3, #5
 80086b2:	d105      	bne.n	80086c0 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	220c      	movs	r2, #12
 80086b8:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80086ba:	2303      	movs	r3, #3
 80086bc:	73fb      	strb	r3, [r7, #15]
      break;
 80086be:	e0a3      	b.n	8008808 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 80086c0:	7bbb      	ldrb	r3, [r7, #14]
 80086c2:	2b02      	cmp	r3, #2
 80086c4:	d103      	bne.n	80086ce <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2205      	movs	r2, #5
 80086ca:	761a      	strb	r2, [r3, #24]
      break;
 80086cc:	e09c      	b.n	8008808 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80086ce:	7bbb      	ldrb	r3, [r7, #14]
 80086d0:	2b04      	cmp	r3, #4
 80086d2:	f040 8099 	bne.w	8008808 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	220b      	movs	r2, #11
 80086da:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80086dc:	2302      	movs	r3, #2
 80086de:	73fb      	strb	r3, [r7, #15]
      break;
 80086e0:	e092      	b.n	8008808 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	791b      	ldrb	r3, [r3, #4]
 80086e6:	2200      	movs	r2, #0
 80086e8:	2100      	movs	r1, #0
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f000 f8d5 	bl	800889a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 80086f6:	b29a      	uxth	r2, r3
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2208      	movs	r2, #8
 8008700:	761a      	strb	r2, [r3, #24]

      break;
 8008702:	e086      	b.n	8008812 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	791b      	ldrb	r3, [r3, #4]
 8008708:	4619      	mov	r1, r3
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f000 fc2b 	bl	8008f66 <USBH_LL_GetURBState>
 8008710:	4603      	mov	r3, r0
 8008712:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008714:	7bbb      	ldrb	r3, [r7, #14]
 8008716:	2b01      	cmp	r3, #1
 8008718:	d105      	bne.n	8008726 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	220d      	movs	r2, #13
 800871e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008720:	2300      	movs	r3, #0
 8008722:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008724:	e072      	b.n	800880c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8008726:	7bbb      	ldrb	r3, [r7, #14]
 8008728:	2b04      	cmp	r3, #4
 800872a:	d103      	bne.n	8008734 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	220b      	movs	r2, #11
 8008730:	761a      	strb	r2, [r3, #24]
      break;
 8008732:	e06b      	b.n	800880c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8008734:	7bbb      	ldrb	r3, [r7, #14]
 8008736:	2b05      	cmp	r3, #5
 8008738:	d168      	bne.n	800880c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800873a:	2303      	movs	r3, #3
 800873c:	73fb      	strb	r3, [r7, #15]
      break;
 800873e:	e065      	b.n	800880c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	795b      	ldrb	r3, [r3, #5]
 8008744:	2201      	movs	r2, #1
 8008746:	9200      	str	r2, [sp, #0]
 8008748:	2200      	movs	r2, #0
 800874a:	2100      	movs	r1, #0
 800874c:	6878      	ldr	r0, [r7, #4]
 800874e:	f000 f87f 	bl	8008850 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8008758:	b29a      	uxth	r2, r3
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	220a      	movs	r2, #10
 8008762:	761a      	strb	r2, [r3, #24]
      break;
 8008764:	e055      	b.n	8008812 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	795b      	ldrb	r3, [r3, #5]
 800876a:	4619      	mov	r1, r3
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	f000 fbfa 	bl	8008f66 <USBH_LL_GetURBState>
 8008772:	4603      	mov	r3, r0
 8008774:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008776:	7bbb      	ldrb	r3, [r7, #14]
 8008778:	2b01      	cmp	r3, #1
 800877a:	d105      	bne.n	8008788 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800877c:	2300      	movs	r3, #0
 800877e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	220d      	movs	r2, #13
 8008784:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008786:	e043      	b.n	8008810 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008788:	7bbb      	ldrb	r3, [r7, #14]
 800878a:	2b02      	cmp	r3, #2
 800878c:	d103      	bne.n	8008796 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2209      	movs	r2, #9
 8008792:	761a      	strb	r2, [r3, #24]
      break;
 8008794:	e03c      	b.n	8008810 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8008796:	7bbb      	ldrb	r3, [r7, #14]
 8008798:	2b04      	cmp	r3, #4
 800879a:	d139      	bne.n	8008810 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	220b      	movs	r2, #11
 80087a0:	761a      	strb	r2, [r3, #24]
      break;
 80087a2:	e035      	b.n	8008810 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	7e5b      	ldrb	r3, [r3, #25]
 80087a8:	3301      	adds	r3, #1
 80087aa:	b2da      	uxtb	r2, r3
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	765a      	strb	r2, [r3, #25]
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	7e5b      	ldrb	r3, [r3, #25]
 80087b4:	2b02      	cmp	r3, #2
 80087b6:	d806      	bhi.n	80087c6 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2201      	movs	r2, #1
 80087bc:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2201      	movs	r2, #1
 80087c2:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80087c4:	e025      	b.n	8008812 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 80087cc:	2106      	movs	r1, #6
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2200      	movs	r2, #0
 80087d6:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	795b      	ldrb	r3, [r3, #5]
 80087dc:	4619      	mov	r1, r3
 80087de:	6878      	ldr	r0, [r7, #4]
 80087e0:	f000 f904 	bl	80089ec <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	791b      	ldrb	r3, [r3, #4]
 80087e8:	4619      	mov	r1, r3
 80087ea:	6878      	ldr	r0, [r7, #4]
 80087ec:	f000 f8fe 	bl	80089ec <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2200      	movs	r2, #0
 80087f4:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80087f6:	2302      	movs	r3, #2
 80087f8:	73fb      	strb	r3, [r7, #15]
      break;
 80087fa:	e00a      	b.n	8008812 <USBH_HandleControl+0x2de>

    default:
      break;
 80087fc:	bf00      	nop
 80087fe:	e008      	b.n	8008812 <USBH_HandleControl+0x2de>
      break;
 8008800:	bf00      	nop
 8008802:	e006      	b.n	8008812 <USBH_HandleControl+0x2de>
      break;
 8008804:	bf00      	nop
 8008806:	e004      	b.n	8008812 <USBH_HandleControl+0x2de>
      break;
 8008808:	bf00      	nop
 800880a:	e002      	b.n	8008812 <USBH_HandleControl+0x2de>
      break;
 800880c:	bf00      	nop
 800880e:	e000      	b.n	8008812 <USBH_HandleControl+0x2de>
      break;
 8008810:	bf00      	nop
  }

  return status;
 8008812:	7bfb      	ldrb	r3, [r7, #15]
}
 8008814:	4618      	mov	r0, r3
 8008816:	3710      	adds	r7, #16
 8008818:	46bd      	mov	sp, r7
 800881a:	bd80      	pop	{r7, pc}

0800881c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b088      	sub	sp, #32
 8008820:	af04      	add	r7, sp, #16
 8008822:	60f8      	str	r0, [r7, #12]
 8008824:	60b9      	str	r1, [r7, #8]
 8008826:	4613      	mov	r3, r2
 8008828:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800882a:	79f9      	ldrb	r1, [r7, #7]
 800882c:	2300      	movs	r3, #0
 800882e:	9303      	str	r3, [sp, #12]
 8008830:	2308      	movs	r3, #8
 8008832:	9302      	str	r3, [sp, #8]
 8008834:	68bb      	ldr	r3, [r7, #8]
 8008836:	9301      	str	r3, [sp, #4]
 8008838:	2300      	movs	r3, #0
 800883a:	9300      	str	r3, [sp, #0]
 800883c:	2300      	movs	r3, #0
 800883e:	2200      	movs	r2, #0
 8008840:	68f8      	ldr	r0, [r7, #12]
 8008842:	f000 fb5f 	bl	8008f04 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8008846:	2300      	movs	r3, #0
}
 8008848:	4618      	mov	r0, r3
 800884a:	3710      	adds	r7, #16
 800884c:	46bd      	mov	sp, r7
 800884e:	bd80      	pop	{r7, pc}

08008850 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b088      	sub	sp, #32
 8008854:	af04      	add	r7, sp, #16
 8008856:	60f8      	str	r0, [r7, #12]
 8008858:	60b9      	str	r1, [r7, #8]
 800885a:	4611      	mov	r1, r2
 800885c:	461a      	mov	r2, r3
 800885e:	460b      	mov	r3, r1
 8008860:	80fb      	strh	r3, [r7, #6]
 8008862:	4613      	mov	r3, r2
 8008864:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800886c:	2b00      	cmp	r3, #0
 800886e:	d001      	beq.n	8008874 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008870:	2300      	movs	r3, #0
 8008872:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008874:	7979      	ldrb	r1, [r7, #5]
 8008876:	7e3b      	ldrb	r3, [r7, #24]
 8008878:	9303      	str	r3, [sp, #12]
 800887a:	88fb      	ldrh	r3, [r7, #6]
 800887c:	9302      	str	r3, [sp, #8]
 800887e:	68bb      	ldr	r3, [r7, #8]
 8008880:	9301      	str	r3, [sp, #4]
 8008882:	2301      	movs	r3, #1
 8008884:	9300      	str	r3, [sp, #0]
 8008886:	2300      	movs	r3, #0
 8008888:	2200      	movs	r2, #0
 800888a:	68f8      	ldr	r0, [r7, #12]
 800888c:	f000 fb3a 	bl	8008f04 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008890:	2300      	movs	r3, #0
}
 8008892:	4618      	mov	r0, r3
 8008894:	3710      	adds	r7, #16
 8008896:	46bd      	mov	sp, r7
 8008898:	bd80      	pop	{r7, pc}

0800889a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800889a:	b580      	push	{r7, lr}
 800889c:	b088      	sub	sp, #32
 800889e:	af04      	add	r7, sp, #16
 80088a0:	60f8      	str	r0, [r7, #12]
 80088a2:	60b9      	str	r1, [r7, #8]
 80088a4:	4611      	mov	r1, r2
 80088a6:	461a      	mov	r2, r3
 80088a8:	460b      	mov	r3, r1
 80088aa:	80fb      	strh	r3, [r7, #6]
 80088ac:	4613      	mov	r3, r2
 80088ae:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80088b0:	7979      	ldrb	r1, [r7, #5]
 80088b2:	2300      	movs	r3, #0
 80088b4:	9303      	str	r3, [sp, #12]
 80088b6:	88fb      	ldrh	r3, [r7, #6]
 80088b8:	9302      	str	r3, [sp, #8]
 80088ba:	68bb      	ldr	r3, [r7, #8]
 80088bc:	9301      	str	r3, [sp, #4]
 80088be:	2301      	movs	r3, #1
 80088c0:	9300      	str	r3, [sp, #0]
 80088c2:	2300      	movs	r3, #0
 80088c4:	2201      	movs	r2, #1
 80088c6:	68f8      	ldr	r0, [r7, #12]
 80088c8:	f000 fb1c 	bl	8008f04 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80088cc:	2300      	movs	r3, #0

}
 80088ce:	4618      	mov	r0, r3
 80088d0:	3710      	adds	r7, #16
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bd80      	pop	{r7, pc}

080088d6 <USBH_InterruptReceiveData>:
  */
USBH_StatusTypeDef USBH_InterruptReceiveData(USBH_HandleTypeDef *phost,
                                             uint8_t *buff,
                                             uint8_t length,
                                             uint8_t pipe_num)
{
 80088d6:	b580      	push	{r7, lr}
 80088d8:	b088      	sub	sp, #32
 80088da:	af04      	add	r7, sp, #16
 80088dc:	60f8      	str	r0, [r7, #12]
 80088de:	60b9      	str	r1, [r7, #8]
 80088e0:	4611      	mov	r1, r2
 80088e2:	461a      	mov	r2, r3
 80088e4:	460b      	mov	r3, r1
 80088e6:	71fb      	strb	r3, [r7, #7]
 80088e8:	4613      	mov	r3, r2
 80088ea:	71bb      	strb	r3, [r7, #6]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80088ec:	79fb      	ldrb	r3, [r7, #7]
 80088ee:	b29b      	uxth	r3, r3
 80088f0:	79b9      	ldrb	r1, [r7, #6]
 80088f2:	2200      	movs	r2, #0
 80088f4:	9203      	str	r2, [sp, #12]
 80088f6:	9302      	str	r3, [sp, #8]
 80088f8:	68bb      	ldr	r3, [r7, #8]
 80088fa:	9301      	str	r3, [sp, #4]
 80088fc:	2301      	movs	r3, #1
 80088fe:	9300      	str	r3, [sp, #0]
 8008900:	2303      	movs	r3, #3
 8008902:	2201      	movs	r2, #1
 8008904:	68f8      	ldr	r0, [r7, #12]
 8008906:	f000 fafd 	bl	8008f04 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    (uint16_t)length,     /* data length      */
                    0U);

  return USBH_OK;
 800890a:	2300      	movs	r3, #0
}
 800890c:	4618      	mov	r0, r3
 800890e:	3710      	adds	r7, #16
 8008910:	46bd      	mov	sp, r7
 8008912:	bd80      	pop	{r7, pc}

08008914 <USBH_IsocSendData>:
  */
USBH_StatusTypeDef USBH_IsocSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint32_t length,
                                     uint8_t pipe_num)
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b088      	sub	sp, #32
 8008918:	af04      	add	r7, sp, #16
 800891a:	60f8      	str	r0, [r7, #12]
 800891c:	60b9      	str	r1, [r7, #8]
 800891e:	607a      	str	r2, [r7, #4]
 8008920:	70fb      	strb	r3, [r7, #3]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	b29b      	uxth	r3, r3
 8008926:	78f9      	ldrb	r1, [r7, #3]
 8008928:	2200      	movs	r2, #0
 800892a:	9203      	str	r2, [sp, #12]
 800892c:	9302      	str	r3, [sp, #8]
 800892e:	68bb      	ldr	r3, [r7, #8]
 8008930:	9301      	str	r3, [sp, #4]
 8008932:	2301      	movs	r3, #1
 8008934:	9300      	str	r3, [sp, #0]
 8008936:	2301      	movs	r3, #1
 8008938:	2200      	movs	r2, #0
 800893a:	68f8      	ldr	r0, [r7, #12]
 800893c:	f000 fae2 	bl	8008f04 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    (uint16_t)length,     /* data length      */
                    0U);

  return USBH_OK;
 8008940:	2300      	movs	r3, #0
}
 8008942:	4618      	mov	r0, r3
 8008944:	3710      	adds	r7, #16
 8008946:	46bd      	mov	sp, r7
 8008948:	bd80      	pop	{r7, pc}

0800894a <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800894a:	b580      	push	{r7, lr}
 800894c:	b086      	sub	sp, #24
 800894e:	af04      	add	r7, sp, #16
 8008950:	6078      	str	r0, [r7, #4]
 8008952:	4608      	mov	r0, r1
 8008954:	4611      	mov	r1, r2
 8008956:	461a      	mov	r2, r3
 8008958:	4603      	mov	r3, r0
 800895a:	70fb      	strb	r3, [r7, #3]
 800895c:	460b      	mov	r3, r1
 800895e:	70bb      	strb	r3, [r7, #2]
 8008960:	4613      	mov	r3, r2
 8008962:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008964:	7878      	ldrb	r0, [r7, #1]
 8008966:	78ba      	ldrb	r2, [r7, #2]
 8008968:	78f9      	ldrb	r1, [r7, #3]
 800896a:	8b3b      	ldrh	r3, [r7, #24]
 800896c:	9302      	str	r3, [sp, #8]
 800896e:	7d3b      	ldrb	r3, [r7, #20]
 8008970:	9301      	str	r3, [sp, #4]
 8008972:	7c3b      	ldrb	r3, [r7, #16]
 8008974:	9300      	str	r3, [sp, #0]
 8008976:	4603      	mov	r3, r0
 8008978:	6878      	ldr	r0, [r7, #4]
 800897a:	f000 fa75 	bl	8008e68 <USBH_LL_OpenPipe>

  return USBH_OK;
 800897e:	2300      	movs	r3, #0
}
 8008980:	4618      	mov	r0, r3
 8008982:	3708      	adds	r7, #8
 8008984:	46bd      	mov	sp, r7
 8008986:	bd80      	pop	{r7, pc}

08008988 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b082      	sub	sp, #8
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
 8008990:	460b      	mov	r3, r1
 8008992:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8008994:	78fb      	ldrb	r3, [r7, #3]
 8008996:	4619      	mov	r1, r3
 8008998:	6878      	ldr	r0, [r7, #4]
 800899a:	f000 fa94 	bl	8008ec6 <USBH_LL_ClosePipe>

  return USBH_OK;
 800899e:	2300      	movs	r3, #0
}
 80089a0:	4618      	mov	r0, r3
 80089a2:	3708      	adds	r7, #8
 80089a4:	46bd      	mov	sp, r7
 80089a6:	bd80      	pop	{r7, pc}

080089a8 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b084      	sub	sp, #16
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
 80089b0:	460b      	mov	r3, r1
 80089b2:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80089b4:	6878      	ldr	r0, [r7, #4]
 80089b6:	f000 f839 	bl	8008a2c <USBH_GetFreePipe>
 80089ba:	4603      	mov	r3, r0
 80089bc:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80089be:	89fb      	ldrh	r3, [r7, #14]
 80089c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80089c4:	4293      	cmp	r3, r2
 80089c6:	d00b      	beq.n	80089e0 <USBH_AllocPipe+0x38>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 80089c8:	78fa      	ldrb	r2, [r7, #3]
 80089ca:	89fb      	ldrh	r3, [r7, #14]
 80089cc:	f003 030f 	and.w	r3, r3, #15
 80089d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80089d4:	6879      	ldr	r1, [r7, #4]
 80089d6:	f503 738a 	add.w	r3, r3, #276	; 0x114
 80089da:	009b      	lsls	r3, r3, #2
 80089dc:	440b      	add	r3, r1
 80089de:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80089e0:	89fb      	ldrh	r3, [r7, #14]
 80089e2:	b2db      	uxtb	r3, r3
}
 80089e4:	4618      	mov	r0, r3
 80089e6:	3710      	adds	r7, #16
 80089e8:	46bd      	mov	sp, r7
 80089ea:	bd80      	pop	{r7, pc}

080089ec <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80089ec:	b480      	push	{r7}
 80089ee:	b083      	sub	sp, #12
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
 80089f4:	460b      	mov	r3, r1
 80089f6:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 80089f8:	78fb      	ldrb	r3, [r7, #3]
 80089fa:	2b0a      	cmp	r3, #10
 80089fc:	d80f      	bhi.n	8008a1e <USBH_FreePipe+0x32>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80089fe:	78fb      	ldrb	r3, [r7, #3]
 8008a00:	687a      	ldr	r2, [r7, #4]
 8008a02:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8008a06:	009b      	lsls	r3, r3, #2
 8008a08:	4413      	add	r3, r2
 8008a0a:	685a      	ldr	r2, [r3, #4]
 8008a0c:	78fb      	ldrb	r3, [r7, #3]
 8008a0e:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008a12:	6879      	ldr	r1, [r7, #4]
 8008a14:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8008a18:	009b      	lsls	r3, r3, #2
 8008a1a:	440b      	add	r3, r1
 8008a1c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008a1e:	2300      	movs	r3, #0
}
 8008a20:	4618      	mov	r0, r3
 8008a22:	370c      	adds	r7, #12
 8008a24:	46bd      	mov	sp, r7
 8008a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2a:	4770      	bx	lr

08008a2c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008a2c:	b480      	push	{r7}
 8008a2e:	b085      	sub	sp, #20
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008a34:	2300      	movs	r3, #0
 8008a36:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8008a38:	2300      	movs	r3, #0
 8008a3a:	73fb      	strb	r3, [r7, #15]
 8008a3c:	e010      	b.n	8008a60 <USBH_GetFreePipe+0x34>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008a3e:	7bfb      	ldrb	r3, [r7, #15]
 8008a40:	687a      	ldr	r2, [r7, #4]
 8008a42:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8008a46:	009b      	lsls	r3, r3, #2
 8008a48:	4413      	add	r3, r2
 8008a4a:	685b      	ldr	r3, [r3, #4]
 8008a4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d102      	bne.n	8008a5a <USBH_GetFreePipe+0x2e>
    {
      return (uint16_t)idx;
 8008a54:	7bfb      	ldrb	r3, [r7, #15]
 8008a56:	b29b      	uxth	r3, r3
 8008a58:	e007      	b.n	8008a6a <USBH_GetFreePipe+0x3e>
  for (idx = 0U ; idx < 11U ; idx++)
 8008a5a:	7bfb      	ldrb	r3, [r7, #15]
 8008a5c:	3301      	adds	r3, #1
 8008a5e:	73fb      	strb	r3, [r7, #15]
 8008a60:	7bfb      	ldrb	r3, [r7, #15]
 8008a62:	2b0a      	cmp	r3, #10
 8008a64:	d9eb      	bls.n	8008a3e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008a66:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	3714      	adds	r7, #20
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a74:	4770      	bx	lr
	...

08008a78 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008a7c:	2201      	movs	r2, #1
 8008a7e:	490e      	ldr	r1, [pc, #56]	; (8008ab8 <MX_USB_HOST_Init+0x40>)
 8008a80:	480e      	ldr	r0, [pc, #56]	; (8008abc <MX_USB_HOST_Init+0x44>)
 8008a82:	f7fe fc86 	bl	8007392 <USBH_Init>
 8008a86:	4603      	mov	r3, r0
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d001      	beq.n	8008a90 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008a8c:	f7f7 fe6c 	bl	8000768 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_AUDIO_CLASS) != USBH_OK)
 8008a90:	490b      	ldr	r1, [pc, #44]	; (8008ac0 <MX_USB_HOST_Init+0x48>)
 8008a92:	480a      	ldr	r0, [pc, #40]	; (8008abc <MX_USB_HOST_Init+0x44>)
 8008a94:	f7fe fd0c 	bl	80074b0 <USBH_RegisterClass>
 8008a98:	4603      	mov	r3, r0
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d001      	beq.n	8008aa2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008a9e:	f7f7 fe63 	bl	8000768 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008aa2:	4806      	ldr	r0, [pc, #24]	; (8008abc <MX_USB_HOST_Init+0x44>)
 8008aa4:	f7fe fda8 	bl	80075f8 <USBH_Start>
 8008aa8:	4603      	mov	r3, r0
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d001      	beq.n	8008ab2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008aae:	f7f7 fe5b 	bl	8000768 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008ab2:	bf00      	nop
 8008ab4:	bd80      	pop	{r7, pc}
 8008ab6:	bf00      	nop
 8008ab8:	08008ad9 	.word	0x08008ad9
 8008abc:	20000138 	.word	0x20000138
 8008ac0:	2000000c 	.word	0x2000000c

08008ac4 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008ac8:	4802      	ldr	r0, [pc, #8]	; (8008ad4 <MX_USB_HOST_Process+0x10>)
 8008aca:	f7fe fda5 	bl	8007618 <USBH_Process>
}
 8008ace:	bf00      	nop
 8008ad0:	bd80      	pop	{r7, pc}
 8008ad2:	bf00      	nop
 8008ad4:	20000138 	.word	0x20000138

08008ad8 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008ad8:	b480      	push	{r7}
 8008ada:	b083      	sub	sp, #12
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
 8008ae0:	460b      	mov	r3, r1
 8008ae2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008ae4:	78fb      	ldrb	r3, [r7, #3]
 8008ae6:	3b01      	subs	r3, #1
 8008ae8:	2b04      	cmp	r3, #4
 8008aea:	d819      	bhi.n	8008b20 <USBH_UserProcess+0x48>
 8008aec:	a201      	add	r2, pc, #4	; (adr r2, 8008af4 <USBH_UserProcess+0x1c>)
 8008aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008af2:	bf00      	nop
 8008af4:	08008b21 	.word	0x08008b21
 8008af8:	08008b11 	.word	0x08008b11
 8008afc:	08008b21 	.word	0x08008b21
 8008b00:	08008b19 	.word	0x08008b19
 8008b04:	08008b09 	.word	0x08008b09
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008b08:	4b09      	ldr	r3, [pc, #36]	; (8008b30 <USBH_UserProcess+0x58>)
 8008b0a:	2203      	movs	r2, #3
 8008b0c:	701a      	strb	r2, [r3, #0]
  break;
 8008b0e:	e008      	b.n	8008b22 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008b10:	4b07      	ldr	r3, [pc, #28]	; (8008b30 <USBH_UserProcess+0x58>)
 8008b12:	2202      	movs	r2, #2
 8008b14:	701a      	strb	r2, [r3, #0]
  break;
 8008b16:	e004      	b.n	8008b22 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008b18:	4b05      	ldr	r3, [pc, #20]	; (8008b30 <USBH_UserProcess+0x58>)
 8008b1a:	2201      	movs	r2, #1
 8008b1c:	701a      	strb	r2, [r3, #0]
  break;
 8008b1e:	e000      	b.n	8008b22 <USBH_UserProcess+0x4a>

  default:
  break;
 8008b20:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008b22:	bf00      	nop
 8008b24:	370c      	adds	r7, #12
 8008b26:	46bd      	mov	sp, r7
 8008b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2c:	4770      	bx	lr
 8008b2e:	bf00      	nop
 8008b30:	200005e0 	.word	0x200005e0

08008b34 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b0ae      	sub	sp, #184	; 0xb8
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008b3c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8008b40:	2200      	movs	r2, #0
 8008b42:	601a      	str	r2, [r3, #0]
 8008b44:	605a      	str	r2, [r3, #4]
 8008b46:	609a      	str	r2, [r3, #8]
 8008b48:	60da      	str	r2, [r3, #12]
 8008b4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008b4c:	f107 0318 	add.w	r3, r7, #24
 8008b50:	228c      	movs	r2, #140	; 0x8c
 8008b52:	2100      	movs	r1, #0
 8008b54:	4618      	mov	r0, r3
 8008b56:	f000 faed 	bl	8009134 <memset>
  if(hcdHandle->Instance==USB_OTG_FS)
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008b62:	d173      	bne.n	8008c4c <HAL_HCD_MspInit+0x118>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8008b64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008b68:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8008b6a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008b6e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8008b72:	2301      	movs	r3, #1
 8008b74:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 5;
 8008b76:	2305      	movs	r3, #5
 8008b78:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 20;
 8008b7a:	2314      	movs	r3, #20
 8008b7c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8008b7e:	2302      	movs	r3, #2
 8008b80:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8008b82:	2302      	movs	r3, #2
 8008b84:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8008b86:	2302      	movs	r3, #2
 8008b88:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8008b8a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008b8e:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008b90:	f107 0318 	add.w	r3, r7, #24
 8008b94:	4618      	mov	r0, r3
 8008b96:	f7fa fca7 	bl	80034e8 <HAL_RCCEx_PeriphCLKConfig>
 8008b9a:	4603      	mov	r3, r0
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d001      	beq.n	8008ba4 <HAL_HCD_MspInit+0x70>
    {
      Error_Handler();
 8008ba0:	f7f7 fde2 	bl	8000768 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008ba4:	4b2b      	ldr	r3, [pc, #172]	; (8008c54 <HAL_HCD_MspInit+0x120>)
 8008ba6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ba8:	4a2a      	ldr	r2, [pc, #168]	; (8008c54 <HAL_HCD_MspInit+0x120>)
 8008baa:	f043 0301 	orr.w	r3, r3, #1
 8008bae:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008bb0:	4b28      	ldr	r3, [pc, #160]	; (8008c54 <HAL_HCD_MspInit+0x120>)
 8008bb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008bb4:	f003 0301 	and.w	r3, r3, #1
 8008bb8:	617b      	str	r3, [r7, #20]
 8008bba:	697b      	ldr	r3, [r7, #20]
    PA8     ------> USB_OTG_FS_SOF
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8008bbc:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8008bc0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008bc4:	2302      	movs	r3, #2
 8008bc6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008bca:	2300      	movs	r3, #0
 8008bcc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008bd0:	2303      	movs	r3, #3
 8008bd2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008bd6:	230a      	movs	r3, #10
 8008bd8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008bdc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8008be0:	4619      	mov	r1, r3
 8008be2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008be6:	f7f8 f899 	bl	8000d1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008bea:	4b1a      	ldr	r3, [pc, #104]	; (8008c54 <HAL_HCD_MspInit+0x120>)
 8008bec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008bee:	4a19      	ldr	r2, [pc, #100]	; (8008c54 <HAL_HCD_MspInit+0x120>)
 8008bf0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008bf4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008bf6:	4b17      	ldr	r3, [pc, #92]	; (8008c54 <HAL_HCD_MspInit+0x120>)
 8008bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008bfa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008bfe:	613b      	str	r3, [r7, #16]
 8008c00:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008c02:	4b14      	ldr	r3, [pc, #80]	; (8008c54 <HAL_HCD_MspInit+0x120>)
 8008c04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d114      	bne.n	8008c38 <HAL_HCD_MspInit+0x104>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008c0e:	4b11      	ldr	r3, [pc, #68]	; (8008c54 <HAL_HCD_MspInit+0x120>)
 8008c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c12:	4a10      	ldr	r2, [pc, #64]	; (8008c54 <HAL_HCD_MspInit+0x120>)
 8008c14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c18:	6593      	str	r3, [r2, #88]	; 0x58
 8008c1a:	4b0e      	ldr	r3, [pc, #56]	; (8008c54 <HAL_HCD_MspInit+0x120>)
 8008c1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008c22:	60fb      	str	r3, [r7, #12]
 8008c24:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8008c26:	f7f9 fe01 	bl	800282c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8008c2a:	4b0a      	ldr	r3, [pc, #40]	; (8008c54 <HAL_HCD_MspInit+0x120>)
 8008c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c2e:	4a09      	ldr	r2, [pc, #36]	; (8008c54 <HAL_HCD_MspInit+0x120>)
 8008c30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008c34:	6593      	str	r3, [r2, #88]	; 0x58
 8008c36:	e001      	b.n	8008c3c <HAL_HCD_MspInit+0x108>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8008c38:	f7f9 fdf8 	bl	800282c <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	2100      	movs	r1, #0
 8008c40:	2043      	movs	r0, #67	; 0x43
 8008c42:	f7f8 f834 	bl	8000cae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008c46:	2043      	movs	r0, #67	; 0x43
 8008c48:	f7f8 f84d 	bl	8000ce6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008c4c:	bf00      	nop
 8008c4e:	37b8      	adds	r7, #184	; 0xb8
 8008c50:	46bd      	mov	sp, r7
 8008c52:	bd80      	pop	{r7, pc}
 8008c54:	40021000 	.word	0x40021000

08008c58 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b082      	sub	sp, #8
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008c66:	4618      	mov	r0, r3
 8008c68:	f7ff f8ab 	bl	8007dc2 <USBH_LL_IncTimer>
}
 8008c6c:	bf00      	nop
 8008c6e:	3708      	adds	r7, #8
 8008c70:	46bd      	mov	sp, r7
 8008c72:	bd80      	pop	{r7, pc}

08008c74 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b082      	sub	sp, #8
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008c82:	4618      	mov	r0, r3
 8008c84:	f7ff f8e3 	bl	8007e4e <USBH_LL_Connect>
}
 8008c88:	bf00      	nop
 8008c8a:	3708      	adds	r7, #8
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	bd80      	pop	{r7, pc}

08008c90 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b082      	sub	sp, #8
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	f7ff f8ec 	bl	8007e7c <USBH_LL_Disconnect>
}
 8008ca4:	bf00      	nop
 8008ca6:	3708      	adds	r7, #8
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	bd80      	pop	{r7, pc}

08008cac <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008cac:	b480      	push	{r7}
 8008cae:	b083      	sub	sp, #12
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
 8008cb4:	460b      	mov	r3, r1
 8008cb6:	70fb      	strb	r3, [r7, #3]
 8008cb8:	4613      	mov	r3, r2
 8008cba:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008cbc:	bf00      	nop
 8008cbe:	370c      	adds	r7, #12
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc6:	4770      	bx	lr

08008cc8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b082      	sub	sp, #8
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	f7ff f89d 	bl	8007e16 <USBH_LL_PortEnabled>
}
 8008cdc:	bf00      	nop
 8008cde:	3708      	adds	r7, #8
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	bd80      	pop	{r7, pc}

08008ce4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b082      	sub	sp, #8
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	f7ff f89d 	bl	8007e32 <USBH_LL_PortDisabled>
}
 8008cf8:	bf00      	nop
 8008cfa:	3708      	adds	r7, #8
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	bd80      	pop	{r7, pc}

08008d00 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b082      	sub	sp, #8
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	f893 349c 	ldrb.w	r3, [r3, #1180]	; 0x49c
 8008d0e:	2b01      	cmp	r3, #1
 8008d10:	d12a      	bne.n	8008d68 <USBH_LL_Init+0x68>
  /* Enable USB power on Pwrctrl CR2 register */
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008d12:	4a18      	ldr	r2, [pc, #96]	; (8008d74 <USBH_LL_Init+0x74>)
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	4a15      	ldr	r2, [pc, #84]	; (8008d74 <USBH_LL_Init+0x74>)
 8008d1e:	f8c3 24a0 	str.w	r2, [r3, #1184]	; 0x4a0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008d22:	4b14      	ldr	r3, [pc, #80]	; (8008d74 <USBH_LL_Init+0x74>)
 8008d24:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008d28:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 12;
 8008d2a:	4b12      	ldr	r3, [pc, #72]	; (8008d74 <USBH_LL_Init+0x74>)
 8008d2c:	220c      	movs	r2, #12
 8008d2e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008d30:	4b10      	ldr	r3, [pc, #64]	; (8008d74 <USBH_LL_Init+0x74>)
 8008d32:	2201      	movs	r2, #1
 8008d34:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008d36:	4b0f      	ldr	r3, [pc, #60]	; (8008d74 <USBH_LL_Init+0x74>)
 8008d38:	2200      	movs	r2, #0
 8008d3a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008d3c:	4b0d      	ldr	r3, [pc, #52]	; (8008d74 <USBH_LL_Init+0x74>)
 8008d3e:	2202      	movs	r2, #2
 8008d40:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008d42:	4b0c      	ldr	r3, [pc, #48]	; (8008d74 <USBH_LL_Init+0x74>)
 8008d44:	2200      	movs	r2, #0
 8008d46:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008d48:	480a      	ldr	r0, [pc, #40]	; (8008d74 <USBH_LL_Init+0x74>)
 8008d4a:	f7f8 f991 	bl	8001070 <HAL_HCD_Init>
 8008d4e:	4603      	mov	r3, r0
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d001      	beq.n	8008d58 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008d54:	f7f7 fd08 	bl	8000768 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008d58:	4806      	ldr	r0, [pc, #24]	; (8008d74 <USBH_LL_Init+0x74>)
 8008d5a:	f7f8 fd5c 	bl	8001816 <HAL_HCD_GetCurrentFrame>
 8008d5e:	4603      	mov	r3, r0
 8008d60:	4619      	mov	r1, r3
 8008d62:	6878      	ldr	r0, [r7, #4]
 8008d64:	f7ff f81e 	bl	8007da4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008d68:	2300      	movs	r3, #0
}
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	3708      	adds	r7, #8
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	bd80      	pop	{r7, pc}
 8008d72:	bf00      	nop
 8008d74:	200005e4 	.word	0x200005e4

08008d78 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b084      	sub	sp, #16
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d80:	2300      	movs	r3, #0
 8008d82:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008d84:	2300      	movs	r3, #0
 8008d86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 8008d8e:	4618      	mov	r0, r3
 8008d90:	f7f8 fcdf 	bl	8001752 <HAL_HCD_Start>
 8008d94:	4603      	mov	r3, r0
 8008d96:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008d98:	7bfb      	ldrb	r3, [r7, #15]
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	f000 f948 	bl	8009030 <USBH_Get_USB_Status>
 8008da0:	4603      	mov	r3, r0
 8008da2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008da4:	7bbb      	ldrb	r3, [r7, #14]
}
 8008da6:	4618      	mov	r0, r3
 8008da8:	3710      	adds	r7, #16
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bd80      	pop	{r7, pc}

08008dae <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008dae:	b580      	push	{r7, lr}
 8008db0:	b084      	sub	sp, #16
 8008db2:	af00      	add	r7, sp, #0
 8008db4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008db6:	2300      	movs	r3, #0
 8008db8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008dba:	2300      	movs	r3, #0
 8008dbc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	f7f8 fce7 	bl	8001798 <HAL_HCD_Stop>
 8008dca:	4603      	mov	r3, r0
 8008dcc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008dce:	7bfb      	ldrb	r3, [r7, #15]
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	f000 f92d 	bl	8009030 <USBH_Get_USB_Status>
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008dda:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ddc:	4618      	mov	r0, r3
 8008dde:	3710      	adds	r7, #16
 8008de0:	46bd      	mov	sp, r7
 8008de2:	bd80      	pop	{r7, pc}

08008de4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b084      	sub	sp, #16
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008dec:	2301      	movs	r3, #1
 8008dee:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 8008df6:	4618      	mov	r0, r3
 8008df8:	f7f8 fd1b 	bl	8001832 <HAL_HCD_GetCurrentSpeed>
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	2b02      	cmp	r3, #2
 8008e00:	d00c      	beq.n	8008e1c <USBH_LL_GetSpeed+0x38>
 8008e02:	2b02      	cmp	r3, #2
 8008e04:	d80d      	bhi.n	8008e22 <USBH_LL_GetSpeed+0x3e>
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d002      	beq.n	8008e10 <USBH_LL_GetSpeed+0x2c>
 8008e0a:	2b01      	cmp	r3, #1
 8008e0c:	d003      	beq.n	8008e16 <USBH_LL_GetSpeed+0x32>
 8008e0e:	e008      	b.n	8008e22 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008e10:	2300      	movs	r3, #0
 8008e12:	73fb      	strb	r3, [r7, #15]
    break;
 8008e14:	e008      	b.n	8008e28 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008e16:	2301      	movs	r3, #1
 8008e18:	73fb      	strb	r3, [r7, #15]
    break;
 8008e1a:	e005      	b.n	8008e28 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008e1c:	2302      	movs	r3, #2
 8008e1e:	73fb      	strb	r3, [r7, #15]
    break;
 8008e20:	e002      	b.n	8008e28 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008e22:	2301      	movs	r3, #1
 8008e24:	73fb      	strb	r3, [r7, #15]
    break;
 8008e26:	bf00      	nop
  }
  return  speed;
 8008e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	3710      	adds	r7, #16
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bd80      	pop	{r7, pc}

08008e32 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008e32:	b580      	push	{r7, lr}
 8008e34:	b084      	sub	sp, #16
 8008e36:	af00      	add	r7, sp, #0
 8008e38:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008e3e:	2300      	movs	r3, #0
 8008e40:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 8008e48:	4618      	mov	r0, r3
 8008e4a:	f7f8 fcc2 	bl	80017d2 <HAL_HCD_ResetPort>
 8008e4e:	4603      	mov	r3, r0
 8008e50:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008e52:	7bfb      	ldrb	r3, [r7, #15]
 8008e54:	4618      	mov	r0, r3
 8008e56:	f000 f8eb 	bl	8009030 <USBH_Get_USB_Status>
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e5e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e60:	4618      	mov	r0, r3
 8008e62:	3710      	adds	r7, #16
 8008e64:	46bd      	mov	sp, r7
 8008e66:	bd80      	pop	{r7, pc}

08008e68 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008e68:	b590      	push	{r4, r7, lr}
 8008e6a:	b089      	sub	sp, #36	; 0x24
 8008e6c:	af04      	add	r7, sp, #16
 8008e6e:	6078      	str	r0, [r7, #4]
 8008e70:	4608      	mov	r0, r1
 8008e72:	4611      	mov	r1, r2
 8008e74:	461a      	mov	r2, r3
 8008e76:	4603      	mov	r3, r0
 8008e78:	70fb      	strb	r3, [r7, #3]
 8008e7a:	460b      	mov	r3, r1
 8008e7c:	70bb      	strb	r3, [r7, #2]
 8008e7e:	4613      	mov	r3, r2
 8008e80:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e82:	2300      	movs	r3, #0
 8008e84:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008e86:	2300      	movs	r3, #0
 8008e88:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	f8d3 04a0 	ldr.w	r0, [r3, #1184]	; 0x4a0
 8008e90:	787c      	ldrb	r4, [r7, #1]
 8008e92:	78ba      	ldrb	r2, [r7, #2]
 8008e94:	78f9      	ldrb	r1, [r7, #3]
 8008e96:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008e98:	9302      	str	r3, [sp, #8]
 8008e9a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008e9e:	9301      	str	r3, [sp, #4]
 8008ea0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008ea4:	9300      	str	r3, [sp, #0]
 8008ea6:	4623      	mov	r3, r4
 8008ea8:	f7f8 f944 	bl	8001134 <HAL_HCD_HC_Init>
 8008eac:	4603      	mov	r3, r0
 8008eae:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008eb0:	7bfb      	ldrb	r3, [r7, #15]
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	f000 f8bc 	bl	8009030 <USBH_Get_USB_Status>
 8008eb8:	4603      	mov	r3, r0
 8008eba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ebc:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	3714      	adds	r7, #20
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	bd90      	pop	{r4, r7, pc}

08008ec6 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008ec6:	b580      	push	{r7, lr}
 8008ec8:	b084      	sub	sp, #16
 8008eca:	af00      	add	r7, sp, #0
 8008ecc:	6078      	str	r0, [r7, #4]
 8008ece:	460b      	mov	r3, r1
 8008ed0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 8008ee0:	78fa      	ldrb	r2, [r7, #3]
 8008ee2:	4611      	mov	r1, r2
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	f7f8 f9b4 	bl	8001252 <HAL_HCD_HC_Halt>
 8008eea:	4603      	mov	r3, r0
 8008eec:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008eee:	7bfb      	ldrb	r3, [r7, #15]
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	f000 f89d 	bl	8009030 <USBH_Get_USB_Status>
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008efa:	7bbb      	ldrb	r3, [r7, #14]
}
 8008efc:	4618      	mov	r0, r3
 8008efe:	3710      	adds	r7, #16
 8008f00:	46bd      	mov	sp, r7
 8008f02:	bd80      	pop	{r7, pc}

08008f04 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008f04:	b590      	push	{r4, r7, lr}
 8008f06:	b089      	sub	sp, #36	; 0x24
 8008f08:	af04      	add	r7, sp, #16
 8008f0a:	6078      	str	r0, [r7, #4]
 8008f0c:	4608      	mov	r0, r1
 8008f0e:	4611      	mov	r1, r2
 8008f10:	461a      	mov	r2, r3
 8008f12:	4603      	mov	r3, r0
 8008f14:	70fb      	strb	r3, [r7, #3]
 8008f16:	460b      	mov	r3, r1
 8008f18:	70bb      	strb	r3, [r7, #2]
 8008f1a:	4613      	mov	r3, r2
 8008f1c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f1e:	2300      	movs	r3, #0
 8008f20:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008f22:	2300      	movs	r3, #0
 8008f24:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	f8d3 04a0 	ldr.w	r0, [r3, #1184]	; 0x4a0
 8008f2c:	787c      	ldrb	r4, [r7, #1]
 8008f2e:	78ba      	ldrb	r2, [r7, #2]
 8008f30:	78f9      	ldrb	r1, [r7, #3]
 8008f32:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008f36:	9303      	str	r3, [sp, #12]
 8008f38:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008f3a:	9302      	str	r3, [sp, #8]
 8008f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f3e:	9301      	str	r3, [sp, #4]
 8008f40:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008f44:	9300      	str	r3, [sp, #0]
 8008f46:	4623      	mov	r3, r4
 8008f48:	f7f8 f9a6 	bl	8001298 <HAL_HCD_HC_SubmitRequest>
 8008f4c:	4603      	mov	r3, r0
 8008f4e:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008f50:	7bfb      	ldrb	r3, [r7, #15]
 8008f52:	4618      	mov	r0, r3
 8008f54:	f000 f86c 	bl	8009030 <USBH_Get_USB_Status>
 8008f58:	4603      	mov	r3, r0
 8008f5a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f5c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f5e:	4618      	mov	r0, r3
 8008f60:	3714      	adds	r7, #20
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bd90      	pop	{r4, r7, pc}

08008f66 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008f66:	b580      	push	{r7, lr}
 8008f68:	b082      	sub	sp, #8
 8008f6a:	af00      	add	r7, sp, #0
 8008f6c:	6078      	str	r0, [r7, #4]
 8008f6e:	460b      	mov	r3, r1
 8008f70:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 8008f78:	78fa      	ldrb	r2, [r7, #3]
 8008f7a:	4611      	mov	r1, r2
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	f7f8 fc36 	bl	80017ee <HAL_HCD_HC_GetURBState>
 8008f82:	4603      	mov	r3, r0
}
 8008f84:	4618      	mov	r0, r3
 8008f86:	3708      	adds	r7, #8
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	bd80      	pop	{r7, pc}

08008f8c <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b082      	sub	sp, #8
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
 8008f94:	460b      	mov	r3, r1
 8008f96:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	f893 349c 	ldrb.w	r3, [r3, #1180]	; 0x49c
 8008f9e:	2b01      	cmp	r3, #1
 8008fa0:	d103      	bne.n	8008faa <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008fa2:	78fb      	ldrb	r3, [r7, #3]
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	f000 f86f 	bl	8009088 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008faa:	20c8      	movs	r0, #200	; 0xc8
 8008fac:	f7f7 fd80 	bl	8000ab0 <HAL_Delay>
  return USBH_OK;
 8008fb0:	2300      	movs	r3, #0
}
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	3708      	adds	r7, #8
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	bd80      	pop	{r7, pc}

08008fba <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008fba:	b480      	push	{r7}
 8008fbc:	b085      	sub	sp, #20
 8008fbe:	af00      	add	r7, sp, #0
 8008fc0:	6078      	str	r0, [r7, #4]
 8008fc2:	460b      	mov	r3, r1
 8008fc4:	70fb      	strb	r3, [r7, #3]
 8008fc6:	4613      	mov	r3, r2
 8008fc8:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 8008fd0:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008fd2:	78fb      	ldrb	r3, [r7, #3]
 8008fd4:	68fa      	ldr	r2, [r7, #12]
 8008fd6:	212c      	movs	r1, #44	; 0x2c
 8008fd8:	fb01 f303 	mul.w	r3, r1, r3
 8008fdc:	4413      	add	r3, r2
 8008fde:	333b      	adds	r3, #59	; 0x3b
 8008fe0:	781b      	ldrb	r3, [r3, #0]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d009      	beq.n	8008ffa <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008fe6:	78fb      	ldrb	r3, [r7, #3]
 8008fe8:	68fa      	ldr	r2, [r7, #12]
 8008fea:	212c      	movs	r1, #44	; 0x2c
 8008fec:	fb01 f303 	mul.w	r3, r1, r3
 8008ff0:	4413      	add	r3, r2
 8008ff2:	3354      	adds	r3, #84	; 0x54
 8008ff4:	78ba      	ldrb	r2, [r7, #2]
 8008ff6:	701a      	strb	r2, [r3, #0]
 8008ff8:	e008      	b.n	800900c <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008ffa:	78fb      	ldrb	r3, [r7, #3]
 8008ffc:	68fa      	ldr	r2, [r7, #12]
 8008ffe:	212c      	movs	r1, #44	; 0x2c
 8009000:	fb01 f303 	mul.w	r3, r1, r3
 8009004:	4413      	add	r3, r2
 8009006:	3355      	adds	r3, #85	; 0x55
 8009008:	78ba      	ldrb	r2, [r7, #2]
 800900a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800900c:	2300      	movs	r3, #0
}
 800900e:	4618      	mov	r0, r3
 8009010:	3714      	adds	r7, #20
 8009012:	46bd      	mov	sp, r7
 8009014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009018:	4770      	bx	lr

0800901a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800901a:	b580      	push	{r7, lr}
 800901c:	b082      	sub	sp, #8
 800901e:	af00      	add	r7, sp, #0
 8009020:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8009022:	6878      	ldr	r0, [r7, #4]
 8009024:	f7f7 fd44 	bl	8000ab0 <HAL_Delay>
}
 8009028:	bf00      	nop
 800902a:	3708      	adds	r7, #8
 800902c:	46bd      	mov	sp, r7
 800902e:	bd80      	pop	{r7, pc}

08009030 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009030:	b480      	push	{r7}
 8009032:	b085      	sub	sp, #20
 8009034:	af00      	add	r7, sp, #0
 8009036:	4603      	mov	r3, r0
 8009038:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800903a:	2300      	movs	r3, #0
 800903c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800903e:	79fb      	ldrb	r3, [r7, #7]
 8009040:	2b03      	cmp	r3, #3
 8009042:	d817      	bhi.n	8009074 <USBH_Get_USB_Status+0x44>
 8009044:	a201      	add	r2, pc, #4	; (adr r2, 800904c <USBH_Get_USB_Status+0x1c>)
 8009046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800904a:	bf00      	nop
 800904c:	0800905d 	.word	0x0800905d
 8009050:	08009063 	.word	0x08009063
 8009054:	08009069 	.word	0x08009069
 8009058:	0800906f 	.word	0x0800906f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800905c:	2300      	movs	r3, #0
 800905e:	73fb      	strb	r3, [r7, #15]
    break;
 8009060:	e00b      	b.n	800907a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8009062:	2302      	movs	r3, #2
 8009064:	73fb      	strb	r3, [r7, #15]
    break;
 8009066:	e008      	b.n	800907a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009068:	2301      	movs	r3, #1
 800906a:	73fb      	strb	r3, [r7, #15]
    break;
 800906c:	e005      	b.n	800907a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800906e:	2302      	movs	r3, #2
 8009070:	73fb      	strb	r3, [r7, #15]
    break;
 8009072:	e002      	b.n	800907a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009074:	2302      	movs	r3, #2
 8009076:	73fb      	strb	r3, [r7, #15]
    break;
 8009078:	bf00      	nop
  }
  return usb_status;
 800907a:	7bfb      	ldrb	r3, [r7, #15]
}
 800907c:	4618      	mov	r0, r3
 800907e:	3714      	adds	r7, #20
 8009080:	46bd      	mov	sp, r7
 8009082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009086:	4770      	bx	lr

08009088 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b084      	sub	sp, #16
 800908c:	af00      	add	r7, sp, #0
 800908e:	4603      	mov	r3, r0
 8009090:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8009092:	79fb      	ldrb	r3, [r7, #7]
 8009094:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8009096:	79fb      	ldrb	r3, [r7, #7]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d102      	bne.n	80090a2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800909c:	2300      	movs	r3, #0
 800909e:	73fb      	strb	r3, [r7, #15]
 80090a0:	e001      	b.n	80090a6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 80090a2:	2301      	movs	r3, #1
 80090a4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOG,GPIO_PIN_6,(GPIO_PinState)data);
 80090a6:	7bfb      	ldrb	r3, [r7, #15]
 80090a8:	461a      	mov	r2, r3
 80090aa:	2140      	movs	r1, #64	; 0x40
 80090ac:	4803      	ldr	r0, [pc, #12]	; (80090bc <MX_DriverVbusFS+0x34>)
 80090ae:	f7f7 ffc7 	bl	8001040 <HAL_GPIO_WritePin>
}
 80090b2:	bf00      	nop
 80090b4:	3710      	adds	r7, #16
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bd80      	pop	{r7, pc}
 80090ba:	bf00      	nop
 80090bc:	48001800 	.word	0x48001800

080090c0 <__errno>:
 80090c0:	4b01      	ldr	r3, [pc, #4]	; (80090c8 <__errno+0x8>)
 80090c2:	6818      	ldr	r0, [r3, #0]
 80090c4:	4770      	bx	lr
 80090c6:	bf00      	nop
 80090c8:	2000002c 	.word	0x2000002c

080090cc <__libc_init_array>:
 80090cc:	b570      	push	{r4, r5, r6, lr}
 80090ce:	4d0d      	ldr	r5, [pc, #52]	; (8009104 <__libc_init_array+0x38>)
 80090d0:	4c0d      	ldr	r4, [pc, #52]	; (8009108 <__libc_init_array+0x3c>)
 80090d2:	1b64      	subs	r4, r4, r5
 80090d4:	10a4      	asrs	r4, r4, #2
 80090d6:	2600      	movs	r6, #0
 80090d8:	42a6      	cmp	r6, r4
 80090da:	d109      	bne.n	80090f0 <__libc_init_array+0x24>
 80090dc:	4d0b      	ldr	r5, [pc, #44]	; (800910c <__libc_init_array+0x40>)
 80090de:	4c0c      	ldr	r4, [pc, #48]	; (8009110 <__libc_init_array+0x44>)
 80090e0:	f000 f92e 	bl	8009340 <_init>
 80090e4:	1b64      	subs	r4, r4, r5
 80090e6:	10a4      	asrs	r4, r4, #2
 80090e8:	2600      	movs	r6, #0
 80090ea:	42a6      	cmp	r6, r4
 80090ec:	d105      	bne.n	80090fa <__libc_init_array+0x2e>
 80090ee:	bd70      	pop	{r4, r5, r6, pc}
 80090f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80090f4:	4798      	blx	r3
 80090f6:	3601      	adds	r6, #1
 80090f8:	e7ee      	b.n	80090d8 <__libc_init_array+0xc>
 80090fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80090fe:	4798      	blx	r3
 8009100:	3601      	adds	r6, #1
 8009102:	e7f2      	b.n	80090ea <__libc_init_array+0x1e>
 8009104:	080093b0 	.word	0x080093b0
 8009108:	080093b0 	.word	0x080093b0
 800910c:	080093b0 	.word	0x080093b0
 8009110:	080093b4 	.word	0x080093b4

08009114 <malloc>:
 8009114:	4b02      	ldr	r3, [pc, #8]	; (8009120 <malloc+0xc>)
 8009116:	4601      	mov	r1, r0
 8009118:	6818      	ldr	r0, [r3, #0]
 800911a:	f000 b87f 	b.w	800921c <_malloc_r>
 800911e:	bf00      	nop
 8009120:	2000002c 	.word	0x2000002c

08009124 <free>:
 8009124:	4b02      	ldr	r3, [pc, #8]	; (8009130 <free+0xc>)
 8009126:	4601      	mov	r1, r0
 8009128:	6818      	ldr	r0, [r3, #0]
 800912a:	f000 b80b 	b.w	8009144 <_free_r>
 800912e:	bf00      	nop
 8009130:	2000002c 	.word	0x2000002c

08009134 <memset>:
 8009134:	4402      	add	r2, r0
 8009136:	4603      	mov	r3, r0
 8009138:	4293      	cmp	r3, r2
 800913a:	d100      	bne.n	800913e <memset+0xa>
 800913c:	4770      	bx	lr
 800913e:	f803 1b01 	strb.w	r1, [r3], #1
 8009142:	e7f9      	b.n	8009138 <memset+0x4>

08009144 <_free_r>:
 8009144:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009146:	2900      	cmp	r1, #0
 8009148:	d044      	beq.n	80091d4 <_free_r+0x90>
 800914a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800914e:	9001      	str	r0, [sp, #4]
 8009150:	2b00      	cmp	r3, #0
 8009152:	f1a1 0404 	sub.w	r4, r1, #4
 8009156:	bfb8      	it	lt
 8009158:	18e4      	addlt	r4, r4, r3
 800915a:	f000 f8e3 	bl	8009324 <__malloc_lock>
 800915e:	4a1e      	ldr	r2, [pc, #120]	; (80091d8 <_free_r+0x94>)
 8009160:	9801      	ldr	r0, [sp, #4]
 8009162:	6813      	ldr	r3, [r2, #0]
 8009164:	b933      	cbnz	r3, 8009174 <_free_r+0x30>
 8009166:	6063      	str	r3, [r4, #4]
 8009168:	6014      	str	r4, [r2, #0]
 800916a:	b003      	add	sp, #12
 800916c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009170:	f000 b8de 	b.w	8009330 <__malloc_unlock>
 8009174:	42a3      	cmp	r3, r4
 8009176:	d908      	bls.n	800918a <_free_r+0x46>
 8009178:	6825      	ldr	r5, [r4, #0]
 800917a:	1961      	adds	r1, r4, r5
 800917c:	428b      	cmp	r3, r1
 800917e:	bf01      	itttt	eq
 8009180:	6819      	ldreq	r1, [r3, #0]
 8009182:	685b      	ldreq	r3, [r3, #4]
 8009184:	1949      	addeq	r1, r1, r5
 8009186:	6021      	streq	r1, [r4, #0]
 8009188:	e7ed      	b.n	8009166 <_free_r+0x22>
 800918a:	461a      	mov	r2, r3
 800918c:	685b      	ldr	r3, [r3, #4]
 800918e:	b10b      	cbz	r3, 8009194 <_free_r+0x50>
 8009190:	42a3      	cmp	r3, r4
 8009192:	d9fa      	bls.n	800918a <_free_r+0x46>
 8009194:	6811      	ldr	r1, [r2, #0]
 8009196:	1855      	adds	r5, r2, r1
 8009198:	42a5      	cmp	r5, r4
 800919a:	d10b      	bne.n	80091b4 <_free_r+0x70>
 800919c:	6824      	ldr	r4, [r4, #0]
 800919e:	4421      	add	r1, r4
 80091a0:	1854      	adds	r4, r2, r1
 80091a2:	42a3      	cmp	r3, r4
 80091a4:	6011      	str	r1, [r2, #0]
 80091a6:	d1e0      	bne.n	800916a <_free_r+0x26>
 80091a8:	681c      	ldr	r4, [r3, #0]
 80091aa:	685b      	ldr	r3, [r3, #4]
 80091ac:	6053      	str	r3, [r2, #4]
 80091ae:	4421      	add	r1, r4
 80091b0:	6011      	str	r1, [r2, #0]
 80091b2:	e7da      	b.n	800916a <_free_r+0x26>
 80091b4:	d902      	bls.n	80091bc <_free_r+0x78>
 80091b6:	230c      	movs	r3, #12
 80091b8:	6003      	str	r3, [r0, #0]
 80091ba:	e7d6      	b.n	800916a <_free_r+0x26>
 80091bc:	6825      	ldr	r5, [r4, #0]
 80091be:	1961      	adds	r1, r4, r5
 80091c0:	428b      	cmp	r3, r1
 80091c2:	bf04      	itt	eq
 80091c4:	6819      	ldreq	r1, [r3, #0]
 80091c6:	685b      	ldreq	r3, [r3, #4]
 80091c8:	6063      	str	r3, [r4, #4]
 80091ca:	bf04      	itt	eq
 80091cc:	1949      	addeq	r1, r1, r5
 80091ce:	6021      	streq	r1, [r4, #0]
 80091d0:	6054      	str	r4, [r2, #4]
 80091d2:	e7ca      	b.n	800916a <_free_r+0x26>
 80091d4:	b003      	add	sp, #12
 80091d6:	bd30      	pop	{r4, r5, pc}
 80091d8:	200008e8 	.word	0x200008e8

080091dc <sbrk_aligned>:
 80091dc:	b570      	push	{r4, r5, r6, lr}
 80091de:	4e0e      	ldr	r6, [pc, #56]	; (8009218 <sbrk_aligned+0x3c>)
 80091e0:	460c      	mov	r4, r1
 80091e2:	6831      	ldr	r1, [r6, #0]
 80091e4:	4605      	mov	r5, r0
 80091e6:	b911      	cbnz	r1, 80091ee <sbrk_aligned+0x12>
 80091e8:	f000 f88c 	bl	8009304 <_sbrk_r>
 80091ec:	6030      	str	r0, [r6, #0]
 80091ee:	4621      	mov	r1, r4
 80091f0:	4628      	mov	r0, r5
 80091f2:	f000 f887 	bl	8009304 <_sbrk_r>
 80091f6:	1c43      	adds	r3, r0, #1
 80091f8:	d00a      	beq.n	8009210 <sbrk_aligned+0x34>
 80091fa:	1cc4      	adds	r4, r0, #3
 80091fc:	f024 0403 	bic.w	r4, r4, #3
 8009200:	42a0      	cmp	r0, r4
 8009202:	d007      	beq.n	8009214 <sbrk_aligned+0x38>
 8009204:	1a21      	subs	r1, r4, r0
 8009206:	4628      	mov	r0, r5
 8009208:	f000 f87c 	bl	8009304 <_sbrk_r>
 800920c:	3001      	adds	r0, #1
 800920e:	d101      	bne.n	8009214 <sbrk_aligned+0x38>
 8009210:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009214:	4620      	mov	r0, r4
 8009216:	bd70      	pop	{r4, r5, r6, pc}
 8009218:	200008ec 	.word	0x200008ec

0800921c <_malloc_r>:
 800921c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009220:	1ccd      	adds	r5, r1, #3
 8009222:	f025 0503 	bic.w	r5, r5, #3
 8009226:	3508      	adds	r5, #8
 8009228:	2d0c      	cmp	r5, #12
 800922a:	bf38      	it	cc
 800922c:	250c      	movcc	r5, #12
 800922e:	2d00      	cmp	r5, #0
 8009230:	4607      	mov	r7, r0
 8009232:	db01      	blt.n	8009238 <_malloc_r+0x1c>
 8009234:	42a9      	cmp	r1, r5
 8009236:	d905      	bls.n	8009244 <_malloc_r+0x28>
 8009238:	230c      	movs	r3, #12
 800923a:	603b      	str	r3, [r7, #0]
 800923c:	2600      	movs	r6, #0
 800923e:	4630      	mov	r0, r6
 8009240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009244:	4e2e      	ldr	r6, [pc, #184]	; (8009300 <_malloc_r+0xe4>)
 8009246:	f000 f86d 	bl	8009324 <__malloc_lock>
 800924a:	6833      	ldr	r3, [r6, #0]
 800924c:	461c      	mov	r4, r3
 800924e:	bb34      	cbnz	r4, 800929e <_malloc_r+0x82>
 8009250:	4629      	mov	r1, r5
 8009252:	4638      	mov	r0, r7
 8009254:	f7ff ffc2 	bl	80091dc <sbrk_aligned>
 8009258:	1c43      	adds	r3, r0, #1
 800925a:	4604      	mov	r4, r0
 800925c:	d14d      	bne.n	80092fa <_malloc_r+0xde>
 800925e:	6834      	ldr	r4, [r6, #0]
 8009260:	4626      	mov	r6, r4
 8009262:	2e00      	cmp	r6, #0
 8009264:	d140      	bne.n	80092e8 <_malloc_r+0xcc>
 8009266:	6823      	ldr	r3, [r4, #0]
 8009268:	4631      	mov	r1, r6
 800926a:	4638      	mov	r0, r7
 800926c:	eb04 0803 	add.w	r8, r4, r3
 8009270:	f000 f848 	bl	8009304 <_sbrk_r>
 8009274:	4580      	cmp	r8, r0
 8009276:	d13a      	bne.n	80092ee <_malloc_r+0xd2>
 8009278:	6821      	ldr	r1, [r4, #0]
 800927a:	3503      	adds	r5, #3
 800927c:	1a6d      	subs	r5, r5, r1
 800927e:	f025 0503 	bic.w	r5, r5, #3
 8009282:	3508      	adds	r5, #8
 8009284:	2d0c      	cmp	r5, #12
 8009286:	bf38      	it	cc
 8009288:	250c      	movcc	r5, #12
 800928a:	4629      	mov	r1, r5
 800928c:	4638      	mov	r0, r7
 800928e:	f7ff ffa5 	bl	80091dc <sbrk_aligned>
 8009292:	3001      	adds	r0, #1
 8009294:	d02b      	beq.n	80092ee <_malloc_r+0xd2>
 8009296:	6823      	ldr	r3, [r4, #0]
 8009298:	442b      	add	r3, r5
 800929a:	6023      	str	r3, [r4, #0]
 800929c:	e00e      	b.n	80092bc <_malloc_r+0xa0>
 800929e:	6822      	ldr	r2, [r4, #0]
 80092a0:	1b52      	subs	r2, r2, r5
 80092a2:	d41e      	bmi.n	80092e2 <_malloc_r+0xc6>
 80092a4:	2a0b      	cmp	r2, #11
 80092a6:	d916      	bls.n	80092d6 <_malloc_r+0xba>
 80092a8:	1961      	adds	r1, r4, r5
 80092aa:	42a3      	cmp	r3, r4
 80092ac:	6025      	str	r5, [r4, #0]
 80092ae:	bf18      	it	ne
 80092b0:	6059      	strne	r1, [r3, #4]
 80092b2:	6863      	ldr	r3, [r4, #4]
 80092b4:	bf08      	it	eq
 80092b6:	6031      	streq	r1, [r6, #0]
 80092b8:	5162      	str	r2, [r4, r5]
 80092ba:	604b      	str	r3, [r1, #4]
 80092bc:	4638      	mov	r0, r7
 80092be:	f104 060b 	add.w	r6, r4, #11
 80092c2:	f000 f835 	bl	8009330 <__malloc_unlock>
 80092c6:	f026 0607 	bic.w	r6, r6, #7
 80092ca:	1d23      	adds	r3, r4, #4
 80092cc:	1af2      	subs	r2, r6, r3
 80092ce:	d0b6      	beq.n	800923e <_malloc_r+0x22>
 80092d0:	1b9b      	subs	r3, r3, r6
 80092d2:	50a3      	str	r3, [r4, r2]
 80092d4:	e7b3      	b.n	800923e <_malloc_r+0x22>
 80092d6:	6862      	ldr	r2, [r4, #4]
 80092d8:	42a3      	cmp	r3, r4
 80092da:	bf0c      	ite	eq
 80092dc:	6032      	streq	r2, [r6, #0]
 80092de:	605a      	strne	r2, [r3, #4]
 80092e0:	e7ec      	b.n	80092bc <_malloc_r+0xa0>
 80092e2:	4623      	mov	r3, r4
 80092e4:	6864      	ldr	r4, [r4, #4]
 80092e6:	e7b2      	b.n	800924e <_malloc_r+0x32>
 80092e8:	4634      	mov	r4, r6
 80092ea:	6876      	ldr	r6, [r6, #4]
 80092ec:	e7b9      	b.n	8009262 <_malloc_r+0x46>
 80092ee:	230c      	movs	r3, #12
 80092f0:	603b      	str	r3, [r7, #0]
 80092f2:	4638      	mov	r0, r7
 80092f4:	f000 f81c 	bl	8009330 <__malloc_unlock>
 80092f8:	e7a1      	b.n	800923e <_malloc_r+0x22>
 80092fa:	6025      	str	r5, [r4, #0]
 80092fc:	e7de      	b.n	80092bc <_malloc_r+0xa0>
 80092fe:	bf00      	nop
 8009300:	200008e8 	.word	0x200008e8

08009304 <_sbrk_r>:
 8009304:	b538      	push	{r3, r4, r5, lr}
 8009306:	4d06      	ldr	r5, [pc, #24]	; (8009320 <_sbrk_r+0x1c>)
 8009308:	2300      	movs	r3, #0
 800930a:	4604      	mov	r4, r0
 800930c:	4608      	mov	r0, r1
 800930e:	602b      	str	r3, [r5, #0]
 8009310:	f7f7 fae8 	bl	80008e4 <_sbrk>
 8009314:	1c43      	adds	r3, r0, #1
 8009316:	d102      	bne.n	800931e <_sbrk_r+0x1a>
 8009318:	682b      	ldr	r3, [r5, #0]
 800931a:	b103      	cbz	r3, 800931e <_sbrk_r+0x1a>
 800931c:	6023      	str	r3, [r4, #0]
 800931e:	bd38      	pop	{r3, r4, r5, pc}
 8009320:	200008f0 	.word	0x200008f0

08009324 <__malloc_lock>:
 8009324:	4801      	ldr	r0, [pc, #4]	; (800932c <__malloc_lock+0x8>)
 8009326:	f000 b809 	b.w	800933c <__retarget_lock_acquire_recursive>
 800932a:	bf00      	nop
 800932c:	200008f4 	.word	0x200008f4

08009330 <__malloc_unlock>:
 8009330:	4801      	ldr	r0, [pc, #4]	; (8009338 <__malloc_unlock+0x8>)
 8009332:	f000 b804 	b.w	800933e <__retarget_lock_release_recursive>
 8009336:	bf00      	nop
 8009338:	200008f4 	.word	0x200008f4

0800933c <__retarget_lock_acquire_recursive>:
 800933c:	4770      	bx	lr

0800933e <__retarget_lock_release_recursive>:
 800933e:	4770      	bx	lr

08009340 <_init>:
 8009340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009342:	bf00      	nop
 8009344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009346:	bc08      	pop	{r3}
 8009348:	469e      	mov	lr, r3
 800934a:	4770      	bx	lr

0800934c <_fini>:
 800934c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800934e:	bf00      	nop
 8009350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009352:	bc08      	pop	{r3}
 8009354:	469e      	mov	lr, r3
 8009356:	4770      	bx	lr
