
mass_storage_class.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000880c  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  080089c8  080089c8  000189c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a70  08008a70  00020174  2**0
                  CONTENTS
  4 .ARM          00000000  08008a70  08008a70  00020174  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008a70  08008a70  00020174  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a70  08008a70  00018a70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008a74  08008a74  00018a74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000174  20000000  08008a78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00019c78  20000174  08008bec  00020174  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20019dec  08008bec  00029dec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020174  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011991  00000000  00000000  000201a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032f2  00000000  00000000  00031b35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f30  00000000  00000000  00034e28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000da0  00000000  00000000  00035d58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c611  00000000  00000000  00036af8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000138fa  00000000  00000000  00063109  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fb157  00000000  00000000  00076a03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00171b5a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bfc  00000000  00000000  00171bac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	20000174 	.word	0x20000174
 80001d8:	00000000 	.word	0x00000000
 80001dc:	080089b0 	.word	0x080089b0

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000178 	.word	0x20000178
 80001f8:	080089b0 	.word	0x080089b0

080001fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000200:	f000 f915 	bl	800042e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000204:	f000 f805 	bl	8000212 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000208:	f000 f854 	bl	80002b4 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800020c:	f007 fd64 	bl	8007cd8 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000210:	e7fe      	b.n	8000210 <main+0x14>

08000212 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000212:	b580      	push	{r7, lr}
 8000214:	b096      	sub	sp, #88	; 0x58
 8000216:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000218:	f107 0314 	add.w	r3, r7, #20
 800021c:	2244      	movs	r2, #68	; 0x44
 800021e:	2100      	movs	r1, #0
 8000220:	4618      	mov	r0, r3
 8000222:	f008 fbbd 	bl	80089a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000226:	463b      	mov	r3, r7
 8000228:	2200      	movs	r2, #0
 800022a:	601a      	str	r2, [r3, #0]
 800022c:	605a      	str	r2, [r3, #4]
 800022e:	609a      	str	r2, [r3, #8]
 8000230:	60da      	str	r2, [r3, #12]
 8000232:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000234:	2000      	movs	r0, #0
 8000236:	f001 fe43 	bl	8001ec0 <HAL_PWREx_ControlVoltageScaling>
 800023a:	4603      	mov	r3, r0
 800023c:	2b00      	cmp	r3, #0
 800023e:	d001      	beq.n	8000244 <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000240:	f000 f85c 	bl	80002fc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000244:	2321      	movs	r3, #33	; 0x21
 8000246:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000248:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800024c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800024e:	2301      	movs	r3, #1
 8000250:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000252:	2302      	movs	r3, #2
 8000254:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000256:	2303      	movs	r3, #3
 8000258:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800025a:	2301      	movs	r3, #1
 800025c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 800025e:	231e      	movs	r3, #30
 8000260:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000262:	2302      	movs	r3, #2
 8000264:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000266:	2302      	movs	r3, #2
 8000268:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800026a:	2302      	movs	r3, #2
 800026c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800026e:	f107 0314 	add.w	r3, r7, #20
 8000272:	4618      	mov	r0, r3
 8000274:	f001 fed8 	bl	8002028 <HAL_RCC_OscConfig>
 8000278:	4603      	mov	r3, r0
 800027a:	2b00      	cmp	r3, #0
 800027c:	d001      	beq.n	8000282 <SystemClock_Config+0x70>
  {
    Error_Handler();
 800027e:	f000 f83d 	bl	80002fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000282:	230f      	movs	r3, #15
 8000284:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000286:	2303      	movs	r3, #3
 8000288:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800028a:	2300      	movs	r3, #0
 800028c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800028e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000292:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000294:	2300      	movs	r3, #0
 8000296:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000298:	463b      	mov	r3, r7
 800029a:	2105      	movs	r1, #5
 800029c:	4618      	mov	r0, r3
 800029e:	f002 fadd 	bl	800285c <HAL_RCC_ClockConfig>
 80002a2:	4603      	mov	r3, r0
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d001      	beq.n	80002ac <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80002a8:	f000 f828 	bl	80002fc <Error_Handler>
  }
}
 80002ac:	bf00      	nop
 80002ae:	3758      	adds	r7, #88	; 0x58
 80002b0:	46bd      	mov	sp, r7
 80002b2:	bd80      	pop	{r7, pc}

080002b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002b4:	b480      	push	{r7}
 80002b6:	b083      	sub	sp, #12
 80002b8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80002ba:	4b0f      	ldr	r3, [pc, #60]	; (80002f8 <MX_GPIO_Init+0x44>)
 80002bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002be:	4a0e      	ldr	r2, [pc, #56]	; (80002f8 <MX_GPIO_Init+0x44>)
 80002c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002c6:	4b0c      	ldr	r3, [pc, #48]	; (80002f8 <MX_GPIO_Init+0x44>)
 80002c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80002ce:	607b      	str	r3, [r7, #4]
 80002d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002d2:	4b09      	ldr	r3, [pc, #36]	; (80002f8 <MX_GPIO_Init+0x44>)
 80002d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002d6:	4a08      	ldr	r2, [pc, #32]	; (80002f8 <MX_GPIO_Init+0x44>)
 80002d8:	f043 0301 	orr.w	r3, r3, #1
 80002dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002de:	4b06      	ldr	r3, [pc, #24]	; (80002f8 <MX_GPIO_Init+0x44>)
 80002e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002e2:	f003 0301 	and.w	r3, r3, #1
 80002e6:	603b      	str	r3, [r7, #0]
 80002e8:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80002ea:	bf00      	nop
 80002ec:	370c      	adds	r7, #12
 80002ee:	46bd      	mov	sp, r7
 80002f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f4:	4770      	bx	lr
 80002f6:	bf00      	nop
 80002f8:	40021000 	.word	0x40021000

080002fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80002fc:	b480      	push	{r7}
 80002fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000300:	b672      	cpsid	i
}
 8000302:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000304:	e7fe      	b.n	8000304 <Error_Handler+0x8>
	...

08000308 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000308:	b480      	push	{r7}
 800030a:	b083      	sub	sp, #12
 800030c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800030e:	4b0f      	ldr	r3, [pc, #60]	; (800034c <HAL_MspInit+0x44>)
 8000310:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000312:	4a0e      	ldr	r2, [pc, #56]	; (800034c <HAL_MspInit+0x44>)
 8000314:	f043 0301 	orr.w	r3, r3, #1
 8000318:	6613      	str	r3, [r2, #96]	; 0x60
 800031a:	4b0c      	ldr	r3, [pc, #48]	; (800034c <HAL_MspInit+0x44>)
 800031c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800031e:	f003 0301 	and.w	r3, r3, #1
 8000322:	607b      	str	r3, [r7, #4]
 8000324:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000326:	4b09      	ldr	r3, [pc, #36]	; (800034c <HAL_MspInit+0x44>)
 8000328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800032a:	4a08      	ldr	r2, [pc, #32]	; (800034c <HAL_MspInit+0x44>)
 800032c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000330:	6593      	str	r3, [r2, #88]	; 0x58
 8000332:	4b06      	ldr	r3, [pc, #24]	; (800034c <HAL_MspInit+0x44>)
 8000334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000336:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800033a:	603b      	str	r3, [r7, #0]
 800033c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800033e:	bf00      	nop
 8000340:	370c      	adds	r7, #12
 8000342:	46bd      	mov	sp, r7
 8000344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000348:	4770      	bx	lr
 800034a:	bf00      	nop
 800034c:	40021000 	.word	0x40021000

08000350 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000350:	b480      	push	{r7}
 8000352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000354:	e7fe      	b.n	8000354 <NMI_Handler+0x4>

08000356 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000356:	b480      	push	{r7}
 8000358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800035a:	e7fe      	b.n	800035a <HardFault_Handler+0x4>

0800035c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800035c:	b480      	push	{r7}
 800035e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000360:	e7fe      	b.n	8000360 <MemManage_Handler+0x4>

08000362 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000362:	b480      	push	{r7}
 8000364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000366:	e7fe      	b.n	8000366 <BusFault_Handler+0x4>

08000368 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000368:	b480      	push	{r7}
 800036a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800036c:	e7fe      	b.n	800036c <UsageFault_Handler+0x4>

0800036e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800036e:	b480      	push	{r7}
 8000370:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000372:	bf00      	nop
 8000374:	46bd      	mov	sp, r7
 8000376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037a:	4770      	bx	lr

0800037c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800037c:	b480      	push	{r7}
 800037e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000380:	bf00      	nop
 8000382:	46bd      	mov	sp, r7
 8000384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000388:	4770      	bx	lr

0800038a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800038a:	b480      	push	{r7}
 800038c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800038e:	bf00      	nop
 8000390:	46bd      	mov	sp, r7
 8000392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000396:	4770      	bx	lr

08000398 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800039c:	f000 f89c 	bl	80004d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003a0:	bf00      	nop
 80003a2:	bd80      	pop	{r7, pc}

080003a4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80003a8:	4802      	ldr	r0, [pc, #8]	; (80003b4 <OTG_FS_IRQHandler+0x10>)
 80003aa:	f000 fcd0 	bl	8000d4e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80003ae:	bf00      	nop
 80003b0:	bd80      	pop	{r7, pc}
 80003b2:	bf00      	nop
 80003b4:	20019668 	.word	0x20019668

080003b8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80003b8:	b480      	push	{r7}
 80003ba:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80003bc:	4b06      	ldr	r3, [pc, #24]	; (80003d8 <SystemInit+0x20>)
 80003be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80003c2:	4a05      	ldr	r2, [pc, #20]	; (80003d8 <SystemInit+0x20>)
 80003c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80003c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80003cc:	bf00      	nop
 80003ce:	46bd      	mov	sp, r7
 80003d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d4:	4770      	bx	lr
 80003d6:	bf00      	nop
 80003d8:	e000ed00 	.word	0xe000ed00

080003dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80003dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000414 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80003e0:	f7ff ffea 	bl	80003b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003e4:	480c      	ldr	r0, [pc, #48]	; (8000418 <LoopForever+0x6>)
  ldr r1, =_edata
 80003e6:	490d      	ldr	r1, [pc, #52]	; (800041c <LoopForever+0xa>)
  ldr r2, =_sidata
 80003e8:	4a0d      	ldr	r2, [pc, #52]	; (8000420 <LoopForever+0xe>)
  movs r3, #0
 80003ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003ec:	e002      	b.n	80003f4 <LoopCopyDataInit>

080003ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003f2:	3304      	adds	r3, #4

080003f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003f8:	d3f9      	bcc.n	80003ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003fa:	4a0a      	ldr	r2, [pc, #40]	; (8000424 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003fc:	4c0a      	ldr	r4, [pc, #40]	; (8000428 <LoopForever+0x16>)
  movs r3, #0
 80003fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000400:	e001      	b.n	8000406 <LoopFillZerobss>

08000402 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000402:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000404:	3204      	adds	r2, #4

08000406 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000406:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000408:	d3fb      	bcc.n	8000402 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800040a:	f008 fa97 	bl	800893c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800040e:	f7ff fef5 	bl	80001fc <main>

08000412 <LoopForever>:

LoopForever:
    b LoopForever
 8000412:	e7fe      	b.n	8000412 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000414:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000418:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800041c:	20000174 	.word	0x20000174
  ldr r2, =_sidata
 8000420:	08008a78 	.word	0x08008a78
  ldr r2, =_sbss
 8000424:	20000174 	.word	0x20000174
  ldr r4, =_ebss
 8000428:	20019dec 	.word	0x20019dec

0800042c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800042c:	e7fe      	b.n	800042c <ADC1_IRQHandler>

0800042e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800042e:	b580      	push	{r7, lr}
 8000430:	b082      	sub	sp, #8
 8000432:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000434:	2300      	movs	r3, #0
 8000436:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000438:	2003      	movs	r0, #3
 800043a:	f000 f961 	bl	8000700 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800043e:	2000      	movs	r0, #0
 8000440:	f000 f80e 	bl	8000460 <HAL_InitTick>
 8000444:	4603      	mov	r3, r0
 8000446:	2b00      	cmp	r3, #0
 8000448:	d002      	beq.n	8000450 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800044a:	2301      	movs	r3, #1
 800044c:	71fb      	strb	r3, [r7, #7]
 800044e:	e001      	b.n	8000454 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000450:	f7ff ff5a 	bl	8000308 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000454:	79fb      	ldrb	r3, [r7, #7]
}
 8000456:	4618      	mov	r0, r3
 8000458:	3708      	adds	r7, #8
 800045a:	46bd      	mov	sp, r7
 800045c:	bd80      	pop	{r7, pc}
	...

08000460 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b084      	sub	sp, #16
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000468:	2300      	movs	r3, #0
 800046a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800046c:	4b17      	ldr	r3, [pc, #92]	; (80004cc <HAL_InitTick+0x6c>)
 800046e:	781b      	ldrb	r3, [r3, #0]
 8000470:	2b00      	cmp	r3, #0
 8000472:	d023      	beq.n	80004bc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000474:	4b16      	ldr	r3, [pc, #88]	; (80004d0 <HAL_InitTick+0x70>)
 8000476:	681a      	ldr	r2, [r3, #0]
 8000478:	4b14      	ldr	r3, [pc, #80]	; (80004cc <HAL_InitTick+0x6c>)
 800047a:	781b      	ldrb	r3, [r3, #0]
 800047c:	4619      	mov	r1, r3
 800047e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000482:	fbb3 f3f1 	udiv	r3, r3, r1
 8000486:	fbb2 f3f3 	udiv	r3, r2, r3
 800048a:	4618      	mov	r0, r3
 800048c:	f000 f96d 	bl	800076a <HAL_SYSTICK_Config>
 8000490:	4603      	mov	r3, r0
 8000492:	2b00      	cmp	r3, #0
 8000494:	d10f      	bne.n	80004b6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	2b0f      	cmp	r3, #15
 800049a:	d809      	bhi.n	80004b0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800049c:	2200      	movs	r2, #0
 800049e:	6879      	ldr	r1, [r7, #4]
 80004a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80004a4:	f000 f937 	bl	8000716 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80004a8:	4a0a      	ldr	r2, [pc, #40]	; (80004d4 <HAL_InitTick+0x74>)
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	6013      	str	r3, [r2, #0]
 80004ae:	e007      	b.n	80004c0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80004b0:	2301      	movs	r3, #1
 80004b2:	73fb      	strb	r3, [r7, #15]
 80004b4:	e004      	b.n	80004c0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80004b6:	2301      	movs	r3, #1
 80004b8:	73fb      	strb	r3, [r7, #15]
 80004ba:	e001      	b.n	80004c0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80004bc:	2301      	movs	r3, #1
 80004be:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80004c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80004c2:	4618      	mov	r0, r3
 80004c4:	3710      	adds	r7, #16
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bd80      	pop	{r7, pc}
 80004ca:	bf00      	nop
 80004cc:	20000008 	.word	0x20000008
 80004d0:	20000000 	.word	0x20000000
 80004d4:	20000004 	.word	0x20000004

080004d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80004dc:	4b06      	ldr	r3, [pc, #24]	; (80004f8 <HAL_IncTick+0x20>)
 80004de:	781b      	ldrb	r3, [r3, #0]
 80004e0:	461a      	mov	r2, r3
 80004e2:	4b06      	ldr	r3, [pc, #24]	; (80004fc <HAL_IncTick+0x24>)
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	4413      	add	r3, r2
 80004e8:	4a04      	ldr	r2, [pc, #16]	; (80004fc <HAL_IncTick+0x24>)
 80004ea:	6013      	str	r3, [r2, #0]
}
 80004ec:	bf00      	nop
 80004ee:	46bd      	mov	sp, r7
 80004f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop
 80004f8:	20000008 	.word	0x20000008
 80004fc:	20000190 	.word	0x20000190

08000500 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0
  return uwTick;
 8000504:	4b03      	ldr	r3, [pc, #12]	; (8000514 <HAL_GetTick+0x14>)
 8000506:	681b      	ldr	r3, [r3, #0]
}
 8000508:	4618      	mov	r0, r3
 800050a:	46bd      	mov	sp, r7
 800050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop
 8000514:	20000190 	.word	0x20000190

08000518 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b084      	sub	sp, #16
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000520:	f7ff ffee 	bl	8000500 <HAL_GetTick>
 8000524:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800052a:	68fb      	ldr	r3, [r7, #12]
 800052c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000530:	d005      	beq.n	800053e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000532:	4b0a      	ldr	r3, [pc, #40]	; (800055c <HAL_Delay+0x44>)
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	461a      	mov	r2, r3
 8000538:	68fb      	ldr	r3, [r7, #12]
 800053a:	4413      	add	r3, r2
 800053c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800053e:	bf00      	nop
 8000540:	f7ff ffde 	bl	8000500 <HAL_GetTick>
 8000544:	4602      	mov	r2, r0
 8000546:	68bb      	ldr	r3, [r7, #8]
 8000548:	1ad3      	subs	r3, r2, r3
 800054a:	68fa      	ldr	r2, [r7, #12]
 800054c:	429a      	cmp	r2, r3
 800054e:	d8f7      	bhi.n	8000540 <HAL_Delay+0x28>
  {
  }
}
 8000550:	bf00      	nop
 8000552:	bf00      	nop
 8000554:	3710      	adds	r7, #16
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	20000008 	.word	0x20000008

08000560 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000560:	b480      	push	{r7}
 8000562:	b085      	sub	sp, #20
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	f003 0307 	and.w	r3, r3, #7
 800056e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000570:	4b0c      	ldr	r3, [pc, #48]	; (80005a4 <__NVIC_SetPriorityGrouping+0x44>)
 8000572:	68db      	ldr	r3, [r3, #12]
 8000574:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000576:	68ba      	ldr	r2, [r7, #8]
 8000578:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800057c:	4013      	ands	r3, r2
 800057e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000584:	68bb      	ldr	r3, [r7, #8]
 8000586:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000588:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800058c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000590:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000592:	4a04      	ldr	r2, [pc, #16]	; (80005a4 <__NVIC_SetPriorityGrouping+0x44>)
 8000594:	68bb      	ldr	r3, [r7, #8]
 8000596:	60d3      	str	r3, [r2, #12]
}
 8000598:	bf00      	nop
 800059a:	3714      	adds	r7, #20
 800059c:	46bd      	mov	sp, r7
 800059e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a2:	4770      	bx	lr
 80005a4:	e000ed00 	.word	0xe000ed00

080005a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005ac:	4b04      	ldr	r3, [pc, #16]	; (80005c0 <__NVIC_GetPriorityGrouping+0x18>)
 80005ae:	68db      	ldr	r3, [r3, #12]
 80005b0:	0a1b      	lsrs	r3, r3, #8
 80005b2:	f003 0307 	and.w	r3, r3, #7
}
 80005b6:	4618      	mov	r0, r3
 80005b8:	46bd      	mov	sp, r7
 80005ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005be:	4770      	bx	lr
 80005c0:	e000ed00 	.word	0xe000ed00

080005c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b083      	sub	sp, #12
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	4603      	mov	r3, r0
 80005cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	db0b      	blt.n	80005ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005d6:	79fb      	ldrb	r3, [r7, #7]
 80005d8:	f003 021f 	and.w	r2, r3, #31
 80005dc:	4907      	ldr	r1, [pc, #28]	; (80005fc <__NVIC_EnableIRQ+0x38>)
 80005de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005e2:	095b      	lsrs	r3, r3, #5
 80005e4:	2001      	movs	r0, #1
 80005e6:	fa00 f202 	lsl.w	r2, r0, r2
 80005ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80005ee:	bf00      	nop
 80005f0:	370c      	adds	r7, #12
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop
 80005fc:	e000e100 	.word	0xe000e100

08000600 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000600:	b480      	push	{r7}
 8000602:	b083      	sub	sp, #12
 8000604:	af00      	add	r7, sp, #0
 8000606:	4603      	mov	r3, r0
 8000608:	6039      	str	r1, [r7, #0]
 800060a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800060c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000610:	2b00      	cmp	r3, #0
 8000612:	db0a      	blt.n	800062a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000614:	683b      	ldr	r3, [r7, #0]
 8000616:	b2da      	uxtb	r2, r3
 8000618:	490c      	ldr	r1, [pc, #48]	; (800064c <__NVIC_SetPriority+0x4c>)
 800061a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800061e:	0112      	lsls	r2, r2, #4
 8000620:	b2d2      	uxtb	r2, r2
 8000622:	440b      	add	r3, r1
 8000624:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000628:	e00a      	b.n	8000640 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800062a:	683b      	ldr	r3, [r7, #0]
 800062c:	b2da      	uxtb	r2, r3
 800062e:	4908      	ldr	r1, [pc, #32]	; (8000650 <__NVIC_SetPriority+0x50>)
 8000630:	79fb      	ldrb	r3, [r7, #7]
 8000632:	f003 030f 	and.w	r3, r3, #15
 8000636:	3b04      	subs	r3, #4
 8000638:	0112      	lsls	r2, r2, #4
 800063a:	b2d2      	uxtb	r2, r2
 800063c:	440b      	add	r3, r1
 800063e:	761a      	strb	r2, [r3, #24]
}
 8000640:	bf00      	nop
 8000642:	370c      	adds	r7, #12
 8000644:	46bd      	mov	sp, r7
 8000646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064a:	4770      	bx	lr
 800064c:	e000e100 	.word	0xe000e100
 8000650:	e000ed00 	.word	0xe000ed00

08000654 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000654:	b480      	push	{r7}
 8000656:	b089      	sub	sp, #36	; 0x24
 8000658:	af00      	add	r7, sp, #0
 800065a:	60f8      	str	r0, [r7, #12]
 800065c:	60b9      	str	r1, [r7, #8]
 800065e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	f003 0307 	and.w	r3, r3, #7
 8000666:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000668:	69fb      	ldr	r3, [r7, #28]
 800066a:	f1c3 0307 	rsb	r3, r3, #7
 800066e:	2b04      	cmp	r3, #4
 8000670:	bf28      	it	cs
 8000672:	2304      	movcs	r3, #4
 8000674:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000676:	69fb      	ldr	r3, [r7, #28]
 8000678:	3304      	adds	r3, #4
 800067a:	2b06      	cmp	r3, #6
 800067c:	d902      	bls.n	8000684 <NVIC_EncodePriority+0x30>
 800067e:	69fb      	ldr	r3, [r7, #28]
 8000680:	3b03      	subs	r3, #3
 8000682:	e000      	b.n	8000686 <NVIC_EncodePriority+0x32>
 8000684:	2300      	movs	r3, #0
 8000686:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000688:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800068c:	69bb      	ldr	r3, [r7, #24]
 800068e:	fa02 f303 	lsl.w	r3, r2, r3
 8000692:	43da      	mvns	r2, r3
 8000694:	68bb      	ldr	r3, [r7, #8]
 8000696:	401a      	ands	r2, r3
 8000698:	697b      	ldr	r3, [r7, #20]
 800069a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800069c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80006a0:	697b      	ldr	r3, [r7, #20]
 80006a2:	fa01 f303 	lsl.w	r3, r1, r3
 80006a6:	43d9      	mvns	r1, r3
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006ac:	4313      	orrs	r3, r2
         );
}
 80006ae:	4618      	mov	r0, r3
 80006b0:	3724      	adds	r7, #36	; 0x24
 80006b2:	46bd      	mov	sp, r7
 80006b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b8:	4770      	bx	lr
	...

080006bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	3b01      	subs	r3, #1
 80006c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80006cc:	d301      	bcc.n	80006d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80006ce:	2301      	movs	r3, #1
 80006d0:	e00f      	b.n	80006f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006d2:	4a0a      	ldr	r2, [pc, #40]	; (80006fc <SysTick_Config+0x40>)
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	3b01      	subs	r3, #1
 80006d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80006da:	210f      	movs	r1, #15
 80006dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80006e0:	f7ff ff8e 	bl	8000600 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006e4:	4b05      	ldr	r3, [pc, #20]	; (80006fc <SysTick_Config+0x40>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006ea:	4b04      	ldr	r3, [pc, #16]	; (80006fc <SysTick_Config+0x40>)
 80006ec:	2207      	movs	r2, #7
 80006ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80006f0:	2300      	movs	r3, #0
}
 80006f2:	4618      	mov	r0, r3
 80006f4:	3708      	adds	r7, #8
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	e000e010 	.word	0xe000e010

08000700 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000708:	6878      	ldr	r0, [r7, #4]
 800070a:	f7ff ff29 	bl	8000560 <__NVIC_SetPriorityGrouping>
}
 800070e:	bf00      	nop
 8000710:	3708      	adds	r7, #8
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}

08000716 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000716:	b580      	push	{r7, lr}
 8000718:	b086      	sub	sp, #24
 800071a:	af00      	add	r7, sp, #0
 800071c:	4603      	mov	r3, r0
 800071e:	60b9      	str	r1, [r7, #8]
 8000720:	607a      	str	r2, [r7, #4]
 8000722:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000724:	2300      	movs	r3, #0
 8000726:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000728:	f7ff ff3e 	bl	80005a8 <__NVIC_GetPriorityGrouping>
 800072c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800072e:	687a      	ldr	r2, [r7, #4]
 8000730:	68b9      	ldr	r1, [r7, #8]
 8000732:	6978      	ldr	r0, [r7, #20]
 8000734:	f7ff ff8e 	bl	8000654 <NVIC_EncodePriority>
 8000738:	4602      	mov	r2, r0
 800073a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800073e:	4611      	mov	r1, r2
 8000740:	4618      	mov	r0, r3
 8000742:	f7ff ff5d 	bl	8000600 <__NVIC_SetPriority>
}
 8000746:	bf00      	nop
 8000748:	3718      	adds	r7, #24
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}

0800074e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800074e:	b580      	push	{r7, lr}
 8000750:	b082      	sub	sp, #8
 8000752:	af00      	add	r7, sp, #0
 8000754:	4603      	mov	r3, r0
 8000756:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000758:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800075c:	4618      	mov	r0, r3
 800075e:	f7ff ff31 	bl	80005c4 <__NVIC_EnableIRQ>
}
 8000762:	bf00      	nop
 8000764:	3708      	adds	r7, #8
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}

0800076a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800076a:	b580      	push	{r7, lr}
 800076c:	b082      	sub	sp, #8
 800076e:	af00      	add	r7, sp, #0
 8000770:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000772:	6878      	ldr	r0, [r7, #4]
 8000774:	f7ff ffa2 	bl	80006bc <SysTick_Config>
 8000778:	4603      	mov	r3, r0
}
 800077a:	4618      	mov	r0, r3
 800077c:	3708      	adds	r7, #8
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
	...

08000784 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000784:	b480      	push	{r7}
 8000786:	b087      	sub	sp, #28
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
 800078c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800078e:	2300      	movs	r3, #0
 8000790:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000792:	e166      	b.n	8000a62 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000794:	683b      	ldr	r3, [r7, #0]
 8000796:	681a      	ldr	r2, [r3, #0]
 8000798:	2101      	movs	r1, #1
 800079a:	697b      	ldr	r3, [r7, #20]
 800079c:	fa01 f303 	lsl.w	r3, r1, r3
 80007a0:	4013      	ands	r3, r2
 80007a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	f000 8158 	beq.w	8000a5c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80007ac:	683b      	ldr	r3, [r7, #0]
 80007ae:	685b      	ldr	r3, [r3, #4]
 80007b0:	f003 0303 	and.w	r3, r3, #3
 80007b4:	2b01      	cmp	r3, #1
 80007b6:	d005      	beq.n	80007c4 <HAL_GPIO_Init+0x40>
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	685b      	ldr	r3, [r3, #4]
 80007bc:	f003 0303 	and.w	r3, r3, #3
 80007c0:	2b02      	cmp	r3, #2
 80007c2:	d130      	bne.n	8000826 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	689b      	ldr	r3, [r3, #8]
 80007c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80007ca:	697b      	ldr	r3, [r7, #20]
 80007cc:	005b      	lsls	r3, r3, #1
 80007ce:	2203      	movs	r2, #3
 80007d0:	fa02 f303 	lsl.w	r3, r2, r3
 80007d4:	43db      	mvns	r3, r3
 80007d6:	693a      	ldr	r2, [r7, #16]
 80007d8:	4013      	ands	r3, r2
 80007da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80007dc:	683b      	ldr	r3, [r7, #0]
 80007de:	68da      	ldr	r2, [r3, #12]
 80007e0:	697b      	ldr	r3, [r7, #20]
 80007e2:	005b      	lsls	r3, r3, #1
 80007e4:	fa02 f303 	lsl.w	r3, r2, r3
 80007e8:	693a      	ldr	r2, [r7, #16]
 80007ea:	4313      	orrs	r3, r2
 80007ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	693a      	ldr	r2, [r7, #16]
 80007f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	685b      	ldr	r3, [r3, #4]
 80007f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80007fa:	2201      	movs	r2, #1
 80007fc:	697b      	ldr	r3, [r7, #20]
 80007fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000802:	43db      	mvns	r3, r3
 8000804:	693a      	ldr	r2, [r7, #16]
 8000806:	4013      	ands	r3, r2
 8000808:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800080a:	683b      	ldr	r3, [r7, #0]
 800080c:	685b      	ldr	r3, [r3, #4]
 800080e:	091b      	lsrs	r3, r3, #4
 8000810:	f003 0201 	and.w	r2, r3, #1
 8000814:	697b      	ldr	r3, [r7, #20]
 8000816:	fa02 f303 	lsl.w	r3, r2, r3
 800081a:	693a      	ldr	r2, [r7, #16]
 800081c:	4313      	orrs	r3, r2
 800081e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	693a      	ldr	r2, [r7, #16]
 8000824:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000826:	683b      	ldr	r3, [r7, #0]
 8000828:	685b      	ldr	r3, [r3, #4]
 800082a:	f003 0303 	and.w	r3, r3, #3
 800082e:	2b03      	cmp	r3, #3
 8000830:	d017      	beq.n	8000862 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	68db      	ldr	r3, [r3, #12]
 8000836:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000838:	697b      	ldr	r3, [r7, #20]
 800083a:	005b      	lsls	r3, r3, #1
 800083c:	2203      	movs	r2, #3
 800083e:	fa02 f303 	lsl.w	r3, r2, r3
 8000842:	43db      	mvns	r3, r3
 8000844:	693a      	ldr	r2, [r7, #16]
 8000846:	4013      	ands	r3, r2
 8000848:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	689a      	ldr	r2, [r3, #8]
 800084e:	697b      	ldr	r3, [r7, #20]
 8000850:	005b      	lsls	r3, r3, #1
 8000852:	fa02 f303 	lsl.w	r3, r2, r3
 8000856:	693a      	ldr	r2, [r7, #16]
 8000858:	4313      	orrs	r3, r2
 800085a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	693a      	ldr	r2, [r7, #16]
 8000860:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000862:	683b      	ldr	r3, [r7, #0]
 8000864:	685b      	ldr	r3, [r3, #4]
 8000866:	f003 0303 	and.w	r3, r3, #3
 800086a:	2b02      	cmp	r3, #2
 800086c:	d123      	bne.n	80008b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800086e:	697b      	ldr	r3, [r7, #20]
 8000870:	08da      	lsrs	r2, r3, #3
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	3208      	adds	r2, #8
 8000876:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800087a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800087c:	697b      	ldr	r3, [r7, #20]
 800087e:	f003 0307 	and.w	r3, r3, #7
 8000882:	009b      	lsls	r3, r3, #2
 8000884:	220f      	movs	r2, #15
 8000886:	fa02 f303 	lsl.w	r3, r2, r3
 800088a:	43db      	mvns	r3, r3
 800088c:	693a      	ldr	r2, [r7, #16]
 800088e:	4013      	ands	r3, r2
 8000890:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	691a      	ldr	r2, [r3, #16]
 8000896:	697b      	ldr	r3, [r7, #20]
 8000898:	f003 0307 	and.w	r3, r3, #7
 800089c:	009b      	lsls	r3, r3, #2
 800089e:	fa02 f303 	lsl.w	r3, r2, r3
 80008a2:	693a      	ldr	r2, [r7, #16]
 80008a4:	4313      	orrs	r3, r2
 80008a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	08da      	lsrs	r2, r3, #3
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	3208      	adds	r2, #8
 80008b0:	6939      	ldr	r1, [r7, #16]
 80008b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80008bc:	697b      	ldr	r3, [r7, #20]
 80008be:	005b      	lsls	r3, r3, #1
 80008c0:	2203      	movs	r2, #3
 80008c2:	fa02 f303 	lsl.w	r3, r2, r3
 80008c6:	43db      	mvns	r3, r3
 80008c8:	693a      	ldr	r2, [r7, #16]
 80008ca:	4013      	ands	r3, r2
 80008cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	685b      	ldr	r3, [r3, #4]
 80008d2:	f003 0203 	and.w	r2, r3, #3
 80008d6:	697b      	ldr	r3, [r7, #20]
 80008d8:	005b      	lsls	r3, r3, #1
 80008da:	fa02 f303 	lsl.w	r3, r2, r3
 80008de:	693a      	ldr	r2, [r7, #16]
 80008e0:	4313      	orrs	r3, r2
 80008e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	693a      	ldr	r2, [r7, #16]
 80008e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	685b      	ldr	r3, [r3, #4]
 80008ee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	f000 80b2 	beq.w	8000a5c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008f8:	4b61      	ldr	r3, [pc, #388]	; (8000a80 <HAL_GPIO_Init+0x2fc>)
 80008fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008fc:	4a60      	ldr	r2, [pc, #384]	; (8000a80 <HAL_GPIO_Init+0x2fc>)
 80008fe:	f043 0301 	orr.w	r3, r3, #1
 8000902:	6613      	str	r3, [r2, #96]	; 0x60
 8000904:	4b5e      	ldr	r3, [pc, #376]	; (8000a80 <HAL_GPIO_Init+0x2fc>)
 8000906:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000908:	f003 0301 	and.w	r3, r3, #1
 800090c:	60bb      	str	r3, [r7, #8]
 800090e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000910:	4a5c      	ldr	r2, [pc, #368]	; (8000a84 <HAL_GPIO_Init+0x300>)
 8000912:	697b      	ldr	r3, [r7, #20]
 8000914:	089b      	lsrs	r3, r3, #2
 8000916:	3302      	adds	r3, #2
 8000918:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800091c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800091e:	697b      	ldr	r3, [r7, #20]
 8000920:	f003 0303 	and.w	r3, r3, #3
 8000924:	009b      	lsls	r3, r3, #2
 8000926:	220f      	movs	r2, #15
 8000928:	fa02 f303 	lsl.w	r3, r2, r3
 800092c:	43db      	mvns	r3, r3
 800092e:	693a      	ldr	r2, [r7, #16]
 8000930:	4013      	ands	r3, r2
 8000932:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800093a:	d02b      	beq.n	8000994 <HAL_GPIO_Init+0x210>
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	4a52      	ldr	r2, [pc, #328]	; (8000a88 <HAL_GPIO_Init+0x304>)
 8000940:	4293      	cmp	r3, r2
 8000942:	d025      	beq.n	8000990 <HAL_GPIO_Init+0x20c>
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	4a51      	ldr	r2, [pc, #324]	; (8000a8c <HAL_GPIO_Init+0x308>)
 8000948:	4293      	cmp	r3, r2
 800094a:	d01f      	beq.n	800098c <HAL_GPIO_Init+0x208>
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	4a50      	ldr	r2, [pc, #320]	; (8000a90 <HAL_GPIO_Init+0x30c>)
 8000950:	4293      	cmp	r3, r2
 8000952:	d019      	beq.n	8000988 <HAL_GPIO_Init+0x204>
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	4a4f      	ldr	r2, [pc, #316]	; (8000a94 <HAL_GPIO_Init+0x310>)
 8000958:	4293      	cmp	r3, r2
 800095a:	d013      	beq.n	8000984 <HAL_GPIO_Init+0x200>
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	4a4e      	ldr	r2, [pc, #312]	; (8000a98 <HAL_GPIO_Init+0x314>)
 8000960:	4293      	cmp	r3, r2
 8000962:	d00d      	beq.n	8000980 <HAL_GPIO_Init+0x1fc>
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	4a4d      	ldr	r2, [pc, #308]	; (8000a9c <HAL_GPIO_Init+0x318>)
 8000968:	4293      	cmp	r3, r2
 800096a:	d007      	beq.n	800097c <HAL_GPIO_Init+0x1f8>
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	4a4c      	ldr	r2, [pc, #304]	; (8000aa0 <HAL_GPIO_Init+0x31c>)
 8000970:	4293      	cmp	r3, r2
 8000972:	d101      	bne.n	8000978 <HAL_GPIO_Init+0x1f4>
 8000974:	2307      	movs	r3, #7
 8000976:	e00e      	b.n	8000996 <HAL_GPIO_Init+0x212>
 8000978:	2308      	movs	r3, #8
 800097a:	e00c      	b.n	8000996 <HAL_GPIO_Init+0x212>
 800097c:	2306      	movs	r3, #6
 800097e:	e00a      	b.n	8000996 <HAL_GPIO_Init+0x212>
 8000980:	2305      	movs	r3, #5
 8000982:	e008      	b.n	8000996 <HAL_GPIO_Init+0x212>
 8000984:	2304      	movs	r3, #4
 8000986:	e006      	b.n	8000996 <HAL_GPIO_Init+0x212>
 8000988:	2303      	movs	r3, #3
 800098a:	e004      	b.n	8000996 <HAL_GPIO_Init+0x212>
 800098c:	2302      	movs	r3, #2
 800098e:	e002      	b.n	8000996 <HAL_GPIO_Init+0x212>
 8000990:	2301      	movs	r3, #1
 8000992:	e000      	b.n	8000996 <HAL_GPIO_Init+0x212>
 8000994:	2300      	movs	r3, #0
 8000996:	697a      	ldr	r2, [r7, #20]
 8000998:	f002 0203 	and.w	r2, r2, #3
 800099c:	0092      	lsls	r2, r2, #2
 800099e:	4093      	lsls	r3, r2
 80009a0:	693a      	ldr	r2, [r7, #16]
 80009a2:	4313      	orrs	r3, r2
 80009a4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80009a6:	4937      	ldr	r1, [pc, #220]	; (8000a84 <HAL_GPIO_Init+0x300>)
 80009a8:	697b      	ldr	r3, [r7, #20]
 80009aa:	089b      	lsrs	r3, r3, #2
 80009ac:	3302      	adds	r3, #2
 80009ae:	693a      	ldr	r2, [r7, #16]
 80009b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80009b4:	4b3b      	ldr	r3, [pc, #236]	; (8000aa4 <HAL_GPIO_Init+0x320>)
 80009b6:	689b      	ldr	r3, [r3, #8]
 80009b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	43db      	mvns	r3, r3
 80009be:	693a      	ldr	r2, [r7, #16]
 80009c0:	4013      	ands	r3, r2
 80009c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	685b      	ldr	r3, [r3, #4]
 80009c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d003      	beq.n	80009d8 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80009d0:	693a      	ldr	r2, [r7, #16]
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	4313      	orrs	r3, r2
 80009d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80009d8:	4a32      	ldr	r2, [pc, #200]	; (8000aa4 <HAL_GPIO_Init+0x320>)
 80009da:	693b      	ldr	r3, [r7, #16]
 80009dc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80009de:	4b31      	ldr	r3, [pc, #196]	; (8000aa4 <HAL_GPIO_Init+0x320>)
 80009e0:	68db      	ldr	r3, [r3, #12]
 80009e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	43db      	mvns	r3, r3
 80009e8:	693a      	ldr	r2, [r7, #16]
 80009ea:	4013      	ands	r3, r2
 80009ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	685b      	ldr	r3, [r3, #4]
 80009f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d003      	beq.n	8000a02 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80009fa:	693a      	ldr	r2, [r7, #16]
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	4313      	orrs	r3, r2
 8000a00:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000a02:	4a28      	ldr	r2, [pc, #160]	; (8000aa4 <HAL_GPIO_Init+0x320>)
 8000a04:	693b      	ldr	r3, [r7, #16]
 8000a06:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000a08:	4b26      	ldr	r3, [pc, #152]	; (8000aa4 <HAL_GPIO_Init+0x320>)
 8000a0a:	685b      	ldr	r3, [r3, #4]
 8000a0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	43db      	mvns	r3, r3
 8000a12:	693a      	ldr	r2, [r7, #16]
 8000a14:	4013      	ands	r3, r2
 8000a16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	685b      	ldr	r3, [r3, #4]
 8000a1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d003      	beq.n	8000a2c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8000a24:	693a      	ldr	r2, [r7, #16]
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	4313      	orrs	r3, r2
 8000a2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000a2c:	4a1d      	ldr	r2, [pc, #116]	; (8000aa4 <HAL_GPIO_Init+0x320>)
 8000a2e:	693b      	ldr	r3, [r7, #16]
 8000a30:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000a32:	4b1c      	ldr	r3, [pc, #112]	; (8000aa4 <HAL_GPIO_Init+0x320>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	43db      	mvns	r3, r3
 8000a3c:	693a      	ldr	r2, [r7, #16]
 8000a3e:	4013      	ands	r3, r2
 8000a40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	685b      	ldr	r3, [r3, #4]
 8000a46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d003      	beq.n	8000a56 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8000a4e:	693a      	ldr	r2, [r7, #16]
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	4313      	orrs	r3, r2
 8000a54:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000a56:	4a13      	ldr	r2, [pc, #76]	; (8000aa4 <HAL_GPIO_Init+0x320>)
 8000a58:	693b      	ldr	r3, [r7, #16]
 8000a5a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	3301      	adds	r3, #1
 8000a60:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	681a      	ldr	r2, [r3, #0]
 8000a66:	697b      	ldr	r3, [r7, #20]
 8000a68:	fa22 f303 	lsr.w	r3, r2, r3
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	f47f ae91 	bne.w	8000794 <HAL_GPIO_Init+0x10>
  }
}
 8000a72:	bf00      	nop
 8000a74:	bf00      	nop
 8000a76:	371c      	adds	r7, #28
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr
 8000a80:	40021000 	.word	0x40021000
 8000a84:	40010000 	.word	0x40010000
 8000a88:	48000400 	.word	0x48000400
 8000a8c:	48000800 	.word	0x48000800
 8000a90:	48000c00 	.word	0x48000c00
 8000a94:	48001000 	.word	0x48001000
 8000a98:	48001400 	.word	0x48001400
 8000a9c:	48001800 	.word	0x48001800
 8000aa0:	48001c00 	.word	0x48001c00
 8000aa4:	40010400 	.word	0x40010400

08000aa8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000aaa:	b08f      	sub	sp, #60	; 0x3c
 8000aac:	af0a      	add	r7, sp, #40	; 0x28
 8000aae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d101      	bne.n	8000aba <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	e116      	b.n	8000ce8 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8000ac6:	b2db      	uxtb	r3, r3
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d106      	bne.n	8000ada <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	2200      	movs	r2, #0
 8000ad0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000ad4:	6878      	ldr	r0, [r7, #4]
 8000ad6:	f007 fac9 	bl	800806c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	2203      	movs	r2, #3
 8000ade:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000ae2:	68bb      	ldr	r3, [r7, #8]
 8000ae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ae6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d102      	bne.n	8000af4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	2200      	movs	r2, #0
 8000af2:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4618      	mov	r0, r3
 8000afa:	f002 ff32 	bl	8003962 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	603b      	str	r3, [r7, #0]
 8000b04:	687e      	ldr	r6, [r7, #4]
 8000b06:	466d      	mov	r5, sp
 8000b08:	f106 0410 	add.w	r4, r6, #16
 8000b0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b14:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000b18:	e885 0003 	stmia.w	r5, {r0, r1}
 8000b1c:	1d33      	adds	r3, r6, #4
 8000b1e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000b20:	6838      	ldr	r0, [r7, #0]
 8000b22:	f002 fe45 	bl	80037b0 <USB_CoreInit>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d005      	beq.n	8000b38 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	2202      	movs	r2, #2
 8000b30:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8000b34:	2301      	movs	r3, #1
 8000b36:	e0d7      	b.n	8000ce8 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f002 ff20 	bl	8003984 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000b44:	2300      	movs	r3, #0
 8000b46:	73fb      	strb	r3, [r7, #15]
 8000b48:	e04a      	b.n	8000be0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000b4a:	7bfa      	ldrb	r2, [r7, #15]
 8000b4c:	6879      	ldr	r1, [r7, #4]
 8000b4e:	4613      	mov	r3, r2
 8000b50:	00db      	lsls	r3, r3, #3
 8000b52:	4413      	add	r3, r2
 8000b54:	009b      	lsls	r3, r3, #2
 8000b56:	440b      	add	r3, r1
 8000b58:	333d      	adds	r3, #61	; 0x3d
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000b5e:	7bfa      	ldrb	r2, [r7, #15]
 8000b60:	6879      	ldr	r1, [r7, #4]
 8000b62:	4613      	mov	r3, r2
 8000b64:	00db      	lsls	r3, r3, #3
 8000b66:	4413      	add	r3, r2
 8000b68:	009b      	lsls	r3, r3, #2
 8000b6a:	440b      	add	r3, r1
 8000b6c:	333c      	adds	r3, #60	; 0x3c
 8000b6e:	7bfa      	ldrb	r2, [r7, #15]
 8000b70:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000b72:	7bfa      	ldrb	r2, [r7, #15]
 8000b74:	7bfb      	ldrb	r3, [r7, #15]
 8000b76:	b298      	uxth	r0, r3
 8000b78:	6879      	ldr	r1, [r7, #4]
 8000b7a:	4613      	mov	r3, r2
 8000b7c:	00db      	lsls	r3, r3, #3
 8000b7e:	4413      	add	r3, r2
 8000b80:	009b      	lsls	r3, r3, #2
 8000b82:	440b      	add	r3, r1
 8000b84:	3344      	adds	r3, #68	; 0x44
 8000b86:	4602      	mov	r2, r0
 8000b88:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000b8a:	7bfa      	ldrb	r2, [r7, #15]
 8000b8c:	6879      	ldr	r1, [r7, #4]
 8000b8e:	4613      	mov	r3, r2
 8000b90:	00db      	lsls	r3, r3, #3
 8000b92:	4413      	add	r3, r2
 8000b94:	009b      	lsls	r3, r3, #2
 8000b96:	440b      	add	r3, r1
 8000b98:	3340      	adds	r3, #64	; 0x40
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000b9e:	7bfa      	ldrb	r2, [r7, #15]
 8000ba0:	6879      	ldr	r1, [r7, #4]
 8000ba2:	4613      	mov	r3, r2
 8000ba4:	00db      	lsls	r3, r3, #3
 8000ba6:	4413      	add	r3, r2
 8000ba8:	009b      	lsls	r3, r3, #2
 8000baa:	440b      	add	r3, r1
 8000bac:	3348      	adds	r3, #72	; 0x48
 8000bae:	2200      	movs	r2, #0
 8000bb0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000bb2:	7bfa      	ldrb	r2, [r7, #15]
 8000bb4:	6879      	ldr	r1, [r7, #4]
 8000bb6:	4613      	mov	r3, r2
 8000bb8:	00db      	lsls	r3, r3, #3
 8000bba:	4413      	add	r3, r2
 8000bbc:	009b      	lsls	r3, r3, #2
 8000bbe:	440b      	add	r3, r1
 8000bc0:	334c      	adds	r3, #76	; 0x4c
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000bc6:	7bfa      	ldrb	r2, [r7, #15]
 8000bc8:	6879      	ldr	r1, [r7, #4]
 8000bca:	4613      	mov	r3, r2
 8000bcc:	00db      	lsls	r3, r3, #3
 8000bce:	4413      	add	r3, r2
 8000bd0:	009b      	lsls	r3, r3, #2
 8000bd2:	440b      	add	r3, r1
 8000bd4:	3354      	adds	r3, #84	; 0x54
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000bda:	7bfb      	ldrb	r3, [r7, #15]
 8000bdc:	3301      	adds	r3, #1
 8000bde:	73fb      	strb	r3, [r7, #15]
 8000be0:	7bfa      	ldrb	r2, [r7, #15]
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	685b      	ldr	r3, [r3, #4]
 8000be6:	429a      	cmp	r2, r3
 8000be8:	d3af      	bcc.n	8000b4a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000bea:	2300      	movs	r3, #0
 8000bec:	73fb      	strb	r3, [r7, #15]
 8000bee:	e044      	b.n	8000c7a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000bf0:	7bfa      	ldrb	r2, [r7, #15]
 8000bf2:	6879      	ldr	r1, [r7, #4]
 8000bf4:	4613      	mov	r3, r2
 8000bf6:	00db      	lsls	r3, r3, #3
 8000bf8:	4413      	add	r3, r2
 8000bfa:	009b      	lsls	r3, r3, #2
 8000bfc:	440b      	add	r3, r1
 8000bfe:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8000c02:	2200      	movs	r2, #0
 8000c04:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000c06:	7bfa      	ldrb	r2, [r7, #15]
 8000c08:	6879      	ldr	r1, [r7, #4]
 8000c0a:	4613      	mov	r3, r2
 8000c0c:	00db      	lsls	r3, r3, #3
 8000c0e:	4413      	add	r3, r2
 8000c10:	009b      	lsls	r3, r3, #2
 8000c12:	440b      	add	r3, r1
 8000c14:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8000c18:	7bfa      	ldrb	r2, [r7, #15]
 8000c1a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000c1c:	7bfa      	ldrb	r2, [r7, #15]
 8000c1e:	6879      	ldr	r1, [r7, #4]
 8000c20:	4613      	mov	r3, r2
 8000c22:	00db      	lsls	r3, r3, #3
 8000c24:	4413      	add	r3, r2
 8000c26:	009b      	lsls	r3, r3, #2
 8000c28:	440b      	add	r3, r1
 8000c2a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8000c2e:	2200      	movs	r2, #0
 8000c30:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000c32:	7bfa      	ldrb	r2, [r7, #15]
 8000c34:	6879      	ldr	r1, [r7, #4]
 8000c36:	4613      	mov	r3, r2
 8000c38:	00db      	lsls	r3, r3, #3
 8000c3a:	4413      	add	r3, r2
 8000c3c:	009b      	lsls	r3, r3, #2
 8000c3e:	440b      	add	r3, r1
 8000c40:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000c48:	7bfa      	ldrb	r2, [r7, #15]
 8000c4a:	6879      	ldr	r1, [r7, #4]
 8000c4c:	4613      	mov	r3, r2
 8000c4e:	00db      	lsls	r3, r3, #3
 8000c50:	4413      	add	r3, r2
 8000c52:	009b      	lsls	r3, r3, #2
 8000c54:	440b      	add	r3, r1
 8000c56:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000c5e:	7bfa      	ldrb	r2, [r7, #15]
 8000c60:	6879      	ldr	r1, [r7, #4]
 8000c62:	4613      	mov	r3, r2
 8000c64:	00db      	lsls	r3, r3, #3
 8000c66:	4413      	add	r3, r2
 8000c68:	009b      	lsls	r3, r3, #2
 8000c6a:	440b      	add	r3, r1
 8000c6c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c74:	7bfb      	ldrb	r3, [r7, #15]
 8000c76:	3301      	adds	r3, #1
 8000c78:	73fb      	strb	r3, [r7, #15]
 8000c7a:	7bfa      	ldrb	r2, [r7, #15]
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	429a      	cmp	r2, r3
 8000c82:	d3b5      	bcc.n	8000bf0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	603b      	str	r3, [r7, #0]
 8000c8a:	687e      	ldr	r6, [r7, #4]
 8000c8c:	466d      	mov	r5, sp
 8000c8e:	f106 0410 	add.w	r4, r6, #16
 8000c92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c9a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000c9e:	e885 0003 	stmia.w	r5, {r0, r1}
 8000ca2:	1d33      	adds	r3, r6, #4
 8000ca4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ca6:	6838      	ldr	r0, [r7, #0]
 8000ca8:	f002 feb8 	bl	8003a1c <USB_DevInit>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d005      	beq.n	8000cbe <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	2202      	movs	r2, #2
 8000cb6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	e014      	b.n	8000ce8 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	2201      	movs	r2, #1
 8000cca:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cd2:	2b01      	cmp	r3, #1
 8000cd4:	d102      	bne.n	8000cdc <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000cd6:	6878      	ldr	r0, [r7, #4]
 8000cd8:	f001 f8ae 	bl	8001e38 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f003 ff40 	bl	8004b66 <USB_DevDisconnect>

  return HAL_OK;
 8000ce6:	2300      	movs	r3, #0
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	3714      	adds	r7, #20
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000cf0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b084      	sub	sp, #16
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8000d04:	2b01      	cmp	r3, #1
 8000d06:	d101      	bne.n	8000d0c <HAL_PCD_Start+0x1c>
 8000d08:	2302      	movs	r3, #2
 8000d0a:	e01c      	b.n	8000d46 <HAL_PCD_Start+0x56>
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2201      	movs	r2, #1
 8000d10:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d18:	2b01      	cmp	r3, #1
 8000d1a:	d105      	bne.n	8000d28 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d20:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f002 fe07 	bl	8003940 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4618      	mov	r0, r3
 8000d38:	f003 fef4 	bl	8004b24 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2200      	movs	r2, #0
 8000d40:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8000d44:	2300      	movs	r3, #0
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3710      	adds	r7, #16
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}

08000d4e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000d4e:	b590      	push	{r4, r7, lr}
 8000d50:	b08d      	sub	sp, #52	; 0x34
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8000d5c:	6a3b      	ldr	r3, [r7, #32]
 8000d5e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4618      	mov	r0, r3
 8000d66:	f003 ffb2 	bl	8004cce <USB_GetMode>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	f040 847e 	bne.w	800166e <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4618      	mov	r0, r3
 8000d78:	f003 ff16 	bl	8004ba8 <USB_ReadInterrupts>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	f000 8474 	beq.w	800166c <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8000d84:	69fb      	ldr	r3, [r7, #28]
 8000d86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000d8a:	689b      	ldr	r3, [r3, #8]
 8000d8c:	0a1b      	lsrs	r3, r3, #8
 8000d8e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f003 ff03 	bl	8004ba8 <USB_ReadInterrupts>
 8000da2:	4603      	mov	r3, r0
 8000da4:	f003 0302 	and.w	r3, r3, #2
 8000da8:	2b02      	cmp	r3, #2
 8000daa:	d107      	bne.n	8000dbc <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	695a      	ldr	r2, [r3, #20]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f002 0202 	and.w	r2, r2, #2
 8000dba:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f003 fef1 	bl	8004ba8 <USB_ReadInterrupts>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	f003 0310 	and.w	r3, r3, #16
 8000dcc:	2b10      	cmp	r3, #16
 8000dce:	d161      	bne.n	8000e94 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	699a      	ldr	r2, [r3, #24]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f022 0210 	bic.w	r2, r2, #16
 8000dde:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8000de0:	6a3b      	ldr	r3, [r7, #32]
 8000de2:	6a1b      	ldr	r3, [r3, #32]
 8000de4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8000de6:	69bb      	ldr	r3, [r7, #24]
 8000de8:	f003 020f 	and.w	r2, r3, #15
 8000dec:	4613      	mov	r3, r2
 8000dee:	00db      	lsls	r3, r3, #3
 8000df0:	4413      	add	r3, r2
 8000df2:	009b      	lsls	r3, r3, #2
 8000df4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8000df8:	687a      	ldr	r2, [r7, #4]
 8000dfa:	4413      	add	r3, r2
 8000dfc:	3304      	adds	r3, #4
 8000dfe:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8000e00:	69bb      	ldr	r3, [r7, #24]
 8000e02:	0c5b      	lsrs	r3, r3, #17
 8000e04:	f003 030f 	and.w	r3, r3, #15
 8000e08:	2b02      	cmp	r3, #2
 8000e0a:	d124      	bne.n	8000e56 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8000e0c:	69ba      	ldr	r2, [r7, #24]
 8000e0e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8000e12:	4013      	ands	r3, r2
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d035      	beq.n	8000e84 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8000e1c:	69bb      	ldr	r3, [r7, #24]
 8000e1e:	091b      	lsrs	r3, r3, #4
 8000e20:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8000e22:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000e26:	b29b      	uxth	r3, r3
 8000e28:	461a      	mov	r2, r3
 8000e2a:	6a38      	ldr	r0, [r7, #32]
 8000e2c:	f003 fd28 	bl	8004880 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	691a      	ldr	r2, [r3, #16]
 8000e34:	69bb      	ldr	r3, [r7, #24]
 8000e36:	091b      	lsrs	r3, r3, #4
 8000e38:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000e3c:	441a      	add	r2, r3
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	6a1a      	ldr	r2, [r3, #32]
 8000e46:	69bb      	ldr	r3, [r7, #24]
 8000e48:	091b      	lsrs	r3, r3, #4
 8000e4a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000e4e:	441a      	add	r2, r3
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	621a      	str	r2, [r3, #32]
 8000e54:	e016      	b.n	8000e84 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8000e56:	69bb      	ldr	r3, [r7, #24]
 8000e58:	0c5b      	lsrs	r3, r3, #17
 8000e5a:	f003 030f 	and.w	r3, r3, #15
 8000e5e:	2b06      	cmp	r3, #6
 8000e60:	d110      	bne.n	8000e84 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8000e68:	2208      	movs	r2, #8
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	6a38      	ldr	r0, [r7, #32]
 8000e6e:	f003 fd07 	bl	8004880 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	6a1a      	ldr	r2, [r3, #32]
 8000e76:	69bb      	ldr	r3, [r7, #24]
 8000e78:	091b      	lsrs	r3, r3, #4
 8000e7a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000e7e:	441a      	add	r2, r3
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	699a      	ldr	r2, [r3, #24]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f042 0210 	orr.w	r2, r2, #16
 8000e92:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f003 fe85 	bl	8004ba8 <USB_ReadInterrupts>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000ea4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8000ea8:	f040 80a7 	bne.w	8000ffa <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8000eac:	2300      	movs	r3, #0
 8000eae:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f003 fe8a 	bl	8004bce <USB_ReadDevAllOutEpInterrupt>
 8000eba:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8000ebc:	e099      	b.n	8000ff2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8000ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ec0:	f003 0301 	and.w	r3, r3, #1
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	f000 808e 	beq.w	8000fe6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ed0:	b2d2      	uxtb	r2, r2
 8000ed2:	4611      	mov	r1, r2
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f003 feae 	bl	8004c36 <USB_ReadDevOutEPInterrupt>
 8000eda:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8000edc:	693b      	ldr	r3, [r7, #16]
 8000ede:	f003 0301 	and.w	r3, r3, #1
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d00c      	beq.n	8000f00 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8000ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ee8:	015a      	lsls	r2, r3, #5
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	4413      	add	r3, r2
 8000eee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000ef2:	461a      	mov	r2, r3
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8000ef8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000efa:	6878      	ldr	r0, [r7, #4]
 8000efc:	f000 fec2 	bl	8001c84 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8000f00:	693b      	ldr	r3, [r7, #16]
 8000f02:	f003 0308 	and.w	r3, r3, #8
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d00c      	beq.n	8000f24 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8000f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f0c:	015a      	lsls	r2, r3, #5
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	4413      	add	r3, r2
 8000f12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000f16:	461a      	mov	r2, r3
 8000f18:	2308      	movs	r3, #8
 8000f1a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8000f1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000f1e:	6878      	ldr	r0, [r7, #4]
 8000f20:	f000 fefe 	bl	8001d20 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8000f24:	693b      	ldr	r3, [r7, #16]
 8000f26:	f003 0310 	and.w	r3, r3, #16
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d008      	beq.n	8000f40 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8000f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f30:	015a      	lsls	r2, r3, #5
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	4413      	add	r3, r2
 8000f36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000f3a:	461a      	mov	r2, r3
 8000f3c:	2310      	movs	r3, #16
 8000f3e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8000f40:	693b      	ldr	r3, [r7, #16]
 8000f42:	f003 0302 	and.w	r3, r3, #2
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d030      	beq.n	8000fac <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8000f4a:	6a3b      	ldr	r3, [r7, #32]
 8000f4c:	695b      	ldr	r3, [r3, #20]
 8000f4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f52:	2b80      	cmp	r3, #128	; 0x80
 8000f54:	d109      	bne.n	8000f6a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	69fa      	ldr	r2, [r7, #28]
 8000f60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8000f64:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f68:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8000f6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f6c:	4613      	mov	r3, r2
 8000f6e:	00db      	lsls	r3, r3, #3
 8000f70:	4413      	add	r3, r2
 8000f72:	009b      	lsls	r3, r3, #2
 8000f74:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8000f78:	687a      	ldr	r2, [r7, #4]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	3304      	adds	r3, #4
 8000f7e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	78db      	ldrb	r3, [r3, #3]
 8000f84:	2b01      	cmp	r3, #1
 8000f86:	d108      	bne.n	8000f9a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8000f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	4619      	mov	r1, r3
 8000f94:	6878      	ldr	r0, [r7, #4]
 8000f96:	f007 f9ad 	bl	80082f4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8000f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f9c:	015a      	lsls	r2, r3, #5
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	4413      	add	r3, r2
 8000fa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	2302      	movs	r3, #2
 8000faa:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8000fac:	693b      	ldr	r3, [r7, #16]
 8000fae:	f003 0320 	and.w	r3, r3, #32
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d008      	beq.n	8000fc8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8000fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fb8:	015a      	lsls	r2, r3, #5
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	4413      	add	r3, r2
 8000fbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	2320      	movs	r3, #32
 8000fc6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d009      	beq.n	8000fe6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8000fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd4:	015a      	lsls	r2, r3, #5
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	4413      	add	r3, r2
 8000fda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000fde:	461a      	mov	r2, r3
 8000fe0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fe4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8000fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fe8:	3301      	adds	r3, #1
 8000fea:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8000fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fee:	085b      	lsrs	r3, r3, #1
 8000ff0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8000ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	f47f af62 	bne.w	8000ebe <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4618      	mov	r0, r3
 8001000:	f003 fdd2 	bl	8004ba8 <USB_ReadInterrupts>
 8001004:	4603      	mov	r3, r0
 8001006:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800100a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800100e:	f040 80a4 	bne.w	800115a <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4618      	mov	r0, r3
 8001018:	f003 fdf3 	bl	8004c02 <USB_ReadDevAllInEpInterrupt>
 800101c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800101e:	2300      	movs	r3, #0
 8001020:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001022:	e096      	b.n	8001152 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001026:	f003 0301 	and.w	r3, r3, #1
 800102a:	2b00      	cmp	r3, #0
 800102c:	f000 808b 	beq.w	8001146 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001036:	b2d2      	uxtb	r2, r2
 8001038:	4611      	mov	r1, r2
 800103a:	4618      	mov	r0, r3
 800103c:	f003 fe19 	bl	8004c72 <USB_ReadDevInEPInterrupt>
 8001040:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	f003 0301 	and.w	r3, r3, #1
 8001048:	2b00      	cmp	r3, #0
 800104a:	d020      	beq.n	800108e <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800104c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800104e:	f003 030f 	and.w	r3, r3, #15
 8001052:	2201      	movs	r2, #1
 8001054:	fa02 f303 	lsl.w	r3, r2, r3
 8001058:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001060:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	43db      	mvns	r3, r3
 8001066:	69f9      	ldr	r1, [r7, #28]
 8001068:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800106c:	4013      	ands	r3, r2
 800106e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001072:	015a      	lsls	r2, r3, #5
 8001074:	69fb      	ldr	r3, [r7, #28]
 8001076:	4413      	add	r3, r2
 8001078:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800107c:	461a      	mov	r2, r3
 800107e:	2301      	movs	r3, #1
 8001080:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001084:	b2db      	uxtb	r3, r3
 8001086:	4619      	mov	r1, r3
 8001088:	6878      	ldr	r0, [r7, #4]
 800108a:	f007 f89e 	bl	80081ca <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	f003 0308 	and.w	r3, r3, #8
 8001094:	2b00      	cmp	r3, #0
 8001096:	d008      	beq.n	80010aa <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800109a:	015a      	lsls	r2, r3, #5
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	4413      	add	r3, r2
 80010a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80010a4:	461a      	mov	r2, r3
 80010a6:	2308      	movs	r3, #8
 80010a8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	f003 0310 	and.w	r3, r3, #16
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d008      	beq.n	80010c6 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80010b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b6:	015a      	lsls	r2, r3, #5
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	4413      	add	r3, r2
 80010bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80010c0:	461a      	mov	r2, r3
 80010c2:	2310      	movs	r3, #16
 80010c4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d008      	beq.n	80010e2 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80010d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d2:	015a      	lsls	r2, r3, #5
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	4413      	add	r3, r2
 80010d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80010dc:	461a      	mov	r2, r3
 80010de:	2340      	movs	r3, #64	; 0x40
 80010e0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	f003 0302 	and.w	r3, r3, #2
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d023      	beq.n	8001134 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80010ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80010ee:	6a38      	ldr	r0, [r7, #32]
 80010f0:	f002 fde0 	bl	8003cb4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80010f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010f6:	4613      	mov	r3, r2
 80010f8:	00db      	lsls	r3, r3, #3
 80010fa:	4413      	add	r3, r2
 80010fc:	009b      	lsls	r3, r3, #2
 80010fe:	3338      	adds	r3, #56	; 0x38
 8001100:	687a      	ldr	r2, [r7, #4]
 8001102:	4413      	add	r3, r2
 8001104:	3304      	adds	r3, #4
 8001106:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	78db      	ldrb	r3, [r3, #3]
 800110c:	2b01      	cmp	r3, #1
 800110e:	d108      	bne.n	8001122 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	2200      	movs	r2, #0
 8001114:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001118:	b2db      	uxtb	r3, r3
 800111a:	4619      	mov	r1, r3
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	f007 f8fb 	bl	8008318 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001124:	015a      	lsls	r2, r3, #5
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	4413      	add	r3, r2
 800112a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800112e:	461a      	mov	r2, r3
 8001130:	2302      	movs	r3, #2
 8001132:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800113a:	2b00      	cmp	r3, #0
 800113c:	d003      	beq.n	8001146 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800113e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001140:	6878      	ldr	r0, [r7, #4]
 8001142:	f000 fd17 	bl	8001b74 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001148:	3301      	adds	r3, #1
 800114a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800114c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800114e:	085b      	lsrs	r3, r3, #1
 8001150:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001154:	2b00      	cmp	r3, #0
 8001156:	f47f af65 	bne.w	8001024 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4618      	mov	r0, r3
 8001160:	f003 fd22 	bl	8004ba8 <USB_ReadInterrupts>
 8001164:	4603      	mov	r3, r0
 8001166:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800116a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800116e:	d122      	bne.n	80011b6 <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	69fa      	ldr	r2, [r7, #28]
 800117a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800117e:	f023 0301 	bic.w	r3, r3, #1
 8001182:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800118a:	2b01      	cmp	r3, #1
 800118c:	d108      	bne.n	80011a0 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2200      	movs	r2, #0
 8001192:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001196:	2100      	movs	r1, #0
 8001198:	6878      	ldr	r0, [r7, #4]
 800119a:	f007 fb63 	bl	8008864 <HAL_PCDEx_LPM_Callback>
 800119e:	e002      	b.n	80011a6 <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80011a0:	6878      	ldr	r0, [r7, #4]
 80011a2:	f007 f87f 	bl	80082a4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	695a      	ldr	r2, [r3, #20]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80011b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4618      	mov	r0, r3
 80011bc:	f003 fcf4 	bl	8004ba8 <USB_ReadInterrupts>
 80011c0:	4603      	mov	r3, r0
 80011c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80011c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80011ca:	d112      	bne.n	80011f2 <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80011d2:	689b      	ldr	r3, [r3, #8]
 80011d4:	f003 0301 	and.w	r3, r3, #1
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d102      	bne.n	80011e2 <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80011dc:	6878      	ldr	r0, [r7, #4]
 80011de:	f007 f83b 	bl	8008258 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	695a      	ldr	r2, [r3, #20]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80011f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4618      	mov	r0, r3
 80011f8:	f003 fcd6 	bl	8004ba8 <USB_ReadInterrupts>
 80011fc:	4603      	mov	r3, r0
 80011fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001202:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001206:	d121      	bne.n	800124c <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	695a      	ldr	r2, [r3, #20]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8001216:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800121e:	2b00      	cmp	r3, #0
 8001220:	d111      	bne.n	8001246 <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2201      	movs	r2, #1
 8001226:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001230:	089b      	lsrs	r3, r3, #2
 8001232:	f003 020f 	and.w	r2, r3, #15
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800123c:	2101      	movs	r1, #1
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f007 fb10 	bl	8008864 <HAL_PCDEx_LPM_Callback>
 8001244:	e002      	b.n	800124c <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f007 f806 	bl	8008258 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4618      	mov	r0, r3
 8001252:	f003 fca9 	bl	8004ba8 <USB_ReadInterrupts>
 8001256:	4603      	mov	r3, r0
 8001258:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800125c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001260:	f040 80b5 	bne.w	80013ce <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	69fa      	ldr	r2, [r7, #28]
 800126e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001272:	f023 0301 	bic.w	r3, r3, #1
 8001276:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	2110      	movs	r1, #16
 800127e:	4618      	mov	r0, r3
 8001280:	f002 fd18 	bl	8003cb4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001284:	2300      	movs	r3, #0
 8001286:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001288:	e046      	b.n	8001318 <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800128a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800128c:	015a      	lsls	r2, r3, #5
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	4413      	add	r3, r2
 8001292:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001296:	461a      	mov	r2, r3
 8001298:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800129c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800129e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012a0:	015a      	lsls	r2, r3, #5
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	4413      	add	r3, r2
 80012a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012ae:	0151      	lsls	r1, r2, #5
 80012b0:	69fa      	ldr	r2, [r7, #28]
 80012b2:	440a      	add	r2, r1
 80012b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80012b8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80012bc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80012be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012c0:	015a      	lsls	r2, r3, #5
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	4413      	add	r3, r2
 80012c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80012ca:	461a      	mov	r2, r3
 80012cc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80012d0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80012d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012d4:	015a      	lsls	r2, r3, #5
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	4413      	add	r3, r2
 80012da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012e2:	0151      	lsls	r1, r2, #5
 80012e4:	69fa      	ldr	r2, [r7, #28]
 80012e6:	440a      	add	r2, r1
 80012e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80012ec:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80012f0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80012f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012f4:	015a      	lsls	r2, r3, #5
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	4413      	add	r3, r2
 80012fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001302:	0151      	lsls	r1, r2, #5
 8001304:	69fa      	ldr	r2, [r7, #28]
 8001306:	440a      	add	r2, r1
 8001308:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800130c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001310:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001314:	3301      	adds	r3, #1
 8001316:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800131e:	429a      	cmp	r2, r3
 8001320:	d3b3      	bcc.n	800128a <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001328:	69db      	ldr	r3, [r3, #28]
 800132a:	69fa      	ldr	r2, [r7, #28]
 800132c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001330:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001334:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133a:	2b00      	cmp	r3, #0
 800133c:	d016      	beq.n	800136c <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001344:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001348:	69fa      	ldr	r2, [r7, #28]
 800134a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800134e:	f043 030b 	orr.w	r3, r3, #11
 8001352:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800135c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800135e:	69fa      	ldr	r2, [r7, #28]
 8001360:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001364:	f043 030b 	orr.w	r3, r3, #11
 8001368:	6453      	str	r3, [r2, #68]	; 0x44
 800136a:	e015      	b.n	8001398 <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001372:	695b      	ldr	r3, [r3, #20]
 8001374:	69fa      	ldr	r2, [r7, #28]
 8001376:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800137a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800137e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001382:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001384:	69fb      	ldr	r3, [r7, #28]
 8001386:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800138a:	691b      	ldr	r3, [r3, #16]
 800138c:	69fa      	ldr	r2, [r7, #28]
 800138e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001392:	f043 030b 	orr.w	r3, r3, #11
 8001396:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	69fa      	ldr	r2, [r7, #28]
 80013a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80013a6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80013aa:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80013b6:	4619      	mov	r1, r3
 80013b8:	4610      	mov	r0, r2
 80013ba:	f003 fcb9 	bl	8004d30 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	695a      	ldr	r2, [r3, #20]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80013cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4618      	mov	r0, r3
 80013d4:	f003 fbe8 	bl	8004ba8 <USB_ReadInterrupts>
 80013d8:	4603      	mov	r3, r0
 80013da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80013e2:	d124      	bne.n	800142e <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4618      	mov	r0, r3
 80013ea:	f003 fc7e 	bl	8004cea <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4618      	mov	r0, r3
 80013f4:	f002 fcdb 	bl	8003dae <USB_GetDevSpeed>
 80013f8:	4603      	mov	r3, r0
 80013fa:	461a      	mov	r2, r3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681c      	ldr	r4, [r3, #0]
 8001404:	f001 fbf0 	bl	8002be8 <HAL_RCC_GetHCLKFreq>
 8001408:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800140e:	b2db      	uxtb	r3, r3
 8001410:	461a      	mov	r2, r3
 8001412:	4620      	mov	r0, r4
 8001414:	f002 f9f8 	bl	8003808 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	f006 fefe 	bl	800821a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	695a      	ldr	r2, [r3, #20]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800142c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4618      	mov	r0, r3
 8001434:	f003 fbb8 	bl	8004ba8 <USB_ReadInterrupts>
 8001438:	4603      	mov	r3, r0
 800143a:	f003 0308 	and.w	r3, r3, #8
 800143e:	2b08      	cmp	r3, #8
 8001440:	d10a      	bne.n	8001458 <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f006 fedb 	bl	80081fe <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	695a      	ldr	r2, [r3, #20]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f002 0208 	and.w	r2, r2, #8
 8001456:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4618      	mov	r0, r3
 800145e:	f003 fba3 	bl	8004ba8 <USB_ReadInterrupts>
 8001462:	4603      	mov	r3, r0
 8001464:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001468:	2b80      	cmp	r3, #128	; 0x80
 800146a:	d122      	bne.n	80014b2 <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800146c:	6a3b      	ldr	r3, [r7, #32]
 800146e:	699b      	ldr	r3, [r3, #24]
 8001470:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001474:	6a3b      	ldr	r3, [r7, #32]
 8001476:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001478:	2301      	movs	r3, #1
 800147a:	627b      	str	r3, [r7, #36]	; 0x24
 800147c:	e014      	b.n	80014a8 <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800147e:	6879      	ldr	r1, [r7, #4]
 8001480:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001482:	4613      	mov	r3, r2
 8001484:	00db      	lsls	r3, r3, #3
 8001486:	4413      	add	r3, r2
 8001488:	009b      	lsls	r3, r3, #2
 800148a:	440b      	add	r3, r1
 800148c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	2b01      	cmp	r3, #1
 8001494:	d105      	bne.n	80014a2 <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001498:	b2db      	uxtb	r3, r3
 800149a:	4619      	mov	r1, r3
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	f000 fb0b 	bl	8001ab8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80014a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a4:	3301      	adds	r3, #1
 80014a6:	627b      	str	r3, [r7, #36]	; 0x24
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014ae:	429a      	cmp	r2, r3
 80014b0:	d3e5      	bcc.n	800147e <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4618      	mov	r0, r3
 80014b8:	f003 fb76 	bl	8004ba8 <USB_ReadInterrupts>
 80014bc:	4603      	mov	r3, r0
 80014be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80014c6:	d13b      	bne.n	8001540 <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80014c8:	2301      	movs	r3, #1
 80014ca:	627b      	str	r3, [r7, #36]	; 0x24
 80014cc:	e02b      	b.n	8001526 <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80014ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d0:	015a      	lsls	r2, r3, #5
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	4413      	add	r3, r2
 80014d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80014de:	6879      	ldr	r1, [r7, #4]
 80014e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014e2:	4613      	mov	r3, r2
 80014e4:	00db      	lsls	r3, r3, #3
 80014e6:	4413      	add	r3, r2
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	440b      	add	r3, r1
 80014ec:	3340      	adds	r3, #64	; 0x40
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d115      	bne.n	8001520 <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80014f4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	da12      	bge.n	8001520 <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80014fa:	6879      	ldr	r1, [r7, #4]
 80014fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014fe:	4613      	mov	r3, r2
 8001500:	00db      	lsls	r3, r3, #3
 8001502:	4413      	add	r3, r2
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	440b      	add	r3, r1
 8001508:	333f      	adds	r3, #63	; 0x3f
 800150a:	2201      	movs	r2, #1
 800150c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800150e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001510:	b2db      	uxtb	r3, r3
 8001512:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001516:	b2db      	uxtb	r3, r3
 8001518:	4619      	mov	r1, r3
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f000 facc 	bl	8001ab8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001522:	3301      	adds	r3, #1
 8001524:	627b      	str	r3, [r7, #36]	; 0x24
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800152c:	429a      	cmp	r2, r3
 800152e:	d3ce      	bcc.n	80014ce <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	695a      	ldr	r2, [r3, #20]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800153e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4618      	mov	r0, r3
 8001546:	f003 fb2f 	bl	8004ba8 <USB_ReadInterrupts>
 800154a:	4603      	mov	r3, r0
 800154c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001550:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001554:	d155      	bne.n	8001602 <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001556:	2301      	movs	r3, #1
 8001558:	627b      	str	r3, [r7, #36]	; 0x24
 800155a:	e045      	b.n	80015e8 <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800155c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155e:	015a      	lsls	r2, r3, #5
 8001560:	69fb      	ldr	r3, [r7, #28]
 8001562:	4413      	add	r3, r2
 8001564:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800156c:	6879      	ldr	r1, [r7, #4]
 800156e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001570:	4613      	mov	r3, r2
 8001572:	00db      	lsls	r3, r3, #3
 8001574:	4413      	add	r3, r2
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	440b      	add	r3, r1
 800157a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	2b01      	cmp	r3, #1
 8001582:	d12e      	bne.n	80015e2 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001584:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001586:	2b00      	cmp	r3, #0
 8001588:	da2b      	bge.n	80015e2 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800158a:	69bb      	ldr	r3, [r7, #24]
 800158c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001596:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800159a:	429a      	cmp	r2, r3
 800159c:	d121      	bne.n	80015e2 <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800159e:	6879      	ldr	r1, [r7, #4]
 80015a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015a2:	4613      	mov	r3, r2
 80015a4:	00db      	lsls	r3, r3, #3
 80015a6:	4413      	add	r3, r2
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	440b      	add	r3, r1
 80015ac:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80015b0:	2201      	movs	r2, #1
 80015b2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80015b4:	6a3b      	ldr	r3, [r7, #32]
 80015b6:	699b      	ldr	r3, [r3, #24]
 80015b8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80015bc:	6a3b      	ldr	r3, [r7, #32]
 80015be:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80015c0:	6a3b      	ldr	r3, [r7, #32]
 80015c2:	695b      	ldr	r3, [r3, #20]
 80015c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d10a      	bne.n	80015e2 <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	69fa      	ldr	r2, [r7, #28]
 80015d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80015da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015de:	6053      	str	r3, [r2, #4]
            break;
 80015e0:	e007      	b.n	80015f2 <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80015e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e4:	3301      	adds	r3, #1
 80015e6:	627b      	str	r3, [r7, #36]	; 0x24
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015ee:	429a      	cmp	r2, r3
 80015f0:	d3b4      	bcc.n	800155c <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	695a      	ldr	r2, [r3, #20]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001600:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4618      	mov	r0, r3
 8001608:	f003 face 	bl	8004ba8 <USB_ReadInterrupts>
 800160c:	4603      	mov	r3, r0
 800160e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001612:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001616:	d10a      	bne.n	800162e <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f006 fe8f 	bl	800833c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	695a      	ldr	r2, [r3, #20]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800162c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4618      	mov	r0, r3
 8001634:	f003 fab8 	bl	8004ba8 <USB_ReadInterrupts>
 8001638:	4603      	mov	r3, r0
 800163a:	f003 0304 	and.w	r3, r3, #4
 800163e:	2b04      	cmp	r3, #4
 8001640:	d115      	bne.n	800166e <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800164a:	69bb      	ldr	r3, [r7, #24]
 800164c:	f003 0304 	and.w	r3, r3, #4
 8001650:	2b00      	cmp	r3, #0
 8001652:	d002      	beq.n	800165a <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001654:	6878      	ldr	r0, [r7, #4]
 8001656:	f006 fe7f 	bl	8008358 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	6859      	ldr	r1, [r3, #4]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	69ba      	ldr	r2, [r7, #24]
 8001666:	430a      	orrs	r2, r1
 8001668:	605a      	str	r2, [r3, #4]
 800166a:	e000      	b.n	800166e <HAL_PCD_IRQHandler+0x920>
      return;
 800166c:	bf00      	nop
    }
  }
}
 800166e:	3734      	adds	r7, #52	; 0x34
 8001670:	46bd      	mov	sp, r7
 8001672:	bd90      	pop	{r4, r7, pc}

08001674 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	460b      	mov	r3, r1
 800167e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001686:	2b01      	cmp	r3, #1
 8001688:	d101      	bne.n	800168e <HAL_PCD_SetAddress+0x1a>
 800168a:	2302      	movs	r3, #2
 800168c:	e013      	b.n	80016b6 <HAL_PCD_SetAddress+0x42>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2201      	movs	r2, #1
 8001692:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	78fa      	ldrb	r2, [r7, #3]
 800169a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	78fa      	ldrb	r2, [r7, #3]
 80016a4:	4611      	mov	r1, r2
 80016a6:	4618      	mov	r0, r3
 80016a8:	f003 fa16 	bl	8004ad8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2200      	movs	r2, #0
 80016b0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80016b4:	2300      	movs	r3, #0
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}

080016be <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80016be:	b580      	push	{r7, lr}
 80016c0:	b084      	sub	sp, #16
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	6078      	str	r0, [r7, #4]
 80016c6:	4608      	mov	r0, r1
 80016c8:	4611      	mov	r1, r2
 80016ca:	461a      	mov	r2, r3
 80016cc:	4603      	mov	r3, r0
 80016ce:	70fb      	strb	r3, [r7, #3]
 80016d0:	460b      	mov	r3, r1
 80016d2:	803b      	strh	r3, [r7, #0]
 80016d4:	4613      	mov	r3, r2
 80016d6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80016d8:	2300      	movs	r3, #0
 80016da:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80016dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	da0f      	bge.n	8001704 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80016e4:	78fb      	ldrb	r3, [r7, #3]
 80016e6:	f003 020f 	and.w	r2, r3, #15
 80016ea:	4613      	mov	r3, r2
 80016ec:	00db      	lsls	r3, r3, #3
 80016ee:	4413      	add	r3, r2
 80016f0:	009b      	lsls	r3, r3, #2
 80016f2:	3338      	adds	r3, #56	; 0x38
 80016f4:	687a      	ldr	r2, [r7, #4]
 80016f6:	4413      	add	r3, r2
 80016f8:	3304      	adds	r3, #4
 80016fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	2201      	movs	r2, #1
 8001700:	705a      	strb	r2, [r3, #1]
 8001702:	e00f      	b.n	8001724 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001704:	78fb      	ldrb	r3, [r7, #3]
 8001706:	f003 020f 	and.w	r2, r3, #15
 800170a:	4613      	mov	r3, r2
 800170c:	00db      	lsls	r3, r3, #3
 800170e:	4413      	add	r3, r2
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	4413      	add	r3, r2
 800171a:	3304      	adds	r3, #4
 800171c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	2200      	movs	r2, #0
 8001722:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001724:	78fb      	ldrb	r3, [r7, #3]
 8001726:	f003 030f 	and.w	r3, r3, #15
 800172a:	b2da      	uxtb	r2, r3
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001730:	883a      	ldrh	r2, [r7, #0]
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	78ba      	ldrb	r2, [r7, #2]
 800173a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	785b      	ldrb	r3, [r3, #1]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d004      	beq.n	800174e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	b29a      	uxth	r2, r3
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800174e:	78bb      	ldrb	r3, [r7, #2]
 8001750:	2b02      	cmp	r3, #2
 8001752:	d102      	bne.n	800175a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	2200      	movs	r2, #0
 8001758:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001760:	2b01      	cmp	r3, #1
 8001762:	d101      	bne.n	8001768 <HAL_PCD_EP_Open+0xaa>
 8001764:	2302      	movs	r3, #2
 8001766:	e00e      	b.n	8001786 <HAL_PCD_EP_Open+0xc8>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2201      	movs	r2, #1
 800176c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	68f9      	ldr	r1, [r7, #12]
 8001776:	4618      	mov	r0, r3
 8001778:	f002 fb38 	bl	8003dec <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2200      	movs	r2, #0
 8001780:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8001784:	7afb      	ldrb	r3, [r7, #11]
}
 8001786:	4618      	mov	r0, r3
 8001788:	3710      	adds	r7, #16
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}

0800178e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800178e:	b580      	push	{r7, lr}
 8001790:	b084      	sub	sp, #16
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]
 8001796:	460b      	mov	r3, r1
 8001798:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800179a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	da0f      	bge.n	80017c2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80017a2:	78fb      	ldrb	r3, [r7, #3]
 80017a4:	f003 020f 	and.w	r2, r3, #15
 80017a8:	4613      	mov	r3, r2
 80017aa:	00db      	lsls	r3, r3, #3
 80017ac:	4413      	add	r3, r2
 80017ae:	009b      	lsls	r3, r3, #2
 80017b0:	3338      	adds	r3, #56	; 0x38
 80017b2:	687a      	ldr	r2, [r7, #4]
 80017b4:	4413      	add	r3, r2
 80017b6:	3304      	adds	r3, #4
 80017b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	2201      	movs	r2, #1
 80017be:	705a      	strb	r2, [r3, #1]
 80017c0:	e00f      	b.n	80017e2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80017c2:	78fb      	ldrb	r3, [r7, #3]
 80017c4:	f003 020f 	and.w	r2, r3, #15
 80017c8:	4613      	mov	r3, r2
 80017ca:	00db      	lsls	r3, r3, #3
 80017cc:	4413      	add	r3, r2
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80017d4:	687a      	ldr	r2, [r7, #4]
 80017d6:	4413      	add	r3, r2
 80017d8:	3304      	adds	r3, #4
 80017da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	2200      	movs	r2, #0
 80017e0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80017e2:	78fb      	ldrb	r3, [r7, #3]
 80017e4:	f003 030f 	and.w	r3, r3, #15
 80017e8:	b2da      	uxtb	r2, r3
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d101      	bne.n	80017fc <HAL_PCD_EP_Close+0x6e>
 80017f8:	2302      	movs	r3, #2
 80017fa:	e00e      	b.n	800181a <HAL_PCD_EP_Close+0x8c>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2201      	movs	r2, #1
 8001800:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	68f9      	ldr	r1, [r7, #12]
 800180a:	4618      	mov	r0, r3
 800180c:	f002 fb76 	bl	8003efc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2200      	movs	r2, #0
 8001814:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8001818:	2300      	movs	r3, #0
}
 800181a:	4618      	mov	r0, r3
 800181c:	3710      	adds	r7, #16
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}

08001822 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001822:	b580      	push	{r7, lr}
 8001824:	b086      	sub	sp, #24
 8001826:	af00      	add	r7, sp, #0
 8001828:	60f8      	str	r0, [r7, #12]
 800182a:	607a      	str	r2, [r7, #4]
 800182c:	603b      	str	r3, [r7, #0]
 800182e:	460b      	mov	r3, r1
 8001830:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001832:	7afb      	ldrb	r3, [r7, #11]
 8001834:	f003 020f 	and.w	r2, r3, #15
 8001838:	4613      	mov	r3, r2
 800183a:	00db      	lsls	r3, r3, #3
 800183c:	4413      	add	r3, r2
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001844:	68fa      	ldr	r2, [r7, #12]
 8001846:	4413      	add	r3, r2
 8001848:	3304      	adds	r3, #4
 800184a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	687a      	ldr	r2, [r7, #4]
 8001850:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	683a      	ldr	r2, [r7, #0]
 8001856:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	2200      	movs	r2, #0
 800185c:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	2200      	movs	r2, #0
 8001862:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001864:	7afb      	ldrb	r3, [r7, #11]
 8001866:	f003 030f 	and.w	r3, r3, #15
 800186a:	b2da      	uxtb	r2, r3
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001870:	7afb      	ldrb	r3, [r7, #11]
 8001872:	f003 030f 	and.w	r3, r3, #15
 8001876:	2b00      	cmp	r3, #0
 8001878:	d106      	bne.n	8001888 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	6979      	ldr	r1, [r7, #20]
 8001880:	4618      	mov	r0, r3
 8001882:	f002 fdf7 	bl	8004474 <USB_EP0StartXfer>
 8001886:	e005      	b.n	8001894 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	6979      	ldr	r1, [r7, #20]
 800188e:	4618      	mov	r0, r3
 8001890:	f002 fc10 	bl	80040b4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001894:	2300      	movs	r3, #0
}
 8001896:	4618      	mov	r0, r3
 8001898:	3718      	adds	r7, #24
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}

0800189e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800189e:	b480      	push	{r7}
 80018a0:	b083      	sub	sp, #12
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	6078      	str	r0, [r7, #4]
 80018a6:	460b      	mov	r3, r1
 80018a8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80018aa:	78fb      	ldrb	r3, [r7, #3]
 80018ac:	f003 020f 	and.w	r2, r3, #15
 80018b0:	6879      	ldr	r1, [r7, #4]
 80018b2:	4613      	mov	r3, r2
 80018b4:	00db      	lsls	r3, r3, #3
 80018b6:	4413      	add	r3, r2
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	440b      	add	r3, r1
 80018bc:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80018c0:	681b      	ldr	r3, [r3, #0]
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	370c      	adds	r7, #12
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr

080018ce <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80018ce:	b580      	push	{r7, lr}
 80018d0:	b086      	sub	sp, #24
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	60f8      	str	r0, [r7, #12]
 80018d6:	607a      	str	r2, [r7, #4]
 80018d8:	603b      	str	r3, [r7, #0]
 80018da:	460b      	mov	r3, r1
 80018dc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018de:	7afb      	ldrb	r3, [r7, #11]
 80018e0:	f003 020f 	and.w	r2, r3, #15
 80018e4:	4613      	mov	r3, r2
 80018e6:	00db      	lsls	r3, r3, #3
 80018e8:	4413      	add	r3, r2
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	3338      	adds	r3, #56	; 0x38
 80018ee:	68fa      	ldr	r2, [r7, #12]
 80018f0:	4413      	add	r3, r2
 80018f2:	3304      	adds	r3, #4
 80018f4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	687a      	ldr	r2, [r7, #4]
 80018fa:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	683a      	ldr	r2, [r7, #0]
 8001900:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	2200      	movs	r2, #0
 8001906:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	2201      	movs	r2, #1
 800190c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800190e:	7afb      	ldrb	r3, [r7, #11]
 8001910:	f003 030f 	and.w	r3, r3, #15
 8001914:	b2da      	uxtb	r2, r3
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800191a:	7afb      	ldrb	r3, [r7, #11]
 800191c:	f003 030f 	and.w	r3, r3, #15
 8001920:	2b00      	cmp	r3, #0
 8001922:	d106      	bne.n	8001932 <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	6979      	ldr	r1, [r7, #20]
 800192a:	4618      	mov	r0, r3
 800192c:	f002 fda2 	bl	8004474 <USB_EP0StartXfer>
 8001930:	e005      	b.n	800193e <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	6979      	ldr	r1, [r7, #20]
 8001938:	4618      	mov	r0, r3
 800193a:	f002 fbbb 	bl	80040b4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800193e:	2300      	movs	r3, #0
}
 8001940:	4618      	mov	r0, r3
 8001942:	3718      	adds	r7, #24
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}

08001948 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	460b      	mov	r3, r1
 8001952:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001954:	78fb      	ldrb	r3, [r7, #3]
 8001956:	f003 020f 	and.w	r2, r3, #15
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	429a      	cmp	r2, r3
 8001960:	d901      	bls.n	8001966 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e04e      	b.n	8001a04 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001966:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800196a:	2b00      	cmp	r3, #0
 800196c:	da0f      	bge.n	800198e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800196e:	78fb      	ldrb	r3, [r7, #3]
 8001970:	f003 020f 	and.w	r2, r3, #15
 8001974:	4613      	mov	r3, r2
 8001976:	00db      	lsls	r3, r3, #3
 8001978:	4413      	add	r3, r2
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	3338      	adds	r3, #56	; 0x38
 800197e:	687a      	ldr	r2, [r7, #4]
 8001980:	4413      	add	r3, r2
 8001982:	3304      	adds	r3, #4
 8001984:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	2201      	movs	r2, #1
 800198a:	705a      	strb	r2, [r3, #1]
 800198c:	e00d      	b.n	80019aa <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800198e:	78fa      	ldrb	r2, [r7, #3]
 8001990:	4613      	mov	r3, r2
 8001992:	00db      	lsls	r3, r3, #3
 8001994:	4413      	add	r3, r2
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800199c:	687a      	ldr	r2, [r7, #4]
 800199e:	4413      	add	r3, r2
 80019a0:	3304      	adds	r3, #4
 80019a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	2200      	movs	r2, #0
 80019a8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	2201      	movs	r2, #1
 80019ae:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80019b0:	78fb      	ldrb	r3, [r7, #3]
 80019b2:	f003 030f 	and.w	r3, r3, #15
 80019b6:	b2da      	uxtb	r2, r3
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d101      	bne.n	80019ca <HAL_PCD_EP_SetStall+0x82>
 80019c6:	2302      	movs	r3, #2
 80019c8:	e01c      	b.n	8001a04 <HAL_PCD_EP_SetStall+0xbc>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2201      	movs	r2, #1
 80019ce:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	68f9      	ldr	r1, [r7, #12]
 80019d8:	4618      	mov	r0, r3
 80019da:	f002 ffa9 	bl	8004930 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80019de:	78fb      	ldrb	r3, [r7, #3]
 80019e0:	f003 030f 	and.w	r3, r3, #15
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d108      	bne.n	80019fa <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80019f2:	4619      	mov	r1, r3
 80019f4:	4610      	mov	r0, r2
 80019f6:	f003 f99b 	bl	8004d30 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2200      	movs	r2, #0
 80019fe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001a02:	2300      	movs	r3, #0
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3710      	adds	r7, #16
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	460b      	mov	r3, r1
 8001a16:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001a18:	78fb      	ldrb	r3, [r7, #3]
 8001a1a:	f003 020f 	and.w	r2, r3, #15
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	429a      	cmp	r2, r3
 8001a24:	d901      	bls.n	8001a2a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e042      	b.n	8001ab0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001a2a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	da0f      	bge.n	8001a52 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a32:	78fb      	ldrb	r3, [r7, #3]
 8001a34:	f003 020f 	and.w	r2, r3, #15
 8001a38:	4613      	mov	r3, r2
 8001a3a:	00db      	lsls	r3, r3, #3
 8001a3c:	4413      	add	r3, r2
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	3338      	adds	r3, #56	; 0x38
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	4413      	add	r3, r2
 8001a46:	3304      	adds	r3, #4
 8001a48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	705a      	strb	r2, [r3, #1]
 8001a50:	e00f      	b.n	8001a72 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a52:	78fb      	ldrb	r3, [r7, #3]
 8001a54:	f003 020f 	and.w	r2, r3, #15
 8001a58:	4613      	mov	r3, r2
 8001a5a:	00db      	lsls	r3, r3, #3
 8001a5c:	4413      	add	r3, r2
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001a64:	687a      	ldr	r2, [r7, #4]
 8001a66:	4413      	add	r3, r2
 8001a68:	3304      	adds	r3, #4
 8001a6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	2200      	movs	r2, #0
 8001a76:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a78:	78fb      	ldrb	r3, [r7, #3]
 8001a7a:	f003 030f 	and.w	r3, r3, #15
 8001a7e:	b2da      	uxtb	r2, r3
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d101      	bne.n	8001a92 <HAL_PCD_EP_ClrStall+0x86>
 8001a8e:	2302      	movs	r3, #2
 8001a90:	e00e      	b.n	8001ab0 <HAL_PCD_EP_ClrStall+0xa4>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2201      	movs	r2, #1
 8001a96:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	68f9      	ldr	r1, [r7, #12]
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f002 ffb3 	bl	8004a0c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001aae:	2300      	movs	r3, #0
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3710      	adds	r7, #16
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}

08001ab8 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b084      	sub	sp, #16
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8001ac4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	da0c      	bge.n	8001ae6 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001acc:	78fb      	ldrb	r3, [r7, #3]
 8001ace:	f003 020f 	and.w	r2, r3, #15
 8001ad2:	4613      	mov	r3, r2
 8001ad4:	00db      	lsls	r3, r3, #3
 8001ad6:	4413      	add	r3, r2
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	3338      	adds	r3, #56	; 0x38
 8001adc:	687a      	ldr	r2, [r7, #4]
 8001ade:	4413      	add	r3, r2
 8001ae0:	3304      	adds	r3, #4
 8001ae2:	60fb      	str	r3, [r7, #12]
 8001ae4:	e00c      	b.n	8001b00 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ae6:	78fb      	ldrb	r3, [r7, #3]
 8001ae8:	f003 020f 	and.w	r2, r3, #15
 8001aec:	4613      	mov	r3, r2
 8001aee:	00db      	lsls	r3, r3, #3
 8001af0:	4413      	add	r3, r2
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001af8:	687a      	ldr	r2, [r7, #4]
 8001afa:	4413      	add	r3, r2
 8001afc:	3304      	adds	r3, #4
 8001afe:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	68f9      	ldr	r1, [r7, #12]
 8001b06:	4618      	mov	r0, r3
 8001b08:	f002 fdd6 	bl	80046b8 <USB_EPStopXfer>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8001b10:	7afb      	ldrb	r3, [r7, #11]
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3710      	adds	r7, #16
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	b082      	sub	sp, #8
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
 8001b22:	460b      	mov	r3, r1
 8001b24:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d101      	bne.n	8001b34 <HAL_PCD_EP_Flush+0x1a>
 8001b30:	2302      	movs	r3, #2
 8001b32:	e01b      	b.n	8001b6c <HAL_PCD_EP_Flush+0x52>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2201      	movs	r2, #1
 8001b38:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((ep_addr & 0x80U) == 0x80U)
 8001b3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	da09      	bge.n	8001b58 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	78fb      	ldrb	r3, [r7, #3]
 8001b4a:	f003 030f 	and.w	r3, r3, #15
 8001b4e:	4619      	mov	r1, r3
 8001b50:	4610      	mov	r0, r2
 8001b52:	f002 f8af 	bl	8003cb4 <USB_FlushTxFifo>
 8001b56:	e004      	b.n	8001b62 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f002 f8dd 	bl	8003d1c <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2200      	movs	r2, #0
 8001b66:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001b6a:	2300      	movs	r3, #0
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3708      	adds	r7, #8
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}

08001b74 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b088      	sub	sp, #32
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001b88:	683a      	ldr	r2, [r7, #0]
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	00db      	lsls	r3, r3, #3
 8001b8e:	4413      	add	r3, r2
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	3338      	adds	r3, #56	; 0x38
 8001b94:	687a      	ldr	r2, [r7, #4]
 8001b96:	4413      	add	r3, r2
 8001b98:	3304      	adds	r3, #4
 8001b9a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	6a1a      	ldr	r2, [r3, #32]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	699b      	ldr	r3, [r3, #24]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d901      	bls.n	8001bac <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e067      	b.n	8001c7c <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	699a      	ldr	r2, [r3, #24]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	6a1b      	ldr	r3, [r3, #32]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	69fa      	ldr	r2, [r7, #28]
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d902      	bls.n	8001bc8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	68db      	ldr	r3, [r3, #12]
 8001bc6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001bc8:	69fb      	ldr	r3, [r7, #28]
 8001bca:	3303      	adds	r3, #3
 8001bcc:	089b      	lsrs	r3, r3, #2
 8001bce:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001bd0:	e026      	b.n	8001c20 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	699a      	ldr	r2, [r3, #24]
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	6a1b      	ldr	r3, [r3, #32]
 8001bda:	1ad3      	subs	r3, r2, r3
 8001bdc:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	68db      	ldr	r3, [r3, #12]
 8001be2:	69fa      	ldr	r2, [r7, #28]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d902      	bls.n	8001bee <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	3303      	adds	r3, #3
 8001bf2:	089b      	lsrs	r3, r3, #2
 8001bf4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	6919      	ldr	r1, [r3, #16]
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	b2da      	uxtb	r2, r3
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	b29b      	uxth	r3, r3
 8001c02:	6978      	ldr	r0, [r7, #20]
 8001c04:	f002 fe02 	bl	800480c <USB_WritePacket>

    ep->xfer_buff  += len;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	691a      	ldr	r2, [r3, #16]
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	441a      	add	r2, r3
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	6a1a      	ldr	r2, [r3, #32]
 8001c18:	69fb      	ldr	r3, [r7, #28]
 8001c1a:	441a      	add	r2, r3
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	015a      	lsls	r2, r3, #5
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	4413      	add	r3, r2
 8001c28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001c2c:	699b      	ldr	r3, [r3, #24]
 8001c2e:	b29b      	uxth	r3, r3
 8001c30:	69ba      	ldr	r2, [r7, #24]
 8001c32:	429a      	cmp	r2, r3
 8001c34:	d809      	bhi.n	8001c4a <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	6a1a      	ldr	r2, [r3, #32]
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	d203      	bcs.n	8001c4a <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	699b      	ldr	r3, [r3, #24]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d1c3      	bne.n	8001bd2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	699a      	ldr	r2, [r3, #24]
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	6a1b      	ldr	r3, [r3, #32]
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d811      	bhi.n	8001c7a <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	f003 030f 	and.w	r3, r3, #15
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c62:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	43db      	mvns	r3, r3
 8001c70:	6939      	ldr	r1, [r7, #16]
 8001c72:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001c76:	4013      	ands	r3, r2
 8001c78:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8001c7a:	2300      	movs	r3, #0
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3720      	adds	r7, #32
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}

08001c84 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b086      	sub	sp, #24
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	333c      	adds	r3, #60	; 0x3c
 8001c9c:	3304      	adds	r3, #4
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	015a      	lsls	r2, r3, #5
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	4413      	add	r3, r2
 8001caa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	4a19      	ldr	r2, [pc, #100]	; (8001d1c <PCD_EP_OutXfrComplete_int+0x98>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d124      	bne.n	8001d04 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d00a      	beq.n	8001cda <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	015a      	lsls	r2, r3, #5
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	4413      	add	r3, r2
 8001ccc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001cd6:	6093      	str	r3, [r2, #8]
 8001cd8:	e01a      	b.n	8001d10 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	f003 0320 	and.w	r3, r3, #32
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d008      	beq.n	8001cf6 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	015a      	lsls	r2, r3, #5
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	4413      	add	r3, r2
 8001cec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	2320      	movs	r3, #32
 8001cf4:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f006 fa49 	bl	8008194 <HAL_PCD_DataOutStageCallback>
 8001d02:	e005      	b.n	8001d10 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	4619      	mov	r1, r3
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f006 fa42 	bl	8008194 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8001d10:	2300      	movs	r3, #0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3718      	adds	r7, #24
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	4f54310a 	.word	0x4f54310a

08001d20 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b086      	sub	sp, #24
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	333c      	adds	r3, #60	; 0x3c
 8001d38:	3304      	adds	r3, #4
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	015a      	lsls	r2, r3, #5
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	4413      	add	r3, r2
 8001d46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	4a0c      	ldr	r2, [pc, #48]	; (8001d84 <PCD_EP_OutSetupPacket_int+0x64>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d90e      	bls.n	8001d74 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d009      	beq.n	8001d74 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	015a      	lsls	r2, r3, #5
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	4413      	add	r3, r2
 8001d68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d72:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f006 f9fb 	bl	8008170 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8001d7a:	2300      	movs	r3, #0
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3718      	adds	r7, #24
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	4f54300a 	.word	0x4f54300a

08001d88 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b085      	sub	sp, #20
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	460b      	mov	r3, r1
 8001d92:	70fb      	strb	r3, [r7, #3]
 8001d94:	4613      	mov	r3, r2
 8001d96:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d9e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8001da0:	78fb      	ldrb	r3, [r7, #3]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d107      	bne.n	8001db6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8001da6:	883b      	ldrh	r3, [r7, #0]
 8001da8:	0419      	lsls	r1, r3, #16
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	68ba      	ldr	r2, [r7, #8]
 8001db0:	430a      	orrs	r2, r1
 8001db2:	629a      	str	r2, [r3, #40]	; 0x28
 8001db4:	e028      	b.n	8001e08 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dbc:	0c1b      	lsrs	r3, r3, #16
 8001dbe:	68ba      	ldr	r2, [r7, #8]
 8001dc0:	4413      	add	r3, r2
 8001dc2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	73fb      	strb	r3, [r7, #15]
 8001dc8:	e00d      	b.n	8001de6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	7bfb      	ldrb	r3, [r7, #15]
 8001dd0:	3340      	adds	r3, #64	; 0x40
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	4413      	add	r3, r2
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	0c1b      	lsrs	r3, r3, #16
 8001dda:	68ba      	ldr	r2, [r7, #8]
 8001ddc:	4413      	add	r3, r2
 8001dde:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8001de0:	7bfb      	ldrb	r3, [r7, #15]
 8001de2:	3301      	adds	r3, #1
 8001de4:	73fb      	strb	r3, [r7, #15]
 8001de6:	7bfa      	ldrb	r2, [r7, #15]
 8001de8:	78fb      	ldrb	r3, [r7, #3]
 8001dea:	3b01      	subs	r3, #1
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d3ec      	bcc.n	8001dca <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8001df0:	883b      	ldrh	r3, [r7, #0]
 8001df2:	0418      	lsls	r0, r3, #16
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6819      	ldr	r1, [r3, #0]
 8001df8:	78fb      	ldrb	r3, [r7, #3]
 8001dfa:	3b01      	subs	r3, #1
 8001dfc:	68ba      	ldr	r2, [r7, #8]
 8001dfe:	4302      	orrs	r2, r0
 8001e00:	3340      	adds	r3, #64	; 0x40
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	440b      	add	r3, r1
 8001e06:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8001e08:	2300      	movs	r3, #0
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3714      	adds	r7, #20
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr

08001e16 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8001e16:	b480      	push	{r7}
 8001e18:	b083      	sub	sp, #12
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	6078      	str	r0, [r7, #4]
 8001e1e:	460b      	mov	r3, r1
 8001e20:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	887a      	ldrh	r2, [r7, #2]
 8001e28:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001e2a:	2300      	movs	r3, #0
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	370c      	adds	r7, #12
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr

08001e38 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b085      	sub	sp, #20
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2201      	movs	r2, #1
 8001e4a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2200      	movs	r2, #0
 8001e52:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	699b      	ldr	r3, [r3, #24]
 8001e5a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e6a:	f043 0303 	orr.w	r3, r3, #3
 8001e6e:	68fa      	ldr	r2, [r7, #12]
 8001e70:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001e72:	2300      	movs	r3, #0
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3714      	adds	r7, #20
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr

08001e80 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001e84:	4b0d      	ldr	r3, [pc, #52]	; (8001ebc <HAL_PWREx_GetVoltageRange+0x3c>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e90:	d102      	bne.n	8001e98 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8001e92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e96:	e00b      	b.n	8001eb0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001e98:	4b08      	ldr	r3, [pc, #32]	; (8001ebc <HAL_PWREx_GetVoltageRange+0x3c>)
 8001e9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ea2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ea6:	d102      	bne.n	8001eae <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001ea8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001eac:	e000      	b.n	8001eb0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8001eae:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	40007000 	.word	0x40007000

08001ec0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b085      	sub	sp, #20
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d141      	bne.n	8001f52 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001ece:	4b4b      	ldr	r3, [pc, #300]	; (8001ffc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001ed6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001eda:	d131      	bne.n	8001f40 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001edc:	4b47      	ldr	r3, [pc, #284]	; (8001ffc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ede:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ee2:	4a46      	ldr	r2, [pc, #280]	; (8001ffc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ee4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ee8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001eec:	4b43      	ldr	r3, [pc, #268]	; (8001ffc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ef4:	4a41      	ldr	r2, [pc, #260]	; (8001ffc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ef6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001efa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001efc:	4b40      	ldr	r3, [pc, #256]	; (8002000 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	2232      	movs	r2, #50	; 0x32
 8001f02:	fb02 f303 	mul.w	r3, r2, r3
 8001f06:	4a3f      	ldr	r2, [pc, #252]	; (8002004 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001f08:	fba2 2303 	umull	r2, r3, r2, r3
 8001f0c:	0c9b      	lsrs	r3, r3, #18
 8001f0e:	3301      	adds	r3, #1
 8001f10:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f12:	e002      	b.n	8001f1a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	3b01      	subs	r3, #1
 8001f18:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f1a:	4b38      	ldr	r3, [pc, #224]	; (8001ffc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f1c:	695b      	ldr	r3, [r3, #20]
 8001f1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f26:	d102      	bne.n	8001f2e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d1f2      	bne.n	8001f14 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f2e:	4b33      	ldr	r3, [pc, #204]	; (8001ffc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f30:	695b      	ldr	r3, [r3, #20]
 8001f32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f3a:	d158      	bne.n	8001fee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	e057      	b.n	8001ff0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f40:	4b2e      	ldr	r3, [pc, #184]	; (8001ffc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f46:	4a2d      	ldr	r2, [pc, #180]	; (8001ffc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f4c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001f50:	e04d      	b.n	8001fee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f58:	d141      	bne.n	8001fde <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f5a:	4b28      	ldr	r3, [pc, #160]	; (8001ffc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001f62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f66:	d131      	bne.n	8001fcc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f68:	4b24      	ldr	r3, [pc, #144]	; (8001ffc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f6e:	4a23      	ldr	r2, [pc, #140]	; (8001ffc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f74:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f78:	4b20      	ldr	r3, [pc, #128]	; (8001ffc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001f80:	4a1e      	ldr	r2, [pc, #120]	; (8001ffc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f86:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001f88:	4b1d      	ldr	r3, [pc, #116]	; (8002000 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	2232      	movs	r2, #50	; 0x32
 8001f8e:	fb02 f303 	mul.w	r3, r2, r3
 8001f92:	4a1c      	ldr	r2, [pc, #112]	; (8002004 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001f94:	fba2 2303 	umull	r2, r3, r2, r3
 8001f98:	0c9b      	lsrs	r3, r3, #18
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f9e:	e002      	b.n	8001fa6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	3b01      	subs	r3, #1
 8001fa4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fa6:	4b15      	ldr	r3, [pc, #84]	; (8001ffc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fa8:	695b      	ldr	r3, [r3, #20]
 8001faa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fb2:	d102      	bne.n	8001fba <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d1f2      	bne.n	8001fa0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001fba:	4b10      	ldr	r3, [pc, #64]	; (8001ffc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fbc:	695b      	ldr	r3, [r3, #20]
 8001fbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fc6:	d112      	bne.n	8001fee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	e011      	b.n	8001ff0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001fcc:	4b0b      	ldr	r3, [pc, #44]	; (8001ffc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001fd2:	4a0a      	ldr	r2, [pc, #40]	; (8001ffc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fd8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001fdc:	e007      	b.n	8001fee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001fde:	4b07      	ldr	r3, [pc, #28]	; (8001ffc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001fe6:	4a05      	ldr	r2, [pc, #20]	; (8001ffc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fe8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fec:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001fee:	2300      	movs	r3, #0
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3714      	adds	r7, #20
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr
 8001ffc:	40007000 	.word	0x40007000
 8002000:	20000000 	.word	0x20000000
 8002004:	431bde83 	.word	0x431bde83

08002008 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800200c:	4b05      	ldr	r3, [pc, #20]	; (8002024 <HAL_PWREx_EnableVddUSB+0x1c>)
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	4a04      	ldr	r2, [pc, #16]	; (8002024 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002012:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002016:	6053      	str	r3, [r2, #4]
}
 8002018:	bf00      	nop
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	40007000 	.word	0x40007000

08002028 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b088      	sub	sp, #32
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d102      	bne.n	800203c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	f000 bc08 	b.w	800284c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800203c:	4b96      	ldr	r3, [pc, #600]	; (8002298 <HAL_RCC_OscConfig+0x270>)
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	f003 030c 	and.w	r3, r3, #12
 8002044:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002046:	4b94      	ldr	r3, [pc, #592]	; (8002298 <HAL_RCC_OscConfig+0x270>)
 8002048:	68db      	ldr	r3, [r3, #12]
 800204a:	f003 0303 	and.w	r3, r3, #3
 800204e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0310 	and.w	r3, r3, #16
 8002058:	2b00      	cmp	r3, #0
 800205a:	f000 80e4 	beq.w	8002226 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800205e:	69bb      	ldr	r3, [r7, #24]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d007      	beq.n	8002074 <HAL_RCC_OscConfig+0x4c>
 8002064:	69bb      	ldr	r3, [r7, #24]
 8002066:	2b0c      	cmp	r3, #12
 8002068:	f040 808b 	bne.w	8002182 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	2b01      	cmp	r3, #1
 8002070:	f040 8087 	bne.w	8002182 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002074:	4b88      	ldr	r3, [pc, #544]	; (8002298 <HAL_RCC_OscConfig+0x270>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0302 	and.w	r3, r3, #2
 800207c:	2b00      	cmp	r3, #0
 800207e:	d005      	beq.n	800208c <HAL_RCC_OscConfig+0x64>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	699b      	ldr	r3, [r3, #24]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d101      	bne.n	800208c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e3df      	b.n	800284c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6a1a      	ldr	r2, [r3, #32]
 8002090:	4b81      	ldr	r3, [pc, #516]	; (8002298 <HAL_RCC_OscConfig+0x270>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0308 	and.w	r3, r3, #8
 8002098:	2b00      	cmp	r3, #0
 800209a:	d004      	beq.n	80020a6 <HAL_RCC_OscConfig+0x7e>
 800209c:	4b7e      	ldr	r3, [pc, #504]	; (8002298 <HAL_RCC_OscConfig+0x270>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020a4:	e005      	b.n	80020b2 <HAL_RCC_OscConfig+0x8a>
 80020a6:	4b7c      	ldr	r3, [pc, #496]	; (8002298 <HAL_RCC_OscConfig+0x270>)
 80020a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020ac:	091b      	lsrs	r3, r3, #4
 80020ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d223      	bcs.n	80020fe <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6a1b      	ldr	r3, [r3, #32]
 80020ba:	4618      	mov	r0, r3
 80020bc:	f000 fda0 	bl	8002c00 <RCC_SetFlashLatencyFromMSIRange>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e3c0      	b.n	800284c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020ca:	4b73      	ldr	r3, [pc, #460]	; (8002298 <HAL_RCC_OscConfig+0x270>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a72      	ldr	r2, [pc, #456]	; (8002298 <HAL_RCC_OscConfig+0x270>)
 80020d0:	f043 0308 	orr.w	r3, r3, #8
 80020d4:	6013      	str	r3, [r2, #0]
 80020d6:	4b70      	ldr	r3, [pc, #448]	; (8002298 <HAL_RCC_OscConfig+0x270>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6a1b      	ldr	r3, [r3, #32]
 80020e2:	496d      	ldr	r1, [pc, #436]	; (8002298 <HAL_RCC_OscConfig+0x270>)
 80020e4:	4313      	orrs	r3, r2
 80020e6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020e8:	4b6b      	ldr	r3, [pc, #428]	; (8002298 <HAL_RCC_OscConfig+0x270>)
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	69db      	ldr	r3, [r3, #28]
 80020f4:	021b      	lsls	r3, r3, #8
 80020f6:	4968      	ldr	r1, [pc, #416]	; (8002298 <HAL_RCC_OscConfig+0x270>)
 80020f8:	4313      	orrs	r3, r2
 80020fa:	604b      	str	r3, [r1, #4]
 80020fc:	e025      	b.n	800214a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020fe:	4b66      	ldr	r3, [pc, #408]	; (8002298 <HAL_RCC_OscConfig+0x270>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a65      	ldr	r2, [pc, #404]	; (8002298 <HAL_RCC_OscConfig+0x270>)
 8002104:	f043 0308 	orr.w	r3, r3, #8
 8002108:	6013      	str	r3, [r2, #0]
 800210a:	4b63      	ldr	r3, [pc, #396]	; (8002298 <HAL_RCC_OscConfig+0x270>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6a1b      	ldr	r3, [r3, #32]
 8002116:	4960      	ldr	r1, [pc, #384]	; (8002298 <HAL_RCC_OscConfig+0x270>)
 8002118:	4313      	orrs	r3, r2
 800211a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800211c:	4b5e      	ldr	r3, [pc, #376]	; (8002298 <HAL_RCC_OscConfig+0x270>)
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	69db      	ldr	r3, [r3, #28]
 8002128:	021b      	lsls	r3, r3, #8
 800212a:	495b      	ldr	r1, [pc, #364]	; (8002298 <HAL_RCC_OscConfig+0x270>)
 800212c:	4313      	orrs	r3, r2
 800212e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d109      	bne.n	800214a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6a1b      	ldr	r3, [r3, #32]
 800213a:	4618      	mov	r0, r3
 800213c:	f000 fd60 	bl	8002c00 <RCC_SetFlashLatencyFromMSIRange>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d001      	beq.n	800214a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e380      	b.n	800284c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800214a:	f000 fcc1 	bl	8002ad0 <HAL_RCC_GetSysClockFreq>
 800214e:	4602      	mov	r2, r0
 8002150:	4b51      	ldr	r3, [pc, #324]	; (8002298 <HAL_RCC_OscConfig+0x270>)
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	091b      	lsrs	r3, r3, #4
 8002156:	f003 030f 	and.w	r3, r3, #15
 800215a:	4950      	ldr	r1, [pc, #320]	; (800229c <HAL_RCC_OscConfig+0x274>)
 800215c:	5ccb      	ldrb	r3, [r1, r3]
 800215e:	f003 031f 	and.w	r3, r3, #31
 8002162:	fa22 f303 	lsr.w	r3, r2, r3
 8002166:	4a4e      	ldr	r2, [pc, #312]	; (80022a0 <HAL_RCC_OscConfig+0x278>)
 8002168:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800216a:	4b4e      	ldr	r3, [pc, #312]	; (80022a4 <HAL_RCC_OscConfig+0x27c>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4618      	mov	r0, r3
 8002170:	f7fe f976 	bl	8000460 <HAL_InitTick>
 8002174:	4603      	mov	r3, r0
 8002176:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002178:	7bfb      	ldrb	r3, [r7, #15]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d052      	beq.n	8002224 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800217e:	7bfb      	ldrb	r3, [r7, #15]
 8002180:	e364      	b.n	800284c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	699b      	ldr	r3, [r3, #24]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d032      	beq.n	80021f0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800218a:	4b43      	ldr	r3, [pc, #268]	; (8002298 <HAL_RCC_OscConfig+0x270>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a42      	ldr	r2, [pc, #264]	; (8002298 <HAL_RCC_OscConfig+0x270>)
 8002190:	f043 0301 	orr.w	r3, r3, #1
 8002194:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002196:	f7fe f9b3 	bl	8000500 <HAL_GetTick>
 800219a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800219c:	e008      	b.n	80021b0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800219e:	f7fe f9af 	bl	8000500 <HAL_GetTick>
 80021a2:	4602      	mov	r2, r0
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	2b02      	cmp	r3, #2
 80021aa:	d901      	bls.n	80021b0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80021ac:	2303      	movs	r3, #3
 80021ae:	e34d      	b.n	800284c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021b0:	4b39      	ldr	r3, [pc, #228]	; (8002298 <HAL_RCC_OscConfig+0x270>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0302 	and.w	r3, r3, #2
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d0f0      	beq.n	800219e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021bc:	4b36      	ldr	r3, [pc, #216]	; (8002298 <HAL_RCC_OscConfig+0x270>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a35      	ldr	r2, [pc, #212]	; (8002298 <HAL_RCC_OscConfig+0x270>)
 80021c2:	f043 0308 	orr.w	r3, r3, #8
 80021c6:	6013      	str	r3, [r2, #0]
 80021c8:	4b33      	ldr	r3, [pc, #204]	; (8002298 <HAL_RCC_OscConfig+0x270>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6a1b      	ldr	r3, [r3, #32]
 80021d4:	4930      	ldr	r1, [pc, #192]	; (8002298 <HAL_RCC_OscConfig+0x270>)
 80021d6:	4313      	orrs	r3, r2
 80021d8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021da:	4b2f      	ldr	r3, [pc, #188]	; (8002298 <HAL_RCC_OscConfig+0x270>)
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	69db      	ldr	r3, [r3, #28]
 80021e6:	021b      	lsls	r3, r3, #8
 80021e8:	492b      	ldr	r1, [pc, #172]	; (8002298 <HAL_RCC_OscConfig+0x270>)
 80021ea:	4313      	orrs	r3, r2
 80021ec:	604b      	str	r3, [r1, #4]
 80021ee:	e01a      	b.n	8002226 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80021f0:	4b29      	ldr	r3, [pc, #164]	; (8002298 <HAL_RCC_OscConfig+0x270>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a28      	ldr	r2, [pc, #160]	; (8002298 <HAL_RCC_OscConfig+0x270>)
 80021f6:	f023 0301 	bic.w	r3, r3, #1
 80021fa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80021fc:	f7fe f980 	bl	8000500 <HAL_GetTick>
 8002200:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002202:	e008      	b.n	8002216 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002204:	f7fe f97c 	bl	8000500 <HAL_GetTick>
 8002208:	4602      	mov	r2, r0
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	2b02      	cmp	r3, #2
 8002210:	d901      	bls.n	8002216 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002212:	2303      	movs	r3, #3
 8002214:	e31a      	b.n	800284c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002216:	4b20      	ldr	r3, [pc, #128]	; (8002298 <HAL_RCC_OscConfig+0x270>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0302 	and.w	r3, r3, #2
 800221e:	2b00      	cmp	r3, #0
 8002220:	d1f0      	bne.n	8002204 <HAL_RCC_OscConfig+0x1dc>
 8002222:	e000      	b.n	8002226 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002224:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0301 	and.w	r3, r3, #1
 800222e:	2b00      	cmp	r3, #0
 8002230:	d073      	beq.n	800231a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002232:	69bb      	ldr	r3, [r7, #24]
 8002234:	2b08      	cmp	r3, #8
 8002236:	d005      	beq.n	8002244 <HAL_RCC_OscConfig+0x21c>
 8002238:	69bb      	ldr	r3, [r7, #24]
 800223a:	2b0c      	cmp	r3, #12
 800223c:	d10e      	bne.n	800225c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	2b03      	cmp	r3, #3
 8002242:	d10b      	bne.n	800225c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002244:	4b14      	ldr	r3, [pc, #80]	; (8002298 <HAL_RCC_OscConfig+0x270>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800224c:	2b00      	cmp	r3, #0
 800224e:	d063      	beq.n	8002318 <HAL_RCC_OscConfig+0x2f0>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d15f      	bne.n	8002318 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e2f7      	b.n	800284c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002264:	d106      	bne.n	8002274 <HAL_RCC_OscConfig+0x24c>
 8002266:	4b0c      	ldr	r3, [pc, #48]	; (8002298 <HAL_RCC_OscConfig+0x270>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a0b      	ldr	r2, [pc, #44]	; (8002298 <HAL_RCC_OscConfig+0x270>)
 800226c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002270:	6013      	str	r3, [r2, #0]
 8002272:	e025      	b.n	80022c0 <HAL_RCC_OscConfig+0x298>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800227c:	d114      	bne.n	80022a8 <HAL_RCC_OscConfig+0x280>
 800227e:	4b06      	ldr	r3, [pc, #24]	; (8002298 <HAL_RCC_OscConfig+0x270>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a05      	ldr	r2, [pc, #20]	; (8002298 <HAL_RCC_OscConfig+0x270>)
 8002284:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002288:	6013      	str	r3, [r2, #0]
 800228a:	4b03      	ldr	r3, [pc, #12]	; (8002298 <HAL_RCC_OscConfig+0x270>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a02      	ldr	r2, [pc, #8]	; (8002298 <HAL_RCC_OscConfig+0x270>)
 8002290:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002294:	6013      	str	r3, [r2, #0]
 8002296:	e013      	b.n	80022c0 <HAL_RCC_OscConfig+0x298>
 8002298:	40021000 	.word	0x40021000
 800229c:	08008a0c 	.word	0x08008a0c
 80022a0:	20000000 	.word	0x20000000
 80022a4:	20000004 	.word	0x20000004
 80022a8:	4ba0      	ldr	r3, [pc, #640]	; (800252c <HAL_RCC_OscConfig+0x504>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a9f      	ldr	r2, [pc, #636]	; (800252c <HAL_RCC_OscConfig+0x504>)
 80022ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022b2:	6013      	str	r3, [r2, #0]
 80022b4:	4b9d      	ldr	r3, [pc, #628]	; (800252c <HAL_RCC_OscConfig+0x504>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a9c      	ldr	r2, [pc, #624]	; (800252c <HAL_RCC_OscConfig+0x504>)
 80022ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d013      	beq.n	80022f0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c8:	f7fe f91a 	bl	8000500 <HAL_GetTick>
 80022cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022ce:	e008      	b.n	80022e2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022d0:	f7fe f916 	bl	8000500 <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	2b64      	cmp	r3, #100	; 0x64
 80022dc:	d901      	bls.n	80022e2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e2b4      	b.n	800284c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022e2:	4b92      	ldr	r3, [pc, #584]	; (800252c <HAL_RCC_OscConfig+0x504>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d0f0      	beq.n	80022d0 <HAL_RCC_OscConfig+0x2a8>
 80022ee:	e014      	b.n	800231a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022f0:	f7fe f906 	bl	8000500 <HAL_GetTick>
 80022f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022f6:	e008      	b.n	800230a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022f8:	f7fe f902 	bl	8000500 <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	2b64      	cmp	r3, #100	; 0x64
 8002304:	d901      	bls.n	800230a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	e2a0      	b.n	800284c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800230a:	4b88      	ldr	r3, [pc, #544]	; (800252c <HAL_RCC_OscConfig+0x504>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d1f0      	bne.n	80022f8 <HAL_RCC_OscConfig+0x2d0>
 8002316:	e000      	b.n	800231a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002318:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0302 	and.w	r3, r3, #2
 8002322:	2b00      	cmp	r3, #0
 8002324:	d060      	beq.n	80023e8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002326:	69bb      	ldr	r3, [r7, #24]
 8002328:	2b04      	cmp	r3, #4
 800232a:	d005      	beq.n	8002338 <HAL_RCC_OscConfig+0x310>
 800232c:	69bb      	ldr	r3, [r7, #24]
 800232e:	2b0c      	cmp	r3, #12
 8002330:	d119      	bne.n	8002366 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	2b02      	cmp	r3, #2
 8002336:	d116      	bne.n	8002366 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002338:	4b7c      	ldr	r3, [pc, #496]	; (800252c <HAL_RCC_OscConfig+0x504>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002340:	2b00      	cmp	r3, #0
 8002342:	d005      	beq.n	8002350 <HAL_RCC_OscConfig+0x328>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d101      	bne.n	8002350 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e27d      	b.n	800284c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002350:	4b76      	ldr	r3, [pc, #472]	; (800252c <HAL_RCC_OscConfig+0x504>)
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	691b      	ldr	r3, [r3, #16]
 800235c:	061b      	lsls	r3, r3, #24
 800235e:	4973      	ldr	r1, [pc, #460]	; (800252c <HAL_RCC_OscConfig+0x504>)
 8002360:	4313      	orrs	r3, r2
 8002362:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002364:	e040      	b.n	80023e8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d023      	beq.n	80023b6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800236e:	4b6f      	ldr	r3, [pc, #444]	; (800252c <HAL_RCC_OscConfig+0x504>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a6e      	ldr	r2, [pc, #440]	; (800252c <HAL_RCC_OscConfig+0x504>)
 8002374:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002378:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800237a:	f7fe f8c1 	bl	8000500 <HAL_GetTick>
 800237e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002380:	e008      	b.n	8002394 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002382:	f7fe f8bd 	bl	8000500 <HAL_GetTick>
 8002386:	4602      	mov	r2, r0
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	2b02      	cmp	r3, #2
 800238e:	d901      	bls.n	8002394 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002390:	2303      	movs	r3, #3
 8002392:	e25b      	b.n	800284c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002394:	4b65      	ldr	r3, [pc, #404]	; (800252c <HAL_RCC_OscConfig+0x504>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800239c:	2b00      	cmp	r3, #0
 800239e:	d0f0      	beq.n	8002382 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023a0:	4b62      	ldr	r3, [pc, #392]	; (800252c <HAL_RCC_OscConfig+0x504>)
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	691b      	ldr	r3, [r3, #16]
 80023ac:	061b      	lsls	r3, r3, #24
 80023ae:	495f      	ldr	r1, [pc, #380]	; (800252c <HAL_RCC_OscConfig+0x504>)
 80023b0:	4313      	orrs	r3, r2
 80023b2:	604b      	str	r3, [r1, #4]
 80023b4:	e018      	b.n	80023e8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023b6:	4b5d      	ldr	r3, [pc, #372]	; (800252c <HAL_RCC_OscConfig+0x504>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a5c      	ldr	r2, [pc, #368]	; (800252c <HAL_RCC_OscConfig+0x504>)
 80023bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80023c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023c2:	f7fe f89d 	bl	8000500 <HAL_GetTick>
 80023c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023c8:	e008      	b.n	80023dc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023ca:	f7fe f899 	bl	8000500 <HAL_GetTick>
 80023ce:	4602      	mov	r2, r0
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	1ad3      	subs	r3, r2, r3
 80023d4:	2b02      	cmp	r3, #2
 80023d6:	d901      	bls.n	80023dc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80023d8:	2303      	movs	r3, #3
 80023da:	e237      	b.n	800284c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023dc:	4b53      	ldr	r3, [pc, #332]	; (800252c <HAL_RCC_OscConfig+0x504>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d1f0      	bne.n	80023ca <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0308 	and.w	r3, r3, #8
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d03c      	beq.n	800246e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	695b      	ldr	r3, [r3, #20]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d01c      	beq.n	8002436 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023fc:	4b4b      	ldr	r3, [pc, #300]	; (800252c <HAL_RCC_OscConfig+0x504>)
 80023fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002402:	4a4a      	ldr	r2, [pc, #296]	; (800252c <HAL_RCC_OscConfig+0x504>)
 8002404:	f043 0301 	orr.w	r3, r3, #1
 8002408:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800240c:	f7fe f878 	bl	8000500 <HAL_GetTick>
 8002410:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002412:	e008      	b.n	8002426 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002414:	f7fe f874 	bl	8000500 <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	2b02      	cmp	r3, #2
 8002420:	d901      	bls.n	8002426 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e212      	b.n	800284c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002426:	4b41      	ldr	r3, [pc, #260]	; (800252c <HAL_RCC_OscConfig+0x504>)
 8002428:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800242c:	f003 0302 	and.w	r3, r3, #2
 8002430:	2b00      	cmp	r3, #0
 8002432:	d0ef      	beq.n	8002414 <HAL_RCC_OscConfig+0x3ec>
 8002434:	e01b      	b.n	800246e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002436:	4b3d      	ldr	r3, [pc, #244]	; (800252c <HAL_RCC_OscConfig+0x504>)
 8002438:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800243c:	4a3b      	ldr	r2, [pc, #236]	; (800252c <HAL_RCC_OscConfig+0x504>)
 800243e:	f023 0301 	bic.w	r3, r3, #1
 8002442:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002446:	f7fe f85b 	bl	8000500 <HAL_GetTick>
 800244a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800244c:	e008      	b.n	8002460 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800244e:	f7fe f857 	bl	8000500 <HAL_GetTick>
 8002452:	4602      	mov	r2, r0
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	2b02      	cmp	r3, #2
 800245a:	d901      	bls.n	8002460 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800245c:	2303      	movs	r3, #3
 800245e:	e1f5      	b.n	800284c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002460:	4b32      	ldr	r3, [pc, #200]	; (800252c <HAL_RCC_OscConfig+0x504>)
 8002462:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002466:	f003 0302 	and.w	r3, r3, #2
 800246a:	2b00      	cmp	r3, #0
 800246c:	d1ef      	bne.n	800244e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0304 	and.w	r3, r3, #4
 8002476:	2b00      	cmp	r3, #0
 8002478:	f000 80a6 	beq.w	80025c8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800247c:	2300      	movs	r3, #0
 800247e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002480:	4b2a      	ldr	r3, [pc, #168]	; (800252c <HAL_RCC_OscConfig+0x504>)
 8002482:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002484:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d10d      	bne.n	80024a8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800248c:	4b27      	ldr	r3, [pc, #156]	; (800252c <HAL_RCC_OscConfig+0x504>)
 800248e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002490:	4a26      	ldr	r2, [pc, #152]	; (800252c <HAL_RCC_OscConfig+0x504>)
 8002492:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002496:	6593      	str	r3, [r2, #88]	; 0x58
 8002498:	4b24      	ldr	r3, [pc, #144]	; (800252c <HAL_RCC_OscConfig+0x504>)
 800249a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800249c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024a0:	60bb      	str	r3, [r7, #8]
 80024a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024a4:	2301      	movs	r3, #1
 80024a6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024a8:	4b21      	ldr	r3, [pc, #132]	; (8002530 <HAL_RCC_OscConfig+0x508>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d118      	bne.n	80024e6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024b4:	4b1e      	ldr	r3, [pc, #120]	; (8002530 <HAL_RCC_OscConfig+0x508>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a1d      	ldr	r2, [pc, #116]	; (8002530 <HAL_RCC_OscConfig+0x508>)
 80024ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024be:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024c0:	f7fe f81e 	bl	8000500 <HAL_GetTick>
 80024c4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024c6:	e008      	b.n	80024da <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024c8:	f7fe f81a 	bl	8000500 <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d901      	bls.n	80024da <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e1b8      	b.n	800284c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024da:	4b15      	ldr	r3, [pc, #84]	; (8002530 <HAL_RCC_OscConfig+0x508>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d0f0      	beq.n	80024c8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d108      	bne.n	8002500 <HAL_RCC_OscConfig+0x4d8>
 80024ee:	4b0f      	ldr	r3, [pc, #60]	; (800252c <HAL_RCC_OscConfig+0x504>)
 80024f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024f4:	4a0d      	ldr	r2, [pc, #52]	; (800252c <HAL_RCC_OscConfig+0x504>)
 80024f6:	f043 0301 	orr.w	r3, r3, #1
 80024fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80024fe:	e029      	b.n	8002554 <HAL_RCC_OscConfig+0x52c>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	2b05      	cmp	r3, #5
 8002506:	d115      	bne.n	8002534 <HAL_RCC_OscConfig+0x50c>
 8002508:	4b08      	ldr	r3, [pc, #32]	; (800252c <HAL_RCC_OscConfig+0x504>)
 800250a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800250e:	4a07      	ldr	r2, [pc, #28]	; (800252c <HAL_RCC_OscConfig+0x504>)
 8002510:	f043 0304 	orr.w	r3, r3, #4
 8002514:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002518:	4b04      	ldr	r3, [pc, #16]	; (800252c <HAL_RCC_OscConfig+0x504>)
 800251a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800251e:	4a03      	ldr	r2, [pc, #12]	; (800252c <HAL_RCC_OscConfig+0x504>)
 8002520:	f043 0301 	orr.w	r3, r3, #1
 8002524:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002528:	e014      	b.n	8002554 <HAL_RCC_OscConfig+0x52c>
 800252a:	bf00      	nop
 800252c:	40021000 	.word	0x40021000
 8002530:	40007000 	.word	0x40007000
 8002534:	4b9d      	ldr	r3, [pc, #628]	; (80027ac <HAL_RCC_OscConfig+0x784>)
 8002536:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800253a:	4a9c      	ldr	r2, [pc, #624]	; (80027ac <HAL_RCC_OscConfig+0x784>)
 800253c:	f023 0301 	bic.w	r3, r3, #1
 8002540:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002544:	4b99      	ldr	r3, [pc, #612]	; (80027ac <HAL_RCC_OscConfig+0x784>)
 8002546:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800254a:	4a98      	ldr	r2, [pc, #608]	; (80027ac <HAL_RCC_OscConfig+0x784>)
 800254c:	f023 0304 	bic.w	r3, r3, #4
 8002550:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d016      	beq.n	800258a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800255c:	f7fd ffd0 	bl	8000500 <HAL_GetTick>
 8002560:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002562:	e00a      	b.n	800257a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002564:	f7fd ffcc 	bl	8000500 <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002572:	4293      	cmp	r3, r2
 8002574:	d901      	bls.n	800257a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e168      	b.n	800284c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800257a:	4b8c      	ldr	r3, [pc, #560]	; (80027ac <HAL_RCC_OscConfig+0x784>)
 800257c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002580:	f003 0302 	and.w	r3, r3, #2
 8002584:	2b00      	cmp	r3, #0
 8002586:	d0ed      	beq.n	8002564 <HAL_RCC_OscConfig+0x53c>
 8002588:	e015      	b.n	80025b6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800258a:	f7fd ffb9 	bl	8000500 <HAL_GetTick>
 800258e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002590:	e00a      	b.n	80025a8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002592:	f7fd ffb5 	bl	8000500 <HAL_GetTick>
 8002596:	4602      	mov	r2, r0
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	f241 3288 	movw	r2, #5000	; 0x1388
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d901      	bls.n	80025a8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80025a4:	2303      	movs	r3, #3
 80025a6:	e151      	b.n	800284c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025a8:	4b80      	ldr	r3, [pc, #512]	; (80027ac <HAL_RCC_OscConfig+0x784>)
 80025aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ae:	f003 0302 	and.w	r3, r3, #2
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d1ed      	bne.n	8002592 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025b6:	7ffb      	ldrb	r3, [r7, #31]
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d105      	bne.n	80025c8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025bc:	4b7b      	ldr	r3, [pc, #492]	; (80027ac <HAL_RCC_OscConfig+0x784>)
 80025be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025c0:	4a7a      	ldr	r2, [pc, #488]	; (80027ac <HAL_RCC_OscConfig+0x784>)
 80025c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025c6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0320 	and.w	r3, r3, #32
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d03c      	beq.n	800264e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d01c      	beq.n	8002616 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80025dc:	4b73      	ldr	r3, [pc, #460]	; (80027ac <HAL_RCC_OscConfig+0x784>)
 80025de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80025e2:	4a72      	ldr	r2, [pc, #456]	; (80027ac <HAL_RCC_OscConfig+0x784>)
 80025e4:	f043 0301 	orr.w	r3, r3, #1
 80025e8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025ec:	f7fd ff88 	bl	8000500 <HAL_GetTick>
 80025f0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80025f2:	e008      	b.n	8002606 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80025f4:	f7fd ff84 	bl	8000500 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e122      	b.n	800284c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002606:	4b69      	ldr	r3, [pc, #420]	; (80027ac <HAL_RCC_OscConfig+0x784>)
 8002608:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800260c:	f003 0302 	and.w	r3, r3, #2
 8002610:	2b00      	cmp	r3, #0
 8002612:	d0ef      	beq.n	80025f4 <HAL_RCC_OscConfig+0x5cc>
 8002614:	e01b      	b.n	800264e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002616:	4b65      	ldr	r3, [pc, #404]	; (80027ac <HAL_RCC_OscConfig+0x784>)
 8002618:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800261c:	4a63      	ldr	r2, [pc, #396]	; (80027ac <HAL_RCC_OscConfig+0x784>)
 800261e:	f023 0301 	bic.w	r3, r3, #1
 8002622:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002626:	f7fd ff6b 	bl	8000500 <HAL_GetTick>
 800262a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800262c:	e008      	b.n	8002640 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800262e:	f7fd ff67 	bl	8000500 <HAL_GetTick>
 8002632:	4602      	mov	r2, r0
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	2b02      	cmp	r3, #2
 800263a:	d901      	bls.n	8002640 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800263c:	2303      	movs	r3, #3
 800263e:	e105      	b.n	800284c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002640:	4b5a      	ldr	r3, [pc, #360]	; (80027ac <HAL_RCC_OscConfig+0x784>)
 8002642:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002646:	f003 0302 	and.w	r3, r3, #2
 800264a:	2b00      	cmp	r3, #0
 800264c:	d1ef      	bne.n	800262e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002652:	2b00      	cmp	r3, #0
 8002654:	f000 80f9 	beq.w	800284a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800265c:	2b02      	cmp	r3, #2
 800265e:	f040 80cf 	bne.w	8002800 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002662:	4b52      	ldr	r3, [pc, #328]	; (80027ac <HAL_RCC_OscConfig+0x784>)
 8002664:	68db      	ldr	r3, [r3, #12]
 8002666:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	f003 0203 	and.w	r2, r3, #3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002672:	429a      	cmp	r2, r3
 8002674:	d12c      	bne.n	80026d0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002680:	3b01      	subs	r3, #1
 8002682:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002684:	429a      	cmp	r2, r3
 8002686:	d123      	bne.n	80026d0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002692:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002694:	429a      	cmp	r2, r3
 8002696:	d11b      	bne.n	80026d0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026a2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d113      	bne.n	80026d0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026b2:	085b      	lsrs	r3, r3, #1
 80026b4:	3b01      	subs	r3, #1
 80026b6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d109      	bne.n	80026d0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c6:	085b      	lsrs	r3, r3, #1
 80026c8:	3b01      	subs	r3, #1
 80026ca:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d071      	beq.n	80027b4 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	2b0c      	cmp	r3, #12
 80026d4:	d068      	beq.n	80027a8 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80026d6:	4b35      	ldr	r3, [pc, #212]	; (80027ac <HAL_RCC_OscConfig+0x784>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d105      	bne.n	80026ee <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80026e2:	4b32      	ldr	r3, [pc, #200]	; (80027ac <HAL_RCC_OscConfig+0x784>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d001      	beq.n	80026f2 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e0ac      	b.n	800284c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80026f2:	4b2e      	ldr	r3, [pc, #184]	; (80027ac <HAL_RCC_OscConfig+0x784>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a2d      	ldr	r2, [pc, #180]	; (80027ac <HAL_RCC_OscConfig+0x784>)
 80026f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026fc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80026fe:	f7fd feff 	bl	8000500 <HAL_GetTick>
 8002702:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002704:	e008      	b.n	8002718 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002706:	f7fd fefb 	bl	8000500 <HAL_GetTick>
 800270a:	4602      	mov	r2, r0
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	2b02      	cmp	r3, #2
 8002712:	d901      	bls.n	8002718 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002714:	2303      	movs	r3, #3
 8002716:	e099      	b.n	800284c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002718:	4b24      	ldr	r3, [pc, #144]	; (80027ac <HAL_RCC_OscConfig+0x784>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002720:	2b00      	cmp	r3, #0
 8002722:	d1f0      	bne.n	8002706 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002724:	4b21      	ldr	r3, [pc, #132]	; (80027ac <HAL_RCC_OscConfig+0x784>)
 8002726:	68da      	ldr	r2, [r3, #12]
 8002728:	4b21      	ldr	r3, [pc, #132]	; (80027b0 <HAL_RCC_OscConfig+0x788>)
 800272a:	4013      	ands	r3, r2
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002730:	687a      	ldr	r2, [r7, #4]
 8002732:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002734:	3a01      	subs	r2, #1
 8002736:	0112      	lsls	r2, r2, #4
 8002738:	4311      	orrs	r1, r2
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800273e:	0212      	lsls	r2, r2, #8
 8002740:	4311      	orrs	r1, r2
 8002742:	687a      	ldr	r2, [r7, #4]
 8002744:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002746:	0852      	lsrs	r2, r2, #1
 8002748:	3a01      	subs	r2, #1
 800274a:	0552      	lsls	r2, r2, #21
 800274c:	4311      	orrs	r1, r2
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002752:	0852      	lsrs	r2, r2, #1
 8002754:	3a01      	subs	r2, #1
 8002756:	0652      	lsls	r2, r2, #25
 8002758:	4311      	orrs	r1, r2
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800275e:	06d2      	lsls	r2, r2, #27
 8002760:	430a      	orrs	r2, r1
 8002762:	4912      	ldr	r1, [pc, #72]	; (80027ac <HAL_RCC_OscConfig+0x784>)
 8002764:	4313      	orrs	r3, r2
 8002766:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002768:	4b10      	ldr	r3, [pc, #64]	; (80027ac <HAL_RCC_OscConfig+0x784>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a0f      	ldr	r2, [pc, #60]	; (80027ac <HAL_RCC_OscConfig+0x784>)
 800276e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002772:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002774:	4b0d      	ldr	r3, [pc, #52]	; (80027ac <HAL_RCC_OscConfig+0x784>)
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	4a0c      	ldr	r2, [pc, #48]	; (80027ac <HAL_RCC_OscConfig+0x784>)
 800277a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800277e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002780:	f7fd febe 	bl	8000500 <HAL_GetTick>
 8002784:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002786:	e008      	b.n	800279a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002788:	f7fd feba 	bl	8000500 <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	2b02      	cmp	r3, #2
 8002794:	d901      	bls.n	800279a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	e058      	b.n	800284c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800279a:	4b04      	ldr	r3, [pc, #16]	; (80027ac <HAL_RCC_OscConfig+0x784>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d0f0      	beq.n	8002788 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80027a6:	e050      	b.n	800284a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e04f      	b.n	800284c <HAL_RCC_OscConfig+0x824>
 80027ac:	40021000 	.word	0x40021000
 80027b0:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027b4:	4b27      	ldr	r3, [pc, #156]	; (8002854 <HAL_RCC_OscConfig+0x82c>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d144      	bne.n	800284a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80027c0:	4b24      	ldr	r3, [pc, #144]	; (8002854 <HAL_RCC_OscConfig+0x82c>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a23      	ldr	r2, [pc, #140]	; (8002854 <HAL_RCC_OscConfig+0x82c>)
 80027c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027ca:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80027cc:	4b21      	ldr	r3, [pc, #132]	; (8002854 <HAL_RCC_OscConfig+0x82c>)
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	4a20      	ldr	r2, [pc, #128]	; (8002854 <HAL_RCC_OscConfig+0x82c>)
 80027d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027d6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80027d8:	f7fd fe92 	bl	8000500 <HAL_GetTick>
 80027dc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027de:	e008      	b.n	80027f2 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027e0:	f7fd fe8e 	bl	8000500 <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d901      	bls.n	80027f2 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e02c      	b.n	800284c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027f2:	4b18      	ldr	r3, [pc, #96]	; (8002854 <HAL_RCC_OscConfig+0x82c>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d0f0      	beq.n	80027e0 <HAL_RCC_OscConfig+0x7b8>
 80027fe:	e024      	b.n	800284a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002800:	69bb      	ldr	r3, [r7, #24]
 8002802:	2b0c      	cmp	r3, #12
 8002804:	d01f      	beq.n	8002846 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002806:	4b13      	ldr	r3, [pc, #76]	; (8002854 <HAL_RCC_OscConfig+0x82c>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a12      	ldr	r2, [pc, #72]	; (8002854 <HAL_RCC_OscConfig+0x82c>)
 800280c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002810:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002812:	f7fd fe75 	bl	8000500 <HAL_GetTick>
 8002816:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002818:	e008      	b.n	800282c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800281a:	f7fd fe71 	bl	8000500 <HAL_GetTick>
 800281e:	4602      	mov	r2, r0
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	1ad3      	subs	r3, r2, r3
 8002824:	2b02      	cmp	r3, #2
 8002826:	d901      	bls.n	800282c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8002828:	2303      	movs	r3, #3
 800282a:	e00f      	b.n	800284c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800282c:	4b09      	ldr	r3, [pc, #36]	; (8002854 <HAL_RCC_OscConfig+0x82c>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d1f0      	bne.n	800281a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002838:	4b06      	ldr	r3, [pc, #24]	; (8002854 <HAL_RCC_OscConfig+0x82c>)
 800283a:	68da      	ldr	r2, [r3, #12]
 800283c:	4905      	ldr	r1, [pc, #20]	; (8002854 <HAL_RCC_OscConfig+0x82c>)
 800283e:	4b06      	ldr	r3, [pc, #24]	; (8002858 <HAL_RCC_OscConfig+0x830>)
 8002840:	4013      	ands	r3, r2
 8002842:	60cb      	str	r3, [r1, #12]
 8002844:	e001      	b.n	800284a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e000      	b.n	800284c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800284a:	2300      	movs	r3, #0
}
 800284c:	4618      	mov	r0, r3
 800284e:	3720      	adds	r7, #32
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}
 8002854:	40021000 	.word	0x40021000
 8002858:	feeefffc 	.word	0xfeeefffc

0800285c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b086      	sub	sp, #24
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002866:	2300      	movs	r3, #0
 8002868:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d101      	bne.n	8002874 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	e11d      	b.n	8002ab0 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002874:	4b90      	ldr	r3, [pc, #576]	; (8002ab8 <HAL_RCC_ClockConfig+0x25c>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 030f 	and.w	r3, r3, #15
 800287c:	683a      	ldr	r2, [r7, #0]
 800287e:	429a      	cmp	r2, r3
 8002880:	d910      	bls.n	80028a4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002882:	4b8d      	ldr	r3, [pc, #564]	; (8002ab8 <HAL_RCC_ClockConfig+0x25c>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f023 020f 	bic.w	r2, r3, #15
 800288a:	498b      	ldr	r1, [pc, #556]	; (8002ab8 <HAL_RCC_ClockConfig+0x25c>)
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	4313      	orrs	r3, r2
 8002890:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002892:	4b89      	ldr	r3, [pc, #548]	; (8002ab8 <HAL_RCC_ClockConfig+0x25c>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 030f 	and.w	r3, r3, #15
 800289a:	683a      	ldr	r2, [r7, #0]
 800289c:	429a      	cmp	r2, r3
 800289e:	d001      	beq.n	80028a4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e105      	b.n	8002ab0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 0302 	and.w	r3, r3, #2
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d010      	beq.n	80028d2 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	689a      	ldr	r2, [r3, #8]
 80028b4:	4b81      	ldr	r3, [pc, #516]	; (8002abc <HAL_RCC_ClockConfig+0x260>)
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028bc:	429a      	cmp	r2, r3
 80028be:	d908      	bls.n	80028d2 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028c0:	4b7e      	ldr	r3, [pc, #504]	; (8002abc <HAL_RCC_ClockConfig+0x260>)
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	497b      	ldr	r1, [pc, #492]	; (8002abc <HAL_RCC_ClockConfig+0x260>)
 80028ce:	4313      	orrs	r3, r2
 80028d0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0301 	and.w	r3, r3, #1
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d079      	beq.n	80029d2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	2b03      	cmp	r3, #3
 80028e4:	d11e      	bne.n	8002924 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028e6:	4b75      	ldr	r3, [pc, #468]	; (8002abc <HAL_RCC_ClockConfig+0x260>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d101      	bne.n	80028f6 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e0dc      	b.n	8002ab0 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80028f6:	f000 f9dd 	bl	8002cb4 <RCC_GetSysClockFreqFromPLLSource>
 80028fa:	4603      	mov	r3, r0
 80028fc:	4a70      	ldr	r2, [pc, #448]	; (8002ac0 <HAL_RCC_ClockConfig+0x264>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d946      	bls.n	8002990 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002902:	4b6e      	ldr	r3, [pc, #440]	; (8002abc <HAL_RCC_ClockConfig+0x260>)
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d140      	bne.n	8002990 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800290e:	4b6b      	ldr	r3, [pc, #428]	; (8002abc <HAL_RCC_ClockConfig+0x260>)
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002916:	4a69      	ldr	r2, [pc, #420]	; (8002abc <HAL_RCC_ClockConfig+0x260>)
 8002918:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800291c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800291e:	2380      	movs	r3, #128	; 0x80
 8002920:	617b      	str	r3, [r7, #20]
 8002922:	e035      	b.n	8002990 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	2b02      	cmp	r3, #2
 800292a:	d107      	bne.n	800293c <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800292c:	4b63      	ldr	r3, [pc, #396]	; (8002abc <HAL_RCC_ClockConfig+0x260>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002934:	2b00      	cmp	r3, #0
 8002936:	d115      	bne.n	8002964 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e0b9      	b.n	8002ab0 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d107      	bne.n	8002954 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002944:	4b5d      	ldr	r3, [pc, #372]	; (8002abc <HAL_RCC_ClockConfig+0x260>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0302 	and.w	r3, r3, #2
 800294c:	2b00      	cmp	r3, #0
 800294e:	d109      	bne.n	8002964 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e0ad      	b.n	8002ab0 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002954:	4b59      	ldr	r3, [pc, #356]	; (8002abc <HAL_RCC_ClockConfig+0x260>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800295c:	2b00      	cmp	r3, #0
 800295e:	d101      	bne.n	8002964 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e0a5      	b.n	8002ab0 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002964:	f000 f8b4 	bl	8002ad0 <HAL_RCC_GetSysClockFreq>
 8002968:	4603      	mov	r3, r0
 800296a:	4a55      	ldr	r2, [pc, #340]	; (8002ac0 <HAL_RCC_ClockConfig+0x264>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d90f      	bls.n	8002990 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002970:	4b52      	ldr	r3, [pc, #328]	; (8002abc <HAL_RCC_ClockConfig+0x260>)
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d109      	bne.n	8002990 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800297c:	4b4f      	ldr	r3, [pc, #316]	; (8002abc <HAL_RCC_ClockConfig+0x260>)
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002984:	4a4d      	ldr	r2, [pc, #308]	; (8002abc <HAL_RCC_ClockConfig+0x260>)
 8002986:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800298a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800298c:	2380      	movs	r3, #128	; 0x80
 800298e:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002990:	4b4a      	ldr	r3, [pc, #296]	; (8002abc <HAL_RCC_ClockConfig+0x260>)
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	f023 0203 	bic.w	r2, r3, #3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	4947      	ldr	r1, [pc, #284]	; (8002abc <HAL_RCC_ClockConfig+0x260>)
 800299e:	4313      	orrs	r3, r2
 80029a0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029a2:	f7fd fdad 	bl	8000500 <HAL_GetTick>
 80029a6:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029a8:	e00a      	b.n	80029c0 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029aa:	f7fd fda9 	bl	8000500 <HAL_GetTick>
 80029ae:	4602      	mov	r2, r0
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d901      	bls.n	80029c0 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80029bc:	2303      	movs	r3, #3
 80029be:	e077      	b.n	8002ab0 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029c0:	4b3e      	ldr	r3, [pc, #248]	; (8002abc <HAL_RCC_ClockConfig+0x260>)
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	f003 020c 	and.w	r2, r3, #12
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d1eb      	bne.n	80029aa <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	2b80      	cmp	r3, #128	; 0x80
 80029d6:	d105      	bne.n	80029e4 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80029d8:	4b38      	ldr	r3, [pc, #224]	; (8002abc <HAL_RCC_ClockConfig+0x260>)
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	4a37      	ldr	r2, [pc, #220]	; (8002abc <HAL_RCC_ClockConfig+0x260>)
 80029de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80029e2:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0302 	and.w	r3, r3, #2
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d010      	beq.n	8002a12 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	689a      	ldr	r2, [r3, #8]
 80029f4:	4b31      	ldr	r3, [pc, #196]	; (8002abc <HAL_RCC_ClockConfig+0x260>)
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d208      	bcs.n	8002a12 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a00:	4b2e      	ldr	r3, [pc, #184]	; (8002abc <HAL_RCC_ClockConfig+0x260>)
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	492b      	ldr	r1, [pc, #172]	; (8002abc <HAL_RCC_ClockConfig+0x260>)
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a12:	4b29      	ldr	r3, [pc, #164]	; (8002ab8 <HAL_RCC_ClockConfig+0x25c>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 030f 	and.w	r3, r3, #15
 8002a1a:	683a      	ldr	r2, [r7, #0]
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d210      	bcs.n	8002a42 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a20:	4b25      	ldr	r3, [pc, #148]	; (8002ab8 <HAL_RCC_ClockConfig+0x25c>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f023 020f 	bic.w	r2, r3, #15
 8002a28:	4923      	ldr	r1, [pc, #140]	; (8002ab8 <HAL_RCC_ClockConfig+0x25c>)
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a30:	4b21      	ldr	r3, [pc, #132]	; (8002ab8 <HAL_RCC_ClockConfig+0x25c>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 030f 	and.w	r3, r3, #15
 8002a38:	683a      	ldr	r2, [r7, #0]
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d001      	beq.n	8002a42 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e036      	b.n	8002ab0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0304 	and.w	r3, r3, #4
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d008      	beq.n	8002a60 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a4e:	4b1b      	ldr	r3, [pc, #108]	; (8002abc <HAL_RCC_ClockConfig+0x260>)
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	4918      	ldr	r1, [pc, #96]	; (8002abc <HAL_RCC_ClockConfig+0x260>)
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0308 	and.w	r3, r3, #8
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d009      	beq.n	8002a80 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a6c:	4b13      	ldr	r3, [pc, #76]	; (8002abc <HAL_RCC_ClockConfig+0x260>)
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	691b      	ldr	r3, [r3, #16]
 8002a78:	00db      	lsls	r3, r3, #3
 8002a7a:	4910      	ldr	r1, [pc, #64]	; (8002abc <HAL_RCC_ClockConfig+0x260>)
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a80:	f000 f826 	bl	8002ad0 <HAL_RCC_GetSysClockFreq>
 8002a84:	4602      	mov	r2, r0
 8002a86:	4b0d      	ldr	r3, [pc, #52]	; (8002abc <HAL_RCC_ClockConfig+0x260>)
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	091b      	lsrs	r3, r3, #4
 8002a8c:	f003 030f 	and.w	r3, r3, #15
 8002a90:	490c      	ldr	r1, [pc, #48]	; (8002ac4 <HAL_RCC_ClockConfig+0x268>)
 8002a92:	5ccb      	ldrb	r3, [r1, r3]
 8002a94:	f003 031f 	and.w	r3, r3, #31
 8002a98:	fa22 f303 	lsr.w	r3, r2, r3
 8002a9c:	4a0a      	ldr	r2, [pc, #40]	; (8002ac8 <HAL_RCC_ClockConfig+0x26c>)
 8002a9e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002aa0:	4b0a      	ldr	r3, [pc, #40]	; (8002acc <HAL_RCC_ClockConfig+0x270>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f7fd fcdb 	bl	8000460 <HAL_InitTick>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	73fb      	strb	r3, [r7, #15]

  return status;
 8002aae:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3718      	adds	r7, #24
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	40022000 	.word	0x40022000
 8002abc:	40021000 	.word	0x40021000
 8002ac0:	04c4b400 	.word	0x04c4b400
 8002ac4:	08008a0c 	.word	0x08008a0c
 8002ac8:	20000000 	.word	0x20000000
 8002acc:	20000004 	.word	0x20000004

08002ad0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b089      	sub	sp, #36	; 0x24
 8002ad4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	61fb      	str	r3, [r7, #28]
 8002ada:	2300      	movs	r3, #0
 8002adc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ade:	4b3e      	ldr	r3, [pc, #248]	; (8002bd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	f003 030c 	and.w	r3, r3, #12
 8002ae6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ae8:	4b3b      	ldr	r3, [pc, #236]	; (8002bd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	f003 0303 	and.w	r3, r3, #3
 8002af0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d005      	beq.n	8002b04 <HAL_RCC_GetSysClockFreq+0x34>
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	2b0c      	cmp	r3, #12
 8002afc:	d121      	bne.n	8002b42 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d11e      	bne.n	8002b42 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002b04:	4b34      	ldr	r3, [pc, #208]	; (8002bd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0308 	and.w	r3, r3, #8
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d107      	bne.n	8002b20 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002b10:	4b31      	ldr	r3, [pc, #196]	; (8002bd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b16:	0a1b      	lsrs	r3, r3, #8
 8002b18:	f003 030f 	and.w	r3, r3, #15
 8002b1c:	61fb      	str	r3, [r7, #28]
 8002b1e:	e005      	b.n	8002b2c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002b20:	4b2d      	ldr	r3, [pc, #180]	; (8002bd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	091b      	lsrs	r3, r3, #4
 8002b26:	f003 030f 	and.w	r3, r3, #15
 8002b2a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002b2c:	4a2b      	ldr	r2, [pc, #172]	; (8002bdc <HAL_RCC_GetSysClockFreq+0x10c>)
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b34:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d10d      	bne.n	8002b58 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b40:	e00a      	b.n	8002b58 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	2b04      	cmp	r3, #4
 8002b46:	d102      	bne.n	8002b4e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002b48:	4b25      	ldr	r3, [pc, #148]	; (8002be0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002b4a:	61bb      	str	r3, [r7, #24]
 8002b4c:	e004      	b.n	8002b58 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	2b08      	cmp	r3, #8
 8002b52:	d101      	bne.n	8002b58 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002b54:	4b23      	ldr	r3, [pc, #140]	; (8002be4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002b56:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	2b0c      	cmp	r3, #12
 8002b5c:	d134      	bne.n	8002bc8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b5e:	4b1e      	ldr	r3, [pc, #120]	; (8002bd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b60:	68db      	ldr	r3, [r3, #12]
 8002b62:	f003 0303 	and.w	r3, r3, #3
 8002b66:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d003      	beq.n	8002b76 <HAL_RCC_GetSysClockFreq+0xa6>
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	2b03      	cmp	r3, #3
 8002b72:	d003      	beq.n	8002b7c <HAL_RCC_GetSysClockFreq+0xac>
 8002b74:	e005      	b.n	8002b82 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002b76:	4b1a      	ldr	r3, [pc, #104]	; (8002be0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002b78:	617b      	str	r3, [r7, #20]
      break;
 8002b7a:	e005      	b.n	8002b88 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002b7c:	4b19      	ldr	r3, [pc, #100]	; (8002be4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002b7e:	617b      	str	r3, [r7, #20]
      break;
 8002b80:	e002      	b.n	8002b88 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	617b      	str	r3, [r7, #20]
      break;
 8002b86:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b88:	4b13      	ldr	r3, [pc, #76]	; (8002bd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	091b      	lsrs	r3, r3, #4
 8002b8e:	f003 030f 	and.w	r3, r3, #15
 8002b92:	3301      	adds	r3, #1
 8002b94:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002b96:	4b10      	ldr	r3, [pc, #64]	; (8002bd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	0a1b      	lsrs	r3, r3, #8
 8002b9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ba0:	697a      	ldr	r2, [r7, #20]
 8002ba2:	fb03 f202 	mul.w	r2, r3, r2
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bac:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002bae:	4b0a      	ldr	r3, [pc, #40]	; (8002bd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	0e5b      	lsrs	r3, r3, #25
 8002bb4:	f003 0303 	and.w	r3, r3, #3
 8002bb8:	3301      	adds	r3, #1
 8002bba:	005b      	lsls	r3, r3, #1
 8002bbc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002bbe:	697a      	ldr	r2, [r7, #20]
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bc6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002bc8:	69bb      	ldr	r3, [r7, #24]
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3724      	adds	r7, #36	; 0x24
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr
 8002bd6:	bf00      	nop
 8002bd8:	40021000 	.word	0x40021000
 8002bdc:	08008a1c 	.word	0x08008a1c
 8002be0:	00f42400 	.word	0x00f42400
 8002be4:	007a1200 	.word	0x007a1200

08002be8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002be8:	b480      	push	{r7}
 8002bea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bec:	4b03      	ldr	r3, [pc, #12]	; (8002bfc <HAL_RCC_GetHCLKFreq+0x14>)
 8002bee:	681b      	ldr	r3, [r3, #0]
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr
 8002bfa:	bf00      	nop
 8002bfc:	20000000 	.word	0x20000000

08002c00 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b086      	sub	sp, #24
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002c08:	2300      	movs	r3, #0
 8002c0a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002c0c:	4b27      	ldr	r3, [pc, #156]	; (8002cac <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002c0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d003      	beq.n	8002c20 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002c18:	f7ff f932 	bl	8001e80 <HAL_PWREx_GetVoltageRange>
 8002c1c:	6178      	str	r0, [r7, #20]
 8002c1e:	e014      	b.n	8002c4a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c20:	4b22      	ldr	r3, [pc, #136]	; (8002cac <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002c22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c24:	4a21      	ldr	r2, [pc, #132]	; (8002cac <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002c26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c2a:	6593      	str	r3, [r2, #88]	; 0x58
 8002c2c:	4b1f      	ldr	r3, [pc, #124]	; (8002cac <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002c2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c34:	60fb      	str	r3, [r7, #12]
 8002c36:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002c38:	f7ff f922 	bl	8001e80 <HAL_PWREx_GetVoltageRange>
 8002c3c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002c3e:	4b1b      	ldr	r3, [pc, #108]	; (8002cac <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002c40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c42:	4a1a      	ldr	r2, [pc, #104]	; (8002cac <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002c44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c48:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c50:	d10b      	bne.n	8002c6a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2b80      	cmp	r3, #128	; 0x80
 8002c56:	d913      	bls.n	8002c80 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2ba0      	cmp	r3, #160	; 0xa0
 8002c5c:	d902      	bls.n	8002c64 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c5e:	2302      	movs	r3, #2
 8002c60:	613b      	str	r3, [r7, #16]
 8002c62:	e00d      	b.n	8002c80 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c64:	2301      	movs	r3, #1
 8002c66:	613b      	str	r3, [r7, #16]
 8002c68:	e00a      	b.n	8002c80 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2b7f      	cmp	r3, #127	; 0x7f
 8002c6e:	d902      	bls.n	8002c76 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002c70:	2302      	movs	r3, #2
 8002c72:	613b      	str	r3, [r7, #16]
 8002c74:	e004      	b.n	8002c80 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2b70      	cmp	r3, #112	; 0x70
 8002c7a:	d101      	bne.n	8002c80 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002c80:	4b0b      	ldr	r3, [pc, #44]	; (8002cb0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f023 020f 	bic.w	r2, r3, #15
 8002c88:	4909      	ldr	r1, [pc, #36]	; (8002cb0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002c90:	4b07      	ldr	r3, [pc, #28]	; (8002cb0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 030f 	and.w	r3, r3, #15
 8002c98:	693a      	ldr	r2, [r7, #16]
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d001      	beq.n	8002ca2 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e000      	b.n	8002ca4 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002ca2:	2300      	movs	r3, #0
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3718      	adds	r7, #24
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	40021000 	.word	0x40021000
 8002cb0:	40022000 	.word	0x40022000

08002cb4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b087      	sub	sp, #28
 8002cb8:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002cba:	4b2d      	ldr	r3, [pc, #180]	; (8002d70 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002cbc:	68db      	ldr	r3, [r3, #12]
 8002cbe:	f003 0303 	and.w	r3, r3, #3
 8002cc2:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2b03      	cmp	r3, #3
 8002cc8:	d00b      	beq.n	8002ce2 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2b03      	cmp	r3, #3
 8002cce:	d825      	bhi.n	8002d1c <RCC_GetSysClockFreqFromPLLSource+0x68>
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d008      	beq.n	8002ce8 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2b02      	cmp	r3, #2
 8002cda:	d11f      	bne.n	8002d1c <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002cdc:	4b25      	ldr	r3, [pc, #148]	; (8002d74 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002cde:	613b      	str	r3, [r7, #16]
    break;
 8002ce0:	e01f      	b.n	8002d22 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8002ce2:	4b25      	ldr	r3, [pc, #148]	; (8002d78 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002ce4:	613b      	str	r3, [r7, #16]
    break;
 8002ce6:	e01c      	b.n	8002d22 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002ce8:	4b21      	ldr	r3, [pc, #132]	; (8002d70 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0308 	and.w	r3, r3, #8
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d107      	bne.n	8002d04 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002cf4:	4b1e      	ldr	r3, [pc, #120]	; (8002d70 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002cf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cfa:	0a1b      	lsrs	r3, r3, #8
 8002cfc:	f003 030f 	and.w	r3, r3, #15
 8002d00:	617b      	str	r3, [r7, #20]
 8002d02:	e005      	b.n	8002d10 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002d04:	4b1a      	ldr	r3, [pc, #104]	; (8002d70 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	091b      	lsrs	r3, r3, #4
 8002d0a:	f003 030f 	and.w	r3, r3, #15
 8002d0e:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8002d10:	4a1a      	ldr	r2, [pc, #104]	; (8002d7c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d18:	613b      	str	r3, [r7, #16]
    break;
 8002d1a:	e002      	b.n	8002d22 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	613b      	str	r3, [r7, #16]
    break;
 8002d20:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d22:	4b13      	ldr	r3, [pc, #76]	; (8002d70 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002d24:	68db      	ldr	r3, [r3, #12]
 8002d26:	091b      	lsrs	r3, r3, #4
 8002d28:	f003 030f 	and.w	r3, r3, #15
 8002d2c:	3301      	adds	r3, #1
 8002d2e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002d30:	4b0f      	ldr	r3, [pc, #60]	; (8002d70 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	0a1b      	lsrs	r3, r3, #8
 8002d36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d3a:	693a      	ldr	r2, [r7, #16]
 8002d3c:	fb03 f202 	mul.w	r2, r3, r2
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d46:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002d48:	4b09      	ldr	r3, [pc, #36]	; (8002d70 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	0e5b      	lsrs	r3, r3, #25
 8002d4e:	f003 0303 	and.w	r3, r3, #3
 8002d52:	3301      	adds	r3, #1
 8002d54:	005b      	lsls	r3, r3, #1
 8002d56:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002d58:	693a      	ldr	r2, [r7, #16]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d60:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002d62:	683b      	ldr	r3, [r7, #0]
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	371c      	adds	r7, #28
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr
 8002d70:	40021000 	.word	0x40021000
 8002d74:	00f42400 	.word	0x00f42400
 8002d78:	007a1200 	.word	0x007a1200
 8002d7c:	08008a1c 	.word	0x08008a1c

08002d80 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b086      	sub	sp, #24
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002d88:	2300      	movs	r3, #0
 8002d8a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d040      	beq.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002da0:	2b80      	cmp	r3, #128	; 0x80
 8002da2:	d02a      	beq.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002da4:	2b80      	cmp	r3, #128	; 0x80
 8002da6:	d825      	bhi.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002da8:	2b60      	cmp	r3, #96	; 0x60
 8002daa:	d026      	beq.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002dac:	2b60      	cmp	r3, #96	; 0x60
 8002dae:	d821      	bhi.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002db0:	2b40      	cmp	r3, #64	; 0x40
 8002db2:	d006      	beq.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8002db4:	2b40      	cmp	r3, #64	; 0x40
 8002db6:	d81d      	bhi.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d009      	beq.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8002dbc:	2b20      	cmp	r3, #32
 8002dbe:	d010      	beq.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8002dc0:	e018      	b.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002dc2:	4b89      	ldr	r3, [pc, #548]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	4a88      	ldr	r2, [pc, #544]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002dc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dcc:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002dce:	e015      	b.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	3304      	adds	r3, #4
 8002dd4:	2100      	movs	r1, #0
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f000 fb02 	bl	80033e0 <RCCEx_PLLSAI1_Config>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002de0:	e00c      	b.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	3320      	adds	r3, #32
 8002de6:	2100      	movs	r1, #0
 8002de8:	4618      	mov	r0, r3
 8002dea:	f000 fbed 	bl	80035c8 <RCCEx_PLLSAI2_Config>
 8002dee:	4603      	mov	r3, r0
 8002df0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002df2:	e003      	b.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	74fb      	strb	r3, [r7, #19]
      break;
 8002df8:	e000      	b.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8002dfa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002dfc:	7cfb      	ldrb	r3, [r7, #19]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d10b      	bne.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e02:	4b79      	ldr	r3, [pc, #484]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002e04:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002e08:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e10:	4975      	ldr	r1, [pc, #468]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002e12:	4313      	orrs	r3, r2
 8002e14:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002e18:	e001      	b.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e1a:	7cfb      	ldrb	r3, [r7, #19]
 8002e1c:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d047      	beq.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e32:	d030      	beq.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002e34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e38:	d82a      	bhi.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002e3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e3e:	d02a      	beq.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002e40:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e44:	d824      	bhi.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002e46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e4a:	d008      	beq.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0xde>
 8002e4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e50:	d81e      	bhi.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d00a      	beq.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002e56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e5a:	d010      	beq.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002e5c:	e018      	b.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002e5e:	4b62      	ldr	r3, [pc, #392]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002e60:	68db      	ldr	r3, [r3, #12]
 8002e62:	4a61      	ldr	r2, [pc, #388]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002e64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e68:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002e6a:	e015      	b.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	3304      	adds	r3, #4
 8002e70:	2100      	movs	r1, #0
 8002e72:	4618      	mov	r0, r3
 8002e74:	f000 fab4 	bl	80033e0 <RCCEx_PLLSAI1_Config>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002e7c:	e00c      	b.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	3320      	adds	r3, #32
 8002e82:	2100      	movs	r1, #0
 8002e84:	4618      	mov	r0, r3
 8002e86:	f000 fb9f 	bl	80035c8 <RCCEx_PLLSAI2_Config>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002e8e:	e003      	b.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	74fb      	strb	r3, [r7, #19]
      break;
 8002e94:	e000      	b.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8002e96:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e98:	7cfb      	ldrb	r3, [r7, #19]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d10b      	bne.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002e9e:	4b52      	ldr	r3, [pc, #328]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ea0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002ea4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eac:	494e      	ldr	r1, [pc, #312]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002eb4:	e001      	b.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002eb6:	7cfb      	ldrb	r3, [r7, #19]
 8002eb8:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	f000 809f 	beq.w	8003006 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002ecc:	4b46      	ldr	r3, [pc, #280]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ed0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d101      	bne.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e000      	b.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002edc:	2300      	movs	r3, #0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d00d      	beq.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ee2:	4b41      	ldr	r3, [pc, #260]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ee6:	4a40      	ldr	r2, [pc, #256]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ee8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002eec:	6593      	str	r3, [r2, #88]	; 0x58
 8002eee:	4b3e      	ldr	r3, [pc, #248]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ef2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ef6:	60bb      	str	r3, [r7, #8]
 8002ef8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002efa:	2301      	movs	r3, #1
 8002efc:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002efe:	4b3b      	ldr	r3, [pc, #236]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a3a      	ldr	r2, [pc, #232]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002f04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f08:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f0a:	f7fd faf9 	bl	8000500 <HAL_GetTick>
 8002f0e:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002f10:	e009      	b.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f12:	f7fd faf5 	bl	8000500 <HAL_GetTick>
 8002f16:	4602      	mov	r2, r0
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	1ad3      	subs	r3, r2, r3
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	d902      	bls.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8002f20:	2303      	movs	r3, #3
 8002f22:	74fb      	strb	r3, [r7, #19]
        break;
 8002f24:	e005      	b.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002f26:	4b31      	ldr	r3, [pc, #196]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d0ef      	beq.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8002f32:	7cfb      	ldrb	r3, [r7, #19]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d15b      	bne.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002f38:	4b2b      	ldr	r3, [pc, #172]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f42:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d01f      	beq.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f50:	697a      	ldr	r2, [r7, #20]
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d019      	beq.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002f56:	4b24      	ldr	r3, [pc, #144]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f60:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002f62:	4b21      	ldr	r3, [pc, #132]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f68:	4a1f      	ldr	r2, [pc, #124]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f6e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002f72:	4b1d      	ldr	r3, [pc, #116]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f78:	4a1b      	ldr	r2, [pc, #108]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002f82:	4a19      	ldr	r2, [pc, #100]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	f003 0301 	and.w	r3, r3, #1
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d016      	beq.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f94:	f7fd fab4 	bl	8000500 <HAL_GetTick>
 8002f98:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f9a:	e00b      	b.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f9c:	f7fd fab0 	bl	8000500 <HAL_GetTick>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d902      	bls.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	74fb      	strb	r3, [r7, #19]
            break;
 8002fb2:	e006      	b.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fb4:	4b0c      	ldr	r3, [pc, #48]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fba:	f003 0302 	and.w	r3, r3, #2
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d0ec      	beq.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8002fc2:	7cfb      	ldrb	r3, [r7, #19]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d10c      	bne.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002fc8:	4b07      	ldr	r3, [pc, #28]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fce:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fd8:	4903      	ldr	r1, [pc, #12]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002fe0:	e008      	b.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002fe2:	7cfb      	ldrb	r3, [r7, #19]
 8002fe4:	74bb      	strb	r3, [r7, #18]
 8002fe6:	e005      	b.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8002fe8:	40021000 	.word	0x40021000
 8002fec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ff0:	7cfb      	ldrb	r3, [r7, #19]
 8002ff2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ff4:	7c7b      	ldrb	r3, [r7, #17]
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d105      	bne.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ffa:	4ba0      	ldr	r3, [pc, #640]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ffe:	4a9f      	ldr	r2, [pc, #636]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003000:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003004:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0301 	and.w	r3, r3, #1
 800300e:	2b00      	cmp	r3, #0
 8003010:	d00a      	beq.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003012:	4b9a      	ldr	r3, [pc, #616]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003014:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003018:	f023 0203 	bic.w	r2, r3, #3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003020:	4996      	ldr	r1, [pc, #600]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003022:	4313      	orrs	r3, r2
 8003024:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 0302 	and.w	r3, r3, #2
 8003030:	2b00      	cmp	r3, #0
 8003032:	d00a      	beq.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003034:	4b91      	ldr	r3, [pc, #580]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003036:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800303a:	f023 020c 	bic.w	r2, r3, #12
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003042:	498e      	ldr	r1, [pc, #568]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003044:	4313      	orrs	r3, r2
 8003046:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0304 	and.w	r3, r3, #4
 8003052:	2b00      	cmp	r3, #0
 8003054:	d00a      	beq.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003056:	4b89      	ldr	r3, [pc, #548]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003058:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800305c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003064:	4985      	ldr	r1, [pc, #532]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003066:	4313      	orrs	r3, r2
 8003068:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 0308 	and.w	r3, r3, #8
 8003074:	2b00      	cmp	r3, #0
 8003076:	d00a      	beq.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003078:	4b80      	ldr	r3, [pc, #512]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800307a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800307e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003086:	497d      	ldr	r1, [pc, #500]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003088:	4313      	orrs	r3, r2
 800308a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0310 	and.w	r3, r3, #16
 8003096:	2b00      	cmp	r3, #0
 8003098:	d00a      	beq.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800309a:	4b78      	ldr	r3, [pc, #480]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800309c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030a8:	4974      	ldr	r1, [pc, #464]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80030aa:	4313      	orrs	r3, r2
 80030ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 0320 	and.w	r3, r3, #32
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d00a      	beq.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80030bc:	4b6f      	ldr	r3, [pc, #444]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80030be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030c2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030ca:	496c      	ldr	r1, [pc, #432]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80030cc:	4313      	orrs	r3, r2
 80030ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d00a      	beq.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80030de:	4b67      	ldr	r3, [pc, #412]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80030e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030e4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80030ec:	4963      	ldr	r1, [pc, #396]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80030ee:	4313      	orrs	r3, r2
 80030f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d00a      	beq.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003100:	4b5e      	ldr	r3, [pc, #376]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003106:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800310e:	495b      	ldr	r1, [pc, #364]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003110:	4313      	orrs	r3, r2
 8003112:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800311e:	2b00      	cmp	r3, #0
 8003120:	d00a      	beq.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003122:	4b56      	ldr	r3, [pc, #344]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003124:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003128:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003130:	4952      	ldr	r1, [pc, #328]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003132:	4313      	orrs	r3, r2
 8003134:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003140:	2b00      	cmp	r3, #0
 8003142:	d00a      	beq.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003144:	4b4d      	ldr	r3, [pc, #308]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800314a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003152:	494a      	ldr	r1, [pc, #296]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003154:	4313      	orrs	r3, r2
 8003156:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003162:	2b00      	cmp	r3, #0
 8003164:	d00a      	beq.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003166:	4b45      	ldr	r3, [pc, #276]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003168:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800316c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003174:	4941      	ldr	r1, [pc, #260]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003176:	4313      	orrs	r3, r2
 8003178:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003184:	2b00      	cmp	r3, #0
 8003186:	d00a      	beq.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003188:	4b3c      	ldr	r3, [pc, #240]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800318a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800318e:	f023 0203 	bic.w	r2, r3, #3
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003196:	4939      	ldr	r1, [pc, #228]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003198:	4313      	orrs	r3, r2
 800319a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d028      	beq.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80031aa:	4b34      	ldr	r3, [pc, #208]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031b0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031b8:	4930      	ldr	r1, [pc, #192]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031ba:	4313      	orrs	r3, r2
 80031bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031c8:	d106      	bne.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80031ca:	4b2c      	ldr	r3, [pc, #176]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	4a2b      	ldr	r2, [pc, #172]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80031d4:	60d3      	str	r3, [r2, #12]
 80031d6:	e011      	b.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80031e0:	d10c      	bne.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	3304      	adds	r3, #4
 80031e6:	2101      	movs	r1, #1
 80031e8:	4618      	mov	r0, r3
 80031ea:	f000 f8f9 	bl	80033e0 <RCCEx_PLLSAI1_Config>
 80031ee:	4603      	mov	r3, r0
 80031f0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80031f2:	7cfb      	ldrb	r3, [r7, #19]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d001      	beq.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80031f8:	7cfb      	ldrb	r3, [r7, #19]
 80031fa:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003204:	2b00      	cmp	r3, #0
 8003206:	d04d      	beq.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800320c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003210:	d108      	bne.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8003212:	4b1a      	ldr	r3, [pc, #104]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003214:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003218:	4a18      	ldr	r2, [pc, #96]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800321a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800321e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003222:	e012      	b.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003224:	4b15      	ldr	r3, [pc, #84]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003226:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800322a:	4a14      	ldr	r2, [pc, #80]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800322c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003230:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003234:	4b11      	ldr	r3, [pc, #68]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003236:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800323a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003242:	490e      	ldr	r1, [pc, #56]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003244:	4313      	orrs	r3, r2
 8003246:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800324e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003252:	d106      	bne.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003254:	4b09      	ldr	r3, [pc, #36]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	4a08      	ldr	r2, [pc, #32]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800325a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800325e:	60d3      	str	r3, [r2, #12]
 8003260:	e020      	b.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003266:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800326a:	d109      	bne.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800326c:	4b03      	ldr	r3, [pc, #12]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	4a02      	ldr	r2, [pc, #8]	; (800327c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003272:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003276:	60d3      	str	r3, [r2, #12]
 8003278:	e014      	b.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800327a:	bf00      	nop
 800327c:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003284:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003288:	d10c      	bne.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	3304      	adds	r3, #4
 800328e:	2101      	movs	r1, #1
 8003290:	4618      	mov	r0, r3
 8003292:	f000 f8a5 	bl	80033e0 <RCCEx_PLLSAI1_Config>
 8003296:	4603      	mov	r3, r0
 8003298:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800329a:	7cfb      	ldrb	r3, [r7, #19]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d001      	beq.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80032a0:	7cfb      	ldrb	r3, [r7, #19]
 80032a2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d028      	beq.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80032b0:	4b4a      	ldr	r3, [pc, #296]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032b6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032be:	4947      	ldr	r1, [pc, #284]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032c0:	4313      	orrs	r3, r2
 80032c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032ce:	d106      	bne.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032d0:	4b42      	ldr	r3, [pc, #264]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	4a41      	ldr	r2, [pc, #260]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80032da:	60d3      	str	r3, [r2, #12]
 80032dc:	e011      	b.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032e2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80032e6:	d10c      	bne.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	3304      	adds	r3, #4
 80032ec:	2101      	movs	r1, #1
 80032ee:	4618      	mov	r0, r3
 80032f0:	f000 f876 	bl	80033e0 <RCCEx_PLLSAI1_Config>
 80032f4:	4603      	mov	r3, r0
 80032f6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80032f8:	7cfb      	ldrb	r3, [r7, #19]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d001      	beq.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80032fe:	7cfb      	ldrb	r3, [r7, #19]
 8003300:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800330a:	2b00      	cmp	r3, #0
 800330c:	d01e      	beq.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800330e:	4b33      	ldr	r3, [pc, #204]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003310:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003314:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800331e:	492f      	ldr	r1, [pc, #188]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003320:	4313      	orrs	r3, r2
 8003322:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800332c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003330:	d10c      	bne.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	3304      	adds	r3, #4
 8003336:	2102      	movs	r1, #2
 8003338:	4618      	mov	r0, r3
 800333a:	f000 f851 	bl	80033e0 <RCCEx_PLLSAI1_Config>
 800333e:	4603      	mov	r3, r0
 8003340:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003342:	7cfb      	ldrb	r3, [r7, #19]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d001      	beq.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8003348:	7cfb      	ldrb	r3, [r7, #19]
 800334a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003354:	2b00      	cmp	r3, #0
 8003356:	d00b      	beq.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003358:	4b20      	ldr	r3, [pc, #128]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800335a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800335e:	f023 0204 	bic.w	r2, r3, #4
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003368:	491c      	ldr	r1, [pc, #112]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800336a:	4313      	orrs	r3, r2
 800336c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003378:	2b00      	cmp	r3, #0
 800337a:	d00b      	beq.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800337c:	4b17      	ldr	r3, [pc, #92]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800337e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003382:	f023 0218 	bic.w	r2, r3, #24
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800338c:	4913      	ldr	r1, [pc, #76]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800338e:	4313      	orrs	r3, r2
 8003390:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800339c:	2b00      	cmp	r3, #0
 800339e:	d017      	beq.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80033a0:	4b0e      	ldr	r3, [pc, #56]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80033a6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033b0:	490a      	ldr	r1, [pc, #40]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033b2:	4313      	orrs	r3, r2
 80033b4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80033c2:	d105      	bne.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033c4:	4b05      	ldr	r3, [pc, #20]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	4a04      	ldr	r2, [pc, #16]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80033ce:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80033d0:	7cbb      	ldrb	r3, [r7, #18]
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3718      	adds	r7, #24
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	40021000 	.word	0x40021000

080033e0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b084      	sub	sp, #16
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80033ea:	2300      	movs	r3, #0
 80033ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80033ee:	4b72      	ldr	r3, [pc, #456]	; (80035b8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80033f0:	68db      	ldr	r3, [r3, #12]
 80033f2:	f003 0303 	and.w	r3, r3, #3
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d00e      	beq.n	8003418 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80033fa:	4b6f      	ldr	r3, [pc, #444]	; (80035b8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80033fc:	68db      	ldr	r3, [r3, #12]
 80033fe:	f003 0203 	and.w	r2, r3, #3
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	429a      	cmp	r2, r3
 8003408:	d103      	bne.n	8003412 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
       ||
 800340e:	2b00      	cmp	r3, #0
 8003410:	d142      	bne.n	8003498 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	73fb      	strb	r3, [r7, #15]
 8003416:	e03f      	b.n	8003498 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	2b03      	cmp	r3, #3
 800341e:	d018      	beq.n	8003452 <RCCEx_PLLSAI1_Config+0x72>
 8003420:	2b03      	cmp	r3, #3
 8003422:	d825      	bhi.n	8003470 <RCCEx_PLLSAI1_Config+0x90>
 8003424:	2b01      	cmp	r3, #1
 8003426:	d002      	beq.n	800342e <RCCEx_PLLSAI1_Config+0x4e>
 8003428:	2b02      	cmp	r3, #2
 800342a:	d009      	beq.n	8003440 <RCCEx_PLLSAI1_Config+0x60>
 800342c:	e020      	b.n	8003470 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800342e:	4b62      	ldr	r3, [pc, #392]	; (80035b8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0302 	and.w	r3, r3, #2
 8003436:	2b00      	cmp	r3, #0
 8003438:	d11d      	bne.n	8003476 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800343e:	e01a      	b.n	8003476 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003440:	4b5d      	ldr	r3, [pc, #372]	; (80035b8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003448:	2b00      	cmp	r3, #0
 800344a:	d116      	bne.n	800347a <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003450:	e013      	b.n	800347a <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003452:	4b59      	ldr	r3, [pc, #356]	; (80035b8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d10f      	bne.n	800347e <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800345e:	4b56      	ldr	r3, [pc, #344]	; (80035b8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d109      	bne.n	800347e <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800346e:	e006      	b.n	800347e <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	73fb      	strb	r3, [r7, #15]
      break;
 8003474:	e004      	b.n	8003480 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003476:	bf00      	nop
 8003478:	e002      	b.n	8003480 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800347a:	bf00      	nop
 800347c:	e000      	b.n	8003480 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800347e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003480:	7bfb      	ldrb	r3, [r7, #15]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d108      	bne.n	8003498 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8003486:	4b4c      	ldr	r3, [pc, #304]	; (80035b8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	f023 0203 	bic.w	r2, r3, #3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4949      	ldr	r1, [pc, #292]	; (80035b8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003494:	4313      	orrs	r3, r2
 8003496:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003498:	7bfb      	ldrb	r3, [r7, #15]
 800349a:	2b00      	cmp	r3, #0
 800349c:	f040 8086 	bne.w	80035ac <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80034a0:	4b45      	ldr	r3, [pc, #276]	; (80035b8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a44      	ldr	r2, [pc, #272]	; (80035b8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80034a6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80034aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034ac:	f7fd f828 	bl	8000500 <HAL_GetTick>
 80034b0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80034b2:	e009      	b.n	80034c8 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80034b4:	f7fd f824 	bl	8000500 <HAL_GetTick>
 80034b8:	4602      	mov	r2, r0
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d902      	bls.n	80034c8 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	73fb      	strb	r3, [r7, #15]
        break;
 80034c6:	e005      	b.n	80034d4 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80034c8:	4b3b      	ldr	r3, [pc, #236]	; (80035b8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d1ef      	bne.n	80034b4 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80034d4:	7bfb      	ldrb	r3, [r7, #15]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d168      	bne.n	80035ac <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d113      	bne.n	8003508 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80034e0:	4b35      	ldr	r3, [pc, #212]	; (80035b8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80034e2:	691a      	ldr	r2, [r3, #16]
 80034e4:	4b35      	ldr	r3, [pc, #212]	; (80035bc <RCCEx_PLLSAI1_Config+0x1dc>)
 80034e6:	4013      	ands	r3, r2
 80034e8:	687a      	ldr	r2, [r7, #4]
 80034ea:	6892      	ldr	r2, [r2, #8]
 80034ec:	0211      	lsls	r1, r2, #8
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	68d2      	ldr	r2, [r2, #12]
 80034f2:	06d2      	lsls	r2, r2, #27
 80034f4:	4311      	orrs	r1, r2
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	6852      	ldr	r2, [r2, #4]
 80034fa:	3a01      	subs	r2, #1
 80034fc:	0112      	lsls	r2, r2, #4
 80034fe:	430a      	orrs	r2, r1
 8003500:	492d      	ldr	r1, [pc, #180]	; (80035b8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003502:	4313      	orrs	r3, r2
 8003504:	610b      	str	r3, [r1, #16]
 8003506:	e02d      	b.n	8003564 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	2b01      	cmp	r3, #1
 800350c:	d115      	bne.n	800353a <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800350e:	4b2a      	ldr	r3, [pc, #168]	; (80035b8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003510:	691a      	ldr	r2, [r3, #16]
 8003512:	4b2b      	ldr	r3, [pc, #172]	; (80035c0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003514:	4013      	ands	r3, r2
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	6892      	ldr	r2, [r2, #8]
 800351a:	0211      	lsls	r1, r2, #8
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	6912      	ldr	r2, [r2, #16]
 8003520:	0852      	lsrs	r2, r2, #1
 8003522:	3a01      	subs	r2, #1
 8003524:	0552      	lsls	r2, r2, #21
 8003526:	4311      	orrs	r1, r2
 8003528:	687a      	ldr	r2, [r7, #4]
 800352a:	6852      	ldr	r2, [r2, #4]
 800352c:	3a01      	subs	r2, #1
 800352e:	0112      	lsls	r2, r2, #4
 8003530:	430a      	orrs	r2, r1
 8003532:	4921      	ldr	r1, [pc, #132]	; (80035b8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003534:	4313      	orrs	r3, r2
 8003536:	610b      	str	r3, [r1, #16]
 8003538:	e014      	b.n	8003564 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800353a:	4b1f      	ldr	r3, [pc, #124]	; (80035b8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800353c:	691a      	ldr	r2, [r3, #16]
 800353e:	4b21      	ldr	r3, [pc, #132]	; (80035c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003540:	4013      	ands	r3, r2
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	6892      	ldr	r2, [r2, #8]
 8003546:	0211      	lsls	r1, r2, #8
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	6952      	ldr	r2, [r2, #20]
 800354c:	0852      	lsrs	r2, r2, #1
 800354e:	3a01      	subs	r2, #1
 8003550:	0652      	lsls	r2, r2, #25
 8003552:	4311      	orrs	r1, r2
 8003554:	687a      	ldr	r2, [r7, #4]
 8003556:	6852      	ldr	r2, [r2, #4]
 8003558:	3a01      	subs	r2, #1
 800355a:	0112      	lsls	r2, r2, #4
 800355c:	430a      	orrs	r2, r1
 800355e:	4916      	ldr	r1, [pc, #88]	; (80035b8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003560:	4313      	orrs	r3, r2
 8003562:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003564:	4b14      	ldr	r3, [pc, #80]	; (80035b8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a13      	ldr	r2, [pc, #76]	; (80035b8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800356a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800356e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003570:	f7fc ffc6 	bl	8000500 <HAL_GetTick>
 8003574:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003576:	e009      	b.n	800358c <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003578:	f7fc ffc2 	bl	8000500 <HAL_GetTick>
 800357c:	4602      	mov	r2, r0
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	2b02      	cmp	r3, #2
 8003584:	d902      	bls.n	800358c <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	73fb      	strb	r3, [r7, #15]
          break;
 800358a:	e005      	b.n	8003598 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800358c:	4b0a      	ldr	r3, [pc, #40]	; (80035b8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003594:	2b00      	cmp	r3, #0
 8003596:	d0ef      	beq.n	8003578 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003598:	7bfb      	ldrb	r3, [r7, #15]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d106      	bne.n	80035ac <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800359e:	4b06      	ldr	r3, [pc, #24]	; (80035b8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80035a0:	691a      	ldr	r2, [r3, #16]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	699b      	ldr	r3, [r3, #24]
 80035a6:	4904      	ldr	r1, [pc, #16]	; (80035b8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80035a8:	4313      	orrs	r3, r2
 80035aa:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80035ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3710      	adds	r7, #16
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	40021000 	.word	0x40021000
 80035bc:	07ff800f 	.word	0x07ff800f
 80035c0:	ff9f800f 	.word	0xff9f800f
 80035c4:	f9ff800f 	.word	0xf9ff800f

080035c8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b084      	sub	sp, #16
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80035d2:	2300      	movs	r3, #0
 80035d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80035d6:	4b72      	ldr	r3, [pc, #456]	; (80037a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80035d8:	68db      	ldr	r3, [r3, #12]
 80035da:	f003 0303 	and.w	r3, r3, #3
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d00e      	beq.n	8003600 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80035e2:	4b6f      	ldr	r3, [pc, #444]	; (80037a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80035e4:	68db      	ldr	r3, [r3, #12]
 80035e6:	f003 0203 	and.w	r2, r3, #3
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d103      	bne.n	80035fa <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
       ||
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d142      	bne.n	8003680 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	73fb      	strb	r3, [r7, #15]
 80035fe:	e03f      	b.n	8003680 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	2b03      	cmp	r3, #3
 8003606:	d018      	beq.n	800363a <RCCEx_PLLSAI2_Config+0x72>
 8003608:	2b03      	cmp	r3, #3
 800360a:	d825      	bhi.n	8003658 <RCCEx_PLLSAI2_Config+0x90>
 800360c:	2b01      	cmp	r3, #1
 800360e:	d002      	beq.n	8003616 <RCCEx_PLLSAI2_Config+0x4e>
 8003610:	2b02      	cmp	r3, #2
 8003612:	d009      	beq.n	8003628 <RCCEx_PLLSAI2_Config+0x60>
 8003614:	e020      	b.n	8003658 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003616:	4b62      	ldr	r3, [pc, #392]	; (80037a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0302 	and.w	r3, r3, #2
 800361e:	2b00      	cmp	r3, #0
 8003620:	d11d      	bne.n	800365e <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003626:	e01a      	b.n	800365e <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003628:	4b5d      	ldr	r3, [pc, #372]	; (80037a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003630:	2b00      	cmp	r3, #0
 8003632:	d116      	bne.n	8003662 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003638:	e013      	b.n	8003662 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800363a:	4b59      	ldr	r3, [pc, #356]	; (80037a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d10f      	bne.n	8003666 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003646:	4b56      	ldr	r3, [pc, #344]	; (80037a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d109      	bne.n	8003666 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003656:	e006      	b.n	8003666 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	73fb      	strb	r3, [r7, #15]
      break;
 800365c:	e004      	b.n	8003668 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800365e:	bf00      	nop
 8003660:	e002      	b.n	8003668 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003662:	bf00      	nop
 8003664:	e000      	b.n	8003668 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003666:	bf00      	nop
    }

    if(status == HAL_OK)
 8003668:	7bfb      	ldrb	r3, [r7, #15]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d108      	bne.n	8003680 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800366e:	4b4c      	ldr	r3, [pc, #304]	; (80037a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	f023 0203 	bic.w	r2, r3, #3
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4949      	ldr	r1, [pc, #292]	; (80037a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800367c:	4313      	orrs	r3, r2
 800367e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003680:	7bfb      	ldrb	r3, [r7, #15]
 8003682:	2b00      	cmp	r3, #0
 8003684:	f040 8086 	bne.w	8003794 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003688:	4b45      	ldr	r3, [pc, #276]	; (80037a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a44      	ldr	r2, [pc, #272]	; (80037a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800368e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003692:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003694:	f7fc ff34 	bl	8000500 <HAL_GetTick>
 8003698:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800369a:	e009      	b.n	80036b0 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800369c:	f7fc ff30 	bl	8000500 <HAL_GetTick>
 80036a0:	4602      	mov	r2, r0
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	d902      	bls.n	80036b0 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	73fb      	strb	r3, [r7, #15]
        break;
 80036ae:	e005      	b.n	80036bc <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80036b0:	4b3b      	ldr	r3, [pc, #236]	; (80037a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d1ef      	bne.n	800369c <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80036bc:	7bfb      	ldrb	r3, [r7, #15]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d168      	bne.n	8003794 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d113      	bne.n	80036f0 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80036c8:	4b35      	ldr	r3, [pc, #212]	; (80037a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80036ca:	695a      	ldr	r2, [r3, #20]
 80036cc:	4b35      	ldr	r3, [pc, #212]	; (80037a4 <RCCEx_PLLSAI2_Config+0x1dc>)
 80036ce:	4013      	ands	r3, r2
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	6892      	ldr	r2, [r2, #8]
 80036d4:	0211      	lsls	r1, r2, #8
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	68d2      	ldr	r2, [r2, #12]
 80036da:	06d2      	lsls	r2, r2, #27
 80036dc:	4311      	orrs	r1, r2
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	6852      	ldr	r2, [r2, #4]
 80036e2:	3a01      	subs	r2, #1
 80036e4:	0112      	lsls	r2, r2, #4
 80036e6:	430a      	orrs	r2, r1
 80036e8:	492d      	ldr	r1, [pc, #180]	; (80037a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80036ea:	4313      	orrs	r3, r2
 80036ec:	614b      	str	r3, [r1, #20]
 80036ee:	e02d      	b.n	800374c <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d115      	bne.n	8003722 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80036f6:	4b2a      	ldr	r3, [pc, #168]	; (80037a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80036f8:	695a      	ldr	r2, [r3, #20]
 80036fa:	4b2b      	ldr	r3, [pc, #172]	; (80037a8 <RCCEx_PLLSAI2_Config+0x1e0>)
 80036fc:	4013      	ands	r3, r2
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	6892      	ldr	r2, [r2, #8]
 8003702:	0211      	lsls	r1, r2, #8
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	6912      	ldr	r2, [r2, #16]
 8003708:	0852      	lsrs	r2, r2, #1
 800370a:	3a01      	subs	r2, #1
 800370c:	0552      	lsls	r2, r2, #21
 800370e:	4311      	orrs	r1, r2
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	6852      	ldr	r2, [r2, #4]
 8003714:	3a01      	subs	r2, #1
 8003716:	0112      	lsls	r2, r2, #4
 8003718:	430a      	orrs	r2, r1
 800371a:	4921      	ldr	r1, [pc, #132]	; (80037a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800371c:	4313      	orrs	r3, r2
 800371e:	614b      	str	r3, [r1, #20]
 8003720:	e014      	b.n	800374c <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003722:	4b1f      	ldr	r3, [pc, #124]	; (80037a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003724:	695a      	ldr	r2, [r3, #20]
 8003726:	4b21      	ldr	r3, [pc, #132]	; (80037ac <RCCEx_PLLSAI2_Config+0x1e4>)
 8003728:	4013      	ands	r3, r2
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	6892      	ldr	r2, [r2, #8]
 800372e:	0211      	lsls	r1, r2, #8
 8003730:	687a      	ldr	r2, [r7, #4]
 8003732:	6952      	ldr	r2, [r2, #20]
 8003734:	0852      	lsrs	r2, r2, #1
 8003736:	3a01      	subs	r2, #1
 8003738:	0652      	lsls	r2, r2, #25
 800373a:	4311      	orrs	r1, r2
 800373c:	687a      	ldr	r2, [r7, #4]
 800373e:	6852      	ldr	r2, [r2, #4]
 8003740:	3a01      	subs	r2, #1
 8003742:	0112      	lsls	r2, r2, #4
 8003744:	430a      	orrs	r2, r1
 8003746:	4916      	ldr	r1, [pc, #88]	; (80037a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003748:	4313      	orrs	r3, r2
 800374a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800374c:	4b14      	ldr	r3, [pc, #80]	; (80037a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a13      	ldr	r2, [pc, #76]	; (80037a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003752:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003756:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003758:	f7fc fed2 	bl	8000500 <HAL_GetTick>
 800375c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800375e:	e009      	b.n	8003774 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003760:	f7fc fece 	bl	8000500 <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	2b02      	cmp	r3, #2
 800376c:	d902      	bls.n	8003774 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800376e:	2303      	movs	r3, #3
 8003770:	73fb      	strb	r3, [r7, #15]
          break;
 8003772:	e005      	b.n	8003780 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003774:	4b0a      	ldr	r3, [pc, #40]	; (80037a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800377c:	2b00      	cmp	r3, #0
 800377e:	d0ef      	beq.n	8003760 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003780:	7bfb      	ldrb	r3, [r7, #15]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d106      	bne.n	8003794 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003786:	4b06      	ldr	r3, [pc, #24]	; (80037a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003788:	695a      	ldr	r2, [r3, #20]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	699b      	ldr	r3, [r3, #24]
 800378e:	4904      	ldr	r1, [pc, #16]	; (80037a0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003790:	4313      	orrs	r3, r2
 8003792:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003794:	7bfb      	ldrb	r3, [r7, #15]
}
 8003796:	4618      	mov	r0, r3
 8003798:	3710      	adds	r7, #16
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	40021000 	.word	0x40021000
 80037a4:	07ff800f 	.word	0x07ff800f
 80037a8:	ff9f800f 	.word	0xff9f800f
 80037ac:	f9ff800f 	.word	0xf9ff800f

080037b0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80037b0:	b084      	sub	sp, #16
 80037b2:	b580      	push	{r7, lr}
 80037b4:	b084      	sub	sp, #16
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	6078      	str	r0, [r7, #4]
 80037ba:	f107 001c 	add.w	r0, r7, #28
 80037be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f001 faf6 	bl	8004dc0 <USB_CoreReset>
 80037d4:	4603      	mov	r3, r0
 80037d6:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80037d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d106      	bne.n	80037ec <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037e2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	639a      	str	r2, [r3, #56]	; 0x38
 80037ea:	e005      	b.n	80037f8 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037f0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 80037f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3710      	adds	r7, #16
 80037fe:	46bd      	mov	sp, r7
 8003800:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003804:	b004      	add	sp, #16
 8003806:	4770      	bx	lr

08003808 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003808:	b480      	push	{r7}
 800380a:	b087      	sub	sp, #28
 800380c:	af00      	add	r7, sp, #0
 800380e:	60f8      	str	r0, [r7, #12]
 8003810:	60b9      	str	r1, [r7, #8]
 8003812:	4613      	mov	r3, r2
 8003814:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003816:	79fb      	ldrb	r3, [r7, #7]
 8003818:	2b02      	cmp	r3, #2
 800381a:	d165      	bne.n	80038e8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	4a3e      	ldr	r2, [pc, #248]	; (8003918 <USB_SetTurnaroundTime+0x110>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d906      	bls.n	8003832 <USB_SetTurnaroundTime+0x2a>
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	4a3d      	ldr	r2, [pc, #244]	; (800391c <USB_SetTurnaroundTime+0x114>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d202      	bcs.n	8003832 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800382c:	230f      	movs	r3, #15
 800382e:	617b      	str	r3, [r7, #20]
 8003830:	e05c      	b.n	80038ec <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	4a39      	ldr	r2, [pc, #228]	; (800391c <USB_SetTurnaroundTime+0x114>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d306      	bcc.n	8003848 <USB_SetTurnaroundTime+0x40>
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	4a38      	ldr	r2, [pc, #224]	; (8003920 <USB_SetTurnaroundTime+0x118>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d202      	bcs.n	8003848 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003842:	230e      	movs	r3, #14
 8003844:	617b      	str	r3, [r7, #20]
 8003846:	e051      	b.n	80038ec <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	4a35      	ldr	r2, [pc, #212]	; (8003920 <USB_SetTurnaroundTime+0x118>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d306      	bcc.n	800385e <USB_SetTurnaroundTime+0x56>
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	4a34      	ldr	r2, [pc, #208]	; (8003924 <USB_SetTurnaroundTime+0x11c>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d202      	bcs.n	800385e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003858:	230d      	movs	r3, #13
 800385a:	617b      	str	r3, [r7, #20]
 800385c:	e046      	b.n	80038ec <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	4a30      	ldr	r2, [pc, #192]	; (8003924 <USB_SetTurnaroundTime+0x11c>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d306      	bcc.n	8003874 <USB_SetTurnaroundTime+0x6c>
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	4a2f      	ldr	r2, [pc, #188]	; (8003928 <USB_SetTurnaroundTime+0x120>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d802      	bhi.n	8003874 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800386e:	230c      	movs	r3, #12
 8003870:	617b      	str	r3, [r7, #20]
 8003872:	e03b      	b.n	80038ec <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	4a2c      	ldr	r2, [pc, #176]	; (8003928 <USB_SetTurnaroundTime+0x120>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d906      	bls.n	800388a <USB_SetTurnaroundTime+0x82>
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	4a2b      	ldr	r2, [pc, #172]	; (800392c <USB_SetTurnaroundTime+0x124>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d802      	bhi.n	800388a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003884:	230b      	movs	r3, #11
 8003886:	617b      	str	r3, [r7, #20]
 8003888:	e030      	b.n	80038ec <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	4a27      	ldr	r2, [pc, #156]	; (800392c <USB_SetTurnaroundTime+0x124>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d906      	bls.n	80038a0 <USB_SetTurnaroundTime+0x98>
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	4a26      	ldr	r2, [pc, #152]	; (8003930 <USB_SetTurnaroundTime+0x128>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d802      	bhi.n	80038a0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800389a:	230a      	movs	r3, #10
 800389c:	617b      	str	r3, [r7, #20]
 800389e:	e025      	b.n	80038ec <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	4a23      	ldr	r2, [pc, #140]	; (8003930 <USB_SetTurnaroundTime+0x128>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d906      	bls.n	80038b6 <USB_SetTurnaroundTime+0xae>
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	4a22      	ldr	r2, [pc, #136]	; (8003934 <USB_SetTurnaroundTime+0x12c>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d202      	bcs.n	80038b6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80038b0:	2309      	movs	r3, #9
 80038b2:	617b      	str	r3, [r7, #20]
 80038b4:	e01a      	b.n	80038ec <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	4a1e      	ldr	r2, [pc, #120]	; (8003934 <USB_SetTurnaroundTime+0x12c>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d306      	bcc.n	80038cc <USB_SetTurnaroundTime+0xc4>
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	4a1d      	ldr	r2, [pc, #116]	; (8003938 <USB_SetTurnaroundTime+0x130>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d802      	bhi.n	80038cc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80038c6:	2308      	movs	r3, #8
 80038c8:	617b      	str	r3, [r7, #20]
 80038ca:	e00f      	b.n	80038ec <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	4a1a      	ldr	r2, [pc, #104]	; (8003938 <USB_SetTurnaroundTime+0x130>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d906      	bls.n	80038e2 <USB_SetTurnaroundTime+0xda>
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	4a19      	ldr	r2, [pc, #100]	; (800393c <USB_SetTurnaroundTime+0x134>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d202      	bcs.n	80038e2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80038dc:	2307      	movs	r3, #7
 80038de:	617b      	str	r3, [r7, #20]
 80038e0:	e004      	b.n	80038ec <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80038e2:	2306      	movs	r3, #6
 80038e4:	617b      	str	r3, [r7, #20]
 80038e6:	e001      	b.n	80038ec <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80038e8:	2309      	movs	r3, #9
 80038ea:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	68da      	ldr	r2, [r3, #12]
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	029b      	lsls	r3, r3, #10
 8003900:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003904:	431a      	orrs	r2, r3
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800390a:	2300      	movs	r3, #0
}
 800390c:	4618      	mov	r0, r3
 800390e:	371c      	adds	r7, #28
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr
 8003918:	00d8acbf 	.word	0x00d8acbf
 800391c:	00e4e1c0 	.word	0x00e4e1c0
 8003920:	00f42400 	.word	0x00f42400
 8003924:	01067380 	.word	0x01067380
 8003928:	011a499f 	.word	0x011a499f
 800392c:	01312cff 	.word	0x01312cff
 8003930:	014ca43f 	.word	0x014ca43f
 8003934:	016e3600 	.word	0x016e3600
 8003938:	01a6ab1f 	.word	0x01a6ab1f
 800393c:	01e84800 	.word	0x01e84800

08003940 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003940:	b480      	push	{r7}
 8003942:	b083      	sub	sp, #12
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	f043 0201 	orr.w	r2, r3, #1
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003954:	2300      	movs	r3, #0
}
 8003956:	4618      	mov	r0, r3
 8003958:	370c      	adds	r7, #12
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr

08003962 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003962:	b480      	push	{r7}
 8003964:	b083      	sub	sp, #12
 8003966:	af00      	add	r7, sp, #0
 8003968:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	f023 0201 	bic.w	r2, r3, #1
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003976:	2300      	movs	r3, #0
}
 8003978:	4618      	mov	r0, r3
 800397a:	370c      	adds	r7, #12
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr

08003984 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b084      	sub	sp, #16
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	460b      	mov	r3, r1
 800398e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003990:	2300      	movs	r3, #0
 8003992:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80039a0:	78fb      	ldrb	r3, [r7, #3]
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d115      	bne.n	80039d2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80039b2:	2001      	movs	r0, #1
 80039b4:	f7fc fdb0 	bl	8000518 <HAL_Delay>
      ms++;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	3301      	adds	r3, #1
 80039bc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f001 f985 	bl	8004cce <USB_GetMode>
 80039c4:	4603      	mov	r3, r0
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d01e      	beq.n	8003a08 <USB_SetCurrentMode+0x84>
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2b31      	cmp	r3, #49	; 0x31
 80039ce:	d9f0      	bls.n	80039b2 <USB_SetCurrentMode+0x2e>
 80039d0:	e01a      	b.n	8003a08 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80039d2:	78fb      	ldrb	r3, [r7, #3]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d115      	bne.n	8003a04 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80039e4:	2001      	movs	r0, #1
 80039e6:	f7fc fd97 	bl	8000518 <HAL_Delay>
      ms++;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	3301      	adds	r3, #1
 80039ee:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	f001 f96c 	bl	8004cce <USB_GetMode>
 80039f6:	4603      	mov	r3, r0
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d005      	beq.n	8003a08 <USB_SetCurrentMode+0x84>
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2b31      	cmp	r3, #49	; 0x31
 8003a00:	d9f0      	bls.n	80039e4 <USB_SetCurrentMode+0x60>
 8003a02:	e001      	b.n	8003a08 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e005      	b.n	8003a14 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2b32      	cmp	r3, #50	; 0x32
 8003a0c:	d101      	bne.n	8003a12 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e000      	b.n	8003a14 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003a12:	2300      	movs	r3, #0
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3710      	adds	r7, #16
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}

08003a1c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003a1c:	b084      	sub	sp, #16
 8003a1e:	b580      	push	{r7, lr}
 8003a20:	b086      	sub	sp, #24
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	6078      	str	r0, [r7, #4]
 8003a26:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003a2a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003a36:	2300      	movs	r3, #0
 8003a38:	613b      	str	r3, [r7, #16]
 8003a3a:	e009      	b.n	8003a50 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003a3c:	687a      	ldr	r2, [r7, #4]
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	3340      	adds	r3, #64	; 0x40
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	4413      	add	r3, r2
 8003a46:	2200      	movs	r2, #0
 8003a48:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	3301      	adds	r3, #1
 8003a4e:	613b      	str	r3, [r7, #16]
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	2b0e      	cmp	r3, #14
 8003a54:	d9f2      	bls.n	8003a3c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003a56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d11c      	bne.n	8003a96 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	68fa      	ldr	r2, [r7, #12]
 8003a66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a6a:	f043 0302 	orr.w	r3, r3, #2
 8003a6e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a74:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	601a      	str	r2, [r3, #0]
 8003a94:	e005      	b.n	8003aa2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a9a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	2300      	movs	r3, #0
 8003aac:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ab4:	4619      	mov	r1, r3
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003abc:	461a      	mov	r2, r3
 8003abe:	680b      	ldr	r3, [r1, #0]
 8003ac0:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003ac2:	2103      	movs	r1, #3
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f000 f959 	bl	8003d7c <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003aca:	2110      	movs	r1, #16
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f000 f8f1 	bl	8003cb4 <USB_FlushTxFifo>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d001      	beq.n	8003adc <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	f000 f91d 	bl	8003d1c <USB_FlushRxFifo>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d001      	beq.n	8003aec <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003af2:	461a      	mov	r2, r3
 8003af4:	2300      	movs	r3, #0
 8003af6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003afe:	461a      	mov	r2, r3
 8003b00:	2300      	movs	r3, #0
 8003b02:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b10:	2300      	movs	r3, #0
 8003b12:	613b      	str	r3, [r7, #16]
 8003b14:	e043      	b.n	8003b9e <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	015a      	lsls	r2, r3, #5
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	4413      	add	r3, r2
 8003b1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003b28:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b2c:	d118      	bne.n	8003b60 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d10a      	bne.n	8003b4a <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	015a      	lsls	r2, r3, #5
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	4413      	add	r3, r2
 8003b3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b40:	461a      	mov	r2, r3
 8003b42:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003b46:	6013      	str	r3, [r2, #0]
 8003b48:	e013      	b.n	8003b72 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	015a      	lsls	r2, r3, #5
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	4413      	add	r3, r2
 8003b52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b56:	461a      	mov	r2, r3
 8003b58:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003b5c:	6013      	str	r3, [r2, #0]
 8003b5e:	e008      	b.n	8003b72 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	015a      	lsls	r2, r3, #5
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	4413      	add	r3, r2
 8003b68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b6c:	461a      	mov	r2, r3
 8003b6e:	2300      	movs	r3, #0
 8003b70:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	015a      	lsls	r2, r3, #5
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	4413      	add	r3, r2
 8003b7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b7e:	461a      	mov	r2, r3
 8003b80:	2300      	movs	r3, #0
 8003b82:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	015a      	lsls	r2, r3, #5
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	4413      	add	r3, r2
 8003b8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b90:	461a      	mov	r2, r3
 8003b92:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003b96:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	3301      	adds	r3, #1
 8003b9c:	613b      	str	r3, [r7, #16]
 8003b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba0:	693a      	ldr	r2, [r7, #16]
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d3b7      	bcc.n	8003b16 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	613b      	str	r3, [r7, #16]
 8003baa:	e043      	b.n	8003c34 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	015a      	lsls	r2, r3, #5
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	4413      	add	r3, r2
 8003bb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003bbe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003bc2:	d118      	bne.n	8003bf6 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d10a      	bne.n	8003be0 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	015a      	lsls	r2, r3, #5
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	4413      	add	r3, r2
 8003bd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bd6:	461a      	mov	r2, r3
 8003bd8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003bdc:	6013      	str	r3, [r2, #0]
 8003bde:	e013      	b.n	8003c08 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	015a      	lsls	r2, r3, #5
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	4413      	add	r3, r2
 8003be8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bec:	461a      	mov	r2, r3
 8003bee:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003bf2:	6013      	str	r3, [r2, #0]
 8003bf4:	e008      	b.n	8003c08 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	015a      	lsls	r2, r3, #5
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	4413      	add	r3, r2
 8003bfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c02:	461a      	mov	r2, r3
 8003c04:	2300      	movs	r3, #0
 8003c06:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	015a      	lsls	r2, r3, #5
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	4413      	add	r3, r2
 8003c10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c14:	461a      	mov	r2, r3
 8003c16:	2300      	movs	r3, #0
 8003c18:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	015a      	lsls	r2, r3, #5
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	4413      	add	r3, r2
 8003c22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c26:	461a      	mov	r2, r3
 8003c28:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003c2c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	3301      	adds	r3, #1
 8003c32:	613b      	str	r3, [r7, #16]
 8003c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c36:	693a      	ldr	r2, [r7, #16]
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d3b7      	bcc.n	8003bac <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c42:	691b      	ldr	r3, [r3, #16]
 8003c44:	68fa      	ldr	r2, [r7, #12]
 8003c46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c4a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c4e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003c5c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	699b      	ldr	r3, [r3, #24]
 8003c62:	f043 0210 	orr.w	r2, r3, #16
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	699a      	ldr	r2, [r3, #24]
 8003c6e:	4b10      	ldr	r3, [pc, #64]	; (8003cb0 <USB_DevInit+0x294>)
 8003c70:	4313      	orrs	r3, r2
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003c76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d005      	beq.n	8003c88 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	699b      	ldr	r3, [r3, #24]
 8003c80:	f043 0208 	orr.w	r2, r3, #8
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003c88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d107      	bne.n	8003c9e <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	699b      	ldr	r3, [r3, #24]
 8003c92:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003c96:	f043 0304 	orr.w	r3, r3, #4
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003c9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3718      	adds	r7, #24
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003caa:	b004      	add	sp, #16
 8003cac:	4770      	bx	lr
 8003cae:	bf00      	nop
 8003cb0:	803c3800 	.word	0x803c3800

08003cb4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b085      	sub	sp, #20
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	3301      	adds	r3, #1
 8003cc6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	4a13      	ldr	r2, [pc, #76]	; (8003d18 <USB_FlushTxFifo+0x64>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d901      	bls.n	8003cd4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003cd0:	2303      	movs	r3, #3
 8003cd2:	e01b      	b.n	8003d0c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	691b      	ldr	r3, [r3, #16]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	daf2      	bge.n	8003cc2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	019b      	lsls	r3, r3, #6
 8003ce4:	f043 0220 	orr.w	r2, r3, #32
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	3301      	adds	r3, #1
 8003cf0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	4a08      	ldr	r2, [pc, #32]	; (8003d18 <USB_FlushTxFifo+0x64>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d901      	bls.n	8003cfe <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	e006      	b.n	8003d0c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	691b      	ldr	r3, [r3, #16]
 8003d02:	f003 0320 	and.w	r3, r3, #32
 8003d06:	2b20      	cmp	r3, #32
 8003d08:	d0f0      	beq.n	8003cec <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003d0a:	2300      	movs	r3, #0
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	3714      	adds	r7, #20
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr
 8003d18:	00030d40 	.word	0x00030d40

08003d1c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b085      	sub	sp, #20
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003d24:	2300      	movs	r3, #0
 8003d26:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	3301      	adds	r3, #1
 8003d2c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	4a11      	ldr	r2, [pc, #68]	; (8003d78 <USB_FlushRxFifo+0x5c>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d901      	bls.n	8003d3a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003d36:	2303      	movs	r3, #3
 8003d38:	e018      	b.n	8003d6c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	691b      	ldr	r3, [r3, #16]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	daf2      	bge.n	8003d28 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003d42:	2300      	movs	r3, #0
 8003d44:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2210      	movs	r2, #16
 8003d4a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	3301      	adds	r3, #1
 8003d50:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	4a08      	ldr	r2, [pc, #32]	; (8003d78 <USB_FlushRxFifo+0x5c>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d901      	bls.n	8003d5e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	e006      	b.n	8003d6c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	691b      	ldr	r3, [r3, #16]
 8003d62:	f003 0310 	and.w	r3, r3, #16
 8003d66:	2b10      	cmp	r3, #16
 8003d68:	d0f0      	beq.n	8003d4c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003d6a:	2300      	movs	r3, #0
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	3714      	adds	r7, #20
 8003d70:	46bd      	mov	sp, r7
 8003d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d76:	4770      	bx	lr
 8003d78:	00030d40 	.word	0x00030d40

08003d7c <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b085      	sub	sp, #20
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
 8003d84:	460b      	mov	r3, r1
 8003d86:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	78fb      	ldrb	r3, [r7, #3]
 8003d96:	68f9      	ldr	r1, [r7, #12]
 8003d98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003da0:	2300      	movs	r3, #0
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3714      	adds	r7, #20
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr

08003dae <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003dae:	b480      	push	{r7}
 8003db0:	b087      	sub	sp, #28
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	f003 0306 	and.w	r3, r3, #6
 8003dc6:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2b02      	cmp	r3, #2
 8003dcc:	d002      	beq.n	8003dd4 <USB_GetDevSpeed+0x26>
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2b06      	cmp	r3, #6
 8003dd2:	d102      	bne.n	8003dda <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003dd4:	2302      	movs	r3, #2
 8003dd6:	75fb      	strb	r3, [r7, #23]
 8003dd8:	e001      	b.n	8003dde <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8003dda:	230f      	movs	r3, #15
 8003ddc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003dde:	7dfb      	ldrb	r3, [r7, #23]
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	371c      	adds	r7, #28
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr

08003dec <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b085      	sub	sp, #20
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	781b      	ldrb	r3, [r3, #0]
 8003dfe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	785b      	ldrb	r3, [r3, #1]
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d13a      	bne.n	8003e7e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e0e:	69da      	ldr	r2, [r3, #28]
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	781b      	ldrb	r3, [r3, #0]
 8003e14:	f003 030f 	and.w	r3, r3, #15
 8003e18:	2101      	movs	r1, #1
 8003e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	68f9      	ldr	r1, [r7, #12]
 8003e22:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e26:	4313      	orrs	r3, r2
 8003e28:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	015a      	lsls	r2, r3, #5
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	4413      	add	r3, r2
 8003e32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d155      	bne.n	8003eec <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	015a      	lsls	r2, r3, #5
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	4413      	add	r3, r2
 8003e48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	791b      	ldrb	r3, [r3, #4]
 8003e5a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003e5c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	059b      	lsls	r3, r3, #22
 8003e62:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003e64:	4313      	orrs	r3, r2
 8003e66:	68ba      	ldr	r2, [r7, #8]
 8003e68:	0151      	lsls	r1, r2, #5
 8003e6a:	68fa      	ldr	r2, [r7, #12]
 8003e6c:	440a      	add	r2, r1
 8003e6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e7a:	6013      	str	r3, [r2, #0]
 8003e7c:	e036      	b.n	8003eec <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e84:	69da      	ldr	r2, [r3, #28]
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	781b      	ldrb	r3, [r3, #0]
 8003e8a:	f003 030f 	and.w	r3, r3, #15
 8003e8e:	2101      	movs	r1, #1
 8003e90:	fa01 f303 	lsl.w	r3, r1, r3
 8003e94:	041b      	lsls	r3, r3, #16
 8003e96:	68f9      	ldr	r1, [r7, #12]
 8003e98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	015a      	lsls	r2, r3, #5
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	4413      	add	r3, r2
 8003ea8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d11a      	bne.n	8003eec <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	015a      	lsls	r2, r3, #5
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	4413      	add	r3, r2
 8003ebe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	791b      	ldrb	r3, [r3, #4]
 8003ed0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003ed2:	430b      	orrs	r3, r1
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	68ba      	ldr	r2, [r7, #8]
 8003ed8:	0151      	lsls	r1, r2, #5
 8003eda:	68fa      	ldr	r2, [r7, #12]
 8003edc:	440a      	add	r2, r1
 8003ede:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ee2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ee6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003eea:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003eec:	2300      	movs	r3, #0
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3714      	adds	r7, #20
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr
	...

08003efc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b085      	sub	sp, #20
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	781b      	ldrb	r3, [r3, #0]
 8003f0e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	785b      	ldrb	r3, [r3, #1]
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d161      	bne.n	8003fdc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	015a      	lsls	r2, r3, #5
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	4413      	add	r3, r2
 8003f20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f2e:	d11f      	bne.n	8003f70 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	015a      	lsls	r2, r3, #5
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	4413      	add	r3, r2
 8003f38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	68ba      	ldr	r2, [r7, #8]
 8003f40:	0151      	lsls	r1, r2, #5
 8003f42:	68fa      	ldr	r2, [r7, #12]
 8003f44:	440a      	add	r2, r1
 8003f46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f4a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003f4e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	015a      	lsls	r2, r3, #5
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	4413      	add	r3, r2
 8003f58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	68ba      	ldr	r2, [r7, #8]
 8003f60:	0151      	lsls	r1, r2, #5
 8003f62:	68fa      	ldr	r2, [r7, #12]
 8003f64:	440a      	add	r2, r1
 8003f66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f6a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003f6e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	781b      	ldrb	r3, [r3, #0]
 8003f7c:	f003 030f 	and.w	r3, r3, #15
 8003f80:	2101      	movs	r1, #1
 8003f82:	fa01 f303 	lsl.w	r3, r1, r3
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	43db      	mvns	r3, r3
 8003f8a:	68f9      	ldr	r1, [r7, #12]
 8003f8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f90:	4013      	ands	r3, r2
 8003f92:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f9a:	69da      	ldr	r2, [r3, #28]
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	781b      	ldrb	r3, [r3, #0]
 8003fa0:	f003 030f 	and.w	r3, r3, #15
 8003fa4:	2101      	movs	r1, #1
 8003fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	43db      	mvns	r3, r3
 8003fae:	68f9      	ldr	r1, [r7, #12]
 8003fb0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	015a      	lsls	r2, r3, #5
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	4413      	add	r3, r2
 8003fc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	0159      	lsls	r1, r3, #5
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	440b      	add	r3, r1
 8003fce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fd2:	4619      	mov	r1, r3
 8003fd4:	4b35      	ldr	r3, [pc, #212]	; (80040ac <USB_DeactivateEndpoint+0x1b0>)
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	600b      	str	r3, [r1, #0]
 8003fda:	e060      	b.n	800409e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	015a      	lsls	r2, r3, #5
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	4413      	add	r3, r2
 8003fe4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003fee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ff2:	d11f      	bne.n	8004034 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	015a      	lsls	r2, r3, #5
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	4413      	add	r3, r2
 8003ffc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	68ba      	ldr	r2, [r7, #8]
 8004004:	0151      	lsls	r1, r2, #5
 8004006:	68fa      	ldr	r2, [r7, #12]
 8004008:	440a      	add	r2, r1
 800400a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800400e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004012:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	015a      	lsls	r2, r3, #5
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	4413      	add	r3, r2
 800401c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	68ba      	ldr	r2, [r7, #8]
 8004024:	0151      	lsls	r1, r2, #5
 8004026:	68fa      	ldr	r2, [r7, #12]
 8004028:	440a      	add	r2, r1
 800402a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800402e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004032:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800403a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	781b      	ldrb	r3, [r3, #0]
 8004040:	f003 030f 	and.w	r3, r3, #15
 8004044:	2101      	movs	r1, #1
 8004046:	fa01 f303 	lsl.w	r3, r1, r3
 800404a:	041b      	lsls	r3, r3, #16
 800404c:	43db      	mvns	r3, r3
 800404e:	68f9      	ldr	r1, [r7, #12]
 8004050:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004054:	4013      	ands	r3, r2
 8004056:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800405e:	69da      	ldr	r2, [r3, #28]
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	781b      	ldrb	r3, [r3, #0]
 8004064:	f003 030f 	and.w	r3, r3, #15
 8004068:	2101      	movs	r1, #1
 800406a:	fa01 f303 	lsl.w	r3, r1, r3
 800406e:	041b      	lsls	r3, r3, #16
 8004070:	43db      	mvns	r3, r3
 8004072:	68f9      	ldr	r1, [r7, #12]
 8004074:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004078:	4013      	ands	r3, r2
 800407a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	015a      	lsls	r2, r3, #5
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	4413      	add	r3, r2
 8004084:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	0159      	lsls	r1, r3, #5
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	440b      	add	r3, r1
 8004092:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004096:	4619      	mov	r1, r3
 8004098:	4b05      	ldr	r3, [pc, #20]	; (80040b0 <USB_DeactivateEndpoint+0x1b4>)
 800409a:	4013      	ands	r3, r2
 800409c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800409e:	2300      	movs	r3, #0
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3714      	adds	r7, #20
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr
 80040ac:	ec337800 	.word	0xec337800
 80040b0:	eff37800 	.word	0xeff37800

080040b4 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b086      	sub	sp, #24
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	781b      	ldrb	r3, [r3, #0]
 80040c6:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	785b      	ldrb	r3, [r3, #1]
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	f040 810a 	bne.w	80042e6 <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	699b      	ldr	r3, [r3, #24]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d132      	bne.n	8004140 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	015a      	lsls	r2, r3, #5
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	4413      	add	r3, r2
 80040e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040e6:	691b      	ldr	r3, [r3, #16]
 80040e8:	693a      	ldr	r2, [r7, #16]
 80040ea:	0151      	lsls	r1, r2, #5
 80040ec:	697a      	ldr	r2, [r7, #20]
 80040ee:	440a      	add	r2, r1
 80040f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040f4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80040f8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80040fc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	015a      	lsls	r2, r3, #5
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	4413      	add	r3, r2
 8004106:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800410a:	691b      	ldr	r3, [r3, #16]
 800410c:	693a      	ldr	r2, [r7, #16]
 800410e:	0151      	lsls	r1, r2, #5
 8004110:	697a      	ldr	r2, [r7, #20]
 8004112:	440a      	add	r2, r1
 8004114:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004118:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800411c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	015a      	lsls	r2, r3, #5
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	4413      	add	r3, r2
 8004126:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800412a:	691b      	ldr	r3, [r3, #16]
 800412c:	693a      	ldr	r2, [r7, #16]
 800412e:	0151      	lsls	r1, r2, #5
 8004130:	697a      	ldr	r2, [r7, #20]
 8004132:	440a      	add	r2, r1
 8004134:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004138:	0cdb      	lsrs	r3, r3, #19
 800413a:	04db      	lsls	r3, r3, #19
 800413c:	6113      	str	r3, [r2, #16]
 800413e:	e074      	b.n	800422a <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	015a      	lsls	r2, r3, #5
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	4413      	add	r3, r2
 8004148:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800414c:	691b      	ldr	r3, [r3, #16]
 800414e:	693a      	ldr	r2, [r7, #16]
 8004150:	0151      	lsls	r1, r2, #5
 8004152:	697a      	ldr	r2, [r7, #20]
 8004154:	440a      	add	r2, r1
 8004156:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800415a:	0cdb      	lsrs	r3, r3, #19
 800415c:	04db      	lsls	r3, r3, #19
 800415e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	015a      	lsls	r2, r3, #5
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	4413      	add	r3, r2
 8004168:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800416c:	691b      	ldr	r3, [r3, #16]
 800416e:	693a      	ldr	r2, [r7, #16]
 8004170:	0151      	lsls	r1, r2, #5
 8004172:	697a      	ldr	r2, [r7, #20]
 8004174:	440a      	add	r2, r1
 8004176:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800417a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800417e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004182:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	015a      	lsls	r2, r3, #5
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	4413      	add	r3, r2
 800418c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004190:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	6999      	ldr	r1, [r3, #24]
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	68db      	ldr	r3, [r3, #12]
 800419a:	440b      	add	r3, r1
 800419c:	1e59      	subs	r1, r3, #1
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	68db      	ldr	r3, [r3, #12]
 80041a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80041a6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80041a8:	4b9e      	ldr	r3, [pc, #632]	; (8004424 <USB_EPStartXfer+0x370>)
 80041aa:	400b      	ands	r3, r1
 80041ac:	6939      	ldr	r1, [r7, #16]
 80041ae:	0148      	lsls	r0, r1, #5
 80041b0:	6979      	ldr	r1, [r7, #20]
 80041b2:	4401      	add	r1, r0
 80041b4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80041b8:	4313      	orrs	r3, r2
 80041ba:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	015a      	lsls	r2, r3, #5
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	4413      	add	r3, r2
 80041c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041c8:	691a      	ldr	r2, [r3, #16]
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	699b      	ldr	r3, [r3, #24]
 80041ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041d2:	6939      	ldr	r1, [r7, #16]
 80041d4:	0148      	lsls	r0, r1, #5
 80041d6:	6979      	ldr	r1, [r7, #20]
 80041d8:	4401      	add	r1, r0
 80041da:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80041de:	4313      	orrs	r3, r2
 80041e0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	791b      	ldrb	r3, [r3, #4]
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d11f      	bne.n	800422a <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	015a      	lsls	r2, r3, #5
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	4413      	add	r3, r2
 80041f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041f6:	691b      	ldr	r3, [r3, #16]
 80041f8:	693a      	ldr	r2, [r7, #16]
 80041fa:	0151      	lsls	r1, r2, #5
 80041fc:	697a      	ldr	r2, [r7, #20]
 80041fe:	440a      	add	r2, r1
 8004200:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004204:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004208:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	015a      	lsls	r2, r3, #5
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	4413      	add	r3, r2
 8004212:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004216:	691b      	ldr	r3, [r3, #16]
 8004218:	693a      	ldr	r2, [r7, #16]
 800421a:	0151      	lsls	r1, r2, #5
 800421c:	697a      	ldr	r2, [r7, #20]
 800421e:	440a      	add	r2, r1
 8004220:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004224:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004228:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	015a      	lsls	r2, r3, #5
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	4413      	add	r3, r2
 8004232:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	693a      	ldr	r2, [r7, #16]
 800423a:	0151      	lsls	r1, r2, #5
 800423c:	697a      	ldr	r2, [r7, #20]
 800423e:	440a      	add	r2, r1
 8004240:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004244:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004248:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	791b      	ldrb	r3, [r3, #4]
 800424e:	2b01      	cmp	r3, #1
 8004250:	d015      	beq.n	800427e <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	699b      	ldr	r3, [r3, #24]
 8004256:	2b00      	cmp	r3, #0
 8004258:	f000 8106 	beq.w	8004468 <USB_EPStartXfer+0x3b4>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004262:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	781b      	ldrb	r3, [r3, #0]
 8004268:	f003 030f 	and.w	r3, r3, #15
 800426c:	2101      	movs	r1, #1
 800426e:	fa01 f303 	lsl.w	r3, r1, r3
 8004272:	6979      	ldr	r1, [r7, #20]
 8004274:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004278:	4313      	orrs	r3, r2
 800427a:	634b      	str	r3, [r1, #52]	; 0x34
 800427c:	e0f4      	b.n	8004468 <USB_EPStartXfer+0x3b4>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800428a:	2b00      	cmp	r3, #0
 800428c:	d110      	bne.n	80042b0 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	015a      	lsls	r2, r3, #5
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	4413      	add	r3, r2
 8004296:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	693a      	ldr	r2, [r7, #16]
 800429e:	0151      	lsls	r1, r2, #5
 80042a0:	697a      	ldr	r2, [r7, #20]
 80042a2:	440a      	add	r2, r1
 80042a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042a8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80042ac:	6013      	str	r3, [r2, #0]
 80042ae:	e00f      	b.n	80042d0 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	015a      	lsls	r2, r3, #5
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	4413      	add	r3, r2
 80042b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	693a      	ldr	r2, [r7, #16]
 80042c0:	0151      	lsls	r1, r2, #5
 80042c2:	697a      	ldr	r2, [r7, #20]
 80042c4:	440a      	add	r2, r1
 80042c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042ce:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	6919      	ldr	r1, [r3, #16]
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	781a      	ldrb	r2, [r3, #0]
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	699b      	ldr	r3, [r3, #24]
 80042dc:	b29b      	uxth	r3, r3
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f000 fa94 	bl	800480c <USB_WritePacket>
 80042e4:	e0c0      	b.n	8004468 <USB_EPStartXfer+0x3b4>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	015a      	lsls	r2, r3, #5
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	4413      	add	r3, r2
 80042ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042f2:	691b      	ldr	r3, [r3, #16]
 80042f4:	693a      	ldr	r2, [r7, #16]
 80042f6:	0151      	lsls	r1, r2, #5
 80042f8:	697a      	ldr	r2, [r7, #20]
 80042fa:	440a      	add	r2, r1
 80042fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004300:	0cdb      	lsrs	r3, r3, #19
 8004302:	04db      	lsls	r3, r3, #19
 8004304:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	015a      	lsls	r2, r3, #5
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	4413      	add	r3, r2
 800430e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004312:	691b      	ldr	r3, [r3, #16]
 8004314:	693a      	ldr	r2, [r7, #16]
 8004316:	0151      	lsls	r1, r2, #5
 8004318:	697a      	ldr	r2, [r7, #20]
 800431a:	440a      	add	r2, r1
 800431c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004320:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004324:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004328:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	699b      	ldr	r3, [r3, #24]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d123      	bne.n	800437a <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	015a      	lsls	r2, r3, #5
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	4413      	add	r3, r2
 800433a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800433e:	691a      	ldr	r2, [r3, #16]
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004348:	6939      	ldr	r1, [r7, #16]
 800434a:	0148      	lsls	r0, r1, #5
 800434c:	6979      	ldr	r1, [r7, #20]
 800434e:	4401      	add	r1, r0
 8004350:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004354:	4313      	orrs	r3, r2
 8004356:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	015a      	lsls	r2, r3, #5
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	4413      	add	r3, r2
 8004360:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004364:	691b      	ldr	r3, [r3, #16]
 8004366:	693a      	ldr	r2, [r7, #16]
 8004368:	0151      	lsls	r1, r2, #5
 800436a:	697a      	ldr	r2, [r7, #20]
 800436c:	440a      	add	r2, r1
 800436e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004372:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004376:	6113      	str	r3, [r2, #16]
 8004378:	e037      	b.n	80043ea <USB_EPStartXfer+0x336>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	699a      	ldr	r2, [r3, #24]
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	68db      	ldr	r3, [r3, #12]
 8004382:	4413      	add	r3, r2
 8004384:	1e5a      	subs	r2, r3, #1
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	68db      	ldr	r3, [r3, #12]
 800438a:	fbb2 f3f3 	udiv	r3, r2, r3
 800438e:	81fb      	strh	r3, [r7, #14]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	89fa      	ldrh	r2, [r7, #14]
 8004396:	fb03 f202 	mul.w	r2, r3, r2
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	015a      	lsls	r2, r3, #5
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	4413      	add	r3, r2
 80043a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043aa:	691a      	ldr	r2, [r3, #16]
 80043ac:	89fb      	ldrh	r3, [r7, #14]
 80043ae:	04d9      	lsls	r1, r3, #19
 80043b0:	4b1c      	ldr	r3, [pc, #112]	; (8004424 <USB_EPStartXfer+0x370>)
 80043b2:	400b      	ands	r3, r1
 80043b4:	6939      	ldr	r1, [r7, #16]
 80043b6:	0148      	lsls	r0, r1, #5
 80043b8:	6979      	ldr	r1, [r7, #20]
 80043ba:	4401      	add	r1, r0
 80043bc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80043c0:	4313      	orrs	r3, r2
 80043c2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	015a      	lsls	r2, r3, #5
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	4413      	add	r3, r2
 80043cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043d0:	691a      	ldr	r2, [r3, #16]
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	69db      	ldr	r3, [r3, #28]
 80043d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043da:	6939      	ldr	r1, [r7, #16]
 80043dc:	0148      	lsls	r0, r1, #5
 80043de:	6979      	ldr	r1, [r7, #20]
 80043e0:	4401      	add	r1, r0
 80043e2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80043e6:	4313      	orrs	r3, r2
 80043e8:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	791b      	ldrb	r3, [r3, #4]
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d12a      	bne.n	8004448 <USB_EPStartXfer+0x394>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d112      	bne.n	8004428 <USB_EPStartXfer+0x374>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	015a      	lsls	r2, r3, #5
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	4413      	add	r3, r2
 800440a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	693a      	ldr	r2, [r7, #16]
 8004412:	0151      	lsls	r1, r2, #5
 8004414:	697a      	ldr	r2, [r7, #20]
 8004416:	440a      	add	r2, r1
 8004418:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800441c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004420:	6013      	str	r3, [r2, #0]
 8004422:	e011      	b.n	8004448 <USB_EPStartXfer+0x394>
 8004424:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	015a      	lsls	r2, r3, #5
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	4413      	add	r3, r2
 8004430:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	693a      	ldr	r2, [r7, #16]
 8004438:	0151      	lsls	r1, r2, #5
 800443a:	697a      	ldr	r2, [r7, #20]
 800443c:	440a      	add	r2, r1
 800443e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004442:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004446:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	015a      	lsls	r2, r3, #5
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	4413      	add	r3, r2
 8004450:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	693a      	ldr	r2, [r7, #16]
 8004458:	0151      	lsls	r1, r2, #5
 800445a:	697a      	ldr	r2, [r7, #20]
 800445c:	440a      	add	r2, r1
 800445e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004462:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004466:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004468:	2300      	movs	r3, #0
}
 800446a:	4618      	mov	r0, r3
 800446c:	3718      	adds	r7, #24
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}
 8004472:	bf00      	nop

08004474 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004474:	b480      	push	{r7}
 8004476:	b085      	sub	sp, #20
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
 800447c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	781b      	ldrb	r3, [r3, #0]
 8004486:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	785b      	ldrb	r3, [r3, #1]
 800448c:	2b01      	cmp	r3, #1
 800448e:	f040 80ab 	bne.w	80045e8 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	699b      	ldr	r3, [r3, #24]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d132      	bne.n	8004500 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	015a      	lsls	r2, r3, #5
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	4413      	add	r3, r2
 80044a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044a6:	691b      	ldr	r3, [r3, #16]
 80044a8:	68ba      	ldr	r2, [r7, #8]
 80044aa:	0151      	lsls	r1, r2, #5
 80044ac:	68fa      	ldr	r2, [r7, #12]
 80044ae:	440a      	add	r2, r1
 80044b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044b4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80044b8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80044bc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	015a      	lsls	r2, r3, #5
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	4413      	add	r3, r2
 80044c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044ca:	691b      	ldr	r3, [r3, #16]
 80044cc:	68ba      	ldr	r2, [r7, #8]
 80044ce:	0151      	lsls	r1, r2, #5
 80044d0:	68fa      	ldr	r2, [r7, #12]
 80044d2:	440a      	add	r2, r1
 80044d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80044dc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	015a      	lsls	r2, r3, #5
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	4413      	add	r3, r2
 80044e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044ea:	691b      	ldr	r3, [r3, #16]
 80044ec:	68ba      	ldr	r2, [r7, #8]
 80044ee:	0151      	lsls	r1, r2, #5
 80044f0:	68fa      	ldr	r2, [r7, #12]
 80044f2:	440a      	add	r2, r1
 80044f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044f8:	0cdb      	lsrs	r3, r3, #19
 80044fa:	04db      	lsls	r3, r3, #19
 80044fc:	6113      	str	r3, [r2, #16]
 80044fe:	e04e      	b.n	800459e <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	015a      	lsls	r2, r3, #5
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	4413      	add	r3, r2
 8004508:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800450c:	691b      	ldr	r3, [r3, #16]
 800450e:	68ba      	ldr	r2, [r7, #8]
 8004510:	0151      	lsls	r1, r2, #5
 8004512:	68fa      	ldr	r2, [r7, #12]
 8004514:	440a      	add	r2, r1
 8004516:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800451a:	0cdb      	lsrs	r3, r3, #19
 800451c:	04db      	lsls	r3, r3, #19
 800451e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	015a      	lsls	r2, r3, #5
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	4413      	add	r3, r2
 8004528:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800452c:	691b      	ldr	r3, [r3, #16]
 800452e:	68ba      	ldr	r2, [r7, #8]
 8004530:	0151      	lsls	r1, r2, #5
 8004532:	68fa      	ldr	r2, [r7, #12]
 8004534:	440a      	add	r2, r1
 8004536:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800453a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800453e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004542:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	699a      	ldr	r2, [r3, #24]
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	429a      	cmp	r2, r3
 800454e:	d903      	bls.n	8004558 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	68da      	ldr	r2, [r3, #12]
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	015a      	lsls	r2, r3, #5
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	4413      	add	r3, r2
 8004560:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004564:	691b      	ldr	r3, [r3, #16]
 8004566:	68ba      	ldr	r2, [r7, #8]
 8004568:	0151      	lsls	r1, r2, #5
 800456a:	68fa      	ldr	r2, [r7, #12]
 800456c:	440a      	add	r2, r1
 800456e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004572:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004576:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	015a      	lsls	r2, r3, #5
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	4413      	add	r3, r2
 8004580:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004584:	691a      	ldr	r2, [r3, #16]
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	699b      	ldr	r3, [r3, #24]
 800458a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800458e:	68b9      	ldr	r1, [r7, #8]
 8004590:	0148      	lsls	r0, r1, #5
 8004592:	68f9      	ldr	r1, [r7, #12]
 8004594:	4401      	add	r1, r0
 8004596:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800459a:	4313      	orrs	r3, r2
 800459c:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	015a      	lsls	r2, r3, #5
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	4413      	add	r3, r2
 80045a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	68ba      	ldr	r2, [r7, #8]
 80045ae:	0151      	lsls	r1, r2, #5
 80045b0:	68fa      	ldr	r2, [r7, #12]
 80045b2:	440a      	add	r2, r1
 80045b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045b8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80045bc:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	699b      	ldr	r3, [r3, #24]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d071      	beq.n	80046aa <USB_EP0StartXfer+0x236>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	781b      	ldrb	r3, [r3, #0]
 80045d2:	f003 030f 	and.w	r3, r3, #15
 80045d6:	2101      	movs	r1, #1
 80045d8:	fa01 f303 	lsl.w	r3, r1, r3
 80045dc:	68f9      	ldr	r1, [r7, #12]
 80045de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80045e2:	4313      	orrs	r3, r2
 80045e4:	634b      	str	r3, [r1, #52]	; 0x34
 80045e6:	e060      	b.n	80046aa <USB_EP0StartXfer+0x236>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	015a      	lsls	r2, r3, #5
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	4413      	add	r3, r2
 80045f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045f4:	691b      	ldr	r3, [r3, #16]
 80045f6:	68ba      	ldr	r2, [r7, #8]
 80045f8:	0151      	lsls	r1, r2, #5
 80045fa:	68fa      	ldr	r2, [r7, #12]
 80045fc:	440a      	add	r2, r1
 80045fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004602:	0cdb      	lsrs	r3, r3, #19
 8004604:	04db      	lsls	r3, r3, #19
 8004606:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	015a      	lsls	r2, r3, #5
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	4413      	add	r3, r2
 8004610:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004614:	691b      	ldr	r3, [r3, #16]
 8004616:	68ba      	ldr	r2, [r7, #8]
 8004618:	0151      	lsls	r1, r2, #5
 800461a:	68fa      	ldr	r2, [r7, #12]
 800461c:	440a      	add	r2, r1
 800461e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004622:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004626:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800462a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	699b      	ldr	r3, [r3, #24]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d003      	beq.n	800463c <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	68da      	ldr	r2, [r3, #12]
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	68da      	ldr	r2, [r3, #12]
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	015a      	lsls	r2, r3, #5
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	4413      	add	r3, r2
 800464c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004650:	691b      	ldr	r3, [r3, #16]
 8004652:	68ba      	ldr	r2, [r7, #8]
 8004654:	0151      	lsls	r1, r2, #5
 8004656:	68fa      	ldr	r2, [r7, #12]
 8004658:	440a      	add	r2, r1
 800465a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800465e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004662:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	015a      	lsls	r2, r3, #5
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	4413      	add	r3, r2
 800466c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004670:	691a      	ldr	r2, [r3, #16]
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	69db      	ldr	r3, [r3, #28]
 8004676:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800467a:	68b9      	ldr	r1, [r7, #8]
 800467c:	0148      	lsls	r0, r1, #5
 800467e:	68f9      	ldr	r1, [r7, #12]
 8004680:	4401      	add	r1, r0
 8004682:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004686:	4313      	orrs	r3, r2
 8004688:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	015a      	lsls	r2, r3, #5
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	4413      	add	r3, r2
 8004692:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	68ba      	ldr	r2, [r7, #8]
 800469a:	0151      	lsls	r1, r2, #5
 800469c:	68fa      	ldr	r2, [r7, #12]
 800469e:	440a      	add	r2, r1
 80046a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046a4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80046a8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80046aa:	2300      	movs	r3, #0
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3714      	adds	r7, #20
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr

080046b8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b087      	sub	sp, #28
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80046c2:	2300      	movs	r3, #0
 80046c4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80046c6:	2300      	movs	r3, #0
 80046c8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	785b      	ldrb	r3, [r3, #1]
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d14a      	bne.n	800476c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	781b      	ldrb	r3, [r3, #0]
 80046da:	015a      	lsls	r2, r3, #5
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	4413      	add	r3, r2
 80046e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80046ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80046ee:	f040 8086 	bne.w	80047fe <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	781b      	ldrb	r3, [r3, #0]
 80046f6:	015a      	lsls	r2, r3, #5
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	4413      	add	r3, r2
 80046fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	683a      	ldr	r2, [r7, #0]
 8004704:	7812      	ldrb	r2, [r2, #0]
 8004706:	0151      	lsls	r1, r2, #5
 8004708:	693a      	ldr	r2, [r7, #16]
 800470a:	440a      	add	r2, r1
 800470c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004710:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004714:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	781b      	ldrb	r3, [r3, #0]
 800471a:	015a      	lsls	r2, r3, #5
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	4413      	add	r3, r2
 8004720:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	683a      	ldr	r2, [r7, #0]
 8004728:	7812      	ldrb	r2, [r2, #0]
 800472a:	0151      	lsls	r1, r2, #5
 800472c:	693a      	ldr	r2, [r7, #16]
 800472e:	440a      	add	r2, r1
 8004730:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004734:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004738:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	3301      	adds	r3, #1
 800473e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f242 7210 	movw	r2, #10000	; 0x2710
 8004746:	4293      	cmp	r3, r2
 8004748:	d902      	bls.n	8004750 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	75fb      	strb	r3, [r7, #23]
          break;
 800474e:	e056      	b.n	80047fe <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	781b      	ldrb	r3, [r3, #0]
 8004754:	015a      	lsls	r2, r3, #5
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	4413      	add	r3, r2
 800475a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004764:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004768:	d0e7      	beq.n	800473a <USB_EPStopXfer+0x82>
 800476a:	e048      	b.n	80047fe <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	781b      	ldrb	r3, [r3, #0]
 8004770:	015a      	lsls	r2, r3, #5
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	4413      	add	r3, r2
 8004776:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004780:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004784:	d13b      	bne.n	80047fe <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	781b      	ldrb	r3, [r3, #0]
 800478a:	015a      	lsls	r2, r3, #5
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	4413      	add	r3, r2
 8004790:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	683a      	ldr	r2, [r7, #0]
 8004798:	7812      	ldrb	r2, [r2, #0]
 800479a:	0151      	lsls	r1, r2, #5
 800479c:	693a      	ldr	r2, [r7, #16]
 800479e:	440a      	add	r2, r1
 80047a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047a4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80047a8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	781b      	ldrb	r3, [r3, #0]
 80047ae:	015a      	lsls	r2, r3, #5
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	4413      	add	r3, r2
 80047b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	683a      	ldr	r2, [r7, #0]
 80047bc:	7812      	ldrb	r2, [r2, #0]
 80047be:	0151      	lsls	r1, r2, #5
 80047c0:	693a      	ldr	r2, [r7, #16]
 80047c2:	440a      	add	r2, r1
 80047c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047c8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80047cc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	3301      	adds	r3, #1
 80047d2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	f242 7210 	movw	r2, #10000	; 0x2710
 80047da:	4293      	cmp	r3, r2
 80047dc:	d902      	bls.n	80047e4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	75fb      	strb	r3, [r7, #23]
          break;
 80047e2:	e00c      	b.n	80047fe <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	781b      	ldrb	r3, [r3, #0]
 80047e8:	015a      	lsls	r2, r3, #5
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	4413      	add	r3, r2
 80047ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80047f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80047fc:	d0e7      	beq.n	80047ce <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80047fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8004800:	4618      	mov	r0, r3
 8004802:	371c      	adds	r7, #28
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr

0800480c <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 800480c:	b480      	push	{r7}
 800480e:	b089      	sub	sp, #36	; 0x24
 8004810:	af00      	add	r7, sp, #0
 8004812:	60f8      	str	r0, [r7, #12]
 8004814:	60b9      	str	r1, [r7, #8]
 8004816:	4611      	mov	r1, r2
 8004818:	461a      	mov	r2, r3
 800481a:	460b      	mov	r3, r1
 800481c:	71fb      	strb	r3, [r7, #7]
 800481e:	4613      	mov	r3, r2
 8004820:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800482a:	88bb      	ldrh	r3, [r7, #4]
 800482c:	3303      	adds	r3, #3
 800482e:	089b      	lsrs	r3, r3, #2
 8004830:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8004832:	2300      	movs	r3, #0
 8004834:	61bb      	str	r3, [r7, #24]
 8004836:	e018      	b.n	800486a <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004838:	79fb      	ldrb	r3, [r7, #7]
 800483a:	031a      	lsls	r2, r3, #12
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	4413      	add	r3, r2
 8004840:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004844:	461a      	mov	r2, r3
 8004846:	69fb      	ldr	r3, [r7, #28]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	6013      	str	r3, [r2, #0]
    pSrc++;
 800484c:	69fb      	ldr	r3, [r7, #28]
 800484e:	3301      	adds	r3, #1
 8004850:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8004852:	69fb      	ldr	r3, [r7, #28]
 8004854:	3301      	adds	r3, #1
 8004856:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8004858:	69fb      	ldr	r3, [r7, #28]
 800485a:	3301      	adds	r3, #1
 800485c:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800485e:	69fb      	ldr	r3, [r7, #28]
 8004860:	3301      	adds	r3, #1
 8004862:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8004864:	69bb      	ldr	r3, [r7, #24]
 8004866:	3301      	adds	r3, #1
 8004868:	61bb      	str	r3, [r7, #24]
 800486a:	69ba      	ldr	r2, [r7, #24]
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	429a      	cmp	r2, r3
 8004870:	d3e2      	bcc.n	8004838 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8004872:	2300      	movs	r3, #0
}
 8004874:	4618      	mov	r0, r3
 8004876:	3724      	adds	r7, #36	; 0x24
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr

08004880 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004880:	b480      	push	{r7}
 8004882:	b08b      	sub	sp, #44	; 0x2c
 8004884:	af00      	add	r7, sp, #0
 8004886:	60f8      	str	r0, [r7, #12]
 8004888:	60b9      	str	r1, [r7, #8]
 800488a:	4613      	mov	r3, r2
 800488c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004896:	88fb      	ldrh	r3, [r7, #6]
 8004898:	089b      	lsrs	r3, r3, #2
 800489a:	b29b      	uxth	r3, r3
 800489c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800489e:	88fb      	ldrh	r3, [r7, #6]
 80048a0:	f003 0303 	and.w	r3, r3, #3
 80048a4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80048a6:	2300      	movs	r3, #0
 80048a8:	623b      	str	r3, [r7, #32]
 80048aa:	e014      	b.n	80048d6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80048ac:	69bb      	ldr	r3, [r7, #24]
 80048ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b6:	601a      	str	r2, [r3, #0]
    pDest++;
 80048b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ba:	3301      	adds	r3, #1
 80048bc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80048be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c0:	3301      	adds	r3, #1
 80048c2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80048c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c6:	3301      	adds	r3, #1
 80048c8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80048ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048cc:	3301      	adds	r3, #1
 80048ce:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80048d0:	6a3b      	ldr	r3, [r7, #32]
 80048d2:	3301      	adds	r3, #1
 80048d4:	623b      	str	r3, [r7, #32]
 80048d6:	6a3a      	ldr	r2, [r7, #32]
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	429a      	cmp	r2, r3
 80048dc:	d3e6      	bcc.n	80048ac <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80048de:	8bfb      	ldrh	r3, [r7, #30]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d01e      	beq.n	8004922 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80048e4:	2300      	movs	r3, #0
 80048e6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80048e8:	69bb      	ldr	r3, [r7, #24]
 80048ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048ee:	461a      	mov	r2, r3
 80048f0:	f107 0310 	add.w	r3, r7, #16
 80048f4:	6812      	ldr	r2, [r2, #0]
 80048f6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80048f8:	693a      	ldr	r2, [r7, #16]
 80048fa:	6a3b      	ldr	r3, [r7, #32]
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	00db      	lsls	r3, r3, #3
 8004900:	fa22 f303 	lsr.w	r3, r2, r3
 8004904:	b2da      	uxtb	r2, r3
 8004906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004908:	701a      	strb	r2, [r3, #0]
      i++;
 800490a:	6a3b      	ldr	r3, [r7, #32]
 800490c:	3301      	adds	r3, #1
 800490e:	623b      	str	r3, [r7, #32]
      pDest++;
 8004910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004912:	3301      	adds	r3, #1
 8004914:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004916:	8bfb      	ldrh	r3, [r7, #30]
 8004918:	3b01      	subs	r3, #1
 800491a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800491c:	8bfb      	ldrh	r3, [r7, #30]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d1ea      	bne.n	80048f8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004924:	4618      	mov	r0, r3
 8004926:	372c      	adds	r7, #44	; 0x2c
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr

08004930 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004930:	b480      	push	{r7}
 8004932:	b085      	sub	sp, #20
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
 8004938:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	781b      	ldrb	r3, [r3, #0]
 8004942:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	785b      	ldrb	r3, [r3, #1]
 8004948:	2b01      	cmp	r3, #1
 800494a:	d12c      	bne.n	80049a6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	015a      	lsls	r2, r3, #5
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	4413      	add	r3, r2
 8004954:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	2b00      	cmp	r3, #0
 800495c:	db12      	blt.n	8004984 <USB_EPSetStall+0x54>
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d00f      	beq.n	8004984 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	015a      	lsls	r2, r3, #5
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	4413      	add	r3, r2
 800496c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	68ba      	ldr	r2, [r7, #8]
 8004974:	0151      	lsls	r1, r2, #5
 8004976:	68fa      	ldr	r2, [r7, #12]
 8004978:	440a      	add	r2, r1
 800497a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800497e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004982:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	015a      	lsls	r2, r3, #5
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	4413      	add	r3, r2
 800498c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	68ba      	ldr	r2, [r7, #8]
 8004994:	0151      	lsls	r1, r2, #5
 8004996:	68fa      	ldr	r2, [r7, #12]
 8004998:	440a      	add	r2, r1
 800499a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800499e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80049a2:	6013      	str	r3, [r2, #0]
 80049a4:	e02b      	b.n	80049fe <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	015a      	lsls	r2, r3, #5
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	4413      	add	r3, r2
 80049ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	db12      	blt.n	80049de <USB_EPSetStall+0xae>
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d00f      	beq.n	80049de <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	015a      	lsls	r2, r3, #5
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	4413      	add	r3, r2
 80049c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	68ba      	ldr	r2, [r7, #8]
 80049ce:	0151      	lsls	r1, r2, #5
 80049d0:	68fa      	ldr	r2, [r7, #12]
 80049d2:	440a      	add	r2, r1
 80049d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049d8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80049dc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	015a      	lsls	r2, r3, #5
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	4413      	add	r3, r2
 80049e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	68ba      	ldr	r2, [r7, #8]
 80049ee:	0151      	lsls	r1, r2, #5
 80049f0:	68fa      	ldr	r2, [r7, #12]
 80049f2:	440a      	add	r2, r1
 80049f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80049fc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80049fe:	2300      	movs	r3, #0
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3714      	adds	r7, #20
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr

08004a0c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b085      	sub	sp, #20
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
 8004a14:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	781b      	ldrb	r3, [r3, #0]
 8004a1e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	785b      	ldrb	r3, [r3, #1]
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d128      	bne.n	8004a7a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	015a      	lsls	r2, r3, #5
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	4413      	add	r3, r2
 8004a30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	68ba      	ldr	r2, [r7, #8]
 8004a38:	0151      	lsls	r1, r2, #5
 8004a3a:	68fa      	ldr	r2, [r7, #12]
 8004a3c:	440a      	add	r2, r1
 8004a3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a42:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004a46:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	791b      	ldrb	r3, [r3, #4]
 8004a4c:	2b03      	cmp	r3, #3
 8004a4e:	d003      	beq.n	8004a58 <USB_EPClearStall+0x4c>
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	791b      	ldrb	r3, [r3, #4]
 8004a54:	2b02      	cmp	r3, #2
 8004a56:	d138      	bne.n	8004aca <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	015a      	lsls	r2, r3, #5
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	4413      	add	r3, r2
 8004a60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	68ba      	ldr	r2, [r7, #8]
 8004a68:	0151      	lsls	r1, r2, #5
 8004a6a:	68fa      	ldr	r2, [r7, #12]
 8004a6c:	440a      	add	r2, r1
 8004a6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a76:	6013      	str	r3, [r2, #0]
 8004a78:	e027      	b.n	8004aca <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	015a      	lsls	r2, r3, #5
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	4413      	add	r3, r2
 8004a82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	68ba      	ldr	r2, [r7, #8]
 8004a8a:	0151      	lsls	r1, r2, #5
 8004a8c:	68fa      	ldr	r2, [r7, #12]
 8004a8e:	440a      	add	r2, r1
 8004a90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a94:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004a98:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	791b      	ldrb	r3, [r3, #4]
 8004a9e:	2b03      	cmp	r3, #3
 8004aa0:	d003      	beq.n	8004aaa <USB_EPClearStall+0x9e>
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	791b      	ldrb	r3, [r3, #4]
 8004aa6:	2b02      	cmp	r3, #2
 8004aa8:	d10f      	bne.n	8004aca <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	015a      	lsls	r2, r3, #5
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	4413      	add	r3, r2
 8004ab2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	68ba      	ldr	r2, [r7, #8]
 8004aba:	0151      	lsls	r1, r2, #5
 8004abc:	68fa      	ldr	r2, [r7, #12]
 8004abe:	440a      	add	r2, r1
 8004ac0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ac4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ac8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004aca:	2300      	movs	r3, #0
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3714      	adds	r7, #20
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr

08004ad8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b085      	sub	sp, #20
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
 8004ae0:	460b      	mov	r3, r1
 8004ae2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	68fa      	ldr	r2, [r7, #12]
 8004af2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004af6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004afa:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	78fb      	ldrb	r3, [r7, #3]
 8004b06:	011b      	lsls	r3, r3, #4
 8004b08:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004b0c:	68f9      	ldr	r1, [r7, #12]
 8004b0e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b12:	4313      	orrs	r3, r2
 8004b14:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004b16:	2300      	movs	r3, #0
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3714      	adds	r7, #20
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b22:	4770      	bx	lr

08004b24 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b085      	sub	sp, #20
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	68fa      	ldr	r2, [r7, #12]
 8004b3a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004b3e:	f023 0303 	bic.w	r3, r3, #3
 8004b42:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	68fa      	ldr	r2, [r7, #12]
 8004b4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b52:	f023 0302 	bic.w	r3, r3, #2
 8004b56:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004b58:	2300      	movs	r3, #0
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3714      	adds	r7, #20
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr

08004b66 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004b66:	b480      	push	{r7}
 8004b68:	b085      	sub	sp, #20
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	68fa      	ldr	r2, [r7, #12]
 8004b7c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004b80:	f023 0303 	bic.w	r3, r3, #3
 8004b84:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	68fa      	ldr	r2, [r7, #12]
 8004b90:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b94:	f043 0302 	orr.w	r3, r3, #2
 8004b98:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004b9a:	2300      	movs	r3, #0
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	3714      	adds	r7, #20
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr

08004ba8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b085      	sub	sp, #20
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	695b      	ldr	r3, [r3, #20]
 8004bb4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	699b      	ldr	r3, [r3, #24]
 8004bba:	68fa      	ldr	r2, [r7, #12]
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3714      	adds	r7, #20
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bcc:	4770      	bx	lr

08004bce <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004bce:	b480      	push	{r7}
 8004bd0:	b085      	sub	sp, #20
 8004bd2:	af00      	add	r7, sp, #0
 8004bd4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004be0:	699b      	ldr	r3, [r3, #24]
 8004be2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bea:	69db      	ldr	r3, [r3, #28]
 8004bec:	68ba      	ldr	r2, [r7, #8]
 8004bee:	4013      	ands	r3, r2
 8004bf0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	0c1b      	lsrs	r3, r3, #16
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	3714      	adds	r7, #20
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr

08004c02 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004c02:	b480      	push	{r7}
 8004c04:	b085      	sub	sp, #20
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c14:	699b      	ldr	r3, [r3, #24]
 8004c16:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c1e:	69db      	ldr	r3, [r3, #28]
 8004c20:	68ba      	ldr	r2, [r7, #8]
 8004c22:	4013      	ands	r3, r2
 8004c24:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	b29b      	uxth	r3, r3
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3714      	adds	r7, #20
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c34:	4770      	bx	lr

08004c36 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004c36:	b480      	push	{r7}
 8004c38:	b085      	sub	sp, #20
 8004c3a:	af00      	add	r7, sp, #0
 8004c3c:	6078      	str	r0, [r7, #4]
 8004c3e:	460b      	mov	r3, r1
 8004c40:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004c46:	78fb      	ldrb	r3, [r7, #3]
 8004c48:	015a      	lsls	r2, r3, #5
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	4413      	add	r3, r2
 8004c4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c5c:	695b      	ldr	r3, [r3, #20]
 8004c5e:	68ba      	ldr	r2, [r7, #8]
 8004c60:	4013      	ands	r3, r2
 8004c62:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004c64:	68bb      	ldr	r3, [r7, #8]
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3714      	adds	r7, #20
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c70:	4770      	bx	lr

08004c72 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004c72:	b480      	push	{r7}
 8004c74:	b087      	sub	sp, #28
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	6078      	str	r0, [r7, #4]
 8004c7a:	460b      	mov	r3, r1
 8004c7c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c88:	691b      	ldr	r3, [r3, #16]
 8004c8a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c94:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004c96:	78fb      	ldrb	r3, [r7, #3]
 8004c98:	f003 030f 	and.w	r3, r3, #15
 8004c9c:	68fa      	ldr	r2, [r7, #12]
 8004c9e:	fa22 f303 	lsr.w	r3, r2, r3
 8004ca2:	01db      	lsls	r3, r3, #7
 8004ca4:	b2db      	uxtb	r3, r3
 8004ca6:	693a      	ldr	r2, [r7, #16]
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004cac:	78fb      	ldrb	r3, [r7, #3]
 8004cae:	015a      	lsls	r2, r3, #5
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	4413      	add	r3, r2
 8004cb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	693a      	ldr	r2, [r7, #16]
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004cc0:	68bb      	ldr	r3, [r7, #8]
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	371c      	adds	r7, #28
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ccc:	4770      	bx	lr

08004cce <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004cce:	b480      	push	{r7}
 8004cd0:	b083      	sub	sp, #12
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	695b      	ldr	r3, [r3, #20]
 8004cda:	f003 0301 	and.w	r3, r3, #1
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	370c      	adds	r7, #12
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr

08004cea <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004cea:	b480      	push	{r7}
 8004cec:	b085      	sub	sp, #20
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	68fa      	ldr	r2, [r7, #12]
 8004d00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d04:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004d08:	f023 0307 	bic.w	r3, r3, #7
 8004d0c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	68fa      	ldr	r2, [r7, #12]
 8004d18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d20:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004d22:	2300      	movs	r3, #0
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	3714      	adds	r7, #20
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2e:	4770      	bx	lr

08004d30 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b085      	sub	sp, #20
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
 8004d38:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	333c      	adds	r3, #60	; 0x3c
 8004d42:	3304      	adds	r3, #4
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	4a1c      	ldr	r2, [pc, #112]	; (8004dbc <USB_EP0_OutStart+0x8c>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d90a      	bls.n	8004d66 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d60:	d101      	bne.n	8004d66 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8004d62:	2300      	movs	r3, #0
 8004d64:	e024      	b.n	8004db0 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d6c:	461a      	mov	r2, r3
 8004d6e:	2300      	movs	r3, #0
 8004d70:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d78:	691b      	ldr	r3, [r3, #16]
 8004d7a:	68fa      	ldr	r2, [r7, #12]
 8004d7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d80:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d84:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d8c:	691b      	ldr	r3, [r3, #16]
 8004d8e:	68fa      	ldr	r2, [r7, #12]
 8004d90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d94:	f043 0318 	orr.w	r3, r3, #24
 8004d98:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004da0:	691b      	ldr	r3, [r3, #16]
 8004da2:	68fa      	ldr	r2, [r7, #12]
 8004da4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004da8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004dac:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8004dae:	2300      	movs	r3, #0
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3714      	adds	r7, #20
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr
 8004dbc:	4f54300a 	.word	0x4f54300a

08004dc0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b085      	sub	sp, #20
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	3301      	adds	r3, #1
 8004dd0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	4a13      	ldr	r2, [pc, #76]	; (8004e24 <USB_CoreReset+0x64>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d901      	bls.n	8004dde <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004dda:	2303      	movs	r3, #3
 8004ddc:	e01b      	b.n	8004e16 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	691b      	ldr	r3, [r3, #16]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	daf2      	bge.n	8004dcc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004de6:	2300      	movs	r3, #0
 8004de8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	691b      	ldr	r3, [r3, #16]
 8004dee:	f043 0201 	orr.w	r2, r3, #1
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	3301      	adds	r3, #1
 8004dfa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	4a09      	ldr	r2, [pc, #36]	; (8004e24 <USB_CoreReset+0x64>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d901      	bls.n	8004e08 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004e04:	2303      	movs	r3, #3
 8004e06:	e006      	b.n	8004e16 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	691b      	ldr	r3, [r3, #16]
 8004e0c:	f003 0301 	and.w	r3, r3, #1
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d0f0      	beq.n	8004df6 <USB_CoreReset+0x36>

  return HAL_OK;
 8004e14:	2300      	movs	r3, #0
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3714      	adds	r7, #20
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e20:	4770      	bx	lr
 8004e22:	bf00      	nop
 8004e24:	00030d40 	.word	0x00030d40

08004e28 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b084      	sub	sp, #16
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	460b      	mov	r3, r1
 8004e32:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 8004e34:	f44f 701d 	mov.w	r0, #628	; 0x274
 8004e38:	f003 fd62 	bl	8008900 <USBD_static_malloc>
 8004e3c:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d105      	bne.n	8004e50 <USBD_MSC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2200      	movs	r2, #0
 8004e48:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8004e4c:	2302      	movs	r3, #2
 8004e4e:	e034      	b.n	8004eba <USBD_MSC_Init+0x92>
  }

  pdev->pClassData = (void *)hmsc;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	68fa      	ldr	r2, [r7, #12]
 8004e54:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	7c1b      	ldrb	r3, [r3, #16]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d115      	bne.n	8004e8c <USBD_MSC_Init+0x64>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8004e60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e64:	2202      	movs	r2, #2
 8004e66:	2101      	movs	r1, #1
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f003 faff 	bl	800846c <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2201      	movs	r2, #1
 8004e72:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8004e76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e7a:	2202      	movs	r2, #2
 8004e7c:	2181      	movs	r1, #129	; 0x81
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f003 faf4 	bl	800846c <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2201      	movs	r2, #1
 8004e88:	871a      	strh	r2, [r3, #56]	; 0x38
 8004e8a:	e012      	b.n	8004eb2 <USBD_MSC_Init+0x8a>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8004e8c:	2340      	movs	r3, #64	; 0x40
 8004e8e:	2202      	movs	r2, #2
 8004e90:	2101      	movs	r1, #1
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f003 faea 	bl	800846c <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8004ea0:	2340      	movs	r3, #64	; 0x40
 8004ea2:	2202      	movs	r2, #2
 8004ea4:	2181      	movs	r1, #129	; 0x81
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f003 fae0 	bl	800846c <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	871a      	strh	r2, [r3, #56]	; 0x38
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f000 f999 	bl	80051ea <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 8004eb8:	2300      	movs	r3, #0
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3710      	adds	r7, #16
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}

08004ec2 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004ec2:	b580      	push	{r7, lr}
 8004ec4:	b082      	sub	sp, #8
 8004ec6:	af00      	add	r7, sp, #0
 8004ec8:	6078      	str	r0, [r7, #4]
 8004eca:	460b      	mov	r3, r1
 8004ecc:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 8004ece:	2101      	movs	r1, #1
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	f003 fb09 	bl	80084e8 <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 8004ede:	2181      	movs	r1, #129	; 0x81
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f003 fb01 	bl	80084e8 <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d00c      	beq.n	8004f10 <USBD_MSC_DeInit+0x4e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f000 f9d5 	bl	80052a6 <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassData);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004f02:	4618      	mov	r0, r3
 8004f04:	f003 fd0a 	bl	800891c <USBD_static_free>
    pdev->pClassData = NULL;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004f10:	2300      	movs	r3, #0
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3708      	adds	r7, #8
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}
	...

08004f1c <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b086      	sub	sp, #24
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
 8004f24:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004f2c:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 8004f32:	2300      	movs	r3, #0
 8004f34:	81fb      	strh	r3, [r7, #14]

  if (hmsc == NULL)
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d101      	bne.n	8004f40 <USBD_MSC_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8004f3c:	2303      	movs	r3, #3
 8004f3e:	e0db      	b.n	80050f8 <USBD_MSC_Setup+0x1dc>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	781b      	ldrb	r3, [r3, #0]
 8004f44:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d04e      	beq.n	8004fea <USBD_MSC_Setup+0xce>
 8004f4c:	2b20      	cmp	r3, #32
 8004f4e:	f040 80cb 	bne.w	80050e8 <USBD_MSC_Setup+0x1cc>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	785b      	ldrb	r3, [r3, #1]
 8004f56:	2bfe      	cmp	r3, #254	; 0xfe
 8004f58:	d002      	beq.n	8004f60 <USBD_MSC_Setup+0x44>
 8004f5a:	2bff      	cmp	r3, #255	; 0xff
 8004f5c:	d025      	beq.n	8004faa <USBD_MSC_Setup+0x8e>
 8004f5e:	e03c      	b.n	8004fda <USBD_MSC_Setup+0xbe>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	885b      	ldrh	r3, [r3, #2]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d119      	bne.n	8004f9c <USBD_MSC_Setup+0x80>
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	88db      	ldrh	r3, [r3, #6]
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d115      	bne.n	8004f9c <USBD_MSC_Setup+0x80>
              ((req->bmRequest & 0x80U) == 0x80U))
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	781b      	ldrb	r3, [r3, #0]
 8004f74:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	da10      	bge.n	8004f9c <USBD_MSC_Setup+0x80>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004f80:	699b      	ldr	r3, [r3, #24]
 8004f82:	4798      	blx	r3
 8004f84:	4603      	mov	r3, r0
 8004f86:	461a      	mov	r2, r3
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	4619      	mov	r1, r3
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f002 fe3d 	bl	8007c12 <USBD_CtlSendData>
 8004f98:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004f9a:	e025      	b.n	8004fe8 <USBD_MSC_Setup+0xcc>
            USBD_CtlError(pdev, req);
 8004f9c:	6839      	ldr	r1, [r7, #0]
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f002 fdc6 	bl	8007b30 <USBD_CtlError>
            ret = USBD_FAIL;
 8004fa4:	2303      	movs	r3, #3
 8004fa6:	75fb      	strb	r3, [r7, #23]
          break;
 8004fa8:	e01e      	b.n	8004fe8 <USBD_MSC_Setup+0xcc>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	885b      	ldrh	r3, [r3, #2]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d10c      	bne.n	8004fcc <USBD_MSC_Setup+0xb0>
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	88db      	ldrh	r3, [r3, #6]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d108      	bne.n	8004fcc <USBD_MSC_Setup+0xb0>
              ((req->bmRequest & 0x80U) != 0x80U))
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	781b      	ldrb	r3, [r3, #0]
 8004fbe:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	db03      	blt.n	8004fcc <USBD_MSC_Setup+0xb0>
          {
            MSC_BOT_Reset(pdev);
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f000 f948 	bl	800525a <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004fca:	e00d      	b.n	8004fe8 <USBD_MSC_Setup+0xcc>
            USBD_CtlError(pdev, req);
 8004fcc:	6839      	ldr	r1, [r7, #0]
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f002 fdae 	bl	8007b30 <USBD_CtlError>
            ret = USBD_FAIL;
 8004fd4:	2303      	movs	r3, #3
 8004fd6:	75fb      	strb	r3, [r7, #23]
          break;
 8004fd8:	e006      	b.n	8004fe8 <USBD_MSC_Setup+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8004fda:	6839      	ldr	r1, [r7, #0]
 8004fdc:	6878      	ldr	r0, [r7, #4]
 8004fde:	f002 fda7 	bl	8007b30 <USBD_CtlError>
          ret = USBD_FAIL;
 8004fe2:	2303      	movs	r3, #3
 8004fe4:	75fb      	strb	r3, [r7, #23]
          break;
 8004fe6:	bf00      	nop
      }
      break;
 8004fe8:	e085      	b.n	80050f6 <USBD_MSC_Setup+0x1da>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	785b      	ldrb	r3, [r3, #1]
 8004fee:	2b0b      	cmp	r3, #11
 8004ff0:	d871      	bhi.n	80050d6 <USBD_MSC_Setup+0x1ba>
 8004ff2:	a201      	add	r2, pc, #4	; (adr r2, 8004ff8 <USBD_MSC_Setup+0xdc>)
 8004ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ff8:	08005029 	.word	0x08005029
 8004ffc:	080050a5 	.word	0x080050a5
 8005000:	080050d7 	.word	0x080050d7
 8005004:	080050d7 	.word	0x080050d7
 8005008:	080050d7 	.word	0x080050d7
 800500c:	080050d7 	.word	0x080050d7
 8005010:	080050d7 	.word	0x080050d7
 8005014:	080050d7 	.word	0x080050d7
 8005018:	080050d7 	.word	0x080050d7
 800501c:	080050d7 	.word	0x080050d7
 8005020:	08005053 	.word	0x08005053
 8005024:	0800507d 	.word	0x0800507d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800502e:	b2db      	uxtb	r3, r3
 8005030:	2b03      	cmp	r3, #3
 8005032:	d107      	bne.n	8005044 <USBD_MSC_Setup+0x128>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005034:	f107 030e 	add.w	r3, r7, #14
 8005038:	2202      	movs	r2, #2
 800503a:	4619      	mov	r1, r3
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	f002 fde8 	bl	8007c12 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005042:	e050      	b.n	80050e6 <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 8005044:	6839      	ldr	r1, [r7, #0]
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f002 fd72 	bl	8007b30 <USBD_CtlError>
            ret = USBD_FAIL;
 800504c:	2303      	movs	r3, #3
 800504e:	75fb      	strb	r3, [r7, #23]
          break;
 8005050:	e049      	b.n	80050e6 <USBD_MSC_Setup+0x1ca>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005058:	b2db      	uxtb	r3, r3
 800505a:	2b03      	cmp	r3, #3
 800505c:	d107      	bne.n	800506e <USBD_MSC_Setup+0x152>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	3304      	adds	r3, #4
 8005062:	2201      	movs	r2, #1
 8005064:	4619      	mov	r1, r3
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f002 fdd3 	bl	8007c12 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800506c:	e03b      	b.n	80050e6 <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 800506e:	6839      	ldr	r1, [r7, #0]
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f002 fd5d 	bl	8007b30 <USBD_CtlError>
            ret = USBD_FAIL;
 8005076:	2303      	movs	r3, #3
 8005078:	75fb      	strb	r3, [r7, #23]
          break;
 800507a:	e034      	b.n	80050e6 <USBD_MSC_Setup+0x1ca>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005082:	b2db      	uxtb	r3, r3
 8005084:	2b03      	cmp	r3, #3
 8005086:	d106      	bne.n	8005096 <USBD_MSC_Setup+0x17a>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	885b      	ldrh	r3, [r3, #2]
 800508c:	b2db      	uxtb	r3, r3
 800508e:	461a      	mov	r2, r3
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005094:	e027      	b.n	80050e6 <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 8005096:	6839      	ldr	r1, [r7, #0]
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f002 fd49 	bl	8007b30 <USBD_CtlError>
            ret = USBD_FAIL;
 800509e:	2303      	movs	r3, #3
 80050a0:	75fb      	strb	r3, [r7, #23]
          break;
 80050a2:	e020      	b.n	80050e6 <USBD_MSC_Setup+0x1ca>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80050aa:	b2db      	uxtb	r3, r3
 80050ac:	2b03      	cmp	r3, #3
 80050ae:	d119      	bne.n	80050e4 <USBD_MSC_Setup+0x1c8>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	885b      	ldrh	r3, [r3, #2]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d115      	bne.n	80050e4 <USBD_MSC_Setup+0x1c8>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	889b      	ldrh	r3, [r3, #4]
 80050bc:	b2db      	uxtb	r3, r3
 80050be:	4619      	mov	r1, r3
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f003 fa47 	bl	8008554 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	889b      	ldrh	r3, [r3, #4]
 80050ca:	b2db      	uxtb	r3, r3
 80050cc:	4619      	mov	r1, r3
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	f000 fa82 	bl	80055d8 <MSC_BOT_CplClrFeature>
            }
          }
          break;
 80050d4:	e006      	b.n	80050e4 <USBD_MSC_Setup+0x1c8>

        default:
          USBD_CtlError(pdev, req);
 80050d6:	6839      	ldr	r1, [r7, #0]
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	f002 fd29 	bl	8007b30 <USBD_CtlError>
          ret = USBD_FAIL;
 80050de:	2303      	movs	r3, #3
 80050e0:	75fb      	strb	r3, [r7, #23]
          break;
 80050e2:	e000      	b.n	80050e6 <USBD_MSC_Setup+0x1ca>
          break;
 80050e4:	bf00      	nop
      }
      break;
 80050e6:	e006      	b.n	80050f6 <USBD_MSC_Setup+0x1da>

    default:
      USBD_CtlError(pdev, req);
 80050e8:	6839      	ldr	r1, [r7, #0]
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f002 fd20 	bl	8007b30 <USBD_CtlError>
      ret = USBD_FAIL;
 80050f0:	2303      	movs	r3, #3
 80050f2:	75fb      	strb	r3, [r7, #23]
      break;
 80050f4:	bf00      	nop
  }

  return (uint8_t)ret;
 80050f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3718      	adds	r7, #24
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}

08005100 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b082      	sub	sp, #8
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	460b      	mov	r3, r1
 800510a:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 800510c:	78fb      	ldrb	r3, [r7, #3]
 800510e:	4619      	mov	r1, r3
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	f000 f8dc 	bl	80052ce <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 8005116:	2300      	movs	r3, #0
}
 8005118:	4618      	mov	r0, r3
 800511a:	3708      	adds	r7, #8
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}

08005120 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b082      	sub	sp, #8
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	460b      	mov	r3, r1
 800512a:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 800512c:	78fb      	ldrb	r3, [r7, #3]
 800512e:	4619      	mov	r1, r3
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	f000 f902 	bl	800533a <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 8005136:	2300      	movs	r3, #0
}
 8005138:	4618      	mov	r0, r3
 800513a:	3708      	adds	r7, #8
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}

08005140 <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 8005140:	b480      	push	{r7}
 8005142:	b083      	sub	sp, #12
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgHSDesc);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2220      	movs	r2, #32
 800514c:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 800514e:	4b03      	ldr	r3, [pc, #12]	; (800515c <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 8005150:	4618      	mov	r0, r3
 8005152:	370c      	adds	r7, #12
 8005154:	46bd      	mov	sp, r7
 8005156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515a:	4770      	bx	lr
 800515c:	20000044 	.word	0x20000044

08005160 <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 8005160:	b480      	push	{r7}
 8005162:	b083      	sub	sp, #12
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgFSDesc);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2220      	movs	r2, #32
 800516c:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 800516e:	4b03      	ldr	r3, [pc, #12]	; (800517c <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 8005170:	4618      	mov	r0, r3
 8005172:	370c      	adds	r7, #12
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr
 800517c:	20000064 	.word	0x20000064

08005180 <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005180:	b480      	push	{r7}
 8005182:	b083      	sub	sp, #12
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_OtherSpeedCfgDesc);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2220      	movs	r2, #32
 800518c:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 800518e:	4b03      	ldr	r3, [pc, #12]	; (800519c <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005190:	4618      	mov	r0, r3
 8005192:	370c      	adds	r7, #12
 8005194:	46bd      	mov	sp, r7
 8005196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519a:	4770      	bx	lr
 800519c:	20000084 	.word	0x20000084

080051a0 <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b083      	sub	sp, #12
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	220a      	movs	r2, #10
 80051ac:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 80051ae:	4b03      	ldr	r3, [pc, #12]	; (80051bc <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	370c      	adds	r7, #12
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr
 80051bc:	200000a4 	.word	0x200000a4

080051c0 <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b083      	sub	sp, #12
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
 80051c8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d101      	bne.n	80051d4 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80051d0:	2303      	movs	r3, #3
 80051d2:	e004      	b.n	80051de <USBD_MSC_RegisterStorage+0x1e>
  }

  pdev->pUserData = fops;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	683a      	ldr	r2, [r7, #0]
 80051d8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80051dc:	2300      	movs	r3, #0
}
 80051de:	4618      	mov	r0, r3
 80051e0:	370c      	adds	r7, #12
 80051e2:	46bd      	mov	sp, r7
 80051e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e8:	4770      	bx	lr

080051ea <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 80051ea:	b580      	push	{r7, lr}
 80051ec:	b084      	sub	sp, #16
 80051ee:	af00      	add	r7, sp, #0
 80051f0:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80051f8:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d028      	beq.n	8005252 <MSC_BOT_Init+0x68>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	2200      	movs	r2, #0
 8005204:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2200      	movs	r2, #0
 800520a:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2200      	movs	r2, #0
 8005210:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  hmsc->scsi_sense_head = 0U;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2200      	movs	r2, #0
 8005218:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2200      	movs	r2, #0
 8005220:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	2000      	movs	r0, #0
 800522e:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 8005230:	2101      	movs	r1, #1
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f003 f98e 	bl	8008554 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 8005238:	2181      	movs	r1, #129	; 0x81
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f003 f98a 	bl	8008554 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8005246:	231f      	movs	r3, #31
 8005248:	2101      	movs	r1, #1
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f003 fabe 	bl	80087cc <USBD_LL_PrepareReceive>
 8005250:	e000      	b.n	8005254 <MSC_BOT_Init+0x6a>
    return;
 8005252:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8005254:	3710      	adds	r7, #16
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}

0800525a <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 800525a:	b580      	push	{r7, lr}
 800525c:	b084      	sub	sp, #16
 800525e:	af00      	add	r7, sp, #0
 8005260:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005268:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d016      	beq.n	800529e <MSC_BOT_Reset+0x44>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2200      	movs	r2, #0
 8005274:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2201      	movs	r2, #1
 800527a:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSC_EPIN_ADDR);
 800527c:	2181      	movs	r1, #129	; 0x81
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f003 f9d4 	bl	800862c <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSC_EPOUT_ADDR);
 8005284:	2101      	movs	r1, #1
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f003 f9d0 	bl	800862c <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8005292:	231f      	movs	r3, #31
 8005294:	2101      	movs	r1, #1
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f003 fa98 	bl	80087cc <USBD_LL_PrepareReceive>
 800529c:	e000      	b.n	80052a0 <MSC_BOT_Reset+0x46>
    return;
 800529e:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 80052a0:	3710      	adds	r7, #16
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}

080052a6 <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 80052a6:	b480      	push	{r7}
 80052a8:	b085      	sub	sp, #20
 80052aa:	af00      	add	r7, sp, #0
 80052ac:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80052b4:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d002      	beq.n	80052c2 <MSC_BOT_DeInit+0x1c>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2200      	movs	r2, #0
 80052c0:	721a      	strb	r2, [r3, #8]
  }
}
 80052c2:	bf00      	nop
 80052c4:	3714      	adds	r7, #20
 80052c6:	46bd      	mov	sp, r7
 80052c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052cc:	4770      	bx	lr

080052ce <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80052ce:	b580      	push	{r7, lr}
 80052d0:	b084      	sub	sp, #16
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	6078      	str	r0, [r7, #4]
 80052d6:	460b      	mov	r3, r1
 80052d8:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80052e0:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d020      	beq.n	800532a <MSC_BOT_DataIn+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	7a1b      	ldrb	r3, [r3, #8]
 80052ec:	2b02      	cmp	r3, #2
 80052ee:	d005      	beq.n	80052fc <MSC_BOT_DataIn+0x2e>
 80052f0:	2b02      	cmp	r3, #2
 80052f2:	db1c      	blt.n	800532e <MSC_BOT_DataIn+0x60>
 80052f4:	3b03      	subs	r3, #3
 80052f6:	2b01      	cmp	r3, #1
 80052f8:	d819      	bhi.n	800532e <MSC_BOT_DataIn+0x60>
 80052fa:	e011      	b.n	8005320 <MSC_BOT_DataIn+0x52>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	f203 231f 	addw	r3, r3, #543	; 0x21f
 8005308:	461a      	mov	r2, r3
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f000 f992 	bl	8005634 <SCSI_ProcessCmd>
 8005310:	4603      	mov	r3, r0
 8005312:	2b00      	cmp	r3, #0
 8005314:	da0d      	bge.n	8005332 <MSC_BOT_DataIn+0x64>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8005316:	2101      	movs	r1, #1
 8005318:	6878      	ldr	r0, [r7, #4]
 800531a:	f000 f8fb 	bl	8005514 <MSC_BOT_SendCSW>
      }
      break;
 800531e:	e008      	b.n	8005332 <MSC_BOT_DataIn+0x64>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8005320:	2100      	movs	r1, #0
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f000 f8f6 	bl	8005514 <MSC_BOT_SendCSW>
      break;
 8005328:	e004      	b.n	8005334 <MSC_BOT_DataIn+0x66>
    return;
 800532a:	bf00      	nop
 800532c:	e002      	b.n	8005334 <MSC_BOT_DataIn+0x66>

    default:
      break;
 800532e:	bf00      	nop
 8005330:	e000      	b.n	8005334 <MSC_BOT_DataIn+0x66>
      break;
 8005332:	bf00      	nop
  }
}
 8005334:	3710      	adds	r7, #16
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}

0800533a <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800533a:	b580      	push	{r7, lr}
 800533c:	b084      	sub	sp, #16
 800533e:	af00      	add	r7, sp, #0
 8005340:	6078      	str	r0, [r7, #4]
 8005342:	460b      	mov	r3, r1
 8005344:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800534c:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d01c      	beq.n	800538e <MSC_BOT_DataOut+0x54>
  {
    return;
  }

  switch (hmsc->bot_state)
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	7a1b      	ldrb	r3, [r3, #8]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d002      	beq.n	8005362 <MSC_BOT_DataOut+0x28>
 800535c:	2b01      	cmp	r3, #1
 800535e:	d004      	beq.n	800536a <MSC_BOT_DataOut+0x30>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 8005360:	e018      	b.n	8005394 <MSC_BOT_DataOut+0x5a>
      MSC_BOT_CBW_Decode(pdev);
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f000 f81a 	bl	800539c <MSC_BOT_CBW_Decode>
      break;
 8005368:	e014      	b.n	8005394 <MSC_BOT_DataOut+0x5a>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	f203 231f 	addw	r3, r3, #543	; 0x21f
 8005376:	461a      	mov	r2, r3
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f000 f95b 	bl	8005634 <SCSI_ProcessCmd>
 800537e:	4603      	mov	r3, r0
 8005380:	2b00      	cmp	r3, #0
 8005382:	da06      	bge.n	8005392 <MSC_BOT_DataOut+0x58>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8005384:	2101      	movs	r1, #1
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f000 f8c4 	bl	8005514 <MSC_BOT_SendCSW>
      break;
 800538c:	e001      	b.n	8005392 <MSC_BOT_DataOut+0x58>
    return;
 800538e:	bf00      	nop
 8005390:	e000      	b.n	8005394 <MSC_BOT_DataOut+0x5a>
      break;
 8005392:	bf00      	nop
  }
}
 8005394:	3710      	adds	r7, #16
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}
	...

0800539c <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b084      	sub	sp, #16
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80053aa:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d077      	beq.n	80054a2 <MSC_BOT_CBW_Decode+0x106>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 80053ca:	2101      	movs	r1, #1
 80053cc:	6878      	ldr	r0, [r7, #4]
 80053ce:	f003 fa35 	bl	800883c <USBD_LL_GetRxDataSize>
 80053d2:	4603      	mov	r3, r0
 80053d4:	2b1f      	cmp	r3, #31
 80053d6:	d114      	bne.n	8005402 <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 80053de:	4a34      	ldr	r2, [pc, #208]	; (80054b0 <MSC_BOT_CBW_Decode+0x114>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d10e      	bne.n	8005402 <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 80053ea:	2b01      	cmp	r3, #1
 80053ec:	d809      	bhi.n	8005402 <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d004      	beq.n	8005402 <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.bCBLength > 16U))
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 80053fe:	2b10      	cmp	r3, #16
 8005400:	d90e      	bls.n	8005420 <MSC_BOT_CBW_Decode+0x84>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8005408:	2320      	movs	r3, #32
 800540a:	2205      	movs	r2, #5
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	f000 fdbc 	bl	8005f8a <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2202      	movs	r2, #2
 8005416:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 8005418:	6878      	ldr	r0, [r7, #4]
 800541a:	f000 f8ab 	bl	8005574 <MSC_BOT_Abort>
 800541e:	e043      	b.n	80054a8 <MSC_BOT_CBW_Decode+0x10c>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	f203 231f 	addw	r3, r3, #543	; 0x21f
 800542c:	461a      	mov	r2, r3
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f000 f900 	bl	8005634 <SCSI_ProcessCmd>
 8005434:	4603      	mov	r3, r0
 8005436:	2b00      	cmp	r3, #0
 8005438:	da0c      	bge.n	8005454 <MSC_BOT_CBW_Decode+0xb8>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	7a1b      	ldrb	r3, [r3, #8]
 800543e:	2b05      	cmp	r3, #5
 8005440:	d104      	bne.n	800544c <MSC_BOT_CBW_Decode+0xb0>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8005442:	2101      	movs	r1, #1
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	f000 f865 	bl	8005514 <MSC_BOT_SendCSW>
 800544a:	e02d      	b.n	80054a8 <MSC_BOT_CBW_Decode+0x10c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	f000 f891 	bl	8005574 <MSC_BOT_Abort>
 8005452:	e029      	b.n	80054a8 <MSC_BOT_CBW_Decode+0x10c>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	7a1b      	ldrb	r3, [r3, #8]
 8005458:	2b02      	cmp	r3, #2
 800545a:	d024      	beq.n	80054a6 <MSC_BOT_CBW_Decode+0x10a>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8005460:	2b01      	cmp	r3, #1
 8005462:	d020      	beq.n	80054a6 <MSC_BOT_CBW_Decode+0x10a>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8005468:	2b03      	cmp	r3, #3
 800546a:	d01c      	beq.n	80054a6 <MSC_BOT_CBW_Decode+0x10a>
    {
      if (hmsc->bot_data_length > 0U)
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	68db      	ldr	r3, [r3, #12]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d009      	beq.n	8005488 <MSC_BOT_CBW_Decode+0xec>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f103 0110 	add.w	r1, r3, #16
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	68db      	ldr	r3, [r3, #12]
 800547e:	461a      	mov	r2, r3
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f000 f817 	bl	80054b4 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 8005486:	e00f      	b.n	80054a8 <MSC_BOT_CBW_Decode+0x10c>
      }
      else if (hmsc->bot_data_length == 0U)
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	68db      	ldr	r3, [r3, #12]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d104      	bne.n	800549a <MSC_BOT_CBW_Decode+0xfe>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8005490:	2100      	movs	r1, #0
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f000 f83e 	bl	8005514 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 8005498:	e006      	b.n	80054a8 <MSC_BOT_CBW_Decode+0x10c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f000 f86a 	bl	8005574 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 80054a0:	e002      	b.n	80054a8 <MSC_BOT_CBW_Decode+0x10c>
    return;
 80054a2:	bf00      	nop
 80054a4:	e000      	b.n	80054a8 <MSC_BOT_CBW_Decode+0x10c>
      }
    }
    else
    {
      return;
 80054a6:	bf00      	nop
    }
  }
}
 80054a8:	3710      	adds	r7, #16
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}
 80054ae:	bf00      	nop
 80054b0:	43425355 	.word	0x43425355

080054b4 <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b086      	sub	sp, #24
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	60f8      	str	r0, [r7, #12]
 80054bc:	60b9      	str	r1, [r7, #8]
 80054be:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80054c6:	617b      	str	r3, [r7, #20]

  uint32_t length = MIN(hmsc->cbw.dDataLength, len);
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80054ce:	687a      	ldr	r2, [r7, #4]
 80054d0:	4293      	cmp	r3, r2
 80054d2:	bf28      	it	cs
 80054d4:	4613      	movcs	r3, r2
 80054d6:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d015      	beq.n	800550a <MSC_BOT_SendData+0x56>
  {
    return;
  }

  hmsc->csw.dDataResidue -= len;
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	1ad2      	subs	r2, r2, r3
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	2200      	movs	r2, #0
 80054f2:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	2204      	movs	r2, #4
 80054fa:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	68ba      	ldr	r2, [r7, #8]
 8005500:	2181      	movs	r1, #129	; 0x81
 8005502:	68f8      	ldr	r0, [r7, #12]
 8005504:	f003 f92a 	bl	800875c <USBD_LL_Transmit>
 8005508:	e000      	b.n	800550c <MSC_BOT_SendData+0x58>
    return;
 800550a:	bf00      	nop
}
 800550c:	3718      	adds	r7, #24
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}
	...

08005514 <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b084      	sub	sp, #16
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
 800551c:	460b      	mov	r3, r1
 800551e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005526:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d01b      	beq.n	8005566 <MSC_BOT_SendCSW+0x52>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	4a0f      	ldr	r2, [pc, #60]	; (8005570 <MSC_BOT_SendCSW+0x5c>)
 8005532:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.bStatus = CSW_Status;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	78fa      	ldrb	r2, [r7, #3]
 800553a:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2200      	movs	r2, #0
 8005542:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)&hmsc->csw,
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f503 720c 	add.w	r2, r3, #560	; 0x230
 800554a:	230d      	movs	r3, #13
 800554c:	2181      	movs	r1, #129	; 0x81
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f003 f904 	bl	800875c <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800555a:	231f      	movs	r3, #31
 800555c:	2101      	movs	r1, #1
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f003 f934 	bl	80087cc <USBD_LL_PrepareReceive>
 8005564:	e000      	b.n	8005568 <MSC_BOT_SendCSW+0x54>
    return;
 8005566:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8005568:	3710      	adds	r7, #16
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}
 800556e:	bf00      	nop
 8005570:	53425355 	.word	0x53425355

08005574 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b084      	sub	sp, #16
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005582:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d022      	beq.n	80055d0 <MSC_BOT_Abort+0x5c>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8005590:	2b00      	cmp	r3, #0
 8005592:	d10c      	bne.n	80055ae <MSC_BOT_Abort+0x3a>
      (hmsc->cbw.dDataLength != 0U) &&
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 800559a:	2b00      	cmp	r3, #0
 800559c:	d007      	beq.n	80055ae <MSC_BOT_Abort+0x3a>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d103      	bne.n	80055ae <MSC_BOT_Abort+0x3a>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 80055a6:	2101      	movs	r1, #1
 80055a8:	6878      	ldr	r0, [r7, #4]
 80055aa:	f003 f809 	bl	80085c0 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 80055ae:	2181      	movs	r1, #129	; 0x81
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f003 f805 	bl	80085c0 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	7a5b      	ldrb	r3, [r3, #9]
 80055ba:	2b02      	cmp	r3, #2
 80055bc:	d109      	bne.n	80055d2 <MSC_BOT_Abort+0x5e>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 80055be:	2181      	movs	r1, #129	; 0x81
 80055c0:	6878      	ldr	r0, [r7, #4]
 80055c2:	f002 fffd 	bl	80085c0 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 80055c6:	2101      	movs	r1, #1
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f002 fff9 	bl	80085c0 <USBD_LL_StallEP>
 80055ce:	e000      	b.n	80055d2 <MSC_BOT_Abort+0x5e>
    return;
 80055d0:	bf00      	nop
  }
}
 80055d2:	3710      	adds	r7, #16
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}

080055d8 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b084      	sub	sp, #16
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
 80055e0:	460b      	mov	r3, r1
 80055e2:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80055ea:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d019      	beq.n	8005626 <MSC_BOT_CplClrFeature+0x4e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	7a5b      	ldrb	r3, [r3, #9]
 80055f6:	2b02      	cmp	r3, #2
 80055f8:	d108      	bne.n	800560c <MSC_BOT_CplClrFeature+0x34>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 80055fa:	2181      	movs	r1, #129	; 0x81
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	f002 ffdf 	bl	80085c0 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8005602:	2101      	movs	r1, #1
 8005604:	6878      	ldr	r0, [r7, #4]
 8005606:	f002 ffdb 	bl	80085c0 <USBD_LL_StallEP>
 800560a:	e00f      	b.n	800562c <MSC_BOT_CplClrFeature+0x54>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 800560c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005610:	2b00      	cmp	r3, #0
 8005612:	da0a      	bge.n	800562a <MSC_BOT_CplClrFeature+0x52>
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	7a5b      	ldrb	r3, [r3, #9]
 8005618:	2b01      	cmp	r3, #1
 800561a:	d006      	beq.n	800562a <MSC_BOT_CplClrFeature+0x52>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800561c:	2101      	movs	r1, #1
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f7ff ff78 	bl	8005514 <MSC_BOT_SendCSW>
 8005624:	e002      	b.n	800562c <MSC_BOT_CplClrFeature+0x54>
    return;
 8005626:	bf00      	nop
 8005628:	e000      	b.n	800562c <MSC_BOT_CplClrFeature+0x54>
  }
  else
  {
    return;
 800562a:	bf00      	nop
  }
}
 800562c:	3710      	adds	r7, #16
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}
	...

08005634 <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b086      	sub	sp, #24
 8005638:	af00      	add	r7, sp, #0
 800563a:	60f8      	str	r0, [r7, #12]
 800563c:	460b      	mov	r3, r1
 800563e:	607a      	str	r2, [r7, #4]
 8005640:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005648:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d102      	bne.n	8005656 <SCSI_ProcessCmd+0x22>
  {
    return -1;
 8005650:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005654:	e168      	b.n	8005928 <SCSI_ProcessCmd+0x2f4>
  }

  switch (cmd[0])
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	781b      	ldrb	r3, [r3, #0]
 800565a:	2baa      	cmp	r3, #170	; 0xaa
 800565c:	f000 8144 	beq.w	80058e8 <SCSI_ProcessCmd+0x2b4>
 8005660:	2baa      	cmp	r3, #170	; 0xaa
 8005662:	f300 8153 	bgt.w	800590c <SCSI_ProcessCmd+0x2d8>
 8005666:	2ba8      	cmp	r3, #168	; 0xa8
 8005668:	f000 812c 	beq.w	80058c4 <SCSI_ProcessCmd+0x290>
 800566c:	2ba8      	cmp	r3, #168	; 0xa8
 800566e:	f300 814d 	bgt.w	800590c <SCSI_ProcessCmd+0x2d8>
 8005672:	2b5a      	cmp	r3, #90	; 0x5a
 8005674:	f300 80c0 	bgt.w	80057f8 <SCSI_ProcessCmd+0x1c4>
 8005678:	2b00      	cmp	r3, #0
 800567a:	f2c0 8147 	blt.w	800590c <SCSI_ProcessCmd+0x2d8>
 800567e:	2b5a      	cmp	r3, #90	; 0x5a
 8005680:	f200 8144 	bhi.w	800590c <SCSI_ProcessCmd+0x2d8>
 8005684:	a201      	add	r2, pc, #4	; (adr r2, 800568c <SCSI_ProcessCmd+0x58>)
 8005686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800568a:	bf00      	nop
 800568c:	080057ff 	.word	0x080057ff
 8005690:	0800590d 	.word	0x0800590d
 8005694:	0800590d 	.word	0x0800590d
 8005698:	08005811 	.word	0x08005811
 800569c:	0800590d 	.word	0x0800590d
 80056a0:	0800590d 	.word	0x0800590d
 80056a4:	0800590d 	.word	0x0800590d
 80056a8:	0800590d 	.word	0x0800590d
 80056ac:	0800590d 	.word	0x0800590d
 80056b0:	0800590d 	.word	0x0800590d
 80056b4:	0800590d 	.word	0x0800590d
 80056b8:	0800590d 	.word	0x0800590d
 80056bc:	0800590d 	.word	0x0800590d
 80056c0:	0800590d 	.word	0x0800590d
 80056c4:	0800590d 	.word	0x0800590d
 80056c8:	0800590d 	.word	0x0800590d
 80056cc:	0800590d 	.word	0x0800590d
 80056d0:	0800590d 	.word	0x0800590d
 80056d4:	08005823 	.word	0x08005823
 80056d8:	0800590d 	.word	0x0800590d
 80056dc:	0800590d 	.word	0x0800590d
 80056e0:	0800590d 	.word	0x0800590d
 80056e4:	0800590d 	.word	0x0800590d
 80056e8:	0800590d 	.word	0x0800590d
 80056ec:	0800590d 	.word	0x0800590d
 80056f0:	0800590d 	.word	0x0800590d
 80056f4:	08005859 	.word	0x08005859
 80056f8:	08005835 	.word	0x08005835
 80056fc:	0800590d 	.word	0x0800590d
 8005700:	0800590d 	.word	0x0800590d
 8005704:	08005847 	.word	0x08005847
 8005708:	0800590d 	.word	0x0800590d
 800570c:	0800590d 	.word	0x0800590d
 8005710:	0800590d 	.word	0x0800590d
 8005714:	0800590d 	.word	0x0800590d
 8005718:	0800587d 	.word	0x0800587d
 800571c:	0800590d 	.word	0x0800590d
 8005720:	0800588f 	.word	0x0800588f
 8005724:	0800590d 	.word	0x0800590d
 8005728:	0800590d 	.word	0x0800590d
 800572c:	080058b3 	.word	0x080058b3
 8005730:	0800590d 	.word	0x0800590d
 8005734:	080058d7 	.word	0x080058d7
 8005738:	0800590d 	.word	0x0800590d
 800573c:	0800590d 	.word	0x0800590d
 8005740:	0800590d 	.word	0x0800590d
 8005744:	0800590d 	.word	0x0800590d
 8005748:	080058fb 	.word	0x080058fb
 800574c:	0800590d 	.word	0x0800590d
 8005750:	0800590d 	.word	0x0800590d
 8005754:	0800590d 	.word	0x0800590d
 8005758:	0800590d 	.word	0x0800590d
 800575c:	0800590d 	.word	0x0800590d
 8005760:	0800590d 	.word	0x0800590d
 8005764:	0800590d 	.word	0x0800590d
 8005768:	0800590d 	.word	0x0800590d
 800576c:	0800590d 	.word	0x0800590d
 8005770:	0800590d 	.word	0x0800590d
 8005774:	0800590d 	.word	0x0800590d
 8005778:	0800590d 	.word	0x0800590d
 800577c:	0800590d 	.word	0x0800590d
 8005780:	0800590d 	.word	0x0800590d
 8005784:	0800590d 	.word	0x0800590d
 8005788:	0800590d 	.word	0x0800590d
 800578c:	0800590d 	.word	0x0800590d
 8005790:	0800590d 	.word	0x0800590d
 8005794:	0800590d 	.word	0x0800590d
 8005798:	0800590d 	.word	0x0800590d
 800579c:	0800590d 	.word	0x0800590d
 80057a0:	0800590d 	.word	0x0800590d
 80057a4:	0800590d 	.word	0x0800590d
 80057a8:	0800590d 	.word	0x0800590d
 80057ac:	0800590d 	.word	0x0800590d
 80057b0:	0800590d 	.word	0x0800590d
 80057b4:	0800590d 	.word	0x0800590d
 80057b8:	0800590d 	.word	0x0800590d
 80057bc:	0800590d 	.word	0x0800590d
 80057c0:	0800590d 	.word	0x0800590d
 80057c4:	0800590d 	.word	0x0800590d
 80057c8:	0800590d 	.word	0x0800590d
 80057cc:	0800590d 	.word	0x0800590d
 80057d0:	0800590d 	.word	0x0800590d
 80057d4:	0800590d 	.word	0x0800590d
 80057d8:	0800590d 	.word	0x0800590d
 80057dc:	0800590d 	.word	0x0800590d
 80057e0:	0800590d 	.word	0x0800590d
 80057e4:	0800590d 	.word	0x0800590d
 80057e8:	0800590d 	.word	0x0800590d
 80057ec:	0800590d 	.word	0x0800590d
 80057f0:	0800590d 	.word	0x0800590d
 80057f4:	0800586b 	.word	0x0800586b
 80057f8:	2b9e      	cmp	r3, #158	; 0x9e
 80057fa:	d051      	beq.n	80058a0 <SCSI_ProcessCmd+0x26c>
 80057fc:	e086      	b.n	800590c <SCSI_ProcessCmd+0x2d8>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 80057fe:	7afb      	ldrb	r3, [r7, #11]
 8005800:	687a      	ldr	r2, [r7, #4]
 8005802:	4619      	mov	r1, r3
 8005804:	68f8      	ldr	r0, [r7, #12]
 8005806:	f000 f893 	bl	8005930 <SCSI_TestUnitReady>
 800580a:	4603      	mov	r3, r0
 800580c:	75fb      	strb	r3, [r7, #23]
      break;
 800580e:	e089      	b.n	8005924 <SCSI_ProcessCmd+0x2f0>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 8005810:	7afb      	ldrb	r3, [r7, #11]
 8005812:	687a      	ldr	r2, [r7, #4]
 8005814:	4619      	mov	r1, r3
 8005816:	68f8      	ldr	r0, [r7, #12]
 8005818:	f000 fb38 	bl	8005e8c <SCSI_RequestSense>
 800581c:	4603      	mov	r3, r0
 800581e:	75fb      	strb	r3, [r7, #23]
      break;
 8005820:	e080      	b.n	8005924 <SCSI_ProcessCmd+0x2f0>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 8005822:	7afb      	ldrb	r3, [r7, #11]
 8005824:	687a      	ldr	r2, [r7, #4]
 8005826:	4619      	mov	r1, r3
 8005828:	68f8      	ldr	r0, [r7, #12]
 800582a:	f000 f8d1 	bl	80059d0 <SCSI_Inquiry>
 800582e:	4603      	mov	r3, r0
 8005830:	75fb      	strb	r3, [r7, #23]
      break;
 8005832:	e077      	b.n	8005924 <SCSI_ProcessCmd+0x2f0>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 8005834:	7afb      	ldrb	r3, [r7, #11]
 8005836:	687a      	ldr	r2, [r7, #4]
 8005838:	4619      	mov	r1, r3
 800583a:	68f8      	ldr	r0, [r7, #12]
 800583c:	f000 fbec 	bl	8006018 <SCSI_StartStopUnit>
 8005840:	4603      	mov	r3, r0
 8005842:	75fb      	strb	r3, [r7, #23]
      break;
 8005844:	e06e      	b.n	8005924 <SCSI_ProcessCmd+0x2f0>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 8005846:	7afb      	ldrb	r3, [r7, #11]
 8005848:	687a      	ldr	r2, [r7, #4]
 800584a:	4619      	mov	r1, r3
 800584c:	68f8      	ldr	r0, [r7, #12]
 800584e:	f000 fc34 	bl	80060ba <SCSI_AllowPreventRemovable>
 8005852:	4603      	mov	r3, r0
 8005854:	75fb      	strb	r3, [r7, #23]
      break;
 8005856:	e065      	b.n	8005924 <SCSI_ProcessCmd+0x2f0>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 8005858:	7afb      	ldrb	r3, [r7, #11]
 800585a:	687a      	ldr	r2, [r7, #4]
 800585c:	4619      	mov	r1, r3
 800585e:	68f8      	ldr	r0, [r7, #12]
 8005860:	f000 fabc 	bl	8005ddc <SCSI_ModeSense6>
 8005864:	4603      	mov	r3, r0
 8005866:	75fb      	strb	r3, [r7, #23]
      break;
 8005868:	e05c      	b.n	8005924 <SCSI_ProcessCmd+0x2f0>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 800586a:	7afb      	ldrb	r3, [r7, #11]
 800586c:	687a      	ldr	r2, [r7, #4]
 800586e:	4619      	mov	r1, r3
 8005870:	68f8      	ldr	r0, [r7, #12]
 8005872:	f000 fadf 	bl	8005e34 <SCSI_ModeSense10>
 8005876:	4603      	mov	r3, r0
 8005878:	75fb      	strb	r3, [r7, #23]
      break;
 800587a:	e053      	b.n	8005924 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 800587c:	7afb      	ldrb	r3, [r7, #11]
 800587e:	687a      	ldr	r2, [r7, #4]
 8005880:	4619      	mov	r1, r3
 8005882:	68f8      	ldr	r0, [r7, #12]
 8005884:	f000 fa37 	bl	8005cf6 <SCSI_ReadFormatCapacity>
 8005888:	4603      	mov	r3, r0
 800588a:	75fb      	strb	r3, [r7, #23]
      break;
 800588c:	e04a      	b.n	8005924 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 800588e:	7afb      	ldrb	r3, [r7, #11]
 8005890:	687a      	ldr	r2, [r7, #4]
 8005892:	4619      	mov	r1, r3
 8005894:	68f8      	ldr	r0, [r7, #12]
 8005896:	f000 f90f 	bl	8005ab8 <SCSI_ReadCapacity10>
 800589a:	4603      	mov	r3, r0
 800589c:	75fb      	strb	r3, [r7, #23]
      break;
 800589e:	e041      	b.n	8005924 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 80058a0:	7afb      	ldrb	r3, [r7, #11]
 80058a2:	687a      	ldr	r2, [r7, #4]
 80058a4:	4619      	mov	r1, r3
 80058a6:	68f8      	ldr	r0, [r7, #12]
 80058a8:	f000 f97b 	bl	8005ba2 <SCSI_ReadCapacity16>
 80058ac:	4603      	mov	r3, r0
 80058ae:	75fb      	strb	r3, [r7, #23]
      break;
 80058b0:	e038      	b.n	8005924 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 80058b2:	7afb      	ldrb	r3, [r7, #11]
 80058b4:	687a      	ldr	r2, [r7, #4]
 80058b6:	4619      	mov	r1, r3
 80058b8:	68f8      	ldr	r0, [r7, #12]
 80058ba:	f000 fc27 	bl	800610c <SCSI_Read10>
 80058be:	4603      	mov	r3, r0
 80058c0:	75fb      	strb	r3, [r7, #23]
      break;
 80058c2:	e02f      	b.n	8005924 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 80058c4:	7afb      	ldrb	r3, [r7, #11]
 80058c6:	687a      	ldr	r2, [r7, #4]
 80058c8:	4619      	mov	r1, r3
 80058ca:	68f8      	ldr	r0, [r7, #12]
 80058cc:	f000 fcbe 	bl	800624c <SCSI_Read12>
 80058d0:	4603      	mov	r3, r0
 80058d2:	75fb      	strb	r3, [r7, #23]
      break;
 80058d4:	e026      	b.n	8005924 <SCSI_ProcessCmd+0x2f0>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 80058d6:	7afb      	ldrb	r3, [r7, #11]
 80058d8:	687a      	ldr	r2, [r7, #4]
 80058da:	4619      	mov	r1, r3
 80058dc:	68f8      	ldr	r0, [r7, #12]
 80058de:	f000 fd60 	bl	80063a2 <SCSI_Write10>
 80058e2:	4603      	mov	r3, r0
 80058e4:	75fb      	strb	r3, [r7, #23]
      break;
 80058e6:	e01d      	b.n	8005924 <SCSI_ProcessCmd+0x2f0>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 80058e8:	7afb      	ldrb	r3, [r7, #11]
 80058ea:	687a      	ldr	r2, [r7, #4]
 80058ec:	4619      	mov	r1, r3
 80058ee:	68f8      	ldr	r0, [r7, #12]
 80058f0:	f000 fe1c 	bl	800652c <SCSI_Write12>
 80058f4:	4603      	mov	r3, r0
 80058f6:	75fb      	strb	r3, [r7, #23]
      break;
 80058f8:	e014      	b.n	8005924 <SCSI_ProcessCmd+0x2f0>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 80058fa:	7afb      	ldrb	r3, [r7, #11]
 80058fc:	687a      	ldr	r2, [r7, #4]
 80058fe:	4619      	mov	r1, r3
 8005900:	68f8      	ldr	r0, [r7, #12]
 8005902:	f000 fee8 	bl	80066d6 <SCSI_Verify10>
 8005906:	4603      	mov	r3, r0
 8005908:	75fb      	strb	r3, [r7, #23]
      break;
 800590a:	e00b      	b.n	8005924 <SCSI_ProcessCmd+0x2f0>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 800590c:	7af9      	ldrb	r1, [r7, #11]
 800590e:	2320      	movs	r3, #32
 8005910:	2205      	movs	r2, #5
 8005912:	68f8      	ldr	r0, [r7, #12]
 8005914:	f000 fb39 	bl	8005f8a <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	2202      	movs	r2, #2
 800591c:	725a      	strb	r2, [r3, #9]
      ret = -1;
 800591e:	23ff      	movs	r3, #255	; 0xff
 8005920:	75fb      	strb	r3, [r7, #23]
      break;
 8005922:	bf00      	nop
  }

  return ret;
 8005924:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005928:	4618      	mov	r0, r3
 800592a:	3718      	adds	r7, #24
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}

08005930 <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b086      	sub	sp, #24
 8005934:	af00      	add	r7, sp, #0
 8005936:	60f8      	str	r0, [r7, #12]
 8005938:	460b      	mov	r3, r1
 800593a:	607a      	str	r2, [r7, #4]
 800593c:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005944:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d102      	bne.n	8005952 <SCSI_TestUnitReady+0x22>
  {
    return -1;
 800594c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005950:	e03a      	b.n	80059c8 <SCSI_TestUnitReady+0x98>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005958:	2b00      	cmp	r3, #0
 800595a:	d00a      	beq.n	8005972 <SCSI_TestUnitReady+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8005962:	2320      	movs	r3, #32
 8005964:	2205      	movs	r2, #5
 8005966:	68f8      	ldr	r0, [r7, #12]
 8005968:	f000 fb0f 	bl	8005f8a <SCSI_SenseCode>

    return -1;
 800596c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005970:	e02a      	b.n	80059c8 <SCSI_TestUnitReady+0x98>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8005978:	2b02      	cmp	r3, #2
 800597a:	d10b      	bne.n	8005994 <SCSI_TestUnitReady+0x64>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800597c:	7af9      	ldrb	r1, [r7, #11]
 800597e:	233a      	movs	r3, #58	; 0x3a
 8005980:	2202      	movs	r2, #2
 8005982:	68f8      	ldr	r0, [r7, #12]
 8005984:	f000 fb01 	bl	8005f8a <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	2205      	movs	r2, #5
 800598c:	721a      	strb	r2, [r3, #8]
    return -1;
 800598e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005992:	e019      	b.n	80059c8 <SCSI_TestUnitReady+0x98>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	7afa      	ldrb	r2, [r7, #11]
 800599e:	4610      	mov	r0, r2
 80059a0:	4798      	blx	r3
 80059a2:	4603      	mov	r3, r0
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d00b      	beq.n	80059c0 <SCSI_TestUnitReady+0x90>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80059a8:	7af9      	ldrb	r1, [r7, #11]
 80059aa:	233a      	movs	r3, #58	; 0x3a
 80059ac:	2202      	movs	r2, #2
 80059ae:	68f8      	ldr	r0, [r7, #12]
 80059b0:	f000 faeb 	bl	8005f8a <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	2205      	movs	r2, #5
 80059b8:	721a      	strb	r2, [r3, #8]

    return -1;
 80059ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80059be:	e003      	b.n	80059c8 <SCSI_TestUnitReady+0x98>
  }
  hmsc->bot_data_length = 0U;
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	2200      	movs	r2, #0
 80059c4:	60da      	str	r2, [r3, #12]

  return 0;
 80059c6:	2300      	movs	r3, #0
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	3718      	adds	r7, #24
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}

080059d0 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b088      	sub	sp, #32
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	60f8      	str	r0, [r7, #12]
 80059d8:	460b      	mov	r3, r1
 80059da:	607a      	str	r2, [r7, #4]
 80059dc:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80059e4:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 80059e6:	69bb      	ldr	r3, [r7, #24]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d102      	bne.n	80059f2 <SCSI_Inquiry+0x22>
  {
    return -1;
 80059ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80059f0:	e05a      	b.n	8005aa8 <SCSI_Inquiry+0xd8>
  }

  if (hmsc->cbw.dDataLength == 0U)
 80059f2:	69bb      	ldr	r3, [r7, #24]
 80059f4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d10a      	bne.n	8005a12 <SCSI_Inquiry+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80059fc:	69bb      	ldr	r3, [r7, #24]
 80059fe:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8005a02:	2320      	movs	r3, #32
 8005a04:	2205      	movs	r2, #5
 8005a06:	68f8      	ldr	r0, [r7, #12]
 8005a08:	f000 fabf 	bl	8005f8a <SCSI_SenseCode>
    return -1;
 8005a0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005a10:	e04a      	b.n	8005aa8 <SCSI_Inquiry+0xd8>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	3301      	adds	r3, #1
 8005a16:	781b      	ldrb	r3, [r3, #0]
 8005a18:	f003 0301 	and.w	r3, r3, #1
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d020      	beq.n	8005a62 <SCSI_Inquiry+0x92>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	3302      	adds	r3, #2
 8005a24:	781b      	ldrb	r3, [r3, #0]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d105      	bne.n	8005a36 <SCSI_Inquiry+0x66>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 8005a2a:	2206      	movs	r2, #6
 8005a2c:	4920      	ldr	r1, [pc, #128]	; (8005ab0 <SCSI_Inquiry+0xe0>)
 8005a2e:	69b8      	ldr	r0, [r7, #24]
 8005a30:	f000 ffb4 	bl	800699c <SCSI_UpdateBotData>
 8005a34:	e037      	b.n	8005aa6 <SCSI_Inquiry+0xd6>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	3302      	adds	r3, #2
 8005a3a:	781b      	ldrb	r3, [r3, #0]
 8005a3c:	2b80      	cmp	r3, #128	; 0x80
 8005a3e:	d105      	bne.n	8005a4c <SCSI_Inquiry+0x7c>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 8005a40:	2208      	movs	r2, #8
 8005a42:	491c      	ldr	r1, [pc, #112]	; (8005ab4 <SCSI_Inquiry+0xe4>)
 8005a44:	69b8      	ldr	r0, [r7, #24]
 8005a46:	f000 ffa9 	bl	800699c <SCSI_UpdateBotData>
 8005a4a:	e02c      	b.n	8005aa6 <SCSI_Inquiry+0xd6>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 8005a4c:	69bb      	ldr	r3, [r7, #24]
 8005a4e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8005a52:	2324      	movs	r3, #36	; 0x24
 8005a54:	2205      	movs	r2, #5
 8005a56:	68f8      	ldr	r0, [r7, #12]
 8005a58:	f000 fa97 	bl	8005f8a <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 8005a5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005a60:	e022      	b.n	8005aa8 <SCSI_Inquiry+0xd8>
    }
  }
  else
  {
    pPage = (uint8_t *) &((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005a68:	69d9      	ldr	r1, [r3, #28]
 8005a6a:	7afa      	ldrb	r2, [r7, #11]
 8005a6c:	4613      	mov	r3, r2
 8005a6e:	00db      	lsls	r3, r3, #3
 8005a70:	4413      	add	r3, r2
 8005a72:	009b      	lsls	r3, r3, #2
 8005a74:	440b      	add	r3, r1
 8005a76:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	3304      	adds	r3, #4
 8005a7c:	781b      	ldrb	r3, [r3, #0]
 8005a7e:	b29b      	uxth	r3, r3
 8005a80:	3305      	adds	r3, #5
 8005a82:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	3304      	adds	r3, #4
 8005a88:	781b      	ldrb	r3, [r3, #0]
 8005a8a:	b29b      	uxth	r3, r3
 8005a8c:	8bfa      	ldrh	r2, [r7, #30]
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d303      	bcc.n	8005a9a <SCSI_Inquiry+0xca>
    {
      len = params[4];
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	3304      	adds	r3, #4
 8005a96:	781b      	ldrb	r3, [r3, #0]
 8005a98:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 8005a9a:	8bfb      	ldrh	r3, [r7, #30]
 8005a9c:	461a      	mov	r2, r3
 8005a9e:	6979      	ldr	r1, [r7, #20]
 8005aa0:	69b8      	ldr	r0, [r7, #24]
 8005aa2:	f000 ff7b 	bl	800699c <SCSI_UpdateBotData>
  }

  return 0;
 8005aa6:	2300      	movs	r3, #0
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	3720      	adds	r7, #32
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}
 8005ab0:	200000b0 	.word	0x200000b0
 8005ab4:	200000b8 	.word	0x200000b8

08005ab8 <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b086      	sub	sp, #24
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	60f8      	str	r0, [r7, #12]
 8005ac0:	460b      	mov	r3, r1
 8005ac2:	607a      	str	r2, [r7, #4]
 8005ac4:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005acc:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d102      	bne.n	8005ada <SCSI_ReadCapacity10+0x22>
  {
    return -1;
 8005ad4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005ad8:	e05f      	b.n	8005b9a <SCSI_ReadCapacity10+0xe2>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	697a      	ldr	r2, [r7, #20]
 8005ae4:	f502 711a 	add.w	r1, r2, #616	; 0x268
 8005ae8:	697a      	ldr	r2, [r7, #20]
 8005aea:	f502 7219 	add.w	r2, r2, #612	; 0x264
 8005aee:	7af8      	ldrb	r0, [r7, #11]
 8005af0:	4798      	blx	r3
 8005af2:	4603      	mov	r3, r0
 8005af4:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8005af6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d104      	bne.n	8005b08 <SCSI_ReadCapacity10+0x50>
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8005b04:	2b02      	cmp	r3, #2
 8005b06:	d108      	bne.n	8005b1a <SCSI_ReadCapacity10+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8005b08:	7af9      	ldrb	r1, [r7, #11]
 8005b0a:	233a      	movs	r3, #58	; 0x3a
 8005b0c:	2202      	movs	r2, #2
 8005b0e:	68f8      	ldr	r0, [r7, #12]
 8005b10:	f000 fa3b 	bl	8005f8a <SCSI_SenseCode>
    return -1;
 8005b14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005b18:	e03f      	b.n	8005b9a <SCSI_ReadCapacity10+0xe2>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005b20:	3b01      	subs	r3, #1
 8005b22:	0e1b      	lsrs	r3, r3, #24
 8005b24:	b2da      	uxtb	r2, r3
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005b30:	3b01      	subs	r3, #1
 8005b32:	0c1b      	lsrs	r3, r3, #16
 8005b34:	b2da      	uxtb	r2, r3
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005b40:	3b01      	subs	r3, #1
 8005b42:	0a1b      	lsrs	r3, r3, #8
 8005b44:	b2da      	uxtb	r2, r3
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005b50:	b2db      	uxtb	r3, r3
 8005b52:	3b01      	subs	r3, #1
 8005b54:	b2da      	uxtb	r2, r3
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8005b60:	161b      	asrs	r3, r3, #24
 8005b62:	b2da      	uxtb	r2, r3
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8005b6e:	141b      	asrs	r3, r3, #16
 8005b70:	b2da      	uxtb	r2, r3
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8005b7c:	0a1b      	lsrs	r3, r3, #8
 8005b7e:	b29b      	uxth	r3, r3
 8005b80:	b2da      	uxtb	r2, r3
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8005b8c:	b2da      	uxtb	r2, r3
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	2208      	movs	r2, #8
 8005b96:	60da      	str	r2, [r3, #12]

  return 0;
 8005b98:	2300      	movs	r3, #0

}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3718      	adds	r7, #24
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}

08005ba2 <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005ba2:	b580      	push	{r7, lr}
 8005ba4:	b088      	sub	sp, #32
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	60f8      	str	r0, [r7, #12]
 8005baa:	460b      	mov	r3, r1
 8005bac:	607a      	str	r2, [r7, #4]
 8005bae:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005bb6:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8005bb8:	69bb      	ldr	r3, [r7, #24]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d102      	bne.n	8005bc4 <SCSI_ReadCapacity16+0x22>
  {
    return -1;
 8005bbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005bc2:	e094      	b.n	8005cee <SCSI_ReadCapacity16+0x14c>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	69ba      	ldr	r2, [r7, #24]
 8005bce:	f502 711a 	add.w	r1, r2, #616	; 0x268
 8005bd2:	69ba      	ldr	r2, [r7, #24]
 8005bd4:	f502 7219 	add.w	r2, r2, #612	; 0x264
 8005bd8:	7af8      	ldrb	r0, [r7, #11]
 8005bda:	4798      	blx	r3
 8005bdc:	4603      	mov	r3, r0
 8005bde:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8005be0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d104      	bne.n	8005bf2 <SCSI_ReadCapacity16+0x50>
 8005be8:	69bb      	ldr	r3, [r7, #24]
 8005bea:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8005bee:	2b02      	cmp	r3, #2
 8005bf0:	d108      	bne.n	8005c04 <SCSI_ReadCapacity16+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8005bf2:	7af9      	ldrb	r1, [r7, #11]
 8005bf4:	233a      	movs	r3, #58	; 0x3a
 8005bf6:	2202      	movs	r2, #2
 8005bf8:	68f8      	ldr	r0, [r7, #12]
 8005bfa:	f000 f9c6 	bl	8005f8a <SCSI_SenseCode>
    return -1;
 8005bfe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005c02:	e074      	b.n	8005cee <SCSI_ReadCapacity16+0x14c>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	330a      	adds	r3, #10
 8005c08:	781b      	ldrb	r3, [r3, #0]
 8005c0a:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	330b      	adds	r3, #11
 8005c10:	781b      	ldrb	r3, [r3, #0]
 8005c12:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8005c14:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	330c      	adds	r3, #12
 8005c1a:	781b      	ldrb	r3, [r3, #0]
 8005c1c:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8005c1e:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8005c20:	687a      	ldr	r2, [r7, #4]
 8005c22:	320d      	adds	r2, #13
 8005c24:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8005c26:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8005c28:	69bb      	ldr	r3, [r7, #24]
 8005c2a:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	77fb      	strb	r3, [r7, #31]
 8005c30:	e007      	b.n	8005c42 <SCSI_ReadCapacity16+0xa0>
  {
    hmsc->bot_data[idx] = 0U;
 8005c32:	7ffb      	ldrb	r3, [r7, #31]
 8005c34:	69ba      	ldr	r2, [r7, #24]
 8005c36:	4413      	add	r3, r2
 8005c38:	2200      	movs	r2, #0
 8005c3a:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8005c3c:	7ffb      	ldrb	r3, [r7, #31]
 8005c3e:	3301      	adds	r3, #1
 8005c40:	77fb      	strb	r3, [r7, #31]
 8005c42:	7ffa      	ldrb	r2, [r7, #31]
 8005c44:	69bb      	ldr	r3, [r7, #24]
 8005c46:	68db      	ldr	r3, [r3, #12]
 8005c48:	429a      	cmp	r2, r3
 8005c4a:	d3f2      	bcc.n	8005c32 <SCSI_ReadCapacity16+0x90>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8005c4c:	69bb      	ldr	r3, [r7, #24]
 8005c4e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005c52:	3b01      	subs	r3, #1
 8005c54:	0e1b      	lsrs	r3, r3, #24
 8005c56:	b2da      	uxtb	r2, r3
 8005c58:	69bb      	ldr	r3, [r7, #24]
 8005c5a:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8005c5c:	69bb      	ldr	r3, [r7, #24]
 8005c5e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005c62:	3b01      	subs	r3, #1
 8005c64:	0c1b      	lsrs	r3, r3, #16
 8005c66:	b2da      	uxtb	r2, r3
 8005c68:	69bb      	ldr	r3, [r7, #24]
 8005c6a:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8005c6c:	69bb      	ldr	r3, [r7, #24]
 8005c6e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005c72:	3b01      	subs	r3, #1
 8005c74:	0a1b      	lsrs	r3, r3, #8
 8005c76:	b2da      	uxtb	r2, r3
 8005c78:	69bb      	ldr	r3, [r7, #24]
 8005c7a:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8005c7c:	69bb      	ldr	r3, [r7, #24]
 8005c7e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005c82:	b2db      	uxtb	r3, r3
 8005c84:	3b01      	subs	r3, #1
 8005c86:	b2da      	uxtb	r2, r3
 8005c88:	69bb      	ldr	r3, [r7, #24]
 8005c8a:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8005c8c:	69bb      	ldr	r3, [r7, #24]
 8005c8e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8005c92:	161b      	asrs	r3, r3, #24
 8005c94:	b2da      	uxtb	r2, r3
 8005c96:	69bb      	ldr	r3, [r7, #24]
 8005c98:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8005c9a:	69bb      	ldr	r3, [r7, #24]
 8005c9c:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8005ca0:	141b      	asrs	r3, r3, #16
 8005ca2:	b2da      	uxtb	r2, r3
 8005ca4:	69bb      	ldr	r3, [r7, #24]
 8005ca6:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8005ca8:	69bb      	ldr	r3, [r7, #24]
 8005caa:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8005cae:	0a1b      	lsrs	r3, r3, #8
 8005cb0:	b29b      	uxth	r3, r3
 8005cb2:	b2da      	uxtb	r2, r3
 8005cb4:	69bb      	ldr	r3, [r7, #24]
 8005cb6:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 8005cb8:	69bb      	ldr	r3, [r7, #24]
 8005cba:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8005cbe:	b2da      	uxtb	r2, r3
 8005cc0:	69bb      	ldr	r3, [r7, #24]
 8005cc2:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	330a      	adds	r3, #10
 8005cc8:	781b      	ldrb	r3, [r3, #0]
 8005cca:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	330b      	adds	r3, #11
 8005cd0:	781b      	ldrb	r3, [r3, #0]
 8005cd2:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8005cd4:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	330c      	adds	r3, #12
 8005cda:	781b      	ldrb	r3, [r3, #0]
 8005cdc:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8005cde:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8005ce0:	687a      	ldr	r2, [r7, #4]
 8005ce2:	320d      	adds	r2, #13
 8005ce4:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8005ce6:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8005ce8:	69bb      	ldr	r3, [r7, #24]
 8005cea:	60da      	str	r2, [r3, #12]

  return 0;
 8005cec:	2300      	movs	r3, #0
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3720      	adds	r7, #32
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}

08005cf6 <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005cf6:	b580      	push	{r7, lr}
 8005cf8:	b088      	sub	sp, #32
 8005cfa:	af00      	add	r7, sp, #0
 8005cfc:	60f8      	str	r0, [r7, #12]
 8005cfe:	460b      	mov	r3, r1
 8005d00:	607a      	str	r2, [r7, #4]
 8005d02:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d0a:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8005d0c:	69bb      	ldr	r3, [r7, #24]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d102      	bne.n	8005d18 <SCSI_ReadFormatCapacity+0x22>
  {
    return -1;
 8005d12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d16:	e05c      	b.n	8005dd2 <SCSI_ReadFormatCapacity+0xdc>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	f107 0214 	add.w	r2, r7, #20
 8005d24:	f107 0110 	add.w	r1, r7, #16
 8005d28:	7af8      	ldrb	r0, [r7, #11]
 8005d2a:	4798      	blx	r3
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8005d30:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d104      	bne.n	8005d42 <SCSI_ReadFormatCapacity+0x4c>
 8005d38:	69bb      	ldr	r3, [r7, #24]
 8005d3a:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8005d3e:	2b02      	cmp	r3, #2
 8005d40:	d108      	bne.n	8005d54 <SCSI_ReadFormatCapacity+0x5e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8005d42:	7af9      	ldrb	r1, [r7, #11]
 8005d44:	233a      	movs	r3, #58	; 0x3a
 8005d46:	2202      	movs	r2, #2
 8005d48:	68f8      	ldr	r0, [r7, #12]
 8005d4a:	f000 f91e 	bl	8005f8a <SCSI_SenseCode>
    return -1;
 8005d4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d52:	e03e      	b.n	8005dd2 <SCSI_ReadFormatCapacity+0xdc>
  }

  for (i = 0U; i < 12U ; i++)
 8005d54:	2300      	movs	r3, #0
 8005d56:	83fb      	strh	r3, [r7, #30]
 8005d58:	e007      	b.n	8005d6a <SCSI_ReadFormatCapacity+0x74>
  {
    hmsc->bot_data[i] = 0U;
 8005d5a:	8bfb      	ldrh	r3, [r7, #30]
 8005d5c:	69ba      	ldr	r2, [r7, #24]
 8005d5e:	4413      	add	r3, r2
 8005d60:	2200      	movs	r2, #0
 8005d62:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 8005d64:	8bfb      	ldrh	r3, [r7, #30]
 8005d66:	3301      	adds	r3, #1
 8005d68:	83fb      	strh	r3, [r7, #30]
 8005d6a:	8bfb      	ldrh	r3, [r7, #30]
 8005d6c:	2b0b      	cmp	r3, #11
 8005d6e:	d9f4      	bls.n	8005d5a <SCSI_ReadFormatCapacity+0x64>
  }

  hmsc->bot_data[3] = 0x08U;
 8005d70:	69bb      	ldr	r3, [r7, #24]
 8005d72:	2208      	movs	r2, #8
 8005d74:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	3b01      	subs	r3, #1
 8005d7a:	0e1b      	lsrs	r3, r3, #24
 8005d7c:	b2da      	uxtb	r2, r3
 8005d7e:	69bb      	ldr	r3, [r7, #24]
 8005d80:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	3b01      	subs	r3, #1
 8005d86:	0c1b      	lsrs	r3, r3, #16
 8005d88:	b2da      	uxtb	r2, r3
 8005d8a:	69bb      	ldr	r3, [r7, #24]
 8005d8c:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	3b01      	subs	r3, #1
 8005d92:	0a1b      	lsrs	r3, r3, #8
 8005d94:	b2da      	uxtb	r2, r3
 8005d96:	69bb      	ldr	r3, [r7, #24]
 8005d98:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	b2db      	uxtb	r3, r3
 8005d9e:	3b01      	subs	r3, #1
 8005da0:	b2da      	uxtb	r2, r3
 8005da2:	69bb      	ldr	r3, [r7, #24]
 8005da4:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 8005da6:	69bb      	ldr	r3, [r7, #24]
 8005da8:	2202      	movs	r2, #2
 8005daa:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8005dac:	8abb      	ldrh	r3, [r7, #20]
 8005dae:	141b      	asrs	r3, r3, #16
 8005db0:	b2da      	uxtb	r2, r3
 8005db2:	69bb      	ldr	r3, [r7, #24]
 8005db4:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8005db6:	8abb      	ldrh	r3, [r7, #20]
 8005db8:	0a1b      	lsrs	r3, r3, #8
 8005dba:	b29b      	uxth	r3, r3
 8005dbc:	b2da      	uxtb	r2, r3
 8005dbe:	69bb      	ldr	r3, [r7, #24]
 8005dc0:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 8005dc2:	8abb      	ldrh	r3, [r7, #20]
 8005dc4:	b2da      	uxtb	r2, r3
 8005dc6:	69bb      	ldr	r3, [r7, #24]
 8005dc8:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 8005dca:	69bb      	ldr	r3, [r7, #24]
 8005dcc:	220c      	movs	r2, #12
 8005dce:	60da      	str	r2, [r3, #12]

  return 0;
 8005dd0:	2300      	movs	r3, #0
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3720      	adds	r7, #32
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}
	...

08005ddc <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b086      	sub	sp, #24
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	60f8      	str	r0, [r7, #12]
 8005de4:	460b      	mov	r3, r1
 8005de6:	607a      	str	r2, [r7, #4]
 8005de8:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005df0:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 8005df2:	2317      	movs	r3, #23
 8005df4:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d102      	bne.n	8005e02 <SCSI_ModeSense6+0x26>
  {
    return -1;
 8005dfc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005e00:	e011      	b.n	8005e26 <SCSI_ModeSense6+0x4a>
  }

  if (params[4] <= len)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	3304      	adds	r3, #4
 8005e06:	781b      	ldrb	r3, [r3, #0]
 8005e08:	b29b      	uxth	r3, r3
 8005e0a:	8afa      	ldrh	r2, [r7, #22]
 8005e0c:	429a      	cmp	r2, r3
 8005e0e:	d303      	bcc.n	8005e18 <SCSI_ModeSense6+0x3c>
  {
    len = params[4];
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	3304      	adds	r3, #4
 8005e14:	781b      	ldrb	r3, [r3, #0]
 8005e16:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 8005e18:	8afb      	ldrh	r3, [r7, #22]
 8005e1a:	461a      	mov	r2, r3
 8005e1c:	4904      	ldr	r1, [pc, #16]	; (8005e30 <SCSI_ModeSense6+0x54>)
 8005e1e:	6938      	ldr	r0, [r7, #16]
 8005e20:	f000 fdbc 	bl	800699c <SCSI_UpdateBotData>

  return 0;
 8005e24:	2300      	movs	r3, #0
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	3718      	adds	r7, #24
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}
 8005e2e:	bf00      	nop
 8005e30:	200000c0 	.word	0x200000c0

08005e34 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b086      	sub	sp, #24
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	60f8      	str	r0, [r7, #12]
 8005e3c:	460b      	mov	r3, r1
 8005e3e:	607a      	str	r2, [r7, #4]
 8005e40:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005e48:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 8005e4a:	231b      	movs	r3, #27
 8005e4c:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d102      	bne.n	8005e5a <SCSI_ModeSense10+0x26>
  {
    return -1;
 8005e54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005e58:	e011      	b.n	8005e7e <SCSI_ModeSense10+0x4a>
  }

  if (params[8] <= len)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	3308      	adds	r3, #8
 8005e5e:	781b      	ldrb	r3, [r3, #0]
 8005e60:	b29b      	uxth	r3, r3
 8005e62:	8afa      	ldrh	r2, [r7, #22]
 8005e64:	429a      	cmp	r2, r3
 8005e66:	d303      	bcc.n	8005e70 <SCSI_ModeSense10+0x3c>
  {
    len = params[8];
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	3308      	adds	r3, #8
 8005e6c:	781b      	ldrb	r3, [r3, #0]
 8005e6e:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 8005e70:	8afb      	ldrh	r3, [r7, #22]
 8005e72:	461a      	mov	r2, r3
 8005e74:	4904      	ldr	r1, [pc, #16]	; (8005e88 <SCSI_ModeSense10+0x54>)
 8005e76:	6938      	ldr	r0, [r7, #16]
 8005e78:	f000 fd90 	bl	800699c <SCSI_UpdateBotData>

  return 0;
 8005e7c:	2300      	movs	r3, #0
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3718      	adds	r7, #24
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}
 8005e86:	bf00      	nop
 8005e88:	200000d8 	.word	0x200000d8

08005e8c <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b086      	sub	sp, #24
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	60f8      	str	r0, [r7, #12]
 8005e94:	460b      	mov	r3, r1
 8005e96:	607a      	str	r2, [r7, #4]
 8005e98:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ea0:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d102      	bne.n	8005eae <SCSI_RequestSense+0x22>
  {
    return -1;
 8005ea8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005eac:	e069      	b.n	8005f82 <SCSI_RequestSense+0xf6>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d10a      	bne.n	8005ece <SCSI_RequestSense+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8005ebe:	2320      	movs	r3, #32
 8005ec0:	2205      	movs	r2, #5
 8005ec2:	68f8      	ldr	r0, [r7, #12]
 8005ec4:	f000 f861 	bl	8005f8a <SCSI_SenseCode>
    return -1;
 8005ec8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005ecc:	e059      	b.n	8005f82 <SCSI_RequestSense+0xf6>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8005ece:	2300      	movs	r3, #0
 8005ed0:	75fb      	strb	r3, [r7, #23]
 8005ed2:	e007      	b.n	8005ee4 <SCSI_RequestSense+0x58>
  {
    hmsc->bot_data[i] = 0U;
 8005ed4:	7dfb      	ldrb	r3, [r7, #23]
 8005ed6:	693a      	ldr	r2, [r7, #16]
 8005ed8:	4413      	add	r3, r2
 8005eda:	2200      	movs	r2, #0
 8005edc:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8005ede:	7dfb      	ldrb	r3, [r7, #23]
 8005ee0:	3301      	adds	r3, #1
 8005ee2:	75fb      	strb	r3, [r7, #23]
 8005ee4:	7dfb      	ldrb	r3, [r7, #23]
 8005ee6:	2b11      	cmp	r3, #17
 8005ee8:	d9f4      	bls.n	8005ed4 <SCSI_RequestSense+0x48>
  }

  hmsc->bot_data[0] = 0x70U;
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	2270      	movs	r2, #112	; 0x70
 8005eee:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	220c      	movs	r2, #12
 8005ef4:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	f893 2260 	ldrb.w	r2, [r3, #608]	; 0x260
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8005f02:	429a      	cmp	r2, r3
 8005f04:	d02e      	beq.n	8005f64 <SCSI_RequestSense+0xd8>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8005f0c:	461a      	mov	r2, r3
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	3248      	adds	r2, #72	; 0x48
 8005f12:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8005f20:	693a      	ldr	r2, [r7, #16]
 8005f22:	3348      	adds	r3, #72	; 0x48
 8005f24:	00db      	lsls	r3, r3, #3
 8005f26:	4413      	add	r3, r2
 8005f28:	791a      	ldrb	r2, [r3, #4]
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8005f34:	693a      	ldr	r2, [r7, #16]
 8005f36:	3348      	adds	r3, #72	; 0x48
 8005f38:	00db      	lsls	r3, r3, #3
 8005f3a:	4413      	add	r3, r2
 8005f3c:	795a      	ldrb	r2, [r3, #5]
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8005f48:	3301      	adds	r3, #1
 8005f4a:	b2da      	uxtb	r2, r3
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8005f58:	2b04      	cmp	r3, #4
 8005f5a:	d103      	bne.n	8005f64 <SCSI_RequestSense+0xd8>
    {
      hmsc->scsi_sense_head = 0U;
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	2212      	movs	r2, #18
 8005f68:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	3304      	adds	r3, #4
 8005f6e:	781b      	ldrb	r3, [r3, #0]
 8005f70:	2b12      	cmp	r3, #18
 8005f72:	d805      	bhi.n	8005f80 <SCSI_RequestSense+0xf4>
  {
    hmsc->bot_data_length = params[4];
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	3304      	adds	r3, #4
 8005f78:	781b      	ldrb	r3, [r3, #0]
 8005f7a:	461a      	mov	r2, r3
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	60da      	str	r2, [r3, #12]
  }

  return 0;
 8005f80:	2300      	movs	r3, #0
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	3718      	adds	r7, #24
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}

08005f8a <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 8005f8a:	b480      	push	{r7}
 8005f8c:	b085      	sub	sp, #20
 8005f8e:	af00      	add	r7, sp, #0
 8005f90:	6078      	str	r0, [r7, #4]
 8005f92:	4608      	mov	r0, r1
 8005f94:	4611      	mov	r1, r2
 8005f96:	461a      	mov	r2, r3
 8005f98:	4603      	mov	r3, r0
 8005f9a:	70fb      	strb	r3, [r7, #3]
 8005f9c:	460b      	mov	r3, r1
 8005f9e:	70bb      	strb	r3, [r7, #2]
 8005fa0:	4613      	mov	r3, r2
 8005fa2:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005faa:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d02c      	beq.n	800600c <SCSI_SenseCode+0x82>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8005fb8:	461a      	mov	r2, r3
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	3248      	adds	r2, #72	; 0x48
 8005fbe:	78b9      	ldrb	r1, [r7, #2]
 8005fc0:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8005fca:	68fa      	ldr	r2, [r7, #12]
 8005fcc:	3348      	adds	r3, #72	; 0x48
 8005fce:	00db      	lsls	r3, r3, #3
 8005fd0:	4413      	add	r3, r2
 8005fd2:	787a      	ldrb	r2, [r7, #1]
 8005fd4:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8005fdc:	68fa      	ldr	r2, [r7, #12]
 8005fde:	3348      	adds	r3, #72	; 0x48
 8005fe0:	00db      	lsls	r3, r3, #3
 8005fe2:	4413      	add	r3, r2
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8005fee:	3301      	adds	r3, #1
 8005ff0:	b2da      	uxtb	r2, r3
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8005ffe:	2b04      	cmp	r3, #4
 8006000:	d105      	bne.n	800600e <SCSI_SenseCode+0x84>
  {
    hmsc->scsi_sense_tail = 0U;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2200      	movs	r2, #0
 8006006:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
 800600a:	e000      	b.n	800600e <SCSI_SenseCode+0x84>
    return;
 800600c:	bf00      	nop
  }
}
 800600e:	3714      	adds	r7, #20
 8006010:	46bd      	mov	sp, r7
 8006012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006016:	4770      	bx	lr

08006018 <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b086      	sub	sp, #24
 800601c:	af00      	add	r7, sp, #0
 800601e:	60f8      	str	r0, [r7, #12]
 8006020:	460b      	mov	r3, r1
 8006022:	607a      	str	r2, [r7, #4]
 8006024:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800602c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d102      	bne.n	800603a <SCSI_StartStopUnit+0x22>
  {
    return -1;
 8006034:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006038:	e03b      	b.n	80060b2 <SCSI_StartStopUnit+0x9a>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8006040:	2b01      	cmp	r3, #1
 8006042:	d10f      	bne.n	8006064 <SCSI_StartStopUnit+0x4c>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	3304      	adds	r3, #4
 8006048:	781b      	ldrb	r3, [r3, #0]
 800604a:	f003 0303 	and.w	r3, r3, #3
 800604e:	2b02      	cmp	r3, #2
 8006050:	d108      	bne.n	8006064 <SCSI_StartStopUnit+0x4c>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8006052:	7af9      	ldrb	r1, [r7, #11]
 8006054:	2324      	movs	r3, #36	; 0x24
 8006056:	2205      	movs	r2, #5
 8006058:	68f8      	ldr	r0, [r7, #12]
 800605a:	f7ff ff96 	bl	8005f8a <SCSI_SenseCode>

    return -1;
 800605e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006062:	e026      	b.n	80060b2 <SCSI_StartStopUnit+0x9a>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	3304      	adds	r3, #4
 8006068:	781b      	ldrb	r3, [r3, #0]
 800606a:	f003 0303 	and.w	r3, r3, #3
 800606e:	2b01      	cmp	r3, #1
 8006070:	d104      	bne.n	800607c <SCSI_StartStopUnit+0x64>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	2200      	movs	r2, #0
 8006076:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800607a:	e016      	b.n	80060aa <SCSI_StartStopUnit+0x92>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	3304      	adds	r3, #4
 8006080:	781b      	ldrb	r3, [r3, #0]
 8006082:	f003 0303 	and.w	r3, r3, #3
 8006086:	2b02      	cmp	r3, #2
 8006088:	d104      	bne.n	8006094 <SCSI_StartStopUnit+0x7c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	2202      	movs	r2, #2
 800608e:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 8006092:	e00a      	b.n	80060aa <SCSI_StartStopUnit+0x92>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	3304      	adds	r3, #4
 8006098:	781b      	ldrb	r3, [r3, #0]
 800609a:	f003 0303 	and.w	r3, r3, #3
 800609e:	2b03      	cmp	r3, #3
 80060a0:	d103      	bne.n	80060aa <SCSI_StartStopUnit+0x92>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	2200      	movs	r2, #0
 80060a6:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	2200      	movs	r2, #0
 80060ae:	60da      	str	r2, [r3, #12]

  return 0;
 80060b0:	2300      	movs	r3, #0
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	3718      	adds	r7, #24
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}

080060ba <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80060ba:	b480      	push	{r7}
 80060bc:	b087      	sub	sp, #28
 80060be:	af00      	add	r7, sp, #0
 80060c0:	60f8      	str	r0, [r7, #12]
 80060c2:	460b      	mov	r3, r1
 80060c4:	607a      	str	r2, [r7, #4]
 80060c6:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80060ce:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d102      	bne.n	80060dc <SCSI_AllowPreventRemovable+0x22>
  {
    return -1;
 80060d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80060da:	e011      	b.n	8006100 <SCSI_AllowPreventRemovable+0x46>
  }

  if (params[4] == 0U)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	3304      	adds	r3, #4
 80060e0:	781b      	ldrb	r3, [r3, #0]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d104      	bne.n	80060f0 <SCSI_AllowPreventRemovable+0x36>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	2200      	movs	r2, #0
 80060ea:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 80060ee:	e003      	b.n	80060f8 <SCSI_AllowPreventRemovable+0x3e>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	2201      	movs	r2, #1
 80060f4:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }

  hmsc->bot_data_length = 0U;
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	2200      	movs	r2, #0
 80060fc:	60da      	str	r2, [r3, #12]

  return 0;
 80060fe:	2300      	movs	r3, #0
}
 8006100:	4618      	mov	r0, r3
 8006102:	371c      	adds	r7, #28
 8006104:	46bd      	mov	sp, r7
 8006106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610a:	4770      	bx	lr

0800610c <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b086      	sub	sp, #24
 8006110:	af00      	add	r7, sp, #0
 8006112:	60f8      	str	r0, [r7, #12]
 8006114:	460b      	mov	r3, r1
 8006116:	607a      	str	r2, [r7, #4]
 8006118:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006120:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d102      	bne.n	800612e <SCSI_Read10+0x22>
  {
    return -1;
 8006128:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800612c:	e08a      	b.n	8006244 <SCSI_Read10+0x138>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	7a1b      	ldrb	r3, [r3, #8]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d17c      	bne.n	8006230 <SCSI_Read10+0x124>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800613c:	b25b      	sxtb	r3, r3
 800613e:	2b00      	cmp	r3, #0
 8006140:	db0a      	blt.n	8006158 <SCSI_Read10+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8006148:	2320      	movs	r3, #32
 800614a:	2205      	movs	r2, #5
 800614c:	68f8      	ldr	r0, [r7, #12]
 800614e:	f7ff ff1c 	bl	8005f8a <SCSI_SenseCode>
      return -1;
 8006152:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006156:	e075      	b.n	8006244 <SCSI_Read10+0x138>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800615e:	2b02      	cmp	r3, #2
 8006160:	d108      	bne.n	8006174 <SCSI_Read10+0x68>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8006162:	7af9      	ldrb	r1, [r7, #11]
 8006164:	233a      	movs	r3, #58	; 0x3a
 8006166:	2202      	movs	r2, #2
 8006168:	68f8      	ldr	r0, [r7, #12]
 800616a:	f7ff ff0e 	bl	8005f8a <SCSI_SenseCode>

      return -1;
 800616e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006172:	e067      	b.n	8006244 <SCSI_Read10+0x138>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800617a:	689b      	ldr	r3, [r3, #8]
 800617c:	7afa      	ldrb	r2, [r7, #11]
 800617e:	4610      	mov	r0, r2
 8006180:	4798      	blx	r3
 8006182:	4603      	mov	r3, r0
 8006184:	2b00      	cmp	r3, #0
 8006186:	d008      	beq.n	800619a <SCSI_Read10+0x8e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8006188:	7af9      	ldrb	r1, [r7, #11]
 800618a:	233a      	movs	r3, #58	; 0x3a
 800618c:	2202      	movs	r2, #2
 800618e:	68f8      	ldr	r0, [r7, #12]
 8006190:	f7ff fefb 	bl	8005f8a <SCSI_SenseCode>
      return -1;
 8006194:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006198:	e054      	b.n	8006244 <SCSI_Read10+0x138>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	3302      	adds	r3, #2
 800619e:	781b      	ldrb	r3, [r3, #0]
 80061a0:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	3303      	adds	r3, #3
 80061a6:	781b      	ldrb	r3, [r3, #0]
 80061a8:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80061aa:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	3304      	adds	r3, #4
 80061b0:	781b      	ldrb	r3, [r3, #0]
 80061b2:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80061b4:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80061b6:	687a      	ldr	r2, [r7, #4]
 80061b8:	3205      	adds	r2, #5
 80061ba:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 80061bc:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	3307      	adds	r3, #7
 80061c8:	781b      	ldrb	r3, [r3, #0]
 80061ca:	021b      	lsls	r3, r3, #8
 80061cc:	687a      	ldr	r2, [r7, #4]
 80061ce:	3208      	adds	r2, #8
 80061d0:	7812      	ldrb	r2, [r2, #0]
 80061d2:	431a      	orrs	r2, r3
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80061e6:	7af9      	ldrb	r1, [r7, #11]
 80061e8:	68f8      	ldr	r0, [r7, #12]
 80061ea:	f000 faad 	bl	8006748 <SCSI_CheckAddressRange>
 80061ee:	4603      	mov	r3, r0
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	da02      	bge.n	80061fa <SCSI_Read10+0xee>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80061f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80061f8:	e024      	b.n	8006244 <SCSI_Read10+0x138>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8006206:	6979      	ldr	r1, [r7, #20]
 8006208:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 800620c:	fb01 f303 	mul.w	r3, r1, r3
 8006210:	429a      	cmp	r2, r3
 8006212:	d00a      	beq.n	800622a <SCSI_Read10+0x11e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800621a:	2320      	movs	r3, #32
 800621c:	2205      	movs	r2, #5
 800621e:	68f8      	ldr	r0, [r7, #12]
 8006220:	f7ff feb3 	bl	8005f8a <SCSI_SenseCode>
      return -1;
 8006224:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006228:	e00c      	b.n	8006244 <SCSI_Read10+0x138>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	2202      	movs	r2, #2
 800622e:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006236:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8006238:	7afb      	ldrb	r3, [r7, #11]
 800623a:	4619      	mov	r1, r3
 800623c:	68f8      	ldr	r0, [r7, #12]
 800623e:	f000 faab 	bl	8006798 <SCSI_ProcessRead>
 8006242:	4603      	mov	r3, r0
}
 8006244:	4618      	mov	r0, r3
 8006246:	3718      	adds	r7, #24
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}

0800624c <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b086      	sub	sp, #24
 8006250:	af00      	add	r7, sp, #0
 8006252:	60f8      	str	r0, [r7, #12]
 8006254:	460b      	mov	r3, r1
 8006256:	607a      	str	r2, [r7, #4]
 8006258:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006260:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d102      	bne.n	800626e <SCSI_Read12+0x22>
  {
    return -1;
 8006268:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800626c:	e095      	b.n	800639a <SCSI_Read12+0x14e>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	7a1b      	ldrb	r3, [r3, #8]
 8006272:	2b00      	cmp	r3, #0
 8006274:	f040 8087 	bne.w	8006386 <SCSI_Read12+0x13a>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800627e:	b25b      	sxtb	r3, r3
 8006280:	2b00      	cmp	r3, #0
 8006282:	db0a      	blt.n	800629a <SCSI_Read12+0x4e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800628a:	2320      	movs	r3, #32
 800628c:	2205      	movs	r2, #5
 800628e:	68f8      	ldr	r0, [r7, #12]
 8006290:	f7ff fe7b 	bl	8005f8a <SCSI_SenseCode>
      return -1;
 8006294:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006298:	e07f      	b.n	800639a <SCSI_Read12+0x14e>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80062a0:	2b02      	cmp	r3, #2
 80062a2:	d108      	bne.n	80062b6 <SCSI_Read12+0x6a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80062a4:	7af9      	ldrb	r1, [r7, #11]
 80062a6:	233a      	movs	r3, #58	; 0x3a
 80062a8:	2202      	movs	r2, #2
 80062aa:	68f8      	ldr	r0, [r7, #12]
 80062ac:	f7ff fe6d 	bl	8005f8a <SCSI_SenseCode>
      return -1;
 80062b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80062b4:	e071      	b.n	800639a <SCSI_Read12+0x14e>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80062bc:	689b      	ldr	r3, [r3, #8]
 80062be:	7afa      	ldrb	r2, [r7, #11]
 80062c0:	4610      	mov	r0, r2
 80062c2:	4798      	blx	r3
 80062c4:	4603      	mov	r3, r0
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d008      	beq.n	80062dc <SCSI_Read12+0x90>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80062ca:	7af9      	ldrb	r1, [r7, #11]
 80062cc:	233a      	movs	r3, #58	; 0x3a
 80062ce:	2202      	movs	r2, #2
 80062d0:	68f8      	ldr	r0, [r7, #12]
 80062d2:	f7ff fe5a 	bl	8005f8a <SCSI_SenseCode>
      return -1;
 80062d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80062da:	e05e      	b.n	800639a <SCSI_Read12+0x14e>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	3302      	adds	r3, #2
 80062e0:	781b      	ldrb	r3, [r3, #0]
 80062e2:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	3303      	adds	r3, #3
 80062e8:	781b      	ldrb	r3, [r3, #0]
 80062ea:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80062ec:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	3304      	adds	r3, #4
 80062f2:	781b      	ldrb	r3, [r3, #0]
 80062f4:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80062f6:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80062f8:	687a      	ldr	r2, [r7, #4]
 80062fa:	3205      	adds	r2, #5
 80062fc:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 80062fe:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	3306      	adds	r3, #6
 800630a:	781b      	ldrb	r3, [r3, #0]
 800630c:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	3307      	adds	r3, #7
 8006312:	781b      	ldrb	r3, [r3, #0]
 8006314:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8006316:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	3308      	adds	r3, #8
 800631c:	781b      	ldrb	r3, [r3, #0]
 800631e:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8006320:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8006322:	687a      	ldr	r2, [r7, #4]
 8006324:	3209      	adds	r2, #9
 8006326:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8006328:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800633c:	7af9      	ldrb	r1, [r7, #11]
 800633e:	68f8      	ldr	r0, [r7, #12]
 8006340:	f000 fa02 	bl	8006748 <SCSI_CheckAddressRange>
 8006344:	4603      	mov	r3, r0
 8006346:	2b00      	cmp	r3, #0
 8006348:	da02      	bge.n	8006350 <SCSI_Read12+0x104>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800634a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800634e:	e024      	b.n	800639a <SCSI_Read12+0x14e>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800635c:	6979      	ldr	r1, [r7, #20]
 800635e:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 8006362:	fb01 f303 	mul.w	r3, r1, r3
 8006366:	429a      	cmp	r2, r3
 8006368:	d00a      	beq.n	8006380 <SCSI_Read12+0x134>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8006370:	2320      	movs	r3, #32
 8006372:	2205      	movs	r2, #5
 8006374:	68f8      	ldr	r0, [r7, #12]
 8006376:	f7ff fe08 	bl	8005f8a <SCSI_SenseCode>
      return -1;
 800637a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800637e:	e00c      	b.n	800639a <SCSI_Read12+0x14e>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	2202      	movs	r2, #2
 8006384:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	f44f 7200 	mov.w	r2, #512	; 0x200
 800638c:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800638e:	7afb      	ldrb	r3, [r7, #11]
 8006390:	4619      	mov	r1, r3
 8006392:	68f8      	ldr	r0, [r7, #12]
 8006394:	f000 fa00 	bl	8006798 <SCSI_ProcessRead>
 8006398:	4603      	mov	r3, r0
}
 800639a:	4618      	mov	r0, r3
 800639c:	3718      	adds	r7, #24
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd80      	pop	{r7, pc}

080063a2 <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80063a2:	b580      	push	{r7, lr}
 80063a4:	b086      	sub	sp, #24
 80063a6:	af00      	add	r7, sp, #0
 80063a8:	60f8      	str	r0, [r7, #12]
 80063aa:	460b      	mov	r3, r1
 80063ac:	607a      	str	r2, [r7, #4]
 80063ae:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80063b6:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d102      	bne.n	80063c4 <SCSI_Write10+0x22>
  {
    return -1;
 80063be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80063c2:	e0af      	b.n	8006524 <SCSI_Write10+0x182>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80063c4:	697b      	ldr	r3, [r7, #20]
 80063c6:	7a1b      	ldrb	r3, [r3, #8]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	f040 80a5 	bne.w	8006518 <SCSI_Write10+0x176>
  {
    if (hmsc->cbw.dDataLength == 0U)
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d10a      	bne.n	80063ee <SCSI_Write10+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80063de:	2320      	movs	r3, #32
 80063e0:	2205      	movs	r2, #5
 80063e2:	68f8      	ldr	r0, [r7, #12]
 80063e4:	f7ff fdd1 	bl	8005f8a <SCSI_SenseCode>
      return -1;
 80063e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80063ec:	e09a      	b.n	8006524 <SCSI_Write10+0x182>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 80063f4:	b25b      	sxtb	r3, r3
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	da0a      	bge.n	8006410 <SCSI_Write10+0x6e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8006400:	2320      	movs	r3, #32
 8006402:	2205      	movs	r2, #5
 8006404:	68f8      	ldr	r0, [r7, #12]
 8006406:	f7ff fdc0 	bl	8005f8a <SCSI_SenseCode>
      return -1;
 800640a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800640e:	e089      	b.n	8006524 <SCSI_Write10+0x182>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006416:	689b      	ldr	r3, [r3, #8]
 8006418:	7afa      	ldrb	r2, [r7, #11]
 800641a:	4610      	mov	r0, r2
 800641c:	4798      	blx	r3
 800641e:	4603      	mov	r3, r0
 8006420:	2b00      	cmp	r3, #0
 8006422:	d008      	beq.n	8006436 <SCSI_Write10+0x94>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8006424:	7af9      	ldrb	r1, [r7, #11]
 8006426:	233a      	movs	r3, #58	; 0x3a
 8006428:	2202      	movs	r2, #2
 800642a:	68f8      	ldr	r0, [r7, #12]
 800642c:	f7ff fdad 	bl	8005f8a <SCSI_SenseCode>
      return -1;
 8006430:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006434:	e076      	b.n	8006524 <SCSI_Write10+0x182>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800643c:	68db      	ldr	r3, [r3, #12]
 800643e:	7afa      	ldrb	r2, [r7, #11]
 8006440:	4610      	mov	r0, r2
 8006442:	4798      	blx	r3
 8006444:	4603      	mov	r3, r0
 8006446:	2b00      	cmp	r3, #0
 8006448:	d008      	beq.n	800645c <SCSI_Write10+0xba>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800644a:	7af9      	ldrb	r1, [r7, #11]
 800644c:	2327      	movs	r3, #39	; 0x27
 800644e:	2202      	movs	r2, #2
 8006450:	68f8      	ldr	r0, [r7, #12]
 8006452:	f7ff fd9a 	bl	8005f8a <SCSI_SenseCode>
      return -1;
 8006456:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800645a:	e063      	b.n	8006524 <SCSI_Write10+0x182>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	3302      	adds	r3, #2
 8006460:	781b      	ldrb	r3, [r3, #0]
 8006462:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	3303      	adds	r3, #3
 8006468:	781b      	ldrb	r3, [r3, #0]
 800646a:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800646c:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	3304      	adds	r3, #4
 8006472:	781b      	ldrb	r3, [r3, #0]
 8006474:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8006476:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8006478:	687a      	ldr	r2, [r7, #4]
 800647a:	3205      	adds	r2, #5
 800647c:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800647e:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8006480:	697b      	ldr	r3, [r7, #20]
 8006482:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	3307      	adds	r3, #7
 800648a:	781b      	ldrb	r3, [r3, #0]
 800648c:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 800648e:	687a      	ldr	r2, [r7, #4]
 8006490:	3208      	adds	r2, #8
 8006492:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8006494:	431a      	orrs	r2, r3
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80064a8:	7af9      	ldrb	r1, [r7, #11]
 80064aa:	68f8      	ldr	r0, [r7, #12]
 80064ac:	f000 f94c 	bl	8006748 <SCSI_CheckAddressRange>
 80064b0:	4603      	mov	r3, r0
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	da02      	bge.n	80064bc <SCSI_Write10+0x11a>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80064b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80064ba:	e033      	b.n	8006524 <SCSI_Write10+0x182>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80064c2:	697a      	ldr	r2, [r7, #20]
 80064c4:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 80064c8:	fb02 f303 	mul.w	r3, r2, r3
 80064cc:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80064d4:	693a      	ldr	r2, [r7, #16]
 80064d6:	429a      	cmp	r2, r3
 80064d8:	d00a      	beq.n	80064f0 <SCSI_Write10+0x14e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80064e0:	2320      	movs	r3, #32
 80064e2:	2205      	movs	r2, #5
 80064e4:	68f8      	ldr	r0, [r7, #12]
 80064e6:	f7ff fd50 	bl	8005f8a <SCSI_SenseCode>
      return -1;
 80064ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80064ee:	e019      	b.n	8006524 <SCSI_Write10+0x182>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 80064f0:	693b      	ldr	r3, [r7, #16]
 80064f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064f6:	bf28      	it	cs
 80064f8:	f44f 7300 	movcs.w	r3, #512	; 0x200
 80064fc:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 80064fe:	697b      	ldr	r3, [r7, #20]
 8006500:	2201      	movs	r2, #1
 8006502:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	f103 0210 	add.w	r2, r3, #16
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	2101      	movs	r1, #1
 800650e:	68f8      	ldr	r0, [r7, #12]
 8006510:	f002 f95c 	bl	80087cc <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8006514:	2300      	movs	r3, #0
 8006516:	e005      	b.n	8006524 <SCSI_Write10+0x182>
    return SCSI_ProcessWrite(pdev, lun);
 8006518:	7afb      	ldrb	r3, [r7, #11]
 800651a:	4619      	mov	r1, r3
 800651c:	68f8      	ldr	r0, [r7, #12]
 800651e:	f000 f9b4 	bl	800688a <SCSI_ProcessWrite>
 8006522:	4603      	mov	r3, r0
}
 8006524:	4618      	mov	r0, r3
 8006526:	3718      	adds	r7, #24
 8006528:	46bd      	mov	sp, r7
 800652a:	bd80      	pop	{r7, pc}

0800652c <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b086      	sub	sp, #24
 8006530:	af00      	add	r7, sp, #0
 8006532:	60f8      	str	r0, [r7, #12]
 8006534:	460b      	mov	r3, r1
 8006536:	607a      	str	r2, [r7, #4]
 8006538:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006540:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d102      	bne.n	800654e <SCSI_Write12+0x22>
  {
    return -1;
 8006548:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800654c:	e0bf      	b.n	80066ce <SCSI_Write12+0x1a2>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	7a1b      	ldrb	r3, [r3, #8]
 8006552:	2b00      	cmp	r3, #0
 8006554:	f040 80b5 	bne.w	80066c2 <SCSI_Write12+0x196>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800655e:	2b00      	cmp	r3, #0
 8006560:	d10a      	bne.n	8006578 <SCSI_Write12+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8006568:	2320      	movs	r3, #32
 800656a:	2205      	movs	r2, #5
 800656c:	68f8      	ldr	r0, [r7, #12]
 800656e:	f7ff fd0c 	bl	8005f8a <SCSI_SenseCode>
      return -1;
 8006572:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006576:	e0aa      	b.n	80066ce <SCSI_Write12+0x1a2>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800657e:	b25b      	sxtb	r3, r3
 8006580:	2b00      	cmp	r3, #0
 8006582:	da0a      	bge.n	800659a <SCSI_Write12+0x6e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800658a:	2320      	movs	r3, #32
 800658c:	2205      	movs	r2, #5
 800658e:	68f8      	ldr	r0, [r7, #12]
 8006590:	f7ff fcfb 	bl	8005f8a <SCSI_SenseCode>
      return -1;
 8006594:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006598:	e099      	b.n	80066ce <SCSI_Write12+0x1a2>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80065a0:	689b      	ldr	r3, [r3, #8]
 80065a2:	7afa      	ldrb	r2, [r7, #11]
 80065a4:	4610      	mov	r0, r2
 80065a6:	4798      	blx	r3
 80065a8:	4603      	mov	r3, r0
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d00b      	beq.n	80065c6 <SCSI_Write12+0x9a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80065ae:	7af9      	ldrb	r1, [r7, #11]
 80065b0:	233a      	movs	r3, #58	; 0x3a
 80065b2:	2202      	movs	r2, #2
 80065b4:	68f8      	ldr	r0, [r7, #12]
 80065b6:	f7ff fce8 	bl	8005f8a <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	2205      	movs	r2, #5
 80065be:	721a      	strb	r2, [r3, #8]
      return -1;
 80065c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80065c4:	e083      	b.n	80066ce <SCSI_Write12+0x1a2>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80065cc:	68db      	ldr	r3, [r3, #12]
 80065ce:	7afa      	ldrb	r2, [r7, #11]
 80065d0:	4610      	mov	r0, r2
 80065d2:	4798      	blx	r3
 80065d4:	4603      	mov	r3, r0
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d00b      	beq.n	80065f2 <SCSI_Write12+0xc6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 80065da:	7af9      	ldrb	r1, [r7, #11]
 80065dc:	2327      	movs	r3, #39	; 0x27
 80065de:	2202      	movs	r2, #2
 80065e0:	68f8      	ldr	r0, [r7, #12]
 80065e2:	f7ff fcd2 	bl	8005f8a <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	2205      	movs	r2, #5
 80065ea:	721a      	strb	r2, [r3, #8]
      return -1;
 80065ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80065f0:	e06d      	b.n	80066ce <SCSI_Write12+0x1a2>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	3302      	adds	r3, #2
 80065f6:	781b      	ldrb	r3, [r3, #0]
 80065f8:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	3303      	adds	r3, #3
 80065fe:	781b      	ldrb	r3, [r3, #0]
 8006600:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8006602:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	3304      	adds	r3, #4
 8006608:	781b      	ldrb	r3, [r3, #0]
 800660a:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800660c:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800660e:	687a      	ldr	r2, [r7, #4]
 8006610:	3205      	adds	r2, #5
 8006612:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8006614:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	3306      	adds	r3, #6
 8006620:	781b      	ldrb	r3, [r3, #0]
 8006622:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	3307      	adds	r3, #7
 8006628:	781b      	ldrb	r3, [r3, #0]
 800662a:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800662c:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	3308      	adds	r3, #8
 8006632:	781b      	ldrb	r3, [r3, #0]
 8006634:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8006636:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8006638:	687a      	ldr	r2, [r7, #4]
 800663a:	3209      	adds	r2, #9
 800663c:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800663e:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8006640:	697b      	ldr	r3, [r7, #20]
 8006642:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8006652:	7af9      	ldrb	r1, [r7, #11]
 8006654:	68f8      	ldr	r0, [r7, #12]
 8006656:	f000 f877 	bl	8006748 <SCSI_CheckAddressRange>
 800665a:	4603      	mov	r3, r0
 800665c:	2b00      	cmp	r3, #0
 800665e:	da02      	bge.n	8006666 <SCSI_Write12+0x13a>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8006660:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006664:	e033      	b.n	80066ce <SCSI_Write12+0x1a2>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800666c:	697a      	ldr	r2, [r7, #20]
 800666e:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8006672:	fb02 f303 	mul.w	r3, r2, r3
 8006676:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800667e:	693a      	ldr	r2, [r7, #16]
 8006680:	429a      	cmp	r2, r3
 8006682:	d00a      	beq.n	800669a <SCSI_Write12+0x16e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800668a:	2320      	movs	r3, #32
 800668c:	2205      	movs	r2, #5
 800668e:	68f8      	ldr	r0, [r7, #12]
 8006690:	f7ff fc7b 	bl	8005f8a <SCSI_SenseCode>
      return -1;
 8006694:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006698:	e019      	b.n	80066ce <SCSI_Write12+0x1a2>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066a0:	bf28      	it	cs
 80066a2:	f44f 7300 	movcs.w	r3, #512	; 0x200
 80066a6:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	2201      	movs	r2, #1
 80066ac:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 80066ae:	697b      	ldr	r3, [r7, #20]
 80066b0:	f103 0210 	add.w	r2, r3, #16
 80066b4:	693b      	ldr	r3, [r7, #16]
 80066b6:	2101      	movs	r1, #1
 80066b8:	68f8      	ldr	r0, [r7, #12]
 80066ba:	f002 f887 	bl	80087cc <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 80066be:	2300      	movs	r3, #0
 80066c0:	e005      	b.n	80066ce <SCSI_Write12+0x1a2>
    return SCSI_ProcessWrite(pdev, lun);
 80066c2:	7afb      	ldrb	r3, [r7, #11]
 80066c4:	4619      	mov	r1, r3
 80066c6:	68f8      	ldr	r0, [r7, #12]
 80066c8:	f000 f8df 	bl	800688a <SCSI_ProcessWrite>
 80066cc:	4603      	mov	r3, r0
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	3718      	adds	r7, #24
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}

080066d6 <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80066d6:	b580      	push	{r7, lr}
 80066d8:	b086      	sub	sp, #24
 80066da:	af00      	add	r7, sp, #0
 80066dc:	60f8      	str	r0, [r7, #12]
 80066de:	460b      	mov	r3, r1
 80066e0:	607a      	str	r2, [r7, #4]
 80066e2:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80066ea:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d102      	bne.n	80066f8 <SCSI_Verify10+0x22>
  {
    return -1;
 80066f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80066f6:	e023      	b.n	8006740 <SCSI_Verify10+0x6a>
  }

  if ((params[1] & 0x02U) == 0x02U)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	3301      	adds	r3, #1
 80066fc:	781b      	ldrb	r3, [r3, #0]
 80066fe:	f003 0302 	and.w	r3, r3, #2
 8006702:	2b00      	cmp	r3, #0
 8006704:	d008      	beq.n	8006718 <SCSI_Verify10+0x42>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8006706:	7af9      	ldrb	r1, [r7, #11]
 8006708:	2324      	movs	r3, #36	; 0x24
 800670a:	2205      	movs	r2, #5
 800670c:	68f8      	ldr	r0, [r7, #12]
 800670e:	f7ff fc3c 	bl	8005f8a <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 8006712:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006716:	e013      	b.n	8006740 <SCSI_Verify10+0x6a>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8006724:	7af9      	ldrb	r1, [r7, #11]
 8006726:	68f8      	ldr	r0, [r7, #12]
 8006728:	f000 f80e 	bl	8006748 <SCSI_CheckAddressRange>
 800672c:	4603      	mov	r3, r0
 800672e:	2b00      	cmp	r3, #0
 8006730:	da02      	bge.n	8006738 <SCSI_Verify10+0x62>
  {
    return -1; /* error */
 8006732:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006736:	e003      	b.n	8006740 <SCSI_Verify10+0x6a>
  }

  hmsc->bot_data_length = 0U;
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	2200      	movs	r2, #0
 800673c:	60da      	str	r2, [r3, #12]

  return 0;
 800673e:	2300      	movs	r3, #0
}
 8006740:	4618      	mov	r0, r3
 8006742:	3718      	adds	r7, #24
 8006744:	46bd      	mov	sp, r7
 8006746:	bd80      	pop	{r7, pc}

08006748 <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b086      	sub	sp, #24
 800674c:	af00      	add	r7, sp, #0
 800674e:	60f8      	str	r0, [r7, #12]
 8006750:	607a      	str	r2, [r7, #4]
 8006752:	603b      	str	r3, [r7, #0]
 8006754:	460b      	mov	r3, r1
 8006756:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800675e:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d102      	bne.n	800676c <SCSI_CheckAddressRange+0x24>
  {
    return -1;
 8006766:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800676a:	e011      	b.n	8006790 <SCSI_CheckAddressRange+0x48>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 800676c:	687a      	ldr	r2, [r7, #4]
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	441a      	add	r2, r3
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006778:	429a      	cmp	r2, r3
 800677a:	d908      	bls.n	800678e <SCSI_CheckAddressRange+0x46>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 800677c:	7af9      	ldrb	r1, [r7, #11]
 800677e:	2321      	movs	r3, #33	; 0x21
 8006780:	2205      	movs	r2, #5
 8006782:	68f8      	ldr	r0, [r7, #12]
 8006784:	f7ff fc01 	bl	8005f8a <SCSI_SenseCode>
    return -1;
 8006788:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800678c:	e000      	b.n	8006790 <SCSI_CheckAddressRange+0x48>
  }

  return 0;
 800678e:	2300      	movs	r3, #0
}
 8006790:	4618      	mov	r0, r3
 8006792:	3718      	adds	r7, #24
 8006794:	46bd      	mov	sp, r7
 8006796:	bd80      	pop	{r7, pc}

08006798 <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8006798:	b590      	push	{r4, r7, lr}
 800679a:	b085      	sub	sp, #20
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
 80067a0:	460b      	mov	r3, r1
 80067a2:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80067aa:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80067b2:	68fa      	ldr	r2, [r7, #12]
 80067b4:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 80067b8:	fb02 f303 	mul.w	r3, r2, r3
 80067bc:	60bb      	str	r3, [r7, #8]

  if (hmsc == NULL)
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d102      	bne.n	80067ca <SCSI_ProcessRead+0x32>
  {
    return -1;
 80067c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80067c8:	e05b      	b.n	8006882 <SCSI_ProcessRead+0xea>
  }

  len = MIN(len, MSC_MEDIA_PACKET);
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067d0:	bf28      	it	cs
 80067d2:	f44f 7300 	movcs.w	r3, #512	; 0x200
 80067d6:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80067de:	691c      	ldr	r4, [r3, #16]
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	f103 0110 	add.w	r1, r3, #16
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80067f2:	4618      	mov	r0, r3
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 80067fa:	b29b      	uxth	r3, r3
 80067fc:	78f8      	ldrb	r0, [r7, #3]
 80067fe:	47a0      	blx	r4
 8006800:	4603      	mov	r3, r0
 8006802:	2b00      	cmp	r3, #0
 8006804:	da08      	bge.n	8006818 <SCSI_ProcessRead+0x80>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8006806:	78f9      	ldrb	r1, [r7, #3]
 8006808:	2311      	movs	r3, #17
 800680a:	2204      	movs	r2, #4
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	f7ff fbbc 	bl	8005f8a <SCSI_SenseCode>
    return -1;
 8006812:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006816:	e034      	b.n	8006882 <SCSI_ProcessRead+0xea>
  }

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	f103 0210 	add.w	r2, r3, #16
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	2181      	movs	r1, #129	; 0x81
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f001 ff9a 	bl	800875c <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8006834:	4619      	mov	r1, r3
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	fbb3 f3f1 	udiv	r3, r3, r1
 800683c:	441a      	add	r2, r3
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8006850:	4619      	mov	r1, r3
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	fbb3 f3f1 	udiv	r3, r3, r1
 8006858:	1ad2      	subs	r2, r2, r3
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	1ad2      	subs	r2, r2, r3
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8006876:	2b00      	cmp	r3, #0
 8006878:	d102      	bne.n	8006880 <SCSI_ProcessRead+0xe8>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2203      	movs	r2, #3
 800687e:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 8006880:	2300      	movs	r3, #0
}
 8006882:	4618      	mov	r0, r3
 8006884:	3714      	adds	r7, #20
 8006886:	46bd      	mov	sp, r7
 8006888:	bd90      	pop	{r4, r7, pc}

0800688a <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800688a:	b590      	push	{r4, r7, lr}
 800688c:	b085      	sub	sp, #20
 800688e:	af00      	add	r7, sp, #0
 8006890:	6078      	str	r0, [r7, #4]
 8006892:	460b      	mov	r3, r1
 8006894:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800689c:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80068a4:	68fa      	ldr	r2, [r7, #12]
 80068a6:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 80068aa:	fb02 f303 	mul.w	r3, r2, r3
 80068ae:	60bb      	str	r3, [r7, #8]

  if (hmsc == NULL)
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d102      	bne.n	80068bc <SCSI_ProcessWrite+0x32>
  {
    return -1;
 80068b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80068ba:	e06b      	b.n	8006994 <SCSI_ProcessWrite+0x10a>
  }

  len = MIN(len, MSC_MEDIA_PACKET);
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068c2:	bf28      	it	cs
 80068c4:	f44f 7300 	movcs.w	r3, #512	; 0x200
 80068c8:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80068d0:	695c      	ldr	r4, [r3, #20]
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	f103 0110 	add.w	r1, r3, #16
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80068e4:	4618      	mov	r0, r3
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 80068ec:	b29b      	uxth	r3, r3
 80068ee:	78f8      	ldrb	r0, [r7, #3]
 80068f0:	47a0      	blx	r4
 80068f2:	4603      	mov	r3, r0
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	da08      	bge.n	800690a <SCSI_ProcessWrite+0x80>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 80068f8:	78f9      	ldrb	r1, [r7, #3]
 80068fa:	2303      	movs	r3, #3
 80068fc:	2204      	movs	r2, #4
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f7ff fb43 	bl	8005f8a <SCSI_SenseCode>
    return -1;
 8006904:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006908:	e044      	b.n	8006994 <SCSI_ProcessWrite+0x10a>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8006916:	4619      	mov	r1, r3
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	fbb3 f3f1 	udiv	r3, r3, r1
 800691e:	441a      	add	r2, r3
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8006932:	4619      	mov	r1, r3
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	fbb3 f3f1 	udiv	r3, r3, r1
 800693a:	1ad2      	subs	r2, r2, r3
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	1ad2      	subs	r2, r2, r3
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8006958:	2b00      	cmp	r3, #0
 800695a:	d104      	bne.n	8006966 <SCSI_ProcessWrite+0xdc>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800695c:	2100      	movs	r1, #0
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f7fe fdd8 	bl	8005514 <MSC_BOT_SendCSW>
 8006964:	e015      	b.n	8006992 <SCSI_ProcessWrite+0x108>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800696c:	68fa      	ldr	r2, [r7, #12]
 800696e:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8006972:	fb02 f303 	mul.w	r3, r2, r3
 8006976:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800697a:	bf28      	it	cs
 800697c:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8006980:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	f103 0210 	add.w	r2, r3, #16
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	2101      	movs	r1, #1
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f001 ff1d 	bl	80087cc <USBD_LL_PrepareReceive>
  }

  return 0;
 8006992:	2300      	movs	r3, #0
}
 8006994:	4618      	mov	r0, r3
 8006996:	3714      	adds	r7, #20
 8006998:	46bd      	mov	sp, r7
 800699a:	bd90      	pop	{r4, r7, pc}

0800699c <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 800699c:	b480      	push	{r7}
 800699e:	b087      	sub	sp, #28
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	60f8      	str	r0, [r7, #12]
 80069a4:	60b9      	str	r1, [r7, #8]
 80069a6:	4613      	mov	r3, r2
 80069a8:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 80069aa:	88fb      	ldrh	r3, [r7, #6]
 80069ac:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d102      	bne.n	80069ba <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 80069b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80069b8:	e013      	b.n	80069e2 <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 80069ba:	8afa      	ldrh	r2, [r7, #22]
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 80069c0:	e00b      	b.n	80069da <SCSI_UpdateBotData+0x3e>
  {
    len--;
 80069c2:	8afb      	ldrh	r3, [r7, #22]
 80069c4:	3b01      	subs	r3, #1
 80069c6:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 80069c8:	8afb      	ldrh	r3, [r7, #22]
 80069ca:	68ba      	ldr	r2, [r7, #8]
 80069cc:	441a      	add	r2, r3
 80069ce:	8afb      	ldrh	r3, [r7, #22]
 80069d0:	7811      	ldrb	r1, [r2, #0]
 80069d2:	68fa      	ldr	r2, [r7, #12]
 80069d4:	4413      	add	r3, r2
 80069d6:	460a      	mov	r2, r1
 80069d8:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 80069da:	8afb      	ldrh	r3, [r7, #22]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d1f0      	bne.n	80069c2 <SCSI_UpdateBotData+0x26>
  }

  return 0;
 80069e0:	2300      	movs	r3, #0
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	371c      	adds	r7, #28
 80069e6:	46bd      	mov	sp, r7
 80069e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ec:	4770      	bx	lr

080069ee <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80069ee:	b580      	push	{r7, lr}
 80069f0:	b086      	sub	sp, #24
 80069f2:	af00      	add	r7, sp, #0
 80069f4:	60f8      	str	r0, [r7, #12]
 80069f6:	60b9      	str	r1, [r7, #8]
 80069f8:	4613      	mov	r3, r2
 80069fa:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d101      	bne.n	8006a06 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006a02:	2303      	movs	r3, #3
 8006a04:	e01f      	b.n	8006a46 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	2200      	movs	r2, #0
 8006a12:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d003      	beq.n	8006a2c <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	68ba      	ldr	r2, [r7, #8]
 8006a28:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	2201      	movs	r2, #1
 8006a30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	79fa      	ldrb	r2, [r7, #7]
 8006a38:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006a3a:	68f8      	ldr	r0, [r7, #12]
 8006a3c:	f001 fc9a 	bl	8008374 <USBD_LL_Init>
 8006a40:	4603      	mov	r3, r0
 8006a42:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006a44:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a46:	4618      	mov	r0, r3
 8006a48:	3718      	adds	r7, #24
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd80      	pop	{r7, pc}

08006a4e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006a4e:	b580      	push	{r7, lr}
 8006a50:	b084      	sub	sp, #16
 8006a52:	af00      	add	r7, sp, #0
 8006a54:	6078      	str	r0, [r7, #4]
 8006a56:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006a58:	2300      	movs	r3, #0
 8006a5a:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d101      	bne.n	8006a66 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8006a62:	2303      	movs	r3, #3
 8006a64:	e016      	b.n	8006a94 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	683a      	ldr	r2, [r7, #0]
 8006a6a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d00b      	beq.n	8006a92 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a82:	f107 020e 	add.w	r2, r7, #14
 8006a86:	4610      	mov	r0, r2
 8006a88:	4798      	blx	r3
 8006a8a:	4602      	mov	r2, r0
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8006a92:	2300      	movs	r3, #0
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	3710      	adds	r7, #16
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bd80      	pop	{r7, pc}

08006a9c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b082      	sub	sp, #8
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	f001 fcaf 	bl	8008408 <USBD_LL_Start>
 8006aaa:	4603      	mov	r3, r0
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	3708      	adds	r7, #8
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}

08006ab4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b083      	sub	sp, #12
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006abc:	2300      	movs	r3, #0
}
 8006abe:	4618      	mov	r0, r3
 8006ac0:	370c      	adds	r7, #12
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac8:	4770      	bx	lr

08006aca <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006aca:	b580      	push	{r7, lr}
 8006acc:	b084      	sub	sp, #16
 8006ace:	af00      	add	r7, sp, #0
 8006ad0:	6078      	str	r0, [r7, #4]
 8006ad2:	460b      	mov	r3, r1
 8006ad4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006ad6:	2303      	movs	r3, #3
 8006ad8:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d009      	beq.n	8006af8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	78fa      	ldrb	r2, [r7, #3]
 8006aee:	4611      	mov	r1, r2
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	4798      	blx	r3
 8006af4:	4603      	mov	r3, r0
 8006af6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006af8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3710      	adds	r7, #16
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}

08006b02 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006b02:	b580      	push	{r7, lr}
 8006b04:	b082      	sub	sp, #8
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	6078      	str	r0, [r7, #4]
 8006b0a:	460b      	mov	r3, r1
 8006b0c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d007      	beq.n	8006b28 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	78fa      	ldrb	r2, [r7, #3]
 8006b22:	4611      	mov	r1, r2
 8006b24:	6878      	ldr	r0, [r7, #4]
 8006b26:	4798      	blx	r3
  }

  return USBD_OK;
 8006b28:	2300      	movs	r3, #0
}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	3708      	adds	r7, #8
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}

08006b32 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006b32:	b580      	push	{r7, lr}
 8006b34:	b084      	sub	sp, #16
 8006b36:	af00      	add	r7, sp, #0
 8006b38:	6078      	str	r0, [r7, #4]
 8006b3a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006b42:	6839      	ldr	r1, [r7, #0]
 8006b44:	4618      	mov	r0, r3
 8006b46:	f000 ffb9 	bl	8007abc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2201      	movs	r2, #1
 8006b4e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006b58:	461a      	mov	r2, r3
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006b66:	f003 031f 	and.w	r3, r3, #31
 8006b6a:	2b02      	cmp	r3, #2
 8006b6c:	d01a      	beq.n	8006ba4 <USBD_LL_SetupStage+0x72>
 8006b6e:	2b02      	cmp	r3, #2
 8006b70:	d822      	bhi.n	8006bb8 <USBD_LL_SetupStage+0x86>
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d002      	beq.n	8006b7c <USBD_LL_SetupStage+0x4a>
 8006b76:	2b01      	cmp	r3, #1
 8006b78:	d00a      	beq.n	8006b90 <USBD_LL_SetupStage+0x5e>
 8006b7a:	e01d      	b.n	8006bb8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006b82:	4619      	mov	r1, r3
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f000 fa61 	bl	800704c <USBD_StdDevReq>
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	73fb      	strb	r3, [r7, #15]
      break;
 8006b8e:	e020      	b.n	8006bd2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006b96:	4619      	mov	r1, r3
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	f000 fac5 	bl	8007128 <USBD_StdItfReq>
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	73fb      	strb	r3, [r7, #15]
      break;
 8006ba2:	e016      	b.n	8006bd2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006baa:	4619      	mov	r1, r3
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	f000 fb04 	bl	80071ba <USBD_StdEPReq>
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	73fb      	strb	r3, [r7, #15]
      break;
 8006bb6:	e00c      	b.n	8006bd2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006bbe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006bc2:	b2db      	uxtb	r3, r3
 8006bc4:	4619      	mov	r1, r3
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f001 fcfa 	bl	80085c0 <USBD_LL_StallEP>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	73fb      	strb	r3, [r7, #15]
      break;
 8006bd0:	bf00      	nop
  }

  return ret;
 8006bd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	3710      	adds	r7, #16
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}

08006bdc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b086      	sub	sp, #24
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	60f8      	str	r0, [r7, #12]
 8006be4:	460b      	mov	r3, r1
 8006be6:	607a      	str	r2, [r7, #4]
 8006be8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006bea:	7afb      	ldrb	r3, [r7, #11]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d138      	bne.n	8006c62 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006bf6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006bfe:	2b03      	cmp	r3, #3
 8006c00:	d14a      	bne.n	8006c98 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	689a      	ldr	r2, [r3, #8]
 8006c06:	693b      	ldr	r3, [r7, #16]
 8006c08:	68db      	ldr	r3, [r3, #12]
 8006c0a:	429a      	cmp	r2, r3
 8006c0c:	d913      	bls.n	8006c36 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006c0e:	693b      	ldr	r3, [r7, #16]
 8006c10:	689a      	ldr	r2, [r3, #8]
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	68db      	ldr	r3, [r3, #12]
 8006c16:	1ad2      	subs	r2, r2, r3
 8006c18:	693b      	ldr	r3, [r7, #16]
 8006c1a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	68da      	ldr	r2, [r3, #12]
 8006c20:	693b      	ldr	r3, [r7, #16]
 8006c22:	689b      	ldr	r3, [r3, #8]
 8006c24:	4293      	cmp	r3, r2
 8006c26:	bf28      	it	cs
 8006c28:	4613      	movcs	r3, r2
 8006c2a:	461a      	mov	r2, r3
 8006c2c:	6879      	ldr	r1, [r7, #4]
 8006c2e:	68f8      	ldr	r0, [r7, #12]
 8006c30:	f001 f81b 	bl	8007c6a <USBD_CtlContinueRx>
 8006c34:	e030      	b.n	8006c98 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c3c:	b2db      	uxtb	r3, r3
 8006c3e:	2b03      	cmp	r3, #3
 8006c40:	d10b      	bne.n	8006c5a <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c48:	691b      	ldr	r3, [r3, #16]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d005      	beq.n	8006c5a <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c54:	691b      	ldr	r3, [r3, #16]
 8006c56:	68f8      	ldr	r0, [r7, #12]
 8006c58:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006c5a:	68f8      	ldr	r0, [r7, #12]
 8006c5c:	f001 f816 	bl	8007c8c <USBD_CtlSendStatus>
 8006c60:	e01a      	b.n	8006c98 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c68:	b2db      	uxtb	r3, r3
 8006c6a:	2b03      	cmp	r3, #3
 8006c6c:	d114      	bne.n	8006c98 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c74:	699b      	ldr	r3, [r3, #24]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d00e      	beq.n	8006c98 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c80:	699b      	ldr	r3, [r3, #24]
 8006c82:	7afa      	ldrb	r2, [r7, #11]
 8006c84:	4611      	mov	r1, r2
 8006c86:	68f8      	ldr	r0, [r7, #12]
 8006c88:	4798      	blx	r3
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006c8e:	7dfb      	ldrb	r3, [r7, #23]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d001      	beq.n	8006c98 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8006c94:	7dfb      	ldrb	r3, [r7, #23]
 8006c96:	e000      	b.n	8006c9a <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8006c98:	2300      	movs	r3, #0
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	3718      	adds	r7, #24
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}

08006ca2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006ca2:	b580      	push	{r7, lr}
 8006ca4:	b086      	sub	sp, #24
 8006ca6:	af00      	add	r7, sp, #0
 8006ca8:	60f8      	str	r0, [r7, #12]
 8006caa:	460b      	mov	r3, r1
 8006cac:	607a      	str	r2, [r7, #4]
 8006cae:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006cb0:	7afb      	ldrb	r3, [r7, #11]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d16b      	bne.n	8006d8e <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	3314      	adds	r3, #20
 8006cba:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006cc2:	2b02      	cmp	r3, #2
 8006cc4:	d156      	bne.n	8006d74 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	689a      	ldr	r2, [r3, #8]
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	68db      	ldr	r3, [r3, #12]
 8006cce:	429a      	cmp	r2, r3
 8006cd0:	d914      	bls.n	8006cfc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006cd2:	693b      	ldr	r3, [r7, #16]
 8006cd4:	689a      	ldr	r2, [r3, #8]
 8006cd6:	693b      	ldr	r3, [r7, #16]
 8006cd8:	68db      	ldr	r3, [r3, #12]
 8006cda:	1ad2      	subs	r2, r2, r3
 8006cdc:	693b      	ldr	r3, [r7, #16]
 8006cde:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006ce0:	693b      	ldr	r3, [r7, #16]
 8006ce2:	689b      	ldr	r3, [r3, #8]
 8006ce4:	461a      	mov	r2, r3
 8006ce6:	6879      	ldr	r1, [r7, #4]
 8006ce8:	68f8      	ldr	r0, [r7, #12]
 8006cea:	f000 ffad 	bl	8007c48 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006cee:	2300      	movs	r3, #0
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	2100      	movs	r1, #0
 8006cf4:	68f8      	ldr	r0, [r7, #12]
 8006cf6:	f001 fd69 	bl	80087cc <USBD_LL_PrepareReceive>
 8006cfa:	e03b      	b.n	8006d74 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006cfc:	693b      	ldr	r3, [r7, #16]
 8006cfe:	68da      	ldr	r2, [r3, #12]
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	689b      	ldr	r3, [r3, #8]
 8006d04:	429a      	cmp	r2, r3
 8006d06:	d11c      	bne.n	8006d42 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	685a      	ldr	r2, [r3, #4]
 8006d0c:	693b      	ldr	r3, [r7, #16]
 8006d0e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006d10:	429a      	cmp	r2, r3
 8006d12:	d316      	bcc.n	8006d42 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	685a      	ldr	r2, [r3, #4]
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006d1e:	429a      	cmp	r2, r3
 8006d20:	d20f      	bcs.n	8006d42 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006d22:	2200      	movs	r2, #0
 8006d24:	2100      	movs	r1, #0
 8006d26:	68f8      	ldr	r0, [r7, #12]
 8006d28:	f000 ff8e 	bl	8007c48 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006d34:	2300      	movs	r3, #0
 8006d36:	2200      	movs	r2, #0
 8006d38:	2100      	movs	r1, #0
 8006d3a:	68f8      	ldr	r0, [r7, #12]
 8006d3c:	f001 fd46 	bl	80087cc <USBD_LL_PrepareReceive>
 8006d40:	e018      	b.n	8006d74 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d48:	b2db      	uxtb	r3, r3
 8006d4a:	2b03      	cmp	r3, #3
 8006d4c:	d10b      	bne.n	8006d66 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d54:	68db      	ldr	r3, [r3, #12]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d005      	beq.n	8006d66 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d60:	68db      	ldr	r3, [r3, #12]
 8006d62:	68f8      	ldr	r0, [r7, #12]
 8006d64:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006d66:	2180      	movs	r1, #128	; 0x80
 8006d68:	68f8      	ldr	r0, [r7, #12]
 8006d6a:	f001 fc29 	bl	80085c0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006d6e:	68f8      	ldr	r0, [r7, #12]
 8006d70:	f000 ff9f 	bl	8007cb2 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006d7a:	2b01      	cmp	r3, #1
 8006d7c:	d122      	bne.n	8006dc4 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8006d7e:	68f8      	ldr	r0, [r7, #12]
 8006d80:	f7ff fe98 	bl	8006ab4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	2200      	movs	r2, #0
 8006d88:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006d8c:	e01a      	b.n	8006dc4 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d94:	b2db      	uxtb	r3, r3
 8006d96:	2b03      	cmp	r3, #3
 8006d98:	d114      	bne.n	8006dc4 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006da0:	695b      	ldr	r3, [r3, #20]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d00e      	beq.n	8006dc4 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dac:	695b      	ldr	r3, [r3, #20]
 8006dae:	7afa      	ldrb	r2, [r7, #11]
 8006db0:	4611      	mov	r1, r2
 8006db2:	68f8      	ldr	r0, [r7, #12]
 8006db4:	4798      	blx	r3
 8006db6:	4603      	mov	r3, r0
 8006db8:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006dba:	7dfb      	ldrb	r3, [r7, #23]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d001      	beq.n	8006dc4 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8006dc0:	7dfb      	ldrb	r3, [r7, #23]
 8006dc2:	e000      	b.n	8006dc6 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8006dc4:	2300      	movs	r3, #0
}
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	3718      	adds	r7, #24
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}

08006dce <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006dce:	b580      	push	{r7, lr}
 8006dd0:	b082      	sub	sp, #8
 8006dd2:	af00      	add	r7, sp, #0
 8006dd4:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2201      	movs	r2, #1
 8006dda:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2200      	movs	r2, #0
 8006de2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2200      	movs	r2, #0
 8006dea:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2200      	movs	r2, #0
 8006df0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d101      	bne.n	8006e02 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8006dfe:	2303      	movs	r3, #3
 8006e00:	e02f      	b.n	8006e62 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d00f      	beq.n	8006e2c <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e12:	685b      	ldr	r3, [r3, #4]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d009      	beq.n	8006e2c <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e1e:	685b      	ldr	r3, [r3, #4]
 8006e20:	687a      	ldr	r2, [r7, #4]
 8006e22:	6852      	ldr	r2, [r2, #4]
 8006e24:	b2d2      	uxtb	r2, r2
 8006e26:	4611      	mov	r1, r2
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006e2c:	2340      	movs	r3, #64	; 0x40
 8006e2e:	2200      	movs	r2, #0
 8006e30:	2100      	movs	r1, #0
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f001 fb1a 	bl	800846c <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2240      	movs	r2, #64	; 0x40
 8006e44:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006e48:	2340      	movs	r3, #64	; 0x40
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	2180      	movs	r1, #128	; 0x80
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f001 fb0c 	bl	800846c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2201      	movs	r2, #1
 8006e58:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2240      	movs	r2, #64	; 0x40
 8006e5e:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006e60:	2300      	movs	r3, #0
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	3708      	adds	r7, #8
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}

08006e6a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006e6a:	b480      	push	{r7}
 8006e6c:	b083      	sub	sp, #12
 8006e6e:	af00      	add	r7, sp, #0
 8006e70:	6078      	str	r0, [r7, #4]
 8006e72:	460b      	mov	r3, r1
 8006e74:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	78fa      	ldrb	r2, [r7, #3]
 8006e7a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006e7c:	2300      	movs	r3, #0
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	370c      	adds	r7, #12
 8006e82:	46bd      	mov	sp, r7
 8006e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e88:	4770      	bx	lr

08006e8a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006e8a:	b480      	push	{r7}
 8006e8c:	b083      	sub	sp, #12
 8006e8e:	af00      	add	r7, sp, #0
 8006e90:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e98:	b2da      	uxtb	r2, r3
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2204      	movs	r2, #4
 8006ea4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006ea8:	2300      	movs	r3, #0
}
 8006eaa:	4618      	mov	r0, r3
 8006eac:	370c      	adds	r7, #12
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb4:	4770      	bx	lr

08006eb6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006eb6:	b480      	push	{r7}
 8006eb8:	b083      	sub	sp, #12
 8006eba:	af00      	add	r7, sp, #0
 8006ebc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ec4:	b2db      	uxtb	r3, r3
 8006ec6:	2b04      	cmp	r3, #4
 8006ec8:	d106      	bne.n	8006ed8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006ed0:	b2da      	uxtb	r2, r3
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006ed8:	2300      	movs	r3, #0
}
 8006eda:	4618      	mov	r0, r3
 8006edc:	370c      	adds	r7, #12
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee4:	4770      	bx	lr

08006ee6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006ee6:	b580      	push	{r7, lr}
 8006ee8:	b082      	sub	sp, #8
 8006eea:	af00      	add	r7, sp, #0
 8006eec:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d101      	bne.n	8006efc <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8006ef8:	2303      	movs	r3, #3
 8006efa:	e012      	b.n	8006f22 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f02:	b2db      	uxtb	r3, r3
 8006f04:	2b03      	cmp	r3, #3
 8006f06:	d10b      	bne.n	8006f20 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f0e:	69db      	ldr	r3, [r3, #28]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d005      	beq.n	8006f20 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f1a:	69db      	ldr	r3, [r3, #28]
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006f20:	2300      	movs	r3, #0
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	3708      	adds	r7, #8
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bd80      	pop	{r7, pc}

08006f2a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006f2a:	b580      	push	{r7, lr}
 8006f2c:	b082      	sub	sp, #8
 8006f2e:	af00      	add	r7, sp, #0
 8006f30:	6078      	str	r0, [r7, #4]
 8006f32:	460b      	mov	r3, r1
 8006f34:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d101      	bne.n	8006f44 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006f40:	2303      	movs	r3, #3
 8006f42:	e014      	b.n	8006f6e <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f4a:	b2db      	uxtb	r3, r3
 8006f4c:	2b03      	cmp	r3, #3
 8006f4e:	d10d      	bne.n	8006f6c <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f56:	6a1b      	ldr	r3, [r3, #32]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d007      	beq.n	8006f6c <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f62:	6a1b      	ldr	r3, [r3, #32]
 8006f64:	78fa      	ldrb	r2, [r7, #3]
 8006f66:	4611      	mov	r1, r2
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006f6c:	2300      	movs	r3, #0
}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	3708      	adds	r7, #8
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bd80      	pop	{r7, pc}

08006f76 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006f76:	b580      	push	{r7, lr}
 8006f78:	b082      	sub	sp, #8
 8006f7a:	af00      	add	r7, sp, #0
 8006f7c:	6078      	str	r0, [r7, #4]
 8006f7e:	460b      	mov	r3, r1
 8006f80:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d101      	bne.n	8006f90 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006f8c:	2303      	movs	r3, #3
 8006f8e:	e014      	b.n	8006fba <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f96:	b2db      	uxtb	r3, r3
 8006f98:	2b03      	cmp	r3, #3
 8006f9a:	d10d      	bne.n	8006fb8 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d007      	beq.n	8006fb8 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb0:	78fa      	ldrb	r2, [r7, #3]
 8006fb2:	4611      	mov	r1, r2
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006fb8:	2300      	movs	r3, #0
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	3708      	adds	r7, #8
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}

08006fc2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006fc2:	b480      	push	{r7}
 8006fc4:	b083      	sub	sp, #12
 8006fc6:	af00      	add	r7, sp, #0
 8006fc8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006fca:	2300      	movs	r3, #0
}
 8006fcc:	4618      	mov	r0, r3
 8006fce:	370c      	adds	r7, #12
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd6:	4770      	bx	lr

08006fd8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b082      	sub	sp, #8
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2201      	movs	r2, #1
 8006fe4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d009      	beq.n	8007006 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ff8:	685b      	ldr	r3, [r3, #4]
 8006ffa:	687a      	ldr	r2, [r7, #4]
 8006ffc:	6852      	ldr	r2, [r2, #4]
 8006ffe:	b2d2      	uxtb	r2, r2
 8007000:	4611      	mov	r1, r2
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	4798      	blx	r3
  }

  return USBD_OK;
 8007006:	2300      	movs	r3, #0
}
 8007008:	4618      	mov	r0, r3
 800700a:	3708      	adds	r7, #8
 800700c:	46bd      	mov	sp, r7
 800700e:	bd80      	pop	{r7, pc}

08007010 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007010:	b480      	push	{r7}
 8007012:	b087      	sub	sp, #28
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800701c:	697b      	ldr	r3, [r7, #20]
 800701e:	781b      	ldrb	r3, [r3, #0]
 8007020:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	3301      	adds	r3, #1
 8007026:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	781b      	ldrb	r3, [r3, #0]
 800702c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800702e:	8a3b      	ldrh	r3, [r7, #16]
 8007030:	021b      	lsls	r3, r3, #8
 8007032:	b21a      	sxth	r2, r3
 8007034:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007038:	4313      	orrs	r3, r2
 800703a:	b21b      	sxth	r3, r3
 800703c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800703e:	89fb      	ldrh	r3, [r7, #14]
}
 8007040:	4618      	mov	r0, r3
 8007042:	371c      	adds	r7, #28
 8007044:	46bd      	mov	sp, r7
 8007046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704a:	4770      	bx	lr

0800704c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b084      	sub	sp, #16
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
 8007054:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007056:	2300      	movs	r3, #0
 8007058:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	781b      	ldrb	r3, [r3, #0]
 800705e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007062:	2b40      	cmp	r3, #64	; 0x40
 8007064:	d005      	beq.n	8007072 <USBD_StdDevReq+0x26>
 8007066:	2b40      	cmp	r3, #64	; 0x40
 8007068:	d853      	bhi.n	8007112 <USBD_StdDevReq+0xc6>
 800706a:	2b00      	cmp	r3, #0
 800706c:	d00b      	beq.n	8007086 <USBD_StdDevReq+0x3a>
 800706e:	2b20      	cmp	r3, #32
 8007070:	d14f      	bne.n	8007112 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007078:	689b      	ldr	r3, [r3, #8]
 800707a:	6839      	ldr	r1, [r7, #0]
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	4798      	blx	r3
 8007080:	4603      	mov	r3, r0
 8007082:	73fb      	strb	r3, [r7, #15]
      break;
 8007084:	e04a      	b.n	800711c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	785b      	ldrb	r3, [r3, #1]
 800708a:	2b09      	cmp	r3, #9
 800708c:	d83b      	bhi.n	8007106 <USBD_StdDevReq+0xba>
 800708e:	a201      	add	r2, pc, #4	; (adr r2, 8007094 <USBD_StdDevReq+0x48>)
 8007090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007094:	080070e9 	.word	0x080070e9
 8007098:	080070fd 	.word	0x080070fd
 800709c:	08007107 	.word	0x08007107
 80070a0:	080070f3 	.word	0x080070f3
 80070a4:	08007107 	.word	0x08007107
 80070a8:	080070c7 	.word	0x080070c7
 80070ac:	080070bd 	.word	0x080070bd
 80070b0:	08007107 	.word	0x08007107
 80070b4:	080070df 	.word	0x080070df
 80070b8:	080070d1 	.word	0x080070d1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80070bc:	6839      	ldr	r1, [r7, #0]
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f000 f9de 	bl	8007480 <USBD_GetDescriptor>
          break;
 80070c4:	e024      	b.n	8007110 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80070c6:	6839      	ldr	r1, [r7, #0]
 80070c8:	6878      	ldr	r0, [r7, #4]
 80070ca:	f000 fb6d 	bl	80077a8 <USBD_SetAddress>
          break;
 80070ce:	e01f      	b.n	8007110 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80070d0:	6839      	ldr	r1, [r7, #0]
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f000 fbac 	bl	8007830 <USBD_SetConfig>
 80070d8:	4603      	mov	r3, r0
 80070da:	73fb      	strb	r3, [r7, #15]
          break;
 80070dc:	e018      	b.n	8007110 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80070de:	6839      	ldr	r1, [r7, #0]
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f000 fc4b 	bl	800797c <USBD_GetConfig>
          break;
 80070e6:	e013      	b.n	8007110 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80070e8:	6839      	ldr	r1, [r7, #0]
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f000 fc7c 	bl	80079e8 <USBD_GetStatus>
          break;
 80070f0:	e00e      	b.n	8007110 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80070f2:	6839      	ldr	r1, [r7, #0]
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f000 fcab 	bl	8007a50 <USBD_SetFeature>
          break;
 80070fa:	e009      	b.n	8007110 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80070fc:	6839      	ldr	r1, [r7, #0]
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f000 fcba 	bl	8007a78 <USBD_ClrFeature>
          break;
 8007104:	e004      	b.n	8007110 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8007106:	6839      	ldr	r1, [r7, #0]
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f000 fd11 	bl	8007b30 <USBD_CtlError>
          break;
 800710e:	bf00      	nop
      }
      break;
 8007110:	e004      	b.n	800711c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8007112:	6839      	ldr	r1, [r7, #0]
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f000 fd0b 	bl	8007b30 <USBD_CtlError>
      break;
 800711a:	bf00      	nop
  }

  return ret;
 800711c:	7bfb      	ldrb	r3, [r7, #15]
}
 800711e:	4618      	mov	r0, r3
 8007120:	3710      	adds	r7, #16
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}
 8007126:	bf00      	nop

08007128 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b084      	sub	sp, #16
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
 8007130:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007132:	2300      	movs	r3, #0
 8007134:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	781b      	ldrb	r3, [r3, #0]
 800713a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800713e:	2b40      	cmp	r3, #64	; 0x40
 8007140:	d005      	beq.n	800714e <USBD_StdItfReq+0x26>
 8007142:	2b40      	cmp	r3, #64	; 0x40
 8007144:	d82f      	bhi.n	80071a6 <USBD_StdItfReq+0x7e>
 8007146:	2b00      	cmp	r3, #0
 8007148:	d001      	beq.n	800714e <USBD_StdItfReq+0x26>
 800714a:	2b20      	cmp	r3, #32
 800714c:	d12b      	bne.n	80071a6 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007154:	b2db      	uxtb	r3, r3
 8007156:	3b01      	subs	r3, #1
 8007158:	2b02      	cmp	r3, #2
 800715a:	d81d      	bhi.n	8007198 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	889b      	ldrh	r3, [r3, #4]
 8007160:	b2db      	uxtb	r3, r3
 8007162:	2b01      	cmp	r3, #1
 8007164:	d813      	bhi.n	800718e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800716c:	689b      	ldr	r3, [r3, #8]
 800716e:	6839      	ldr	r1, [r7, #0]
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	4798      	blx	r3
 8007174:	4603      	mov	r3, r0
 8007176:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	88db      	ldrh	r3, [r3, #6]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d110      	bne.n	80071a2 <USBD_StdItfReq+0x7a>
 8007180:	7bfb      	ldrb	r3, [r7, #15]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d10d      	bne.n	80071a2 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f000 fd80 	bl	8007c8c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800718c:	e009      	b.n	80071a2 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800718e:	6839      	ldr	r1, [r7, #0]
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	f000 fccd 	bl	8007b30 <USBD_CtlError>
          break;
 8007196:	e004      	b.n	80071a2 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8007198:	6839      	ldr	r1, [r7, #0]
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f000 fcc8 	bl	8007b30 <USBD_CtlError>
          break;
 80071a0:	e000      	b.n	80071a4 <USBD_StdItfReq+0x7c>
          break;
 80071a2:	bf00      	nop
      }
      break;
 80071a4:	e004      	b.n	80071b0 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80071a6:	6839      	ldr	r1, [r7, #0]
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	f000 fcc1 	bl	8007b30 <USBD_CtlError>
      break;
 80071ae:	bf00      	nop
  }

  return ret;
 80071b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	3710      	adds	r7, #16
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}

080071ba <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071ba:	b580      	push	{r7, lr}
 80071bc:	b084      	sub	sp, #16
 80071be:	af00      	add	r7, sp, #0
 80071c0:	6078      	str	r0, [r7, #4]
 80071c2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80071c4:	2300      	movs	r3, #0
 80071c6:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	889b      	ldrh	r3, [r3, #4]
 80071cc:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	781b      	ldrb	r3, [r3, #0]
 80071d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80071d6:	2b40      	cmp	r3, #64	; 0x40
 80071d8:	d007      	beq.n	80071ea <USBD_StdEPReq+0x30>
 80071da:	2b40      	cmp	r3, #64	; 0x40
 80071dc:	f200 8145 	bhi.w	800746a <USBD_StdEPReq+0x2b0>
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d00c      	beq.n	80071fe <USBD_StdEPReq+0x44>
 80071e4:	2b20      	cmp	r3, #32
 80071e6:	f040 8140 	bne.w	800746a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071f0:	689b      	ldr	r3, [r3, #8]
 80071f2:	6839      	ldr	r1, [r7, #0]
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	4798      	blx	r3
 80071f8:	4603      	mov	r3, r0
 80071fa:	73fb      	strb	r3, [r7, #15]
      break;
 80071fc:	e13a      	b.n	8007474 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	785b      	ldrb	r3, [r3, #1]
 8007202:	2b03      	cmp	r3, #3
 8007204:	d007      	beq.n	8007216 <USBD_StdEPReq+0x5c>
 8007206:	2b03      	cmp	r3, #3
 8007208:	f300 8129 	bgt.w	800745e <USBD_StdEPReq+0x2a4>
 800720c:	2b00      	cmp	r3, #0
 800720e:	d07f      	beq.n	8007310 <USBD_StdEPReq+0x156>
 8007210:	2b01      	cmp	r3, #1
 8007212:	d03c      	beq.n	800728e <USBD_StdEPReq+0xd4>
 8007214:	e123      	b.n	800745e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800721c:	b2db      	uxtb	r3, r3
 800721e:	2b02      	cmp	r3, #2
 8007220:	d002      	beq.n	8007228 <USBD_StdEPReq+0x6e>
 8007222:	2b03      	cmp	r3, #3
 8007224:	d016      	beq.n	8007254 <USBD_StdEPReq+0x9a>
 8007226:	e02c      	b.n	8007282 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007228:	7bbb      	ldrb	r3, [r7, #14]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d00d      	beq.n	800724a <USBD_StdEPReq+0x90>
 800722e:	7bbb      	ldrb	r3, [r7, #14]
 8007230:	2b80      	cmp	r3, #128	; 0x80
 8007232:	d00a      	beq.n	800724a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007234:	7bbb      	ldrb	r3, [r7, #14]
 8007236:	4619      	mov	r1, r3
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f001 f9c1 	bl	80085c0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800723e:	2180      	movs	r1, #128	; 0x80
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f001 f9bd 	bl	80085c0 <USBD_LL_StallEP>
 8007246:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007248:	e020      	b.n	800728c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800724a:	6839      	ldr	r1, [r7, #0]
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f000 fc6f 	bl	8007b30 <USBD_CtlError>
              break;
 8007252:	e01b      	b.n	800728c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	885b      	ldrh	r3, [r3, #2]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d10e      	bne.n	800727a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800725c:	7bbb      	ldrb	r3, [r7, #14]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d00b      	beq.n	800727a <USBD_StdEPReq+0xc0>
 8007262:	7bbb      	ldrb	r3, [r7, #14]
 8007264:	2b80      	cmp	r3, #128	; 0x80
 8007266:	d008      	beq.n	800727a <USBD_StdEPReq+0xc0>
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	88db      	ldrh	r3, [r3, #6]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d104      	bne.n	800727a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007270:	7bbb      	ldrb	r3, [r7, #14]
 8007272:	4619      	mov	r1, r3
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f001 f9a3 	bl	80085c0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f000 fd06 	bl	8007c8c <USBD_CtlSendStatus>

              break;
 8007280:	e004      	b.n	800728c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8007282:	6839      	ldr	r1, [r7, #0]
 8007284:	6878      	ldr	r0, [r7, #4]
 8007286:	f000 fc53 	bl	8007b30 <USBD_CtlError>
              break;
 800728a:	bf00      	nop
          }
          break;
 800728c:	e0ec      	b.n	8007468 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007294:	b2db      	uxtb	r3, r3
 8007296:	2b02      	cmp	r3, #2
 8007298:	d002      	beq.n	80072a0 <USBD_StdEPReq+0xe6>
 800729a:	2b03      	cmp	r3, #3
 800729c:	d016      	beq.n	80072cc <USBD_StdEPReq+0x112>
 800729e:	e030      	b.n	8007302 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80072a0:	7bbb      	ldrb	r3, [r7, #14]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d00d      	beq.n	80072c2 <USBD_StdEPReq+0x108>
 80072a6:	7bbb      	ldrb	r3, [r7, #14]
 80072a8:	2b80      	cmp	r3, #128	; 0x80
 80072aa:	d00a      	beq.n	80072c2 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80072ac:	7bbb      	ldrb	r3, [r7, #14]
 80072ae:	4619      	mov	r1, r3
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f001 f985 	bl	80085c0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80072b6:	2180      	movs	r1, #128	; 0x80
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f001 f981 	bl	80085c0 <USBD_LL_StallEP>
 80072be:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80072c0:	e025      	b.n	800730e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80072c2:	6839      	ldr	r1, [r7, #0]
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f000 fc33 	bl	8007b30 <USBD_CtlError>
              break;
 80072ca:	e020      	b.n	800730e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	885b      	ldrh	r3, [r3, #2]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d11b      	bne.n	800730c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80072d4:	7bbb      	ldrb	r3, [r7, #14]
 80072d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d004      	beq.n	80072e8 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80072de:	7bbb      	ldrb	r3, [r7, #14]
 80072e0:	4619      	mov	r1, r3
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f001 f9a2 	bl	800862c <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	f000 fccf 	bl	8007c8c <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072f4:	689b      	ldr	r3, [r3, #8]
 80072f6:	6839      	ldr	r1, [r7, #0]
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	4798      	blx	r3
 80072fc:	4603      	mov	r3, r0
 80072fe:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8007300:	e004      	b.n	800730c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8007302:	6839      	ldr	r1, [r7, #0]
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f000 fc13 	bl	8007b30 <USBD_CtlError>
              break;
 800730a:	e000      	b.n	800730e <USBD_StdEPReq+0x154>
              break;
 800730c:	bf00      	nop
          }
          break;
 800730e:	e0ab      	b.n	8007468 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007316:	b2db      	uxtb	r3, r3
 8007318:	2b02      	cmp	r3, #2
 800731a:	d002      	beq.n	8007322 <USBD_StdEPReq+0x168>
 800731c:	2b03      	cmp	r3, #3
 800731e:	d032      	beq.n	8007386 <USBD_StdEPReq+0x1cc>
 8007320:	e097      	b.n	8007452 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007322:	7bbb      	ldrb	r3, [r7, #14]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d007      	beq.n	8007338 <USBD_StdEPReq+0x17e>
 8007328:	7bbb      	ldrb	r3, [r7, #14]
 800732a:	2b80      	cmp	r3, #128	; 0x80
 800732c:	d004      	beq.n	8007338 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800732e:	6839      	ldr	r1, [r7, #0]
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	f000 fbfd 	bl	8007b30 <USBD_CtlError>
                break;
 8007336:	e091      	b.n	800745c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007338:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800733c:	2b00      	cmp	r3, #0
 800733e:	da0b      	bge.n	8007358 <USBD_StdEPReq+0x19e>
 8007340:	7bbb      	ldrb	r3, [r7, #14]
 8007342:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007346:	4613      	mov	r3, r2
 8007348:	009b      	lsls	r3, r3, #2
 800734a:	4413      	add	r3, r2
 800734c:	009b      	lsls	r3, r3, #2
 800734e:	3310      	adds	r3, #16
 8007350:	687a      	ldr	r2, [r7, #4]
 8007352:	4413      	add	r3, r2
 8007354:	3304      	adds	r3, #4
 8007356:	e00b      	b.n	8007370 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007358:	7bbb      	ldrb	r3, [r7, #14]
 800735a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800735e:	4613      	mov	r3, r2
 8007360:	009b      	lsls	r3, r3, #2
 8007362:	4413      	add	r3, r2
 8007364:	009b      	lsls	r3, r3, #2
 8007366:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800736a:	687a      	ldr	r2, [r7, #4]
 800736c:	4413      	add	r3, r2
 800736e:	3304      	adds	r3, #4
 8007370:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	2200      	movs	r2, #0
 8007376:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	2202      	movs	r2, #2
 800737c:	4619      	mov	r1, r3
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f000 fc47 	bl	8007c12 <USBD_CtlSendData>
              break;
 8007384:	e06a      	b.n	800745c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007386:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800738a:	2b00      	cmp	r3, #0
 800738c:	da11      	bge.n	80073b2 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800738e:	7bbb      	ldrb	r3, [r7, #14]
 8007390:	f003 020f 	and.w	r2, r3, #15
 8007394:	6879      	ldr	r1, [r7, #4]
 8007396:	4613      	mov	r3, r2
 8007398:	009b      	lsls	r3, r3, #2
 800739a:	4413      	add	r3, r2
 800739c:	009b      	lsls	r3, r3, #2
 800739e:	440b      	add	r3, r1
 80073a0:	3324      	adds	r3, #36	; 0x24
 80073a2:	881b      	ldrh	r3, [r3, #0]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d117      	bne.n	80073d8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80073a8:	6839      	ldr	r1, [r7, #0]
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f000 fbc0 	bl	8007b30 <USBD_CtlError>
                  break;
 80073b0:	e054      	b.n	800745c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80073b2:	7bbb      	ldrb	r3, [r7, #14]
 80073b4:	f003 020f 	and.w	r2, r3, #15
 80073b8:	6879      	ldr	r1, [r7, #4]
 80073ba:	4613      	mov	r3, r2
 80073bc:	009b      	lsls	r3, r3, #2
 80073be:	4413      	add	r3, r2
 80073c0:	009b      	lsls	r3, r3, #2
 80073c2:	440b      	add	r3, r1
 80073c4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80073c8:	881b      	ldrh	r3, [r3, #0]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d104      	bne.n	80073d8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80073ce:	6839      	ldr	r1, [r7, #0]
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f000 fbad 	bl	8007b30 <USBD_CtlError>
                  break;
 80073d6:	e041      	b.n	800745c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80073d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	da0b      	bge.n	80073f8 <USBD_StdEPReq+0x23e>
 80073e0:	7bbb      	ldrb	r3, [r7, #14]
 80073e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80073e6:	4613      	mov	r3, r2
 80073e8:	009b      	lsls	r3, r3, #2
 80073ea:	4413      	add	r3, r2
 80073ec:	009b      	lsls	r3, r3, #2
 80073ee:	3310      	adds	r3, #16
 80073f0:	687a      	ldr	r2, [r7, #4]
 80073f2:	4413      	add	r3, r2
 80073f4:	3304      	adds	r3, #4
 80073f6:	e00b      	b.n	8007410 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80073f8:	7bbb      	ldrb	r3, [r7, #14]
 80073fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80073fe:	4613      	mov	r3, r2
 8007400:	009b      	lsls	r3, r3, #2
 8007402:	4413      	add	r3, r2
 8007404:	009b      	lsls	r3, r3, #2
 8007406:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800740a:	687a      	ldr	r2, [r7, #4]
 800740c:	4413      	add	r3, r2
 800740e:	3304      	adds	r3, #4
 8007410:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007412:	7bbb      	ldrb	r3, [r7, #14]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d002      	beq.n	800741e <USBD_StdEPReq+0x264>
 8007418:	7bbb      	ldrb	r3, [r7, #14]
 800741a:	2b80      	cmp	r3, #128	; 0x80
 800741c:	d103      	bne.n	8007426 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800741e:	68bb      	ldr	r3, [r7, #8]
 8007420:	2200      	movs	r2, #0
 8007422:	601a      	str	r2, [r3, #0]
 8007424:	e00e      	b.n	8007444 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007426:	7bbb      	ldrb	r3, [r7, #14]
 8007428:	4619      	mov	r1, r3
 800742a:	6878      	ldr	r0, [r7, #4]
 800742c:	f001 f934 	bl	8008698 <USBD_LL_IsStallEP>
 8007430:	4603      	mov	r3, r0
 8007432:	2b00      	cmp	r3, #0
 8007434:	d003      	beq.n	800743e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	2201      	movs	r2, #1
 800743a:	601a      	str	r2, [r3, #0]
 800743c:	e002      	b.n	8007444 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	2200      	movs	r2, #0
 8007442:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	2202      	movs	r2, #2
 8007448:	4619      	mov	r1, r3
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f000 fbe1 	bl	8007c12 <USBD_CtlSendData>
              break;
 8007450:	e004      	b.n	800745c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8007452:	6839      	ldr	r1, [r7, #0]
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f000 fb6b 	bl	8007b30 <USBD_CtlError>
              break;
 800745a:	bf00      	nop
          }
          break;
 800745c:	e004      	b.n	8007468 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800745e:	6839      	ldr	r1, [r7, #0]
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	f000 fb65 	bl	8007b30 <USBD_CtlError>
          break;
 8007466:	bf00      	nop
      }
      break;
 8007468:	e004      	b.n	8007474 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800746a:	6839      	ldr	r1, [r7, #0]
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	f000 fb5f 	bl	8007b30 <USBD_CtlError>
      break;
 8007472:	bf00      	nop
  }

  return ret;
 8007474:	7bfb      	ldrb	r3, [r7, #15]
}
 8007476:	4618      	mov	r0, r3
 8007478:	3710      	adds	r7, #16
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}
	...

08007480 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b084      	sub	sp, #16
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
 8007488:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800748a:	2300      	movs	r3, #0
 800748c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800748e:	2300      	movs	r3, #0
 8007490:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007492:	2300      	movs	r3, #0
 8007494:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	885b      	ldrh	r3, [r3, #2]
 800749a:	0a1b      	lsrs	r3, r3, #8
 800749c:	b29b      	uxth	r3, r3
 800749e:	3b01      	subs	r3, #1
 80074a0:	2b0e      	cmp	r3, #14
 80074a2:	f200 8152 	bhi.w	800774a <USBD_GetDescriptor+0x2ca>
 80074a6:	a201      	add	r2, pc, #4	; (adr r2, 80074ac <USBD_GetDescriptor+0x2c>)
 80074a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074ac:	0800751d 	.word	0x0800751d
 80074b0:	08007535 	.word	0x08007535
 80074b4:	08007575 	.word	0x08007575
 80074b8:	0800774b 	.word	0x0800774b
 80074bc:	0800774b 	.word	0x0800774b
 80074c0:	080076eb 	.word	0x080076eb
 80074c4:	08007717 	.word	0x08007717
 80074c8:	0800774b 	.word	0x0800774b
 80074cc:	0800774b 	.word	0x0800774b
 80074d0:	0800774b 	.word	0x0800774b
 80074d4:	0800774b 	.word	0x0800774b
 80074d8:	0800774b 	.word	0x0800774b
 80074dc:	0800774b 	.word	0x0800774b
 80074e0:	0800774b 	.word	0x0800774b
 80074e4:	080074e9 	.word	0x080074e9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074ee:	69db      	ldr	r3, [r3, #28]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d00b      	beq.n	800750c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074fa:	69db      	ldr	r3, [r3, #28]
 80074fc:	687a      	ldr	r2, [r7, #4]
 80074fe:	7c12      	ldrb	r2, [r2, #16]
 8007500:	f107 0108 	add.w	r1, r7, #8
 8007504:	4610      	mov	r0, r2
 8007506:	4798      	blx	r3
 8007508:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800750a:	e126      	b.n	800775a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800750c:	6839      	ldr	r1, [r7, #0]
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f000 fb0e 	bl	8007b30 <USBD_CtlError>
        err++;
 8007514:	7afb      	ldrb	r3, [r7, #11]
 8007516:	3301      	adds	r3, #1
 8007518:	72fb      	strb	r3, [r7, #11]
      break;
 800751a:	e11e      	b.n	800775a <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	687a      	ldr	r2, [r7, #4]
 8007526:	7c12      	ldrb	r2, [r2, #16]
 8007528:	f107 0108 	add.w	r1, r7, #8
 800752c:	4610      	mov	r0, r2
 800752e:	4798      	blx	r3
 8007530:	60f8      	str	r0, [r7, #12]
      break;
 8007532:	e112      	b.n	800775a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	7c1b      	ldrb	r3, [r3, #16]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d10d      	bne.n	8007558 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007544:	f107 0208 	add.w	r2, r7, #8
 8007548:	4610      	mov	r0, r2
 800754a:	4798      	blx	r3
 800754c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	3301      	adds	r3, #1
 8007552:	2202      	movs	r2, #2
 8007554:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007556:	e100      	b.n	800775a <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800755e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007560:	f107 0208 	add.w	r2, r7, #8
 8007564:	4610      	mov	r0, r2
 8007566:	4798      	blx	r3
 8007568:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	3301      	adds	r3, #1
 800756e:	2202      	movs	r2, #2
 8007570:	701a      	strb	r2, [r3, #0]
      break;
 8007572:	e0f2      	b.n	800775a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	885b      	ldrh	r3, [r3, #2]
 8007578:	b2db      	uxtb	r3, r3
 800757a:	2b05      	cmp	r3, #5
 800757c:	f200 80ac 	bhi.w	80076d8 <USBD_GetDescriptor+0x258>
 8007580:	a201      	add	r2, pc, #4	; (adr r2, 8007588 <USBD_GetDescriptor+0x108>)
 8007582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007586:	bf00      	nop
 8007588:	080075a1 	.word	0x080075a1
 800758c:	080075d5 	.word	0x080075d5
 8007590:	08007609 	.word	0x08007609
 8007594:	0800763d 	.word	0x0800763d
 8007598:	08007671 	.word	0x08007671
 800759c:	080076a5 	.word	0x080076a5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075a6:	685b      	ldr	r3, [r3, #4]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d00b      	beq.n	80075c4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075b2:	685b      	ldr	r3, [r3, #4]
 80075b4:	687a      	ldr	r2, [r7, #4]
 80075b6:	7c12      	ldrb	r2, [r2, #16]
 80075b8:	f107 0108 	add.w	r1, r7, #8
 80075bc:	4610      	mov	r0, r2
 80075be:	4798      	blx	r3
 80075c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80075c2:	e091      	b.n	80076e8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80075c4:	6839      	ldr	r1, [r7, #0]
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f000 fab2 	bl	8007b30 <USBD_CtlError>
            err++;
 80075cc:	7afb      	ldrb	r3, [r7, #11]
 80075ce:	3301      	adds	r3, #1
 80075d0:	72fb      	strb	r3, [r7, #11]
          break;
 80075d2:	e089      	b.n	80076e8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075da:	689b      	ldr	r3, [r3, #8]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d00b      	beq.n	80075f8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075e6:	689b      	ldr	r3, [r3, #8]
 80075e8:	687a      	ldr	r2, [r7, #4]
 80075ea:	7c12      	ldrb	r2, [r2, #16]
 80075ec:	f107 0108 	add.w	r1, r7, #8
 80075f0:	4610      	mov	r0, r2
 80075f2:	4798      	blx	r3
 80075f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80075f6:	e077      	b.n	80076e8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80075f8:	6839      	ldr	r1, [r7, #0]
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	f000 fa98 	bl	8007b30 <USBD_CtlError>
            err++;
 8007600:	7afb      	ldrb	r3, [r7, #11]
 8007602:	3301      	adds	r3, #1
 8007604:	72fb      	strb	r3, [r7, #11]
          break;
 8007606:	e06f      	b.n	80076e8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800760e:	68db      	ldr	r3, [r3, #12]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d00b      	beq.n	800762c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800761a:	68db      	ldr	r3, [r3, #12]
 800761c:	687a      	ldr	r2, [r7, #4]
 800761e:	7c12      	ldrb	r2, [r2, #16]
 8007620:	f107 0108 	add.w	r1, r7, #8
 8007624:	4610      	mov	r0, r2
 8007626:	4798      	blx	r3
 8007628:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800762a:	e05d      	b.n	80076e8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800762c:	6839      	ldr	r1, [r7, #0]
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f000 fa7e 	bl	8007b30 <USBD_CtlError>
            err++;
 8007634:	7afb      	ldrb	r3, [r7, #11]
 8007636:	3301      	adds	r3, #1
 8007638:	72fb      	strb	r3, [r7, #11]
          break;
 800763a:	e055      	b.n	80076e8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007642:	691b      	ldr	r3, [r3, #16]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d00b      	beq.n	8007660 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800764e:	691b      	ldr	r3, [r3, #16]
 8007650:	687a      	ldr	r2, [r7, #4]
 8007652:	7c12      	ldrb	r2, [r2, #16]
 8007654:	f107 0108 	add.w	r1, r7, #8
 8007658:	4610      	mov	r0, r2
 800765a:	4798      	blx	r3
 800765c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800765e:	e043      	b.n	80076e8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007660:	6839      	ldr	r1, [r7, #0]
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f000 fa64 	bl	8007b30 <USBD_CtlError>
            err++;
 8007668:	7afb      	ldrb	r3, [r7, #11]
 800766a:	3301      	adds	r3, #1
 800766c:	72fb      	strb	r3, [r7, #11]
          break;
 800766e:	e03b      	b.n	80076e8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007676:	695b      	ldr	r3, [r3, #20]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d00b      	beq.n	8007694 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007682:	695b      	ldr	r3, [r3, #20]
 8007684:	687a      	ldr	r2, [r7, #4]
 8007686:	7c12      	ldrb	r2, [r2, #16]
 8007688:	f107 0108 	add.w	r1, r7, #8
 800768c:	4610      	mov	r0, r2
 800768e:	4798      	blx	r3
 8007690:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007692:	e029      	b.n	80076e8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007694:	6839      	ldr	r1, [r7, #0]
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f000 fa4a 	bl	8007b30 <USBD_CtlError>
            err++;
 800769c:	7afb      	ldrb	r3, [r7, #11]
 800769e:	3301      	adds	r3, #1
 80076a0:	72fb      	strb	r3, [r7, #11]
          break;
 80076a2:	e021      	b.n	80076e8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076aa:	699b      	ldr	r3, [r3, #24]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d00b      	beq.n	80076c8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076b6:	699b      	ldr	r3, [r3, #24]
 80076b8:	687a      	ldr	r2, [r7, #4]
 80076ba:	7c12      	ldrb	r2, [r2, #16]
 80076bc:	f107 0108 	add.w	r1, r7, #8
 80076c0:	4610      	mov	r0, r2
 80076c2:	4798      	blx	r3
 80076c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80076c6:	e00f      	b.n	80076e8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80076c8:	6839      	ldr	r1, [r7, #0]
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f000 fa30 	bl	8007b30 <USBD_CtlError>
            err++;
 80076d0:	7afb      	ldrb	r3, [r7, #11]
 80076d2:	3301      	adds	r3, #1
 80076d4:	72fb      	strb	r3, [r7, #11]
          break;
 80076d6:	e007      	b.n	80076e8 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80076d8:	6839      	ldr	r1, [r7, #0]
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f000 fa28 	bl	8007b30 <USBD_CtlError>
          err++;
 80076e0:	7afb      	ldrb	r3, [r7, #11]
 80076e2:	3301      	adds	r3, #1
 80076e4:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80076e6:	bf00      	nop
      }
      break;
 80076e8:	e037      	b.n	800775a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	7c1b      	ldrb	r3, [r3, #16]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d109      	bne.n	8007706 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076fa:	f107 0208 	add.w	r2, r7, #8
 80076fe:	4610      	mov	r0, r2
 8007700:	4798      	blx	r3
 8007702:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007704:	e029      	b.n	800775a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007706:	6839      	ldr	r1, [r7, #0]
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	f000 fa11 	bl	8007b30 <USBD_CtlError>
        err++;
 800770e:	7afb      	ldrb	r3, [r7, #11]
 8007710:	3301      	adds	r3, #1
 8007712:	72fb      	strb	r3, [r7, #11]
      break;
 8007714:	e021      	b.n	800775a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	7c1b      	ldrb	r3, [r3, #16]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d10d      	bne.n	800773a <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007726:	f107 0208 	add.w	r2, r7, #8
 800772a:	4610      	mov	r0, r2
 800772c:	4798      	blx	r3
 800772e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	3301      	adds	r3, #1
 8007734:	2207      	movs	r2, #7
 8007736:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007738:	e00f      	b.n	800775a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800773a:	6839      	ldr	r1, [r7, #0]
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	f000 f9f7 	bl	8007b30 <USBD_CtlError>
        err++;
 8007742:	7afb      	ldrb	r3, [r7, #11]
 8007744:	3301      	adds	r3, #1
 8007746:	72fb      	strb	r3, [r7, #11]
      break;
 8007748:	e007      	b.n	800775a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800774a:	6839      	ldr	r1, [r7, #0]
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	f000 f9ef 	bl	8007b30 <USBD_CtlError>
      err++;
 8007752:	7afb      	ldrb	r3, [r7, #11]
 8007754:	3301      	adds	r3, #1
 8007756:	72fb      	strb	r3, [r7, #11]
      break;
 8007758:	bf00      	nop
  }

  if (err != 0U)
 800775a:	7afb      	ldrb	r3, [r7, #11]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d11e      	bne.n	800779e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	88db      	ldrh	r3, [r3, #6]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d016      	beq.n	8007796 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8007768:	893b      	ldrh	r3, [r7, #8]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d00e      	beq.n	800778c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	88da      	ldrh	r2, [r3, #6]
 8007772:	893b      	ldrh	r3, [r7, #8]
 8007774:	4293      	cmp	r3, r2
 8007776:	bf28      	it	cs
 8007778:	4613      	movcs	r3, r2
 800777a:	b29b      	uxth	r3, r3
 800777c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800777e:	893b      	ldrh	r3, [r7, #8]
 8007780:	461a      	mov	r2, r3
 8007782:	68f9      	ldr	r1, [r7, #12]
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	f000 fa44 	bl	8007c12 <USBD_CtlSendData>
 800778a:	e009      	b.n	80077a0 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800778c:	6839      	ldr	r1, [r7, #0]
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f000 f9ce 	bl	8007b30 <USBD_CtlError>
 8007794:	e004      	b.n	80077a0 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f000 fa78 	bl	8007c8c <USBD_CtlSendStatus>
 800779c:	e000      	b.n	80077a0 <USBD_GetDescriptor+0x320>
    return;
 800779e:	bf00      	nop
  }
}
 80077a0:	3710      	adds	r7, #16
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd80      	pop	{r7, pc}
 80077a6:	bf00      	nop

080077a8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b084      	sub	sp, #16
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
 80077b0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	889b      	ldrh	r3, [r3, #4]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d131      	bne.n	800781e <USBD_SetAddress+0x76>
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	88db      	ldrh	r3, [r3, #6]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d12d      	bne.n	800781e <USBD_SetAddress+0x76>
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	885b      	ldrh	r3, [r3, #2]
 80077c6:	2b7f      	cmp	r3, #127	; 0x7f
 80077c8:	d829      	bhi.n	800781e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	885b      	ldrh	r3, [r3, #2]
 80077ce:	b2db      	uxtb	r3, r3
 80077d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077d4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077dc:	b2db      	uxtb	r3, r3
 80077de:	2b03      	cmp	r3, #3
 80077e0:	d104      	bne.n	80077ec <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80077e2:	6839      	ldr	r1, [r7, #0]
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f000 f9a3 	bl	8007b30 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077ea:	e01d      	b.n	8007828 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	7bfa      	ldrb	r2, [r7, #15]
 80077f0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80077f4:	7bfb      	ldrb	r3, [r7, #15]
 80077f6:	4619      	mov	r1, r3
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	f000 ff79 	bl	80086f0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f000 fa44 	bl	8007c8c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007804:	7bfb      	ldrb	r3, [r7, #15]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d004      	beq.n	8007814 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2202      	movs	r2, #2
 800780e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007812:	e009      	b.n	8007828 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2201      	movs	r2, #1
 8007818:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800781c:	e004      	b.n	8007828 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800781e:	6839      	ldr	r1, [r7, #0]
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	f000 f985 	bl	8007b30 <USBD_CtlError>
  }
}
 8007826:	bf00      	nop
 8007828:	bf00      	nop
 800782a:	3710      	adds	r7, #16
 800782c:	46bd      	mov	sp, r7
 800782e:	bd80      	pop	{r7, pc}

08007830 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b084      	sub	sp, #16
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
 8007838:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800783a:	2300      	movs	r3, #0
 800783c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	885b      	ldrh	r3, [r3, #2]
 8007842:	b2da      	uxtb	r2, r3
 8007844:	4b4c      	ldr	r3, [pc, #304]	; (8007978 <USBD_SetConfig+0x148>)
 8007846:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007848:	4b4b      	ldr	r3, [pc, #300]	; (8007978 <USBD_SetConfig+0x148>)
 800784a:	781b      	ldrb	r3, [r3, #0]
 800784c:	2b01      	cmp	r3, #1
 800784e:	d905      	bls.n	800785c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007850:	6839      	ldr	r1, [r7, #0]
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f000 f96c 	bl	8007b30 <USBD_CtlError>
    return USBD_FAIL;
 8007858:	2303      	movs	r3, #3
 800785a:	e088      	b.n	800796e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007862:	b2db      	uxtb	r3, r3
 8007864:	2b02      	cmp	r3, #2
 8007866:	d002      	beq.n	800786e <USBD_SetConfig+0x3e>
 8007868:	2b03      	cmp	r3, #3
 800786a:	d025      	beq.n	80078b8 <USBD_SetConfig+0x88>
 800786c:	e071      	b.n	8007952 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800786e:	4b42      	ldr	r3, [pc, #264]	; (8007978 <USBD_SetConfig+0x148>)
 8007870:	781b      	ldrb	r3, [r3, #0]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d01c      	beq.n	80078b0 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8007876:	4b40      	ldr	r3, [pc, #256]	; (8007978 <USBD_SetConfig+0x148>)
 8007878:	781b      	ldrb	r3, [r3, #0]
 800787a:	461a      	mov	r2, r3
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007880:	4b3d      	ldr	r3, [pc, #244]	; (8007978 <USBD_SetConfig+0x148>)
 8007882:	781b      	ldrb	r3, [r3, #0]
 8007884:	4619      	mov	r1, r3
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f7ff f91f 	bl	8006aca <USBD_SetClassConfig>
 800788c:	4603      	mov	r3, r0
 800788e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007890:	7bfb      	ldrb	r3, [r7, #15]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d004      	beq.n	80078a0 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8007896:	6839      	ldr	r1, [r7, #0]
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f000 f949 	bl	8007b30 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800789e:	e065      	b.n	800796c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f000 f9f3 	bl	8007c8c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2203      	movs	r2, #3
 80078aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80078ae:	e05d      	b.n	800796c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f000 f9eb 	bl	8007c8c <USBD_CtlSendStatus>
      break;
 80078b6:	e059      	b.n	800796c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80078b8:	4b2f      	ldr	r3, [pc, #188]	; (8007978 <USBD_SetConfig+0x148>)
 80078ba:	781b      	ldrb	r3, [r3, #0]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d112      	bne.n	80078e6 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2202      	movs	r2, #2
 80078c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80078c8:	4b2b      	ldr	r3, [pc, #172]	; (8007978 <USBD_SetConfig+0x148>)
 80078ca:	781b      	ldrb	r3, [r3, #0]
 80078cc:	461a      	mov	r2, r3
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80078d2:	4b29      	ldr	r3, [pc, #164]	; (8007978 <USBD_SetConfig+0x148>)
 80078d4:	781b      	ldrb	r3, [r3, #0]
 80078d6:	4619      	mov	r1, r3
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f7ff f912 	bl	8006b02 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f000 f9d4 	bl	8007c8c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80078e4:	e042      	b.n	800796c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80078e6:	4b24      	ldr	r3, [pc, #144]	; (8007978 <USBD_SetConfig+0x148>)
 80078e8:	781b      	ldrb	r3, [r3, #0]
 80078ea:	461a      	mov	r2, r3
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	685b      	ldr	r3, [r3, #4]
 80078f0:	429a      	cmp	r2, r3
 80078f2:	d02a      	beq.n	800794a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	685b      	ldr	r3, [r3, #4]
 80078f8:	b2db      	uxtb	r3, r3
 80078fa:	4619      	mov	r1, r3
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f7ff f900 	bl	8006b02 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007902:	4b1d      	ldr	r3, [pc, #116]	; (8007978 <USBD_SetConfig+0x148>)
 8007904:	781b      	ldrb	r3, [r3, #0]
 8007906:	461a      	mov	r2, r3
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800790c:	4b1a      	ldr	r3, [pc, #104]	; (8007978 <USBD_SetConfig+0x148>)
 800790e:	781b      	ldrb	r3, [r3, #0]
 8007910:	4619      	mov	r1, r3
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f7ff f8d9 	bl	8006aca <USBD_SetClassConfig>
 8007918:	4603      	mov	r3, r0
 800791a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800791c:	7bfb      	ldrb	r3, [r7, #15]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d00f      	beq.n	8007942 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8007922:	6839      	ldr	r1, [r7, #0]
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	f000 f903 	bl	8007b30 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	685b      	ldr	r3, [r3, #4]
 800792e:	b2db      	uxtb	r3, r3
 8007930:	4619      	mov	r1, r3
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f7ff f8e5 	bl	8006b02 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2202      	movs	r2, #2
 800793c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007940:	e014      	b.n	800796c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f000 f9a2 	bl	8007c8c <USBD_CtlSendStatus>
      break;
 8007948:	e010      	b.n	800796c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f000 f99e 	bl	8007c8c <USBD_CtlSendStatus>
      break;
 8007950:	e00c      	b.n	800796c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007952:	6839      	ldr	r1, [r7, #0]
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f000 f8eb 	bl	8007b30 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800795a:	4b07      	ldr	r3, [pc, #28]	; (8007978 <USBD_SetConfig+0x148>)
 800795c:	781b      	ldrb	r3, [r3, #0]
 800795e:	4619      	mov	r1, r3
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	f7ff f8ce 	bl	8006b02 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007966:	2303      	movs	r3, #3
 8007968:	73fb      	strb	r3, [r7, #15]
      break;
 800796a:	bf00      	nop
  }

  return ret;
 800796c:	7bfb      	ldrb	r3, [r7, #15]
}
 800796e:	4618      	mov	r0, r3
 8007970:	3710      	adds	r7, #16
 8007972:	46bd      	mov	sp, r7
 8007974:	bd80      	pop	{r7, pc}
 8007976:	bf00      	nop
 8007978:	20000194 	.word	0x20000194

0800797c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b082      	sub	sp, #8
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
 8007984:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	88db      	ldrh	r3, [r3, #6]
 800798a:	2b01      	cmp	r3, #1
 800798c:	d004      	beq.n	8007998 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800798e:	6839      	ldr	r1, [r7, #0]
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f000 f8cd 	bl	8007b30 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007996:	e023      	b.n	80079e0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800799e:	b2db      	uxtb	r3, r3
 80079a0:	2b02      	cmp	r3, #2
 80079a2:	dc02      	bgt.n	80079aa <USBD_GetConfig+0x2e>
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	dc03      	bgt.n	80079b0 <USBD_GetConfig+0x34>
 80079a8:	e015      	b.n	80079d6 <USBD_GetConfig+0x5a>
 80079aa:	2b03      	cmp	r3, #3
 80079ac:	d00b      	beq.n	80079c6 <USBD_GetConfig+0x4a>
 80079ae:	e012      	b.n	80079d6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2200      	movs	r2, #0
 80079b4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	3308      	adds	r3, #8
 80079ba:	2201      	movs	r2, #1
 80079bc:	4619      	mov	r1, r3
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f000 f927 	bl	8007c12 <USBD_CtlSendData>
        break;
 80079c4:	e00c      	b.n	80079e0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	3304      	adds	r3, #4
 80079ca:	2201      	movs	r2, #1
 80079cc:	4619      	mov	r1, r3
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f000 f91f 	bl	8007c12 <USBD_CtlSendData>
        break;
 80079d4:	e004      	b.n	80079e0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80079d6:	6839      	ldr	r1, [r7, #0]
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	f000 f8a9 	bl	8007b30 <USBD_CtlError>
        break;
 80079de:	bf00      	nop
}
 80079e0:	bf00      	nop
 80079e2:	3708      	adds	r7, #8
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bd80      	pop	{r7, pc}

080079e8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b082      	sub	sp, #8
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
 80079f0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079f8:	b2db      	uxtb	r3, r3
 80079fa:	3b01      	subs	r3, #1
 80079fc:	2b02      	cmp	r3, #2
 80079fe:	d81e      	bhi.n	8007a3e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	88db      	ldrh	r3, [r3, #6]
 8007a04:	2b02      	cmp	r3, #2
 8007a06:	d004      	beq.n	8007a12 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007a08:	6839      	ldr	r1, [r7, #0]
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f000 f890 	bl	8007b30 <USBD_CtlError>
        break;
 8007a10:	e01a      	b.n	8007a48 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2201      	movs	r2, #1
 8007a16:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d005      	beq.n	8007a2e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	68db      	ldr	r3, [r3, #12]
 8007a26:	f043 0202 	orr.w	r2, r3, #2
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	330c      	adds	r3, #12
 8007a32:	2202      	movs	r2, #2
 8007a34:	4619      	mov	r1, r3
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f000 f8eb 	bl	8007c12 <USBD_CtlSendData>
      break;
 8007a3c:	e004      	b.n	8007a48 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007a3e:	6839      	ldr	r1, [r7, #0]
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f000 f875 	bl	8007b30 <USBD_CtlError>
      break;
 8007a46:	bf00      	nop
  }
}
 8007a48:	bf00      	nop
 8007a4a:	3708      	adds	r7, #8
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd80      	pop	{r7, pc}

08007a50 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b082      	sub	sp, #8
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
 8007a58:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	885b      	ldrh	r3, [r3, #2]
 8007a5e:	2b01      	cmp	r3, #1
 8007a60:	d106      	bne.n	8007a70 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2201      	movs	r2, #1
 8007a66:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	f000 f90e 	bl	8007c8c <USBD_CtlSendStatus>
  }
}
 8007a70:	bf00      	nop
 8007a72:	3708      	adds	r7, #8
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bd80      	pop	{r7, pc}

08007a78 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b082      	sub	sp, #8
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
 8007a80:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a88:	b2db      	uxtb	r3, r3
 8007a8a:	3b01      	subs	r3, #1
 8007a8c:	2b02      	cmp	r3, #2
 8007a8e:	d80b      	bhi.n	8007aa8 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	885b      	ldrh	r3, [r3, #2]
 8007a94:	2b01      	cmp	r3, #1
 8007a96:	d10c      	bne.n	8007ab2 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007aa0:	6878      	ldr	r0, [r7, #4]
 8007aa2:	f000 f8f3 	bl	8007c8c <USBD_CtlSendStatus>
      }
      break;
 8007aa6:	e004      	b.n	8007ab2 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007aa8:	6839      	ldr	r1, [r7, #0]
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f000 f840 	bl	8007b30 <USBD_CtlError>
      break;
 8007ab0:	e000      	b.n	8007ab4 <USBD_ClrFeature+0x3c>
      break;
 8007ab2:	bf00      	nop
  }
}
 8007ab4:	bf00      	nop
 8007ab6:	3708      	adds	r7, #8
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bd80      	pop	{r7, pc}

08007abc <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b084      	sub	sp, #16
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
 8007ac4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	781a      	ldrb	r2, [r3, #0]
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	3301      	adds	r3, #1
 8007ad6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	781a      	ldrb	r2, [r3, #0]
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	3301      	adds	r3, #1
 8007ae4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007ae6:	68f8      	ldr	r0, [r7, #12]
 8007ae8:	f7ff fa92 	bl	8007010 <SWAPBYTE>
 8007aec:	4603      	mov	r3, r0
 8007aee:	461a      	mov	r2, r3
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	3301      	adds	r3, #1
 8007af8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	3301      	adds	r3, #1
 8007afe:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007b00:	68f8      	ldr	r0, [r7, #12]
 8007b02:	f7ff fa85 	bl	8007010 <SWAPBYTE>
 8007b06:	4603      	mov	r3, r0
 8007b08:	461a      	mov	r2, r3
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	3301      	adds	r3, #1
 8007b12:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	3301      	adds	r3, #1
 8007b18:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007b1a:	68f8      	ldr	r0, [r7, #12]
 8007b1c:	f7ff fa78 	bl	8007010 <SWAPBYTE>
 8007b20:	4603      	mov	r3, r0
 8007b22:	461a      	mov	r2, r3
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	80da      	strh	r2, [r3, #6]
}
 8007b28:	bf00      	nop
 8007b2a:	3710      	adds	r7, #16
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bd80      	pop	{r7, pc}

08007b30 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b082      	sub	sp, #8
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
 8007b38:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007b3a:	2180      	movs	r1, #128	; 0x80
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f000 fd3f 	bl	80085c0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007b42:	2100      	movs	r1, #0
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	f000 fd3b 	bl	80085c0 <USBD_LL_StallEP>
}
 8007b4a:	bf00      	nop
 8007b4c:	3708      	adds	r7, #8
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bd80      	pop	{r7, pc}

08007b52 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007b52:	b580      	push	{r7, lr}
 8007b54:	b086      	sub	sp, #24
 8007b56:	af00      	add	r7, sp, #0
 8007b58:	60f8      	str	r0, [r7, #12]
 8007b5a:	60b9      	str	r1, [r7, #8]
 8007b5c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007b5e:	2300      	movs	r3, #0
 8007b60:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d036      	beq.n	8007bd6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007b6c:	6938      	ldr	r0, [r7, #16]
 8007b6e:	f000 f836 	bl	8007bde <USBD_GetLen>
 8007b72:	4603      	mov	r3, r0
 8007b74:	3301      	adds	r3, #1
 8007b76:	b29b      	uxth	r3, r3
 8007b78:	005b      	lsls	r3, r3, #1
 8007b7a:	b29a      	uxth	r2, r3
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007b80:	7dfb      	ldrb	r3, [r7, #23]
 8007b82:	68ba      	ldr	r2, [r7, #8]
 8007b84:	4413      	add	r3, r2
 8007b86:	687a      	ldr	r2, [r7, #4]
 8007b88:	7812      	ldrb	r2, [r2, #0]
 8007b8a:	701a      	strb	r2, [r3, #0]
  idx++;
 8007b8c:	7dfb      	ldrb	r3, [r7, #23]
 8007b8e:	3301      	adds	r3, #1
 8007b90:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007b92:	7dfb      	ldrb	r3, [r7, #23]
 8007b94:	68ba      	ldr	r2, [r7, #8]
 8007b96:	4413      	add	r3, r2
 8007b98:	2203      	movs	r2, #3
 8007b9a:	701a      	strb	r2, [r3, #0]
  idx++;
 8007b9c:	7dfb      	ldrb	r3, [r7, #23]
 8007b9e:	3301      	adds	r3, #1
 8007ba0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007ba2:	e013      	b.n	8007bcc <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007ba4:	7dfb      	ldrb	r3, [r7, #23]
 8007ba6:	68ba      	ldr	r2, [r7, #8]
 8007ba8:	4413      	add	r3, r2
 8007baa:	693a      	ldr	r2, [r7, #16]
 8007bac:	7812      	ldrb	r2, [r2, #0]
 8007bae:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007bb0:	693b      	ldr	r3, [r7, #16]
 8007bb2:	3301      	adds	r3, #1
 8007bb4:	613b      	str	r3, [r7, #16]
    idx++;
 8007bb6:	7dfb      	ldrb	r3, [r7, #23]
 8007bb8:	3301      	adds	r3, #1
 8007bba:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007bbc:	7dfb      	ldrb	r3, [r7, #23]
 8007bbe:	68ba      	ldr	r2, [r7, #8]
 8007bc0:	4413      	add	r3, r2
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	701a      	strb	r2, [r3, #0]
    idx++;
 8007bc6:	7dfb      	ldrb	r3, [r7, #23]
 8007bc8:	3301      	adds	r3, #1
 8007bca:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007bcc:	693b      	ldr	r3, [r7, #16]
 8007bce:	781b      	ldrb	r3, [r3, #0]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d1e7      	bne.n	8007ba4 <USBD_GetString+0x52>
 8007bd4:	e000      	b.n	8007bd8 <USBD_GetString+0x86>
    return;
 8007bd6:	bf00      	nop
  }
}
 8007bd8:	3718      	adds	r7, #24
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	bd80      	pop	{r7, pc}

08007bde <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007bde:	b480      	push	{r7}
 8007be0:	b085      	sub	sp, #20
 8007be2:	af00      	add	r7, sp, #0
 8007be4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007be6:	2300      	movs	r3, #0
 8007be8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007bee:	e005      	b.n	8007bfc <USBD_GetLen+0x1e>
  {
    len++;
 8007bf0:	7bfb      	ldrb	r3, [r7, #15]
 8007bf2:	3301      	adds	r3, #1
 8007bf4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007bf6:	68bb      	ldr	r3, [r7, #8]
 8007bf8:	3301      	adds	r3, #1
 8007bfa:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007bfc:	68bb      	ldr	r3, [r7, #8]
 8007bfe:	781b      	ldrb	r3, [r3, #0]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d1f5      	bne.n	8007bf0 <USBD_GetLen+0x12>
  }

  return len;
 8007c04:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c06:	4618      	mov	r0, r3
 8007c08:	3714      	adds	r7, #20
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c10:	4770      	bx	lr

08007c12 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007c12:	b580      	push	{r7, lr}
 8007c14:	b084      	sub	sp, #16
 8007c16:	af00      	add	r7, sp, #0
 8007c18:	60f8      	str	r0, [r7, #12]
 8007c1a:	60b9      	str	r1, [r7, #8]
 8007c1c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	2202      	movs	r2, #2
 8007c22:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	687a      	ldr	r2, [r7, #4]
 8007c2a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	687a      	ldr	r2, [r7, #4]
 8007c30:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	68ba      	ldr	r2, [r7, #8]
 8007c36:	2100      	movs	r1, #0
 8007c38:	68f8      	ldr	r0, [r7, #12]
 8007c3a:	f000 fd8f 	bl	800875c <USBD_LL_Transmit>

  return USBD_OK;
 8007c3e:	2300      	movs	r3, #0
}
 8007c40:	4618      	mov	r0, r3
 8007c42:	3710      	adds	r7, #16
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bd80      	pop	{r7, pc}

08007c48 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b084      	sub	sp, #16
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	60f8      	str	r0, [r7, #12]
 8007c50:	60b9      	str	r1, [r7, #8]
 8007c52:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	68ba      	ldr	r2, [r7, #8]
 8007c58:	2100      	movs	r1, #0
 8007c5a:	68f8      	ldr	r0, [r7, #12]
 8007c5c:	f000 fd7e 	bl	800875c <USBD_LL_Transmit>

  return USBD_OK;
 8007c60:	2300      	movs	r3, #0
}
 8007c62:	4618      	mov	r0, r3
 8007c64:	3710      	adds	r7, #16
 8007c66:	46bd      	mov	sp, r7
 8007c68:	bd80      	pop	{r7, pc}

08007c6a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007c6a:	b580      	push	{r7, lr}
 8007c6c:	b084      	sub	sp, #16
 8007c6e:	af00      	add	r7, sp, #0
 8007c70:	60f8      	str	r0, [r7, #12]
 8007c72:	60b9      	str	r1, [r7, #8]
 8007c74:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	68ba      	ldr	r2, [r7, #8]
 8007c7a:	2100      	movs	r1, #0
 8007c7c:	68f8      	ldr	r0, [r7, #12]
 8007c7e:	f000 fda5 	bl	80087cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007c82:	2300      	movs	r3, #0
}
 8007c84:	4618      	mov	r0, r3
 8007c86:	3710      	adds	r7, #16
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bd80      	pop	{r7, pc}

08007c8c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b082      	sub	sp, #8
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2204      	movs	r2, #4
 8007c98:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	2100      	movs	r1, #0
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f000 fd5a 	bl	800875c <USBD_LL_Transmit>

  return USBD_OK;
 8007ca8:	2300      	movs	r3, #0
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	3708      	adds	r7, #8
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}

08007cb2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007cb2:	b580      	push	{r7, lr}
 8007cb4:	b082      	sub	sp, #8
 8007cb6:	af00      	add	r7, sp, #0
 8007cb8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2205      	movs	r2, #5
 8007cbe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	2100      	movs	r1, #0
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f000 fd7f 	bl	80087cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007cce:	2300      	movs	r3, #0
}
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	3708      	adds	r7, #8
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bd80      	pop	{r7, pc}

08007cd8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007cdc:	2200      	movs	r2, #0
 8007cde:	4912      	ldr	r1, [pc, #72]	; (8007d28 <MX_USB_DEVICE_Init+0x50>)
 8007ce0:	4812      	ldr	r0, [pc, #72]	; (8007d2c <MX_USB_DEVICE_Init+0x54>)
 8007ce2:	f7fe fe84 	bl	80069ee <USBD_Init>
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d001      	beq.n	8007cf0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007cec:	f7f8 fb06 	bl	80002fc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 8007cf0:	490f      	ldr	r1, [pc, #60]	; (8007d30 <MX_USB_DEVICE_Init+0x58>)
 8007cf2:	480e      	ldr	r0, [pc, #56]	; (8007d2c <MX_USB_DEVICE_Init+0x54>)
 8007cf4:	f7fe feab 	bl	8006a4e <USBD_RegisterClass>
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d001      	beq.n	8007d02 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007cfe:	f7f8 fafd 	bl	80002fc <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 8007d02:	490c      	ldr	r1, [pc, #48]	; (8007d34 <MX_USB_DEVICE_Init+0x5c>)
 8007d04:	4809      	ldr	r0, [pc, #36]	; (8007d2c <MX_USB_DEVICE_Init+0x54>)
 8007d06:	f7fd fa5b 	bl	80051c0 <USBD_MSC_RegisterStorage>
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d001      	beq.n	8007d14 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007d10:	f7f8 faf4 	bl	80002fc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007d14:	4805      	ldr	r0, [pc, #20]	; (8007d2c <MX_USB_DEVICE_Init+0x54>)
 8007d16:	f7fe fec1 	bl	8006a9c <USBD_Start>
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d001      	beq.n	8007d24 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007d20:	f7f8 faec 	bl	80002fc <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007d24:	bf00      	nop
 8007d26:	bd80      	pop	{r7, pc}
 8007d28:	200000f4 	.word	0x200000f4
 8007d2c:	20000198 	.word	0x20000198
 8007d30:	2000000c 	.word	0x2000000c
 8007d34:	20000154 	.word	0x20000154

08007d38 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d38:	b480      	push	{r7}
 8007d3a:	b083      	sub	sp, #12
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	4603      	mov	r3, r0
 8007d40:	6039      	str	r1, [r7, #0]
 8007d42:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	2212      	movs	r2, #18
 8007d48:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007d4a:	4b03      	ldr	r3, [pc, #12]	; (8007d58 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	370c      	adds	r7, #12
 8007d50:	46bd      	mov	sp, r7
 8007d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d56:	4770      	bx	lr
 8007d58:	20000114 	.word	0x20000114

08007d5c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b083      	sub	sp, #12
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	4603      	mov	r3, r0
 8007d64:	6039      	str	r1, [r7, #0]
 8007d66:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	2204      	movs	r2, #4
 8007d6c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007d6e:	4b03      	ldr	r3, [pc, #12]	; (8007d7c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007d70:	4618      	mov	r0, r3
 8007d72:	370c      	adds	r7, #12
 8007d74:	46bd      	mov	sp, r7
 8007d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7a:	4770      	bx	lr
 8007d7c:	20000134 	.word	0x20000134

08007d80 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b082      	sub	sp, #8
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	4603      	mov	r3, r0
 8007d88:	6039      	str	r1, [r7, #0]
 8007d8a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007d8c:	79fb      	ldrb	r3, [r7, #7]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d105      	bne.n	8007d9e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007d92:	683a      	ldr	r2, [r7, #0]
 8007d94:	4907      	ldr	r1, [pc, #28]	; (8007db4 <USBD_FS_ProductStrDescriptor+0x34>)
 8007d96:	4808      	ldr	r0, [pc, #32]	; (8007db8 <USBD_FS_ProductStrDescriptor+0x38>)
 8007d98:	f7ff fedb 	bl	8007b52 <USBD_GetString>
 8007d9c:	e004      	b.n	8007da8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007d9e:	683a      	ldr	r2, [r7, #0]
 8007da0:	4904      	ldr	r1, [pc, #16]	; (8007db4 <USBD_FS_ProductStrDescriptor+0x34>)
 8007da2:	4805      	ldr	r0, [pc, #20]	; (8007db8 <USBD_FS_ProductStrDescriptor+0x38>)
 8007da4:	f7ff fed5 	bl	8007b52 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007da8:	4b02      	ldr	r3, [pc, #8]	; (8007db4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007daa:	4618      	mov	r0, r3
 8007dac:	3708      	adds	r7, #8
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bd80      	pop	{r7, pc}
 8007db2:	bf00      	nop
 8007db4:	20000468 	.word	0x20000468
 8007db8:	080089c8 	.word	0x080089c8

08007dbc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b082      	sub	sp, #8
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	6039      	str	r1, [r7, #0]
 8007dc6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007dc8:	683a      	ldr	r2, [r7, #0]
 8007dca:	4904      	ldr	r1, [pc, #16]	; (8007ddc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007dcc:	4804      	ldr	r0, [pc, #16]	; (8007de0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007dce:	f7ff fec0 	bl	8007b52 <USBD_GetString>
  return USBD_StrDesc;
 8007dd2:	4b02      	ldr	r3, [pc, #8]	; (8007ddc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	3708      	adds	r7, #8
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	bd80      	pop	{r7, pc}
 8007ddc:	20000468 	.word	0x20000468
 8007de0:	080089dc 	.word	0x080089dc

08007de4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b082      	sub	sp, #8
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	4603      	mov	r3, r0
 8007dec:	6039      	str	r1, [r7, #0]
 8007dee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	221a      	movs	r2, #26
 8007df4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007df6:	f000 f855 	bl	8007ea4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007dfa:	4b02      	ldr	r3, [pc, #8]	; (8007e04 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	3708      	adds	r7, #8
 8007e00:	46bd      	mov	sp, r7
 8007e02:	bd80      	pop	{r7, pc}
 8007e04:	20000138 	.word	0x20000138

08007e08 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b082      	sub	sp, #8
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	4603      	mov	r3, r0
 8007e10:	6039      	str	r1, [r7, #0]
 8007e12:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007e14:	79fb      	ldrb	r3, [r7, #7]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d105      	bne.n	8007e26 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007e1a:	683a      	ldr	r2, [r7, #0]
 8007e1c:	4907      	ldr	r1, [pc, #28]	; (8007e3c <USBD_FS_ConfigStrDescriptor+0x34>)
 8007e1e:	4808      	ldr	r0, [pc, #32]	; (8007e40 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007e20:	f7ff fe97 	bl	8007b52 <USBD_GetString>
 8007e24:	e004      	b.n	8007e30 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007e26:	683a      	ldr	r2, [r7, #0]
 8007e28:	4904      	ldr	r1, [pc, #16]	; (8007e3c <USBD_FS_ConfigStrDescriptor+0x34>)
 8007e2a:	4805      	ldr	r0, [pc, #20]	; (8007e40 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007e2c:	f7ff fe91 	bl	8007b52 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007e30:	4b02      	ldr	r3, [pc, #8]	; (8007e3c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007e32:	4618      	mov	r0, r3
 8007e34:	3708      	adds	r7, #8
 8007e36:	46bd      	mov	sp, r7
 8007e38:	bd80      	pop	{r7, pc}
 8007e3a:	bf00      	nop
 8007e3c:	20000468 	.word	0x20000468
 8007e40:	080089f0 	.word	0x080089f0

08007e44 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b082      	sub	sp, #8
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	6039      	str	r1, [r7, #0]
 8007e4e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007e50:	79fb      	ldrb	r3, [r7, #7]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d105      	bne.n	8007e62 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007e56:	683a      	ldr	r2, [r7, #0]
 8007e58:	4907      	ldr	r1, [pc, #28]	; (8007e78 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007e5a:	4808      	ldr	r0, [pc, #32]	; (8007e7c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007e5c:	f7ff fe79 	bl	8007b52 <USBD_GetString>
 8007e60:	e004      	b.n	8007e6c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007e62:	683a      	ldr	r2, [r7, #0]
 8007e64:	4904      	ldr	r1, [pc, #16]	; (8007e78 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007e66:	4805      	ldr	r0, [pc, #20]	; (8007e7c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007e68:	f7ff fe73 	bl	8007b52 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007e6c:	4b02      	ldr	r3, [pc, #8]	; (8007e78 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007e6e:	4618      	mov	r0, r3
 8007e70:	3708      	adds	r7, #8
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bd80      	pop	{r7, pc}
 8007e76:	bf00      	nop
 8007e78:	20000468 	.word	0x20000468
 8007e7c:	080089fc 	.word	0x080089fc

08007e80 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e80:	b480      	push	{r7}
 8007e82:	b083      	sub	sp, #12
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	4603      	mov	r3, r0
 8007e88:	6039      	str	r1, [r7, #0]
 8007e8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	220c      	movs	r2, #12
 8007e90:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8007e92:	4b03      	ldr	r3, [pc, #12]	; (8007ea0 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8007e94:	4618      	mov	r0, r3
 8007e96:	370c      	adds	r7, #12
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9e:	4770      	bx	lr
 8007ea0:	20000128 	.word	0x20000128

08007ea4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b084      	sub	sp, #16
 8007ea8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007eaa:	4b0f      	ldr	r3, [pc, #60]	; (8007ee8 <Get_SerialNum+0x44>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007eb0:	4b0e      	ldr	r3, [pc, #56]	; (8007eec <Get_SerialNum+0x48>)
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007eb6:	4b0e      	ldr	r3, [pc, #56]	; (8007ef0 <Get_SerialNum+0x4c>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007ebc:	68fa      	ldr	r2, [r7, #12]
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	4413      	add	r3, r2
 8007ec2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d009      	beq.n	8007ede <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007eca:	2208      	movs	r2, #8
 8007ecc:	4909      	ldr	r1, [pc, #36]	; (8007ef4 <Get_SerialNum+0x50>)
 8007ece:	68f8      	ldr	r0, [r7, #12]
 8007ed0:	f000 f814 	bl	8007efc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007ed4:	2204      	movs	r2, #4
 8007ed6:	4908      	ldr	r1, [pc, #32]	; (8007ef8 <Get_SerialNum+0x54>)
 8007ed8:	68b8      	ldr	r0, [r7, #8]
 8007eda:	f000 f80f 	bl	8007efc <IntToUnicode>
  }
}
 8007ede:	bf00      	nop
 8007ee0:	3710      	adds	r7, #16
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bd80      	pop	{r7, pc}
 8007ee6:	bf00      	nop
 8007ee8:	1fff7590 	.word	0x1fff7590
 8007eec:	1fff7594 	.word	0x1fff7594
 8007ef0:	1fff7598 	.word	0x1fff7598
 8007ef4:	2000013a 	.word	0x2000013a
 8007ef8:	2000014a 	.word	0x2000014a

08007efc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007efc:	b480      	push	{r7}
 8007efe:	b087      	sub	sp, #28
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	60f8      	str	r0, [r7, #12]
 8007f04:	60b9      	str	r1, [r7, #8]
 8007f06:	4613      	mov	r3, r2
 8007f08:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007f0e:	2300      	movs	r3, #0
 8007f10:	75fb      	strb	r3, [r7, #23]
 8007f12:	e027      	b.n	8007f64 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	0f1b      	lsrs	r3, r3, #28
 8007f18:	2b09      	cmp	r3, #9
 8007f1a:	d80b      	bhi.n	8007f34 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	0f1b      	lsrs	r3, r3, #28
 8007f20:	b2da      	uxtb	r2, r3
 8007f22:	7dfb      	ldrb	r3, [r7, #23]
 8007f24:	005b      	lsls	r3, r3, #1
 8007f26:	4619      	mov	r1, r3
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	440b      	add	r3, r1
 8007f2c:	3230      	adds	r2, #48	; 0x30
 8007f2e:	b2d2      	uxtb	r2, r2
 8007f30:	701a      	strb	r2, [r3, #0]
 8007f32:	e00a      	b.n	8007f4a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	0f1b      	lsrs	r3, r3, #28
 8007f38:	b2da      	uxtb	r2, r3
 8007f3a:	7dfb      	ldrb	r3, [r7, #23]
 8007f3c:	005b      	lsls	r3, r3, #1
 8007f3e:	4619      	mov	r1, r3
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	440b      	add	r3, r1
 8007f44:	3237      	adds	r2, #55	; 0x37
 8007f46:	b2d2      	uxtb	r2, r2
 8007f48:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	011b      	lsls	r3, r3, #4
 8007f4e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007f50:	7dfb      	ldrb	r3, [r7, #23]
 8007f52:	005b      	lsls	r3, r3, #1
 8007f54:	3301      	adds	r3, #1
 8007f56:	68ba      	ldr	r2, [r7, #8]
 8007f58:	4413      	add	r3, r2
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007f5e:	7dfb      	ldrb	r3, [r7, #23]
 8007f60:	3301      	adds	r3, #1
 8007f62:	75fb      	strb	r3, [r7, #23]
 8007f64:	7dfa      	ldrb	r2, [r7, #23]
 8007f66:	79fb      	ldrb	r3, [r7, #7]
 8007f68:	429a      	cmp	r2, r3
 8007f6a:	d3d3      	bcc.n	8007f14 <IntToUnicode+0x18>
  }
}
 8007f6c:	bf00      	nop
 8007f6e:	bf00      	nop
 8007f70:	371c      	adds	r7, #28
 8007f72:	46bd      	mov	sp, r7
 8007f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f78:	4770      	bx	lr

08007f7a <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 8007f7a:	b480      	push	{r7}
 8007f7c:	b083      	sub	sp, #12
 8007f7e:	af00      	add	r7, sp, #0
 8007f80:	4603      	mov	r3, r0
 8007f82:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 8007f84:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8007f86:	4618      	mov	r0, r3
 8007f88:	370c      	adds	r7, #12
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f90:	4770      	bx	lr

08007f92 <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 8007f92:	b480      	push	{r7}
 8007f94:	b085      	sub	sp, #20
 8007f96:	af00      	add	r7, sp, #0
 8007f98:	4603      	mov	r3, r0
 8007f9a:	60b9      	str	r1, [r7, #8]
 8007f9c:	607a      	str	r2, [r7, #4]
 8007f9e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  *block_num  = STORAGE_BLK_NBR;
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	22c8      	movs	r2, #200	; 0xc8
 8007fa4:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007fac:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 8007fae:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	3714      	adds	r7, #20
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fba:	4770      	bx	lr

08007fbc <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	b083      	sub	sp, #12
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007fc6:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007fc8:	4618      	mov	r0, r3
 8007fca:	370c      	adds	r7, #12
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd2:	4770      	bx	lr

08007fd4 <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 8007fd4:	b480      	push	{r7}
 8007fd6:	b083      	sub	sp, #12
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	4603      	mov	r3, r0
 8007fdc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8007fde:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	370c      	adds	r7, #12
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fea:	4770      	bx	lr

08007fec <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b084      	sub	sp, #16
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	60b9      	str	r1, [r7, #8]
 8007ff4:	607a      	str	r2, [r7, #4]
 8007ff6:	461a      	mov	r2, r3
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	73fb      	strb	r3, [r7, #15]
 8007ffc:	4613      	mov	r3, r2
 8007ffe:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */

	memcpy(buf, &buffer[blk_addr*STORAGE_BLK_SIZ], blk_len*STORAGE_BLK_SIZ);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	025b      	lsls	r3, r3, #9
 8008004:	4a06      	ldr	r2, [pc, #24]	; (8008020 <STORAGE_Read_FS+0x34>)
 8008006:	1899      	adds	r1, r3, r2
 8008008:	89bb      	ldrh	r3, [r7, #12]
 800800a:	025b      	lsls	r3, r3, #9
 800800c:	461a      	mov	r2, r3
 800800e:	68b8      	ldr	r0, [r7, #8]
 8008010:	f000 fcb8 	bl	8008984 <memcpy>
  return (USBD_OK);
 8008014:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008016:	4618      	mov	r0, r3
 8008018:	3710      	adds	r7, #16
 800801a:	46bd      	mov	sp, r7
 800801c:	bd80      	pop	{r7, pc}
 800801e:	bf00      	nop
 8008020:	20000668 	.word	0x20000668

08008024 <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b084      	sub	sp, #16
 8008028:	af00      	add	r7, sp, #0
 800802a:	60b9      	str	r1, [r7, #8]
 800802c:	607a      	str	r2, [r7, #4]
 800802e:	461a      	mov	r2, r3
 8008030:	4603      	mov	r3, r0
 8008032:	73fb      	strb	r3, [r7, #15]
 8008034:	4613      	mov	r3, r2
 8008036:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
	  memcpy(&buffer[blk_addr*STORAGE_BLK_SIZ], buf, blk_len*STORAGE_BLK_SIZ);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	025b      	lsls	r3, r3, #9
 800803c:	4a06      	ldr	r2, [pc, #24]	; (8008058 <STORAGE_Write_FS+0x34>)
 800803e:	1898      	adds	r0, r3, r2
 8008040:	89bb      	ldrh	r3, [r7, #12]
 8008042:	025b      	lsls	r3, r3, #9
 8008044:	461a      	mov	r2, r3
 8008046:	68b9      	ldr	r1, [r7, #8]
 8008048:	f000 fc9c 	bl	8008984 <memcpy>
  return (USBD_OK);
 800804c:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 800804e:	4618      	mov	r0, r3
 8008050:	3710      	adds	r7, #16
 8008052:	46bd      	mov	sp, r7
 8008054:	bd80      	pop	{r7, pc}
 8008056:	bf00      	nop
 8008058:	20000668 	.word	0x20000668

0800805c <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 800805c:	b480      	push	{r7}
 800805e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 8008060:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8008062:	4618      	mov	r0, r3
 8008064:	46bd      	mov	sp, r7
 8008066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806a:	4770      	bx	lr

0800806c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b0b0      	sub	sp, #192	; 0xc0
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008074:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8008078:	2200      	movs	r2, #0
 800807a:	601a      	str	r2, [r3, #0]
 800807c:	605a      	str	r2, [r3, #4]
 800807e:	609a      	str	r2, [r3, #8]
 8008080:	60da      	str	r2, [r3, #12]
 8008082:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008084:	f107 0318 	add.w	r3, r7, #24
 8008088:	2294      	movs	r2, #148	; 0x94
 800808a:	2100      	movs	r1, #0
 800808c:	4618      	mov	r0, r3
 800808e:	f000 fc87 	bl	80089a0 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800809a:	d163      	bne.n	8008164 <HAL_PCD_MspInit+0xf8>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800809c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80080a0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80080a2:	2300      	movs	r3, #0
 80080a4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80080a8:	f107 0318 	add.w	r3, r7, #24
 80080ac:	4618      	mov	r0, r3
 80080ae:	f7fa fe67 	bl	8002d80 <HAL_RCCEx_PeriphCLKConfig>
 80080b2:	4603      	mov	r3, r0
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d001      	beq.n	80080bc <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80080b8:	f7f8 f920 	bl	80002fc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80080bc:	4b2b      	ldr	r3, [pc, #172]	; (800816c <HAL_PCD_MspInit+0x100>)
 80080be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080c0:	4a2a      	ldr	r2, [pc, #168]	; (800816c <HAL_PCD_MspInit+0x100>)
 80080c2:	f043 0301 	orr.w	r3, r3, #1
 80080c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80080c8:	4b28      	ldr	r3, [pc, #160]	; (800816c <HAL_PCD_MspInit+0x100>)
 80080ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080cc:	f003 0301 	and.w	r3, r3, #1
 80080d0:	617b      	str	r3, [r7, #20]
 80080d2:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80080d4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80080d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80080dc:	2302      	movs	r3, #2
 80080de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080e2:	2300      	movs	r3, #0
 80080e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80080e8:	2303      	movs	r3, #3
 80080ea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80080ee:	230a      	movs	r3, #10
 80080f0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80080f4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80080f8:	4619      	mov	r1, r3
 80080fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80080fe:	f7f8 fb41 	bl	8000784 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008102:	4b1a      	ldr	r3, [pc, #104]	; (800816c <HAL_PCD_MspInit+0x100>)
 8008104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008106:	4a19      	ldr	r2, [pc, #100]	; (800816c <HAL_PCD_MspInit+0x100>)
 8008108:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800810c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800810e:	4b17      	ldr	r3, [pc, #92]	; (800816c <HAL_PCD_MspInit+0x100>)
 8008110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008112:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008116:	613b      	str	r3, [r7, #16]
 8008118:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800811a:	4b14      	ldr	r3, [pc, #80]	; (800816c <HAL_PCD_MspInit+0x100>)
 800811c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800811e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008122:	2b00      	cmp	r3, #0
 8008124:	d114      	bne.n	8008150 <HAL_PCD_MspInit+0xe4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008126:	4b11      	ldr	r3, [pc, #68]	; (800816c <HAL_PCD_MspInit+0x100>)
 8008128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800812a:	4a10      	ldr	r2, [pc, #64]	; (800816c <HAL_PCD_MspInit+0x100>)
 800812c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008130:	6593      	str	r3, [r2, #88]	; 0x58
 8008132:	4b0e      	ldr	r3, [pc, #56]	; (800816c <HAL_PCD_MspInit+0x100>)
 8008134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008136:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800813a:	60fb      	str	r3, [r7, #12]
 800813c:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 800813e:	f7f9 ff63 	bl	8002008 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8008142:	4b0a      	ldr	r3, [pc, #40]	; (800816c <HAL_PCD_MspInit+0x100>)
 8008144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008146:	4a09      	ldr	r2, [pc, #36]	; (800816c <HAL_PCD_MspInit+0x100>)
 8008148:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800814c:	6593      	str	r3, [r2, #88]	; 0x58
 800814e:	e001      	b.n	8008154 <HAL_PCD_MspInit+0xe8>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8008150:	f7f9 ff5a 	bl	8002008 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008154:	2200      	movs	r2, #0
 8008156:	2100      	movs	r1, #0
 8008158:	2043      	movs	r0, #67	; 0x43
 800815a:	f7f8 fadc 	bl	8000716 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800815e:	2043      	movs	r0, #67	; 0x43
 8008160:	f7f8 faf5 	bl	800074e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008164:	bf00      	nop
 8008166:	37c0      	adds	r7, #192	; 0xc0
 8008168:	46bd      	mov	sp, r7
 800816a:	bd80      	pop	{r7, pc}
 800816c:	40021000 	.word	0x40021000

08008170 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b082      	sub	sp, #8
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008184:	4619      	mov	r1, r3
 8008186:	4610      	mov	r0, r2
 8008188:	f7fe fcd3 	bl	8006b32 <USBD_LL_SetupStage>
}
 800818c:	bf00      	nop
 800818e:	3708      	adds	r7, #8
 8008190:	46bd      	mov	sp, r7
 8008192:	bd80      	pop	{r7, pc}

08008194 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b082      	sub	sp, #8
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
 800819c:	460b      	mov	r3, r1
 800819e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80081a6:	78fa      	ldrb	r2, [r7, #3]
 80081a8:	6879      	ldr	r1, [r7, #4]
 80081aa:	4613      	mov	r3, r2
 80081ac:	00db      	lsls	r3, r3, #3
 80081ae:	4413      	add	r3, r2
 80081b0:	009b      	lsls	r3, r3, #2
 80081b2:	440b      	add	r3, r1
 80081b4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80081b8:	681a      	ldr	r2, [r3, #0]
 80081ba:	78fb      	ldrb	r3, [r7, #3]
 80081bc:	4619      	mov	r1, r3
 80081be:	f7fe fd0d 	bl	8006bdc <USBD_LL_DataOutStage>
}
 80081c2:	bf00      	nop
 80081c4:	3708      	adds	r7, #8
 80081c6:	46bd      	mov	sp, r7
 80081c8:	bd80      	pop	{r7, pc}

080081ca <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081ca:	b580      	push	{r7, lr}
 80081cc:	b082      	sub	sp, #8
 80081ce:	af00      	add	r7, sp, #0
 80081d0:	6078      	str	r0, [r7, #4]
 80081d2:	460b      	mov	r3, r1
 80081d4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80081dc:	78fa      	ldrb	r2, [r7, #3]
 80081de:	6879      	ldr	r1, [r7, #4]
 80081e0:	4613      	mov	r3, r2
 80081e2:	00db      	lsls	r3, r3, #3
 80081e4:	4413      	add	r3, r2
 80081e6:	009b      	lsls	r3, r3, #2
 80081e8:	440b      	add	r3, r1
 80081ea:	334c      	adds	r3, #76	; 0x4c
 80081ec:	681a      	ldr	r2, [r3, #0]
 80081ee:	78fb      	ldrb	r3, [r7, #3]
 80081f0:	4619      	mov	r1, r3
 80081f2:	f7fe fd56 	bl	8006ca2 <USBD_LL_DataInStage>
}
 80081f6:	bf00      	nop
 80081f8:	3708      	adds	r7, #8
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}

080081fe <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081fe:	b580      	push	{r7, lr}
 8008200:	b082      	sub	sp, #8
 8008202:	af00      	add	r7, sp, #0
 8008204:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800820c:	4618      	mov	r0, r3
 800820e:	f7fe fe6a 	bl	8006ee6 <USBD_LL_SOF>
}
 8008212:	bf00      	nop
 8008214:	3708      	adds	r7, #8
 8008216:	46bd      	mov	sp, r7
 8008218:	bd80      	pop	{r7, pc}

0800821a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800821a:	b580      	push	{r7, lr}
 800821c:	b084      	sub	sp, #16
 800821e:	af00      	add	r7, sp, #0
 8008220:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008222:	2301      	movs	r3, #1
 8008224:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	68db      	ldr	r3, [r3, #12]
 800822a:	2b02      	cmp	r3, #2
 800822c:	d001      	beq.n	8008232 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800822e:	f7f8 f865 	bl	80002fc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008238:	7bfa      	ldrb	r2, [r7, #15]
 800823a:	4611      	mov	r1, r2
 800823c:	4618      	mov	r0, r3
 800823e:	f7fe fe14 	bl	8006e6a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008248:	4618      	mov	r0, r3
 800824a:	f7fe fdc0 	bl	8006dce <USBD_LL_Reset>
}
 800824e:	bf00      	nop
 8008250:	3710      	adds	r7, #16
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}
	...

08008258 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b082      	sub	sp, #8
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	687a      	ldr	r2, [r7, #4]
 800826c:	6812      	ldr	r2, [r2, #0]
 800826e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008272:	f043 0301 	orr.w	r3, r3, #1
 8008276:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800827e:	4618      	mov	r0, r3
 8008280:	f7fe fe03 	bl	8006e8a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	6a1b      	ldr	r3, [r3, #32]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d005      	beq.n	8008298 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800828c:	4b04      	ldr	r3, [pc, #16]	; (80082a0 <HAL_PCD_SuspendCallback+0x48>)
 800828e:	691b      	ldr	r3, [r3, #16]
 8008290:	4a03      	ldr	r2, [pc, #12]	; (80082a0 <HAL_PCD_SuspendCallback+0x48>)
 8008292:	f043 0306 	orr.w	r3, r3, #6
 8008296:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008298:	bf00      	nop
 800829a:	3708      	adds	r7, #8
 800829c:	46bd      	mov	sp, r7
 800829e:	bd80      	pop	{r7, pc}
 80082a0:	e000ed00 	.word	0xe000ed00

080082a4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b082      	sub	sp, #8
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	687a      	ldr	r2, [r7, #4]
 80082b8:	6812      	ldr	r2, [r2, #0]
 80082ba:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80082be:	f023 0301 	bic.w	r3, r3, #1
 80082c2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6a1b      	ldr	r3, [r3, #32]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d007      	beq.n	80082dc <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80082cc:	4b08      	ldr	r3, [pc, #32]	; (80082f0 <HAL_PCD_ResumeCallback+0x4c>)
 80082ce:	691b      	ldr	r3, [r3, #16]
 80082d0:	4a07      	ldr	r2, [pc, #28]	; (80082f0 <HAL_PCD_ResumeCallback+0x4c>)
 80082d2:	f023 0306 	bic.w	r3, r3, #6
 80082d6:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80082d8:	f000 fb2a 	bl	8008930 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80082e2:	4618      	mov	r0, r3
 80082e4:	f7fe fde7 	bl	8006eb6 <USBD_LL_Resume>
}
 80082e8:	bf00      	nop
 80082ea:	3708      	adds	r7, #8
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}
 80082f0:	e000ed00 	.word	0xe000ed00

080082f4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b082      	sub	sp, #8
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
 80082fc:	460b      	mov	r3, r1
 80082fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008306:	78fa      	ldrb	r2, [r7, #3]
 8008308:	4611      	mov	r1, r2
 800830a:	4618      	mov	r0, r3
 800830c:	f7fe fe33 	bl	8006f76 <USBD_LL_IsoOUTIncomplete>
}
 8008310:	bf00      	nop
 8008312:	3708      	adds	r7, #8
 8008314:	46bd      	mov	sp, r7
 8008316:	bd80      	pop	{r7, pc}

08008318 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b082      	sub	sp, #8
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
 8008320:	460b      	mov	r3, r1
 8008322:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800832a:	78fa      	ldrb	r2, [r7, #3]
 800832c:	4611      	mov	r1, r2
 800832e:	4618      	mov	r0, r3
 8008330:	f7fe fdfb 	bl	8006f2a <USBD_LL_IsoINIncomplete>
}
 8008334:	bf00      	nop
 8008336:	3708      	adds	r7, #8
 8008338:	46bd      	mov	sp, r7
 800833a:	bd80      	pop	{r7, pc}

0800833c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b082      	sub	sp, #8
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800834a:	4618      	mov	r0, r3
 800834c:	f7fe fe39 	bl	8006fc2 <USBD_LL_DevConnected>
}
 8008350:	bf00      	nop
 8008352:	3708      	adds	r7, #8
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}

08008358 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b082      	sub	sp, #8
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008366:	4618      	mov	r0, r3
 8008368:	f7fe fe36 	bl	8006fd8 <USBD_LL_DevDisconnected>
}
 800836c:	bf00      	nop
 800836e:	3708      	adds	r7, #8
 8008370:	46bd      	mov	sp, r7
 8008372:	bd80      	pop	{r7, pc}

08008374 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b082      	sub	sp, #8
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	781b      	ldrb	r3, [r3, #0]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d139      	bne.n	80083f8 <USBD_LL_Init+0x84>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008384:	4a1f      	ldr	r2, [pc, #124]	; (8008404 <USBD_LL_Init+0x90>)
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	4a1d      	ldr	r2, [pc, #116]	; (8008404 <USBD_LL_Init+0x90>)
 8008390:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008394:	4b1b      	ldr	r3, [pc, #108]	; (8008404 <USBD_LL_Init+0x90>)
 8008396:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800839a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800839c:	4b19      	ldr	r3, [pc, #100]	; (8008404 <USBD_LL_Init+0x90>)
 800839e:	2206      	movs	r2, #6
 80083a0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80083a2:	4b18      	ldr	r3, [pc, #96]	; (8008404 <USBD_LL_Init+0x90>)
 80083a4:	2202      	movs	r2, #2
 80083a6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80083a8:	4b16      	ldr	r3, [pc, #88]	; (8008404 <USBD_LL_Init+0x90>)
 80083aa:	2200      	movs	r2, #0
 80083ac:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80083ae:	4b15      	ldr	r3, [pc, #84]	; (8008404 <USBD_LL_Init+0x90>)
 80083b0:	2200      	movs	r2, #0
 80083b2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80083b4:	4b13      	ldr	r3, [pc, #76]	; (8008404 <USBD_LL_Init+0x90>)
 80083b6:	2200      	movs	r2, #0
 80083b8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80083ba:	4b12      	ldr	r3, [pc, #72]	; (8008404 <USBD_LL_Init+0x90>)
 80083bc:	2200      	movs	r2, #0
 80083be:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80083c0:	4b10      	ldr	r3, [pc, #64]	; (8008404 <USBD_LL_Init+0x90>)
 80083c2:	2200      	movs	r2, #0
 80083c4:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80083c6:	4b0f      	ldr	r3, [pc, #60]	; (8008404 <USBD_LL_Init+0x90>)
 80083c8:	2200      	movs	r2, #0
 80083ca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80083cc:	480d      	ldr	r0, [pc, #52]	; (8008404 <USBD_LL_Init+0x90>)
 80083ce:	f7f8 fb6b 	bl	8000aa8 <HAL_PCD_Init>
 80083d2:	4603      	mov	r3, r0
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d001      	beq.n	80083dc <USBD_LL_Init+0x68>
  {
    Error_Handler( );
 80083d8:	f7f7 ff90 	bl	80002fc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80083dc:	2180      	movs	r1, #128	; 0x80
 80083de:	4809      	ldr	r0, [pc, #36]	; (8008404 <USBD_LL_Init+0x90>)
 80083e0:	f7f9 fd19 	bl	8001e16 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80083e4:	2240      	movs	r2, #64	; 0x40
 80083e6:	2100      	movs	r1, #0
 80083e8:	4806      	ldr	r0, [pc, #24]	; (8008404 <USBD_LL_Init+0x90>)
 80083ea:	f7f9 fccd 	bl	8001d88 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80083ee:	2280      	movs	r2, #128	; 0x80
 80083f0:	2101      	movs	r1, #1
 80083f2:	4804      	ldr	r0, [pc, #16]	; (8008404 <USBD_LL_Init+0x90>)
 80083f4:	f7f9 fcc8 	bl	8001d88 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80083f8:	2300      	movs	r3, #0
}
 80083fa:	4618      	mov	r0, r3
 80083fc:	3708      	adds	r7, #8
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd80      	pop	{r7, pc}
 8008402:	bf00      	nop
 8008404:	20019668 	.word	0x20019668

08008408 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b084      	sub	sp, #16
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008410:	2300      	movs	r3, #0
 8008412:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008414:	2300      	movs	r3, #0
 8008416:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800841e:	4618      	mov	r0, r3
 8008420:	f7f8 fc66 	bl	8000cf0 <HAL_PCD_Start>
 8008424:	4603      	mov	r3, r0
 8008426:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008428:	7bbb      	ldrb	r3, [r7, #14]
 800842a:	2b03      	cmp	r3, #3
 800842c:	d816      	bhi.n	800845c <USBD_LL_Start+0x54>
 800842e:	a201      	add	r2, pc, #4	; (adr r2, 8008434 <USBD_LL_Start+0x2c>)
 8008430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008434:	08008445 	.word	0x08008445
 8008438:	0800844b 	.word	0x0800844b
 800843c:	08008451 	.word	0x08008451
 8008440:	08008457 	.word	0x08008457
    case HAL_OK :
      usb_status = USBD_OK;
 8008444:	2300      	movs	r3, #0
 8008446:	73fb      	strb	r3, [r7, #15]
    break;
 8008448:	e00b      	b.n	8008462 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800844a:	2303      	movs	r3, #3
 800844c:	73fb      	strb	r3, [r7, #15]
    break;
 800844e:	e008      	b.n	8008462 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008450:	2301      	movs	r3, #1
 8008452:	73fb      	strb	r3, [r7, #15]
    break;
 8008454:	e005      	b.n	8008462 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008456:	2303      	movs	r3, #3
 8008458:	73fb      	strb	r3, [r7, #15]
    break;
 800845a:	e002      	b.n	8008462 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800845c:	2303      	movs	r3, #3
 800845e:	73fb      	strb	r3, [r7, #15]
    break;
 8008460:	bf00      	nop
  }
  return usb_status;
 8008462:	7bfb      	ldrb	r3, [r7, #15]
}
 8008464:	4618      	mov	r0, r3
 8008466:	3710      	adds	r7, #16
 8008468:	46bd      	mov	sp, r7
 800846a:	bd80      	pop	{r7, pc}

0800846c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b084      	sub	sp, #16
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
 8008474:	4608      	mov	r0, r1
 8008476:	4611      	mov	r1, r2
 8008478:	461a      	mov	r2, r3
 800847a:	4603      	mov	r3, r0
 800847c:	70fb      	strb	r3, [r7, #3]
 800847e:	460b      	mov	r3, r1
 8008480:	70bb      	strb	r3, [r7, #2]
 8008482:	4613      	mov	r3, r2
 8008484:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008486:	2300      	movs	r3, #0
 8008488:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800848a:	2300      	movs	r3, #0
 800848c:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008494:	78bb      	ldrb	r3, [r7, #2]
 8008496:	883a      	ldrh	r2, [r7, #0]
 8008498:	78f9      	ldrb	r1, [r7, #3]
 800849a:	f7f9 f910 	bl	80016be <HAL_PCD_EP_Open>
 800849e:	4603      	mov	r3, r0
 80084a0:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80084a2:	7bbb      	ldrb	r3, [r7, #14]
 80084a4:	2b03      	cmp	r3, #3
 80084a6:	d817      	bhi.n	80084d8 <USBD_LL_OpenEP+0x6c>
 80084a8:	a201      	add	r2, pc, #4	; (adr r2, 80084b0 <USBD_LL_OpenEP+0x44>)
 80084aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084ae:	bf00      	nop
 80084b0:	080084c1 	.word	0x080084c1
 80084b4:	080084c7 	.word	0x080084c7
 80084b8:	080084cd 	.word	0x080084cd
 80084bc:	080084d3 	.word	0x080084d3
    case HAL_OK :
      usb_status = USBD_OK;
 80084c0:	2300      	movs	r3, #0
 80084c2:	73fb      	strb	r3, [r7, #15]
    break;
 80084c4:	e00b      	b.n	80084de <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80084c6:	2303      	movs	r3, #3
 80084c8:	73fb      	strb	r3, [r7, #15]
    break;
 80084ca:	e008      	b.n	80084de <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80084cc:	2301      	movs	r3, #1
 80084ce:	73fb      	strb	r3, [r7, #15]
    break;
 80084d0:	e005      	b.n	80084de <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80084d2:	2303      	movs	r3, #3
 80084d4:	73fb      	strb	r3, [r7, #15]
    break;
 80084d6:	e002      	b.n	80084de <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 80084d8:	2303      	movs	r3, #3
 80084da:	73fb      	strb	r3, [r7, #15]
    break;
 80084dc:	bf00      	nop
  }
  return usb_status;
 80084de:	7bfb      	ldrb	r3, [r7, #15]
}
 80084e0:	4618      	mov	r0, r3
 80084e2:	3710      	adds	r7, #16
 80084e4:	46bd      	mov	sp, r7
 80084e6:	bd80      	pop	{r7, pc}

080084e8 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b084      	sub	sp, #16
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
 80084f0:	460b      	mov	r3, r1
 80084f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084f4:	2300      	movs	r3, #0
 80084f6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084f8:	2300      	movs	r3, #0
 80084fa:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008502:	78fa      	ldrb	r2, [r7, #3]
 8008504:	4611      	mov	r1, r2
 8008506:	4618      	mov	r0, r3
 8008508:	f7f9 f941 	bl	800178e <HAL_PCD_EP_Close>
 800850c:	4603      	mov	r3, r0
 800850e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008510:	7bbb      	ldrb	r3, [r7, #14]
 8008512:	2b03      	cmp	r3, #3
 8008514:	d816      	bhi.n	8008544 <USBD_LL_CloseEP+0x5c>
 8008516:	a201      	add	r2, pc, #4	; (adr r2, 800851c <USBD_LL_CloseEP+0x34>)
 8008518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800851c:	0800852d 	.word	0x0800852d
 8008520:	08008533 	.word	0x08008533
 8008524:	08008539 	.word	0x08008539
 8008528:	0800853f 	.word	0x0800853f
    case HAL_OK :
      usb_status = USBD_OK;
 800852c:	2300      	movs	r3, #0
 800852e:	73fb      	strb	r3, [r7, #15]
    break;
 8008530:	e00b      	b.n	800854a <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008532:	2303      	movs	r3, #3
 8008534:	73fb      	strb	r3, [r7, #15]
    break;
 8008536:	e008      	b.n	800854a <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008538:	2301      	movs	r3, #1
 800853a:	73fb      	strb	r3, [r7, #15]
    break;
 800853c:	e005      	b.n	800854a <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800853e:	2303      	movs	r3, #3
 8008540:	73fb      	strb	r3, [r7, #15]
    break;
 8008542:	e002      	b.n	800854a <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8008544:	2303      	movs	r3, #3
 8008546:	73fb      	strb	r3, [r7, #15]
    break;
 8008548:	bf00      	nop
  }
  return usb_status;
 800854a:	7bfb      	ldrb	r3, [r7, #15]
}
 800854c:	4618      	mov	r0, r3
 800854e:	3710      	adds	r7, #16
 8008550:	46bd      	mov	sp, r7
 8008552:	bd80      	pop	{r7, pc}

08008554 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b084      	sub	sp, #16
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
 800855c:	460b      	mov	r3, r1
 800855e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008560:	2300      	movs	r3, #0
 8008562:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008564:	2300      	movs	r3, #0
 8008566:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800856e:	78fa      	ldrb	r2, [r7, #3]
 8008570:	4611      	mov	r1, r2
 8008572:	4618      	mov	r0, r3
 8008574:	f7f9 fad1 	bl	8001b1a <HAL_PCD_EP_Flush>
 8008578:	4603      	mov	r3, r0
 800857a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800857c:	7bbb      	ldrb	r3, [r7, #14]
 800857e:	2b03      	cmp	r3, #3
 8008580:	d816      	bhi.n	80085b0 <USBD_LL_FlushEP+0x5c>
 8008582:	a201      	add	r2, pc, #4	; (adr r2, 8008588 <USBD_LL_FlushEP+0x34>)
 8008584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008588:	08008599 	.word	0x08008599
 800858c:	0800859f 	.word	0x0800859f
 8008590:	080085a5 	.word	0x080085a5
 8008594:	080085ab 	.word	0x080085ab
    case HAL_OK :
      usb_status = USBD_OK;
 8008598:	2300      	movs	r3, #0
 800859a:	73fb      	strb	r3, [r7, #15]
    break;
 800859c:	e00b      	b.n	80085b6 <USBD_LL_FlushEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800859e:	2303      	movs	r3, #3
 80085a0:	73fb      	strb	r3, [r7, #15]
    break;
 80085a2:	e008      	b.n	80085b6 <USBD_LL_FlushEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80085a4:	2301      	movs	r3, #1
 80085a6:	73fb      	strb	r3, [r7, #15]
    break;
 80085a8:	e005      	b.n	80085b6 <USBD_LL_FlushEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80085aa:	2303      	movs	r3, #3
 80085ac:	73fb      	strb	r3, [r7, #15]
    break;
 80085ae:	e002      	b.n	80085b6 <USBD_LL_FlushEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80085b0:	2303      	movs	r3, #3
 80085b2:	73fb      	strb	r3, [r7, #15]
    break;
 80085b4:	bf00      	nop
  }
  return usb_status;
 80085b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80085b8:	4618      	mov	r0, r3
 80085ba:	3710      	adds	r7, #16
 80085bc:	46bd      	mov	sp, r7
 80085be:	bd80      	pop	{r7, pc}

080085c0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b084      	sub	sp, #16
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
 80085c8:	460b      	mov	r3, r1
 80085ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085cc:	2300      	movs	r3, #0
 80085ce:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085d0:	2300      	movs	r3, #0
 80085d2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80085da:	78fa      	ldrb	r2, [r7, #3]
 80085dc:	4611      	mov	r1, r2
 80085de:	4618      	mov	r0, r3
 80085e0:	f7f9 f9b2 	bl	8001948 <HAL_PCD_EP_SetStall>
 80085e4:	4603      	mov	r3, r0
 80085e6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80085e8:	7bbb      	ldrb	r3, [r7, #14]
 80085ea:	2b03      	cmp	r3, #3
 80085ec:	d816      	bhi.n	800861c <USBD_LL_StallEP+0x5c>
 80085ee:	a201      	add	r2, pc, #4	; (adr r2, 80085f4 <USBD_LL_StallEP+0x34>)
 80085f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085f4:	08008605 	.word	0x08008605
 80085f8:	0800860b 	.word	0x0800860b
 80085fc:	08008611 	.word	0x08008611
 8008600:	08008617 	.word	0x08008617
    case HAL_OK :
      usb_status = USBD_OK;
 8008604:	2300      	movs	r3, #0
 8008606:	73fb      	strb	r3, [r7, #15]
    break;
 8008608:	e00b      	b.n	8008622 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800860a:	2303      	movs	r3, #3
 800860c:	73fb      	strb	r3, [r7, #15]
    break;
 800860e:	e008      	b.n	8008622 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008610:	2301      	movs	r3, #1
 8008612:	73fb      	strb	r3, [r7, #15]
    break;
 8008614:	e005      	b.n	8008622 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008616:	2303      	movs	r3, #3
 8008618:	73fb      	strb	r3, [r7, #15]
    break;
 800861a:	e002      	b.n	8008622 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800861c:	2303      	movs	r3, #3
 800861e:	73fb      	strb	r3, [r7, #15]
    break;
 8008620:	bf00      	nop
  }
  return usb_status;
 8008622:	7bfb      	ldrb	r3, [r7, #15]
}
 8008624:	4618      	mov	r0, r3
 8008626:	3710      	adds	r7, #16
 8008628:	46bd      	mov	sp, r7
 800862a:	bd80      	pop	{r7, pc}

0800862c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b084      	sub	sp, #16
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
 8008634:	460b      	mov	r3, r1
 8008636:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008638:	2300      	movs	r3, #0
 800863a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800863c:	2300      	movs	r3, #0
 800863e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008646:	78fa      	ldrb	r2, [r7, #3]
 8008648:	4611      	mov	r1, r2
 800864a:	4618      	mov	r0, r3
 800864c:	f7f9 f9de 	bl	8001a0c <HAL_PCD_EP_ClrStall>
 8008650:	4603      	mov	r3, r0
 8008652:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008654:	7bbb      	ldrb	r3, [r7, #14]
 8008656:	2b03      	cmp	r3, #3
 8008658:	d816      	bhi.n	8008688 <USBD_LL_ClearStallEP+0x5c>
 800865a:	a201      	add	r2, pc, #4	; (adr r2, 8008660 <USBD_LL_ClearStallEP+0x34>)
 800865c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008660:	08008671 	.word	0x08008671
 8008664:	08008677 	.word	0x08008677
 8008668:	0800867d 	.word	0x0800867d
 800866c:	08008683 	.word	0x08008683
    case HAL_OK :
      usb_status = USBD_OK;
 8008670:	2300      	movs	r3, #0
 8008672:	73fb      	strb	r3, [r7, #15]
    break;
 8008674:	e00b      	b.n	800868e <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008676:	2303      	movs	r3, #3
 8008678:	73fb      	strb	r3, [r7, #15]
    break;
 800867a:	e008      	b.n	800868e <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800867c:	2301      	movs	r3, #1
 800867e:	73fb      	strb	r3, [r7, #15]
    break;
 8008680:	e005      	b.n	800868e <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008682:	2303      	movs	r3, #3
 8008684:	73fb      	strb	r3, [r7, #15]
    break;
 8008686:	e002      	b.n	800868e <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8008688:	2303      	movs	r3, #3
 800868a:	73fb      	strb	r3, [r7, #15]
    break;
 800868c:	bf00      	nop
  }
  return usb_status;
 800868e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008690:	4618      	mov	r0, r3
 8008692:	3710      	adds	r7, #16
 8008694:	46bd      	mov	sp, r7
 8008696:	bd80      	pop	{r7, pc}

08008698 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008698:	b480      	push	{r7}
 800869a:	b085      	sub	sp, #20
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
 80086a0:	460b      	mov	r3, r1
 80086a2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80086aa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80086ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	da0b      	bge.n	80086cc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80086b4:	78fb      	ldrb	r3, [r7, #3]
 80086b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80086ba:	68f9      	ldr	r1, [r7, #12]
 80086bc:	4613      	mov	r3, r2
 80086be:	00db      	lsls	r3, r3, #3
 80086c0:	4413      	add	r3, r2
 80086c2:	009b      	lsls	r3, r3, #2
 80086c4:	440b      	add	r3, r1
 80086c6:	333e      	adds	r3, #62	; 0x3e
 80086c8:	781b      	ldrb	r3, [r3, #0]
 80086ca:	e00b      	b.n	80086e4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80086cc:	78fb      	ldrb	r3, [r7, #3]
 80086ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80086d2:	68f9      	ldr	r1, [r7, #12]
 80086d4:	4613      	mov	r3, r2
 80086d6:	00db      	lsls	r3, r3, #3
 80086d8:	4413      	add	r3, r2
 80086da:	009b      	lsls	r3, r3, #2
 80086dc:	440b      	add	r3, r1
 80086de:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80086e2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80086e4:	4618      	mov	r0, r3
 80086e6:	3714      	adds	r7, #20
 80086e8:	46bd      	mov	sp, r7
 80086ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ee:	4770      	bx	lr

080086f0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b084      	sub	sp, #16
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
 80086f8:	460b      	mov	r3, r1
 80086fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086fc:	2300      	movs	r3, #0
 80086fe:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008700:	2300      	movs	r3, #0
 8008702:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800870a:	78fa      	ldrb	r2, [r7, #3]
 800870c:	4611      	mov	r1, r2
 800870e:	4618      	mov	r0, r3
 8008710:	f7f8 ffb0 	bl	8001674 <HAL_PCD_SetAddress>
 8008714:	4603      	mov	r3, r0
 8008716:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008718:	7bbb      	ldrb	r3, [r7, #14]
 800871a:	2b03      	cmp	r3, #3
 800871c:	d816      	bhi.n	800874c <USBD_LL_SetUSBAddress+0x5c>
 800871e:	a201      	add	r2, pc, #4	; (adr r2, 8008724 <USBD_LL_SetUSBAddress+0x34>)
 8008720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008724:	08008735 	.word	0x08008735
 8008728:	0800873b 	.word	0x0800873b
 800872c:	08008741 	.word	0x08008741
 8008730:	08008747 	.word	0x08008747
    case HAL_OK :
      usb_status = USBD_OK;
 8008734:	2300      	movs	r3, #0
 8008736:	73fb      	strb	r3, [r7, #15]
    break;
 8008738:	e00b      	b.n	8008752 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800873a:	2303      	movs	r3, #3
 800873c:	73fb      	strb	r3, [r7, #15]
    break;
 800873e:	e008      	b.n	8008752 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008740:	2301      	movs	r3, #1
 8008742:	73fb      	strb	r3, [r7, #15]
    break;
 8008744:	e005      	b.n	8008752 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008746:	2303      	movs	r3, #3
 8008748:	73fb      	strb	r3, [r7, #15]
    break;
 800874a:	e002      	b.n	8008752 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800874c:	2303      	movs	r3, #3
 800874e:	73fb      	strb	r3, [r7, #15]
    break;
 8008750:	bf00      	nop
  }
  return usb_status;
 8008752:	7bfb      	ldrb	r3, [r7, #15]
}
 8008754:	4618      	mov	r0, r3
 8008756:	3710      	adds	r7, #16
 8008758:	46bd      	mov	sp, r7
 800875a:	bd80      	pop	{r7, pc}

0800875c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b086      	sub	sp, #24
 8008760:	af00      	add	r7, sp, #0
 8008762:	60f8      	str	r0, [r7, #12]
 8008764:	607a      	str	r2, [r7, #4]
 8008766:	603b      	str	r3, [r7, #0]
 8008768:	460b      	mov	r3, r1
 800876a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800876c:	2300      	movs	r3, #0
 800876e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008770:	2300      	movs	r3, #0
 8008772:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800877a:	7af9      	ldrb	r1, [r7, #11]
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	687a      	ldr	r2, [r7, #4]
 8008780:	f7f9 f8a5 	bl	80018ce <HAL_PCD_EP_Transmit>
 8008784:	4603      	mov	r3, r0
 8008786:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8008788:	7dbb      	ldrb	r3, [r7, #22]
 800878a:	2b03      	cmp	r3, #3
 800878c:	d816      	bhi.n	80087bc <USBD_LL_Transmit+0x60>
 800878e:	a201      	add	r2, pc, #4	; (adr r2, 8008794 <USBD_LL_Transmit+0x38>)
 8008790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008794:	080087a5 	.word	0x080087a5
 8008798:	080087ab 	.word	0x080087ab
 800879c:	080087b1 	.word	0x080087b1
 80087a0:	080087b7 	.word	0x080087b7
    case HAL_OK :
      usb_status = USBD_OK;
 80087a4:	2300      	movs	r3, #0
 80087a6:	75fb      	strb	r3, [r7, #23]
    break;
 80087a8:	e00b      	b.n	80087c2 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80087aa:	2303      	movs	r3, #3
 80087ac:	75fb      	strb	r3, [r7, #23]
    break;
 80087ae:	e008      	b.n	80087c2 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80087b0:	2301      	movs	r3, #1
 80087b2:	75fb      	strb	r3, [r7, #23]
    break;
 80087b4:	e005      	b.n	80087c2 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80087b6:	2303      	movs	r3, #3
 80087b8:	75fb      	strb	r3, [r7, #23]
    break;
 80087ba:	e002      	b.n	80087c2 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 80087bc:	2303      	movs	r3, #3
 80087be:	75fb      	strb	r3, [r7, #23]
    break;
 80087c0:	bf00      	nop
  }
  return usb_status;
 80087c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80087c4:	4618      	mov	r0, r3
 80087c6:	3718      	adds	r7, #24
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bd80      	pop	{r7, pc}

080087cc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b086      	sub	sp, #24
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	60f8      	str	r0, [r7, #12]
 80087d4:	607a      	str	r2, [r7, #4]
 80087d6:	603b      	str	r3, [r7, #0]
 80087d8:	460b      	mov	r3, r1
 80087da:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087dc:	2300      	movs	r3, #0
 80087de:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087e0:	2300      	movs	r3, #0
 80087e2:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80087ea:	7af9      	ldrb	r1, [r7, #11]
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	687a      	ldr	r2, [r7, #4]
 80087f0:	f7f9 f817 	bl	8001822 <HAL_PCD_EP_Receive>
 80087f4:	4603      	mov	r3, r0
 80087f6:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 80087f8:	7dbb      	ldrb	r3, [r7, #22]
 80087fa:	2b03      	cmp	r3, #3
 80087fc:	d816      	bhi.n	800882c <USBD_LL_PrepareReceive+0x60>
 80087fe:	a201      	add	r2, pc, #4	; (adr r2, 8008804 <USBD_LL_PrepareReceive+0x38>)
 8008800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008804:	08008815 	.word	0x08008815
 8008808:	0800881b 	.word	0x0800881b
 800880c:	08008821 	.word	0x08008821
 8008810:	08008827 	.word	0x08008827
    case HAL_OK :
      usb_status = USBD_OK;
 8008814:	2300      	movs	r3, #0
 8008816:	75fb      	strb	r3, [r7, #23]
    break;
 8008818:	e00b      	b.n	8008832 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800881a:	2303      	movs	r3, #3
 800881c:	75fb      	strb	r3, [r7, #23]
    break;
 800881e:	e008      	b.n	8008832 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008820:	2301      	movs	r3, #1
 8008822:	75fb      	strb	r3, [r7, #23]
    break;
 8008824:	e005      	b.n	8008832 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008826:	2303      	movs	r3, #3
 8008828:	75fb      	strb	r3, [r7, #23]
    break;
 800882a:	e002      	b.n	8008832 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800882c:	2303      	movs	r3, #3
 800882e:	75fb      	strb	r3, [r7, #23]
    break;
 8008830:	bf00      	nop
  }
  return usb_status;
 8008832:	7dfb      	ldrb	r3, [r7, #23]
}
 8008834:	4618      	mov	r0, r3
 8008836:	3718      	adds	r7, #24
 8008838:	46bd      	mov	sp, r7
 800883a:	bd80      	pop	{r7, pc}

0800883c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b082      	sub	sp, #8
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
 8008844:	460b      	mov	r3, r1
 8008846:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800884e:	78fa      	ldrb	r2, [r7, #3]
 8008850:	4611      	mov	r1, r2
 8008852:	4618      	mov	r0, r3
 8008854:	f7f9 f823 	bl	800189e <HAL_PCD_EP_GetRxCount>
 8008858:	4603      	mov	r3, r0
}
 800885a:	4618      	mov	r0, r3
 800885c:	3708      	adds	r7, #8
 800885e:	46bd      	mov	sp, r7
 8008860:	bd80      	pop	{r7, pc}
	...

08008864 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b082      	sub	sp, #8
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
 800886c:	460b      	mov	r3, r1
 800886e:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8008870:	78fb      	ldrb	r3, [r7, #3]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d002      	beq.n	800887c <HAL_PCDEx_LPM_Callback+0x18>
 8008876:	2b01      	cmp	r3, #1
 8008878:	d01f      	beq.n	80088ba <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800887a:	e03b      	b.n	80088f4 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	6a1b      	ldr	r3, [r3, #32]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d007      	beq.n	8008894 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8008884:	f000 f854 	bl	8008930 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008888:	4b1c      	ldr	r3, [pc, #112]	; (80088fc <HAL_PCDEx_LPM_Callback+0x98>)
 800888a:	691b      	ldr	r3, [r3, #16]
 800888c:	4a1b      	ldr	r2, [pc, #108]	; (80088fc <HAL_PCDEx_LPM_Callback+0x98>)
 800888e:	f023 0306 	bic.w	r3, r3, #6
 8008892:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	687a      	ldr	r2, [r7, #4]
 80088a0:	6812      	ldr	r2, [r2, #0]
 80088a2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80088a6:	f023 0301 	bic.w	r3, r3, #1
 80088aa:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80088b2:	4618      	mov	r0, r3
 80088b4:	f7fe faff 	bl	8006eb6 <USBD_LL_Resume>
    break;
 80088b8:	e01c      	b.n	80088f4 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	687a      	ldr	r2, [r7, #4]
 80088c6:	6812      	ldr	r2, [r2, #0]
 80088c8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80088cc:	f043 0301 	orr.w	r3, r3, #1
 80088d0:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80088d8:	4618      	mov	r0, r3
 80088da:	f7fe fad6 	bl	8006e8a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	6a1b      	ldr	r3, [r3, #32]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d005      	beq.n	80088f2 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80088e6:	4b05      	ldr	r3, [pc, #20]	; (80088fc <HAL_PCDEx_LPM_Callback+0x98>)
 80088e8:	691b      	ldr	r3, [r3, #16]
 80088ea:	4a04      	ldr	r2, [pc, #16]	; (80088fc <HAL_PCDEx_LPM_Callback+0x98>)
 80088ec:	f043 0306 	orr.w	r3, r3, #6
 80088f0:	6113      	str	r3, [r2, #16]
    break;
 80088f2:	bf00      	nop
}
 80088f4:	bf00      	nop
 80088f6:	3708      	adds	r7, #8
 80088f8:	46bd      	mov	sp, r7
 80088fa:	bd80      	pop	{r7, pc}
 80088fc:	e000ed00 	.word	0xe000ed00

08008900 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008900:	b480      	push	{r7}
 8008902:	b083      	sub	sp, #12
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008908:	4b03      	ldr	r3, [pc, #12]	; (8008918 <USBD_static_malloc+0x18>)
}
 800890a:	4618      	mov	r0, r3
 800890c:	370c      	adds	r7, #12
 800890e:	46bd      	mov	sp, r7
 8008910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008914:	4770      	bx	lr
 8008916:	bf00      	nop
 8008918:	20019b74 	.word	0x20019b74

0800891c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800891c:	b480      	push	{r7}
 800891e:	b083      	sub	sp, #12
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]

}
 8008924:	bf00      	nop
 8008926:	370c      	adds	r7, #12
 8008928:	46bd      	mov	sp, r7
 800892a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892e:	4770      	bx	lr

08008930 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8008930:	b580      	push	{r7, lr}
 8008932:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8008934:	f7f7 fc6d 	bl	8000212 <SystemClock_Config>
}
 8008938:	bf00      	nop
 800893a:	bd80      	pop	{r7, pc}

0800893c <__libc_init_array>:
 800893c:	b570      	push	{r4, r5, r6, lr}
 800893e:	4d0d      	ldr	r5, [pc, #52]	; (8008974 <__libc_init_array+0x38>)
 8008940:	4c0d      	ldr	r4, [pc, #52]	; (8008978 <__libc_init_array+0x3c>)
 8008942:	1b64      	subs	r4, r4, r5
 8008944:	10a4      	asrs	r4, r4, #2
 8008946:	2600      	movs	r6, #0
 8008948:	42a6      	cmp	r6, r4
 800894a:	d109      	bne.n	8008960 <__libc_init_array+0x24>
 800894c:	4d0b      	ldr	r5, [pc, #44]	; (800897c <__libc_init_array+0x40>)
 800894e:	4c0c      	ldr	r4, [pc, #48]	; (8008980 <__libc_init_array+0x44>)
 8008950:	f000 f82e 	bl	80089b0 <_init>
 8008954:	1b64      	subs	r4, r4, r5
 8008956:	10a4      	asrs	r4, r4, #2
 8008958:	2600      	movs	r6, #0
 800895a:	42a6      	cmp	r6, r4
 800895c:	d105      	bne.n	800896a <__libc_init_array+0x2e>
 800895e:	bd70      	pop	{r4, r5, r6, pc}
 8008960:	f855 3b04 	ldr.w	r3, [r5], #4
 8008964:	4798      	blx	r3
 8008966:	3601      	adds	r6, #1
 8008968:	e7ee      	b.n	8008948 <__libc_init_array+0xc>
 800896a:	f855 3b04 	ldr.w	r3, [r5], #4
 800896e:	4798      	blx	r3
 8008970:	3601      	adds	r6, #1
 8008972:	e7f2      	b.n	800895a <__libc_init_array+0x1e>
 8008974:	08008a70 	.word	0x08008a70
 8008978:	08008a70 	.word	0x08008a70
 800897c:	08008a70 	.word	0x08008a70
 8008980:	08008a74 	.word	0x08008a74

08008984 <memcpy>:
 8008984:	440a      	add	r2, r1
 8008986:	4291      	cmp	r1, r2
 8008988:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800898c:	d100      	bne.n	8008990 <memcpy+0xc>
 800898e:	4770      	bx	lr
 8008990:	b510      	push	{r4, lr}
 8008992:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008996:	f803 4f01 	strb.w	r4, [r3, #1]!
 800899a:	4291      	cmp	r1, r2
 800899c:	d1f9      	bne.n	8008992 <memcpy+0xe>
 800899e:	bd10      	pop	{r4, pc}

080089a0 <memset>:
 80089a0:	4402      	add	r2, r0
 80089a2:	4603      	mov	r3, r0
 80089a4:	4293      	cmp	r3, r2
 80089a6:	d100      	bne.n	80089aa <memset+0xa>
 80089a8:	4770      	bx	lr
 80089aa:	f803 1b01 	strb.w	r1, [r3], #1
 80089ae:	e7f9      	b.n	80089a4 <memset+0x4>

080089b0 <_init>:
 80089b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089b2:	bf00      	nop
 80089b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089b6:	bc08      	pop	{r3}
 80089b8:	469e      	mov	lr, r3
 80089ba:	4770      	bx	lr

080089bc <_fini>:
 80089bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089be:	bf00      	nop
 80089c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089c2:	bc08      	pop	{r3}
 80089c4:	469e      	mov	lr, r3
 80089c6:	4770      	bx	lr
