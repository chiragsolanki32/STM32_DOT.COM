
I2C_SHT21_sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008bcc  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000045c  08008d10  08008d10  00018d10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800916c  0800916c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800916c  0800916c  0001916c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009174  08009174  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009174  08009174  00019174  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009178  08009178  00019178  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800917c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  200001dc  08009358  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ac  08009358  000202ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c0d3  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e1f  00000000  00000000  0002c2d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a98  00000000  00000000  0002e0f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009f8  00000000  00000000  0002eb90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016829  00000000  00000000  0002f588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d4e0  00000000  00000000  00045db1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000862dc  00000000  00000000  00053291  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d956d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003dbc  00000000  00000000  000d95c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001dc 	.word	0x200001dc
 800015c:	00000000 	.word	0x00000000
 8000160:	08008cf4 	.word	0x08008cf4

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001e0 	.word	0x200001e0
 800017c:	08008cf4 	.word	0x08008cf4

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	; 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	3c01      	subs	r4, #1
 80002cc:	bf28      	it	cs
 80002ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002d2:	d2e9      	bcs.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800047a:	bf08      	it	eq
 800047c:	4770      	bxeq	lr
 800047e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000482:	bf04      	itt	eq
 8000484:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000498:	e71c      	b.n	80002d4 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_ul2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f04f 0500 	mov.w	r5, #0
 80004aa:	e00a      	b.n	80004c2 <__aeabi_l2d+0x16>

080004ac <__aeabi_l2d>:
 80004ac:	ea50 0201 	orrs.w	r2, r0, r1
 80004b0:	bf08      	it	eq
 80004b2:	4770      	bxeq	lr
 80004b4:	b530      	push	{r4, r5, lr}
 80004b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ba:	d502      	bpl.n	80004c2 <__aeabi_l2d+0x16>
 80004bc:	4240      	negs	r0, r0
 80004be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ce:	f43f aed8 	beq.w	8000282 <__adddf3+0xe6>
 80004d2:	f04f 0203 	mov.w	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e2:	bf18      	it	ne
 80004e4:	3203      	addne	r2, #3
 80004e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	fa20 f002 	lsr.w	r0, r0, r2
 80004f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fa:	ea40 000e 	orr.w	r0, r0, lr
 80004fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000502:	4414      	add	r4, r2
 8000504:	e6bd      	b.n	8000282 <__adddf3+0xe6>
 8000506:	bf00      	nop

08000508 <__aeabi_dmul>:
 8000508:	b570      	push	{r4, r5, r6, lr}
 800050a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800050e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000512:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000516:	bf1d      	ittte	ne
 8000518:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800051c:	ea94 0f0c 	teqne	r4, ip
 8000520:	ea95 0f0c 	teqne	r5, ip
 8000524:	f000 f8de 	bleq	80006e4 <__aeabi_dmul+0x1dc>
 8000528:	442c      	add	r4, r5
 800052a:	ea81 0603 	eor.w	r6, r1, r3
 800052e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000532:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000536:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053a:	bf18      	it	ne
 800053c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000540:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000544:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000548:	d038      	beq.n	80005bc <__aeabi_dmul+0xb4>
 800054a:	fba0 ce02 	umull	ip, lr, r0, r2
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000556:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800055a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800055e:	f04f 0600 	mov.w	r6, #0
 8000562:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000566:	f09c 0f00 	teq	ip, #0
 800056a:	bf18      	it	ne
 800056c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000570:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000574:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000578:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800057c:	d204      	bcs.n	8000588 <__aeabi_dmul+0x80>
 800057e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000582:	416d      	adcs	r5, r5
 8000584:	eb46 0606 	adc.w	r6, r6, r6
 8000588:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800058c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000590:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000594:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000598:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800059c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005a0:	bf88      	it	hi
 80005a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005a6:	d81e      	bhi.n	80005e6 <__aeabi_dmul+0xde>
 80005a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ac:	bf08      	it	eq
 80005ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b2:	f150 0000 	adcs.w	r0, r0, #0
 80005b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005c0:	ea46 0101 	orr.w	r1, r6, r1
 80005c4:	ea40 0002 	orr.w	r0, r0, r2
 80005c8:	ea81 0103 	eor.w	r1, r1, r3
 80005cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d0:	bfc2      	ittt	gt
 80005d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005da:	bd70      	popgt	{r4, r5, r6, pc}
 80005dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e0:	f04f 0e00 	mov.w	lr, #0
 80005e4:	3c01      	subs	r4, #1
 80005e6:	f300 80ab 	bgt.w	8000740 <__aeabi_dmul+0x238>
 80005ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ee:	bfde      	ittt	le
 80005f0:	2000      	movle	r0, #0
 80005f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005f6:	bd70      	pople	{r4, r5, r6, pc}
 80005f8:	f1c4 0400 	rsb	r4, r4, #0
 80005fc:	3c20      	subs	r4, #32
 80005fe:	da35      	bge.n	800066c <__aeabi_dmul+0x164>
 8000600:	340c      	adds	r4, #12
 8000602:	dc1b      	bgt.n	800063c <__aeabi_dmul+0x134>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f305 	lsl.w	r3, r0, r5
 8000610:	fa20 f004 	lsr.w	r0, r0, r4
 8000614:	fa01 f205 	lsl.w	r2, r1, r5
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000620:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	fa21 f604 	lsr.w	r6, r1, r4
 800062c:	eb42 0106 	adc.w	r1, r2, r6
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 040c 	rsb	r4, r4, #12
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f304 	lsl.w	r3, r0, r4
 8000648:	fa20 f005 	lsr.w	r0, r0, r5
 800064c:	fa01 f204 	lsl.w	r2, r1, r4
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000658:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800065c:	f141 0100 	adc.w	r1, r1, #0
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 0520 	rsb	r5, r4, #32
 8000670:	fa00 f205 	lsl.w	r2, r0, r5
 8000674:	ea4e 0e02 	orr.w	lr, lr, r2
 8000678:	fa20 f304 	lsr.w	r3, r0, r4
 800067c:	fa01 f205 	lsl.w	r2, r1, r5
 8000680:	ea43 0302 	orr.w	r3, r3, r2
 8000684:	fa21 f004 	lsr.w	r0, r1, r4
 8000688:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800068c:	fa21 f204 	lsr.w	r2, r1, r4
 8000690:	ea20 0002 	bic.w	r0, r0, r2
 8000694:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f094 0f00 	teq	r4, #0
 80006a8:	d10f      	bne.n	80006ca <__aeabi_dmul+0x1c2>
 80006aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ae:	0040      	lsls	r0, r0, #1
 80006b0:	eb41 0101 	adc.w	r1, r1, r1
 80006b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3c01      	subeq	r4, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1a6>
 80006be:	ea41 0106 	orr.w	r1, r1, r6
 80006c2:	f095 0f00 	teq	r5, #0
 80006c6:	bf18      	it	ne
 80006c8:	4770      	bxne	lr
 80006ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ce:	0052      	lsls	r2, r2, #1
 80006d0:	eb43 0303 	adc.w	r3, r3, r3
 80006d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006d8:	bf08      	it	eq
 80006da:	3d01      	subeq	r5, #1
 80006dc:	d0f7      	beq.n	80006ce <__aeabi_dmul+0x1c6>
 80006de:	ea43 0306 	orr.w	r3, r3, r6
 80006e2:	4770      	bx	lr
 80006e4:	ea94 0f0c 	teq	r4, ip
 80006e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ec:	bf18      	it	ne
 80006ee:	ea95 0f0c 	teqne	r5, ip
 80006f2:	d00c      	beq.n	800070e <__aeabi_dmul+0x206>
 80006f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f8:	bf18      	it	ne
 80006fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fe:	d1d1      	bne.n	80006a4 <__aeabi_dmul+0x19c>
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000712:	bf06      	itte	eq
 8000714:	4610      	moveq	r0, r2
 8000716:	4619      	moveq	r1, r3
 8000718:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800071c:	d019      	beq.n	8000752 <__aeabi_dmul+0x24a>
 800071e:	ea94 0f0c 	teq	r4, ip
 8000722:	d102      	bne.n	800072a <__aeabi_dmul+0x222>
 8000724:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000728:	d113      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800072a:	ea95 0f0c 	teq	r5, ip
 800072e:	d105      	bne.n	800073c <__aeabi_dmul+0x234>
 8000730:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000734:	bf1c      	itt	ne
 8000736:	4610      	movne	r0, r2
 8000738:	4619      	movne	r1, r3
 800073a:	d10a      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000744:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000748:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000756:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800075a:	bd70      	pop	{r4, r5, r6, pc}

0800075c <__aeabi_ddiv>:
 800075c:	b570      	push	{r4, r5, r6, lr}
 800075e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000762:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000766:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076a:	bf1d      	ittte	ne
 800076c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000770:	ea94 0f0c 	teqne	r4, ip
 8000774:	ea95 0f0c 	teqne	r5, ip
 8000778:	f000 f8a7 	bleq	80008ca <__aeabi_ddiv+0x16e>
 800077c:	eba4 0405 	sub.w	r4, r4, r5
 8000780:	ea81 0e03 	eor.w	lr, r1, r3
 8000784:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000788:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800078c:	f000 8088 	beq.w	80008a0 <__aeabi_ddiv+0x144>
 8000790:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000794:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000798:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800079c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007b4:	429d      	cmp	r5, r3
 80007b6:	bf08      	it	eq
 80007b8:	4296      	cmpeq	r6, r2
 80007ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007c2:	d202      	bcs.n	80007ca <__aeabi_ddiv+0x6e>
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	1ab6      	subs	r6, r6, r2
 80007cc:	eb65 0503 	sbc.w	r5, r5, r3
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000838:	ea55 0e06 	orrs.w	lr, r5, r6
 800083c:	d018      	beq.n	8000870 <__aeabi_ddiv+0x114>
 800083e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000842:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000846:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800084e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000852:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000856:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085a:	d1c0      	bne.n	80007de <__aeabi_ddiv+0x82>
 800085c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000860:	d10b      	bne.n	800087a <__aeabi_ddiv+0x11e>
 8000862:	ea41 0100 	orr.w	r1, r1, r0
 8000866:	f04f 0000 	mov.w	r0, #0
 800086a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800086e:	e7b6      	b.n	80007de <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000874:	bf04      	itt	eq
 8000876:	4301      	orreq	r1, r0
 8000878:	2000      	moveq	r0, #0
 800087a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800087e:	bf88      	it	hi
 8000880:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000884:	f63f aeaf 	bhi.w	80005e6 <__aeabi_dmul+0xde>
 8000888:	ebb5 0c03 	subs.w	ip, r5, r3
 800088c:	bf04      	itt	eq
 800088e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000892:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000896:	f150 0000 	adcs.w	r0, r0, #0
 800089a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800089e:	bd70      	pop	{r4, r5, r6, pc}
 80008a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ac:	bfc2      	ittt	gt
 80008ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008b6:	bd70      	popgt	{r4, r5, r6, pc}
 80008b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008bc:	f04f 0e00 	mov.w	lr, #0
 80008c0:	3c01      	subs	r4, #1
 80008c2:	e690      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008c4:	ea45 0e06 	orr.w	lr, r5, r6
 80008c8:	e68d      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	bf08      	it	eq
 80008d4:	ea95 0f0c 	teqeq	r5, ip
 80008d8:	f43f af3b 	beq.w	8000752 <__aeabi_dmul+0x24a>
 80008dc:	ea94 0f0c 	teq	r4, ip
 80008e0:	d10a      	bne.n	80008f8 <__aeabi_ddiv+0x19c>
 80008e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008e6:	f47f af34 	bne.w	8000752 <__aeabi_dmul+0x24a>
 80008ea:	ea95 0f0c 	teq	r5, ip
 80008ee:	f47f af25 	bne.w	800073c <__aeabi_dmul+0x234>
 80008f2:	4610      	mov	r0, r2
 80008f4:	4619      	mov	r1, r3
 80008f6:	e72c      	b.n	8000752 <__aeabi_dmul+0x24a>
 80008f8:	ea95 0f0c 	teq	r5, ip
 80008fc:	d106      	bne.n	800090c <__aeabi_ddiv+0x1b0>
 80008fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000902:	f43f aefd 	beq.w	8000700 <__aeabi_dmul+0x1f8>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e722      	b.n	8000752 <__aeabi_dmul+0x24a>
 800090c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000916:	f47f aec5 	bne.w	80006a4 <__aeabi_dmul+0x19c>
 800091a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800091e:	f47f af0d 	bne.w	800073c <__aeabi_dmul+0x234>
 8000922:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000926:	f47f aeeb 	bne.w	8000700 <__aeabi_dmul+0x1f8>
 800092a:	e712      	b.n	8000752 <__aeabi_dmul+0x24a>

0800092c <__gedf2>:
 800092c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000930:	e006      	b.n	8000940 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__ledf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	e002      	b.n	8000940 <__cmpdf2+0x4>
 800093a:	bf00      	nop

0800093c <__cmpdf2>:
 800093c:	f04f 0c01 	mov.w	ip, #1
 8000940:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000944:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000948:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800094c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000956:	d01b      	beq.n	8000990 <__cmpdf2+0x54>
 8000958:	b001      	add	sp, #4
 800095a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800095e:	bf0c      	ite	eq
 8000960:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000964:	ea91 0f03 	teqne	r1, r3
 8000968:	bf02      	ittt	eq
 800096a:	ea90 0f02 	teqeq	r0, r2
 800096e:	2000      	moveq	r0, #0
 8000970:	4770      	bxeq	lr
 8000972:	f110 0f00 	cmn.w	r0, #0
 8000976:	ea91 0f03 	teq	r1, r3
 800097a:	bf58      	it	pl
 800097c:	4299      	cmppl	r1, r3
 800097e:	bf08      	it	eq
 8000980:	4290      	cmpeq	r0, r2
 8000982:	bf2c      	ite	cs
 8000984:	17d8      	asrcs	r0, r3, #31
 8000986:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098a:	f040 0001 	orr.w	r0, r0, #1
 800098e:	4770      	bx	lr
 8000990:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d102      	bne.n	80009a0 <__cmpdf2+0x64>
 800099a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800099e:	d107      	bne.n	80009b0 <__cmpdf2+0x74>
 80009a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	d1d6      	bne.n	8000958 <__cmpdf2+0x1c>
 80009aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ae:	d0d3      	beq.n	8000958 <__cmpdf2+0x1c>
 80009b0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdrcmple>:
 80009b8:	4684      	mov	ip, r0
 80009ba:	4610      	mov	r0, r2
 80009bc:	4662      	mov	r2, ip
 80009be:	468c      	mov	ip, r1
 80009c0:	4619      	mov	r1, r3
 80009c2:	4663      	mov	r3, ip
 80009c4:	e000      	b.n	80009c8 <__aeabi_cdcmpeq>
 80009c6:	bf00      	nop

080009c8 <__aeabi_cdcmpeq>:
 80009c8:	b501      	push	{r0, lr}
 80009ca:	f7ff ffb7 	bl	800093c <__cmpdf2>
 80009ce:	2800      	cmp	r0, #0
 80009d0:	bf48      	it	mi
 80009d2:	f110 0f00 	cmnmi.w	r0, #0
 80009d6:	bd01      	pop	{r0, pc}

080009d8 <__aeabi_dcmpeq>:
 80009d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009dc:	f7ff fff4 	bl	80009c8 <__aeabi_cdcmpeq>
 80009e0:	bf0c      	ite	eq
 80009e2:	2001      	moveq	r0, #1
 80009e4:	2000      	movne	r0, #0
 80009e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ea:	bf00      	nop

080009ec <__aeabi_dcmplt>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff ffea 	bl	80009c8 <__aeabi_cdcmpeq>
 80009f4:	bf34      	ite	cc
 80009f6:	2001      	movcc	r0, #1
 80009f8:	2000      	movcs	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmple>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffe0 	bl	80009c8 <__aeabi_cdcmpeq>
 8000a08:	bf94      	ite	ls
 8000a0a:	2001      	movls	r0, #1
 8000a0c:	2000      	movhi	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmpge>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffce 	bl	80009b8 <__aeabi_cdrcmple>
 8000a1c:	bf94      	ite	ls
 8000a1e:	2001      	movls	r0, #1
 8000a20:	2000      	movhi	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_dcmpgt>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffc4 	bl	80009b8 <__aeabi_cdrcmple>
 8000a30:	bf34      	ite	cc
 8000a32:	2001      	movcc	r0, #1
 8000a34:	2000      	movcs	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmpun>:
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x10>
 8000a46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4a:	d10a      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	d102      	bne.n	8000a5c <__aeabi_dcmpun+0x20>
 8000a56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0001 	mov.w	r0, #1
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_d2iz>:
 8000a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a70:	d215      	bcs.n	8000a9e <__aeabi_d2iz+0x36>
 8000a72:	d511      	bpl.n	8000a98 <__aeabi_d2iz+0x30>
 8000a74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a7c:	d912      	bls.n	8000aa4 <__aeabi_d2iz+0x3c>
 8000a7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	bf18      	it	ne
 8000a94:	4240      	negne	r0, r0
 8000a96:	4770      	bx	lr
 8000a98:	f04f 0000 	mov.w	r0, #0
 8000a9c:	4770      	bx	lr
 8000a9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa2:	d105      	bne.n	8000ab0 <__aeabi_d2iz+0x48>
 8000aa4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aa8:	bf08      	it	eq
 8000aaa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_d2f>:
 8000ab8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000abc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ac0:	bf24      	itt	cs
 8000ac2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ac6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aca:	d90d      	bls.n	8000ae8 <__aeabi_d2f+0x30>
 8000acc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ad0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ad4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000adc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ae0:	bf08      	it	eq
 8000ae2:	f020 0001 	biceq.w	r0, r0, #1
 8000ae6:	4770      	bx	lr
 8000ae8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aec:	d121      	bne.n	8000b32 <__aeabi_d2f+0x7a>
 8000aee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000af2:	bfbc      	itt	lt
 8000af4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af8:	4770      	bxlt	lr
 8000afa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000afe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b02:	f1c2 0218 	rsb	r2, r2, #24
 8000b06:	f1c2 0c20 	rsb	ip, r2, #32
 8000b0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b12:	bf18      	it	ne
 8000b14:	f040 0001 	orrne.w	r0, r0, #1
 8000b18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b24:	ea40 000c 	orr.w	r0, r0, ip
 8000b28:	fa23 f302 	lsr.w	r3, r3, r2
 8000b2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b30:	e7cc      	b.n	8000acc <__aeabi_d2f+0x14>
 8000b32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b36:	d107      	bne.n	8000b48 <__aeabi_d2f+0x90>
 8000b38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b3c:	bf1e      	ittt	ne
 8000b3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b46:	4770      	bxne	lr
 8000b48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_frsub>:
 8000b58:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b5c:	e002      	b.n	8000b64 <__addsf3>
 8000b5e:	bf00      	nop

08000b60 <__aeabi_fsub>:
 8000b60:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b64 <__addsf3>:
 8000b64:	0042      	lsls	r2, r0, #1
 8000b66:	bf1f      	itttt	ne
 8000b68:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b6c:	ea92 0f03 	teqne	r2, r3
 8000b70:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b74:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b78:	d06a      	beq.n	8000c50 <__addsf3+0xec>
 8000b7a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b7e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b82:	bfc1      	itttt	gt
 8000b84:	18d2      	addgt	r2, r2, r3
 8000b86:	4041      	eorgt	r1, r0
 8000b88:	4048      	eorgt	r0, r1
 8000b8a:	4041      	eorgt	r1, r0
 8000b8c:	bfb8      	it	lt
 8000b8e:	425b      	neglt	r3, r3
 8000b90:	2b19      	cmp	r3, #25
 8000b92:	bf88      	it	hi
 8000b94:	4770      	bxhi	lr
 8000b96:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b9e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000baa:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bae:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4249      	negne	r1, r1
 8000bb6:	ea92 0f03 	teq	r2, r3
 8000bba:	d03f      	beq.n	8000c3c <__addsf3+0xd8>
 8000bbc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bc0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bc4:	eb10 000c 	adds.w	r0, r0, ip
 8000bc8:	f1c3 0320 	rsb	r3, r3, #32
 8000bcc:	fa01 f103 	lsl.w	r1, r1, r3
 8000bd0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bd4:	d502      	bpl.n	8000bdc <__addsf3+0x78>
 8000bd6:	4249      	negs	r1, r1
 8000bd8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bdc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000be0:	d313      	bcc.n	8000c0a <__addsf3+0xa6>
 8000be2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000be6:	d306      	bcc.n	8000bf6 <__addsf3+0x92>
 8000be8:	0840      	lsrs	r0, r0, #1
 8000bea:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bee:	f102 0201 	add.w	r2, r2, #1
 8000bf2:	2afe      	cmp	r2, #254	; 0xfe
 8000bf4:	d251      	bcs.n	8000c9a <__addsf3+0x136>
 8000bf6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bfa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bfe:	bf08      	it	eq
 8000c00:	f020 0001 	biceq.w	r0, r0, #1
 8000c04:	ea40 0003 	orr.w	r0, r0, r3
 8000c08:	4770      	bx	lr
 8000c0a:	0049      	lsls	r1, r1, #1
 8000c0c:	eb40 0000 	adc.w	r0, r0, r0
 8000c10:	3a01      	subs	r2, #1
 8000c12:	bf28      	it	cs
 8000c14:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c18:	d2ed      	bcs.n	8000bf6 <__addsf3+0x92>
 8000c1a:	fab0 fc80 	clz	ip, r0
 8000c1e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c22:	ebb2 020c 	subs.w	r2, r2, ip
 8000c26:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c2a:	bfaa      	itet	ge
 8000c2c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c30:	4252      	neglt	r2, r2
 8000c32:	4318      	orrge	r0, r3
 8000c34:	bfbc      	itt	lt
 8000c36:	40d0      	lsrlt	r0, r2
 8000c38:	4318      	orrlt	r0, r3
 8000c3a:	4770      	bx	lr
 8000c3c:	f092 0f00 	teq	r2, #0
 8000c40:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c44:	bf06      	itte	eq
 8000c46:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c4a:	3201      	addeq	r2, #1
 8000c4c:	3b01      	subne	r3, #1
 8000c4e:	e7b5      	b.n	8000bbc <__addsf3+0x58>
 8000c50:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c54:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c58:	bf18      	it	ne
 8000c5a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c5e:	d021      	beq.n	8000ca4 <__addsf3+0x140>
 8000c60:	ea92 0f03 	teq	r2, r3
 8000c64:	d004      	beq.n	8000c70 <__addsf3+0x10c>
 8000c66:	f092 0f00 	teq	r2, #0
 8000c6a:	bf08      	it	eq
 8000c6c:	4608      	moveq	r0, r1
 8000c6e:	4770      	bx	lr
 8000c70:	ea90 0f01 	teq	r0, r1
 8000c74:	bf1c      	itt	ne
 8000c76:	2000      	movne	r0, #0
 8000c78:	4770      	bxne	lr
 8000c7a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c7e:	d104      	bne.n	8000c8a <__addsf3+0x126>
 8000c80:	0040      	lsls	r0, r0, #1
 8000c82:	bf28      	it	cs
 8000c84:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c88:	4770      	bx	lr
 8000c8a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c8e:	bf3c      	itt	cc
 8000c90:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bxcc	lr
 8000c96:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c9a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c9e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca2:	4770      	bx	lr
 8000ca4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ca8:	bf16      	itet	ne
 8000caa:	4608      	movne	r0, r1
 8000cac:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cb0:	4601      	movne	r1, r0
 8000cb2:	0242      	lsls	r2, r0, #9
 8000cb4:	bf06      	itte	eq
 8000cb6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cba:	ea90 0f01 	teqeq	r0, r1
 8000cbe:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cc2:	4770      	bx	lr

08000cc4 <__aeabi_ui2f>:
 8000cc4:	f04f 0300 	mov.w	r3, #0
 8000cc8:	e004      	b.n	8000cd4 <__aeabi_i2f+0x8>
 8000cca:	bf00      	nop

08000ccc <__aeabi_i2f>:
 8000ccc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cd0:	bf48      	it	mi
 8000cd2:	4240      	negmi	r0, r0
 8000cd4:	ea5f 0c00 	movs.w	ip, r0
 8000cd8:	bf08      	it	eq
 8000cda:	4770      	bxeq	lr
 8000cdc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ce0:	4601      	mov	r1, r0
 8000ce2:	f04f 0000 	mov.w	r0, #0
 8000ce6:	e01c      	b.n	8000d22 <__aeabi_l2f+0x2a>

08000ce8 <__aeabi_ul2f>:
 8000ce8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cec:	bf08      	it	eq
 8000cee:	4770      	bxeq	lr
 8000cf0:	f04f 0300 	mov.w	r3, #0
 8000cf4:	e00a      	b.n	8000d0c <__aeabi_l2f+0x14>
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_l2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d04:	d502      	bpl.n	8000d0c <__aeabi_l2f+0x14>
 8000d06:	4240      	negs	r0, r0
 8000d08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0c:	ea5f 0c01 	movs.w	ip, r1
 8000d10:	bf02      	ittt	eq
 8000d12:	4684      	moveq	ip, r0
 8000d14:	4601      	moveq	r1, r0
 8000d16:	2000      	moveq	r0, #0
 8000d18:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d1c:	bf08      	it	eq
 8000d1e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d22:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d26:	fabc f28c 	clz	r2, ip
 8000d2a:	3a08      	subs	r2, #8
 8000d2c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d30:	db10      	blt.n	8000d54 <__aeabi_l2f+0x5c>
 8000d32:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d36:	4463      	add	r3, ip
 8000d38:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d3c:	f1c2 0220 	rsb	r2, r2, #32
 8000d40:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d44:	fa20 f202 	lsr.w	r2, r0, r2
 8000d48:	eb43 0002 	adc.w	r0, r3, r2
 8000d4c:	bf08      	it	eq
 8000d4e:	f020 0001 	biceq.w	r0, r0, #1
 8000d52:	4770      	bx	lr
 8000d54:	f102 0220 	add.w	r2, r2, #32
 8000d58:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5c:	f1c2 0220 	rsb	r2, r2, #32
 8000d60:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d64:	fa21 f202 	lsr.w	r2, r1, r2
 8000d68:	eb43 0002 	adc.w	r0, r3, r2
 8000d6c:	bf08      	it	eq
 8000d6e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d72:	4770      	bx	lr

08000d74 <__aeabi_fmul>:
 8000d74:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d78:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d7c:	bf1e      	ittt	ne
 8000d7e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d82:	ea92 0f0c 	teqne	r2, ip
 8000d86:	ea93 0f0c 	teqne	r3, ip
 8000d8a:	d06f      	beq.n	8000e6c <__aeabi_fmul+0xf8>
 8000d8c:	441a      	add	r2, r3
 8000d8e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d92:	0240      	lsls	r0, r0, #9
 8000d94:	bf18      	it	ne
 8000d96:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d9a:	d01e      	beq.n	8000dda <__aeabi_fmul+0x66>
 8000d9c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000da0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000da4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000da8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dac:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000db0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000db4:	bf3e      	ittt	cc
 8000db6:	0049      	lslcc	r1, r1, #1
 8000db8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dbc:	005b      	lslcc	r3, r3, #1
 8000dbe:	ea40 0001 	orr.w	r0, r0, r1
 8000dc2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dc6:	2afd      	cmp	r2, #253	; 0xfd
 8000dc8:	d81d      	bhi.n	8000e06 <__aeabi_fmul+0x92>
 8000dca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dd2:	bf08      	it	eq
 8000dd4:	f020 0001 	biceq.w	r0, r0, #1
 8000dd8:	4770      	bx	lr
 8000dda:	f090 0f00 	teq	r0, #0
 8000dde:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000de2:	bf08      	it	eq
 8000de4:	0249      	lsleq	r1, r1, #9
 8000de6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dea:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dee:	3a7f      	subs	r2, #127	; 0x7f
 8000df0:	bfc2      	ittt	gt
 8000df2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000df6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dfa:	4770      	bxgt	lr
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	f04f 0300 	mov.w	r3, #0
 8000e04:	3a01      	subs	r2, #1
 8000e06:	dc5d      	bgt.n	8000ec4 <__aeabi_fmul+0x150>
 8000e08:	f112 0f19 	cmn.w	r2, #25
 8000e0c:	bfdc      	itt	le
 8000e0e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e12:	4770      	bxle	lr
 8000e14:	f1c2 0200 	rsb	r2, r2, #0
 8000e18:	0041      	lsls	r1, r0, #1
 8000e1a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e1e:	f1c2 0220 	rsb	r2, r2, #32
 8000e22:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e26:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e2a:	f140 0000 	adc.w	r0, r0, #0
 8000e2e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e32:	bf08      	it	eq
 8000e34:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e38:	4770      	bx	lr
 8000e3a:	f092 0f00 	teq	r2, #0
 8000e3e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e42:	bf02      	ittt	eq
 8000e44:	0040      	lsleq	r0, r0, #1
 8000e46:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e4a:	3a01      	subeq	r2, #1
 8000e4c:	d0f9      	beq.n	8000e42 <__aeabi_fmul+0xce>
 8000e4e:	ea40 000c 	orr.w	r0, r0, ip
 8000e52:	f093 0f00 	teq	r3, #0
 8000e56:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e5a:	bf02      	ittt	eq
 8000e5c:	0049      	lsleq	r1, r1, #1
 8000e5e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e62:	3b01      	subeq	r3, #1
 8000e64:	d0f9      	beq.n	8000e5a <__aeabi_fmul+0xe6>
 8000e66:	ea41 010c 	orr.w	r1, r1, ip
 8000e6a:	e78f      	b.n	8000d8c <__aeabi_fmul+0x18>
 8000e6c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e70:	ea92 0f0c 	teq	r2, ip
 8000e74:	bf18      	it	ne
 8000e76:	ea93 0f0c 	teqne	r3, ip
 8000e7a:	d00a      	beq.n	8000e92 <__aeabi_fmul+0x11e>
 8000e7c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e80:	bf18      	it	ne
 8000e82:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e86:	d1d8      	bne.n	8000e3a <__aeabi_fmul+0xc6>
 8000e88:	ea80 0001 	eor.w	r0, r0, r1
 8000e8c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e90:	4770      	bx	lr
 8000e92:	f090 0f00 	teq	r0, #0
 8000e96:	bf17      	itett	ne
 8000e98:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e9c:	4608      	moveq	r0, r1
 8000e9e:	f091 0f00 	teqne	r1, #0
 8000ea2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000ea6:	d014      	beq.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ea8:	ea92 0f0c 	teq	r2, ip
 8000eac:	d101      	bne.n	8000eb2 <__aeabi_fmul+0x13e>
 8000eae:	0242      	lsls	r2, r0, #9
 8000eb0:	d10f      	bne.n	8000ed2 <__aeabi_fmul+0x15e>
 8000eb2:	ea93 0f0c 	teq	r3, ip
 8000eb6:	d103      	bne.n	8000ec0 <__aeabi_fmul+0x14c>
 8000eb8:	024b      	lsls	r3, r1, #9
 8000eba:	bf18      	it	ne
 8000ebc:	4608      	movne	r0, r1
 8000ebe:	d108      	bne.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ec0:	ea80 0001 	eor.w	r0, r0, r1
 8000ec4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ec8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ecc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ed0:	4770      	bx	lr
 8000ed2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ed6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eda:	4770      	bx	lr

08000edc <__aeabi_fdiv>:
 8000edc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ee0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ee4:	bf1e      	ittt	ne
 8000ee6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eea:	ea92 0f0c 	teqne	r2, ip
 8000eee:	ea93 0f0c 	teqne	r3, ip
 8000ef2:	d069      	beq.n	8000fc8 <__aeabi_fdiv+0xec>
 8000ef4:	eba2 0203 	sub.w	r2, r2, r3
 8000ef8:	ea80 0c01 	eor.w	ip, r0, r1
 8000efc:	0249      	lsls	r1, r1, #9
 8000efe:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f02:	d037      	beq.n	8000f74 <__aeabi_fdiv+0x98>
 8000f04:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f08:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f0c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f10:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f14:	428b      	cmp	r3, r1
 8000f16:	bf38      	it	cc
 8000f18:	005b      	lslcc	r3, r3, #1
 8000f1a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f1e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f22:	428b      	cmp	r3, r1
 8000f24:	bf24      	itt	cs
 8000f26:	1a5b      	subcs	r3, r3, r1
 8000f28:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f2c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f30:	bf24      	itt	cs
 8000f32:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f36:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f3a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f3e:	bf24      	itt	cs
 8000f40:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f44:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f48:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f4c:	bf24      	itt	cs
 8000f4e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f52:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f56:	011b      	lsls	r3, r3, #4
 8000f58:	bf18      	it	ne
 8000f5a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f5e:	d1e0      	bne.n	8000f22 <__aeabi_fdiv+0x46>
 8000f60:	2afd      	cmp	r2, #253	; 0xfd
 8000f62:	f63f af50 	bhi.w	8000e06 <__aeabi_fmul+0x92>
 8000f66:	428b      	cmp	r3, r1
 8000f68:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f6c:	bf08      	it	eq
 8000f6e:	f020 0001 	biceq.w	r0, r0, #1
 8000f72:	4770      	bx	lr
 8000f74:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f78:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f7c:	327f      	adds	r2, #127	; 0x7f
 8000f7e:	bfc2      	ittt	gt
 8000f80:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f84:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f88:	4770      	bxgt	lr
 8000f8a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f8e:	f04f 0300 	mov.w	r3, #0
 8000f92:	3a01      	subs	r2, #1
 8000f94:	e737      	b.n	8000e06 <__aeabi_fmul+0x92>
 8000f96:	f092 0f00 	teq	r2, #0
 8000f9a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f9e:	bf02      	ittt	eq
 8000fa0:	0040      	lsleq	r0, r0, #1
 8000fa2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fa6:	3a01      	subeq	r2, #1
 8000fa8:	d0f9      	beq.n	8000f9e <__aeabi_fdiv+0xc2>
 8000faa:	ea40 000c 	orr.w	r0, r0, ip
 8000fae:	f093 0f00 	teq	r3, #0
 8000fb2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fb6:	bf02      	ittt	eq
 8000fb8:	0049      	lsleq	r1, r1, #1
 8000fba:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fbe:	3b01      	subeq	r3, #1
 8000fc0:	d0f9      	beq.n	8000fb6 <__aeabi_fdiv+0xda>
 8000fc2:	ea41 010c 	orr.w	r1, r1, ip
 8000fc6:	e795      	b.n	8000ef4 <__aeabi_fdiv+0x18>
 8000fc8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fcc:	ea92 0f0c 	teq	r2, ip
 8000fd0:	d108      	bne.n	8000fe4 <__aeabi_fdiv+0x108>
 8000fd2:	0242      	lsls	r2, r0, #9
 8000fd4:	f47f af7d 	bne.w	8000ed2 <__aeabi_fmul+0x15e>
 8000fd8:	ea93 0f0c 	teq	r3, ip
 8000fdc:	f47f af70 	bne.w	8000ec0 <__aeabi_fmul+0x14c>
 8000fe0:	4608      	mov	r0, r1
 8000fe2:	e776      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8000fe4:	ea93 0f0c 	teq	r3, ip
 8000fe8:	d104      	bne.n	8000ff4 <__aeabi_fdiv+0x118>
 8000fea:	024b      	lsls	r3, r1, #9
 8000fec:	f43f af4c 	beq.w	8000e88 <__aeabi_fmul+0x114>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e76e      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8000ff4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ff8:	bf18      	it	ne
 8000ffa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ffe:	d1ca      	bne.n	8000f96 <__aeabi_fdiv+0xba>
 8001000:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001004:	f47f af5c 	bne.w	8000ec0 <__aeabi_fmul+0x14c>
 8001008:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800100c:	f47f af3c 	bne.w	8000e88 <__aeabi_fmul+0x114>
 8001010:	e75f      	b.n	8000ed2 <__aeabi_fmul+0x15e>
 8001012:	bf00      	nop

08001014 <__aeabi_uldivmod>:
 8001014:	b953      	cbnz	r3, 800102c <__aeabi_uldivmod+0x18>
 8001016:	b94a      	cbnz	r2, 800102c <__aeabi_uldivmod+0x18>
 8001018:	2900      	cmp	r1, #0
 800101a:	bf08      	it	eq
 800101c:	2800      	cmpeq	r0, #0
 800101e:	bf1c      	itt	ne
 8001020:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8001024:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8001028:	f000 b976 	b.w	8001318 <__aeabi_idiv0>
 800102c:	f1ad 0c08 	sub.w	ip, sp, #8
 8001030:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001034:	f000 f806 	bl	8001044 <__udivmoddi4>
 8001038:	f8dd e004 	ldr.w	lr, [sp, #4]
 800103c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001040:	b004      	add	sp, #16
 8001042:	4770      	bx	lr

08001044 <__udivmoddi4>:
 8001044:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001048:	9e08      	ldr	r6, [sp, #32]
 800104a:	460d      	mov	r5, r1
 800104c:	4604      	mov	r4, r0
 800104e:	4688      	mov	r8, r1
 8001050:	2b00      	cmp	r3, #0
 8001052:	d14d      	bne.n	80010f0 <__udivmoddi4+0xac>
 8001054:	428a      	cmp	r2, r1
 8001056:	4694      	mov	ip, r2
 8001058:	d968      	bls.n	800112c <__udivmoddi4+0xe8>
 800105a:	fab2 f282 	clz	r2, r2
 800105e:	b152      	cbz	r2, 8001076 <__udivmoddi4+0x32>
 8001060:	fa01 f302 	lsl.w	r3, r1, r2
 8001064:	f1c2 0120 	rsb	r1, r2, #32
 8001068:	fa20 f101 	lsr.w	r1, r0, r1
 800106c:	fa0c fc02 	lsl.w	ip, ip, r2
 8001070:	ea41 0803 	orr.w	r8, r1, r3
 8001074:	4094      	lsls	r4, r2
 8001076:	ea4f 411c 	mov.w	r1, ip, lsr #16
 800107a:	fbb8 f7f1 	udiv	r7, r8, r1
 800107e:	fa1f fe8c 	uxth.w	lr, ip
 8001082:	fb01 8817 	mls	r8, r1, r7, r8
 8001086:	fb07 f00e 	mul.w	r0, r7, lr
 800108a:	0c23      	lsrs	r3, r4, #16
 800108c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8001090:	4298      	cmp	r0, r3
 8001092:	d90a      	bls.n	80010aa <__udivmoddi4+0x66>
 8001094:	eb1c 0303 	adds.w	r3, ip, r3
 8001098:	f107 35ff 	add.w	r5, r7, #4294967295	; 0xffffffff
 800109c:	f080 811e 	bcs.w	80012dc <__udivmoddi4+0x298>
 80010a0:	4298      	cmp	r0, r3
 80010a2:	f240 811b 	bls.w	80012dc <__udivmoddi4+0x298>
 80010a6:	3f02      	subs	r7, #2
 80010a8:	4463      	add	r3, ip
 80010aa:	1a1b      	subs	r3, r3, r0
 80010ac:	fbb3 f0f1 	udiv	r0, r3, r1
 80010b0:	fb01 3310 	mls	r3, r1, r0, r3
 80010b4:	fb00 fe0e 	mul.w	lr, r0, lr
 80010b8:	b2a4      	uxth	r4, r4
 80010ba:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80010be:	45a6      	cmp	lr, r4
 80010c0:	d90a      	bls.n	80010d8 <__udivmoddi4+0x94>
 80010c2:	eb1c 0404 	adds.w	r4, ip, r4
 80010c6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80010ca:	f080 8109 	bcs.w	80012e0 <__udivmoddi4+0x29c>
 80010ce:	45a6      	cmp	lr, r4
 80010d0:	f240 8106 	bls.w	80012e0 <__udivmoddi4+0x29c>
 80010d4:	4464      	add	r4, ip
 80010d6:	3802      	subs	r0, #2
 80010d8:	2100      	movs	r1, #0
 80010da:	eba4 040e 	sub.w	r4, r4, lr
 80010de:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80010e2:	b11e      	cbz	r6, 80010ec <__udivmoddi4+0xa8>
 80010e4:	2300      	movs	r3, #0
 80010e6:	40d4      	lsrs	r4, r2
 80010e8:	e9c6 4300 	strd	r4, r3, [r6]
 80010ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010f0:	428b      	cmp	r3, r1
 80010f2:	d908      	bls.n	8001106 <__udivmoddi4+0xc2>
 80010f4:	2e00      	cmp	r6, #0
 80010f6:	f000 80ee 	beq.w	80012d6 <__udivmoddi4+0x292>
 80010fa:	2100      	movs	r1, #0
 80010fc:	e9c6 0500 	strd	r0, r5, [r6]
 8001100:	4608      	mov	r0, r1
 8001102:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001106:	fab3 f183 	clz	r1, r3
 800110a:	2900      	cmp	r1, #0
 800110c:	d14a      	bne.n	80011a4 <__udivmoddi4+0x160>
 800110e:	42ab      	cmp	r3, r5
 8001110:	d302      	bcc.n	8001118 <__udivmoddi4+0xd4>
 8001112:	4282      	cmp	r2, r0
 8001114:	f200 80fc 	bhi.w	8001310 <__udivmoddi4+0x2cc>
 8001118:	1a84      	subs	r4, r0, r2
 800111a:	eb65 0303 	sbc.w	r3, r5, r3
 800111e:	2001      	movs	r0, #1
 8001120:	4698      	mov	r8, r3
 8001122:	2e00      	cmp	r6, #0
 8001124:	d0e2      	beq.n	80010ec <__udivmoddi4+0xa8>
 8001126:	e9c6 4800 	strd	r4, r8, [r6]
 800112a:	e7df      	b.n	80010ec <__udivmoddi4+0xa8>
 800112c:	b902      	cbnz	r2, 8001130 <__udivmoddi4+0xec>
 800112e:	deff      	udf	#255	; 0xff
 8001130:	fab2 f282 	clz	r2, r2
 8001134:	2a00      	cmp	r2, #0
 8001136:	f040 8091 	bne.w	800125c <__udivmoddi4+0x218>
 800113a:	eba1 000c 	sub.w	r0, r1, ip
 800113e:	2101      	movs	r1, #1
 8001140:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001144:	fa1f fe8c 	uxth.w	lr, ip
 8001148:	fbb0 f3f7 	udiv	r3, r0, r7
 800114c:	fb07 0013 	mls	r0, r7, r3, r0
 8001150:	0c25      	lsrs	r5, r4, #16
 8001152:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8001156:	fb0e f003 	mul.w	r0, lr, r3
 800115a:	42a8      	cmp	r0, r5
 800115c:	d908      	bls.n	8001170 <__udivmoddi4+0x12c>
 800115e:	eb1c 0505 	adds.w	r5, ip, r5
 8001162:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8001166:	d202      	bcs.n	800116e <__udivmoddi4+0x12a>
 8001168:	42a8      	cmp	r0, r5
 800116a:	f200 80ce 	bhi.w	800130a <__udivmoddi4+0x2c6>
 800116e:	4643      	mov	r3, r8
 8001170:	1a2d      	subs	r5, r5, r0
 8001172:	fbb5 f0f7 	udiv	r0, r5, r7
 8001176:	fb07 5510 	mls	r5, r7, r0, r5
 800117a:	fb0e fe00 	mul.w	lr, lr, r0
 800117e:	b2a4      	uxth	r4, r4
 8001180:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8001184:	45a6      	cmp	lr, r4
 8001186:	d908      	bls.n	800119a <__udivmoddi4+0x156>
 8001188:	eb1c 0404 	adds.w	r4, ip, r4
 800118c:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8001190:	d202      	bcs.n	8001198 <__udivmoddi4+0x154>
 8001192:	45a6      	cmp	lr, r4
 8001194:	f200 80b6 	bhi.w	8001304 <__udivmoddi4+0x2c0>
 8001198:	4628      	mov	r0, r5
 800119a:	eba4 040e 	sub.w	r4, r4, lr
 800119e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80011a2:	e79e      	b.n	80010e2 <__udivmoddi4+0x9e>
 80011a4:	f1c1 0720 	rsb	r7, r1, #32
 80011a8:	408b      	lsls	r3, r1
 80011aa:	fa22 fc07 	lsr.w	ip, r2, r7
 80011ae:	ea4c 0c03 	orr.w	ip, ip, r3
 80011b2:	fa25 fa07 	lsr.w	sl, r5, r7
 80011b6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80011ba:	fbba f8f9 	udiv	r8, sl, r9
 80011be:	fa20 f307 	lsr.w	r3, r0, r7
 80011c2:	fb09 aa18 	mls	sl, r9, r8, sl
 80011c6:	408d      	lsls	r5, r1
 80011c8:	fa1f fe8c 	uxth.w	lr, ip
 80011cc:	431d      	orrs	r5, r3
 80011ce:	fa00 f301 	lsl.w	r3, r0, r1
 80011d2:	fb08 f00e 	mul.w	r0, r8, lr
 80011d6:	0c2c      	lsrs	r4, r5, #16
 80011d8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80011dc:	42a0      	cmp	r0, r4
 80011de:	fa02 f201 	lsl.w	r2, r2, r1
 80011e2:	d90b      	bls.n	80011fc <__udivmoddi4+0x1b8>
 80011e4:	eb1c 0404 	adds.w	r4, ip, r4
 80011e8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80011ec:	f080 8088 	bcs.w	8001300 <__udivmoddi4+0x2bc>
 80011f0:	42a0      	cmp	r0, r4
 80011f2:	f240 8085 	bls.w	8001300 <__udivmoddi4+0x2bc>
 80011f6:	f1a8 0802 	sub.w	r8, r8, #2
 80011fa:	4464      	add	r4, ip
 80011fc:	1a24      	subs	r4, r4, r0
 80011fe:	fbb4 f0f9 	udiv	r0, r4, r9
 8001202:	fb09 4410 	mls	r4, r9, r0, r4
 8001206:	fb00 fe0e 	mul.w	lr, r0, lr
 800120a:	b2ad      	uxth	r5, r5
 800120c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8001210:	45a6      	cmp	lr, r4
 8001212:	d908      	bls.n	8001226 <__udivmoddi4+0x1e2>
 8001214:	eb1c 0404 	adds.w	r4, ip, r4
 8001218:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 800121c:	d26c      	bcs.n	80012f8 <__udivmoddi4+0x2b4>
 800121e:	45a6      	cmp	lr, r4
 8001220:	d96a      	bls.n	80012f8 <__udivmoddi4+0x2b4>
 8001222:	3802      	subs	r0, #2
 8001224:	4464      	add	r4, ip
 8001226:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800122a:	fba0 9502 	umull	r9, r5, r0, r2
 800122e:	eba4 040e 	sub.w	r4, r4, lr
 8001232:	42ac      	cmp	r4, r5
 8001234:	46c8      	mov	r8, r9
 8001236:	46ae      	mov	lr, r5
 8001238:	d356      	bcc.n	80012e8 <__udivmoddi4+0x2a4>
 800123a:	d053      	beq.n	80012e4 <__udivmoddi4+0x2a0>
 800123c:	2e00      	cmp	r6, #0
 800123e:	d069      	beq.n	8001314 <__udivmoddi4+0x2d0>
 8001240:	ebb3 0208 	subs.w	r2, r3, r8
 8001244:	eb64 040e 	sbc.w	r4, r4, lr
 8001248:	fa22 f301 	lsr.w	r3, r2, r1
 800124c:	fa04 f707 	lsl.w	r7, r4, r7
 8001250:	431f      	orrs	r7, r3
 8001252:	40cc      	lsrs	r4, r1
 8001254:	e9c6 7400 	strd	r7, r4, [r6]
 8001258:	2100      	movs	r1, #0
 800125a:	e747      	b.n	80010ec <__udivmoddi4+0xa8>
 800125c:	fa0c fc02 	lsl.w	ip, ip, r2
 8001260:	f1c2 0120 	rsb	r1, r2, #32
 8001264:	fa25 f301 	lsr.w	r3, r5, r1
 8001268:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800126c:	fa20 f101 	lsr.w	r1, r0, r1
 8001270:	4095      	lsls	r5, r2
 8001272:	430d      	orrs	r5, r1
 8001274:	fbb3 f1f7 	udiv	r1, r3, r7
 8001278:	fb07 3311 	mls	r3, r7, r1, r3
 800127c:	fa1f fe8c 	uxth.w	lr, ip
 8001280:	0c28      	lsrs	r0, r5, #16
 8001282:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001286:	fb01 f30e 	mul.w	r3, r1, lr
 800128a:	4283      	cmp	r3, r0
 800128c:	fa04 f402 	lsl.w	r4, r4, r2
 8001290:	d908      	bls.n	80012a4 <__udivmoddi4+0x260>
 8001292:	eb1c 0000 	adds.w	r0, ip, r0
 8001296:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 800129a:	d22f      	bcs.n	80012fc <__udivmoddi4+0x2b8>
 800129c:	4283      	cmp	r3, r0
 800129e:	d92d      	bls.n	80012fc <__udivmoddi4+0x2b8>
 80012a0:	3902      	subs	r1, #2
 80012a2:	4460      	add	r0, ip
 80012a4:	1ac0      	subs	r0, r0, r3
 80012a6:	fbb0 f3f7 	udiv	r3, r0, r7
 80012aa:	fb07 0013 	mls	r0, r7, r3, r0
 80012ae:	b2ad      	uxth	r5, r5
 80012b0:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80012b4:	fb03 f00e 	mul.w	r0, r3, lr
 80012b8:	42a8      	cmp	r0, r5
 80012ba:	d908      	bls.n	80012ce <__udivmoddi4+0x28a>
 80012bc:	eb1c 0505 	adds.w	r5, ip, r5
 80012c0:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80012c4:	d216      	bcs.n	80012f4 <__udivmoddi4+0x2b0>
 80012c6:	42a8      	cmp	r0, r5
 80012c8:	d914      	bls.n	80012f4 <__udivmoddi4+0x2b0>
 80012ca:	3b02      	subs	r3, #2
 80012cc:	4465      	add	r5, ip
 80012ce:	1a28      	subs	r0, r5, r0
 80012d0:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80012d4:	e738      	b.n	8001148 <__udivmoddi4+0x104>
 80012d6:	4631      	mov	r1, r6
 80012d8:	4630      	mov	r0, r6
 80012da:	e707      	b.n	80010ec <__udivmoddi4+0xa8>
 80012dc:	462f      	mov	r7, r5
 80012de:	e6e4      	b.n	80010aa <__udivmoddi4+0x66>
 80012e0:	4618      	mov	r0, r3
 80012e2:	e6f9      	b.n	80010d8 <__udivmoddi4+0x94>
 80012e4:	454b      	cmp	r3, r9
 80012e6:	d2a9      	bcs.n	800123c <__udivmoddi4+0x1f8>
 80012e8:	ebb9 0802 	subs.w	r8, r9, r2
 80012ec:	eb65 0e0c 	sbc.w	lr, r5, ip
 80012f0:	3801      	subs	r0, #1
 80012f2:	e7a3      	b.n	800123c <__udivmoddi4+0x1f8>
 80012f4:	4643      	mov	r3, r8
 80012f6:	e7ea      	b.n	80012ce <__udivmoddi4+0x28a>
 80012f8:	4628      	mov	r0, r5
 80012fa:	e794      	b.n	8001226 <__udivmoddi4+0x1e2>
 80012fc:	4641      	mov	r1, r8
 80012fe:	e7d1      	b.n	80012a4 <__udivmoddi4+0x260>
 8001300:	46d0      	mov	r8, sl
 8001302:	e77b      	b.n	80011fc <__udivmoddi4+0x1b8>
 8001304:	4464      	add	r4, ip
 8001306:	3802      	subs	r0, #2
 8001308:	e747      	b.n	800119a <__udivmoddi4+0x156>
 800130a:	3b02      	subs	r3, #2
 800130c:	4465      	add	r5, ip
 800130e:	e72f      	b.n	8001170 <__udivmoddi4+0x12c>
 8001310:	4608      	mov	r0, r1
 8001312:	e706      	b.n	8001122 <__udivmoddi4+0xde>
 8001314:	4631      	mov	r1, r6
 8001316:	e6e9      	b.n	80010ec <__udivmoddi4+0xa8>

08001318 <__aeabi_idiv0>:
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop

0800131c <i2c_scanner>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void i2c_scanner(I2C_HandleTypeDef *i2c) {
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]

	printf("Scanning I2C bus:\r\n");
 8001324:	4817      	ldr	r0, [pc, #92]	; (8001384 <i2c_scanner+0x68>)
 8001326:	f005 fbeb 	bl	8006b00 <puts>
	HAL_StatusTypeDef ret;
	uint16_t i = 0;
 800132a:	2300      	movs	r3, #0
 800132c:	81fb      	strh	r3, [r7, #14]

	for (i = 1; i < 128; i++) {
 800132e:	2301      	movs	r3, #1
 8001330:	81fb      	strh	r3, [r7, #14]
 8001332:	e01c      	b.n	800136e <i2c_scanner+0x52>
		ret = HAL_I2C_IsDeviceReady(i2c, (uint16_t) (i << 1), 3, 10);
 8001334:	89fb      	ldrh	r3, [r7, #14]
 8001336:	005b      	lsls	r3, r3, #1
 8001338:	b299      	uxth	r1, r3
 800133a:	230a      	movs	r3, #10
 800133c:	2203      	movs	r2, #3
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f001 fd94 	bl	8002e6c <HAL_I2C_IsDeviceReady>
 8001344:	4603      	mov	r3, r0
 8001346:	737b      	strb	r3, [r7, #13]
		if (ret != HAL_OK) /* No ACK Received At That Address */
 8001348:	7b7b      	ldrb	r3, [r7, #13]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d003      	beq.n	8001356 <i2c_scanner+0x3a>
		{
			printf("-");
 800134e:	202d      	movs	r0, #45	; 0x2d
 8001350:	f005 fb54 	bl	80069fc <putchar>
 8001354:	e008      	b.n	8001368 <i2c_scanner+0x4c>
		} else if (ret == HAL_OK) {
 8001356:	7b7b      	ldrb	r3, [r7, #13]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d105      	bne.n	8001368 <i2c_scanner+0x4c>
			printf("0x%X",i<<1);
 800135c:	89fb      	ldrh	r3, [r7, #14]
 800135e:	005b      	lsls	r3, r3, #1
 8001360:	4619      	mov	r1, r3
 8001362:	4809      	ldr	r0, [pc, #36]	; (8001388 <i2c_scanner+0x6c>)
 8001364:	f005 fb32 	bl	80069cc <iprintf>
	for (i = 1; i < 128; i++) {
 8001368:	89fb      	ldrh	r3, [r7, #14]
 800136a:	3301      	adds	r3, #1
 800136c:	81fb      	strh	r3, [r7, #14]
 800136e:	89fb      	ldrh	r3, [r7, #14]
 8001370:	2b7f      	cmp	r3, #127	; 0x7f
 8001372:	d9df      	bls.n	8001334 <i2c_scanner+0x18>
		}
	}
	printf("\r\n");
 8001374:	4805      	ldr	r0, [pc, #20]	; (800138c <i2c_scanner+0x70>)
 8001376:	f005 fbc3 	bl	8006b00 <puts>
}
 800137a:	bf00      	nop
 800137c:	3710      	adds	r7, #16
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	08008d10 	.word	0x08008d10
 8001388:	08008d24 	.word	0x08008d24
 800138c:	08008d2c 	.word	0x08008d2c

08001390 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001390:	b5b0      	push	{r4, r5, r7, lr}
 8001392:	b086      	sub	sp, #24
 8001394:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001396:	f000 fc7b 	bl	8001c90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800139a:	f000 f83b 	bl	8001414 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800139e:	f000 f8dd 	bl	800155c <MX_GPIO_Init>
  MX_I2C1_Init();
 80013a2:	f000 f885 	bl	80014b0 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80013a6:	f000 f8af 	bl	8001508 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  i2c_scanner(&hi2c1);
 80013aa:	4817      	ldr	r0, [pc, #92]	; (8001408 <main+0x78>)
 80013ac:	f7ff ffb6 	bl	800131c <i2c_scanner>
  // Initialize and configure the SHT21 //
    SHT21_t sht21_d;
   // SHT2x_peripheral_config();
//    uint8_t check = SHT2x_init(DISABLE_OTP | RH_12_TEM_14);

    uint8_t check = SHT2x_init(DISABLE_OTP | RH_12_TEM_14);
 80013b0:	2002      	movs	r0, #2
 80013b2:	f000 fc49 	bl	8001c48 <SHT2x_init>
 80013b6:	4603      	mov	r3, r0
 80013b8:	73fb      	strb	r3, [r7, #15]
//    void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c){
//    	flag=1;
//    }

    // Confirm Initialization //
     if(check == SHT21_SUCCESS)
 80013ba:	7bfb      	ldrb	r3, [r7, #15]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d102      	bne.n	80013c6 <main+0x36>
     printf("SHT21 Initialization succesfull\n");
 80013c0:	4812      	ldr	r0, [pc, #72]	; (800140c <main+0x7c>)
 80013c2:	f005 fb9d 	bl	8006b00 <puts>
	  // Button Press //
//	     if(flag == 1)


	       // Get measurements //
	       SHT2x_CalcTemp(&sht21_d);
 80013c6:	463b      	mov	r3, r7
 80013c8:	4618      	mov	r0, r3
 80013ca:	f000 fb6d 	bl	8001aa8 <SHT2x_CalcTemp>
	       SHT2x_CalcHumid(&sht21_d);
 80013ce:	463b      	mov	r3, r7
 80013d0:	4618      	mov	r0, r3
 80013d2:	f000 fbd7 	bl	8001b84 <SHT2x_CalcHumid>
	       printf("Temp is %.3f and humidity %.3f\n", sht21_d.temperature, sht21_d.humidity);
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff f83d 	bl	8000458 <__aeabi_f2d>
 80013de:	4604      	mov	r4, r0
 80013e0:	460d      	mov	r5, r1
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff f837 	bl	8000458 <__aeabi_f2d>
 80013ea:	4602      	mov	r2, r0
 80013ec:	460b      	mov	r3, r1
 80013ee:	e9cd 2300 	strd	r2, r3, [sp]
 80013f2:	4622      	mov	r2, r4
 80013f4:	462b      	mov	r3, r5
 80013f6:	4806      	ldr	r0, [pc, #24]	; (8001410 <main+0x80>)
 80013f8:	f005 fae8 	bl	80069cc <iprintf>
	       HAL_Delay(1000);
 80013fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001400:	f000 fcb4 	bl	8001d6c <HAL_Delay>
	       SHT2x_CalcTemp(&sht21_d);
 8001404:	e7df      	b.n	80013c6 <main+0x36>
 8001406:	bf00      	nop
 8001408:	200001f8 	.word	0x200001f8
 800140c:	08008d30 	.word	0x08008d30
 8001410:	08008d50 	.word	0x08008d50

08001414 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b092      	sub	sp, #72	; 0x48
 8001418:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800141a:	f107 0314 	add.w	r3, r7, #20
 800141e:	2234      	movs	r2, #52	; 0x34
 8001420:	2100      	movs	r1, #0
 8001422:	4618      	mov	r0, r3
 8001424:	f004 fe6a 	bl	80060fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001428:	463b      	mov	r3, r7
 800142a:	2200      	movs	r2, #0
 800142c:	601a      	str	r2, [r3, #0]
 800142e:	605a      	str	r2, [r3, #4]
 8001430:	609a      	str	r2, [r3, #8]
 8001432:	60da      	str	r2, [r3, #12]
 8001434:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001436:	4b1d      	ldr	r3, [pc, #116]	; (80014ac <SystemClock_Config+0x98>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800143e:	4a1b      	ldr	r2, [pc, #108]	; (80014ac <SystemClock_Config+0x98>)
 8001440:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001444:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001446:	2302      	movs	r3, #2
 8001448:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800144a:	2301      	movs	r3, #1
 800144c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800144e:	2310      	movs	r3, #16
 8001450:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001452:	2302      	movs	r3, #2
 8001454:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001456:	2300      	movs	r3, #0
 8001458:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800145a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800145e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8001460:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8001464:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001466:	f107 0314 	add.w	r3, r7, #20
 800146a:	4618      	mov	r0, r3
 800146c:	f003 fe00 	bl	8005070 <HAL_RCC_OscConfig>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001476:	f000 f8a9 	bl	80015cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800147a:	230f      	movs	r3, #15
 800147c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800147e:	2303      	movs	r3, #3
 8001480:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001482:	2300      	movs	r3, #0
 8001484:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001486:	2300      	movs	r3, #0
 8001488:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800148a:	2300      	movs	r3, #0
 800148c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800148e:	463b      	mov	r3, r7
 8001490:	2101      	movs	r1, #1
 8001492:	4618      	mov	r0, r3
 8001494:	f004 f91c 	bl	80056d0 <HAL_RCC_ClockConfig>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800149e:	f000 f895 	bl	80015cc <Error_Handler>
  }
}
 80014a2:	bf00      	nop
 80014a4:	3748      	adds	r7, #72	; 0x48
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	40007000 	.word	0x40007000

080014b0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014b4:	4b12      	ldr	r3, [pc, #72]	; (8001500 <MX_I2C1_Init+0x50>)
 80014b6:	4a13      	ldr	r2, [pc, #76]	; (8001504 <MX_I2C1_Init+0x54>)
 80014b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100;
 80014ba:	4b11      	ldr	r3, [pc, #68]	; (8001500 <MX_I2C1_Init+0x50>)
 80014bc:	2264      	movs	r2, #100	; 0x64
 80014be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014c0:	4b0f      	ldr	r3, [pc, #60]	; (8001500 <MX_I2C1_Init+0x50>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80014c6:	4b0e      	ldr	r3, [pc, #56]	; (8001500 <MX_I2C1_Init+0x50>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014cc:	4b0c      	ldr	r3, [pc, #48]	; (8001500 <MX_I2C1_Init+0x50>)
 80014ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014d2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014d4:	4b0a      	ldr	r3, [pc, #40]	; (8001500 <MX_I2C1_Init+0x50>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80014da:	4b09      	ldr	r3, [pc, #36]	; (8001500 <MX_I2C1_Init+0x50>)
 80014dc:	2200      	movs	r2, #0
 80014de:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014e0:	4b07      	ldr	r3, [pc, #28]	; (8001500 <MX_I2C1_Init+0x50>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014e6:	4b06      	ldr	r3, [pc, #24]	; (8001500 <MX_I2C1_Init+0x50>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014ec:	4804      	ldr	r0, [pc, #16]	; (8001500 <MX_I2C1_Init+0x50>)
 80014ee:	f000 ff3b 	bl	8002368 <HAL_I2C_Init>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80014f8:	f000 f868 	bl	80015cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014fc:	bf00      	nop
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	200001f8 	.word	0x200001f8
 8001504:	40005400 	.word	0x40005400

08001508 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800150c:	4b11      	ldr	r3, [pc, #68]	; (8001554 <MX_USART2_UART_Init+0x4c>)
 800150e:	4a12      	ldr	r2, [pc, #72]	; (8001558 <MX_USART2_UART_Init+0x50>)
 8001510:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001512:	4b10      	ldr	r3, [pc, #64]	; (8001554 <MX_USART2_UART_Init+0x4c>)
 8001514:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001518:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800151a:	4b0e      	ldr	r3, [pc, #56]	; (8001554 <MX_USART2_UART_Init+0x4c>)
 800151c:	2200      	movs	r2, #0
 800151e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001520:	4b0c      	ldr	r3, [pc, #48]	; (8001554 <MX_USART2_UART_Init+0x4c>)
 8001522:	2200      	movs	r2, #0
 8001524:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001526:	4b0b      	ldr	r3, [pc, #44]	; (8001554 <MX_USART2_UART_Init+0x4c>)
 8001528:	2200      	movs	r2, #0
 800152a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800152c:	4b09      	ldr	r3, [pc, #36]	; (8001554 <MX_USART2_UART_Init+0x4c>)
 800152e:	220c      	movs	r2, #12
 8001530:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001532:	4b08      	ldr	r3, [pc, #32]	; (8001554 <MX_USART2_UART_Init+0x4c>)
 8001534:	2200      	movs	r2, #0
 8001536:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001538:	4b06      	ldr	r3, [pc, #24]	; (8001554 <MX_USART2_UART_Init+0x4c>)
 800153a:	2200      	movs	r2, #0
 800153c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800153e:	4805      	ldr	r0, [pc, #20]	; (8001554 <MX_USART2_UART_Init+0x4c>)
 8001540:	f004 fb8c 	bl	8005c5c <HAL_UART_Init>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800154a:	f000 f83f 	bl	80015cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800154e:	bf00      	nop
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	2000024c 	.word	0x2000024c
 8001558:	40004400 	.word	0x40004400

0800155c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b088      	sub	sp, #32
 8001560:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001562:	f107 030c 	add.w	r3, r7, #12
 8001566:	2200      	movs	r2, #0
 8001568:	601a      	str	r2, [r3, #0]
 800156a:	605a      	str	r2, [r3, #4]
 800156c:	609a      	str	r2, [r3, #8]
 800156e:	60da      	str	r2, [r3, #12]
 8001570:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001572:	4b14      	ldr	r3, [pc, #80]	; (80015c4 <MX_GPIO_Init+0x68>)
 8001574:	69db      	ldr	r3, [r3, #28]
 8001576:	4a13      	ldr	r2, [pc, #76]	; (80015c4 <MX_GPIO_Init+0x68>)
 8001578:	f043 0301 	orr.w	r3, r3, #1
 800157c:	61d3      	str	r3, [r2, #28]
 800157e:	4b11      	ldr	r3, [pc, #68]	; (80015c4 <MX_GPIO_Init+0x68>)
 8001580:	69db      	ldr	r3, [r3, #28]
 8001582:	f003 0301 	and.w	r3, r3, #1
 8001586:	60bb      	str	r3, [r7, #8]
 8001588:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800158a:	4b0e      	ldr	r3, [pc, #56]	; (80015c4 <MX_GPIO_Init+0x68>)
 800158c:	69db      	ldr	r3, [r3, #28]
 800158e:	4a0d      	ldr	r2, [pc, #52]	; (80015c4 <MX_GPIO_Init+0x68>)
 8001590:	f043 0302 	orr.w	r3, r3, #2
 8001594:	61d3      	str	r3, [r2, #28]
 8001596:	4b0b      	ldr	r3, [pc, #44]	; (80015c4 <MX_GPIO_Init+0x68>)
 8001598:	69db      	ldr	r3, [r3, #28]
 800159a:	f003 0302 	and.w	r3, r3, #2
 800159e:	607b      	str	r3, [r7, #4]
 80015a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : pb1_Pin */
  GPIO_InitStruct.Pin = pb1_Pin;
 80015a2:	2301      	movs	r3, #1
 80015a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015a6:	2300      	movs	r3, #0
 80015a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015aa:	2300      	movs	r3, #0
 80015ac:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(pb1_GPIO_Port, &GPIO_InitStruct);
 80015ae:	f107 030c 	add.w	r3, r7, #12
 80015b2:	4619      	mov	r1, r3
 80015b4:	4804      	ldr	r0, [pc, #16]	; (80015c8 <MX_GPIO_Init+0x6c>)
 80015b6:	f000 fd57 	bl	8002068 <HAL_GPIO_Init>

}
 80015ba:	bf00      	nop
 80015bc:	3720      	adds	r7, #32
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	40023800 	.word	0x40023800
 80015c8:	40020000 	.word	0x40020000

080015cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015d0:	b672      	cpsid	i
}
 80015d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015d4:	e7fe      	b.n	80015d4 <Error_Handler+0x8>
	...

080015d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80015de:	4b15      	ldr	r3, [pc, #84]	; (8001634 <HAL_MspInit+0x5c>)
 80015e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e2:	4a14      	ldr	r2, [pc, #80]	; (8001634 <HAL_MspInit+0x5c>)
 80015e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80015e8:	6253      	str	r3, [r2, #36]	; 0x24
 80015ea:	4b12      	ldr	r3, [pc, #72]	; (8001634 <HAL_MspInit+0x5c>)
 80015ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80015f2:	60fb      	str	r3, [r7, #12]
 80015f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015f6:	4b0f      	ldr	r3, [pc, #60]	; (8001634 <HAL_MspInit+0x5c>)
 80015f8:	6a1b      	ldr	r3, [r3, #32]
 80015fa:	4a0e      	ldr	r2, [pc, #56]	; (8001634 <HAL_MspInit+0x5c>)
 80015fc:	f043 0301 	orr.w	r3, r3, #1
 8001600:	6213      	str	r3, [r2, #32]
 8001602:	4b0c      	ldr	r3, [pc, #48]	; (8001634 <HAL_MspInit+0x5c>)
 8001604:	6a1b      	ldr	r3, [r3, #32]
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	60bb      	str	r3, [r7, #8]
 800160c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800160e:	4b09      	ldr	r3, [pc, #36]	; (8001634 <HAL_MspInit+0x5c>)
 8001610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001612:	4a08      	ldr	r2, [pc, #32]	; (8001634 <HAL_MspInit+0x5c>)
 8001614:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001618:	6253      	str	r3, [r2, #36]	; 0x24
 800161a:	4b06      	ldr	r3, [pc, #24]	; (8001634 <HAL_MspInit+0x5c>)
 800161c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800161e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001622:	607b      	str	r3, [r7, #4]
 8001624:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001626:	2007      	movs	r0, #7
 8001628:	f000 fc8e 	bl	8001f48 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800162c:	bf00      	nop
 800162e:	3710      	adds	r7, #16
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	40023800 	.word	0x40023800

08001638 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b08a      	sub	sp, #40	; 0x28
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001640:	f107 0314 	add.w	r3, r7, #20
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	605a      	str	r2, [r3, #4]
 800164a:	609a      	str	r2, [r3, #8]
 800164c:	60da      	str	r2, [r3, #12]
 800164e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a1b      	ldr	r2, [pc, #108]	; (80016c4 <HAL_I2C_MspInit+0x8c>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d12f      	bne.n	80016ba <HAL_I2C_MspInit+0x82>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800165a:	4b1b      	ldr	r3, [pc, #108]	; (80016c8 <HAL_I2C_MspInit+0x90>)
 800165c:	69db      	ldr	r3, [r3, #28]
 800165e:	4a1a      	ldr	r2, [pc, #104]	; (80016c8 <HAL_I2C_MspInit+0x90>)
 8001660:	f043 0302 	orr.w	r3, r3, #2
 8001664:	61d3      	str	r3, [r2, #28]
 8001666:	4b18      	ldr	r3, [pc, #96]	; (80016c8 <HAL_I2C_MspInit+0x90>)
 8001668:	69db      	ldr	r3, [r3, #28]
 800166a:	f003 0302 	and.w	r3, r3, #2
 800166e:	613b      	str	r3, [r7, #16]
 8001670:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BSP_SHT21_I2C1_SCL_Pin|BSP_SHT21_I2C1_SDA_Pin;
 8001672:	23c0      	movs	r3, #192	; 0xc0
 8001674:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001676:	2312      	movs	r3, #18
 8001678:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167a:	2300      	movs	r3, #0
 800167c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800167e:	2303      	movs	r3, #3
 8001680:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001682:	2304      	movs	r3, #4
 8001684:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001686:	f107 0314 	add.w	r3, r7, #20
 800168a:	4619      	mov	r1, r3
 800168c:	480f      	ldr	r0, [pc, #60]	; (80016cc <HAL_I2C_MspInit+0x94>)
 800168e:	f000 fceb 	bl	8002068 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001692:	4b0d      	ldr	r3, [pc, #52]	; (80016c8 <HAL_I2C_MspInit+0x90>)
 8001694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001696:	4a0c      	ldr	r2, [pc, #48]	; (80016c8 <HAL_I2C_MspInit+0x90>)
 8001698:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800169c:	6253      	str	r3, [r2, #36]	; 0x24
 800169e:	4b0a      	ldr	r3, [pc, #40]	; (80016c8 <HAL_I2C_MspInit+0x90>)
 80016a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016a6:	60fb      	str	r3, [r7, #12]
 80016a8:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80016aa:	2200      	movs	r2, #0
 80016ac:	2100      	movs	r1, #0
 80016ae:	201f      	movs	r0, #31
 80016b0:	f000 fc55 	bl	8001f5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80016b4:	201f      	movs	r0, #31
 80016b6:	f000 fc6e 	bl	8001f96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80016ba:	bf00      	nop
 80016bc:	3728      	adds	r7, #40	; 0x28
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	40005400 	.word	0x40005400
 80016c8:	40023800 	.word	0x40023800
 80016cc:	40020400 	.word	0x40020400

080016d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b08a      	sub	sp, #40	; 0x28
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d8:	f107 0314 	add.w	r3, r7, #20
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	605a      	str	r2, [r3, #4]
 80016e2:	609a      	str	r2, [r3, #8]
 80016e4:	60da      	str	r2, [r3, #12]
 80016e6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a17      	ldr	r2, [pc, #92]	; (800174c <HAL_UART_MspInit+0x7c>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d127      	bne.n	8001742 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016f2:	4b17      	ldr	r3, [pc, #92]	; (8001750 <HAL_UART_MspInit+0x80>)
 80016f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f6:	4a16      	ldr	r2, [pc, #88]	; (8001750 <HAL_UART_MspInit+0x80>)
 80016f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016fc:	6253      	str	r3, [r2, #36]	; 0x24
 80016fe:	4b14      	ldr	r3, [pc, #80]	; (8001750 <HAL_UART_MspInit+0x80>)
 8001700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001706:	613b      	str	r3, [r7, #16]
 8001708:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800170a:	4b11      	ldr	r3, [pc, #68]	; (8001750 <HAL_UART_MspInit+0x80>)
 800170c:	69db      	ldr	r3, [r3, #28]
 800170e:	4a10      	ldr	r2, [pc, #64]	; (8001750 <HAL_UART_MspInit+0x80>)
 8001710:	f043 0301 	orr.w	r3, r3, #1
 8001714:	61d3      	str	r3, [r2, #28]
 8001716:	4b0e      	ldr	r3, [pc, #56]	; (8001750 <HAL_UART_MspInit+0x80>)
 8001718:	69db      	ldr	r3, [r3, #28]
 800171a:	f003 0301 	and.w	r3, r3, #1
 800171e:	60fb      	str	r3, [r7, #12]
 8001720:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001722:	230c      	movs	r3, #12
 8001724:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001726:	2302      	movs	r3, #2
 8001728:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172a:	2300      	movs	r3, #0
 800172c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800172e:	2303      	movs	r3, #3
 8001730:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001732:	2307      	movs	r3, #7
 8001734:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001736:	f107 0314 	add.w	r3, r7, #20
 800173a:	4619      	mov	r1, r3
 800173c:	4805      	ldr	r0, [pc, #20]	; (8001754 <HAL_UART_MspInit+0x84>)
 800173e:	f000 fc93 	bl	8002068 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001742:	bf00      	nop
 8001744:	3728      	adds	r7, #40	; 0x28
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	40004400 	.word	0x40004400
 8001750:	40023800 	.word	0x40023800
 8001754:	40020000 	.word	0x40020000

08001758 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800175c:	e7fe      	b.n	800175c <NMI_Handler+0x4>

0800175e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800175e:	b480      	push	{r7}
 8001760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001762:	e7fe      	b.n	8001762 <HardFault_Handler+0x4>

08001764 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001768:	e7fe      	b.n	8001768 <MemManage_Handler+0x4>

0800176a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800176a:	b480      	push	{r7}
 800176c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800176e:	e7fe      	b.n	800176e <BusFault_Handler+0x4>

08001770 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001774:	e7fe      	b.n	8001774 <UsageFault_Handler+0x4>

08001776 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001776:	b480      	push	{r7}
 8001778:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800177a:	bf00      	nop
 800177c:	46bd      	mov	sp, r7
 800177e:	bc80      	pop	{r7}
 8001780:	4770      	bx	lr

08001782 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001782:	b480      	push	{r7}
 8001784:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001786:	bf00      	nop
 8001788:	46bd      	mov	sp, r7
 800178a:	bc80      	pop	{r7}
 800178c:	4770      	bx	lr

0800178e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800178e:	b480      	push	{r7}
 8001790:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001792:	bf00      	nop
 8001794:	46bd      	mov	sp, r7
 8001796:	bc80      	pop	{r7}
 8001798:	4770      	bx	lr

0800179a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800179a:	b580      	push	{r7, lr}
 800179c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800179e:	f000 fac9 	bl	8001d34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017a2:	bf00      	nop
 80017a4:	bd80      	pop	{r7, pc}
	...

080017a8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80017ac:	4802      	ldr	r0, [pc, #8]	; (80017b8 <I2C1_EV_IRQHandler+0x10>)
 80017ae:	f001 fc8b 	bl	80030c8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80017b2:	bf00      	nop
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	200001f8 	.word	0x200001f8

080017bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  return 1;
 80017c0:	2301      	movs	r3, #1
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bc80      	pop	{r7}
 80017c8:	4770      	bx	lr

080017ca <_kill>:

int _kill(int pid, int sig)
{
 80017ca:	b580      	push	{r7, lr}
 80017cc:	b082      	sub	sp, #8
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	6078      	str	r0, [r7, #4]
 80017d2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80017d4:	f004 fc68 	bl	80060a8 <__errno>
 80017d8:	4603      	mov	r3, r0
 80017da:	2216      	movs	r2, #22
 80017dc:	601a      	str	r2, [r3, #0]
  return -1;
 80017de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3708      	adds	r7, #8
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}

080017ea <_exit>:

void _exit (int status)
{
 80017ea:	b580      	push	{r7, lr}
 80017ec:	b082      	sub	sp, #8
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80017f2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f7ff ffe7 	bl	80017ca <_kill>
  while (1) {}    /* Make sure we hang here */
 80017fc:	e7fe      	b.n	80017fc <_exit+0x12>

080017fe <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017fe:	b580      	push	{r7, lr}
 8001800:	b086      	sub	sp, #24
 8001802:	af00      	add	r7, sp, #0
 8001804:	60f8      	str	r0, [r7, #12]
 8001806:	60b9      	str	r1, [r7, #8]
 8001808:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800180a:	2300      	movs	r3, #0
 800180c:	617b      	str	r3, [r7, #20]
 800180e:	e00a      	b.n	8001826 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001810:	f3af 8000 	nop.w
 8001814:	4601      	mov	r1, r0
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	1c5a      	adds	r2, r3, #1
 800181a:	60ba      	str	r2, [r7, #8]
 800181c:	b2ca      	uxtb	r2, r1
 800181e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	3301      	adds	r3, #1
 8001824:	617b      	str	r3, [r7, #20]
 8001826:	697a      	ldr	r2, [r7, #20]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	429a      	cmp	r2, r3
 800182c:	dbf0      	blt.n	8001810 <_read+0x12>
  }

  return len;
 800182e:	687b      	ldr	r3, [r7, #4]
}
 8001830:	4618      	mov	r0, r3
 8001832:	3718      	adds	r7, #24
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}

08001838 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0
 800183e:	60f8      	str	r0, [r7, #12]
 8001840:	60b9      	str	r1, [r7, #8]
 8001842:	607a      	str	r2, [r7, #4]
//  {
//    __io_putchar(*ptr++);
//  }

//HAL_UART_Transmit(&huart2, *ptr, HAL_MAX_DELAY, 10000);
HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	b29a      	uxth	r2, r3
 8001848:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800184c:	68b9      	ldr	r1, [r7, #8]
 800184e:	4804      	ldr	r0, [pc, #16]	; (8001860 <_write+0x28>)
 8001850:	f004 fa54 	bl	8005cfc <HAL_UART_Transmit>

  return len;
 8001854:	687b      	ldr	r3, [r7, #4]
}
 8001856:	4618      	mov	r0, r3
 8001858:	3710      	adds	r7, #16
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	2000024c 	.word	0x2000024c

08001864 <_close>:

int _close(int file)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800186c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001870:	4618      	mov	r0, r3
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	bc80      	pop	{r7}
 8001878:	4770      	bx	lr

0800187a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800187a:	b480      	push	{r7}
 800187c:	b083      	sub	sp, #12
 800187e:	af00      	add	r7, sp, #0
 8001880:	6078      	str	r0, [r7, #4]
 8001882:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800188a:	605a      	str	r2, [r3, #4]
  return 0;
 800188c:	2300      	movs	r3, #0
}
 800188e:	4618      	mov	r0, r3
 8001890:	370c      	adds	r7, #12
 8001892:	46bd      	mov	sp, r7
 8001894:	bc80      	pop	{r7}
 8001896:	4770      	bx	lr

08001898 <_isatty>:

int _isatty(int file)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018a0:	2301      	movs	r3, #1
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	370c      	adds	r7, #12
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bc80      	pop	{r7}
 80018aa:	4770      	bx	lr

080018ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b085      	sub	sp, #20
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	60f8      	str	r0, [r7, #12]
 80018b4:	60b9      	str	r1, [r7, #8]
 80018b6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80018b8:	2300      	movs	r3, #0
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3714      	adds	r7, #20
 80018be:	46bd      	mov	sp, r7
 80018c0:	bc80      	pop	{r7}
 80018c2:	4770      	bx	lr

080018c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b086      	sub	sp, #24
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018cc:	4a14      	ldr	r2, [pc, #80]	; (8001920 <_sbrk+0x5c>)
 80018ce:	4b15      	ldr	r3, [pc, #84]	; (8001924 <_sbrk+0x60>)
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018d8:	4b13      	ldr	r3, [pc, #76]	; (8001928 <_sbrk+0x64>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d102      	bne.n	80018e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018e0:	4b11      	ldr	r3, [pc, #68]	; (8001928 <_sbrk+0x64>)
 80018e2:	4a12      	ldr	r2, [pc, #72]	; (800192c <_sbrk+0x68>)
 80018e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018e6:	4b10      	ldr	r3, [pc, #64]	; (8001928 <_sbrk+0x64>)
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4413      	add	r3, r2
 80018ee:	693a      	ldr	r2, [r7, #16]
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d207      	bcs.n	8001904 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018f4:	f004 fbd8 	bl	80060a8 <__errno>
 80018f8:	4603      	mov	r3, r0
 80018fa:	220c      	movs	r2, #12
 80018fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001902:	e009      	b.n	8001918 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001904:	4b08      	ldr	r3, [pc, #32]	; (8001928 <_sbrk+0x64>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800190a:	4b07      	ldr	r3, [pc, #28]	; (8001928 <_sbrk+0x64>)
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4413      	add	r3, r2
 8001912:	4a05      	ldr	r2, [pc, #20]	; (8001928 <_sbrk+0x64>)
 8001914:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001916:	68fb      	ldr	r3, [r7, #12]
}
 8001918:	4618      	mov	r0, r3
 800191a:	3718      	adds	r7, #24
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	20008000 	.word	0x20008000
 8001924:	00000400 	.word	0x00000400
 8001928:	20000294 	.word	0x20000294
 800192c:	200002b0 	.word	0x200002b0

08001930 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001934:	bf00      	nop
 8001936:	46bd      	mov	sp, r7
 8001938:	bc80      	pop	{r7}
 800193a:	4770      	bx	lr

0800193c <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 800193c:	f7ff fff8 	bl	8001930 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001940:	480b      	ldr	r0, [pc, #44]	; (8001970 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001942:	490c      	ldr	r1, [pc, #48]	; (8001974 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001944:	4a0c      	ldr	r2, [pc, #48]	; (8001978 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001946:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001948:	e002      	b.n	8001950 <LoopCopyDataInit>

0800194a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800194a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800194c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800194e:	3304      	adds	r3, #4

08001950 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001950:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001952:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001954:	d3f9      	bcc.n	800194a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001956:	4a09      	ldr	r2, [pc, #36]	; (800197c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001958:	4c09      	ldr	r4, [pc, #36]	; (8001980 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800195a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800195c:	e001      	b.n	8001962 <LoopFillZerobss>

0800195e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800195e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001960:	3204      	adds	r2, #4

08001962 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001962:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001964:	d3fb      	bcc.n	800195e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001966:	f004 fba5 	bl	80060b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800196a:	f7ff fd11 	bl	8001390 <main>
  bx lr
 800196e:	4770      	bx	lr
  ldr r0, =_sdata
 8001970:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001974:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001978:	0800917c 	.word	0x0800917c
  ldr r2, =_sbss
 800197c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001980:	200002ac 	.word	0x200002ac

08001984 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001984:	e7fe      	b.n	8001984 <ADC1_IRQHandler>
	...

08001988 <i2c_SHT2x_write_reg>:
 * Internal function of the SHT2x driver, that uses I2C to write the specified data
 * to the specified register address of the SHT2x.
 *
 * */
static inline void i2c_SHT2x_write_reg(uint8_t reg_address, uint8_t data)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b086      	sub	sp, #24
 800198c:	af04      	add	r7, sp, #16
 800198e:	4603      	mov	r3, r0
 8001990:	460a      	mov	r2, r1
 8001992:	71fb      	strb	r3, [r7, #7]
 8001994:	4613      	mov	r3, r2
 8001996:	71bb      	strb	r3, [r7, #6]
  #ifdef SHT21_USE_HAL
    HAL_I2C_Mem_Write(&hi2c1, SHT21_WRITE_ADDRESS, reg_address, I2C_MEMADD_SIZE_8BIT, &data, 1, 100);
 8001998:	79fb      	ldrb	r3, [r7, #7]
 800199a:	b29a      	uxth	r2, r3
 800199c:	2364      	movs	r3, #100	; 0x64
 800199e:	9302      	str	r3, [sp, #8]
 80019a0:	2301      	movs	r3, #1
 80019a2:	9301      	str	r3, [sp, #4]
 80019a4:	1dbb      	adds	r3, r7, #6
 80019a6:	9300      	str	r3, [sp, #0]
 80019a8:	2301      	movs	r3, #1
 80019aa:	2180      	movs	r1, #128	; 0x80
 80019ac:	4803      	ldr	r0, [pc, #12]	; (80019bc <i2c_SHT2x_write_reg+0x34>)
 80019ae:	f001 f963 	bl	8002c78 <HAL_I2C_Mem_Write>
    #else
    uint8_t trx_data[] = {reg_address, data} ;
    i2c_write_data(i2c_handle, SHT21_WRITE_ADDRESS,trx_data, 2);
  #endif

}
 80019b2:	bf00      	nop
 80019b4:	3708      	adds	r7, #8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	200001f8 	.word	0x200001f8

080019c0 <i2c_SHT2x_write_cmd>:
 * Internal function of the SHT2x driver, that uses I2C to write a command to the I2C bus.
 * Follows Master_Transmit_Data format nut only for 1 byte.
 *
 * */
static inline void i2c_SHT2x_write_cmd(uint8_t data)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af02      	add	r7, sp, #8
 80019c6:	4603      	mov	r3, r0
 80019c8:	71fb      	strb	r3, [r7, #7]
  #ifdef SHT21_USE_HAL
    HAL_I2C_Master_Transmit(&hi2c1, SHT21_WRITE_ADDRESS, &data, 1, 100);
 80019ca:	1dfa      	adds	r2, r7, #7
 80019cc:	2364      	movs	r3, #100	; 0x64
 80019ce:	9300      	str	r3, [sp, #0]
 80019d0:	2301      	movs	r3, #1
 80019d2:	2180      	movs	r1, #128	; 0x80
 80019d4:	4803      	ldr	r0, [pc, #12]	; (80019e4 <i2c_SHT2x_write_cmd+0x24>)
 80019d6:	f000 fe1f 	bl	8002618 <HAL_I2C_Master_Transmit>
  #else
    i2c_write_data(i2c_handle, SHT21_WRITE_ADDRESS,&data, 1);
  #endif

}
 80019da:	bf00      	nop
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	200001f8 	.word	0x200001f8

080019e8 <i2c_SHT2x_read_reg>:
 * from to the specified register address of the SHT2x.
 * Can be used to read conversion data (temperature - humidity) or
 *
 * */
static inline void i2c_SHT2x_read_reg(uint8_t reg_address, uint8_t *data, uint8_t nbr_of_data)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af02      	add	r7, sp, #8
 80019ee:	4603      	mov	r3, r0
 80019f0:	6039      	str	r1, [r7, #0]
 80019f2:	71fb      	strb	r3, [r7, #7]
 80019f4:	4613      	mov	r3, r2
 80019f6:	71bb      	strb	r3, [r7, #6]

  #ifdef SHT21_USE_HAL
    HAL_I2C_Master_Transmit(&hi2c1, SHT21_WRITE_ADDRESS, &reg_address, 1, 100);
 80019f8:	1dfa      	adds	r2, r7, #7
 80019fa:	2364      	movs	r3, #100	; 0x64
 80019fc:	9300      	str	r3, [sp, #0]
 80019fe:	2301      	movs	r3, #1
 8001a00:	2180      	movs	r1, #128	; 0x80
 8001a02:	4808      	ldr	r0, [pc, #32]	; (8001a24 <i2c_SHT2x_read_reg+0x3c>)
 8001a04:	f000 fe08 	bl	8002618 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c1, SHT21_READ_ADDRESS, data, nbr_of_data, 100);
 8001a08:	79bb      	ldrb	r3, [r7, #6]
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	2264      	movs	r2, #100	; 0x64
 8001a0e:	9200      	str	r2, [sp, #0]
 8001a10:	683a      	ldr	r2, [r7, #0]
 8001a12:	2181      	movs	r1, #129	; 0x81
 8001a14:	4803      	ldr	r0, [pc, #12]	; (8001a24 <i2c_SHT2x_read_reg+0x3c>)
 8001a16:	f000 fefd 	bl	8002814 <HAL_I2C_Master_Receive>
  #else
    i2c_write_data(i2c_handle, SHT21_WRITE_ADDRESS, &reg_address, 1);
    i2c_recv_data(i2c_handle, SHT21_READ_ADDRESS, data, nbr_of_data);
  #endif

}
 8001a1a:	bf00      	nop
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	200001f8 	.word	0x200001f8

08001a28 <SHT2x_CheckCrc>:
 * Can be used to read conversion data (temperature - humidity) or
 *
 * */
static inline uint8_t SHT2x_CheckCrc(uint8_t data[], uint8_t nbrOfBytes, uint8_t checksum)
//==============================================================================
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b085      	sub	sp, #20
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	460b      	mov	r3, r1
 8001a32:	70fb      	strb	r3, [r7, #3]
 8001a34:	4613      	mov	r3, r2
 8001a36:	70bb      	strb	r3, [r7, #2]
  uint8_t crc = 0;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	73fb      	strb	r3, [r7, #15]
  uint8_t byteCtr;

  //calculates 8-Bit checksum with given polynomial
  for (byteCtr = 0; byteCtr < nbrOfBytes; ++byteCtr){
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	73bb      	strb	r3, [r7, #14]
 8001a40:	e021      	b.n	8001a86 <SHT2x_CheckCrc+0x5e>
    crc ^= (data[byteCtr]);
 8001a42:	7bbb      	ldrb	r3, [r7, #14]
 8001a44:	687a      	ldr	r2, [r7, #4]
 8001a46:	4413      	add	r3, r2
 8001a48:	781a      	ldrb	r2, [r3, #0]
 8001a4a:	7bfb      	ldrb	r3, [r7, #15]
 8001a4c:	4053      	eors	r3, r2
 8001a4e:	73fb      	strb	r3, [r7, #15]
    for (uint8_t bit = 8; bit > 0; --bit){
 8001a50:	2308      	movs	r3, #8
 8001a52:	737b      	strb	r3, [r7, #13]
 8001a54:	e011      	b.n	8001a7a <SHT2x_CheckCrc+0x52>
      if (crc & 0x80)
 8001a56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	da07      	bge.n	8001a6e <SHT2x_CheckCrc+0x46>
	crc = (crc << 1) ^ CRC_POLYNOMIAL;
 8001a5e:	7bfb      	ldrb	r3, [r7, #15]
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	b25b      	sxtb	r3, r3
 8001a64:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 8001a68:	b25b      	sxtb	r3, r3
 8001a6a:	73fb      	strb	r3, [r7, #15]
 8001a6c:	e002      	b.n	8001a74 <SHT2x_CheckCrc+0x4c>
      else
	crc = (crc << 1);
 8001a6e:	7bfb      	ldrb	r3, [r7, #15]
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	73fb      	strb	r3, [r7, #15]
    for (uint8_t bit = 8; bit > 0; --bit){
 8001a74:	7b7b      	ldrb	r3, [r7, #13]
 8001a76:	3b01      	subs	r3, #1
 8001a78:	737b      	strb	r3, [r7, #13]
 8001a7a:	7b7b      	ldrb	r3, [r7, #13]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d1ea      	bne.n	8001a56 <SHT2x_CheckCrc+0x2e>
  for (byteCtr = 0; byteCtr < nbrOfBytes; ++byteCtr){
 8001a80:	7bbb      	ldrb	r3, [r7, #14]
 8001a82:	3301      	adds	r3, #1
 8001a84:	73bb      	strb	r3, [r7, #14]
 8001a86:	7bba      	ldrb	r2, [r7, #14]
 8001a88:	78fb      	ldrb	r3, [r7, #3]
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d3d9      	bcc.n	8001a42 <SHT2x_CheckCrc+0x1a>
    }
  }

  if (crc != checksum)
 8001a8e:	7bfa      	ldrb	r2, [r7, #15]
 8001a90:	78bb      	ldrb	r3, [r7, #2]
 8001a92:	429a      	cmp	r2, r3
 8001a94:	d001      	beq.n	8001a9a <SHT2x_CheckCrc+0x72>
    return 0;
 8001a96:	2300      	movs	r3, #0
 8001a98:	e000      	b.n	8001a9c <SHT2x_CheckCrc+0x74>
  else
    return 1;
 8001a9a:	2301      	movs	r3, #1
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3714      	adds	r7, #20
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bc80      	pop	{r7}
 8001aa4:	4770      	bx	lr
	...

08001aa8 <SHT2x_CalcTemp>:
 * and converts the integer value to a float.
 *
 *
 * */
void SHT2x_CalcTemp(SHT21_t *data_str)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  uint8_t data[3];

  i2c_SHT2x_read_reg(READ_TEMP_STRETCH, data, 3);
 8001ab0:	f107 030c 	add.w	r3, r7, #12
 8001ab4:	2203      	movs	r2, #3
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	20e3      	movs	r0, #227	; 0xe3
 8001aba:	f7ff ff95 	bl	80019e8 <i2c_SHT2x_read_reg>

  #ifdef CRC_ENABLE
    // Error in transmission //
    if(SHT2x_CheckCrc(data, 2, data[2]) == 0){
 8001abe:	7bba      	ldrb	r2, [r7, #14]
 8001ac0:	f107 030c 	add.w	r3, r7, #12
 8001ac4:	2102      	movs	r1, #2
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f7ff ffae 	bl	8001a28 <SHT2x_CheckCrc>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d103      	bne.n	8001ada <SHT2x_CalcTemp+0x32>
      data_str->temperature = -400000.5;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4a2a      	ldr	r2, [pc, #168]	; (8001b80 <SHT2x_CalcTemp+0xd8>)
 8001ad6:	601a      	str	r2, [r3, #0]
      return;
 8001ad8:	e045      	b.n	8001b66 <SHT2x_CalcTemp+0xbe>
    }
  #endif

  // Get the MSB and the MSB of the temperature //
  data_str->raw_temperature = (data[0] << 8);
 8001ada:	7b3b      	ldrb	r3, [r7, #12]
 8001adc:	b29b      	uxth	r3, r3
 8001ade:	021b      	lsls	r3, r3, #8
 8001ae0:	b29a      	uxth	r2, r3
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	811a      	strh	r2, [r3, #8]
  data_str->raw_temperature += data[1];
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	891a      	ldrh	r2, [r3, #8]
 8001aea:	7b7b      	ldrb	r3, [r7, #13]
 8001aec:	b29b      	uxth	r3, r3
 8001aee:	4413      	add	r3, r2
 8001af0:	b29a      	uxth	r2, r3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	811a      	strh	r2, [r3, #8]
  data_str->raw_temperature &= ~0x0003;	  // Clear the status bits //
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	891b      	ldrh	r3, [r3, #8]
 8001afa:	f023 0303 	bic.w	r3, r3, #3
 8001afe:	b29a      	uxth	r2, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	811a      	strh	r2, [r3, #8]

  // Calculate temperature //
  data_str->temperature = -46.85 + 175.72 * (((float) data_str->raw_temperature) / (float) TEMP_RES) + TEMP_CALIBRATION_CONST;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	891b      	ldrh	r3, [r3, #8]
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7ff f8db 	bl	8000cc4 <__aeabi_ui2f>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	f04f 418f 	mov.w	r1, #1199570944	; 0x47800000
 8001b14:	4618      	mov	r0, r3
 8001b16:	f7ff f9e1 	bl	8000edc <__aeabi_fdiv>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7fe fc9b 	bl	8000458 <__aeabi_f2d>
 8001b22:	a313      	add	r3, pc, #76	; (adr r3, 8001b70 <SHT2x_CalcTemp+0xc8>)
 8001b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b28:	f7fe fcee 	bl	8000508 <__aeabi_dmul>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	460b      	mov	r3, r1
 8001b30:	4610      	mov	r0, r2
 8001b32:	4619      	mov	r1, r3
 8001b34:	a310      	add	r3, pc, #64	; (adr r3, 8001b78 <SHT2x_CalcTemp+0xd0>)
 8001b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b3a:	f7fe fb2d 	bl	8000198 <__aeabi_dsub>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	460b      	mov	r3, r1
 8001b42:	4610      	mov	r0, r2
 8001b44:	4619      	mov	r1, r3
 8001b46:	f04f 0200 	mov.w	r2, #0
 8001b4a:	f04f 0300 	mov.w	r3, #0
 8001b4e:	f7fe fb25 	bl	800019c <__adddf3>
 8001b52:	4602      	mov	r2, r0
 8001b54:	460b      	mov	r3, r1
 8001b56:	4610      	mov	r0, r2
 8001b58:	4619      	mov	r1, r3
 8001b5a:	f7fe ffad 	bl	8000ab8 <__aeabi_d2f>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	601a      	str	r2, [r3, #0]

  return;
 8001b64:	bf00      	nop
}
 8001b66:	3710      	adds	r7, #16
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	f3af 8000 	nop.w
 8001b70:	3d70a3d7 	.word	0x3d70a3d7
 8001b74:	4065f70a 	.word	0x4065f70a
 8001b78:	cccccccd 	.word	0xcccccccd
 8001b7c:	40476ccc 	.word	0x40476ccc
 8001b80:	c8c35010 	.word	0xc8c35010

08001b84 <SHT2x_CalcHumid>:
 * and converts the integer value to a float.
 *
 *
 * */
void SHT2x_CalcHumid(SHT21_t *data_str)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  uint8_t data[3];

  i2c_SHT2x_read_reg(READ_HUM_STRETCH, data, 3);
 8001b8c:	f107 030c 	add.w	r3, r7, #12
 8001b90:	2203      	movs	r2, #3
 8001b92:	4619      	mov	r1, r3
 8001b94:	20e5      	movs	r0, #229	; 0xe5
 8001b96:	f7ff ff27 	bl	80019e8 <i2c_SHT2x_read_reg>

  #ifdef CRC_ENABLE
    // Error in transmission //
    if(SHT2x_CheckCrc(data, 2, data[2]) == 0){
 8001b9a:	7bba      	ldrb	r2, [r7, #14]
 8001b9c:	f107 030c 	add.w	r3, r7, #12
 8001ba0:	2102      	movs	r1, #2
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7ff ff40 	bl	8001a28 <SHT2x_CheckCrc>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d103      	bne.n	8001bb6 <SHT2x_CalcHumid+0x32>
      data_str->humidity = -400000.5;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4a1d      	ldr	r2, [pc, #116]	; (8001c28 <SHT2x_CalcHumid+0xa4>)
 8001bb2:	605a      	str	r2, [r3, #4]
      return;
 8001bb4:	e034      	b.n	8001c20 <SHT2x_CalcHumid+0x9c>
    }
  #endif

  // Get the MSB and the MSB of the humidity //
  data_str->raw_humidity = (data[0] << 8);
 8001bb6:	7b3b      	ldrb	r3, [r7, #12]
 8001bb8:	b29b      	uxth	r3, r3
 8001bba:	021b      	lsls	r3, r3, #8
 8001bbc:	b29a      	uxth	r2, r3
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	815a      	strh	r2, [r3, #10]
  data_str->raw_humidity += data[1];
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	895a      	ldrh	r2, [r3, #10]
 8001bc6:	7b7b      	ldrb	r3, [r7, #13]
 8001bc8:	b29b      	uxth	r3, r3
 8001bca:	4413      	add	r3, r2
 8001bcc:	b29a      	uxth	r2, r3
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	815a      	strh	r2, [r3, #10]
  data_str->raw_humidity &= ~0x0003;	// Clear the status bits //
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	895b      	ldrh	r3, [r3, #10]
 8001bd6:	f023 0303 	bic.w	r3, r3, #3
 8001bda:	b29a      	uxth	r2, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	815a      	strh	r2, [r3, #10]

  // Calculate relative humidity //
  data_str->humidity = -6 + 125 * (((float) data_str->raw_humidity) / (float) HUM_RES) + HUM_CALIBRATION_CONST;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	895b      	ldrh	r3, [r3, #10]
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7ff f86d 	bl	8000cc4 <__aeabi_ui2f>
 8001bea:	4603      	mov	r3, r0
 8001bec:	f04f 418f 	mov.w	r1, #1199570944	; 0x47800000
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7ff f973 	bl	8000edc <__aeabi_fdiv>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	490c      	ldr	r1, [pc, #48]	; (8001c2c <SHT2x_CalcHumid+0xa8>)
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7ff f8ba 	bl	8000d74 <__aeabi_fmul>
 8001c00:	4603      	mov	r3, r0
 8001c02:	490b      	ldr	r1, [pc, #44]	; (8001c30 <SHT2x_CalcHumid+0xac>)
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7fe ffab 	bl	8000b60 <__aeabi_fsub>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	f04f 0100 	mov.w	r1, #0
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7fe ffa7 	bl	8000b64 <__addsf3>
 8001c16:	4603      	mov	r3, r0
 8001c18:	461a      	mov	r2, r3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	605a      	str	r2, [r3, #4]

  return;
 8001c1e:	bf00      	nop
}
 8001c20:	3710      	adds	r7, #16
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	c8c35010 	.word	0xc8c35010
 8001c2c:	42fa0000 	.word	0x42fa0000
 8001c30:	40c00000 	.word	0x40c00000

08001c34 <SHT2x_reset>:
 * Utility function of the driver, used only for debugging.
 * Sends a software reset to the sensor.
 *
 * */
void SHT2x_reset(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
  // Write the Reset command //
  i2c_SHT2x_write_cmd(RESET_SHT2X);
 8001c38:	20fe      	movs	r0, #254	; 0xfe
 8001c3a:	f7ff fec1 	bl	80019c0 <i2c_SHT2x_write_cmd>

  // Minimum delay after reset is 15ms //
  HAL_Delay(30);
 8001c3e:	201e      	movs	r0, #30
 8001c40:	f000 f894 	bl	8001d6c <HAL_Delay>

}
 8001c44:	bf00      	nop
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <SHT2x_init>:
 * Initialization function of the driver, resets the sensor
 * and writes to the user register.
 *
 * */
uint8_t SHT2x_init(uint8_t config)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	4603      	mov	r3, r0
 8001c50:	71fb      	strb	r3, [r7, #7]
  uint8_t temp;

  SHT2x_reset();
 8001c52:	f7ff ffef 	bl	8001c34 <SHT2x_reset>
  i2c_SHT2x_write_reg(WRITE_USER_REGISTER, USR_REG_MASK & config);
 8001c56:	79fb      	ldrb	r3, [r7, #7]
 8001c58:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	4619      	mov	r1, r3
 8001c60:	20e6      	movs	r0, #230	; 0xe6
 8001c62:	f7ff fe91 	bl	8001988 <i2c_SHT2x_write_reg>
  i2c_SHT2x_read_reg(READ_USER_REGISTER, &temp, 1);
 8001c66:	f107 030f 	add.w	r3, r7, #15
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	20e7      	movs	r0, #231	; 0xe7
 8001c70:	f7ff feba 	bl	80019e8 <i2c_SHT2x_read_reg>

  if(temp == (USR_REG_MASK & config))
 8001c74:	79fb      	ldrb	r3, [r7, #7]
 8001c76:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8001c7a:	b2da      	uxtb	r2, r3
 8001c7c:	7bfb      	ldrb	r3, [r7, #15]
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d101      	bne.n	8001c86 <SHT2x_init+0x3e>
    return SHT21_SUCCESS;
 8001c82:	2300      	movs	r3, #0
 8001c84:	e000      	b.n	8001c88 <SHT2x_init+0x40>
  else
    return SHT21_FAILURE;
 8001c86:	2301      	movs	r3, #1
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3710      	adds	r7, #16
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}

08001c90 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c96:	2300      	movs	r3, #0
 8001c98:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c9a:	2003      	movs	r0, #3
 8001c9c:	f000 f954 	bl	8001f48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ca0:	2000      	movs	r0, #0
 8001ca2:	f000 f80d 	bl	8001cc0 <HAL_InitTick>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d002      	beq.n	8001cb2 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	71fb      	strb	r3, [r7, #7]
 8001cb0:	e001      	b.n	8001cb6 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001cb2:	f7ff fc91 	bl	80015d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001cb6:	79fb      	ldrb	r3, [r7, #7]
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3708      	adds	r7, #8
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}

08001cc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b084      	sub	sp, #16
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001ccc:	4b16      	ldr	r3, [pc, #88]	; (8001d28 <HAL_InitTick+0x68>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d022      	beq.n	8001d1a <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001cd4:	4b15      	ldr	r3, [pc, #84]	; (8001d2c <HAL_InitTick+0x6c>)
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	4b13      	ldr	r3, [pc, #76]	; (8001d28 <HAL_InitTick+0x68>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001ce0:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ce4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f000 f962 	bl	8001fb2 <HAL_SYSTICK_Config>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d10f      	bne.n	8001d14 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2b0f      	cmp	r3, #15
 8001cf8:	d809      	bhi.n	8001d0e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	6879      	ldr	r1, [r7, #4]
 8001cfe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d02:	f000 f92c 	bl	8001f5e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d06:	4a0a      	ldr	r2, [pc, #40]	; (8001d30 <HAL_InitTick+0x70>)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6013      	str	r3, [r2, #0]
 8001d0c:	e007      	b.n	8001d1e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	73fb      	strb	r3, [r7, #15]
 8001d12:	e004      	b.n	8001d1e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	73fb      	strb	r3, [r7, #15]
 8001d18:	e001      	b.n	8001d1e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001d1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3710      	adds	r7, #16
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	20000008 	.word	0x20000008
 8001d2c:	20000000 	.word	0x20000000
 8001d30:	20000004 	.word	0x20000004

08001d34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d38:	4b05      	ldr	r3, [pc, #20]	; (8001d50 <HAL_IncTick+0x1c>)
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	4b05      	ldr	r3, [pc, #20]	; (8001d54 <HAL_IncTick+0x20>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4413      	add	r3, r2
 8001d42:	4a03      	ldr	r2, [pc, #12]	; (8001d50 <HAL_IncTick+0x1c>)
 8001d44:	6013      	str	r3, [r2, #0]
}
 8001d46:	bf00      	nop
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bc80      	pop	{r7}
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	20000298 	.word	0x20000298
 8001d54:	20000008 	.word	0x20000008

08001d58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d5c:	4b02      	ldr	r3, [pc, #8]	; (8001d68 <HAL_GetTick+0x10>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bc80      	pop	{r7}
 8001d66:	4770      	bx	lr
 8001d68:	20000298 	.word	0x20000298

08001d6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b084      	sub	sp, #16
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d74:	f7ff fff0 	bl	8001d58 <HAL_GetTick>
 8001d78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d84:	d004      	beq.n	8001d90 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d86:	4b09      	ldr	r3, [pc, #36]	; (8001dac <HAL_Delay+0x40>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	68fa      	ldr	r2, [r7, #12]
 8001d8c:	4413      	add	r3, r2
 8001d8e:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d90:	bf00      	nop
 8001d92:	f7ff ffe1 	bl	8001d58 <HAL_GetTick>
 8001d96:	4602      	mov	r2, r0
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	1ad3      	subs	r3, r2, r3
 8001d9c:	68fa      	ldr	r2, [r7, #12]
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d8f7      	bhi.n	8001d92 <HAL_Delay+0x26>
  {
  }
}
 8001da2:	bf00      	nop
 8001da4:	bf00      	nop
 8001da6:	3710      	adds	r7, #16
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	20000008 	.word	0x20000008

08001db0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b085      	sub	sp, #20
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	f003 0307 	and.w	r3, r3, #7
 8001dbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dc0:	4b0c      	ldr	r3, [pc, #48]	; (8001df4 <__NVIC_SetPriorityGrouping+0x44>)
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dc6:	68ba      	ldr	r2, [r7, #8]
 8001dc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001dcc:	4013      	ands	r3, r2
 8001dce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ddc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001de0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001de2:	4a04      	ldr	r2, [pc, #16]	; (8001df4 <__NVIC_SetPriorityGrouping+0x44>)
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	60d3      	str	r3, [r2, #12]
}
 8001de8:	bf00      	nop
 8001dea:	3714      	adds	r7, #20
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bc80      	pop	{r7}
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	e000ed00 	.word	0xe000ed00

08001df8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dfc:	4b04      	ldr	r3, [pc, #16]	; (8001e10 <__NVIC_GetPriorityGrouping+0x18>)
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	0a1b      	lsrs	r3, r3, #8
 8001e02:	f003 0307 	and.w	r3, r3, #7
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bc80      	pop	{r7}
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	e000ed00 	.word	0xe000ed00

08001e14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	db0b      	blt.n	8001e3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e26:	79fb      	ldrb	r3, [r7, #7]
 8001e28:	f003 021f 	and.w	r2, r3, #31
 8001e2c:	4906      	ldr	r1, [pc, #24]	; (8001e48 <__NVIC_EnableIRQ+0x34>)
 8001e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e32:	095b      	lsrs	r3, r3, #5
 8001e34:	2001      	movs	r0, #1
 8001e36:	fa00 f202 	lsl.w	r2, r0, r2
 8001e3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e3e:	bf00      	nop
 8001e40:	370c      	adds	r7, #12
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bc80      	pop	{r7}
 8001e46:	4770      	bx	lr
 8001e48:	e000e100 	.word	0xe000e100

08001e4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	4603      	mov	r3, r0
 8001e54:	6039      	str	r1, [r7, #0]
 8001e56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	db0a      	blt.n	8001e76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	b2da      	uxtb	r2, r3
 8001e64:	490c      	ldr	r1, [pc, #48]	; (8001e98 <__NVIC_SetPriority+0x4c>)
 8001e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e6a:	0112      	lsls	r2, r2, #4
 8001e6c:	b2d2      	uxtb	r2, r2
 8001e6e:	440b      	add	r3, r1
 8001e70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e74:	e00a      	b.n	8001e8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	b2da      	uxtb	r2, r3
 8001e7a:	4908      	ldr	r1, [pc, #32]	; (8001e9c <__NVIC_SetPriority+0x50>)
 8001e7c:	79fb      	ldrb	r3, [r7, #7]
 8001e7e:	f003 030f 	and.w	r3, r3, #15
 8001e82:	3b04      	subs	r3, #4
 8001e84:	0112      	lsls	r2, r2, #4
 8001e86:	b2d2      	uxtb	r2, r2
 8001e88:	440b      	add	r3, r1
 8001e8a:	761a      	strb	r2, [r3, #24]
}
 8001e8c:	bf00      	nop
 8001e8e:	370c      	adds	r7, #12
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bc80      	pop	{r7}
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	e000e100 	.word	0xe000e100
 8001e9c:	e000ed00 	.word	0xe000ed00

08001ea0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b089      	sub	sp, #36	; 0x24
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	60f8      	str	r0, [r7, #12]
 8001ea8:	60b9      	str	r1, [r7, #8]
 8001eaa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	f003 0307 	and.w	r3, r3, #7
 8001eb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	f1c3 0307 	rsb	r3, r3, #7
 8001eba:	2b04      	cmp	r3, #4
 8001ebc:	bf28      	it	cs
 8001ebe:	2304      	movcs	r3, #4
 8001ec0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	3304      	adds	r3, #4
 8001ec6:	2b06      	cmp	r3, #6
 8001ec8:	d902      	bls.n	8001ed0 <NVIC_EncodePriority+0x30>
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	3b03      	subs	r3, #3
 8001ece:	e000      	b.n	8001ed2 <NVIC_EncodePriority+0x32>
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ed4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ed8:	69bb      	ldr	r3, [r7, #24]
 8001eda:	fa02 f303 	lsl.w	r3, r2, r3
 8001ede:	43da      	mvns	r2, r3
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	401a      	ands	r2, r3
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ee8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	fa01 f303 	lsl.w	r3, r1, r3
 8001ef2:	43d9      	mvns	r1, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ef8:	4313      	orrs	r3, r2
         );
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3724      	adds	r7, #36	; 0x24
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bc80      	pop	{r7}
 8001f02:	4770      	bx	lr

08001f04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	3b01      	subs	r3, #1
 8001f10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f14:	d301      	bcc.n	8001f1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f16:	2301      	movs	r3, #1
 8001f18:	e00f      	b.n	8001f3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f1a:	4a0a      	ldr	r2, [pc, #40]	; (8001f44 <SysTick_Config+0x40>)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	3b01      	subs	r3, #1
 8001f20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f22:	210f      	movs	r1, #15
 8001f24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f28:	f7ff ff90 	bl	8001e4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f2c:	4b05      	ldr	r3, [pc, #20]	; (8001f44 <SysTick_Config+0x40>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f32:	4b04      	ldr	r3, [pc, #16]	; (8001f44 <SysTick_Config+0x40>)
 8001f34:	2207      	movs	r2, #7
 8001f36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f38:	2300      	movs	r3, #0
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3708      	adds	r7, #8
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	e000e010 	.word	0xe000e010

08001f48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f7ff ff2d 	bl	8001db0 <__NVIC_SetPriorityGrouping>
}
 8001f56:	bf00      	nop
 8001f58:	3708      	adds	r7, #8
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}

08001f5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f5e:	b580      	push	{r7, lr}
 8001f60:	b086      	sub	sp, #24
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	4603      	mov	r3, r0
 8001f66:	60b9      	str	r1, [r7, #8]
 8001f68:	607a      	str	r2, [r7, #4]
 8001f6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f70:	f7ff ff42 	bl	8001df8 <__NVIC_GetPriorityGrouping>
 8001f74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	68b9      	ldr	r1, [r7, #8]
 8001f7a:	6978      	ldr	r0, [r7, #20]
 8001f7c:	f7ff ff90 	bl	8001ea0 <NVIC_EncodePriority>
 8001f80:	4602      	mov	r2, r0
 8001f82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f86:	4611      	mov	r1, r2
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7ff ff5f 	bl	8001e4c <__NVIC_SetPriority>
}
 8001f8e:	bf00      	nop
 8001f90:	3718      	adds	r7, #24
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}

08001f96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f96:	b580      	push	{r7, lr}
 8001f98:	b082      	sub	sp, #8
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f7ff ff35 	bl	8001e14 <__NVIC_EnableIRQ>
}
 8001faa:	bf00      	nop
 8001fac:	3708      	adds	r7, #8
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}

08001fb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fb2:	b580      	push	{r7, lr}
 8001fb4:	b082      	sub	sp, #8
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f7ff ffa2 	bl	8001f04 <SysTick_Config>
 8001fc0:	4603      	mov	r3, r0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3708      	adds	r7, #8
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	b084      	sub	sp, #16
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d005      	beq.n	8001fee <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2204      	movs	r2, #4
 8001fe6:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	73fb      	strb	r3, [r7, #15]
 8001fec:	e029      	b.n	8002042 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f022 020e 	bic.w	r2, r2, #14
 8001ffc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f022 0201 	bic.w	r2, r2, #1
 800200c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002012:	f003 021c 	and.w	r2, r3, #28
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800201a:	2101      	movs	r1, #1
 800201c:	fa01 f202 	lsl.w	r2, r1, r2
 8002020:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2201      	movs	r2, #1
 8002026:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2200      	movs	r2, #0
 800202e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002036:	2b00      	cmp	r3, #0
 8002038:	d003      	beq.n	8002042 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	4798      	blx	r3
    }
  }
  return status;
 8002042:	7bfb      	ldrb	r3, [r7, #15]
}
 8002044:	4618      	mov	r0, r3
 8002046:	3710      	adds	r7, #16
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}

0800204c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800205a:	b2db      	uxtb	r3, r3
}
 800205c:	4618      	mov	r0, r3
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	bc80      	pop	{r7}
 8002064:	4770      	bx	lr
	...

08002068 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002068:	b480      	push	{r7}
 800206a:	b087      	sub	sp, #28
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002072:	2300      	movs	r3, #0
 8002074:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002076:	2300      	movs	r3, #0
 8002078:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 800207a:	2300      	movs	r3, #0
 800207c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800207e:	e154      	b.n	800232a <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	2101      	movs	r1, #1
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	fa01 f303 	lsl.w	r3, r1, r3
 800208c:	4013      	ands	r3, r2
 800208e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2b00      	cmp	r3, #0
 8002094:	f000 8146 	beq.w	8002324 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f003 0303 	and.w	r3, r3, #3
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d005      	beq.n	80020b0 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80020ac:	2b02      	cmp	r3, #2
 80020ae:	d130      	bne.n	8002112 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	005b      	lsls	r3, r3, #1
 80020ba:	2203      	movs	r2, #3
 80020bc:	fa02 f303 	lsl.w	r3, r2, r3
 80020c0:	43db      	mvns	r3, r3
 80020c2:	693a      	ldr	r2, [r7, #16]
 80020c4:	4013      	ands	r3, r2
 80020c6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	68da      	ldr	r2, [r3, #12]
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	005b      	lsls	r3, r3, #1
 80020d0:	fa02 f303 	lsl.w	r3, r2, r3
 80020d4:	693a      	ldr	r2, [r7, #16]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	693a      	ldr	r2, [r7, #16]
 80020de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80020e6:	2201      	movs	r2, #1
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	fa02 f303 	lsl.w	r3, r2, r3
 80020ee:	43db      	mvns	r3, r3
 80020f0:	693a      	ldr	r2, [r7, #16]
 80020f2:	4013      	ands	r3, r2
 80020f4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	091b      	lsrs	r3, r3, #4
 80020fc:	f003 0201 	and.w	r2, r3, #1
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	fa02 f303 	lsl.w	r3, r2, r3
 8002106:	693a      	ldr	r2, [r7, #16]
 8002108:	4313      	orrs	r3, r2
 800210a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	693a      	ldr	r2, [r7, #16]
 8002110:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f003 0303 	and.w	r3, r3, #3
 800211a:	2b03      	cmp	r3, #3
 800211c:	d017      	beq.n	800214e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	68db      	ldr	r3, [r3, #12]
 8002122:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	005b      	lsls	r3, r3, #1
 8002128:	2203      	movs	r2, #3
 800212a:	fa02 f303 	lsl.w	r3, r2, r3
 800212e:	43db      	mvns	r3, r3
 8002130:	693a      	ldr	r2, [r7, #16]
 8002132:	4013      	ands	r3, r2
 8002134:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	689a      	ldr	r2, [r3, #8]
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	005b      	lsls	r3, r3, #1
 800213e:	fa02 f303 	lsl.w	r3, r2, r3
 8002142:	693a      	ldr	r2, [r7, #16]
 8002144:	4313      	orrs	r3, r2
 8002146:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	693a      	ldr	r2, [r7, #16]
 800214c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f003 0303 	and.w	r3, r3, #3
 8002156:	2b02      	cmp	r3, #2
 8002158:	d123      	bne.n	80021a2 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	08da      	lsrs	r2, r3, #3
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	3208      	adds	r2, #8
 8002162:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002166:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	f003 0307 	and.w	r3, r3, #7
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	220f      	movs	r2, #15
 8002172:	fa02 f303 	lsl.w	r3, r2, r3
 8002176:	43db      	mvns	r3, r3
 8002178:	693a      	ldr	r2, [r7, #16]
 800217a:	4013      	ands	r3, r2
 800217c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	691a      	ldr	r2, [r3, #16]
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	f003 0307 	and.w	r3, r3, #7
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	fa02 f303 	lsl.w	r3, r2, r3
 800218e:	693a      	ldr	r2, [r7, #16]
 8002190:	4313      	orrs	r3, r2
 8002192:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	08da      	lsrs	r2, r3, #3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	3208      	adds	r2, #8
 800219c:	6939      	ldr	r1, [r7, #16]
 800219e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	005b      	lsls	r3, r3, #1
 80021ac:	2203      	movs	r2, #3
 80021ae:	fa02 f303 	lsl.w	r3, r2, r3
 80021b2:	43db      	mvns	r3, r3
 80021b4:	693a      	ldr	r2, [r7, #16]
 80021b6:	4013      	ands	r3, r2
 80021b8:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	f003 0203 	and.w	r2, r3, #3
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	005b      	lsls	r3, r3, #1
 80021c6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ca:	693a      	ldr	r2, [r7, #16]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	693a      	ldr	r2, [r7, #16]
 80021d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	f000 80a0 	beq.w	8002324 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021e4:	4b58      	ldr	r3, [pc, #352]	; (8002348 <HAL_GPIO_Init+0x2e0>)
 80021e6:	6a1b      	ldr	r3, [r3, #32]
 80021e8:	4a57      	ldr	r2, [pc, #348]	; (8002348 <HAL_GPIO_Init+0x2e0>)
 80021ea:	f043 0301 	orr.w	r3, r3, #1
 80021ee:	6213      	str	r3, [r2, #32]
 80021f0:	4b55      	ldr	r3, [pc, #340]	; (8002348 <HAL_GPIO_Init+0x2e0>)
 80021f2:	6a1b      	ldr	r3, [r3, #32]
 80021f4:	f003 0301 	and.w	r3, r3, #1
 80021f8:	60bb      	str	r3, [r7, #8]
 80021fa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 80021fc:	4a53      	ldr	r2, [pc, #332]	; (800234c <HAL_GPIO_Init+0x2e4>)
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	089b      	lsrs	r3, r3, #2
 8002202:	3302      	adds	r3, #2
 8002204:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002208:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	f003 0303 	and.w	r3, r3, #3
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	220f      	movs	r2, #15
 8002214:	fa02 f303 	lsl.w	r3, r2, r3
 8002218:	43db      	mvns	r3, r3
 800221a:	693a      	ldr	r2, [r7, #16]
 800221c:	4013      	ands	r3, r2
 800221e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	4a4b      	ldr	r2, [pc, #300]	; (8002350 <HAL_GPIO_Init+0x2e8>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d019      	beq.n	800225c <HAL_GPIO_Init+0x1f4>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	4a4a      	ldr	r2, [pc, #296]	; (8002354 <HAL_GPIO_Init+0x2ec>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d013      	beq.n	8002258 <HAL_GPIO_Init+0x1f0>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	4a49      	ldr	r2, [pc, #292]	; (8002358 <HAL_GPIO_Init+0x2f0>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d00d      	beq.n	8002254 <HAL_GPIO_Init+0x1ec>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	4a48      	ldr	r2, [pc, #288]	; (800235c <HAL_GPIO_Init+0x2f4>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d007      	beq.n	8002250 <HAL_GPIO_Init+0x1e8>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	4a47      	ldr	r2, [pc, #284]	; (8002360 <HAL_GPIO_Init+0x2f8>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d101      	bne.n	800224c <HAL_GPIO_Init+0x1e4>
 8002248:	2304      	movs	r3, #4
 800224a:	e008      	b.n	800225e <HAL_GPIO_Init+0x1f6>
 800224c:	2305      	movs	r3, #5
 800224e:	e006      	b.n	800225e <HAL_GPIO_Init+0x1f6>
 8002250:	2303      	movs	r3, #3
 8002252:	e004      	b.n	800225e <HAL_GPIO_Init+0x1f6>
 8002254:	2302      	movs	r3, #2
 8002256:	e002      	b.n	800225e <HAL_GPIO_Init+0x1f6>
 8002258:	2301      	movs	r3, #1
 800225a:	e000      	b.n	800225e <HAL_GPIO_Init+0x1f6>
 800225c:	2300      	movs	r3, #0
 800225e:	697a      	ldr	r2, [r7, #20]
 8002260:	f002 0203 	and.w	r2, r2, #3
 8002264:	0092      	lsls	r2, r2, #2
 8002266:	4093      	lsls	r3, r2
 8002268:	693a      	ldr	r2, [r7, #16]
 800226a:	4313      	orrs	r3, r2
 800226c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800226e:	4937      	ldr	r1, [pc, #220]	; (800234c <HAL_GPIO_Init+0x2e4>)
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	089b      	lsrs	r3, r3, #2
 8002274:	3302      	adds	r3, #2
 8002276:	693a      	ldr	r2, [r7, #16]
 8002278:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800227c:	4b39      	ldr	r3, [pc, #228]	; (8002364 <HAL_GPIO_Init+0x2fc>)
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	43db      	mvns	r3, r3
 8002286:	693a      	ldr	r2, [r7, #16]
 8002288:	4013      	ands	r3, r2
 800228a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d003      	beq.n	80022a0 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 8002298:	693a      	ldr	r2, [r7, #16]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	4313      	orrs	r3, r2
 800229e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80022a0:	4a30      	ldr	r2, [pc, #192]	; (8002364 <HAL_GPIO_Init+0x2fc>)
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022a6:	4b2f      	ldr	r3, [pc, #188]	; (8002364 <HAL_GPIO_Init+0x2fc>)
 80022a8:	68db      	ldr	r3, [r3, #12]
 80022aa:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	43db      	mvns	r3, r3
 80022b0:	693a      	ldr	r2, [r7, #16]
 80022b2:	4013      	ands	r3, r2
 80022b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d003      	beq.n	80022ca <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 80022c2:	693a      	ldr	r2, [r7, #16]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80022ca:	4a26      	ldr	r2, [pc, #152]	; (8002364 <HAL_GPIO_Init+0x2fc>)
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022d0:	4b24      	ldr	r3, [pc, #144]	; (8002364 <HAL_GPIO_Init+0x2fc>)
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	43db      	mvns	r3, r3
 80022da:	693a      	ldr	r2, [r7, #16]
 80022dc:	4013      	ands	r3, r2
 80022de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d003      	beq.n	80022f4 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 80022ec:	693a      	ldr	r2, [r7, #16]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80022f4:	4a1b      	ldr	r2, [pc, #108]	; (8002364 <HAL_GPIO_Init+0x2fc>)
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022fa:	4b1a      	ldr	r3, [pc, #104]	; (8002364 <HAL_GPIO_Init+0x2fc>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	43db      	mvns	r3, r3
 8002304:	693a      	ldr	r2, [r7, #16]
 8002306:	4013      	ands	r3, r2
 8002308:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d003      	beq.n	800231e <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 8002316:	693a      	ldr	r2, [r7, #16]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	4313      	orrs	r3, r2
 800231c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800231e:	4a11      	ldr	r2, [pc, #68]	; (8002364 <HAL_GPIO_Init+0x2fc>)
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	3301      	adds	r3, #1
 8002328:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	fa22 f303 	lsr.w	r3, r2, r3
 8002334:	2b00      	cmp	r3, #0
 8002336:	f47f aea3 	bne.w	8002080 <HAL_GPIO_Init+0x18>
  }
}
 800233a:	bf00      	nop
 800233c:	bf00      	nop
 800233e:	371c      	adds	r7, #28
 8002340:	46bd      	mov	sp, r7
 8002342:	bc80      	pop	{r7}
 8002344:	4770      	bx	lr
 8002346:	bf00      	nop
 8002348:	40023800 	.word	0x40023800
 800234c:	40010000 	.word	0x40010000
 8002350:	40020000 	.word	0x40020000
 8002354:	40020400 	.word	0x40020400
 8002358:	40020800 	.word	0x40020800
 800235c:	40020c00 	.word	0x40020c00
 8002360:	40021000 	.word	0x40021000
 8002364:	40010400 	.word	0x40010400

08002368 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d101      	bne.n	800237a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e12b      	b.n	80025d2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002380:	b2db      	uxtb	r3, r3
 8002382:	2b00      	cmp	r3, #0
 8002384:	d106      	bne.n	8002394 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2200      	movs	r2, #0
 800238a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f7ff f952 	bl	8001638 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2224      	movs	r2, #36	; 0x24
 8002398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f022 0201 	bic.w	r2, r2, #1
 80023aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80023ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80023ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80023cc:	f003 fbbe 	bl	8005b4c <HAL_RCC_GetPCLK1Freq>
 80023d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	4a81      	ldr	r2, [pc, #516]	; (80025dc <HAL_I2C_Init+0x274>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d807      	bhi.n	80023ec <HAL_I2C_Init+0x84>
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	4a80      	ldr	r2, [pc, #512]	; (80025e0 <HAL_I2C_Init+0x278>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	bf94      	ite	ls
 80023e4:	2301      	movls	r3, #1
 80023e6:	2300      	movhi	r3, #0
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	e006      	b.n	80023fa <HAL_I2C_Init+0x92>
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	4a7d      	ldr	r2, [pc, #500]	; (80025e4 <HAL_I2C_Init+0x27c>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	bf94      	ite	ls
 80023f4:	2301      	movls	r3, #1
 80023f6:	2300      	movhi	r3, #0
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d001      	beq.n	8002402 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e0e7      	b.n	80025d2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	4a78      	ldr	r2, [pc, #480]	; (80025e8 <HAL_I2C_Init+0x280>)
 8002406:	fba2 2303 	umull	r2, r3, r2, r3
 800240a:	0c9b      	lsrs	r3, r3, #18
 800240c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	68ba      	ldr	r2, [r7, #8]
 800241e:	430a      	orrs	r2, r1
 8002420:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	6a1b      	ldr	r3, [r3, #32]
 8002428:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	4a6a      	ldr	r2, [pc, #424]	; (80025dc <HAL_I2C_Init+0x274>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d802      	bhi.n	800243c <HAL_I2C_Init+0xd4>
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	3301      	adds	r3, #1
 800243a:	e009      	b.n	8002450 <HAL_I2C_Init+0xe8>
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002442:	fb02 f303 	mul.w	r3, r2, r3
 8002446:	4a69      	ldr	r2, [pc, #420]	; (80025ec <HAL_I2C_Init+0x284>)
 8002448:	fba2 2303 	umull	r2, r3, r2, r3
 800244c:	099b      	lsrs	r3, r3, #6
 800244e:	3301      	adds	r3, #1
 8002450:	687a      	ldr	r2, [r7, #4]
 8002452:	6812      	ldr	r2, [r2, #0]
 8002454:	430b      	orrs	r3, r1
 8002456:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	69db      	ldr	r3, [r3, #28]
 800245e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002462:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	495c      	ldr	r1, [pc, #368]	; (80025dc <HAL_I2C_Init+0x274>)
 800246c:	428b      	cmp	r3, r1
 800246e:	d819      	bhi.n	80024a4 <HAL_I2C_Init+0x13c>
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	1e59      	subs	r1, r3, #1
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	005b      	lsls	r3, r3, #1
 800247a:	fbb1 f3f3 	udiv	r3, r1, r3
 800247e:	1c59      	adds	r1, r3, #1
 8002480:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002484:	400b      	ands	r3, r1
 8002486:	2b00      	cmp	r3, #0
 8002488:	d00a      	beq.n	80024a0 <HAL_I2C_Init+0x138>
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	1e59      	subs	r1, r3, #1
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	005b      	lsls	r3, r3, #1
 8002494:	fbb1 f3f3 	udiv	r3, r1, r3
 8002498:	3301      	adds	r3, #1
 800249a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800249e:	e051      	b.n	8002544 <HAL_I2C_Init+0x1dc>
 80024a0:	2304      	movs	r3, #4
 80024a2:	e04f      	b.n	8002544 <HAL_I2C_Init+0x1dc>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d111      	bne.n	80024d0 <HAL_I2C_Init+0x168>
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	1e58      	subs	r0, r3, #1
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6859      	ldr	r1, [r3, #4]
 80024b4:	460b      	mov	r3, r1
 80024b6:	005b      	lsls	r3, r3, #1
 80024b8:	440b      	add	r3, r1
 80024ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80024be:	3301      	adds	r3, #1
 80024c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	bf0c      	ite	eq
 80024c8:	2301      	moveq	r3, #1
 80024ca:	2300      	movne	r3, #0
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	e012      	b.n	80024f6 <HAL_I2C_Init+0x18e>
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	1e58      	subs	r0, r3, #1
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6859      	ldr	r1, [r3, #4]
 80024d8:	460b      	mov	r3, r1
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	440b      	add	r3, r1
 80024de:	0099      	lsls	r1, r3, #2
 80024e0:	440b      	add	r3, r1
 80024e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80024e6:	3301      	adds	r3, #1
 80024e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	bf0c      	ite	eq
 80024f0:	2301      	moveq	r3, #1
 80024f2:	2300      	movne	r3, #0
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d001      	beq.n	80024fe <HAL_I2C_Init+0x196>
 80024fa:	2301      	movs	r3, #1
 80024fc:	e022      	b.n	8002544 <HAL_I2C_Init+0x1dc>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d10e      	bne.n	8002524 <HAL_I2C_Init+0x1bc>
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	1e58      	subs	r0, r3, #1
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6859      	ldr	r1, [r3, #4]
 800250e:	460b      	mov	r3, r1
 8002510:	005b      	lsls	r3, r3, #1
 8002512:	440b      	add	r3, r1
 8002514:	fbb0 f3f3 	udiv	r3, r0, r3
 8002518:	3301      	adds	r3, #1
 800251a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800251e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002522:	e00f      	b.n	8002544 <HAL_I2C_Init+0x1dc>
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	1e58      	subs	r0, r3, #1
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6859      	ldr	r1, [r3, #4]
 800252c:	460b      	mov	r3, r1
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	440b      	add	r3, r1
 8002532:	0099      	lsls	r1, r3, #2
 8002534:	440b      	add	r3, r1
 8002536:	fbb0 f3f3 	udiv	r3, r0, r3
 800253a:	3301      	adds	r3, #1
 800253c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002540:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002544:	6879      	ldr	r1, [r7, #4]
 8002546:	6809      	ldr	r1, [r1, #0]
 8002548:	4313      	orrs	r3, r2
 800254a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	69da      	ldr	r2, [r3, #28]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6a1b      	ldr	r3, [r3, #32]
 800255e:	431a      	orrs	r2, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	430a      	orrs	r2, r1
 8002566:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002572:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	6911      	ldr	r1, [r2, #16]
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	68d2      	ldr	r2, [r2, #12]
 800257e:	4311      	orrs	r1, r2
 8002580:	687a      	ldr	r2, [r7, #4]
 8002582:	6812      	ldr	r2, [r2, #0]
 8002584:	430b      	orrs	r3, r1
 8002586:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	68db      	ldr	r3, [r3, #12]
 800258e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	695a      	ldr	r2, [r3, #20]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	699b      	ldr	r3, [r3, #24]
 800259a:	431a      	orrs	r2, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	430a      	orrs	r2, r1
 80025a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f042 0201 	orr.w	r2, r2, #1
 80025b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2200      	movs	r2, #0
 80025b8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2220      	movs	r2, #32
 80025be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2200      	movs	r2, #0
 80025cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3710      	adds	r7, #16
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	000186a0 	.word	0x000186a0
 80025e0:	001e847f 	.word	0x001e847f
 80025e4:	003d08ff 	.word	0x003d08ff
 80025e8:	431bde83 	.word	0x431bde83
 80025ec:	10624dd3 	.word	0x10624dd3

080025f0 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	695b      	ldr	r3, [r3, #20]
 80025fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002602:	2b80      	cmp	r3, #128	; 0x80
 8002604:	d103      	bne.n	800260e <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	2200      	movs	r2, #0
 800260c:	611a      	str	r2, [r3, #16]
  }
}
 800260e:	bf00      	nop
 8002610:	370c      	adds	r7, #12
 8002612:	46bd      	mov	sp, r7
 8002614:	bc80      	pop	{r7}
 8002616:	4770      	bx	lr

08002618 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b088      	sub	sp, #32
 800261c:	af02      	add	r7, sp, #8
 800261e:	60f8      	str	r0, [r7, #12]
 8002620:	607a      	str	r2, [r7, #4]
 8002622:	461a      	mov	r2, r3
 8002624:	460b      	mov	r3, r1
 8002626:	817b      	strh	r3, [r7, #10]
 8002628:	4613      	mov	r3, r2
 800262a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800262c:	f7ff fb94 	bl	8001d58 <HAL_GetTick>
 8002630:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002638:	b2db      	uxtb	r3, r3
 800263a:	2b20      	cmp	r3, #32
 800263c:	f040 80e0 	bne.w	8002800 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	9300      	str	r3, [sp, #0]
 8002644:	2319      	movs	r3, #25
 8002646:	2201      	movs	r2, #1
 8002648:	4970      	ldr	r1, [pc, #448]	; (800280c <HAL_I2C_Master_Transmit+0x1f4>)
 800264a:	68f8      	ldr	r0, [r7, #12]
 800264c:	f002 fa8e 	bl	8004b6c <I2C_WaitOnFlagUntilTimeout>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d001      	beq.n	800265a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002656:	2302      	movs	r3, #2
 8002658:	e0d3      	b.n	8002802 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002660:	2b01      	cmp	r3, #1
 8002662:	d101      	bne.n	8002668 <HAL_I2C_Master_Transmit+0x50>
 8002664:	2302      	movs	r3, #2
 8002666:	e0cc      	b.n	8002802 <HAL_I2C_Master_Transmit+0x1ea>
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2201      	movs	r2, #1
 800266c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0301 	and.w	r3, r3, #1
 800267a:	2b01      	cmp	r3, #1
 800267c:	d007      	beq.n	800268e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f042 0201 	orr.w	r2, r2, #1
 800268c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800269c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2221      	movs	r2, #33	; 0x21
 80026a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2210      	movs	r2, #16
 80026aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2200      	movs	r2, #0
 80026b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	893a      	ldrh	r2, [r7, #8]
 80026be:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026c4:	b29a      	uxth	r2, r3
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	4a50      	ldr	r2, [pc, #320]	; (8002810 <HAL_I2C_Master_Transmit+0x1f8>)
 80026ce:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80026d0:	8979      	ldrh	r1, [r7, #10]
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	6a3a      	ldr	r2, [r7, #32]
 80026d6:	68f8      	ldr	r0, [r7, #12]
 80026d8:	f001 ffba 	bl	8004650 <I2C_MasterRequestWrite>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d001      	beq.n	80026e6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e08d      	b.n	8002802 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026e6:	2300      	movs	r3, #0
 80026e8:	613b      	str	r3, [r7, #16]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	695b      	ldr	r3, [r3, #20]
 80026f0:	613b      	str	r3, [r7, #16]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	699b      	ldr	r3, [r3, #24]
 80026f8:	613b      	str	r3, [r7, #16]
 80026fa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80026fc:	e066      	b.n	80027cc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026fe:	697a      	ldr	r2, [r7, #20]
 8002700:	6a39      	ldr	r1, [r7, #32]
 8002702:	68f8      	ldr	r0, [r7, #12]
 8002704:	f002 fb4c 	bl	8004da0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d00d      	beq.n	800272a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002712:	2b04      	cmp	r3, #4
 8002714:	d107      	bne.n	8002726 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002724:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e06b      	b.n	8002802 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272e:	781a      	ldrb	r2, [r3, #0]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273a:	1c5a      	adds	r2, r3, #1
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002744:	b29b      	uxth	r3, r3
 8002746:	3b01      	subs	r3, #1
 8002748:	b29a      	uxth	r2, r3
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002752:	3b01      	subs	r3, #1
 8002754:	b29a      	uxth	r2, r3
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	695b      	ldr	r3, [r3, #20]
 8002760:	f003 0304 	and.w	r3, r3, #4
 8002764:	2b04      	cmp	r3, #4
 8002766:	d11b      	bne.n	80027a0 <HAL_I2C_Master_Transmit+0x188>
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800276c:	2b00      	cmp	r3, #0
 800276e:	d017      	beq.n	80027a0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002774:	781a      	ldrb	r2, [r3, #0]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002780:	1c5a      	adds	r2, r3, #1
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800278a:	b29b      	uxth	r3, r3
 800278c:	3b01      	subs	r3, #1
 800278e:	b29a      	uxth	r2, r3
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002798:	3b01      	subs	r3, #1
 800279a:	b29a      	uxth	r2, r3
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027a0:	697a      	ldr	r2, [r7, #20]
 80027a2:	6a39      	ldr	r1, [r7, #32]
 80027a4:	68f8      	ldr	r0, [r7, #12]
 80027a6:	f002 fb43 	bl	8004e30 <I2C_WaitOnBTFFlagUntilTimeout>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d00d      	beq.n	80027cc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b4:	2b04      	cmp	r3, #4
 80027b6:	d107      	bne.n	80027c8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027c6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e01a      	b.n	8002802 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d194      	bne.n	80026fe <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2220      	movs	r2, #32
 80027e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2200      	movs	r2, #0
 80027f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2200      	movs	r2, #0
 80027f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80027fc:	2300      	movs	r3, #0
 80027fe:	e000      	b.n	8002802 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002800:	2302      	movs	r3, #2
  }
}
 8002802:	4618      	mov	r0, r3
 8002804:	3718      	adds	r7, #24
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	00100002 	.word	0x00100002
 8002810:	ffff0000 	.word	0xffff0000

08002814 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b08c      	sub	sp, #48	; 0x30
 8002818:	af02      	add	r7, sp, #8
 800281a:	60f8      	str	r0, [r7, #12]
 800281c:	607a      	str	r2, [r7, #4]
 800281e:	461a      	mov	r2, r3
 8002820:	460b      	mov	r3, r1
 8002822:	817b      	strh	r3, [r7, #10]
 8002824:	4613      	mov	r3, r2
 8002826:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002828:	f7ff fa96 	bl	8001d58 <HAL_GetTick>
 800282c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002834:	b2db      	uxtb	r3, r3
 8002836:	2b20      	cmp	r3, #32
 8002838:	f040 8217 	bne.w	8002c6a <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800283c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283e:	9300      	str	r3, [sp, #0]
 8002840:	2319      	movs	r3, #25
 8002842:	2201      	movs	r2, #1
 8002844:	497c      	ldr	r1, [pc, #496]	; (8002a38 <HAL_I2C_Master_Receive+0x224>)
 8002846:	68f8      	ldr	r0, [r7, #12]
 8002848:	f002 f990 	bl	8004b6c <I2C_WaitOnFlagUntilTimeout>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d001      	beq.n	8002856 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002852:	2302      	movs	r3, #2
 8002854:	e20a      	b.n	8002c6c <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800285c:	2b01      	cmp	r3, #1
 800285e:	d101      	bne.n	8002864 <HAL_I2C_Master_Receive+0x50>
 8002860:	2302      	movs	r3, #2
 8002862:	e203      	b.n	8002c6c <HAL_I2C_Master_Receive+0x458>
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2201      	movs	r2, #1
 8002868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0301 	and.w	r3, r3, #1
 8002876:	2b01      	cmp	r3, #1
 8002878:	d007      	beq.n	800288a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f042 0201 	orr.w	r2, r2, #1
 8002888:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002898:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2222      	movs	r2, #34	; 0x22
 800289e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2210      	movs	r2, #16
 80028a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2200      	movs	r2, #0
 80028ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	893a      	ldrh	r2, [r7, #8]
 80028ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028c0:	b29a      	uxth	r2, r3
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	4a5c      	ldr	r2, [pc, #368]	; (8002a3c <HAL_I2C_Master_Receive+0x228>)
 80028ca:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80028cc:	8979      	ldrh	r1, [r7, #10]
 80028ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028d2:	68f8      	ldr	r0, [r7, #12]
 80028d4:	f001 ff3e 	bl	8004754 <I2C_MasterRequestRead>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d001      	beq.n	80028e2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e1c4      	b.n	8002c6c <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d113      	bne.n	8002912 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028ea:	2300      	movs	r3, #0
 80028ec:	623b      	str	r3, [r7, #32]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	695b      	ldr	r3, [r3, #20]
 80028f4:	623b      	str	r3, [r7, #32]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	699b      	ldr	r3, [r3, #24]
 80028fc:	623b      	str	r3, [r7, #32]
 80028fe:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800290e:	601a      	str	r2, [r3, #0]
 8002910:	e198      	b.n	8002c44 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002916:	2b01      	cmp	r3, #1
 8002918:	d11b      	bne.n	8002952 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002928:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800292a:	2300      	movs	r3, #0
 800292c:	61fb      	str	r3, [r7, #28]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	695b      	ldr	r3, [r3, #20]
 8002934:	61fb      	str	r3, [r7, #28]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	699b      	ldr	r3, [r3, #24]
 800293c:	61fb      	str	r3, [r7, #28]
 800293e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800294e:	601a      	str	r2, [r3, #0]
 8002950:	e178      	b.n	8002c44 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002956:	2b02      	cmp	r3, #2
 8002958:	d11b      	bne.n	8002992 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002968:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002978:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800297a:	2300      	movs	r3, #0
 800297c:	61bb      	str	r3, [r7, #24]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	695b      	ldr	r3, [r3, #20]
 8002984:	61bb      	str	r3, [r7, #24]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	699b      	ldr	r3, [r3, #24]
 800298c:	61bb      	str	r3, [r7, #24]
 800298e:	69bb      	ldr	r3, [r7, #24]
 8002990:	e158      	b.n	8002c44 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80029a0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029a2:	2300      	movs	r3, #0
 80029a4:	617b      	str	r3, [r7, #20]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	695b      	ldr	r3, [r3, #20]
 80029ac:	617b      	str	r3, [r7, #20]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	699b      	ldr	r3, [r3, #24]
 80029b4:	617b      	str	r3, [r7, #20]
 80029b6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80029b8:	e144      	b.n	8002c44 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029be:	2b03      	cmp	r3, #3
 80029c0:	f200 80f1 	bhi.w	8002ba6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d123      	bne.n	8002a14 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80029d0:	68f8      	ldr	r0, [r7, #12]
 80029d2:	f002 faa7 	bl	8004f24 <I2C_WaitOnRXNEFlagUntilTimeout>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d001      	beq.n	80029e0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e145      	b.n	8002c6c <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	691a      	ldr	r2, [r3, #16]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ea:	b2d2      	uxtb	r2, r2
 80029ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f2:	1c5a      	adds	r2, r3, #1
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029fc:	3b01      	subs	r3, #1
 80029fe:	b29a      	uxth	r2, r3
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a08:	b29b      	uxth	r3, r3
 8002a0a:	3b01      	subs	r3, #1
 8002a0c:	b29a      	uxth	r2, r3
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002a12:	e117      	b.n	8002c44 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	d14e      	bne.n	8002aba <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1e:	9300      	str	r3, [sp, #0]
 8002a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a22:	2200      	movs	r2, #0
 8002a24:	4906      	ldr	r1, [pc, #24]	; (8002a40 <HAL_I2C_Master_Receive+0x22c>)
 8002a26:	68f8      	ldr	r0, [r7, #12]
 8002a28:	f002 f8a0 	bl	8004b6c <I2C_WaitOnFlagUntilTimeout>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d008      	beq.n	8002a44 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e11a      	b.n	8002c6c <HAL_I2C_Master_Receive+0x458>
 8002a36:	bf00      	nop
 8002a38:	00100002 	.word	0x00100002
 8002a3c:	ffff0000 	.word	0xffff0000
 8002a40:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a52:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	691a      	ldr	r2, [r3, #16]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5e:	b2d2      	uxtb	r2, r2
 8002a60:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a66:	1c5a      	adds	r2, r3, #1
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a70:	3b01      	subs	r3, #1
 8002a72:	b29a      	uxth	r2, r3
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a7c:	b29b      	uxth	r3, r3
 8002a7e:	3b01      	subs	r3, #1
 8002a80:	b29a      	uxth	r2, r3
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	691a      	ldr	r2, [r3, #16]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a90:	b2d2      	uxtb	r2, r2
 8002a92:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a98:	1c5a      	adds	r2, r3, #1
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aa2:	3b01      	subs	r3, #1
 8002aa4:	b29a      	uxth	r2, r3
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	3b01      	subs	r3, #1
 8002ab2:	b29a      	uxth	r2, r3
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002ab8:	e0c4      	b.n	8002c44 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002abc:	9300      	str	r3, [sp, #0]
 8002abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	496c      	ldr	r1, [pc, #432]	; (8002c74 <HAL_I2C_Master_Receive+0x460>)
 8002ac4:	68f8      	ldr	r0, [r7, #12]
 8002ac6:	f002 f851 	bl	8004b6c <I2C_WaitOnFlagUntilTimeout>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d001      	beq.n	8002ad4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e0cb      	b.n	8002c6c <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ae2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	691a      	ldr	r2, [r3, #16]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aee:	b2d2      	uxtb	r2, r2
 8002af0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af6:	1c5a      	adds	r2, r3, #1
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b00:	3b01      	subs	r3, #1
 8002b02:	b29a      	uxth	r2, r3
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b0c:	b29b      	uxth	r3, r3
 8002b0e:	3b01      	subs	r3, #1
 8002b10:	b29a      	uxth	r2, r3
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b18:	9300      	str	r3, [sp, #0]
 8002b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	4955      	ldr	r1, [pc, #340]	; (8002c74 <HAL_I2C_Master_Receive+0x460>)
 8002b20:	68f8      	ldr	r0, [r7, #12]
 8002b22:	f002 f823 	bl	8004b6c <I2C_WaitOnFlagUntilTimeout>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d001      	beq.n	8002b30 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e09d      	b.n	8002c6c <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b3e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	691a      	ldr	r2, [r3, #16]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4a:	b2d2      	uxtb	r2, r2
 8002b4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b52:	1c5a      	adds	r2, r3, #1
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b5c:	3b01      	subs	r3, #1
 8002b5e:	b29a      	uxth	r2, r3
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	3b01      	subs	r3, #1
 8002b6c:	b29a      	uxth	r2, r3
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	691a      	ldr	r2, [r3, #16]
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7c:	b2d2      	uxtb	r2, r2
 8002b7e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b84:	1c5a      	adds	r2, r3, #1
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b8e:	3b01      	subs	r3, #1
 8002b90:	b29a      	uxth	r2, r3
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b9a:	b29b      	uxth	r3, r3
 8002b9c:	3b01      	subs	r3, #1
 8002b9e:	b29a      	uxth	r2, r3
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002ba4:	e04e      	b.n	8002c44 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ba6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ba8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002baa:	68f8      	ldr	r0, [r7, #12]
 8002bac:	f002 f9ba 	bl	8004f24 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d001      	beq.n	8002bba <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e058      	b.n	8002c6c <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	691a      	ldr	r2, [r3, #16]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc4:	b2d2      	uxtb	r2, r2
 8002bc6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bcc:	1c5a      	adds	r2, r3, #1
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bd6:	3b01      	subs	r3, #1
 8002bd8:	b29a      	uxth	r2, r3
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002be2:	b29b      	uxth	r3, r3
 8002be4:	3b01      	subs	r3, #1
 8002be6:	b29a      	uxth	r2, r3
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	695b      	ldr	r3, [r3, #20]
 8002bf2:	f003 0304 	and.w	r3, r3, #4
 8002bf6:	2b04      	cmp	r3, #4
 8002bf8:	d124      	bne.n	8002c44 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bfe:	2b03      	cmp	r3, #3
 8002c00:	d107      	bne.n	8002c12 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c10:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	691a      	ldr	r2, [r3, #16]
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1c:	b2d2      	uxtb	r2, r2
 8002c1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c24:	1c5a      	adds	r2, r3, #1
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c2e:	3b01      	subs	r3, #1
 8002c30:	b29a      	uxth	r2, r3
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	3b01      	subs	r3, #1
 8002c3e:	b29a      	uxth	r2, r3
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	f47f aeb6 	bne.w	80029ba <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2220      	movs	r2, #32
 8002c52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2200      	movs	r2, #0
 8002c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002c66:	2300      	movs	r3, #0
 8002c68:	e000      	b.n	8002c6c <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002c6a:	2302      	movs	r3, #2
  }
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3728      	adds	r7, #40	; 0x28
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}
 8002c74:	00010004 	.word	0x00010004

08002c78 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b088      	sub	sp, #32
 8002c7c:	af02      	add	r7, sp, #8
 8002c7e:	60f8      	str	r0, [r7, #12]
 8002c80:	4608      	mov	r0, r1
 8002c82:	4611      	mov	r1, r2
 8002c84:	461a      	mov	r2, r3
 8002c86:	4603      	mov	r3, r0
 8002c88:	817b      	strh	r3, [r7, #10]
 8002c8a:	460b      	mov	r3, r1
 8002c8c:	813b      	strh	r3, [r7, #8]
 8002c8e:	4613      	mov	r3, r2
 8002c90:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c92:	f7ff f861 	bl	8001d58 <HAL_GetTick>
 8002c96:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	2b20      	cmp	r3, #32
 8002ca2:	f040 80d9 	bne.w	8002e58 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	9300      	str	r3, [sp, #0]
 8002caa:	2319      	movs	r3, #25
 8002cac:	2201      	movs	r2, #1
 8002cae:	496d      	ldr	r1, [pc, #436]	; (8002e64 <HAL_I2C_Mem_Write+0x1ec>)
 8002cb0:	68f8      	ldr	r0, [r7, #12]
 8002cb2:	f001 ff5b 	bl	8004b6c <I2C_WaitOnFlagUntilTimeout>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d001      	beq.n	8002cc0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002cbc:	2302      	movs	r3, #2
 8002cbe:	e0cc      	b.n	8002e5a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d101      	bne.n	8002cce <HAL_I2C_Mem_Write+0x56>
 8002cca:	2302      	movs	r3, #2
 8002ccc:	e0c5      	b.n	8002e5a <HAL_I2C_Mem_Write+0x1e2>
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0301 	and.w	r3, r3, #1
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d007      	beq.n	8002cf4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f042 0201 	orr.w	r2, r2, #1
 8002cf2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d02:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2221      	movs	r2, #33	; 0x21
 8002d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2240      	movs	r2, #64	; 0x40
 8002d10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2200      	movs	r2, #0
 8002d18:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	6a3a      	ldr	r2, [r7, #32]
 8002d1e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002d24:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d2a:	b29a      	uxth	r2, r3
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	4a4d      	ldr	r2, [pc, #308]	; (8002e68 <HAL_I2C_Mem_Write+0x1f0>)
 8002d34:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002d36:	88f8      	ldrh	r0, [r7, #6]
 8002d38:	893a      	ldrh	r2, [r7, #8]
 8002d3a:	8979      	ldrh	r1, [r7, #10]
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	9301      	str	r3, [sp, #4]
 8002d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d42:	9300      	str	r3, [sp, #0]
 8002d44:	4603      	mov	r3, r0
 8002d46:	68f8      	ldr	r0, [r7, #12]
 8002d48:	f001 fdd2 	bl	80048f0 <I2C_RequestMemoryWrite>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d052      	beq.n	8002df8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e081      	b.n	8002e5a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d56:	697a      	ldr	r2, [r7, #20]
 8002d58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d5a:	68f8      	ldr	r0, [r7, #12]
 8002d5c:	f002 f820 	bl	8004da0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d00d      	beq.n	8002d82 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6a:	2b04      	cmp	r3, #4
 8002d6c:	d107      	bne.n	8002d7e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d7c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e06b      	b.n	8002e5a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d86:	781a      	ldrb	r2, [r3, #0]
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d92:	1c5a      	adds	r2, r3, #1
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d9c:	3b01      	subs	r3, #1
 8002d9e:	b29a      	uxth	r2, r3
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	3b01      	subs	r3, #1
 8002dac:	b29a      	uxth	r2, r3
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	695b      	ldr	r3, [r3, #20]
 8002db8:	f003 0304 	and.w	r3, r3, #4
 8002dbc:	2b04      	cmp	r3, #4
 8002dbe:	d11b      	bne.n	8002df8 <HAL_I2C_Mem_Write+0x180>
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d017      	beq.n	8002df8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dcc:	781a      	ldrb	r2, [r3, #0]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd8:	1c5a      	adds	r2, r3, #1
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002de2:	3b01      	subs	r3, #1
 8002de4:	b29a      	uxth	r2, r3
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dee:	b29b      	uxth	r3, r3
 8002df0:	3b01      	subs	r3, #1
 8002df2:	b29a      	uxth	r2, r3
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d1aa      	bne.n	8002d56 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e00:	697a      	ldr	r2, [r7, #20]
 8002e02:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e04:	68f8      	ldr	r0, [r7, #12]
 8002e06:	f002 f813 	bl	8004e30 <I2C_WaitOnBTFFlagUntilTimeout>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d00d      	beq.n	8002e2c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e14:	2b04      	cmp	r3, #4
 8002e16:	d107      	bne.n	8002e28 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e26:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e016      	b.n	8002e5a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e3a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2220      	movs	r2, #32
 8002e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2200      	movs	r2, #0
 8002e48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002e54:	2300      	movs	r3, #0
 8002e56:	e000      	b.n	8002e5a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002e58:	2302      	movs	r3, #2
  }
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3718      	adds	r7, #24
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	00100002 	.word	0x00100002
 8002e68:	ffff0000 	.word	0xffff0000

08002e6c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b08a      	sub	sp, #40	; 0x28
 8002e70:	af02      	add	r7, sp, #8
 8002e72:	60f8      	str	r0, [r7, #12]
 8002e74:	607a      	str	r2, [r7, #4]
 8002e76:	603b      	str	r3, [r7, #0]
 8002e78:	460b      	mov	r3, r1
 8002e7a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002e7c:	f7fe ff6c 	bl	8001d58 <HAL_GetTick>
 8002e80:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002e82:	2300      	movs	r3, #0
 8002e84:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	2b20      	cmp	r3, #32
 8002e90:	f040 8111 	bne.w	80030b6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	9300      	str	r3, [sp, #0]
 8002e98:	2319      	movs	r3, #25
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	4988      	ldr	r1, [pc, #544]	; (80030c0 <HAL_I2C_IsDeviceReady+0x254>)
 8002e9e:	68f8      	ldr	r0, [r7, #12]
 8002ea0:	f001 fe64 	bl	8004b6c <I2C_WaitOnFlagUntilTimeout>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d001      	beq.n	8002eae <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002eaa:	2302      	movs	r3, #2
 8002eac:	e104      	b.n	80030b8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d101      	bne.n	8002ebc <HAL_I2C_IsDeviceReady+0x50>
 8002eb8:	2302      	movs	r3, #2
 8002eba:	e0fd      	b.n	80030b8 <HAL_I2C_IsDeviceReady+0x24c>
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0301 	and.w	r3, r3, #1
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d007      	beq.n	8002ee2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f042 0201 	orr.w	r2, r2, #1
 8002ee0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ef0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2224      	movs	r2, #36	; 0x24
 8002ef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2200      	movs	r2, #0
 8002efe:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	4a70      	ldr	r2, [pc, #448]	; (80030c4 <HAL_I2C_IsDeviceReady+0x258>)
 8002f04:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f14:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	9300      	str	r3, [sp, #0]
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f22:	68f8      	ldr	r0, [r7, #12]
 8002f24:	f001 fe22 	bl	8004b6c <I2C_WaitOnFlagUntilTimeout>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d00d      	beq.n	8002f4a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f3c:	d103      	bne.n	8002f46 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f44:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e0b6      	b.n	80030b8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f4a:	897b      	ldrh	r3, [r7, #10]
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	461a      	mov	r2, r3
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002f58:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002f5a:	f7fe fefd 	bl	8001d58 <HAL_GetTick>
 8002f5e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	695b      	ldr	r3, [r3, #20]
 8002f66:	f003 0302 	and.w	r3, r3, #2
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	bf0c      	ite	eq
 8002f6e:	2301      	moveq	r3, #1
 8002f70:	2300      	movne	r3, #0
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	695b      	ldr	r3, [r3, #20]
 8002f7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f84:	bf0c      	ite	eq
 8002f86:	2301      	moveq	r3, #1
 8002f88:	2300      	movne	r3, #0
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002f8e:	e025      	b.n	8002fdc <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002f90:	f7fe fee2 	bl	8001d58 <HAL_GetTick>
 8002f94:	4602      	mov	r2, r0
 8002f96:	69fb      	ldr	r3, [r7, #28]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	683a      	ldr	r2, [r7, #0]
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d302      	bcc.n	8002fa6 <HAL_I2C_IsDeviceReady+0x13a>
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d103      	bne.n	8002fae <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	22a0      	movs	r2, #160	; 0xa0
 8002faa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	695b      	ldr	r3, [r3, #20]
 8002fb4:	f003 0302 	and.w	r3, r3, #2
 8002fb8:	2b02      	cmp	r3, #2
 8002fba:	bf0c      	ite	eq
 8002fbc:	2301      	moveq	r3, #1
 8002fbe:	2300      	movne	r3, #0
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	695b      	ldr	r3, [r3, #20]
 8002fca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fd2:	bf0c      	ite	eq
 8002fd4:	2301      	moveq	r3, #1
 8002fd6:	2300      	movne	r3, #0
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	2ba0      	cmp	r3, #160	; 0xa0
 8002fe6:	d005      	beq.n	8002ff4 <HAL_I2C_IsDeviceReady+0x188>
 8002fe8:	7dfb      	ldrb	r3, [r7, #23]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d102      	bne.n	8002ff4 <HAL_I2C_IsDeviceReady+0x188>
 8002fee:	7dbb      	ldrb	r3, [r7, #22]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d0cd      	beq.n	8002f90 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2220      	movs	r2, #32
 8002ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	695b      	ldr	r3, [r3, #20]
 8003002:	f003 0302 	and.w	r3, r3, #2
 8003006:	2b02      	cmp	r3, #2
 8003008:	d129      	bne.n	800305e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003018:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800301a:	2300      	movs	r3, #0
 800301c:	613b      	str	r3, [r7, #16]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	695b      	ldr	r3, [r3, #20]
 8003024:	613b      	str	r3, [r7, #16]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	699b      	ldr	r3, [r3, #24]
 800302c:	613b      	str	r3, [r7, #16]
 800302e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	9300      	str	r3, [sp, #0]
 8003034:	2319      	movs	r3, #25
 8003036:	2201      	movs	r2, #1
 8003038:	4921      	ldr	r1, [pc, #132]	; (80030c0 <HAL_I2C_IsDeviceReady+0x254>)
 800303a:	68f8      	ldr	r0, [r7, #12]
 800303c:	f001 fd96 	bl	8004b6c <I2C_WaitOnFlagUntilTimeout>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d001      	beq.n	800304a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e036      	b.n	80030b8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2220      	movs	r2, #32
 800304e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2200      	movs	r2, #0
 8003056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800305a:	2300      	movs	r3, #0
 800305c:	e02c      	b.n	80030b8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800306c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003076:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	9300      	str	r3, [sp, #0]
 800307c:	2319      	movs	r3, #25
 800307e:	2201      	movs	r2, #1
 8003080:	490f      	ldr	r1, [pc, #60]	; (80030c0 <HAL_I2C_IsDeviceReady+0x254>)
 8003082:	68f8      	ldr	r0, [r7, #12]
 8003084:	f001 fd72 	bl	8004b6c <I2C_WaitOnFlagUntilTimeout>
 8003088:	4603      	mov	r3, r0
 800308a:	2b00      	cmp	r3, #0
 800308c:	d001      	beq.n	8003092 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e012      	b.n	80030b8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003092:	69bb      	ldr	r3, [r7, #24]
 8003094:	3301      	adds	r3, #1
 8003096:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003098:	69ba      	ldr	r2, [r7, #24]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	429a      	cmp	r2, r3
 800309e:	f4ff af32 	bcc.w	8002f06 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2220      	movs	r2, #32
 80030a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2200      	movs	r2, #0
 80030ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e000      	b.n	80030b8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80030b6:	2302      	movs	r3, #2
  }
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3720      	adds	r7, #32
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	00100002 	.word	0x00100002
 80030c4:	ffff0000 	.word	0xffff0000

080030c8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b088      	sub	sp, #32
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80030d0:	2300      	movs	r3, #0
 80030d2:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e0:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030e8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030f0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80030f2:	7bfb      	ldrb	r3, [r7, #15]
 80030f4:	2b10      	cmp	r3, #16
 80030f6:	d003      	beq.n	8003100 <HAL_I2C_EV_IRQHandler+0x38>
 80030f8:	7bfb      	ldrb	r3, [r7, #15]
 80030fa:	2b40      	cmp	r3, #64	; 0x40
 80030fc:	f040 80c1 	bne.w	8003282 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	699b      	ldr	r3, [r3, #24]
 8003106:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	695b      	ldr	r3, [r3, #20]
 800310e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003110:	69fb      	ldr	r3, [r7, #28]
 8003112:	f003 0301 	and.w	r3, r3, #1
 8003116:	2b00      	cmp	r3, #0
 8003118:	d10d      	bne.n	8003136 <HAL_I2C_EV_IRQHandler+0x6e>
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003120:	d003      	beq.n	800312a <HAL_I2C_EV_IRQHandler+0x62>
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003128:	d101      	bne.n	800312e <HAL_I2C_EV_IRQHandler+0x66>
 800312a:	2301      	movs	r3, #1
 800312c:	e000      	b.n	8003130 <HAL_I2C_EV_IRQHandler+0x68>
 800312e:	2300      	movs	r3, #0
 8003130:	2b01      	cmp	r3, #1
 8003132:	f000 8132 	beq.w	800339a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	f003 0301 	and.w	r3, r3, #1
 800313c:	2b00      	cmp	r3, #0
 800313e:	d00c      	beq.n	800315a <HAL_I2C_EV_IRQHandler+0x92>
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	0a5b      	lsrs	r3, r3, #9
 8003144:	f003 0301 	and.w	r3, r3, #1
 8003148:	2b00      	cmp	r3, #0
 800314a:	d006      	beq.n	800315a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	f001 ff74 	bl	800503a <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f000 fcd6 	bl	8003b04 <I2C_Master_SB>
 8003158:	e092      	b.n	8003280 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	08db      	lsrs	r3, r3, #3
 800315e:	f003 0301 	and.w	r3, r3, #1
 8003162:	2b00      	cmp	r3, #0
 8003164:	d009      	beq.n	800317a <HAL_I2C_EV_IRQHandler+0xb2>
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	0a5b      	lsrs	r3, r3, #9
 800316a:	f003 0301 	and.w	r3, r3, #1
 800316e:	2b00      	cmp	r3, #0
 8003170:	d003      	beq.n	800317a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f000 fd4b 	bl	8003c0e <I2C_Master_ADD10>
 8003178:	e082      	b.n	8003280 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	085b      	lsrs	r3, r3, #1
 800317e:	f003 0301 	and.w	r3, r3, #1
 8003182:	2b00      	cmp	r3, #0
 8003184:	d009      	beq.n	800319a <HAL_I2C_EV_IRQHandler+0xd2>
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	0a5b      	lsrs	r3, r3, #9
 800318a:	f003 0301 	and.w	r3, r3, #1
 800318e:	2b00      	cmp	r3, #0
 8003190:	d003      	beq.n	800319a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f000 fd64 	bl	8003c60 <I2C_Master_ADDR>
 8003198:	e072      	b.n	8003280 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800319a:	69bb      	ldr	r3, [r7, #24]
 800319c:	089b      	lsrs	r3, r3, #2
 800319e:	f003 0301 	and.w	r3, r3, #1
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d03b      	beq.n	800321e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031b4:	f000 80f3 	beq.w	800339e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	09db      	lsrs	r3, r3, #7
 80031bc:	f003 0301 	and.w	r3, r3, #1
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d00f      	beq.n	80031e4 <HAL_I2C_EV_IRQHandler+0x11c>
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	0a9b      	lsrs	r3, r3, #10
 80031c8:	f003 0301 	and.w	r3, r3, #1
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d009      	beq.n	80031e4 <HAL_I2C_EV_IRQHandler+0x11c>
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	089b      	lsrs	r3, r3, #2
 80031d4:	f003 0301 	and.w	r3, r3, #1
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d103      	bne.n	80031e4 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f000 f942 	bl	8003466 <I2C_MasterTransmit_TXE>
 80031e2:	e04d      	b.n	8003280 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	089b      	lsrs	r3, r3, #2
 80031e8:	f003 0301 	and.w	r3, r3, #1
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	f000 80d6 	beq.w	800339e <HAL_I2C_EV_IRQHandler+0x2d6>
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	0a5b      	lsrs	r3, r3, #9
 80031f6:	f003 0301 	and.w	r3, r3, #1
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	f000 80cf 	beq.w	800339e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003200:	7bbb      	ldrb	r3, [r7, #14]
 8003202:	2b21      	cmp	r3, #33	; 0x21
 8003204:	d103      	bne.n	800320e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f000 f9c9 	bl	800359e <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800320c:	e0c7      	b.n	800339e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800320e:	7bfb      	ldrb	r3, [r7, #15]
 8003210:	2b40      	cmp	r3, #64	; 0x40
 8003212:	f040 80c4 	bne.w	800339e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f000 fa37 	bl	800368a <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800321c:	e0bf      	b.n	800339e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003228:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800322c:	f000 80b7 	beq.w	800339e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	099b      	lsrs	r3, r3, #6
 8003234:	f003 0301 	and.w	r3, r3, #1
 8003238:	2b00      	cmp	r3, #0
 800323a:	d00f      	beq.n	800325c <HAL_I2C_EV_IRQHandler+0x194>
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	0a9b      	lsrs	r3, r3, #10
 8003240:	f003 0301 	and.w	r3, r3, #1
 8003244:	2b00      	cmp	r3, #0
 8003246:	d009      	beq.n	800325c <HAL_I2C_EV_IRQHandler+0x194>
 8003248:	69fb      	ldr	r3, [r7, #28]
 800324a:	089b      	lsrs	r3, r3, #2
 800324c:	f003 0301 	and.w	r3, r3, #1
 8003250:	2b00      	cmp	r3, #0
 8003252:	d103      	bne.n	800325c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f000 fab0 	bl	80037ba <I2C_MasterReceive_RXNE>
 800325a:	e011      	b.n	8003280 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	089b      	lsrs	r3, r3, #2
 8003260:	f003 0301 	and.w	r3, r3, #1
 8003264:	2b00      	cmp	r3, #0
 8003266:	f000 809a 	beq.w	800339e <HAL_I2C_EV_IRQHandler+0x2d6>
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	0a5b      	lsrs	r3, r3, #9
 800326e:	f003 0301 	and.w	r3, r3, #1
 8003272:	2b00      	cmp	r3, #0
 8003274:	f000 8093 	beq.w	800339e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	f000 fb59 	bl	8003930 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800327e:	e08e      	b.n	800339e <HAL_I2C_EV_IRQHandler+0x2d6>
 8003280:	e08d      	b.n	800339e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003286:	2b00      	cmp	r3, #0
 8003288:	d004      	beq.n	8003294 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	695b      	ldr	r3, [r3, #20]
 8003290:	61fb      	str	r3, [r7, #28]
 8003292:	e007      	b.n	80032a4 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	699b      	ldr	r3, [r3, #24]
 800329a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	695b      	ldr	r3, [r3, #20]
 80032a2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032a4:	69fb      	ldr	r3, [r7, #28]
 80032a6:	085b      	lsrs	r3, r3, #1
 80032a8:	f003 0301 	and.w	r3, r3, #1
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d012      	beq.n	80032d6 <HAL_I2C_EV_IRQHandler+0x20e>
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	0a5b      	lsrs	r3, r3, #9
 80032b4:	f003 0301 	and.w	r3, r3, #1
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d00c      	beq.n	80032d6 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d003      	beq.n	80032cc <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	699b      	ldr	r3, [r3, #24]
 80032ca:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80032cc:	69b9      	ldr	r1, [r7, #24]
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f000 ff12 	bl	80040f8 <I2C_Slave_ADDR>
 80032d4:	e066      	b.n	80033a4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	091b      	lsrs	r3, r3, #4
 80032da:	f003 0301 	and.w	r3, r3, #1
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d009      	beq.n	80032f6 <HAL_I2C_EV_IRQHandler+0x22e>
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	0a5b      	lsrs	r3, r3, #9
 80032e6:	f003 0301 	and.w	r3, r3, #1
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d003      	beq.n	80032f6 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f000 ff4c 	bl	800418c <I2C_Slave_STOPF>
 80032f4:	e056      	b.n	80033a4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80032f6:	7bbb      	ldrb	r3, [r7, #14]
 80032f8:	2b21      	cmp	r3, #33	; 0x21
 80032fa:	d002      	beq.n	8003302 <HAL_I2C_EV_IRQHandler+0x23a>
 80032fc:	7bbb      	ldrb	r3, [r7, #14]
 80032fe:	2b29      	cmp	r3, #41	; 0x29
 8003300:	d125      	bne.n	800334e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	09db      	lsrs	r3, r3, #7
 8003306:	f003 0301 	and.w	r3, r3, #1
 800330a:	2b00      	cmp	r3, #0
 800330c:	d00f      	beq.n	800332e <HAL_I2C_EV_IRQHandler+0x266>
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	0a9b      	lsrs	r3, r3, #10
 8003312:	f003 0301 	and.w	r3, r3, #1
 8003316:	2b00      	cmp	r3, #0
 8003318:	d009      	beq.n	800332e <HAL_I2C_EV_IRQHandler+0x266>
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	089b      	lsrs	r3, r3, #2
 800331e:	f003 0301 	and.w	r3, r3, #1
 8003322:	2b00      	cmp	r3, #0
 8003324:	d103      	bne.n	800332e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f000 fe2a 	bl	8003f80 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800332c:	e039      	b.n	80033a2 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	089b      	lsrs	r3, r3, #2
 8003332:	f003 0301 	and.w	r3, r3, #1
 8003336:	2b00      	cmp	r3, #0
 8003338:	d033      	beq.n	80033a2 <HAL_I2C_EV_IRQHandler+0x2da>
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	0a5b      	lsrs	r3, r3, #9
 800333e:	f003 0301 	and.w	r3, r3, #1
 8003342:	2b00      	cmp	r3, #0
 8003344:	d02d      	beq.n	80033a2 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f000 fe57 	bl	8003ffa <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800334c:	e029      	b.n	80033a2 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	099b      	lsrs	r3, r3, #6
 8003352:	f003 0301 	and.w	r3, r3, #1
 8003356:	2b00      	cmp	r3, #0
 8003358:	d00f      	beq.n	800337a <HAL_I2C_EV_IRQHandler+0x2b2>
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	0a9b      	lsrs	r3, r3, #10
 800335e:	f003 0301 	and.w	r3, r3, #1
 8003362:	2b00      	cmp	r3, #0
 8003364:	d009      	beq.n	800337a <HAL_I2C_EV_IRQHandler+0x2b2>
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	089b      	lsrs	r3, r3, #2
 800336a:	f003 0301 	and.w	r3, r3, #1
 800336e:	2b00      	cmp	r3, #0
 8003370:	d103      	bne.n	800337a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f000 fe61 	bl	800403a <I2C_SlaveReceive_RXNE>
 8003378:	e014      	b.n	80033a4 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	089b      	lsrs	r3, r3, #2
 800337e:	f003 0301 	and.w	r3, r3, #1
 8003382:	2b00      	cmp	r3, #0
 8003384:	d00e      	beq.n	80033a4 <HAL_I2C_EV_IRQHandler+0x2dc>
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	0a5b      	lsrs	r3, r3, #9
 800338a:	f003 0301 	and.w	r3, r3, #1
 800338e:	2b00      	cmp	r3, #0
 8003390:	d008      	beq.n	80033a4 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f000 fe8f 	bl	80040b6 <I2C_SlaveReceive_BTF>
 8003398:	e004      	b.n	80033a4 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800339a:	bf00      	nop
 800339c:	e002      	b.n	80033a4 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800339e:	bf00      	nop
 80033a0:	e000      	b.n	80033a4 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80033a2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80033a4:	3720      	adds	r7, #32
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}

080033aa <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80033aa:	b480      	push	{r7}
 80033ac:	b083      	sub	sp, #12
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80033b2:	bf00      	nop
 80033b4:	370c      	adds	r7, #12
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bc80      	pop	{r7}
 80033ba:	4770      	bx	lr

080033bc <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80033bc:	b480      	push	{r7}
 80033be:	b083      	sub	sp, #12
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80033c4:	bf00      	nop
 80033c6:	370c      	adds	r7, #12
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bc80      	pop	{r7}
 80033cc:	4770      	bx	lr

080033ce <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80033ce:	b480      	push	{r7}
 80033d0:	b083      	sub	sp, #12
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80033d6:	bf00      	nop
 80033d8:	370c      	adds	r7, #12
 80033da:	46bd      	mov	sp, r7
 80033dc:	bc80      	pop	{r7}
 80033de:	4770      	bx	lr

080033e0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80033e8:	bf00      	nop
 80033ea:	370c      	adds	r7, #12
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bc80      	pop	{r7}
 80033f0:	4770      	bx	lr

080033f2 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80033f2:	b480      	push	{r7}
 80033f4:	b083      	sub	sp, #12
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	6078      	str	r0, [r7, #4]
 80033fa:	460b      	mov	r3, r1
 80033fc:	70fb      	strb	r3, [r7, #3]
 80033fe:	4613      	mov	r3, r2
 8003400:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003402:	bf00      	nop
 8003404:	370c      	adds	r7, #12
 8003406:	46bd      	mov	sp, r7
 8003408:	bc80      	pop	{r7}
 800340a:	4770      	bx	lr

0800340c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003414:	bf00      	nop
 8003416:	370c      	adds	r7, #12
 8003418:	46bd      	mov	sp, r7
 800341a:	bc80      	pop	{r7}
 800341c:	4770      	bx	lr

0800341e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800341e:	b480      	push	{r7}
 8003420:	b083      	sub	sp, #12
 8003422:	af00      	add	r7, sp, #0
 8003424:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003426:	bf00      	nop
 8003428:	370c      	adds	r7, #12
 800342a:	46bd      	mov	sp, r7
 800342c:	bc80      	pop	{r7}
 800342e:	4770      	bx	lr

08003430 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003430:	b480      	push	{r7}
 8003432:	b083      	sub	sp, #12
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003438:	bf00      	nop
 800343a:	370c      	adds	r7, #12
 800343c:	46bd      	mov	sp, r7
 800343e:	bc80      	pop	{r7}
 8003440:	4770      	bx	lr

08003442 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003442:	b480      	push	{r7}
 8003444:	b083      	sub	sp, #12
 8003446:	af00      	add	r7, sp, #0
 8003448:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800344a:	bf00      	nop
 800344c:	370c      	adds	r7, #12
 800344e:	46bd      	mov	sp, r7
 8003450:	bc80      	pop	{r7}
 8003452:	4770      	bx	lr

08003454 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003454:	b480      	push	{r7}
 8003456:	b083      	sub	sp, #12
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800345c:	bf00      	nop
 800345e:	370c      	adds	r7, #12
 8003460:	46bd      	mov	sp, r7
 8003462:	bc80      	pop	{r7}
 8003464:	4770      	bx	lr

08003466 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003466:	b580      	push	{r7, lr}
 8003468:	b084      	sub	sp, #16
 800346a:	af00      	add	r7, sp, #0
 800346c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003474:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800347c:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003482:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003488:	2b00      	cmp	r3, #0
 800348a:	d150      	bne.n	800352e <I2C_MasterTransmit_TXE+0xc8>
 800348c:	7bfb      	ldrb	r3, [r7, #15]
 800348e:	2b21      	cmp	r3, #33	; 0x21
 8003490:	d14d      	bne.n	800352e <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	2b08      	cmp	r3, #8
 8003496:	d01d      	beq.n	80034d4 <I2C_MasterTransmit_TXE+0x6e>
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	2b20      	cmp	r3, #32
 800349c:	d01a      	beq.n	80034d4 <I2C_MasterTransmit_TXE+0x6e>
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80034a4:	d016      	beq.n	80034d4 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	685a      	ldr	r2, [r3, #4]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80034b4:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2211      	movs	r2, #17
 80034ba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2200      	movs	r2, #0
 80034c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2220      	movs	r2, #32
 80034c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f7ff ff6c 	bl	80033aa <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80034d2:	e060      	b.n	8003596 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	685a      	ldr	r2, [r3, #4]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80034e2:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034f2:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2200      	movs	r2, #0
 80034f8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2220      	movs	r2, #32
 80034fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003508:	b2db      	uxtb	r3, r3
 800350a:	2b40      	cmp	r3, #64	; 0x40
 800350c:	d107      	bne.n	800351e <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2200      	movs	r2, #0
 8003512:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f7ff ff81 	bl	800341e <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800351c:	e03b      	b.n	8003596 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f7ff ff3f 	bl	80033aa <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800352c:	e033      	b.n	8003596 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800352e:	7bfb      	ldrb	r3, [r7, #15]
 8003530:	2b21      	cmp	r3, #33	; 0x21
 8003532:	d005      	beq.n	8003540 <I2C_MasterTransmit_TXE+0xda>
 8003534:	7bbb      	ldrb	r3, [r7, #14]
 8003536:	2b40      	cmp	r3, #64	; 0x40
 8003538:	d12d      	bne.n	8003596 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800353a:	7bfb      	ldrb	r3, [r7, #15]
 800353c:	2b22      	cmp	r3, #34	; 0x22
 800353e:	d12a      	bne.n	8003596 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003544:	b29b      	uxth	r3, r3
 8003546:	2b00      	cmp	r3, #0
 8003548:	d108      	bne.n	800355c <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	685a      	ldr	r2, [r3, #4]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003558:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800355a:	e01c      	b.n	8003596 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003562:	b2db      	uxtb	r3, r3
 8003564:	2b40      	cmp	r3, #64	; 0x40
 8003566:	d103      	bne.n	8003570 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f000 f88e 	bl	800368a <I2C_MemoryTransmit_TXE_BTF>
}
 800356e:	e012      	b.n	8003596 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003574:	781a      	ldrb	r2, [r3, #0]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003580:	1c5a      	adds	r2, r3, #1
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800358a:	b29b      	uxth	r3, r3
 800358c:	3b01      	subs	r3, #1
 800358e:	b29a      	uxth	r2, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003594:	e7ff      	b.n	8003596 <I2C_MasterTransmit_TXE+0x130>
 8003596:	bf00      	nop
 8003598:	3710      	adds	r7, #16
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}

0800359e <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800359e:	b580      	push	{r7, lr}
 80035a0:	b084      	sub	sp, #16
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035aa:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	2b21      	cmp	r3, #33	; 0x21
 80035b6:	d164      	bne.n	8003682 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035bc:	b29b      	uxth	r3, r3
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d012      	beq.n	80035e8 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c6:	781a      	ldrb	r2, [r3, #0]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d2:	1c5a      	adds	r2, r3, #1
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035dc:	b29b      	uxth	r3, r3
 80035de:	3b01      	subs	r3, #1
 80035e0:	b29a      	uxth	r2, r3
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80035e6:	e04c      	b.n	8003682 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2b08      	cmp	r3, #8
 80035ec:	d01d      	beq.n	800362a <I2C_MasterTransmit_BTF+0x8c>
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2b20      	cmp	r3, #32
 80035f2:	d01a      	beq.n	800362a <I2C_MasterTransmit_BTF+0x8c>
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80035fa:	d016      	beq.n	800362a <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	685a      	ldr	r2, [r3, #4]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800360a:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2211      	movs	r2, #17
 8003610:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2220      	movs	r2, #32
 800361e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f7ff fec1 	bl	80033aa <HAL_I2C_MasterTxCpltCallback>
}
 8003628:	e02b      	b.n	8003682 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	685a      	ldr	r2, [r3, #4]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003638:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003648:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2220      	movs	r2, #32
 8003654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800365e:	b2db      	uxtb	r3, r3
 8003660:	2b40      	cmp	r3, #64	; 0x40
 8003662:	d107      	bne.n	8003674 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2200      	movs	r2, #0
 8003668:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f7ff fed6 	bl	800341e <HAL_I2C_MemTxCpltCallback>
}
 8003672:	e006      	b.n	8003682 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f7ff fe94 	bl	80033aa <HAL_I2C_MasterTxCpltCallback>
}
 8003682:	bf00      	nop
 8003684:	3710      	adds	r7, #16
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}

0800368a <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800368a:	b580      	push	{r7, lr}
 800368c:	b084      	sub	sp, #16
 800368e:	af00      	add	r7, sp, #0
 8003690:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003698:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d11d      	bne.n	80036de <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d10b      	bne.n	80036c2 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036ae:	b2da      	uxtb	r2, r3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036ba:	1c9a      	adds	r2, r3, #2
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 80036c0:	e077      	b.n	80037b2 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	121b      	asrs	r3, r3, #8
 80036ca:	b2da      	uxtb	r2, r3
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036d6:	1c5a      	adds	r2, r3, #1
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	651a      	str	r2, [r3, #80]	; 0x50
}
 80036dc:	e069      	b.n	80037b2 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d10b      	bne.n	80036fe <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036ea:	b2da      	uxtb	r2, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036f6:	1c5a      	adds	r2, r3, #1
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	651a      	str	r2, [r3, #80]	; 0x50
}
 80036fc:	e059      	b.n	80037b2 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003702:	2b02      	cmp	r3, #2
 8003704:	d152      	bne.n	80037ac <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003706:	7bfb      	ldrb	r3, [r7, #15]
 8003708:	2b22      	cmp	r3, #34	; 0x22
 800370a:	d10d      	bne.n	8003728 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800371a:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003720:	1c5a      	adds	r2, r3, #1
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003726:	e044      	b.n	80037b2 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800372c:	b29b      	uxth	r3, r3
 800372e:	2b00      	cmp	r3, #0
 8003730:	d015      	beq.n	800375e <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003732:	7bfb      	ldrb	r3, [r7, #15]
 8003734:	2b21      	cmp	r3, #33	; 0x21
 8003736:	d112      	bne.n	800375e <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373c:	781a      	ldrb	r2, [r3, #0]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003748:	1c5a      	adds	r2, r3, #1
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003752:	b29b      	uxth	r3, r3
 8003754:	3b01      	subs	r3, #1
 8003756:	b29a      	uxth	r2, r3
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800375c:	e029      	b.n	80037b2 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003762:	b29b      	uxth	r3, r3
 8003764:	2b00      	cmp	r3, #0
 8003766:	d124      	bne.n	80037b2 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8003768:	7bfb      	ldrb	r3, [r7, #15]
 800376a:	2b21      	cmp	r3, #33	; 0x21
 800376c:	d121      	bne.n	80037b2 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	685a      	ldr	r2, [r3, #4]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800377c:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800378c:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2220      	movs	r2, #32
 8003798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f7ff fe3a 	bl	800341e <HAL_I2C_MemTxCpltCallback>
}
 80037aa:	e002      	b.n	80037b2 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	f7fe ff1f 	bl	80025f0 <I2C_Flush_DR>
}
 80037b2:	bf00      	nop
 80037b4:	3710      	adds	r7, #16
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}

080037ba <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80037ba:	b580      	push	{r7, lr}
 80037bc:	b084      	sub	sp, #16
 80037be:	af00      	add	r7, sp, #0
 80037c0:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	2b22      	cmp	r3, #34	; 0x22
 80037cc:	f040 80ac 	bne.w	8003928 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037d4:	b29b      	uxth	r3, r3
 80037d6:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2b03      	cmp	r3, #3
 80037dc:	d921      	bls.n	8003822 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	691a      	ldr	r2, [r3, #16]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e8:	b2d2      	uxtb	r2, r2
 80037ea:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f0:	1c5a      	adds	r2, r3, #1
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037fa:	b29b      	uxth	r3, r3
 80037fc:	3b01      	subs	r3, #1
 80037fe:	b29a      	uxth	r2, r3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003808:	b29b      	uxth	r3, r3
 800380a:	2b03      	cmp	r3, #3
 800380c:	f040 808c 	bne.w	8003928 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	685a      	ldr	r2, [r3, #4]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800381e:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003820:	e082      	b.n	8003928 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003826:	2b02      	cmp	r3, #2
 8003828:	d075      	beq.n	8003916 <I2C_MasterReceive_RXNE+0x15c>
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2b01      	cmp	r3, #1
 800382e:	d002      	beq.n	8003836 <I2C_MasterReceive_RXNE+0x7c>
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d16f      	bne.n	8003916 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f001 fb42 	bl	8004ec0 <I2C_WaitOnSTOPRequestThroughIT>
 800383c:	4603      	mov	r3, r0
 800383e:	2b00      	cmp	r3, #0
 8003840:	d142      	bne.n	80038c8 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003850:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	685a      	ldr	r2, [r3, #4]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003860:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	691a      	ldr	r2, [r3, #16]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386c:	b2d2      	uxtb	r2, r2
 800386e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003874:	1c5a      	adds	r2, r3, #1
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800387e:	b29b      	uxth	r3, r3
 8003880:	3b01      	subs	r3, #1
 8003882:	b29a      	uxth	r2, r3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2220      	movs	r2, #32
 800388c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003896:	b2db      	uxtb	r3, r3
 8003898:	2b40      	cmp	r3, #64	; 0x40
 800389a:	d10a      	bne.n	80038b2 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2200      	movs	r2, #0
 80038a8:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f7ff fdc0 	bl	8003430 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80038b0:	e03a      	b.n	8003928 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2212      	movs	r2, #18
 80038be:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f7ff fd7b 	bl	80033bc <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80038c6:	e02f      	b.n	8003928 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	685a      	ldr	r2, [r3, #4]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80038d6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	691a      	ldr	r2, [r3, #16]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e2:	b2d2      	uxtb	r2, r2
 80038e4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ea:	1c5a      	adds	r2, r3, #1
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	3b01      	subs	r3, #1
 80038f8:	b29a      	uxth	r2, r3
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2220      	movs	r2, #32
 8003902:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2200      	movs	r2, #0
 800390a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f7ff fd97 	bl	8003442 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003914:	e008      	b.n	8003928 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	685a      	ldr	r2, [r3, #4]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003924:	605a      	str	r2, [r3, #4]
}
 8003926:	e7ff      	b.n	8003928 <I2C_MasterReceive_RXNE+0x16e>
 8003928:	bf00      	nop
 800392a:	3710      	adds	r7, #16
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}

08003930 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b084      	sub	sp, #16
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800393c:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003942:	b29b      	uxth	r3, r3
 8003944:	2b04      	cmp	r3, #4
 8003946:	d11b      	bne.n	8003980 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	685a      	ldr	r2, [r3, #4]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003956:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	691a      	ldr	r2, [r3, #16]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003962:	b2d2      	uxtb	r2, r2
 8003964:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396a:	1c5a      	adds	r2, r3, #1
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003974:	b29b      	uxth	r3, r3
 8003976:	3b01      	subs	r3, #1
 8003978:	b29a      	uxth	r2, r3
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800397e:	e0bd      	b.n	8003afc <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003984:	b29b      	uxth	r3, r3
 8003986:	2b03      	cmp	r3, #3
 8003988:	d129      	bne.n	80039de <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	685a      	ldr	r2, [r3, #4]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003998:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2b04      	cmp	r3, #4
 800399e:	d00a      	beq.n	80039b6 <I2C_MasterReceive_BTF+0x86>
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	d007      	beq.n	80039b6 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039b4:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	691a      	ldr	r2, [r3, #16]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c0:	b2d2      	uxtb	r2, r2
 80039c2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c8:	1c5a      	adds	r2, r3, #1
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	3b01      	subs	r3, #1
 80039d6:	b29a      	uxth	r2, r3
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80039dc:	e08e      	b.n	8003afc <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039e2:	b29b      	uxth	r3, r3
 80039e4:	2b02      	cmp	r3, #2
 80039e6:	d176      	bne.n	8003ad6 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d002      	beq.n	80039f4 <I2C_MasterReceive_BTF+0xc4>
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2b10      	cmp	r3, #16
 80039f2:	d108      	bne.n	8003a06 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a02:	601a      	str	r2, [r3, #0]
 8003a04:	e019      	b.n	8003a3a <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2b04      	cmp	r3, #4
 8003a0a:	d002      	beq.n	8003a12 <I2C_MasterReceive_BTF+0xe2>
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2b02      	cmp	r3, #2
 8003a10:	d108      	bne.n	8003a24 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003a20:	601a      	str	r2, [r3, #0]
 8003a22:	e00a      	b.n	8003a3a <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2b10      	cmp	r3, #16
 8003a28:	d007      	beq.n	8003a3a <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a38:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	691a      	ldr	r2, [r3, #16]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a44:	b2d2      	uxtb	r2, r2
 8003a46:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4c:	1c5a      	adds	r2, r3, #1
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a56:	b29b      	uxth	r3, r3
 8003a58:	3b01      	subs	r3, #1
 8003a5a:	b29a      	uxth	r2, r3
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	691a      	ldr	r2, [r3, #16]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6a:	b2d2      	uxtb	r2, r2
 8003a6c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a72:	1c5a      	adds	r2, r3, #1
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a7c:	b29b      	uxth	r3, r3
 8003a7e:	3b01      	subs	r3, #1
 8003a80:	b29a      	uxth	r2, r3
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	685a      	ldr	r2, [r3, #4]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003a94:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2220      	movs	r2, #32
 8003a9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	2b40      	cmp	r3, #64	; 0x40
 8003aa8:	d10a      	bne.n	8003ac0 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f7ff fcb9 	bl	8003430 <HAL_I2C_MemRxCpltCallback>
}
 8003abe:	e01d      	b.n	8003afc <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2212      	movs	r2, #18
 8003acc:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f7ff fc74 	bl	80033bc <HAL_I2C_MasterRxCpltCallback>
}
 8003ad4:	e012      	b.n	8003afc <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	691a      	ldr	r2, [r3, #16]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae0:	b2d2      	uxtb	r2, r2
 8003ae2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae8:	1c5a      	adds	r2, r3, #1
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	3b01      	subs	r3, #1
 8003af6:	b29a      	uxth	r2, r3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003afc:	bf00      	nop
 8003afe:	3710      	adds	r7, #16
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}

08003b04 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b083      	sub	sp, #12
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	2b40      	cmp	r3, #64	; 0x40
 8003b16:	d117      	bne.n	8003b48 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d109      	bne.n	8003b34 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	461a      	mov	r2, r3
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003b30:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003b32:	e067      	b.n	8003c04 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	f043 0301 	orr.w	r3, r3, #1
 8003b3e:	b2da      	uxtb	r2, r3
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	611a      	str	r2, [r3, #16]
}
 8003b46:	e05d      	b.n	8003c04 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	691b      	ldr	r3, [r3, #16]
 8003b4c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b50:	d133      	bne.n	8003bba <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	2b21      	cmp	r3, #33	; 0x21
 8003b5c:	d109      	bne.n	8003b72 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	461a      	mov	r2, r3
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003b6e:	611a      	str	r2, [r3, #16]
 8003b70:	e008      	b.n	8003b84 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	f043 0301 	orr.w	r3, r3, #1
 8003b7c:	b2da      	uxtb	r2, r3
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d004      	beq.n	8003b96 <I2C_Master_SB+0x92>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d108      	bne.n	8003ba8 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d032      	beq.n	8003c04 <I2C_Master_SB+0x100>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d02d      	beq.n	8003c04 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	685a      	ldr	r2, [r3, #4]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003bb6:	605a      	str	r2, [r3, #4]
}
 8003bb8:	e024      	b.n	8003c04 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d10e      	bne.n	8003be0 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	11db      	asrs	r3, r3, #7
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	f003 0306 	and.w	r3, r3, #6
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	f063 030f 	orn	r3, r3, #15
 8003bd6:	b2da      	uxtb	r2, r3
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	611a      	str	r2, [r3, #16]
}
 8003bde:	e011      	b.n	8003c04 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d10d      	bne.n	8003c04 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	11db      	asrs	r3, r3, #7
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	f003 0306 	and.w	r3, r3, #6
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	f063 030e 	orn	r3, r3, #14
 8003bfc:	b2da      	uxtb	r2, r3
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	611a      	str	r2, [r3, #16]
}
 8003c04:	bf00      	nop
 8003c06:	370c      	adds	r7, #12
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bc80      	pop	{r7}
 8003c0c:	4770      	bx	lr

08003c0e <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003c0e:	b480      	push	{r7}
 8003c10:	b083      	sub	sp, #12
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c1a:	b2da      	uxtb	r2, r3
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d004      	beq.n	8003c34 <I2C_Master_ADD10+0x26>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d108      	bne.n	8003c46 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d00c      	beq.n	8003c56 <I2C_Master_ADD10+0x48>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d007      	beq.n	8003c56 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	685a      	ldr	r2, [r3, #4]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c54:	605a      	str	r2, [r3, #4]
  }
}
 8003c56:	bf00      	nop
 8003c58:	370c      	adds	r7, #12
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bc80      	pop	{r7}
 8003c5e:	4770      	bx	lr

08003c60 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b091      	sub	sp, #68	; 0x44
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c6e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c76:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c7c:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	2b22      	cmp	r3, #34	; 0x22
 8003c88:	f040 8169 	bne.w	8003f5e <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d10f      	bne.n	8003cb4 <I2C_Master_ADDR+0x54>
 8003c94:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003c98:	2b40      	cmp	r3, #64	; 0x40
 8003c9a:	d10b      	bne.n	8003cb4 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	633b      	str	r3, [r7, #48]	; 0x30
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	695b      	ldr	r3, [r3, #20]
 8003ca6:	633b      	str	r3, [r7, #48]	; 0x30
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	699b      	ldr	r3, [r3, #24]
 8003cae:	633b      	str	r3, [r7, #48]	; 0x30
 8003cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cb2:	e160      	b.n	8003f76 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d11d      	bne.n	8003cf8 <I2C_Master_ADDR+0x98>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	691b      	ldr	r3, [r3, #16]
 8003cc0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003cc4:	d118      	bne.n	8003cf8 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	695b      	ldr	r3, [r3, #20]
 8003cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	699b      	ldr	r3, [r3, #24]
 8003cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cea:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cf0:	1c5a      	adds	r2, r3, #1
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	651a      	str	r2, [r3, #80]	; 0x50
 8003cf6:	e13e      	b.n	8003f76 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d113      	bne.n	8003d2a <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d02:	2300      	movs	r3, #0
 8003d04:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	695b      	ldr	r3, [r3, #20]
 8003d0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	699b      	ldr	r3, [r3, #24]
 8003d14:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d16:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d26:	601a      	str	r2, [r3, #0]
 8003d28:	e115      	b.n	8003f56 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	f040 808a 	bne.w	8003e4a <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d38:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003d3c:	d137      	bne.n	8003dae <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d4c:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d5c:	d113      	bne.n	8003d86 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d6c:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d6e:	2300      	movs	r3, #0
 8003d70:	627b      	str	r3, [r7, #36]	; 0x24
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	695b      	ldr	r3, [r3, #20]
 8003d78:	627b      	str	r3, [r7, #36]	; 0x24
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	699b      	ldr	r3, [r3, #24]
 8003d80:	627b      	str	r3, [r7, #36]	; 0x24
 8003d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d84:	e0e7      	b.n	8003f56 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d86:	2300      	movs	r3, #0
 8003d88:	623b      	str	r3, [r7, #32]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	695b      	ldr	r3, [r3, #20]
 8003d90:	623b      	str	r3, [r7, #32]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	699b      	ldr	r3, [r3, #24]
 8003d98:	623b      	str	r3, [r7, #32]
 8003d9a:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003daa:	601a      	str	r2, [r3, #0]
 8003dac:	e0d3      	b.n	8003f56 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003db0:	2b08      	cmp	r3, #8
 8003db2:	d02e      	beq.n	8003e12 <I2C_Master_ADDR+0x1b2>
 8003db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003db6:	2b20      	cmp	r3, #32
 8003db8:	d02b      	beq.n	8003e12 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003dba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dbc:	2b12      	cmp	r3, #18
 8003dbe:	d102      	bne.n	8003dc6 <I2C_Master_ADDR+0x166>
 8003dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d125      	bne.n	8003e12 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dc8:	2b04      	cmp	r3, #4
 8003dca:	d00e      	beq.n	8003dea <I2C_Master_ADDR+0x18a>
 8003dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dce:	2b02      	cmp	r3, #2
 8003dd0:	d00b      	beq.n	8003dea <I2C_Master_ADDR+0x18a>
 8003dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dd4:	2b10      	cmp	r3, #16
 8003dd6:	d008      	beq.n	8003dea <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003de6:	601a      	str	r2, [r3, #0]
 8003de8:	e007      	b.n	8003dfa <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003df8:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	61fb      	str	r3, [r7, #28]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	695b      	ldr	r3, [r3, #20]
 8003e04:	61fb      	str	r3, [r7, #28]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	699b      	ldr	r3, [r3, #24]
 8003e0c:	61fb      	str	r3, [r7, #28]
 8003e0e:	69fb      	ldr	r3, [r7, #28]
 8003e10:	e0a1      	b.n	8003f56 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e20:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e22:	2300      	movs	r3, #0
 8003e24:	61bb      	str	r3, [r7, #24]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	695b      	ldr	r3, [r3, #20]
 8003e2c:	61bb      	str	r3, [r7, #24]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	699b      	ldr	r3, [r3, #24]
 8003e34:	61bb      	str	r3, [r7, #24]
 8003e36:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e46:	601a      	str	r2, [r3, #0]
 8003e48:	e085      	b.n	8003f56 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	2b02      	cmp	r3, #2
 8003e52:	d14d      	bne.n	8003ef0 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e56:	2b04      	cmp	r3, #4
 8003e58:	d016      	beq.n	8003e88 <I2C_Master_ADDR+0x228>
 8003e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e5c:	2b02      	cmp	r3, #2
 8003e5e:	d013      	beq.n	8003e88 <I2C_Master_ADDR+0x228>
 8003e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e62:	2b10      	cmp	r3, #16
 8003e64:	d010      	beq.n	8003e88 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e74:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e84:	601a      	str	r2, [r3, #0]
 8003e86:	e007      	b.n	8003e98 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e96:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ea2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ea6:	d117      	bne.n	8003ed8 <I2C_Master_ADDR+0x278>
 8003ea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eaa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003eae:	d00b      	beq.n	8003ec8 <I2C_Master_ADDR+0x268>
 8003eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d008      	beq.n	8003ec8 <I2C_Master_ADDR+0x268>
 8003eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eb8:	2b08      	cmp	r3, #8
 8003eba:	d005      	beq.n	8003ec8 <I2C_Master_ADDR+0x268>
 8003ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ebe:	2b10      	cmp	r3, #16
 8003ec0:	d002      	beq.n	8003ec8 <I2C_Master_ADDR+0x268>
 8003ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ec4:	2b20      	cmp	r3, #32
 8003ec6:	d107      	bne.n	8003ed8 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	685a      	ldr	r2, [r3, #4]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003ed6:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ed8:	2300      	movs	r3, #0
 8003eda:	617b      	str	r3, [r7, #20]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	695b      	ldr	r3, [r3, #20]
 8003ee2:	617b      	str	r3, [r7, #20]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	699b      	ldr	r3, [r3, #24]
 8003eea:	617b      	str	r3, [r7, #20]
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	e032      	b.n	8003f56 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003efe:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f0e:	d117      	bne.n	8003f40 <I2C_Master_ADDR+0x2e0>
 8003f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f12:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003f16:	d00b      	beq.n	8003f30 <I2C_Master_ADDR+0x2d0>
 8003f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d008      	beq.n	8003f30 <I2C_Master_ADDR+0x2d0>
 8003f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f20:	2b08      	cmp	r3, #8
 8003f22:	d005      	beq.n	8003f30 <I2C_Master_ADDR+0x2d0>
 8003f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f26:	2b10      	cmp	r3, #16
 8003f28:	d002      	beq.n	8003f30 <I2C_Master_ADDR+0x2d0>
 8003f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f2c:	2b20      	cmp	r3, #32
 8003f2e:	d107      	bne.n	8003f40 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	685a      	ldr	r2, [r3, #4]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003f3e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f40:	2300      	movs	r3, #0
 8003f42:	613b      	str	r3, [r7, #16]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	695b      	ldr	r3, [r3, #20]
 8003f4a:	613b      	str	r3, [r7, #16]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	699b      	ldr	r3, [r3, #24]
 8003f52:	613b      	str	r3, [r7, #16]
 8003f54:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003f5c:	e00b      	b.n	8003f76 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f5e:	2300      	movs	r3, #0
 8003f60:	60fb      	str	r3, [r7, #12]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	695b      	ldr	r3, [r3, #20]
 8003f68:	60fb      	str	r3, [r7, #12]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	699b      	ldr	r3, [r3, #24]
 8003f70:	60fb      	str	r3, [r7, #12]
 8003f72:	68fb      	ldr	r3, [r7, #12]
}
 8003f74:	e7ff      	b.n	8003f76 <I2C_Master_ADDR+0x316>
 8003f76:	bf00      	nop
 8003f78:	3744      	adds	r7, #68	; 0x44
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bc80      	pop	{r7}
 8003f7e:	4770      	bx	lr

08003f80 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b084      	sub	sp, #16
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f8e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f94:	b29b      	uxth	r3, r3
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d02b      	beq.n	8003ff2 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9e:	781a      	ldrb	r2, [r3, #0]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003faa:	1c5a      	adds	r2, r3, #1
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	3b01      	subs	r3, #1
 8003fb8:	b29a      	uxth	r2, r3
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d114      	bne.n	8003ff2 <I2C_SlaveTransmit_TXE+0x72>
 8003fc8:	7bfb      	ldrb	r3, [r7, #15]
 8003fca:	2b29      	cmp	r3, #41	; 0x29
 8003fcc:	d111      	bne.n	8003ff2 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	685a      	ldr	r2, [r3, #4]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fdc:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2221      	movs	r2, #33	; 0x21
 8003fe2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2228      	movs	r2, #40	; 0x28
 8003fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003fec:	6878      	ldr	r0, [r7, #4]
 8003fee:	f7ff f9ee 	bl	80033ce <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003ff2:	bf00      	nop
 8003ff4:	3710      	adds	r7, #16
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}

08003ffa <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003ffa:	b480      	push	{r7}
 8003ffc:	b083      	sub	sp, #12
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004006:	b29b      	uxth	r3, r3
 8004008:	2b00      	cmp	r3, #0
 800400a:	d011      	beq.n	8004030 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004010:	781a      	ldrb	r2, [r3, #0]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800401c:	1c5a      	adds	r2, r3, #1
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004026:	b29b      	uxth	r3, r3
 8004028:	3b01      	subs	r3, #1
 800402a:	b29a      	uxth	r2, r3
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004030:	bf00      	nop
 8004032:	370c      	adds	r7, #12
 8004034:	46bd      	mov	sp, r7
 8004036:	bc80      	pop	{r7}
 8004038:	4770      	bx	lr

0800403a <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800403a:	b580      	push	{r7, lr}
 800403c:	b084      	sub	sp, #16
 800403e:	af00      	add	r7, sp, #0
 8004040:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004048:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800404e:	b29b      	uxth	r3, r3
 8004050:	2b00      	cmp	r3, #0
 8004052:	d02c      	beq.n	80040ae <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	691a      	ldr	r2, [r3, #16]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800405e:	b2d2      	uxtb	r2, r2
 8004060:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004066:	1c5a      	adds	r2, r3, #1
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004070:	b29b      	uxth	r3, r3
 8004072:	3b01      	subs	r3, #1
 8004074:	b29a      	uxth	r2, r3
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800407e:	b29b      	uxth	r3, r3
 8004080:	2b00      	cmp	r3, #0
 8004082:	d114      	bne.n	80040ae <I2C_SlaveReceive_RXNE+0x74>
 8004084:	7bfb      	ldrb	r3, [r7, #15]
 8004086:	2b2a      	cmp	r3, #42	; 0x2a
 8004088:	d111      	bne.n	80040ae <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	685a      	ldr	r2, [r3, #4]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004098:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2222      	movs	r2, #34	; 0x22
 800409e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2228      	movs	r2, #40	; 0x28
 80040a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f7ff f999 	bl	80033e0 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80040ae:	bf00      	nop
 80040b0:	3710      	adds	r7, #16
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}

080040b6 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80040b6:	b480      	push	{r7}
 80040b8:	b083      	sub	sp, #12
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d012      	beq.n	80040ee <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	691a      	ldr	r2, [r3, #16]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d2:	b2d2      	uxtb	r2, r2
 80040d4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040da:	1c5a      	adds	r2, r3, #1
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040e4:	b29b      	uxth	r3, r3
 80040e6:	3b01      	subs	r3, #1
 80040e8:	b29a      	uxth	r2, r3
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80040ee:	bf00      	nop
 80040f0:	370c      	adds	r7, #12
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bc80      	pop	{r7}
 80040f6:	4770      	bx	lr

080040f8 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b084      	sub	sp, #16
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004102:	2300      	movs	r3, #0
 8004104:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800410c:	b2db      	uxtb	r3, r3
 800410e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004112:	2b28      	cmp	r3, #40	; 0x28
 8004114:	d127      	bne.n	8004166 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	685a      	ldr	r2, [r3, #4]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004124:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	089b      	lsrs	r3, r3, #2
 800412a:	f003 0301 	and.w	r3, r3, #1
 800412e:	2b00      	cmp	r3, #0
 8004130:	d101      	bne.n	8004136 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004132:	2301      	movs	r3, #1
 8004134:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	09db      	lsrs	r3, r3, #7
 800413a:	f003 0301 	and.w	r3, r3, #1
 800413e:	2b00      	cmp	r3, #0
 8004140:	d103      	bne.n	800414a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	68db      	ldr	r3, [r3, #12]
 8004146:	81bb      	strh	r3, [r7, #12]
 8004148:	e002      	b.n	8004150 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	699b      	ldr	r3, [r3, #24]
 800414e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004158:	89ba      	ldrh	r2, [r7, #12]
 800415a:	7bfb      	ldrb	r3, [r7, #15]
 800415c:	4619      	mov	r1, r3
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f7ff f947 	bl	80033f2 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004164:	e00e      	b.n	8004184 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004166:	2300      	movs	r3, #0
 8004168:	60bb      	str	r3, [r7, #8]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	695b      	ldr	r3, [r3, #20]
 8004170:	60bb      	str	r3, [r7, #8]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	699b      	ldr	r3, [r3, #24]
 8004178:	60bb      	str	r3, [r7, #8]
 800417a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2200      	movs	r2, #0
 8004180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004184:	bf00      	nop
 8004186:	3710      	adds	r7, #16
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}

0800418c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b084      	sub	sp, #16
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800419a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	685a      	ldr	r2, [r3, #4]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80041aa:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80041ac:	2300      	movs	r3, #0
 80041ae:	60bb      	str	r3, [r7, #8]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	695b      	ldr	r3, [r3, #20]
 80041b6:	60bb      	str	r3, [r7, #8]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f042 0201 	orr.w	r2, r2, #1
 80041c6:	601a      	str	r2, [r3, #0]
 80041c8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041d8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041e8:	d172      	bne.n	80042d0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80041ea:	7bfb      	ldrb	r3, [r7, #15]
 80041ec:	2b22      	cmp	r3, #34	; 0x22
 80041ee:	d002      	beq.n	80041f6 <I2C_Slave_STOPF+0x6a>
 80041f0:	7bfb      	ldrb	r3, [r7, #15]
 80041f2:	2b2a      	cmp	r3, #42	; 0x2a
 80041f4:	d135      	bne.n	8004262 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	b29a      	uxth	r2, r3
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004208:	b29b      	uxth	r3, r3
 800420a:	2b00      	cmp	r3, #0
 800420c:	d005      	beq.n	800421a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004212:	f043 0204 	orr.w	r2, r3, #4
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	685a      	ldr	r2, [r3, #4]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004228:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800422e:	4618      	mov	r0, r3
 8004230:	f7fd ff0c 	bl	800204c <HAL_DMA_GetState>
 8004234:	4603      	mov	r3, r0
 8004236:	2b01      	cmp	r3, #1
 8004238:	d049      	beq.n	80042ce <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800423e:	4a69      	ldr	r2, [pc, #420]	; (80043e4 <I2C_Slave_STOPF+0x258>)
 8004240:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004246:	4618      	mov	r0, r3
 8004248:	f7fd febf 	bl	8001fca <HAL_DMA_Abort_IT>
 800424c:	4603      	mov	r3, r0
 800424e:	2b00      	cmp	r3, #0
 8004250:	d03d      	beq.n	80042ce <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004256:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800425c:	4610      	mov	r0, r2
 800425e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004260:	e035      	b.n	80042ce <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	b29a      	uxth	r2, r3
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004274:	b29b      	uxth	r3, r3
 8004276:	2b00      	cmp	r3, #0
 8004278:	d005      	beq.n	8004286 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427e:	f043 0204 	orr.w	r2, r3, #4
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	685a      	ldr	r2, [r3, #4]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004294:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800429a:	4618      	mov	r0, r3
 800429c:	f7fd fed6 	bl	800204c <HAL_DMA_GetState>
 80042a0:	4603      	mov	r3, r0
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d014      	beq.n	80042d0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042aa:	4a4e      	ldr	r2, [pc, #312]	; (80043e4 <I2C_Slave_STOPF+0x258>)
 80042ac:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042b2:	4618      	mov	r0, r3
 80042b4:	f7fd fe89 	bl	8001fca <HAL_DMA_Abort_IT>
 80042b8:	4603      	mov	r3, r0
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d008      	beq.n	80042d0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80042c8:	4610      	mov	r0, r2
 80042ca:	4798      	blx	r3
 80042cc:	e000      	b.n	80042d0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80042ce:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042d4:	b29b      	uxth	r3, r3
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d03e      	beq.n	8004358 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	695b      	ldr	r3, [r3, #20]
 80042e0:	f003 0304 	and.w	r3, r3, #4
 80042e4:	2b04      	cmp	r3, #4
 80042e6:	d112      	bne.n	800430e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	691a      	ldr	r2, [r3, #16]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f2:	b2d2      	uxtb	r2, r2
 80042f4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042fa:	1c5a      	adds	r2, r3, #1
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004304:	b29b      	uxth	r3, r3
 8004306:	3b01      	subs	r3, #1
 8004308:	b29a      	uxth	r2, r3
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	695b      	ldr	r3, [r3, #20]
 8004314:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004318:	2b40      	cmp	r3, #64	; 0x40
 800431a:	d112      	bne.n	8004342 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	691a      	ldr	r2, [r3, #16]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004326:	b2d2      	uxtb	r2, r2
 8004328:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800432e:	1c5a      	adds	r2, r3, #1
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004338:	b29b      	uxth	r3, r3
 800433a:	3b01      	subs	r3, #1
 800433c:	b29a      	uxth	r2, r3
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004346:	b29b      	uxth	r3, r3
 8004348:	2b00      	cmp	r3, #0
 800434a:	d005      	beq.n	8004358 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004350:	f043 0204 	orr.w	r2, r3, #4
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435c:	2b00      	cmp	r3, #0
 800435e:	d003      	beq.n	8004368 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	f000 f843 	bl	80043ec <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004366:	e039      	b.n	80043dc <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004368:	7bfb      	ldrb	r3, [r7, #15]
 800436a:	2b2a      	cmp	r3, #42	; 0x2a
 800436c:	d109      	bne.n	8004382 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2200      	movs	r2, #0
 8004372:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2228      	movs	r2, #40	; 0x28
 8004378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	f7ff f82f 	bl	80033e0 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004388:	b2db      	uxtb	r3, r3
 800438a:	2b28      	cmp	r3, #40	; 0x28
 800438c:	d111      	bne.n	80043b2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	4a15      	ldr	r2, [pc, #84]	; (80043e8 <I2C_Slave_STOPF+0x25c>)
 8004392:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2200      	movs	r2, #0
 8004398:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2220      	movs	r2, #32
 800439e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2200      	movs	r2, #0
 80043a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f7ff f82e 	bl	800340c <HAL_I2C_ListenCpltCallback>
}
 80043b0:	e014      	b.n	80043dc <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043b6:	2b22      	cmp	r3, #34	; 0x22
 80043b8:	d002      	beq.n	80043c0 <I2C_Slave_STOPF+0x234>
 80043ba:	7bfb      	ldrb	r3, [r7, #15]
 80043bc:	2b22      	cmp	r3, #34	; 0x22
 80043be:	d10d      	bne.n	80043dc <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2200      	movs	r2, #0
 80043c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2220      	movs	r2, #32
 80043ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2200      	movs	r2, #0
 80043d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f7ff f802 	bl	80033e0 <HAL_I2C_SlaveRxCpltCallback>
}
 80043dc:	bf00      	nop
 80043de:	3710      	adds	r7, #16
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}
 80043e4:	08004a1d 	.word	0x08004a1d
 80043e8:	ffff0000 	.word	0xffff0000

080043ec <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b084      	sub	sp, #16
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043fa:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004402:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004404:	7bbb      	ldrb	r3, [r7, #14]
 8004406:	2b10      	cmp	r3, #16
 8004408:	d002      	beq.n	8004410 <I2C_ITError+0x24>
 800440a:	7bbb      	ldrb	r3, [r7, #14]
 800440c:	2b40      	cmp	r3, #64	; 0x40
 800440e:	d10a      	bne.n	8004426 <I2C_ITError+0x3a>
 8004410:	7bfb      	ldrb	r3, [r7, #15]
 8004412:	2b22      	cmp	r3, #34	; 0x22
 8004414:	d107      	bne.n	8004426 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004424:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004426:	7bfb      	ldrb	r3, [r7, #15]
 8004428:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800442c:	2b28      	cmp	r3, #40	; 0x28
 800442e:	d107      	bne.n	8004440 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2200      	movs	r2, #0
 8004434:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2228      	movs	r2, #40	; 0x28
 800443a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800443e:	e015      	b.n	800446c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800444a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800444e:	d00a      	beq.n	8004466 <I2C_ITError+0x7a>
 8004450:	7bfb      	ldrb	r3, [r7, #15]
 8004452:	2b60      	cmp	r3, #96	; 0x60
 8004454:	d007      	beq.n	8004466 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2220      	movs	r2, #32
 800445a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2200      	movs	r2, #0
 8004462:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2200      	movs	r2, #0
 800446a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004476:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800447a:	d162      	bne.n	8004542 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	685a      	ldr	r2, [r3, #4]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800448a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004490:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004494:	b2db      	uxtb	r3, r3
 8004496:	2b01      	cmp	r3, #1
 8004498:	d020      	beq.n	80044dc <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800449e:	4a6a      	ldr	r2, [pc, #424]	; (8004648 <I2C_ITError+0x25c>)
 80044a0:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044a6:	4618      	mov	r0, r3
 80044a8:	f7fd fd8f 	bl	8001fca <HAL_DMA_Abort_IT>
 80044ac:	4603      	mov	r3, r0
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	f000 8089 	beq.w	80045c6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f022 0201 	bic.w	r2, r2, #1
 80044c2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2220      	movs	r2, #32
 80044c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80044d6:	4610      	mov	r0, r2
 80044d8:	4798      	blx	r3
 80044da:	e074      	b.n	80045c6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e0:	4a59      	ldr	r2, [pc, #356]	; (8004648 <I2C_ITError+0x25c>)
 80044e2:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e8:	4618      	mov	r0, r3
 80044ea:	f7fd fd6e 	bl	8001fca <HAL_DMA_Abort_IT>
 80044ee:	4603      	mov	r3, r0
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d068      	beq.n	80045c6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	695b      	ldr	r3, [r3, #20]
 80044fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044fe:	2b40      	cmp	r3, #64	; 0x40
 8004500:	d10b      	bne.n	800451a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	691a      	ldr	r2, [r3, #16]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800450c:	b2d2      	uxtb	r2, r2
 800450e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004514:	1c5a      	adds	r2, r3, #1
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f022 0201 	bic.w	r2, r2, #1
 8004528:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2220      	movs	r2, #32
 800452e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004538:	687a      	ldr	r2, [r7, #4]
 800453a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800453c:	4610      	mov	r0, r2
 800453e:	4798      	blx	r3
 8004540:	e041      	b.n	80045c6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004548:	b2db      	uxtb	r3, r3
 800454a:	2b60      	cmp	r3, #96	; 0x60
 800454c:	d125      	bne.n	800459a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2220      	movs	r2, #32
 8004552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2200      	movs	r2, #0
 800455a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	695b      	ldr	r3, [r3, #20]
 8004562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004566:	2b40      	cmp	r3, #64	; 0x40
 8004568:	d10b      	bne.n	8004582 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	691a      	ldr	r2, [r3, #16]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004574:	b2d2      	uxtb	r2, r2
 8004576:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457c:	1c5a      	adds	r2, r3, #1
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f022 0201 	bic.w	r2, r2, #1
 8004590:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f7fe ff5e 	bl	8003454 <HAL_I2C_AbortCpltCallback>
 8004598:	e015      	b.n	80045c6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	695b      	ldr	r3, [r3, #20]
 80045a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045a4:	2b40      	cmp	r3, #64	; 0x40
 80045a6:	d10b      	bne.n	80045c0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	691a      	ldr	r2, [r3, #16]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b2:	b2d2      	uxtb	r2, r2
 80045b4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ba:	1c5a      	adds	r2, r3, #1
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80045c0:	6878      	ldr	r0, [r7, #4]
 80045c2:	f7fe ff3e 	bl	8003442 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ca:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	f003 0301 	and.w	r3, r3, #1
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d10e      	bne.n	80045f4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d109      	bne.n	80045f4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d104      	bne.n	80045f4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d007      	beq.n	8004604 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	685a      	ldr	r2, [r3, #4]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004602:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800460a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004610:	f003 0304 	and.w	r3, r3, #4
 8004614:	2b04      	cmp	r3, #4
 8004616:	d113      	bne.n	8004640 <I2C_ITError+0x254>
 8004618:	7bfb      	ldrb	r3, [r7, #15]
 800461a:	2b28      	cmp	r3, #40	; 0x28
 800461c:	d110      	bne.n	8004640 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	4a0a      	ldr	r2, [pc, #40]	; (800464c <I2C_ITError+0x260>)
 8004622:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2220      	movs	r2, #32
 800462e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2200      	movs	r2, #0
 8004636:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f7fe fee6 	bl	800340c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004640:	bf00      	nop
 8004642:	3710      	adds	r7, #16
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}
 8004648:	08004a1d 	.word	0x08004a1d
 800464c:	ffff0000 	.word	0xffff0000

08004650 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b088      	sub	sp, #32
 8004654:	af02      	add	r7, sp, #8
 8004656:	60f8      	str	r0, [r7, #12]
 8004658:	607a      	str	r2, [r7, #4]
 800465a:	603b      	str	r3, [r7, #0]
 800465c:	460b      	mov	r3, r1
 800465e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004664:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	2b08      	cmp	r3, #8
 800466a:	d006      	beq.n	800467a <I2C_MasterRequestWrite+0x2a>
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	2b01      	cmp	r3, #1
 8004670:	d003      	beq.n	800467a <I2C_MasterRequestWrite+0x2a>
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004678:	d108      	bne.n	800468c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004688:	601a      	str	r2, [r3, #0]
 800468a:	e00b      	b.n	80046a4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004690:	2b12      	cmp	r3, #18
 8004692:	d107      	bne.n	80046a4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046a2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	9300      	str	r3, [sp, #0]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2200      	movs	r2, #0
 80046ac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80046b0:	68f8      	ldr	r0, [r7, #12]
 80046b2:	f000 fa5b 	bl	8004b6c <I2C_WaitOnFlagUntilTimeout>
 80046b6:	4603      	mov	r3, r0
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d00d      	beq.n	80046d8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046ca:	d103      	bne.n	80046d4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046d2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80046d4:	2303      	movs	r3, #3
 80046d6:	e035      	b.n	8004744 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	691b      	ldr	r3, [r3, #16]
 80046dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80046e0:	d108      	bne.n	80046f4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80046e2:	897b      	ldrh	r3, [r7, #10]
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	461a      	mov	r2, r3
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80046f0:	611a      	str	r2, [r3, #16]
 80046f2:	e01b      	b.n	800472c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80046f4:	897b      	ldrh	r3, [r7, #10]
 80046f6:	11db      	asrs	r3, r3, #7
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	f003 0306 	and.w	r3, r3, #6
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	f063 030f 	orn	r3, r3, #15
 8004704:	b2da      	uxtb	r2, r3
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	490e      	ldr	r1, [pc, #56]	; (800474c <I2C_MasterRequestWrite+0xfc>)
 8004712:	68f8      	ldr	r0, [r7, #12]
 8004714:	f000 faa4 	bl	8004c60 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004718:	4603      	mov	r3, r0
 800471a:	2b00      	cmp	r3, #0
 800471c:	d001      	beq.n	8004722 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	e010      	b.n	8004744 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004722:	897b      	ldrh	r3, [r7, #10]
 8004724:	b2da      	uxtb	r2, r3
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	4907      	ldr	r1, [pc, #28]	; (8004750 <I2C_MasterRequestWrite+0x100>)
 8004732:	68f8      	ldr	r0, [r7, #12]
 8004734:	f000 fa94 	bl	8004c60 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004738:	4603      	mov	r3, r0
 800473a:	2b00      	cmp	r3, #0
 800473c:	d001      	beq.n	8004742 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e000      	b.n	8004744 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004742:	2300      	movs	r3, #0
}
 8004744:	4618      	mov	r0, r3
 8004746:	3718      	adds	r7, #24
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}
 800474c:	00010008 	.word	0x00010008
 8004750:	00010002 	.word	0x00010002

08004754 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b088      	sub	sp, #32
 8004758:	af02      	add	r7, sp, #8
 800475a:	60f8      	str	r0, [r7, #12]
 800475c:	607a      	str	r2, [r7, #4]
 800475e:	603b      	str	r3, [r7, #0]
 8004760:	460b      	mov	r3, r1
 8004762:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004768:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004778:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	2b08      	cmp	r3, #8
 800477e:	d006      	beq.n	800478e <I2C_MasterRequestRead+0x3a>
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	2b01      	cmp	r3, #1
 8004784:	d003      	beq.n	800478e <I2C_MasterRequestRead+0x3a>
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800478c:	d108      	bne.n	80047a0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800479c:	601a      	str	r2, [r3, #0]
 800479e:	e00b      	b.n	80047b8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047a4:	2b11      	cmp	r3, #17
 80047a6:	d107      	bne.n	80047b8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047b6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	9300      	str	r3, [sp, #0]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2200      	movs	r2, #0
 80047c0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80047c4:	68f8      	ldr	r0, [r7, #12]
 80047c6:	f000 f9d1 	bl	8004b6c <I2C_WaitOnFlagUntilTimeout>
 80047ca:	4603      	mov	r3, r0
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d00d      	beq.n	80047ec <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047de:	d103      	bne.n	80047e8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047e6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80047e8:	2303      	movs	r3, #3
 80047ea:	e079      	b.n	80048e0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	691b      	ldr	r3, [r3, #16]
 80047f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80047f4:	d108      	bne.n	8004808 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80047f6:	897b      	ldrh	r3, [r7, #10]
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	f043 0301 	orr.w	r3, r3, #1
 80047fe:	b2da      	uxtb	r2, r3
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	611a      	str	r2, [r3, #16]
 8004806:	e05f      	b.n	80048c8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004808:	897b      	ldrh	r3, [r7, #10]
 800480a:	11db      	asrs	r3, r3, #7
 800480c:	b2db      	uxtb	r3, r3
 800480e:	f003 0306 	and.w	r3, r3, #6
 8004812:	b2db      	uxtb	r3, r3
 8004814:	f063 030f 	orn	r3, r3, #15
 8004818:	b2da      	uxtb	r2, r3
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	4930      	ldr	r1, [pc, #192]	; (80048e8 <I2C_MasterRequestRead+0x194>)
 8004826:	68f8      	ldr	r0, [r7, #12]
 8004828:	f000 fa1a 	bl	8004c60 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800482c:	4603      	mov	r3, r0
 800482e:	2b00      	cmp	r3, #0
 8004830:	d001      	beq.n	8004836 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	e054      	b.n	80048e0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004836:	897b      	ldrh	r3, [r7, #10]
 8004838:	b2da      	uxtb	r2, r3
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	4929      	ldr	r1, [pc, #164]	; (80048ec <I2C_MasterRequestRead+0x198>)
 8004846:	68f8      	ldr	r0, [r7, #12]
 8004848:	f000 fa0a 	bl	8004c60 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800484c:	4603      	mov	r3, r0
 800484e:	2b00      	cmp	r3, #0
 8004850:	d001      	beq.n	8004856 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e044      	b.n	80048e0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004856:	2300      	movs	r3, #0
 8004858:	613b      	str	r3, [r7, #16]
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	695b      	ldr	r3, [r3, #20]
 8004860:	613b      	str	r3, [r7, #16]
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	699b      	ldr	r3, [r3, #24]
 8004868:	613b      	str	r3, [r7, #16]
 800486a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800487a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	9300      	str	r3, [sp, #0]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2200      	movs	r2, #0
 8004884:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004888:	68f8      	ldr	r0, [r7, #12]
 800488a:	f000 f96f 	bl	8004b6c <I2C_WaitOnFlagUntilTimeout>
 800488e:	4603      	mov	r3, r0
 8004890:	2b00      	cmp	r3, #0
 8004892:	d00d      	beq.n	80048b0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800489e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048a2:	d103      	bne.n	80048ac <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80048aa:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80048ac:	2303      	movs	r3, #3
 80048ae:	e017      	b.n	80048e0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80048b0:	897b      	ldrh	r3, [r7, #10]
 80048b2:	11db      	asrs	r3, r3, #7
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	f003 0306 	and.w	r3, r3, #6
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	f063 030e 	orn	r3, r3, #14
 80048c0:	b2da      	uxtb	r2, r3
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	4907      	ldr	r1, [pc, #28]	; (80048ec <I2C_MasterRequestRead+0x198>)
 80048ce:	68f8      	ldr	r0, [r7, #12]
 80048d0:	f000 f9c6 	bl	8004c60 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048d4:	4603      	mov	r3, r0
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d001      	beq.n	80048de <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	e000      	b.n	80048e0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80048de:	2300      	movs	r3, #0
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3718      	adds	r7, #24
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}
 80048e8:	00010008 	.word	0x00010008
 80048ec:	00010002 	.word	0x00010002

080048f0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b088      	sub	sp, #32
 80048f4:	af02      	add	r7, sp, #8
 80048f6:	60f8      	str	r0, [r7, #12]
 80048f8:	4608      	mov	r0, r1
 80048fa:	4611      	mov	r1, r2
 80048fc:	461a      	mov	r2, r3
 80048fe:	4603      	mov	r3, r0
 8004900:	817b      	strh	r3, [r7, #10]
 8004902:	460b      	mov	r3, r1
 8004904:	813b      	strh	r3, [r7, #8]
 8004906:	4613      	mov	r3, r2
 8004908:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004918:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800491a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491c:	9300      	str	r3, [sp, #0]
 800491e:	6a3b      	ldr	r3, [r7, #32]
 8004920:	2200      	movs	r2, #0
 8004922:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004926:	68f8      	ldr	r0, [r7, #12]
 8004928:	f000 f920 	bl	8004b6c <I2C_WaitOnFlagUntilTimeout>
 800492c:	4603      	mov	r3, r0
 800492e:	2b00      	cmp	r3, #0
 8004930:	d00d      	beq.n	800494e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800493c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004940:	d103      	bne.n	800494a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004948:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800494a:	2303      	movs	r3, #3
 800494c:	e05f      	b.n	8004a0e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800494e:	897b      	ldrh	r3, [r7, #10]
 8004950:	b2db      	uxtb	r3, r3
 8004952:	461a      	mov	r2, r3
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800495c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800495e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004960:	6a3a      	ldr	r2, [r7, #32]
 8004962:	492d      	ldr	r1, [pc, #180]	; (8004a18 <I2C_RequestMemoryWrite+0x128>)
 8004964:	68f8      	ldr	r0, [r7, #12]
 8004966:	f000 f97b 	bl	8004c60 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800496a:	4603      	mov	r3, r0
 800496c:	2b00      	cmp	r3, #0
 800496e:	d001      	beq.n	8004974 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	e04c      	b.n	8004a0e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004974:	2300      	movs	r3, #0
 8004976:	617b      	str	r3, [r7, #20]
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	695b      	ldr	r3, [r3, #20]
 800497e:	617b      	str	r3, [r7, #20]
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	699b      	ldr	r3, [r3, #24]
 8004986:	617b      	str	r3, [r7, #20]
 8004988:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800498a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800498c:	6a39      	ldr	r1, [r7, #32]
 800498e:	68f8      	ldr	r0, [r7, #12]
 8004990:	f000 fa06 	bl	8004da0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004994:	4603      	mov	r3, r0
 8004996:	2b00      	cmp	r3, #0
 8004998:	d00d      	beq.n	80049b6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800499e:	2b04      	cmp	r3, #4
 80049a0:	d107      	bne.n	80049b2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049b0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e02b      	b.n	8004a0e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80049b6:	88fb      	ldrh	r3, [r7, #6]
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d105      	bne.n	80049c8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80049bc:	893b      	ldrh	r3, [r7, #8]
 80049be:	b2da      	uxtb	r2, r3
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	611a      	str	r2, [r3, #16]
 80049c6:	e021      	b.n	8004a0c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80049c8:	893b      	ldrh	r3, [r7, #8]
 80049ca:	0a1b      	lsrs	r3, r3, #8
 80049cc:	b29b      	uxth	r3, r3
 80049ce:	b2da      	uxtb	r2, r3
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049d8:	6a39      	ldr	r1, [r7, #32]
 80049da:	68f8      	ldr	r0, [r7, #12]
 80049dc:	f000 f9e0 	bl	8004da0 <I2C_WaitOnTXEFlagUntilTimeout>
 80049e0:	4603      	mov	r3, r0
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d00d      	beq.n	8004a02 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ea:	2b04      	cmp	r3, #4
 80049ec:	d107      	bne.n	80049fe <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049fc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	e005      	b.n	8004a0e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a02:	893b      	ldrh	r3, [r7, #8]
 8004a04:	b2da      	uxtb	r2, r3
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004a0c:	2300      	movs	r3, #0
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3718      	adds	r7, #24
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}
 8004a16:	bf00      	nop
 8004a18:	00010002 	.word	0x00010002

08004a1c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b086      	sub	sp, #24
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004a24:	2300      	movs	r3, #0
 8004a26:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a2c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a34:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004a36:	4b4b      	ldr	r3, [pc, #300]	; (8004b64 <I2C_DMAAbort+0x148>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	08db      	lsrs	r3, r3, #3
 8004a3c:	4a4a      	ldr	r2, [pc, #296]	; (8004b68 <I2C_DMAAbort+0x14c>)
 8004a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a42:	0a1a      	lsrs	r2, r3, #8
 8004a44:	4613      	mov	r3, r2
 8004a46:	009b      	lsls	r3, r3, #2
 8004a48:	4413      	add	r3, r2
 8004a4a:	00da      	lsls	r2, r3, #3
 8004a4c:	1ad3      	subs	r3, r2, r3
 8004a4e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d106      	bne.n	8004a64 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a5a:	f043 0220 	orr.w	r2, r3, #32
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8004a62:	e00a      	b.n	8004a7a <I2C_DMAAbort+0x5e>
    }
    count--;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	3b01      	subs	r3, #1
 8004a68:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a78:	d0ea      	beq.n	8004a50 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d003      	beq.n	8004a8a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a86:	2200      	movs	r2, #0
 8004a88:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d003      	beq.n	8004a9a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a96:	2200      	movs	r2, #0
 8004a98:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004aa8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	2200      	movs	r2, #0
 8004aae:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d003      	beq.n	8004ac0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004abc:	2200      	movs	r2, #0
 8004abe:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d003      	beq.n	8004ad0 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004acc:	2200      	movs	r2, #0
 8004ace:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f022 0201 	bic.w	r2, r2, #1
 8004ade:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	2b60      	cmp	r3, #96	; 0x60
 8004aea:	d10e      	bne.n	8004b0a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	2220      	movs	r2, #32
 8004af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	2200      	movs	r2, #0
 8004af8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	2200      	movs	r2, #0
 8004b00:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004b02:	6978      	ldr	r0, [r7, #20]
 8004b04:	f7fe fca6 	bl	8003454 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004b08:	e027      	b.n	8004b5a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004b0a:	7cfb      	ldrb	r3, [r7, #19]
 8004b0c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004b10:	2b28      	cmp	r3, #40	; 0x28
 8004b12:	d117      	bne.n	8004b44 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f042 0201 	orr.w	r2, r2, #1
 8004b22:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004b32:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	2200      	movs	r2, #0
 8004b38:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	2228      	movs	r2, #40	; 0x28
 8004b3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004b42:	e007      	b.n	8004b54 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	2220      	movs	r2, #32
 8004b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004b54:	6978      	ldr	r0, [r7, #20]
 8004b56:	f7fe fc74 	bl	8003442 <HAL_I2C_ErrorCallback>
}
 8004b5a:	bf00      	nop
 8004b5c:	3718      	adds	r7, #24
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}
 8004b62:	bf00      	nop
 8004b64:	20000000 	.word	0x20000000
 8004b68:	14f8b589 	.word	0x14f8b589

08004b6c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b084      	sub	sp, #16
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	60f8      	str	r0, [r7, #12]
 8004b74:	60b9      	str	r1, [r7, #8]
 8004b76:	603b      	str	r3, [r7, #0]
 8004b78:	4613      	mov	r3, r2
 8004b7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b7c:	e048      	b.n	8004c10 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b84:	d044      	beq.n	8004c10 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b86:	f7fd f8e7 	bl	8001d58 <HAL_GetTick>
 8004b8a:	4602      	mov	r2, r0
 8004b8c:	69bb      	ldr	r3, [r7, #24]
 8004b8e:	1ad3      	subs	r3, r2, r3
 8004b90:	683a      	ldr	r2, [r7, #0]
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d302      	bcc.n	8004b9c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d139      	bne.n	8004c10 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	0c1b      	lsrs	r3, r3, #16
 8004ba0:	b2db      	uxtb	r3, r3
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d10d      	bne.n	8004bc2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	695b      	ldr	r3, [r3, #20]
 8004bac:	43da      	mvns	r2, r3
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	bf0c      	ite	eq
 8004bb8:	2301      	moveq	r3, #1
 8004bba:	2300      	movne	r3, #0
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	e00c      	b.n	8004bdc <I2C_WaitOnFlagUntilTimeout+0x70>
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	699b      	ldr	r3, [r3, #24]
 8004bc8:	43da      	mvns	r2, r3
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	4013      	ands	r3, r2
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	bf0c      	ite	eq
 8004bd4:	2301      	moveq	r3, #1
 8004bd6:	2300      	movne	r3, #0
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	461a      	mov	r2, r3
 8004bdc:	79fb      	ldrb	r3, [r7, #7]
 8004bde:	429a      	cmp	r2, r3
 8004be0:	d116      	bne.n	8004c10 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2200      	movs	r2, #0
 8004be6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2220      	movs	r2, #32
 8004bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bfc:	f043 0220 	orr.w	r2, r3, #32
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2200      	movs	r2, #0
 8004c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	e023      	b.n	8004c58 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	0c1b      	lsrs	r3, r3, #16
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d10d      	bne.n	8004c36 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	695b      	ldr	r3, [r3, #20]
 8004c20:	43da      	mvns	r2, r3
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	4013      	ands	r3, r2
 8004c26:	b29b      	uxth	r3, r3
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	bf0c      	ite	eq
 8004c2c:	2301      	moveq	r3, #1
 8004c2e:	2300      	movne	r3, #0
 8004c30:	b2db      	uxtb	r3, r3
 8004c32:	461a      	mov	r2, r3
 8004c34:	e00c      	b.n	8004c50 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	699b      	ldr	r3, [r3, #24]
 8004c3c:	43da      	mvns	r2, r3
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	4013      	ands	r3, r2
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	bf0c      	ite	eq
 8004c48:	2301      	moveq	r3, #1
 8004c4a:	2300      	movne	r3, #0
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	461a      	mov	r2, r3
 8004c50:	79fb      	ldrb	r3, [r7, #7]
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d093      	beq.n	8004b7e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c56:	2300      	movs	r3, #0
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3710      	adds	r7, #16
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}

08004c60 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b084      	sub	sp, #16
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	60f8      	str	r0, [r7, #12]
 8004c68:	60b9      	str	r1, [r7, #8]
 8004c6a:	607a      	str	r2, [r7, #4]
 8004c6c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c6e:	e071      	b.n	8004d54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	695b      	ldr	r3, [r3, #20]
 8004c76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c7e:	d123      	bne.n	8004cc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c8e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004c98:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2220      	movs	r2, #32
 8004ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2200      	movs	r2, #0
 8004cac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb4:	f043 0204 	orr.w	r2, r3, #4
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	e067      	b.n	8004d98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004cce:	d041      	beq.n	8004d54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cd0:	f7fd f842 	bl	8001d58 <HAL_GetTick>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	1ad3      	subs	r3, r2, r3
 8004cda:	687a      	ldr	r2, [r7, #4]
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d302      	bcc.n	8004ce6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d136      	bne.n	8004d54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	0c1b      	lsrs	r3, r3, #16
 8004cea:	b2db      	uxtb	r3, r3
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d10c      	bne.n	8004d0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	695b      	ldr	r3, [r3, #20]
 8004cf6:	43da      	mvns	r2, r3
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	4013      	ands	r3, r2
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	bf14      	ite	ne
 8004d02:	2301      	movne	r3, #1
 8004d04:	2300      	moveq	r3, #0
 8004d06:	b2db      	uxtb	r3, r3
 8004d08:	e00b      	b.n	8004d22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	699b      	ldr	r3, [r3, #24]
 8004d10:	43da      	mvns	r2, r3
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	4013      	ands	r3, r2
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	bf14      	ite	ne
 8004d1c:	2301      	movne	r3, #1
 8004d1e:	2300      	moveq	r3, #0
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d016      	beq.n	8004d54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2220      	movs	r2, #32
 8004d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2200      	movs	r2, #0
 8004d38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d40:	f043 0220 	orr.w	r2, r3, #32
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	e021      	b.n	8004d98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	0c1b      	lsrs	r3, r3, #16
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	2b01      	cmp	r3, #1
 8004d5c:	d10c      	bne.n	8004d78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	695b      	ldr	r3, [r3, #20]
 8004d64:	43da      	mvns	r2, r3
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	4013      	ands	r3, r2
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	bf14      	ite	ne
 8004d70:	2301      	movne	r3, #1
 8004d72:	2300      	moveq	r3, #0
 8004d74:	b2db      	uxtb	r3, r3
 8004d76:	e00b      	b.n	8004d90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	699b      	ldr	r3, [r3, #24]
 8004d7e:	43da      	mvns	r2, r3
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	4013      	ands	r3, r2
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	bf14      	ite	ne
 8004d8a:	2301      	movne	r3, #1
 8004d8c:	2300      	moveq	r3, #0
 8004d8e:	b2db      	uxtb	r3, r3
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	f47f af6d 	bne.w	8004c70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004d96:	2300      	movs	r3, #0
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3710      	adds	r7, #16
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}

08004da0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b084      	sub	sp, #16
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	60f8      	str	r0, [r7, #12]
 8004da8:	60b9      	str	r1, [r7, #8]
 8004daa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004dac:	e034      	b.n	8004e18 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004dae:	68f8      	ldr	r0, [r7, #12]
 8004db0:	f000 f915 	bl	8004fde <I2C_IsAcknowledgeFailed>
 8004db4:	4603      	mov	r3, r0
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d001      	beq.n	8004dbe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e034      	b.n	8004e28 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004dc4:	d028      	beq.n	8004e18 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dc6:	f7fc ffc7 	bl	8001d58 <HAL_GetTick>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	1ad3      	subs	r3, r2, r3
 8004dd0:	68ba      	ldr	r2, [r7, #8]
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	d302      	bcc.n	8004ddc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d11d      	bne.n	8004e18 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	695b      	ldr	r3, [r3, #20]
 8004de2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004de6:	2b80      	cmp	r3, #128	; 0x80
 8004de8:	d016      	beq.n	8004e18 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2200      	movs	r2, #0
 8004dee:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2220      	movs	r2, #32
 8004df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e04:	f043 0220 	orr.w	r2, r3, #32
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	e007      	b.n	8004e28 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	695b      	ldr	r3, [r3, #20]
 8004e1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e22:	2b80      	cmp	r3, #128	; 0x80
 8004e24:	d1c3      	bne.n	8004dae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004e26:	2300      	movs	r3, #0
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	3710      	adds	r7, #16
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}

08004e30 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b084      	sub	sp, #16
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	60f8      	str	r0, [r7, #12]
 8004e38:	60b9      	str	r1, [r7, #8]
 8004e3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004e3c:	e034      	b.n	8004ea8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004e3e:	68f8      	ldr	r0, [r7, #12]
 8004e40:	f000 f8cd 	bl	8004fde <I2C_IsAcknowledgeFailed>
 8004e44:	4603      	mov	r3, r0
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d001      	beq.n	8004e4e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	e034      	b.n	8004eb8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e54:	d028      	beq.n	8004ea8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e56:	f7fc ff7f 	bl	8001d58 <HAL_GetTick>
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	1ad3      	subs	r3, r2, r3
 8004e60:	68ba      	ldr	r2, [r7, #8]
 8004e62:	429a      	cmp	r2, r3
 8004e64:	d302      	bcc.n	8004e6c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d11d      	bne.n	8004ea8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	695b      	ldr	r3, [r3, #20]
 8004e72:	f003 0304 	and.w	r3, r3, #4
 8004e76:	2b04      	cmp	r3, #4
 8004e78:	d016      	beq.n	8004ea8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2220      	movs	r2, #32
 8004e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e94:	f043 0220 	orr.w	r2, r3, #32
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	e007      	b.n	8004eb8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	695b      	ldr	r3, [r3, #20]
 8004eae:	f003 0304 	and.w	r3, r3, #4
 8004eb2:	2b04      	cmp	r3, #4
 8004eb4:	d1c3      	bne.n	8004e3e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004eb6:	2300      	movs	r3, #0
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3710      	adds	r7, #16
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}

08004ec0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b085      	sub	sp, #20
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004ecc:	4b13      	ldr	r3, [pc, #76]	; (8004f1c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	08db      	lsrs	r3, r3, #3
 8004ed2:	4a13      	ldr	r2, [pc, #76]	; (8004f20 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004ed4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ed8:	0a1a      	lsrs	r2, r3, #8
 8004eda:	4613      	mov	r3, r2
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	4413      	add	r3, r2
 8004ee0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	3b01      	subs	r3, #1
 8004ee6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d107      	bne.n	8004efe <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef2:	f043 0220 	orr.w	r2, r3, #32
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	e008      	b.n	8004f10 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f0c:	d0e9      	beq.n	8004ee2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004f0e:	2300      	movs	r3, #0
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	3714      	adds	r7, #20
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bc80      	pop	{r7}
 8004f18:	4770      	bx	lr
 8004f1a:	bf00      	nop
 8004f1c:	20000000 	.word	0x20000000
 8004f20:	14f8b589 	.word	0x14f8b589

08004f24 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b084      	sub	sp, #16
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	60f8      	str	r0, [r7, #12]
 8004f2c:	60b9      	str	r1, [r7, #8]
 8004f2e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004f30:	e049      	b.n	8004fc6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	695b      	ldr	r3, [r3, #20]
 8004f38:	f003 0310 	and.w	r3, r3, #16
 8004f3c:	2b10      	cmp	r3, #16
 8004f3e:	d119      	bne.n	8004f74 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f06f 0210 	mvn.w	r2, #16
 8004f48:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2220      	movs	r2, #32
 8004f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	e030      	b.n	8004fd6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f74:	f7fc fef0 	bl	8001d58 <HAL_GetTick>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	1ad3      	subs	r3, r2, r3
 8004f7e:	68ba      	ldr	r2, [r7, #8]
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d302      	bcc.n	8004f8a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d11d      	bne.n	8004fc6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	695b      	ldr	r3, [r3, #20]
 8004f90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f94:	2b40      	cmp	r3, #64	; 0x40
 8004f96:	d016      	beq.n	8004fc6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2220      	movs	r2, #32
 8004fa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb2:	f043 0220 	orr.w	r2, r3, #32
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e007      	b.n	8004fd6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	695b      	ldr	r3, [r3, #20]
 8004fcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fd0:	2b40      	cmp	r3, #64	; 0x40
 8004fd2:	d1ae      	bne.n	8004f32 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004fd4:	2300      	movs	r3, #0
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3710      	adds	r7, #16
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}

08004fde <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004fde:	b480      	push	{r7}
 8004fe0:	b083      	sub	sp, #12
 8004fe2:	af00      	add	r7, sp, #0
 8004fe4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	695b      	ldr	r3, [r3, #20]
 8004fec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ff0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ff4:	d11b      	bne.n	800502e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004ffe:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2200      	movs	r2, #0
 8005004:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2220      	movs	r2, #32
 800500a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2200      	movs	r2, #0
 8005012:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800501a:	f043 0204 	orr.w	r2, r3, #4
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2200      	movs	r2, #0
 8005026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	e000      	b.n	8005030 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800502e:	2300      	movs	r3, #0
}
 8005030:	4618      	mov	r0, r3
 8005032:	370c      	adds	r7, #12
 8005034:	46bd      	mov	sp, r7
 8005036:	bc80      	pop	{r7}
 8005038:	4770      	bx	lr

0800503a <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800503a:	b480      	push	{r7}
 800503c:	b083      	sub	sp, #12
 800503e:	af00      	add	r7, sp, #0
 8005040:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005046:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800504a:	d103      	bne.n	8005054 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2201      	movs	r2, #1
 8005050:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005052:	e007      	b.n	8005064 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005058:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800505c:	d102      	bne.n	8005064 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2208      	movs	r2, #8
 8005062:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005064:	bf00      	nop
 8005066:	370c      	adds	r7, #12
 8005068:	46bd      	mov	sp, r7
 800506a:	bc80      	pop	{r7}
 800506c:	4770      	bx	lr
	...

08005070 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b088      	sub	sp, #32
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d101      	bne.n	8005082 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	e31d      	b.n	80056be <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005082:	4b94      	ldr	r3, [pc, #592]	; (80052d4 <HAL_RCC_OscConfig+0x264>)
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	f003 030c 	and.w	r3, r3, #12
 800508a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800508c:	4b91      	ldr	r3, [pc, #580]	; (80052d4 <HAL_RCC_OscConfig+0x264>)
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005094:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f003 0301 	and.w	r3, r3, #1
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d07b      	beq.n	800519a <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80050a2:	69bb      	ldr	r3, [r7, #24]
 80050a4:	2b08      	cmp	r3, #8
 80050a6:	d006      	beq.n	80050b6 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80050a8:	69bb      	ldr	r3, [r7, #24]
 80050aa:	2b0c      	cmp	r3, #12
 80050ac:	d10f      	bne.n	80050ce <HAL_RCC_OscConfig+0x5e>
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050b4:	d10b      	bne.n	80050ce <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050b6:	4b87      	ldr	r3, [pc, #540]	; (80052d4 <HAL_RCC_OscConfig+0x264>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d06a      	beq.n	8005198 <HAL_RCC_OscConfig+0x128>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d166      	bne.n	8005198 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	e2f7      	b.n	80056be <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d106      	bne.n	80050e4 <HAL_RCC_OscConfig+0x74>
 80050d6:	4b7f      	ldr	r3, [pc, #508]	; (80052d4 <HAL_RCC_OscConfig+0x264>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a7e      	ldr	r2, [pc, #504]	; (80052d4 <HAL_RCC_OscConfig+0x264>)
 80050dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050e0:	6013      	str	r3, [r2, #0]
 80050e2:	e02d      	b.n	8005140 <HAL_RCC_OscConfig+0xd0>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d10c      	bne.n	8005106 <HAL_RCC_OscConfig+0x96>
 80050ec:	4b79      	ldr	r3, [pc, #484]	; (80052d4 <HAL_RCC_OscConfig+0x264>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a78      	ldr	r2, [pc, #480]	; (80052d4 <HAL_RCC_OscConfig+0x264>)
 80050f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050f6:	6013      	str	r3, [r2, #0]
 80050f8:	4b76      	ldr	r3, [pc, #472]	; (80052d4 <HAL_RCC_OscConfig+0x264>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a75      	ldr	r2, [pc, #468]	; (80052d4 <HAL_RCC_OscConfig+0x264>)
 80050fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005102:	6013      	str	r3, [r2, #0]
 8005104:	e01c      	b.n	8005140 <HAL_RCC_OscConfig+0xd0>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	2b05      	cmp	r3, #5
 800510c:	d10c      	bne.n	8005128 <HAL_RCC_OscConfig+0xb8>
 800510e:	4b71      	ldr	r3, [pc, #452]	; (80052d4 <HAL_RCC_OscConfig+0x264>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a70      	ldr	r2, [pc, #448]	; (80052d4 <HAL_RCC_OscConfig+0x264>)
 8005114:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005118:	6013      	str	r3, [r2, #0]
 800511a:	4b6e      	ldr	r3, [pc, #440]	; (80052d4 <HAL_RCC_OscConfig+0x264>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a6d      	ldr	r2, [pc, #436]	; (80052d4 <HAL_RCC_OscConfig+0x264>)
 8005120:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005124:	6013      	str	r3, [r2, #0]
 8005126:	e00b      	b.n	8005140 <HAL_RCC_OscConfig+0xd0>
 8005128:	4b6a      	ldr	r3, [pc, #424]	; (80052d4 <HAL_RCC_OscConfig+0x264>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a69      	ldr	r2, [pc, #420]	; (80052d4 <HAL_RCC_OscConfig+0x264>)
 800512e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005132:	6013      	str	r3, [r2, #0]
 8005134:	4b67      	ldr	r3, [pc, #412]	; (80052d4 <HAL_RCC_OscConfig+0x264>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a66      	ldr	r2, [pc, #408]	; (80052d4 <HAL_RCC_OscConfig+0x264>)
 800513a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800513e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d013      	beq.n	8005170 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005148:	f7fc fe06 	bl	8001d58 <HAL_GetTick>
 800514c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800514e:	e008      	b.n	8005162 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005150:	f7fc fe02 	bl	8001d58 <HAL_GetTick>
 8005154:	4602      	mov	r2, r0
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	1ad3      	subs	r3, r2, r3
 800515a:	2b64      	cmp	r3, #100	; 0x64
 800515c:	d901      	bls.n	8005162 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800515e:	2303      	movs	r3, #3
 8005160:	e2ad      	b.n	80056be <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005162:	4b5c      	ldr	r3, [pc, #368]	; (80052d4 <HAL_RCC_OscConfig+0x264>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800516a:	2b00      	cmp	r3, #0
 800516c:	d0f0      	beq.n	8005150 <HAL_RCC_OscConfig+0xe0>
 800516e:	e014      	b.n	800519a <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005170:	f7fc fdf2 	bl	8001d58 <HAL_GetTick>
 8005174:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005176:	e008      	b.n	800518a <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005178:	f7fc fdee 	bl	8001d58 <HAL_GetTick>
 800517c:	4602      	mov	r2, r0
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	1ad3      	subs	r3, r2, r3
 8005182:	2b64      	cmp	r3, #100	; 0x64
 8005184:	d901      	bls.n	800518a <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8005186:	2303      	movs	r3, #3
 8005188:	e299      	b.n	80056be <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800518a:	4b52      	ldr	r3, [pc, #328]	; (80052d4 <HAL_RCC_OscConfig+0x264>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005192:	2b00      	cmp	r3, #0
 8005194:	d1f0      	bne.n	8005178 <HAL_RCC_OscConfig+0x108>
 8005196:	e000      	b.n	800519a <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005198:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f003 0302 	and.w	r3, r3, #2
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d05a      	beq.n	800525c <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80051a6:	69bb      	ldr	r3, [r7, #24]
 80051a8:	2b04      	cmp	r3, #4
 80051aa:	d005      	beq.n	80051b8 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80051ac:	69bb      	ldr	r3, [r7, #24]
 80051ae:	2b0c      	cmp	r3, #12
 80051b0:	d119      	bne.n	80051e6 <HAL_RCC_OscConfig+0x176>
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d116      	bne.n	80051e6 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051b8:	4b46      	ldr	r3, [pc, #280]	; (80052d4 <HAL_RCC_OscConfig+0x264>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 0302 	and.w	r3, r3, #2
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d005      	beq.n	80051d0 <HAL_RCC_OscConfig+0x160>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	68db      	ldr	r3, [r3, #12]
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d001      	beq.n	80051d0 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 80051cc:	2301      	movs	r3, #1
 80051ce:	e276      	b.n	80056be <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051d0:	4b40      	ldr	r3, [pc, #256]	; (80052d4 <HAL_RCC_OscConfig+0x264>)
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	691b      	ldr	r3, [r3, #16]
 80051dc:	021b      	lsls	r3, r3, #8
 80051de:	493d      	ldr	r1, [pc, #244]	; (80052d4 <HAL_RCC_OscConfig+0x264>)
 80051e0:	4313      	orrs	r3, r2
 80051e2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051e4:	e03a      	b.n	800525c <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	68db      	ldr	r3, [r3, #12]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d020      	beq.n	8005230 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80051ee:	4b3a      	ldr	r3, [pc, #232]	; (80052d8 <HAL_RCC_OscConfig+0x268>)
 80051f0:	2201      	movs	r2, #1
 80051f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051f4:	f7fc fdb0 	bl	8001d58 <HAL_GetTick>
 80051f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80051fa:	e008      	b.n	800520e <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80051fc:	f7fc fdac 	bl	8001d58 <HAL_GetTick>
 8005200:	4602      	mov	r2, r0
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	1ad3      	subs	r3, r2, r3
 8005206:	2b02      	cmp	r3, #2
 8005208:	d901      	bls.n	800520e <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800520a:	2303      	movs	r3, #3
 800520c:	e257      	b.n	80056be <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800520e:	4b31      	ldr	r3, [pc, #196]	; (80052d4 <HAL_RCC_OscConfig+0x264>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f003 0302 	and.w	r3, r3, #2
 8005216:	2b00      	cmp	r3, #0
 8005218:	d0f0      	beq.n	80051fc <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800521a:	4b2e      	ldr	r3, [pc, #184]	; (80052d4 <HAL_RCC_OscConfig+0x264>)
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	691b      	ldr	r3, [r3, #16]
 8005226:	021b      	lsls	r3, r3, #8
 8005228:	492a      	ldr	r1, [pc, #168]	; (80052d4 <HAL_RCC_OscConfig+0x264>)
 800522a:	4313      	orrs	r3, r2
 800522c:	604b      	str	r3, [r1, #4]
 800522e:	e015      	b.n	800525c <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005230:	4b29      	ldr	r3, [pc, #164]	; (80052d8 <HAL_RCC_OscConfig+0x268>)
 8005232:	2200      	movs	r2, #0
 8005234:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005236:	f7fc fd8f 	bl	8001d58 <HAL_GetTick>
 800523a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800523c:	e008      	b.n	8005250 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800523e:	f7fc fd8b 	bl	8001d58 <HAL_GetTick>
 8005242:	4602      	mov	r2, r0
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	1ad3      	subs	r3, r2, r3
 8005248:	2b02      	cmp	r3, #2
 800524a:	d901      	bls.n	8005250 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 800524c:	2303      	movs	r3, #3
 800524e:	e236      	b.n	80056be <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005250:	4b20      	ldr	r3, [pc, #128]	; (80052d4 <HAL_RCC_OscConfig+0x264>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f003 0302 	and.w	r3, r3, #2
 8005258:	2b00      	cmp	r3, #0
 800525a:	d1f0      	bne.n	800523e <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f003 0310 	and.w	r3, r3, #16
 8005264:	2b00      	cmp	r3, #0
 8005266:	f000 80b8 	beq.w	80053da <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800526a:	69bb      	ldr	r3, [r7, #24]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d170      	bne.n	8005352 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005270:	4b18      	ldr	r3, [pc, #96]	; (80052d4 <HAL_RCC_OscConfig+0x264>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005278:	2b00      	cmp	r3, #0
 800527a:	d005      	beq.n	8005288 <HAL_RCC_OscConfig+0x218>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	699b      	ldr	r3, [r3, #24]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d101      	bne.n	8005288 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8005284:	2301      	movs	r3, #1
 8005286:	e21a      	b.n	80056be <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6a1a      	ldr	r2, [r3, #32]
 800528c:	4b11      	ldr	r3, [pc, #68]	; (80052d4 <HAL_RCC_OscConfig+0x264>)
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005294:	429a      	cmp	r2, r3
 8005296:	d921      	bls.n	80052dc <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6a1b      	ldr	r3, [r3, #32]
 800529c:	4618      	mov	r0, r3
 800529e:	f000 fc7d 	bl	8005b9c <RCC_SetFlashLatencyFromMSIRange>
 80052a2:	4603      	mov	r3, r0
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d001      	beq.n	80052ac <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 80052a8:	2301      	movs	r3, #1
 80052aa:	e208      	b.n	80056be <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80052ac:	4b09      	ldr	r3, [pc, #36]	; (80052d4 <HAL_RCC_OscConfig+0x264>)
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6a1b      	ldr	r3, [r3, #32]
 80052b8:	4906      	ldr	r1, [pc, #24]	; (80052d4 <HAL_RCC_OscConfig+0x264>)
 80052ba:	4313      	orrs	r3, r2
 80052bc:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80052be:	4b05      	ldr	r3, [pc, #20]	; (80052d4 <HAL_RCC_OscConfig+0x264>)
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	69db      	ldr	r3, [r3, #28]
 80052ca:	061b      	lsls	r3, r3, #24
 80052cc:	4901      	ldr	r1, [pc, #4]	; (80052d4 <HAL_RCC_OscConfig+0x264>)
 80052ce:	4313      	orrs	r3, r2
 80052d0:	604b      	str	r3, [r1, #4]
 80052d2:	e020      	b.n	8005316 <HAL_RCC_OscConfig+0x2a6>
 80052d4:	40023800 	.word	0x40023800
 80052d8:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80052dc:	4b99      	ldr	r3, [pc, #612]	; (8005544 <HAL_RCC_OscConfig+0x4d4>)
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6a1b      	ldr	r3, [r3, #32]
 80052e8:	4996      	ldr	r1, [pc, #600]	; (8005544 <HAL_RCC_OscConfig+0x4d4>)
 80052ea:	4313      	orrs	r3, r2
 80052ec:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80052ee:	4b95      	ldr	r3, [pc, #596]	; (8005544 <HAL_RCC_OscConfig+0x4d4>)
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	69db      	ldr	r3, [r3, #28]
 80052fa:	061b      	lsls	r3, r3, #24
 80052fc:	4991      	ldr	r1, [pc, #580]	; (8005544 <HAL_RCC_OscConfig+0x4d4>)
 80052fe:	4313      	orrs	r3, r2
 8005300:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6a1b      	ldr	r3, [r3, #32]
 8005306:	4618      	mov	r0, r3
 8005308:	f000 fc48 	bl	8005b9c <RCC_SetFlashLatencyFromMSIRange>
 800530c:	4603      	mov	r3, r0
 800530e:	2b00      	cmp	r3, #0
 8005310:	d001      	beq.n	8005316 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	e1d3      	b.n	80056be <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6a1b      	ldr	r3, [r3, #32]
 800531a:	0b5b      	lsrs	r3, r3, #13
 800531c:	3301      	adds	r3, #1
 800531e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005322:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8005326:	4a87      	ldr	r2, [pc, #540]	; (8005544 <HAL_RCC_OscConfig+0x4d4>)
 8005328:	6892      	ldr	r2, [r2, #8]
 800532a:	0912      	lsrs	r2, r2, #4
 800532c:	f002 020f 	and.w	r2, r2, #15
 8005330:	4985      	ldr	r1, [pc, #532]	; (8005548 <HAL_RCC_OscConfig+0x4d8>)
 8005332:	5c8a      	ldrb	r2, [r1, r2]
 8005334:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005336:	4a85      	ldr	r2, [pc, #532]	; (800554c <HAL_RCC_OscConfig+0x4dc>)
 8005338:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800533a:	4b85      	ldr	r3, [pc, #532]	; (8005550 <HAL_RCC_OscConfig+0x4e0>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4618      	mov	r0, r3
 8005340:	f7fc fcbe 	bl	8001cc0 <HAL_InitTick>
 8005344:	4603      	mov	r3, r0
 8005346:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005348:	7bfb      	ldrb	r3, [r7, #15]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d045      	beq.n	80053da <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 800534e:	7bfb      	ldrb	r3, [r7, #15]
 8005350:	e1b5      	b.n	80056be <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	699b      	ldr	r3, [r3, #24]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d029      	beq.n	80053ae <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800535a:	4b7e      	ldr	r3, [pc, #504]	; (8005554 <HAL_RCC_OscConfig+0x4e4>)
 800535c:	2201      	movs	r2, #1
 800535e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005360:	f7fc fcfa 	bl	8001d58 <HAL_GetTick>
 8005364:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005366:	e008      	b.n	800537a <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005368:	f7fc fcf6 	bl	8001d58 <HAL_GetTick>
 800536c:	4602      	mov	r2, r0
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	1ad3      	subs	r3, r2, r3
 8005372:	2b02      	cmp	r3, #2
 8005374:	d901      	bls.n	800537a <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8005376:	2303      	movs	r3, #3
 8005378:	e1a1      	b.n	80056be <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800537a:	4b72      	ldr	r3, [pc, #456]	; (8005544 <HAL_RCC_OscConfig+0x4d4>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005382:	2b00      	cmp	r3, #0
 8005384:	d0f0      	beq.n	8005368 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005386:	4b6f      	ldr	r3, [pc, #444]	; (8005544 <HAL_RCC_OscConfig+0x4d4>)
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6a1b      	ldr	r3, [r3, #32]
 8005392:	496c      	ldr	r1, [pc, #432]	; (8005544 <HAL_RCC_OscConfig+0x4d4>)
 8005394:	4313      	orrs	r3, r2
 8005396:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005398:	4b6a      	ldr	r3, [pc, #424]	; (8005544 <HAL_RCC_OscConfig+0x4d4>)
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	69db      	ldr	r3, [r3, #28]
 80053a4:	061b      	lsls	r3, r3, #24
 80053a6:	4967      	ldr	r1, [pc, #412]	; (8005544 <HAL_RCC_OscConfig+0x4d4>)
 80053a8:	4313      	orrs	r3, r2
 80053aa:	604b      	str	r3, [r1, #4]
 80053ac:	e015      	b.n	80053da <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80053ae:	4b69      	ldr	r3, [pc, #420]	; (8005554 <HAL_RCC_OscConfig+0x4e4>)
 80053b0:	2200      	movs	r2, #0
 80053b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053b4:	f7fc fcd0 	bl	8001d58 <HAL_GetTick>
 80053b8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80053ba:	e008      	b.n	80053ce <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80053bc:	f7fc fccc 	bl	8001d58 <HAL_GetTick>
 80053c0:	4602      	mov	r2, r0
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	1ad3      	subs	r3, r2, r3
 80053c6:	2b02      	cmp	r3, #2
 80053c8:	d901      	bls.n	80053ce <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80053ca:	2303      	movs	r3, #3
 80053cc:	e177      	b.n	80056be <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80053ce:	4b5d      	ldr	r3, [pc, #372]	; (8005544 <HAL_RCC_OscConfig+0x4d4>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d1f0      	bne.n	80053bc <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f003 0308 	and.w	r3, r3, #8
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d030      	beq.n	8005448 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	695b      	ldr	r3, [r3, #20]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d016      	beq.n	800541c <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80053ee:	4b5a      	ldr	r3, [pc, #360]	; (8005558 <HAL_RCC_OscConfig+0x4e8>)
 80053f0:	2201      	movs	r2, #1
 80053f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053f4:	f7fc fcb0 	bl	8001d58 <HAL_GetTick>
 80053f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80053fa:	e008      	b.n	800540e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80053fc:	f7fc fcac 	bl	8001d58 <HAL_GetTick>
 8005400:	4602      	mov	r2, r0
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	1ad3      	subs	r3, r2, r3
 8005406:	2b02      	cmp	r3, #2
 8005408:	d901      	bls.n	800540e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800540a:	2303      	movs	r3, #3
 800540c:	e157      	b.n	80056be <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800540e:	4b4d      	ldr	r3, [pc, #308]	; (8005544 <HAL_RCC_OscConfig+0x4d4>)
 8005410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005412:	f003 0302 	and.w	r3, r3, #2
 8005416:	2b00      	cmp	r3, #0
 8005418:	d0f0      	beq.n	80053fc <HAL_RCC_OscConfig+0x38c>
 800541a:	e015      	b.n	8005448 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800541c:	4b4e      	ldr	r3, [pc, #312]	; (8005558 <HAL_RCC_OscConfig+0x4e8>)
 800541e:	2200      	movs	r2, #0
 8005420:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005422:	f7fc fc99 	bl	8001d58 <HAL_GetTick>
 8005426:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005428:	e008      	b.n	800543c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800542a:	f7fc fc95 	bl	8001d58 <HAL_GetTick>
 800542e:	4602      	mov	r2, r0
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	1ad3      	subs	r3, r2, r3
 8005434:	2b02      	cmp	r3, #2
 8005436:	d901      	bls.n	800543c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005438:	2303      	movs	r3, #3
 800543a:	e140      	b.n	80056be <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800543c:	4b41      	ldr	r3, [pc, #260]	; (8005544 <HAL_RCC_OscConfig+0x4d4>)
 800543e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005440:	f003 0302 	and.w	r3, r3, #2
 8005444:	2b00      	cmp	r3, #0
 8005446:	d1f0      	bne.n	800542a <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f003 0304 	and.w	r3, r3, #4
 8005450:	2b00      	cmp	r3, #0
 8005452:	f000 80b5 	beq.w	80055c0 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005456:	2300      	movs	r3, #0
 8005458:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800545a:	4b3a      	ldr	r3, [pc, #232]	; (8005544 <HAL_RCC_OscConfig+0x4d4>)
 800545c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005462:	2b00      	cmp	r3, #0
 8005464:	d10d      	bne.n	8005482 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005466:	4b37      	ldr	r3, [pc, #220]	; (8005544 <HAL_RCC_OscConfig+0x4d4>)
 8005468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800546a:	4a36      	ldr	r2, [pc, #216]	; (8005544 <HAL_RCC_OscConfig+0x4d4>)
 800546c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005470:	6253      	str	r3, [r2, #36]	; 0x24
 8005472:	4b34      	ldr	r3, [pc, #208]	; (8005544 <HAL_RCC_OscConfig+0x4d4>)
 8005474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800547a:	60bb      	str	r3, [r7, #8]
 800547c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800547e:	2301      	movs	r3, #1
 8005480:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005482:	4b36      	ldr	r3, [pc, #216]	; (800555c <HAL_RCC_OscConfig+0x4ec>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800548a:	2b00      	cmp	r3, #0
 800548c:	d118      	bne.n	80054c0 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800548e:	4b33      	ldr	r3, [pc, #204]	; (800555c <HAL_RCC_OscConfig+0x4ec>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a32      	ldr	r2, [pc, #200]	; (800555c <HAL_RCC_OscConfig+0x4ec>)
 8005494:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005498:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800549a:	f7fc fc5d 	bl	8001d58 <HAL_GetTick>
 800549e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054a0:	e008      	b.n	80054b4 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054a2:	f7fc fc59 	bl	8001d58 <HAL_GetTick>
 80054a6:	4602      	mov	r2, r0
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	1ad3      	subs	r3, r2, r3
 80054ac:	2b64      	cmp	r3, #100	; 0x64
 80054ae:	d901      	bls.n	80054b4 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80054b0:	2303      	movs	r3, #3
 80054b2:	e104      	b.n	80056be <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054b4:	4b29      	ldr	r3, [pc, #164]	; (800555c <HAL_RCC_OscConfig+0x4ec>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d0f0      	beq.n	80054a2 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d106      	bne.n	80054d6 <HAL_RCC_OscConfig+0x466>
 80054c8:	4b1e      	ldr	r3, [pc, #120]	; (8005544 <HAL_RCC_OscConfig+0x4d4>)
 80054ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054cc:	4a1d      	ldr	r2, [pc, #116]	; (8005544 <HAL_RCC_OscConfig+0x4d4>)
 80054ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054d2:	6353      	str	r3, [r2, #52]	; 0x34
 80054d4:	e02d      	b.n	8005532 <HAL_RCC_OscConfig+0x4c2>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d10c      	bne.n	80054f8 <HAL_RCC_OscConfig+0x488>
 80054de:	4b19      	ldr	r3, [pc, #100]	; (8005544 <HAL_RCC_OscConfig+0x4d4>)
 80054e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054e2:	4a18      	ldr	r2, [pc, #96]	; (8005544 <HAL_RCC_OscConfig+0x4d4>)
 80054e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054e8:	6353      	str	r3, [r2, #52]	; 0x34
 80054ea:	4b16      	ldr	r3, [pc, #88]	; (8005544 <HAL_RCC_OscConfig+0x4d4>)
 80054ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054ee:	4a15      	ldr	r2, [pc, #84]	; (8005544 <HAL_RCC_OscConfig+0x4d4>)
 80054f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80054f4:	6353      	str	r3, [r2, #52]	; 0x34
 80054f6:	e01c      	b.n	8005532 <HAL_RCC_OscConfig+0x4c2>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	2b05      	cmp	r3, #5
 80054fe:	d10c      	bne.n	800551a <HAL_RCC_OscConfig+0x4aa>
 8005500:	4b10      	ldr	r3, [pc, #64]	; (8005544 <HAL_RCC_OscConfig+0x4d4>)
 8005502:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005504:	4a0f      	ldr	r2, [pc, #60]	; (8005544 <HAL_RCC_OscConfig+0x4d4>)
 8005506:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800550a:	6353      	str	r3, [r2, #52]	; 0x34
 800550c:	4b0d      	ldr	r3, [pc, #52]	; (8005544 <HAL_RCC_OscConfig+0x4d4>)
 800550e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005510:	4a0c      	ldr	r2, [pc, #48]	; (8005544 <HAL_RCC_OscConfig+0x4d4>)
 8005512:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005516:	6353      	str	r3, [r2, #52]	; 0x34
 8005518:	e00b      	b.n	8005532 <HAL_RCC_OscConfig+0x4c2>
 800551a:	4b0a      	ldr	r3, [pc, #40]	; (8005544 <HAL_RCC_OscConfig+0x4d4>)
 800551c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800551e:	4a09      	ldr	r2, [pc, #36]	; (8005544 <HAL_RCC_OscConfig+0x4d4>)
 8005520:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005524:	6353      	str	r3, [r2, #52]	; 0x34
 8005526:	4b07      	ldr	r3, [pc, #28]	; (8005544 <HAL_RCC_OscConfig+0x4d4>)
 8005528:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800552a:	4a06      	ldr	r2, [pc, #24]	; (8005544 <HAL_RCC_OscConfig+0x4d4>)
 800552c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005530:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d024      	beq.n	8005584 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800553a:	f7fc fc0d 	bl	8001d58 <HAL_GetTick>
 800553e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005540:	e019      	b.n	8005576 <HAL_RCC_OscConfig+0x506>
 8005542:	bf00      	nop
 8005544:	40023800 	.word	0x40023800
 8005548:	08008d7c 	.word	0x08008d7c
 800554c:	20000000 	.word	0x20000000
 8005550:	20000004 	.word	0x20000004
 8005554:	42470020 	.word	0x42470020
 8005558:	42470680 	.word	0x42470680
 800555c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005560:	f7fc fbfa 	bl	8001d58 <HAL_GetTick>
 8005564:	4602      	mov	r2, r0
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	1ad3      	subs	r3, r2, r3
 800556a:	f241 3288 	movw	r2, #5000	; 0x1388
 800556e:	4293      	cmp	r3, r2
 8005570:	d901      	bls.n	8005576 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8005572:	2303      	movs	r3, #3
 8005574:	e0a3      	b.n	80056be <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005576:	4b54      	ldr	r3, [pc, #336]	; (80056c8 <HAL_RCC_OscConfig+0x658>)
 8005578:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800557a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800557e:	2b00      	cmp	r3, #0
 8005580:	d0ee      	beq.n	8005560 <HAL_RCC_OscConfig+0x4f0>
 8005582:	e014      	b.n	80055ae <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005584:	f7fc fbe8 	bl	8001d58 <HAL_GetTick>
 8005588:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800558a:	e00a      	b.n	80055a2 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800558c:	f7fc fbe4 	bl	8001d58 <HAL_GetTick>
 8005590:	4602      	mov	r2, r0
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	1ad3      	subs	r3, r2, r3
 8005596:	f241 3288 	movw	r2, #5000	; 0x1388
 800559a:	4293      	cmp	r3, r2
 800559c:	d901      	bls.n	80055a2 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 800559e:	2303      	movs	r3, #3
 80055a0:	e08d      	b.n	80056be <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80055a2:	4b49      	ldr	r3, [pc, #292]	; (80056c8 <HAL_RCC_OscConfig+0x658>)
 80055a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d1ee      	bne.n	800558c <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80055ae:	7ffb      	ldrb	r3, [r7, #31]
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d105      	bne.n	80055c0 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055b4:	4b44      	ldr	r3, [pc, #272]	; (80056c8 <HAL_RCC_OscConfig+0x658>)
 80055b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b8:	4a43      	ldr	r2, [pc, #268]	; (80056c8 <HAL_RCC_OscConfig+0x658>)
 80055ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055be:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d079      	beq.n	80056bc <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80055c8:	69bb      	ldr	r3, [r7, #24]
 80055ca:	2b0c      	cmp	r3, #12
 80055cc:	d056      	beq.n	800567c <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d2:	2b02      	cmp	r3, #2
 80055d4:	d13b      	bne.n	800564e <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055d6:	4b3d      	ldr	r3, [pc, #244]	; (80056cc <HAL_RCC_OscConfig+0x65c>)
 80055d8:	2200      	movs	r2, #0
 80055da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055dc:	f7fc fbbc 	bl	8001d58 <HAL_GetTick>
 80055e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80055e2:	e008      	b.n	80055f6 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055e4:	f7fc fbb8 	bl	8001d58 <HAL_GetTick>
 80055e8:	4602      	mov	r2, r0
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	1ad3      	subs	r3, r2, r3
 80055ee:	2b02      	cmp	r3, #2
 80055f0:	d901      	bls.n	80055f6 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80055f2:	2303      	movs	r3, #3
 80055f4:	e063      	b.n	80056be <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80055f6:	4b34      	ldr	r3, [pc, #208]	; (80056c8 <HAL_RCC_OscConfig+0x658>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d1f0      	bne.n	80055e4 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005602:	4b31      	ldr	r3, [pc, #196]	; (80056c8 <HAL_RCC_OscConfig+0x658>)
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005612:	4319      	orrs	r1, r3
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005618:	430b      	orrs	r3, r1
 800561a:	492b      	ldr	r1, [pc, #172]	; (80056c8 <HAL_RCC_OscConfig+0x658>)
 800561c:	4313      	orrs	r3, r2
 800561e:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005620:	4b2a      	ldr	r3, [pc, #168]	; (80056cc <HAL_RCC_OscConfig+0x65c>)
 8005622:	2201      	movs	r2, #1
 8005624:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005626:	f7fc fb97 	bl	8001d58 <HAL_GetTick>
 800562a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800562c:	e008      	b.n	8005640 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800562e:	f7fc fb93 	bl	8001d58 <HAL_GetTick>
 8005632:	4602      	mov	r2, r0
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	1ad3      	subs	r3, r2, r3
 8005638:	2b02      	cmp	r3, #2
 800563a:	d901      	bls.n	8005640 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 800563c:	2303      	movs	r3, #3
 800563e:	e03e      	b.n	80056be <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005640:	4b21      	ldr	r3, [pc, #132]	; (80056c8 <HAL_RCC_OscConfig+0x658>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005648:	2b00      	cmp	r3, #0
 800564a:	d0f0      	beq.n	800562e <HAL_RCC_OscConfig+0x5be>
 800564c:	e036      	b.n	80056bc <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800564e:	4b1f      	ldr	r3, [pc, #124]	; (80056cc <HAL_RCC_OscConfig+0x65c>)
 8005650:	2200      	movs	r2, #0
 8005652:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005654:	f7fc fb80 	bl	8001d58 <HAL_GetTick>
 8005658:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800565a:	e008      	b.n	800566e <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800565c:	f7fc fb7c 	bl	8001d58 <HAL_GetTick>
 8005660:	4602      	mov	r2, r0
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	1ad3      	subs	r3, r2, r3
 8005666:	2b02      	cmp	r3, #2
 8005668:	d901      	bls.n	800566e <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 800566a:	2303      	movs	r3, #3
 800566c:	e027      	b.n	80056be <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800566e:	4b16      	ldr	r3, [pc, #88]	; (80056c8 <HAL_RCC_OscConfig+0x658>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005676:	2b00      	cmp	r3, #0
 8005678:	d1f0      	bne.n	800565c <HAL_RCC_OscConfig+0x5ec>
 800567a:	e01f      	b.n	80056bc <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005680:	2b01      	cmp	r3, #1
 8005682:	d101      	bne.n	8005688 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8005684:	2301      	movs	r3, #1
 8005686:	e01a      	b.n	80056be <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005688:	4b0f      	ldr	r3, [pc, #60]	; (80056c8 <HAL_RCC_OscConfig+0x658>)
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005698:	429a      	cmp	r2, r3
 800569a:	d10d      	bne.n	80056b8 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d106      	bne.n	80056b8 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d001      	beq.n	80056bc <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 80056b8:	2301      	movs	r3, #1
 80056ba:	e000      	b.n	80056be <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 80056bc:	2300      	movs	r3, #0
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3720      	adds	r7, #32
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}
 80056c6:	bf00      	nop
 80056c8:	40023800 	.word	0x40023800
 80056cc:	42470060 	.word	0x42470060

080056d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b084      	sub	sp, #16
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
 80056d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d101      	bne.n	80056e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80056e0:	2301      	movs	r3, #1
 80056e2:	e11a      	b.n	800591a <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80056e4:	4b8f      	ldr	r3, [pc, #572]	; (8005924 <HAL_RCC_ClockConfig+0x254>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f003 0301 	and.w	r3, r3, #1
 80056ec:	683a      	ldr	r2, [r7, #0]
 80056ee:	429a      	cmp	r2, r3
 80056f0:	d919      	bls.n	8005726 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	d105      	bne.n	8005704 <HAL_RCC_ClockConfig+0x34>
 80056f8:	4b8a      	ldr	r3, [pc, #552]	; (8005924 <HAL_RCC_ClockConfig+0x254>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a89      	ldr	r2, [pc, #548]	; (8005924 <HAL_RCC_ClockConfig+0x254>)
 80056fe:	f043 0304 	orr.w	r3, r3, #4
 8005702:	6013      	str	r3, [r2, #0]
 8005704:	4b87      	ldr	r3, [pc, #540]	; (8005924 <HAL_RCC_ClockConfig+0x254>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f023 0201 	bic.w	r2, r3, #1
 800570c:	4985      	ldr	r1, [pc, #532]	; (8005924 <HAL_RCC_ClockConfig+0x254>)
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	4313      	orrs	r3, r2
 8005712:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005714:	4b83      	ldr	r3, [pc, #524]	; (8005924 <HAL_RCC_ClockConfig+0x254>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f003 0301 	and.w	r3, r3, #1
 800571c:	683a      	ldr	r2, [r7, #0]
 800571e:	429a      	cmp	r2, r3
 8005720:	d001      	beq.n	8005726 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	e0f9      	b.n	800591a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f003 0302 	and.w	r3, r3, #2
 800572e:	2b00      	cmp	r3, #0
 8005730:	d008      	beq.n	8005744 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005732:	4b7d      	ldr	r3, [pc, #500]	; (8005928 <HAL_RCC_ClockConfig+0x258>)
 8005734:	689b      	ldr	r3, [r3, #8]
 8005736:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	497a      	ldr	r1, [pc, #488]	; (8005928 <HAL_RCC_ClockConfig+0x258>)
 8005740:	4313      	orrs	r3, r2
 8005742:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f003 0301 	and.w	r3, r3, #1
 800574c:	2b00      	cmp	r3, #0
 800574e:	f000 808e 	beq.w	800586e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	2b02      	cmp	r3, #2
 8005758:	d107      	bne.n	800576a <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800575a:	4b73      	ldr	r3, [pc, #460]	; (8005928 <HAL_RCC_ClockConfig+0x258>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005762:	2b00      	cmp	r3, #0
 8005764:	d121      	bne.n	80057aa <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8005766:	2301      	movs	r3, #1
 8005768:	e0d7      	b.n	800591a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	2b03      	cmp	r3, #3
 8005770:	d107      	bne.n	8005782 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005772:	4b6d      	ldr	r3, [pc, #436]	; (8005928 <HAL_RCC_ClockConfig+0x258>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800577a:	2b00      	cmp	r3, #0
 800577c:	d115      	bne.n	80057aa <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	e0cb      	b.n	800591a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	2b01      	cmp	r3, #1
 8005788:	d107      	bne.n	800579a <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800578a:	4b67      	ldr	r3, [pc, #412]	; (8005928 <HAL_RCC_ClockConfig+0x258>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f003 0302 	and.w	r3, r3, #2
 8005792:	2b00      	cmp	r3, #0
 8005794:	d109      	bne.n	80057aa <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	e0bf      	b.n	800591a <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800579a:	4b63      	ldr	r3, [pc, #396]	; (8005928 <HAL_RCC_ClockConfig+0x258>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d101      	bne.n	80057aa <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80057a6:	2301      	movs	r3, #1
 80057a8:	e0b7      	b.n	800591a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80057aa:	4b5f      	ldr	r3, [pc, #380]	; (8005928 <HAL_RCC_ClockConfig+0x258>)
 80057ac:	689b      	ldr	r3, [r3, #8]
 80057ae:	f023 0203 	bic.w	r2, r3, #3
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	495c      	ldr	r1, [pc, #368]	; (8005928 <HAL_RCC_ClockConfig+0x258>)
 80057b8:	4313      	orrs	r3, r2
 80057ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80057bc:	f7fc facc 	bl	8001d58 <HAL_GetTick>
 80057c0:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	2b02      	cmp	r3, #2
 80057c8:	d112      	bne.n	80057f0 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80057ca:	e00a      	b.n	80057e2 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057cc:	f7fc fac4 	bl	8001d58 <HAL_GetTick>
 80057d0:	4602      	mov	r2, r0
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	1ad3      	subs	r3, r2, r3
 80057d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80057da:	4293      	cmp	r3, r2
 80057dc:	d901      	bls.n	80057e2 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 80057de:	2303      	movs	r3, #3
 80057e0:	e09b      	b.n	800591a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80057e2:	4b51      	ldr	r3, [pc, #324]	; (8005928 <HAL_RCC_ClockConfig+0x258>)
 80057e4:	689b      	ldr	r3, [r3, #8]
 80057e6:	f003 030c 	and.w	r3, r3, #12
 80057ea:	2b08      	cmp	r3, #8
 80057ec:	d1ee      	bne.n	80057cc <HAL_RCC_ClockConfig+0xfc>
 80057ee:	e03e      	b.n	800586e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	2b03      	cmp	r3, #3
 80057f6:	d112      	bne.n	800581e <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80057f8:	e00a      	b.n	8005810 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057fa:	f7fc faad 	bl	8001d58 <HAL_GetTick>
 80057fe:	4602      	mov	r2, r0
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	1ad3      	subs	r3, r2, r3
 8005804:	f241 3288 	movw	r2, #5000	; 0x1388
 8005808:	4293      	cmp	r3, r2
 800580a:	d901      	bls.n	8005810 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 800580c:	2303      	movs	r3, #3
 800580e:	e084      	b.n	800591a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005810:	4b45      	ldr	r3, [pc, #276]	; (8005928 <HAL_RCC_ClockConfig+0x258>)
 8005812:	689b      	ldr	r3, [r3, #8]
 8005814:	f003 030c 	and.w	r3, r3, #12
 8005818:	2b0c      	cmp	r3, #12
 800581a:	d1ee      	bne.n	80057fa <HAL_RCC_ClockConfig+0x12a>
 800581c:	e027      	b.n	800586e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	2b01      	cmp	r3, #1
 8005824:	d11d      	bne.n	8005862 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005826:	e00a      	b.n	800583e <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005828:	f7fc fa96 	bl	8001d58 <HAL_GetTick>
 800582c:	4602      	mov	r2, r0
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	1ad3      	subs	r3, r2, r3
 8005832:	f241 3288 	movw	r2, #5000	; 0x1388
 8005836:	4293      	cmp	r3, r2
 8005838:	d901      	bls.n	800583e <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 800583a:	2303      	movs	r3, #3
 800583c:	e06d      	b.n	800591a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800583e:	4b3a      	ldr	r3, [pc, #232]	; (8005928 <HAL_RCC_ClockConfig+0x258>)
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	f003 030c 	and.w	r3, r3, #12
 8005846:	2b04      	cmp	r3, #4
 8005848:	d1ee      	bne.n	8005828 <HAL_RCC_ClockConfig+0x158>
 800584a:	e010      	b.n	800586e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800584c:	f7fc fa84 	bl	8001d58 <HAL_GetTick>
 8005850:	4602      	mov	r2, r0
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	1ad3      	subs	r3, r2, r3
 8005856:	f241 3288 	movw	r2, #5000	; 0x1388
 800585a:	4293      	cmp	r3, r2
 800585c:	d901      	bls.n	8005862 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 800585e:	2303      	movs	r3, #3
 8005860:	e05b      	b.n	800591a <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005862:	4b31      	ldr	r3, [pc, #196]	; (8005928 <HAL_RCC_ClockConfig+0x258>)
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	f003 030c 	and.w	r3, r3, #12
 800586a:	2b00      	cmp	r3, #0
 800586c:	d1ee      	bne.n	800584c <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800586e:	4b2d      	ldr	r3, [pc, #180]	; (8005924 <HAL_RCC_ClockConfig+0x254>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f003 0301 	and.w	r3, r3, #1
 8005876:	683a      	ldr	r2, [r7, #0]
 8005878:	429a      	cmp	r2, r3
 800587a:	d219      	bcs.n	80058b0 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	2b01      	cmp	r3, #1
 8005880:	d105      	bne.n	800588e <HAL_RCC_ClockConfig+0x1be>
 8005882:	4b28      	ldr	r3, [pc, #160]	; (8005924 <HAL_RCC_ClockConfig+0x254>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a27      	ldr	r2, [pc, #156]	; (8005924 <HAL_RCC_ClockConfig+0x254>)
 8005888:	f043 0304 	orr.w	r3, r3, #4
 800588c:	6013      	str	r3, [r2, #0]
 800588e:	4b25      	ldr	r3, [pc, #148]	; (8005924 <HAL_RCC_ClockConfig+0x254>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f023 0201 	bic.w	r2, r3, #1
 8005896:	4923      	ldr	r1, [pc, #140]	; (8005924 <HAL_RCC_ClockConfig+0x254>)
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	4313      	orrs	r3, r2
 800589c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800589e:	4b21      	ldr	r3, [pc, #132]	; (8005924 <HAL_RCC_ClockConfig+0x254>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f003 0301 	and.w	r3, r3, #1
 80058a6:	683a      	ldr	r2, [r7, #0]
 80058a8:	429a      	cmp	r2, r3
 80058aa:	d001      	beq.n	80058b0 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 80058ac:	2301      	movs	r3, #1
 80058ae:	e034      	b.n	800591a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f003 0304 	and.w	r3, r3, #4
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d008      	beq.n	80058ce <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80058bc:	4b1a      	ldr	r3, [pc, #104]	; (8005928 <HAL_RCC_ClockConfig+0x258>)
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	68db      	ldr	r3, [r3, #12]
 80058c8:	4917      	ldr	r1, [pc, #92]	; (8005928 <HAL_RCC_ClockConfig+0x258>)
 80058ca:	4313      	orrs	r3, r2
 80058cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f003 0308 	and.w	r3, r3, #8
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d009      	beq.n	80058ee <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80058da:	4b13      	ldr	r3, [pc, #76]	; (8005928 <HAL_RCC_ClockConfig+0x258>)
 80058dc:	689b      	ldr	r3, [r3, #8]
 80058de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	691b      	ldr	r3, [r3, #16]
 80058e6:	00db      	lsls	r3, r3, #3
 80058e8:	490f      	ldr	r1, [pc, #60]	; (8005928 <HAL_RCC_ClockConfig+0x258>)
 80058ea:	4313      	orrs	r3, r2
 80058ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80058ee:	f000 f823 	bl	8005938 <HAL_RCC_GetSysClockFreq>
 80058f2:	4602      	mov	r2, r0
 80058f4:	4b0c      	ldr	r3, [pc, #48]	; (8005928 <HAL_RCC_ClockConfig+0x258>)
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	091b      	lsrs	r3, r3, #4
 80058fa:	f003 030f 	and.w	r3, r3, #15
 80058fe:	490b      	ldr	r1, [pc, #44]	; (800592c <HAL_RCC_ClockConfig+0x25c>)
 8005900:	5ccb      	ldrb	r3, [r1, r3]
 8005902:	fa22 f303 	lsr.w	r3, r2, r3
 8005906:	4a0a      	ldr	r2, [pc, #40]	; (8005930 <HAL_RCC_ClockConfig+0x260>)
 8005908:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800590a:	4b0a      	ldr	r3, [pc, #40]	; (8005934 <HAL_RCC_ClockConfig+0x264>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4618      	mov	r0, r3
 8005910:	f7fc f9d6 	bl	8001cc0 <HAL_InitTick>
 8005914:	4603      	mov	r3, r0
 8005916:	72fb      	strb	r3, [r7, #11]

  return status;
 8005918:	7afb      	ldrb	r3, [r7, #11]
}
 800591a:	4618      	mov	r0, r3
 800591c:	3710      	adds	r7, #16
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}
 8005922:	bf00      	nop
 8005924:	40023c00 	.word	0x40023c00
 8005928:	40023800 	.word	0x40023800
 800592c:	08008d7c 	.word	0x08008d7c
 8005930:	20000000 	.word	0x20000000
 8005934:	20000004 	.word	0x20000004

08005938 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005938:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800593c:	b092      	sub	sp, #72	; 0x48
 800593e:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8005940:	4b79      	ldr	r3, [pc, #484]	; (8005b28 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005946:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005948:	f003 030c 	and.w	r3, r3, #12
 800594c:	2b0c      	cmp	r3, #12
 800594e:	d00d      	beq.n	800596c <HAL_RCC_GetSysClockFreq+0x34>
 8005950:	2b0c      	cmp	r3, #12
 8005952:	f200 80d5 	bhi.w	8005b00 <HAL_RCC_GetSysClockFreq+0x1c8>
 8005956:	2b04      	cmp	r3, #4
 8005958:	d002      	beq.n	8005960 <HAL_RCC_GetSysClockFreq+0x28>
 800595a:	2b08      	cmp	r3, #8
 800595c:	d003      	beq.n	8005966 <HAL_RCC_GetSysClockFreq+0x2e>
 800595e:	e0cf      	b.n	8005b00 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005960:	4b72      	ldr	r3, [pc, #456]	; (8005b2c <HAL_RCC_GetSysClockFreq+0x1f4>)
 8005962:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8005964:	e0da      	b.n	8005b1c <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005966:	4b72      	ldr	r3, [pc, #456]	; (8005b30 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8005968:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 800596a:	e0d7      	b.n	8005b1c <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800596c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800596e:	0c9b      	lsrs	r3, r3, #18
 8005970:	f003 020f 	and.w	r2, r3, #15
 8005974:	4b6f      	ldr	r3, [pc, #444]	; (8005b34 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005976:	5c9b      	ldrb	r3, [r3, r2]
 8005978:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800597a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800597c:	0d9b      	lsrs	r3, r3, #22
 800597e:	f003 0303 	and.w	r3, r3, #3
 8005982:	3301      	adds	r3, #1
 8005984:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005986:	4b68      	ldr	r3, [pc, #416]	; (8005b28 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800598e:	2b00      	cmp	r3, #0
 8005990:	d05d      	beq.n	8005a4e <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005994:	2200      	movs	r2, #0
 8005996:	4618      	mov	r0, r3
 8005998:	4611      	mov	r1, r2
 800599a:	4604      	mov	r4, r0
 800599c:	460d      	mov	r5, r1
 800599e:	4622      	mov	r2, r4
 80059a0:	462b      	mov	r3, r5
 80059a2:	f04f 0000 	mov.w	r0, #0
 80059a6:	f04f 0100 	mov.w	r1, #0
 80059aa:	0159      	lsls	r1, r3, #5
 80059ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80059b0:	0150      	lsls	r0, r2, #5
 80059b2:	4602      	mov	r2, r0
 80059b4:	460b      	mov	r3, r1
 80059b6:	4621      	mov	r1, r4
 80059b8:	1a51      	subs	r1, r2, r1
 80059ba:	6139      	str	r1, [r7, #16]
 80059bc:	4629      	mov	r1, r5
 80059be:	eb63 0301 	sbc.w	r3, r3, r1
 80059c2:	617b      	str	r3, [r7, #20]
 80059c4:	f04f 0200 	mov.w	r2, #0
 80059c8:	f04f 0300 	mov.w	r3, #0
 80059cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80059d0:	4659      	mov	r1, fp
 80059d2:	018b      	lsls	r3, r1, #6
 80059d4:	4651      	mov	r1, sl
 80059d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80059da:	4651      	mov	r1, sl
 80059dc:	018a      	lsls	r2, r1, #6
 80059de:	46d4      	mov	ip, sl
 80059e0:	ebb2 080c 	subs.w	r8, r2, ip
 80059e4:	4659      	mov	r1, fp
 80059e6:	eb63 0901 	sbc.w	r9, r3, r1
 80059ea:	f04f 0200 	mov.w	r2, #0
 80059ee:	f04f 0300 	mov.w	r3, #0
 80059f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80059f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80059fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80059fe:	4690      	mov	r8, r2
 8005a00:	4699      	mov	r9, r3
 8005a02:	4623      	mov	r3, r4
 8005a04:	eb18 0303 	adds.w	r3, r8, r3
 8005a08:	60bb      	str	r3, [r7, #8]
 8005a0a:	462b      	mov	r3, r5
 8005a0c:	eb49 0303 	adc.w	r3, r9, r3
 8005a10:	60fb      	str	r3, [r7, #12]
 8005a12:	f04f 0200 	mov.w	r2, #0
 8005a16:	f04f 0300 	mov.w	r3, #0
 8005a1a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005a1e:	4629      	mov	r1, r5
 8005a20:	024b      	lsls	r3, r1, #9
 8005a22:	4620      	mov	r0, r4
 8005a24:	4629      	mov	r1, r5
 8005a26:	4604      	mov	r4, r0
 8005a28:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8005a2c:	4601      	mov	r1, r0
 8005a2e:	024a      	lsls	r2, r1, #9
 8005a30:	4610      	mov	r0, r2
 8005a32:	4619      	mov	r1, r3
 8005a34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a36:	2200      	movs	r2, #0
 8005a38:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a3a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a3c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005a40:	f7fb fae8 	bl	8001014 <__aeabi_uldivmod>
 8005a44:	4602      	mov	r2, r0
 8005a46:	460b      	mov	r3, r1
 8005a48:	4613      	mov	r3, r2
 8005a4a:	647b      	str	r3, [r7, #68]	; 0x44
 8005a4c:	e055      	b.n	8005afa <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a50:	2200      	movs	r2, #0
 8005a52:	623b      	str	r3, [r7, #32]
 8005a54:	627a      	str	r2, [r7, #36]	; 0x24
 8005a56:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005a5a:	4642      	mov	r2, r8
 8005a5c:	464b      	mov	r3, r9
 8005a5e:	f04f 0000 	mov.w	r0, #0
 8005a62:	f04f 0100 	mov.w	r1, #0
 8005a66:	0159      	lsls	r1, r3, #5
 8005a68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005a6c:	0150      	lsls	r0, r2, #5
 8005a6e:	4602      	mov	r2, r0
 8005a70:	460b      	mov	r3, r1
 8005a72:	46c4      	mov	ip, r8
 8005a74:	ebb2 0a0c 	subs.w	sl, r2, ip
 8005a78:	4640      	mov	r0, r8
 8005a7a:	4649      	mov	r1, r9
 8005a7c:	468c      	mov	ip, r1
 8005a7e:	eb63 0b0c 	sbc.w	fp, r3, ip
 8005a82:	f04f 0200 	mov.w	r2, #0
 8005a86:	f04f 0300 	mov.w	r3, #0
 8005a8a:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005a8e:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005a92:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005a96:	ebb2 040a 	subs.w	r4, r2, sl
 8005a9a:	eb63 050b 	sbc.w	r5, r3, fp
 8005a9e:	f04f 0200 	mov.w	r2, #0
 8005aa2:	f04f 0300 	mov.w	r3, #0
 8005aa6:	00eb      	lsls	r3, r5, #3
 8005aa8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005aac:	00e2      	lsls	r2, r4, #3
 8005aae:	4614      	mov	r4, r2
 8005ab0:	461d      	mov	r5, r3
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	18e3      	adds	r3, r4, r3
 8005ab6:	603b      	str	r3, [r7, #0]
 8005ab8:	460b      	mov	r3, r1
 8005aba:	eb45 0303 	adc.w	r3, r5, r3
 8005abe:	607b      	str	r3, [r7, #4]
 8005ac0:	f04f 0200 	mov.w	r2, #0
 8005ac4:	f04f 0300 	mov.w	r3, #0
 8005ac8:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005acc:	4629      	mov	r1, r5
 8005ace:	028b      	lsls	r3, r1, #10
 8005ad0:	4620      	mov	r0, r4
 8005ad2:	4629      	mov	r1, r5
 8005ad4:	4604      	mov	r4, r0
 8005ad6:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8005ada:	4601      	mov	r1, r0
 8005adc:	028a      	lsls	r2, r1, #10
 8005ade:	4610      	mov	r0, r2
 8005ae0:	4619      	mov	r1, r3
 8005ae2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	61bb      	str	r3, [r7, #24]
 8005ae8:	61fa      	str	r2, [r7, #28]
 8005aea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005aee:	f7fb fa91 	bl	8001014 <__aeabi_uldivmod>
 8005af2:	4602      	mov	r2, r0
 8005af4:	460b      	mov	r3, r1
 8005af6:	4613      	mov	r3, r2
 8005af8:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 8005afa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005afc:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8005afe:	e00d      	b.n	8005b1c <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8005b00:	4b09      	ldr	r3, [pc, #36]	; (8005b28 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	0b5b      	lsrs	r3, r3, #13
 8005b06:	f003 0307 	and.w	r3, r3, #7
 8005b0a:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8005b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b0e:	3301      	adds	r3, #1
 8005b10:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005b14:	fa02 f303 	lsl.w	r3, r2, r3
 8005b18:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8005b1a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005b1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3748      	adds	r7, #72	; 0x48
 8005b22:	46bd      	mov	sp, r7
 8005b24:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b28:	40023800 	.word	0x40023800
 8005b2c:	00f42400 	.word	0x00f42400
 8005b30:	007a1200 	.word	0x007a1200
 8005b34:	08008d70 	.word	0x08008d70

08005b38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b3c:	4b02      	ldr	r3, [pc, #8]	; (8005b48 <HAL_RCC_GetHCLKFreq+0x10>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bc80      	pop	{r7}
 8005b46:	4770      	bx	lr
 8005b48:	20000000 	.word	0x20000000

08005b4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005b50:	f7ff fff2 	bl	8005b38 <HAL_RCC_GetHCLKFreq>
 8005b54:	4602      	mov	r2, r0
 8005b56:	4b05      	ldr	r3, [pc, #20]	; (8005b6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	0a1b      	lsrs	r3, r3, #8
 8005b5c:	f003 0307 	and.w	r3, r3, #7
 8005b60:	4903      	ldr	r1, [pc, #12]	; (8005b70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b62:	5ccb      	ldrb	r3, [r1, r3]
 8005b64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	bd80      	pop	{r7, pc}
 8005b6c:	40023800 	.word	0x40023800
 8005b70:	08008d8c 	.word	0x08008d8c

08005b74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005b78:	f7ff ffde 	bl	8005b38 <HAL_RCC_GetHCLKFreq>
 8005b7c:	4602      	mov	r2, r0
 8005b7e:	4b05      	ldr	r3, [pc, #20]	; (8005b94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005b80:	689b      	ldr	r3, [r3, #8]
 8005b82:	0adb      	lsrs	r3, r3, #11
 8005b84:	f003 0307 	and.w	r3, r3, #7
 8005b88:	4903      	ldr	r1, [pc, #12]	; (8005b98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b8a:	5ccb      	ldrb	r3, [r1, r3]
 8005b8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	bd80      	pop	{r7, pc}
 8005b94:	40023800 	.word	0x40023800
 8005b98:	08008d8c 	.word	0x08008d8c

08005b9c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b087      	sub	sp, #28
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005ba8:	4b29      	ldr	r3, [pc, #164]	; (8005c50 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d12c      	bne.n	8005c0e <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005bb4:	4b26      	ldr	r3, [pc, #152]	; (8005c50 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d005      	beq.n	8005bcc <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8005bc0:	4b24      	ldr	r3, [pc, #144]	; (8005c54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8005bc8:	617b      	str	r3, [r7, #20]
 8005bca:	e016      	b.n	8005bfa <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005bcc:	4b20      	ldr	r3, [pc, #128]	; (8005c50 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd0:	4a1f      	ldr	r2, [pc, #124]	; (8005c50 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005bd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bd6:	6253      	str	r3, [r2, #36]	; 0x24
 8005bd8:	4b1d      	ldr	r3, [pc, #116]	; (8005c50 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005be0:	60fb      	str	r3, [r7, #12]
 8005be2:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8005be4:	4b1b      	ldr	r3, [pc, #108]	; (8005c54 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8005bec:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8005bee:	4b18      	ldr	r3, [pc, #96]	; (8005c50 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf2:	4a17      	ldr	r2, [pc, #92]	; (8005c50 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8005bf4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005bf8:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8005c00:	d105      	bne.n	8005c0e <RCC_SetFlashLatencyFromMSIRange+0x72>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005c08:	d101      	bne.n	8005c0e <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	d105      	bne.n	8005c20 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8005c14:	4b10      	ldr	r3, [pc, #64]	; (8005c58 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a0f      	ldr	r2, [pc, #60]	; (8005c58 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005c1a:	f043 0304 	orr.w	r3, r3, #4
 8005c1e:	6013      	str	r3, [r2, #0]
 8005c20:	4b0d      	ldr	r3, [pc, #52]	; (8005c58 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f023 0201 	bic.w	r2, r3, #1
 8005c28:	490b      	ldr	r1, [pc, #44]	; (8005c58 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005c30:	4b09      	ldr	r3, [pc, #36]	; (8005c58 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f003 0301 	and.w	r3, r3, #1
 8005c38:	693a      	ldr	r2, [r7, #16]
 8005c3a:	429a      	cmp	r2, r3
 8005c3c:	d001      	beq.n	8005c42 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	e000      	b.n	8005c44 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8005c42:	2300      	movs	r3, #0
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	371c      	adds	r7, #28
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bc80      	pop	{r7}
 8005c4c:	4770      	bx	lr
 8005c4e:	bf00      	nop
 8005c50:	40023800 	.word	0x40023800
 8005c54:	40007000 	.word	0x40007000
 8005c58:	40023c00 	.word	0x40023c00

08005c5c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b082      	sub	sp, #8
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d101      	bne.n	8005c6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e042      	b.n	8005cf4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c74:	b2db      	uxtb	r3, r3
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d106      	bne.n	8005c88 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f7fb fd24 	bl	80016d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2224      	movs	r2, #36	; 0x24
 8005c8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	68da      	ldr	r2, [r3, #12]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c9e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f000 f91d 	bl	8005ee0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	691a      	ldr	r2, [r3, #16]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005cb4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	695a      	ldr	r2, [r3, #20]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005cc4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	68da      	ldr	r2, [r3, #12]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005cd4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2220      	movs	r2, #32
 8005ce0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2220      	movs	r2, #32
 8005ce8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005cf2:	2300      	movs	r3, #0
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	3708      	adds	r7, #8
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd80      	pop	{r7, pc}

08005cfc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b08a      	sub	sp, #40	; 0x28
 8005d00:	af02      	add	r7, sp, #8
 8005d02:	60f8      	str	r0, [r7, #12]
 8005d04:	60b9      	str	r1, [r7, #8]
 8005d06:	603b      	str	r3, [r7, #0]
 8005d08:	4613      	mov	r3, r2
 8005d0a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d16:	b2db      	uxtb	r3, r3
 8005d18:	2b20      	cmp	r3, #32
 8005d1a:	d16d      	bne.n	8005df8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d002      	beq.n	8005d28 <HAL_UART_Transmit+0x2c>
 8005d22:	88fb      	ldrh	r3, [r7, #6]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d101      	bne.n	8005d2c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	e066      	b.n	8005dfa <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2221      	movs	r2, #33	; 0x21
 8005d36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005d3a:	f7fc f80d 	bl	8001d58 <HAL_GetTick>
 8005d3e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	88fa      	ldrh	r2, [r7, #6]
 8005d44:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	88fa      	ldrh	r2, [r7, #6]
 8005d4a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d54:	d108      	bne.n	8005d68 <HAL_UART_Transmit+0x6c>
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	691b      	ldr	r3, [r3, #16]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d104      	bne.n	8005d68 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	61bb      	str	r3, [r7, #24]
 8005d66:	e003      	b.n	8005d70 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005d70:	e02a      	b.n	8005dc8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	9300      	str	r3, [sp, #0]
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	2180      	movs	r1, #128	; 0x80
 8005d7c:	68f8      	ldr	r0, [r7, #12]
 8005d7e:	f000 f840 	bl	8005e02 <UART_WaitOnFlagUntilTimeout>
 8005d82:	4603      	mov	r3, r0
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d001      	beq.n	8005d8c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8005d88:	2303      	movs	r3, #3
 8005d8a:	e036      	b.n	8005dfa <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005d8c:	69fb      	ldr	r3, [r7, #28]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d10b      	bne.n	8005daa <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005d92:	69bb      	ldr	r3, [r7, #24]
 8005d94:	881b      	ldrh	r3, [r3, #0]
 8005d96:	461a      	mov	r2, r3
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005da0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005da2:	69bb      	ldr	r3, [r7, #24]
 8005da4:	3302      	adds	r3, #2
 8005da6:	61bb      	str	r3, [r7, #24]
 8005da8:	e007      	b.n	8005dba <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005daa:	69fb      	ldr	r3, [r7, #28]
 8005dac:	781a      	ldrb	r2, [r3, #0]
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005db4:	69fb      	ldr	r3, [r7, #28]
 8005db6:	3301      	adds	r3, #1
 8005db8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005dbe:	b29b      	uxth	r3, r3
 8005dc0:	3b01      	subs	r3, #1
 8005dc2:	b29a      	uxth	r2, r3
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005dcc:	b29b      	uxth	r3, r3
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d1cf      	bne.n	8005d72 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	9300      	str	r3, [sp, #0]
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	2140      	movs	r1, #64	; 0x40
 8005ddc:	68f8      	ldr	r0, [r7, #12]
 8005dde:	f000 f810 	bl	8005e02 <UART_WaitOnFlagUntilTimeout>
 8005de2:	4603      	mov	r3, r0
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d001      	beq.n	8005dec <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8005de8:	2303      	movs	r3, #3
 8005dea:	e006      	b.n	8005dfa <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2220      	movs	r2, #32
 8005df0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8005df4:	2300      	movs	r3, #0
 8005df6:	e000      	b.n	8005dfa <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005df8:	2302      	movs	r3, #2
  }
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3720      	adds	r7, #32
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}

08005e02 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005e02:	b580      	push	{r7, lr}
 8005e04:	b090      	sub	sp, #64	; 0x40
 8005e06:	af00      	add	r7, sp, #0
 8005e08:	60f8      	str	r0, [r7, #12]
 8005e0a:	60b9      	str	r1, [r7, #8]
 8005e0c:	603b      	str	r3, [r7, #0]
 8005e0e:	4613      	mov	r3, r2
 8005e10:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e12:	e050      	b.n	8005eb6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e1a:	d04c      	beq.n	8005eb6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005e1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d007      	beq.n	8005e32 <UART_WaitOnFlagUntilTimeout+0x30>
 8005e22:	f7fb ff99 	bl	8001d58 <HAL_GetTick>
 8005e26:	4602      	mov	r2, r0
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	1ad3      	subs	r3, r2, r3
 8005e2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e2e:	429a      	cmp	r2, r3
 8005e30:	d241      	bcs.n	8005eb6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	330c      	adds	r3, #12
 8005e38:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e3c:	e853 3f00 	ldrex	r3, [r3]
 8005e40:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e44:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005e48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	330c      	adds	r3, #12
 8005e50:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005e52:	637a      	str	r2, [r7, #52]	; 0x34
 8005e54:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e56:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005e58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e5a:	e841 2300 	strex	r3, r2, [r1]
 8005e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d1e5      	bne.n	8005e32 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	3314      	adds	r3, #20
 8005e6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	e853 3f00 	ldrex	r3, [r3]
 8005e74:	613b      	str	r3, [r7, #16]
   return(result);
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	f023 0301 	bic.w	r3, r3, #1
 8005e7c:	63bb      	str	r3, [r7, #56]	; 0x38
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	3314      	adds	r3, #20
 8005e84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e86:	623a      	str	r2, [r7, #32]
 8005e88:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e8a:	69f9      	ldr	r1, [r7, #28]
 8005e8c:	6a3a      	ldr	r2, [r7, #32]
 8005e8e:	e841 2300 	strex	r3, r2, [r1]
 8005e92:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e94:	69bb      	ldr	r3, [r7, #24]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d1e5      	bne.n	8005e66 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2220      	movs	r2, #32
 8005e9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2220      	movs	r2, #32
 8005ea6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	2200      	movs	r2, #0
 8005eae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8005eb2:	2303      	movs	r3, #3
 8005eb4:	e00f      	b.n	8005ed6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	681a      	ldr	r2, [r3, #0]
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	4013      	ands	r3, r2
 8005ec0:	68ba      	ldr	r2, [r7, #8]
 8005ec2:	429a      	cmp	r2, r3
 8005ec4:	bf0c      	ite	eq
 8005ec6:	2301      	moveq	r3, #1
 8005ec8:	2300      	movne	r3, #0
 8005eca:	b2db      	uxtb	r3, r3
 8005ecc:	461a      	mov	r2, r3
 8005ece:	79fb      	ldrb	r3, [r7, #7]
 8005ed0:	429a      	cmp	r2, r3
 8005ed2:	d09f      	beq.n	8005e14 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005ed4:	2300      	movs	r3, #0
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	3740      	adds	r7, #64	; 0x40
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}
	...

08005ee0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b084      	sub	sp, #16
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	691b      	ldr	r3, [r3, #16]
 8005eee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	68da      	ldr	r2, [r3, #12]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	430a      	orrs	r2, r1
 8005efc:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	689a      	ldr	r2, [r3, #8]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	691b      	ldr	r3, [r3, #16]
 8005f06:	431a      	orrs	r2, r3
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	695b      	ldr	r3, [r3, #20]
 8005f0c:	431a      	orrs	r2, r3
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	69db      	ldr	r3, [r3, #28]
 8005f12:	4313      	orrs	r3, r2
 8005f14:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	68db      	ldr	r3, [r3, #12]
 8005f1c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005f20:	f023 030c 	bic.w	r3, r3, #12
 8005f24:	687a      	ldr	r2, [r7, #4]
 8005f26:	6812      	ldr	r2, [r2, #0]
 8005f28:	68b9      	ldr	r1, [r7, #8]
 8005f2a:	430b      	orrs	r3, r1
 8005f2c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	695b      	ldr	r3, [r3, #20]
 8005f34:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	699a      	ldr	r2, [r3, #24]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	430a      	orrs	r2, r1
 8005f42:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a55      	ldr	r2, [pc, #340]	; (80060a0 <UART_SetConfig+0x1c0>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d103      	bne.n	8005f56 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005f4e:	f7ff fe11 	bl	8005b74 <HAL_RCC_GetPCLK2Freq>
 8005f52:	60f8      	str	r0, [r7, #12]
 8005f54:	e002      	b.n	8005f5c <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005f56:	f7ff fdf9 	bl	8005b4c <HAL_RCC_GetPCLK1Freq>
 8005f5a:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	69db      	ldr	r3, [r3, #28]
 8005f60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f64:	d14c      	bne.n	8006000 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005f66:	68fa      	ldr	r2, [r7, #12]
 8005f68:	4613      	mov	r3, r2
 8005f6a:	009b      	lsls	r3, r3, #2
 8005f6c:	4413      	add	r3, r2
 8005f6e:	009a      	lsls	r2, r3, #2
 8005f70:	441a      	add	r2, r3
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	005b      	lsls	r3, r3, #1
 8005f78:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f7c:	4a49      	ldr	r2, [pc, #292]	; (80060a4 <UART_SetConfig+0x1c4>)
 8005f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8005f82:	095b      	lsrs	r3, r3, #5
 8005f84:	0119      	lsls	r1, r3, #4
 8005f86:	68fa      	ldr	r2, [r7, #12]
 8005f88:	4613      	mov	r3, r2
 8005f8a:	009b      	lsls	r3, r3, #2
 8005f8c:	4413      	add	r3, r2
 8005f8e:	009a      	lsls	r2, r3, #2
 8005f90:	441a      	add	r2, r3
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	005b      	lsls	r3, r3, #1
 8005f98:	fbb2 f2f3 	udiv	r2, r2, r3
 8005f9c:	4b41      	ldr	r3, [pc, #260]	; (80060a4 <UART_SetConfig+0x1c4>)
 8005f9e:	fba3 0302 	umull	r0, r3, r3, r2
 8005fa2:	095b      	lsrs	r3, r3, #5
 8005fa4:	2064      	movs	r0, #100	; 0x64
 8005fa6:	fb00 f303 	mul.w	r3, r0, r3
 8005faa:	1ad3      	subs	r3, r2, r3
 8005fac:	00db      	lsls	r3, r3, #3
 8005fae:	3332      	adds	r3, #50	; 0x32
 8005fb0:	4a3c      	ldr	r2, [pc, #240]	; (80060a4 <UART_SetConfig+0x1c4>)
 8005fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8005fb6:	095b      	lsrs	r3, r3, #5
 8005fb8:	005b      	lsls	r3, r3, #1
 8005fba:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005fbe:	4419      	add	r1, r3
 8005fc0:	68fa      	ldr	r2, [r7, #12]
 8005fc2:	4613      	mov	r3, r2
 8005fc4:	009b      	lsls	r3, r3, #2
 8005fc6:	4413      	add	r3, r2
 8005fc8:	009a      	lsls	r2, r3, #2
 8005fca:	441a      	add	r2, r3
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	005b      	lsls	r3, r3, #1
 8005fd2:	fbb2 f2f3 	udiv	r2, r2, r3
 8005fd6:	4b33      	ldr	r3, [pc, #204]	; (80060a4 <UART_SetConfig+0x1c4>)
 8005fd8:	fba3 0302 	umull	r0, r3, r3, r2
 8005fdc:	095b      	lsrs	r3, r3, #5
 8005fde:	2064      	movs	r0, #100	; 0x64
 8005fe0:	fb00 f303 	mul.w	r3, r0, r3
 8005fe4:	1ad3      	subs	r3, r2, r3
 8005fe6:	00db      	lsls	r3, r3, #3
 8005fe8:	3332      	adds	r3, #50	; 0x32
 8005fea:	4a2e      	ldr	r2, [pc, #184]	; (80060a4 <UART_SetConfig+0x1c4>)
 8005fec:	fba2 2303 	umull	r2, r3, r2, r3
 8005ff0:	095b      	lsrs	r3, r3, #5
 8005ff2:	f003 0207 	and.w	r2, r3, #7
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	440a      	add	r2, r1
 8005ffc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005ffe:	e04a      	b.n	8006096 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006000:	68fa      	ldr	r2, [r7, #12]
 8006002:	4613      	mov	r3, r2
 8006004:	009b      	lsls	r3, r3, #2
 8006006:	4413      	add	r3, r2
 8006008:	009a      	lsls	r2, r3, #2
 800600a:	441a      	add	r2, r3
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	009b      	lsls	r3, r3, #2
 8006012:	fbb2 f3f3 	udiv	r3, r2, r3
 8006016:	4a23      	ldr	r2, [pc, #140]	; (80060a4 <UART_SetConfig+0x1c4>)
 8006018:	fba2 2303 	umull	r2, r3, r2, r3
 800601c:	095b      	lsrs	r3, r3, #5
 800601e:	0119      	lsls	r1, r3, #4
 8006020:	68fa      	ldr	r2, [r7, #12]
 8006022:	4613      	mov	r3, r2
 8006024:	009b      	lsls	r3, r3, #2
 8006026:	4413      	add	r3, r2
 8006028:	009a      	lsls	r2, r3, #2
 800602a:	441a      	add	r2, r3
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	009b      	lsls	r3, r3, #2
 8006032:	fbb2 f2f3 	udiv	r2, r2, r3
 8006036:	4b1b      	ldr	r3, [pc, #108]	; (80060a4 <UART_SetConfig+0x1c4>)
 8006038:	fba3 0302 	umull	r0, r3, r3, r2
 800603c:	095b      	lsrs	r3, r3, #5
 800603e:	2064      	movs	r0, #100	; 0x64
 8006040:	fb00 f303 	mul.w	r3, r0, r3
 8006044:	1ad3      	subs	r3, r2, r3
 8006046:	011b      	lsls	r3, r3, #4
 8006048:	3332      	adds	r3, #50	; 0x32
 800604a:	4a16      	ldr	r2, [pc, #88]	; (80060a4 <UART_SetConfig+0x1c4>)
 800604c:	fba2 2303 	umull	r2, r3, r2, r3
 8006050:	095b      	lsrs	r3, r3, #5
 8006052:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006056:	4419      	add	r1, r3
 8006058:	68fa      	ldr	r2, [r7, #12]
 800605a:	4613      	mov	r3, r2
 800605c:	009b      	lsls	r3, r3, #2
 800605e:	4413      	add	r3, r2
 8006060:	009a      	lsls	r2, r3, #2
 8006062:	441a      	add	r2, r3
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	009b      	lsls	r3, r3, #2
 800606a:	fbb2 f2f3 	udiv	r2, r2, r3
 800606e:	4b0d      	ldr	r3, [pc, #52]	; (80060a4 <UART_SetConfig+0x1c4>)
 8006070:	fba3 0302 	umull	r0, r3, r3, r2
 8006074:	095b      	lsrs	r3, r3, #5
 8006076:	2064      	movs	r0, #100	; 0x64
 8006078:	fb00 f303 	mul.w	r3, r0, r3
 800607c:	1ad3      	subs	r3, r2, r3
 800607e:	011b      	lsls	r3, r3, #4
 8006080:	3332      	adds	r3, #50	; 0x32
 8006082:	4a08      	ldr	r2, [pc, #32]	; (80060a4 <UART_SetConfig+0x1c4>)
 8006084:	fba2 2303 	umull	r2, r3, r2, r3
 8006088:	095b      	lsrs	r3, r3, #5
 800608a:	f003 020f 	and.w	r2, r3, #15
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	440a      	add	r2, r1
 8006094:	609a      	str	r2, [r3, #8]
}
 8006096:	bf00      	nop
 8006098:	3710      	adds	r7, #16
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}
 800609e:	bf00      	nop
 80060a0:	40013800 	.word	0x40013800
 80060a4:	51eb851f 	.word	0x51eb851f

080060a8 <__errno>:
 80060a8:	4b01      	ldr	r3, [pc, #4]	; (80060b0 <__errno+0x8>)
 80060aa:	6818      	ldr	r0, [r3, #0]
 80060ac:	4770      	bx	lr
 80060ae:	bf00      	nop
 80060b0:	2000000c 	.word	0x2000000c

080060b4 <__libc_init_array>:
 80060b4:	b570      	push	{r4, r5, r6, lr}
 80060b6:	2600      	movs	r6, #0
 80060b8:	4d0c      	ldr	r5, [pc, #48]	; (80060ec <__libc_init_array+0x38>)
 80060ba:	4c0d      	ldr	r4, [pc, #52]	; (80060f0 <__libc_init_array+0x3c>)
 80060bc:	1b64      	subs	r4, r4, r5
 80060be:	10a4      	asrs	r4, r4, #2
 80060c0:	42a6      	cmp	r6, r4
 80060c2:	d109      	bne.n	80060d8 <__libc_init_array+0x24>
 80060c4:	f002 fe16 	bl	8008cf4 <_init>
 80060c8:	2600      	movs	r6, #0
 80060ca:	4d0a      	ldr	r5, [pc, #40]	; (80060f4 <__libc_init_array+0x40>)
 80060cc:	4c0a      	ldr	r4, [pc, #40]	; (80060f8 <__libc_init_array+0x44>)
 80060ce:	1b64      	subs	r4, r4, r5
 80060d0:	10a4      	asrs	r4, r4, #2
 80060d2:	42a6      	cmp	r6, r4
 80060d4:	d105      	bne.n	80060e2 <__libc_init_array+0x2e>
 80060d6:	bd70      	pop	{r4, r5, r6, pc}
 80060d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80060dc:	4798      	blx	r3
 80060de:	3601      	adds	r6, #1
 80060e0:	e7ee      	b.n	80060c0 <__libc_init_array+0xc>
 80060e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80060e6:	4798      	blx	r3
 80060e8:	3601      	adds	r6, #1
 80060ea:	e7f2      	b.n	80060d2 <__libc_init_array+0x1e>
 80060ec:	08009174 	.word	0x08009174
 80060f0:	08009174 	.word	0x08009174
 80060f4:	08009174 	.word	0x08009174
 80060f8:	08009178 	.word	0x08009178

080060fc <memset>:
 80060fc:	4603      	mov	r3, r0
 80060fe:	4402      	add	r2, r0
 8006100:	4293      	cmp	r3, r2
 8006102:	d100      	bne.n	8006106 <memset+0xa>
 8006104:	4770      	bx	lr
 8006106:	f803 1b01 	strb.w	r1, [r3], #1
 800610a:	e7f9      	b.n	8006100 <memset+0x4>

0800610c <__cvt>:
 800610c:	2b00      	cmp	r3, #0
 800610e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006112:	461f      	mov	r7, r3
 8006114:	bfbb      	ittet	lt
 8006116:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800611a:	461f      	movlt	r7, r3
 800611c:	2300      	movge	r3, #0
 800611e:	232d      	movlt	r3, #45	; 0x2d
 8006120:	b088      	sub	sp, #32
 8006122:	4614      	mov	r4, r2
 8006124:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006126:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006128:	7013      	strb	r3, [r2, #0]
 800612a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800612c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8006130:	f023 0820 	bic.w	r8, r3, #32
 8006134:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006138:	d005      	beq.n	8006146 <__cvt+0x3a>
 800613a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800613e:	d100      	bne.n	8006142 <__cvt+0x36>
 8006140:	3501      	adds	r5, #1
 8006142:	2302      	movs	r3, #2
 8006144:	e000      	b.n	8006148 <__cvt+0x3c>
 8006146:	2303      	movs	r3, #3
 8006148:	aa07      	add	r2, sp, #28
 800614a:	9204      	str	r2, [sp, #16]
 800614c:	aa06      	add	r2, sp, #24
 800614e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006152:	e9cd 3500 	strd	r3, r5, [sp]
 8006156:	4622      	mov	r2, r4
 8006158:	463b      	mov	r3, r7
 800615a:	f000 fe25 	bl	8006da8 <_dtoa_r>
 800615e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006162:	4606      	mov	r6, r0
 8006164:	d102      	bne.n	800616c <__cvt+0x60>
 8006166:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006168:	07db      	lsls	r3, r3, #31
 800616a:	d522      	bpl.n	80061b2 <__cvt+0xa6>
 800616c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006170:	eb06 0905 	add.w	r9, r6, r5
 8006174:	d110      	bne.n	8006198 <__cvt+0x8c>
 8006176:	7833      	ldrb	r3, [r6, #0]
 8006178:	2b30      	cmp	r3, #48	; 0x30
 800617a:	d10a      	bne.n	8006192 <__cvt+0x86>
 800617c:	2200      	movs	r2, #0
 800617e:	2300      	movs	r3, #0
 8006180:	4620      	mov	r0, r4
 8006182:	4639      	mov	r1, r7
 8006184:	f7fa fc28 	bl	80009d8 <__aeabi_dcmpeq>
 8006188:	b918      	cbnz	r0, 8006192 <__cvt+0x86>
 800618a:	f1c5 0501 	rsb	r5, r5, #1
 800618e:	f8ca 5000 	str.w	r5, [sl]
 8006192:	f8da 3000 	ldr.w	r3, [sl]
 8006196:	4499      	add	r9, r3
 8006198:	2200      	movs	r2, #0
 800619a:	2300      	movs	r3, #0
 800619c:	4620      	mov	r0, r4
 800619e:	4639      	mov	r1, r7
 80061a0:	f7fa fc1a 	bl	80009d8 <__aeabi_dcmpeq>
 80061a4:	b108      	cbz	r0, 80061aa <__cvt+0x9e>
 80061a6:	f8cd 901c 	str.w	r9, [sp, #28]
 80061aa:	2230      	movs	r2, #48	; 0x30
 80061ac:	9b07      	ldr	r3, [sp, #28]
 80061ae:	454b      	cmp	r3, r9
 80061b0:	d307      	bcc.n	80061c2 <__cvt+0xb6>
 80061b2:	4630      	mov	r0, r6
 80061b4:	9b07      	ldr	r3, [sp, #28]
 80061b6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80061b8:	1b9b      	subs	r3, r3, r6
 80061ba:	6013      	str	r3, [r2, #0]
 80061bc:	b008      	add	sp, #32
 80061be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061c2:	1c59      	adds	r1, r3, #1
 80061c4:	9107      	str	r1, [sp, #28]
 80061c6:	701a      	strb	r2, [r3, #0]
 80061c8:	e7f0      	b.n	80061ac <__cvt+0xa0>

080061ca <__exponent>:
 80061ca:	4603      	mov	r3, r0
 80061cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80061ce:	2900      	cmp	r1, #0
 80061d0:	f803 2b02 	strb.w	r2, [r3], #2
 80061d4:	bfb6      	itet	lt
 80061d6:	222d      	movlt	r2, #45	; 0x2d
 80061d8:	222b      	movge	r2, #43	; 0x2b
 80061da:	4249      	neglt	r1, r1
 80061dc:	2909      	cmp	r1, #9
 80061de:	7042      	strb	r2, [r0, #1]
 80061e0:	dd2b      	ble.n	800623a <__exponent+0x70>
 80061e2:	f10d 0407 	add.w	r4, sp, #7
 80061e6:	46a4      	mov	ip, r4
 80061e8:	270a      	movs	r7, #10
 80061ea:	fb91 f6f7 	sdiv	r6, r1, r7
 80061ee:	460a      	mov	r2, r1
 80061f0:	46a6      	mov	lr, r4
 80061f2:	fb07 1516 	mls	r5, r7, r6, r1
 80061f6:	2a63      	cmp	r2, #99	; 0x63
 80061f8:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80061fc:	4631      	mov	r1, r6
 80061fe:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8006202:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006206:	dcf0      	bgt.n	80061ea <__exponent+0x20>
 8006208:	3130      	adds	r1, #48	; 0x30
 800620a:	f1ae 0502 	sub.w	r5, lr, #2
 800620e:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006212:	4629      	mov	r1, r5
 8006214:	1c44      	adds	r4, r0, #1
 8006216:	4561      	cmp	r1, ip
 8006218:	d30a      	bcc.n	8006230 <__exponent+0x66>
 800621a:	f10d 0209 	add.w	r2, sp, #9
 800621e:	eba2 020e 	sub.w	r2, r2, lr
 8006222:	4565      	cmp	r5, ip
 8006224:	bf88      	it	hi
 8006226:	2200      	movhi	r2, #0
 8006228:	4413      	add	r3, r2
 800622a:	1a18      	subs	r0, r3, r0
 800622c:	b003      	add	sp, #12
 800622e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006230:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006234:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006238:	e7ed      	b.n	8006216 <__exponent+0x4c>
 800623a:	2330      	movs	r3, #48	; 0x30
 800623c:	3130      	adds	r1, #48	; 0x30
 800623e:	7083      	strb	r3, [r0, #2]
 8006240:	70c1      	strb	r1, [r0, #3]
 8006242:	1d03      	adds	r3, r0, #4
 8006244:	e7f1      	b.n	800622a <__exponent+0x60>
	...

08006248 <_printf_float>:
 8006248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800624c:	b091      	sub	sp, #68	; 0x44
 800624e:	460c      	mov	r4, r1
 8006250:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8006254:	4616      	mov	r6, r2
 8006256:	461f      	mov	r7, r3
 8006258:	4605      	mov	r5, r0
 800625a:	f001 fd47 	bl	8007cec <_localeconv_r>
 800625e:	6803      	ldr	r3, [r0, #0]
 8006260:	4618      	mov	r0, r3
 8006262:	9309      	str	r3, [sp, #36]	; 0x24
 8006264:	f7f9 ff8c 	bl	8000180 <strlen>
 8006268:	2300      	movs	r3, #0
 800626a:	930e      	str	r3, [sp, #56]	; 0x38
 800626c:	f8d8 3000 	ldr.w	r3, [r8]
 8006270:	900a      	str	r0, [sp, #40]	; 0x28
 8006272:	3307      	adds	r3, #7
 8006274:	f023 0307 	bic.w	r3, r3, #7
 8006278:	f103 0208 	add.w	r2, r3, #8
 800627c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006280:	f8d4 b000 	ldr.w	fp, [r4]
 8006284:	f8c8 2000 	str.w	r2, [r8]
 8006288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800628c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006290:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8006294:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8006298:	930b      	str	r3, [sp, #44]	; 0x2c
 800629a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800629e:	4640      	mov	r0, r8
 80062a0:	4b9c      	ldr	r3, [pc, #624]	; (8006514 <_printf_float+0x2cc>)
 80062a2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80062a4:	f7fa fbca 	bl	8000a3c <__aeabi_dcmpun>
 80062a8:	bb70      	cbnz	r0, 8006308 <_printf_float+0xc0>
 80062aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80062ae:	4640      	mov	r0, r8
 80062b0:	4b98      	ldr	r3, [pc, #608]	; (8006514 <_printf_float+0x2cc>)
 80062b2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80062b4:	f7fa fba4 	bl	8000a00 <__aeabi_dcmple>
 80062b8:	bb30      	cbnz	r0, 8006308 <_printf_float+0xc0>
 80062ba:	2200      	movs	r2, #0
 80062bc:	2300      	movs	r3, #0
 80062be:	4640      	mov	r0, r8
 80062c0:	4651      	mov	r1, sl
 80062c2:	f7fa fb93 	bl	80009ec <__aeabi_dcmplt>
 80062c6:	b110      	cbz	r0, 80062ce <_printf_float+0x86>
 80062c8:	232d      	movs	r3, #45	; 0x2d
 80062ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062ce:	4b92      	ldr	r3, [pc, #584]	; (8006518 <_printf_float+0x2d0>)
 80062d0:	4892      	ldr	r0, [pc, #584]	; (800651c <_printf_float+0x2d4>)
 80062d2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80062d6:	bf94      	ite	ls
 80062d8:	4698      	movls	r8, r3
 80062da:	4680      	movhi	r8, r0
 80062dc:	2303      	movs	r3, #3
 80062de:	f04f 0a00 	mov.w	sl, #0
 80062e2:	6123      	str	r3, [r4, #16]
 80062e4:	f02b 0304 	bic.w	r3, fp, #4
 80062e8:	6023      	str	r3, [r4, #0]
 80062ea:	4633      	mov	r3, r6
 80062ec:	4621      	mov	r1, r4
 80062ee:	4628      	mov	r0, r5
 80062f0:	9700      	str	r7, [sp, #0]
 80062f2:	aa0f      	add	r2, sp, #60	; 0x3c
 80062f4:	f000 f9d4 	bl	80066a0 <_printf_common>
 80062f8:	3001      	adds	r0, #1
 80062fa:	f040 8090 	bne.w	800641e <_printf_float+0x1d6>
 80062fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006302:	b011      	add	sp, #68	; 0x44
 8006304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006308:	4642      	mov	r2, r8
 800630a:	4653      	mov	r3, sl
 800630c:	4640      	mov	r0, r8
 800630e:	4651      	mov	r1, sl
 8006310:	f7fa fb94 	bl	8000a3c <__aeabi_dcmpun>
 8006314:	b148      	cbz	r0, 800632a <_printf_float+0xe2>
 8006316:	f1ba 0f00 	cmp.w	sl, #0
 800631a:	bfb8      	it	lt
 800631c:	232d      	movlt	r3, #45	; 0x2d
 800631e:	4880      	ldr	r0, [pc, #512]	; (8006520 <_printf_float+0x2d8>)
 8006320:	bfb8      	it	lt
 8006322:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006326:	4b7f      	ldr	r3, [pc, #508]	; (8006524 <_printf_float+0x2dc>)
 8006328:	e7d3      	b.n	80062d2 <_printf_float+0x8a>
 800632a:	6863      	ldr	r3, [r4, #4]
 800632c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006330:	1c5a      	adds	r2, r3, #1
 8006332:	d142      	bne.n	80063ba <_printf_float+0x172>
 8006334:	2306      	movs	r3, #6
 8006336:	6063      	str	r3, [r4, #4]
 8006338:	2200      	movs	r2, #0
 800633a:	9206      	str	r2, [sp, #24]
 800633c:	aa0e      	add	r2, sp, #56	; 0x38
 800633e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8006342:	aa0d      	add	r2, sp, #52	; 0x34
 8006344:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8006348:	9203      	str	r2, [sp, #12]
 800634a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800634e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006352:	6023      	str	r3, [r4, #0]
 8006354:	6863      	ldr	r3, [r4, #4]
 8006356:	4642      	mov	r2, r8
 8006358:	9300      	str	r3, [sp, #0]
 800635a:	4628      	mov	r0, r5
 800635c:	4653      	mov	r3, sl
 800635e:	910b      	str	r1, [sp, #44]	; 0x2c
 8006360:	f7ff fed4 	bl	800610c <__cvt>
 8006364:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006366:	4680      	mov	r8, r0
 8006368:	2947      	cmp	r1, #71	; 0x47
 800636a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800636c:	d108      	bne.n	8006380 <_printf_float+0x138>
 800636e:	1cc8      	adds	r0, r1, #3
 8006370:	db02      	blt.n	8006378 <_printf_float+0x130>
 8006372:	6863      	ldr	r3, [r4, #4]
 8006374:	4299      	cmp	r1, r3
 8006376:	dd40      	ble.n	80063fa <_printf_float+0x1b2>
 8006378:	f1a9 0902 	sub.w	r9, r9, #2
 800637c:	fa5f f989 	uxtb.w	r9, r9
 8006380:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006384:	d81f      	bhi.n	80063c6 <_printf_float+0x17e>
 8006386:	464a      	mov	r2, r9
 8006388:	3901      	subs	r1, #1
 800638a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800638e:	910d      	str	r1, [sp, #52]	; 0x34
 8006390:	f7ff ff1b 	bl	80061ca <__exponent>
 8006394:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006396:	4682      	mov	sl, r0
 8006398:	1813      	adds	r3, r2, r0
 800639a:	2a01      	cmp	r2, #1
 800639c:	6123      	str	r3, [r4, #16]
 800639e:	dc02      	bgt.n	80063a6 <_printf_float+0x15e>
 80063a0:	6822      	ldr	r2, [r4, #0]
 80063a2:	07d2      	lsls	r2, r2, #31
 80063a4:	d501      	bpl.n	80063aa <_printf_float+0x162>
 80063a6:	3301      	adds	r3, #1
 80063a8:	6123      	str	r3, [r4, #16]
 80063aa:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d09b      	beq.n	80062ea <_printf_float+0xa2>
 80063b2:	232d      	movs	r3, #45	; 0x2d
 80063b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80063b8:	e797      	b.n	80062ea <_printf_float+0xa2>
 80063ba:	2947      	cmp	r1, #71	; 0x47
 80063bc:	d1bc      	bne.n	8006338 <_printf_float+0xf0>
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d1ba      	bne.n	8006338 <_printf_float+0xf0>
 80063c2:	2301      	movs	r3, #1
 80063c4:	e7b7      	b.n	8006336 <_printf_float+0xee>
 80063c6:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80063ca:	d118      	bne.n	80063fe <_printf_float+0x1b6>
 80063cc:	2900      	cmp	r1, #0
 80063ce:	6863      	ldr	r3, [r4, #4]
 80063d0:	dd0b      	ble.n	80063ea <_printf_float+0x1a2>
 80063d2:	6121      	str	r1, [r4, #16]
 80063d4:	b913      	cbnz	r3, 80063dc <_printf_float+0x194>
 80063d6:	6822      	ldr	r2, [r4, #0]
 80063d8:	07d0      	lsls	r0, r2, #31
 80063da:	d502      	bpl.n	80063e2 <_printf_float+0x19a>
 80063dc:	3301      	adds	r3, #1
 80063de:	440b      	add	r3, r1
 80063e0:	6123      	str	r3, [r4, #16]
 80063e2:	f04f 0a00 	mov.w	sl, #0
 80063e6:	65a1      	str	r1, [r4, #88]	; 0x58
 80063e8:	e7df      	b.n	80063aa <_printf_float+0x162>
 80063ea:	b913      	cbnz	r3, 80063f2 <_printf_float+0x1aa>
 80063ec:	6822      	ldr	r2, [r4, #0]
 80063ee:	07d2      	lsls	r2, r2, #31
 80063f0:	d501      	bpl.n	80063f6 <_printf_float+0x1ae>
 80063f2:	3302      	adds	r3, #2
 80063f4:	e7f4      	b.n	80063e0 <_printf_float+0x198>
 80063f6:	2301      	movs	r3, #1
 80063f8:	e7f2      	b.n	80063e0 <_printf_float+0x198>
 80063fa:	f04f 0967 	mov.w	r9, #103	; 0x67
 80063fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006400:	4299      	cmp	r1, r3
 8006402:	db05      	blt.n	8006410 <_printf_float+0x1c8>
 8006404:	6823      	ldr	r3, [r4, #0]
 8006406:	6121      	str	r1, [r4, #16]
 8006408:	07d8      	lsls	r0, r3, #31
 800640a:	d5ea      	bpl.n	80063e2 <_printf_float+0x19a>
 800640c:	1c4b      	adds	r3, r1, #1
 800640e:	e7e7      	b.n	80063e0 <_printf_float+0x198>
 8006410:	2900      	cmp	r1, #0
 8006412:	bfcc      	ite	gt
 8006414:	2201      	movgt	r2, #1
 8006416:	f1c1 0202 	rsble	r2, r1, #2
 800641a:	4413      	add	r3, r2
 800641c:	e7e0      	b.n	80063e0 <_printf_float+0x198>
 800641e:	6823      	ldr	r3, [r4, #0]
 8006420:	055a      	lsls	r2, r3, #21
 8006422:	d407      	bmi.n	8006434 <_printf_float+0x1ec>
 8006424:	6923      	ldr	r3, [r4, #16]
 8006426:	4642      	mov	r2, r8
 8006428:	4631      	mov	r1, r6
 800642a:	4628      	mov	r0, r5
 800642c:	47b8      	blx	r7
 800642e:	3001      	adds	r0, #1
 8006430:	d12b      	bne.n	800648a <_printf_float+0x242>
 8006432:	e764      	b.n	80062fe <_printf_float+0xb6>
 8006434:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006438:	f240 80dd 	bls.w	80065f6 <_printf_float+0x3ae>
 800643c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006440:	2200      	movs	r2, #0
 8006442:	2300      	movs	r3, #0
 8006444:	f7fa fac8 	bl	80009d8 <__aeabi_dcmpeq>
 8006448:	2800      	cmp	r0, #0
 800644a:	d033      	beq.n	80064b4 <_printf_float+0x26c>
 800644c:	2301      	movs	r3, #1
 800644e:	4631      	mov	r1, r6
 8006450:	4628      	mov	r0, r5
 8006452:	4a35      	ldr	r2, [pc, #212]	; (8006528 <_printf_float+0x2e0>)
 8006454:	47b8      	blx	r7
 8006456:	3001      	adds	r0, #1
 8006458:	f43f af51 	beq.w	80062fe <_printf_float+0xb6>
 800645c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006460:	429a      	cmp	r2, r3
 8006462:	db02      	blt.n	800646a <_printf_float+0x222>
 8006464:	6823      	ldr	r3, [r4, #0]
 8006466:	07d8      	lsls	r0, r3, #31
 8006468:	d50f      	bpl.n	800648a <_printf_float+0x242>
 800646a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800646e:	4631      	mov	r1, r6
 8006470:	4628      	mov	r0, r5
 8006472:	47b8      	blx	r7
 8006474:	3001      	adds	r0, #1
 8006476:	f43f af42 	beq.w	80062fe <_printf_float+0xb6>
 800647a:	f04f 0800 	mov.w	r8, #0
 800647e:	f104 091a 	add.w	r9, r4, #26
 8006482:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006484:	3b01      	subs	r3, #1
 8006486:	4543      	cmp	r3, r8
 8006488:	dc09      	bgt.n	800649e <_printf_float+0x256>
 800648a:	6823      	ldr	r3, [r4, #0]
 800648c:	079b      	lsls	r3, r3, #30
 800648e:	f100 8102 	bmi.w	8006696 <_printf_float+0x44e>
 8006492:	68e0      	ldr	r0, [r4, #12]
 8006494:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006496:	4298      	cmp	r0, r3
 8006498:	bfb8      	it	lt
 800649a:	4618      	movlt	r0, r3
 800649c:	e731      	b.n	8006302 <_printf_float+0xba>
 800649e:	2301      	movs	r3, #1
 80064a0:	464a      	mov	r2, r9
 80064a2:	4631      	mov	r1, r6
 80064a4:	4628      	mov	r0, r5
 80064a6:	47b8      	blx	r7
 80064a8:	3001      	adds	r0, #1
 80064aa:	f43f af28 	beq.w	80062fe <_printf_float+0xb6>
 80064ae:	f108 0801 	add.w	r8, r8, #1
 80064b2:	e7e6      	b.n	8006482 <_printf_float+0x23a>
 80064b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	dc38      	bgt.n	800652c <_printf_float+0x2e4>
 80064ba:	2301      	movs	r3, #1
 80064bc:	4631      	mov	r1, r6
 80064be:	4628      	mov	r0, r5
 80064c0:	4a19      	ldr	r2, [pc, #100]	; (8006528 <_printf_float+0x2e0>)
 80064c2:	47b8      	blx	r7
 80064c4:	3001      	adds	r0, #1
 80064c6:	f43f af1a 	beq.w	80062fe <_printf_float+0xb6>
 80064ca:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80064ce:	4313      	orrs	r3, r2
 80064d0:	d102      	bne.n	80064d8 <_printf_float+0x290>
 80064d2:	6823      	ldr	r3, [r4, #0]
 80064d4:	07d9      	lsls	r1, r3, #31
 80064d6:	d5d8      	bpl.n	800648a <_printf_float+0x242>
 80064d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80064dc:	4631      	mov	r1, r6
 80064de:	4628      	mov	r0, r5
 80064e0:	47b8      	blx	r7
 80064e2:	3001      	adds	r0, #1
 80064e4:	f43f af0b 	beq.w	80062fe <_printf_float+0xb6>
 80064e8:	f04f 0900 	mov.w	r9, #0
 80064ec:	f104 0a1a 	add.w	sl, r4, #26
 80064f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80064f2:	425b      	negs	r3, r3
 80064f4:	454b      	cmp	r3, r9
 80064f6:	dc01      	bgt.n	80064fc <_printf_float+0x2b4>
 80064f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80064fa:	e794      	b.n	8006426 <_printf_float+0x1de>
 80064fc:	2301      	movs	r3, #1
 80064fe:	4652      	mov	r2, sl
 8006500:	4631      	mov	r1, r6
 8006502:	4628      	mov	r0, r5
 8006504:	47b8      	blx	r7
 8006506:	3001      	adds	r0, #1
 8006508:	f43f aef9 	beq.w	80062fe <_printf_float+0xb6>
 800650c:	f109 0901 	add.w	r9, r9, #1
 8006510:	e7ee      	b.n	80064f0 <_printf_float+0x2a8>
 8006512:	bf00      	nop
 8006514:	7fefffff 	.word	0x7fefffff
 8006518:	08008d98 	.word	0x08008d98
 800651c:	08008d9c 	.word	0x08008d9c
 8006520:	08008da4 	.word	0x08008da4
 8006524:	08008da0 	.word	0x08008da0
 8006528:	08008da8 	.word	0x08008da8
 800652c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800652e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006530:	429a      	cmp	r2, r3
 8006532:	bfa8      	it	ge
 8006534:	461a      	movge	r2, r3
 8006536:	2a00      	cmp	r2, #0
 8006538:	4691      	mov	r9, r2
 800653a:	dc37      	bgt.n	80065ac <_printf_float+0x364>
 800653c:	f04f 0b00 	mov.w	fp, #0
 8006540:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006544:	f104 021a 	add.w	r2, r4, #26
 8006548:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800654c:	ebaa 0309 	sub.w	r3, sl, r9
 8006550:	455b      	cmp	r3, fp
 8006552:	dc33      	bgt.n	80065bc <_printf_float+0x374>
 8006554:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006558:	429a      	cmp	r2, r3
 800655a:	db3b      	blt.n	80065d4 <_printf_float+0x38c>
 800655c:	6823      	ldr	r3, [r4, #0]
 800655e:	07da      	lsls	r2, r3, #31
 8006560:	d438      	bmi.n	80065d4 <_printf_float+0x38c>
 8006562:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006564:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006566:	eba3 020a 	sub.w	r2, r3, sl
 800656a:	eba3 0901 	sub.w	r9, r3, r1
 800656e:	4591      	cmp	r9, r2
 8006570:	bfa8      	it	ge
 8006572:	4691      	movge	r9, r2
 8006574:	f1b9 0f00 	cmp.w	r9, #0
 8006578:	dc34      	bgt.n	80065e4 <_printf_float+0x39c>
 800657a:	f04f 0800 	mov.w	r8, #0
 800657e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006582:	f104 0a1a 	add.w	sl, r4, #26
 8006586:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800658a:	1a9b      	subs	r3, r3, r2
 800658c:	eba3 0309 	sub.w	r3, r3, r9
 8006590:	4543      	cmp	r3, r8
 8006592:	f77f af7a 	ble.w	800648a <_printf_float+0x242>
 8006596:	2301      	movs	r3, #1
 8006598:	4652      	mov	r2, sl
 800659a:	4631      	mov	r1, r6
 800659c:	4628      	mov	r0, r5
 800659e:	47b8      	blx	r7
 80065a0:	3001      	adds	r0, #1
 80065a2:	f43f aeac 	beq.w	80062fe <_printf_float+0xb6>
 80065a6:	f108 0801 	add.w	r8, r8, #1
 80065aa:	e7ec      	b.n	8006586 <_printf_float+0x33e>
 80065ac:	4613      	mov	r3, r2
 80065ae:	4631      	mov	r1, r6
 80065b0:	4642      	mov	r2, r8
 80065b2:	4628      	mov	r0, r5
 80065b4:	47b8      	blx	r7
 80065b6:	3001      	adds	r0, #1
 80065b8:	d1c0      	bne.n	800653c <_printf_float+0x2f4>
 80065ba:	e6a0      	b.n	80062fe <_printf_float+0xb6>
 80065bc:	2301      	movs	r3, #1
 80065be:	4631      	mov	r1, r6
 80065c0:	4628      	mov	r0, r5
 80065c2:	920b      	str	r2, [sp, #44]	; 0x2c
 80065c4:	47b8      	blx	r7
 80065c6:	3001      	adds	r0, #1
 80065c8:	f43f ae99 	beq.w	80062fe <_printf_float+0xb6>
 80065cc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80065ce:	f10b 0b01 	add.w	fp, fp, #1
 80065d2:	e7b9      	b.n	8006548 <_printf_float+0x300>
 80065d4:	4631      	mov	r1, r6
 80065d6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80065da:	4628      	mov	r0, r5
 80065dc:	47b8      	blx	r7
 80065de:	3001      	adds	r0, #1
 80065e0:	d1bf      	bne.n	8006562 <_printf_float+0x31a>
 80065e2:	e68c      	b.n	80062fe <_printf_float+0xb6>
 80065e4:	464b      	mov	r3, r9
 80065e6:	4631      	mov	r1, r6
 80065e8:	4628      	mov	r0, r5
 80065ea:	eb08 020a 	add.w	r2, r8, sl
 80065ee:	47b8      	blx	r7
 80065f0:	3001      	adds	r0, #1
 80065f2:	d1c2      	bne.n	800657a <_printf_float+0x332>
 80065f4:	e683      	b.n	80062fe <_printf_float+0xb6>
 80065f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80065f8:	2a01      	cmp	r2, #1
 80065fa:	dc01      	bgt.n	8006600 <_printf_float+0x3b8>
 80065fc:	07db      	lsls	r3, r3, #31
 80065fe:	d537      	bpl.n	8006670 <_printf_float+0x428>
 8006600:	2301      	movs	r3, #1
 8006602:	4642      	mov	r2, r8
 8006604:	4631      	mov	r1, r6
 8006606:	4628      	mov	r0, r5
 8006608:	47b8      	blx	r7
 800660a:	3001      	adds	r0, #1
 800660c:	f43f ae77 	beq.w	80062fe <_printf_float+0xb6>
 8006610:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006614:	4631      	mov	r1, r6
 8006616:	4628      	mov	r0, r5
 8006618:	47b8      	blx	r7
 800661a:	3001      	adds	r0, #1
 800661c:	f43f ae6f 	beq.w	80062fe <_printf_float+0xb6>
 8006620:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006624:	2200      	movs	r2, #0
 8006626:	2300      	movs	r3, #0
 8006628:	f7fa f9d6 	bl	80009d8 <__aeabi_dcmpeq>
 800662c:	b9d8      	cbnz	r0, 8006666 <_printf_float+0x41e>
 800662e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006630:	f108 0201 	add.w	r2, r8, #1
 8006634:	3b01      	subs	r3, #1
 8006636:	4631      	mov	r1, r6
 8006638:	4628      	mov	r0, r5
 800663a:	47b8      	blx	r7
 800663c:	3001      	adds	r0, #1
 800663e:	d10e      	bne.n	800665e <_printf_float+0x416>
 8006640:	e65d      	b.n	80062fe <_printf_float+0xb6>
 8006642:	2301      	movs	r3, #1
 8006644:	464a      	mov	r2, r9
 8006646:	4631      	mov	r1, r6
 8006648:	4628      	mov	r0, r5
 800664a:	47b8      	blx	r7
 800664c:	3001      	adds	r0, #1
 800664e:	f43f ae56 	beq.w	80062fe <_printf_float+0xb6>
 8006652:	f108 0801 	add.w	r8, r8, #1
 8006656:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006658:	3b01      	subs	r3, #1
 800665a:	4543      	cmp	r3, r8
 800665c:	dcf1      	bgt.n	8006642 <_printf_float+0x3fa>
 800665e:	4653      	mov	r3, sl
 8006660:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006664:	e6e0      	b.n	8006428 <_printf_float+0x1e0>
 8006666:	f04f 0800 	mov.w	r8, #0
 800666a:	f104 091a 	add.w	r9, r4, #26
 800666e:	e7f2      	b.n	8006656 <_printf_float+0x40e>
 8006670:	2301      	movs	r3, #1
 8006672:	4642      	mov	r2, r8
 8006674:	e7df      	b.n	8006636 <_printf_float+0x3ee>
 8006676:	2301      	movs	r3, #1
 8006678:	464a      	mov	r2, r9
 800667a:	4631      	mov	r1, r6
 800667c:	4628      	mov	r0, r5
 800667e:	47b8      	blx	r7
 8006680:	3001      	adds	r0, #1
 8006682:	f43f ae3c 	beq.w	80062fe <_printf_float+0xb6>
 8006686:	f108 0801 	add.w	r8, r8, #1
 800668a:	68e3      	ldr	r3, [r4, #12]
 800668c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800668e:	1a5b      	subs	r3, r3, r1
 8006690:	4543      	cmp	r3, r8
 8006692:	dcf0      	bgt.n	8006676 <_printf_float+0x42e>
 8006694:	e6fd      	b.n	8006492 <_printf_float+0x24a>
 8006696:	f04f 0800 	mov.w	r8, #0
 800669a:	f104 0919 	add.w	r9, r4, #25
 800669e:	e7f4      	b.n	800668a <_printf_float+0x442>

080066a0 <_printf_common>:
 80066a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066a4:	4616      	mov	r6, r2
 80066a6:	4699      	mov	r9, r3
 80066a8:	688a      	ldr	r2, [r1, #8]
 80066aa:	690b      	ldr	r3, [r1, #16]
 80066ac:	4607      	mov	r7, r0
 80066ae:	4293      	cmp	r3, r2
 80066b0:	bfb8      	it	lt
 80066b2:	4613      	movlt	r3, r2
 80066b4:	6033      	str	r3, [r6, #0]
 80066b6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80066ba:	460c      	mov	r4, r1
 80066bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80066c0:	b10a      	cbz	r2, 80066c6 <_printf_common+0x26>
 80066c2:	3301      	adds	r3, #1
 80066c4:	6033      	str	r3, [r6, #0]
 80066c6:	6823      	ldr	r3, [r4, #0]
 80066c8:	0699      	lsls	r1, r3, #26
 80066ca:	bf42      	ittt	mi
 80066cc:	6833      	ldrmi	r3, [r6, #0]
 80066ce:	3302      	addmi	r3, #2
 80066d0:	6033      	strmi	r3, [r6, #0]
 80066d2:	6825      	ldr	r5, [r4, #0]
 80066d4:	f015 0506 	ands.w	r5, r5, #6
 80066d8:	d106      	bne.n	80066e8 <_printf_common+0x48>
 80066da:	f104 0a19 	add.w	sl, r4, #25
 80066de:	68e3      	ldr	r3, [r4, #12]
 80066e0:	6832      	ldr	r2, [r6, #0]
 80066e2:	1a9b      	subs	r3, r3, r2
 80066e4:	42ab      	cmp	r3, r5
 80066e6:	dc28      	bgt.n	800673a <_printf_common+0x9a>
 80066e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80066ec:	1e13      	subs	r3, r2, #0
 80066ee:	6822      	ldr	r2, [r4, #0]
 80066f0:	bf18      	it	ne
 80066f2:	2301      	movne	r3, #1
 80066f4:	0692      	lsls	r2, r2, #26
 80066f6:	d42d      	bmi.n	8006754 <_printf_common+0xb4>
 80066f8:	4649      	mov	r1, r9
 80066fa:	4638      	mov	r0, r7
 80066fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006700:	47c0      	blx	r8
 8006702:	3001      	adds	r0, #1
 8006704:	d020      	beq.n	8006748 <_printf_common+0xa8>
 8006706:	6823      	ldr	r3, [r4, #0]
 8006708:	68e5      	ldr	r5, [r4, #12]
 800670a:	f003 0306 	and.w	r3, r3, #6
 800670e:	2b04      	cmp	r3, #4
 8006710:	bf18      	it	ne
 8006712:	2500      	movne	r5, #0
 8006714:	6832      	ldr	r2, [r6, #0]
 8006716:	f04f 0600 	mov.w	r6, #0
 800671a:	68a3      	ldr	r3, [r4, #8]
 800671c:	bf08      	it	eq
 800671e:	1aad      	subeq	r5, r5, r2
 8006720:	6922      	ldr	r2, [r4, #16]
 8006722:	bf08      	it	eq
 8006724:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006728:	4293      	cmp	r3, r2
 800672a:	bfc4      	itt	gt
 800672c:	1a9b      	subgt	r3, r3, r2
 800672e:	18ed      	addgt	r5, r5, r3
 8006730:	341a      	adds	r4, #26
 8006732:	42b5      	cmp	r5, r6
 8006734:	d11a      	bne.n	800676c <_printf_common+0xcc>
 8006736:	2000      	movs	r0, #0
 8006738:	e008      	b.n	800674c <_printf_common+0xac>
 800673a:	2301      	movs	r3, #1
 800673c:	4652      	mov	r2, sl
 800673e:	4649      	mov	r1, r9
 8006740:	4638      	mov	r0, r7
 8006742:	47c0      	blx	r8
 8006744:	3001      	adds	r0, #1
 8006746:	d103      	bne.n	8006750 <_printf_common+0xb0>
 8006748:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800674c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006750:	3501      	adds	r5, #1
 8006752:	e7c4      	b.n	80066de <_printf_common+0x3e>
 8006754:	2030      	movs	r0, #48	; 0x30
 8006756:	18e1      	adds	r1, r4, r3
 8006758:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800675c:	1c5a      	adds	r2, r3, #1
 800675e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006762:	4422      	add	r2, r4
 8006764:	3302      	adds	r3, #2
 8006766:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800676a:	e7c5      	b.n	80066f8 <_printf_common+0x58>
 800676c:	2301      	movs	r3, #1
 800676e:	4622      	mov	r2, r4
 8006770:	4649      	mov	r1, r9
 8006772:	4638      	mov	r0, r7
 8006774:	47c0      	blx	r8
 8006776:	3001      	adds	r0, #1
 8006778:	d0e6      	beq.n	8006748 <_printf_common+0xa8>
 800677a:	3601      	adds	r6, #1
 800677c:	e7d9      	b.n	8006732 <_printf_common+0x92>
	...

08006780 <_printf_i>:
 8006780:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006784:	7e0f      	ldrb	r7, [r1, #24]
 8006786:	4691      	mov	r9, r2
 8006788:	2f78      	cmp	r7, #120	; 0x78
 800678a:	4680      	mov	r8, r0
 800678c:	460c      	mov	r4, r1
 800678e:	469a      	mov	sl, r3
 8006790:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006792:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006796:	d807      	bhi.n	80067a8 <_printf_i+0x28>
 8006798:	2f62      	cmp	r7, #98	; 0x62
 800679a:	d80a      	bhi.n	80067b2 <_printf_i+0x32>
 800679c:	2f00      	cmp	r7, #0
 800679e:	f000 80d9 	beq.w	8006954 <_printf_i+0x1d4>
 80067a2:	2f58      	cmp	r7, #88	; 0x58
 80067a4:	f000 80a4 	beq.w	80068f0 <_printf_i+0x170>
 80067a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80067ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80067b0:	e03a      	b.n	8006828 <_printf_i+0xa8>
 80067b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80067b6:	2b15      	cmp	r3, #21
 80067b8:	d8f6      	bhi.n	80067a8 <_printf_i+0x28>
 80067ba:	a101      	add	r1, pc, #4	; (adr r1, 80067c0 <_printf_i+0x40>)
 80067bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80067c0:	08006819 	.word	0x08006819
 80067c4:	0800682d 	.word	0x0800682d
 80067c8:	080067a9 	.word	0x080067a9
 80067cc:	080067a9 	.word	0x080067a9
 80067d0:	080067a9 	.word	0x080067a9
 80067d4:	080067a9 	.word	0x080067a9
 80067d8:	0800682d 	.word	0x0800682d
 80067dc:	080067a9 	.word	0x080067a9
 80067e0:	080067a9 	.word	0x080067a9
 80067e4:	080067a9 	.word	0x080067a9
 80067e8:	080067a9 	.word	0x080067a9
 80067ec:	0800693b 	.word	0x0800693b
 80067f0:	0800685d 	.word	0x0800685d
 80067f4:	0800691d 	.word	0x0800691d
 80067f8:	080067a9 	.word	0x080067a9
 80067fc:	080067a9 	.word	0x080067a9
 8006800:	0800695d 	.word	0x0800695d
 8006804:	080067a9 	.word	0x080067a9
 8006808:	0800685d 	.word	0x0800685d
 800680c:	080067a9 	.word	0x080067a9
 8006810:	080067a9 	.word	0x080067a9
 8006814:	08006925 	.word	0x08006925
 8006818:	682b      	ldr	r3, [r5, #0]
 800681a:	1d1a      	adds	r2, r3, #4
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	602a      	str	r2, [r5, #0]
 8006820:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006824:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006828:	2301      	movs	r3, #1
 800682a:	e0a4      	b.n	8006976 <_printf_i+0x1f6>
 800682c:	6820      	ldr	r0, [r4, #0]
 800682e:	6829      	ldr	r1, [r5, #0]
 8006830:	0606      	lsls	r6, r0, #24
 8006832:	f101 0304 	add.w	r3, r1, #4
 8006836:	d50a      	bpl.n	800684e <_printf_i+0xce>
 8006838:	680e      	ldr	r6, [r1, #0]
 800683a:	602b      	str	r3, [r5, #0]
 800683c:	2e00      	cmp	r6, #0
 800683e:	da03      	bge.n	8006848 <_printf_i+0xc8>
 8006840:	232d      	movs	r3, #45	; 0x2d
 8006842:	4276      	negs	r6, r6
 8006844:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006848:	230a      	movs	r3, #10
 800684a:	485e      	ldr	r0, [pc, #376]	; (80069c4 <_printf_i+0x244>)
 800684c:	e019      	b.n	8006882 <_printf_i+0x102>
 800684e:	680e      	ldr	r6, [r1, #0]
 8006850:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006854:	602b      	str	r3, [r5, #0]
 8006856:	bf18      	it	ne
 8006858:	b236      	sxthne	r6, r6
 800685a:	e7ef      	b.n	800683c <_printf_i+0xbc>
 800685c:	682b      	ldr	r3, [r5, #0]
 800685e:	6820      	ldr	r0, [r4, #0]
 8006860:	1d19      	adds	r1, r3, #4
 8006862:	6029      	str	r1, [r5, #0]
 8006864:	0601      	lsls	r1, r0, #24
 8006866:	d501      	bpl.n	800686c <_printf_i+0xec>
 8006868:	681e      	ldr	r6, [r3, #0]
 800686a:	e002      	b.n	8006872 <_printf_i+0xf2>
 800686c:	0646      	lsls	r6, r0, #25
 800686e:	d5fb      	bpl.n	8006868 <_printf_i+0xe8>
 8006870:	881e      	ldrh	r6, [r3, #0]
 8006872:	2f6f      	cmp	r7, #111	; 0x6f
 8006874:	bf0c      	ite	eq
 8006876:	2308      	moveq	r3, #8
 8006878:	230a      	movne	r3, #10
 800687a:	4852      	ldr	r0, [pc, #328]	; (80069c4 <_printf_i+0x244>)
 800687c:	2100      	movs	r1, #0
 800687e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006882:	6865      	ldr	r5, [r4, #4]
 8006884:	2d00      	cmp	r5, #0
 8006886:	bfa8      	it	ge
 8006888:	6821      	ldrge	r1, [r4, #0]
 800688a:	60a5      	str	r5, [r4, #8]
 800688c:	bfa4      	itt	ge
 800688e:	f021 0104 	bicge.w	r1, r1, #4
 8006892:	6021      	strge	r1, [r4, #0]
 8006894:	b90e      	cbnz	r6, 800689a <_printf_i+0x11a>
 8006896:	2d00      	cmp	r5, #0
 8006898:	d04d      	beq.n	8006936 <_printf_i+0x1b6>
 800689a:	4615      	mov	r5, r2
 800689c:	fbb6 f1f3 	udiv	r1, r6, r3
 80068a0:	fb03 6711 	mls	r7, r3, r1, r6
 80068a4:	5dc7      	ldrb	r7, [r0, r7]
 80068a6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80068aa:	4637      	mov	r7, r6
 80068ac:	42bb      	cmp	r3, r7
 80068ae:	460e      	mov	r6, r1
 80068b0:	d9f4      	bls.n	800689c <_printf_i+0x11c>
 80068b2:	2b08      	cmp	r3, #8
 80068b4:	d10b      	bne.n	80068ce <_printf_i+0x14e>
 80068b6:	6823      	ldr	r3, [r4, #0]
 80068b8:	07de      	lsls	r6, r3, #31
 80068ba:	d508      	bpl.n	80068ce <_printf_i+0x14e>
 80068bc:	6923      	ldr	r3, [r4, #16]
 80068be:	6861      	ldr	r1, [r4, #4]
 80068c0:	4299      	cmp	r1, r3
 80068c2:	bfde      	ittt	le
 80068c4:	2330      	movle	r3, #48	; 0x30
 80068c6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80068ca:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80068ce:	1b52      	subs	r2, r2, r5
 80068d0:	6122      	str	r2, [r4, #16]
 80068d2:	464b      	mov	r3, r9
 80068d4:	4621      	mov	r1, r4
 80068d6:	4640      	mov	r0, r8
 80068d8:	f8cd a000 	str.w	sl, [sp]
 80068dc:	aa03      	add	r2, sp, #12
 80068de:	f7ff fedf 	bl	80066a0 <_printf_common>
 80068e2:	3001      	adds	r0, #1
 80068e4:	d14c      	bne.n	8006980 <_printf_i+0x200>
 80068e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80068ea:	b004      	add	sp, #16
 80068ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068f0:	4834      	ldr	r0, [pc, #208]	; (80069c4 <_printf_i+0x244>)
 80068f2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80068f6:	6829      	ldr	r1, [r5, #0]
 80068f8:	6823      	ldr	r3, [r4, #0]
 80068fa:	f851 6b04 	ldr.w	r6, [r1], #4
 80068fe:	6029      	str	r1, [r5, #0]
 8006900:	061d      	lsls	r5, r3, #24
 8006902:	d514      	bpl.n	800692e <_printf_i+0x1ae>
 8006904:	07df      	lsls	r7, r3, #31
 8006906:	bf44      	itt	mi
 8006908:	f043 0320 	orrmi.w	r3, r3, #32
 800690c:	6023      	strmi	r3, [r4, #0]
 800690e:	b91e      	cbnz	r6, 8006918 <_printf_i+0x198>
 8006910:	6823      	ldr	r3, [r4, #0]
 8006912:	f023 0320 	bic.w	r3, r3, #32
 8006916:	6023      	str	r3, [r4, #0]
 8006918:	2310      	movs	r3, #16
 800691a:	e7af      	b.n	800687c <_printf_i+0xfc>
 800691c:	6823      	ldr	r3, [r4, #0]
 800691e:	f043 0320 	orr.w	r3, r3, #32
 8006922:	6023      	str	r3, [r4, #0]
 8006924:	2378      	movs	r3, #120	; 0x78
 8006926:	4828      	ldr	r0, [pc, #160]	; (80069c8 <_printf_i+0x248>)
 8006928:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800692c:	e7e3      	b.n	80068f6 <_printf_i+0x176>
 800692e:	0659      	lsls	r1, r3, #25
 8006930:	bf48      	it	mi
 8006932:	b2b6      	uxthmi	r6, r6
 8006934:	e7e6      	b.n	8006904 <_printf_i+0x184>
 8006936:	4615      	mov	r5, r2
 8006938:	e7bb      	b.n	80068b2 <_printf_i+0x132>
 800693a:	682b      	ldr	r3, [r5, #0]
 800693c:	6826      	ldr	r6, [r4, #0]
 800693e:	1d18      	adds	r0, r3, #4
 8006940:	6961      	ldr	r1, [r4, #20]
 8006942:	6028      	str	r0, [r5, #0]
 8006944:	0635      	lsls	r5, r6, #24
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	d501      	bpl.n	800694e <_printf_i+0x1ce>
 800694a:	6019      	str	r1, [r3, #0]
 800694c:	e002      	b.n	8006954 <_printf_i+0x1d4>
 800694e:	0670      	lsls	r0, r6, #25
 8006950:	d5fb      	bpl.n	800694a <_printf_i+0x1ca>
 8006952:	8019      	strh	r1, [r3, #0]
 8006954:	2300      	movs	r3, #0
 8006956:	4615      	mov	r5, r2
 8006958:	6123      	str	r3, [r4, #16]
 800695a:	e7ba      	b.n	80068d2 <_printf_i+0x152>
 800695c:	682b      	ldr	r3, [r5, #0]
 800695e:	2100      	movs	r1, #0
 8006960:	1d1a      	adds	r2, r3, #4
 8006962:	602a      	str	r2, [r5, #0]
 8006964:	681d      	ldr	r5, [r3, #0]
 8006966:	6862      	ldr	r2, [r4, #4]
 8006968:	4628      	mov	r0, r5
 800696a:	f001 fa33 	bl	8007dd4 <memchr>
 800696e:	b108      	cbz	r0, 8006974 <_printf_i+0x1f4>
 8006970:	1b40      	subs	r0, r0, r5
 8006972:	6060      	str	r0, [r4, #4]
 8006974:	6863      	ldr	r3, [r4, #4]
 8006976:	6123      	str	r3, [r4, #16]
 8006978:	2300      	movs	r3, #0
 800697a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800697e:	e7a8      	b.n	80068d2 <_printf_i+0x152>
 8006980:	462a      	mov	r2, r5
 8006982:	4649      	mov	r1, r9
 8006984:	4640      	mov	r0, r8
 8006986:	6923      	ldr	r3, [r4, #16]
 8006988:	47d0      	blx	sl
 800698a:	3001      	adds	r0, #1
 800698c:	d0ab      	beq.n	80068e6 <_printf_i+0x166>
 800698e:	6823      	ldr	r3, [r4, #0]
 8006990:	079b      	lsls	r3, r3, #30
 8006992:	d413      	bmi.n	80069bc <_printf_i+0x23c>
 8006994:	68e0      	ldr	r0, [r4, #12]
 8006996:	9b03      	ldr	r3, [sp, #12]
 8006998:	4298      	cmp	r0, r3
 800699a:	bfb8      	it	lt
 800699c:	4618      	movlt	r0, r3
 800699e:	e7a4      	b.n	80068ea <_printf_i+0x16a>
 80069a0:	2301      	movs	r3, #1
 80069a2:	4632      	mov	r2, r6
 80069a4:	4649      	mov	r1, r9
 80069a6:	4640      	mov	r0, r8
 80069a8:	47d0      	blx	sl
 80069aa:	3001      	adds	r0, #1
 80069ac:	d09b      	beq.n	80068e6 <_printf_i+0x166>
 80069ae:	3501      	adds	r5, #1
 80069b0:	68e3      	ldr	r3, [r4, #12]
 80069b2:	9903      	ldr	r1, [sp, #12]
 80069b4:	1a5b      	subs	r3, r3, r1
 80069b6:	42ab      	cmp	r3, r5
 80069b8:	dcf2      	bgt.n	80069a0 <_printf_i+0x220>
 80069ba:	e7eb      	b.n	8006994 <_printf_i+0x214>
 80069bc:	2500      	movs	r5, #0
 80069be:	f104 0619 	add.w	r6, r4, #25
 80069c2:	e7f5      	b.n	80069b0 <_printf_i+0x230>
 80069c4:	08008daa 	.word	0x08008daa
 80069c8:	08008dbb 	.word	0x08008dbb

080069cc <iprintf>:
 80069cc:	b40f      	push	{r0, r1, r2, r3}
 80069ce:	4b0a      	ldr	r3, [pc, #40]	; (80069f8 <iprintf+0x2c>)
 80069d0:	b513      	push	{r0, r1, r4, lr}
 80069d2:	681c      	ldr	r4, [r3, #0]
 80069d4:	b124      	cbz	r4, 80069e0 <iprintf+0x14>
 80069d6:	69a3      	ldr	r3, [r4, #24]
 80069d8:	b913      	cbnz	r3, 80069e0 <iprintf+0x14>
 80069da:	4620      	mov	r0, r4
 80069dc:	f001 f8e8 	bl	8007bb0 <__sinit>
 80069e0:	ab05      	add	r3, sp, #20
 80069e2:	4620      	mov	r0, r4
 80069e4:	9a04      	ldr	r2, [sp, #16]
 80069e6:	68a1      	ldr	r1, [r4, #8]
 80069e8:	9301      	str	r3, [sp, #4]
 80069ea:	f001 fea9 	bl	8008740 <_vfiprintf_r>
 80069ee:	b002      	add	sp, #8
 80069f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069f4:	b004      	add	sp, #16
 80069f6:	4770      	bx	lr
 80069f8:	2000000c 	.word	0x2000000c

080069fc <putchar>:
 80069fc:	b538      	push	{r3, r4, r5, lr}
 80069fe:	4b08      	ldr	r3, [pc, #32]	; (8006a20 <putchar+0x24>)
 8006a00:	4605      	mov	r5, r0
 8006a02:	681c      	ldr	r4, [r3, #0]
 8006a04:	b124      	cbz	r4, 8006a10 <putchar+0x14>
 8006a06:	69a3      	ldr	r3, [r4, #24]
 8006a08:	b913      	cbnz	r3, 8006a10 <putchar+0x14>
 8006a0a:	4620      	mov	r0, r4
 8006a0c:	f001 f8d0 	bl	8007bb0 <__sinit>
 8006a10:	4629      	mov	r1, r5
 8006a12:	4620      	mov	r0, r4
 8006a14:	68a2      	ldr	r2, [r4, #8]
 8006a16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a1a:	f001 bfc1 	b.w	80089a0 <_putc_r>
 8006a1e:	bf00      	nop
 8006a20:	2000000c 	.word	0x2000000c

08006a24 <_puts_r>:
 8006a24:	b570      	push	{r4, r5, r6, lr}
 8006a26:	460e      	mov	r6, r1
 8006a28:	4605      	mov	r5, r0
 8006a2a:	b118      	cbz	r0, 8006a34 <_puts_r+0x10>
 8006a2c:	6983      	ldr	r3, [r0, #24]
 8006a2e:	b90b      	cbnz	r3, 8006a34 <_puts_r+0x10>
 8006a30:	f001 f8be 	bl	8007bb0 <__sinit>
 8006a34:	69ab      	ldr	r3, [r5, #24]
 8006a36:	68ac      	ldr	r4, [r5, #8]
 8006a38:	b913      	cbnz	r3, 8006a40 <_puts_r+0x1c>
 8006a3a:	4628      	mov	r0, r5
 8006a3c:	f001 f8b8 	bl	8007bb0 <__sinit>
 8006a40:	4b2c      	ldr	r3, [pc, #176]	; (8006af4 <_puts_r+0xd0>)
 8006a42:	429c      	cmp	r4, r3
 8006a44:	d120      	bne.n	8006a88 <_puts_r+0x64>
 8006a46:	686c      	ldr	r4, [r5, #4]
 8006a48:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006a4a:	07db      	lsls	r3, r3, #31
 8006a4c:	d405      	bmi.n	8006a5a <_puts_r+0x36>
 8006a4e:	89a3      	ldrh	r3, [r4, #12]
 8006a50:	0598      	lsls	r0, r3, #22
 8006a52:	d402      	bmi.n	8006a5a <_puts_r+0x36>
 8006a54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a56:	f001 f94e 	bl	8007cf6 <__retarget_lock_acquire_recursive>
 8006a5a:	89a3      	ldrh	r3, [r4, #12]
 8006a5c:	0719      	lsls	r1, r3, #28
 8006a5e:	d51d      	bpl.n	8006a9c <_puts_r+0x78>
 8006a60:	6923      	ldr	r3, [r4, #16]
 8006a62:	b1db      	cbz	r3, 8006a9c <_puts_r+0x78>
 8006a64:	3e01      	subs	r6, #1
 8006a66:	68a3      	ldr	r3, [r4, #8]
 8006a68:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006a6c:	3b01      	subs	r3, #1
 8006a6e:	60a3      	str	r3, [r4, #8]
 8006a70:	bb39      	cbnz	r1, 8006ac2 <_puts_r+0x9e>
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	da38      	bge.n	8006ae8 <_puts_r+0xc4>
 8006a76:	4622      	mov	r2, r4
 8006a78:	210a      	movs	r1, #10
 8006a7a:	4628      	mov	r0, r5
 8006a7c:	f000 f848 	bl	8006b10 <__swbuf_r>
 8006a80:	3001      	adds	r0, #1
 8006a82:	d011      	beq.n	8006aa8 <_puts_r+0x84>
 8006a84:	250a      	movs	r5, #10
 8006a86:	e011      	b.n	8006aac <_puts_r+0x88>
 8006a88:	4b1b      	ldr	r3, [pc, #108]	; (8006af8 <_puts_r+0xd4>)
 8006a8a:	429c      	cmp	r4, r3
 8006a8c:	d101      	bne.n	8006a92 <_puts_r+0x6e>
 8006a8e:	68ac      	ldr	r4, [r5, #8]
 8006a90:	e7da      	b.n	8006a48 <_puts_r+0x24>
 8006a92:	4b1a      	ldr	r3, [pc, #104]	; (8006afc <_puts_r+0xd8>)
 8006a94:	429c      	cmp	r4, r3
 8006a96:	bf08      	it	eq
 8006a98:	68ec      	ldreq	r4, [r5, #12]
 8006a9a:	e7d5      	b.n	8006a48 <_puts_r+0x24>
 8006a9c:	4621      	mov	r1, r4
 8006a9e:	4628      	mov	r0, r5
 8006aa0:	f000 f888 	bl	8006bb4 <__swsetup_r>
 8006aa4:	2800      	cmp	r0, #0
 8006aa6:	d0dd      	beq.n	8006a64 <_puts_r+0x40>
 8006aa8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8006aac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006aae:	07da      	lsls	r2, r3, #31
 8006ab0:	d405      	bmi.n	8006abe <_puts_r+0x9a>
 8006ab2:	89a3      	ldrh	r3, [r4, #12]
 8006ab4:	059b      	lsls	r3, r3, #22
 8006ab6:	d402      	bmi.n	8006abe <_puts_r+0x9a>
 8006ab8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006aba:	f001 f91d 	bl	8007cf8 <__retarget_lock_release_recursive>
 8006abe:	4628      	mov	r0, r5
 8006ac0:	bd70      	pop	{r4, r5, r6, pc}
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	da04      	bge.n	8006ad0 <_puts_r+0xac>
 8006ac6:	69a2      	ldr	r2, [r4, #24]
 8006ac8:	429a      	cmp	r2, r3
 8006aca:	dc06      	bgt.n	8006ada <_puts_r+0xb6>
 8006acc:	290a      	cmp	r1, #10
 8006ace:	d004      	beq.n	8006ada <_puts_r+0xb6>
 8006ad0:	6823      	ldr	r3, [r4, #0]
 8006ad2:	1c5a      	adds	r2, r3, #1
 8006ad4:	6022      	str	r2, [r4, #0]
 8006ad6:	7019      	strb	r1, [r3, #0]
 8006ad8:	e7c5      	b.n	8006a66 <_puts_r+0x42>
 8006ada:	4622      	mov	r2, r4
 8006adc:	4628      	mov	r0, r5
 8006ade:	f000 f817 	bl	8006b10 <__swbuf_r>
 8006ae2:	3001      	adds	r0, #1
 8006ae4:	d1bf      	bne.n	8006a66 <_puts_r+0x42>
 8006ae6:	e7df      	b.n	8006aa8 <_puts_r+0x84>
 8006ae8:	250a      	movs	r5, #10
 8006aea:	6823      	ldr	r3, [r4, #0]
 8006aec:	1c5a      	adds	r2, r3, #1
 8006aee:	6022      	str	r2, [r4, #0]
 8006af0:	701d      	strb	r5, [r3, #0]
 8006af2:	e7db      	b.n	8006aac <_puts_r+0x88>
 8006af4:	08008e7c 	.word	0x08008e7c
 8006af8:	08008e9c 	.word	0x08008e9c
 8006afc:	08008e5c 	.word	0x08008e5c

08006b00 <puts>:
 8006b00:	4b02      	ldr	r3, [pc, #8]	; (8006b0c <puts+0xc>)
 8006b02:	4601      	mov	r1, r0
 8006b04:	6818      	ldr	r0, [r3, #0]
 8006b06:	f7ff bf8d 	b.w	8006a24 <_puts_r>
 8006b0a:	bf00      	nop
 8006b0c:	2000000c 	.word	0x2000000c

08006b10 <__swbuf_r>:
 8006b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b12:	460e      	mov	r6, r1
 8006b14:	4614      	mov	r4, r2
 8006b16:	4605      	mov	r5, r0
 8006b18:	b118      	cbz	r0, 8006b22 <__swbuf_r+0x12>
 8006b1a:	6983      	ldr	r3, [r0, #24]
 8006b1c:	b90b      	cbnz	r3, 8006b22 <__swbuf_r+0x12>
 8006b1e:	f001 f847 	bl	8007bb0 <__sinit>
 8006b22:	4b21      	ldr	r3, [pc, #132]	; (8006ba8 <__swbuf_r+0x98>)
 8006b24:	429c      	cmp	r4, r3
 8006b26:	d12b      	bne.n	8006b80 <__swbuf_r+0x70>
 8006b28:	686c      	ldr	r4, [r5, #4]
 8006b2a:	69a3      	ldr	r3, [r4, #24]
 8006b2c:	60a3      	str	r3, [r4, #8]
 8006b2e:	89a3      	ldrh	r3, [r4, #12]
 8006b30:	071a      	lsls	r2, r3, #28
 8006b32:	d52f      	bpl.n	8006b94 <__swbuf_r+0x84>
 8006b34:	6923      	ldr	r3, [r4, #16]
 8006b36:	b36b      	cbz	r3, 8006b94 <__swbuf_r+0x84>
 8006b38:	6923      	ldr	r3, [r4, #16]
 8006b3a:	6820      	ldr	r0, [r4, #0]
 8006b3c:	b2f6      	uxtb	r6, r6
 8006b3e:	1ac0      	subs	r0, r0, r3
 8006b40:	6963      	ldr	r3, [r4, #20]
 8006b42:	4637      	mov	r7, r6
 8006b44:	4283      	cmp	r3, r0
 8006b46:	dc04      	bgt.n	8006b52 <__swbuf_r+0x42>
 8006b48:	4621      	mov	r1, r4
 8006b4a:	4628      	mov	r0, r5
 8006b4c:	f000 ff9c 	bl	8007a88 <_fflush_r>
 8006b50:	bb30      	cbnz	r0, 8006ba0 <__swbuf_r+0x90>
 8006b52:	68a3      	ldr	r3, [r4, #8]
 8006b54:	3001      	adds	r0, #1
 8006b56:	3b01      	subs	r3, #1
 8006b58:	60a3      	str	r3, [r4, #8]
 8006b5a:	6823      	ldr	r3, [r4, #0]
 8006b5c:	1c5a      	adds	r2, r3, #1
 8006b5e:	6022      	str	r2, [r4, #0]
 8006b60:	701e      	strb	r6, [r3, #0]
 8006b62:	6963      	ldr	r3, [r4, #20]
 8006b64:	4283      	cmp	r3, r0
 8006b66:	d004      	beq.n	8006b72 <__swbuf_r+0x62>
 8006b68:	89a3      	ldrh	r3, [r4, #12]
 8006b6a:	07db      	lsls	r3, r3, #31
 8006b6c:	d506      	bpl.n	8006b7c <__swbuf_r+0x6c>
 8006b6e:	2e0a      	cmp	r6, #10
 8006b70:	d104      	bne.n	8006b7c <__swbuf_r+0x6c>
 8006b72:	4621      	mov	r1, r4
 8006b74:	4628      	mov	r0, r5
 8006b76:	f000 ff87 	bl	8007a88 <_fflush_r>
 8006b7a:	b988      	cbnz	r0, 8006ba0 <__swbuf_r+0x90>
 8006b7c:	4638      	mov	r0, r7
 8006b7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b80:	4b0a      	ldr	r3, [pc, #40]	; (8006bac <__swbuf_r+0x9c>)
 8006b82:	429c      	cmp	r4, r3
 8006b84:	d101      	bne.n	8006b8a <__swbuf_r+0x7a>
 8006b86:	68ac      	ldr	r4, [r5, #8]
 8006b88:	e7cf      	b.n	8006b2a <__swbuf_r+0x1a>
 8006b8a:	4b09      	ldr	r3, [pc, #36]	; (8006bb0 <__swbuf_r+0xa0>)
 8006b8c:	429c      	cmp	r4, r3
 8006b8e:	bf08      	it	eq
 8006b90:	68ec      	ldreq	r4, [r5, #12]
 8006b92:	e7ca      	b.n	8006b2a <__swbuf_r+0x1a>
 8006b94:	4621      	mov	r1, r4
 8006b96:	4628      	mov	r0, r5
 8006b98:	f000 f80c 	bl	8006bb4 <__swsetup_r>
 8006b9c:	2800      	cmp	r0, #0
 8006b9e:	d0cb      	beq.n	8006b38 <__swbuf_r+0x28>
 8006ba0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006ba4:	e7ea      	b.n	8006b7c <__swbuf_r+0x6c>
 8006ba6:	bf00      	nop
 8006ba8:	08008e7c 	.word	0x08008e7c
 8006bac:	08008e9c 	.word	0x08008e9c
 8006bb0:	08008e5c 	.word	0x08008e5c

08006bb4 <__swsetup_r>:
 8006bb4:	4b32      	ldr	r3, [pc, #200]	; (8006c80 <__swsetup_r+0xcc>)
 8006bb6:	b570      	push	{r4, r5, r6, lr}
 8006bb8:	681d      	ldr	r5, [r3, #0]
 8006bba:	4606      	mov	r6, r0
 8006bbc:	460c      	mov	r4, r1
 8006bbe:	b125      	cbz	r5, 8006bca <__swsetup_r+0x16>
 8006bc0:	69ab      	ldr	r3, [r5, #24]
 8006bc2:	b913      	cbnz	r3, 8006bca <__swsetup_r+0x16>
 8006bc4:	4628      	mov	r0, r5
 8006bc6:	f000 fff3 	bl	8007bb0 <__sinit>
 8006bca:	4b2e      	ldr	r3, [pc, #184]	; (8006c84 <__swsetup_r+0xd0>)
 8006bcc:	429c      	cmp	r4, r3
 8006bce:	d10f      	bne.n	8006bf0 <__swsetup_r+0x3c>
 8006bd0:	686c      	ldr	r4, [r5, #4]
 8006bd2:	89a3      	ldrh	r3, [r4, #12]
 8006bd4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006bd8:	0719      	lsls	r1, r3, #28
 8006bda:	d42c      	bmi.n	8006c36 <__swsetup_r+0x82>
 8006bdc:	06dd      	lsls	r5, r3, #27
 8006bde:	d411      	bmi.n	8006c04 <__swsetup_r+0x50>
 8006be0:	2309      	movs	r3, #9
 8006be2:	6033      	str	r3, [r6, #0]
 8006be4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006be8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006bec:	81a3      	strh	r3, [r4, #12]
 8006bee:	e03e      	b.n	8006c6e <__swsetup_r+0xba>
 8006bf0:	4b25      	ldr	r3, [pc, #148]	; (8006c88 <__swsetup_r+0xd4>)
 8006bf2:	429c      	cmp	r4, r3
 8006bf4:	d101      	bne.n	8006bfa <__swsetup_r+0x46>
 8006bf6:	68ac      	ldr	r4, [r5, #8]
 8006bf8:	e7eb      	b.n	8006bd2 <__swsetup_r+0x1e>
 8006bfa:	4b24      	ldr	r3, [pc, #144]	; (8006c8c <__swsetup_r+0xd8>)
 8006bfc:	429c      	cmp	r4, r3
 8006bfe:	bf08      	it	eq
 8006c00:	68ec      	ldreq	r4, [r5, #12]
 8006c02:	e7e6      	b.n	8006bd2 <__swsetup_r+0x1e>
 8006c04:	0758      	lsls	r0, r3, #29
 8006c06:	d512      	bpl.n	8006c2e <__swsetup_r+0x7a>
 8006c08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006c0a:	b141      	cbz	r1, 8006c1e <__swsetup_r+0x6a>
 8006c0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006c10:	4299      	cmp	r1, r3
 8006c12:	d002      	beq.n	8006c1a <__swsetup_r+0x66>
 8006c14:	4630      	mov	r0, r6
 8006c16:	f001 fc8f 	bl	8008538 <_free_r>
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	6363      	str	r3, [r4, #52]	; 0x34
 8006c1e:	89a3      	ldrh	r3, [r4, #12]
 8006c20:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006c24:	81a3      	strh	r3, [r4, #12]
 8006c26:	2300      	movs	r3, #0
 8006c28:	6063      	str	r3, [r4, #4]
 8006c2a:	6923      	ldr	r3, [r4, #16]
 8006c2c:	6023      	str	r3, [r4, #0]
 8006c2e:	89a3      	ldrh	r3, [r4, #12]
 8006c30:	f043 0308 	orr.w	r3, r3, #8
 8006c34:	81a3      	strh	r3, [r4, #12]
 8006c36:	6923      	ldr	r3, [r4, #16]
 8006c38:	b94b      	cbnz	r3, 8006c4e <__swsetup_r+0x9a>
 8006c3a:	89a3      	ldrh	r3, [r4, #12]
 8006c3c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006c40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c44:	d003      	beq.n	8006c4e <__swsetup_r+0x9a>
 8006c46:	4621      	mov	r1, r4
 8006c48:	4630      	mov	r0, r6
 8006c4a:	f001 f87b 	bl	8007d44 <__smakebuf_r>
 8006c4e:	89a0      	ldrh	r0, [r4, #12]
 8006c50:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006c54:	f010 0301 	ands.w	r3, r0, #1
 8006c58:	d00a      	beq.n	8006c70 <__swsetup_r+0xbc>
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	60a3      	str	r3, [r4, #8]
 8006c5e:	6963      	ldr	r3, [r4, #20]
 8006c60:	425b      	negs	r3, r3
 8006c62:	61a3      	str	r3, [r4, #24]
 8006c64:	6923      	ldr	r3, [r4, #16]
 8006c66:	b943      	cbnz	r3, 8006c7a <__swsetup_r+0xc6>
 8006c68:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006c6c:	d1ba      	bne.n	8006be4 <__swsetup_r+0x30>
 8006c6e:	bd70      	pop	{r4, r5, r6, pc}
 8006c70:	0781      	lsls	r1, r0, #30
 8006c72:	bf58      	it	pl
 8006c74:	6963      	ldrpl	r3, [r4, #20]
 8006c76:	60a3      	str	r3, [r4, #8]
 8006c78:	e7f4      	b.n	8006c64 <__swsetup_r+0xb0>
 8006c7a:	2000      	movs	r0, #0
 8006c7c:	e7f7      	b.n	8006c6e <__swsetup_r+0xba>
 8006c7e:	bf00      	nop
 8006c80:	2000000c 	.word	0x2000000c
 8006c84:	08008e7c 	.word	0x08008e7c
 8006c88:	08008e9c 	.word	0x08008e9c
 8006c8c:	08008e5c 	.word	0x08008e5c

08006c90 <quorem>:
 8006c90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c94:	6903      	ldr	r3, [r0, #16]
 8006c96:	690c      	ldr	r4, [r1, #16]
 8006c98:	4607      	mov	r7, r0
 8006c9a:	42a3      	cmp	r3, r4
 8006c9c:	f2c0 8082 	blt.w	8006da4 <quorem+0x114>
 8006ca0:	3c01      	subs	r4, #1
 8006ca2:	f100 0514 	add.w	r5, r0, #20
 8006ca6:	f101 0814 	add.w	r8, r1, #20
 8006caa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006cae:	9301      	str	r3, [sp, #4]
 8006cb0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006cb4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006cb8:	3301      	adds	r3, #1
 8006cba:	429a      	cmp	r2, r3
 8006cbc:	fbb2 f6f3 	udiv	r6, r2, r3
 8006cc0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006cc4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006cc8:	d331      	bcc.n	8006d2e <quorem+0x9e>
 8006cca:	f04f 0e00 	mov.w	lr, #0
 8006cce:	4640      	mov	r0, r8
 8006cd0:	46ac      	mov	ip, r5
 8006cd2:	46f2      	mov	sl, lr
 8006cd4:	f850 2b04 	ldr.w	r2, [r0], #4
 8006cd8:	b293      	uxth	r3, r2
 8006cda:	fb06 e303 	mla	r3, r6, r3, lr
 8006cde:	0c12      	lsrs	r2, r2, #16
 8006ce0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006ce4:	b29b      	uxth	r3, r3
 8006ce6:	fb06 e202 	mla	r2, r6, r2, lr
 8006cea:	ebaa 0303 	sub.w	r3, sl, r3
 8006cee:	f8dc a000 	ldr.w	sl, [ip]
 8006cf2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006cf6:	fa1f fa8a 	uxth.w	sl, sl
 8006cfa:	4453      	add	r3, sl
 8006cfc:	f8dc a000 	ldr.w	sl, [ip]
 8006d00:	b292      	uxth	r2, r2
 8006d02:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006d06:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006d0a:	b29b      	uxth	r3, r3
 8006d0c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006d10:	4581      	cmp	r9, r0
 8006d12:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006d16:	f84c 3b04 	str.w	r3, [ip], #4
 8006d1a:	d2db      	bcs.n	8006cd4 <quorem+0x44>
 8006d1c:	f855 300b 	ldr.w	r3, [r5, fp]
 8006d20:	b92b      	cbnz	r3, 8006d2e <quorem+0x9e>
 8006d22:	9b01      	ldr	r3, [sp, #4]
 8006d24:	3b04      	subs	r3, #4
 8006d26:	429d      	cmp	r5, r3
 8006d28:	461a      	mov	r2, r3
 8006d2a:	d32f      	bcc.n	8006d8c <quorem+0xfc>
 8006d2c:	613c      	str	r4, [r7, #16]
 8006d2e:	4638      	mov	r0, r7
 8006d30:	f001 faea 	bl	8008308 <__mcmp>
 8006d34:	2800      	cmp	r0, #0
 8006d36:	db25      	blt.n	8006d84 <quorem+0xf4>
 8006d38:	4628      	mov	r0, r5
 8006d3a:	f04f 0c00 	mov.w	ip, #0
 8006d3e:	3601      	adds	r6, #1
 8006d40:	f858 1b04 	ldr.w	r1, [r8], #4
 8006d44:	f8d0 e000 	ldr.w	lr, [r0]
 8006d48:	b28b      	uxth	r3, r1
 8006d4a:	ebac 0303 	sub.w	r3, ip, r3
 8006d4e:	fa1f f28e 	uxth.w	r2, lr
 8006d52:	4413      	add	r3, r2
 8006d54:	0c0a      	lsrs	r2, r1, #16
 8006d56:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006d5a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006d5e:	b29b      	uxth	r3, r3
 8006d60:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006d64:	45c1      	cmp	r9, r8
 8006d66:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006d6a:	f840 3b04 	str.w	r3, [r0], #4
 8006d6e:	d2e7      	bcs.n	8006d40 <quorem+0xb0>
 8006d70:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006d74:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006d78:	b922      	cbnz	r2, 8006d84 <quorem+0xf4>
 8006d7a:	3b04      	subs	r3, #4
 8006d7c:	429d      	cmp	r5, r3
 8006d7e:	461a      	mov	r2, r3
 8006d80:	d30a      	bcc.n	8006d98 <quorem+0x108>
 8006d82:	613c      	str	r4, [r7, #16]
 8006d84:	4630      	mov	r0, r6
 8006d86:	b003      	add	sp, #12
 8006d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d8c:	6812      	ldr	r2, [r2, #0]
 8006d8e:	3b04      	subs	r3, #4
 8006d90:	2a00      	cmp	r2, #0
 8006d92:	d1cb      	bne.n	8006d2c <quorem+0x9c>
 8006d94:	3c01      	subs	r4, #1
 8006d96:	e7c6      	b.n	8006d26 <quorem+0x96>
 8006d98:	6812      	ldr	r2, [r2, #0]
 8006d9a:	3b04      	subs	r3, #4
 8006d9c:	2a00      	cmp	r2, #0
 8006d9e:	d1f0      	bne.n	8006d82 <quorem+0xf2>
 8006da0:	3c01      	subs	r4, #1
 8006da2:	e7eb      	b.n	8006d7c <quorem+0xec>
 8006da4:	2000      	movs	r0, #0
 8006da6:	e7ee      	b.n	8006d86 <quorem+0xf6>

08006da8 <_dtoa_r>:
 8006da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dac:	4616      	mov	r6, r2
 8006dae:	461f      	mov	r7, r3
 8006db0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006db2:	b099      	sub	sp, #100	; 0x64
 8006db4:	4605      	mov	r5, r0
 8006db6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006dba:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8006dbe:	b974      	cbnz	r4, 8006dde <_dtoa_r+0x36>
 8006dc0:	2010      	movs	r0, #16
 8006dc2:	f000 ffff 	bl	8007dc4 <malloc>
 8006dc6:	4602      	mov	r2, r0
 8006dc8:	6268      	str	r0, [r5, #36]	; 0x24
 8006dca:	b920      	cbnz	r0, 8006dd6 <_dtoa_r+0x2e>
 8006dcc:	21ea      	movs	r1, #234	; 0xea
 8006dce:	4ba8      	ldr	r3, [pc, #672]	; (8007070 <_dtoa_r+0x2c8>)
 8006dd0:	48a8      	ldr	r0, [pc, #672]	; (8007074 <_dtoa_r+0x2cc>)
 8006dd2:	f001 fe93 	bl	8008afc <__assert_func>
 8006dd6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006dda:	6004      	str	r4, [r0, #0]
 8006ddc:	60c4      	str	r4, [r0, #12]
 8006dde:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006de0:	6819      	ldr	r1, [r3, #0]
 8006de2:	b151      	cbz	r1, 8006dfa <_dtoa_r+0x52>
 8006de4:	685a      	ldr	r2, [r3, #4]
 8006de6:	2301      	movs	r3, #1
 8006de8:	4093      	lsls	r3, r2
 8006dea:	604a      	str	r2, [r1, #4]
 8006dec:	608b      	str	r3, [r1, #8]
 8006dee:	4628      	mov	r0, r5
 8006df0:	f001 f84c 	bl	8007e8c <_Bfree>
 8006df4:	2200      	movs	r2, #0
 8006df6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006df8:	601a      	str	r2, [r3, #0]
 8006dfa:	1e3b      	subs	r3, r7, #0
 8006dfc:	bfaf      	iteee	ge
 8006dfe:	2300      	movge	r3, #0
 8006e00:	2201      	movlt	r2, #1
 8006e02:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006e06:	9305      	strlt	r3, [sp, #20]
 8006e08:	bfa8      	it	ge
 8006e0a:	f8c8 3000 	strge.w	r3, [r8]
 8006e0e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8006e12:	4b99      	ldr	r3, [pc, #612]	; (8007078 <_dtoa_r+0x2d0>)
 8006e14:	bfb8      	it	lt
 8006e16:	f8c8 2000 	strlt.w	r2, [r8]
 8006e1a:	ea33 0309 	bics.w	r3, r3, r9
 8006e1e:	d119      	bne.n	8006e54 <_dtoa_r+0xac>
 8006e20:	f242 730f 	movw	r3, #9999	; 0x270f
 8006e24:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006e26:	6013      	str	r3, [r2, #0]
 8006e28:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006e2c:	4333      	orrs	r3, r6
 8006e2e:	f000 857f 	beq.w	8007930 <_dtoa_r+0xb88>
 8006e32:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006e34:	b953      	cbnz	r3, 8006e4c <_dtoa_r+0xa4>
 8006e36:	4b91      	ldr	r3, [pc, #580]	; (800707c <_dtoa_r+0x2d4>)
 8006e38:	e022      	b.n	8006e80 <_dtoa_r+0xd8>
 8006e3a:	4b91      	ldr	r3, [pc, #580]	; (8007080 <_dtoa_r+0x2d8>)
 8006e3c:	9303      	str	r3, [sp, #12]
 8006e3e:	3308      	adds	r3, #8
 8006e40:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006e42:	6013      	str	r3, [r2, #0]
 8006e44:	9803      	ldr	r0, [sp, #12]
 8006e46:	b019      	add	sp, #100	; 0x64
 8006e48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e4c:	4b8b      	ldr	r3, [pc, #556]	; (800707c <_dtoa_r+0x2d4>)
 8006e4e:	9303      	str	r3, [sp, #12]
 8006e50:	3303      	adds	r3, #3
 8006e52:	e7f5      	b.n	8006e40 <_dtoa_r+0x98>
 8006e54:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006e58:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8006e5c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006e60:	2200      	movs	r2, #0
 8006e62:	2300      	movs	r3, #0
 8006e64:	f7f9 fdb8 	bl	80009d8 <__aeabi_dcmpeq>
 8006e68:	4680      	mov	r8, r0
 8006e6a:	b158      	cbz	r0, 8006e84 <_dtoa_r+0xdc>
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006e70:	6013      	str	r3, [r2, #0]
 8006e72:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	f000 8558 	beq.w	800792a <_dtoa_r+0xb82>
 8006e7a:	4882      	ldr	r0, [pc, #520]	; (8007084 <_dtoa_r+0x2dc>)
 8006e7c:	6018      	str	r0, [r3, #0]
 8006e7e:	1e43      	subs	r3, r0, #1
 8006e80:	9303      	str	r3, [sp, #12]
 8006e82:	e7df      	b.n	8006e44 <_dtoa_r+0x9c>
 8006e84:	ab16      	add	r3, sp, #88	; 0x58
 8006e86:	9301      	str	r3, [sp, #4]
 8006e88:	ab17      	add	r3, sp, #92	; 0x5c
 8006e8a:	9300      	str	r3, [sp, #0]
 8006e8c:	4628      	mov	r0, r5
 8006e8e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006e92:	f001 fae1 	bl	8008458 <__d2b>
 8006e96:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006e9a:	4683      	mov	fp, r0
 8006e9c:	2c00      	cmp	r4, #0
 8006e9e:	d07f      	beq.n	8006fa0 <_dtoa_r+0x1f8>
 8006ea0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006ea4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ea6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8006eaa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006eae:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8006eb2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8006eb6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8006eba:	2200      	movs	r2, #0
 8006ebc:	4b72      	ldr	r3, [pc, #456]	; (8007088 <_dtoa_r+0x2e0>)
 8006ebe:	f7f9 f96b 	bl	8000198 <__aeabi_dsub>
 8006ec2:	a365      	add	r3, pc, #404	; (adr r3, 8007058 <_dtoa_r+0x2b0>)
 8006ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ec8:	f7f9 fb1e 	bl	8000508 <__aeabi_dmul>
 8006ecc:	a364      	add	r3, pc, #400	; (adr r3, 8007060 <_dtoa_r+0x2b8>)
 8006ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ed2:	f7f9 f963 	bl	800019c <__adddf3>
 8006ed6:	4606      	mov	r6, r0
 8006ed8:	4620      	mov	r0, r4
 8006eda:	460f      	mov	r7, r1
 8006edc:	f7f9 faaa 	bl	8000434 <__aeabi_i2d>
 8006ee0:	a361      	add	r3, pc, #388	; (adr r3, 8007068 <_dtoa_r+0x2c0>)
 8006ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ee6:	f7f9 fb0f 	bl	8000508 <__aeabi_dmul>
 8006eea:	4602      	mov	r2, r0
 8006eec:	460b      	mov	r3, r1
 8006eee:	4630      	mov	r0, r6
 8006ef0:	4639      	mov	r1, r7
 8006ef2:	f7f9 f953 	bl	800019c <__adddf3>
 8006ef6:	4606      	mov	r6, r0
 8006ef8:	460f      	mov	r7, r1
 8006efa:	f7f9 fdb5 	bl	8000a68 <__aeabi_d2iz>
 8006efe:	2200      	movs	r2, #0
 8006f00:	4682      	mov	sl, r0
 8006f02:	2300      	movs	r3, #0
 8006f04:	4630      	mov	r0, r6
 8006f06:	4639      	mov	r1, r7
 8006f08:	f7f9 fd70 	bl	80009ec <__aeabi_dcmplt>
 8006f0c:	b148      	cbz	r0, 8006f22 <_dtoa_r+0x17a>
 8006f0e:	4650      	mov	r0, sl
 8006f10:	f7f9 fa90 	bl	8000434 <__aeabi_i2d>
 8006f14:	4632      	mov	r2, r6
 8006f16:	463b      	mov	r3, r7
 8006f18:	f7f9 fd5e 	bl	80009d8 <__aeabi_dcmpeq>
 8006f1c:	b908      	cbnz	r0, 8006f22 <_dtoa_r+0x17a>
 8006f1e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006f22:	f1ba 0f16 	cmp.w	sl, #22
 8006f26:	d858      	bhi.n	8006fda <_dtoa_r+0x232>
 8006f28:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006f2c:	4b57      	ldr	r3, [pc, #348]	; (800708c <_dtoa_r+0x2e4>)
 8006f2e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f36:	f7f9 fd59 	bl	80009ec <__aeabi_dcmplt>
 8006f3a:	2800      	cmp	r0, #0
 8006f3c:	d04f      	beq.n	8006fde <_dtoa_r+0x236>
 8006f3e:	2300      	movs	r3, #0
 8006f40:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006f44:	930f      	str	r3, [sp, #60]	; 0x3c
 8006f46:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006f48:	1b1c      	subs	r4, r3, r4
 8006f4a:	1e63      	subs	r3, r4, #1
 8006f4c:	9309      	str	r3, [sp, #36]	; 0x24
 8006f4e:	bf49      	itett	mi
 8006f50:	f1c4 0301 	rsbmi	r3, r4, #1
 8006f54:	2300      	movpl	r3, #0
 8006f56:	9306      	strmi	r3, [sp, #24]
 8006f58:	2300      	movmi	r3, #0
 8006f5a:	bf54      	ite	pl
 8006f5c:	9306      	strpl	r3, [sp, #24]
 8006f5e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8006f60:	f1ba 0f00 	cmp.w	sl, #0
 8006f64:	db3d      	blt.n	8006fe2 <_dtoa_r+0x23a>
 8006f66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f68:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8006f6c:	4453      	add	r3, sl
 8006f6e:	9309      	str	r3, [sp, #36]	; 0x24
 8006f70:	2300      	movs	r3, #0
 8006f72:	930a      	str	r3, [sp, #40]	; 0x28
 8006f74:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006f76:	2b09      	cmp	r3, #9
 8006f78:	f200 808c 	bhi.w	8007094 <_dtoa_r+0x2ec>
 8006f7c:	2b05      	cmp	r3, #5
 8006f7e:	bfc4      	itt	gt
 8006f80:	3b04      	subgt	r3, #4
 8006f82:	9322      	strgt	r3, [sp, #136]	; 0x88
 8006f84:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006f86:	bfc8      	it	gt
 8006f88:	2400      	movgt	r4, #0
 8006f8a:	f1a3 0302 	sub.w	r3, r3, #2
 8006f8e:	bfd8      	it	le
 8006f90:	2401      	movle	r4, #1
 8006f92:	2b03      	cmp	r3, #3
 8006f94:	f200 808a 	bhi.w	80070ac <_dtoa_r+0x304>
 8006f98:	e8df f003 	tbb	[pc, r3]
 8006f9c:	5b4d4f2d 	.word	0x5b4d4f2d
 8006fa0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8006fa4:	441c      	add	r4, r3
 8006fa6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8006faa:	2b20      	cmp	r3, #32
 8006fac:	bfc3      	ittte	gt
 8006fae:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006fb2:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8006fb6:	fa09 f303 	lslgt.w	r3, r9, r3
 8006fba:	f1c3 0320 	rsble	r3, r3, #32
 8006fbe:	bfc6      	itte	gt
 8006fc0:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006fc4:	4318      	orrgt	r0, r3
 8006fc6:	fa06 f003 	lslle.w	r0, r6, r3
 8006fca:	f7f9 fa23 	bl	8000414 <__aeabi_ui2d>
 8006fce:	2301      	movs	r3, #1
 8006fd0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8006fd4:	3c01      	subs	r4, #1
 8006fd6:	9313      	str	r3, [sp, #76]	; 0x4c
 8006fd8:	e76f      	b.n	8006eba <_dtoa_r+0x112>
 8006fda:	2301      	movs	r3, #1
 8006fdc:	e7b2      	b.n	8006f44 <_dtoa_r+0x19c>
 8006fde:	900f      	str	r0, [sp, #60]	; 0x3c
 8006fe0:	e7b1      	b.n	8006f46 <_dtoa_r+0x19e>
 8006fe2:	9b06      	ldr	r3, [sp, #24]
 8006fe4:	eba3 030a 	sub.w	r3, r3, sl
 8006fe8:	9306      	str	r3, [sp, #24]
 8006fea:	f1ca 0300 	rsb	r3, sl, #0
 8006fee:	930a      	str	r3, [sp, #40]	; 0x28
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	930e      	str	r3, [sp, #56]	; 0x38
 8006ff4:	e7be      	b.n	8006f74 <_dtoa_r+0x1cc>
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	930b      	str	r3, [sp, #44]	; 0x2c
 8006ffa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	dc58      	bgt.n	80070b2 <_dtoa_r+0x30a>
 8007000:	f04f 0901 	mov.w	r9, #1
 8007004:	464b      	mov	r3, r9
 8007006:	f8cd 9020 	str.w	r9, [sp, #32]
 800700a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800700e:	2200      	movs	r2, #0
 8007010:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8007012:	6042      	str	r2, [r0, #4]
 8007014:	2204      	movs	r2, #4
 8007016:	f102 0614 	add.w	r6, r2, #20
 800701a:	429e      	cmp	r6, r3
 800701c:	6841      	ldr	r1, [r0, #4]
 800701e:	d94e      	bls.n	80070be <_dtoa_r+0x316>
 8007020:	4628      	mov	r0, r5
 8007022:	f000 fef3 	bl	8007e0c <_Balloc>
 8007026:	9003      	str	r0, [sp, #12]
 8007028:	2800      	cmp	r0, #0
 800702a:	d14c      	bne.n	80070c6 <_dtoa_r+0x31e>
 800702c:	4602      	mov	r2, r0
 800702e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007032:	4b17      	ldr	r3, [pc, #92]	; (8007090 <_dtoa_r+0x2e8>)
 8007034:	e6cc      	b.n	8006dd0 <_dtoa_r+0x28>
 8007036:	2301      	movs	r3, #1
 8007038:	e7de      	b.n	8006ff8 <_dtoa_r+0x250>
 800703a:	2300      	movs	r3, #0
 800703c:	930b      	str	r3, [sp, #44]	; 0x2c
 800703e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007040:	eb0a 0903 	add.w	r9, sl, r3
 8007044:	f109 0301 	add.w	r3, r9, #1
 8007048:	2b01      	cmp	r3, #1
 800704a:	9308      	str	r3, [sp, #32]
 800704c:	bfb8      	it	lt
 800704e:	2301      	movlt	r3, #1
 8007050:	e7dd      	b.n	800700e <_dtoa_r+0x266>
 8007052:	2301      	movs	r3, #1
 8007054:	e7f2      	b.n	800703c <_dtoa_r+0x294>
 8007056:	bf00      	nop
 8007058:	636f4361 	.word	0x636f4361
 800705c:	3fd287a7 	.word	0x3fd287a7
 8007060:	8b60c8b3 	.word	0x8b60c8b3
 8007064:	3fc68a28 	.word	0x3fc68a28
 8007068:	509f79fb 	.word	0x509f79fb
 800706c:	3fd34413 	.word	0x3fd34413
 8007070:	08008dd9 	.word	0x08008dd9
 8007074:	08008df0 	.word	0x08008df0
 8007078:	7ff00000 	.word	0x7ff00000
 800707c:	08008dd5 	.word	0x08008dd5
 8007080:	08008dcc 	.word	0x08008dcc
 8007084:	08008da9 	.word	0x08008da9
 8007088:	3ff80000 	.word	0x3ff80000
 800708c:	08008f40 	.word	0x08008f40
 8007090:	08008e4b 	.word	0x08008e4b
 8007094:	2401      	movs	r4, #1
 8007096:	2300      	movs	r3, #0
 8007098:	940b      	str	r4, [sp, #44]	; 0x2c
 800709a:	9322      	str	r3, [sp, #136]	; 0x88
 800709c:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 80070a0:	2200      	movs	r2, #0
 80070a2:	2312      	movs	r3, #18
 80070a4:	f8cd 9020 	str.w	r9, [sp, #32]
 80070a8:	9223      	str	r2, [sp, #140]	; 0x8c
 80070aa:	e7b0      	b.n	800700e <_dtoa_r+0x266>
 80070ac:	2301      	movs	r3, #1
 80070ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80070b0:	e7f4      	b.n	800709c <_dtoa_r+0x2f4>
 80070b2:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 80070b6:	464b      	mov	r3, r9
 80070b8:	f8cd 9020 	str.w	r9, [sp, #32]
 80070bc:	e7a7      	b.n	800700e <_dtoa_r+0x266>
 80070be:	3101      	adds	r1, #1
 80070c0:	6041      	str	r1, [r0, #4]
 80070c2:	0052      	lsls	r2, r2, #1
 80070c4:	e7a7      	b.n	8007016 <_dtoa_r+0x26e>
 80070c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80070c8:	9a03      	ldr	r2, [sp, #12]
 80070ca:	601a      	str	r2, [r3, #0]
 80070cc:	9b08      	ldr	r3, [sp, #32]
 80070ce:	2b0e      	cmp	r3, #14
 80070d0:	f200 80a8 	bhi.w	8007224 <_dtoa_r+0x47c>
 80070d4:	2c00      	cmp	r4, #0
 80070d6:	f000 80a5 	beq.w	8007224 <_dtoa_r+0x47c>
 80070da:	f1ba 0f00 	cmp.w	sl, #0
 80070de:	dd34      	ble.n	800714a <_dtoa_r+0x3a2>
 80070e0:	4a9a      	ldr	r2, [pc, #616]	; (800734c <_dtoa_r+0x5a4>)
 80070e2:	f00a 030f 	and.w	r3, sl, #15
 80070e6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80070ea:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80070ee:	e9d3 3400 	ldrd	r3, r4, [r3]
 80070f2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80070f6:	ea4f 142a 	mov.w	r4, sl, asr #4
 80070fa:	d016      	beq.n	800712a <_dtoa_r+0x382>
 80070fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007100:	4b93      	ldr	r3, [pc, #588]	; (8007350 <_dtoa_r+0x5a8>)
 8007102:	2703      	movs	r7, #3
 8007104:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007108:	f7f9 fb28 	bl	800075c <__aeabi_ddiv>
 800710c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007110:	f004 040f 	and.w	r4, r4, #15
 8007114:	4e8e      	ldr	r6, [pc, #568]	; (8007350 <_dtoa_r+0x5a8>)
 8007116:	b954      	cbnz	r4, 800712e <_dtoa_r+0x386>
 8007118:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800711c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007120:	f7f9 fb1c 	bl	800075c <__aeabi_ddiv>
 8007124:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007128:	e029      	b.n	800717e <_dtoa_r+0x3d6>
 800712a:	2702      	movs	r7, #2
 800712c:	e7f2      	b.n	8007114 <_dtoa_r+0x36c>
 800712e:	07e1      	lsls	r1, r4, #31
 8007130:	d508      	bpl.n	8007144 <_dtoa_r+0x39c>
 8007132:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007136:	e9d6 2300 	ldrd	r2, r3, [r6]
 800713a:	f7f9 f9e5 	bl	8000508 <__aeabi_dmul>
 800713e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007142:	3701      	adds	r7, #1
 8007144:	1064      	asrs	r4, r4, #1
 8007146:	3608      	adds	r6, #8
 8007148:	e7e5      	b.n	8007116 <_dtoa_r+0x36e>
 800714a:	f000 80a5 	beq.w	8007298 <_dtoa_r+0x4f0>
 800714e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007152:	f1ca 0400 	rsb	r4, sl, #0
 8007156:	4b7d      	ldr	r3, [pc, #500]	; (800734c <_dtoa_r+0x5a4>)
 8007158:	f004 020f 	and.w	r2, r4, #15
 800715c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007164:	f7f9 f9d0 	bl	8000508 <__aeabi_dmul>
 8007168:	2702      	movs	r7, #2
 800716a:	2300      	movs	r3, #0
 800716c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007170:	4e77      	ldr	r6, [pc, #476]	; (8007350 <_dtoa_r+0x5a8>)
 8007172:	1124      	asrs	r4, r4, #4
 8007174:	2c00      	cmp	r4, #0
 8007176:	f040 8084 	bne.w	8007282 <_dtoa_r+0x4da>
 800717a:	2b00      	cmp	r3, #0
 800717c:	d1d2      	bne.n	8007124 <_dtoa_r+0x37c>
 800717e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007180:	2b00      	cmp	r3, #0
 8007182:	f000 808b 	beq.w	800729c <_dtoa_r+0x4f4>
 8007186:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800718a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800718e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007192:	2200      	movs	r2, #0
 8007194:	4b6f      	ldr	r3, [pc, #444]	; (8007354 <_dtoa_r+0x5ac>)
 8007196:	f7f9 fc29 	bl	80009ec <__aeabi_dcmplt>
 800719a:	2800      	cmp	r0, #0
 800719c:	d07e      	beq.n	800729c <_dtoa_r+0x4f4>
 800719e:	9b08      	ldr	r3, [sp, #32]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d07b      	beq.n	800729c <_dtoa_r+0x4f4>
 80071a4:	f1b9 0f00 	cmp.w	r9, #0
 80071a8:	dd38      	ble.n	800721c <_dtoa_r+0x474>
 80071aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80071ae:	2200      	movs	r2, #0
 80071b0:	4b69      	ldr	r3, [pc, #420]	; (8007358 <_dtoa_r+0x5b0>)
 80071b2:	f7f9 f9a9 	bl	8000508 <__aeabi_dmul>
 80071b6:	464c      	mov	r4, r9
 80071b8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80071bc:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
 80071c0:	3701      	adds	r7, #1
 80071c2:	4638      	mov	r0, r7
 80071c4:	f7f9 f936 	bl	8000434 <__aeabi_i2d>
 80071c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80071cc:	f7f9 f99c 	bl	8000508 <__aeabi_dmul>
 80071d0:	2200      	movs	r2, #0
 80071d2:	4b62      	ldr	r3, [pc, #392]	; (800735c <_dtoa_r+0x5b4>)
 80071d4:	f7f8 ffe2 	bl	800019c <__adddf3>
 80071d8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80071dc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80071e0:	9611      	str	r6, [sp, #68]	; 0x44
 80071e2:	2c00      	cmp	r4, #0
 80071e4:	d15d      	bne.n	80072a2 <_dtoa_r+0x4fa>
 80071e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80071ea:	2200      	movs	r2, #0
 80071ec:	4b5c      	ldr	r3, [pc, #368]	; (8007360 <_dtoa_r+0x5b8>)
 80071ee:	f7f8 ffd3 	bl	8000198 <__aeabi_dsub>
 80071f2:	4602      	mov	r2, r0
 80071f4:	460b      	mov	r3, r1
 80071f6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80071fa:	4633      	mov	r3, r6
 80071fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80071fe:	f7f9 fc13 	bl	8000a28 <__aeabi_dcmpgt>
 8007202:	2800      	cmp	r0, #0
 8007204:	f040 829c 	bne.w	8007740 <_dtoa_r+0x998>
 8007208:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800720c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800720e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007212:	f7f9 fbeb 	bl	80009ec <__aeabi_dcmplt>
 8007216:	2800      	cmp	r0, #0
 8007218:	f040 8290 	bne.w	800773c <_dtoa_r+0x994>
 800721c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8007220:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007224:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007226:	2b00      	cmp	r3, #0
 8007228:	f2c0 8152 	blt.w	80074d0 <_dtoa_r+0x728>
 800722c:	f1ba 0f0e 	cmp.w	sl, #14
 8007230:	f300 814e 	bgt.w	80074d0 <_dtoa_r+0x728>
 8007234:	4b45      	ldr	r3, [pc, #276]	; (800734c <_dtoa_r+0x5a4>)
 8007236:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800723a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800723e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8007242:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007244:	2b00      	cmp	r3, #0
 8007246:	f280 80db 	bge.w	8007400 <_dtoa_r+0x658>
 800724a:	9b08      	ldr	r3, [sp, #32]
 800724c:	2b00      	cmp	r3, #0
 800724e:	f300 80d7 	bgt.w	8007400 <_dtoa_r+0x658>
 8007252:	f040 8272 	bne.w	800773a <_dtoa_r+0x992>
 8007256:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800725a:	2200      	movs	r2, #0
 800725c:	4b40      	ldr	r3, [pc, #256]	; (8007360 <_dtoa_r+0x5b8>)
 800725e:	f7f9 f953 	bl	8000508 <__aeabi_dmul>
 8007262:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007266:	f7f9 fbd5 	bl	8000a14 <__aeabi_dcmpge>
 800726a:	9c08      	ldr	r4, [sp, #32]
 800726c:	4626      	mov	r6, r4
 800726e:	2800      	cmp	r0, #0
 8007270:	f040 8248 	bne.w	8007704 <_dtoa_r+0x95c>
 8007274:	2331      	movs	r3, #49	; 0x31
 8007276:	9f03      	ldr	r7, [sp, #12]
 8007278:	f10a 0a01 	add.w	sl, sl, #1
 800727c:	f807 3b01 	strb.w	r3, [r7], #1
 8007280:	e244      	b.n	800770c <_dtoa_r+0x964>
 8007282:	07e2      	lsls	r2, r4, #31
 8007284:	d505      	bpl.n	8007292 <_dtoa_r+0x4ea>
 8007286:	e9d6 2300 	ldrd	r2, r3, [r6]
 800728a:	f7f9 f93d 	bl	8000508 <__aeabi_dmul>
 800728e:	2301      	movs	r3, #1
 8007290:	3701      	adds	r7, #1
 8007292:	1064      	asrs	r4, r4, #1
 8007294:	3608      	adds	r6, #8
 8007296:	e76d      	b.n	8007174 <_dtoa_r+0x3cc>
 8007298:	2702      	movs	r7, #2
 800729a:	e770      	b.n	800717e <_dtoa_r+0x3d6>
 800729c:	46d0      	mov	r8, sl
 800729e:	9c08      	ldr	r4, [sp, #32]
 80072a0:	e78f      	b.n	80071c2 <_dtoa_r+0x41a>
 80072a2:	9903      	ldr	r1, [sp, #12]
 80072a4:	4b29      	ldr	r3, [pc, #164]	; (800734c <_dtoa_r+0x5a4>)
 80072a6:	4421      	add	r1, r4
 80072a8:	9112      	str	r1, [sp, #72]	; 0x48
 80072aa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80072ac:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80072b0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80072b4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80072b8:	2900      	cmp	r1, #0
 80072ba:	d055      	beq.n	8007368 <_dtoa_r+0x5c0>
 80072bc:	2000      	movs	r0, #0
 80072be:	4929      	ldr	r1, [pc, #164]	; (8007364 <_dtoa_r+0x5bc>)
 80072c0:	f7f9 fa4c 	bl	800075c <__aeabi_ddiv>
 80072c4:	463b      	mov	r3, r7
 80072c6:	4632      	mov	r2, r6
 80072c8:	f7f8 ff66 	bl	8000198 <__aeabi_dsub>
 80072cc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80072d0:	9f03      	ldr	r7, [sp, #12]
 80072d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80072d6:	f7f9 fbc7 	bl	8000a68 <__aeabi_d2iz>
 80072da:	4604      	mov	r4, r0
 80072dc:	f7f9 f8aa 	bl	8000434 <__aeabi_i2d>
 80072e0:	4602      	mov	r2, r0
 80072e2:	460b      	mov	r3, r1
 80072e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80072e8:	f7f8 ff56 	bl	8000198 <__aeabi_dsub>
 80072ec:	4602      	mov	r2, r0
 80072ee:	460b      	mov	r3, r1
 80072f0:	3430      	adds	r4, #48	; 0x30
 80072f2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80072f6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80072fa:	f807 4b01 	strb.w	r4, [r7], #1
 80072fe:	f7f9 fb75 	bl	80009ec <__aeabi_dcmplt>
 8007302:	2800      	cmp	r0, #0
 8007304:	d174      	bne.n	80073f0 <_dtoa_r+0x648>
 8007306:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800730a:	2000      	movs	r0, #0
 800730c:	4911      	ldr	r1, [pc, #68]	; (8007354 <_dtoa_r+0x5ac>)
 800730e:	f7f8 ff43 	bl	8000198 <__aeabi_dsub>
 8007312:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007316:	f7f9 fb69 	bl	80009ec <__aeabi_dcmplt>
 800731a:	2800      	cmp	r0, #0
 800731c:	f040 80b7 	bne.w	800748e <_dtoa_r+0x6e6>
 8007320:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007322:	429f      	cmp	r7, r3
 8007324:	f43f af7a 	beq.w	800721c <_dtoa_r+0x474>
 8007328:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800732c:	2200      	movs	r2, #0
 800732e:	4b0a      	ldr	r3, [pc, #40]	; (8007358 <_dtoa_r+0x5b0>)
 8007330:	f7f9 f8ea 	bl	8000508 <__aeabi_dmul>
 8007334:	2200      	movs	r2, #0
 8007336:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800733a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800733e:	4b06      	ldr	r3, [pc, #24]	; (8007358 <_dtoa_r+0x5b0>)
 8007340:	f7f9 f8e2 	bl	8000508 <__aeabi_dmul>
 8007344:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007348:	e7c3      	b.n	80072d2 <_dtoa_r+0x52a>
 800734a:	bf00      	nop
 800734c:	08008f40 	.word	0x08008f40
 8007350:	08008f18 	.word	0x08008f18
 8007354:	3ff00000 	.word	0x3ff00000
 8007358:	40240000 	.word	0x40240000
 800735c:	401c0000 	.word	0x401c0000
 8007360:	40140000 	.word	0x40140000
 8007364:	3fe00000 	.word	0x3fe00000
 8007368:	4630      	mov	r0, r6
 800736a:	4639      	mov	r1, r7
 800736c:	f7f9 f8cc 	bl	8000508 <__aeabi_dmul>
 8007370:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007372:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007376:	9c03      	ldr	r4, [sp, #12]
 8007378:	9314      	str	r3, [sp, #80]	; 0x50
 800737a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800737e:	f7f9 fb73 	bl	8000a68 <__aeabi_d2iz>
 8007382:	9015      	str	r0, [sp, #84]	; 0x54
 8007384:	f7f9 f856 	bl	8000434 <__aeabi_i2d>
 8007388:	4602      	mov	r2, r0
 800738a:	460b      	mov	r3, r1
 800738c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007390:	f7f8 ff02 	bl	8000198 <__aeabi_dsub>
 8007394:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007396:	4606      	mov	r6, r0
 8007398:	3330      	adds	r3, #48	; 0x30
 800739a:	f804 3b01 	strb.w	r3, [r4], #1
 800739e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80073a0:	460f      	mov	r7, r1
 80073a2:	429c      	cmp	r4, r3
 80073a4:	f04f 0200 	mov.w	r2, #0
 80073a8:	d124      	bne.n	80073f4 <_dtoa_r+0x64c>
 80073aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80073ae:	4bb0      	ldr	r3, [pc, #704]	; (8007670 <_dtoa_r+0x8c8>)
 80073b0:	f7f8 fef4 	bl	800019c <__adddf3>
 80073b4:	4602      	mov	r2, r0
 80073b6:	460b      	mov	r3, r1
 80073b8:	4630      	mov	r0, r6
 80073ba:	4639      	mov	r1, r7
 80073bc:	f7f9 fb34 	bl	8000a28 <__aeabi_dcmpgt>
 80073c0:	2800      	cmp	r0, #0
 80073c2:	d163      	bne.n	800748c <_dtoa_r+0x6e4>
 80073c4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80073c8:	2000      	movs	r0, #0
 80073ca:	49a9      	ldr	r1, [pc, #676]	; (8007670 <_dtoa_r+0x8c8>)
 80073cc:	f7f8 fee4 	bl	8000198 <__aeabi_dsub>
 80073d0:	4602      	mov	r2, r0
 80073d2:	460b      	mov	r3, r1
 80073d4:	4630      	mov	r0, r6
 80073d6:	4639      	mov	r1, r7
 80073d8:	f7f9 fb08 	bl	80009ec <__aeabi_dcmplt>
 80073dc:	2800      	cmp	r0, #0
 80073de:	f43f af1d 	beq.w	800721c <_dtoa_r+0x474>
 80073e2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80073e4:	1e7b      	subs	r3, r7, #1
 80073e6:	9314      	str	r3, [sp, #80]	; 0x50
 80073e8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80073ec:	2b30      	cmp	r3, #48	; 0x30
 80073ee:	d0f8      	beq.n	80073e2 <_dtoa_r+0x63a>
 80073f0:	46c2      	mov	sl, r8
 80073f2:	e03b      	b.n	800746c <_dtoa_r+0x6c4>
 80073f4:	4b9f      	ldr	r3, [pc, #636]	; (8007674 <_dtoa_r+0x8cc>)
 80073f6:	f7f9 f887 	bl	8000508 <__aeabi_dmul>
 80073fa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80073fe:	e7bc      	b.n	800737a <_dtoa_r+0x5d2>
 8007400:	9f03      	ldr	r7, [sp, #12]
 8007402:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007406:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800740a:	4640      	mov	r0, r8
 800740c:	4649      	mov	r1, r9
 800740e:	f7f9 f9a5 	bl	800075c <__aeabi_ddiv>
 8007412:	f7f9 fb29 	bl	8000a68 <__aeabi_d2iz>
 8007416:	4604      	mov	r4, r0
 8007418:	f7f9 f80c 	bl	8000434 <__aeabi_i2d>
 800741c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007420:	f7f9 f872 	bl	8000508 <__aeabi_dmul>
 8007424:	4602      	mov	r2, r0
 8007426:	460b      	mov	r3, r1
 8007428:	4640      	mov	r0, r8
 800742a:	4649      	mov	r1, r9
 800742c:	f7f8 feb4 	bl	8000198 <__aeabi_dsub>
 8007430:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8007434:	f807 6b01 	strb.w	r6, [r7], #1
 8007438:	9e03      	ldr	r6, [sp, #12]
 800743a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800743e:	1bbe      	subs	r6, r7, r6
 8007440:	45b4      	cmp	ip, r6
 8007442:	4602      	mov	r2, r0
 8007444:	460b      	mov	r3, r1
 8007446:	d136      	bne.n	80074b6 <_dtoa_r+0x70e>
 8007448:	f7f8 fea8 	bl	800019c <__adddf3>
 800744c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007450:	4680      	mov	r8, r0
 8007452:	4689      	mov	r9, r1
 8007454:	f7f9 fae8 	bl	8000a28 <__aeabi_dcmpgt>
 8007458:	bb58      	cbnz	r0, 80074b2 <_dtoa_r+0x70a>
 800745a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800745e:	4640      	mov	r0, r8
 8007460:	4649      	mov	r1, r9
 8007462:	f7f9 fab9 	bl	80009d8 <__aeabi_dcmpeq>
 8007466:	b108      	cbz	r0, 800746c <_dtoa_r+0x6c4>
 8007468:	07e1      	lsls	r1, r4, #31
 800746a:	d422      	bmi.n	80074b2 <_dtoa_r+0x70a>
 800746c:	4628      	mov	r0, r5
 800746e:	4659      	mov	r1, fp
 8007470:	f000 fd0c 	bl	8007e8c <_Bfree>
 8007474:	2300      	movs	r3, #0
 8007476:	703b      	strb	r3, [r7, #0]
 8007478:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800747a:	f10a 0001 	add.w	r0, sl, #1
 800747e:	6018      	str	r0, [r3, #0]
 8007480:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007482:	2b00      	cmp	r3, #0
 8007484:	f43f acde 	beq.w	8006e44 <_dtoa_r+0x9c>
 8007488:	601f      	str	r7, [r3, #0]
 800748a:	e4db      	b.n	8006e44 <_dtoa_r+0x9c>
 800748c:	4627      	mov	r7, r4
 800748e:	463b      	mov	r3, r7
 8007490:	461f      	mov	r7, r3
 8007492:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007496:	2a39      	cmp	r2, #57	; 0x39
 8007498:	d107      	bne.n	80074aa <_dtoa_r+0x702>
 800749a:	9a03      	ldr	r2, [sp, #12]
 800749c:	429a      	cmp	r2, r3
 800749e:	d1f7      	bne.n	8007490 <_dtoa_r+0x6e8>
 80074a0:	2230      	movs	r2, #48	; 0x30
 80074a2:	9903      	ldr	r1, [sp, #12]
 80074a4:	f108 0801 	add.w	r8, r8, #1
 80074a8:	700a      	strb	r2, [r1, #0]
 80074aa:	781a      	ldrb	r2, [r3, #0]
 80074ac:	3201      	adds	r2, #1
 80074ae:	701a      	strb	r2, [r3, #0]
 80074b0:	e79e      	b.n	80073f0 <_dtoa_r+0x648>
 80074b2:	46d0      	mov	r8, sl
 80074b4:	e7eb      	b.n	800748e <_dtoa_r+0x6e6>
 80074b6:	2200      	movs	r2, #0
 80074b8:	4b6e      	ldr	r3, [pc, #440]	; (8007674 <_dtoa_r+0x8cc>)
 80074ba:	f7f9 f825 	bl	8000508 <__aeabi_dmul>
 80074be:	2200      	movs	r2, #0
 80074c0:	2300      	movs	r3, #0
 80074c2:	4680      	mov	r8, r0
 80074c4:	4689      	mov	r9, r1
 80074c6:	f7f9 fa87 	bl	80009d8 <__aeabi_dcmpeq>
 80074ca:	2800      	cmp	r0, #0
 80074cc:	d09b      	beq.n	8007406 <_dtoa_r+0x65e>
 80074ce:	e7cd      	b.n	800746c <_dtoa_r+0x6c4>
 80074d0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80074d2:	2a00      	cmp	r2, #0
 80074d4:	f000 80d0 	beq.w	8007678 <_dtoa_r+0x8d0>
 80074d8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80074da:	2a01      	cmp	r2, #1
 80074dc:	f300 80ae 	bgt.w	800763c <_dtoa_r+0x894>
 80074e0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80074e2:	2a00      	cmp	r2, #0
 80074e4:	f000 80a6 	beq.w	8007634 <_dtoa_r+0x88c>
 80074e8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80074ec:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80074ee:	9f06      	ldr	r7, [sp, #24]
 80074f0:	9a06      	ldr	r2, [sp, #24]
 80074f2:	2101      	movs	r1, #1
 80074f4:	441a      	add	r2, r3
 80074f6:	9206      	str	r2, [sp, #24]
 80074f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80074fa:	4628      	mov	r0, r5
 80074fc:	441a      	add	r2, r3
 80074fe:	9209      	str	r2, [sp, #36]	; 0x24
 8007500:	f000 fd7a 	bl	8007ff8 <__i2b>
 8007504:	4606      	mov	r6, r0
 8007506:	2f00      	cmp	r7, #0
 8007508:	dd0c      	ble.n	8007524 <_dtoa_r+0x77c>
 800750a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800750c:	2b00      	cmp	r3, #0
 800750e:	dd09      	ble.n	8007524 <_dtoa_r+0x77c>
 8007510:	42bb      	cmp	r3, r7
 8007512:	bfa8      	it	ge
 8007514:	463b      	movge	r3, r7
 8007516:	9a06      	ldr	r2, [sp, #24]
 8007518:	1aff      	subs	r7, r7, r3
 800751a:	1ad2      	subs	r2, r2, r3
 800751c:	9206      	str	r2, [sp, #24]
 800751e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007520:	1ad3      	subs	r3, r2, r3
 8007522:	9309      	str	r3, [sp, #36]	; 0x24
 8007524:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007526:	b1f3      	cbz	r3, 8007566 <_dtoa_r+0x7be>
 8007528:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800752a:	2b00      	cmp	r3, #0
 800752c:	f000 80a8 	beq.w	8007680 <_dtoa_r+0x8d8>
 8007530:	2c00      	cmp	r4, #0
 8007532:	dd10      	ble.n	8007556 <_dtoa_r+0x7ae>
 8007534:	4631      	mov	r1, r6
 8007536:	4622      	mov	r2, r4
 8007538:	4628      	mov	r0, r5
 800753a:	f000 fe1b 	bl	8008174 <__pow5mult>
 800753e:	465a      	mov	r2, fp
 8007540:	4601      	mov	r1, r0
 8007542:	4606      	mov	r6, r0
 8007544:	4628      	mov	r0, r5
 8007546:	f000 fd6d 	bl	8008024 <__multiply>
 800754a:	4680      	mov	r8, r0
 800754c:	4659      	mov	r1, fp
 800754e:	4628      	mov	r0, r5
 8007550:	f000 fc9c 	bl	8007e8c <_Bfree>
 8007554:	46c3      	mov	fp, r8
 8007556:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007558:	1b1a      	subs	r2, r3, r4
 800755a:	d004      	beq.n	8007566 <_dtoa_r+0x7be>
 800755c:	4659      	mov	r1, fp
 800755e:	4628      	mov	r0, r5
 8007560:	f000 fe08 	bl	8008174 <__pow5mult>
 8007564:	4683      	mov	fp, r0
 8007566:	2101      	movs	r1, #1
 8007568:	4628      	mov	r0, r5
 800756a:	f000 fd45 	bl	8007ff8 <__i2b>
 800756e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007570:	4604      	mov	r4, r0
 8007572:	2b00      	cmp	r3, #0
 8007574:	f340 8086 	ble.w	8007684 <_dtoa_r+0x8dc>
 8007578:	461a      	mov	r2, r3
 800757a:	4601      	mov	r1, r0
 800757c:	4628      	mov	r0, r5
 800757e:	f000 fdf9 	bl	8008174 <__pow5mult>
 8007582:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007584:	4604      	mov	r4, r0
 8007586:	2b01      	cmp	r3, #1
 8007588:	dd7f      	ble.n	800768a <_dtoa_r+0x8e2>
 800758a:	f04f 0800 	mov.w	r8, #0
 800758e:	6923      	ldr	r3, [r4, #16]
 8007590:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007594:	6918      	ldr	r0, [r3, #16]
 8007596:	f000 fce1 	bl	8007f5c <__hi0bits>
 800759a:	f1c0 0020 	rsb	r0, r0, #32
 800759e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075a0:	4418      	add	r0, r3
 80075a2:	f010 001f 	ands.w	r0, r0, #31
 80075a6:	f000 8092 	beq.w	80076ce <_dtoa_r+0x926>
 80075aa:	f1c0 0320 	rsb	r3, r0, #32
 80075ae:	2b04      	cmp	r3, #4
 80075b0:	f340 808a 	ble.w	80076c8 <_dtoa_r+0x920>
 80075b4:	f1c0 001c 	rsb	r0, r0, #28
 80075b8:	9b06      	ldr	r3, [sp, #24]
 80075ba:	4407      	add	r7, r0
 80075bc:	4403      	add	r3, r0
 80075be:	9306      	str	r3, [sp, #24]
 80075c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075c2:	4403      	add	r3, r0
 80075c4:	9309      	str	r3, [sp, #36]	; 0x24
 80075c6:	9b06      	ldr	r3, [sp, #24]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	dd05      	ble.n	80075d8 <_dtoa_r+0x830>
 80075cc:	4659      	mov	r1, fp
 80075ce:	461a      	mov	r2, r3
 80075d0:	4628      	mov	r0, r5
 80075d2:	f000 fe29 	bl	8008228 <__lshift>
 80075d6:	4683      	mov	fp, r0
 80075d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075da:	2b00      	cmp	r3, #0
 80075dc:	dd05      	ble.n	80075ea <_dtoa_r+0x842>
 80075de:	4621      	mov	r1, r4
 80075e0:	461a      	mov	r2, r3
 80075e2:	4628      	mov	r0, r5
 80075e4:	f000 fe20 	bl	8008228 <__lshift>
 80075e8:	4604      	mov	r4, r0
 80075ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d070      	beq.n	80076d2 <_dtoa_r+0x92a>
 80075f0:	4621      	mov	r1, r4
 80075f2:	4658      	mov	r0, fp
 80075f4:	f000 fe88 	bl	8008308 <__mcmp>
 80075f8:	2800      	cmp	r0, #0
 80075fa:	da6a      	bge.n	80076d2 <_dtoa_r+0x92a>
 80075fc:	2300      	movs	r3, #0
 80075fe:	4659      	mov	r1, fp
 8007600:	220a      	movs	r2, #10
 8007602:	4628      	mov	r0, r5
 8007604:	f000 fc64 	bl	8007ed0 <__multadd>
 8007608:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800760a:	4683      	mov	fp, r0
 800760c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007610:	2b00      	cmp	r3, #0
 8007612:	f000 8194 	beq.w	800793e <_dtoa_r+0xb96>
 8007616:	4631      	mov	r1, r6
 8007618:	2300      	movs	r3, #0
 800761a:	220a      	movs	r2, #10
 800761c:	4628      	mov	r0, r5
 800761e:	f000 fc57 	bl	8007ed0 <__multadd>
 8007622:	f1b9 0f00 	cmp.w	r9, #0
 8007626:	4606      	mov	r6, r0
 8007628:	f300 8093 	bgt.w	8007752 <_dtoa_r+0x9aa>
 800762c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800762e:	2b02      	cmp	r3, #2
 8007630:	dc57      	bgt.n	80076e2 <_dtoa_r+0x93a>
 8007632:	e08e      	b.n	8007752 <_dtoa_r+0x9aa>
 8007634:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007636:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800763a:	e757      	b.n	80074ec <_dtoa_r+0x744>
 800763c:	9b08      	ldr	r3, [sp, #32]
 800763e:	1e5c      	subs	r4, r3, #1
 8007640:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007642:	42a3      	cmp	r3, r4
 8007644:	bfb7      	itett	lt
 8007646:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007648:	1b1c      	subge	r4, r3, r4
 800764a:	1ae2      	sublt	r2, r4, r3
 800764c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800764e:	bfbe      	ittt	lt
 8007650:	940a      	strlt	r4, [sp, #40]	; 0x28
 8007652:	189b      	addlt	r3, r3, r2
 8007654:	930e      	strlt	r3, [sp, #56]	; 0x38
 8007656:	9b08      	ldr	r3, [sp, #32]
 8007658:	bfb8      	it	lt
 800765a:	2400      	movlt	r4, #0
 800765c:	2b00      	cmp	r3, #0
 800765e:	bfbb      	ittet	lt
 8007660:	9b06      	ldrlt	r3, [sp, #24]
 8007662:	9a08      	ldrlt	r2, [sp, #32]
 8007664:	9f06      	ldrge	r7, [sp, #24]
 8007666:	1a9f      	sublt	r7, r3, r2
 8007668:	bfac      	ite	ge
 800766a:	9b08      	ldrge	r3, [sp, #32]
 800766c:	2300      	movlt	r3, #0
 800766e:	e73f      	b.n	80074f0 <_dtoa_r+0x748>
 8007670:	3fe00000 	.word	0x3fe00000
 8007674:	40240000 	.word	0x40240000
 8007678:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800767a:	9f06      	ldr	r7, [sp, #24]
 800767c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800767e:	e742      	b.n	8007506 <_dtoa_r+0x75e>
 8007680:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007682:	e76b      	b.n	800755c <_dtoa_r+0x7b4>
 8007684:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007686:	2b01      	cmp	r3, #1
 8007688:	dc19      	bgt.n	80076be <_dtoa_r+0x916>
 800768a:	9b04      	ldr	r3, [sp, #16]
 800768c:	b9bb      	cbnz	r3, 80076be <_dtoa_r+0x916>
 800768e:	9b05      	ldr	r3, [sp, #20]
 8007690:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007694:	b99b      	cbnz	r3, 80076be <_dtoa_r+0x916>
 8007696:	9b05      	ldr	r3, [sp, #20]
 8007698:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800769c:	0d1b      	lsrs	r3, r3, #20
 800769e:	051b      	lsls	r3, r3, #20
 80076a0:	b183      	cbz	r3, 80076c4 <_dtoa_r+0x91c>
 80076a2:	f04f 0801 	mov.w	r8, #1
 80076a6:	9b06      	ldr	r3, [sp, #24]
 80076a8:	3301      	adds	r3, #1
 80076aa:	9306      	str	r3, [sp, #24]
 80076ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076ae:	3301      	adds	r3, #1
 80076b0:	9309      	str	r3, [sp, #36]	; 0x24
 80076b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	f47f af6a 	bne.w	800758e <_dtoa_r+0x7e6>
 80076ba:	2001      	movs	r0, #1
 80076bc:	e76f      	b.n	800759e <_dtoa_r+0x7f6>
 80076be:	f04f 0800 	mov.w	r8, #0
 80076c2:	e7f6      	b.n	80076b2 <_dtoa_r+0x90a>
 80076c4:	4698      	mov	r8, r3
 80076c6:	e7f4      	b.n	80076b2 <_dtoa_r+0x90a>
 80076c8:	f43f af7d 	beq.w	80075c6 <_dtoa_r+0x81e>
 80076cc:	4618      	mov	r0, r3
 80076ce:	301c      	adds	r0, #28
 80076d0:	e772      	b.n	80075b8 <_dtoa_r+0x810>
 80076d2:	9b08      	ldr	r3, [sp, #32]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	dc36      	bgt.n	8007746 <_dtoa_r+0x99e>
 80076d8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80076da:	2b02      	cmp	r3, #2
 80076dc:	dd33      	ble.n	8007746 <_dtoa_r+0x99e>
 80076de:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80076e2:	f1b9 0f00 	cmp.w	r9, #0
 80076e6:	d10d      	bne.n	8007704 <_dtoa_r+0x95c>
 80076e8:	4621      	mov	r1, r4
 80076ea:	464b      	mov	r3, r9
 80076ec:	2205      	movs	r2, #5
 80076ee:	4628      	mov	r0, r5
 80076f0:	f000 fbee 	bl	8007ed0 <__multadd>
 80076f4:	4601      	mov	r1, r0
 80076f6:	4604      	mov	r4, r0
 80076f8:	4658      	mov	r0, fp
 80076fa:	f000 fe05 	bl	8008308 <__mcmp>
 80076fe:	2800      	cmp	r0, #0
 8007700:	f73f adb8 	bgt.w	8007274 <_dtoa_r+0x4cc>
 8007704:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007706:	9f03      	ldr	r7, [sp, #12]
 8007708:	ea6f 0a03 	mvn.w	sl, r3
 800770c:	f04f 0800 	mov.w	r8, #0
 8007710:	4621      	mov	r1, r4
 8007712:	4628      	mov	r0, r5
 8007714:	f000 fbba 	bl	8007e8c <_Bfree>
 8007718:	2e00      	cmp	r6, #0
 800771a:	f43f aea7 	beq.w	800746c <_dtoa_r+0x6c4>
 800771e:	f1b8 0f00 	cmp.w	r8, #0
 8007722:	d005      	beq.n	8007730 <_dtoa_r+0x988>
 8007724:	45b0      	cmp	r8, r6
 8007726:	d003      	beq.n	8007730 <_dtoa_r+0x988>
 8007728:	4641      	mov	r1, r8
 800772a:	4628      	mov	r0, r5
 800772c:	f000 fbae 	bl	8007e8c <_Bfree>
 8007730:	4631      	mov	r1, r6
 8007732:	4628      	mov	r0, r5
 8007734:	f000 fbaa 	bl	8007e8c <_Bfree>
 8007738:	e698      	b.n	800746c <_dtoa_r+0x6c4>
 800773a:	2400      	movs	r4, #0
 800773c:	4626      	mov	r6, r4
 800773e:	e7e1      	b.n	8007704 <_dtoa_r+0x95c>
 8007740:	46c2      	mov	sl, r8
 8007742:	4626      	mov	r6, r4
 8007744:	e596      	b.n	8007274 <_dtoa_r+0x4cc>
 8007746:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007748:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800774c:	2b00      	cmp	r3, #0
 800774e:	f000 80fd 	beq.w	800794c <_dtoa_r+0xba4>
 8007752:	2f00      	cmp	r7, #0
 8007754:	dd05      	ble.n	8007762 <_dtoa_r+0x9ba>
 8007756:	4631      	mov	r1, r6
 8007758:	463a      	mov	r2, r7
 800775a:	4628      	mov	r0, r5
 800775c:	f000 fd64 	bl	8008228 <__lshift>
 8007760:	4606      	mov	r6, r0
 8007762:	f1b8 0f00 	cmp.w	r8, #0
 8007766:	d05c      	beq.n	8007822 <_dtoa_r+0xa7a>
 8007768:	4628      	mov	r0, r5
 800776a:	6871      	ldr	r1, [r6, #4]
 800776c:	f000 fb4e 	bl	8007e0c <_Balloc>
 8007770:	4607      	mov	r7, r0
 8007772:	b928      	cbnz	r0, 8007780 <_dtoa_r+0x9d8>
 8007774:	4602      	mov	r2, r0
 8007776:	f240 21ea 	movw	r1, #746	; 0x2ea
 800777a:	4b7f      	ldr	r3, [pc, #508]	; (8007978 <_dtoa_r+0xbd0>)
 800777c:	f7ff bb28 	b.w	8006dd0 <_dtoa_r+0x28>
 8007780:	6932      	ldr	r2, [r6, #16]
 8007782:	f106 010c 	add.w	r1, r6, #12
 8007786:	3202      	adds	r2, #2
 8007788:	0092      	lsls	r2, r2, #2
 800778a:	300c      	adds	r0, #12
 800778c:	f000 fb30 	bl	8007df0 <memcpy>
 8007790:	2201      	movs	r2, #1
 8007792:	4639      	mov	r1, r7
 8007794:	4628      	mov	r0, r5
 8007796:	f000 fd47 	bl	8008228 <__lshift>
 800779a:	46b0      	mov	r8, r6
 800779c:	4606      	mov	r6, r0
 800779e:	9b03      	ldr	r3, [sp, #12]
 80077a0:	3301      	adds	r3, #1
 80077a2:	9308      	str	r3, [sp, #32]
 80077a4:	9b03      	ldr	r3, [sp, #12]
 80077a6:	444b      	add	r3, r9
 80077a8:	930a      	str	r3, [sp, #40]	; 0x28
 80077aa:	9b04      	ldr	r3, [sp, #16]
 80077ac:	f003 0301 	and.w	r3, r3, #1
 80077b0:	9309      	str	r3, [sp, #36]	; 0x24
 80077b2:	9b08      	ldr	r3, [sp, #32]
 80077b4:	4621      	mov	r1, r4
 80077b6:	3b01      	subs	r3, #1
 80077b8:	4658      	mov	r0, fp
 80077ba:	9304      	str	r3, [sp, #16]
 80077bc:	f7ff fa68 	bl	8006c90 <quorem>
 80077c0:	4603      	mov	r3, r0
 80077c2:	4641      	mov	r1, r8
 80077c4:	3330      	adds	r3, #48	; 0x30
 80077c6:	9006      	str	r0, [sp, #24]
 80077c8:	4658      	mov	r0, fp
 80077ca:	930b      	str	r3, [sp, #44]	; 0x2c
 80077cc:	f000 fd9c 	bl	8008308 <__mcmp>
 80077d0:	4632      	mov	r2, r6
 80077d2:	4681      	mov	r9, r0
 80077d4:	4621      	mov	r1, r4
 80077d6:	4628      	mov	r0, r5
 80077d8:	f000 fdb2 	bl	8008340 <__mdiff>
 80077dc:	68c2      	ldr	r2, [r0, #12]
 80077de:	4607      	mov	r7, r0
 80077e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80077e2:	bb02      	cbnz	r2, 8007826 <_dtoa_r+0xa7e>
 80077e4:	4601      	mov	r1, r0
 80077e6:	4658      	mov	r0, fp
 80077e8:	f000 fd8e 	bl	8008308 <__mcmp>
 80077ec:	4602      	mov	r2, r0
 80077ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80077f0:	4639      	mov	r1, r7
 80077f2:	4628      	mov	r0, r5
 80077f4:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80077f8:	f000 fb48 	bl	8007e8c <_Bfree>
 80077fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80077fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007800:	9f08      	ldr	r7, [sp, #32]
 8007802:	ea43 0102 	orr.w	r1, r3, r2
 8007806:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007808:	430b      	orrs	r3, r1
 800780a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800780c:	d10d      	bne.n	800782a <_dtoa_r+0xa82>
 800780e:	2b39      	cmp	r3, #57	; 0x39
 8007810:	d029      	beq.n	8007866 <_dtoa_r+0xabe>
 8007812:	f1b9 0f00 	cmp.w	r9, #0
 8007816:	dd01      	ble.n	800781c <_dtoa_r+0xa74>
 8007818:	9b06      	ldr	r3, [sp, #24]
 800781a:	3331      	adds	r3, #49	; 0x31
 800781c:	9a04      	ldr	r2, [sp, #16]
 800781e:	7013      	strb	r3, [r2, #0]
 8007820:	e776      	b.n	8007710 <_dtoa_r+0x968>
 8007822:	4630      	mov	r0, r6
 8007824:	e7b9      	b.n	800779a <_dtoa_r+0x9f2>
 8007826:	2201      	movs	r2, #1
 8007828:	e7e2      	b.n	80077f0 <_dtoa_r+0xa48>
 800782a:	f1b9 0f00 	cmp.w	r9, #0
 800782e:	db06      	blt.n	800783e <_dtoa_r+0xa96>
 8007830:	9922      	ldr	r1, [sp, #136]	; 0x88
 8007832:	ea41 0909 	orr.w	r9, r1, r9
 8007836:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007838:	ea59 0101 	orrs.w	r1, r9, r1
 800783c:	d120      	bne.n	8007880 <_dtoa_r+0xad8>
 800783e:	2a00      	cmp	r2, #0
 8007840:	ddec      	ble.n	800781c <_dtoa_r+0xa74>
 8007842:	4659      	mov	r1, fp
 8007844:	2201      	movs	r2, #1
 8007846:	4628      	mov	r0, r5
 8007848:	9308      	str	r3, [sp, #32]
 800784a:	f000 fced 	bl	8008228 <__lshift>
 800784e:	4621      	mov	r1, r4
 8007850:	4683      	mov	fp, r0
 8007852:	f000 fd59 	bl	8008308 <__mcmp>
 8007856:	2800      	cmp	r0, #0
 8007858:	9b08      	ldr	r3, [sp, #32]
 800785a:	dc02      	bgt.n	8007862 <_dtoa_r+0xaba>
 800785c:	d1de      	bne.n	800781c <_dtoa_r+0xa74>
 800785e:	07da      	lsls	r2, r3, #31
 8007860:	d5dc      	bpl.n	800781c <_dtoa_r+0xa74>
 8007862:	2b39      	cmp	r3, #57	; 0x39
 8007864:	d1d8      	bne.n	8007818 <_dtoa_r+0xa70>
 8007866:	2339      	movs	r3, #57	; 0x39
 8007868:	9a04      	ldr	r2, [sp, #16]
 800786a:	7013      	strb	r3, [r2, #0]
 800786c:	463b      	mov	r3, r7
 800786e:	461f      	mov	r7, r3
 8007870:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8007874:	3b01      	subs	r3, #1
 8007876:	2a39      	cmp	r2, #57	; 0x39
 8007878:	d050      	beq.n	800791c <_dtoa_r+0xb74>
 800787a:	3201      	adds	r2, #1
 800787c:	701a      	strb	r2, [r3, #0]
 800787e:	e747      	b.n	8007710 <_dtoa_r+0x968>
 8007880:	2a00      	cmp	r2, #0
 8007882:	dd03      	ble.n	800788c <_dtoa_r+0xae4>
 8007884:	2b39      	cmp	r3, #57	; 0x39
 8007886:	d0ee      	beq.n	8007866 <_dtoa_r+0xabe>
 8007888:	3301      	adds	r3, #1
 800788a:	e7c7      	b.n	800781c <_dtoa_r+0xa74>
 800788c:	9a08      	ldr	r2, [sp, #32]
 800788e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007890:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007894:	428a      	cmp	r2, r1
 8007896:	d02a      	beq.n	80078ee <_dtoa_r+0xb46>
 8007898:	4659      	mov	r1, fp
 800789a:	2300      	movs	r3, #0
 800789c:	220a      	movs	r2, #10
 800789e:	4628      	mov	r0, r5
 80078a0:	f000 fb16 	bl	8007ed0 <__multadd>
 80078a4:	45b0      	cmp	r8, r6
 80078a6:	4683      	mov	fp, r0
 80078a8:	f04f 0300 	mov.w	r3, #0
 80078ac:	f04f 020a 	mov.w	r2, #10
 80078b0:	4641      	mov	r1, r8
 80078b2:	4628      	mov	r0, r5
 80078b4:	d107      	bne.n	80078c6 <_dtoa_r+0xb1e>
 80078b6:	f000 fb0b 	bl	8007ed0 <__multadd>
 80078ba:	4680      	mov	r8, r0
 80078bc:	4606      	mov	r6, r0
 80078be:	9b08      	ldr	r3, [sp, #32]
 80078c0:	3301      	adds	r3, #1
 80078c2:	9308      	str	r3, [sp, #32]
 80078c4:	e775      	b.n	80077b2 <_dtoa_r+0xa0a>
 80078c6:	f000 fb03 	bl	8007ed0 <__multadd>
 80078ca:	4631      	mov	r1, r6
 80078cc:	4680      	mov	r8, r0
 80078ce:	2300      	movs	r3, #0
 80078d0:	220a      	movs	r2, #10
 80078d2:	4628      	mov	r0, r5
 80078d4:	f000 fafc 	bl	8007ed0 <__multadd>
 80078d8:	4606      	mov	r6, r0
 80078da:	e7f0      	b.n	80078be <_dtoa_r+0xb16>
 80078dc:	f1b9 0f00 	cmp.w	r9, #0
 80078e0:	bfcc      	ite	gt
 80078e2:	464f      	movgt	r7, r9
 80078e4:	2701      	movle	r7, #1
 80078e6:	f04f 0800 	mov.w	r8, #0
 80078ea:	9a03      	ldr	r2, [sp, #12]
 80078ec:	4417      	add	r7, r2
 80078ee:	4659      	mov	r1, fp
 80078f0:	2201      	movs	r2, #1
 80078f2:	4628      	mov	r0, r5
 80078f4:	9308      	str	r3, [sp, #32]
 80078f6:	f000 fc97 	bl	8008228 <__lshift>
 80078fa:	4621      	mov	r1, r4
 80078fc:	4683      	mov	fp, r0
 80078fe:	f000 fd03 	bl	8008308 <__mcmp>
 8007902:	2800      	cmp	r0, #0
 8007904:	dcb2      	bgt.n	800786c <_dtoa_r+0xac4>
 8007906:	d102      	bne.n	800790e <_dtoa_r+0xb66>
 8007908:	9b08      	ldr	r3, [sp, #32]
 800790a:	07db      	lsls	r3, r3, #31
 800790c:	d4ae      	bmi.n	800786c <_dtoa_r+0xac4>
 800790e:	463b      	mov	r3, r7
 8007910:	461f      	mov	r7, r3
 8007912:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007916:	2a30      	cmp	r2, #48	; 0x30
 8007918:	d0fa      	beq.n	8007910 <_dtoa_r+0xb68>
 800791a:	e6f9      	b.n	8007710 <_dtoa_r+0x968>
 800791c:	9a03      	ldr	r2, [sp, #12]
 800791e:	429a      	cmp	r2, r3
 8007920:	d1a5      	bne.n	800786e <_dtoa_r+0xac6>
 8007922:	2331      	movs	r3, #49	; 0x31
 8007924:	f10a 0a01 	add.w	sl, sl, #1
 8007928:	e779      	b.n	800781e <_dtoa_r+0xa76>
 800792a:	4b14      	ldr	r3, [pc, #80]	; (800797c <_dtoa_r+0xbd4>)
 800792c:	f7ff baa8 	b.w	8006e80 <_dtoa_r+0xd8>
 8007930:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007932:	2b00      	cmp	r3, #0
 8007934:	f47f aa81 	bne.w	8006e3a <_dtoa_r+0x92>
 8007938:	4b11      	ldr	r3, [pc, #68]	; (8007980 <_dtoa_r+0xbd8>)
 800793a:	f7ff baa1 	b.w	8006e80 <_dtoa_r+0xd8>
 800793e:	f1b9 0f00 	cmp.w	r9, #0
 8007942:	dc03      	bgt.n	800794c <_dtoa_r+0xba4>
 8007944:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007946:	2b02      	cmp	r3, #2
 8007948:	f73f aecb 	bgt.w	80076e2 <_dtoa_r+0x93a>
 800794c:	9f03      	ldr	r7, [sp, #12]
 800794e:	4621      	mov	r1, r4
 8007950:	4658      	mov	r0, fp
 8007952:	f7ff f99d 	bl	8006c90 <quorem>
 8007956:	9a03      	ldr	r2, [sp, #12]
 8007958:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800795c:	f807 3b01 	strb.w	r3, [r7], #1
 8007960:	1aba      	subs	r2, r7, r2
 8007962:	4591      	cmp	r9, r2
 8007964:	ddba      	ble.n	80078dc <_dtoa_r+0xb34>
 8007966:	4659      	mov	r1, fp
 8007968:	2300      	movs	r3, #0
 800796a:	220a      	movs	r2, #10
 800796c:	4628      	mov	r0, r5
 800796e:	f000 faaf 	bl	8007ed0 <__multadd>
 8007972:	4683      	mov	fp, r0
 8007974:	e7eb      	b.n	800794e <_dtoa_r+0xba6>
 8007976:	bf00      	nop
 8007978:	08008e4b 	.word	0x08008e4b
 800797c:	08008da8 	.word	0x08008da8
 8007980:	08008dcc 	.word	0x08008dcc

08007984 <__sflush_r>:
 8007984:	898a      	ldrh	r2, [r1, #12]
 8007986:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007988:	4605      	mov	r5, r0
 800798a:	0710      	lsls	r0, r2, #28
 800798c:	460c      	mov	r4, r1
 800798e:	d457      	bmi.n	8007a40 <__sflush_r+0xbc>
 8007990:	684b      	ldr	r3, [r1, #4]
 8007992:	2b00      	cmp	r3, #0
 8007994:	dc04      	bgt.n	80079a0 <__sflush_r+0x1c>
 8007996:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007998:	2b00      	cmp	r3, #0
 800799a:	dc01      	bgt.n	80079a0 <__sflush_r+0x1c>
 800799c:	2000      	movs	r0, #0
 800799e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80079a2:	2e00      	cmp	r6, #0
 80079a4:	d0fa      	beq.n	800799c <__sflush_r+0x18>
 80079a6:	2300      	movs	r3, #0
 80079a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80079ac:	682f      	ldr	r7, [r5, #0]
 80079ae:	602b      	str	r3, [r5, #0]
 80079b0:	d032      	beq.n	8007a18 <__sflush_r+0x94>
 80079b2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80079b4:	89a3      	ldrh	r3, [r4, #12]
 80079b6:	075a      	lsls	r2, r3, #29
 80079b8:	d505      	bpl.n	80079c6 <__sflush_r+0x42>
 80079ba:	6863      	ldr	r3, [r4, #4]
 80079bc:	1ac0      	subs	r0, r0, r3
 80079be:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80079c0:	b10b      	cbz	r3, 80079c6 <__sflush_r+0x42>
 80079c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80079c4:	1ac0      	subs	r0, r0, r3
 80079c6:	2300      	movs	r3, #0
 80079c8:	4602      	mov	r2, r0
 80079ca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80079cc:	4628      	mov	r0, r5
 80079ce:	6a21      	ldr	r1, [r4, #32]
 80079d0:	47b0      	blx	r6
 80079d2:	1c43      	adds	r3, r0, #1
 80079d4:	89a3      	ldrh	r3, [r4, #12]
 80079d6:	d106      	bne.n	80079e6 <__sflush_r+0x62>
 80079d8:	6829      	ldr	r1, [r5, #0]
 80079da:	291d      	cmp	r1, #29
 80079dc:	d82c      	bhi.n	8007a38 <__sflush_r+0xb4>
 80079de:	4a29      	ldr	r2, [pc, #164]	; (8007a84 <__sflush_r+0x100>)
 80079e0:	40ca      	lsrs	r2, r1
 80079e2:	07d6      	lsls	r6, r2, #31
 80079e4:	d528      	bpl.n	8007a38 <__sflush_r+0xb4>
 80079e6:	2200      	movs	r2, #0
 80079e8:	6062      	str	r2, [r4, #4]
 80079ea:	6922      	ldr	r2, [r4, #16]
 80079ec:	04d9      	lsls	r1, r3, #19
 80079ee:	6022      	str	r2, [r4, #0]
 80079f0:	d504      	bpl.n	80079fc <__sflush_r+0x78>
 80079f2:	1c42      	adds	r2, r0, #1
 80079f4:	d101      	bne.n	80079fa <__sflush_r+0x76>
 80079f6:	682b      	ldr	r3, [r5, #0]
 80079f8:	b903      	cbnz	r3, 80079fc <__sflush_r+0x78>
 80079fa:	6560      	str	r0, [r4, #84]	; 0x54
 80079fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80079fe:	602f      	str	r7, [r5, #0]
 8007a00:	2900      	cmp	r1, #0
 8007a02:	d0cb      	beq.n	800799c <__sflush_r+0x18>
 8007a04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007a08:	4299      	cmp	r1, r3
 8007a0a:	d002      	beq.n	8007a12 <__sflush_r+0x8e>
 8007a0c:	4628      	mov	r0, r5
 8007a0e:	f000 fd93 	bl	8008538 <_free_r>
 8007a12:	2000      	movs	r0, #0
 8007a14:	6360      	str	r0, [r4, #52]	; 0x34
 8007a16:	e7c2      	b.n	800799e <__sflush_r+0x1a>
 8007a18:	6a21      	ldr	r1, [r4, #32]
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	4628      	mov	r0, r5
 8007a1e:	47b0      	blx	r6
 8007a20:	1c41      	adds	r1, r0, #1
 8007a22:	d1c7      	bne.n	80079b4 <__sflush_r+0x30>
 8007a24:	682b      	ldr	r3, [r5, #0]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d0c4      	beq.n	80079b4 <__sflush_r+0x30>
 8007a2a:	2b1d      	cmp	r3, #29
 8007a2c:	d001      	beq.n	8007a32 <__sflush_r+0xae>
 8007a2e:	2b16      	cmp	r3, #22
 8007a30:	d101      	bne.n	8007a36 <__sflush_r+0xb2>
 8007a32:	602f      	str	r7, [r5, #0]
 8007a34:	e7b2      	b.n	800799c <__sflush_r+0x18>
 8007a36:	89a3      	ldrh	r3, [r4, #12]
 8007a38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a3c:	81a3      	strh	r3, [r4, #12]
 8007a3e:	e7ae      	b.n	800799e <__sflush_r+0x1a>
 8007a40:	690f      	ldr	r7, [r1, #16]
 8007a42:	2f00      	cmp	r7, #0
 8007a44:	d0aa      	beq.n	800799c <__sflush_r+0x18>
 8007a46:	0793      	lsls	r3, r2, #30
 8007a48:	bf18      	it	ne
 8007a4a:	2300      	movne	r3, #0
 8007a4c:	680e      	ldr	r6, [r1, #0]
 8007a4e:	bf08      	it	eq
 8007a50:	694b      	ldreq	r3, [r1, #20]
 8007a52:	1bf6      	subs	r6, r6, r7
 8007a54:	600f      	str	r7, [r1, #0]
 8007a56:	608b      	str	r3, [r1, #8]
 8007a58:	2e00      	cmp	r6, #0
 8007a5a:	dd9f      	ble.n	800799c <__sflush_r+0x18>
 8007a5c:	4633      	mov	r3, r6
 8007a5e:	463a      	mov	r2, r7
 8007a60:	4628      	mov	r0, r5
 8007a62:	6a21      	ldr	r1, [r4, #32]
 8007a64:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007a68:	47e0      	blx	ip
 8007a6a:	2800      	cmp	r0, #0
 8007a6c:	dc06      	bgt.n	8007a7c <__sflush_r+0xf8>
 8007a6e:	89a3      	ldrh	r3, [r4, #12]
 8007a70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a78:	81a3      	strh	r3, [r4, #12]
 8007a7a:	e790      	b.n	800799e <__sflush_r+0x1a>
 8007a7c:	4407      	add	r7, r0
 8007a7e:	1a36      	subs	r6, r6, r0
 8007a80:	e7ea      	b.n	8007a58 <__sflush_r+0xd4>
 8007a82:	bf00      	nop
 8007a84:	20400001 	.word	0x20400001

08007a88 <_fflush_r>:
 8007a88:	b538      	push	{r3, r4, r5, lr}
 8007a8a:	690b      	ldr	r3, [r1, #16]
 8007a8c:	4605      	mov	r5, r0
 8007a8e:	460c      	mov	r4, r1
 8007a90:	b913      	cbnz	r3, 8007a98 <_fflush_r+0x10>
 8007a92:	2500      	movs	r5, #0
 8007a94:	4628      	mov	r0, r5
 8007a96:	bd38      	pop	{r3, r4, r5, pc}
 8007a98:	b118      	cbz	r0, 8007aa2 <_fflush_r+0x1a>
 8007a9a:	6983      	ldr	r3, [r0, #24]
 8007a9c:	b90b      	cbnz	r3, 8007aa2 <_fflush_r+0x1a>
 8007a9e:	f000 f887 	bl	8007bb0 <__sinit>
 8007aa2:	4b14      	ldr	r3, [pc, #80]	; (8007af4 <_fflush_r+0x6c>)
 8007aa4:	429c      	cmp	r4, r3
 8007aa6:	d11b      	bne.n	8007ae0 <_fflush_r+0x58>
 8007aa8:	686c      	ldr	r4, [r5, #4]
 8007aaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d0ef      	beq.n	8007a92 <_fflush_r+0xa>
 8007ab2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007ab4:	07d0      	lsls	r0, r2, #31
 8007ab6:	d404      	bmi.n	8007ac2 <_fflush_r+0x3a>
 8007ab8:	0599      	lsls	r1, r3, #22
 8007aba:	d402      	bmi.n	8007ac2 <_fflush_r+0x3a>
 8007abc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007abe:	f000 f91a 	bl	8007cf6 <__retarget_lock_acquire_recursive>
 8007ac2:	4628      	mov	r0, r5
 8007ac4:	4621      	mov	r1, r4
 8007ac6:	f7ff ff5d 	bl	8007984 <__sflush_r>
 8007aca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007acc:	4605      	mov	r5, r0
 8007ace:	07da      	lsls	r2, r3, #31
 8007ad0:	d4e0      	bmi.n	8007a94 <_fflush_r+0xc>
 8007ad2:	89a3      	ldrh	r3, [r4, #12]
 8007ad4:	059b      	lsls	r3, r3, #22
 8007ad6:	d4dd      	bmi.n	8007a94 <_fflush_r+0xc>
 8007ad8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ada:	f000 f90d 	bl	8007cf8 <__retarget_lock_release_recursive>
 8007ade:	e7d9      	b.n	8007a94 <_fflush_r+0xc>
 8007ae0:	4b05      	ldr	r3, [pc, #20]	; (8007af8 <_fflush_r+0x70>)
 8007ae2:	429c      	cmp	r4, r3
 8007ae4:	d101      	bne.n	8007aea <_fflush_r+0x62>
 8007ae6:	68ac      	ldr	r4, [r5, #8]
 8007ae8:	e7df      	b.n	8007aaa <_fflush_r+0x22>
 8007aea:	4b04      	ldr	r3, [pc, #16]	; (8007afc <_fflush_r+0x74>)
 8007aec:	429c      	cmp	r4, r3
 8007aee:	bf08      	it	eq
 8007af0:	68ec      	ldreq	r4, [r5, #12]
 8007af2:	e7da      	b.n	8007aaa <_fflush_r+0x22>
 8007af4:	08008e7c 	.word	0x08008e7c
 8007af8:	08008e9c 	.word	0x08008e9c
 8007afc:	08008e5c 	.word	0x08008e5c

08007b00 <std>:
 8007b00:	2300      	movs	r3, #0
 8007b02:	b510      	push	{r4, lr}
 8007b04:	4604      	mov	r4, r0
 8007b06:	e9c0 3300 	strd	r3, r3, [r0]
 8007b0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007b0e:	6083      	str	r3, [r0, #8]
 8007b10:	8181      	strh	r1, [r0, #12]
 8007b12:	6643      	str	r3, [r0, #100]	; 0x64
 8007b14:	81c2      	strh	r2, [r0, #14]
 8007b16:	6183      	str	r3, [r0, #24]
 8007b18:	4619      	mov	r1, r3
 8007b1a:	2208      	movs	r2, #8
 8007b1c:	305c      	adds	r0, #92	; 0x5c
 8007b1e:	f7fe faed 	bl	80060fc <memset>
 8007b22:	4b05      	ldr	r3, [pc, #20]	; (8007b38 <std+0x38>)
 8007b24:	6224      	str	r4, [r4, #32]
 8007b26:	6263      	str	r3, [r4, #36]	; 0x24
 8007b28:	4b04      	ldr	r3, [pc, #16]	; (8007b3c <std+0x3c>)
 8007b2a:	62a3      	str	r3, [r4, #40]	; 0x28
 8007b2c:	4b04      	ldr	r3, [pc, #16]	; (8007b40 <std+0x40>)
 8007b2e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007b30:	4b04      	ldr	r3, [pc, #16]	; (8007b44 <std+0x44>)
 8007b32:	6323      	str	r3, [r4, #48]	; 0x30
 8007b34:	bd10      	pop	{r4, pc}
 8007b36:	bf00      	nop
 8007b38:	08008a51 	.word	0x08008a51
 8007b3c:	08008a73 	.word	0x08008a73
 8007b40:	08008aab 	.word	0x08008aab
 8007b44:	08008acf 	.word	0x08008acf

08007b48 <_cleanup_r>:
 8007b48:	4901      	ldr	r1, [pc, #4]	; (8007b50 <_cleanup_r+0x8>)
 8007b4a:	f000 b8af 	b.w	8007cac <_fwalk_reent>
 8007b4e:	bf00      	nop
 8007b50:	08007a89 	.word	0x08007a89

08007b54 <__sfmoreglue>:
 8007b54:	2268      	movs	r2, #104	; 0x68
 8007b56:	b570      	push	{r4, r5, r6, lr}
 8007b58:	1e4d      	subs	r5, r1, #1
 8007b5a:	4355      	muls	r5, r2
 8007b5c:	460e      	mov	r6, r1
 8007b5e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007b62:	f000 fd51 	bl	8008608 <_malloc_r>
 8007b66:	4604      	mov	r4, r0
 8007b68:	b140      	cbz	r0, 8007b7c <__sfmoreglue+0x28>
 8007b6a:	2100      	movs	r1, #0
 8007b6c:	e9c0 1600 	strd	r1, r6, [r0]
 8007b70:	300c      	adds	r0, #12
 8007b72:	60a0      	str	r0, [r4, #8]
 8007b74:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007b78:	f7fe fac0 	bl	80060fc <memset>
 8007b7c:	4620      	mov	r0, r4
 8007b7e:	bd70      	pop	{r4, r5, r6, pc}

08007b80 <__sfp_lock_acquire>:
 8007b80:	4801      	ldr	r0, [pc, #4]	; (8007b88 <__sfp_lock_acquire+0x8>)
 8007b82:	f000 b8b8 	b.w	8007cf6 <__retarget_lock_acquire_recursive>
 8007b86:	bf00      	nop
 8007b88:	2000029d 	.word	0x2000029d

08007b8c <__sfp_lock_release>:
 8007b8c:	4801      	ldr	r0, [pc, #4]	; (8007b94 <__sfp_lock_release+0x8>)
 8007b8e:	f000 b8b3 	b.w	8007cf8 <__retarget_lock_release_recursive>
 8007b92:	bf00      	nop
 8007b94:	2000029d 	.word	0x2000029d

08007b98 <__sinit_lock_acquire>:
 8007b98:	4801      	ldr	r0, [pc, #4]	; (8007ba0 <__sinit_lock_acquire+0x8>)
 8007b9a:	f000 b8ac 	b.w	8007cf6 <__retarget_lock_acquire_recursive>
 8007b9e:	bf00      	nop
 8007ba0:	2000029e 	.word	0x2000029e

08007ba4 <__sinit_lock_release>:
 8007ba4:	4801      	ldr	r0, [pc, #4]	; (8007bac <__sinit_lock_release+0x8>)
 8007ba6:	f000 b8a7 	b.w	8007cf8 <__retarget_lock_release_recursive>
 8007baa:	bf00      	nop
 8007bac:	2000029e 	.word	0x2000029e

08007bb0 <__sinit>:
 8007bb0:	b510      	push	{r4, lr}
 8007bb2:	4604      	mov	r4, r0
 8007bb4:	f7ff fff0 	bl	8007b98 <__sinit_lock_acquire>
 8007bb8:	69a3      	ldr	r3, [r4, #24]
 8007bba:	b11b      	cbz	r3, 8007bc4 <__sinit+0x14>
 8007bbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007bc0:	f7ff bff0 	b.w	8007ba4 <__sinit_lock_release>
 8007bc4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007bc8:	6523      	str	r3, [r4, #80]	; 0x50
 8007bca:	4b13      	ldr	r3, [pc, #76]	; (8007c18 <__sinit+0x68>)
 8007bcc:	4a13      	ldr	r2, [pc, #76]	; (8007c1c <__sinit+0x6c>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	62a2      	str	r2, [r4, #40]	; 0x28
 8007bd2:	42a3      	cmp	r3, r4
 8007bd4:	bf08      	it	eq
 8007bd6:	2301      	moveq	r3, #1
 8007bd8:	4620      	mov	r0, r4
 8007bda:	bf08      	it	eq
 8007bdc:	61a3      	streq	r3, [r4, #24]
 8007bde:	f000 f81f 	bl	8007c20 <__sfp>
 8007be2:	6060      	str	r0, [r4, #4]
 8007be4:	4620      	mov	r0, r4
 8007be6:	f000 f81b 	bl	8007c20 <__sfp>
 8007bea:	60a0      	str	r0, [r4, #8]
 8007bec:	4620      	mov	r0, r4
 8007bee:	f000 f817 	bl	8007c20 <__sfp>
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	2104      	movs	r1, #4
 8007bf6:	60e0      	str	r0, [r4, #12]
 8007bf8:	6860      	ldr	r0, [r4, #4]
 8007bfa:	f7ff ff81 	bl	8007b00 <std>
 8007bfe:	2201      	movs	r2, #1
 8007c00:	2109      	movs	r1, #9
 8007c02:	68a0      	ldr	r0, [r4, #8]
 8007c04:	f7ff ff7c 	bl	8007b00 <std>
 8007c08:	2202      	movs	r2, #2
 8007c0a:	2112      	movs	r1, #18
 8007c0c:	68e0      	ldr	r0, [r4, #12]
 8007c0e:	f7ff ff77 	bl	8007b00 <std>
 8007c12:	2301      	movs	r3, #1
 8007c14:	61a3      	str	r3, [r4, #24]
 8007c16:	e7d1      	b.n	8007bbc <__sinit+0xc>
 8007c18:	08008d94 	.word	0x08008d94
 8007c1c:	08007b49 	.word	0x08007b49

08007c20 <__sfp>:
 8007c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c22:	4607      	mov	r7, r0
 8007c24:	f7ff ffac 	bl	8007b80 <__sfp_lock_acquire>
 8007c28:	4b1e      	ldr	r3, [pc, #120]	; (8007ca4 <__sfp+0x84>)
 8007c2a:	681e      	ldr	r6, [r3, #0]
 8007c2c:	69b3      	ldr	r3, [r6, #24]
 8007c2e:	b913      	cbnz	r3, 8007c36 <__sfp+0x16>
 8007c30:	4630      	mov	r0, r6
 8007c32:	f7ff ffbd 	bl	8007bb0 <__sinit>
 8007c36:	3648      	adds	r6, #72	; 0x48
 8007c38:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007c3c:	3b01      	subs	r3, #1
 8007c3e:	d503      	bpl.n	8007c48 <__sfp+0x28>
 8007c40:	6833      	ldr	r3, [r6, #0]
 8007c42:	b30b      	cbz	r3, 8007c88 <__sfp+0x68>
 8007c44:	6836      	ldr	r6, [r6, #0]
 8007c46:	e7f7      	b.n	8007c38 <__sfp+0x18>
 8007c48:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007c4c:	b9d5      	cbnz	r5, 8007c84 <__sfp+0x64>
 8007c4e:	4b16      	ldr	r3, [pc, #88]	; (8007ca8 <__sfp+0x88>)
 8007c50:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007c54:	60e3      	str	r3, [r4, #12]
 8007c56:	6665      	str	r5, [r4, #100]	; 0x64
 8007c58:	f000 f84c 	bl	8007cf4 <__retarget_lock_init_recursive>
 8007c5c:	f7ff ff96 	bl	8007b8c <__sfp_lock_release>
 8007c60:	2208      	movs	r2, #8
 8007c62:	4629      	mov	r1, r5
 8007c64:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007c68:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007c6c:	6025      	str	r5, [r4, #0]
 8007c6e:	61a5      	str	r5, [r4, #24]
 8007c70:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007c74:	f7fe fa42 	bl	80060fc <memset>
 8007c78:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007c7c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007c80:	4620      	mov	r0, r4
 8007c82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c84:	3468      	adds	r4, #104	; 0x68
 8007c86:	e7d9      	b.n	8007c3c <__sfp+0x1c>
 8007c88:	2104      	movs	r1, #4
 8007c8a:	4638      	mov	r0, r7
 8007c8c:	f7ff ff62 	bl	8007b54 <__sfmoreglue>
 8007c90:	4604      	mov	r4, r0
 8007c92:	6030      	str	r0, [r6, #0]
 8007c94:	2800      	cmp	r0, #0
 8007c96:	d1d5      	bne.n	8007c44 <__sfp+0x24>
 8007c98:	f7ff ff78 	bl	8007b8c <__sfp_lock_release>
 8007c9c:	230c      	movs	r3, #12
 8007c9e:	603b      	str	r3, [r7, #0]
 8007ca0:	e7ee      	b.n	8007c80 <__sfp+0x60>
 8007ca2:	bf00      	nop
 8007ca4:	08008d94 	.word	0x08008d94
 8007ca8:	ffff0001 	.word	0xffff0001

08007cac <_fwalk_reent>:
 8007cac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007cb0:	4606      	mov	r6, r0
 8007cb2:	4688      	mov	r8, r1
 8007cb4:	2700      	movs	r7, #0
 8007cb6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007cba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007cbe:	f1b9 0901 	subs.w	r9, r9, #1
 8007cc2:	d505      	bpl.n	8007cd0 <_fwalk_reent+0x24>
 8007cc4:	6824      	ldr	r4, [r4, #0]
 8007cc6:	2c00      	cmp	r4, #0
 8007cc8:	d1f7      	bne.n	8007cba <_fwalk_reent+0xe>
 8007cca:	4638      	mov	r0, r7
 8007ccc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007cd0:	89ab      	ldrh	r3, [r5, #12]
 8007cd2:	2b01      	cmp	r3, #1
 8007cd4:	d907      	bls.n	8007ce6 <_fwalk_reent+0x3a>
 8007cd6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007cda:	3301      	adds	r3, #1
 8007cdc:	d003      	beq.n	8007ce6 <_fwalk_reent+0x3a>
 8007cde:	4629      	mov	r1, r5
 8007ce0:	4630      	mov	r0, r6
 8007ce2:	47c0      	blx	r8
 8007ce4:	4307      	orrs	r7, r0
 8007ce6:	3568      	adds	r5, #104	; 0x68
 8007ce8:	e7e9      	b.n	8007cbe <_fwalk_reent+0x12>
	...

08007cec <_localeconv_r>:
 8007cec:	4800      	ldr	r0, [pc, #0]	; (8007cf0 <_localeconv_r+0x4>)
 8007cee:	4770      	bx	lr
 8007cf0:	20000160 	.word	0x20000160

08007cf4 <__retarget_lock_init_recursive>:
 8007cf4:	4770      	bx	lr

08007cf6 <__retarget_lock_acquire_recursive>:
 8007cf6:	4770      	bx	lr

08007cf8 <__retarget_lock_release_recursive>:
 8007cf8:	4770      	bx	lr

08007cfa <__swhatbuf_r>:
 8007cfa:	b570      	push	{r4, r5, r6, lr}
 8007cfc:	460e      	mov	r6, r1
 8007cfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d02:	4614      	mov	r4, r2
 8007d04:	2900      	cmp	r1, #0
 8007d06:	461d      	mov	r5, r3
 8007d08:	b096      	sub	sp, #88	; 0x58
 8007d0a:	da08      	bge.n	8007d1e <__swhatbuf_r+0x24>
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007d12:	602a      	str	r2, [r5, #0]
 8007d14:	061a      	lsls	r2, r3, #24
 8007d16:	d410      	bmi.n	8007d3a <__swhatbuf_r+0x40>
 8007d18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d1c:	e00e      	b.n	8007d3c <__swhatbuf_r+0x42>
 8007d1e:	466a      	mov	r2, sp
 8007d20:	f000 ff2c 	bl	8008b7c <_fstat_r>
 8007d24:	2800      	cmp	r0, #0
 8007d26:	dbf1      	blt.n	8007d0c <__swhatbuf_r+0x12>
 8007d28:	9a01      	ldr	r2, [sp, #4]
 8007d2a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007d2e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007d32:	425a      	negs	r2, r3
 8007d34:	415a      	adcs	r2, r3
 8007d36:	602a      	str	r2, [r5, #0]
 8007d38:	e7ee      	b.n	8007d18 <__swhatbuf_r+0x1e>
 8007d3a:	2340      	movs	r3, #64	; 0x40
 8007d3c:	2000      	movs	r0, #0
 8007d3e:	6023      	str	r3, [r4, #0]
 8007d40:	b016      	add	sp, #88	; 0x58
 8007d42:	bd70      	pop	{r4, r5, r6, pc}

08007d44 <__smakebuf_r>:
 8007d44:	898b      	ldrh	r3, [r1, #12]
 8007d46:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007d48:	079d      	lsls	r5, r3, #30
 8007d4a:	4606      	mov	r6, r0
 8007d4c:	460c      	mov	r4, r1
 8007d4e:	d507      	bpl.n	8007d60 <__smakebuf_r+0x1c>
 8007d50:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007d54:	6023      	str	r3, [r4, #0]
 8007d56:	6123      	str	r3, [r4, #16]
 8007d58:	2301      	movs	r3, #1
 8007d5a:	6163      	str	r3, [r4, #20]
 8007d5c:	b002      	add	sp, #8
 8007d5e:	bd70      	pop	{r4, r5, r6, pc}
 8007d60:	466a      	mov	r2, sp
 8007d62:	ab01      	add	r3, sp, #4
 8007d64:	f7ff ffc9 	bl	8007cfa <__swhatbuf_r>
 8007d68:	9900      	ldr	r1, [sp, #0]
 8007d6a:	4605      	mov	r5, r0
 8007d6c:	4630      	mov	r0, r6
 8007d6e:	f000 fc4b 	bl	8008608 <_malloc_r>
 8007d72:	b948      	cbnz	r0, 8007d88 <__smakebuf_r+0x44>
 8007d74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d78:	059a      	lsls	r2, r3, #22
 8007d7a:	d4ef      	bmi.n	8007d5c <__smakebuf_r+0x18>
 8007d7c:	f023 0303 	bic.w	r3, r3, #3
 8007d80:	f043 0302 	orr.w	r3, r3, #2
 8007d84:	81a3      	strh	r3, [r4, #12]
 8007d86:	e7e3      	b.n	8007d50 <__smakebuf_r+0xc>
 8007d88:	4b0d      	ldr	r3, [pc, #52]	; (8007dc0 <__smakebuf_r+0x7c>)
 8007d8a:	62b3      	str	r3, [r6, #40]	; 0x28
 8007d8c:	89a3      	ldrh	r3, [r4, #12]
 8007d8e:	6020      	str	r0, [r4, #0]
 8007d90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d94:	81a3      	strh	r3, [r4, #12]
 8007d96:	9b00      	ldr	r3, [sp, #0]
 8007d98:	6120      	str	r0, [r4, #16]
 8007d9a:	6163      	str	r3, [r4, #20]
 8007d9c:	9b01      	ldr	r3, [sp, #4]
 8007d9e:	b15b      	cbz	r3, 8007db8 <__smakebuf_r+0x74>
 8007da0:	4630      	mov	r0, r6
 8007da2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007da6:	f000 fefb 	bl	8008ba0 <_isatty_r>
 8007daa:	b128      	cbz	r0, 8007db8 <__smakebuf_r+0x74>
 8007dac:	89a3      	ldrh	r3, [r4, #12]
 8007dae:	f023 0303 	bic.w	r3, r3, #3
 8007db2:	f043 0301 	orr.w	r3, r3, #1
 8007db6:	81a3      	strh	r3, [r4, #12]
 8007db8:	89a0      	ldrh	r0, [r4, #12]
 8007dba:	4305      	orrs	r5, r0
 8007dbc:	81a5      	strh	r5, [r4, #12]
 8007dbe:	e7cd      	b.n	8007d5c <__smakebuf_r+0x18>
 8007dc0:	08007b49 	.word	0x08007b49

08007dc4 <malloc>:
 8007dc4:	4b02      	ldr	r3, [pc, #8]	; (8007dd0 <malloc+0xc>)
 8007dc6:	4601      	mov	r1, r0
 8007dc8:	6818      	ldr	r0, [r3, #0]
 8007dca:	f000 bc1d 	b.w	8008608 <_malloc_r>
 8007dce:	bf00      	nop
 8007dd0:	2000000c 	.word	0x2000000c

08007dd4 <memchr>:
 8007dd4:	4603      	mov	r3, r0
 8007dd6:	b510      	push	{r4, lr}
 8007dd8:	b2c9      	uxtb	r1, r1
 8007dda:	4402      	add	r2, r0
 8007ddc:	4293      	cmp	r3, r2
 8007dde:	4618      	mov	r0, r3
 8007de0:	d101      	bne.n	8007de6 <memchr+0x12>
 8007de2:	2000      	movs	r0, #0
 8007de4:	e003      	b.n	8007dee <memchr+0x1a>
 8007de6:	7804      	ldrb	r4, [r0, #0]
 8007de8:	3301      	adds	r3, #1
 8007dea:	428c      	cmp	r4, r1
 8007dec:	d1f6      	bne.n	8007ddc <memchr+0x8>
 8007dee:	bd10      	pop	{r4, pc}

08007df0 <memcpy>:
 8007df0:	440a      	add	r2, r1
 8007df2:	4291      	cmp	r1, r2
 8007df4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007df8:	d100      	bne.n	8007dfc <memcpy+0xc>
 8007dfa:	4770      	bx	lr
 8007dfc:	b510      	push	{r4, lr}
 8007dfe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e02:	4291      	cmp	r1, r2
 8007e04:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e08:	d1f9      	bne.n	8007dfe <memcpy+0xe>
 8007e0a:	bd10      	pop	{r4, pc}

08007e0c <_Balloc>:
 8007e0c:	b570      	push	{r4, r5, r6, lr}
 8007e0e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007e10:	4604      	mov	r4, r0
 8007e12:	460d      	mov	r5, r1
 8007e14:	b976      	cbnz	r6, 8007e34 <_Balloc+0x28>
 8007e16:	2010      	movs	r0, #16
 8007e18:	f7ff ffd4 	bl	8007dc4 <malloc>
 8007e1c:	4602      	mov	r2, r0
 8007e1e:	6260      	str	r0, [r4, #36]	; 0x24
 8007e20:	b920      	cbnz	r0, 8007e2c <_Balloc+0x20>
 8007e22:	2166      	movs	r1, #102	; 0x66
 8007e24:	4b17      	ldr	r3, [pc, #92]	; (8007e84 <_Balloc+0x78>)
 8007e26:	4818      	ldr	r0, [pc, #96]	; (8007e88 <_Balloc+0x7c>)
 8007e28:	f000 fe68 	bl	8008afc <__assert_func>
 8007e2c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007e30:	6006      	str	r6, [r0, #0]
 8007e32:	60c6      	str	r6, [r0, #12]
 8007e34:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007e36:	68f3      	ldr	r3, [r6, #12]
 8007e38:	b183      	cbz	r3, 8007e5c <_Balloc+0x50>
 8007e3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e3c:	68db      	ldr	r3, [r3, #12]
 8007e3e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007e42:	b9b8      	cbnz	r0, 8007e74 <_Balloc+0x68>
 8007e44:	2101      	movs	r1, #1
 8007e46:	fa01 f605 	lsl.w	r6, r1, r5
 8007e4a:	1d72      	adds	r2, r6, #5
 8007e4c:	4620      	mov	r0, r4
 8007e4e:	0092      	lsls	r2, r2, #2
 8007e50:	f000 fb5e 	bl	8008510 <_calloc_r>
 8007e54:	b160      	cbz	r0, 8007e70 <_Balloc+0x64>
 8007e56:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007e5a:	e00e      	b.n	8007e7a <_Balloc+0x6e>
 8007e5c:	2221      	movs	r2, #33	; 0x21
 8007e5e:	2104      	movs	r1, #4
 8007e60:	4620      	mov	r0, r4
 8007e62:	f000 fb55 	bl	8008510 <_calloc_r>
 8007e66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e68:	60f0      	str	r0, [r6, #12]
 8007e6a:	68db      	ldr	r3, [r3, #12]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d1e4      	bne.n	8007e3a <_Balloc+0x2e>
 8007e70:	2000      	movs	r0, #0
 8007e72:	bd70      	pop	{r4, r5, r6, pc}
 8007e74:	6802      	ldr	r2, [r0, #0]
 8007e76:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007e80:	e7f7      	b.n	8007e72 <_Balloc+0x66>
 8007e82:	bf00      	nop
 8007e84:	08008dd9 	.word	0x08008dd9
 8007e88:	08008ebc 	.word	0x08008ebc

08007e8c <_Bfree>:
 8007e8c:	b570      	push	{r4, r5, r6, lr}
 8007e8e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007e90:	4605      	mov	r5, r0
 8007e92:	460c      	mov	r4, r1
 8007e94:	b976      	cbnz	r6, 8007eb4 <_Bfree+0x28>
 8007e96:	2010      	movs	r0, #16
 8007e98:	f7ff ff94 	bl	8007dc4 <malloc>
 8007e9c:	4602      	mov	r2, r0
 8007e9e:	6268      	str	r0, [r5, #36]	; 0x24
 8007ea0:	b920      	cbnz	r0, 8007eac <_Bfree+0x20>
 8007ea2:	218a      	movs	r1, #138	; 0x8a
 8007ea4:	4b08      	ldr	r3, [pc, #32]	; (8007ec8 <_Bfree+0x3c>)
 8007ea6:	4809      	ldr	r0, [pc, #36]	; (8007ecc <_Bfree+0x40>)
 8007ea8:	f000 fe28 	bl	8008afc <__assert_func>
 8007eac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007eb0:	6006      	str	r6, [r0, #0]
 8007eb2:	60c6      	str	r6, [r0, #12]
 8007eb4:	b13c      	cbz	r4, 8007ec6 <_Bfree+0x3a>
 8007eb6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007eb8:	6862      	ldr	r2, [r4, #4]
 8007eba:	68db      	ldr	r3, [r3, #12]
 8007ebc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007ec0:	6021      	str	r1, [r4, #0]
 8007ec2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007ec6:	bd70      	pop	{r4, r5, r6, pc}
 8007ec8:	08008dd9 	.word	0x08008dd9
 8007ecc:	08008ebc 	.word	0x08008ebc

08007ed0 <__multadd>:
 8007ed0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ed4:	4607      	mov	r7, r0
 8007ed6:	460c      	mov	r4, r1
 8007ed8:	461e      	mov	r6, r3
 8007eda:	2000      	movs	r0, #0
 8007edc:	690d      	ldr	r5, [r1, #16]
 8007ede:	f101 0c14 	add.w	ip, r1, #20
 8007ee2:	f8dc 3000 	ldr.w	r3, [ip]
 8007ee6:	3001      	adds	r0, #1
 8007ee8:	b299      	uxth	r1, r3
 8007eea:	fb02 6101 	mla	r1, r2, r1, r6
 8007eee:	0c1e      	lsrs	r6, r3, #16
 8007ef0:	0c0b      	lsrs	r3, r1, #16
 8007ef2:	fb02 3306 	mla	r3, r2, r6, r3
 8007ef6:	b289      	uxth	r1, r1
 8007ef8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007efc:	4285      	cmp	r5, r0
 8007efe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007f02:	f84c 1b04 	str.w	r1, [ip], #4
 8007f06:	dcec      	bgt.n	8007ee2 <__multadd+0x12>
 8007f08:	b30e      	cbz	r6, 8007f4e <__multadd+0x7e>
 8007f0a:	68a3      	ldr	r3, [r4, #8]
 8007f0c:	42ab      	cmp	r3, r5
 8007f0e:	dc19      	bgt.n	8007f44 <__multadd+0x74>
 8007f10:	6861      	ldr	r1, [r4, #4]
 8007f12:	4638      	mov	r0, r7
 8007f14:	3101      	adds	r1, #1
 8007f16:	f7ff ff79 	bl	8007e0c <_Balloc>
 8007f1a:	4680      	mov	r8, r0
 8007f1c:	b928      	cbnz	r0, 8007f2a <__multadd+0x5a>
 8007f1e:	4602      	mov	r2, r0
 8007f20:	21b5      	movs	r1, #181	; 0xb5
 8007f22:	4b0c      	ldr	r3, [pc, #48]	; (8007f54 <__multadd+0x84>)
 8007f24:	480c      	ldr	r0, [pc, #48]	; (8007f58 <__multadd+0x88>)
 8007f26:	f000 fde9 	bl	8008afc <__assert_func>
 8007f2a:	6922      	ldr	r2, [r4, #16]
 8007f2c:	f104 010c 	add.w	r1, r4, #12
 8007f30:	3202      	adds	r2, #2
 8007f32:	0092      	lsls	r2, r2, #2
 8007f34:	300c      	adds	r0, #12
 8007f36:	f7ff ff5b 	bl	8007df0 <memcpy>
 8007f3a:	4621      	mov	r1, r4
 8007f3c:	4638      	mov	r0, r7
 8007f3e:	f7ff ffa5 	bl	8007e8c <_Bfree>
 8007f42:	4644      	mov	r4, r8
 8007f44:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007f48:	3501      	adds	r5, #1
 8007f4a:	615e      	str	r6, [r3, #20]
 8007f4c:	6125      	str	r5, [r4, #16]
 8007f4e:	4620      	mov	r0, r4
 8007f50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f54:	08008e4b 	.word	0x08008e4b
 8007f58:	08008ebc 	.word	0x08008ebc

08007f5c <__hi0bits>:
 8007f5c:	0c02      	lsrs	r2, r0, #16
 8007f5e:	0412      	lsls	r2, r2, #16
 8007f60:	4603      	mov	r3, r0
 8007f62:	b9ca      	cbnz	r2, 8007f98 <__hi0bits+0x3c>
 8007f64:	0403      	lsls	r3, r0, #16
 8007f66:	2010      	movs	r0, #16
 8007f68:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007f6c:	bf04      	itt	eq
 8007f6e:	021b      	lsleq	r3, r3, #8
 8007f70:	3008      	addeq	r0, #8
 8007f72:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007f76:	bf04      	itt	eq
 8007f78:	011b      	lsleq	r3, r3, #4
 8007f7a:	3004      	addeq	r0, #4
 8007f7c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007f80:	bf04      	itt	eq
 8007f82:	009b      	lsleq	r3, r3, #2
 8007f84:	3002      	addeq	r0, #2
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	db05      	blt.n	8007f96 <__hi0bits+0x3a>
 8007f8a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8007f8e:	f100 0001 	add.w	r0, r0, #1
 8007f92:	bf08      	it	eq
 8007f94:	2020      	moveq	r0, #32
 8007f96:	4770      	bx	lr
 8007f98:	2000      	movs	r0, #0
 8007f9a:	e7e5      	b.n	8007f68 <__hi0bits+0xc>

08007f9c <__lo0bits>:
 8007f9c:	6803      	ldr	r3, [r0, #0]
 8007f9e:	4602      	mov	r2, r0
 8007fa0:	f013 0007 	ands.w	r0, r3, #7
 8007fa4:	d00b      	beq.n	8007fbe <__lo0bits+0x22>
 8007fa6:	07d9      	lsls	r1, r3, #31
 8007fa8:	d421      	bmi.n	8007fee <__lo0bits+0x52>
 8007faa:	0798      	lsls	r0, r3, #30
 8007fac:	bf49      	itett	mi
 8007fae:	085b      	lsrmi	r3, r3, #1
 8007fb0:	089b      	lsrpl	r3, r3, #2
 8007fb2:	2001      	movmi	r0, #1
 8007fb4:	6013      	strmi	r3, [r2, #0]
 8007fb6:	bf5c      	itt	pl
 8007fb8:	2002      	movpl	r0, #2
 8007fba:	6013      	strpl	r3, [r2, #0]
 8007fbc:	4770      	bx	lr
 8007fbe:	b299      	uxth	r1, r3
 8007fc0:	b909      	cbnz	r1, 8007fc6 <__lo0bits+0x2a>
 8007fc2:	2010      	movs	r0, #16
 8007fc4:	0c1b      	lsrs	r3, r3, #16
 8007fc6:	b2d9      	uxtb	r1, r3
 8007fc8:	b909      	cbnz	r1, 8007fce <__lo0bits+0x32>
 8007fca:	3008      	adds	r0, #8
 8007fcc:	0a1b      	lsrs	r3, r3, #8
 8007fce:	0719      	lsls	r1, r3, #28
 8007fd0:	bf04      	itt	eq
 8007fd2:	091b      	lsreq	r3, r3, #4
 8007fd4:	3004      	addeq	r0, #4
 8007fd6:	0799      	lsls	r1, r3, #30
 8007fd8:	bf04      	itt	eq
 8007fda:	089b      	lsreq	r3, r3, #2
 8007fdc:	3002      	addeq	r0, #2
 8007fde:	07d9      	lsls	r1, r3, #31
 8007fe0:	d403      	bmi.n	8007fea <__lo0bits+0x4e>
 8007fe2:	085b      	lsrs	r3, r3, #1
 8007fe4:	f100 0001 	add.w	r0, r0, #1
 8007fe8:	d003      	beq.n	8007ff2 <__lo0bits+0x56>
 8007fea:	6013      	str	r3, [r2, #0]
 8007fec:	4770      	bx	lr
 8007fee:	2000      	movs	r0, #0
 8007ff0:	4770      	bx	lr
 8007ff2:	2020      	movs	r0, #32
 8007ff4:	4770      	bx	lr
	...

08007ff8 <__i2b>:
 8007ff8:	b510      	push	{r4, lr}
 8007ffa:	460c      	mov	r4, r1
 8007ffc:	2101      	movs	r1, #1
 8007ffe:	f7ff ff05 	bl	8007e0c <_Balloc>
 8008002:	4602      	mov	r2, r0
 8008004:	b928      	cbnz	r0, 8008012 <__i2b+0x1a>
 8008006:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800800a:	4b04      	ldr	r3, [pc, #16]	; (800801c <__i2b+0x24>)
 800800c:	4804      	ldr	r0, [pc, #16]	; (8008020 <__i2b+0x28>)
 800800e:	f000 fd75 	bl	8008afc <__assert_func>
 8008012:	2301      	movs	r3, #1
 8008014:	6144      	str	r4, [r0, #20]
 8008016:	6103      	str	r3, [r0, #16]
 8008018:	bd10      	pop	{r4, pc}
 800801a:	bf00      	nop
 800801c:	08008e4b 	.word	0x08008e4b
 8008020:	08008ebc 	.word	0x08008ebc

08008024 <__multiply>:
 8008024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008028:	4691      	mov	r9, r2
 800802a:	690a      	ldr	r2, [r1, #16]
 800802c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008030:	460c      	mov	r4, r1
 8008032:	429a      	cmp	r2, r3
 8008034:	bfbe      	ittt	lt
 8008036:	460b      	movlt	r3, r1
 8008038:	464c      	movlt	r4, r9
 800803a:	4699      	movlt	r9, r3
 800803c:	6927      	ldr	r7, [r4, #16]
 800803e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008042:	68a3      	ldr	r3, [r4, #8]
 8008044:	6861      	ldr	r1, [r4, #4]
 8008046:	eb07 060a 	add.w	r6, r7, sl
 800804a:	42b3      	cmp	r3, r6
 800804c:	b085      	sub	sp, #20
 800804e:	bfb8      	it	lt
 8008050:	3101      	addlt	r1, #1
 8008052:	f7ff fedb 	bl	8007e0c <_Balloc>
 8008056:	b930      	cbnz	r0, 8008066 <__multiply+0x42>
 8008058:	4602      	mov	r2, r0
 800805a:	f240 115d 	movw	r1, #349	; 0x15d
 800805e:	4b43      	ldr	r3, [pc, #268]	; (800816c <__multiply+0x148>)
 8008060:	4843      	ldr	r0, [pc, #268]	; (8008170 <__multiply+0x14c>)
 8008062:	f000 fd4b 	bl	8008afc <__assert_func>
 8008066:	f100 0514 	add.w	r5, r0, #20
 800806a:	462b      	mov	r3, r5
 800806c:	2200      	movs	r2, #0
 800806e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008072:	4543      	cmp	r3, r8
 8008074:	d321      	bcc.n	80080ba <__multiply+0x96>
 8008076:	f104 0314 	add.w	r3, r4, #20
 800807a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800807e:	f109 0314 	add.w	r3, r9, #20
 8008082:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008086:	9202      	str	r2, [sp, #8]
 8008088:	1b3a      	subs	r2, r7, r4
 800808a:	3a15      	subs	r2, #21
 800808c:	f022 0203 	bic.w	r2, r2, #3
 8008090:	3204      	adds	r2, #4
 8008092:	f104 0115 	add.w	r1, r4, #21
 8008096:	428f      	cmp	r7, r1
 8008098:	bf38      	it	cc
 800809a:	2204      	movcc	r2, #4
 800809c:	9201      	str	r2, [sp, #4]
 800809e:	9a02      	ldr	r2, [sp, #8]
 80080a0:	9303      	str	r3, [sp, #12]
 80080a2:	429a      	cmp	r2, r3
 80080a4:	d80c      	bhi.n	80080c0 <__multiply+0x9c>
 80080a6:	2e00      	cmp	r6, #0
 80080a8:	dd03      	ble.n	80080b2 <__multiply+0x8e>
 80080aa:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d059      	beq.n	8008166 <__multiply+0x142>
 80080b2:	6106      	str	r6, [r0, #16]
 80080b4:	b005      	add	sp, #20
 80080b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080ba:	f843 2b04 	str.w	r2, [r3], #4
 80080be:	e7d8      	b.n	8008072 <__multiply+0x4e>
 80080c0:	f8b3 a000 	ldrh.w	sl, [r3]
 80080c4:	f1ba 0f00 	cmp.w	sl, #0
 80080c8:	d023      	beq.n	8008112 <__multiply+0xee>
 80080ca:	46a9      	mov	r9, r5
 80080cc:	f04f 0c00 	mov.w	ip, #0
 80080d0:	f104 0e14 	add.w	lr, r4, #20
 80080d4:	f85e 2b04 	ldr.w	r2, [lr], #4
 80080d8:	f8d9 1000 	ldr.w	r1, [r9]
 80080dc:	fa1f fb82 	uxth.w	fp, r2
 80080e0:	b289      	uxth	r1, r1
 80080e2:	fb0a 110b 	mla	r1, sl, fp, r1
 80080e6:	4461      	add	r1, ip
 80080e8:	f8d9 c000 	ldr.w	ip, [r9]
 80080ec:	0c12      	lsrs	r2, r2, #16
 80080ee:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80080f2:	fb0a c202 	mla	r2, sl, r2, ip
 80080f6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80080fa:	b289      	uxth	r1, r1
 80080fc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008100:	4577      	cmp	r7, lr
 8008102:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008106:	f849 1b04 	str.w	r1, [r9], #4
 800810a:	d8e3      	bhi.n	80080d4 <__multiply+0xb0>
 800810c:	9a01      	ldr	r2, [sp, #4]
 800810e:	f845 c002 	str.w	ip, [r5, r2]
 8008112:	9a03      	ldr	r2, [sp, #12]
 8008114:	3304      	adds	r3, #4
 8008116:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800811a:	f1b9 0f00 	cmp.w	r9, #0
 800811e:	d020      	beq.n	8008162 <__multiply+0x13e>
 8008120:	46ae      	mov	lr, r5
 8008122:	f04f 0a00 	mov.w	sl, #0
 8008126:	6829      	ldr	r1, [r5, #0]
 8008128:	f104 0c14 	add.w	ip, r4, #20
 800812c:	f8bc b000 	ldrh.w	fp, [ip]
 8008130:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008134:	b289      	uxth	r1, r1
 8008136:	fb09 220b 	mla	r2, r9, fp, r2
 800813a:	4492      	add	sl, r2
 800813c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008140:	f84e 1b04 	str.w	r1, [lr], #4
 8008144:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008148:	f8be 1000 	ldrh.w	r1, [lr]
 800814c:	0c12      	lsrs	r2, r2, #16
 800814e:	fb09 1102 	mla	r1, r9, r2, r1
 8008152:	4567      	cmp	r7, ip
 8008154:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008158:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800815c:	d8e6      	bhi.n	800812c <__multiply+0x108>
 800815e:	9a01      	ldr	r2, [sp, #4]
 8008160:	50a9      	str	r1, [r5, r2]
 8008162:	3504      	adds	r5, #4
 8008164:	e79b      	b.n	800809e <__multiply+0x7a>
 8008166:	3e01      	subs	r6, #1
 8008168:	e79d      	b.n	80080a6 <__multiply+0x82>
 800816a:	bf00      	nop
 800816c:	08008e4b 	.word	0x08008e4b
 8008170:	08008ebc 	.word	0x08008ebc

08008174 <__pow5mult>:
 8008174:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008178:	4615      	mov	r5, r2
 800817a:	f012 0203 	ands.w	r2, r2, #3
 800817e:	4606      	mov	r6, r0
 8008180:	460f      	mov	r7, r1
 8008182:	d007      	beq.n	8008194 <__pow5mult+0x20>
 8008184:	4c25      	ldr	r4, [pc, #148]	; (800821c <__pow5mult+0xa8>)
 8008186:	3a01      	subs	r2, #1
 8008188:	2300      	movs	r3, #0
 800818a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800818e:	f7ff fe9f 	bl	8007ed0 <__multadd>
 8008192:	4607      	mov	r7, r0
 8008194:	10ad      	asrs	r5, r5, #2
 8008196:	d03d      	beq.n	8008214 <__pow5mult+0xa0>
 8008198:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800819a:	b97c      	cbnz	r4, 80081bc <__pow5mult+0x48>
 800819c:	2010      	movs	r0, #16
 800819e:	f7ff fe11 	bl	8007dc4 <malloc>
 80081a2:	4602      	mov	r2, r0
 80081a4:	6270      	str	r0, [r6, #36]	; 0x24
 80081a6:	b928      	cbnz	r0, 80081b4 <__pow5mult+0x40>
 80081a8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80081ac:	4b1c      	ldr	r3, [pc, #112]	; (8008220 <__pow5mult+0xac>)
 80081ae:	481d      	ldr	r0, [pc, #116]	; (8008224 <__pow5mult+0xb0>)
 80081b0:	f000 fca4 	bl	8008afc <__assert_func>
 80081b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80081b8:	6004      	str	r4, [r0, #0]
 80081ba:	60c4      	str	r4, [r0, #12]
 80081bc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80081c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80081c4:	b94c      	cbnz	r4, 80081da <__pow5mult+0x66>
 80081c6:	f240 2171 	movw	r1, #625	; 0x271
 80081ca:	4630      	mov	r0, r6
 80081cc:	f7ff ff14 	bl	8007ff8 <__i2b>
 80081d0:	2300      	movs	r3, #0
 80081d2:	4604      	mov	r4, r0
 80081d4:	f8c8 0008 	str.w	r0, [r8, #8]
 80081d8:	6003      	str	r3, [r0, #0]
 80081da:	f04f 0900 	mov.w	r9, #0
 80081de:	07eb      	lsls	r3, r5, #31
 80081e0:	d50a      	bpl.n	80081f8 <__pow5mult+0x84>
 80081e2:	4639      	mov	r1, r7
 80081e4:	4622      	mov	r2, r4
 80081e6:	4630      	mov	r0, r6
 80081e8:	f7ff ff1c 	bl	8008024 <__multiply>
 80081ec:	4680      	mov	r8, r0
 80081ee:	4639      	mov	r1, r7
 80081f0:	4630      	mov	r0, r6
 80081f2:	f7ff fe4b 	bl	8007e8c <_Bfree>
 80081f6:	4647      	mov	r7, r8
 80081f8:	106d      	asrs	r5, r5, #1
 80081fa:	d00b      	beq.n	8008214 <__pow5mult+0xa0>
 80081fc:	6820      	ldr	r0, [r4, #0]
 80081fe:	b938      	cbnz	r0, 8008210 <__pow5mult+0x9c>
 8008200:	4622      	mov	r2, r4
 8008202:	4621      	mov	r1, r4
 8008204:	4630      	mov	r0, r6
 8008206:	f7ff ff0d 	bl	8008024 <__multiply>
 800820a:	6020      	str	r0, [r4, #0]
 800820c:	f8c0 9000 	str.w	r9, [r0]
 8008210:	4604      	mov	r4, r0
 8008212:	e7e4      	b.n	80081de <__pow5mult+0x6a>
 8008214:	4638      	mov	r0, r7
 8008216:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800821a:	bf00      	nop
 800821c:	08009008 	.word	0x08009008
 8008220:	08008dd9 	.word	0x08008dd9
 8008224:	08008ebc 	.word	0x08008ebc

08008228 <__lshift>:
 8008228:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800822c:	460c      	mov	r4, r1
 800822e:	4607      	mov	r7, r0
 8008230:	4691      	mov	r9, r2
 8008232:	6923      	ldr	r3, [r4, #16]
 8008234:	6849      	ldr	r1, [r1, #4]
 8008236:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800823a:	68a3      	ldr	r3, [r4, #8]
 800823c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008240:	f108 0601 	add.w	r6, r8, #1
 8008244:	42b3      	cmp	r3, r6
 8008246:	db0b      	blt.n	8008260 <__lshift+0x38>
 8008248:	4638      	mov	r0, r7
 800824a:	f7ff fddf 	bl	8007e0c <_Balloc>
 800824e:	4605      	mov	r5, r0
 8008250:	b948      	cbnz	r0, 8008266 <__lshift+0x3e>
 8008252:	4602      	mov	r2, r0
 8008254:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008258:	4b29      	ldr	r3, [pc, #164]	; (8008300 <__lshift+0xd8>)
 800825a:	482a      	ldr	r0, [pc, #168]	; (8008304 <__lshift+0xdc>)
 800825c:	f000 fc4e 	bl	8008afc <__assert_func>
 8008260:	3101      	adds	r1, #1
 8008262:	005b      	lsls	r3, r3, #1
 8008264:	e7ee      	b.n	8008244 <__lshift+0x1c>
 8008266:	2300      	movs	r3, #0
 8008268:	f100 0114 	add.w	r1, r0, #20
 800826c:	f100 0210 	add.w	r2, r0, #16
 8008270:	4618      	mov	r0, r3
 8008272:	4553      	cmp	r3, sl
 8008274:	db37      	blt.n	80082e6 <__lshift+0xbe>
 8008276:	6920      	ldr	r0, [r4, #16]
 8008278:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800827c:	f104 0314 	add.w	r3, r4, #20
 8008280:	f019 091f 	ands.w	r9, r9, #31
 8008284:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008288:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800828c:	d02f      	beq.n	80082ee <__lshift+0xc6>
 800828e:	468a      	mov	sl, r1
 8008290:	f04f 0c00 	mov.w	ip, #0
 8008294:	f1c9 0e20 	rsb	lr, r9, #32
 8008298:	681a      	ldr	r2, [r3, #0]
 800829a:	fa02 f209 	lsl.w	r2, r2, r9
 800829e:	ea42 020c 	orr.w	r2, r2, ip
 80082a2:	f84a 2b04 	str.w	r2, [sl], #4
 80082a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80082aa:	4298      	cmp	r0, r3
 80082ac:	fa22 fc0e 	lsr.w	ip, r2, lr
 80082b0:	d8f2      	bhi.n	8008298 <__lshift+0x70>
 80082b2:	1b03      	subs	r3, r0, r4
 80082b4:	3b15      	subs	r3, #21
 80082b6:	f023 0303 	bic.w	r3, r3, #3
 80082ba:	3304      	adds	r3, #4
 80082bc:	f104 0215 	add.w	r2, r4, #21
 80082c0:	4290      	cmp	r0, r2
 80082c2:	bf38      	it	cc
 80082c4:	2304      	movcc	r3, #4
 80082c6:	f841 c003 	str.w	ip, [r1, r3]
 80082ca:	f1bc 0f00 	cmp.w	ip, #0
 80082ce:	d001      	beq.n	80082d4 <__lshift+0xac>
 80082d0:	f108 0602 	add.w	r6, r8, #2
 80082d4:	3e01      	subs	r6, #1
 80082d6:	4638      	mov	r0, r7
 80082d8:	4621      	mov	r1, r4
 80082da:	612e      	str	r6, [r5, #16]
 80082dc:	f7ff fdd6 	bl	8007e8c <_Bfree>
 80082e0:	4628      	mov	r0, r5
 80082e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082e6:	f842 0f04 	str.w	r0, [r2, #4]!
 80082ea:	3301      	adds	r3, #1
 80082ec:	e7c1      	b.n	8008272 <__lshift+0x4a>
 80082ee:	3904      	subs	r1, #4
 80082f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80082f4:	4298      	cmp	r0, r3
 80082f6:	f841 2f04 	str.w	r2, [r1, #4]!
 80082fa:	d8f9      	bhi.n	80082f0 <__lshift+0xc8>
 80082fc:	e7ea      	b.n	80082d4 <__lshift+0xac>
 80082fe:	bf00      	nop
 8008300:	08008e4b 	.word	0x08008e4b
 8008304:	08008ebc 	.word	0x08008ebc

08008308 <__mcmp>:
 8008308:	4603      	mov	r3, r0
 800830a:	690a      	ldr	r2, [r1, #16]
 800830c:	6900      	ldr	r0, [r0, #16]
 800830e:	b530      	push	{r4, r5, lr}
 8008310:	1a80      	subs	r0, r0, r2
 8008312:	d10d      	bne.n	8008330 <__mcmp+0x28>
 8008314:	3314      	adds	r3, #20
 8008316:	3114      	adds	r1, #20
 8008318:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800831c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008320:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008324:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008328:	4295      	cmp	r5, r2
 800832a:	d002      	beq.n	8008332 <__mcmp+0x2a>
 800832c:	d304      	bcc.n	8008338 <__mcmp+0x30>
 800832e:	2001      	movs	r0, #1
 8008330:	bd30      	pop	{r4, r5, pc}
 8008332:	42a3      	cmp	r3, r4
 8008334:	d3f4      	bcc.n	8008320 <__mcmp+0x18>
 8008336:	e7fb      	b.n	8008330 <__mcmp+0x28>
 8008338:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800833c:	e7f8      	b.n	8008330 <__mcmp+0x28>
	...

08008340 <__mdiff>:
 8008340:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008344:	460d      	mov	r5, r1
 8008346:	4607      	mov	r7, r0
 8008348:	4611      	mov	r1, r2
 800834a:	4628      	mov	r0, r5
 800834c:	4614      	mov	r4, r2
 800834e:	f7ff ffdb 	bl	8008308 <__mcmp>
 8008352:	1e06      	subs	r6, r0, #0
 8008354:	d111      	bne.n	800837a <__mdiff+0x3a>
 8008356:	4631      	mov	r1, r6
 8008358:	4638      	mov	r0, r7
 800835a:	f7ff fd57 	bl	8007e0c <_Balloc>
 800835e:	4602      	mov	r2, r0
 8008360:	b928      	cbnz	r0, 800836e <__mdiff+0x2e>
 8008362:	f240 2132 	movw	r1, #562	; 0x232
 8008366:	4b3a      	ldr	r3, [pc, #232]	; (8008450 <__mdiff+0x110>)
 8008368:	483a      	ldr	r0, [pc, #232]	; (8008454 <__mdiff+0x114>)
 800836a:	f000 fbc7 	bl	8008afc <__assert_func>
 800836e:	2301      	movs	r3, #1
 8008370:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008374:	4610      	mov	r0, r2
 8008376:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800837a:	bfa4      	itt	ge
 800837c:	4623      	movge	r3, r4
 800837e:	462c      	movge	r4, r5
 8008380:	4638      	mov	r0, r7
 8008382:	6861      	ldr	r1, [r4, #4]
 8008384:	bfa6      	itte	ge
 8008386:	461d      	movge	r5, r3
 8008388:	2600      	movge	r6, #0
 800838a:	2601      	movlt	r6, #1
 800838c:	f7ff fd3e 	bl	8007e0c <_Balloc>
 8008390:	4602      	mov	r2, r0
 8008392:	b918      	cbnz	r0, 800839c <__mdiff+0x5c>
 8008394:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008398:	4b2d      	ldr	r3, [pc, #180]	; (8008450 <__mdiff+0x110>)
 800839a:	e7e5      	b.n	8008368 <__mdiff+0x28>
 800839c:	f102 0814 	add.w	r8, r2, #20
 80083a0:	46c2      	mov	sl, r8
 80083a2:	f04f 0c00 	mov.w	ip, #0
 80083a6:	6927      	ldr	r7, [r4, #16]
 80083a8:	60c6      	str	r6, [r0, #12]
 80083aa:	692e      	ldr	r6, [r5, #16]
 80083ac:	f104 0014 	add.w	r0, r4, #20
 80083b0:	f105 0914 	add.w	r9, r5, #20
 80083b4:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80083b8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80083bc:	3410      	adds	r4, #16
 80083be:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80083c2:	f859 3b04 	ldr.w	r3, [r9], #4
 80083c6:	fa1f f18b 	uxth.w	r1, fp
 80083ca:	448c      	add	ip, r1
 80083cc:	b299      	uxth	r1, r3
 80083ce:	0c1b      	lsrs	r3, r3, #16
 80083d0:	ebac 0101 	sub.w	r1, ip, r1
 80083d4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80083d8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80083dc:	b289      	uxth	r1, r1
 80083de:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80083e2:	454e      	cmp	r6, r9
 80083e4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80083e8:	f84a 3b04 	str.w	r3, [sl], #4
 80083ec:	d8e7      	bhi.n	80083be <__mdiff+0x7e>
 80083ee:	1b73      	subs	r3, r6, r5
 80083f0:	3b15      	subs	r3, #21
 80083f2:	f023 0303 	bic.w	r3, r3, #3
 80083f6:	3515      	adds	r5, #21
 80083f8:	3304      	adds	r3, #4
 80083fa:	42ae      	cmp	r6, r5
 80083fc:	bf38      	it	cc
 80083fe:	2304      	movcc	r3, #4
 8008400:	4418      	add	r0, r3
 8008402:	4443      	add	r3, r8
 8008404:	461e      	mov	r6, r3
 8008406:	4605      	mov	r5, r0
 8008408:	4575      	cmp	r5, lr
 800840a:	d30e      	bcc.n	800842a <__mdiff+0xea>
 800840c:	f10e 0103 	add.w	r1, lr, #3
 8008410:	1a09      	subs	r1, r1, r0
 8008412:	f021 0103 	bic.w	r1, r1, #3
 8008416:	3803      	subs	r0, #3
 8008418:	4586      	cmp	lr, r0
 800841a:	bf38      	it	cc
 800841c:	2100      	movcc	r1, #0
 800841e:	4419      	add	r1, r3
 8008420:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8008424:	b18b      	cbz	r3, 800844a <__mdiff+0x10a>
 8008426:	6117      	str	r7, [r2, #16]
 8008428:	e7a4      	b.n	8008374 <__mdiff+0x34>
 800842a:	f855 8b04 	ldr.w	r8, [r5], #4
 800842e:	fa1f f188 	uxth.w	r1, r8
 8008432:	4461      	add	r1, ip
 8008434:	140c      	asrs	r4, r1, #16
 8008436:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800843a:	b289      	uxth	r1, r1
 800843c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008440:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8008444:	f846 1b04 	str.w	r1, [r6], #4
 8008448:	e7de      	b.n	8008408 <__mdiff+0xc8>
 800844a:	3f01      	subs	r7, #1
 800844c:	e7e8      	b.n	8008420 <__mdiff+0xe0>
 800844e:	bf00      	nop
 8008450:	08008e4b 	.word	0x08008e4b
 8008454:	08008ebc 	.word	0x08008ebc

08008458 <__d2b>:
 8008458:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800845c:	2101      	movs	r1, #1
 800845e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8008462:	4690      	mov	r8, r2
 8008464:	461d      	mov	r5, r3
 8008466:	f7ff fcd1 	bl	8007e0c <_Balloc>
 800846a:	4604      	mov	r4, r0
 800846c:	b930      	cbnz	r0, 800847c <__d2b+0x24>
 800846e:	4602      	mov	r2, r0
 8008470:	f240 310a 	movw	r1, #778	; 0x30a
 8008474:	4b24      	ldr	r3, [pc, #144]	; (8008508 <__d2b+0xb0>)
 8008476:	4825      	ldr	r0, [pc, #148]	; (800850c <__d2b+0xb4>)
 8008478:	f000 fb40 	bl	8008afc <__assert_func>
 800847c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8008480:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8008484:	bb2d      	cbnz	r5, 80084d2 <__d2b+0x7a>
 8008486:	9301      	str	r3, [sp, #4]
 8008488:	f1b8 0300 	subs.w	r3, r8, #0
 800848c:	d026      	beq.n	80084dc <__d2b+0x84>
 800848e:	4668      	mov	r0, sp
 8008490:	9300      	str	r3, [sp, #0]
 8008492:	f7ff fd83 	bl	8007f9c <__lo0bits>
 8008496:	9900      	ldr	r1, [sp, #0]
 8008498:	b1f0      	cbz	r0, 80084d8 <__d2b+0x80>
 800849a:	9a01      	ldr	r2, [sp, #4]
 800849c:	f1c0 0320 	rsb	r3, r0, #32
 80084a0:	fa02 f303 	lsl.w	r3, r2, r3
 80084a4:	430b      	orrs	r3, r1
 80084a6:	40c2      	lsrs	r2, r0
 80084a8:	6163      	str	r3, [r4, #20]
 80084aa:	9201      	str	r2, [sp, #4]
 80084ac:	9b01      	ldr	r3, [sp, #4]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	bf14      	ite	ne
 80084b2:	2102      	movne	r1, #2
 80084b4:	2101      	moveq	r1, #1
 80084b6:	61a3      	str	r3, [r4, #24]
 80084b8:	6121      	str	r1, [r4, #16]
 80084ba:	b1c5      	cbz	r5, 80084ee <__d2b+0x96>
 80084bc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80084c0:	4405      	add	r5, r0
 80084c2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80084c6:	603d      	str	r5, [r7, #0]
 80084c8:	6030      	str	r0, [r6, #0]
 80084ca:	4620      	mov	r0, r4
 80084cc:	b002      	add	sp, #8
 80084ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80084d6:	e7d6      	b.n	8008486 <__d2b+0x2e>
 80084d8:	6161      	str	r1, [r4, #20]
 80084da:	e7e7      	b.n	80084ac <__d2b+0x54>
 80084dc:	a801      	add	r0, sp, #4
 80084de:	f7ff fd5d 	bl	8007f9c <__lo0bits>
 80084e2:	2101      	movs	r1, #1
 80084e4:	9b01      	ldr	r3, [sp, #4]
 80084e6:	6121      	str	r1, [r4, #16]
 80084e8:	6163      	str	r3, [r4, #20]
 80084ea:	3020      	adds	r0, #32
 80084ec:	e7e5      	b.n	80084ba <__d2b+0x62>
 80084ee:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80084f2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80084f6:	6038      	str	r0, [r7, #0]
 80084f8:	6918      	ldr	r0, [r3, #16]
 80084fa:	f7ff fd2f 	bl	8007f5c <__hi0bits>
 80084fe:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8008502:	6031      	str	r1, [r6, #0]
 8008504:	e7e1      	b.n	80084ca <__d2b+0x72>
 8008506:	bf00      	nop
 8008508:	08008e4b 	.word	0x08008e4b
 800850c:	08008ebc 	.word	0x08008ebc

08008510 <_calloc_r>:
 8008510:	b570      	push	{r4, r5, r6, lr}
 8008512:	fba1 5402 	umull	r5, r4, r1, r2
 8008516:	b934      	cbnz	r4, 8008526 <_calloc_r+0x16>
 8008518:	4629      	mov	r1, r5
 800851a:	f000 f875 	bl	8008608 <_malloc_r>
 800851e:	4606      	mov	r6, r0
 8008520:	b928      	cbnz	r0, 800852e <_calloc_r+0x1e>
 8008522:	4630      	mov	r0, r6
 8008524:	bd70      	pop	{r4, r5, r6, pc}
 8008526:	220c      	movs	r2, #12
 8008528:	2600      	movs	r6, #0
 800852a:	6002      	str	r2, [r0, #0]
 800852c:	e7f9      	b.n	8008522 <_calloc_r+0x12>
 800852e:	462a      	mov	r2, r5
 8008530:	4621      	mov	r1, r4
 8008532:	f7fd fde3 	bl	80060fc <memset>
 8008536:	e7f4      	b.n	8008522 <_calloc_r+0x12>

08008538 <_free_r>:
 8008538:	b538      	push	{r3, r4, r5, lr}
 800853a:	4605      	mov	r5, r0
 800853c:	2900      	cmp	r1, #0
 800853e:	d040      	beq.n	80085c2 <_free_r+0x8a>
 8008540:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008544:	1f0c      	subs	r4, r1, #4
 8008546:	2b00      	cmp	r3, #0
 8008548:	bfb8      	it	lt
 800854a:	18e4      	addlt	r4, r4, r3
 800854c:	f000 fb5c 	bl	8008c08 <__malloc_lock>
 8008550:	4a1c      	ldr	r2, [pc, #112]	; (80085c4 <_free_r+0x8c>)
 8008552:	6813      	ldr	r3, [r2, #0]
 8008554:	b933      	cbnz	r3, 8008564 <_free_r+0x2c>
 8008556:	6063      	str	r3, [r4, #4]
 8008558:	6014      	str	r4, [r2, #0]
 800855a:	4628      	mov	r0, r5
 800855c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008560:	f000 bb58 	b.w	8008c14 <__malloc_unlock>
 8008564:	42a3      	cmp	r3, r4
 8008566:	d908      	bls.n	800857a <_free_r+0x42>
 8008568:	6820      	ldr	r0, [r4, #0]
 800856a:	1821      	adds	r1, r4, r0
 800856c:	428b      	cmp	r3, r1
 800856e:	bf01      	itttt	eq
 8008570:	6819      	ldreq	r1, [r3, #0]
 8008572:	685b      	ldreq	r3, [r3, #4]
 8008574:	1809      	addeq	r1, r1, r0
 8008576:	6021      	streq	r1, [r4, #0]
 8008578:	e7ed      	b.n	8008556 <_free_r+0x1e>
 800857a:	461a      	mov	r2, r3
 800857c:	685b      	ldr	r3, [r3, #4]
 800857e:	b10b      	cbz	r3, 8008584 <_free_r+0x4c>
 8008580:	42a3      	cmp	r3, r4
 8008582:	d9fa      	bls.n	800857a <_free_r+0x42>
 8008584:	6811      	ldr	r1, [r2, #0]
 8008586:	1850      	adds	r0, r2, r1
 8008588:	42a0      	cmp	r0, r4
 800858a:	d10b      	bne.n	80085a4 <_free_r+0x6c>
 800858c:	6820      	ldr	r0, [r4, #0]
 800858e:	4401      	add	r1, r0
 8008590:	1850      	adds	r0, r2, r1
 8008592:	4283      	cmp	r3, r0
 8008594:	6011      	str	r1, [r2, #0]
 8008596:	d1e0      	bne.n	800855a <_free_r+0x22>
 8008598:	6818      	ldr	r0, [r3, #0]
 800859a:	685b      	ldr	r3, [r3, #4]
 800859c:	4401      	add	r1, r0
 800859e:	6011      	str	r1, [r2, #0]
 80085a0:	6053      	str	r3, [r2, #4]
 80085a2:	e7da      	b.n	800855a <_free_r+0x22>
 80085a4:	d902      	bls.n	80085ac <_free_r+0x74>
 80085a6:	230c      	movs	r3, #12
 80085a8:	602b      	str	r3, [r5, #0]
 80085aa:	e7d6      	b.n	800855a <_free_r+0x22>
 80085ac:	6820      	ldr	r0, [r4, #0]
 80085ae:	1821      	adds	r1, r4, r0
 80085b0:	428b      	cmp	r3, r1
 80085b2:	bf01      	itttt	eq
 80085b4:	6819      	ldreq	r1, [r3, #0]
 80085b6:	685b      	ldreq	r3, [r3, #4]
 80085b8:	1809      	addeq	r1, r1, r0
 80085ba:	6021      	streq	r1, [r4, #0]
 80085bc:	6063      	str	r3, [r4, #4]
 80085be:	6054      	str	r4, [r2, #4]
 80085c0:	e7cb      	b.n	800855a <_free_r+0x22>
 80085c2:	bd38      	pop	{r3, r4, r5, pc}
 80085c4:	200002a0 	.word	0x200002a0

080085c8 <sbrk_aligned>:
 80085c8:	b570      	push	{r4, r5, r6, lr}
 80085ca:	4e0e      	ldr	r6, [pc, #56]	; (8008604 <sbrk_aligned+0x3c>)
 80085cc:	460c      	mov	r4, r1
 80085ce:	6831      	ldr	r1, [r6, #0]
 80085d0:	4605      	mov	r5, r0
 80085d2:	b911      	cbnz	r1, 80085da <sbrk_aligned+0x12>
 80085d4:	f000 fa2c 	bl	8008a30 <_sbrk_r>
 80085d8:	6030      	str	r0, [r6, #0]
 80085da:	4621      	mov	r1, r4
 80085dc:	4628      	mov	r0, r5
 80085de:	f000 fa27 	bl	8008a30 <_sbrk_r>
 80085e2:	1c43      	adds	r3, r0, #1
 80085e4:	d00a      	beq.n	80085fc <sbrk_aligned+0x34>
 80085e6:	1cc4      	adds	r4, r0, #3
 80085e8:	f024 0403 	bic.w	r4, r4, #3
 80085ec:	42a0      	cmp	r0, r4
 80085ee:	d007      	beq.n	8008600 <sbrk_aligned+0x38>
 80085f0:	1a21      	subs	r1, r4, r0
 80085f2:	4628      	mov	r0, r5
 80085f4:	f000 fa1c 	bl	8008a30 <_sbrk_r>
 80085f8:	3001      	adds	r0, #1
 80085fa:	d101      	bne.n	8008600 <sbrk_aligned+0x38>
 80085fc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008600:	4620      	mov	r0, r4
 8008602:	bd70      	pop	{r4, r5, r6, pc}
 8008604:	200002a4 	.word	0x200002a4

08008608 <_malloc_r>:
 8008608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800860c:	1ccd      	adds	r5, r1, #3
 800860e:	f025 0503 	bic.w	r5, r5, #3
 8008612:	3508      	adds	r5, #8
 8008614:	2d0c      	cmp	r5, #12
 8008616:	bf38      	it	cc
 8008618:	250c      	movcc	r5, #12
 800861a:	2d00      	cmp	r5, #0
 800861c:	4607      	mov	r7, r0
 800861e:	db01      	blt.n	8008624 <_malloc_r+0x1c>
 8008620:	42a9      	cmp	r1, r5
 8008622:	d905      	bls.n	8008630 <_malloc_r+0x28>
 8008624:	230c      	movs	r3, #12
 8008626:	2600      	movs	r6, #0
 8008628:	603b      	str	r3, [r7, #0]
 800862a:	4630      	mov	r0, r6
 800862c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008630:	4e2e      	ldr	r6, [pc, #184]	; (80086ec <_malloc_r+0xe4>)
 8008632:	f000 fae9 	bl	8008c08 <__malloc_lock>
 8008636:	6833      	ldr	r3, [r6, #0]
 8008638:	461c      	mov	r4, r3
 800863a:	bb34      	cbnz	r4, 800868a <_malloc_r+0x82>
 800863c:	4629      	mov	r1, r5
 800863e:	4638      	mov	r0, r7
 8008640:	f7ff ffc2 	bl	80085c8 <sbrk_aligned>
 8008644:	1c43      	adds	r3, r0, #1
 8008646:	4604      	mov	r4, r0
 8008648:	d14d      	bne.n	80086e6 <_malloc_r+0xde>
 800864a:	6834      	ldr	r4, [r6, #0]
 800864c:	4626      	mov	r6, r4
 800864e:	2e00      	cmp	r6, #0
 8008650:	d140      	bne.n	80086d4 <_malloc_r+0xcc>
 8008652:	6823      	ldr	r3, [r4, #0]
 8008654:	4631      	mov	r1, r6
 8008656:	4638      	mov	r0, r7
 8008658:	eb04 0803 	add.w	r8, r4, r3
 800865c:	f000 f9e8 	bl	8008a30 <_sbrk_r>
 8008660:	4580      	cmp	r8, r0
 8008662:	d13a      	bne.n	80086da <_malloc_r+0xd2>
 8008664:	6821      	ldr	r1, [r4, #0]
 8008666:	3503      	adds	r5, #3
 8008668:	1a6d      	subs	r5, r5, r1
 800866a:	f025 0503 	bic.w	r5, r5, #3
 800866e:	3508      	adds	r5, #8
 8008670:	2d0c      	cmp	r5, #12
 8008672:	bf38      	it	cc
 8008674:	250c      	movcc	r5, #12
 8008676:	4638      	mov	r0, r7
 8008678:	4629      	mov	r1, r5
 800867a:	f7ff ffa5 	bl	80085c8 <sbrk_aligned>
 800867e:	3001      	adds	r0, #1
 8008680:	d02b      	beq.n	80086da <_malloc_r+0xd2>
 8008682:	6823      	ldr	r3, [r4, #0]
 8008684:	442b      	add	r3, r5
 8008686:	6023      	str	r3, [r4, #0]
 8008688:	e00e      	b.n	80086a8 <_malloc_r+0xa0>
 800868a:	6822      	ldr	r2, [r4, #0]
 800868c:	1b52      	subs	r2, r2, r5
 800868e:	d41e      	bmi.n	80086ce <_malloc_r+0xc6>
 8008690:	2a0b      	cmp	r2, #11
 8008692:	d916      	bls.n	80086c2 <_malloc_r+0xba>
 8008694:	1961      	adds	r1, r4, r5
 8008696:	42a3      	cmp	r3, r4
 8008698:	6025      	str	r5, [r4, #0]
 800869a:	bf18      	it	ne
 800869c:	6059      	strne	r1, [r3, #4]
 800869e:	6863      	ldr	r3, [r4, #4]
 80086a0:	bf08      	it	eq
 80086a2:	6031      	streq	r1, [r6, #0]
 80086a4:	5162      	str	r2, [r4, r5]
 80086a6:	604b      	str	r3, [r1, #4]
 80086a8:	4638      	mov	r0, r7
 80086aa:	f104 060b 	add.w	r6, r4, #11
 80086ae:	f000 fab1 	bl	8008c14 <__malloc_unlock>
 80086b2:	f026 0607 	bic.w	r6, r6, #7
 80086b6:	1d23      	adds	r3, r4, #4
 80086b8:	1af2      	subs	r2, r6, r3
 80086ba:	d0b6      	beq.n	800862a <_malloc_r+0x22>
 80086bc:	1b9b      	subs	r3, r3, r6
 80086be:	50a3      	str	r3, [r4, r2]
 80086c0:	e7b3      	b.n	800862a <_malloc_r+0x22>
 80086c2:	6862      	ldr	r2, [r4, #4]
 80086c4:	42a3      	cmp	r3, r4
 80086c6:	bf0c      	ite	eq
 80086c8:	6032      	streq	r2, [r6, #0]
 80086ca:	605a      	strne	r2, [r3, #4]
 80086cc:	e7ec      	b.n	80086a8 <_malloc_r+0xa0>
 80086ce:	4623      	mov	r3, r4
 80086d0:	6864      	ldr	r4, [r4, #4]
 80086d2:	e7b2      	b.n	800863a <_malloc_r+0x32>
 80086d4:	4634      	mov	r4, r6
 80086d6:	6876      	ldr	r6, [r6, #4]
 80086d8:	e7b9      	b.n	800864e <_malloc_r+0x46>
 80086da:	230c      	movs	r3, #12
 80086dc:	4638      	mov	r0, r7
 80086de:	603b      	str	r3, [r7, #0]
 80086e0:	f000 fa98 	bl	8008c14 <__malloc_unlock>
 80086e4:	e7a1      	b.n	800862a <_malloc_r+0x22>
 80086e6:	6025      	str	r5, [r4, #0]
 80086e8:	e7de      	b.n	80086a8 <_malloc_r+0xa0>
 80086ea:	bf00      	nop
 80086ec:	200002a0 	.word	0x200002a0

080086f0 <__sfputc_r>:
 80086f0:	6893      	ldr	r3, [r2, #8]
 80086f2:	b410      	push	{r4}
 80086f4:	3b01      	subs	r3, #1
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	6093      	str	r3, [r2, #8]
 80086fa:	da07      	bge.n	800870c <__sfputc_r+0x1c>
 80086fc:	6994      	ldr	r4, [r2, #24]
 80086fe:	42a3      	cmp	r3, r4
 8008700:	db01      	blt.n	8008706 <__sfputc_r+0x16>
 8008702:	290a      	cmp	r1, #10
 8008704:	d102      	bne.n	800870c <__sfputc_r+0x1c>
 8008706:	bc10      	pop	{r4}
 8008708:	f7fe ba02 	b.w	8006b10 <__swbuf_r>
 800870c:	6813      	ldr	r3, [r2, #0]
 800870e:	1c58      	adds	r0, r3, #1
 8008710:	6010      	str	r0, [r2, #0]
 8008712:	7019      	strb	r1, [r3, #0]
 8008714:	4608      	mov	r0, r1
 8008716:	bc10      	pop	{r4}
 8008718:	4770      	bx	lr

0800871a <__sfputs_r>:
 800871a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800871c:	4606      	mov	r6, r0
 800871e:	460f      	mov	r7, r1
 8008720:	4614      	mov	r4, r2
 8008722:	18d5      	adds	r5, r2, r3
 8008724:	42ac      	cmp	r4, r5
 8008726:	d101      	bne.n	800872c <__sfputs_r+0x12>
 8008728:	2000      	movs	r0, #0
 800872a:	e007      	b.n	800873c <__sfputs_r+0x22>
 800872c:	463a      	mov	r2, r7
 800872e:	4630      	mov	r0, r6
 8008730:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008734:	f7ff ffdc 	bl	80086f0 <__sfputc_r>
 8008738:	1c43      	adds	r3, r0, #1
 800873a:	d1f3      	bne.n	8008724 <__sfputs_r+0xa>
 800873c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008740 <_vfiprintf_r>:
 8008740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008744:	460d      	mov	r5, r1
 8008746:	4614      	mov	r4, r2
 8008748:	4698      	mov	r8, r3
 800874a:	4606      	mov	r6, r0
 800874c:	b09d      	sub	sp, #116	; 0x74
 800874e:	b118      	cbz	r0, 8008758 <_vfiprintf_r+0x18>
 8008750:	6983      	ldr	r3, [r0, #24]
 8008752:	b90b      	cbnz	r3, 8008758 <_vfiprintf_r+0x18>
 8008754:	f7ff fa2c 	bl	8007bb0 <__sinit>
 8008758:	4b89      	ldr	r3, [pc, #548]	; (8008980 <_vfiprintf_r+0x240>)
 800875a:	429d      	cmp	r5, r3
 800875c:	d11b      	bne.n	8008796 <_vfiprintf_r+0x56>
 800875e:	6875      	ldr	r5, [r6, #4]
 8008760:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008762:	07d9      	lsls	r1, r3, #31
 8008764:	d405      	bmi.n	8008772 <_vfiprintf_r+0x32>
 8008766:	89ab      	ldrh	r3, [r5, #12]
 8008768:	059a      	lsls	r2, r3, #22
 800876a:	d402      	bmi.n	8008772 <_vfiprintf_r+0x32>
 800876c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800876e:	f7ff fac2 	bl	8007cf6 <__retarget_lock_acquire_recursive>
 8008772:	89ab      	ldrh	r3, [r5, #12]
 8008774:	071b      	lsls	r3, r3, #28
 8008776:	d501      	bpl.n	800877c <_vfiprintf_r+0x3c>
 8008778:	692b      	ldr	r3, [r5, #16]
 800877a:	b9eb      	cbnz	r3, 80087b8 <_vfiprintf_r+0x78>
 800877c:	4629      	mov	r1, r5
 800877e:	4630      	mov	r0, r6
 8008780:	f7fe fa18 	bl	8006bb4 <__swsetup_r>
 8008784:	b1c0      	cbz	r0, 80087b8 <_vfiprintf_r+0x78>
 8008786:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008788:	07dc      	lsls	r4, r3, #31
 800878a:	d50e      	bpl.n	80087aa <_vfiprintf_r+0x6a>
 800878c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008790:	b01d      	add	sp, #116	; 0x74
 8008792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008796:	4b7b      	ldr	r3, [pc, #492]	; (8008984 <_vfiprintf_r+0x244>)
 8008798:	429d      	cmp	r5, r3
 800879a:	d101      	bne.n	80087a0 <_vfiprintf_r+0x60>
 800879c:	68b5      	ldr	r5, [r6, #8]
 800879e:	e7df      	b.n	8008760 <_vfiprintf_r+0x20>
 80087a0:	4b79      	ldr	r3, [pc, #484]	; (8008988 <_vfiprintf_r+0x248>)
 80087a2:	429d      	cmp	r5, r3
 80087a4:	bf08      	it	eq
 80087a6:	68f5      	ldreq	r5, [r6, #12]
 80087a8:	e7da      	b.n	8008760 <_vfiprintf_r+0x20>
 80087aa:	89ab      	ldrh	r3, [r5, #12]
 80087ac:	0598      	lsls	r0, r3, #22
 80087ae:	d4ed      	bmi.n	800878c <_vfiprintf_r+0x4c>
 80087b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80087b2:	f7ff faa1 	bl	8007cf8 <__retarget_lock_release_recursive>
 80087b6:	e7e9      	b.n	800878c <_vfiprintf_r+0x4c>
 80087b8:	2300      	movs	r3, #0
 80087ba:	9309      	str	r3, [sp, #36]	; 0x24
 80087bc:	2320      	movs	r3, #32
 80087be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80087c2:	2330      	movs	r3, #48	; 0x30
 80087c4:	f04f 0901 	mov.w	r9, #1
 80087c8:	f8cd 800c 	str.w	r8, [sp, #12]
 80087cc:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800898c <_vfiprintf_r+0x24c>
 80087d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80087d4:	4623      	mov	r3, r4
 80087d6:	469a      	mov	sl, r3
 80087d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80087dc:	b10a      	cbz	r2, 80087e2 <_vfiprintf_r+0xa2>
 80087de:	2a25      	cmp	r2, #37	; 0x25
 80087e0:	d1f9      	bne.n	80087d6 <_vfiprintf_r+0x96>
 80087e2:	ebba 0b04 	subs.w	fp, sl, r4
 80087e6:	d00b      	beq.n	8008800 <_vfiprintf_r+0xc0>
 80087e8:	465b      	mov	r3, fp
 80087ea:	4622      	mov	r2, r4
 80087ec:	4629      	mov	r1, r5
 80087ee:	4630      	mov	r0, r6
 80087f0:	f7ff ff93 	bl	800871a <__sfputs_r>
 80087f4:	3001      	adds	r0, #1
 80087f6:	f000 80aa 	beq.w	800894e <_vfiprintf_r+0x20e>
 80087fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80087fc:	445a      	add	r2, fp
 80087fe:	9209      	str	r2, [sp, #36]	; 0x24
 8008800:	f89a 3000 	ldrb.w	r3, [sl]
 8008804:	2b00      	cmp	r3, #0
 8008806:	f000 80a2 	beq.w	800894e <_vfiprintf_r+0x20e>
 800880a:	2300      	movs	r3, #0
 800880c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008810:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008814:	f10a 0a01 	add.w	sl, sl, #1
 8008818:	9304      	str	r3, [sp, #16]
 800881a:	9307      	str	r3, [sp, #28]
 800881c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008820:	931a      	str	r3, [sp, #104]	; 0x68
 8008822:	4654      	mov	r4, sl
 8008824:	2205      	movs	r2, #5
 8008826:	f814 1b01 	ldrb.w	r1, [r4], #1
 800882a:	4858      	ldr	r0, [pc, #352]	; (800898c <_vfiprintf_r+0x24c>)
 800882c:	f7ff fad2 	bl	8007dd4 <memchr>
 8008830:	9a04      	ldr	r2, [sp, #16]
 8008832:	b9d8      	cbnz	r0, 800886c <_vfiprintf_r+0x12c>
 8008834:	06d1      	lsls	r1, r2, #27
 8008836:	bf44      	itt	mi
 8008838:	2320      	movmi	r3, #32
 800883a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800883e:	0713      	lsls	r3, r2, #28
 8008840:	bf44      	itt	mi
 8008842:	232b      	movmi	r3, #43	; 0x2b
 8008844:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008848:	f89a 3000 	ldrb.w	r3, [sl]
 800884c:	2b2a      	cmp	r3, #42	; 0x2a
 800884e:	d015      	beq.n	800887c <_vfiprintf_r+0x13c>
 8008850:	4654      	mov	r4, sl
 8008852:	2000      	movs	r0, #0
 8008854:	f04f 0c0a 	mov.w	ip, #10
 8008858:	9a07      	ldr	r2, [sp, #28]
 800885a:	4621      	mov	r1, r4
 800885c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008860:	3b30      	subs	r3, #48	; 0x30
 8008862:	2b09      	cmp	r3, #9
 8008864:	d94e      	bls.n	8008904 <_vfiprintf_r+0x1c4>
 8008866:	b1b0      	cbz	r0, 8008896 <_vfiprintf_r+0x156>
 8008868:	9207      	str	r2, [sp, #28]
 800886a:	e014      	b.n	8008896 <_vfiprintf_r+0x156>
 800886c:	eba0 0308 	sub.w	r3, r0, r8
 8008870:	fa09 f303 	lsl.w	r3, r9, r3
 8008874:	4313      	orrs	r3, r2
 8008876:	46a2      	mov	sl, r4
 8008878:	9304      	str	r3, [sp, #16]
 800887a:	e7d2      	b.n	8008822 <_vfiprintf_r+0xe2>
 800887c:	9b03      	ldr	r3, [sp, #12]
 800887e:	1d19      	adds	r1, r3, #4
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	9103      	str	r1, [sp, #12]
 8008884:	2b00      	cmp	r3, #0
 8008886:	bfbb      	ittet	lt
 8008888:	425b      	neglt	r3, r3
 800888a:	f042 0202 	orrlt.w	r2, r2, #2
 800888e:	9307      	strge	r3, [sp, #28]
 8008890:	9307      	strlt	r3, [sp, #28]
 8008892:	bfb8      	it	lt
 8008894:	9204      	strlt	r2, [sp, #16]
 8008896:	7823      	ldrb	r3, [r4, #0]
 8008898:	2b2e      	cmp	r3, #46	; 0x2e
 800889a:	d10c      	bne.n	80088b6 <_vfiprintf_r+0x176>
 800889c:	7863      	ldrb	r3, [r4, #1]
 800889e:	2b2a      	cmp	r3, #42	; 0x2a
 80088a0:	d135      	bne.n	800890e <_vfiprintf_r+0x1ce>
 80088a2:	9b03      	ldr	r3, [sp, #12]
 80088a4:	3402      	adds	r4, #2
 80088a6:	1d1a      	adds	r2, r3, #4
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	9203      	str	r2, [sp, #12]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	bfb8      	it	lt
 80088b0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80088b4:	9305      	str	r3, [sp, #20]
 80088b6:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8008990 <_vfiprintf_r+0x250>
 80088ba:	2203      	movs	r2, #3
 80088bc:	4650      	mov	r0, sl
 80088be:	7821      	ldrb	r1, [r4, #0]
 80088c0:	f7ff fa88 	bl	8007dd4 <memchr>
 80088c4:	b140      	cbz	r0, 80088d8 <_vfiprintf_r+0x198>
 80088c6:	2340      	movs	r3, #64	; 0x40
 80088c8:	eba0 000a 	sub.w	r0, r0, sl
 80088cc:	fa03 f000 	lsl.w	r0, r3, r0
 80088d0:	9b04      	ldr	r3, [sp, #16]
 80088d2:	3401      	adds	r4, #1
 80088d4:	4303      	orrs	r3, r0
 80088d6:	9304      	str	r3, [sp, #16]
 80088d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088dc:	2206      	movs	r2, #6
 80088de:	482d      	ldr	r0, [pc, #180]	; (8008994 <_vfiprintf_r+0x254>)
 80088e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80088e4:	f7ff fa76 	bl	8007dd4 <memchr>
 80088e8:	2800      	cmp	r0, #0
 80088ea:	d03f      	beq.n	800896c <_vfiprintf_r+0x22c>
 80088ec:	4b2a      	ldr	r3, [pc, #168]	; (8008998 <_vfiprintf_r+0x258>)
 80088ee:	bb1b      	cbnz	r3, 8008938 <_vfiprintf_r+0x1f8>
 80088f0:	9b03      	ldr	r3, [sp, #12]
 80088f2:	3307      	adds	r3, #7
 80088f4:	f023 0307 	bic.w	r3, r3, #7
 80088f8:	3308      	adds	r3, #8
 80088fa:	9303      	str	r3, [sp, #12]
 80088fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088fe:	443b      	add	r3, r7
 8008900:	9309      	str	r3, [sp, #36]	; 0x24
 8008902:	e767      	b.n	80087d4 <_vfiprintf_r+0x94>
 8008904:	460c      	mov	r4, r1
 8008906:	2001      	movs	r0, #1
 8008908:	fb0c 3202 	mla	r2, ip, r2, r3
 800890c:	e7a5      	b.n	800885a <_vfiprintf_r+0x11a>
 800890e:	2300      	movs	r3, #0
 8008910:	f04f 0c0a 	mov.w	ip, #10
 8008914:	4619      	mov	r1, r3
 8008916:	3401      	adds	r4, #1
 8008918:	9305      	str	r3, [sp, #20]
 800891a:	4620      	mov	r0, r4
 800891c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008920:	3a30      	subs	r2, #48	; 0x30
 8008922:	2a09      	cmp	r2, #9
 8008924:	d903      	bls.n	800892e <_vfiprintf_r+0x1ee>
 8008926:	2b00      	cmp	r3, #0
 8008928:	d0c5      	beq.n	80088b6 <_vfiprintf_r+0x176>
 800892a:	9105      	str	r1, [sp, #20]
 800892c:	e7c3      	b.n	80088b6 <_vfiprintf_r+0x176>
 800892e:	4604      	mov	r4, r0
 8008930:	2301      	movs	r3, #1
 8008932:	fb0c 2101 	mla	r1, ip, r1, r2
 8008936:	e7f0      	b.n	800891a <_vfiprintf_r+0x1da>
 8008938:	ab03      	add	r3, sp, #12
 800893a:	9300      	str	r3, [sp, #0]
 800893c:	462a      	mov	r2, r5
 800893e:	4630      	mov	r0, r6
 8008940:	4b16      	ldr	r3, [pc, #88]	; (800899c <_vfiprintf_r+0x25c>)
 8008942:	a904      	add	r1, sp, #16
 8008944:	f7fd fc80 	bl	8006248 <_printf_float>
 8008948:	4607      	mov	r7, r0
 800894a:	1c78      	adds	r0, r7, #1
 800894c:	d1d6      	bne.n	80088fc <_vfiprintf_r+0x1bc>
 800894e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008950:	07d9      	lsls	r1, r3, #31
 8008952:	d405      	bmi.n	8008960 <_vfiprintf_r+0x220>
 8008954:	89ab      	ldrh	r3, [r5, #12]
 8008956:	059a      	lsls	r2, r3, #22
 8008958:	d402      	bmi.n	8008960 <_vfiprintf_r+0x220>
 800895a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800895c:	f7ff f9cc 	bl	8007cf8 <__retarget_lock_release_recursive>
 8008960:	89ab      	ldrh	r3, [r5, #12]
 8008962:	065b      	lsls	r3, r3, #25
 8008964:	f53f af12 	bmi.w	800878c <_vfiprintf_r+0x4c>
 8008968:	9809      	ldr	r0, [sp, #36]	; 0x24
 800896a:	e711      	b.n	8008790 <_vfiprintf_r+0x50>
 800896c:	ab03      	add	r3, sp, #12
 800896e:	9300      	str	r3, [sp, #0]
 8008970:	462a      	mov	r2, r5
 8008972:	4630      	mov	r0, r6
 8008974:	4b09      	ldr	r3, [pc, #36]	; (800899c <_vfiprintf_r+0x25c>)
 8008976:	a904      	add	r1, sp, #16
 8008978:	f7fd ff02 	bl	8006780 <_printf_i>
 800897c:	e7e4      	b.n	8008948 <_vfiprintf_r+0x208>
 800897e:	bf00      	nop
 8008980:	08008e7c 	.word	0x08008e7c
 8008984:	08008e9c 	.word	0x08008e9c
 8008988:	08008e5c 	.word	0x08008e5c
 800898c:	08009014 	.word	0x08009014
 8008990:	0800901a 	.word	0x0800901a
 8008994:	0800901e 	.word	0x0800901e
 8008998:	08006249 	.word	0x08006249
 800899c:	0800871b 	.word	0x0800871b

080089a0 <_putc_r>:
 80089a0:	b570      	push	{r4, r5, r6, lr}
 80089a2:	460d      	mov	r5, r1
 80089a4:	4614      	mov	r4, r2
 80089a6:	4606      	mov	r6, r0
 80089a8:	b118      	cbz	r0, 80089b2 <_putc_r+0x12>
 80089aa:	6983      	ldr	r3, [r0, #24]
 80089ac:	b90b      	cbnz	r3, 80089b2 <_putc_r+0x12>
 80089ae:	f7ff f8ff 	bl	8007bb0 <__sinit>
 80089b2:	4b1c      	ldr	r3, [pc, #112]	; (8008a24 <_putc_r+0x84>)
 80089b4:	429c      	cmp	r4, r3
 80089b6:	d124      	bne.n	8008a02 <_putc_r+0x62>
 80089b8:	6874      	ldr	r4, [r6, #4]
 80089ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80089bc:	07d8      	lsls	r0, r3, #31
 80089be:	d405      	bmi.n	80089cc <_putc_r+0x2c>
 80089c0:	89a3      	ldrh	r3, [r4, #12]
 80089c2:	0599      	lsls	r1, r3, #22
 80089c4:	d402      	bmi.n	80089cc <_putc_r+0x2c>
 80089c6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80089c8:	f7ff f995 	bl	8007cf6 <__retarget_lock_acquire_recursive>
 80089cc:	68a3      	ldr	r3, [r4, #8]
 80089ce:	3b01      	subs	r3, #1
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	60a3      	str	r3, [r4, #8]
 80089d4:	da05      	bge.n	80089e2 <_putc_r+0x42>
 80089d6:	69a2      	ldr	r2, [r4, #24]
 80089d8:	4293      	cmp	r3, r2
 80089da:	db1c      	blt.n	8008a16 <_putc_r+0x76>
 80089dc:	b2eb      	uxtb	r3, r5
 80089de:	2b0a      	cmp	r3, #10
 80089e0:	d019      	beq.n	8008a16 <_putc_r+0x76>
 80089e2:	6823      	ldr	r3, [r4, #0]
 80089e4:	1c5a      	adds	r2, r3, #1
 80089e6:	6022      	str	r2, [r4, #0]
 80089e8:	701d      	strb	r5, [r3, #0]
 80089ea:	b2ed      	uxtb	r5, r5
 80089ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80089ee:	07da      	lsls	r2, r3, #31
 80089f0:	d405      	bmi.n	80089fe <_putc_r+0x5e>
 80089f2:	89a3      	ldrh	r3, [r4, #12]
 80089f4:	059b      	lsls	r3, r3, #22
 80089f6:	d402      	bmi.n	80089fe <_putc_r+0x5e>
 80089f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80089fa:	f7ff f97d 	bl	8007cf8 <__retarget_lock_release_recursive>
 80089fe:	4628      	mov	r0, r5
 8008a00:	bd70      	pop	{r4, r5, r6, pc}
 8008a02:	4b09      	ldr	r3, [pc, #36]	; (8008a28 <_putc_r+0x88>)
 8008a04:	429c      	cmp	r4, r3
 8008a06:	d101      	bne.n	8008a0c <_putc_r+0x6c>
 8008a08:	68b4      	ldr	r4, [r6, #8]
 8008a0a:	e7d6      	b.n	80089ba <_putc_r+0x1a>
 8008a0c:	4b07      	ldr	r3, [pc, #28]	; (8008a2c <_putc_r+0x8c>)
 8008a0e:	429c      	cmp	r4, r3
 8008a10:	bf08      	it	eq
 8008a12:	68f4      	ldreq	r4, [r6, #12]
 8008a14:	e7d1      	b.n	80089ba <_putc_r+0x1a>
 8008a16:	4629      	mov	r1, r5
 8008a18:	4622      	mov	r2, r4
 8008a1a:	4630      	mov	r0, r6
 8008a1c:	f7fe f878 	bl	8006b10 <__swbuf_r>
 8008a20:	4605      	mov	r5, r0
 8008a22:	e7e3      	b.n	80089ec <_putc_r+0x4c>
 8008a24:	08008e7c 	.word	0x08008e7c
 8008a28:	08008e9c 	.word	0x08008e9c
 8008a2c:	08008e5c 	.word	0x08008e5c

08008a30 <_sbrk_r>:
 8008a30:	b538      	push	{r3, r4, r5, lr}
 8008a32:	2300      	movs	r3, #0
 8008a34:	4d05      	ldr	r5, [pc, #20]	; (8008a4c <_sbrk_r+0x1c>)
 8008a36:	4604      	mov	r4, r0
 8008a38:	4608      	mov	r0, r1
 8008a3a:	602b      	str	r3, [r5, #0]
 8008a3c:	f7f8 ff42 	bl	80018c4 <_sbrk>
 8008a40:	1c43      	adds	r3, r0, #1
 8008a42:	d102      	bne.n	8008a4a <_sbrk_r+0x1a>
 8008a44:	682b      	ldr	r3, [r5, #0]
 8008a46:	b103      	cbz	r3, 8008a4a <_sbrk_r+0x1a>
 8008a48:	6023      	str	r3, [r4, #0]
 8008a4a:	bd38      	pop	{r3, r4, r5, pc}
 8008a4c:	200002a8 	.word	0x200002a8

08008a50 <__sread>:
 8008a50:	b510      	push	{r4, lr}
 8008a52:	460c      	mov	r4, r1
 8008a54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a58:	f000 f8e2 	bl	8008c20 <_read_r>
 8008a5c:	2800      	cmp	r0, #0
 8008a5e:	bfab      	itete	ge
 8008a60:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008a62:	89a3      	ldrhlt	r3, [r4, #12]
 8008a64:	181b      	addge	r3, r3, r0
 8008a66:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008a6a:	bfac      	ite	ge
 8008a6c:	6563      	strge	r3, [r4, #84]	; 0x54
 8008a6e:	81a3      	strhlt	r3, [r4, #12]
 8008a70:	bd10      	pop	{r4, pc}

08008a72 <__swrite>:
 8008a72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a76:	461f      	mov	r7, r3
 8008a78:	898b      	ldrh	r3, [r1, #12]
 8008a7a:	4605      	mov	r5, r0
 8008a7c:	05db      	lsls	r3, r3, #23
 8008a7e:	460c      	mov	r4, r1
 8008a80:	4616      	mov	r6, r2
 8008a82:	d505      	bpl.n	8008a90 <__swrite+0x1e>
 8008a84:	2302      	movs	r3, #2
 8008a86:	2200      	movs	r2, #0
 8008a88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a8c:	f000 f898 	bl	8008bc0 <_lseek_r>
 8008a90:	89a3      	ldrh	r3, [r4, #12]
 8008a92:	4632      	mov	r2, r6
 8008a94:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008a98:	81a3      	strh	r3, [r4, #12]
 8008a9a:	4628      	mov	r0, r5
 8008a9c:	463b      	mov	r3, r7
 8008a9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008aa2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008aa6:	f000 b817 	b.w	8008ad8 <_write_r>

08008aaa <__sseek>:
 8008aaa:	b510      	push	{r4, lr}
 8008aac:	460c      	mov	r4, r1
 8008aae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ab2:	f000 f885 	bl	8008bc0 <_lseek_r>
 8008ab6:	1c43      	adds	r3, r0, #1
 8008ab8:	89a3      	ldrh	r3, [r4, #12]
 8008aba:	bf15      	itete	ne
 8008abc:	6560      	strne	r0, [r4, #84]	; 0x54
 8008abe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008ac2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008ac6:	81a3      	strheq	r3, [r4, #12]
 8008ac8:	bf18      	it	ne
 8008aca:	81a3      	strhne	r3, [r4, #12]
 8008acc:	bd10      	pop	{r4, pc}

08008ace <__sclose>:
 8008ace:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ad2:	f000 b831 	b.w	8008b38 <_close_r>
	...

08008ad8 <_write_r>:
 8008ad8:	b538      	push	{r3, r4, r5, lr}
 8008ada:	4604      	mov	r4, r0
 8008adc:	4608      	mov	r0, r1
 8008ade:	4611      	mov	r1, r2
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	4d05      	ldr	r5, [pc, #20]	; (8008af8 <_write_r+0x20>)
 8008ae4:	602a      	str	r2, [r5, #0]
 8008ae6:	461a      	mov	r2, r3
 8008ae8:	f7f8 fea6 	bl	8001838 <_write>
 8008aec:	1c43      	adds	r3, r0, #1
 8008aee:	d102      	bne.n	8008af6 <_write_r+0x1e>
 8008af0:	682b      	ldr	r3, [r5, #0]
 8008af2:	b103      	cbz	r3, 8008af6 <_write_r+0x1e>
 8008af4:	6023      	str	r3, [r4, #0]
 8008af6:	bd38      	pop	{r3, r4, r5, pc}
 8008af8:	200002a8 	.word	0x200002a8

08008afc <__assert_func>:
 8008afc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008afe:	4614      	mov	r4, r2
 8008b00:	461a      	mov	r2, r3
 8008b02:	4b09      	ldr	r3, [pc, #36]	; (8008b28 <__assert_func+0x2c>)
 8008b04:	4605      	mov	r5, r0
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	68d8      	ldr	r0, [r3, #12]
 8008b0a:	b14c      	cbz	r4, 8008b20 <__assert_func+0x24>
 8008b0c:	4b07      	ldr	r3, [pc, #28]	; (8008b2c <__assert_func+0x30>)
 8008b0e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008b12:	9100      	str	r1, [sp, #0]
 8008b14:	462b      	mov	r3, r5
 8008b16:	4906      	ldr	r1, [pc, #24]	; (8008b30 <__assert_func+0x34>)
 8008b18:	f000 f81e 	bl	8008b58 <fiprintf>
 8008b1c:	f000 f89f 	bl	8008c5e <abort>
 8008b20:	4b04      	ldr	r3, [pc, #16]	; (8008b34 <__assert_func+0x38>)
 8008b22:	461c      	mov	r4, r3
 8008b24:	e7f3      	b.n	8008b0e <__assert_func+0x12>
 8008b26:	bf00      	nop
 8008b28:	2000000c 	.word	0x2000000c
 8008b2c:	08009025 	.word	0x08009025
 8008b30:	08009032 	.word	0x08009032
 8008b34:	08009060 	.word	0x08009060

08008b38 <_close_r>:
 8008b38:	b538      	push	{r3, r4, r5, lr}
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	4d05      	ldr	r5, [pc, #20]	; (8008b54 <_close_r+0x1c>)
 8008b3e:	4604      	mov	r4, r0
 8008b40:	4608      	mov	r0, r1
 8008b42:	602b      	str	r3, [r5, #0]
 8008b44:	f7f8 fe8e 	bl	8001864 <_close>
 8008b48:	1c43      	adds	r3, r0, #1
 8008b4a:	d102      	bne.n	8008b52 <_close_r+0x1a>
 8008b4c:	682b      	ldr	r3, [r5, #0]
 8008b4e:	b103      	cbz	r3, 8008b52 <_close_r+0x1a>
 8008b50:	6023      	str	r3, [r4, #0]
 8008b52:	bd38      	pop	{r3, r4, r5, pc}
 8008b54:	200002a8 	.word	0x200002a8

08008b58 <fiprintf>:
 8008b58:	b40e      	push	{r1, r2, r3}
 8008b5a:	b503      	push	{r0, r1, lr}
 8008b5c:	4601      	mov	r1, r0
 8008b5e:	ab03      	add	r3, sp, #12
 8008b60:	4805      	ldr	r0, [pc, #20]	; (8008b78 <fiprintf+0x20>)
 8008b62:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b66:	6800      	ldr	r0, [r0, #0]
 8008b68:	9301      	str	r3, [sp, #4]
 8008b6a:	f7ff fde9 	bl	8008740 <_vfiprintf_r>
 8008b6e:	b002      	add	sp, #8
 8008b70:	f85d eb04 	ldr.w	lr, [sp], #4
 8008b74:	b003      	add	sp, #12
 8008b76:	4770      	bx	lr
 8008b78:	2000000c 	.word	0x2000000c

08008b7c <_fstat_r>:
 8008b7c:	b538      	push	{r3, r4, r5, lr}
 8008b7e:	2300      	movs	r3, #0
 8008b80:	4d06      	ldr	r5, [pc, #24]	; (8008b9c <_fstat_r+0x20>)
 8008b82:	4604      	mov	r4, r0
 8008b84:	4608      	mov	r0, r1
 8008b86:	4611      	mov	r1, r2
 8008b88:	602b      	str	r3, [r5, #0]
 8008b8a:	f7f8 fe76 	bl	800187a <_fstat>
 8008b8e:	1c43      	adds	r3, r0, #1
 8008b90:	d102      	bne.n	8008b98 <_fstat_r+0x1c>
 8008b92:	682b      	ldr	r3, [r5, #0]
 8008b94:	b103      	cbz	r3, 8008b98 <_fstat_r+0x1c>
 8008b96:	6023      	str	r3, [r4, #0]
 8008b98:	bd38      	pop	{r3, r4, r5, pc}
 8008b9a:	bf00      	nop
 8008b9c:	200002a8 	.word	0x200002a8

08008ba0 <_isatty_r>:
 8008ba0:	b538      	push	{r3, r4, r5, lr}
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	4d05      	ldr	r5, [pc, #20]	; (8008bbc <_isatty_r+0x1c>)
 8008ba6:	4604      	mov	r4, r0
 8008ba8:	4608      	mov	r0, r1
 8008baa:	602b      	str	r3, [r5, #0]
 8008bac:	f7f8 fe74 	bl	8001898 <_isatty>
 8008bb0:	1c43      	adds	r3, r0, #1
 8008bb2:	d102      	bne.n	8008bba <_isatty_r+0x1a>
 8008bb4:	682b      	ldr	r3, [r5, #0]
 8008bb6:	b103      	cbz	r3, 8008bba <_isatty_r+0x1a>
 8008bb8:	6023      	str	r3, [r4, #0]
 8008bba:	bd38      	pop	{r3, r4, r5, pc}
 8008bbc:	200002a8 	.word	0x200002a8

08008bc0 <_lseek_r>:
 8008bc0:	b538      	push	{r3, r4, r5, lr}
 8008bc2:	4604      	mov	r4, r0
 8008bc4:	4608      	mov	r0, r1
 8008bc6:	4611      	mov	r1, r2
 8008bc8:	2200      	movs	r2, #0
 8008bca:	4d05      	ldr	r5, [pc, #20]	; (8008be0 <_lseek_r+0x20>)
 8008bcc:	602a      	str	r2, [r5, #0]
 8008bce:	461a      	mov	r2, r3
 8008bd0:	f7f8 fe6c 	bl	80018ac <_lseek>
 8008bd4:	1c43      	adds	r3, r0, #1
 8008bd6:	d102      	bne.n	8008bde <_lseek_r+0x1e>
 8008bd8:	682b      	ldr	r3, [r5, #0]
 8008bda:	b103      	cbz	r3, 8008bde <_lseek_r+0x1e>
 8008bdc:	6023      	str	r3, [r4, #0]
 8008bde:	bd38      	pop	{r3, r4, r5, pc}
 8008be0:	200002a8 	.word	0x200002a8

08008be4 <__ascii_mbtowc>:
 8008be4:	b082      	sub	sp, #8
 8008be6:	b901      	cbnz	r1, 8008bea <__ascii_mbtowc+0x6>
 8008be8:	a901      	add	r1, sp, #4
 8008bea:	b142      	cbz	r2, 8008bfe <__ascii_mbtowc+0x1a>
 8008bec:	b14b      	cbz	r3, 8008c02 <__ascii_mbtowc+0x1e>
 8008bee:	7813      	ldrb	r3, [r2, #0]
 8008bf0:	600b      	str	r3, [r1, #0]
 8008bf2:	7812      	ldrb	r2, [r2, #0]
 8008bf4:	1e10      	subs	r0, r2, #0
 8008bf6:	bf18      	it	ne
 8008bf8:	2001      	movne	r0, #1
 8008bfa:	b002      	add	sp, #8
 8008bfc:	4770      	bx	lr
 8008bfe:	4610      	mov	r0, r2
 8008c00:	e7fb      	b.n	8008bfa <__ascii_mbtowc+0x16>
 8008c02:	f06f 0001 	mvn.w	r0, #1
 8008c06:	e7f8      	b.n	8008bfa <__ascii_mbtowc+0x16>

08008c08 <__malloc_lock>:
 8008c08:	4801      	ldr	r0, [pc, #4]	; (8008c10 <__malloc_lock+0x8>)
 8008c0a:	f7ff b874 	b.w	8007cf6 <__retarget_lock_acquire_recursive>
 8008c0e:	bf00      	nop
 8008c10:	2000029c 	.word	0x2000029c

08008c14 <__malloc_unlock>:
 8008c14:	4801      	ldr	r0, [pc, #4]	; (8008c1c <__malloc_unlock+0x8>)
 8008c16:	f7ff b86f 	b.w	8007cf8 <__retarget_lock_release_recursive>
 8008c1a:	bf00      	nop
 8008c1c:	2000029c 	.word	0x2000029c

08008c20 <_read_r>:
 8008c20:	b538      	push	{r3, r4, r5, lr}
 8008c22:	4604      	mov	r4, r0
 8008c24:	4608      	mov	r0, r1
 8008c26:	4611      	mov	r1, r2
 8008c28:	2200      	movs	r2, #0
 8008c2a:	4d05      	ldr	r5, [pc, #20]	; (8008c40 <_read_r+0x20>)
 8008c2c:	602a      	str	r2, [r5, #0]
 8008c2e:	461a      	mov	r2, r3
 8008c30:	f7f8 fde5 	bl	80017fe <_read>
 8008c34:	1c43      	adds	r3, r0, #1
 8008c36:	d102      	bne.n	8008c3e <_read_r+0x1e>
 8008c38:	682b      	ldr	r3, [r5, #0]
 8008c3a:	b103      	cbz	r3, 8008c3e <_read_r+0x1e>
 8008c3c:	6023      	str	r3, [r4, #0]
 8008c3e:	bd38      	pop	{r3, r4, r5, pc}
 8008c40:	200002a8 	.word	0x200002a8

08008c44 <__ascii_wctomb>:
 8008c44:	4603      	mov	r3, r0
 8008c46:	4608      	mov	r0, r1
 8008c48:	b141      	cbz	r1, 8008c5c <__ascii_wctomb+0x18>
 8008c4a:	2aff      	cmp	r2, #255	; 0xff
 8008c4c:	d904      	bls.n	8008c58 <__ascii_wctomb+0x14>
 8008c4e:	228a      	movs	r2, #138	; 0x8a
 8008c50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008c54:	601a      	str	r2, [r3, #0]
 8008c56:	4770      	bx	lr
 8008c58:	2001      	movs	r0, #1
 8008c5a:	700a      	strb	r2, [r1, #0]
 8008c5c:	4770      	bx	lr

08008c5e <abort>:
 8008c5e:	2006      	movs	r0, #6
 8008c60:	b508      	push	{r3, lr}
 8008c62:	f000 f82b 	bl	8008cbc <raise>
 8008c66:	2001      	movs	r0, #1
 8008c68:	f7f8 fdbf 	bl	80017ea <_exit>

08008c6c <_raise_r>:
 8008c6c:	291f      	cmp	r1, #31
 8008c6e:	b538      	push	{r3, r4, r5, lr}
 8008c70:	4604      	mov	r4, r0
 8008c72:	460d      	mov	r5, r1
 8008c74:	d904      	bls.n	8008c80 <_raise_r+0x14>
 8008c76:	2316      	movs	r3, #22
 8008c78:	6003      	str	r3, [r0, #0]
 8008c7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008c7e:	bd38      	pop	{r3, r4, r5, pc}
 8008c80:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008c82:	b112      	cbz	r2, 8008c8a <_raise_r+0x1e>
 8008c84:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008c88:	b94b      	cbnz	r3, 8008c9e <_raise_r+0x32>
 8008c8a:	4620      	mov	r0, r4
 8008c8c:	f000 f830 	bl	8008cf0 <_getpid_r>
 8008c90:	462a      	mov	r2, r5
 8008c92:	4601      	mov	r1, r0
 8008c94:	4620      	mov	r0, r4
 8008c96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c9a:	f000 b817 	b.w	8008ccc <_kill_r>
 8008c9e:	2b01      	cmp	r3, #1
 8008ca0:	d00a      	beq.n	8008cb8 <_raise_r+0x4c>
 8008ca2:	1c59      	adds	r1, r3, #1
 8008ca4:	d103      	bne.n	8008cae <_raise_r+0x42>
 8008ca6:	2316      	movs	r3, #22
 8008ca8:	6003      	str	r3, [r0, #0]
 8008caa:	2001      	movs	r0, #1
 8008cac:	e7e7      	b.n	8008c7e <_raise_r+0x12>
 8008cae:	2400      	movs	r4, #0
 8008cb0:	4628      	mov	r0, r5
 8008cb2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008cb6:	4798      	blx	r3
 8008cb8:	2000      	movs	r0, #0
 8008cba:	e7e0      	b.n	8008c7e <_raise_r+0x12>

08008cbc <raise>:
 8008cbc:	4b02      	ldr	r3, [pc, #8]	; (8008cc8 <raise+0xc>)
 8008cbe:	4601      	mov	r1, r0
 8008cc0:	6818      	ldr	r0, [r3, #0]
 8008cc2:	f7ff bfd3 	b.w	8008c6c <_raise_r>
 8008cc6:	bf00      	nop
 8008cc8:	2000000c 	.word	0x2000000c

08008ccc <_kill_r>:
 8008ccc:	b538      	push	{r3, r4, r5, lr}
 8008cce:	2300      	movs	r3, #0
 8008cd0:	4d06      	ldr	r5, [pc, #24]	; (8008cec <_kill_r+0x20>)
 8008cd2:	4604      	mov	r4, r0
 8008cd4:	4608      	mov	r0, r1
 8008cd6:	4611      	mov	r1, r2
 8008cd8:	602b      	str	r3, [r5, #0]
 8008cda:	f7f8 fd76 	bl	80017ca <_kill>
 8008cde:	1c43      	adds	r3, r0, #1
 8008ce0:	d102      	bne.n	8008ce8 <_kill_r+0x1c>
 8008ce2:	682b      	ldr	r3, [r5, #0]
 8008ce4:	b103      	cbz	r3, 8008ce8 <_kill_r+0x1c>
 8008ce6:	6023      	str	r3, [r4, #0]
 8008ce8:	bd38      	pop	{r3, r4, r5, pc}
 8008cea:	bf00      	nop
 8008cec:	200002a8 	.word	0x200002a8

08008cf0 <_getpid_r>:
 8008cf0:	f7f8 bd64 	b.w	80017bc <_getpid>

08008cf4 <_init>:
 8008cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cf6:	bf00      	nop
 8008cf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cfa:	bc08      	pop	{r3}
 8008cfc:	469e      	mov	lr, r3
 8008cfe:	4770      	bx	lr

08008d00 <_fini>:
 8008d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d02:	bf00      	nop
 8008d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d06:	bc08      	pop	{r3}
 8008d08:	469e      	mov	lr, r3
 8008d0a:	4770      	bx	lr
