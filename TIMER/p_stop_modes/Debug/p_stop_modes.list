
p_stop_modes.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003dc4  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  08003f70  08003f70  00013f70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800405c  0800405c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800405c  0800405c  0001405c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004064  08004064  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004064  08004064  00014064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004068  08004068  00014068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800406c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e0  20000074  080040e0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000154  080040e0  00020154  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e6ba  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ee3  00000000  00000000  0002e75e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ba0  00000000  00000000  00030648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ad8  00000000  00000000  000311e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029bef  00000000  00000000  00031cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d304  00000000  00000000  0005b8af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fd969  00000000  00000000  00068bb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016651c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003544  00000000  00000000  0016656c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000074 	.word	0x20000074
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08003f58 	.word	0x08003f58

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000078 	.word	0x20000078
 80001e8:	08003f58 	.word	0x08003f58

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800020c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000210:	f000 b974 	b.w	80004fc <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	4604      	mov	r4, r0
 8000234:	468e      	mov	lr, r1
 8000236:	2b00      	cmp	r3, #0
 8000238:	d14d      	bne.n	80002d6 <__udivmoddi4+0xaa>
 800023a:	428a      	cmp	r2, r1
 800023c:	4694      	mov	ip, r2
 800023e:	d969      	bls.n	8000314 <__udivmoddi4+0xe8>
 8000240:	fab2 f282 	clz	r2, r2
 8000244:	b152      	cbz	r2, 800025c <__udivmoddi4+0x30>
 8000246:	fa01 f302 	lsl.w	r3, r1, r2
 800024a:	f1c2 0120 	rsb	r1, r2, #32
 800024e:	fa20 f101 	lsr.w	r1, r0, r1
 8000252:	fa0c fc02 	lsl.w	ip, ip, r2
 8000256:	ea41 0e03 	orr.w	lr, r1, r3
 800025a:	4094      	lsls	r4, r2
 800025c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000260:	0c21      	lsrs	r1, r4, #16
 8000262:	fbbe f6f8 	udiv	r6, lr, r8
 8000266:	fa1f f78c 	uxth.w	r7, ip
 800026a:	fb08 e316 	mls	r3, r8, r6, lr
 800026e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000272:	fb06 f107 	mul.w	r1, r6, r7
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000282:	f080 811f 	bcs.w	80004c4 <__udivmoddi4+0x298>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 811c 	bls.w	80004c4 <__udivmoddi4+0x298>
 800028c:	3e02      	subs	r6, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a5b      	subs	r3, r3, r1
 8000292:	b2a4      	uxth	r4, r4
 8000294:	fbb3 f0f8 	udiv	r0, r3, r8
 8000298:	fb08 3310 	mls	r3, r8, r0, r3
 800029c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a0:	fb00 f707 	mul.w	r7, r0, r7
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	d90a      	bls.n	80002be <__udivmoddi4+0x92>
 80002a8:	eb1c 0404 	adds.w	r4, ip, r4
 80002ac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b0:	f080 810a 	bcs.w	80004c8 <__udivmoddi4+0x29c>
 80002b4:	42a7      	cmp	r7, r4
 80002b6:	f240 8107 	bls.w	80004c8 <__udivmoddi4+0x29c>
 80002ba:	4464      	add	r4, ip
 80002bc:	3802      	subs	r0, #2
 80002be:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c2:	1be4      	subs	r4, r4, r7
 80002c4:	2600      	movs	r6, #0
 80002c6:	b11d      	cbz	r5, 80002d0 <__udivmoddi4+0xa4>
 80002c8:	40d4      	lsrs	r4, r2
 80002ca:	2300      	movs	r3, #0
 80002cc:	e9c5 4300 	strd	r4, r3, [r5]
 80002d0:	4631      	mov	r1, r6
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d909      	bls.n	80002ee <__udivmoddi4+0xc2>
 80002da:	2d00      	cmp	r5, #0
 80002dc:	f000 80ef 	beq.w	80004be <__udivmoddi4+0x292>
 80002e0:	2600      	movs	r6, #0
 80002e2:	e9c5 0100 	strd	r0, r1, [r5]
 80002e6:	4630      	mov	r0, r6
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	fab3 f683 	clz	r6, r3
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	d14a      	bne.n	800038c <__udivmoddi4+0x160>
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xd4>
 80002fa:	4282      	cmp	r2, r0
 80002fc:	f200 80f9 	bhi.w	80004f2 <__udivmoddi4+0x2c6>
 8000300:	1a84      	subs	r4, r0, r2
 8000302:	eb61 0303 	sbc.w	r3, r1, r3
 8000306:	2001      	movs	r0, #1
 8000308:	469e      	mov	lr, r3
 800030a:	2d00      	cmp	r5, #0
 800030c:	d0e0      	beq.n	80002d0 <__udivmoddi4+0xa4>
 800030e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000312:	e7dd      	b.n	80002d0 <__udivmoddi4+0xa4>
 8000314:	b902      	cbnz	r2, 8000318 <__udivmoddi4+0xec>
 8000316:	deff      	udf	#255	; 0xff
 8000318:	fab2 f282 	clz	r2, r2
 800031c:	2a00      	cmp	r2, #0
 800031e:	f040 8092 	bne.w	8000446 <__udivmoddi4+0x21a>
 8000322:	eba1 010c 	sub.w	r1, r1, ip
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2601      	movs	r6, #1
 8000330:	0c20      	lsrs	r0, r4, #16
 8000332:	fbb1 f3f7 	udiv	r3, r1, r7
 8000336:	fb07 1113 	mls	r1, r7, r3, r1
 800033a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800033e:	fb0e f003 	mul.w	r0, lr, r3
 8000342:	4288      	cmp	r0, r1
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x12c>
 8000346:	eb1c 0101 	adds.w	r1, ip, r1
 800034a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x12a>
 8000350:	4288      	cmp	r0, r1
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2c0>
 8000356:	4643      	mov	r3, r8
 8000358:	1a09      	subs	r1, r1, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000360:	fb07 1110 	mls	r1, r7, r0, r1
 8000364:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x156>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x154>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2ca>
 8000380:	4608      	mov	r0, r1
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800038a:	e79c      	b.n	80002c6 <__udivmoddi4+0x9a>
 800038c:	f1c6 0720 	rsb	r7, r6, #32
 8000390:	40b3      	lsls	r3, r6
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa20 f407 	lsr.w	r4, r0, r7
 800039e:	fa01 f306 	lsl.w	r3, r1, r6
 80003a2:	431c      	orrs	r4, r3
 80003a4:	40f9      	lsrs	r1, r7
 80003a6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003aa:	fa00 f306 	lsl.w	r3, r0, r6
 80003ae:	fbb1 f8f9 	udiv	r8, r1, r9
 80003b2:	0c20      	lsrs	r0, r4, #16
 80003b4:	fa1f fe8c 	uxth.w	lr, ip
 80003b8:	fb09 1118 	mls	r1, r9, r8, r1
 80003bc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c0:	fb08 f00e 	mul.w	r0, r8, lr
 80003c4:	4288      	cmp	r0, r1
 80003c6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b8>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2bc>
 80003d8:	4288      	cmp	r0, r1
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2bc>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4461      	add	r1, ip
 80003e4:	1a09      	subs	r1, r1, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003ec:	fb09 1110 	mls	r1, r9, r0, r1
 80003f0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003f8:	458e      	cmp	lr, r1
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1e2>
 80003fc:	eb1c 0101 	adds.w	r1, ip, r1
 8000400:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2b4>
 8000406:	458e      	cmp	lr, r1
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2b4>
 800040a:	3802      	subs	r0, #2
 800040c:	4461      	add	r1, ip
 800040e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000412:	fba0 9402 	umull	r9, r4, r0, r2
 8000416:	eba1 010e 	sub.w	r1, r1, lr
 800041a:	42a1      	cmp	r1, r4
 800041c:	46c8      	mov	r8, r9
 800041e:	46a6      	mov	lr, r4
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x2a4>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x2a0>
 8000424:	b15d      	cbz	r5, 800043e <__udivmoddi4+0x212>
 8000426:	ebb3 0208 	subs.w	r2, r3, r8
 800042a:	eb61 010e 	sbc.w	r1, r1, lr
 800042e:	fa01 f707 	lsl.w	r7, r1, r7
 8000432:	fa22 f306 	lsr.w	r3, r2, r6
 8000436:	40f1      	lsrs	r1, r6
 8000438:	431f      	orrs	r7, r3
 800043a:	e9c5 7100 	strd	r7, r1, [r5]
 800043e:	2600      	movs	r6, #0
 8000440:	4631      	mov	r1, r6
 8000442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000446:	f1c2 0320 	rsb	r3, r2, #32
 800044a:	40d8      	lsrs	r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa21 f303 	lsr.w	r3, r1, r3
 8000454:	4091      	lsls	r1, r2
 8000456:	4301      	orrs	r1, r0
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb3 f0f7 	udiv	r0, r3, r7
 8000464:	fb07 3610 	mls	r6, r7, r0, r3
 8000468:	0c0b      	lsrs	r3, r1, #16
 800046a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800046e:	fb00 f60e 	mul.w	r6, r0, lr
 8000472:	429e      	cmp	r6, r3
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x260>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b8>
 8000484:	429e      	cmp	r6, r3
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b8>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1b9b      	subs	r3, r3, r6
 800048e:	b289      	uxth	r1, r1
 8000490:	fbb3 f6f7 	udiv	r6, r3, r7
 8000494:	fb07 3316 	mls	r3, r7, r6, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb06 f30e 	mul.w	r3, r6, lr
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x28a>
 80004a4:	eb1c 0101 	adds.w	r1, ip, r1
 80004a8:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2b0>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2b0>
 80004b2:	3e02      	subs	r6, #2
 80004b4:	4461      	add	r1, ip
 80004b6:	1ac9      	subs	r1, r1, r3
 80004b8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0x104>
 80004be:	462e      	mov	r6, r5
 80004c0:	4628      	mov	r0, r5
 80004c2:	e705      	b.n	80002d0 <__udivmoddi4+0xa4>
 80004c4:	4606      	mov	r6, r0
 80004c6:	e6e3      	b.n	8000290 <__udivmoddi4+0x64>
 80004c8:	4618      	mov	r0, r3
 80004ca:	e6f8      	b.n	80002be <__udivmoddi4+0x92>
 80004cc:	454b      	cmp	r3, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f8>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004d8:	3801      	subs	r0, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f8>
 80004dc:	4646      	mov	r6, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x28a>
 80004e0:	4620      	mov	r0, r4
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1e2>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x260>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b8>
 80004ec:	3b02      	subs	r3, #2
 80004ee:	4461      	add	r1, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x12c>
 80004f2:	4630      	mov	r0, r6
 80004f4:	e709      	b.n	800030a <__udivmoddi4+0xde>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x156>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <HAL_GPIO_EXTI_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000500:	b580      	push	{r7, lr}
 8000502:	b084      	sub	sp, #16
 8000504:	af00      	add	r7, sp, #0
 8000506:	4603      	mov	r3, r0
 8000508:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_13) {
 800050a:	88fb      	ldrh	r3, [r7, #6]
 800050c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000510:	d112      	bne.n	8000538 <HAL_GPIO_EXTI_Callback+0x38>
		SystemClock_Config();
 8000512:	f000 f863 	bl	80005dc <SystemClock_Config>
		HAL_ResumeTick();//countios opration on intrupts
 8000516:	f000 fb7f 	bl	8000c18 <HAL_ResumeTick>
		char *str = "WAKEUP FROM EXTII\r\n";
 800051a:	4b09      	ldr	r3, [pc, #36]	; (8000540 <HAL_GPIO_EXTI_Callback+0x40>)
 800051c:	60fb      	str	r3, [r7, #12]
		HAL_UART_Transmit(&hlpuart1, (uint8_t*) str, strlen(str), HAL_MAX_DELAY);
 800051e:	68f8      	ldr	r0, [r7, #12]
 8000520:	f7ff fe64 	bl	80001ec <strlen>
 8000524:	4603      	mov	r3, r0
 8000526:	b29a      	uxth	r2, r3
 8000528:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800052c:	68f9      	ldr	r1, [r7, #12]
 800052e:	4805      	ldr	r0, [pc, #20]	; (8000544 <HAL_GPIO_EXTI_Callback+0x44>)
 8000530:	f002 fae6 	bl	8002b00 <HAL_UART_Transmit>
		HAL_PWR_DisableSleepOnExit();//
 8000534:	f000 fe84 	bl	8001240 <HAL_PWR_DisableSleepOnExit>
		//when an ISR finishes executing and returns, the microcontroller
		//will not automatically enter the sleep mode


	}
}
 8000538:	bf00      	nop
 800053a:	3710      	adds	r7, #16
 800053c:	46bd      	mov	sp, r7
 800053e:	bd80      	pop	{r7, pc}
 8000540:	08003f70 	.word	0x08003f70
 8000544:	20000090 	.word	0x20000090

08000548 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800054e:	f000 fade 	bl	8000b0e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000552:	f000 f843 	bl	80005dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000556:	f000 f8bf 	bl	80006d8 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 800055a:	f000 f891 	bl	8000680 <MX_LPUART1_UART_Init>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		if (HAL_GPIO_ReadPin(BTN_GPIO_Port, BTN_Pin) == GPIO_PIN_SET) {
 800055e:	2101      	movs	r1, #1
 8000560:	4819      	ldr	r0, [pc, #100]	; (80005c8 <main+0x80>)
 8000562:	f000 fe0d 	bl	8001180 <HAL_GPIO_ReadPin>
 8000566:	4603      	mov	r3, r0
 8000568:	2b01      	cmp	r3, #1
 800056a:	d106      	bne.n	800057a <main+0x32>
			// Key pressed
			// Reset the counter
			remainingMillis = TIMEOUT_INTERVAL_MS;
 800056c:	4b17      	ldr	r3, [pc, #92]	; (80005cc <main+0x84>)
 800056e:	f242 7210 	movw	r2, #10000	; 0x2710
 8000572:	601a      	str	r2, [r3, #0]
			printf("Key pressed!\n");
 8000574:	4816      	ldr	r0, [pc, #88]	; (80005d0 <main+0x88>)
 8000576:	f003 f85f 	bl	8003638 <puts>
//			HAL_Delay(200);
		}

		uint32_t currentMillis = HAL_GetTick();
 800057a:	f000 fb31 	bl	8000be0 <HAL_GetTick>
 800057e:	6078      	str	r0, [r7, #4]
		uint32_t elapsedMillis = currentMillis - previousMillis;
 8000580:	4b14      	ldr	r3, [pc, #80]	; (80005d4 <main+0x8c>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	687a      	ldr	r2, [r7, #4]
 8000586:	1ad3      	subs	r3, r2, r3
 8000588:	603b      	str	r3, [r7, #0]

		if (elapsedMillis >= remainingMillis) {
 800058a:	4b10      	ldr	r3, [pc, #64]	; (80005cc <main+0x84>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	683a      	ldr	r2, [r7, #0]
 8000590:	429a      	cmp	r2, r3
 8000592:	d311      	bcc.n	80005b8 <main+0x70>
			// Timeout occurred
			printf("About to go into stop mode\r\n");
 8000594:	4810      	ldr	r0, [pc, #64]	; (80005d8 <main+0x90>)
 8000596:	f003 f84f 	bl	8003638 <puts>
//			if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0x5A55,
//					RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK) {
//				Error_Handler();
//			}

			HAL_SuspendTick();	            //Intrupt not provide suspend tick
 800059a:	f000 fb2d 	bl	8000bf8 <HAL_SuspendTick>
//			HAL_PWR_EnableSleepOnExit();//returns from the interrupt service routine (ISR),
			HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);	// stop mode
 800059e:	2101      	movs	r1, #1
 80005a0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80005a4:	f000 fe34 	bl	8001210 <HAL_PWR_EnterSTOPMode>

			// Reset the counter
			remainingMillis = TIMEOUT_INTERVAL_MS;
 80005a8:	4b08      	ldr	r3, [pc, #32]	; (80005cc <main+0x84>)
 80005aa:	f242 7210 	movw	r2, #10000	; 0x2710
 80005ae:	601a      	str	r2, [r3, #0]
			previousMillis = currentMillis;
 80005b0:	4a08      	ldr	r2, [pc, #32]	; (80005d4 <main+0x8c>)
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	6013      	str	r3, [r2, #0]
 80005b6:	e7d2      	b.n	800055e <main+0x16>
		} else {
			// Update the remaining time
			remainingMillis -= elapsedMillis;
 80005b8:	4b04      	ldr	r3, [pc, #16]	; (80005cc <main+0x84>)
 80005ba:	681a      	ldr	r2, [r3, #0]
 80005bc:	683b      	ldr	r3, [r7, #0]
 80005be:	1ad3      	subs	r3, r2, r3
 80005c0:	4a02      	ldr	r2, [pc, #8]	; (80005cc <main+0x84>)
 80005c2:	6013      	str	r3, [r2, #0]
	while (1) {
 80005c4:	e7cb      	b.n	800055e <main+0x16>
 80005c6:	bf00      	nop
 80005c8:	48000800 	.word	0x48000800
 80005cc:	20000000 	.word	0x20000000
 80005d0:	08003f84 	.word	0x08003f84
 80005d4:	20000138 	.word	0x20000138
 80005d8:	08003f94 	.word	0x08003f94

080005dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b096      	sub	sp, #88	; 0x58
 80005e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e2:	f107 0314 	add.w	r3, r7, #20
 80005e6:	2244      	movs	r2, #68	; 0x44
 80005e8:	2100      	movs	r1, #0
 80005ea:	4618      	mov	r0, r3
 80005ec:	f002 ffae 	bl	800354c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f0:	463b      	mov	r3, r7
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
 80005f6:	605a      	str	r2, [r3, #4]
 80005f8:	609a      	str	r2, [r3, #8]
 80005fa:	60da      	str	r2, [r3, #12]
 80005fc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005fe:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000602:	f000 fe3b 	bl	800127c <HAL_PWREx_ControlVoltageScaling>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800060c:	f000 f8e0 	bl	80007d0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000610:	2309      	movs	r3, #9
 8000612:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000614:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000618:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800061a:	2301      	movs	r3, #1
 800061c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800061e:	2302      	movs	r3, #2
 8000620:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000622:	2303      	movs	r3, #3
 8000624:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000626:	2301      	movs	r3, #1
 8000628:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 800062a:	2314      	movs	r3, #20
 800062c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800062e:	2302      	movs	r3, #2
 8000630:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000632:	2302      	movs	r3, #2
 8000634:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000636:	2302      	movs	r3, #2
 8000638:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800063a:	f107 0314 	add.w	r3, r7, #20
 800063e:	4618      	mov	r0, r3
 8000640:	f000 fed8 	bl	80013f4 <HAL_RCC_OscConfig>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800064a:	f000 f8c1 	bl	80007d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800064e:	230f      	movs	r3, #15
 8000650:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000652:	2303      	movs	r3, #3
 8000654:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000656:	2300      	movs	r3, #0
 8000658:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800065a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800065e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000660:	2300      	movs	r3, #0
 8000662:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000664:	463b      	mov	r3, r7
 8000666:	2104      	movs	r1, #4
 8000668:	4618      	mov	r0, r3
 800066a:	f001 fadd 	bl	8001c28 <HAL_RCC_ClockConfig>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000674:	f000 f8ac 	bl	80007d0 <Error_Handler>
  }
}
 8000678:	bf00      	nop
 800067a:	3758      	adds	r7, #88	; 0x58
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}

08000680 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000684:	4b12      	ldr	r3, [pc, #72]	; (80006d0 <MX_LPUART1_UART_Init+0x50>)
 8000686:	4a13      	ldr	r2, [pc, #76]	; (80006d4 <MX_LPUART1_UART_Init+0x54>)
 8000688:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800068a:	4b11      	ldr	r3, [pc, #68]	; (80006d0 <MX_LPUART1_UART_Init+0x50>)
 800068c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000690:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000692:	4b0f      	ldr	r3, [pc, #60]	; (80006d0 <MX_LPUART1_UART_Init+0x50>)
 8000694:	2200      	movs	r2, #0
 8000696:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000698:	4b0d      	ldr	r3, [pc, #52]	; (80006d0 <MX_LPUART1_UART_Init+0x50>)
 800069a:	2200      	movs	r2, #0
 800069c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800069e:	4b0c      	ldr	r3, [pc, #48]	; (80006d0 <MX_LPUART1_UART_Init+0x50>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80006a4:	4b0a      	ldr	r3, [pc, #40]	; (80006d0 <MX_LPUART1_UART_Init+0x50>)
 80006a6:	220c      	movs	r2, #12
 80006a8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006aa:	4b09      	ldr	r3, [pc, #36]	; (80006d0 <MX_LPUART1_UART_Init+0x50>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006b0:	4b07      	ldr	r3, [pc, #28]	; (80006d0 <MX_LPUART1_UART_Init+0x50>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006b6:	4b06      	ldr	r3, [pc, #24]	; (80006d0 <MX_LPUART1_UART_Init+0x50>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80006bc:	4804      	ldr	r0, [pc, #16]	; (80006d0 <MX_LPUART1_UART_Init+0x50>)
 80006be:	f002 f9d1 	bl	8002a64 <HAL_UART_Init>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 80006c8:	f000 f882 	bl	80007d0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80006cc:	bf00      	nop
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	20000090 	.word	0x20000090
 80006d4:	40008000 	.word	0x40008000

080006d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b08a      	sub	sp, #40	; 0x28
 80006dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006de:	f107 0314 	add.w	r3, r7, #20
 80006e2:	2200      	movs	r2, #0
 80006e4:	601a      	str	r2, [r3, #0]
 80006e6:	605a      	str	r2, [r3, #4]
 80006e8:	609a      	str	r2, [r3, #8]
 80006ea:	60da      	str	r2, [r3, #12]
 80006ec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ee:	4b35      	ldr	r3, [pc, #212]	; (80007c4 <MX_GPIO_Init+0xec>)
 80006f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006f2:	4a34      	ldr	r2, [pc, #208]	; (80007c4 <MX_GPIO_Init+0xec>)
 80006f4:	f043 0304 	orr.w	r3, r3, #4
 80006f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006fa:	4b32      	ldr	r3, [pc, #200]	; (80007c4 <MX_GPIO_Init+0xec>)
 80006fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006fe:	f003 0304 	and.w	r3, r3, #4
 8000702:	613b      	str	r3, [r7, #16]
 8000704:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000706:	4b2f      	ldr	r3, [pc, #188]	; (80007c4 <MX_GPIO_Init+0xec>)
 8000708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800070a:	4a2e      	ldr	r2, [pc, #184]	; (80007c4 <MX_GPIO_Init+0xec>)
 800070c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000710:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000712:	4b2c      	ldr	r3, [pc, #176]	; (80007c4 <MX_GPIO_Init+0xec>)
 8000714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800071a:	60fb      	str	r3, [r7, #12]
 800071c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800071e:	4b29      	ldr	r3, [pc, #164]	; (80007c4 <MX_GPIO_Init+0xec>)
 8000720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000722:	4a28      	ldr	r2, [pc, #160]	; (80007c4 <MX_GPIO_Init+0xec>)
 8000724:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000728:	64d3      	str	r3, [r2, #76]	; 0x4c
 800072a:	4b26      	ldr	r3, [pc, #152]	; (80007c4 <MX_GPIO_Init+0xec>)
 800072c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800072e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000732:	60bb      	str	r3, [r7, #8]
 8000734:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 8000736:	f000 fdf7 	bl	8001328 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800073a:	4b22      	ldr	r3, [pc, #136]	; (80007c4 <MX_GPIO_Init+0xec>)
 800073c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800073e:	4a21      	ldr	r2, [pc, #132]	; (80007c4 <MX_GPIO_Init+0xec>)
 8000740:	f043 0302 	orr.w	r3, r3, #2
 8000744:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000746:	4b1f      	ldr	r3, [pc, #124]	; (80007c4 <MX_GPIO_Init+0xec>)
 8000748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800074a:	f003 0302 	and.w	r3, r3, #2
 800074e:	607b      	str	r3, [r7, #4]
 8000750:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BSP_LED_GPIO_Port, BSP_LED_Pin, GPIO_PIN_RESET);
 8000752:	2200      	movs	r2, #0
 8000754:	2180      	movs	r1, #128	; 0x80
 8000756:	481c      	ldr	r0, [pc, #112]	; (80007c8 <MX_GPIO_Init+0xf0>)
 8000758:	f000 fd2a 	bl	80011b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800075c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000760:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000762:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000766:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000768:	2300      	movs	r3, #0
 800076a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800076c:	f107 0314 	add.w	r3, r7, #20
 8000770:	4619      	mov	r1, r3
 8000772:	4816      	ldr	r0, [pc, #88]	; (80007cc <MX_GPIO_Init+0xf4>)
 8000774:	f000 fb72 	bl	8000e5c <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 8000778:	2301      	movs	r3, #1
 800077a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800077c:	2300      	movs	r3, #0
 800077e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000780:	2300      	movs	r3, #0
 8000782:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 8000784:	f107 0314 	add.w	r3, r7, #20
 8000788:	4619      	mov	r1, r3
 800078a:	4810      	ldr	r0, [pc, #64]	; (80007cc <MX_GPIO_Init+0xf4>)
 800078c:	f000 fb66 	bl	8000e5c <HAL_GPIO_Init>

  /*Configure GPIO pin : BSP_LED_Pin */
  GPIO_InitStruct.Pin = BSP_LED_Pin;
 8000790:	2380      	movs	r3, #128	; 0x80
 8000792:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000794:	2301      	movs	r3, #1
 8000796:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000798:	2300      	movs	r3, #0
 800079a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079c:	2300      	movs	r3, #0
 800079e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BSP_LED_GPIO_Port, &GPIO_InitStruct);
 80007a0:	f107 0314 	add.w	r3, r7, #20
 80007a4:	4619      	mov	r1, r3
 80007a6:	4808      	ldr	r0, [pc, #32]	; (80007c8 <MX_GPIO_Init+0xf0>)
 80007a8:	f000 fb58 	bl	8000e5c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80007ac:	2200      	movs	r2, #0
 80007ae:	2100      	movs	r1, #0
 80007b0:	2028      	movs	r0, #40	; 0x28
 80007b2:	f000 fb1c 	bl	8000dee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80007b6:	2028      	movs	r0, #40	; 0x28
 80007b8:	f000 fb35 	bl	8000e26 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007bc:	bf00      	nop
 80007be:	3728      	adds	r7, #40	; 0x28
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	40021000 	.word	0x40021000
 80007c8:	48000400 	.word	0x48000400
 80007cc:	48000800 	.word	0x48000800

080007d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007d4:	b672      	cpsid	i
}
 80007d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007d8:	e7fe      	b.n	80007d8 <Error_Handler+0x8>
	...

080007dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	b083      	sub	sp, #12
 80007e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007e2:	4b0f      	ldr	r3, [pc, #60]	; (8000820 <HAL_MspInit+0x44>)
 80007e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007e6:	4a0e      	ldr	r2, [pc, #56]	; (8000820 <HAL_MspInit+0x44>)
 80007e8:	f043 0301 	orr.w	r3, r3, #1
 80007ec:	6613      	str	r3, [r2, #96]	; 0x60
 80007ee:	4b0c      	ldr	r3, [pc, #48]	; (8000820 <HAL_MspInit+0x44>)
 80007f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007f2:	f003 0301 	and.w	r3, r3, #1
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007fa:	4b09      	ldr	r3, [pc, #36]	; (8000820 <HAL_MspInit+0x44>)
 80007fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007fe:	4a08      	ldr	r2, [pc, #32]	; (8000820 <HAL_MspInit+0x44>)
 8000800:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000804:	6593      	str	r3, [r2, #88]	; 0x58
 8000806:	4b06      	ldr	r3, [pc, #24]	; (8000820 <HAL_MspInit+0x44>)
 8000808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800080a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800080e:	603b      	str	r3, [r7, #0]
 8000810:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000812:	bf00      	nop
 8000814:	370c      	adds	r7, #12
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop
 8000820:	40021000 	.word	0x40021000

08000824 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b0ac      	sub	sp, #176	; 0xb0
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800083c:	f107 0310 	add.w	r3, r7, #16
 8000840:	228c      	movs	r2, #140	; 0x8c
 8000842:	2100      	movs	r1, #0
 8000844:	4618      	mov	r0, r3
 8000846:	f002 fe81 	bl	800354c <memset>
  if(huart->Instance==LPUART1)
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	4a22      	ldr	r2, [pc, #136]	; (80008d8 <HAL_UART_MspInit+0xb4>)
 8000850:	4293      	cmp	r3, r2
 8000852:	d13d      	bne.n	80008d0 <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000854:	2320      	movs	r3, #32
 8000856:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000858:	2300      	movs	r3, #0
 800085a:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800085c:	f107 0310 	add.w	r3, r7, #16
 8000860:	4618      	mov	r0, r3
 8000862:	f001 fc05 	bl	8002070 <HAL_RCCEx_PeriphCLKConfig>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800086c:	f7ff ffb0 	bl	80007d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000870:	4b1a      	ldr	r3, [pc, #104]	; (80008dc <HAL_UART_MspInit+0xb8>)
 8000872:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000874:	4a19      	ldr	r2, [pc, #100]	; (80008dc <HAL_UART_MspInit+0xb8>)
 8000876:	f043 0301 	orr.w	r3, r3, #1
 800087a:	65d3      	str	r3, [r2, #92]	; 0x5c
 800087c:	4b17      	ldr	r3, [pc, #92]	; (80008dc <HAL_UART_MspInit+0xb8>)
 800087e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000880:	f003 0301 	and.w	r3, r3, #1
 8000884:	60fb      	str	r3, [r7, #12]
 8000886:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000888:	4b14      	ldr	r3, [pc, #80]	; (80008dc <HAL_UART_MspInit+0xb8>)
 800088a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088c:	4a13      	ldr	r2, [pc, #76]	; (80008dc <HAL_UART_MspInit+0xb8>)
 800088e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000892:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000894:	4b11      	ldr	r3, [pc, #68]	; (80008dc <HAL_UART_MspInit+0xb8>)
 8000896:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800089c:	60bb      	str	r3, [r7, #8]
 800089e:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 80008a0:	f000 fd42 	bl	8001328 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80008a4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80008a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ac:	2302      	movs	r3, #2
 80008ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b2:	2300      	movs	r3, #0
 80008b4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008b8:	2303      	movs	r3, #3
 80008ba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80008be:	2308      	movs	r3, #8
 80008c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008c4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80008c8:	4619      	mov	r1, r3
 80008ca:	4805      	ldr	r0, [pc, #20]	; (80008e0 <HAL_UART_MspInit+0xbc>)
 80008cc:	f000 fac6 	bl	8000e5c <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80008d0:	bf00      	nop
 80008d2:	37b0      	adds	r7, #176	; 0xb0
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	40008000 	.word	0x40008000
 80008dc:	40021000 	.word	0x40021000
 80008e0:	48001800 	.word	0x48001800

080008e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008e8:	e7fe      	b.n	80008e8 <NMI_Handler+0x4>

080008ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008ea:	b480      	push	{r7}
 80008ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ee:	e7fe      	b.n	80008ee <HardFault_Handler+0x4>

080008f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008f4:	e7fe      	b.n	80008f4 <MemManage_Handler+0x4>

080008f6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008f6:	b480      	push	{r7}
 80008f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008fa:	e7fe      	b.n	80008fa <BusFault_Handler+0x4>

080008fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000900:	e7fe      	b.n	8000900 <UsageFault_Handler+0x4>

08000902 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000902:	b480      	push	{r7}
 8000904:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000906:	bf00      	nop
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr

08000910 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000914:	bf00      	nop
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr

0800091e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800091e:	b480      	push	{r7}
 8000920:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000922:	bf00      	nop
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr

0800092c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000930:	f000 f942 	bl	8000bb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000934:	bf00      	nop
 8000936:	bd80      	pop	{r7, pc}

08000938 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 800093c:	4802      	ldr	r0, [pc, #8]	; (8000948 <RTC_WKUP_IRQHandler+0x10>)
 800093e:	f002 f861 	bl	8002a04 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8000942:	bf00      	nop
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	20000114 	.word	0x20000114

0800094c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000950:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000954:	f000 fc44 	bl	80011e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000958:	bf00      	nop
 800095a:	bd80      	pop	{r7, pc}

0800095c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b086      	sub	sp, #24
 8000960:	af00      	add	r7, sp, #0
 8000962:	60f8      	str	r0, [r7, #12]
 8000964:	60b9      	str	r1, [r7, #8]
 8000966:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000968:	2300      	movs	r3, #0
 800096a:	617b      	str	r3, [r7, #20]
 800096c:	e00a      	b.n	8000984 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800096e:	f3af 8000 	nop.w
 8000972:	4601      	mov	r1, r0
 8000974:	68bb      	ldr	r3, [r7, #8]
 8000976:	1c5a      	adds	r2, r3, #1
 8000978:	60ba      	str	r2, [r7, #8]
 800097a:	b2ca      	uxtb	r2, r1
 800097c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800097e:	697b      	ldr	r3, [r7, #20]
 8000980:	3301      	adds	r3, #1
 8000982:	617b      	str	r3, [r7, #20]
 8000984:	697a      	ldr	r2, [r7, #20]
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	429a      	cmp	r2, r3
 800098a:	dbf0      	blt.n	800096e <_read+0x12>
  }

  return len;
 800098c:	687b      	ldr	r3, [r7, #4]
}
 800098e:	4618      	mov	r0, r3
 8000990:	3718      	adds	r7, #24
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
	...

08000998 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b084      	sub	sp, #16
 800099c:	af00      	add	r7, sp, #0
 800099e:	60f8      	str	r0, [r7, #12]
 80009a0:	60b9      	str	r1, [r7, #8]
 80009a2:	607a      	str	r2, [r7, #4]

	HAL_UART_Transmit(&hlpuart1, (uint8_t *)ptr, len, HAL_MAX_DELAY );
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	b29a      	uxth	r2, r3
 80009a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80009ac:	68b9      	ldr	r1, [r7, #8]
 80009ae:	4804      	ldr	r0, [pc, #16]	; (80009c0 <_write+0x28>)
 80009b0:	f002 f8a6 	bl	8002b00 <HAL_UART_Transmit>

				return len;
 80009b4:	687b      	ldr	r3, [r7, #4]


}
 80009b6:	4618      	mov	r0, r3
 80009b8:	3710      	adds	r7, #16
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	20000090 	.word	0x20000090

080009c4 <_close>:

int _close(int file)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80009cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	370c      	adds	r7, #12
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr

080009dc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
 80009e4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80009e6:	683b      	ldr	r3, [r7, #0]
 80009e8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009ec:	605a      	str	r2, [r3, #4]
  return 0;
 80009ee:	2300      	movs	r3, #0
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	370c      	adds	r7, #12
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr

080009fc <_isatty>:

int _isatty(int file)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a04:	2301      	movs	r3, #1
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	370c      	adds	r7, #12
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr

08000a12 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a12:	b480      	push	{r7}
 8000a14:	b085      	sub	sp, #20
 8000a16:	af00      	add	r7, sp, #0
 8000a18:	60f8      	str	r0, [r7, #12]
 8000a1a:	60b9      	str	r1, [r7, #8]
 8000a1c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a1e:	2300      	movs	r3, #0
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	3714      	adds	r7, #20
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr

08000a2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b086      	sub	sp, #24
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a34:	4a14      	ldr	r2, [pc, #80]	; (8000a88 <_sbrk+0x5c>)
 8000a36:	4b15      	ldr	r3, [pc, #84]	; (8000a8c <_sbrk+0x60>)
 8000a38:	1ad3      	subs	r3, r2, r3
 8000a3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a3c:	697b      	ldr	r3, [r7, #20]
 8000a3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a40:	4b13      	ldr	r3, [pc, #76]	; (8000a90 <_sbrk+0x64>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d102      	bne.n	8000a4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a48:	4b11      	ldr	r3, [pc, #68]	; (8000a90 <_sbrk+0x64>)
 8000a4a:	4a12      	ldr	r2, [pc, #72]	; (8000a94 <_sbrk+0x68>)
 8000a4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a4e:	4b10      	ldr	r3, [pc, #64]	; (8000a90 <_sbrk+0x64>)
 8000a50:	681a      	ldr	r2, [r3, #0]
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	4413      	add	r3, r2
 8000a56:	693a      	ldr	r2, [r7, #16]
 8000a58:	429a      	cmp	r2, r3
 8000a5a:	d207      	bcs.n	8000a6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a5c:	f002 fd4c 	bl	80034f8 <__errno>
 8000a60:	4603      	mov	r3, r0
 8000a62:	220c      	movs	r2, #12
 8000a64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a6a:	e009      	b.n	8000a80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a6c:	4b08      	ldr	r3, [pc, #32]	; (8000a90 <_sbrk+0x64>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a72:	4b07      	ldr	r3, [pc, #28]	; (8000a90 <_sbrk+0x64>)
 8000a74:	681a      	ldr	r2, [r3, #0]
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	4413      	add	r3, r2
 8000a7a:	4a05      	ldr	r2, [pc, #20]	; (8000a90 <_sbrk+0x64>)
 8000a7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a7e:	68fb      	ldr	r3, [r7, #12]
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	3718      	adds	r7, #24
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	20050000 	.word	0x20050000
 8000a8c:	00000400 	.word	0x00000400
 8000a90:	2000013c 	.word	0x2000013c
 8000a94:	20000158 	.word	0x20000158

08000a98 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a9c:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <SystemInit+0x20>)
 8000a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aa2:	4a05      	ldr	r2, [pc, #20]	; (8000ab8 <SystemInit+0x20>)
 8000aa4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000aa8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000aac:	bf00      	nop
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	e000ed00 	.word	0xe000ed00

08000abc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000abc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000af4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ac0:	f7ff ffea 	bl	8000a98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ac4:	480c      	ldr	r0, [pc, #48]	; (8000af8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ac6:	490d      	ldr	r1, [pc, #52]	; (8000afc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ac8:	4a0d      	ldr	r2, [pc, #52]	; (8000b00 <LoopForever+0xe>)
  movs r3, #0
 8000aca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000acc:	e002      	b.n	8000ad4 <LoopCopyDataInit>

08000ace <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ace:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ad0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ad2:	3304      	adds	r3, #4

08000ad4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ad4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ad6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ad8:	d3f9      	bcc.n	8000ace <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ada:	4a0a      	ldr	r2, [pc, #40]	; (8000b04 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000adc:	4c0a      	ldr	r4, [pc, #40]	; (8000b08 <LoopForever+0x16>)
  movs r3, #0
 8000ade:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ae0:	e001      	b.n	8000ae6 <LoopFillZerobss>

08000ae2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ae2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ae4:	3204      	adds	r2, #4

08000ae6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ae6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ae8:	d3fb      	bcc.n	8000ae2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000aea:	f002 fd0b 	bl	8003504 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000aee:	f7ff fd2b 	bl	8000548 <main>

08000af2 <LoopForever>:

LoopForever:
    b LoopForever
 8000af2:	e7fe      	b.n	8000af2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000af4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000af8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000afc:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000b00:	0800406c 	.word	0x0800406c
  ldr r2, =_sbss
 8000b04:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000b08:	20000154 	.word	0x20000154

08000b0c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b0c:	e7fe      	b.n	8000b0c <ADC1_2_IRQHandler>

08000b0e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b0e:	b580      	push	{r7, lr}
 8000b10:	b082      	sub	sp, #8
 8000b12:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b14:	2300      	movs	r3, #0
 8000b16:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b18:	2003      	movs	r0, #3
 8000b1a:	f000 f95d 	bl	8000dd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b1e:	2000      	movs	r0, #0
 8000b20:	f000 f80e 	bl	8000b40 <HAL_InitTick>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d002      	beq.n	8000b30 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	71fb      	strb	r3, [r7, #7]
 8000b2e:	e001      	b.n	8000b34 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b30:	f7ff fe54 	bl	80007dc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b34:	79fb      	ldrb	r3, [r7, #7]
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	3708      	adds	r7, #8
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
	...

08000b40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b084      	sub	sp, #16
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b4c:	4b17      	ldr	r3, [pc, #92]	; (8000bac <HAL_InitTick+0x6c>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d023      	beq.n	8000b9c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b54:	4b16      	ldr	r3, [pc, #88]	; (8000bb0 <HAL_InitTick+0x70>)
 8000b56:	681a      	ldr	r2, [r3, #0]
 8000b58:	4b14      	ldr	r3, [pc, #80]	; (8000bac <HAL_InitTick+0x6c>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b62:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b66:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f000 f969 	bl	8000e42 <HAL_SYSTICK_Config>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d10f      	bne.n	8000b96 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	2b0f      	cmp	r3, #15
 8000b7a:	d809      	bhi.n	8000b90 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	6879      	ldr	r1, [r7, #4]
 8000b80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b84:	f000 f933 	bl	8000dee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b88:	4a0a      	ldr	r2, [pc, #40]	; (8000bb4 <HAL_InitTick+0x74>)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	6013      	str	r3, [r2, #0]
 8000b8e:	e007      	b.n	8000ba0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000b90:	2301      	movs	r3, #1
 8000b92:	73fb      	strb	r3, [r7, #15]
 8000b94:	e004      	b.n	8000ba0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b96:	2301      	movs	r3, #1
 8000b98:	73fb      	strb	r3, [r7, #15]
 8000b9a:	e001      	b.n	8000ba0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ba0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	3710      	adds	r7, #16
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	2000000c 	.word	0x2000000c
 8000bb0:	20000004 	.word	0x20000004
 8000bb4:	20000008 	.word	0x20000008

08000bb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000bbc:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <HAL_IncTick+0x20>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	461a      	mov	r2, r3
 8000bc2:	4b06      	ldr	r3, [pc, #24]	; (8000bdc <HAL_IncTick+0x24>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	4413      	add	r3, r2
 8000bc8:	4a04      	ldr	r2, [pc, #16]	; (8000bdc <HAL_IncTick+0x24>)
 8000bca:	6013      	str	r3, [r2, #0]
}
 8000bcc:	bf00      	nop
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	2000000c 	.word	0x2000000c
 8000bdc:	20000140 	.word	0x20000140

08000be0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  return uwTick;
 8000be4:	4b03      	ldr	r3, [pc, #12]	; (8000bf4 <HAL_GetTick+0x14>)
 8000be6:	681b      	ldr	r3, [r3, #0]
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	20000140 	.word	0x20000140

08000bf8 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8000bfc:	4b05      	ldr	r3, [pc, #20]	; (8000c14 <HAL_SuspendTick+0x1c>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a04      	ldr	r2, [pc, #16]	; (8000c14 <HAL_SuspendTick+0x1c>)
 8000c02:	f023 0302 	bic.w	r3, r3, #2
 8000c06:	6013      	str	r3, [r2, #0]
}
 8000c08:	bf00      	nop
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	e000e010 	.word	0xe000e010

08000c18 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8000c1c:	4b05      	ldr	r3, [pc, #20]	; (8000c34 <HAL_ResumeTick+0x1c>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a04      	ldr	r2, [pc, #16]	; (8000c34 <HAL_ResumeTick+0x1c>)
 8000c22:	f043 0302 	orr.w	r3, r3, #2
 8000c26:	6013      	str	r3, [r2, #0]
}
 8000c28:	bf00      	nop
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	e000e010 	.word	0xe000e010

08000c38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b085      	sub	sp, #20
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	f003 0307 	and.w	r3, r3, #7
 8000c46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c48:	4b0c      	ldr	r3, [pc, #48]	; (8000c7c <__NVIC_SetPriorityGrouping+0x44>)
 8000c4a:	68db      	ldr	r3, [r3, #12]
 8000c4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c4e:	68ba      	ldr	r2, [r7, #8]
 8000c50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c54:	4013      	ands	r3, r2
 8000c56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c6a:	4a04      	ldr	r2, [pc, #16]	; (8000c7c <__NVIC_SetPriorityGrouping+0x44>)
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	60d3      	str	r3, [r2, #12]
}
 8000c70:	bf00      	nop
 8000c72:	3714      	adds	r7, #20
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr
 8000c7c:	e000ed00 	.word	0xe000ed00

08000c80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c84:	4b04      	ldr	r3, [pc, #16]	; (8000c98 <__NVIC_GetPriorityGrouping+0x18>)
 8000c86:	68db      	ldr	r3, [r3, #12]
 8000c88:	0a1b      	lsrs	r3, r3, #8
 8000c8a:	f003 0307 	and.w	r3, r3, #7
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr
 8000c98:	e000ed00 	.word	0xe000ed00

08000c9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	db0b      	blt.n	8000cc6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cae:	79fb      	ldrb	r3, [r7, #7]
 8000cb0:	f003 021f 	and.w	r2, r3, #31
 8000cb4:	4907      	ldr	r1, [pc, #28]	; (8000cd4 <__NVIC_EnableIRQ+0x38>)
 8000cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cba:	095b      	lsrs	r3, r3, #5
 8000cbc:	2001      	movs	r0, #1
 8000cbe:	fa00 f202 	lsl.w	r2, r0, r2
 8000cc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000cc6:	bf00      	nop
 8000cc8:	370c      	adds	r7, #12
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	e000e100 	.word	0xe000e100

08000cd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	6039      	str	r1, [r7, #0]
 8000ce2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ce4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	db0a      	blt.n	8000d02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	b2da      	uxtb	r2, r3
 8000cf0:	490c      	ldr	r1, [pc, #48]	; (8000d24 <__NVIC_SetPriority+0x4c>)
 8000cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf6:	0112      	lsls	r2, r2, #4
 8000cf8:	b2d2      	uxtb	r2, r2
 8000cfa:	440b      	add	r3, r1
 8000cfc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d00:	e00a      	b.n	8000d18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	b2da      	uxtb	r2, r3
 8000d06:	4908      	ldr	r1, [pc, #32]	; (8000d28 <__NVIC_SetPriority+0x50>)
 8000d08:	79fb      	ldrb	r3, [r7, #7]
 8000d0a:	f003 030f 	and.w	r3, r3, #15
 8000d0e:	3b04      	subs	r3, #4
 8000d10:	0112      	lsls	r2, r2, #4
 8000d12:	b2d2      	uxtb	r2, r2
 8000d14:	440b      	add	r3, r1
 8000d16:	761a      	strb	r2, [r3, #24]
}
 8000d18:	bf00      	nop
 8000d1a:	370c      	adds	r7, #12
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr
 8000d24:	e000e100 	.word	0xe000e100
 8000d28:	e000ed00 	.word	0xe000ed00

08000d2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b089      	sub	sp, #36	; 0x24
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	60f8      	str	r0, [r7, #12]
 8000d34:	60b9      	str	r1, [r7, #8]
 8000d36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	f003 0307 	and.w	r3, r3, #7
 8000d3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d40:	69fb      	ldr	r3, [r7, #28]
 8000d42:	f1c3 0307 	rsb	r3, r3, #7
 8000d46:	2b04      	cmp	r3, #4
 8000d48:	bf28      	it	cs
 8000d4a:	2304      	movcs	r3, #4
 8000d4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	3304      	adds	r3, #4
 8000d52:	2b06      	cmp	r3, #6
 8000d54:	d902      	bls.n	8000d5c <NVIC_EncodePriority+0x30>
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	3b03      	subs	r3, #3
 8000d5a:	e000      	b.n	8000d5e <NVIC_EncodePriority+0x32>
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d64:	69bb      	ldr	r3, [r7, #24]
 8000d66:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6a:	43da      	mvns	r2, r3
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	401a      	ands	r2, r3
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d74:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d7e:	43d9      	mvns	r1, r3
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d84:	4313      	orrs	r3, r2
         );
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3724      	adds	r7, #36	; 0x24
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
	...

08000d94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	3b01      	subs	r3, #1
 8000da0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000da4:	d301      	bcc.n	8000daa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000da6:	2301      	movs	r3, #1
 8000da8:	e00f      	b.n	8000dca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000daa:	4a0a      	ldr	r2, [pc, #40]	; (8000dd4 <SysTick_Config+0x40>)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	3b01      	subs	r3, #1
 8000db0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000db2:	210f      	movs	r1, #15
 8000db4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000db8:	f7ff ff8e 	bl	8000cd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dbc:	4b05      	ldr	r3, [pc, #20]	; (8000dd4 <SysTick_Config+0x40>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dc2:	4b04      	ldr	r3, [pc, #16]	; (8000dd4 <SysTick_Config+0x40>)
 8000dc4:	2207      	movs	r2, #7
 8000dc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dc8:	2300      	movs	r3, #0
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	3708      	adds	r7, #8
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	e000e010 	.word	0xe000e010

08000dd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000de0:	6878      	ldr	r0, [r7, #4]
 8000de2:	f7ff ff29 	bl	8000c38 <__NVIC_SetPriorityGrouping>
}
 8000de6:	bf00      	nop
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}

08000dee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dee:	b580      	push	{r7, lr}
 8000df0:	b086      	sub	sp, #24
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	4603      	mov	r3, r0
 8000df6:	60b9      	str	r1, [r7, #8]
 8000df8:	607a      	str	r2, [r7, #4]
 8000dfa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e00:	f7ff ff3e 	bl	8000c80 <__NVIC_GetPriorityGrouping>
 8000e04:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e06:	687a      	ldr	r2, [r7, #4]
 8000e08:	68b9      	ldr	r1, [r7, #8]
 8000e0a:	6978      	ldr	r0, [r7, #20]
 8000e0c:	f7ff ff8e 	bl	8000d2c <NVIC_EncodePriority>
 8000e10:	4602      	mov	r2, r0
 8000e12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e16:	4611      	mov	r1, r2
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f7ff ff5d 	bl	8000cd8 <__NVIC_SetPriority>
}
 8000e1e:	bf00      	nop
 8000e20:	3718      	adds	r7, #24
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}

08000e26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e26:	b580      	push	{r7, lr}
 8000e28:	b082      	sub	sp, #8
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff ff31 	bl	8000c9c <__NVIC_EnableIRQ>
}
 8000e3a:	bf00      	nop
 8000e3c:	3708      	adds	r7, #8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}

08000e42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e42:	b580      	push	{r7, lr}
 8000e44:	b082      	sub	sp, #8
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e4a:	6878      	ldr	r0, [r7, #4]
 8000e4c:	f7ff ffa2 	bl	8000d94 <SysTick_Config>
 8000e50:	4603      	mov	r3, r0
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
	...

08000e5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b087      	sub	sp, #28
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
 8000e64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e66:	2300      	movs	r3, #0
 8000e68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e6a:	e166      	b.n	800113a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	681a      	ldr	r2, [r3, #0]
 8000e70:	2101      	movs	r1, #1
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	fa01 f303 	lsl.w	r3, r1, r3
 8000e78:	4013      	ands	r3, r2
 8000e7a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	f000 8158 	beq.w	8001134 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	f003 0303 	and.w	r3, r3, #3
 8000e8c:	2b01      	cmp	r3, #1
 8000e8e:	d005      	beq.n	8000e9c <HAL_GPIO_Init+0x40>
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	f003 0303 	and.w	r3, r3, #3
 8000e98:	2b02      	cmp	r3, #2
 8000e9a:	d130      	bne.n	8000efe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	689b      	ldr	r3, [r3, #8]
 8000ea0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	005b      	lsls	r3, r3, #1
 8000ea6:	2203      	movs	r2, #3
 8000ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eac:	43db      	mvns	r3, r3
 8000eae:	693a      	ldr	r2, [r7, #16]
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	68da      	ldr	r2, [r3, #12]
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	005b      	lsls	r3, r3, #1
 8000ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec0:	693a      	ldr	r2, [r7, #16]
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	693a      	ldr	r2, [r7, #16]
 8000eca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eda:	43db      	mvns	r3, r3
 8000edc:	693a      	ldr	r2, [r7, #16]
 8000ede:	4013      	ands	r3, r2
 8000ee0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	091b      	lsrs	r3, r3, #4
 8000ee8:	f003 0201 	and.w	r2, r3, #1
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef2:	693a      	ldr	r2, [r7, #16]
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	693a      	ldr	r2, [r7, #16]
 8000efc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	f003 0303 	and.w	r3, r3, #3
 8000f06:	2b03      	cmp	r3, #3
 8000f08:	d017      	beq.n	8000f3a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	68db      	ldr	r3, [r3, #12]
 8000f0e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	005b      	lsls	r3, r3, #1
 8000f14:	2203      	movs	r2, #3
 8000f16:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1a:	43db      	mvns	r3, r3
 8000f1c:	693a      	ldr	r2, [r7, #16]
 8000f1e:	4013      	ands	r3, r2
 8000f20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	689a      	ldr	r2, [r3, #8]
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	005b      	lsls	r3, r3, #1
 8000f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2e:	693a      	ldr	r2, [r7, #16]
 8000f30:	4313      	orrs	r3, r2
 8000f32:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	693a      	ldr	r2, [r7, #16]
 8000f38:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	f003 0303 	and.w	r3, r3, #3
 8000f42:	2b02      	cmp	r3, #2
 8000f44:	d123      	bne.n	8000f8e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	08da      	lsrs	r2, r3, #3
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	3208      	adds	r2, #8
 8000f4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f52:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	f003 0307 	and.w	r3, r3, #7
 8000f5a:	009b      	lsls	r3, r3, #2
 8000f5c:	220f      	movs	r2, #15
 8000f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f62:	43db      	mvns	r3, r3
 8000f64:	693a      	ldr	r2, [r7, #16]
 8000f66:	4013      	ands	r3, r2
 8000f68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	691a      	ldr	r2, [r3, #16]
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	f003 0307 	and.w	r3, r3, #7
 8000f74:	009b      	lsls	r3, r3, #2
 8000f76:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7a:	693a      	ldr	r2, [r7, #16]
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	08da      	lsrs	r2, r3, #3
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	3208      	adds	r2, #8
 8000f88:	6939      	ldr	r1, [r7, #16]
 8000f8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	005b      	lsls	r3, r3, #1
 8000f98:	2203      	movs	r2, #3
 8000f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9e:	43db      	mvns	r3, r3
 8000fa0:	693a      	ldr	r2, [r7, #16]
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	f003 0203 	and.w	r2, r3, #3
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	005b      	lsls	r3, r3, #1
 8000fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb6:	693a      	ldr	r2, [r7, #16]
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	693a      	ldr	r2, [r7, #16]
 8000fc0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	f000 80b2 	beq.w	8001134 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fd0:	4b61      	ldr	r3, [pc, #388]	; (8001158 <HAL_GPIO_Init+0x2fc>)
 8000fd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fd4:	4a60      	ldr	r2, [pc, #384]	; (8001158 <HAL_GPIO_Init+0x2fc>)
 8000fd6:	f043 0301 	orr.w	r3, r3, #1
 8000fda:	6613      	str	r3, [r2, #96]	; 0x60
 8000fdc:	4b5e      	ldr	r3, [pc, #376]	; (8001158 <HAL_GPIO_Init+0x2fc>)
 8000fde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fe0:	f003 0301 	and.w	r3, r3, #1
 8000fe4:	60bb      	str	r3, [r7, #8]
 8000fe6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000fe8:	4a5c      	ldr	r2, [pc, #368]	; (800115c <HAL_GPIO_Init+0x300>)
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	089b      	lsrs	r3, r3, #2
 8000fee:	3302      	adds	r3, #2
 8000ff0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ff4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	f003 0303 	and.w	r3, r3, #3
 8000ffc:	009b      	lsls	r3, r3, #2
 8000ffe:	220f      	movs	r2, #15
 8001000:	fa02 f303 	lsl.w	r3, r2, r3
 8001004:	43db      	mvns	r3, r3
 8001006:	693a      	ldr	r2, [r7, #16]
 8001008:	4013      	ands	r3, r2
 800100a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001012:	d02b      	beq.n	800106c <HAL_GPIO_Init+0x210>
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	4a52      	ldr	r2, [pc, #328]	; (8001160 <HAL_GPIO_Init+0x304>)
 8001018:	4293      	cmp	r3, r2
 800101a:	d025      	beq.n	8001068 <HAL_GPIO_Init+0x20c>
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	4a51      	ldr	r2, [pc, #324]	; (8001164 <HAL_GPIO_Init+0x308>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d01f      	beq.n	8001064 <HAL_GPIO_Init+0x208>
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	4a50      	ldr	r2, [pc, #320]	; (8001168 <HAL_GPIO_Init+0x30c>)
 8001028:	4293      	cmp	r3, r2
 800102a:	d019      	beq.n	8001060 <HAL_GPIO_Init+0x204>
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	4a4f      	ldr	r2, [pc, #316]	; (800116c <HAL_GPIO_Init+0x310>)
 8001030:	4293      	cmp	r3, r2
 8001032:	d013      	beq.n	800105c <HAL_GPIO_Init+0x200>
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	4a4e      	ldr	r2, [pc, #312]	; (8001170 <HAL_GPIO_Init+0x314>)
 8001038:	4293      	cmp	r3, r2
 800103a:	d00d      	beq.n	8001058 <HAL_GPIO_Init+0x1fc>
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	4a4d      	ldr	r2, [pc, #308]	; (8001174 <HAL_GPIO_Init+0x318>)
 8001040:	4293      	cmp	r3, r2
 8001042:	d007      	beq.n	8001054 <HAL_GPIO_Init+0x1f8>
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	4a4c      	ldr	r2, [pc, #304]	; (8001178 <HAL_GPIO_Init+0x31c>)
 8001048:	4293      	cmp	r3, r2
 800104a:	d101      	bne.n	8001050 <HAL_GPIO_Init+0x1f4>
 800104c:	2307      	movs	r3, #7
 800104e:	e00e      	b.n	800106e <HAL_GPIO_Init+0x212>
 8001050:	2308      	movs	r3, #8
 8001052:	e00c      	b.n	800106e <HAL_GPIO_Init+0x212>
 8001054:	2306      	movs	r3, #6
 8001056:	e00a      	b.n	800106e <HAL_GPIO_Init+0x212>
 8001058:	2305      	movs	r3, #5
 800105a:	e008      	b.n	800106e <HAL_GPIO_Init+0x212>
 800105c:	2304      	movs	r3, #4
 800105e:	e006      	b.n	800106e <HAL_GPIO_Init+0x212>
 8001060:	2303      	movs	r3, #3
 8001062:	e004      	b.n	800106e <HAL_GPIO_Init+0x212>
 8001064:	2302      	movs	r3, #2
 8001066:	e002      	b.n	800106e <HAL_GPIO_Init+0x212>
 8001068:	2301      	movs	r3, #1
 800106a:	e000      	b.n	800106e <HAL_GPIO_Init+0x212>
 800106c:	2300      	movs	r3, #0
 800106e:	697a      	ldr	r2, [r7, #20]
 8001070:	f002 0203 	and.w	r2, r2, #3
 8001074:	0092      	lsls	r2, r2, #2
 8001076:	4093      	lsls	r3, r2
 8001078:	693a      	ldr	r2, [r7, #16]
 800107a:	4313      	orrs	r3, r2
 800107c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800107e:	4937      	ldr	r1, [pc, #220]	; (800115c <HAL_GPIO_Init+0x300>)
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	089b      	lsrs	r3, r3, #2
 8001084:	3302      	adds	r3, #2
 8001086:	693a      	ldr	r2, [r7, #16]
 8001088:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800108c:	4b3b      	ldr	r3, [pc, #236]	; (800117c <HAL_GPIO_Init+0x320>)
 800108e:	689b      	ldr	r3, [r3, #8]
 8001090:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	43db      	mvns	r3, r3
 8001096:	693a      	ldr	r2, [r7, #16]
 8001098:	4013      	ands	r3, r2
 800109a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d003      	beq.n	80010b0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80010a8:	693a      	ldr	r2, [r7, #16]
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	4313      	orrs	r3, r2
 80010ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80010b0:	4a32      	ldr	r2, [pc, #200]	; (800117c <HAL_GPIO_Init+0x320>)
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80010b6:	4b31      	ldr	r3, [pc, #196]	; (800117c <HAL_GPIO_Init+0x320>)
 80010b8:	68db      	ldr	r3, [r3, #12]
 80010ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	43db      	mvns	r3, r3
 80010c0:	693a      	ldr	r2, [r7, #16]
 80010c2:	4013      	ands	r3, r2
 80010c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d003      	beq.n	80010da <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80010d2:	693a      	ldr	r2, [r7, #16]
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	4313      	orrs	r3, r2
 80010d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80010da:	4a28      	ldr	r2, [pc, #160]	; (800117c <HAL_GPIO_Init+0x320>)
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80010e0:	4b26      	ldr	r3, [pc, #152]	; (800117c <HAL_GPIO_Init+0x320>)
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	43db      	mvns	r3, r3
 80010ea:	693a      	ldr	r2, [r7, #16]
 80010ec:	4013      	ands	r3, r2
 80010ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d003      	beq.n	8001104 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80010fc:	693a      	ldr	r2, [r7, #16]
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	4313      	orrs	r3, r2
 8001102:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001104:	4a1d      	ldr	r2, [pc, #116]	; (800117c <HAL_GPIO_Init+0x320>)
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800110a:	4b1c      	ldr	r3, [pc, #112]	; (800117c <HAL_GPIO_Init+0x320>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	43db      	mvns	r3, r3
 8001114:	693a      	ldr	r2, [r7, #16]
 8001116:	4013      	ands	r3, r2
 8001118:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001122:	2b00      	cmp	r3, #0
 8001124:	d003      	beq.n	800112e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001126:	693a      	ldr	r2, [r7, #16]
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	4313      	orrs	r3, r2
 800112c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800112e:	4a13      	ldr	r2, [pc, #76]	; (800117c <HAL_GPIO_Init+0x320>)
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	3301      	adds	r3, #1
 8001138:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	fa22 f303 	lsr.w	r3, r2, r3
 8001144:	2b00      	cmp	r3, #0
 8001146:	f47f ae91 	bne.w	8000e6c <HAL_GPIO_Init+0x10>
  }
}
 800114a:	bf00      	nop
 800114c:	bf00      	nop
 800114e:	371c      	adds	r7, #28
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr
 8001158:	40021000 	.word	0x40021000
 800115c:	40010000 	.word	0x40010000
 8001160:	48000400 	.word	0x48000400
 8001164:	48000800 	.word	0x48000800
 8001168:	48000c00 	.word	0x48000c00
 800116c:	48001000 	.word	0x48001000
 8001170:	48001400 	.word	0x48001400
 8001174:	48001800 	.word	0x48001800
 8001178:	48001c00 	.word	0x48001c00
 800117c:	40010400 	.word	0x40010400

08001180 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001180:	b480      	push	{r7}
 8001182:	b085      	sub	sp, #20
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	460b      	mov	r3, r1
 800118a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	691a      	ldr	r2, [r3, #16]
 8001190:	887b      	ldrh	r3, [r7, #2]
 8001192:	4013      	ands	r3, r2
 8001194:	2b00      	cmp	r3, #0
 8001196:	d002      	beq.n	800119e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001198:	2301      	movs	r3, #1
 800119a:	73fb      	strb	r3, [r7, #15]
 800119c:	e001      	b.n	80011a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800119e:	2300      	movs	r3, #0
 80011a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80011a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	3714      	adds	r7, #20
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr

080011b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	460b      	mov	r3, r1
 80011ba:	807b      	strh	r3, [r7, #2]
 80011bc:	4613      	mov	r3, r2
 80011be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011c0:	787b      	ldrb	r3, [r7, #1]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d003      	beq.n	80011ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011c6:	887a      	ldrh	r2, [r7, #2]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011cc:	e002      	b.n	80011d4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011ce:	887a      	ldrh	r2, [r7, #2]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011d4:	bf00      	nop
 80011d6:	370c      	adds	r7, #12
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr

080011e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	4603      	mov	r3, r0
 80011e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80011ea:	4b08      	ldr	r3, [pc, #32]	; (800120c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80011ec:	695a      	ldr	r2, [r3, #20]
 80011ee:	88fb      	ldrh	r3, [r7, #6]
 80011f0:	4013      	ands	r3, r2
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d006      	beq.n	8001204 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80011f6:	4a05      	ldr	r2, [pc, #20]	; (800120c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80011f8:	88fb      	ldrh	r3, [r7, #6]
 80011fa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80011fc:	88fb      	ldrh	r3, [r7, #6]
 80011fe:	4618      	mov	r0, r3
 8001200:	f7ff f97e 	bl	8000500 <HAL_GPIO_EXTI_Callback>
  }
}
 8001204:	bf00      	nop
 8001206:	3708      	adds	r7, #8
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	40010400 	.word	0x40010400

08001210 <HAL_PWR_EnterSTOPMode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop 0 or Stop 1 mode with WFI instruction.
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop 0 or Stop 1 mode with WFE instruction.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	460b      	mov	r3, r1
 800121a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));

  if(Regulator == PWR_LOWPOWERREGULATOR_ON)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001222:	d104      	bne.n	800122e <HAL_PWR_EnterSTOPMode+0x1e>
  {
    HAL_PWREx_EnterSTOP1Mode(STOPEntry);
 8001224:	78fb      	ldrb	r3, [r7, #3]
 8001226:	4618      	mov	r0, r3
 8001228:	f000 f8b8 	bl	800139c <HAL_PWREx_EnterSTOP1Mode>
  }
  else
  {
    HAL_PWREx_EnterSTOP0Mode(STOPEntry);
  }
}
 800122c:	e003      	b.n	8001236 <HAL_PWR_EnterSTOPMode+0x26>
    HAL_PWREx_EnterSTOP0Mode(STOPEntry);
 800122e:	78fb      	ldrb	r3, [r7, #3]
 8001230:	4618      	mov	r0, r3
 8001232:	f000 f889 	bl	8001348 <HAL_PWREx_EnterSTOP0Mode>
}
 8001236:	bf00      	nop
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
	...

08001240 <HAL_PWR_DisableSleepOnExit>:
  * @note Clear SLEEPONEXIT bit of SCR register. When this bit is set, the processor
  *       re-enters SLEEP mode when an interruption handling is over.
  * @retval None
  */
void HAL_PWR_DisableSleepOnExit(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  /* Clear SLEEPONEXIT bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 8001244:	4b05      	ldr	r3, [pc, #20]	; (800125c <HAL_PWR_DisableSleepOnExit+0x1c>)
 8001246:	691b      	ldr	r3, [r3, #16]
 8001248:	4a04      	ldr	r2, [pc, #16]	; (800125c <HAL_PWR_DisableSleepOnExit+0x1c>)
 800124a:	f023 0302 	bic.w	r3, r3, #2
 800124e:	6113      	str	r3, [r2, #16]
}
 8001250:	bf00      	nop
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	e000ed00 	.word	0xe000ed00

08001260 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001264:	4b04      	ldr	r3, [pc, #16]	; (8001278 <HAL_PWREx_GetVoltageRange+0x18>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800126c:	4618      	mov	r0, r3
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	40007000 	.word	0x40007000

0800127c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800127c:	b480      	push	{r7}
 800127e:	b085      	sub	sp, #20
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800128a:	d130      	bne.n	80012ee <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800128c:	4b23      	ldr	r3, [pc, #140]	; (800131c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001294:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001298:	d038      	beq.n	800130c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800129a:	4b20      	ldr	r3, [pc, #128]	; (800131c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80012a2:	4a1e      	ldr	r2, [pc, #120]	; (800131c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012a8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80012aa:	4b1d      	ldr	r3, [pc, #116]	; (8001320 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	2232      	movs	r2, #50	; 0x32
 80012b0:	fb02 f303 	mul.w	r3, r2, r3
 80012b4:	4a1b      	ldr	r2, [pc, #108]	; (8001324 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80012b6:	fba2 2303 	umull	r2, r3, r2, r3
 80012ba:	0c9b      	lsrs	r3, r3, #18
 80012bc:	3301      	adds	r3, #1
 80012be:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012c0:	e002      	b.n	80012c8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	3b01      	subs	r3, #1
 80012c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012c8:	4b14      	ldr	r3, [pc, #80]	; (800131c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012ca:	695b      	ldr	r3, [r3, #20]
 80012cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012d4:	d102      	bne.n	80012dc <HAL_PWREx_ControlVoltageScaling+0x60>
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d1f2      	bne.n	80012c2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80012dc:	4b0f      	ldr	r3, [pc, #60]	; (800131c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012de:	695b      	ldr	r3, [r3, #20]
 80012e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012e8:	d110      	bne.n	800130c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80012ea:	2303      	movs	r3, #3
 80012ec:	e00f      	b.n	800130e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80012ee:	4b0b      	ldr	r3, [pc, #44]	; (800131c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80012f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012fa:	d007      	beq.n	800130c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80012fc:	4b07      	ldr	r3, [pc, #28]	; (800131c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001304:	4a05      	ldr	r2, [pc, #20]	; (800131c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001306:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800130a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800130c:	2300      	movs	r3, #0
}
 800130e:	4618      	mov	r0, r3
 8001310:	3714      	adds	r7, #20
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	40007000 	.word	0x40007000
 8001320:	20000004 	.word	0x20000004
 8001324:	431bde83 	.word	0x431bde83

08001328 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 800132c:	4b05      	ldr	r3, [pc, #20]	; (8001344 <HAL_PWREx_EnableVddIO2+0x1c>)
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	4a04      	ldr	r2, [pc, #16]	; (8001344 <HAL_PWREx_EnableVddIO2+0x1c>)
 8001332:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001336:	6053      	str	r3, [r2, #4]
}
 8001338:	bf00      	nop
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	40007000 	.word	0x40007000

08001348 <HAL_PWREx_EnterSTOP0Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP0Mode(uint8_t STOPEntry)
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	4603      	mov	r3, r0
 8001350:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 0 mode with Main Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP0);
 8001352:	4b10      	ldr	r3, [pc, #64]	; (8001394 <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a0f      	ldr	r2, [pc, #60]	; (8001394 <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 8001358:	f023 0307 	bic.w	r3, r3, #7
 800135c:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800135e:	4b0e      	ldr	r3, [pc, #56]	; (8001398 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8001360:	691b      	ldr	r3, [r3, #16]
 8001362:	4a0d      	ldr	r2, [pc, #52]	; (8001398 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8001364:	f043 0304 	orr.w	r3, r3, #4
 8001368:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 800136a:	79fb      	ldrb	r3, [r7, #7]
 800136c:	2b01      	cmp	r3, #1
 800136e:	d101      	bne.n	8001374 <HAL_PWREx_EnterSTOP0Mode+0x2c>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8001370:	bf30      	wfi
 8001372:	e002      	b.n	800137a <HAL_PWREx_EnterSTOP0Mode+0x32>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8001374:	bf40      	sev
    __WFE();
 8001376:	bf20      	wfe
    __WFE();
 8001378:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800137a:	4b07      	ldr	r3, [pc, #28]	; (8001398 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 800137c:	691b      	ldr	r3, [r3, #16]
 800137e:	4a06      	ldr	r2, [pc, #24]	; (8001398 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8001380:	f023 0304 	bic.w	r3, r3, #4
 8001384:	6113      	str	r3, [r2, #16]
}
 8001386:	bf00      	nop
 8001388:	370c      	adds	r7, #12
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	40007000 	.word	0x40007000
 8001398:	e000ed00 	.word	0xe000ed00

0800139c <HAL_PWREx_EnterSTOP1Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP1Mode(uint8_t STOPEntry)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	4603      	mov	r3, r0
 80013a4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 1 mode with Low-Power Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP1);
 80013a6:	4b11      	ldr	r3, [pc, #68]	; (80013ec <HAL_PWREx_EnterSTOP1Mode+0x50>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f023 0307 	bic.w	r3, r3, #7
 80013ae:	4a0f      	ldr	r2, [pc, #60]	; (80013ec <HAL_PWREx_EnterSTOP1Mode+0x50>)
 80013b0:	f043 0301 	orr.w	r3, r3, #1
 80013b4:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80013b6:	4b0e      	ldr	r3, [pc, #56]	; (80013f0 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 80013b8:	691b      	ldr	r3, [r3, #16]
 80013ba:	4a0d      	ldr	r2, [pc, #52]	; (80013f0 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 80013bc:	f043 0304 	orr.w	r3, r3, #4
 80013c0:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 80013c2:	79fb      	ldrb	r3, [r7, #7]
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d101      	bne.n	80013cc <HAL_PWREx_EnterSTOP1Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80013c8:	bf30      	wfi
 80013ca:	e002      	b.n	80013d2 <HAL_PWREx_EnterSTOP1Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80013cc:	bf40      	sev
    __WFE();
 80013ce:	bf20      	wfe
    __WFE();
 80013d0:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80013d2:	4b07      	ldr	r3, [pc, #28]	; (80013f0 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 80013d4:	691b      	ldr	r3, [r3, #16]
 80013d6:	4a06      	ldr	r2, [pc, #24]	; (80013f0 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 80013d8:	f023 0304 	bic.w	r3, r3, #4
 80013dc:	6113      	str	r3, [r2, #16]
}
 80013de:	bf00      	nop
 80013e0:	370c      	adds	r7, #12
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	40007000 	.word	0x40007000
 80013f0:	e000ed00 	.word	0xe000ed00

080013f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b088      	sub	sp, #32
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d102      	bne.n	8001408 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	f000 bc08 	b.w	8001c18 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001408:	4b96      	ldr	r3, [pc, #600]	; (8001664 <HAL_RCC_OscConfig+0x270>)
 800140a:	689b      	ldr	r3, [r3, #8]
 800140c:	f003 030c 	and.w	r3, r3, #12
 8001410:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001412:	4b94      	ldr	r3, [pc, #592]	; (8001664 <HAL_RCC_OscConfig+0x270>)
 8001414:	68db      	ldr	r3, [r3, #12]
 8001416:	f003 0303 	and.w	r3, r3, #3
 800141a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f003 0310 	and.w	r3, r3, #16
 8001424:	2b00      	cmp	r3, #0
 8001426:	f000 80e4 	beq.w	80015f2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d007      	beq.n	8001440 <HAL_RCC_OscConfig+0x4c>
 8001430:	69bb      	ldr	r3, [r7, #24]
 8001432:	2b0c      	cmp	r3, #12
 8001434:	f040 808b 	bne.w	800154e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	2b01      	cmp	r3, #1
 800143c:	f040 8087 	bne.w	800154e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001440:	4b88      	ldr	r3, [pc, #544]	; (8001664 <HAL_RCC_OscConfig+0x270>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f003 0302 	and.w	r3, r3, #2
 8001448:	2b00      	cmp	r3, #0
 800144a:	d005      	beq.n	8001458 <HAL_RCC_OscConfig+0x64>
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	699b      	ldr	r3, [r3, #24]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d101      	bne.n	8001458 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001454:	2301      	movs	r3, #1
 8001456:	e3df      	b.n	8001c18 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6a1a      	ldr	r2, [r3, #32]
 800145c:	4b81      	ldr	r3, [pc, #516]	; (8001664 <HAL_RCC_OscConfig+0x270>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f003 0308 	and.w	r3, r3, #8
 8001464:	2b00      	cmp	r3, #0
 8001466:	d004      	beq.n	8001472 <HAL_RCC_OscConfig+0x7e>
 8001468:	4b7e      	ldr	r3, [pc, #504]	; (8001664 <HAL_RCC_OscConfig+0x270>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001470:	e005      	b.n	800147e <HAL_RCC_OscConfig+0x8a>
 8001472:	4b7c      	ldr	r3, [pc, #496]	; (8001664 <HAL_RCC_OscConfig+0x270>)
 8001474:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001478:	091b      	lsrs	r3, r3, #4
 800147a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800147e:	4293      	cmp	r3, r2
 8001480:	d223      	bcs.n	80014ca <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6a1b      	ldr	r3, [r3, #32]
 8001486:	4618      	mov	r0, r3
 8001488:	f000 fd92 	bl	8001fb0 <RCC_SetFlashLatencyFromMSIRange>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	e3c0      	b.n	8001c18 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001496:	4b73      	ldr	r3, [pc, #460]	; (8001664 <HAL_RCC_OscConfig+0x270>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a72      	ldr	r2, [pc, #456]	; (8001664 <HAL_RCC_OscConfig+0x270>)
 800149c:	f043 0308 	orr.w	r3, r3, #8
 80014a0:	6013      	str	r3, [r2, #0]
 80014a2:	4b70      	ldr	r3, [pc, #448]	; (8001664 <HAL_RCC_OscConfig+0x270>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6a1b      	ldr	r3, [r3, #32]
 80014ae:	496d      	ldr	r1, [pc, #436]	; (8001664 <HAL_RCC_OscConfig+0x270>)
 80014b0:	4313      	orrs	r3, r2
 80014b2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014b4:	4b6b      	ldr	r3, [pc, #428]	; (8001664 <HAL_RCC_OscConfig+0x270>)
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	69db      	ldr	r3, [r3, #28]
 80014c0:	021b      	lsls	r3, r3, #8
 80014c2:	4968      	ldr	r1, [pc, #416]	; (8001664 <HAL_RCC_OscConfig+0x270>)
 80014c4:	4313      	orrs	r3, r2
 80014c6:	604b      	str	r3, [r1, #4]
 80014c8:	e025      	b.n	8001516 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014ca:	4b66      	ldr	r3, [pc, #408]	; (8001664 <HAL_RCC_OscConfig+0x270>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a65      	ldr	r2, [pc, #404]	; (8001664 <HAL_RCC_OscConfig+0x270>)
 80014d0:	f043 0308 	orr.w	r3, r3, #8
 80014d4:	6013      	str	r3, [r2, #0]
 80014d6:	4b63      	ldr	r3, [pc, #396]	; (8001664 <HAL_RCC_OscConfig+0x270>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6a1b      	ldr	r3, [r3, #32]
 80014e2:	4960      	ldr	r1, [pc, #384]	; (8001664 <HAL_RCC_OscConfig+0x270>)
 80014e4:	4313      	orrs	r3, r2
 80014e6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014e8:	4b5e      	ldr	r3, [pc, #376]	; (8001664 <HAL_RCC_OscConfig+0x270>)
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	69db      	ldr	r3, [r3, #28]
 80014f4:	021b      	lsls	r3, r3, #8
 80014f6:	495b      	ldr	r1, [pc, #364]	; (8001664 <HAL_RCC_OscConfig+0x270>)
 80014f8:	4313      	orrs	r3, r2
 80014fa:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80014fc:	69bb      	ldr	r3, [r7, #24]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d109      	bne.n	8001516 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6a1b      	ldr	r3, [r3, #32]
 8001506:	4618      	mov	r0, r3
 8001508:	f000 fd52 	bl	8001fb0 <RCC_SetFlashLatencyFromMSIRange>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e380      	b.n	8001c18 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001516:	f000 fc87 	bl	8001e28 <HAL_RCC_GetSysClockFreq>
 800151a:	4602      	mov	r2, r0
 800151c:	4b51      	ldr	r3, [pc, #324]	; (8001664 <HAL_RCC_OscConfig+0x270>)
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	091b      	lsrs	r3, r3, #4
 8001522:	f003 030f 	and.w	r3, r3, #15
 8001526:	4950      	ldr	r1, [pc, #320]	; (8001668 <HAL_RCC_OscConfig+0x274>)
 8001528:	5ccb      	ldrb	r3, [r1, r3]
 800152a:	f003 031f 	and.w	r3, r3, #31
 800152e:	fa22 f303 	lsr.w	r3, r2, r3
 8001532:	4a4e      	ldr	r2, [pc, #312]	; (800166c <HAL_RCC_OscConfig+0x278>)
 8001534:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001536:	4b4e      	ldr	r3, [pc, #312]	; (8001670 <HAL_RCC_OscConfig+0x27c>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4618      	mov	r0, r3
 800153c:	f7ff fb00 	bl	8000b40 <HAL_InitTick>
 8001540:	4603      	mov	r3, r0
 8001542:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001544:	7bfb      	ldrb	r3, [r7, #15]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d052      	beq.n	80015f0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800154a:	7bfb      	ldrb	r3, [r7, #15]
 800154c:	e364      	b.n	8001c18 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	699b      	ldr	r3, [r3, #24]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d032      	beq.n	80015bc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001556:	4b43      	ldr	r3, [pc, #268]	; (8001664 <HAL_RCC_OscConfig+0x270>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a42      	ldr	r2, [pc, #264]	; (8001664 <HAL_RCC_OscConfig+0x270>)
 800155c:	f043 0301 	orr.w	r3, r3, #1
 8001560:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001562:	f7ff fb3d 	bl	8000be0 <HAL_GetTick>
 8001566:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001568:	e008      	b.n	800157c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800156a:	f7ff fb39 	bl	8000be0 <HAL_GetTick>
 800156e:	4602      	mov	r2, r0
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	1ad3      	subs	r3, r2, r3
 8001574:	2b02      	cmp	r3, #2
 8001576:	d901      	bls.n	800157c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001578:	2303      	movs	r3, #3
 800157a:	e34d      	b.n	8001c18 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800157c:	4b39      	ldr	r3, [pc, #228]	; (8001664 <HAL_RCC_OscConfig+0x270>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f003 0302 	and.w	r3, r3, #2
 8001584:	2b00      	cmp	r3, #0
 8001586:	d0f0      	beq.n	800156a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001588:	4b36      	ldr	r3, [pc, #216]	; (8001664 <HAL_RCC_OscConfig+0x270>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a35      	ldr	r2, [pc, #212]	; (8001664 <HAL_RCC_OscConfig+0x270>)
 800158e:	f043 0308 	orr.w	r3, r3, #8
 8001592:	6013      	str	r3, [r2, #0]
 8001594:	4b33      	ldr	r3, [pc, #204]	; (8001664 <HAL_RCC_OscConfig+0x270>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6a1b      	ldr	r3, [r3, #32]
 80015a0:	4930      	ldr	r1, [pc, #192]	; (8001664 <HAL_RCC_OscConfig+0x270>)
 80015a2:	4313      	orrs	r3, r2
 80015a4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015a6:	4b2f      	ldr	r3, [pc, #188]	; (8001664 <HAL_RCC_OscConfig+0x270>)
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	69db      	ldr	r3, [r3, #28]
 80015b2:	021b      	lsls	r3, r3, #8
 80015b4:	492b      	ldr	r1, [pc, #172]	; (8001664 <HAL_RCC_OscConfig+0x270>)
 80015b6:	4313      	orrs	r3, r2
 80015b8:	604b      	str	r3, [r1, #4]
 80015ba:	e01a      	b.n	80015f2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80015bc:	4b29      	ldr	r3, [pc, #164]	; (8001664 <HAL_RCC_OscConfig+0x270>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a28      	ldr	r2, [pc, #160]	; (8001664 <HAL_RCC_OscConfig+0x270>)
 80015c2:	f023 0301 	bic.w	r3, r3, #1
 80015c6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80015c8:	f7ff fb0a 	bl	8000be0 <HAL_GetTick>
 80015cc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80015ce:	e008      	b.n	80015e2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015d0:	f7ff fb06 	bl	8000be0 <HAL_GetTick>
 80015d4:	4602      	mov	r2, r0
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	2b02      	cmp	r3, #2
 80015dc:	d901      	bls.n	80015e2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80015de:	2303      	movs	r3, #3
 80015e0:	e31a      	b.n	8001c18 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80015e2:	4b20      	ldr	r3, [pc, #128]	; (8001664 <HAL_RCC_OscConfig+0x270>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 0302 	and.w	r3, r3, #2
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d1f0      	bne.n	80015d0 <HAL_RCC_OscConfig+0x1dc>
 80015ee:	e000      	b.n	80015f2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80015f0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 0301 	and.w	r3, r3, #1
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d073      	beq.n	80016e6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80015fe:	69bb      	ldr	r3, [r7, #24]
 8001600:	2b08      	cmp	r3, #8
 8001602:	d005      	beq.n	8001610 <HAL_RCC_OscConfig+0x21c>
 8001604:	69bb      	ldr	r3, [r7, #24]
 8001606:	2b0c      	cmp	r3, #12
 8001608:	d10e      	bne.n	8001628 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	2b03      	cmp	r3, #3
 800160e:	d10b      	bne.n	8001628 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001610:	4b14      	ldr	r3, [pc, #80]	; (8001664 <HAL_RCC_OscConfig+0x270>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001618:	2b00      	cmp	r3, #0
 800161a:	d063      	beq.n	80016e4 <HAL_RCC_OscConfig+0x2f0>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d15f      	bne.n	80016e4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	e2f7      	b.n	8001c18 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001630:	d106      	bne.n	8001640 <HAL_RCC_OscConfig+0x24c>
 8001632:	4b0c      	ldr	r3, [pc, #48]	; (8001664 <HAL_RCC_OscConfig+0x270>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a0b      	ldr	r2, [pc, #44]	; (8001664 <HAL_RCC_OscConfig+0x270>)
 8001638:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800163c:	6013      	str	r3, [r2, #0]
 800163e:	e025      	b.n	800168c <HAL_RCC_OscConfig+0x298>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001648:	d114      	bne.n	8001674 <HAL_RCC_OscConfig+0x280>
 800164a:	4b06      	ldr	r3, [pc, #24]	; (8001664 <HAL_RCC_OscConfig+0x270>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a05      	ldr	r2, [pc, #20]	; (8001664 <HAL_RCC_OscConfig+0x270>)
 8001650:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001654:	6013      	str	r3, [r2, #0]
 8001656:	4b03      	ldr	r3, [pc, #12]	; (8001664 <HAL_RCC_OscConfig+0x270>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a02      	ldr	r2, [pc, #8]	; (8001664 <HAL_RCC_OscConfig+0x270>)
 800165c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001660:	6013      	str	r3, [r2, #0]
 8001662:	e013      	b.n	800168c <HAL_RCC_OscConfig+0x298>
 8001664:	40021000 	.word	0x40021000
 8001668:	08003fb0 	.word	0x08003fb0
 800166c:	20000004 	.word	0x20000004
 8001670:	20000008 	.word	0x20000008
 8001674:	4ba0      	ldr	r3, [pc, #640]	; (80018f8 <HAL_RCC_OscConfig+0x504>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a9f      	ldr	r2, [pc, #636]	; (80018f8 <HAL_RCC_OscConfig+0x504>)
 800167a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800167e:	6013      	str	r3, [r2, #0]
 8001680:	4b9d      	ldr	r3, [pc, #628]	; (80018f8 <HAL_RCC_OscConfig+0x504>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a9c      	ldr	r2, [pc, #624]	; (80018f8 <HAL_RCC_OscConfig+0x504>)
 8001686:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800168a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d013      	beq.n	80016bc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001694:	f7ff faa4 	bl	8000be0 <HAL_GetTick>
 8001698:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800169a:	e008      	b.n	80016ae <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800169c:	f7ff faa0 	bl	8000be0 <HAL_GetTick>
 80016a0:	4602      	mov	r2, r0
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	2b64      	cmp	r3, #100	; 0x64
 80016a8:	d901      	bls.n	80016ae <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80016aa:	2303      	movs	r3, #3
 80016ac:	e2b4      	b.n	8001c18 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016ae:	4b92      	ldr	r3, [pc, #584]	; (80018f8 <HAL_RCC_OscConfig+0x504>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d0f0      	beq.n	800169c <HAL_RCC_OscConfig+0x2a8>
 80016ba:	e014      	b.n	80016e6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016bc:	f7ff fa90 	bl	8000be0 <HAL_GetTick>
 80016c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016c2:	e008      	b.n	80016d6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016c4:	f7ff fa8c 	bl	8000be0 <HAL_GetTick>
 80016c8:	4602      	mov	r2, r0
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	2b64      	cmp	r3, #100	; 0x64
 80016d0:	d901      	bls.n	80016d6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	e2a0      	b.n	8001c18 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016d6:	4b88      	ldr	r3, [pc, #544]	; (80018f8 <HAL_RCC_OscConfig+0x504>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d1f0      	bne.n	80016c4 <HAL_RCC_OscConfig+0x2d0>
 80016e2:	e000      	b.n	80016e6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 0302 	and.w	r3, r3, #2
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d060      	beq.n	80017b4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80016f2:	69bb      	ldr	r3, [r7, #24]
 80016f4:	2b04      	cmp	r3, #4
 80016f6:	d005      	beq.n	8001704 <HAL_RCC_OscConfig+0x310>
 80016f8:	69bb      	ldr	r3, [r7, #24]
 80016fa:	2b0c      	cmp	r3, #12
 80016fc:	d119      	bne.n	8001732 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	2b02      	cmp	r3, #2
 8001702:	d116      	bne.n	8001732 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001704:	4b7c      	ldr	r3, [pc, #496]	; (80018f8 <HAL_RCC_OscConfig+0x504>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800170c:	2b00      	cmp	r3, #0
 800170e:	d005      	beq.n	800171c <HAL_RCC_OscConfig+0x328>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d101      	bne.n	800171c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	e27d      	b.n	8001c18 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800171c:	4b76      	ldr	r3, [pc, #472]	; (80018f8 <HAL_RCC_OscConfig+0x504>)
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	691b      	ldr	r3, [r3, #16]
 8001728:	061b      	lsls	r3, r3, #24
 800172a:	4973      	ldr	r1, [pc, #460]	; (80018f8 <HAL_RCC_OscConfig+0x504>)
 800172c:	4313      	orrs	r3, r2
 800172e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001730:	e040      	b.n	80017b4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	68db      	ldr	r3, [r3, #12]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d023      	beq.n	8001782 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800173a:	4b6f      	ldr	r3, [pc, #444]	; (80018f8 <HAL_RCC_OscConfig+0x504>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a6e      	ldr	r2, [pc, #440]	; (80018f8 <HAL_RCC_OscConfig+0x504>)
 8001740:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001744:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001746:	f7ff fa4b 	bl	8000be0 <HAL_GetTick>
 800174a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800174c:	e008      	b.n	8001760 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800174e:	f7ff fa47 	bl	8000be0 <HAL_GetTick>
 8001752:	4602      	mov	r2, r0
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	2b02      	cmp	r3, #2
 800175a:	d901      	bls.n	8001760 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800175c:	2303      	movs	r3, #3
 800175e:	e25b      	b.n	8001c18 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001760:	4b65      	ldr	r3, [pc, #404]	; (80018f8 <HAL_RCC_OscConfig+0x504>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001768:	2b00      	cmp	r3, #0
 800176a:	d0f0      	beq.n	800174e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800176c:	4b62      	ldr	r3, [pc, #392]	; (80018f8 <HAL_RCC_OscConfig+0x504>)
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	691b      	ldr	r3, [r3, #16]
 8001778:	061b      	lsls	r3, r3, #24
 800177a:	495f      	ldr	r1, [pc, #380]	; (80018f8 <HAL_RCC_OscConfig+0x504>)
 800177c:	4313      	orrs	r3, r2
 800177e:	604b      	str	r3, [r1, #4]
 8001780:	e018      	b.n	80017b4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001782:	4b5d      	ldr	r3, [pc, #372]	; (80018f8 <HAL_RCC_OscConfig+0x504>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a5c      	ldr	r2, [pc, #368]	; (80018f8 <HAL_RCC_OscConfig+0x504>)
 8001788:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800178c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800178e:	f7ff fa27 	bl	8000be0 <HAL_GetTick>
 8001792:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001794:	e008      	b.n	80017a8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001796:	f7ff fa23 	bl	8000be0 <HAL_GetTick>
 800179a:	4602      	mov	r2, r0
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	1ad3      	subs	r3, r2, r3
 80017a0:	2b02      	cmp	r3, #2
 80017a2:	d901      	bls.n	80017a8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80017a4:	2303      	movs	r3, #3
 80017a6:	e237      	b.n	8001c18 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017a8:	4b53      	ldr	r3, [pc, #332]	; (80018f8 <HAL_RCC_OscConfig+0x504>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d1f0      	bne.n	8001796 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 0308 	and.w	r3, r3, #8
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d03c      	beq.n	800183a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	695b      	ldr	r3, [r3, #20]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d01c      	beq.n	8001802 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017c8:	4b4b      	ldr	r3, [pc, #300]	; (80018f8 <HAL_RCC_OscConfig+0x504>)
 80017ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017ce:	4a4a      	ldr	r2, [pc, #296]	; (80018f8 <HAL_RCC_OscConfig+0x504>)
 80017d0:	f043 0301 	orr.w	r3, r3, #1
 80017d4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017d8:	f7ff fa02 	bl	8000be0 <HAL_GetTick>
 80017dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017de:	e008      	b.n	80017f2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017e0:	f7ff f9fe 	bl	8000be0 <HAL_GetTick>
 80017e4:	4602      	mov	r2, r0
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	d901      	bls.n	80017f2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80017ee:	2303      	movs	r3, #3
 80017f0:	e212      	b.n	8001c18 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017f2:	4b41      	ldr	r3, [pc, #260]	; (80018f8 <HAL_RCC_OscConfig+0x504>)
 80017f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017f8:	f003 0302 	and.w	r3, r3, #2
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d0ef      	beq.n	80017e0 <HAL_RCC_OscConfig+0x3ec>
 8001800:	e01b      	b.n	800183a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001802:	4b3d      	ldr	r3, [pc, #244]	; (80018f8 <HAL_RCC_OscConfig+0x504>)
 8001804:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001808:	4a3b      	ldr	r2, [pc, #236]	; (80018f8 <HAL_RCC_OscConfig+0x504>)
 800180a:	f023 0301 	bic.w	r3, r3, #1
 800180e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001812:	f7ff f9e5 	bl	8000be0 <HAL_GetTick>
 8001816:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001818:	e008      	b.n	800182c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800181a:	f7ff f9e1 	bl	8000be0 <HAL_GetTick>
 800181e:	4602      	mov	r2, r0
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	1ad3      	subs	r3, r2, r3
 8001824:	2b02      	cmp	r3, #2
 8001826:	d901      	bls.n	800182c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001828:	2303      	movs	r3, #3
 800182a:	e1f5      	b.n	8001c18 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800182c:	4b32      	ldr	r3, [pc, #200]	; (80018f8 <HAL_RCC_OscConfig+0x504>)
 800182e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001832:	f003 0302 	and.w	r3, r3, #2
 8001836:	2b00      	cmp	r3, #0
 8001838:	d1ef      	bne.n	800181a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 0304 	and.w	r3, r3, #4
 8001842:	2b00      	cmp	r3, #0
 8001844:	f000 80a6 	beq.w	8001994 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001848:	2300      	movs	r3, #0
 800184a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800184c:	4b2a      	ldr	r3, [pc, #168]	; (80018f8 <HAL_RCC_OscConfig+0x504>)
 800184e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001850:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001854:	2b00      	cmp	r3, #0
 8001856:	d10d      	bne.n	8001874 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001858:	4b27      	ldr	r3, [pc, #156]	; (80018f8 <HAL_RCC_OscConfig+0x504>)
 800185a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800185c:	4a26      	ldr	r2, [pc, #152]	; (80018f8 <HAL_RCC_OscConfig+0x504>)
 800185e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001862:	6593      	str	r3, [r2, #88]	; 0x58
 8001864:	4b24      	ldr	r3, [pc, #144]	; (80018f8 <HAL_RCC_OscConfig+0x504>)
 8001866:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001868:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800186c:	60bb      	str	r3, [r7, #8]
 800186e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001870:	2301      	movs	r3, #1
 8001872:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001874:	4b21      	ldr	r3, [pc, #132]	; (80018fc <HAL_RCC_OscConfig+0x508>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800187c:	2b00      	cmp	r3, #0
 800187e:	d118      	bne.n	80018b2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001880:	4b1e      	ldr	r3, [pc, #120]	; (80018fc <HAL_RCC_OscConfig+0x508>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a1d      	ldr	r2, [pc, #116]	; (80018fc <HAL_RCC_OscConfig+0x508>)
 8001886:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800188a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800188c:	f7ff f9a8 	bl	8000be0 <HAL_GetTick>
 8001890:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001892:	e008      	b.n	80018a6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001894:	f7ff f9a4 	bl	8000be0 <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	2b02      	cmp	r3, #2
 80018a0:	d901      	bls.n	80018a6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80018a2:	2303      	movs	r3, #3
 80018a4:	e1b8      	b.n	8001c18 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018a6:	4b15      	ldr	r3, [pc, #84]	; (80018fc <HAL_RCC_OscConfig+0x508>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d0f0      	beq.n	8001894 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d108      	bne.n	80018cc <HAL_RCC_OscConfig+0x4d8>
 80018ba:	4b0f      	ldr	r3, [pc, #60]	; (80018f8 <HAL_RCC_OscConfig+0x504>)
 80018bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018c0:	4a0d      	ldr	r2, [pc, #52]	; (80018f8 <HAL_RCC_OscConfig+0x504>)
 80018c2:	f043 0301 	orr.w	r3, r3, #1
 80018c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018ca:	e029      	b.n	8001920 <HAL_RCC_OscConfig+0x52c>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	2b05      	cmp	r3, #5
 80018d2:	d115      	bne.n	8001900 <HAL_RCC_OscConfig+0x50c>
 80018d4:	4b08      	ldr	r3, [pc, #32]	; (80018f8 <HAL_RCC_OscConfig+0x504>)
 80018d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018da:	4a07      	ldr	r2, [pc, #28]	; (80018f8 <HAL_RCC_OscConfig+0x504>)
 80018dc:	f043 0304 	orr.w	r3, r3, #4
 80018e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018e4:	4b04      	ldr	r3, [pc, #16]	; (80018f8 <HAL_RCC_OscConfig+0x504>)
 80018e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018ea:	4a03      	ldr	r2, [pc, #12]	; (80018f8 <HAL_RCC_OscConfig+0x504>)
 80018ec:	f043 0301 	orr.w	r3, r3, #1
 80018f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018f4:	e014      	b.n	8001920 <HAL_RCC_OscConfig+0x52c>
 80018f6:	bf00      	nop
 80018f8:	40021000 	.word	0x40021000
 80018fc:	40007000 	.word	0x40007000
 8001900:	4b9d      	ldr	r3, [pc, #628]	; (8001b78 <HAL_RCC_OscConfig+0x784>)
 8001902:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001906:	4a9c      	ldr	r2, [pc, #624]	; (8001b78 <HAL_RCC_OscConfig+0x784>)
 8001908:	f023 0301 	bic.w	r3, r3, #1
 800190c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001910:	4b99      	ldr	r3, [pc, #612]	; (8001b78 <HAL_RCC_OscConfig+0x784>)
 8001912:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001916:	4a98      	ldr	r2, [pc, #608]	; (8001b78 <HAL_RCC_OscConfig+0x784>)
 8001918:	f023 0304 	bic.w	r3, r3, #4
 800191c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d016      	beq.n	8001956 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001928:	f7ff f95a 	bl	8000be0 <HAL_GetTick>
 800192c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800192e:	e00a      	b.n	8001946 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001930:	f7ff f956 	bl	8000be0 <HAL_GetTick>
 8001934:	4602      	mov	r2, r0
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	f241 3288 	movw	r2, #5000	; 0x1388
 800193e:	4293      	cmp	r3, r2
 8001940:	d901      	bls.n	8001946 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001942:	2303      	movs	r3, #3
 8001944:	e168      	b.n	8001c18 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001946:	4b8c      	ldr	r3, [pc, #560]	; (8001b78 <HAL_RCC_OscConfig+0x784>)
 8001948:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800194c:	f003 0302 	and.w	r3, r3, #2
 8001950:	2b00      	cmp	r3, #0
 8001952:	d0ed      	beq.n	8001930 <HAL_RCC_OscConfig+0x53c>
 8001954:	e015      	b.n	8001982 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001956:	f7ff f943 	bl	8000be0 <HAL_GetTick>
 800195a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800195c:	e00a      	b.n	8001974 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800195e:	f7ff f93f 	bl	8000be0 <HAL_GetTick>
 8001962:	4602      	mov	r2, r0
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	1ad3      	subs	r3, r2, r3
 8001968:	f241 3288 	movw	r2, #5000	; 0x1388
 800196c:	4293      	cmp	r3, r2
 800196e:	d901      	bls.n	8001974 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001970:	2303      	movs	r3, #3
 8001972:	e151      	b.n	8001c18 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001974:	4b80      	ldr	r3, [pc, #512]	; (8001b78 <HAL_RCC_OscConfig+0x784>)
 8001976:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800197a:	f003 0302 	and.w	r3, r3, #2
 800197e:	2b00      	cmp	r3, #0
 8001980:	d1ed      	bne.n	800195e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001982:	7ffb      	ldrb	r3, [r7, #31]
 8001984:	2b01      	cmp	r3, #1
 8001986:	d105      	bne.n	8001994 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001988:	4b7b      	ldr	r3, [pc, #492]	; (8001b78 <HAL_RCC_OscConfig+0x784>)
 800198a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800198c:	4a7a      	ldr	r2, [pc, #488]	; (8001b78 <HAL_RCC_OscConfig+0x784>)
 800198e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001992:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 0320 	and.w	r3, r3, #32
 800199c:	2b00      	cmp	r3, #0
 800199e:	d03c      	beq.n	8001a1a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d01c      	beq.n	80019e2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80019a8:	4b73      	ldr	r3, [pc, #460]	; (8001b78 <HAL_RCC_OscConfig+0x784>)
 80019aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019ae:	4a72      	ldr	r2, [pc, #456]	; (8001b78 <HAL_RCC_OscConfig+0x784>)
 80019b0:	f043 0301 	orr.w	r3, r3, #1
 80019b4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019b8:	f7ff f912 	bl	8000be0 <HAL_GetTick>
 80019bc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80019be:	e008      	b.n	80019d2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019c0:	f7ff f90e 	bl	8000be0 <HAL_GetTick>
 80019c4:	4602      	mov	r2, r0
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	2b02      	cmp	r3, #2
 80019cc:	d901      	bls.n	80019d2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80019ce:	2303      	movs	r3, #3
 80019d0:	e122      	b.n	8001c18 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80019d2:	4b69      	ldr	r3, [pc, #420]	; (8001b78 <HAL_RCC_OscConfig+0x784>)
 80019d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019d8:	f003 0302 	and.w	r3, r3, #2
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d0ef      	beq.n	80019c0 <HAL_RCC_OscConfig+0x5cc>
 80019e0:	e01b      	b.n	8001a1a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80019e2:	4b65      	ldr	r3, [pc, #404]	; (8001b78 <HAL_RCC_OscConfig+0x784>)
 80019e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019e8:	4a63      	ldr	r2, [pc, #396]	; (8001b78 <HAL_RCC_OscConfig+0x784>)
 80019ea:	f023 0301 	bic.w	r3, r3, #1
 80019ee:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019f2:	f7ff f8f5 	bl	8000be0 <HAL_GetTick>
 80019f6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80019f8:	e008      	b.n	8001a0c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019fa:	f7ff f8f1 	bl	8000be0 <HAL_GetTick>
 80019fe:	4602      	mov	r2, r0
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	d901      	bls.n	8001a0c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001a08:	2303      	movs	r3, #3
 8001a0a:	e105      	b.n	8001c18 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a0c:	4b5a      	ldr	r3, [pc, #360]	; (8001b78 <HAL_RCC_OscConfig+0x784>)
 8001a0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a12:	f003 0302 	and.w	r3, r3, #2
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d1ef      	bne.n	80019fa <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	f000 80f9 	beq.w	8001c16 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a28:	2b02      	cmp	r3, #2
 8001a2a:	f040 80cf 	bne.w	8001bcc <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001a2e:	4b52      	ldr	r3, [pc, #328]	; (8001b78 <HAL_RCC_OscConfig+0x784>)
 8001a30:	68db      	ldr	r3, [r3, #12]
 8001a32:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	f003 0203 	and.w	r2, r3, #3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d12c      	bne.n	8001a9c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4c:	3b01      	subs	r3, #1
 8001a4e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d123      	bne.n	8001a9c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a5e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d11b      	bne.n	8001a9c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a6e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d113      	bne.n	8001a9c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a7e:	085b      	lsrs	r3, r3, #1
 8001a80:	3b01      	subs	r3, #1
 8001a82:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d109      	bne.n	8001a9c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a92:	085b      	lsrs	r3, r3, #1
 8001a94:	3b01      	subs	r3, #1
 8001a96:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d071      	beq.n	8001b80 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a9c:	69bb      	ldr	r3, [r7, #24]
 8001a9e:	2b0c      	cmp	r3, #12
 8001aa0:	d068      	beq.n	8001b74 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001aa2:	4b35      	ldr	r3, [pc, #212]	; (8001b78 <HAL_RCC_OscConfig+0x784>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d105      	bne.n	8001aba <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001aae:	4b32      	ldr	r3, [pc, #200]	; (8001b78 <HAL_RCC_OscConfig+0x784>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e0ac      	b.n	8001c18 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001abe:	4b2e      	ldr	r3, [pc, #184]	; (8001b78 <HAL_RCC_OscConfig+0x784>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a2d      	ldr	r2, [pc, #180]	; (8001b78 <HAL_RCC_OscConfig+0x784>)
 8001ac4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ac8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001aca:	f7ff f889 	bl	8000be0 <HAL_GetTick>
 8001ace:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ad0:	e008      	b.n	8001ae4 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ad2:	f7ff f885 	bl	8000be0 <HAL_GetTick>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d901      	bls.n	8001ae4 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	e099      	b.n	8001c18 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ae4:	4b24      	ldr	r3, [pc, #144]	; (8001b78 <HAL_RCC_OscConfig+0x784>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d1f0      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001af0:	4b21      	ldr	r3, [pc, #132]	; (8001b78 <HAL_RCC_OscConfig+0x784>)
 8001af2:	68da      	ldr	r2, [r3, #12]
 8001af4:	4b21      	ldr	r3, [pc, #132]	; (8001b7c <HAL_RCC_OscConfig+0x788>)
 8001af6:	4013      	ands	r3, r2
 8001af8:	687a      	ldr	r2, [r7, #4]
 8001afa:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001afc:	687a      	ldr	r2, [r7, #4]
 8001afe:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001b00:	3a01      	subs	r2, #1
 8001b02:	0112      	lsls	r2, r2, #4
 8001b04:	4311      	orrs	r1, r2
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001b0a:	0212      	lsls	r2, r2, #8
 8001b0c:	4311      	orrs	r1, r2
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001b12:	0852      	lsrs	r2, r2, #1
 8001b14:	3a01      	subs	r2, #1
 8001b16:	0552      	lsls	r2, r2, #21
 8001b18:	4311      	orrs	r1, r2
 8001b1a:	687a      	ldr	r2, [r7, #4]
 8001b1c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001b1e:	0852      	lsrs	r2, r2, #1
 8001b20:	3a01      	subs	r2, #1
 8001b22:	0652      	lsls	r2, r2, #25
 8001b24:	4311      	orrs	r1, r2
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001b2a:	06d2      	lsls	r2, r2, #27
 8001b2c:	430a      	orrs	r2, r1
 8001b2e:	4912      	ldr	r1, [pc, #72]	; (8001b78 <HAL_RCC_OscConfig+0x784>)
 8001b30:	4313      	orrs	r3, r2
 8001b32:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001b34:	4b10      	ldr	r3, [pc, #64]	; (8001b78 <HAL_RCC_OscConfig+0x784>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a0f      	ldr	r2, [pc, #60]	; (8001b78 <HAL_RCC_OscConfig+0x784>)
 8001b3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b3e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b40:	4b0d      	ldr	r3, [pc, #52]	; (8001b78 <HAL_RCC_OscConfig+0x784>)
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	4a0c      	ldr	r2, [pc, #48]	; (8001b78 <HAL_RCC_OscConfig+0x784>)
 8001b46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b4a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b4c:	f7ff f848 	bl	8000be0 <HAL_GetTick>
 8001b50:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b52:	e008      	b.n	8001b66 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b54:	f7ff f844 	bl	8000be0 <HAL_GetTick>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d901      	bls.n	8001b66 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e058      	b.n	8001c18 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b66:	4b04      	ldr	r3, [pc, #16]	; (8001b78 <HAL_RCC_OscConfig+0x784>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d0f0      	beq.n	8001b54 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b72:	e050      	b.n	8001c16 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e04f      	b.n	8001c18 <HAL_RCC_OscConfig+0x824>
 8001b78:	40021000 	.word	0x40021000
 8001b7c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b80:	4b27      	ldr	r3, [pc, #156]	; (8001c20 <HAL_RCC_OscConfig+0x82c>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d144      	bne.n	8001c16 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001b8c:	4b24      	ldr	r3, [pc, #144]	; (8001c20 <HAL_RCC_OscConfig+0x82c>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a23      	ldr	r2, [pc, #140]	; (8001c20 <HAL_RCC_OscConfig+0x82c>)
 8001b92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b96:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b98:	4b21      	ldr	r3, [pc, #132]	; (8001c20 <HAL_RCC_OscConfig+0x82c>)
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	4a20      	ldr	r2, [pc, #128]	; (8001c20 <HAL_RCC_OscConfig+0x82c>)
 8001b9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ba2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001ba4:	f7ff f81c 	bl	8000be0 <HAL_GetTick>
 8001ba8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001baa:	e008      	b.n	8001bbe <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bac:	f7ff f818 	bl	8000be0 <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d901      	bls.n	8001bbe <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e02c      	b.n	8001c18 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bbe:	4b18      	ldr	r3, [pc, #96]	; (8001c20 <HAL_RCC_OscConfig+0x82c>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d0f0      	beq.n	8001bac <HAL_RCC_OscConfig+0x7b8>
 8001bca:	e024      	b.n	8001c16 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001bcc:	69bb      	ldr	r3, [r7, #24]
 8001bce:	2b0c      	cmp	r3, #12
 8001bd0:	d01f      	beq.n	8001c12 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bd2:	4b13      	ldr	r3, [pc, #76]	; (8001c20 <HAL_RCC_OscConfig+0x82c>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a12      	ldr	r2, [pc, #72]	; (8001c20 <HAL_RCC_OscConfig+0x82c>)
 8001bd8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001bdc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bde:	f7fe ffff 	bl	8000be0 <HAL_GetTick>
 8001be2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001be4:	e008      	b.n	8001bf8 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001be6:	f7fe fffb 	bl	8000be0 <HAL_GetTick>
 8001bea:	4602      	mov	r2, r0
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	1ad3      	subs	r3, r2, r3
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	d901      	bls.n	8001bf8 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	e00f      	b.n	8001c18 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bf8:	4b09      	ldr	r3, [pc, #36]	; (8001c20 <HAL_RCC_OscConfig+0x82c>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d1f0      	bne.n	8001be6 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001c04:	4b06      	ldr	r3, [pc, #24]	; (8001c20 <HAL_RCC_OscConfig+0x82c>)
 8001c06:	68da      	ldr	r2, [r3, #12]
 8001c08:	4905      	ldr	r1, [pc, #20]	; (8001c20 <HAL_RCC_OscConfig+0x82c>)
 8001c0a:	4b06      	ldr	r3, [pc, #24]	; (8001c24 <HAL_RCC_OscConfig+0x830>)
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	60cb      	str	r3, [r1, #12]
 8001c10:	e001      	b.n	8001c16 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e000      	b.n	8001c18 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8001c16:	2300      	movs	r3, #0
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3720      	adds	r7, #32
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	40021000 	.word	0x40021000
 8001c24:	feeefffc 	.word	0xfeeefffc

08001c28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b084      	sub	sp, #16
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d101      	bne.n	8001c3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e0e7      	b.n	8001e0c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c3c:	4b75      	ldr	r3, [pc, #468]	; (8001e14 <HAL_RCC_ClockConfig+0x1ec>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 0307 	and.w	r3, r3, #7
 8001c44:	683a      	ldr	r2, [r7, #0]
 8001c46:	429a      	cmp	r2, r3
 8001c48:	d910      	bls.n	8001c6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c4a:	4b72      	ldr	r3, [pc, #456]	; (8001e14 <HAL_RCC_ClockConfig+0x1ec>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f023 0207 	bic.w	r2, r3, #7
 8001c52:	4970      	ldr	r1, [pc, #448]	; (8001e14 <HAL_RCC_ClockConfig+0x1ec>)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	4313      	orrs	r3, r2
 8001c58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c5a:	4b6e      	ldr	r3, [pc, #440]	; (8001e14 <HAL_RCC_ClockConfig+0x1ec>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0307 	and.w	r3, r3, #7
 8001c62:	683a      	ldr	r2, [r7, #0]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d001      	beq.n	8001c6c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e0cf      	b.n	8001e0c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 0302 	and.w	r3, r3, #2
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d010      	beq.n	8001c9a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	689a      	ldr	r2, [r3, #8]
 8001c7c:	4b66      	ldr	r3, [pc, #408]	; (8001e18 <HAL_RCC_ClockConfig+0x1f0>)
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d908      	bls.n	8001c9a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c88:	4b63      	ldr	r3, [pc, #396]	; (8001e18 <HAL_RCC_ClockConfig+0x1f0>)
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	4960      	ldr	r1, [pc, #384]	; (8001e18 <HAL_RCC_ClockConfig+0x1f0>)
 8001c96:	4313      	orrs	r3, r2
 8001c98:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0301 	and.w	r3, r3, #1
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d04c      	beq.n	8001d40 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	2b03      	cmp	r3, #3
 8001cac:	d107      	bne.n	8001cbe <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cae:	4b5a      	ldr	r3, [pc, #360]	; (8001e18 <HAL_RCC_ClockConfig+0x1f0>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d121      	bne.n	8001cfe <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e0a6      	b.n	8001e0c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	2b02      	cmp	r3, #2
 8001cc4:	d107      	bne.n	8001cd6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cc6:	4b54      	ldr	r3, [pc, #336]	; (8001e18 <HAL_RCC_ClockConfig+0x1f0>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d115      	bne.n	8001cfe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e09a      	b.n	8001e0c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d107      	bne.n	8001cee <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001cde:	4b4e      	ldr	r3, [pc, #312]	; (8001e18 <HAL_RCC_ClockConfig+0x1f0>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 0302 	and.w	r3, r3, #2
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d109      	bne.n	8001cfe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e08e      	b.n	8001e0c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cee:	4b4a      	ldr	r3, [pc, #296]	; (8001e18 <HAL_RCC_ClockConfig+0x1f0>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d101      	bne.n	8001cfe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e086      	b.n	8001e0c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001cfe:	4b46      	ldr	r3, [pc, #280]	; (8001e18 <HAL_RCC_ClockConfig+0x1f0>)
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	f023 0203 	bic.w	r2, r3, #3
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	4943      	ldr	r1, [pc, #268]	; (8001e18 <HAL_RCC_ClockConfig+0x1f0>)
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d10:	f7fe ff66 	bl	8000be0 <HAL_GetTick>
 8001d14:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d16:	e00a      	b.n	8001d2e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d18:	f7fe ff62 	bl	8000be0 <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d901      	bls.n	8001d2e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	e06e      	b.n	8001e0c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d2e:	4b3a      	ldr	r3, [pc, #232]	; (8001e18 <HAL_RCC_ClockConfig+0x1f0>)
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	f003 020c 	and.w	r2, r3, #12
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d1eb      	bne.n	8001d18 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 0302 	and.w	r3, r3, #2
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d010      	beq.n	8001d6e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	689a      	ldr	r2, [r3, #8]
 8001d50:	4b31      	ldr	r3, [pc, #196]	; (8001e18 <HAL_RCC_ClockConfig+0x1f0>)
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d208      	bcs.n	8001d6e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d5c:	4b2e      	ldr	r3, [pc, #184]	; (8001e18 <HAL_RCC_ClockConfig+0x1f0>)
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	492b      	ldr	r1, [pc, #172]	; (8001e18 <HAL_RCC_ClockConfig+0x1f0>)
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d6e:	4b29      	ldr	r3, [pc, #164]	; (8001e14 <HAL_RCC_ClockConfig+0x1ec>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0307 	and.w	r3, r3, #7
 8001d76:	683a      	ldr	r2, [r7, #0]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d210      	bcs.n	8001d9e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d7c:	4b25      	ldr	r3, [pc, #148]	; (8001e14 <HAL_RCC_ClockConfig+0x1ec>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f023 0207 	bic.w	r2, r3, #7
 8001d84:	4923      	ldr	r1, [pc, #140]	; (8001e14 <HAL_RCC_ClockConfig+0x1ec>)
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d8c:	4b21      	ldr	r3, [pc, #132]	; (8001e14 <HAL_RCC_ClockConfig+0x1ec>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 0307 	and.w	r3, r3, #7
 8001d94:	683a      	ldr	r2, [r7, #0]
 8001d96:	429a      	cmp	r2, r3
 8001d98:	d001      	beq.n	8001d9e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e036      	b.n	8001e0c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0304 	and.w	r3, r3, #4
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d008      	beq.n	8001dbc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001daa:	4b1b      	ldr	r3, [pc, #108]	; (8001e18 <HAL_RCC_ClockConfig+0x1f0>)
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	68db      	ldr	r3, [r3, #12]
 8001db6:	4918      	ldr	r1, [pc, #96]	; (8001e18 <HAL_RCC_ClockConfig+0x1f0>)
 8001db8:	4313      	orrs	r3, r2
 8001dba:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 0308 	and.w	r3, r3, #8
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d009      	beq.n	8001ddc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001dc8:	4b13      	ldr	r3, [pc, #76]	; (8001e18 <HAL_RCC_ClockConfig+0x1f0>)
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	691b      	ldr	r3, [r3, #16]
 8001dd4:	00db      	lsls	r3, r3, #3
 8001dd6:	4910      	ldr	r1, [pc, #64]	; (8001e18 <HAL_RCC_ClockConfig+0x1f0>)
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ddc:	f000 f824 	bl	8001e28 <HAL_RCC_GetSysClockFreq>
 8001de0:	4602      	mov	r2, r0
 8001de2:	4b0d      	ldr	r3, [pc, #52]	; (8001e18 <HAL_RCC_ClockConfig+0x1f0>)
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	091b      	lsrs	r3, r3, #4
 8001de8:	f003 030f 	and.w	r3, r3, #15
 8001dec:	490b      	ldr	r1, [pc, #44]	; (8001e1c <HAL_RCC_ClockConfig+0x1f4>)
 8001dee:	5ccb      	ldrb	r3, [r1, r3]
 8001df0:	f003 031f 	and.w	r3, r3, #31
 8001df4:	fa22 f303 	lsr.w	r3, r2, r3
 8001df8:	4a09      	ldr	r2, [pc, #36]	; (8001e20 <HAL_RCC_ClockConfig+0x1f8>)
 8001dfa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001dfc:	4b09      	ldr	r3, [pc, #36]	; (8001e24 <HAL_RCC_ClockConfig+0x1fc>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7fe fe9d 	bl	8000b40 <HAL_InitTick>
 8001e06:	4603      	mov	r3, r0
 8001e08:	72fb      	strb	r3, [r7, #11]

  return status;
 8001e0a:	7afb      	ldrb	r3, [r7, #11]
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3710      	adds	r7, #16
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	40022000 	.word	0x40022000
 8001e18:	40021000 	.word	0x40021000
 8001e1c:	08003fb0 	.word	0x08003fb0
 8001e20:	20000004 	.word	0x20000004
 8001e24:	20000008 	.word	0x20000008

08001e28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b089      	sub	sp, #36	; 0x24
 8001e2c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	61fb      	str	r3, [r7, #28]
 8001e32:	2300      	movs	r3, #0
 8001e34:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e36:	4b3e      	ldr	r3, [pc, #248]	; (8001f30 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	f003 030c 	and.w	r3, r3, #12
 8001e3e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e40:	4b3b      	ldr	r3, [pc, #236]	; (8001f30 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	f003 0303 	and.w	r3, r3, #3
 8001e48:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d005      	beq.n	8001e5c <HAL_RCC_GetSysClockFreq+0x34>
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	2b0c      	cmp	r3, #12
 8001e54:	d121      	bne.n	8001e9a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d11e      	bne.n	8001e9a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001e5c:	4b34      	ldr	r3, [pc, #208]	; (8001f30 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 0308 	and.w	r3, r3, #8
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d107      	bne.n	8001e78 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001e68:	4b31      	ldr	r3, [pc, #196]	; (8001f30 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e6e:	0a1b      	lsrs	r3, r3, #8
 8001e70:	f003 030f 	and.w	r3, r3, #15
 8001e74:	61fb      	str	r3, [r7, #28]
 8001e76:	e005      	b.n	8001e84 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001e78:	4b2d      	ldr	r3, [pc, #180]	; (8001f30 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	091b      	lsrs	r3, r3, #4
 8001e7e:	f003 030f 	and.w	r3, r3, #15
 8001e82:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001e84:	4a2b      	ldr	r2, [pc, #172]	; (8001f34 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e8c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d10d      	bne.n	8001eb0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e98:	e00a      	b.n	8001eb0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	2b04      	cmp	r3, #4
 8001e9e:	d102      	bne.n	8001ea6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001ea0:	4b25      	ldr	r3, [pc, #148]	; (8001f38 <HAL_RCC_GetSysClockFreq+0x110>)
 8001ea2:	61bb      	str	r3, [r7, #24]
 8001ea4:	e004      	b.n	8001eb0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	2b08      	cmp	r3, #8
 8001eaa:	d101      	bne.n	8001eb0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001eac:	4b23      	ldr	r3, [pc, #140]	; (8001f3c <HAL_RCC_GetSysClockFreq+0x114>)
 8001eae:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	2b0c      	cmp	r3, #12
 8001eb4:	d134      	bne.n	8001f20 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001eb6:	4b1e      	ldr	r3, [pc, #120]	; (8001f30 <HAL_RCC_GetSysClockFreq+0x108>)
 8001eb8:	68db      	ldr	r3, [r3, #12]
 8001eba:	f003 0303 	and.w	r3, r3, #3
 8001ebe:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d003      	beq.n	8001ece <HAL_RCC_GetSysClockFreq+0xa6>
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	2b03      	cmp	r3, #3
 8001eca:	d003      	beq.n	8001ed4 <HAL_RCC_GetSysClockFreq+0xac>
 8001ecc:	e005      	b.n	8001eda <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001ece:	4b1a      	ldr	r3, [pc, #104]	; (8001f38 <HAL_RCC_GetSysClockFreq+0x110>)
 8001ed0:	617b      	str	r3, [r7, #20]
      break;
 8001ed2:	e005      	b.n	8001ee0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001ed4:	4b19      	ldr	r3, [pc, #100]	; (8001f3c <HAL_RCC_GetSysClockFreq+0x114>)
 8001ed6:	617b      	str	r3, [r7, #20]
      break;
 8001ed8:	e002      	b.n	8001ee0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	617b      	str	r3, [r7, #20]
      break;
 8001ede:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ee0:	4b13      	ldr	r3, [pc, #76]	; (8001f30 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	091b      	lsrs	r3, r3, #4
 8001ee6:	f003 0307 	and.w	r3, r3, #7
 8001eea:	3301      	adds	r3, #1
 8001eec:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001eee:	4b10      	ldr	r3, [pc, #64]	; (8001f30 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ef0:	68db      	ldr	r3, [r3, #12]
 8001ef2:	0a1b      	lsrs	r3, r3, #8
 8001ef4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ef8:	697a      	ldr	r2, [r7, #20]
 8001efa:	fb03 f202 	mul.w	r2, r3, r2
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f04:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f06:	4b0a      	ldr	r3, [pc, #40]	; (8001f30 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f08:	68db      	ldr	r3, [r3, #12]
 8001f0a:	0e5b      	lsrs	r3, r3, #25
 8001f0c:	f003 0303 	and.w	r3, r3, #3
 8001f10:	3301      	adds	r3, #1
 8001f12:	005b      	lsls	r3, r3, #1
 8001f14:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001f16:	697a      	ldr	r2, [r7, #20]
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f1e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001f20:	69bb      	ldr	r3, [r7, #24]
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3724      	adds	r7, #36	; 0x24
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	40021000 	.word	0x40021000
 8001f34:	08003fc8 	.word	0x08003fc8
 8001f38:	00f42400 	.word	0x00f42400
 8001f3c:	007a1200 	.word	0x007a1200

08001f40 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f44:	4b03      	ldr	r3, [pc, #12]	; (8001f54 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f46:	681b      	ldr	r3, [r3, #0]
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
 8001f54:	20000004 	.word	0x20000004

08001f58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001f5c:	f7ff fff0 	bl	8001f40 <HAL_RCC_GetHCLKFreq>
 8001f60:	4602      	mov	r2, r0
 8001f62:	4b06      	ldr	r3, [pc, #24]	; (8001f7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	0a1b      	lsrs	r3, r3, #8
 8001f68:	f003 0307 	and.w	r3, r3, #7
 8001f6c:	4904      	ldr	r1, [pc, #16]	; (8001f80 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f6e:	5ccb      	ldrb	r3, [r1, r3]
 8001f70:	f003 031f 	and.w	r3, r3, #31
 8001f74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	40021000 	.word	0x40021000
 8001f80:	08003fc0 	.word	0x08003fc0

08001f84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001f88:	f7ff ffda 	bl	8001f40 <HAL_RCC_GetHCLKFreq>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	4b06      	ldr	r3, [pc, #24]	; (8001fa8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	0adb      	lsrs	r3, r3, #11
 8001f94:	f003 0307 	and.w	r3, r3, #7
 8001f98:	4904      	ldr	r1, [pc, #16]	; (8001fac <HAL_RCC_GetPCLK2Freq+0x28>)
 8001f9a:	5ccb      	ldrb	r3, [r1, r3]
 8001f9c:	f003 031f 	and.w	r3, r3, #31
 8001fa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	40021000 	.word	0x40021000
 8001fac:	08003fc0 	.word	0x08003fc0

08001fb0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b086      	sub	sp, #24
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001fb8:	2300      	movs	r3, #0
 8001fba:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001fbc:	4b2a      	ldr	r3, [pc, #168]	; (8002068 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d003      	beq.n	8001fd0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001fc8:	f7ff f94a 	bl	8001260 <HAL_PWREx_GetVoltageRange>
 8001fcc:	6178      	str	r0, [r7, #20]
 8001fce:	e014      	b.n	8001ffa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001fd0:	4b25      	ldr	r3, [pc, #148]	; (8002068 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fd4:	4a24      	ldr	r2, [pc, #144]	; (8002068 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fda:	6593      	str	r3, [r2, #88]	; 0x58
 8001fdc:	4b22      	ldr	r3, [pc, #136]	; (8002068 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fe0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fe4:	60fb      	str	r3, [r7, #12]
 8001fe6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001fe8:	f7ff f93a 	bl	8001260 <HAL_PWREx_GetVoltageRange>
 8001fec:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001fee:	4b1e      	ldr	r3, [pc, #120]	; (8002068 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ff2:	4a1d      	ldr	r2, [pc, #116]	; (8002068 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ff4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ff8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002000:	d10b      	bne.n	800201a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2b80      	cmp	r3, #128	; 0x80
 8002006:	d919      	bls.n	800203c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2ba0      	cmp	r3, #160	; 0xa0
 800200c:	d902      	bls.n	8002014 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800200e:	2302      	movs	r3, #2
 8002010:	613b      	str	r3, [r7, #16]
 8002012:	e013      	b.n	800203c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002014:	2301      	movs	r3, #1
 8002016:	613b      	str	r3, [r7, #16]
 8002018:	e010      	b.n	800203c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2b80      	cmp	r3, #128	; 0x80
 800201e:	d902      	bls.n	8002026 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002020:	2303      	movs	r3, #3
 8002022:	613b      	str	r3, [r7, #16]
 8002024:	e00a      	b.n	800203c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2b80      	cmp	r3, #128	; 0x80
 800202a:	d102      	bne.n	8002032 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800202c:	2302      	movs	r3, #2
 800202e:	613b      	str	r3, [r7, #16]
 8002030:	e004      	b.n	800203c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2b70      	cmp	r3, #112	; 0x70
 8002036:	d101      	bne.n	800203c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002038:	2301      	movs	r3, #1
 800203a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800203c:	4b0b      	ldr	r3, [pc, #44]	; (800206c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f023 0207 	bic.w	r2, r3, #7
 8002044:	4909      	ldr	r1, [pc, #36]	; (800206c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	4313      	orrs	r3, r2
 800204a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800204c:	4b07      	ldr	r3, [pc, #28]	; (800206c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 0307 	and.w	r3, r3, #7
 8002054:	693a      	ldr	r2, [r7, #16]
 8002056:	429a      	cmp	r2, r3
 8002058:	d001      	beq.n	800205e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e000      	b.n	8002060 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800205e:	2300      	movs	r3, #0
}
 8002060:	4618      	mov	r0, r3
 8002062:	3718      	adds	r7, #24
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	40021000 	.word	0x40021000
 800206c:	40022000 	.word	0x40022000

08002070 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b086      	sub	sp, #24
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002078:	2300      	movs	r3, #0
 800207a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800207c:	2300      	movs	r3, #0
 800207e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002088:	2b00      	cmp	r3, #0
 800208a:	d041      	beq.n	8002110 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002090:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002094:	d02a      	beq.n	80020ec <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002096:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800209a:	d824      	bhi.n	80020e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800209c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80020a0:	d008      	beq.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80020a2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80020a6:	d81e      	bhi.n	80020e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d00a      	beq.n	80020c2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80020ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020b0:	d010      	beq.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80020b2:	e018      	b.n	80020e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80020b4:	4b86      	ldr	r3, [pc, #536]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	4a85      	ldr	r2, [pc, #532]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020be:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80020c0:	e015      	b.n	80020ee <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	3304      	adds	r3, #4
 80020c6:	2100      	movs	r1, #0
 80020c8:	4618      	mov	r0, r3
 80020ca:	f000 facd 	bl	8002668 <RCCEx_PLLSAI1_Config>
 80020ce:	4603      	mov	r3, r0
 80020d0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80020d2:	e00c      	b.n	80020ee <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	3320      	adds	r3, #32
 80020d8:	2100      	movs	r1, #0
 80020da:	4618      	mov	r0, r3
 80020dc:	f000 fbb6 	bl	800284c <RCCEx_PLLSAI2_Config>
 80020e0:	4603      	mov	r3, r0
 80020e2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80020e4:	e003      	b.n	80020ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	74fb      	strb	r3, [r7, #19]
      break;
 80020ea:	e000      	b.n	80020ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80020ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80020ee:	7cfb      	ldrb	r3, [r7, #19]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d10b      	bne.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80020f4:	4b76      	ldr	r3, [pc, #472]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020fa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002102:	4973      	ldr	r1, [pc, #460]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002104:	4313      	orrs	r3, r2
 8002106:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800210a:	e001      	b.n	8002110 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800210c:	7cfb      	ldrb	r3, [r7, #19]
 800210e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002118:	2b00      	cmp	r3, #0
 800211a:	d041      	beq.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002120:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002124:	d02a      	beq.n	800217c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002126:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800212a:	d824      	bhi.n	8002176 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800212c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002130:	d008      	beq.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002132:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002136:	d81e      	bhi.n	8002176 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002138:	2b00      	cmp	r3, #0
 800213a:	d00a      	beq.n	8002152 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800213c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002140:	d010      	beq.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002142:	e018      	b.n	8002176 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002144:	4b62      	ldr	r3, [pc, #392]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	4a61      	ldr	r2, [pc, #388]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800214a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800214e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002150:	e015      	b.n	800217e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	3304      	adds	r3, #4
 8002156:	2100      	movs	r1, #0
 8002158:	4618      	mov	r0, r3
 800215a:	f000 fa85 	bl	8002668 <RCCEx_PLLSAI1_Config>
 800215e:	4603      	mov	r3, r0
 8002160:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002162:	e00c      	b.n	800217e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	3320      	adds	r3, #32
 8002168:	2100      	movs	r1, #0
 800216a:	4618      	mov	r0, r3
 800216c:	f000 fb6e 	bl	800284c <RCCEx_PLLSAI2_Config>
 8002170:	4603      	mov	r3, r0
 8002172:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002174:	e003      	b.n	800217e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	74fb      	strb	r3, [r7, #19]
      break;
 800217a:	e000      	b.n	800217e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800217c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800217e:	7cfb      	ldrb	r3, [r7, #19]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d10b      	bne.n	800219c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002184:	4b52      	ldr	r3, [pc, #328]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002186:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800218a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002192:	494f      	ldr	r1, [pc, #316]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002194:	4313      	orrs	r3, r2
 8002196:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800219a:	e001      	b.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800219c:	7cfb      	ldrb	r3, [r7, #19]
 800219e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	f000 80a0 	beq.w	80022ee <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021ae:	2300      	movs	r3, #0
 80021b0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80021b2:	4b47      	ldr	r3, [pc, #284]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d101      	bne.n	80021c2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80021be:	2301      	movs	r3, #1
 80021c0:	e000      	b.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80021c2:	2300      	movs	r3, #0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d00d      	beq.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021c8:	4b41      	ldr	r3, [pc, #260]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021cc:	4a40      	ldr	r2, [pc, #256]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021d2:	6593      	str	r3, [r2, #88]	; 0x58
 80021d4:	4b3e      	ldr	r3, [pc, #248]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021dc:	60bb      	str	r3, [r7, #8]
 80021de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021e0:	2301      	movs	r3, #1
 80021e2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021e4:	4b3b      	ldr	r3, [pc, #236]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a3a      	ldr	r2, [pc, #232]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80021ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021ee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80021f0:	f7fe fcf6 	bl	8000be0 <HAL_GetTick>
 80021f4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80021f6:	e009      	b.n	800220c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021f8:	f7fe fcf2 	bl	8000be0 <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	2b02      	cmp	r3, #2
 8002204:	d902      	bls.n	800220c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002206:	2303      	movs	r3, #3
 8002208:	74fb      	strb	r3, [r7, #19]
        break;
 800220a:	e005      	b.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800220c:	4b31      	ldr	r3, [pc, #196]	; (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002214:	2b00      	cmp	r3, #0
 8002216:	d0ef      	beq.n	80021f8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002218:	7cfb      	ldrb	r3, [r7, #19]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d15c      	bne.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800221e:	4b2c      	ldr	r3, [pc, #176]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002220:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002224:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002228:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d01f      	beq.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002236:	697a      	ldr	r2, [r7, #20]
 8002238:	429a      	cmp	r2, r3
 800223a:	d019      	beq.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800223c:	4b24      	ldr	r3, [pc, #144]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800223e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002242:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002246:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002248:	4b21      	ldr	r3, [pc, #132]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800224a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800224e:	4a20      	ldr	r2, [pc, #128]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002250:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002254:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002258:	4b1d      	ldr	r3, [pc, #116]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800225a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800225e:	4a1c      	ldr	r2, [pc, #112]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002260:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002264:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002268:	4a19      	ldr	r2, [pc, #100]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	f003 0301 	and.w	r3, r3, #1
 8002276:	2b00      	cmp	r3, #0
 8002278:	d016      	beq.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800227a:	f7fe fcb1 	bl	8000be0 <HAL_GetTick>
 800227e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002280:	e00b      	b.n	800229a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002282:	f7fe fcad 	bl	8000be0 <HAL_GetTick>
 8002286:	4602      	mov	r2, r0
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002290:	4293      	cmp	r3, r2
 8002292:	d902      	bls.n	800229a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002294:	2303      	movs	r3, #3
 8002296:	74fb      	strb	r3, [r7, #19]
            break;
 8002298:	e006      	b.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800229a:	4b0d      	ldr	r3, [pc, #52]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800229c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022a0:	f003 0302 	and.w	r3, r3, #2
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d0ec      	beq.n	8002282 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80022a8:	7cfb      	ldrb	r3, [r7, #19]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d10c      	bne.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80022ae:	4b08      	ldr	r3, [pc, #32]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022be:	4904      	ldr	r1, [pc, #16]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022c0:	4313      	orrs	r3, r2
 80022c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80022c6:	e009      	b.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80022c8:	7cfb      	ldrb	r3, [r7, #19]
 80022ca:	74bb      	strb	r3, [r7, #18]
 80022cc:	e006      	b.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80022ce:	bf00      	nop
 80022d0:	40021000 	.word	0x40021000
 80022d4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022d8:	7cfb      	ldrb	r3, [r7, #19]
 80022da:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022dc:	7c7b      	ldrb	r3, [r7, #17]
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d105      	bne.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022e2:	4ba6      	ldr	r3, [pc, #664]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022e6:	4aa5      	ldr	r2, [pc, #660]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022ec:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0301 	and.w	r3, r3, #1
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d00a      	beq.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80022fa:	4ba0      	ldr	r3, [pc, #640]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002300:	f023 0203 	bic.w	r2, r3, #3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002308:	499c      	ldr	r1, [pc, #624]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800230a:	4313      	orrs	r3, r2
 800230c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0302 	and.w	r3, r3, #2
 8002318:	2b00      	cmp	r3, #0
 800231a:	d00a      	beq.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800231c:	4b97      	ldr	r3, [pc, #604]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800231e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002322:	f023 020c 	bic.w	r2, r3, #12
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800232a:	4994      	ldr	r1, [pc, #592]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800232c:	4313      	orrs	r3, r2
 800232e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0304 	and.w	r3, r3, #4
 800233a:	2b00      	cmp	r3, #0
 800233c:	d00a      	beq.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800233e:	4b8f      	ldr	r3, [pc, #572]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002340:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002344:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234c:	498b      	ldr	r1, [pc, #556]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800234e:	4313      	orrs	r3, r2
 8002350:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0308 	and.w	r3, r3, #8
 800235c:	2b00      	cmp	r3, #0
 800235e:	d00a      	beq.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002360:	4b86      	ldr	r3, [pc, #536]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002366:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800236e:	4983      	ldr	r1, [pc, #524]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002370:	4313      	orrs	r3, r2
 8002372:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0310 	and.w	r3, r3, #16
 800237e:	2b00      	cmp	r3, #0
 8002380:	d00a      	beq.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002382:	4b7e      	ldr	r3, [pc, #504]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002384:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002388:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002390:	497a      	ldr	r1, [pc, #488]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002392:	4313      	orrs	r3, r2
 8002394:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0320 	and.w	r3, r3, #32
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d00a      	beq.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80023a4:	4b75      	ldr	r3, [pc, #468]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023aa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023b2:	4972      	ldr	r1, [pc, #456]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023b4:	4313      	orrs	r3, r2
 80023b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d00a      	beq.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80023c6:	4b6d      	ldr	r3, [pc, #436]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023cc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023d4:	4969      	ldr	r1, [pc, #420]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023d6:	4313      	orrs	r3, r2
 80023d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d00a      	beq.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80023e8:	4b64      	ldr	r3, [pc, #400]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80023f6:	4961      	ldr	r1, [pc, #388]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80023f8:	4313      	orrs	r3, r2
 80023fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002406:	2b00      	cmp	r3, #0
 8002408:	d00a      	beq.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800240a:	4b5c      	ldr	r3, [pc, #368]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800240c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002410:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002418:	4958      	ldr	r1, [pc, #352]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800241a:	4313      	orrs	r3, r2
 800241c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002428:	2b00      	cmp	r3, #0
 800242a:	d00a      	beq.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800242c:	4b53      	ldr	r3, [pc, #332]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800242e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002432:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800243a:	4950      	ldr	r1, [pc, #320]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800243c:	4313      	orrs	r3, r2
 800243e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800244a:	2b00      	cmp	r3, #0
 800244c:	d00a      	beq.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800244e:	4b4b      	ldr	r3, [pc, #300]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002450:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002454:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800245c:	4947      	ldr	r1, [pc, #284]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800245e:	4313      	orrs	r3, r2
 8002460:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d00a      	beq.n	8002486 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002470:	4b42      	ldr	r3, [pc, #264]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002472:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002476:	f023 0203 	bic.w	r2, r3, #3
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800247e:	493f      	ldr	r1, [pc, #252]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002480:	4313      	orrs	r3, r2
 8002482:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d028      	beq.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002492:	4b3a      	ldr	r3, [pc, #232]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002494:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002498:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024a0:	4936      	ldr	r1, [pc, #216]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024a2:	4313      	orrs	r3, r2
 80024a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024b0:	d106      	bne.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024b2:	4b32      	ldr	r3, [pc, #200]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024b4:	68db      	ldr	r3, [r3, #12]
 80024b6:	4a31      	ldr	r2, [pc, #196]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024bc:	60d3      	str	r3, [r2, #12]
 80024be:	e011      	b.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80024c8:	d10c      	bne.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	3304      	adds	r3, #4
 80024ce:	2101      	movs	r1, #1
 80024d0:	4618      	mov	r0, r3
 80024d2:	f000 f8c9 	bl	8002668 <RCCEx_PLLSAI1_Config>
 80024d6:	4603      	mov	r3, r0
 80024d8:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80024da:	7cfb      	ldrb	r3, [r7, #19]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d001      	beq.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 80024e0:	7cfb      	ldrb	r3, [r7, #19]
 80024e2:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d028      	beq.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80024f0:	4b22      	ldr	r3, [pc, #136]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80024f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024f6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024fe:	491f      	ldr	r1, [pc, #124]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002500:	4313      	orrs	r3, r2
 8002502:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800250a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800250e:	d106      	bne.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002510:	4b1a      	ldr	r3, [pc, #104]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	4a19      	ldr	r2, [pc, #100]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002516:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800251a:	60d3      	str	r3, [r2, #12]
 800251c:	e011      	b.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002522:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002526:	d10c      	bne.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	3304      	adds	r3, #4
 800252c:	2101      	movs	r1, #1
 800252e:	4618      	mov	r0, r3
 8002530:	f000 f89a 	bl	8002668 <RCCEx_PLLSAI1_Config>
 8002534:	4603      	mov	r3, r0
 8002536:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002538:	7cfb      	ldrb	r3, [r7, #19]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d001      	beq.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 800253e:	7cfb      	ldrb	r3, [r7, #19]
 8002540:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d02a      	beq.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800254e:	4b0b      	ldr	r3, [pc, #44]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002550:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002554:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800255c:	4907      	ldr	r1, [pc, #28]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800255e:	4313      	orrs	r3, r2
 8002560:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002568:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800256c:	d108      	bne.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800256e:	4b03      	ldr	r3, [pc, #12]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	4a02      	ldr	r2, [pc, #8]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002574:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002578:	60d3      	str	r3, [r2, #12]
 800257a:	e013      	b.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x534>
 800257c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002584:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002588:	d10c      	bne.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	3304      	adds	r3, #4
 800258e:	2101      	movs	r1, #1
 8002590:	4618      	mov	r0, r3
 8002592:	f000 f869 	bl	8002668 <RCCEx_PLLSAI1_Config>
 8002596:	4603      	mov	r3, r0
 8002598:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800259a:	7cfb      	ldrb	r3, [r7, #19]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d001      	beq.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 80025a0:	7cfb      	ldrb	r3, [r7, #19]
 80025a2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d02f      	beq.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80025b0:	4b2c      	ldr	r3, [pc, #176]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80025b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025b6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80025be:	4929      	ldr	r1, [pc, #164]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80025c0:	4313      	orrs	r3, r2
 80025c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80025ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80025ce:	d10d      	bne.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	3304      	adds	r3, #4
 80025d4:	2102      	movs	r1, #2
 80025d6:	4618      	mov	r0, r3
 80025d8:	f000 f846 	bl	8002668 <RCCEx_PLLSAI1_Config>
 80025dc:	4603      	mov	r3, r0
 80025de:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80025e0:	7cfb      	ldrb	r3, [r7, #19]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d014      	beq.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80025e6:	7cfb      	ldrb	r3, [r7, #19]
 80025e8:	74bb      	strb	r3, [r7, #18]
 80025ea:	e011      	b.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80025f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80025f4:	d10c      	bne.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	3320      	adds	r3, #32
 80025fa:	2102      	movs	r1, #2
 80025fc:	4618      	mov	r0, r3
 80025fe:	f000 f925 	bl	800284c <RCCEx_PLLSAI2_Config>
 8002602:	4603      	mov	r3, r0
 8002604:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002606:	7cfb      	ldrb	r3, [r7, #19]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d001      	beq.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 800260c:	7cfb      	ldrb	r3, [r7, #19]
 800260e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002618:	2b00      	cmp	r3, #0
 800261a:	d00b      	beq.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800261c:	4b11      	ldr	r3, [pc, #68]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800261e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002622:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800262c:	490d      	ldr	r1, [pc, #52]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800262e:	4313      	orrs	r3, r2
 8002630:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d00b      	beq.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002640:	4b08      	ldr	r3, [pc, #32]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002642:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002646:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002650:	4904      	ldr	r1, [pc, #16]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002652:	4313      	orrs	r3, r2
 8002654:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002658:	7cbb      	ldrb	r3, [r7, #18]
}
 800265a:	4618      	mov	r0, r3
 800265c:	3718      	adds	r7, #24
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	40021000 	.word	0x40021000

08002668 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b084      	sub	sp, #16
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002672:	2300      	movs	r3, #0
 8002674:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002676:	4b74      	ldr	r3, [pc, #464]	; (8002848 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002678:	68db      	ldr	r3, [r3, #12]
 800267a:	f003 0303 	and.w	r3, r3, #3
 800267e:	2b00      	cmp	r3, #0
 8002680:	d018      	beq.n	80026b4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002682:	4b71      	ldr	r3, [pc, #452]	; (8002848 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002684:	68db      	ldr	r3, [r3, #12]
 8002686:	f003 0203 	and.w	r2, r3, #3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	429a      	cmp	r2, r3
 8002690:	d10d      	bne.n	80026ae <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
       ||
 8002696:	2b00      	cmp	r3, #0
 8002698:	d009      	beq.n	80026ae <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800269a:	4b6b      	ldr	r3, [pc, #428]	; (8002848 <RCCEx_PLLSAI1_Config+0x1e0>)
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	091b      	lsrs	r3, r3, #4
 80026a0:	f003 0307 	and.w	r3, r3, #7
 80026a4:	1c5a      	adds	r2, r3, #1
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685b      	ldr	r3, [r3, #4]
       ||
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d047      	beq.n	800273e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	73fb      	strb	r3, [r7, #15]
 80026b2:	e044      	b.n	800273e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	2b03      	cmp	r3, #3
 80026ba:	d018      	beq.n	80026ee <RCCEx_PLLSAI1_Config+0x86>
 80026bc:	2b03      	cmp	r3, #3
 80026be:	d825      	bhi.n	800270c <RCCEx_PLLSAI1_Config+0xa4>
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d002      	beq.n	80026ca <RCCEx_PLLSAI1_Config+0x62>
 80026c4:	2b02      	cmp	r3, #2
 80026c6:	d009      	beq.n	80026dc <RCCEx_PLLSAI1_Config+0x74>
 80026c8:	e020      	b.n	800270c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80026ca:	4b5f      	ldr	r3, [pc, #380]	; (8002848 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0302 	and.w	r3, r3, #2
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d11d      	bne.n	8002712 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026da:	e01a      	b.n	8002712 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80026dc:	4b5a      	ldr	r3, [pc, #360]	; (8002848 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d116      	bne.n	8002716 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026ec:	e013      	b.n	8002716 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80026ee:	4b56      	ldr	r3, [pc, #344]	; (8002848 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d10f      	bne.n	800271a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80026fa:	4b53      	ldr	r3, [pc, #332]	; (8002848 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d109      	bne.n	800271a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800270a:	e006      	b.n	800271a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	73fb      	strb	r3, [r7, #15]
      break;
 8002710:	e004      	b.n	800271c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002712:	bf00      	nop
 8002714:	e002      	b.n	800271c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002716:	bf00      	nop
 8002718:	e000      	b.n	800271c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800271a:	bf00      	nop
    }

    if(status == HAL_OK)
 800271c:	7bfb      	ldrb	r3, [r7, #15]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d10d      	bne.n	800273e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002722:	4b49      	ldr	r3, [pc, #292]	; (8002848 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6819      	ldr	r1, [r3, #0]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	3b01      	subs	r3, #1
 8002734:	011b      	lsls	r3, r3, #4
 8002736:	430b      	orrs	r3, r1
 8002738:	4943      	ldr	r1, [pc, #268]	; (8002848 <RCCEx_PLLSAI1_Config+0x1e0>)
 800273a:	4313      	orrs	r3, r2
 800273c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800273e:	7bfb      	ldrb	r3, [r7, #15]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d17c      	bne.n	800283e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002744:	4b40      	ldr	r3, [pc, #256]	; (8002848 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a3f      	ldr	r2, [pc, #252]	; (8002848 <RCCEx_PLLSAI1_Config+0x1e0>)
 800274a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800274e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002750:	f7fe fa46 	bl	8000be0 <HAL_GetTick>
 8002754:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002756:	e009      	b.n	800276c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002758:	f7fe fa42 	bl	8000be0 <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	2b02      	cmp	r3, #2
 8002764:	d902      	bls.n	800276c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	73fb      	strb	r3, [r7, #15]
        break;
 800276a:	e005      	b.n	8002778 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800276c:	4b36      	ldr	r3, [pc, #216]	; (8002848 <RCCEx_PLLSAI1_Config+0x1e0>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d1ef      	bne.n	8002758 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002778:	7bfb      	ldrb	r3, [r7, #15]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d15f      	bne.n	800283e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d110      	bne.n	80027a6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002784:	4b30      	ldr	r3, [pc, #192]	; (8002848 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002786:	691b      	ldr	r3, [r3, #16]
 8002788:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800278c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	6892      	ldr	r2, [r2, #8]
 8002794:	0211      	lsls	r1, r2, #8
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	68d2      	ldr	r2, [r2, #12]
 800279a:	06d2      	lsls	r2, r2, #27
 800279c:	430a      	orrs	r2, r1
 800279e:	492a      	ldr	r1, [pc, #168]	; (8002848 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027a0:	4313      	orrs	r3, r2
 80027a2:	610b      	str	r3, [r1, #16]
 80027a4:	e027      	b.n	80027f6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d112      	bne.n	80027d2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80027ac:	4b26      	ldr	r3, [pc, #152]	; (8002848 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027ae:	691b      	ldr	r3, [r3, #16]
 80027b0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80027b4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80027b8:	687a      	ldr	r2, [r7, #4]
 80027ba:	6892      	ldr	r2, [r2, #8]
 80027bc:	0211      	lsls	r1, r2, #8
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	6912      	ldr	r2, [r2, #16]
 80027c2:	0852      	lsrs	r2, r2, #1
 80027c4:	3a01      	subs	r2, #1
 80027c6:	0552      	lsls	r2, r2, #21
 80027c8:	430a      	orrs	r2, r1
 80027ca:	491f      	ldr	r1, [pc, #124]	; (8002848 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027cc:	4313      	orrs	r3, r2
 80027ce:	610b      	str	r3, [r1, #16]
 80027d0:	e011      	b.n	80027f6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80027d2:	4b1d      	ldr	r3, [pc, #116]	; (8002848 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027d4:	691b      	ldr	r3, [r3, #16]
 80027d6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80027da:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	6892      	ldr	r2, [r2, #8]
 80027e2:	0211      	lsls	r1, r2, #8
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	6952      	ldr	r2, [r2, #20]
 80027e8:	0852      	lsrs	r2, r2, #1
 80027ea:	3a01      	subs	r2, #1
 80027ec:	0652      	lsls	r2, r2, #25
 80027ee:	430a      	orrs	r2, r1
 80027f0:	4915      	ldr	r1, [pc, #84]	; (8002848 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027f2:	4313      	orrs	r3, r2
 80027f4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80027f6:	4b14      	ldr	r3, [pc, #80]	; (8002848 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a13      	ldr	r2, [pc, #76]	; (8002848 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027fc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002800:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002802:	f7fe f9ed 	bl	8000be0 <HAL_GetTick>
 8002806:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002808:	e009      	b.n	800281e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800280a:	f7fe f9e9 	bl	8000be0 <HAL_GetTick>
 800280e:	4602      	mov	r2, r0
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	2b02      	cmp	r3, #2
 8002816:	d902      	bls.n	800281e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	73fb      	strb	r3, [r7, #15]
          break;
 800281c:	e005      	b.n	800282a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800281e:	4b0a      	ldr	r3, [pc, #40]	; (8002848 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d0ef      	beq.n	800280a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800282a:	7bfb      	ldrb	r3, [r7, #15]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d106      	bne.n	800283e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002830:	4b05      	ldr	r3, [pc, #20]	; (8002848 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002832:	691a      	ldr	r2, [r3, #16]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	699b      	ldr	r3, [r3, #24]
 8002838:	4903      	ldr	r1, [pc, #12]	; (8002848 <RCCEx_PLLSAI1_Config+0x1e0>)
 800283a:	4313      	orrs	r3, r2
 800283c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800283e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002840:	4618      	mov	r0, r3
 8002842:	3710      	adds	r7, #16
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	40021000 	.word	0x40021000

0800284c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b084      	sub	sp, #16
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002856:	2300      	movs	r3, #0
 8002858:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800285a:	4b69      	ldr	r3, [pc, #420]	; (8002a00 <RCCEx_PLLSAI2_Config+0x1b4>)
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	f003 0303 	and.w	r3, r3, #3
 8002862:	2b00      	cmp	r3, #0
 8002864:	d018      	beq.n	8002898 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002866:	4b66      	ldr	r3, [pc, #408]	; (8002a00 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	f003 0203 	and.w	r2, r3, #3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	429a      	cmp	r2, r3
 8002874:	d10d      	bne.n	8002892 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
       ||
 800287a:	2b00      	cmp	r3, #0
 800287c:	d009      	beq.n	8002892 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800287e:	4b60      	ldr	r3, [pc, #384]	; (8002a00 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002880:	68db      	ldr	r3, [r3, #12]
 8002882:	091b      	lsrs	r3, r3, #4
 8002884:	f003 0307 	and.w	r3, r3, #7
 8002888:	1c5a      	adds	r2, r3, #1
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	685b      	ldr	r3, [r3, #4]
       ||
 800288e:	429a      	cmp	r2, r3
 8002890:	d047      	beq.n	8002922 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	73fb      	strb	r3, [r7, #15]
 8002896:	e044      	b.n	8002922 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2b03      	cmp	r3, #3
 800289e:	d018      	beq.n	80028d2 <RCCEx_PLLSAI2_Config+0x86>
 80028a0:	2b03      	cmp	r3, #3
 80028a2:	d825      	bhi.n	80028f0 <RCCEx_PLLSAI2_Config+0xa4>
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d002      	beq.n	80028ae <RCCEx_PLLSAI2_Config+0x62>
 80028a8:	2b02      	cmp	r3, #2
 80028aa:	d009      	beq.n	80028c0 <RCCEx_PLLSAI2_Config+0x74>
 80028ac:	e020      	b.n	80028f0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80028ae:	4b54      	ldr	r3, [pc, #336]	; (8002a00 <RCCEx_PLLSAI2_Config+0x1b4>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0302 	and.w	r3, r3, #2
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d11d      	bne.n	80028f6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028be:	e01a      	b.n	80028f6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80028c0:	4b4f      	ldr	r3, [pc, #316]	; (8002a00 <RCCEx_PLLSAI2_Config+0x1b4>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d116      	bne.n	80028fa <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028d0:	e013      	b.n	80028fa <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80028d2:	4b4b      	ldr	r3, [pc, #300]	; (8002a00 <RCCEx_PLLSAI2_Config+0x1b4>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d10f      	bne.n	80028fe <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80028de:	4b48      	ldr	r3, [pc, #288]	; (8002a00 <RCCEx_PLLSAI2_Config+0x1b4>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d109      	bne.n	80028fe <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80028ee:	e006      	b.n	80028fe <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	73fb      	strb	r3, [r7, #15]
      break;
 80028f4:	e004      	b.n	8002900 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80028f6:	bf00      	nop
 80028f8:	e002      	b.n	8002900 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80028fa:	bf00      	nop
 80028fc:	e000      	b.n	8002900 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80028fe:	bf00      	nop
    }

    if(status == HAL_OK)
 8002900:	7bfb      	ldrb	r3, [r7, #15]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d10d      	bne.n	8002922 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002906:	4b3e      	ldr	r3, [pc, #248]	; (8002a00 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6819      	ldr	r1, [r3, #0]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	3b01      	subs	r3, #1
 8002918:	011b      	lsls	r3, r3, #4
 800291a:	430b      	orrs	r3, r1
 800291c:	4938      	ldr	r1, [pc, #224]	; (8002a00 <RCCEx_PLLSAI2_Config+0x1b4>)
 800291e:	4313      	orrs	r3, r2
 8002920:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002922:	7bfb      	ldrb	r3, [r7, #15]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d166      	bne.n	80029f6 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002928:	4b35      	ldr	r3, [pc, #212]	; (8002a00 <RCCEx_PLLSAI2_Config+0x1b4>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a34      	ldr	r2, [pc, #208]	; (8002a00 <RCCEx_PLLSAI2_Config+0x1b4>)
 800292e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002932:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002934:	f7fe f954 	bl	8000be0 <HAL_GetTick>
 8002938:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800293a:	e009      	b.n	8002950 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800293c:	f7fe f950 	bl	8000be0 <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	2b02      	cmp	r3, #2
 8002948:	d902      	bls.n	8002950 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	73fb      	strb	r3, [r7, #15]
        break;
 800294e:	e005      	b.n	800295c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002950:	4b2b      	ldr	r3, [pc, #172]	; (8002a00 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002958:	2b00      	cmp	r3, #0
 800295a:	d1ef      	bne.n	800293c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800295c:	7bfb      	ldrb	r3, [r7, #15]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d149      	bne.n	80029f6 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d110      	bne.n	800298a <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002968:	4b25      	ldr	r3, [pc, #148]	; (8002a00 <RCCEx_PLLSAI2_Config+0x1b4>)
 800296a:	695b      	ldr	r3, [r3, #20]
 800296c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002970:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002974:	687a      	ldr	r2, [r7, #4]
 8002976:	6892      	ldr	r2, [r2, #8]
 8002978:	0211      	lsls	r1, r2, #8
 800297a:	687a      	ldr	r2, [r7, #4]
 800297c:	68d2      	ldr	r2, [r2, #12]
 800297e:	06d2      	lsls	r2, r2, #27
 8002980:	430a      	orrs	r2, r1
 8002982:	491f      	ldr	r1, [pc, #124]	; (8002a00 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002984:	4313      	orrs	r3, r2
 8002986:	614b      	str	r3, [r1, #20]
 8002988:	e011      	b.n	80029ae <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800298a:	4b1d      	ldr	r3, [pc, #116]	; (8002a00 <RCCEx_PLLSAI2_Config+0x1b4>)
 800298c:	695b      	ldr	r3, [r3, #20]
 800298e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002992:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	6892      	ldr	r2, [r2, #8]
 800299a:	0211      	lsls	r1, r2, #8
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	6912      	ldr	r2, [r2, #16]
 80029a0:	0852      	lsrs	r2, r2, #1
 80029a2:	3a01      	subs	r2, #1
 80029a4:	0652      	lsls	r2, r2, #25
 80029a6:	430a      	orrs	r2, r1
 80029a8:	4915      	ldr	r1, [pc, #84]	; (8002a00 <RCCEx_PLLSAI2_Config+0x1b4>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80029ae:	4b14      	ldr	r3, [pc, #80]	; (8002a00 <RCCEx_PLLSAI2_Config+0x1b4>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a13      	ldr	r2, [pc, #76]	; (8002a00 <RCCEx_PLLSAI2_Config+0x1b4>)
 80029b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029b8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029ba:	f7fe f911 	bl	8000be0 <HAL_GetTick>
 80029be:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80029c0:	e009      	b.n	80029d6 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80029c2:	f7fe f90d 	bl	8000be0 <HAL_GetTick>
 80029c6:	4602      	mov	r2, r0
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	d902      	bls.n	80029d6 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 80029d0:	2303      	movs	r3, #3
 80029d2:	73fb      	strb	r3, [r7, #15]
          break;
 80029d4:	e005      	b.n	80029e2 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80029d6:	4b0a      	ldr	r3, [pc, #40]	; (8002a00 <RCCEx_PLLSAI2_Config+0x1b4>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d0ef      	beq.n	80029c2 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 80029e2:	7bfb      	ldrb	r3, [r7, #15]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d106      	bne.n	80029f6 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80029e8:	4b05      	ldr	r3, [pc, #20]	; (8002a00 <RCCEx_PLLSAI2_Config+0x1b4>)
 80029ea:	695a      	ldr	r2, [r3, #20]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	695b      	ldr	r3, [r3, #20]
 80029f0:	4903      	ldr	r1, [pc, #12]	; (8002a00 <RCCEx_PLLSAI2_Config+0x1b4>)
 80029f2:	4313      	orrs	r3, r2
 80029f4:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80029f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3710      	adds	r7, #16
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	40021000 	.word	0x40021000

08002a04 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8002a0c:	4b0f      	ldr	r3, [pc, #60]	; (8002a4c <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 8002a0e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002a12:	615a      	str	r2, [r3, #20]
  {
    /* Immediately clear flags */
    hrtc->Instance->SCR = RTC_SCR_CWUTF;
#else
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	68db      	ldr	r3, [r3, #12]
 8002a1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d00b      	beq.n	8002a3a <HAL_RTCEx_WakeUpTimerIRQHandler+0x36>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	b2da      	uxtb	r2, r3
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002a32:	60da      	str	r2, [r3, #12]
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f000 f80b 	bl	8002a50 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8002a42:	bf00      	nop
 8002a44:	3708      	adds	r7, #8
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	40010400 	.word	0x40010400

08002a50 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8002a58:	bf00      	nop
 8002a5a:	370c      	adds	r7, #12
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr

08002a64 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b082      	sub	sp, #8
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d101      	bne.n	8002a76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e040      	b.n	8002af8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d106      	bne.n	8002a8c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f7fd fecc 	bl	8000824 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2224      	movs	r2, #36	; 0x24
 8002a90:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f022 0201 	bic.w	r2, r2, #1
 8002aa0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f000 f8c0 	bl	8002c28 <UART_SetConfig>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d101      	bne.n	8002ab2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e022      	b.n	8002af8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d002      	beq.n	8002ac0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f000 fb6c 	bl	8003198 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	685a      	ldr	r2, [r3, #4]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ace:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	689a      	ldr	r2, [r3, #8]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ade:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f042 0201 	orr.w	r2, r2, #1
 8002aee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	f000 fbf3 	bl	80032dc <UART_CheckIdleState>
 8002af6:	4603      	mov	r3, r0
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	3708      	adds	r7, #8
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}

08002b00 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b08a      	sub	sp, #40	; 0x28
 8002b04:	af02      	add	r7, sp, #8
 8002b06:	60f8      	str	r0, [r7, #12]
 8002b08:	60b9      	str	r1, [r7, #8]
 8002b0a:	603b      	str	r3, [r7, #0]
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b14:	2b20      	cmp	r3, #32
 8002b16:	f040 8082 	bne.w	8002c1e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d002      	beq.n	8002b26 <HAL_UART_Transmit+0x26>
 8002b20:	88fb      	ldrh	r3, [r7, #6]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d101      	bne.n	8002b2a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e07a      	b.n	8002c20 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d101      	bne.n	8002b38 <HAL_UART_Transmit+0x38>
 8002b34:	2302      	movs	r3, #2
 8002b36:	e073      	b.n	8002c20 <HAL_UART_Transmit+0x120>
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2200      	movs	r2, #0
 8002b44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2221      	movs	r2, #33	; 0x21
 8002b4c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b4e:	f7fe f847 	bl	8000be0 <HAL_GetTick>
 8002b52:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	88fa      	ldrh	r2, [r7, #6]
 8002b58:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	88fa      	ldrh	r2, [r7, #6]
 8002b60:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b6c:	d108      	bne.n	8002b80 <HAL_UART_Transmit+0x80>
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	691b      	ldr	r3, [r3, #16]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d104      	bne.n	8002b80 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002b76:	2300      	movs	r3, #0
 8002b78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	61bb      	str	r3, [r7, #24]
 8002b7e:	e003      	b.n	8002b88 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b84:	2300      	movs	r3, #0
 8002b86:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002b90:	e02d      	b.n	8002bee <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	9300      	str	r3, [sp, #0]
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	2180      	movs	r1, #128	; 0x80
 8002b9c:	68f8      	ldr	r0, [r7, #12]
 8002b9e:	f000 fbe6 	bl	800336e <UART_WaitOnFlagUntilTimeout>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d001      	beq.n	8002bac <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002ba8:	2303      	movs	r3, #3
 8002baa:	e039      	b.n	8002c20 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d10b      	bne.n	8002bca <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002bb2:	69bb      	ldr	r3, [r7, #24]
 8002bb4:	881a      	ldrh	r2, [r3, #0]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002bbe:	b292      	uxth	r2, r2
 8002bc0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002bc2:	69bb      	ldr	r3, [r7, #24]
 8002bc4:	3302      	adds	r3, #2
 8002bc6:	61bb      	str	r3, [r7, #24]
 8002bc8:	e008      	b.n	8002bdc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	781a      	ldrb	r2, [r3, #0]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	b292      	uxth	r2, r2
 8002bd4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	3301      	adds	r3, #1
 8002bda:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002be2:	b29b      	uxth	r3, r3
 8002be4:	3b01      	subs	r3, #1
 8002be6:	b29a      	uxth	r2, r3
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d1cb      	bne.n	8002b92 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	9300      	str	r3, [sp, #0]
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	2200      	movs	r2, #0
 8002c02:	2140      	movs	r1, #64	; 0x40
 8002c04:	68f8      	ldr	r0, [r7, #12]
 8002c06:	f000 fbb2 	bl	800336e <UART_WaitOnFlagUntilTimeout>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d001      	beq.n	8002c14 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002c10:	2303      	movs	r3, #3
 8002c12:	e005      	b.n	8002c20 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2220      	movs	r2, #32
 8002c18:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	e000      	b.n	8002c20 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002c1e:	2302      	movs	r3, #2
  }
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3720      	adds	r7, #32
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c2c:	b08a      	sub	sp, #40	; 0x28
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c32:	2300      	movs	r3, #0
 8002c34:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	689a      	ldr	r2, [r3, #8]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	691b      	ldr	r3, [r3, #16]
 8002c40:	431a      	orrs	r2, r3
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	695b      	ldr	r3, [r3, #20]
 8002c46:	431a      	orrs	r2, r3
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	69db      	ldr	r3, [r3, #28]
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	4ba4      	ldr	r3, [pc, #656]	; (8002ee8 <UART_SetConfig+0x2c0>)
 8002c58:	4013      	ands	r3, r2
 8002c5a:	68fa      	ldr	r2, [r7, #12]
 8002c5c:	6812      	ldr	r2, [r2, #0]
 8002c5e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c60:	430b      	orrs	r3, r1
 8002c62:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	68da      	ldr	r2, [r3, #12]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	430a      	orrs	r2, r1
 8002c78:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	699b      	ldr	r3, [r3, #24]
 8002c7e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a99      	ldr	r2, [pc, #612]	; (8002eec <UART_SetConfig+0x2c4>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d004      	beq.n	8002c94 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	6a1b      	ldr	r3, [r3, #32]
 8002c8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c90:	4313      	orrs	r3, r2
 8002c92:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ca4:	430a      	orrs	r2, r1
 8002ca6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a90      	ldr	r2, [pc, #576]	; (8002ef0 <UART_SetConfig+0x2c8>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d126      	bne.n	8002d00 <UART_SetConfig+0xd8>
 8002cb2:	4b90      	ldr	r3, [pc, #576]	; (8002ef4 <UART_SetConfig+0x2cc>)
 8002cb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cb8:	f003 0303 	and.w	r3, r3, #3
 8002cbc:	2b03      	cmp	r3, #3
 8002cbe:	d81b      	bhi.n	8002cf8 <UART_SetConfig+0xd0>
 8002cc0:	a201      	add	r2, pc, #4	; (adr r2, 8002cc8 <UART_SetConfig+0xa0>)
 8002cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cc6:	bf00      	nop
 8002cc8:	08002cd9 	.word	0x08002cd9
 8002ccc:	08002ce9 	.word	0x08002ce9
 8002cd0:	08002ce1 	.word	0x08002ce1
 8002cd4:	08002cf1 	.word	0x08002cf1
 8002cd8:	2301      	movs	r3, #1
 8002cda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002cde:	e116      	b.n	8002f0e <UART_SetConfig+0x2e6>
 8002ce0:	2302      	movs	r3, #2
 8002ce2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ce6:	e112      	b.n	8002f0e <UART_SetConfig+0x2e6>
 8002ce8:	2304      	movs	r3, #4
 8002cea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002cee:	e10e      	b.n	8002f0e <UART_SetConfig+0x2e6>
 8002cf0:	2308      	movs	r3, #8
 8002cf2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002cf6:	e10a      	b.n	8002f0e <UART_SetConfig+0x2e6>
 8002cf8:	2310      	movs	r3, #16
 8002cfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002cfe:	e106      	b.n	8002f0e <UART_SetConfig+0x2e6>
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a7c      	ldr	r2, [pc, #496]	; (8002ef8 <UART_SetConfig+0x2d0>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d138      	bne.n	8002d7c <UART_SetConfig+0x154>
 8002d0a:	4b7a      	ldr	r3, [pc, #488]	; (8002ef4 <UART_SetConfig+0x2cc>)
 8002d0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d10:	f003 030c 	and.w	r3, r3, #12
 8002d14:	2b0c      	cmp	r3, #12
 8002d16:	d82d      	bhi.n	8002d74 <UART_SetConfig+0x14c>
 8002d18:	a201      	add	r2, pc, #4	; (adr r2, 8002d20 <UART_SetConfig+0xf8>)
 8002d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d1e:	bf00      	nop
 8002d20:	08002d55 	.word	0x08002d55
 8002d24:	08002d75 	.word	0x08002d75
 8002d28:	08002d75 	.word	0x08002d75
 8002d2c:	08002d75 	.word	0x08002d75
 8002d30:	08002d65 	.word	0x08002d65
 8002d34:	08002d75 	.word	0x08002d75
 8002d38:	08002d75 	.word	0x08002d75
 8002d3c:	08002d75 	.word	0x08002d75
 8002d40:	08002d5d 	.word	0x08002d5d
 8002d44:	08002d75 	.word	0x08002d75
 8002d48:	08002d75 	.word	0x08002d75
 8002d4c:	08002d75 	.word	0x08002d75
 8002d50:	08002d6d 	.word	0x08002d6d
 8002d54:	2300      	movs	r3, #0
 8002d56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d5a:	e0d8      	b.n	8002f0e <UART_SetConfig+0x2e6>
 8002d5c:	2302      	movs	r3, #2
 8002d5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d62:	e0d4      	b.n	8002f0e <UART_SetConfig+0x2e6>
 8002d64:	2304      	movs	r3, #4
 8002d66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d6a:	e0d0      	b.n	8002f0e <UART_SetConfig+0x2e6>
 8002d6c:	2308      	movs	r3, #8
 8002d6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d72:	e0cc      	b.n	8002f0e <UART_SetConfig+0x2e6>
 8002d74:	2310      	movs	r3, #16
 8002d76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d7a:	e0c8      	b.n	8002f0e <UART_SetConfig+0x2e6>
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a5e      	ldr	r2, [pc, #376]	; (8002efc <UART_SetConfig+0x2d4>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d125      	bne.n	8002dd2 <UART_SetConfig+0x1aa>
 8002d86:	4b5b      	ldr	r3, [pc, #364]	; (8002ef4 <UART_SetConfig+0x2cc>)
 8002d88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d8c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002d90:	2b30      	cmp	r3, #48	; 0x30
 8002d92:	d016      	beq.n	8002dc2 <UART_SetConfig+0x19a>
 8002d94:	2b30      	cmp	r3, #48	; 0x30
 8002d96:	d818      	bhi.n	8002dca <UART_SetConfig+0x1a2>
 8002d98:	2b20      	cmp	r3, #32
 8002d9a:	d00a      	beq.n	8002db2 <UART_SetConfig+0x18a>
 8002d9c:	2b20      	cmp	r3, #32
 8002d9e:	d814      	bhi.n	8002dca <UART_SetConfig+0x1a2>
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d002      	beq.n	8002daa <UART_SetConfig+0x182>
 8002da4:	2b10      	cmp	r3, #16
 8002da6:	d008      	beq.n	8002dba <UART_SetConfig+0x192>
 8002da8:	e00f      	b.n	8002dca <UART_SetConfig+0x1a2>
 8002daa:	2300      	movs	r3, #0
 8002dac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002db0:	e0ad      	b.n	8002f0e <UART_SetConfig+0x2e6>
 8002db2:	2302      	movs	r3, #2
 8002db4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002db8:	e0a9      	b.n	8002f0e <UART_SetConfig+0x2e6>
 8002dba:	2304      	movs	r3, #4
 8002dbc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002dc0:	e0a5      	b.n	8002f0e <UART_SetConfig+0x2e6>
 8002dc2:	2308      	movs	r3, #8
 8002dc4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002dc8:	e0a1      	b.n	8002f0e <UART_SetConfig+0x2e6>
 8002dca:	2310      	movs	r3, #16
 8002dcc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002dd0:	e09d      	b.n	8002f0e <UART_SetConfig+0x2e6>
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a4a      	ldr	r2, [pc, #296]	; (8002f00 <UART_SetConfig+0x2d8>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d125      	bne.n	8002e28 <UART_SetConfig+0x200>
 8002ddc:	4b45      	ldr	r3, [pc, #276]	; (8002ef4 <UART_SetConfig+0x2cc>)
 8002dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002de2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002de6:	2bc0      	cmp	r3, #192	; 0xc0
 8002de8:	d016      	beq.n	8002e18 <UART_SetConfig+0x1f0>
 8002dea:	2bc0      	cmp	r3, #192	; 0xc0
 8002dec:	d818      	bhi.n	8002e20 <UART_SetConfig+0x1f8>
 8002dee:	2b80      	cmp	r3, #128	; 0x80
 8002df0:	d00a      	beq.n	8002e08 <UART_SetConfig+0x1e0>
 8002df2:	2b80      	cmp	r3, #128	; 0x80
 8002df4:	d814      	bhi.n	8002e20 <UART_SetConfig+0x1f8>
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d002      	beq.n	8002e00 <UART_SetConfig+0x1d8>
 8002dfa:	2b40      	cmp	r3, #64	; 0x40
 8002dfc:	d008      	beq.n	8002e10 <UART_SetConfig+0x1e8>
 8002dfe:	e00f      	b.n	8002e20 <UART_SetConfig+0x1f8>
 8002e00:	2300      	movs	r3, #0
 8002e02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e06:	e082      	b.n	8002f0e <UART_SetConfig+0x2e6>
 8002e08:	2302      	movs	r3, #2
 8002e0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e0e:	e07e      	b.n	8002f0e <UART_SetConfig+0x2e6>
 8002e10:	2304      	movs	r3, #4
 8002e12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e16:	e07a      	b.n	8002f0e <UART_SetConfig+0x2e6>
 8002e18:	2308      	movs	r3, #8
 8002e1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e1e:	e076      	b.n	8002f0e <UART_SetConfig+0x2e6>
 8002e20:	2310      	movs	r3, #16
 8002e22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e26:	e072      	b.n	8002f0e <UART_SetConfig+0x2e6>
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a35      	ldr	r2, [pc, #212]	; (8002f04 <UART_SetConfig+0x2dc>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d12a      	bne.n	8002e88 <UART_SetConfig+0x260>
 8002e32:	4b30      	ldr	r3, [pc, #192]	; (8002ef4 <UART_SetConfig+0x2cc>)
 8002e34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e3c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e40:	d01a      	beq.n	8002e78 <UART_SetConfig+0x250>
 8002e42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e46:	d81b      	bhi.n	8002e80 <UART_SetConfig+0x258>
 8002e48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e4c:	d00c      	beq.n	8002e68 <UART_SetConfig+0x240>
 8002e4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e52:	d815      	bhi.n	8002e80 <UART_SetConfig+0x258>
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d003      	beq.n	8002e60 <UART_SetConfig+0x238>
 8002e58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e5c:	d008      	beq.n	8002e70 <UART_SetConfig+0x248>
 8002e5e:	e00f      	b.n	8002e80 <UART_SetConfig+0x258>
 8002e60:	2300      	movs	r3, #0
 8002e62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e66:	e052      	b.n	8002f0e <UART_SetConfig+0x2e6>
 8002e68:	2302      	movs	r3, #2
 8002e6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e6e:	e04e      	b.n	8002f0e <UART_SetConfig+0x2e6>
 8002e70:	2304      	movs	r3, #4
 8002e72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e76:	e04a      	b.n	8002f0e <UART_SetConfig+0x2e6>
 8002e78:	2308      	movs	r3, #8
 8002e7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e7e:	e046      	b.n	8002f0e <UART_SetConfig+0x2e6>
 8002e80:	2310      	movs	r3, #16
 8002e82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e86:	e042      	b.n	8002f0e <UART_SetConfig+0x2e6>
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a17      	ldr	r2, [pc, #92]	; (8002eec <UART_SetConfig+0x2c4>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d13a      	bne.n	8002f08 <UART_SetConfig+0x2e0>
 8002e92:	4b18      	ldr	r3, [pc, #96]	; (8002ef4 <UART_SetConfig+0x2cc>)
 8002e94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e98:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002e9c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002ea0:	d01a      	beq.n	8002ed8 <UART_SetConfig+0x2b0>
 8002ea2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002ea6:	d81b      	bhi.n	8002ee0 <UART_SetConfig+0x2b8>
 8002ea8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002eac:	d00c      	beq.n	8002ec8 <UART_SetConfig+0x2a0>
 8002eae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002eb2:	d815      	bhi.n	8002ee0 <UART_SetConfig+0x2b8>
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d003      	beq.n	8002ec0 <UART_SetConfig+0x298>
 8002eb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ebc:	d008      	beq.n	8002ed0 <UART_SetConfig+0x2a8>
 8002ebe:	e00f      	b.n	8002ee0 <UART_SetConfig+0x2b8>
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ec6:	e022      	b.n	8002f0e <UART_SetConfig+0x2e6>
 8002ec8:	2302      	movs	r3, #2
 8002eca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ece:	e01e      	b.n	8002f0e <UART_SetConfig+0x2e6>
 8002ed0:	2304      	movs	r3, #4
 8002ed2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ed6:	e01a      	b.n	8002f0e <UART_SetConfig+0x2e6>
 8002ed8:	2308      	movs	r3, #8
 8002eda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ede:	e016      	b.n	8002f0e <UART_SetConfig+0x2e6>
 8002ee0:	2310      	movs	r3, #16
 8002ee2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ee6:	e012      	b.n	8002f0e <UART_SetConfig+0x2e6>
 8002ee8:	efff69f3 	.word	0xefff69f3
 8002eec:	40008000 	.word	0x40008000
 8002ef0:	40013800 	.word	0x40013800
 8002ef4:	40021000 	.word	0x40021000
 8002ef8:	40004400 	.word	0x40004400
 8002efc:	40004800 	.word	0x40004800
 8002f00:	40004c00 	.word	0x40004c00
 8002f04:	40005000 	.word	0x40005000
 8002f08:	2310      	movs	r3, #16
 8002f0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a9f      	ldr	r2, [pc, #636]	; (8003190 <UART_SetConfig+0x568>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d17a      	bne.n	800300e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002f18:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002f1c:	2b08      	cmp	r3, #8
 8002f1e:	d824      	bhi.n	8002f6a <UART_SetConfig+0x342>
 8002f20:	a201      	add	r2, pc, #4	; (adr r2, 8002f28 <UART_SetConfig+0x300>)
 8002f22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f26:	bf00      	nop
 8002f28:	08002f4d 	.word	0x08002f4d
 8002f2c:	08002f6b 	.word	0x08002f6b
 8002f30:	08002f55 	.word	0x08002f55
 8002f34:	08002f6b 	.word	0x08002f6b
 8002f38:	08002f5b 	.word	0x08002f5b
 8002f3c:	08002f6b 	.word	0x08002f6b
 8002f40:	08002f6b 	.word	0x08002f6b
 8002f44:	08002f6b 	.word	0x08002f6b
 8002f48:	08002f63 	.word	0x08002f63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f4c:	f7ff f804 	bl	8001f58 <HAL_RCC_GetPCLK1Freq>
 8002f50:	61f8      	str	r0, [r7, #28]
        break;
 8002f52:	e010      	b.n	8002f76 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f54:	4b8f      	ldr	r3, [pc, #572]	; (8003194 <UART_SetConfig+0x56c>)
 8002f56:	61fb      	str	r3, [r7, #28]
        break;
 8002f58:	e00d      	b.n	8002f76 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f5a:	f7fe ff65 	bl	8001e28 <HAL_RCC_GetSysClockFreq>
 8002f5e:	61f8      	str	r0, [r7, #28]
        break;
 8002f60:	e009      	b.n	8002f76 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f66:	61fb      	str	r3, [r7, #28]
        break;
 8002f68:	e005      	b.n	8002f76 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002f74:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	f000 80fb 	beq.w	8003174 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	685a      	ldr	r2, [r3, #4]
 8002f82:	4613      	mov	r3, r2
 8002f84:	005b      	lsls	r3, r3, #1
 8002f86:	4413      	add	r3, r2
 8002f88:	69fa      	ldr	r2, [r7, #28]
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d305      	bcc.n	8002f9a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002f94:	69fa      	ldr	r2, [r7, #28]
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d903      	bls.n	8002fa2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002fa0:	e0e8      	b.n	8003174 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002fa2:	69fb      	ldr	r3, [r7, #28]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	461c      	mov	r4, r3
 8002fa8:	4615      	mov	r5, r2
 8002faa:	f04f 0200 	mov.w	r2, #0
 8002fae:	f04f 0300 	mov.w	r3, #0
 8002fb2:	022b      	lsls	r3, r5, #8
 8002fb4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002fb8:	0222      	lsls	r2, r4, #8
 8002fba:	68f9      	ldr	r1, [r7, #12]
 8002fbc:	6849      	ldr	r1, [r1, #4]
 8002fbe:	0849      	lsrs	r1, r1, #1
 8002fc0:	2000      	movs	r0, #0
 8002fc2:	4688      	mov	r8, r1
 8002fc4:	4681      	mov	r9, r0
 8002fc6:	eb12 0a08 	adds.w	sl, r2, r8
 8002fca:	eb43 0b09 	adc.w	fp, r3, r9
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	603b      	str	r3, [r7, #0]
 8002fd6:	607a      	str	r2, [r7, #4]
 8002fd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002fdc:	4650      	mov	r0, sl
 8002fde:	4659      	mov	r1, fp
 8002fe0:	f7fd f90c 	bl	80001fc <__aeabi_uldivmod>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	460b      	mov	r3, r1
 8002fe8:	4613      	mov	r3, r2
 8002fea:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002fec:	69bb      	ldr	r3, [r7, #24]
 8002fee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ff2:	d308      	bcc.n	8003006 <UART_SetConfig+0x3de>
 8002ff4:	69bb      	ldr	r3, [r7, #24]
 8002ff6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ffa:	d204      	bcs.n	8003006 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	69ba      	ldr	r2, [r7, #24]
 8003002:	60da      	str	r2, [r3, #12]
 8003004:	e0b6      	b.n	8003174 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800300c:	e0b2      	b.n	8003174 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	69db      	ldr	r3, [r3, #28]
 8003012:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003016:	d15e      	bne.n	80030d6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003018:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800301c:	2b08      	cmp	r3, #8
 800301e:	d828      	bhi.n	8003072 <UART_SetConfig+0x44a>
 8003020:	a201      	add	r2, pc, #4	; (adr r2, 8003028 <UART_SetConfig+0x400>)
 8003022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003026:	bf00      	nop
 8003028:	0800304d 	.word	0x0800304d
 800302c:	08003055 	.word	0x08003055
 8003030:	0800305d 	.word	0x0800305d
 8003034:	08003073 	.word	0x08003073
 8003038:	08003063 	.word	0x08003063
 800303c:	08003073 	.word	0x08003073
 8003040:	08003073 	.word	0x08003073
 8003044:	08003073 	.word	0x08003073
 8003048:	0800306b 	.word	0x0800306b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800304c:	f7fe ff84 	bl	8001f58 <HAL_RCC_GetPCLK1Freq>
 8003050:	61f8      	str	r0, [r7, #28]
        break;
 8003052:	e014      	b.n	800307e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003054:	f7fe ff96 	bl	8001f84 <HAL_RCC_GetPCLK2Freq>
 8003058:	61f8      	str	r0, [r7, #28]
        break;
 800305a:	e010      	b.n	800307e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800305c:	4b4d      	ldr	r3, [pc, #308]	; (8003194 <UART_SetConfig+0x56c>)
 800305e:	61fb      	str	r3, [r7, #28]
        break;
 8003060:	e00d      	b.n	800307e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003062:	f7fe fee1 	bl	8001e28 <HAL_RCC_GetSysClockFreq>
 8003066:	61f8      	str	r0, [r7, #28]
        break;
 8003068:	e009      	b.n	800307e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800306a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800306e:	61fb      	str	r3, [r7, #28]
        break;
 8003070:	e005      	b.n	800307e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003072:	2300      	movs	r3, #0
 8003074:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800307c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d077      	beq.n	8003174 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	005a      	lsls	r2, r3, #1
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	085b      	lsrs	r3, r3, #1
 800308e:	441a      	add	r2, r3
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	fbb2 f3f3 	udiv	r3, r2, r3
 8003098:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800309a:	69bb      	ldr	r3, [r7, #24]
 800309c:	2b0f      	cmp	r3, #15
 800309e:	d916      	bls.n	80030ce <UART_SetConfig+0x4a6>
 80030a0:	69bb      	ldr	r3, [r7, #24]
 80030a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030a6:	d212      	bcs.n	80030ce <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80030a8:	69bb      	ldr	r3, [r7, #24]
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	f023 030f 	bic.w	r3, r3, #15
 80030b0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80030b2:	69bb      	ldr	r3, [r7, #24]
 80030b4:	085b      	lsrs	r3, r3, #1
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	f003 0307 	and.w	r3, r3, #7
 80030bc:	b29a      	uxth	r2, r3
 80030be:	8afb      	ldrh	r3, [r7, #22]
 80030c0:	4313      	orrs	r3, r2
 80030c2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	8afa      	ldrh	r2, [r7, #22]
 80030ca:	60da      	str	r2, [r3, #12]
 80030cc:	e052      	b.n	8003174 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80030d4:	e04e      	b.n	8003174 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80030d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80030da:	2b08      	cmp	r3, #8
 80030dc:	d827      	bhi.n	800312e <UART_SetConfig+0x506>
 80030de:	a201      	add	r2, pc, #4	; (adr r2, 80030e4 <UART_SetConfig+0x4bc>)
 80030e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030e4:	08003109 	.word	0x08003109
 80030e8:	08003111 	.word	0x08003111
 80030ec:	08003119 	.word	0x08003119
 80030f0:	0800312f 	.word	0x0800312f
 80030f4:	0800311f 	.word	0x0800311f
 80030f8:	0800312f 	.word	0x0800312f
 80030fc:	0800312f 	.word	0x0800312f
 8003100:	0800312f 	.word	0x0800312f
 8003104:	08003127 	.word	0x08003127
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003108:	f7fe ff26 	bl	8001f58 <HAL_RCC_GetPCLK1Freq>
 800310c:	61f8      	str	r0, [r7, #28]
        break;
 800310e:	e014      	b.n	800313a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003110:	f7fe ff38 	bl	8001f84 <HAL_RCC_GetPCLK2Freq>
 8003114:	61f8      	str	r0, [r7, #28]
        break;
 8003116:	e010      	b.n	800313a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003118:	4b1e      	ldr	r3, [pc, #120]	; (8003194 <UART_SetConfig+0x56c>)
 800311a:	61fb      	str	r3, [r7, #28]
        break;
 800311c:	e00d      	b.n	800313a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800311e:	f7fe fe83 	bl	8001e28 <HAL_RCC_GetSysClockFreq>
 8003122:	61f8      	str	r0, [r7, #28]
        break;
 8003124:	e009      	b.n	800313a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003126:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800312a:	61fb      	str	r3, [r7, #28]
        break;
 800312c:	e005      	b.n	800313a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800312e:	2300      	movs	r3, #0
 8003130:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003138:	bf00      	nop
    }

    if (pclk != 0U)
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d019      	beq.n	8003174 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	085a      	lsrs	r2, r3, #1
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	441a      	add	r2, r3
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003152:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003154:	69bb      	ldr	r3, [r7, #24]
 8003156:	2b0f      	cmp	r3, #15
 8003158:	d909      	bls.n	800316e <UART_SetConfig+0x546>
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003160:	d205      	bcs.n	800316e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003162:	69bb      	ldr	r3, [r7, #24]
 8003164:	b29a      	uxth	r2, r3
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	60da      	str	r2, [r3, #12]
 800316c:	e002      	b.n	8003174 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2200      	movs	r2, #0
 8003178:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2200      	movs	r2, #0
 800317e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003180:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003184:	4618      	mov	r0, r3
 8003186:	3728      	adds	r7, #40	; 0x28
 8003188:	46bd      	mov	sp, r7
 800318a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800318e:	bf00      	nop
 8003190:	40008000 	.word	0x40008000
 8003194:	00f42400 	.word	0x00f42400

08003198 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a4:	f003 0301 	and.w	r3, r3, #1
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d00a      	beq.n	80031c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	430a      	orrs	r2, r1
 80031c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c6:	f003 0302 	and.w	r3, r3, #2
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d00a      	beq.n	80031e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	430a      	orrs	r2, r1
 80031e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e8:	f003 0304 	and.w	r3, r3, #4
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d00a      	beq.n	8003206 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	430a      	orrs	r2, r1
 8003204:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320a:	f003 0308 	and.w	r3, r3, #8
 800320e:	2b00      	cmp	r3, #0
 8003210:	d00a      	beq.n	8003228 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	430a      	orrs	r2, r1
 8003226:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322c:	f003 0310 	and.w	r3, r3, #16
 8003230:	2b00      	cmp	r3, #0
 8003232:	d00a      	beq.n	800324a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	430a      	orrs	r2, r1
 8003248:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324e:	f003 0320 	and.w	r3, r3, #32
 8003252:	2b00      	cmp	r3, #0
 8003254:	d00a      	beq.n	800326c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	430a      	orrs	r2, r1
 800326a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003274:	2b00      	cmp	r3, #0
 8003276:	d01a      	beq.n	80032ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	430a      	orrs	r2, r1
 800328c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003292:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003296:	d10a      	bne.n	80032ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	430a      	orrs	r2, r1
 80032ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d00a      	beq.n	80032d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	430a      	orrs	r2, r1
 80032ce:	605a      	str	r2, [r3, #4]
  }
}
 80032d0:	bf00      	nop
 80032d2:	370c      	adds	r7, #12
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr

080032dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b086      	sub	sp, #24
 80032e0:	af02      	add	r7, sp, #8
 80032e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2200      	movs	r2, #0
 80032e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80032ec:	f7fd fc78 	bl	8000be0 <HAL_GetTick>
 80032f0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0308 	and.w	r3, r3, #8
 80032fc:	2b08      	cmp	r3, #8
 80032fe:	d10e      	bne.n	800331e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003300:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003304:	9300      	str	r3, [sp, #0]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2200      	movs	r2, #0
 800330a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f000 f82d 	bl	800336e <UART_WaitOnFlagUntilTimeout>
 8003314:	4603      	mov	r3, r0
 8003316:	2b00      	cmp	r3, #0
 8003318:	d001      	beq.n	800331e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	e023      	b.n	8003366 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 0304 	and.w	r3, r3, #4
 8003328:	2b04      	cmp	r3, #4
 800332a:	d10e      	bne.n	800334a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800332c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003330:	9300      	str	r3, [sp, #0]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2200      	movs	r2, #0
 8003336:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f000 f817 	bl	800336e <UART_WaitOnFlagUntilTimeout>
 8003340:	4603      	mov	r3, r0
 8003342:	2b00      	cmp	r3, #0
 8003344:	d001      	beq.n	800334a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003346:	2303      	movs	r3, #3
 8003348:	e00d      	b.n	8003366 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2220      	movs	r2, #32
 800334e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2220      	movs	r2, #32
 8003354:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2200      	movs	r2, #0
 800335a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2200      	movs	r2, #0
 8003360:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003364:	2300      	movs	r3, #0
}
 8003366:	4618      	mov	r0, r3
 8003368:	3710      	adds	r7, #16
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}

0800336e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800336e:	b580      	push	{r7, lr}
 8003370:	b09c      	sub	sp, #112	; 0x70
 8003372:	af00      	add	r7, sp, #0
 8003374:	60f8      	str	r0, [r7, #12]
 8003376:	60b9      	str	r1, [r7, #8]
 8003378:	603b      	str	r3, [r7, #0]
 800337a:	4613      	mov	r3, r2
 800337c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800337e:	e0a5      	b.n	80034cc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003380:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003382:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003386:	f000 80a1 	beq.w	80034cc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800338a:	f7fd fc29 	bl	8000be0 <HAL_GetTick>
 800338e:	4602      	mov	r2, r0
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003396:	429a      	cmp	r2, r3
 8003398:	d302      	bcc.n	80033a0 <UART_WaitOnFlagUntilTimeout+0x32>
 800339a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800339c:	2b00      	cmp	r3, #0
 800339e:	d13e      	bne.n	800341e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033a8:	e853 3f00 	ldrex	r3, [r3]
 80033ac:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80033ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033b0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80033b4:	667b      	str	r3, [r7, #100]	; 0x64
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	461a      	mov	r2, r3
 80033bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80033be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80033c0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033c2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80033c4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80033c6:	e841 2300 	strex	r3, r2, [r1]
 80033ca:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80033cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d1e6      	bne.n	80033a0 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	3308      	adds	r3, #8
 80033d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033dc:	e853 3f00 	ldrex	r3, [r3]
 80033e0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80033e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033e4:	f023 0301 	bic.w	r3, r3, #1
 80033e8:	663b      	str	r3, [r7, #96]	; 0x60
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	3308      	adds	r3, #8
 80033f0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80033f2:	64ba      	str	r2, [r7, #72]	; 0x48
 80033f4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033f6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80033f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80033fa:	e841 2300 	strex	r3, r2, [r1]
 80033fe:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003400:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003402:	2b00      	cmp	r3, #0
 8003404:	d1e5      	bne.n	80033d2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2220      	movs	r2, #32
 800340a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2220      	movs	r2, #32
 8003410:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2200      	movs	r2, #0
 8003416:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e067      	b.n	80034ee <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 0304 	and.w	r3, r3, #4
 8003428:	2b00      	cmp	r3, #0
 800342a:	d04f      	beq.n	80034cc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	69db      	ldr	r3, [r3, #28]
 8003432:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003436:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800343a:	d147      	bne.n	80034cc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003444:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800344c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800344e:	e853 3f00 	ldrex	r3, [r3]
 8003452:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003456:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800345a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	461a      	mov	r2, r3
 8003462:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003464:	637b      	str	r3, [r7, #52]	; 0x34
 8003466:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003468:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800346a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800346c:	e841 2300 	strex	r3, r2, [r1]
 8003470:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003474:	2b00      	cmp	r3, #0
 8003476:	d1e6      	bne.n	8003446 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	3308      	adds	r3, #8
 800347e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	e853 3f00 	ldrex	r3, [r3]
 8003486:	613b      	str	r3, [r7, #16]
   return(result);
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	f023 0301 	bic.w	r3, r3, #1
 800348e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	3308      	adds	r3, #8
 8003496:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003498:	623a      	str	r2, [r7, #32]
 800349a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800349c:	69f9      	ldr	r1, [r7, #28]
 800349e:	6a3a      	ldr	r2, [r7, #32]
 80034a0:	e841 2300 	strex	r3, r2, [r1]
 80034a4:	61bb      	str	r3, [r7, #24]
   return(result);
 80034a6:	69bb      	ldr	r3, [r7, #24]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d1e5      	bne.n	8003478 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2220      	movs	r2, #32
 80034b0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2220      	movs	r2, #32
 80034b6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2220      	movs	r2, #32
 80034bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80034c8:	2303      	movs	r3, #3
 80034ca:	e010      	b.n	80034ee <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	69da      	ldr	r2, [r3, #28]
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	4013      	ands	r3, r2
 80034d6:	68ba      	ldr	r2, [r7, #8]
 80034d8:	429a      	cmp	r2, r3
 80034da:	bf0c      	ite	eq
 80034dc:	2301      	moveq	r3, #1
 80034de:	2300      	movne	r3, #0
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	461a      	mov	r2, r3
 80034e4:	79fb      	ldrb	r3, [r7, #7]
 80034e6:	429a      	cmp	r2, r3
 80034e8:	f43f af4a 	beq.w	8003380 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80034ec:	2300      	movs	r3, #0
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3770      	adds	r7, #112	; 0x70
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
	...

080034f8 <__errno>:
 80034f8:	4b01      	ldr	r3, [pc, #4]	; (8003500 <__errno+0x8>)
 80034fa:	6818      	ldr	r0, [r3, #0]
 80034fc:	4770      	bx	lr
 80034fe:	bf00      	nop
 8003500:	20000010 	.word	0x20000010

08003504 <__libc_init_array>:
 8003504:	b570      	push	{r4, r5, r6, lr}
 8003506:	4d0d      	ldr	r5, [pc, #52]	; (800353c <__libc_init_array+0x38>)
 8003508:	4c0d      	ldr	r4, [pc, #52]	; (8003540 <__libc_init_array+0x3c>)
 800350a:	1b64      	subs	r4, r4, r5
 800350c:	10a4      	asrs	r4, r4, #2
 800350e:	2600      	movs	r6, #0
 8003510:	42a6      	cmp	r6, r4
 8003512:	d109      	bne.n	8003528 <__libc_init_array+0x24>
 8003514:	4d0b      	ldr	r5, [pc, #44]	; (8003544 <__libc_init_array+0x40>)
 8003516:	4c0c      	ldr	r4, [pc, #48]	; (8003548 <__libc_init_array+0x44>)
 8003518:	f000 fd1e 	bl	8003f58 <_init>
 800351c:	1b64      	subs	r4, r4, r5
 800351e:	10a4      	asrs	r4, r4, #2
 8003520:	2600      	movs	r6, #0
 8003522:	42a6      	cmp	r6, r4
 8003524:	d105      	bne.n	8003532 <__libc_init_array+0x2e>
 8003526:	bd70      	pop	{r4, r5, r6, pc}
 8003528:	f855 3b04 	ldr.w	r3, [r5], #4
 800352c:	4798      	blx	r3
 800352e:	3601      	adds	r6, #1
 8003530:	e7ee      	b.n	8003510 <__libc_init_array+0xc>
 8003532:	f855 3b04 	ldr.w	r3, [r5], #4
 8003536:	4798      	blx	r3
 8003538:	3601      	adds	r6, #1
 800353a:	e7f2      	b.n	8003522 <__libc_init_array+0x1e>
 800353c:	08004064 	.word	0x08004064
 8003540:	08004064 	.word	0x08004064
 8003544:	08004064 	.word	0x08004064
 8003548:	08004068 	.word	0x08004068

0800354c <memset>:
 800354c:	4402      	add	r2, r0
 800354e:	4603      	mov	r3, r0
 8003550:	4293      	cmp	r3, r2
 8003552:	d100      	bne.n	8003556 <memset+0xa>
 8003554:	4770      	bx	lr
 8003556:	f803 1b01 	strb.w	r1, [r3], #1
 800355a:	e7f9      	b.n	8003550 <memset+0x4>

0800355c <_puts_r>:
 800355c:	b570      	push	{r4, r5, r6, lr}
 800355e:	460e      	mov	r6, r1
 8003560:	4605      	mov	r5, r0
 8003562:	b118      	cbz	r0, 800356c <_puts_r+0x10>
 8003564:	6983      	ldr	r3, [r0, #24]
 8003566:	b90b      	cbnz	r3, 800356c <_puts_r+0x10>
 8003568:	f000 fa48 	bl	80039fc <__sinit>
 800356c:	69ab      	ldr	r3, [r5, #24]
 800356e:	68ac      	ldr	r4, [r5, #8]
 8003570:	b913      	cbnz	r3, 8003578 <_puts_r+0x1c>
 8003572:	4628      	mov	r0, r5
 8003574:	f000 fa42 	bl	80039fc <__sinit>
 8003578:	4b2c      	ldr	r3, [pc, #176]	; (800362c <_puts_r+0xd0>)
 800357a:	429c      	cmp	r4, r3
 800357c:	d120      	bne.n	80035c0 <_puts_r+0x64>
 800357e:	686c      	ldr	r4, [r5, #4]
 8003580:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003582:	07db      	lsls	r3, r3, #31
 8003584:	d405      	bmi.n	8003592 <_puts_r+0x36>
 8003586:	89a3      	ldrh	r3, [r4, #12]
 8003588:	0598      	lsls	r0, r3, #22
 800358a:	d402      	bmi.n	8003592 <_puts_r+0x36>
 800358c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800358e:	f000 fad3 	bl	8003b38 <__retarget_lock_acquire_recursive>
 8003592:	89a3      	ldrh	r3, [r4, #12]
 8003594:	0719      	lsls	r1, r3, #28
 8003596:	d51d      	bpl.n	80035d4 <_puts_r+0x78>
 8003598:	6923      	ldr	r3, [r4, #16]
 800359a:	b1db      	cbz	r3, 80035d4 <_puts_r+0x78>
 800359c:	3e01      	subs	r6, #1
 800359e:	68a3      	ldr	r3, [r4, #8]
 80035a0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80035a4:	3b01      	subs	r3, #1
 80035a6:	60a3      	str	r3, [r4, #8]
 80035a8:	bb39      	cbnz	r1, 80035fa <_puts_r+0x9e>
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	da38      	bge.n	8003620 <_puts_r+0xc4>
 80035ae:	4622      	mov	r2, r4
 80035b0:	210a      	movs	r1, #10
 80035b2:	4628      	mov	r0, r5
 80035b4:	f000 f848 	bl	8003648 <__swbuf_r>
 80035b8:	3001      	adds	r0, #1
 80035ba:	d011      	beq.n	80035e0 <_puts_r+0x84>
 80035bc:	250a      	movs	r5, #10
 80035be:	e011      	b.n	80035e4 <_puts_r+0x88>
 80035c0:	4b1b      	ldr	r3, [pc, #108]	; (8003630 <_puts_r+0xd4>)
 80035c2:	429c      	cmp	r4, r3
 80035c4:	d101      	bne.n	80035ca <_puts_r+0x6e>
 80035c6:	68ac      	ldr	r4, [r5, #8]
 80035c8:	e7da      	b.n	8003580 <_puts_r+0x24>
 80035ca:	4b1a      	ldr	r3, [pc, #104]	; (8003634 <_puts_r+0xd8>)
 80035cc:	429c      	cmp	r4, r3
 80035ce:	bf08      	it	eq
 80035d0:	68ec      	ldreq	r4, [r5, #12]
 80035d2:	e7d5      	b.n	8003580 <_puts_r+0x24>
 80035d4:	4621      	mov	r1, r4
 80035d6:	4628      	mov	r0, r5
 80035d8:	f000 f888 	bl	80036ec <__swsetup_r>
 80035dc:	2800      	cmp	r0, #0
 80035de:	d0dd      	beq.n	800359c <_puts_r+0x40>
 80035e0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80035e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80035e6:	07da      	lsls	r2, r3, #31
 80035e8:	d405      	bmi.n	80035f6 <_puts_r+0x9a>
 80035ea:	89a3      	ldrh	r3, [r4, #12]
 80035ec:	059b      	lsls	r3, r3, #22
 80035ee:	d402      	bmi.n	80035f6 <_puts_r+0x9a>
 80035f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80035f2:	f000 faa2 	bl	8003b3a <__retarget_lock_release_recursive>
 80035f6:	4628      	mov	r0, r5
 80035f8:	bd70      	pop	{r4, r5, r6, pc}
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	da04      	bge.n	8003608 <_puts_r+0xac>
 80035fe:	69a2      	ldr	r2, [r4, #24]
 8003600:	429a      	cmp	r2, r3
 8003602:	dc06      	bgt.n	8003612 <_puts_r+0xb6>
 8003604:	290a      	cmp	r1, #10
 8003606:	d004      	beq.n	8003612 <_puts_r+0xb6>
 8003608:	6823      	ldr	r3, [r4, #0]
 800360a:	1c5a      	adds	r2, r3, #1
 800360c:	6022      	str	r2, [r4, #0]
 800360e:	7019      	strb	r1, [r3, #0]
 8003610:	e7c5      	b.n	800359e <_puts_r+0x42>
 8003612:	4622      	mov	r2, r4
 8003614:	4628      	mov	r0, r5
 8003616:	f000 f817 	bl	8003648 <__swbuf_r>
 800361a:	3001      	adds	r0, #1
 800361c:	d1bf      	bne.n	800359e <_puts_r+0x42>
 800361e:	e7df      	b.n	80035e0 <_puts_r+0x84>
 8003620:	6823      	ldr	r3, [r4, #0]
 8003622:	250a      	movs	r5, #10
 8003624:	1c5a      	adds	r2, r3, #1
 8003626:	6022      	str	r2, [r4, #0]
 8003628:	701d      	strb	r5, [r3, #0]
 800362a:	e7db      	b.n	80035e4 <_puts_r+0x88>
 800362c:	0800401c 	.word	0x0800401c
 8003630:	0800403c 	.word	0x0800403c
 8003634:	08003ffc 	.word	0x08003ffc

08003638 <puts>:
 8003638:	4b02      	ldr	r3, [pc, #8]	; (8003644 <puts+0xc>)
 800363a:	4601      	mov	r1, r0
 800363c:	6818      	ldr	r0, [r3, #0]
 800363e:	f7ff bf8d 	b.w	800355c <_puts_r>
 8003642:	bf00      	nop
 8003644:	20000010 	.word	0x20000010

08003648 <__swbuf_r>:
 8003648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800364a:	460e      	mov	r6, r1
 800364c:	4614      	mov	r4, r2
 800364e:	4605      	mov	r5, r0
 8003650:	b118      	cbz	r0, 800365a <__swbuf_r+0x12>
 8003652:	6983      	ldr	r3, [r0, #24]
 8003654:	b90b      	cbnz	r3, 800365a <__swbuf_r+0x12>
 8003656:	f000 f9d1 	bl	80039fc <__sinit>
 800365a:	4b21      	ldr	r3, [pc, #132]	; (80036e0 <__swbuf_r+0x98>)
 800365c:	429c      	cmp	r4, r3
 800365e:	d12b      	bne.n	80036b8 <__swbuf_r+0x70>
 8003660:	686c      	ldr	r4, [r5, #4]
 8003662:	69a3      	ldr	r3, [r4, #24]
 8003664:	60a3      	str	r3, [r4, #8]
 8003666:	89a3      	ldrh	r3, [r4, #12]
 8003668:	071a      	lsls	r2, r3, #28
 800366a:	d52f      	bpl.n	80036cc <__swbuf_r+0x84>
 800366c:	6923      	ldr	r3, [r4, #16]
 800366e:	b36b      	cbz	r3, 80036cc <__swbuf_r+0x84>
 8003670:	6923      	ldr	r3, [r4, #16]
 8003672:	6820      	ldr	r0, [r4, #0]
 8003674:	1ac0      	subs	r0, r0, r3
 8003676:	6963      	ldr	r3, [r4, #20]
 8003678:	b2f6      	uxtb	r6, r6
 800367a:	4283      	cmp	r3, r0
 800367c:	4637      	mov	r7, r6
 800367e:	dc04      	bgt.n	800368a <__swbuf_r+0x42>
 8003680:	4621      	mov	r1, r4
 8003682:	4628      	mov	r0, r5
 8003684:	f000 f926 	bl	80038d4 <_fflush_r>
 8003688:	bb30      	cbnz	r0, 80036d8 <__swbuf_r+0x90>
 800368a:	68a3      	ldr	r3, [r4, #8]
 800368c:	3b01      	subs	r3, #1
 800368e:	60a3      	str	r3, [r4, #8]
 8003690:	6823      	ldr	r3, [r4, #0]
 8003692:	1c5a      	adds	r2, r3, #1
 8003694:	6022      	str	r2, [r4, #0]
 8003696:	701e      	strb	r6, [r3, #0]
 8003698:	6963      	ldr	r3, [r4, #20]
 800369a:	3001      	adds	r0, #1
 800369c:	4283      	cmp	r3, r0
 800369e:	d004      	beq.n	80036aa <__swbuf_r+0x62>
 80036a0:	89a3      	ldrh	r3, [r4, #12]
 80036a2:	07db      	lsls	r3, r3, #31
 80036a4:	d506      	bpl.n	80036b4 <__swbuf_r+0x6c>
 80036a6:	2e0a      	cmp	r6, #10
 80036a8:	d104      	bne.n	80036b4 <__swbuf_r+0x6c>
 80036aa:	4621      	mov	r1, r4
 80036ac:	4628      	mov	r0, r5
 80036ae:	f000 f911 	bl	80038d4 <_fflush_r>
 80036b2:	b988      	cbnz	r0, 80036d8 <__swbuf_r+0x90>
 80036b4:	4638      	mov	r0, r7
 80036b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80036b8:	4b0a      	ldr	r3, [pc, #40]	; (80036e4 <__swbuf_r+0x9c>)
 80036ba:	429c      	cmp	r4, r3
 80036bc:	d101      	bne.n	80036c2 <__swbuf_r+0x7a>
 80036be:	68ac      	ldr	r4, [r5, #8]
 80036c0:	e7cf      	b.n	8003662 <__swbuf_r+0x1a>
 80036c2:	4b09      	ldr	r3, [pc, #36]	; (80036e8 <__swbuf_r+0xa0>)
 80036c4:	429c      	cmp	r4, r3
 80036c6:	bf08      	it	eq
 80036c8:	68ec      	ldreq	r4, [r5, #12]
 80036ca:	e7ca      	b.n	8003662 <__swbuf_r+0x1a>
 80036cc:	4621      	mov	r1, r4
 80036ce:	4628      	mov	r0, r5
 80036d0:	f000 f80c 	bl	80036ec <__swsetup_r>
 80036d4:	2800      	cmp	r0, #0
 80036d6:	d0cb      	beq.n	8003670 <__swbuf_r+0x28>
 80036d8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80036dc:	e7ea      	b.n	80036b4 <__swbuf_r+0x6c>
 80036de:	bf00      	nop
 80036e0:	0800401c 	.word	0x0800401c
 80036e4:	0800403c 	.word	0x0800403c
 80036e8:	08003ffc 	.word	0x08003ffc

080036ec <__swsetup_r>:
 80036ec:	4b32      	ldr	r3, [pc, #200]	; (80037b8 <__swsetup_r+0xcc>)
 80036ee:	b570      	push	{r4, r5, r6, lr}
 80036f0:	681d      	ldr	r5, [r3, #0]
 80036f2:	4606      	mov	r6, r0
 80036f4:	460c      	mov	r4, r1
 80036f6:	b125      	cbz	r5, 8003702 <__swsetup_r+0x16>
 80036f8:	69ab      	ldr	r3, [r5, #24]
 80036fa:	b913      	cbnz	r3, 8003702 <__swsetup_r+0x16>
 80036fc:	4628      	mov	r0, r5
 80036fe:	f000 f97d 	bl	80039fc <__sinit>
 8003702:	4b2e      	ldr	r3, [pc, #184]	; (80037bc <__swsetup_r+0xd0>)
 8003704:	429c      	cmp	r4, r3
 8003706:	d10f      	bne.n	8003728 <__swsetup_r+0x3c>
 8003708:	686c      	ldr	r4, [r5, #4]
 800370a:	89a3      	ldrh	r3, [r4, #12]
 800370c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003710:	0719      	lsls	r1, r3, #28
 8003712:	d42c      	bmi.n	800376e <__swsetup_r+0x82>
 8003714:	06dd      	lsls	r5, r3, #27
 8003716:	d411      	bmi.n	800373c <__swsetup_r+0x50>
 8003718:	2309      	movs	r3, #9
 800371a:	6033      	str	r3, [r6, #0]
 800371c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003720:	81a3      	strh	r3, [r4, #12]
 8003722:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003726:	e03e      	b.n	80037a6 <__swsetup_r+0xba>
 8003728:	4b25      	ldr	r3, [pc, #148]	; (80037c0 <__swsetup_r+0xd4>)
 800372a:	429c      	cmp	r4, r3
 800372c:	d101      	bne.n	8003732 <__swsetup_r+0x46>
 800372e:	68ac      	ldr	r4, [r5, #8]
 8003730:	e7eb      	b.n	800370a <__swsetup_r+0x1e>
 8003732:	4b24      	ldr	r3, [pc, #144]	; (80037c4 <__swsetup_r+0xd8>)
 8003734:	429c      	cmp	r4, r3
 8003736:	bf08      	it	eq
 8003738:	68ec      	ldreq	r4, [r5, #12]
 800373a:	e7e6      	b.n	800370a <__swsetup_r+0x1e>
 800373c:	0758      	lsls	r0, r3, #29
 800373e:	d512      	bpl.n	8003766 <__swsetup_r+0x7a>
 8003740:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003742:	b141      	cbz	r1, 8003756 <__swsetup_r+0x6a>
 8003744:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003748:	4299      	cmp	r1, r3
 800374a:	d002      	beq.n	8003752 <__swsetup_r+0x66>
 800374c:	4630      	mov	r0, r6
 800374e:	f000 fa5b 	bl	8003c08 <_free_r>
 8003752:	2300      	movs	r3, #0
 8003754:	6363      	str	r3, [r4, #52]	; 0x34
 8003756:	89a3      	ldrh	r3, [r4, #12]
 8003758:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800375c:	81a3      	strh	r3, [r4, #12]
 800375e:	2300      	movs	r3, #0
 8003760:	6063      	str	r3, [r4, #4]
 8003762:	6923      	ldr	r3, [r4, #16]
 8003764:	6023      	str	r3, [r4, #0]
 8003766:	89a3      	ldrh	r3, [r4, #12]
 8003768:	f043 0308 	orr.w	r3, r3, #8
 800376c:	81a3      	strh	r3, [r4, #12]
 800376e:	6923      	ldr	r3, [r4, #16]
 8003770:	b94b      	cbnz	r3, 8003786 <__swsetup_r+0x9a>
 8003772:	89a3      	ldrh	r3, [r4, #12]
 8003774:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003778:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800377c:	d003      	beq.n	8003786 <__swsetup_r+0x9a>
 800377e:	4621      	mov	r1, r4
 8003780:	4630      	mov	r0, r6
 8003782:	f000 fa01 	bl	8003b88 <__smakebuf_r>
 8003786:	89a0      	ldrh	r0, [r4, #12]
 8003788:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800378c:	f010 0301 	ands.w	r3, r0, #1
 8003790:	d00a      	beq.n	80037a8 <__swsetup_r+0xbc>
 8003792:	2300      	movs	r3, #0
 8003794:	60a3      	str	r3, [r4, #8]
 8003796:	6963      	ldr	r3, [r4, #20]
 8003798:	425b      	negs	r3, r3
 800379a:	61a3      	str	r3, [r4, #24]
 800379c:	6923      	ldr	r3, [r4, #16]
 800379e:	b943      	cbnz	r3, 80037b2 <__swsetup_r+0xc6>
 80037a0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80037a4:	d1ba      	bne.n	800371c <__swsetup_r+0x30>
 80037a6:	bd70      	pop	{r4, r5, r6, pc}
 80037a8:	0781      	lsls	r1, r0, #30
 80037aa:	bf58      	it	pl
 80037ac:	6963      	ldrpl	r3, [r4, #20]
 80037ae:	60a3      	str	r3, [r4, #8]
 80037b0:	e7f4      	b.n	800379c <__swsetup_r+0xb0>
 80037b2:	2000      	movs	r0, #0
 80037b4:	e7f7      	b.n	80037a6 <__swsetup_r+0xba>
 80037b6:	bf00      	nop
 80037b8:	20000010 	.word	0x20000010
 80037bc:	0800401c 	.word	0x0800401c
 80037c0:	0800403c 	.word	0x0800403c
 80037c4:	08003ffc 	.word	0x08003ffc

080037c8 <__sflush_r>:
 80037c8:	898a      	ldrh	r2, [r1, #12]
 80037ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037ce:	4605      	mov	r5, r0
 80037d0:	0710      	lsls	r0, r2, #28
 80037d2:	460c      	mov	r4, r1
 80037d4:	d458      	bmi.n	8003888 <__sflush_r+0xc0>
 80037d6:	684b      	ldr	r3, [r1, #4]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	dc05      	bgt.n	80037e8 <__sflush_r+0x20>
 80037dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80037de:	2b00      	cmp	r3, #0
 80037e0:	dc02      	bgt.n	80037e8 <__sflush_r+0x20>
 80037e2:	2000      	movs	r0, #0
 80037e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80037e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80037ea:	2e00      	cmp	r6, #0
 80037ec:	d0f9      	beq.n	80037e2 <__sflush_r+0x1a>
 80037ee:	2300      	movs	r3, #0
 80037f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80037f4:	682f      	ldr	r7, [r5, #0]
 80037f6:	602b      	str	r3, [r5, #0]
 80037f8:	d032      	beq.n	8003860 <__sflush_r+0x98>
 80037fa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80037fc:	89a3      	ldrh	r3, [r4, #12]
 80037fe:	075a      	lsls	r2, r3, #29
 8003800:	d505      	bpl.n	800380e <__sflush_r+0x46>
 8003802:	6863      	ldr	r3, [r4, #4]
 8003804:	1ac0      	subs	r0, r0, r3
 8003806:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003808:	b10b      	cbz	r3, 800380e <__sflush_r+0x46>
 800380a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800380c:	1ac0      	subs	r0, r0, r3
 800380e:	2300      	movs	r3, #0
 8003810:	4602      	mov	r2, r0
 8003812:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003814:	6a21      	ldr	r1, [r4, #32]
 8003816:	4628      	mov	r0, r5
 8003818:	47b0      	blx	r6
 800381a:	1c43      	adds	r3, r0, #1
 800381c:	89a3      	ldrh	r3, [r4, #12]
 800381e:	d106      	bne.n	800382e <__sflush_r+0x66>
 8003820:	6829      	ldr	r1, [r5, #0]
 8003822:	291d      	cmp	r1, #29
 8003824:	d82c      	bhi.n	8003880 <__sflush_r+0xb8>
 8003826:	4a2a      	ldr	r2, [pc, #168]	; (80038d0 <__sflush_r+0x108>)
 8003828:	40ca      	lsrs	r2, r1
 800382a:	07d6      	lsls	r6, r2, #31
 800382c:	d528      	bpl.n	8003880 <__sflush_r+0xb8>
 800382e:	2200      	movs	r2, #0
 8003830:	6062      	str	r2, [r4, #4]
 8003832:	04d9      	lsls	r1, r3, #19
 8003834:	6922      	ldr	r2, [r4, #16]
 8003836:	6022      	str	r2, [r4, #0]
 8003838:	d504      	bpl.n	8003844 <__sflush_r+0x7c>
 800383a:	1c42      	adds	r2, r0, #1
 800383c:	d101      	bne.n	8003842 <__sflush_r+0x7a>
 800383e:	682b      	ldr	r3, [r5, #0]
 8003840:	b903      	cbnz	r3, 8003844 <__sflush_r+0x7c>
 8003842:	6560      	str	r0, [r4, #84]	; 0x54
 8003844:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003846:	602f      	str	r7, [r5, #0]
 8003848:	2900      	cmp	r1, #0
 800384a:	d0ca      	beq.n	80037e2 <__sflush_r+0x1a>
 800384c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003850:	4299      	cmp	r1, r3
 8003852:	d002      	beq.n	800385a <__sflush_r+0x92>
 8003854:	4628      	mov	r0, r5
 8003856:	f000 f9d7 	bl	8003c08 <_free_r>
 800385a:	2000      	movs	r0, #0
 800385c:	6360      	str	r0, [r4, #52]	; 0x34
 800385e:	e7c1      	b.n	80037e4 <__sflush_r+0x1c>
 8003860:	6a21      	ldr	r1, [r4, #32]
 8003862:	2301      	movs	r3, #1
 8003864:	4628      	mov	r0, r5
 8003866:	47b0      	blx	r6
 8003868:	1c41      	adds	r1, r0, #1
 800386a:	d1c7      	bne.n	80037fc <__sflush_r+0x34>
 800386c:	682b      	ldr	r3, [r5, #0]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d0c4      	beq.n	80037fc <__sflush_r+0x34>
 8003872:	2b1d      	cmp	r3, #29
 8003874:	d001      	beq.n	800387a <__sflush_r+0xb2>
 8003876:	2b16      	cmp	r3, #22
 8003878:	d101      	bne.n	800387e <__sflush_r+0xb6>
 800387a:	602f      	str	r7, [r5, #0]
 800387c:	e7b1      	b.n	80037e2 <__sflush_r+0x1a>
 800387e:	89a3      	ldrh	r3, [r4, #12]
 8003880:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003884:	81a3      	strh	r3, [r4, #12]
 8003886:	e7ad      	b.n	80037e4 <__sflush_r+0x1c>
 8003888:	690f      	ldr	r7, [r1, #16]
 800388a:	2f00      	cmp	r7, #0
 800388c:	d0a9      	beq.n	80037e2 <__sflush_r+0x1a>
 800388e:	0793      	lsls	r3, r2, #30
 8003890:	680e      	ldr	r6, [r1, #0]
 8003892:	bf08      	it	eq
 8003894:	694b      	ldreq	r3, [r1, #20]
 8003896:	600f      	str	r7, [r1, #0]
 8003898:	bf18      	it	ne
 800389a:	2300      	movne	r3, #0
 800389c:	eba6 0807 	sub.w	r8, r6, r7
 80038a0:	608b      	str	r3, [r1, #8]
 80038a2:	f1b8 0f00 	cmp.w	r8, #0
 80038a6:	dd9c      	ble.n	80037e2 <__sflush_r+0x1a>
 80038a8:	6a21      	ldr	r1, [r4, #32]
 80038aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80038ac:	4643      	mov	r3, r8
 80038ae:	463a      	mov	r2, r7
 80038b0:	4628      	mov	r0, r5
 80038b2:	47b0      	blx	r6
 80038b4:	2800      	cmp	r0, #0
 80038b6:	dc06      	bgt.n	80038c6 <__sflush_r+0xfe>
 80038b8:	89a3      	ldrh	r3, [r4, #12]
 80038ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038be:	81a3      	strh	r3, [r4, #12]
 80038c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80038c4:	e78e      	b.n	80037e4 <__sflush_r+0x1c>
 80038c6:	4407      	add	r7, r0
 80038c8:	eba8 0800 	sub.w	r8, r8, r0
 80038cc:	e7e9      	b.n	80038a2 <__sflush_r+0xda>
 80038ce:	bf00      	nop
 80038d0:	20400001 	.word	0x20400001

080038d4 <_fflush_r>:
 80038d4:	b538      	push	{r3, r4, r5, lr}
 80038d6:	690b      	ldr	r3, [r1, #16]
 80038d8:	4605      	mov	r5, r0
 80038da:	460c      	mov	r4, r1
 80038dc:	b913      	cbnz	r3, 80038e4 <_fflush_r+0x10>
 80038de:	2500      	movs	r5, #0
 80038e0:	4628      	mov	r0, r5
 80038e2:	bd38      	pop	{r3, r4, r5, pc}
 80038e4:	b118      	cbz	r0, 80038ee <_fflush_r+0x1a>
 80038e6:	6983      	ldr	r3, [r0, #24]
 80038e8:	b90b      	cbnz	r3, 80038ee <_fflush_r+0x1a>
 80038ea:	f000 f887 	bl	80039fc <__sinit>
 80038ee:	4b14      	ldr	r3, [pc, #80]	; (8003940 <_fflush_r+0x6c>)
 80038f0:	429c      	cmp	r4, r3
 80038f2:	d11b      	bne.n	800392c <_fflush_r+0x58>
 80038f4:	686c      	ldr	r4, [r5, #4]
 80038f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d0ef      	beq.n	80038de <_fflush_r+0xa>
 80038fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003900:	07d0      	lsls	r0, r2, #31
 8003902:	d404      	bmi.n	800390e <_fflush_r+0x3a>
 8003904:	0599      	lsls	r1, r3, #22
 8003906:	d402      	bmi.n	800390e <_fflush_r+0x3a>
 8003908:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800390a:	f000 f915 	bl	8003b38 <__retarget_lock_acquire_recursive>
 800390e:	4628      	mov	r0, r5
 8003910:	4621      	mov	r1, r4
 8003912:	f7ff ff59 	bl	80037c8 <__sflush_r>
 8003916:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003918:	07da      	lsls	r2, r3, #31
 800391a:	4605      	mov	r5, r0
 800391c:	d4e0      	bmi.n	80038e0 <_fflush_r+0xc>
 800391e:	89a3      	ldrh	r3, [r4, #12]
 8003920:	059b      	lsls	r3, r3, #22
 8003922:	d4dd      	bmi.n	80038e0 <_fflush_r+0xc>
 8003924:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003926:	f000 f908 	bl	8003b3a <__retarget_lock_release_recursive>
 800392a:	e7d9      	b.n	80038e0 <_fflush_r+0xc>
 800392c:	4b05      	ldr	r3, [pc, #20]	; (8003944 <_fflush_r+0x70>)
 800392e:	429c      	cmp	r4, r3
 8003930:	d101      	bne.n	8003936 <_fflush_r+0x62>
 8003932:	68ac      	ldr	r4, [r5, #8]
 8003934:	e7df      	b.n	80038f6 <_fflush_r+0x22>
 8003936:	4b04      	ldr	r3, [pc, #16]	; (8003948 <_fflush_r+0x74>)
 8003938:	429c      	cmp	r4, r3
 800393a:	bf08      	it	eq
 800393c:	68ec      	ldreq	r4, [r5, #12]
 800393e:	e7da      	b.n	80038f6 <_fflush_r+0x22>
 8003940:	0800401c 	.word	0x0800401c
 8003944:	0800403c 	.word	0x0800403c
 8003948:	08003ffc 	.word	0x08003ffc

0800394c <std>:
 800394c:	2300      	movs	r3, #0
 800394e:	b510      	push	{r4, lr}
 8003950:	4604      	mov	r4, r0
 8003952:	e9c0 3300 	strd	r3, r3, [r0]
 8003956:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800395a:	6083      	str	r3, [r0, #8]
 800395c:	8181      	strh	r1, [r0, #12]
 800395e:	6643      	str	r3, [r0, #100]	; 0x64
 8003960:	81c2      	strh	r2, [r0, #14]
 8003962:	6183      	str	r3, [r0, #24]
 8003964:	4619      	mov	r1, r3
 8003966:	2208      	movs	r2, #8
 8003968:	305c      	adds	r0, #92	; 0x5c
 800396a:	f7ff fdef 	bl	800354c <memset>
 800396e:	4b05      	ldr	r3, [pc, #20]	; (8003984 <std+0x38>)
 8003970:	6263      	str	r3, [r4, #36]	; 0x24
 8003972:	4b05      	ldr	r3, [pc, #20]	; (8003988 <std+0x3c>)
 8003974:	62a3      	str	r3, [r4, #40]	; 0x28
 8003976:	4b05      	ldr	r3, [pc, #20]	; (800398c <std+0x40>)
 8003978:	62e3      	str	r3, [r4, #44]	; 0x2c
 800397a:	4b05      	ldr	r3, [pc, #20]	; (8003990 <std+0x44>)
 800397c:	6224      	str	r4, [r4, #32]
 800397e:	6323      	str	r3, [r4, #48]	; 0x30
 8003980:	bd10      	pop	{r4, pc}
 8003982:	bf00      	nop
 8003984:	08003de9 	.word	0x08003de9
 8003988:	08003e0b 	.word	0x08003e0b
 800398c:	08003e43 	.word	0x08003e43
 8003990:	08003e67 	.word	0x08003e67

08003994 <_cleanup_r>:
 8003994:	4901      	ldr	r1, [pc, #4]	; (800399c <_cleanup_r+0x8>)
 8003996:	f000 b8af 	b.w	8003af8 <_fwalk_reent>
 800399a:	bf00      	nop
 800399c:	080038d5 	.word	0x080038d5

080039a0 <__sfmoreglue>:
 80039a0:	b570      	push	{r4, r5, r6, lr}
 80039a2:	2268      	movs	r2, #104	; 0x68
 80039a4:	1e4d      	subs	r5, r1, #1
 80039a6:	4355      	muls	r5, r2
 80039a8:	460e      	mov	r6, r1
 80039aa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80039ae:	f000 f997 	bl	8003ce0 <_malloc_r>
 80039b2:	4604      	mov	r4, r0
 80039b4:	b140      	cbz	r0, 80039c8 <__sfmoreglue+0x28>
 80039b6:	2100      	movs	r1, #0
 80039b8:	e9c0 1600 	strd	r1, r6, [r0]
 80039bc:	300c      	adds	r0, #12
 80039be:	60a0      	str	r0, [r4, #8]
 80039c0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80039c4:	f7ff fdc2 	bl	800354c <memset>
 80039c8:	4620      	mov	r0, r4
 80039ca:	bd70      	pop	{r4, r5, r6, pc}

080039cc <__sfp_lock_acquire>:
 80039cc:	4801      	ldr	r0, [pc, #4]	; (80039d4 <__sfp_lock_acquire+0x8>)
 80039ce:	f000 b8b3 	b.w	8003b38 <__retarget_lock_acquire_recursive>
 80039d2:	bf00      	nop
 80039d4:	20000145 	.word	0x20000145

080039d8 <__sfp_lock_release>:
 80039d8:	4801      	ldr	r0, [pc, #4]	; (80039e0 <__sfp_lock_release+0x8>)
 80039da:	f000 b8ae 	b.w	8003b3a <__retarget_lock_release_recursive>
 80039de:	bf00      	nop
 80039e0:	20000145 	.word	0x20000145

080039e4 <__sinit_lock_acquire>:
 80039e4:	4801      	ldr	r0, [pc, #4]	; (80039ec <__sinit_lock_acquire+0x8>)
 80039e6:	f000 b8a7 	b.w	8003b38 <__retarget_lock_acquire_recursive>
 80039ea:	bf00      	nop
 80039ec:	20000146 	.word	0x20000146

080039f0 <__sinit_lock_release>:
 80039f0:	4801      	ldr	r0, [pc, #4]	; (80039f8 <__sinit_lock_release+0x8>)
 80039f2:	f000 b8a2 	b.w	8003b3a <__retarget_lock_release_recursive>
 80039f6:	bf00      	nop
 80039f8:	20000146 	.word	0x20000146

080039fc <__sinit>:
 80039fc:	b510      	push	{r4, lr}
 80039fe:	4604      	mov	r4, r0
 8003a00:	f7ff fff0 	bl	80039e4 <__sinit_lock_acquire>
 8003a04:	69a3      	ldr	r3, [r4, #24]
 8003a06:	b11b      	cbz	r3, 8003a10 <__sinit+0x14>
 8003a08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a0c:	f7ff bff0 	b.w	80039f0 <__sinit_lock_release>
 8003a10:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003a14:	6523      	str	r3, [r4, #80]	; 0x50
 8003a16:	4b13      	ldr	r3, [pc, #76]	; (8003a64 <__sinit+0x68>)
 8003a18:	4a13      	ldr	r2, [pc, #76]	; (8003a68 <__sinit+0x6c>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	62a2      	str	r2, [r4, #40]	; 0x28
 8003a1e:	42a3      	cmp	r3, r4
 8003a20:	bf04      	itt	eq
 8003a22:	2301      	moveq	r3, #1
 8003a24:	61a3      	streq	r3, [r4, #24]
 8003a26:	4620      	mov	r0, r4
 8003a28:	f000 f820 	bl	8003a6c <__sfp>
 8003a2c:	6060      	str	r0, [r4, #4]
 8003a2e:	4620      	mov	r0, r4
 8003a30:	f000 f81c 	bl	8003a6c <__sfp>
 8003a34:	60a0      	str	r0, [r4, #8]
 8003a36:	4620      	mov	r0, r4
 8003a38:	f000 f818 	bl	8003a6c <__sfp>
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	60e0      	str	r0, [r4, #12]
 8003a40:	2104      	movs	r1, #4
 8003a42:	6860      	ldr	r0, [r4, #4]
 8003a44:	f7ff ff82 	bl	800394c <std>
 8003a48:	68a0      	ldr	r0, [r4, #8]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	2109      	movs	r1, #9
 8003a4e:	f7ff ff7d 	bl	800394c <std>
 8003a52:	68e0      	ldr	r0, [r4, #12]
 8003a54:	2202      	movs	r2, #2
 8003a56:	2112      	movs	r1, #18
 8003a58:	f7ff ff78 	bl	800394c <std>
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	61a3      	str	r3, [r4, #24]
 8003a60:	e7d2      	b.n	8003a08 <__sinit+0xc>
 8003a62:	bf00      	nop
 8003a64:	08003ff8 	.word	0x08003ff8
 8003a68:	08003995 	.word	0x08003995

08003a6c <__sfp>:
 8003a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a6e:	4607      	mov	r7, r0
 8003a70:	f7ff ffac 	bl	80039cc <__sfp_lock_acquire>
 8003a74:	4b1e      	ldr	r3, [pc, #120]	; (8003af0 <__sfp+0x84>)
 8003a76:	681e      	ldr	r6, [r3, #0]
 8003a78:	69b3      	ldr	r3, [r6, #24]
 8003a7a:	b913      	cbnz	r3, 8003a82 <__sfp+0x16>
 8003a7c:	4630      	mov	r0, r6
 8003a7e:	f7ff ffbd 	bl	80039fc <__sinit>
 8003a82:	3648      	adds	r6, #72	; 0x48
 8003a84:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003a88:	3b01      	subs	r3, #1
 8003a8a:	d503      	bpl.n	8003a94 <__sfp+0x28>
 8003a8c:	6833      	ldr	r3, [r6, #0]
 8003a8e:	b30b      	cbz	r3, 8003ad4 <__sfp+0x68>
 8003a90:	6836      	ldr	r6, [r6, #0]
 8003a92:	e7f7      	b.n	8003a84 <__sfp+0x18>
 8003a94:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003a98:	b9d5      	cbnz	r5, 8003ad0 <__sfp+0x64>
 8003a9a:	4b16      	ldr	r3, [pc, #88]	; (8003af4 <__sfp+0x88>)
 8003a9c:	60e3      	str	r3, [r4, #12]
 8003a9e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003aa2:	6665      	str	r5, [r4, #100]	; 0x64
 8003aa4:	f000 f847 	bl	8003b36 <__retarget_lock_init_recursive>
 8003aa8:	f7ff ff96 	bl	80039d8 <__sfp_lock_release>
 8003aac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003ab0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003ab4:	6025      	str	r5, [r4, #0]
 8003ab6:	61a5      	str	r5, [r4, #24]
 8003ab8:	2208      	movs	r2, #8
 8003aba:	4629      	mov	r1, r5
 8003abc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003ac0:	f7ff fd44 	bl	800354c <memset>
 8003ac4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003ac8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003acc:	4620      	mov	r0, r4
 8003ace:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ad0:	3468      	adds	r4, #104	; 0x68
 8003ad2:	e7d9      	b.n	8003a88 <__sfp+0x1c>
 8003ad4:	2104      	movs	r1, #4
 8003ad6:	4638      	mov	r0, r7
 8003ad8:	f7ff ff62 	bl	80039a0 <__sfmoreglue>
 8003adc:	4604      	mov	r4, r0
 8003ade:	6030      	str	r0, [r6, #0]
 8003ae0:	2800      	cmp	r0, #0
 8003ae2:	d1d5      	bne.n	8003a90 <__sfp+0x24>
 8003ae4:	f7ff ff78 	bl	80039d8 <__sfp_lock_release>
 8003ae8:	230c      	movs	r3, #12
 8003aea:	603b      	str	r3, [r7, #0]
 8003aec:	e7ee      	b.n	8003acc <__sfp+0x60>
 8003aee:	bf00      	nop
 8003af0:	08003ff8 	.word	0x08003ff8
 8003af4:	ffff0001 	.word	0xffff0001

08003af8 <_fwalk_reent>:
 8003af8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003afc:	4606      	mov	r6, r0
 8003afe:	4688      	mov	r8, r1
 8003b00:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003b04:	2700      	movs	r7, #0
 8003b06:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003b0a:	f1b9 0901 	subs.w	r9, r9, #1
 8003b0e:	d505      	bpl.n	8003b1c <_fwalk_reent+0x24>
 8003b10:	6824      	ldr	r4, [r4, #0]
 8003b12:	2c00      	cmp	r4, #0
 8003b14:	d1f7      	bne.n	8003b06 <_fwalk_reent+0xe>
 8003b16:	4638      	mov	r0, r7
 8003b18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003b1c:	89ab      	ldrh	r3, [r5, #12]
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d907      	bls.n	8003b32 <_fwalk_reent+0x3a>
 8003b22:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003b26:	3301      	adds	r3, #1
 8003b28:	d003      	beq.n	8003b32 <_fwalk_reent+0x3a>
 8003b2a:	4629      	mov	r1, r5
 8003b2c:	4630      	mov	r0, r6
 8003b2e:	47c0      	blx	r8
 8003b30:	4307      	orrs	r7, r0
 8003b32:	3568      	adds	r5, #104	; 0x68
 8003b34:	e7e9      	b.n	8003b0a <_fwalk_reent+0x12>

08003b36 <__retarget_lock_init_recursive>:
 8003b36:	4770      	bx	lr

08003b38 <__retarget_lock_acquire_recursive>:
 8003b38:	4770      	bx	lr

08003b3a <__retarget_lock_release_recursive>:
 8003b3a:	4770      	bx	lr

08003b3c <__swhatbuf_r>:
 8003b3c:	b570      	push	{r4, r5, r6, lr}
 8003b3e:	460e      	mov	r6, r1
 8003b40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b44:	2900      	cmp	r1, #0
 8003b46:	b096      	sub	sp, #88	; 0x58
 8003b48:	4614      	mov	r4, r2
 8003b4a:	461d      	mov	r5, r3
 8003b4c:	da08      	bge.n	8003b60 <__swhatbuf_r+0x24>
 8003b4e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003b52:	2200      	movs	r2, #0
 8003b54:	602a      	str	r2, [r5, #0]
 8003b56:	061a      	lsls	r2, r3, #24
 8003b58:	d410      	bmi.n	8003b7c <__swhatbuf_r+0x40>
 8003b5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b5e:	e00e      	b.n	8003b7e <__swhatbuf_r+0x42>
 8003b60:	466a      	mov	r2, sp
 8003b62:	f000 f9a7 	bl	8003eb4 <_fstat_r>
 8003b66:	2800      	cmp	r0, #0
 8003b68:	dbf1      	blt.n	8003b4e <__swhatbuf_r+0x12>
 8003b6a:	9a01      	ldr	r2, [sp, #4]
 8003b6c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003b70:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003b74:	425a      	negs	r2, r3
 8003b76:	415a      	adcs	r2, r3
 8003b78:	602a      	str	r2, [r5, #0]
 8003b7a:	e7ee      	b.n	8003b5a <__swhatbuf_r+0x1e>
 8003b7c:	2340      	movs	r3, #64	; 0x40
 8003b7e:	2000      	movs	r0, #0
 8003b80:	6023      	str	r3, [r4, #0]
 8003b82:	b016      	add	sp, #88	; 0x58
 8003b84:	bd70      	pop	{r4, r5, r6, pc}
	...

08003b88 <__smakebuf_r>:
 8003b88:	898b      	ldrh	r3, [r1, #12]
 8003b8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003b8c:	079d      	lsls	r5, r3, #30
 8003b8e:	4606      	mov	r6, r0
 8003b90:	460c      	mov	r4, r1
 8003b92:	d507      	bpl.n	8003ba4 <__smakebuf_r+0x1c>
 8003b94:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003b98:	6023      	str	r3, [r4, #0]
 8003b9a:	6123      	str	r3, [r4, #16]
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	6163      	str	r3, [r4, #20]
 8003ba0:	b002      	add	sp, #8
 8003ba2:	bd70      	pop	{r4, r5, r6, pc}
 8003ba4:	ab01      	add	r3, sp, #4
 8003ba6:	466a      	mov	r2, sp
 8003ba8:	f7ff ffc8 	bl	8003b3c <__swhatbuf_r>
 8003bac:	9900      	ldr	r1, [sp, #0]
 8003bae:	4605      	mov	r5, r0
 8003bb0:	4630      	mov	r0, r6
 8003bb2:	f000 f895 	bl	8003ce0 <_malloc_r>
 8003bb6:	b948      	cbnz	r0, 8003bcc <__smakebuf_r+0x44>
 8003bb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003bbc:	059a      	lsls	r2, r3, #22
 8003bbe:	d4ef      	bmi.n	8003ba0 <__smakebuf_r+0x18>
 8003bc0:	f023 0303 	bic.w	r3, r3, #3
 8003bc4:	f043 0302 	orr.w	r3, r3, #2
 8003bc8:	81a3      	strh	r3, [r4, #12]
 8003bca:	e7e3      	b.n	8003b94 <__smakebuf_r+0xc>
 8003bcc:	4b0d      	ldr	r3, [pc, #52]	; (8003c04 <__smakebuf_r+0x7c>)
 8003bce:	62b3      	str	r3, [r6, #40]	; 0x28
 8003bd0:	89a3      	ldrh	r3, [r4, #12]
 8003bd2:	6020      	str	r0, [r4, #0]
 8003bd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bd8:	81a3      	strh	r3, [r4, #12]
 8003bda:	9b00      	ldr	r3, [sp, #0]
 8003bdc:	6163      	str	r3, [r4, #20]
 8003bde:	9b01      	ldr	r3, [sp, #4]
 8003be0:	6120      	str	r0, [r4, #16]
 8003be2:	b15b      	cbz	r3, 8003bfc <__smakebuf_r+0x74>
 8003be4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003be8:	4630      	mov	r0, r6
 8003bea:	f000 f975 	bl	8003ed8 <_isatty_r>
 8003bee:	b128      	cbz	r0, 8003bfc <__smakebuf_r+0x74>
 8003bf0:	89a3      	ldrh	r3, [r4, #12]
 8003bf2:	f023 0303 	bic.w	r3, r3, #3
 8003bf6:	f043 0301 	orr.w	r3, r3, #1
 8003bfa:	81a3      	strh	r3, [r4, #12]
 8003bfc:	89a0      	ldrh	r0, [r4, #12]
 8003bfe:	4305      	orrs	r5, r0
 8003c00:	81a5      	strh	r5, [r4, #12]
 8003c02:	e7cd      	b.n	8003ba0 <__smakebuf_r+0x18>
 8003c04:	08003995 	.word	0x08003995

08003c08 <_free_r>:
 8003c08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003c0a:	2900      	cmp	r1, #0
 8003c0c:	d044      	beq.n	8003c98 <_free_r+0x90>
 8003c0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c12:	9001      	str	r0, [sp, #4]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	f1a1 0404 	sub.w	r4, r1, #4
 8003c1a:	bfb8      	it	lt
 8003c1c:	18e4      	addlt	r4, r4, r3
 8003c1e:	f000 f97d 	bl	8003f1c <__malloc_lock>
 8003c22:	4a1e      	ldr	r2, [pc, #120]	; (8003c9c <_free_r+0x94>)
 8003c24:	9801      	ldr	r0, [sp, #4]
 8003c26:	6813      	ldr	r3, [r2, #0]
 8003c28:	b933      	cbnz	r3, 8003c38 <_free_r+0x30>
 8003c2a:	6063      	str	r3, [r4, #4]
 8003c2c:	6014      	str	r4, [r2, #0]
 8003c2e:	b003      	add	sp, #12
 8003c30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003c34:	f000 b978 	b.w	8003f28 <__malloc_unlock>
 8003c38:	42a3      	cmp	r3, r4
 8003c3a:	d908      	bls.n	8003c4e <_free_r+0x46>
 8003c3c:	6825      	ldr	r5, [r4, #0]
 8003c3e:	1961      	adds	r1, r4, r5
 8003c40:	428b      	cmp	r3, r1
 8003c42:	bf01      	itttt	eq
 8003c44:	6819      	ldreq	r1, [r3, #0]
 8003c46:	685b      	ldreq	r3, [r3, #4]
 8003c48:	1949      	addeq	r1, r1, r5
 8003c4a:	6021      	streq	r1, [r4, #0]
 8003c4c:	e7ed      	b.n	8003c2a <_free_r+0x22>
 8003c4e:	461a      	mov	r2, r3
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	b10b      	cbz	r3, 8003c58 <_free_r+0x50>
 8003c54:	42a3      	cmp	r3, r4
 8003c56:	d9fa      	bls.n	8003c4e <_free_r+0x46>
 8003c58:	6811      	ldr	r1, [r2, #0]
 8003c5a:	1855      	adds	r5, r2, r1
 8003c5c:	42a5      	cmp	r5, r4
 8003c5e:	d10b      	bne.n	8003c78 <_free_r+0x70>
 8003c60:	6824      	ldr	r4, [r4, #0]
 8003c62:	4421      	add	r1, r4
 8003c64:	1854      	adds	r4, r2, r1
 8003c66:	42a3      	cmp	r3, r4
 8003c68:	6011      	str	r1, [r2, #0]
 8003c6a:	d1e0      	bne.n	8003c2e <_free_r+0x26>
 8003c6c:	681c      	ldr	r4, [r3, #0]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	6053      	str	r3, [r2, #4]
 8003c72:	4421      	add	r1, r4
 8003c74:	6011      	str	r1, [r2, #0]
 8003c76:	e7da      	b.n	8003c2e <_free_r+0x26>
 8003c78:	d902      	bls.n	8003c80 <_free_r+0x78>
 8003c7a:	230c      	movs	r3, #12
 8003c7c:	6003      	str	r3, [r0, #0]
 8003c7e:	e7d6      	b.n	8003c2e <_free_r+0x26>
 8003c80:	6825      	ldr	r5, [r4, #0]
 8003c82:	1961      	adds	r1, r4, r5
 8003c84:	428b      	cmp	r3, r1
 8003c86:	bf04      	itt	eq
 8003c88:	6819      	ldreq	r1, [r3, #0]
 8003c8a:	685b      	ldreq	r3, [r3, #4]
 8003c8c:	6063      	str	r3, [r4, #4]
 8003c8e:	bf04      	itt	eq
 8003c90:	1949      	addeq	r1, r1, r5
 8003c92:	6021      	streq	r1, [r4, #0]
 8003c94:	6054      	str	r4, [r2, #4]
 8003c96:	e7ca      	b.n	8003c2e <_free_r+0x26>
 8003c98:	b003      	add	sp, #12
 8003c9a:	bd30      	pop	{r4, r5, pc}
 8003c9c:	20000148 	.word	0x20000148

08003ca0 <sbrk_aligned>:
 8003ca0:	b570      	push	{r4, r5, r6, lr}
 8003ca2:	4e0e      	ldr	r6, [pc, #56]	; (8003cdc <sbrk_aligned+0x3c>)
 8003ca4:	460c      	mov	r4, r1
 8003ca6:	6831      	ldr	r1, [r6, #0]
 8003ca8:	4605      	mov	r5, r0
 8003caa:	b911      	cbnz	r1, 8003cb2 <sbrk_aligned+0x12>
 8003cac:	f000 f88c 	bl	8003dc8 <_sbrk_r>
 8003cb0:	6030      	str	r0, [r6, #0]
 8003cb2:	4621      	mov	r1, r4
 8003cb4:	4628      	mov	r0, r5
 8003cb6:	f000 f887 	bl	8003dc8 <_sbrk_r>
 8003cba:	1c43      	adds	r3, r0, #1
 8003cbc:	d00a      	beq.n	8003cd4 <sbrk_aligned+0x34>
 8003cbe:	1cc4      	adds	r4, r0, #3
 8003cc0:	f024 0403 	bic.w	r4, r4, #3
 8003cc4:	42a0      	cmp	r0, r4
 8003cc6:	d007      	beq.n	8003cd8 <sbrk_aligned+0x38>
 8003cc8:	1a21      	subs	r1, r4, r0
 8003cca:	4628      	mov	r0, r5
 8003ccc:	f000 f87c 	bl	8003dc8 <_sbrk_r>
 8003cd0:	3001      	adds	r0, #1
 8003cd2:	d101      	bne.n	8003cd8 <sbrk_aligned+0x38>
 8003cd4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003cd8:	4620      	mov	r0, r4
 8003cda:	bd70      	pop	{r4, r5, r6, pc}
 8003cdc:	2000014c 	.word	0x2000014c

08003ce0 <_malloc_r>:
 8003ce0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ce4:	1ccd      	adds	r5, r1, #3
 8003ce6:	f025 0503 	bic.w	r5, r5, #3
 8003cea:	3508      	adds	r5, #8
 8003cec:	2d0c      	cmp	r5, #12
 8003cee:	bf38      	it	cc
 8003cf0:	250c      	movcc	r5, #12
 8003cf2:	2d00      	cmp	r5, #0
 8003cf4:	4607      	mov	r7, r0
 8003cf6:	db01      	blt.n	8003cfc <_malloc_r+0x1c>
 8003cf8:	42a9      	cmp	r1, r5
 8003cfa:	d905      	bls.n	8003d08 <_malloc_r+0x28>
 8003cfc:	230c      	movs	r3, #12
 8003cfe:	603b      	str	r3, [r7, #0]
 8003d00:	2600      	movs	r6, #0
 8003d02:	4630      	mov	r0, r6
 8003d04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d08:	4e2e      	ldr	r6, [pc, #184]	; (8003dc4 <_malloc_r+0xe4>)
 8003d0a:	f000 f907 	bl	8003f1c <__malloc_lock>
 8003d0e:	6833      	ldr	r3, [r6, #0]
 8003d10:	461c      	mov	r4, r3
 8003d12:	bb34      	cbnz	r4, 8003d62 <_malloc_r+0x82>
 8003d14:	4629      	mov	r1, r5
 8003d16:	4638      	mov	r0, r7
 8003d18:	f7ff ffc2 	bl	8003ca0 <sbrk_aligned>
 8003d1c:	1c43      	adds	r3, r0, #1
 8003d1e:	4604      	mov	r4, r0
 8003d20:	d14d      	bne.n	8003dbe <_malloc_r+0xde>
 8003d22:	6834      	ldr	r4, [r6, #0]
 8003d24:	4626      	mov	r6, r4
 8003d26:	2e00      	cmp	r6, #0
 8003d28:	d140      	bne.n	8003dac <_malloc_r+0xcc>
 8003d2a:	6823      	ldr	r3, [r4, #0]
 8003d2c:	4631      	mov	r1, r6
 8003d2e:	4638      	mov	r0, r7
 8003d30:	eb04 0803 	add.w	r8, r4, r3
 8003d34:	f000 f848 	bl	8003dc8 <_sbrk_r>
 8003d38:	4580      	cmp	r8, r0
 8003d3a:	d13a      	bne.n	8003db2 <_malloc_r+0xd2>
 8003d3c:	6821      	ldr	r1, [r4, #0]
 8003d3e:	3503      	adds	r5, #3
 8003d40:	1a6d      	subs	r5, r5, r1
 8003d42:	f025 0503 	bic.w	r5, r5, #3
 8003d46:	3508      	adds	r5, #8
 8003d48:	2d0c      	cmp	r5, #12
 8003d4a:	bf38      	it	cc
 8003d4c:	250c      	movcc	r5, #12
 8003d4e:	4629      	mov	r1, r5
 8003d50:	4638      	mov	r0, r7
 8003d52:	f7ff ffa5 	bl	8003ca0 <sbrk_aligned>
 8003d56:	3001      	adds	r0, #1
 8003d58:	d02b      	beq.n	8003db2 <_malloc_r+0xd2>
 8003d5a:	6823      	ldr	r3, [r4, #0]
 8003d5c:	442b      	add	r3, r5
 8003d5e:	6023      	str	r3, [r4, #0]
 8003d60:	e00e      	b.n	8003d80 <_malloc_r+0xa0>
 8003d62:	6822      	ldr	r2, [r4, #0]
 8003d64:	1b52      	subs	r2, r2, r5
 8003d66:	d41e      	bmi.n	8003da6 <_malloc_r+0xc6>
 8003d68:	2a0b      	cmp	r2, #11
 8003d6a:	d916      	bls.n	8003d9a <_malloc_r+0xba>
 8003d6c:	1961      	adds	r1, r4, r5
 8003d6e:	42a3      	cmp	r3, r4
 8003d70:	6025      	str	r5, [r4, #0]
 8003d72:	bf18      	it	ne
 8003d74:	6059      	strne	r1, [r3, #4]
 8003d76:	6863      	ldr	r3, [r4, #4]
 8003d78:	bf08      	it	eq
 8003d7a:	6031      	streq	r1, [r6, #0]
 8003d7c:	5162      	str	r2, [r4, r5]
 8003d7e:	604b      	str	r3, [r1, #4]
 8003d80:	4638      	mov	r0, r7
 8003d82:	f104 060b 	add.w	r6, r4, #11
 8003d86:	f000 f8cf 	bl	8003f28 <__malloc_unlock>
 8003d8a:	f026 0607 	bic.w	r6, r6, #7
 8003d8e:	1d23      	adds	r3, r4, #4
 8003d90:	1af2      	subs	r2, r6, r3
 8003d92:	d0b6      	beq.n	8003d02 <_malloc_r+0x22>
 8003d94:	1b9b      	subs	r3, r3, r6
 8003d96:	50a3      	str	r3, [r4, r2]
 8003d98:	e7b3      	b.n	8003d02 <_malloc_r+0x22>
 8003d9a:	6862      	ldr	r2, [r4, #4]
 8003d9c:	42a3      	cmp	r3, r4
 8003d9e:	bf0c      	ite	eq
 8003da0:	6032      	streq	r2, [r6, #0]
 8003da2:	605a      	strne	r2, [r3, #4]
 8003da4:	e7ec      	b.n	8003d80 <_malloc_r+0xa0>
 8003da6:	4623      	mov	r3, r4
 8003da8:	6864      	ldr	r4, [r4, #4]
 8003daa:	e7b2      	b.n	8003d12 <_malloc_r+0x32>
 8003dac:	4634      	mov	r4, r6
 8003dae:	6876      	ldr	r6, [r6, #4]
 8003db0:	e7b9      	b.n	8003d26 <_malloc_r+0x46>
 8003db2:	230c      	movs	r3, #12
 8003db4:	603b      	str	r3, [r7, #0]
 8003db6:	4638      	mov	r0, r7
 8003db8:	f000 f8b6 	bl	8003f28 <__malloc_unlock>
 8003dbc:	e7a1      	b.n	8003d02 <_malloc_r+0x22>
 8003dbe:	6025      	str	r5, [r4, #0]
 8003dc0:	e7de      	b.n	8003d80 <_malloc_r+0xa0>
 8003dc2:	bf00      	nop
 8003dc4:	20000148 	.word	0x20000148

08003dc8 <_sbrk_r>:
 8003dc8:	b538      	push	{r3, r4, r5, lr}
 8003dca:	4d06      	ldr	r5, [pc, #24]	; (8003de4 <_sbrk_r+0x1c>)
 8003dcc:	2300      	movs	r3, #0
 8003dce:	4604      	mov	r4, r0
 8003dd0:	4608      	mov	r0, r1
 8003dd2:	602b      	str	r3, [r5, #0]
 8003dd4:	f7fc fe2a 	bl	8000a2c <_sbrk>
 8003dd8:	1c43      	adds	r3, r0, #1
 8003dda:	d102      	bne.n	8003de2 <_sbrk_r+0x1a>
 8003ddc:	682b      	ldr	r3, [r5, #0]
 8003dde:	b103      	cbz	r3, 8003de2 <_sbrk_r+0x1a>
 8003de0:	6023      	str	r3, [r4, #0]
 8003de2:	bd38      	pop	{r3, r4, r5, pc}
 8003de4:	20000150 	.word	0x20000150

08003de8 <__sread>:
 8003de8:	b510      	push	{r4, lr}
 8003dea:	460c      	mov	r4, r1
 8003dec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003df0:	f000 f8a0 	bl	8003f34 <_read_r>
 8003df4:	2800      	cmp	r0, #0
 8003df6:	bfab      	itete	ge
 8003df8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003dfa:	89a3      	ldrhlt	r3, [r4, #12]
 8003dfc:	181b      	addge	r3, r3, r0
 8003dfe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003e02:	bfac      	ite	ge
 8003e04:	6563      	strge	r3, [r4, #84]	; 0x54
 8003e06:	81a3      	strhlt	r3, [r4, #12]
 8003e08:	bd10      	pop	{r4, pc}

08003e0a <__swrite>:
 8003e0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e0e:	461f      	mov	r7, r3
 8003e10:	898b      	ldrh	r3, [r1, #12]
 8003e12:	05db      	lsls	r3, r3, #23
 8003e14:	4605      	mov	r5, r0
 8003e16:	460c      	mov	r4, r1
 8003e18:	4616      	mov	r6, r2
 8003e1a:	d505      	bpl.n	8003e28 <__swrite+0x1e>
 8003e1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e20:	2302      	movs	r3, #2
 8003e22:	2200      	movs	r2, #0
 8003e24:	f000 f868 	bl	8003ef8 <_lseek_r>
 8003e28:	89a3      	ldrh	r3, [r4, #12]
 8003e2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003e2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e32:	81a3      	strh	r3, [r4, #12]
 8003e34:	4632      	mov	r2, r6
 8003e36:	463b      	mov	r3, r7
 8003e38:	4628      	mov	r0, r5
 8003e3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003e3e:	f000 b817 	b.w	8003e70 <_write_r>

08003e42 <__sseek>:
 8003e42:	b510      	push	{r4, lr}
 8003e44:	460c      	mov	r4, r1
 8003e46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e4a:	f000 f855 	bl	8003ef8 <_lseek_r>
 8003e4e:	1c43      	adds	r3, r0, #1
 8003e50:	89a3      	ldrh	r3, [r4, #12]
 8003e52:	bf15      	itete	ne
 8003e54:	6560      	strne	r0, [r4, #84]	; 0x54
 8003e56:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003e5a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003e5e:	81a3      	strheq	r3, [r4, #12]
 8003e60:	bf18      	it	ne
 8003e62:	81a3      	strhne	r3, [r4, #12]
 8003e64:	bd10      	pop	{r4, pc}

08003e66 <__sclose>:
 8003e66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e6a:	f000 b813 	b.w	8003e94 <_close_r>
	...

08003e70 <_write_r>:
 8003e70:	b538      	push	{r3, r4, r5, lr}
 8003e72:	4d07      	ldr	r5, [pc, #28]	; (8003e90 <_write_r+0x20>)
 8003e74:	4604      	mov	r4, r0
 8003e76:	4608      	mov	r0, r1
 8003e78:	4611      	mov	r1, r2
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	602a      	str	r2, [r5, #0]
 8003e7e:	461a      	mov	r2, r3
 8003e80:	f7fc fd8a 	bl	8000998 <_write>
 8003e84:	1c43      	adds	r3, r0, #1
 8003e86:	d102      	bne.n	8003e8e <_write_r+0x1e>
 8003e88:	682b      	ldr	r3, [r5, #0]
 8003e8a:	b103      	cbz	r3, 8003e8e <_write_r+0x1e>
 8003e8c:	6023      	str	r3, [r4, #0]
 8003e8e:	bd38      	pop	{r3, r4, r5, pc}
 8003e90:	20000150 	.word	0x20000150

08003e94 <_close_r>:
 8003e94:	b538      	push	{r3, r4, r5, lr}
 8003e96:	4d06      	ldr	r5, [pc, #24]	; (8003eb0 <_close_r+0x1c>)
 8003e98:	2300      	movs	r3, #0
 8003e9a:	4604      	mov	r4, r0
 8003e9c:	4608      	mov	r0, r1
 8003e9e:	602b      	str	r3, [r5, #0]
 8003ea0:	f7fc fd90 	bl	80009c4 <_close>
 8003ea4:	1c43      	adds	r3, r0, #1
 8003ea6:	d102      	bne.n	8003eae <_close_r+0x1a>
 8003ea8:	682b      	ldr	r3, [r5, #0]
 8003eaa:	b103      	cbz	r3, 8003eae <_close_r+0x1a>
 8003eac:	6023      	str	r3, [r4, #0]
 8003eae:	bd38      	pop	{r3, r4, r5, pc}
 8003eb0:	20000150 	.word	0x20000150

08003eb4 <_fstat_r>:
 8003eb4:	b538      	push	{r3, r4, r5, lr}
 8003eb6:	4d07      	ldr	r5, [pc, #28]	; (8003ed4 <_fstat_r+0x20>)
 8003eb8:	2300      	movs	r3, #0
 8003eba:	4604      	mov	r4, r0
 8003ebc:	4608      	mov	r0, r1
 8003ebe:	4611      	mov	r1, r2
 8003ec0:	602b      	str	r3, [r5, #0]
 8003ec2:	f7fc fd8b 	bl	80009dc <_fstat>
 8003ec6:	1c43      	adds	r3, r0, #1
 8003ec8:	d102      	bne.n	8003ed0 <_fstat_r+0x1c>
 8003eca:	682b      	ldr	r3, [r5, #0]
 8003ecc:	b103      	cbz	r3, 8003ed0 <_fstat_r+0x1c>
 8003ece:	6023      	str	r3, [r4, #0]
 8003ed0:	bd38      	pop	{r3, r4, r5, pc}
 8003ed2:	bf00      	nop
 8003ed4:	20000150 	.word	0x20000150

08003ed8 <_isatty_r>:
 8003ed8:	b538      	push	{r3, r4, r5, lr}
 8003eda:	4d06      	ldr	r5, [pc, #24]	; (8003ef4 <_isatty_r+0x1c>)
 8003edc:	2300      	movs	r3, #0
 8003ede:	4604      	mov	r4, r0
 8003ee0:	4608      	mov	r0, r1
 8003ee2:	602b      	str	r3, [r5, #0]
 8003ee4:	f7fc fd8a 	bl	80009fc <_isatty>
 8003ee8:	1c43      	adds	r3, r0, #1
 8003eea:	d102      	bne.n	8003ef2 <_isatty_r+0x1a>
 8003eec:	682b      	ldr	r3, [r5, #0]
 8003eee:	b103      	cbz	r3, 8003ef2 <_isatty_r+0x1a>
 8003ef0:	6023      	str	r3, [r4, #0]
 8003ef2:	bd38      	pop	{r3, r4, r5, pc}
 8003ef4:	20000150 	.word	0x20000150

08003ef8 <_lseek_r>:
 8003ef8:	b538      	push	{r3, r4, r5, lr}
 8003efa:	4d07      	ldr	r5, [pc, #28]	; (8003f18 <_lseek_r+0x20>)
 8003efc:	4604      	mov	r4, r0
 8003efe:	4608      	mov	r0, r1
 8003f00:	4611      	mov	r1, r2
 8003f02:	2200      	movs	r2, #0
 8003f04:	602a      	str	r2, [r5, #0]
 8003f06:	461a      	mov	r2, r3
 8003f08:	f7fc fd83 	bl	8000a12 <_lseek>
 8003f0c:	1c43      	adds	r3, r0, #1
 8003f0e:	d102      	bne.n	8003f16 <_lseek_r+0x1e>
 8003f10:	682b      	ldr	r3, [r5, #0]
 8003f12:	b103      	cbz	r3, 8003f16 <_lseek_r+0x1e>
 8003f14:	6023      	str	r3, [r4, #0]
 8003f16:	bd38      	pop	{r3, r4, r5, pc}
 8003f18:	20000150 	.word	0x20000150

08003f1c <__malloc_lock>:
 8003f1c:	4801      	ldr	r0, [pc, #4]	; (8003f24 <__malloc_lock+0x8>)
 8003f1e:	f7ff be0b 	b.w	8003b38 <__retarget_lock_acquire_recursive>
 8003f22:	bf00      	nop
 8003f24:	20000144 	.word	0x20000144

08003f28 <__malloc_unlock>:
 8003f28:	4801      	ldr	r0, [pc, #4]	; (8003f30 <__malloc_unlock+0x8>)
 8003f2a:	f7ff be06 	b.w	8003b3a <__retarget_lock_release_recursive>
 8003f2e:	bf00      	nop
 8003f30:	20000144 	.word	0x20000144

08003f34 <_read_r>:
 8003f34:	b538      	push	{r3, r4, r5, lr}
 8003f36:	4d07      	ldr	r5, [pc, #28]	; (8003f54 <_read_r+0x20>)
 8003f38:	4604      	mov	r4, r0
 8003f3a:	4608      	mov	r0, r1
 8003f3c:	4611      	mov	r1, r2
 8003f3e:	2200      	movs	r2, #0
 8003f40:	602a      	str	r2, [r5, #0]
 8003f42:	461a      	mov	r2, r3
 8003f44:	f7fc fd0a 	bl	800095c <_read>
 8003f48:	1c43      	adds	r3, r0, #1
 8003f4a:	d102      	bne.n	8003f52 <_read_r+0x1e>
 8003f4c:	682b      	ldr	r3, [r5, #0]
 8003f4e:	b103      	cbz	r3, 8003f52 <_read_r+0x1e>
 8003f50:	6023      	str	r3, [r4, #0]
 8003f52:	bd38      	pop	{r3, r4, r5, pc}
 8003f54:	20000150 	.word	0x20000150

08003f58 <_init>:
 8003f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f5a:	bf00      	nop
 8003f5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f5e:	bc08      	pop	{r3}
 8003f60:	469e      	mov	lr, r3
 8003f62:	4770      	bx	lr

08003f64 <_fini>:
 8003f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f66:	bf00      	nop
 8003f68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f6a:	bc08      	pop	{r3}
 8003f6c:	469e      	mov	lr, r3
 8003f6e:	4770      	bx	lr
