
PWM_INPUT_CAPTURE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a584  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000524  0800a738  0800a738  0001a738  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ac5c  0800ac5c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800ac5c  0800ac5c  0001ac5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ac64  0800ac64  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ac64  0800ac64  0001ac64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ac68  0800ac68  0001ac68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800ac6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000164  200001e0  0800ae4c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000344  0800ae4c  00020344  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000111ec  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002043  00000000  00000000  000313fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f30  00000000  00000000  00033440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e68  00000000  00000000  00034370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029eb1  00000000  00000000  000351d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011008  00000000  00000000  0005f089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00101e3e  00000000  00000000  00070091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00171ecf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055f0  00000000  00000000  00171f20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800a71c 	.word	0x0800a71c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	0800a71c 	.word	0x0800a71c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cbc:	f000 b9aa 	b.w	8001014 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468e      	mov	lr, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d14d      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d52:	428a      	cmp	r2, r1
 8000d54:	4694      	mov	ip, r2
 8000d56:	d969      	bls.n	8000e2c <__udivmoddi4+0xe8>
 8000d58:	fab2 f282 	clz	r2, r2
 8000d5c:	b152      	cbz	r2, 8000d74 <__udivmoddi4+0x30>
 8000d5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d62:	f1c2 0120 	rsb	r1, r2, #32
 8000d66:	fa20 f101 	lsr.w	r1, r0, r1
 8000d6a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d72:	4094      	lsls	r4, r2
 8000d74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d78:	0c21      	lsrs	r1, r4, #16
 8000d7a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d7e:	fa1f f78c 	uxth.w	r7, ip
 8000d82:	fb08 e316 	mls	r3, r8, r6, lr
 8000d86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d8a:	fb06 f107 	mul.w	r1, r6, r7
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d9a:	f080 811f 	bcs.w	8000fdc <__udivmoddi4+0x298>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 811c 	bls.w	8000fdc <__udivmoddi4+0x298>
 8000da4:	3e02      	subs	r6, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a5b      	subs	r3, r3, r1
 8000daa:	b2a4      	uxth	r4, r4
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3310 	mls	r3, r8, r0, r3
 8000db4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db8:	fb00 f707 	mul.w	r7, r0, r7
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	d90a      	bls.n	8000dd6 <__udivmoddi4+0x92>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dc8:	f080 810a 	bcs.w	8000fe0 <__udivmoddi4+0x29c>
 8000dcc:	42a7      	cmp	r7, r4
 8000dce:	f240 8107 	bls.w	8000fe0 <__udivmoddi4+0x29c>
 8000dd2:	4464      	add	r4, ip
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dda:	1be4      	subs	r4, r4, r7
 8000ddc:	2600      	movs	r6, #0
 8000dde:	b11d      	cbz	r5, 8000de8 <__udivmoddi4+0xa4>
 8000de0:	40d4      	lsrs	r4, r2
 8000de2:	2300      	movs	r3, #0
 8000de4:	e9c5 4300 	strd	r4, r3, [r5]
 8000de8:	4631      	mov	r1, r6
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d909      	bls.n	8000e06 <__udivmoddi4+0xc2>
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	f000 80ef 	beq.w	8000fd6 <__udivmoddi4+0x292>
 8000df8:	2600      	movs	r6, #0
 8000dfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dfe:	4630      	mov	r0, r6
 8000e00:	4631      	mov	r1, r6
 8000e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e06:	fab3 f683 	clz	r6, r3
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	d14a      	bne.n	8000ea4 <__udivmoddi4+0x160>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d302      	bcc.n	8000e18 <__udivmoddi4+0xd4>
 8000e12:	4282      	cmp	r2, r0
 8000e14:	f200 80f9 	bhi.w	800100a <__udivmoddi4+0x2c6>
 8000e18:	1a84      	subs	r4, r0, r2
 8000e1a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e1e:	2001      	movs	r0, #1
 8000e20:	469e      	mov	lr, r3
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	d0e0      	beq.n	8000de8 <__udivmoddi4+0xa4>
 8000e26:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e2a:	e7dd      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000e2c:	b902      	cbnz	r2, 8000e30 <__udivmoddi4+0xec>
 8000e2e:	deff      	udf	#255	; 0xff
 8000e30:	fab2 f282 	clz	r2, r2
 8000e34:	2a00      	cmp	r2, #0
 8000e36:	f040 8092 	bne.w	8000f5e <__udivmoddi4+0x21a>
 8000e3a:	eba1 010c 	sub.w	r1, r1, ip
 8000e3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e42:	fa1f fe8c 	uxth.w	lr, ip
 8000e46:	2601      	movs	r6, #1
 8000e48:	0c20      	lsrs	r0, r4, #16
 8000e4a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e4e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e56:	fb0e f003 	mul.w	r0, lr, r3
 8000e5a:	4288      	cmp	r0, r1
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x12c>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x12a>
 8000e68:	4288      	cmp	r0, r1
 8000e6a:	f200 80cb 	bhi.w	8001004 <__udivmoddi4+0x2c0>
 8000e6e:	4643      	mov	r3, r8
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e78:	fb07 1110 	mls	r1, r7, r0, r1
 8000e7c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e80:	fb0e fe00 	mul.w	lr, lr, r0
 8000e84:	45a6      	cmp	lr, r4
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x156>
 8000e88:	eb1c 0404 	adds.w	r4, ip, r4
 8000e8c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e90:	d202      	bcs.n	8000e98 <__udivmoddi4+0x154>
 8000e92:	45a6      	cmp	lr, r4
 8000e94:	f200 80bb 	bhi.w	800100e <__udivmoddi4+0x2ca>
 8000e98:	4608      	mov	r0, r1
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ea2:	e79c      	b.n	8000dde <__udivmoddi4+0x9a>
 8000ea4:	f1c6 0720 	rsb	r7, r6, #32
 8000ea8:	40b3      	lsls	r3, r6
 8000eaa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eb2:	fa20 f407 	lsr.w	r4, r0, r7
 8000eb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eba:	431c      	orrs	r4, r3
 8000ebc:	40f9      	lsrs	r1, r7
 8000ebe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ec2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eca:	0c20      	lsrs	r0, r4, #16
 8000ecc:	fa1f fe8c 	uxth.w	lr, ip
 8000ed0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ed4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ed8:	fb08 f00e 	mul.w	r0, r8, lr
 8000edc:	4288      	cmp	r0, r1
 8000ede:	fa02 f206 	lsl.w	r2, r2, r6
 8000ee2:	d90b      	bls.n	8000efc <__udivmoddi4+0x1b8>
 8000ee4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000eec:	f080 8088 	bcs.w	8001000 <__udivmoddi4+0x2bc>
 8000ef0:	4288      	cmp	r0, r1
 8000ef2:	f240 8085 	bls.w	8001000 <__udivmoddi4+0x2bc>
 8000ef6:	f1a8 0802 	sub.w	r8, r8, #2
 8000efa:	4461      	add	r1, ip
 8000efc:	1a09      	subs	r1, r1, r0
 8000efe:	b2a4      	uxth	r4, r4
 8000f00:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f04:	fb09 1110 	mls	r1, r9, r0, r1
 8000f08:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f10:	458e      	cmp	lr, r1
 8000f12:	d908      	bls.n	8000f26 <__udivmoddi4+0x1e2>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000f1c:	d26c      	bcs.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f1e:	458e      	cmp	lr, r1
 8000f20:	d96a      	bls.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f22:	3802      	subs	r0, #2
 8000f24:	4461      	add	r1, ip
 8000f26:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f2a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f2e:	eba1 010e 	sub.w	r1, r1, lr
 8000f32:	42a1      	cmp	r1, r4
 8000f34:	46c8      	mov	r8, r9
 8000f36:	46a6      	mov	lr, r4
 8000f38:	d356      	bcc.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f3a:	d053      	beq.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f3c:	b15d      	cbz	r5, 8000f56 <__udivmoddi4+0x212>
 8000f3e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f42:	eb61 010e 	sbc.w	r1, r1, lr
 8000f46:	fa01 f707 	lsl.w	r7, r1, r7
 8000f4a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f4e:	40f1      	lsrs	r1, r6
 8000f50:	431f      	orrs	r7, r3
 8000f52:	e9c5 7100 	strd	r7, r1, [r5]
 8000f56:	2600      	movs	r6, #0
 8000f58:	4631      	mov	r1, r6
 8000f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5e:	f1c2 0320 	rsb	r3, r2, #32
 8000f62:	40d8      	lsrs	r0, r3
 8000f64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f68:	fa21 f303 	lsr.w	r3, r1, r3
 8000f6c:	4091      	lsls	r1, r2
 8000f6e:	4301      	orrs	r1, r0
 8000f70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f74:	fa1f fe8c 	uxth.w	lr, ip
 8000f78:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f7c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f80:	0c0b      	lsrs	r3, r1, #16
 8000f82:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f86:	fb00 f60e 	mul.w	r6, r0, lr
 8000f8a:	429e      	cmp	r6, r3
 8000f8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f90:	d908      	bls.n	8000fa4 <__udivmoddi4+0x260>
 8000f92:	eb1c 0303 	adds.w	r3, ip, r3
 8000f96:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f9a:	d22f      	bcs.n	8000ffc <__udivmoddi4+0x2b8>
 8000f9c:	429e      	cmp	r6, r3
 8000f9e:	d92d      	bls.n	8000ffc <__udivmoddi4+0x2b8>
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	4463      	add	r3, ip
 8000fa4:	1b9b      	subs	r3, r3, r6
 8000fa6:	b289      	uxth	r1, r1
 8000fa8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fac:	fb07 3316 	mls	r3, r7, r6, r3
 8000fb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fb8:	428b      	cmp	r3, r1
 8000fba:	d908      	bls.n	8000fce <__udivmoddi4+0x28a>
 8000fbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000fc4:	d216      	bcs.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fc6:	428b      	cmp	r3, r1
 8000fc8:	d914      	bls.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fca:	3e02      	subs	r6, #2
 8000fcc:	4461      	add	r1, ip
 8000fce:	1ac9      	subs	r1, r1, r3
 8000fd0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fd4:	e738      	b.n	8000e48 <__udivmoddi4+0x104>
 8000fd6:	462e      	mov	r6, r5
 8000fd8:	4628      	mov	r0, r5
 8000fda:	e705      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	e6e3      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	e6f8      	b.n	8000dd6 <__udivmoddi4+0x92>
 8000fe4:	454b      	cmp	r3, r9
 8000fe6:	d2a9      	bcs.n	8000f3c <__udivmoddi4+0x1f8>
 8000fe8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fec:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	e7a3      	b.n	8000f3c <__udivmoddi4+0x1f8>
 8000ff4:	4646      	mov	r6, r8
 8000ff6:	e7ea      	b.n	8000fce <__udivmoddi4+0x28a>
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	e794      	b.n	8000f26 <__udivmoddi4+0x1e2>
 8000ffc:	4640      	mov	r0, r8
 8000ffe:	e7d1      	b.n	8000fa4 <__udivmoddi4+0x260>
 8001000:	46d0      	mov	r8, sl
 8001002:	e77b      	b.n	8000efc <__udivmoddi4+0x1b8>
 8001004:	3b02      	subs	r3, #2
 8001006:	4461      	add	r1, ip
 8001008:	e732      	b.n	8000e70 <__udivmoddi4+0x12c>
 800100a:	4630      	mov	r0, r6
 800100c:	e709      	b.n	8000e22 <__udivmoddi4+0xde>
 800100e:	4464      	add	r4, ip
 8001010:	3802      	subs	r0, #2
 8001012:	e742      	b.n	8000e9a <__udivmoddi4+0x156>

08001014 <__aeabi_idiv0>:
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800101c:	f000 fca3 	bl	8001966 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001020:	f000 f81a 	bl	8001058 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001024:	f000 f9b0 	bl	8001388 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001028:	f000 f892 	bl	8001150 <MX_TIM1_Init>
  MX_TIM2_Init();
 800102c:	f000 f93c 	bl	80012a8 <MX_TIM2_Init>
  MX_LPUART1_UART_Init();
 8001030:	f000 f862 	bl	80010f8 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */

  //half cycle period
  TIM1->CCR1=50;
 8001034:	4b05      	ldr	r3, [pc, #20]	; (800104c <main+0x34>)
 8001036:	2232      	movs	r2, #50	; 0x32
 8001038:	635a      	str	r2, [r3, #52]	; 0x34

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800103a:	2100      	movs	r1, #0
 800103c:	4804      	ldr	r0, [pc, #16]	; (8001050 <main+0x38>)
 800103e:	f002 fbdf 	bl	8003800 <HAL_TIM_PWM_Start>

  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8001042:	2100      	movs	r1, #0
 8001044:	4803      	ldr	r0, [pc, #12]	; (8001054 <main+0x3c>)
 8001046:	f002 fd43 	bl	8003ad0 <HAL_TIM_IC_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800104a:	e7fe      	b.n	800104a <main+0x32>
 800104c:	40012c00 	.word	0x40012c00
 8001050:	20000280 	.word	0x20000280
 8001054:	200002cc 	.word	0x200002cc

08001058 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b096      	sub	sp, #88	; 0x58
 800105c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800105e:	f107 0314 	add.w	r3, r7, #20
 8001062:	2244      	movs	r2, #68	; 0x44
 8001064:	2100      	movs	r1, #0
 8001066:	4618      	mov	r0, r3
 8001068:	f004 fe6e 	bl	8005d48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800106c:	463b      	mov	r3, r7
 800106e:	2200      	movs	r2, #0
 8001070:	601a      	str	r2, [r3, #0]
 8001072:	605a      	str	r2, [r3, #4]
 8001074:	609a      	str	r2, [r3, #8]
 8001076:	60da      	str	r2, [r3, #12]
 8001078:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800107a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800107e:	f000 ff99 	bl	8001fb4 <HAL_PWREx_ControlVoltageScaling>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001088:	f000 fa20 	bl	80014cc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800108c:	2301      	movs	r3, #1
 800108e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001090:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001094:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001096:	2302      	movs	r3, #2
 8001098:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800109a:	2303      	movs	r3, #3
 800109c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800109e:	2301      	movs	r3, #1
 80010a0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 80010a2:	2314      	movs	r3, #20
 80010a4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010a6:	2302      	movs	r3, #2
 80010a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80010aa:	2302      	movs	r3, #2
 80010ac:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80010ae:	2302      	movs	r3, #2
 80010b0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010b2:	f107 0314 	add.w	r3, r7, #20
 80010b6:	4618      	mov	r0, r3
 80010b8:	f000 ffe2 	bl	8002080 <HAL_RCC_OscConfig>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80010c2:	f000 fa03 	bl	80014cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010c6:	230f      	movs	r3, #15
 80010c8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010ca:	2303      	movs	r3, #3
 80010cc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010ce:	2300      	movs	r3, #0
 80010d0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010d8:	2300      	movs	r3, #0
 80010da:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80010dc:	463b      	mov	r3, r7
 80010de:	2104      	movs	r1, #4
 80010e0:	4618      	mov	r0, r3
 80010e2:	f001 fbe7 	bl	80028b4 <HAL_RCC_ClockConfig>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80010ec:	f000 f9ee 	bl	80014cc <Error_Handler>
  }
}
 80010f0:	bf00      	nop
 80010f2:	3758      	adds	r7, #88	; 0x58
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80010fc:	4b12      	ldr	r3, [pc, #72]	; (8001148 <MX_LPUART1_UART_Init+0x50>)
 80010fe:	4a13      	ldr	r2, [pc, #76]	; (800114c <MX_LPUART1_UART_Init+0x54>)
 8001100:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001102:	4b11      	ldr	r3, [pc, #68]	; (8001148 <MX_LPUART1_UART_Init+0x50>)
 8001104:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001108:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800110a:	4b0f      	ldr	r3, [pc, #60]	; (8001148 <MX_LPUART1_UART_Init+0x50>)
 800110c:	2200      	movs	r2, #0
 800110e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001110:	4b0d      	ldr	r3, [pc, #52]	; (8001148 <MX_LPUART1_UART_Init+0x50>)
 8001112:	2200      	movs	r2, #0
 8001114:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001116:	4b0c      	ldr	r3, [pc, #48]	; (8001148 <MX_LPUART1_UART_Init+0x50>)
 8001118:	2200      	movs	r2, #0
 800111a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800111c:	4b0a      	ldr	r3, [pc, #40]	; (8001148 <MX_LPUART1_UART_Init+0x50>)
 800111e:	220c      	movs	r2, #12
 8001120:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001122:	4b09      	ldr	r3, [pc, #36]	; (8001148 <MX_LPUART1_UART_Init+0x50>)
 8001124:	2200      	movs	r2, #0
 8001126:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001128:	4b07      	ldr	r3, [pc, #28]	; (8001148 <MX_LPUART1_UART_Init+0x50>)
 800112a:	2200      	movs	r2, #0
 800112c:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800112e:	4b06      	ldr	r3, [pc, #24]	; (8001148 <MX_LPUART1_UART_Init+0x50>)
 8001130:	2200      	movs	r2, #0
 8001132:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001134:	4804      	ldr	r0, [pc, #16]	; (8001148 <MX_LPUART1_UART_Init+0x50>)
 8001136:	f004 f893 	bl	8005260 <HAL_UART_Init>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8001140:	f000 f9c4 	bl	80014cc <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001144:	bf00      	nop
 8001146:	bd80      	pop	{r7, pc}
 8001148:	200001fc 	.word	0x200001fc
 800114c:	40008000 	.word	0x40008000

08001150 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b09a      	sub	sp, #104	; 0x68
 8001154:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001156:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800115a:	2200      	movs	r2, #0
 800115c:	601a      	str	r2, [r3, #0]
 800115e:	605a      	str	r2, [r3, #4]
 8001160:	609a      	str	r2, [r3, #8]
 8001162:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001164:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001170:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	605a      	str	r2, [r3, #4]
 800117a:	609a      	str	r2, [r3, #8]
 800117c:	60da      	str	r2, [r3, #12]
 800117e:	611a      	str	r2, [r3, #16]
 8001180:	615a      	str	r2, [r3, #20]
 8001182:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001184:	1d3b      	adds	r3, r7, #4
 8001186:	222c      	movs	r2, #44	; 0x2c
 8001188:	2100      	movs	r1, #0
 800118a:	4618      	mov	r0, r3
 800118c:	f004 fddc 	bl	8005d48 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001190:	4b43      	ldr	r3, [pc, #268]	; (80012a0 <MX_TIM1_Init+0x150>)
 8001192:	4a44      	ldr	r2, [pc, #272]	; (80012a4 <MX_TIM1_Init+0x154>)
 8001194:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 180-1;
 8001196:	4b42      	ldr	r3, [pc, #264]	; (80012a0 <MX_TIM1_Init+0x150>)
 8001198:	22b3      	movs	r2, #179	; 0xb3
 800119a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800119c:	4b40      	ldr	r3, [pc, #256]	; (80012a0 <MX_TIM1_Init+0x150>)
 800119e:	2200      	movs	r2, #0
 80011a0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 80011a2:	4b3f      	ldr	r3, [pc, #252]	; (80012a0 <MX_TIM1_Init+0x150>)
 80011a4:	2263      	movs	r2, #99	; 0x63
 80011a6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011a8:	4b3d      	ldr	r3, [pc, #244]	; (80012a0 <MX_TIM1_Init+0x150>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011ae:	4b3c      	ldr	r3, [pc, #240]	; (80012a0 <MX_TIM1_Init+0x150>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011b4:	4b3a      	ldr	r3, [pc, #232]	; (80012a0 <MX_TIM1_Init+0x150>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80011ba:	4839      	ldr	r0, [pc, #228]	; (80012a0 <MX_TIM1_Init+0x150>)
 80011bc:	f002 fa68 	bl	8003690 <HAL_TIM_Base_Init>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80011c6:	f000 f981 	bl	80014cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011ce:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80011d0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80011d4:	4619      	mov	r1, r3
 80011d6:	4832      	ldr	r0, [pc, #200]	; (80012a0 <MX_TIM1_Init+0x150>)
 80011d8:	f003 f894 	bl	8004304 <HAL_TIM_ConfigClockSource>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80011e2:	f000 f973 	bl	80014cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80011e6:	482e      	ldr	r0, [pc, #184]	; (80012a0 <MX_TIM1_Init+0x150>)
 80011e8:	f002 faa9 	bl	800373e <HAL_TIM_PWM_Init>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80011f2:	f000 f96b 	bl	80014cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011f6:	2300      	movs	r3, #0
 80011f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80011fa:	2300      	movs	r3, #0
 80011fc:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011fe:	2300      	movs	r3, #0
 8001200:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001202:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001206:	4619      	mov	r1, r3
 8001208:	4825      	ldr	r0, [pc, #148]	; (80012a0 <MX_TIM1_Init+0x150>)
 800120a:	f003 ff05 	bl	8005018 <HAL_TIMEx_MasterConfigSynchronization>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8001214:	f000 f95a 	bl	80014cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001218:	2360      	movs	r3, #96	; 0x60
 800121a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800121c:	2300      	movs	r3, #0
 800121e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001220:	2300      	movs	r3, #0
 8001222:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001224:	2300      	movs	r3, #0
 8001226:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001228:	2300      	movs	r3, #0
 800122a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800122c:	2300      	movs	r3, #0
 800122e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001230:	2300      	movs	r3, #0
 8001232:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001234:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001238:	2200      	movs	r2, #0
 800123a:	4619      	mov	r1, r3
 800123c:	4818      	ldr	r0, [pc, #96]	; (80012a0 <MX_TIM1_Init+0x150>)
 800123e:	f002 ff4d 	bl	80040dc <HAL_TIM_PWM_ConfigChannel>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8001248:	f000 f940 	bl	80014cc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800124c:	2300      	movs	r3, #0
 800124e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001250:	2300      	movs	r3, #0
 8001252:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001254:	2300      	movs	r3, #0
 8001256:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001258:	2300      	movs	r3, #0
 800125a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800125c:	2300      	movs	r3, #0
 800125e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001260:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001264:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001266:	2300      	movs	r3, #0
 8001268:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800126a:	2300      	movs	r3, #0
 800126c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800126e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001272:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001274:	2300      	movs	r3, #0
 8001276:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001278:	2300      	movs	r3, #0
 800127a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800127c:	1d3b      	adds	r3, r7, #4
 800127e:	4619      	mov	r1, r3
 8001280:	4807      	ldr	r0, [pc, #28]	; (80012a0 <MX_TIM1_Init+0x150>)
 8001282:	f003 ff51 	bl	8005128 <HAL_TIMEx_ConfigBreakDeadTime>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 800128c:	f000 f91e 	bl	80014cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001290:	4803      	ldr	r0, [pc, #12]	; (80012a0 <MX_TIM1_Init+0x150>)
 8001292:	f000 fa01 	bl	8001698 <HAL_TIM_MspPostInit>

}
 8001296:	bf00      	nop
 8001298:	3768      	adds	r7, #104	; 0x68
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	20000280 	.word	0x20000280
 80012a4:	40012c00 	.word	0x40012c00

080012a8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b08c      	sub	sp, #48	; 0x30
 80012ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012ae:	f107 0320 	add.w	r3, r7, #32
 80012b2:	2200      	movs	r2, #0
 80012b4:	601a      	str	r2, [r3, #0]
 80012b6:	605a      	str	r2, [r3, #4]
 80012b8:	609a      	str	r2, [r3, #8]
 80012ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012bc:	f107 0314 	add.w	r3, r7, #20
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	605a      	str	r2, [r3, #4]
 80012c6:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80012c8:	1d3b      	adds	r3, r7, #4
 80012ca:	2200      	movs	r2, #0
 80012cc:	601a      	str	r2, [r3, #0]
 80012ce:	605a      	str	r2, [r3, #4]
 80012d0:	609a      	str	r2, [r3, #8]
 80012d2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012d4:	4b2b      	ldr	r3, [pc, #172]	; (8001384 <MX_TIM2_Init+0xdc>)
 80012d6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012da:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90;
 80012dc:	4b29      	ldr	r3, [pc, #164]	; (8001384 <MX_TIM2_Init+0xdc>)
 80012de:	225a      	movs	r2, #90	; 0x5a
 80012e0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012e2:	4b28      	ldr	r3, [pc, #160]	; (8001384 <MX_TIM2_Init+0xdc>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80012e8:	4b26      	ldr	r3, [pc, #152]	; (8001384 <MX_TIM2_Init+0xdc>)
 80012ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80012ee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012f0:	4b24      	ldr	r3, [pc, #144]	; (8001384 <MX_TIM2_Init+0xdc>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012f6:	4b23      	ldr	r3, [pc, #140]	; (8001384 <MX_TIM2_Init+0xdc>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012fc:	4821      	ldr	r0, [pc, #132]	; (8001384 <MX_TIM2_Init+0xdc>)
 80012fe:	f002 f9c7 	bl	8003690 <HAL_TIM_Base_Init>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8001308:	f000 f8e0 	bl	80014cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800130c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001310:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001312:	f107 0320 	add.w	r3, r7, #32
 8001316:	4619      	mov	r1, r3
 8001318:	481a      	ldr	r0, [pc, #104]	; (8001384 <MX_TIM2_Init+0xdc>)
 800131a:	f002 fff3 	bl	8004304 <HAL_TIM_ConfigClockSource>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001324:	f000 f8d2 	bl	80014cc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001328:	4816      	ldr	r0, [pc, #88]	; (8001384 <MX_TIM2_Init+0xdc>)
 800132a:	f002 fb6f 	bl	8003a0c <HAL_TIM_IC_Init>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001334:	f000 f8ca 	bl	80014cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001338:	2300      	movs	r3, #0
 800133a:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800133c:	2300      	movs	r3, #0
 800133e:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001340:	f107 0314 	add.w	r3, r7, #20
 8001344:	4619      	mov	r1, r3
 8001346:	480f      	ldr	r0, [pc, #60]	; (8001384 <MX_TIM2_Init+0xdc>)
 8001348:	f003 fe66 	bl	8005018 <HAL_TIMEx_MasterConfigSynchronization>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 8001352:	f000 f8bb 	bl	80014cc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001356:	2300      	movs	r3, #0
 8001358:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800135a:	2301      	movs	r3, #1
 800135c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800135e:	2300      	movs	r3, #0
 8001360:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001362:	2300      	movs	r3, #0
 8001364:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001366:	1d3b      	adds	r3, r7, #4
 8001368:	2200      	movs	r2, #0
 800136a:	4619      	mov	r1, r3
 800136c:	4805      	ldr	r0, [pc, #20]	; (8001384 <MX_TIM2_Init+0xdc>)
 800136e:	f002 fe18 	bl	8003fa2 <HAL_TIM_IC_ConfigChannel>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8001378:	f000 f8a8 	bl	80014cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800137c:	bf00      	nop
 800137e:	3730      	adds	r7, #48	; 0x30
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	200002cc 	.word	0x200002cc

08001388 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800138e:	4b1b      	ldr	r3, [pc, #108]	; (80013fc <MX_GPIO_Init+0x74>)
 8001390:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001392:	4a1a      	ldr	r2, [pc, #104]	; (80013fc <MX_GPIO_Init+0x74>)
 8001394:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001398:	64d3      	str	r3, [r2, #76]	; 0x4c
 800139a:	4b18      	ldr	r3, [pc, #96]	; (80013fc <MX_GPIO_Init+0x74>)
 800139c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800139e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a6:	4b15      	ldr	r3, [pc, #84]	; (80013fc <MX_GPIO_Init+0x74>)
 80013a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013aa:	4a14      	ldr	r2, [pc, #80]	; (80013fc <MX_GPIO_Init+0x74>)
 80013ac:	f043 0301 	orr.w	r3, r3, #1
 80013b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013b2:	4b12      	ldr	r3, [pc, #72]	; (80013fc <MX_GPIO_Init+0x74>)
 80013b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013b6:	f003 0301 	and.w	r3, r3, #1
 80013ba:	60bb      	str	r3, [r7, #8]
 80013bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013be:	4b0f      	ldr	r3, [pc, #60]	; (80013fc <MX_GPIO_Init+0x74>)
 80013c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013c2:	4a0e      	ldr	r2, [pc, #56]	; (80013fc <MX_GPIO_Init+0x74>)
 80013c4:	f043 0310 	orr.w	r3, r3, #16
 80013c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013ca:	4b0c      	ldr	r3, [pc, #48]	; (80013fc <MX_GPIO_Init+0x74>)
 80013cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ce:	f003 0310 	and.w	r3, r3, #16
 80013d2:	607b      	str	r3, [r7, #4]
 80013d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80013d6:	4b09      	ldr	r3, [pc, #36]	; (80013fc <MX_GPIO_Init+0x74>)
 80013d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013da:	4a08      	ldr	r2, [pc, #32]	; (80013fc <MX_GPIO_Init+0x74>)
 80013dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013e2:	4b06      	ldr	r3, [pc, #24]	; (80013fc <MX_GPIO_Init+0x74>)
 80013e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013ea:	603b      	str	r3, [r7, #0]
 80013ec:	683b      	ldr	r3, [r7, #0]
  HAL_PWREx_EnableVddIO2();
 80013ee:	f000 fe37 	bl	8002060 <HAL_PWREx_EnableVddIO2>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013f2:	bf00      	nop
 80013f4:	3710      	adds	r7, #16
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	40021000 	.word	0x40021000

08001400 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	7f1b      	ldrb	r3, [r3, #28]
 800140c:	2b01      	cmp	r3, #1
 800140e:	d14a      	bne.n	80014a6 <HAL_TIM_IC_CaptureCallback+0xa6>
		{
		printf("INTEPT IS ENABLE AND CALL BACK FUNCTION CALL\n");
 8001410:	4827      	ldr	r0, [pc, #156]	; (80014b0 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8001412:	f005 fb89 	bl	8006b28 <puts>
			if (Is_First_Captured==0) // if the first rising edge is not captured
 8001416:	4b27      	ldr	r3, [pc, #156]	; (80014b4 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d10a      	bne.n	8001434 <HAL_TIM_IC_CaptureCallback+0x34>
			{
				IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 800141e:	2100      	movs	r1, #0
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	f003 f839 	bl	8004498 <HAL_TIM_ReadCapturedValue>
 8001426:	4603      	mov	r3, r0
 8001428:	4a23      	ldr	r2, [pc, #140]	; (80014b8 <HAL_TIM_IC_CaptureCallback+0xb8>)
 800142a:	6013      	str	r3, [r2, #0]
				Is_First_Captured = 1;  // set the first captured as true
 800142c:	4b21      	ldr	r3, [pc, #132]	; (80014b4 <HAL_TIM_IC_CaptureCallback+0xb4>)
 800142e:	2201      	movs	r2, #1
 8001430:	601a      	str	r2, [r3, #0]

				__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
				Is_First_Captured = 0; // set it back to false
			}
		}
}
 8001432:	e038      	b.n	80014a6 <HAL_TIM_IC_CaptureCallback+0xa6>
				IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8001434:	2100      	movs	r1, #0
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	f003 f82e 	bl	8004498 <HAL_TIM_ReadCapturedValue>
 800143c:	4603      	mov	r3, r0
 800143e:	4a1f      	ldr	r2, [pc, #124]	; (80014bc <HAL_TIM_IC_CaptureCallback+0xbc>)
 8001440:	6013      	str	r3, [r2, #0]
				if (IC_Val2 > IC_Val1)
 8001442:	4b1e      	ldr	r3, [pc, #120]	; (80014bc <HAL_TIM_IC_CaptureCallback+0xbc>)
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	4b1c      	ldr	r3, [pc, #112]	; (80014b8 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	429a      	cmp	r2, r3
 800144c:	d907      	bls.n	800145e <HAL_TIM_IC_CaptureCallback+0x5e>
					Difference = IC_Val2-IC_Val1;
 800144e:	4b1b      	ldr	r3, [pc, #108]	; (80014bc <HAL_TIM_IC_CaptureCallback+0xbc>)
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	4b19      	ldr	r3, [pc, #100]	; (80014b8 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	1ad3      	subs	r3, r2, r3
 8001458:	4a19      	ldr	r2, [pc, #100]	; (80014c0 <HAL_TIM_IC_CaptureCallback+0xc0>)
 800145a:	6013      	str	r3, [r2, #0]
 800145c:	e00d      	b.n	800147a <HAL_TIM_IC_CaptureCallback+0x7a>
				else if (IC_Val1 > IC_Val2)
 800145e:	4b16      	ldr	r3, [pc, #88]	; (80014b8 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	4b16      	ldr	r3, [pc, #88]	; (80014bc <HAL_TIM_IC_CaptureCallback+0xbc>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	429a      	cmp	r2, r3
 8001468:	d907      	bls.n	800147a <HAL_TIM_IC_CaptureCallback+0x7a>
					Difference = (0xffffffff - IC_Val1) + IC_Val2;
 800146a:	4b14      	ldr	r3, [pc, #80]	; (80014bc <HAL_TIM_IC_CaptureCallback+0xbc>)
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	4b12      	ldr	r3, [pc, #72]	; (80014b8 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	1ad3      	subs	r3, r2, r3
 8001474:	3b01      	subs	r3, #1
 8001476:	4a12      	ldr	r2, [pc, #72]	; (80014c0 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8001478:	6013      	str	r3, [r2, #0]
				float refClock = TIMCLOCK/(PRESCALAR);
 800147a:	4b12      	ldr	r3, [pc, #72]	; (80014c4 <HAL_TIM_IC_CaptureCallback+0xc4>)
 800147c:	60fb      	str	r3, [r7, #12]
				frequency = refClock/Difference;
 800147e:	4b10      	ldr	r3, [pc, #64]	; (80014c0 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	ee07 3a90 	vmov	s15, r3
 8001486:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800148a:	edd7 6a03 	vldr	s13, [r7, #12]
 800148e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001492:	4b0d      	ldr	r3, [pc, #52]	; (80014c8 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8001494:	edc3 7a00 	vstr	s15, [r3]
				__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	2200      	movs	r2, #0
 800149e:	625a      	str	r2, [r3, #36]	; 0x24
				Is_First_Captured = 0; // set it back to false
 80014a0:	4b04      	ldr	r3, [pc, #16]	; (80014b4 <HAL_TIM_IC_CaptureCallback+0xb4>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	601a      	str	r2, [r3, #0]
}
 80014a6:	bf00      	nop
 80014a8:	3710      	adds	r7, #16
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	0800a738 	.word	0x0800a738
 80014b4:	20000324 	.word	0x20000324
 80014b8:	20000318 	.word	0x20000318
 80014bc:	2000031c 	.word	0x2000031c
 80014c0:	20000320 	.word	0x20000320
 80014c4:	49742400 	.word	0x49742400
 80014c8:	20000328 	.word	0x20000328

080014cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014d0:	b672      	cpsid	i
}
 80014d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014d4:	e7fe      	b.n	80014d4 <Error_Handler+0x8>
	...

080014d8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014de:	4b0f      	ldr	r3, [pc, #60]	; (800151c <HAL_MspInit+0x44>)
 80014e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014e2:	4a0e      	ldr	r2, [pc, #56]	; (800151c <HAL_MspInit+0x44>)
 80014e4:	f043 0301 	orr.w	r3, r3, #1
 80014e8:	6613      	str	r3, [r2, #96]	; 0x60
 80014ea:	4b0c      	ldr	r3, [pc, #48]	; (800151c <HAL_MspInit+0x44>)
 80014ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014ee:	f003 0301 	and.w	r3, r3, #1
 80014f2:	607b      	str	r3, [r7, #4]
 80014f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014f6:	4b09      	ldr	r3, [pc, #36]	; (800151c <HAL_MspInit+0x44>)
 80014f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014fa:	4a08      	ldr	r2, [pc, #32]	; (800151c <HAL_MspInit+0x44>)
 80014fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001500:	6593      	str	r3, [r2, #88]	; 0x58
 8001502:	4b06      	ldr	r3, [pc, #24]	; (800151c <HAL_MspInit+0x44>)
 8001504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800150a:	603b      	str	r3, [r7, #0]
 800150c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800150e:	bf00      	nop
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	40021000 	.word	0x40021000

08001520 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b0ac      	sub	sp, #176	; 0xb0
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001528:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	605a      	str	r2, [r3, #4]
 8001532:	609a      	str	r2, [r3, #8]
 8001534:	60da      	str	r2, [r3, #12]
 8001536:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001538:	f107 0310 	add.w	r3, r7, #16
 800153c:	228c      	movs	r2, #140	; 0x8c
 800153e:	2100      	movs	r1, #0
 8001540:	4618      	mov	r0, r3
 8001542:	f004 fc01 	bl	8005d48 <memset>
  if(huart->Instance==LPUART1)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a22      	ldr	r2, [pc, #136]	; (80015d4 <HAL_UART_MspInit+0xb4>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d13d      	bne.n	80015cc <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001550:	2320      	movs	r3, #32
 8001552:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001554:	2300      	movs	r3, #0
 8001556:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001558:	f107 0310 	add.w	r3, r7, #16
 800155c:	4618      	mov	r0, r3
 800155e:	f001 fbcd 	bl	8002cfc <HAL_RCCEx_PeriphCLKConfig>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001568:	f7ff ffb0 	bl	80014cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800156c:	4b1a      	ldr	r3, [pc, #104]	; (80015d8 <HAL_UART_MspInit+0xb8>)
 800156e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001570:	4a19      	ldr	r2, [pc, #100]	; (80015d8 <HAL_UART_MspInit+0xb8>)
 8001572:	f043 0301 	orr.w	r3, r3, #1
 8001576:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001578:	4b17      	ldr	r3, [pc, #92]	; (80015d8 <HAL_UART_MspInit+0xb8>)
 800157a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800157c:	f003 0301 	and.w	r3, r3, #1
 8001580:	60fb      	str	r3, [r7, #12]
 8001582:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001584:	4b14      	ldr	r3, [pc, #80]	; (80015d8 <HAL_UART_MspInit+0xb8>)
 8001586:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001588:	4a13      	ldr	r2, [pc, #76]	; (80015d8 <HAL_UART_MspInit+0xb8>)
 800158a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800158e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001590:	4b11      	ldr	r3, [pc, #68]	; (80015d8 <HAL_UART_MspInit+0xb8>)
 8001592:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001594:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001598:	60bb      	str	r3, [r7, #8]
 800159a:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 800159c:	f000 fd60 	bl	8002060 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80015a0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80015a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a8:	2302      	movs	r3, #2
 80015aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ae:	2300      	movs	r3, #0
 80015b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015b4:	2303      	movs	r3, #3
 80015b6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80015ba:	2308      	movs	r3, #8
 80015bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015c0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80015c4:	4619      	mov	r1, r3
 80015c6:	4805      	ldr	r0, [pc, #20]	; (80015dc <HAL_UART_MspInit+0xbc>)
 80015c8:	f000 fb54 	bl	8001c74 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80015cc:	bf00      	nop
 80015ce:	37b0      	adds	r7, #176	; 0xb0
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	40008000 	.word	0x40008000
 80015d8:	40021000 	.word	0x40021000
 80015dc:	48001800 	.word	0x48001800

080015e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b08a      	sub	sp, #40	; 0x28
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e8:	f107 0314 	add.w	r3, r7, #20
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]
 80015f0:	605a      	str	r2, [r3, #4]
 80015f2:	609a      	str	r2, [r3, #8]
 80015f4:	60da      	str	r2, [r3, #12]
 80015f6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a24      	ldr	r2, [pc, #144]	; (8001690 <HAL_TIM_Base_MspInit+0xb0>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d10c      	bne.n	800161c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001602:	4b24      	ldr	r3, [pc, #144]	; (8001694 <HAL_TIM_Base_MspInit+0xb4>)
 8001604:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001606:	4a23      	ldr	r2, [pc, #140]	; (8001694 <HAL_TIM_Base_MspInit+0xb4>)
 8001608:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800160c:	6613      	str	r3, [r2, #96]	; 0x60
 800160e:	4b21      	ldr	r3, [pc, #132]	; (8001694 <HAL_TIM_Base_MspInit+0xb4>)
 8001610:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001612:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001616:	613b      	str	r3, [r7, #16]
 8001618:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800161a:	e035      	b.n	8001688 <HAL_TIM_Base_MspInit+0xa8>
  else if(htim_base->Instance==TIM2)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001624:	d130      	bne.n	8001688 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001626:	4b1b      	ldr	r3, [pc, #108]	; (8001694 <HAL_TIM_Base_MspInit+0xb4>)
 8001628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800162a:	4a1a      	ldr	r2, [pc, #104]	; (8001694 <HAL_TIM_Base_MspInit+0xb4>)
 800162c:	f043 0301 	orr.w	r3, r3, #1
 8001630:	6593      	str	r3, [r2, #88]	; 0x58
 8001632:	4b18      	ldr	r3, [pc, #96]	; (8001694 <HAL_TIM_Base_MspInit+0xb4>)
 8001634:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001636:	f003 0301 	and.w	r3, r3, #1
 800163a:	60fb      	str	r3, [r7, #12]
 800163c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800163e:	4b15      	ldr	r3, [pc, #84]	; (8001694 <HAL_TIM_Base_MspInit+0xb4>)
 8001640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001642:	4a14      	ldr	r2, [pc, #80]	; (8001694 <HAL_TIM_Base_MspInit+0xb4>)
 8001644:	f043 0301 	orr.w	r3, r3, #1
 8001648:	64d3      	str	r3, [r2, #76]	; 0x4c
 800164a:	4b12      	ldr	r3, [pc, #72]	; (8001694 <HAL_TIM_Base_MspInit+0xb4>)
 800164c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800164e:	f003 0301 	and.w	r3, r3, #1
 8001652:	60bb      	str	r3, [r7, #8]
 8001654:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001656:	2301      	movs	r3, #1
 8001658:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800165a:	2302      	movs	r3, #2
 800165c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165e:	2300      	movs	r3, #0
 8001660:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001662:	2300      	movs	r3, #0
 8001664:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001666:	2301      	movs	r3, #1
 8001668:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800166a:	f107 0314 	add.w	r3, r7, #20
 800166e:	4619      	mov	r1, r3
 8001670:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001674:	f000 fafe 	bl	8001c74 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001678:	2200      	movs	r2, #0
 800167a:	2100      	movs	r1, #0
 800167c:	201c      	movs	r0, #28
 800167e:	f000 fac2 	bl	8001c06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001682:	201c      	movs	r0, #28
 8001684:	f000 fadb 	bl	8001c3e <HAL_NVIC_EnableIRQ>
}
 8001688:	bf00      	nop
 800168a:	3728      	adds	r7, #40	; 0x28
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	40012c00 	.word	0x40012c00
 8001694:	40021000 	.word	0x40021000

08001698 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b088      	sub	sp, #32
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a0:	f107 030c 	add.w	r3, r7, #12
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	605a      	str	r2, [r3, #4]
 80016aa:	609a      	str	r2, [r3, #8]
 80016ac:	60da      	str	r2, [r3, #12]
 80016ae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a11      	ldr	r2, [pc, #68]	; (80016fc <HAL_TIM_MspPostInit+0x64>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d11c      	bne.n	80016f4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80016ba:	4b11      	ldr	r3, [pc, #68]	; (8001700 <HAL_TIM_MspPostInit+0x68>)
 80016bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016be:	4a10      	ldr	r2, [pc, #64]	; (8001700 <HAL_TIM_MspPostInit+0x68>)
 80016c0:	f043 0310 	orr.w	r3, r3, #16
 80016c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016c6:	4b0e      	ldr	r3, [pc, #56]	; (8001700 <HAL_TIM_MspPostInit+0x68>)
 80016c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ca:	f003 0310 	and.w	r3, r3, #16
 80016ce:	60bb      	str	r3, [r7, #8]
 80016d0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80016d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016d6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d8:	2302      	movs	r3, #2
 80016da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016dc:	2300      	movs	r3, #0
 80016de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e0:	2300      	movs	r3, #0
 80016e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80016e4:	2301      	movs	r3, #1
 80016e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016e8:	f107 030c 	add.w	r3, r7, #12
 80016ec:	4619      	mov	r1, r3
 80016ee:	4805      	ldr	r0, [pc, #20]	; (8001704 <HAL_TIM_MspPostInit+0x6c>)
 80016f0:	f000 fac0 	bl	8001c74 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80016f4:	bf00      	nop
 80016f6:	3720      	adds	r7, #32
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	40012c00 	.word	0x40012c00
 8001700:	40021000 	.word	0x40021000
 8001704:	48001000 	.word	0x48001000

08001708 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800170c:	e7fe      	b.n	800170c <NMI_Handler+0x4>

0800170e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800170e:	b480      	push	{r7}
 8001710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001712:	e7fe      	b.n	8001712 <HardFault_Handler+0x4>

08001714 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001718:	e7fe      	b.n	8001718 <MemManage_Handler+0x4>

0800171a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800171a:	b480      	push	{r7}
 800171c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800171e:	e7fe      	b.n	800171e <BusFault_Handler+0x4>

08001720 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001724:	e7fe      	b.n	8001724 <UsageFault_Handler+0x4>

08001726 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001726:	b480      	push	{r7}
 8001728:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800172a:	bf00      	nop
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr

08001734 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001738:	bf00      	nop
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr

08001742 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001742:	b480      	push	{r7}
 8001744:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001746:	bf00      	nop
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr

08001750 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001754:	f000 f95c 	bl	8001a10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001758:	bf00      	nop
 800175a:	bd80      	pop	{r7, pc}

0800175c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001760:	4802      	ldr	r0, [pc, #8]	; (800176c <TIM2_IRQHandler+0x10>)
 8001762:	f002 faff 	bl	8003d64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001766:	bf00      	nop
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	200002cc 	.word	0x200002cc

08001770 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  return 1;
 8001774:	2301      	movs	r3, #1
}
 8001776:	4618      	mov	r0, r3
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr

08001780 <_kill>:

int _kill(int pid, int sig)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800178a:	f004 fab3 	bl	8005cf4 <__errno>
 800178e:	4603      	mov	r3, r0
 8001790:	2216      	movs	r2, #22
 8001792:	601a      	str	r2, [r3, #0]
  return -1;
 8001794:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001798:	4618      	mov	r0, r3
 800179a:	3708      	adds	r7, #8
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}

080017a0 <_exit>:

void _exit (int status)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80017a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f7ff ffe7 	bl	8001780 <_kill>
  while (1) {}    /* Make sure we hang here */
 80017b2:	e7fe      	b.n	80017b2 <_exit+0x12>

080017b4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b086      	sub	sp, #24
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	60f8      	str	r0, [r7, #12]
 80017bc:	60b9      	str	r1, [r7, #8]
 80017be:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017c0:	2300      	movs	r3, #0
 80017c2:	617b      	str	r3, [r7, #20]
 80017c4:	e00a      	b.n	80017dc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80017c6:	f3af 8000 	nop.w
 80017ca:	4601      	mov	r1, r0
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	1c5a      	adds	r2, r3, #1
 80017d0:	60ba      	str	r2, [r7, #8]
 80017d2:	b2ca      	uxtb	r2, r1
 80017d4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	3301      	adds	r3, #1
 80017da:	617b      	str	r3, [r7, #20]
 80017dc:	697a      	ldr	r2, [r7, #20]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	429a      	cmp	r2, r3
 80017e2:	dbf0      	blt.n	80017c6 <_read+0x12>
  }

  return len;
 80017e4:	687b      	ldr	r3, [r7, #4]
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3718      	adds	r7, #24
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
	...

080017f0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	60f8      	str	r0, [r7, #12]
 80017f8:	60b9      	str	r1, [r7, #8]
 80017fa:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&hlpuart1, (uint8_t *)ptr, len,HAL_MAX_DELAY);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	b29a      	uxth	r2, r3
 8001800:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001804:	68b9      	ldr	r1, [r7, #8]
 8001806:	4804      	ldr	r0, [pc, #16]	; (8001818 <_write+0x28>)
 8001808:	f003 fd78 	bl	80052fc <HAL_UART_Transmit>

						return len;
 800180c:	687b      	ldr	r3, [r7, #4]
}
 800180e:	4618      	mov	r0, r3
 8001810:	3710      	adds	r7, #16
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	200001fc 	.word	0x200001fc

0800181c <_close>:

int _close(int file)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001824:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001828:	4618      	mov	r0, r3
 800182a:	370c      	adds	r7, #12
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr

08001834 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001844:	605a      	str	r2, [r3, #4]
  return 0;
 8001846:	2300      	movs	r3, #0
}
 8001848:	4618      	mov	r0, r3
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr

08001854 <_isatty>:

int _isatty(int file)
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800185c:	2301      	movs	r3, #1
}
 800185e:	4618      	mov	r0, r3
 8001860:	370c      	adds	r7, #12
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr

0800186a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800186a:	b480      	push	{r7}
 800186c:	b085      	sub	sp, #20
 800186e:	af00      	add	r7, sp, #0
 8001870:	60f8      	str	r0, [r7, #12]
 8001872:	60b9      	str	r1, [r7, #8]
 8001874:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001876:	2300      	movs	r3, #0
}
 8001878:	4618      	mov	r0, r3
 800187a:	3714      	adds	r7, #20
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr

08001884 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b086      	sub	sp, #24
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800188c:	4a14      	ldr	r2, [pc, #80]	; (80018e0 <_sbrk+0x5c>)
 800188e:	4b15      	ldr	r3, [pc, #84]	; (80018e4 <_sbrk+0x60>)
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001898:	4b13      	ldr	r3, [pc, #76]	; (80018e8 <_sbrk+0x64>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d102      	bne.n	80018a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018a0:	4b11      	ldr	r3, [pc, #68]	; (80018e8 <_sbrk+0x64>)
 80018a2:	4a12      	ldr	r2, [pc, #72]	; (80018ec <_sbrk+0x68>)
 80018a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018a6:	4b10      	ldr	r3, [pc, #64]	; (80018e8 <_sbrk+0x64>)
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4413      	add	r3, r2
 80018ae:	693a      	ldr	r2, [r7, #16]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d207      	bcs.n	80018c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018b4:	f004 fa1e 	bl	8005cf4 <__errno>
 80018b8:	4603      	mov	r3, r0
 80018ba:	220c      	movs	r2, #12
 80018bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018c2:	e009      	b.n	80018d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018c4:	4b08      	ldr	r3, [pc, #32]	; (80018e8 <_sbrk+0x64>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018ca:	4b07      	ldr	r3, [pc, #28]	; (80018e8 <_sbrk+0x64>)
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4413      	add	r3, r2
 80018d2:	4a05      	ldr	r2, [pc, #20]	; (80018e8 <_sbrk+0x64>)
 80018d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018d6:	68fb      	ldr	r3, [r7, #12]
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3718      	adds	r7, #24
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	20050000 	.word	0x20050000
 80018e4:	00000400 	.word	0x00000400
 80018e8:	2000032c 	.word	0x2000032c
 80018ec:	20000348 	.word	0x20000348

080018f0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80018f4:	4b06      	ldr	r3, [pc, #24]	; (8001910 <SystemInit+0x20>)
 80018f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018fa:	4a05      	ldr	r2, [pc, #20]	; (8001910 <SystemInit+0x20>)
 80018fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001900:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001904:	bf00      	nop
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	e000ed00 	.word	0xe000ed00

08001914 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001914:	f8df d034 	ldr.w	sp, [pc, #52]	; 800194c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001918:	f7ff ffea 	bl	80018f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800191c:	480c      	ldr	r0, [pc, #48]	; (8001950 <LoopForever+0x6>)
  ldr r1, =_edata
 800191e:	490d      	ldr	r1, [pc, #52]	; (8001954 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001920:	4a0d      	ldr	r2, [pc, #52]	; (8001958 <LoopForever+0xe>)
  movs r3, #0
 8001922:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001924:	e002      	b.n	800192c <LoopCopyDataInit>

08001926 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001926:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001928:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800192a:	3304      	adds	r3, #4

0800192c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800192c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800192e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001930:	d3f9      	bcc.n	8001926 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001932:	4a0a      	ldr	r2, [pc, #40]	; (800195c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001934:	4c0a      	ldr	r4, [pc, #40]	; (8001960 <LoopForever+0x16>)
  movs r3, #0
 8001936:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001938:	e001      	b.n	800193e <LoopFillZerobss>

0800193a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800193a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800193c:	3204      	adds	r2, #4

0800193e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800193e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001940:	d3fb      	bcc.n	800193a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001942:	f004 f9dd 	bl	8005d00 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001946:	f7ff fb67 	bl	8001018 <main>

0800194a <LoopForever>:

LoopForever:
    b LoopForever
 800194a:	e7fe      	b.n	800194a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800194c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001950:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001954:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001958:	0800ac6c 	.word	0x0800ac6c
  ldr r2, =_sbss
 800195c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001960:	20000344 	.word	0x20000344

08001964 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001964:	e7fe      	b.n	8001964 <ADC1_2_IRQHandler>

08001966 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001966:	b580      	push	{r7, lr}
 8001968:	b082      	sub	sp, #8
 800196a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800196c:	2300      	movs	r3, #0
 800196e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001970:	2003      	movs	r0, #3
 8001972:	f000 f93d 	bl	8001bf0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001976:	2000      	movs	r0, #0
 8001978:	f000 f80e 	bl	8001998 <HAL_InitTick>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d002      	beq.n	8001988 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	71fb      	strb	r3, [r7, #7]
 8001986:	e001      	b.n	800198c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001988:	f7ff fda6 	bl	80014d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800198c:	79fb      	ldrb	r3, [r7, #7]
}
 800198e:	4618      	mov	r0, r3
 8001990:	3708      	adds	r7, #8
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
	...

08001998 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80019a0:	2300      	movs	r3, #0
 80019a2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80019a4:	4b17      	ldr	r3, [pc, #92]	; (8001a04 <HAL_InitTick+0x6c>)
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d023      	beq.n	80019f4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80019ac:	4b16      	ldr	r3, [pc, #88]	; (8001a08 <HAL_InitTick+0x70>)
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	4b14      	ldr	r3, [pc, #80]	; (8001a04 <HAL_InitTick+0x6c>)
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	4619      	mov	r1, r3
 80019b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80019be:	fbb2 f3f3 	udiv	r3, r2, r3
 80019c2:	4618      	mov	r0, r3
 80019c4:	f000 f949 	bl	8001c5a <HAL_SYSTICK_Config>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d10f      	bne.n	80019ee <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2b0f      	cmp	r3, #15
 80019d2:	d809      	bhi.n	80019e8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019d4:	2200      	movs	r2, #0
 80019d6:	6879      	ldr	r1, [r7, #4]
 80019d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019dc:	f000 f913 	bl	8001c06 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80019e0:	4a0a      	ldr	r2, [pc, #40]	; (8001a0c <HAL_InitTick+0x74>)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6013      	str	r3, [r2, #0]
 80019e6:	e007      	b.n	80019f8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	73fb      	strb	r3, [r7, #15]
 80019ec:	e004      	b.n	80019f8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	73fb      	strb	r3, [r7, #15]
 80019f2:	e001      	b.n	80019f8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80019f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3710      	adds	r7, #16
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	20000008 	.word	0x20000008
 8001a08:	20000000 	.word	0x20000000
 8001a0c:	20000004 	.word	0x20000004

08001a10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a14:	4b06      	ldr	r3, [pc, #24]	; (8001a30 <HAL_IncTick+0x20>)
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	461a      	mov	r2, r3
 8001a1a:	4b06      	ldr	r3, [pc, #24]	; (8001a34 <HAL_IncTick+0x24>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4413      	add	r3, r2
 8001a20:	4a04      	ldr	r2, [pc, #16]	; (8001a34 <HAL_IncTick+0x24>)
 8001a22:	6013      	str	r3, [r2, #0]
}
 8001a24:	bf00      	nop
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	20000008 	.word	0x20000008
 8001a34:	20000330 	.word	0x20000330

08001a38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a3c:	4b03      	ldr	r3, [pc, #12]	; (8001a4c <HAL_GetTick+0x14>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	20000330 	.word	0x20000330

08001a50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b085      	sub	sp, #20
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	f003 0307 	and.w	r3, r3, #7
 8001a5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a60:	4b0c      	ldr	r3, [pc, #48]	; (8001a94 <__NVIC_SetPriorityGrouping+0x44>)
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a66:	68ba      	ldr	r2, [r7, #8]
 8001a68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a82:	4a04      	ldr	r2, [pc, #16]	; (8001a94 <__NVIC_SetPriorityGrouping+0x44>)
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	60d3      	str	r3, [r2, #12]
}
 8001a88:	bf00      	nop
 8001a8a:	3714      	adds	r7, #20
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr
 8001a94:	e000ed00 	.word	0xe000ed00

08001a98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a9c:	4b04      	ldr	r3, [pc, #16]	; (8001ab0 <__NVIC_GetPriorityGrouping+0x18>)
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	0a1b      	lsrs	r3, r3, #8
 8001aa2:	f003 0307 	and.w	r3, r3, #7
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr
 8001ab0:	e000ed00 	.word	0xe000ed00

08001ab4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	4603      	mov	r3, r0
 8001abc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	db0b      	blt.n	8001ade <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ac6:	79fb      	ldrb	r3, [r7, #7]
 8001ac8:	f003 021f 	and.w	r2, r3, #31
 8001acc:	4907      	ldr	r1, [pc, #28]	; (8001aec <__NVIC_EnableIRQ+0x38>)
 8001ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad2:	095b      	lsrs	r3, r3, #5
 8001ad4:	2001      	movs	r0, #1
 8001ad6:	fa00 f202 	lsl.w	r2, r0, r2
 8001ada:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ade:	bf00      	nop
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	e000e100 	.word	0xe000e100

08001af0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	4603      	mov	r3, r0
 8001af8:	6039      	str	r1, [r7, #0]
 8001afa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001afc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	db0a      	blt.n	8001b1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	b2da      	uxtb	r2, r3
 8001b08:	490c      	ldr	r1, [pc, #48]	; (8001b3c <__NVIC_SetPriority+0x4c>)
 8001b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b0e:	0112      	lsls	r2, r2, #4
 8001b10:	b2d2      	uxtb	r2, r2
 8001b12:	440b      	add	r3, r1
 8001b14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b18:	e00a      	b.n	8001b30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	b2da      	uxtb	r2, r3
 8001b1e:	4908      	ldr	r1, [pc, #32]	; (8001b40 <__NVIC_SetPriority+0x50>)
 8001b20:	79fb      	ldrb	r3, [r7, #7]
 8001b22:	f003 030f 	and.w	r3, r3, #15
 8001b26:	3b04      	subs	r3, #4
 8001b28:	0112      	lsls	r2, r2, #4
 8001b2a:	b2d2      	uxtb	r2, r2
 8001b2c:	440b      	add	r3, r1
 8001b2e:	761a      	strb	r2, [r3, #24]
}
 8001b30:	bf00      	nop
 8001b32:	370c      	adds	r7, #12
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr
 8001b3c:	e000e100 	.word	0xe000e100
 8001b40:	e000ed00 	.word	0xe000ed00

08001b44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b089      	sub	sp, #36	; 0x24
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	60f8      	str	r0, [r7, #12]
 8001b4c:	60b9      	str	r1, [r7, #8]
 8001b4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	f003 0307 	and.w	r3, r3, #7
 8001b56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	f1c3 0307 	rsb	r3, r3, #7
 8001b5e:	2b04      	cmp	r3, #4
 8001b60:	bf28      	it	cs
 8001b62:	2304      	movcs	r3, #4
 8001b64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	3304      	adds	r3, #4
 8001b6a:	2b06      	cmp	r3, #6
 8001b6c:	d902      	bls.n	8001b74 <NVIC_EncodePriority+0x30>
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	3b03      	subs	r3, #3
 8001b72:	e000      	b.n	8001b76 <NVIC_EncodePriority+0x32>
 8001b74:	2300      	movs	r3, #0
 8001b76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b7c:	69bb      	ldr	r3, [r7, #24]
 8001b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b82:	43da      	mvns	r2, r3
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	401a      	ands	r2, r3
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b8c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	fa01 f303 	lsl.w	r3, r1, r3
 8001b96:	43d9      	mvns	r1, r3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b9c:	4313      	orrs	r3, r2
         );
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3724      	adds	r7, #36	; 0x24
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
	...

08001bac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	3b01      	subs	r3, #1
 8001bb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bbc:	d301      	bcc.n	8001bc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e00f      	b.n	8001be2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bc2:	4a0a      	ldr	r2, [pc, #40]	; (8001bec <SysTick_Config+0x40>)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	3b01      	subs	r3, #1
 8001bc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bca:	210f      	movs	r1, #15
 8001bcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001bd0:	f7ff ff8e 	bl	8001af0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bd4:	4b05      	ldr	r3, [pc, #20]	; (8001bec <SysTick_Config+0x40>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bda:	4b04      	ldr	r3, [pc, #16]	; (8001bec <SysTick_Config+0x40>)
 8001bdc:	2207      	movs	r2, #7
 8001bde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	e000e010 	.word	0xe000e010

08001bf0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f7ff ff29 	bl	8001a50 <__NVIC_SetPriorityGrouping>
}
 8001bfe:	bf00      	nop
 8001c00:	3708      	adds	r7, #8
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c06:	b580      	push	{r7, lr}
 8001c08:	b086      	sub	sp, #24
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	60b9      	str	r1, [r7, #8]
 8001c10:	607a      	str	r2, [r7, #4]
 8001c12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001c14:	2300      	movs	r3, #0
 8001c16:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c18:	f7ff ff3e 	bl	8001a98 <__NVIC_GetPriorityGrouping>
 8001c1c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	68b9      	ldr	r1, [r7, #8]
 8001c22:	6978      	ldr	r0, [r7, #20]
 8001c24:	f7ff ff8e 	bl	8001b44 <NVIC_EncodePriority>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c2e:	4611      	mov	r1, r2
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7ff ff5d 	bl	8001af0 <__NVIC_SetPriority>
}
 8001c36:	bf00      	nop
 8001c38:	3718      	adds	r7, #24
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}

08001c3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c3e:	b580      	push	{r7, lr}
 8001c40:	b082      	sub	sp, #8
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	4603      	mov	r3, r0
 8001c46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7ff ff31 	bl	8001ab4 <__NVIC_EnableIRQ>
}
 8001c52:	bf00      	nop
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}

08001c5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c5a:	b580      	push	{r7, lr}
 8001c5c:	b082      	sub	sp, #8
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f7ff ffa2 	bl	8001bac <SysTick_Config>
 8001c68:	4603      	mov	r3, r0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3708      	adds	r7, #8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
	...

08001c74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b087      	sub	sp, #28
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c82:	e166      	b.n	8001f52 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	2101      	movs	r1, #1
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c90:	4013      	ands	r3, r2
 8001c92:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	f000 8158 	beq.w	8001f4c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f003 0303 	and.w	r3, r3, #3
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d005      	beq.n	8001cb4 <HAL_GPIO_Init+0x40>
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f003 0303 	and.w	r3, r3, #3
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	d130      	bne.n	8001d16 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	005b      	lsls	r3, r3, #1
 8001cbe:	2203      	movs	r2, #3
 8001cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc4:	43db      	mvns	r3, r3
 8001cc6:	693a      	ldr	r2, [r7, #16]
 8001cc8:	4013      	ands	r3, r2
 8001cca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	68da      	ldr	r2, [r3, #12]
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	005b      	lsls	r3, r3, #1
 8001cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd8:	693a      	ldr	r2, [r7, #16]
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	693a      	ldr	r2, [r7, #16]
 8001ce2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001cea:	2201      	movs	r2, #1
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf2:	43db      	mvns	r3, r3
 8001cf4:	693a      	ldr	r2, [r7, #16]
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	091b      	lsrs	r3, r3, #4
 8001d00:	f003 0201 	and.w	r2, r3, #1
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0a:	693a      	ldr	r2, [r7, #16]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	693a      	ldr	r2, [r7, #16]
 8001d14:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f003 0303 	and.w	r3, r3, #3
 8001d1e:	2b03      	cmp	r3, #3
 8001d20:	d017      	beq.n	8001d52 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	68db      	ldr	r3, [r3, #12]
 8001d26:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	005b      	lsls	r3, r3, #1
 8001d2c:	2203      	movs	r2, #3
 8001d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d32:	43db      	mvns	r3, r3
 8001d34:	693a      	ldr	r2, [r7, #16]
 8001d36:	4013      	ands	r3, r2
 8001d38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	689a      	ldr	r2, [r3, #8]
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	005b      	lsls	r3, r3, #1
 8001d42:	fa02 f303 	lsl.w	r3, r2, r3
 8001d46:	693a      	ldr	r2, [r7, #16]
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	693a      	ldr	r2, [r7, #16]
 8001d50:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	f003 0303 	and.w	r3, r3, #3
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d123      	bne.n	8001da6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	08da      	lsrs	r2, r3, #3
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	3208      	adds	r2, #8
 8001d66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d6a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	f003 0307 	and.w	r3, r3, #7
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	220f      	movs	r2, #15
 8001d76:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7a:	43db      	mvns	r3, r3
 8001d7c:	693a      	ldr	r2, [r7, #16]
 8001d7e:	4013      	ands	r3, r2
 8001d80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	691a      	ldr	r2, [r3, #16]
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	f003 0307 	and.w	r3, r3, #7
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d92:	693a      	ldr	r2, [r7, #16]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	08da      	lsrs	r2, r3, #3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	3208      	adds	r2, #8
 8001da0:	6939      	ldr	r1, [r7, #16]
 8001da2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	005b      	lsls	r3, r3, #1
 8001db0:	2203      	movs	r2, #3
 8001db2:	fa02 f303 	lsl.w	r3, r2, r3
 8001db6:	43db      	mvns	r3, r3
 8001db8:	693a      	ldr	r2, [r7, #16]
 8001dba:	4013      	ands	r3, r2
 8001dbc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	f003 0203 	and.w	r2, r3, #3
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	005b      	lsls	r3, r3, #1
 8001dca:	fa02 f303 	lsl.w	r3, r2, r3
 8001dce:	693a      	ldr	r2, [r7, #16]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	693a      	ldr	r2, [r7, #16]
 8001dd8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	f000 80b2 	beq.w	8001f4c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001de8:	4b61      	ldr	r3, [pc, #388]	; (8001f70 <HAL_GPIO_Init+0x2fc>)
 8001dea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dec:	4a60      	ldr	r2, [pc, #384]	; (8001f70 <HAL_GPIO_Init+0x2fc>)
 8001dee:	f043 0301 	orr.w	r3, r3, #1
 8001df2:	6613      	str	r3, [r2, #96]	; 0x60
 8001df4:	4b5e      	ldr	r3, [pc, #376]	; (8001f70 <HAL_GPIO_Init+0x2fc>)
 8001df6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001df8:	f003 0301 	and.w	r3, r3, #1
 8001dfc:	60bb      	str	r3, [r7, #8]
 8001dfe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001e00:	4a5c      	ldr	r2, [pc, #368]	; (8001f74 <HAL_GPIO_Init+0x300>)
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	089b      	lsrs	r3, r3, #2
 8001e06:	3302      	adds	r3, #2
 8001e08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e0c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	f003 0303 	and.w	r3, r3, #3
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	220f      	movs	r2, #15
 8001e18:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1c:	43db      	mvns	r3, r3
 8001e1e:	693a      	ldr	r2, [r7, #16]
 8001e20:	4013      	ands	r3, r2
 8001e22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001e2a:	d02b      	beq.n	8001e84 <HAL_GPIO_Init+0x210>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	4a52      	ldr	r2, [pc, #328]	; (8001f78 <HAL_GPIO_Init+0x304>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d025      	beq.n	8001e80 <HAL_GPIO_Init+0x20c>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	4a51      	ldr	r2, [pc, #324]	; (8001f7c <HAL_GPIO_Init+0x308>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d01f      	beq.n	8001e7c <HAL_GPIO_Init+0x208>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	4a50      	ldr	r2, [pc, #320]	; (8001f80 <HAL_GPIO_Init+0x30c>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d019      	beq.n	8001e78 <HAL_GPIO_Init+0x204>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	4a4f      	ldr	r2, [pc, #316]	; (8001f84 <HAL_GPIO_Init+0x310>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d013      	beq.n	8001e74 <HAL_GPIO_Init+0x200>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	4a4e      	ldr	r2, [pc, #312]	; (8001f88 <HAL_GPIO_Init+0x314>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d00d      	beq.n	8001e70 <HAL_GPIO_Init+0x1fc>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	4a4d      	ldr	r2, [pc, #308]	; (8001f8c <HAL_GPIO_Init+0x318>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d007      	beq.n	8001e6c <HAL_GPIO_Init+0x1f8>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	4a4c      	ldr	r2, [pc, #304]	; (8001f90 <HAL_GPIO_Init+0x31c>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d101      	bne.n	8001e68 <HAL_GPIO_Init+0x1f4>
 8001e64:	2307      	movs	r3, #7
 8001e66:	e00e      	b.n	8001e86 <HAL_GPIO_Init+0x212>
 8001e68:	2308      	movs	r3, #8
 8001e6a:	e00c      	b.n	8001e86 <HAL_GPIO_Init+0x212>
 8001e6c:	2306      	movs	r3, #6
 8001e6e:	e00a      	b.n	8001e86 <HAL_GPIO_Init+0x212>
 8001e70:	2305      	movs	r3, #5
 8001e72:	e008      	b.n	8001e86 <HAL_GPIO_Init+0x212>
 8001e74:	2304      	movs	r3, #4
 8001e76:	e006      	b.n	8001e86 <HAL_GPIO_Init+0x212>
 8001e78:	2303      	movs	r3, #3
 8001e7a:	e004      	b.n	8001e86 <HAL_GPIO_Init+0x212>
 8001e7c:	2302      	movs	r3, #2
 8001e7e:	e002      	b.n	8001e86 <HAL_GPIO_Init+0x212>
 8001e80:	2301      	movs	r3, #1
 8001e82:	e000      	b.n	8001e86 <HAL_GPIO_Init+0x212>
 8001e84:	2300      	movs	r3, #0
 8001e86:	697a      	ldr	r2, [r7, #20]
 8001e88:	f002 0203 	and.w	r2, r2, #3
 8001e8c:	0092      	lsls	r2, r2, #2
 8001e8e:	4093      	lsls	r3, r2
 8001e90:	693a      	ldr	r2, [r7, #16]
 8001e92:	4313      	orrs	r3, r2
 8001e94:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e96:	4937      	ldr	r1, [pc, #220]	; (8001f74 <HAL_GPIO_Init+0x300>)
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	089b      	lsrs	r3, r3, #2
 8001e9c:	3302      	adds	r3, #2
 8001e9e:	693a      	ldr	r2, [r7, #16]
 8001ea0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ea4:	4b3b      	ldr	r3, [pc, #236]	; (8001f94 <HAL_GPIO_Init+0x320>)
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	43db      	mvns	r3, r3
 8001eae:	693a      	ldr	r2, [r7, #16]
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d003      	beq.n	8001ec8 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001ec0:	693a      	ldr	r2, [r7, #16]
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ec8:	4a32      	ldr	r2, [pc, #200]	; (8001f94 <HAL_GPIO_Init+0x320>)
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001ece:	4b31      	ldr	r3, [pc, #196]	; (8001f94 <HAL_GPIO_Init+0x320>)
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	43db      	mvns	r3, r3
 8001ed8:	693a      	ldr	r2, [r7, #16]
 8001eda:	4013      	ands	r3, r2
 8001edc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d003      	beq.n	8001ef2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001eea:	693a      	ldr	r2, [r7, #16]
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ef2:	4a28      	ldr	r2, [pc, #160]	; (8001f94 <HAL_GPIO_Init+0x320>)
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001ef8:	4b26      	ldr	r3, [pc, #152]	; (8001f94 <HAL_GPIO_Init+0x320>)
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	43db      	mvns	r3, r3
 8001f02:	693a      	ldr	r2, [r7, #16]
 8001f04:	4013      	ands	r3, r2
 8001f06:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d003      	beq.n	8001f1c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001f14:	693a      	ldr	r2, [r7, #16]
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f1c:	4a1d      	ldr	r2, [pc, #116]	; (8001f94 <HAL_GPIO_Init+0x320>)
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001f22:	4b1c      	ldr	r3, [pc, #112]	; (8001f94 <HAL_GPIO_Init+0x320>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	43db      	mvns	r3, r3
 8001f2c:	693a      	ldr	r2, [r7, #16]
 8001f2e:	4013      	ands	r3, r2
 8001f30:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d003      	beq.n	8001f46 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001f3e:	693a      	ldr	r2, [r7, #16]
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f46:	4a13      	ldr	r2, [pc, #76]	; (8001f94 <HAL_GPIO_Init+0x320>)
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	3301      	adds	r3, #1
 8001f50:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	fa22 f303 	lsr.w	r3, r2, r3
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	f47f ae91 	bne.w	8001c84 <HAL_GPIO_Init+0x10>
  }
}
 8001f62:	bf00      	nop
 8001f64:	bf00      	nop
 8001f66:	371c      	adds	r7, #28
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr
 8001f70:	40021000 	.word	0x40021000
 8001f74:	40010000 	.word	0x40010000
 8001f78:	48000400 	.word	0x48000400
 8001f7c:	48000800 	.word	0x48000800
 8001f80:	48000c00 	.word	0x48000c00
 8001f84:	48001000 	.word	0x48001000
 8001f88:	48001400 	.word	0x48001400
 8001f8c:	48001800 	.word	0x48001800
 8001f90:	48001c00 	.word	0x48001c00
 8001f94:	40010400 	.word	0x40010400

08001f98 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001f9c:	4b04      	ldr	r3, [pc, #16]	; (8001fb0 <HAL_PWREx_GetVoltageRange+0x18>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	40007000 	.word	0x40007000

08001fb4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b085      	sub	sp, #20
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fc2:	d130      	bne.n	8002026 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fc4:	4b23      	ldr	r3, [pc, #140]	; (8002054 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001fcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fd0:	d038      	beq.n	8002044 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fd2:	4b20      	ldr	r3, [pc, #128]	; (8002054 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001fda:	4a1e      	ldr	r2, [pc, #120]	; (8002054 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fdc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fe0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001fe2:	4b1d      	ldr	r3, [pc, #116]	; (8002058 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	2232      	movs	r2, #50	; 0x32
 8001fe8:	fb02 f303 	mul.w	r3, r2, r3
 8001fec:	4a1b      	ldr	r2, [pc, #108]	; (800205c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001fee:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff2:	0c9b      	lsrs	r3, r3, #18
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ff8:	e002      	b.n	8002000 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	3b01      	subs	r3, #1
 8001ffe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002000:	4b14      	ldr	r3, [pc, #80]	; (8002054 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002002:	695b      	ldr	r3, [r3, #20]
 8002004:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002008:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800200c:	d102      	bne.n	8002014 <HAL_PWREx_ControlVoltageScaling+0x60>
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d1f2      	bne.n	8001ffa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002014:	4b0f      	ldr	r3, [pc, #60]	; (8002054 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002016:	695b      	ldr	r3, [r3, #20]
 8002018:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800201c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002020:	d110      	bne.n	8002044 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e00f      	b.n	8002046 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002026:	4b0b      	ldr	r3, [pc, #44]	; (8002054 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800202e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002032:	d007      	beq.n	8002044 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002034:	4b07      	ldr	r3, [pc, #28]	; (8002054 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800203c:	4a05      	ldr	r2, [pc, #20]	; (8002054 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800203e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002042:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002044:	2300      	movs	r3, #0
}
 8002046:	4618      	mov	r0, r3
 8002048:	3714      	adds	r7, #20
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	40007000 	.word	0x40007000
 8002058:	20000000 	.word	0x20000000
 800205c:	431bde83 	.word	0x431bde83

08002060 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002064:	4b05      	ldr	r3, [pc, #20]	; (800207c <HAL_PWREx_EnableVddIO2+0x1c>)
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	4a04      	ldr	r2, [pc, #16]	; (800207c <HAL_PWREx_EnableVddIO2+0x1c>)
 800206a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800206e:	6053      	str	r3, [r2, #4]
}
 8002070:	bf00      	nop
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop
 800207c:	40007000 	.word	0x40007000

08002080 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b088      	sub	sp, #32
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d102      	bne.n	8002094 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	f000 bc08 	b.w	80028a4 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002094:	4b96      	ldr	r3, [pc, #600]	; (80022f0 <HAL_RCC_OscConfig+0x270>)
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	f003 030c 	and.w	r3, r3, #12
 800209c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800209e:	4b94      	ldr	r3, [pc, #592]	; (80022f0 <HAL_RCC_OscConfig+0x270>)
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	f003 0303 	and.w	r3, r3, #3
 80020a6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0310 	and.w	r3, r3, #16
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	f000 80e4 	beq.w	800227e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80020b6:	69bb      	ldr	r3, [r7, #24]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d007      	beq.n	80020cc <HAL_RCC_OscConfig+0x4c>
 80020bc:	69bb      	ldr	r3, [r7, #24]
 80020be:	2b0c      	cmp	r3, #12
 80020c0:	f040 808b 	bne.w	80021da <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	f040 8087 	bne.w	80021da <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80020cc:	4b88      	ldr	r3, [pc, #544]	; (80022f0 <HAL_RCC_OscConfig+0x270>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0302 	and.w	r3, r3, #2
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d005      	beq.n	80020e4 <HAL_RCC_OscConfig+0x64>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	699b      	ldr	r3, [r3, #24]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d101      	bne.n	80020e4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	e3df      	b.n	80028a4 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6a1a      	ldr	r2, [r3, #32]
 80020e8:	4b81      	ldr	r3, [pc, #516]	; (80022f0 <HAL_RCC_OscConfig+0x270>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 0308 	and.w	r3, r3, #8
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d004      	beq.n	80020fe <HAL_RCC_OscConfig+0x7e>
 80020f4:	4b7e      	ldr	r3, [pc, #504]	; (80022f0 <HAL_RCC_OscConfig+0x270>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020fc:	e005      	b.n	800210a <HAL_RCC_OscConfig+0x8a>
 80020fe:	4b7c      	ldr	r3, [pc, #496]	; (80022f0 <HAL_RCC_OscConfig+0x270>)
 8002100:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002104:	091b      	lsrs	r3, r3, #4
 8002106:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800210a:	4293      	cmp	r3, r2
 800210c:	d223      	bcs.n	8002156 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6a1b      	ldr	r3, [r3, #32]
 8002112:	4618      	mov	r0, r3
 8002114:	f000 fd92 	bl	8002c3c <RCC_SetFlashLatencyFromMSIRange>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e3c0      	b.n	80028a4 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002122:	4b73      	ldr	r3, [pc, #460]	; (80022f0 <HAL_RCC_OscConfig+0x270>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a72      	ldr	r2, [pc, #456]	; (80022f0 <HAL_RCC_OscConfig+0x270>)
 8002128:	f043 0308 	orr.w	r3, r3, #8
 800212c:	6013      	str	r3, [r2, #0]
 800212e:	4b70      	ldr	r3, [pc, #448]	; (80022f0 <HAL_RCC_OscConfig+0x270>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6a1b      	ldr	r3, [r3, #32]
 800213a:	496d      	ldr	r1, [pc, #436]	; (80022f0 <HAL_RCC_OscConfig+0x270>)
 800213c:	4313      	orrs	r3, r2
 800213e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002140:	4b6b      	ldr	r3, [pc, #428]	; (80022f0 <HAL_RCC_OscConfig+0x270>)
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	69db      	ldr	r3, [r3, #28]
 800214c:	021b      	lsls	r3, r3, #8
 800214e:	4968      	ldr	r1, [pc, #416]	; (80022f0 <HAL_RCC_OscConfig+0x270>)
 8002150:	4313      	orrs	r3, r2
 8002152:	604b      	str	r3, [r1, #4]
 8002154:	e025      	b.n	80021a2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002156:	4b66      	ldr	r3, [pc, #408]	; (80022f0 <HAL_RCC_OscConfig+0x270>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a65      	ldr	r2, [pc, #404]	; (80022f0 <HAL_RCC_OscConfig+0x270>)
 800215c:	f043 0308 	orr.w	r3, r3, #8
 8002160:	6013      	str	r3, [r2, #0]
 8002162:	4b63      	ldr	r3, [pc, #396]	; (80022f0 <HAL_RCC_OscConfig+0x270>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6a1b      	ldr	r3, [r3, #32]
 800216e:	4960      	ldr	r1, [pc, #384]	; (80022f0 <HAL_RCC_OscConfig+0x270>)
 8002170:	4313      	orrs	r3, r2
 8002172:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002174:	4b5e      	ldr	r3, [pc, #376]	; (80022f0 <HAL_RCC_OscConfig+0x270>)
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	69db      	ldr	r3, [r3, #28]
 8002180:	021b      	lsls	r3, r3, #8
 8002182:	495b      	ldr	r1, [pc, #364]	; (80022f0 <HAL_RCC_OscConfig+0x270>)
 8002184:	4313      	orrs	r3, r2
 8002186:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002188:	69bb      	ldr	r3, [r7, #24]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d109      	bne.n	80021a2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6a1b      	ldr	r3, [r3, #32]
 8002192:	4618      	mov	r0, r3
 8002194:	f000 fd52 	bl	8002c3c <RCC_SetFlashLatencyFromMSIRange>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d001      	beq.n	80021a2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e380      	b.n	80028a4 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80021a2:	f000 fc87 	bl	8002ab4 <HAL_RCC_GetSysClockFreq>
 80021a6:	4602      	mov	r2, r0
 80021a8:	4b51      	ldr	r3, [pc, #324]	; (80022f0 <HAL_RCC_OscConfig+0x270>)
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	091b      	lsrs	r3, r3, #4
 80021ae:	f003 030f 	and.w	r3, r3, #15
 80021b2:	4950      	ldr	r1, [pc, #320]	; (80022f4 <HAL_RCC_OscConfig+0x274>)
 80021b4:	5ccb      	ldrb	r3, [r1, r3]
 80021b6:	f003 031f 	and.w	r3, r3, #31
 80021ba:	fa22 f303 	lsr.w	r3, r2, r3
 80021be:	4a4e      	ldr	r2, [pc, #312]	; (80022f8 <HAL_RCC_OscConfig+0x278>)
 80021c0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80021c2:	4b4e      	ldr	r3, [pc, #312]	; (80022fc <HAL_RCC_OscConfig+0x27c>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4618      	mov	r0, r3
 80021c8:	f7ff fbe6 	bl	8001998 <HAL_InitTick>
 80021cc:	4603      	mov	r3, r0
 80021ce:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80021d0:	7bfb      	ldrb	r3, [r7, #15]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d052      	beq.n	800227c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80021d6:	7bfb      	ldrb	r3, [r7, #15]
 80021d8:	e364      	b.n	80028a4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	699b      	ldr	r3, [r3, #24]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d032      	beq.n	8002248 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80021e2:	4b43      	ldr	r3, [pc, #268]	; (80022f0 <HAL_RCC_OscConfig+0x270>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a42      	ldr	r2, [pc, #264]	; (80022f0 <HAL_RCC_OscConfig+0x270>)
 80021e8:	f043 0301 	orr.w	r3, r3, #1
 80021ec:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80021ee:	f7ff fc23 	bl	8001a38 <HAL_GetTick>
 80021f2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021f4:	e008      	b.n	8002208 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80021f6:	f7ff fc1f 	bl	8001a38 <HAL_GetTick>
 80021fa:	4602      	mov	r2, r0
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	2b02      	cmp	r3, #2
 8002202:	d901      	bls.n	8002208 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002204:	2303      	movs	r3, #3
 8002206:	e34d      	b.n	80028a4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002208:	4b39      	ldr	r3, [pc, #228]	; (80022f0 <HAL_RCC_OscConfig+0x270>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0302 	and.w	r3, r3, #2
 8002210:	2b00      	cmp	r3, #0
 8002212:	d0f0      	beq.n	80021f6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002214:	4b36      	ldr	r3, [pc, #216]	; (80022f0 <HAL_RCC_OscConfig+0x270>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a35      	ldr	r2, [pc, #212]	; (80022f0 <HAL_RCC_OscConfig+0x270>)
 800221a:	f043 0308 	orr.w	r3, r3, #8
 800221e:	6013      	str	r3, [r2, #0]
 8002220:	4b33      	ldr	r3, [pc, #204]	; (80022f0 <HAL_RCC_OscConfig+0x270>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6a1b      	ldr	r3, [r3, #32]
 800222c:	4930      	ldr	r1, [pc, #192]	; (80022f0 <HAL_RCC_OscConfig+0x270>)
 800222e:	4313      	orrs	r3, r2
 8002230:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002232:	4b2f      	ldr	r3, [pc, #188]	; (80022f0 <HAL_RCC_OscConfig+0x270>)
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	69db      	ldr	r3, [r3, #28]
 800223e:	021b      	lsls	r3, r3, #8
 8002240:	492b      	ldr	r1, [pc, #172]	; (80022f0 <HAL_RCC_OscConfig+0x270>)
 8002242:	4313      	orrs	r3, r2
 8002244:	604b      	str	r3, [r1, #4]
 8002246:	e01a      	b.n	800227e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002248:	4b29      	ldr	r3, [pc, #164]	; (80022f0 <HAL_RCC_OscConfig+0x270>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a28      	ldr	r2, [pc, #160]	; (80022f0 <HAL_RCC_OscConfig+0x270>)
 800224e:	f023 0301 	bic.w	r3, r3, #1
 8002252:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002254:	f7ff fbf0 	bl	8001a38 <HAL_GetTick>
 8002258:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800225a:	e008      	b.n	800226e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800225c:	f7ff fbec 	bl	8001a38 <HAL_GetTick>
 8002260:	4602      	mov	r2, r0
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	2b02      	cmp	r3, #2
 8002268:	d901      	bls.n	800226e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800226a:	2303      	movs	r3, #3
 800226c:	e31a      	b.n	80028a4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800226e:	4b20      	ldr	r3, [pc, #128]	; (80022f0 <HAL_RCC_OscConfig+0x270>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0302 	and.w	r3, r3, #2
 8002276:	2b00      	cmp	r3, #0
 8002278:	d1f0      	bne.n	800225c <HAL_RCC_OscConfig+0x1dc>
 800227a:	e000      	b.n	800227e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800227c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0301 	and.w	r3, r3, #1
 8002286:	2b00      	cmp	r3, #0
 8002288:	d073      	beq.n	8002372 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	2b08      	cmp	r3, #8
 800228e:	d005      	beq.n	800229c <HAL_RCC_OscConfig+0x21c>
 8002290:	69bb      	ldr	r3, [r7, #24]
 8002292:	2b0c      	cmp	r3, #12
 8002294:	d10e      	bne.n	80022b4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	2b03      	cmp	r3, #3
 800229a:	d10b      	bne.n	80022b4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800229c:	4b14      	ldr	r3, [pc, #80]	; (80022f0 <HAL_RCC_OscConfig+0x270>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d063      	beq.n	8002370 <HAL_RCC_OscConfig+0x2f0>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d15f      	bne.n	8002370 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e2f7      	b.n	80028a4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022bc:	d106      	bne.n	80022cc <HAL_RCC_OscConfig+0x24c>
 80022be:	4b0c      	ldr	r3, [pc, #48]	; (80022f0 <HAL_RCC_OscConfig+0x270>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a0b      	ldr	r2, [pc, #44]	; (80022f0 <HAL_RCC_OscConfig+0x270>)
 80022c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022c8:	6013      	str	r3, [r2, #0]
 80022ca:	e025      	b.n	8002318 <HAL_RCC_OscConfig+0x298>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022d4:	d114      	bne.n	8002300 <HAL_RCC_OscConfig+0x280>
 80022d6:	4b06      	ldr	r3, [pc, #24]	; (80022f0 <HAL_RCC_OscConfig+0x270>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a05      	ldr	r2, [pc, #20]	; (80022f0 <HAL_RCC_OscConfig+0x270>)
 80022dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022e0:	6013      	str	r3, [r2, #0]
 80022e2:	4b03      	ldr	r3, [pc, #12]	; (80022f0 <HAL_RCC_OscConfig+0x270>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a02      	ldr	r2, [pc, #8]	; (80022f0 <HAL_RCC_OscConfig+0x270>)
 80022e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022ec:	6013      	str	r3, [r2, #0]
 80022ee:	e013      	b.n	8002318 <HAL_RCC_OscConfig+0x298>
 80022f0:	40021000 	.word	0x40021000
 80022f4:	0800a768 	.word	0x0800a768
 80022f8:	20000000 	.word	0x20000000
 80022fc:	20000004 	.word	0x20000004
 8002300:	4ba0      	ldr	r3, [pc, #640]	; (8002584 <HAL_RCC_OscConfig+0x504>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a9f      	ldr	r2, [pc, #636]	; (8002584 <HAL_RCC_OscConfig+0x504>)
 8002306:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800230a:	6013      	str	r3, [r2, #0]
 800230c:	4b9d      	ldr	r3, [pc, #628]	; (8002584 <HAL_RCC_OscConfig+0x504>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a9c      	ldr	r2, [pc, #624]	; (8002584 <HAL_RCC_OscConfig+0x504>)
 8002312:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002316:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d013      	beq.n	8002348 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002320:	f7ff fb8a 	bl	8001a38 <HAL_GetTick>
 8002324:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002326:	e008      	b.n	800233a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002328:	f7ff fb86 	bl	8001a38 <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	2b64      	cmp	r3, #100	; 0x64
 8002334:	d901      	bls.n	800233a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e2b4      	b.n	80028a4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800233a:	4b92      	ldr	r3, [pc, #584]	; (8002584 <HAL_RCC_OscConfig+0x504>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d0f0      	beq.n	8002328 <HAL_RCC_OscConfig+0x2a8>
 8002346:	e014      	b.n	8002372 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002348:	f7ff fb76 	bl	8001a38 <HAL_GetTick>
 800234c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800234e:	e008      	b.n	8002362 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002350:	f7ff fb72 	bl	8001a38 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b64      	cmp	r3, #100	; 0x64
 800235c:	d901      	bls.n	8002362 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e2a0      	b.n	80028a4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002362:	4b88      	ldr	r3, [pc, #544]	; (8002584 <HAL_RCC_OscConfig+0x504>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d1f0      	bne.n	8002350 <HAL_RCC_OscConfig+0x2d0>
 800236e:	e000      	b.n	8002372 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002370:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0302 	and.w	r3, r3, #2
 800237a:	2b00      	cmp	r3, #0
 800237c:	d060      	beq.n	8002440 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800237e:	69bb      	ldr	r3, [r7, #24]
 8002380:	2b04      	cmp	r3, #4
 8002382:	d005      	beq.n	8002390 <HAL_RCC_OscConfig+0x310>
 8002384:	69bb      	ldr	r3, [r7, #24]
 8002386:	2b0c      	cmp	r3, #12
 8002388:	d119      	bne.n	80023be <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	2b02      	cmp	r3, #2
 800238e:	d116      	bne.n	80023be <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002390:	4b7c      	ldr	r3, [pc, #496]	; (8002584 <HAL_RCC_OscConfig+0x504>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002398:	2b00      	cmp	r3, #0
 800239a:	d005      	beq.n	80023a8 <HAL_RCC_OscConfig+0x328>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d101      	bne.n	80023a8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e27d      	b.n	80028a4 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023a8:	4b76      	ldr	r3, [pc, #472]	; (8002584 <HAL_RCC_OscConfig+0x504>)
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	691b      	ldr	r3, [r3, #16]
 80023b4:	061b      	lsls	r3, r3, #24
 80023b6:	4973      	ldr	r1, [pc, #460]	; (8002584 <HAL_RCC_OscConfig+0x504>)
 80023b8:	4313      	orrs	r3, r2
 80023ba:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023bc:	e040      	b.n	8002440 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d023      	beq.n	800240e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023c6:	4b6f      	ldr	r3, [pc, #444]	; (8002584 <HAL_RCC_OscConfig+0x504>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a6e      	ldr	r2, [pc, #440]	; (8002584 <HAL_RCC_OscConfig+0x504>)
 80023cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023d2:	f7ff fb31 	bl	8001a38 <HAL_GetTick>
 80023d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023d8:	e008      	b.n	80023ec <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023da:	f7ff fb2d 	bl	8001a38 <HAL_GetTick>
 80023de:	4602      	mov	r2, r0
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	2b02      	cmp	r3, #2
 80023e6:	d901      	bls.n	80023ec <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80023e8:	2303      	movs	r3, #3
 80023ea:	e25b      	b.n	80028a4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023ec:	4b65      	ldr	r3, [pc, #404]	; (8002584 <HAL_RCC_OscConfig+0x504>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d0f0      	beq.n	80023da <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023f8:	4b62      	ldr	r3, [pc, #392]	; (8002584 <HAL_RCC_OscConfig+0x504>)
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	691b      	ldr	r3, [r3, #16]
 8002404:	061b      	lsls	r3, r3, #24
 8002406:	495f      	ldr	r1, [pc, #380]	; (8002584 <HAL_RCC_OscConfig+0x504>)
 8002408:	4313      	orrs	r3, r2
 800240a:	604b      	str	r3, [r1, #4]
 800240c:	e018      	b.n	8002440 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800240e:	4b5d      	ldr	r3, [pc, #372]	; (8002584 <HAL_RCC_OscConfig+0x504>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a5c      	ldr	r2, [pc, #368]	; (8002584 <HAL_RCC_OscConfig+0x504>)
 8002414:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002418:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800241a:	f7ff fb0d 	bl	8001a38 <HAL_GetTick>
 800241e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002420:	e008      	b.n	8002434 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002422:	f7ff fb09 	bl	8001a38 <HAL_GetTick>
 8002426:	4602      	mov	r2, r0
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	2b02      	cmp	r3, #2
 800242e:	d901      	bls.n	8002434 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002430:	2303      	movs	r3, #3
 8002432:	e237      	b.n	80028a4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002434:	4b53      	ldr	r3, [pc, #332]	; (8002584 <HAL_RCC_OscConfig+0x504>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800243c:	2b00      	cmp	r3, #0
 800243e:	d1f0      	bne.n	8002422 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0308 	and.w	r3, r3, #8
 8002448:	2b00      	cmp	r3, #0
 800244a:	d03c      	beq.n	80024c6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	695b      	ldr	r3, [r3, #20]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d01c      	beq.n	800248e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002454:	4b4b      	ldr	r3, [pc, #300]	; (8002584 <HAL_RCC_OscConfig+0x504>)
 8002456:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800245a:	4a4a      	ldr	r2, [pc, #296]	; (8002584 <HAL_RCC_OscConfig+0x504>)
 800245c:	f043 0301 	orr.w	r3, r3, #1
 8002460:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002464:	f7ff fae8 	bl	8001a38 <HAL_GetTick>
 8002468:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800246a:	e008      	b.n	800247e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800246c:	f7ff fae4 	bl	8001a38 <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	2b02      	cmp	r3, #2
 8002478:	d901      	bls.n	800247e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e212      	b.n	80028a4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800247e:	4b41      	ldr	r3, [pc, #260]	; (8002584 <HAL_RCC_OscConfig+0x504>)
 8002480:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002484:	f003 0302 	and.w	r3, r3, #2
 8002488:	2b00      	cmp	r3, #0
 800248a:	d0ef      	beq.n	800246c <HAL_RCC_OscConfig+0x3ec>
 800248c:	e01b      	b.n	80024c6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800248e:	4b3d      	ldr	r3, [pc, #244]	; (8002584 <HAL_RCC_OscConfig+0x504>)
 8002490:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002494:	4a3b      	ldr	r2, [pc, #236]	; (8002584 <HAL_RCC_OscConfig+0x504>)
 8002496:	f023 0301 	bic.w	r3, r3, #1
 800249a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800249e:	f7ff facb 	bl	8001a38 <HAL_GetTick>
 80024a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024a4:	e008      	b.n	80024b8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024a6:	f7ff fac7 	bl	8001a38 <HAL_GetTick>
 80024aa:	4602      	mov	r2, r0
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d901      	bls.n	80024b8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80024b4:	2303      	movs	r3, #3
 80024b6:	e1f5      	b.n	80028a4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024b8:	4b32      	ldr	r3, [pc, #200]	; (8002584 <HAL_RCC_OscConfig+0x504>)
 80024ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024be:	f003 0302 	and.w	r3, r3, #2
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d1ef      	bne.n	80024a6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0304 	and.w	r3, r3, #4
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	f000 80a6 	beq.w	8002620 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024d4:	2300      	movs	r3, #0
 80024d6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80024d8:	4b2a      	ldr	r3, [pc, #168]	; (8002584 <HAL_RCC_OscConfig+0x504>)
 80024da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d10d      	bne.n	8002500 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024e4:	4b27      	ldr	r3, [pc, #156]	; (8002584 <HAL_RCC_OscConfig+0x504>)
 80024e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024e8:	4a26      	ldr	r2, [pc, #152]	; (8002584 <HAL_RCC_OscConfig+0x504>)
 80024ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024ee:	6593      	str	r3, [r2, #88]	; 0x58
 80024f0:	4b24      	ldr	r3, [pc, #144]	; (8002584 <HAL_RCC_OscConfig+0x504>)
 80024f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024f8:	60bb      	str	r3, [r7, #8]
 80024fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024fc:	2301      	movs	r3, #1
 80024fe:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002500:	4b21      	ldr	r3, [pc, #132]	; (8002588 <HAL_RCC_OscConfig+0x508>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002508:	2b00      	cmp	r3, #0
 800250a:	d118      	bne.n	800253e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800250c:	4b1e      	ldr	r3, [pc, #120]	; (8002588 <HAL_RCC_OscConfig+0x508>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a1d      	ldr	r2, [pc, #116]	; (8002588 <HAL_RCC_OscConfig+0x508>)
 8002512:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002516:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002518:	f7ff fa8e 	bl	8001a38 <HAL_GetTick>
 800251c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800251e:	e008      	b.n	8002532 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002520:	f7ff fa8a 	bl	8001a38 <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	2b02      	cmp	r3, #2
 800252c:	d901      	bls.n	8002532 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e1b8      	b.n	80028a4 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002532:	4b15      	ldr	r3, [pc, #84]	; (8002588 <HAL_RCC_OscConfig+0x508>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800253a:	2b00      	cmp	r3, #0
 800253c:	d0f0      	beq.n	8002520 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	2b01      	cmp	r3, #1
 8002544:	d108      	bne.n	8002558 <HAL_RCC_OscConfig+0x4d8>
 8002546:	4b0f      	ldr	r3, [pc, #60]	; (8002584 <HAL_RCC_OscConfig+0x504>)
 8002548:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800254c:	4a0d      	ldr	r2, [pc, #52]	; (8002584 <HAL_RCC_OscConfig+0x504>)
 800254e:	f043 0301 	orr.w	r3, r3, #1
 8002552:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002556:	e029      	b.n	80025ac <HAL_RCC_OscConfig+0x52c>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	2b05      	cmp	r3, #5
 800255e:	d115      	bne.n	800258c <HAL_RCC_OscConfig+0x50c>
 8002560:	4b08      	ldr	r3, [pc, #32]	; (8002584 <HAL_RCC_OscConfig+0x504>)
 8002562:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002566:	4a07      	ldr	r2, [pc, #28]	; (8002584 <HAL_RCC_OscConfig+0x504>)
 8002568:	f043 0304 	orr.w	r3, r3, #4
 800256c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002570:	4b04      	ldr	r3, [pc, #16]	; (8002584 <HAL_RCC_OscConfig+0x504>)
 8002572:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002576:	4a03      	ldr	r2, [pc, #12]	; (8002584 <HAL_RCC_OscConfig+0x504>)
 8002578:	f043 0301 	orr.w	r3, r3, #1
 800257c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002580:	e014      	b.n	80025ac <HAL_RCC_OscConfig+0x52c>
 8002582:	bf00      	nop
 8002584:	40021000 	.word	0x40021000
 8002588:	40007000 	.word	0x40007000
 800258c:	4b9d      	ldr	r3, [pc, #628]	; (8002804 <HAL_RCC_OscConfig+0x784>)
 800258e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002592:	4a9c      	ldr	r2, [pc, #624]	; (8002804 <HAL_RCC_OscConfig+0x784>)
 8002594:	f023 0301 	bic.w	r3, r3, #1
 8002598:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800259c:	4b99      	ldr	r3, [pc, #612]	; (8002804 <HAL_RCC_OscConfig+0x784>)
 800259e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025a2:	4a98      	ldr	r2, [pc, #608]	; (8002804 <HAL_RCC_OscConfig+0x784>)
 80025a4:	f023 0304 	bic.w	r3, r3, #4
 80025a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d016      	beq.n	80025e2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025b4:	f7ff fa40 	bl	8001a38 <HAL_GetTick>
 80025b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025ba:	e00a      	b.n	80025d2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025bc:	f7ff fa3c 	bl	8001a38 <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d901      	bls.n	80025d2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e168      	b.n	80028a4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025d2:	4b8c      	ldr	r3, [pc, #560]	; (8002804 <HAL_RCC_OscConfig+0x784>)
 80025d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025d8:	f003 0302 	and.w	r3, r3, #2
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d0ed      	beq.n	80025bc <HAL_RCC_OscConfig+0x53c>
 80025e0:	e015      	b.n	800260e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025e2:	f7ff fa29 	bl	8001a38 <HAL_GetTick>
 80025e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025e8:	e00a      	b.n	8002600 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025ea:	f7ff fa25 	bl	8001a38 <HAL_GetTick>
 80025ee:	4602      	mov	r2, r0
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	1ad3      	subs	r3, r2, r3
 80025f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d901      	bls.n	8002600 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80025fc:	2303      	movs	r3, #3
 80025fe:	e151      	b.n	80028a4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002600:	4b80      	ldr	r3, [pc, #512]	; (8002804 <HAL_RCC_OscConfig+0x784>)
 8002602:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002606:	f003 0302 	and.w	r3, r3, #2
 800260a:	2b00      	cmp	r3, #0
 800260c:	d1ed      	bne.n	80025ea <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800260e:	7ffb      	ldrb	r3, [r7, #31]
 8002610:	2b01      	cmp	r3, #1
 8002612:	d105      	bne.n	8002620 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002614:	4b7b      	ldr	r3, [pc, #492]	; (8002804 <HAL_RCC_OscConfig+0x784>)
 8002616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002618:	4a7a      	ldr	r2, [pc, #488]	; (8002804 <HAL_RCC_OscConfig+0x784>)
 800261a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800261e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0320 	and.w	r3, r3, #32
 8002628:	2b00      	cmp	r3, #0
 800262a:	d03c      	beq.n	80026a6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002630:	2b00      	cmp	r3, #0
 8002632:	d01c      	beq.n	800266e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002634:	4b73      	ldr	r3, [pc, #460]	; (8002804 <HAL_RCC_OscConfig+0x784>)
 8002636:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800263a:	4a72      	ldr	r2, [pc, #456]	; (8002804 <HAL_RCC_OscConfig+0x784>)
 800263c:	f043 0301 	orr.w	r3, r3, #1
 8002640:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002644:	f7ff f9f8 	bl	8001a38 <HAL_GetTick>
 8002648:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800264a:	e008      	b.n	800265e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800264c:	f7ff f9f4 	bl	8001a38 <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	2b02      	cmp	r3, #2
 8002658:	d901      	bls.n	800265e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	e122      	b.n	80028a4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800265e:	4b69      	ldr	r3, [pc, #420]	; (8002804 <HAL_RCC_OscConfig+0x784>)
 8002660:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002664:	f003 0302 	and.w	r3, r3, #2
 8002668:	2b00      	cmp	r3, #0
 800266a:	d0ef      	beq.n	800264c <HAL_RCC_OscConfig+0x5cc>
 800266c:	e01b      	b.n	80026a6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800266e:	4b65      	ldr	r3, [pc, #404]	; (8002804 <HAL_RCC_OscConfig+0x784>)
 8002670:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002674:	4a63      	ldr	r2, [pc, #396]	; (8002804 <HAL_RCC_OscConfig+0x784>)
 8002676:	f023 0301 	bic.w	r3, r3, #1
 800267a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800267e:	f7ff f9db 	bl	8001a38 <HAL_GetTick>
 8002682:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002684:	e008      	b.n	8002698 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002686:	f7ff f9d7 	bl	8001a38 <HAL_GetTick>
 800268a:	4602      	mov	r2, r0
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	2b02      	cmp	r3, #2
 8002692:	d901      	bls.n	8002698 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002694:	2303      	movs	r3, #3
 8002696:	e105      	b.n	80028a4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002698:	4b5a      	ldr	r3, [pc, #360]	; (8002804 <HAL_RCC_OscConfig+0x784>)
 800269a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800269e:	f003 0302 	and.w	r3, r3, #2
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d1ef      	bne.n	8002686 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	f000 80f9 	beq.w	80028a2 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	f040 80cf 	bne.w	8002858 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80026ba:	4b52      	ldr	r3, [pc, #328]	; (8002804 <HAL_RCC_OscConfig+0x784>)
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	f003 0203 	and.w	r2, r3, #3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d12c      	bne.n	8002728 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d8:	3b01      	subs	r3, #1
 80026da:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80026dc:	429a      	cmp	r2, r3
 80026de:	d123      	bne.n	8002728 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026ea:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d11b      	bne.n	8002728 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026fa:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d113      	bne.n	8002728 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800270a:	085b      	lsrs	r3, r3, #1
 800270c:	3b01      	subs	r3, #1
 800270e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002710:	429a      	cmp	r2, r3
 8002712:	d109      	bne.n	8002728 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271e:	085b      	lsrs	r3, r3, #1
 8002720:	3b01      	subs	r3, #1
 8002722:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002724:	429a      	cmp	r2, r3
 8002726:	d071      	beq.n	800280c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002728:	69bb      	ldr	r3, [r7, #24]
 800272a:	2b0c      	cmp	r3, #12
 800272c:	d068      	beq.n	8002800 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800272e:	4b35      	ldr	r3, [pc, #212]	; (8002804 <HAL_RCC_OscConfig+0x784>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d105      	bne.n	8002746 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800273a:	4b32      	ldr	r3, [pc, #200]	; (8002804 <HAL_RCC_OscConfig+0x784>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d001      	beq.n	800274a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e0ac      	b.n	80028a4 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800274a:	4b2e      	ldr	r3, [pc, #184]	; (8002804 <HAL_RCC_OscConfig+0x784>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a2d      	ldr	r2, [pc, #180]	; (8002804 <HAL_RCC_OscConfig+0x784>)
 8002750:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002754:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002756:	f7ff f96f 	bl	8001a38 <HAL_GetTick>
 800275a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800275c:	e008      	b.n	8002770 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800275e:	f7ff f96b 	bl	8001a38 <HAL_GetTick>
 8002762:	4602      	mov	r2, r0
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	2b02      	cmp	r3, #2
 800276a:	d901      	bls.n	8002770 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800276c:	2303      	movs	r3, #3
 800276e:	e099      	b.n	80028a4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002770:	4b24      	ldr	r3, [pc, #144]	; (8002804 <HAL_RCC_OscConfig+0x784>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002778:	2b00      	cmp	r3, #0
 800277a:	d1f0      	bne.n	800275e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800277c:	4b21      	ldr	r3, [pc, #132]	; (8002804 <HAL_RCC_OscConfig+0x784>)
 800277e:	68da      	ldr	r2, [r3, #12]
 8002780:	4b21      	ldr	r3, [pc, #132]	; (8002808 <HAL_RCC_OscConfig+0x788>)
 8002782:	4013      	ands	r3, r2
 8002784:	687a      	ldr	r2, [r7, #4]
 8002786:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800278c:	3a01      	subs	r2, #1
 800278e:	0112      	lsls	r2, r2, #4
 8002790:	4311      	orrs	r1, r2
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002796:	0212      	lsls	r2, r2, #8
 8002798:	4311      	orrs	r1, r2
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800279e:	0852      	lsrs	r2, r2, #1
 80027a0:	3a01      	subs	r2, #1
 80027a2:	0552      	lsls	r2, r2, #21
 80027a4:	4311      	orrs	r1, r2
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80027aa:	0852      	lsrs	r2, r2, #1
 80027ac:	3a01      	subs	r2, #1
 80027ae:	0652      	lsls	r2, r2, #25
 80027b0:	4311      	orrs	r1, r2
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80027b6:	06d2      	lsls	r2, r2, #27
 80027b8:	430a      	orrs	r2, r1
 80027ba:	4912      	ldr	r1, [pc, #72]	; (8002804 <HAL_RCC_OscConfig+0x784>)
 80027bc:	4313      	orrs	r3, r2
 80027be:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80027c0:	4b10      	ldr	r3, [pc, #64]	; (8002804 <HAL_RCC_OscConfig+0x784>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a0f      	ldr	r2, [pc, #60]	; (8002804 <HAL_RCC_OscConfig+0x784>)
 80027c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027ca:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80027cc:	4b0d      	ldr	r3, [pc, #52]	; (8002804 <HAL_RCC_OscConfig+0x784>)
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	4a0c      	ldr	r2, [pc, #48]	; (8002804 <HAL_RCC_OscConfig+0x784>)
 80027d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027d6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80027d8:	f7ff f92e 	bl	8001a38 <HAL_GetTick>
 80027dc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027de:	e008      	b.n	80027f2 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027e0:	f7ff f92a 	bl	8001a38 <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d901      	bls.n	80027f2 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e058      	b.n	80028a4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027f2:	4b04      	ldr	r3, [pc, #16]	; (8002804 <HAL_RCC_OscConfig+0x784>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d0f0      	beq.n	80027e0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80027fe:	e050      	b.n	80028a2 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e04f      	b.n	80028a4 <HAL_RCC_OscConfig+0x824>
 8002804:	40021000 	.word	0x40021000
 8002808:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800280c:	4b27      	ldr	r3, [pc, #156]	; (80028ac <HAL_RCC_OscConfig+0x82c>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d144      	bne.n	80028a2 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002818:	4b24      	ldr	r3, [pc, #144]	; (80028ac <HAL_RCC_OscConfig+0x82c>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a23      	ldr	r2, [pc, #140]	; (80028ac <HAL_RCC_OscConfig+0x82c>)
 800281e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002822:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002824:	4b21      	ldr	r3, [pc, #132]	; (80028ac <HAL_RCC_OscConfig+0x82c>)
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	4a20      	ldr	r2, [pc, #128]	; (80028ac <HAL_RCC_OscConfig+0x82c>)
 800282a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800282e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002830:	f7ff f902 	bl	8001a38 <HAL_GetTick>
 8002834:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002836:	e008      	b.n	800284a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002838:	f7ff f8fe 	bl	8001a38 <HAL_GetTick>
 800283c:	4602      	mov	r2, r0
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	2b02      	cmp	r3, #2
 8002844:	d901      	bls.n	800284a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8002846:	2303      	movs	r3, #3
 8002848:	e02c      	b.n	80028a4 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800284a:	4b18      	ldr	r3, [pc, #96]	; (80028ac <HAL_RCC_OscConfig+0x82c>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d0f0      	beq.n	8002838 <HAL_RCC_OscConfig+0x7b8>
 8002856:	e024      	b.n	80028a2 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	2b0c      	cmp	r3, #12
 800285c:	d01f      	beq.n	800289e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800285e:	4b13      	ldr	r3, [pc, #76]	; (80028ac <HAL_RCC_OscConfig+0x82c>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a12      	ldr	r2, [pc, #72]	; (80028ac <HAL_RCC_OscConfig+0x82c>)
 8002864:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002868:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800286a:	f7ff f8e5 	bl	8001a38 <HAL_GetTick>
 800286e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002870:	e008      	b.n	8002884 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002872:	f7ff f8e1 	bl	8001a38 <HAL_GetTick>
 8002876:	4602      	mov	r2, r0
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	2b02      	cmp	r3, #2
 800287e:	d901      	bls.n	8002884 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8002880:	2303      	movs	r3, #3
 8002882:	e00f      	b.n	80028a4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002884:	4b09      	ldr	r3, [pc, #36]	; (80028ac <HAL_RCC_OscConfig+0x82c>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800288c:	2b00      	cmp	r3, #0
 800288e:	d1f0      	bne.n	8002872 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002890:	4b06      	ldr	r3, [pc, #24]	; (80028ac <HAL_RCC_OscConfig+0x82c>)
 8002892:	68da      	ldr	r2, [r3, #12]
 8002894:	4905      	ldr	r1, [pc, #20]	; (80028ac <HAL_RCC_OscConfig+0x82c>)
 8002896:	4b06      	ldr	r3, [pc, #24]	; (80028b0 <HAL_RCC_OscConfig+0x830>)
 8002898:	4013      	ands	r3, r2
 800289a:	60cb      	str	r3, [r1, #12]
 800289c:	e001      	b.n	80028a2 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e000      	b.n	80028a4 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80028a2:	2300      	movs	r3, #0
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3720      	adds	r7, #32
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	40021000 	.word	0x40021000
 80028b0:	feeefffc 	.word	0xfeeefffc

080028b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b084      	sub	sp, #16
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d101      	bne.n	80028c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e0e7      	b.n	8002a98 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028c8:	4b75      	ldr	r3, [pc, #468]	; (8002aa0 <HAL_RCC_ClockConfig+0x1ec>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0307 	and.w	r3, r3, #7
 80028d0:	683a      	ldr	r2, [r7, #0]
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d910      	bls.n	80028f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028d6:	4b72      	ldr	r3, [pc, #456]	; (8002aa0 <HAL_RCC_ClockConfig+0x1ec>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f023 0207 	bic.w	r2, r3, #7
 80028de:	4970      	ldr	r1, [pc, #448]	; (8002aa0 <HAL_RCC_ClockConfig+0x1ec>)
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028e6:	4b6e      	ldr	r3, [pc, #440]	; (8002aa0 <HAL_RCC_ClockConfig+0x1ec>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 0307 	and.w	r3, r3, #7
 80028ee:	683a      	ldr	r2, [r7, #0]
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d001      	beq.n	80028f8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e0cf      	b.n	8002a98 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0302 	and.w	r3, r3, #2
 8002900:	2b00      	cmp	r3, #0
 8002902:	d010      	beq.n	8002926 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	689a      	ldr	r2, [r3, #8]
 8002908:	4b66      	ldr	r3, [pc, #408]	; (8002aa4 <HAL_RCC_ClockConfig+0x1f0>)
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002910:	429a      	cmp	r2, r3
 8002912:	d908      	bls.n	8002926 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002914:	4b63      	ldr	r3, [pc, #396]	; (8002aa4 <HAL_RCC_ClockConfig+0x1f0>)
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	4960      	ldr	r1, [pc, #384]	; (8002aa4 <HAL_RCC_ClockConfig+0x1f0>)
 8002922:	4313      	orrs	r3, r2
 8002924:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 0301 	and.w	r3, r3, #1
 800292e:	2b00      	cmp	r3, #0
 8002930:	d04c      	beq.n	80029cc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	2b03      	cmp	r3, #3
 8002938:	d107      	bne.n	800294a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800293a:	4b5a      	ldr	r3, [pc, #360]	; (8002aa4 <HAL_RCC_ClockConfig+0x1f0>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d121      	bne.n	800298a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e0a6      	b.n	8002a98 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	2b02      	cmp	r3, #2
 8002950:	d107      	bne.n	8002962 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002952:	4b54      	ldr	r3, [pc, #336]	; (8002aa4 <HAL_RCC_ClockConfig+0x1f0>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d115      	bne.n	800298a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e09a      	b.n	8002a98 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d107      	bne.n	800297a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800296a:	4b4e      	ldr	r3, [pc, #312]	; (8002aa4 <HAL_RCC_ClockConfig+0x1f0>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0302 	and.w	r3, r3, #2
 8002972:	2b00      	cmp	r3, #0
 8002974:	d109      	bne.n	800298a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e08e      	b.n	8002a98 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800297a:	4b4a      	ldr	r3, [pc, #296]	; (8002aa4 <HAL_RCC_ClockConfig+0x1f0>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002982:	2b00      	cmp	r3, #0
 8002984:	d101      	bne.n	800298a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e086      	b.n	8002a98 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800298a:	4b46      	ldr	r3, [pc, #280]	; (8002aa4 <HAL_RCC_ClockConfig+0x1f0>)
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	f023 0203 	bic.w	r2, r3, #3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	4943      	ldr	r1, [pc, #268]	; (8002aa4 <HAL_RCC_ClockConfig+0x1f0>)
 8002998:	4313      	orrs	r3, r2
 800299a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800299c:	f7ff f84c 	bl	8001a38 <HAL_GetTick>
 80029a0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029a2:	e00a      	b.n	80029ba <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029a4:	f7ff f848 	bl	8001a38 <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d901      	bls.n	80029ba <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	e06e      	b.n	8002a98 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ba:	4b3a      	ldr	r3, [pc, #232]	; (8002aa4 <HAL_RCC_ClockConfig+0x1f0>)
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	f003 020c 	and.w	r2, r3, #12
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d1eb      	bne.n	80029a4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0302 	and.w	r3, r3, #2
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d010      	beq.n	80029fa <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	689a      	ldr	r2, [r3, #8]
 80029dc:	4b31      	ldr	r3, [pc, #196]	; (8002aa4 <HAL_RCC_ClockConfig+0x1f0>)
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d208      	bcs.n	80029fa <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029e8:	4b2e      	ldr	r3, [pc, #184]	; (8002aa4 <HAL_RCC_ClockConfig+0x1f0>)
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	492b      	ldr	r1, [pc, #172]	; (8002aa4 <HAL_RCC_ClockConfig+0x1f0>)
 80029f6:	4313      	orrs	r3, r2
 80029f8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029fa:	4b29      	ldr	r3, [pc, #164]	; (8002aa0 <HAL_RCC_ClockConfig+0x1ec>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0307 	and.w	r3, r3, #7
 8002a02:	683a      	ldr	r2, [r7, #0]
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d210      	bcs.n	8002a2a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a08:	4b25      	ldr	r3, [pc, #148]	; (8002aa0 <HAL_RCC_ClockConfig+0x1ec>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f023 0207 	bic.w	r2, r3, #7
 8002a10:	4923      	ldr	r1, [pc, #140]	; (8002aa0 <HAL_RCC_ClockConfig+0x1ec>)
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a18:	4b21      	ldr	r3, [pc, #132]	; (8002aa0 <HAL_RCC_ClockConfig+0x1ec>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0307 	and.w	r3, r3, #7
 8002a20:	683a      	ldr	r2, [r7, #0]
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d001      	beq.n	8002a2a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e036      	b.n	8002a98 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0304 	and.w	r3, r3, #4
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d008      	beq.n	8002a48 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a36:	4b1b      	ldr	r3, [pc, #108]	; (8002aa4 <HAL_RCC_ClockConfig+0x1f0>)
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	4918      	ldr	r1, [pc, #96]	; (8002aa4 <HAL_RCC_ClockConfig+0x1f0>)
 8002a44:	4313      	orrs	r3, r2
 8002a46:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0308 	and.w	r3, r3, #8
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d009      	beq.n	8002a68 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a54:	4b13      	ldr	r3, [pc, #76]	; (8002aa4 <HAL_RCC_ClockConfig+0x1f0>)
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	691b      	ldr	r3, [r3, #16]
 8002a60:	00db      	lsls	r3, r3, #3
 8002a62:	4910      	ldr	r1, [pc, #64]	; (8002aa4 <HAL_RCC_ClockConfig+0x1f0>)
 8002a64:	4313      	orrs	r3, r2
 8002a66:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a68:	f000 f824 	bl	8002ab4 <HAL_RCC_GetSysClockFreq>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	4b0d      	ldr	r3, [pc, #52]	; (8002aa4 <HAL_RCC_ClockConfig+0x1f0>)
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	091b      	lsrs	r3, r3, #4
 8002a74:	f003 030f 	and.w	r3, r3, #15
 8002a78:	490b      	ldr	r1, [pc, #44]	; (8002aa8 <HAL_RCC_ClockConfig+0x1f4>)
 8002a7a:	5ccb      	ldrb	r3, [r1, r3]
 8002a7c:	f003 031f 	and.w	r3, r3, #31
 8002a80:	fa22 f303 	lsr.w	r3, r2, r3
 8002a84:	4a09      	ldr	r2, [pc, #36]	; (8002aac <HAL_RCC_ClockConfig+0x1f8>)
 8002a86:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002a88:	4b09      	ldr	r3, [pc, #36]	; (8002ab0 <HAL_RCC_ClockConfig+0x1fc>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f7fe ff83 	bl	8001998 <HAL_InitTick>
 8002a92:	4603      	mov	r3, r0
 8002a94:	72fb      	strb	r3, [r7, #11]

  return status;
 8002a96:	7afb      	ldrb	r3, [r7, #11]
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3710      	adds	r7, #16
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	40022000 	.word	0x40022000
 8002aa4:	40021000 	.word	0x40021000
 8002aa8:	0800a768 	.word	0x0800a768
 8002aac:	20000000 	.word	0x20000000
 8002ab0:	20000004 	.word	0x20000004

08002ab4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b089      	sub	sp, #36	; 0x24
 8002ab8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002aba:	2300      	movs	r3, #0
 8002abc:	61fb      	str	r3, [r7, #28]
 8002abe:	2300      	movs	r3, #0
 8002ac0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ac2:	4b3e      	ldr	r3, [pc, #248]	; (8002bbc <HAL_RCC_GetSysClockFreq+0x108>)
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	f003 030c 	and.w	r3, r3, #12
 8002aca:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002acc:	4b3b      	ldr	r3, [pc, #236]	; (8002bbc <HAL_RCC_GetSysClockFreq+0x108>)
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	f003 0303 	and.w	r3, r3, #3
 8002ad4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d005      	beq.n	8002ae8 <HAL_RCC_GetSysClockFreq+0x34>
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	2b0c      	cmp	r3, #12
 8002ae0:	d121      	bne.n	8002b26 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d11e      	bne.n	8002b26 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002ae8:	4b34      	ldr	r3, [pc, #208]	; (8002bbc <HAL_RCC_GetSysClockFreq+0x108>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 0308 	and.w	r3, r3, #8
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d107      	bne.n	8002b04 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002af4:	4b31      	ldr	r3, [pc, #196]	; (8002bbc <HAL_RCC_GetSysClockFreq+0x108>)
 8002af6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002afa:	0a1b      	lsrs	r3, r3, #8
 8002afc:	f003 030f 	and.w	r3, r3, #15
 8002b00:	61fb      	str	r3, [r7, #28]
 8002b02:	e005      	b.n	8002b10 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002b04:	4b2d      	ldr	r3, [pc, #180]	; (8002bbc <HAL_RCC_GetSysClockFreq+0x108>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	091b      	lsrs	r3, r3, #4
 8002b0a:	f003 030f 	and.w	r3, r3, #15
 8002b0e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002b10:	4a2b      	ldr	r2, [pc, #172]	; (8002bc0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b18:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d10d      	bne.n	8002b3c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002b20:	69fb      	ldr	r3, [r7, #28]
 8002b22:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b24:	e00a      	b.n	8002b3c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	2b04      	cmp	r3, #4
 8002b2a:	d102      	bne.n	8002b32 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002b2c:	4b25      	ldr	r3, [pc, #148]	; (8002bc4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002b2e:	61bb      	str	r3, [r7, #24]
 8002b30:	e004      	b.n	8002b3c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	2b08      	cmp	r3, #8
 8002b36:	d101      	bne.n	8002b3c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002b38:	4b23      	ldr	r3, [pc, #140]	; (8002bc8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002b3a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	2b0c      	cmp	r3, #12
 8002b40:	d134      	bne.n	8002bac <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b42:	4b1e      	ldr	r3, [pc, #120]	; (8002bbc <HAL_RCC_GetSysClockFreq+0x108>)
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	f003 0303 	and.w	r3, r3, #3
 8002b4a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d003      	beq.n	8002b5a <HAL_RCC_GetSysClockFreq+0xa6>
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	2b03      	cmp	r3, #3
 8002b56:	d003      	beq.n	8002b60 <HAL_RCC_GetSysClockFreq+0xac>
 8002b58:	e005      	b.n	8002b66 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002b5a:	4b1a      	ldr	r3, [pc, #104]	; (8002bc4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002b5c:	617b      	str	r3, [r7, #20]
      break;
 8002b5e:	e005      	b.n	8002b6c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002b60:	4b19      	ldr	r3, [pc, #100]	; (8002bc8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002b62:	617b      	str	r3, [r7, #20]
      break;
 8002b64:	e002      	b.n	8002b6c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	617b      	str	r3, [r7, #20]
      break;
 8002b6a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b6c:	4b13      	ldr	r3, [pc, #76]	; (8002bbc <HAL_RCC_GetSysClockFreq+0x108>)
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	091b      	lsrs	r3, r3, #4
 8002b72:	f003 0307 	and.w	r3, r3, #7
 8002b76:	3301      	adds	r3, #1
 8002b78:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002b7a:	4b10      	ldr	r3, [pc, #64]	; (8002bbc <HAL_RCC_GetSysClockFreq+0x108>)
 8002b7c:	68db      	ldr	r3, [r3, #12]
 8002b7e:	0a1b      	lsrs	r3, r3, #8
 8002b80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b84:	697a      	ldr	r2, [r7, #20]
 8002b86:	fb03 f202 	mul.w	r2, r3, r2
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b90:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002b92:	4b0a      	ldr	r3, [pc, #40]	; (8002bbc <HAL_RCC_GetSysClockFreq+0x108>)
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	0e5b      	lsrs	r3, r3, #25
 8002b98:	f003 0303 	and.w	r3, r3, #3
 8002b9c:	3301      	adds	r3, #1
 8002b9e:	005b      	lsls	r3, r3, #1
 8002ba0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002ba2:	697a      	ldr	r2, [r7, #20]
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002baa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002bac:	69bb      	ldr	r3, [r7, #24]
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3724      	adds	r7, #36	; 0x24
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr
 8002bba:	bf00      	nop
 8002bbc:	40021000 	.word	0x40021000
 8002bc0:	0800a780 	.word	0x0800a780
 8002bc4:	00f42400 	.word	0x00f42400
 8002bc8:	007a1200 	.word	0x007a1200

08002bcc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bd0:	4b03      	ldr	r3, [pc, #12]	; (8002be0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop
 8002be0:	20000000 	.word	0x20000000

08002be4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002be8:	f7ff fff0 	bl	8002bcc <HAL_RCC_GetHCLKFreq>
 8002bec:	4602      	mov	r2, r0
 8002bee:	4b06      	ldr	r3, [pc, #24]	; (8002c08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	0a1b      	lsrs	r3, r3, #8
 8002bf4:	f003 0307 	and.w	r3, r3, #7
 8002bf8:	4904      	ldr	r1, [pc, #16]	; (8002c0c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002bfa:	5ccb      	ldrb	r3, [r1, r3]
 8002bfc:	f003 031f 	and.w	r3, r3, #31
 8002c00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	40021000 	.word	0x40021000
 8002c0c:	0800a778 	.word	0x0800a778

08002c10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002c14:	f7ff ffda 	bl	8002bcc <HAL_RCC_GetHCLKFreq>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	4b06      	ldr	r3, [pc, #24]	; (8002c34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	0adb      	lsrs	r3, r3, #11
 8002c20:	f003 0307 	and.w	r3, r3, #7
 8002c24:	4904      	ldr	r1, [pc, #16]	; (8002c38 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002c26:	5ccb      	ldrb	r3, [r1, r3]
 8002c28:	f003 031f 	and.w	r3, r3, #31
 8002c2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	40021000 	.word	0x40021000
 8002c38:	0800a778 	.word	0x0800a778

08002c3c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b086      	sub	sp, #24
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002c44:	2300      	movs	r3, #0
 8002c46:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002c48:	4b2a      	ldr	r3, [pc, #168]	; (8002cf4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d003      	beq.n	8002c5c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002c54:	f7ff f9a0 	bl	8001f98 <HAL_PWREx_GetVoltageRange>
 8002c58:	6178      	str	r0, [r7, #20]
 8002c5a:	e014      	b.n	8002c86 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c5c:	4b25      	ldr	r3, [pc, #148]	; (8002cf4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c60:	4a24      	ldr	r2, [pc, #144]	; (8002cf4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c66:	6593      	str	r3, [r2, #88]	; 0x58
 8002c68:	4b22      	ldr	r3, [pc, #136]	; (8002cf4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c70:	60fb      	str	r3, [r7, #12]
 8002c72:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002c74:	f7ff f990 	bl	8001f98 <HAL_PWREx_GetVoltageRange>
 8002c78:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002c7a:	4b1e      	ldr	r3, [pc, #120]	; (8002cf4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c7e:	4a1d      	ldr	r2, [pc, #116]	; (8002cf4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c84:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c8c:	d10b      	bne.n	8002ca6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2b80      	cmp	r3, #128	; 0x80
 8002c92:	d919      	bls.n	8002cc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2ba0      	cmp	r3, #160	; 0xa0
 8002c98:	d902      	bls.n	8002ca0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c9a:	2302      	movs	r3, #2
 8002c9c:	613b      	str	r3, [r7, #16]
 8002c9e:	e013      	b.n	8002cc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	613b      	str	r3, [r7, #16]
 8002ca4:	e010      	b.n	8002cc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2b80      	cmp	r3, #128	; 0x80
 8002caa:	d902      	bls.n	8002cb2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002cac:	2303      	movs	r3, #3
 8002cae:	613b      	str	r3, [r7, #16]
 8002cb0:	e00a      	b.n	8002cc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2b80      	cmp	r3, #128	; 0x80
 8002cb6:	d102      	bne.n	8002cbe <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002cb8:	2302      	movs	r3, #2
 8002cba:	613b      	str	r3, [r7, #16]
 8002cbc:	e004      	b.n	8002cc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2b70      	cmp	r3, #112	; 0x70
 8002cc2:	d101      	bne.n	8002cc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002cc8:	4b0b      	ldr	r3, [pc, #44]	; (8002cf8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f023 0207 	bic.w	r2, r3, #7
 8002cd0:	4909      	ldr	r1, [pc, #36]	; (8002cf8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002cd8:	4b07      	ldr	r3, [pc, #28]	; (8002cf8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0307 	and.w	r3, r3, #7
 8002ce0:	693a      	ldr	r2, [r7, #16]
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d001      	beq.n	8002cea <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e000      	b.n	8002cec <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002cea:	2300      	movs	r3, #0
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3718      	adds	r7, #24
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	40021000 	.word	0x40021000
 8002cf8:	40022000 	.word	0x40022000

08002cfc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b086      	sub	sp, #24
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002d04:	2300      	movs	r3, #0
 8002d06:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002d08:	2300      	movs	r3, #0
 8002d0a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d041      	beq.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d1c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002d20:	d02a      	beq.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002d22:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002d26:	d824      	bhi.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002d28:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002d2c:	d008      	beq.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002d2e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002d32:	d81e      	bhi.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d00a      	beq.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002d38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d3c:	d010      	beq.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002d3e:	e018      	b.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002d40:	4b86      	ldr	r3, [pc, #536]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	4a85      	ldr	r2, [pc, #532]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d4a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d4c:	e015      	b.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	3304      	adds	r3, #4
 8002d52:	2100      	movs	r1, #0
 8002d54:	4618      	mov	r0, r3
 8002d56:	f000 facd 	bl	80032f4 <RCCEx_PLLSAI1_Config>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d5e:	e00c      	b.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	3320      	adds	r3, #32
 8002d64:	2100      	movs	r1, #0
 8002d66:	4618      	mov	r0, r3
 8002d68:	f000 fbb6 	bl	80034d8 <RCCEx_PLLSAI2_Config>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d70:	e003      	b.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	74fb      	strb	r3, [r7, #19]
      break;
 8002d76:	e000      	b.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002d78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d7a:	7cfb      	ldrb	r3, [r7, #19]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d10b      	bne.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d80:	4b76      	ldr	r3, [pc, #472]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d86:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d8e:	4973      	ldr	r1, [pc, #460]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d90:	4313      	orrs	r3, r2
 8002d92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002d96:	e001      	b.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d98:	7cfb      	ldrb	r3, [r7, #19]
 8002d9a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d041      	beq.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002dac:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002db0:	d02a      	beq.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002db2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002db6:	d824      	bhi.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002db8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002dbc:	d008      	beq.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002dbe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002dc2:	d81e      	bhi.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d00a      	beq.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002dc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002dcc:	d010      	beq.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002dce:	e018      	b.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002dd0:	4b62      	ldr	r3, [pc, #392]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	4a61      	ldr	r2, [pc, #388]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dda:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002ddc:	e015      	b.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	3304      	adds	r3, #4
 8002de2:	2100      	movs	r1, #0
 8002de4:	4618      	mov	r0, r3
 8002de6:	f000 fa85 	bl	80032f4 <RCCEx_PLLSAI1_Config>
 8002dea:	4603      	mov	r3, r0
 8002dec:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002dee:	e00c      	b.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	3320      	adds	r3, #32
 8002df4:	2100      	movs	r1, #0
 8002df6:	4618      	mov	r0, r3
 8002df8:	f000 fb6e 	bl	80034d8 <RCCEx_PLLSAI2_Config>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002e00:	e003      	b.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	74fb      	strb	r3, [r7, #19]
      break;
 8002e06:	e000      	b.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002e08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e0a:	7cfb      	ldrb	r3, [r7, #19]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d10b      	bne.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002e10:	4b52      	ldr	r3, [pc, #328]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e16:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e1e:	494f      	ldr	r1, [pc, #316]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e20:	4313      	orrs	r3, r2
 8002e22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002e26:	e001      	b.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e28:	7cfb      	ldrb	r3, [r7, #19]
 8002e2a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	f000 80a0 	beq.w	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002e3e:	4b47      	ldr	r3, [pc, #284]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d101      	bne.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e000      	b.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002e4e:	2300      	movs	r3, #0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d00d      	beq.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e54:	4b41      	ldr	r3, [pc, #260]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e58:	4a40      	ldr	r2, [pc, #256]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e5e:	6593      	str	r3, [r2, #88]	; 0x58
 8002e60:	4b3e      	ldr	r3, [pc, #248]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e68:	60bb      	str	r3, [r7, #8]
 8002e6a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e70:	4b3b      	ldr	r3, [pc, #236]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a3a      	ldr	r2, [pc, #232]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002e76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e7a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e7c:	f7fe fddc 	bl	8001a38 <HAL_GetTick>
 8002e80:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002e82:	e009      	b.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e84:	f7fe fdd8 	bl	8001a38 <HAL_GetTick>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d902      	bls.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	74fb      	strb	r3, [r7, #19]
        break;
 8002e96:	e005      	b.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002e98:	4b31      	ldr	r3, [pc, #196]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d0ef      	beq.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002ea4:	7cfb      	ldrb	r3, [r7, #19]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d15c      	bne.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002eaa:	4b2c      	ldr	r3, [pc, #176]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002eac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002eb4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d01f      	beq.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ec2:	697a      	ldr	r2, [r7, #20]
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d019      	beq.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002ec8:	4b24      	ldr	r3, [pc, #144]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ece:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ed2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002ed4:	4b21      	ldr	r3, [pc, #132]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eda:	4a20      	ldr	r2, [pc, #128]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002edc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ee0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ee4:	4b1d      	ldr	r3, [pc, #116]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eea:	4a1c      	ldr	r2, [pc, #112]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002eec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ef0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002ef4:	4a19      	ldr	r2, [pc, #100]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	f003 0301 	and.w	r3, r3, #1
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d016      	beq.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f06:	f7fe fd97 	bl	8001a38 <HAL_GetTick>
 8002f0a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f0c:	e00b      	b.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f0e:	f7fe fd93 	bl	8001a38 <HAL_GetTick>
 8002f12:	4602      	mov	r2, r0
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d902      	bls.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002f20:	2303      	movs	r3, #3
 8002f22:	74fb      	strb	r3, [r7, #19]
            break;
 8002f24:	e006      	b.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f26:	4b0d      	ldr	r3, [pc, #52]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f2c:	f003 0302 	and.w	r3, r3, #2
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d0ec      	beq.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002f34:	7cfb      	ldrb	r3, [r7, #19]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d10c      	bne.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f3a:	4b08      	ldr	r3, [pc, #32]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f40:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f4a:	4904      	ldr	r1, [pc, #16]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002f52:	e009      	b.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002f54:	7cfb      	ldrb	r3, [r7, #19]
 8002f56:	74bb      	strb	r3, [r7, #18]
 8002f58:	e006      	b.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002f5a:	bf00      	nop
 8002f5c:	40021000 	.word	0x40021000
 8002f60:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f64:	7cfb      	ldrb	r3, [r7, #19]
 8002f66:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f68:	7c7b      	ldrb	r3, [r7, #17]
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d105      	bne.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f6e:	4ba6      	ldr	r3, [pc, #664]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f72:	4aa5      	ldr	r2, [pc, #660]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002f74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f78:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0301 	and.w	r3, r3, #1
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d00a      	beq.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f86:	4ba0      	ldr	r3, [pc, #640]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002f88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f8c:	f023 0203 	bic.w	r2, r3, #3
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f94:	499c      	ldr	r1, [pc, #624]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002f96:	4313      	orrs	r3, r2
 8002f98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0302 	and.w	r3, r3, #2
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d00a      	beq.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002fa8:	4b97      	ldr	r3, [pc, #604]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fae:	f023 020c 	bic.w	r2, r3, #12
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fb6:	4994      	ldr	r1, [pc, #592]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0304 	and.w	r3, r3, #4
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d00a      	beq.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002fca:	4b8f      	ldr	r3, [pc, #572]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fd0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd8:	498b      	ldr	r1, [pc, #556]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0308 	and.w	r3, r3, #8
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d00a      	beq.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002fec:	4b86      	ldr	r3, [pc, #536]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ff2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ffa:	4983      	ldr	r1, [pc, #524]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0310 	and.w	r3, r3, #16
 800300a:	2b00      	cmp	r3, #0
 800300c:	d00a      	beq.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800300e:	4b7e      	ldr	r3, [pc, #504]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003010:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003014:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800301c:	497a      	ldr	r1, [pc, #488]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800301e:	4313      	orrs	r3, r2
 8003020:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 0320 	and.w	r3, r3, #32
 800302c:	2b00      	cmp	r3, #0
 800302e:	d00a      	beq.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003030:	4b75      	ldr	r3, [pc, #468]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003036:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800303e:	4972      	ldr	r1, [pc, #456]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003040:	4313      	orrs	r3, r2
 8003042:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800304e:	2b00      	cmp	r3, #0
 8003050:	d00a      	beq.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003052:	4b6d      	ldr	r3, [pc, #436]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003054:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003058:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003060:	4969      	ldr	r1, [pc, #420]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003062:	4313      	orrs	r3, r2
 8003064:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003070:	2b00      	cmp	r3, #0
 8003072:	d00a      	beq.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003074:	4b64      	ldr	r3, [pc, #400]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003076:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800307a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003082:	4961      	ldr	r1, [pc, #388]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003084:	4313      	orrs	r3, r2
 8003086:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003092:	2b00      	cmp	r3, #0
 8003094:	d00a      	beq.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003096:	4b5c      	ldr	r3, [pc, #368]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003098:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800309c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030a4:	4958      	ldr	r1, [pc, #352]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80030a6:	4313      	orrs	r3, r2
 80030a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d00a      	beq.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80030b8:	4b53      	ldr	r3, [pc, #332]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80030ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030be:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030c6:	4950      	ldr	r1, [pc, #320]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80030c8:	4313      	orrs	r3, r2
 80030ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d00a      	beq.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80030da:	4b4b      	ldr	r3, [pc, #300]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80030dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030e8:	4947      	ldr	r1, [pc, #284]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80030ea:	4313      	orrs	r3, r2
 80030ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d00a      	beq.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80030fc:	4b42      	ldr	r3, [pc, #264]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80030fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003102:	f023 0203 	bic.w	r2, r3, #3
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800310a:	493f      	ldr	r1, [pc, #252]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800310c:	4313      	orrs	r3, r2
 800310e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d028      	beq.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800311e:	4b3a      	ldr	r3, [pc, #232]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003120:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003124:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800312c:	4936      	ldr	r1, [pc, #216]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800312e:	4313      	orrs	r3, r2
 8003130:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003138:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800313c:	d106      	bne.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800313e:	4b32      	ldr	r3, [pc, #200]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003140:	68db      	ldr	r3, [r3, #12]
 8003142:	4a31      	ldr	r2, [pc, #196]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003144:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003148:	60d3      	str	r3, [r2, #12]
 800314a:	e011      	b.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003150:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003154:	d10c      	bne.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	3304      	adds	r3, #4
 800315a:	2101      	movs	r1, #1
 800315c:	4618      	mov	r0, r3
 800315e:	f000 f8c9 	bl	80032f4 <RCCEx_PLLSAI1_Config>
 8003162:	4603      	mov	r3, r0
 8003164:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003166:	7cfb      	ldrb	r3, [r7, #19]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d001      	beq.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 800316c:	7cfb      	ldrb	r3, [r7, #19]
 800316e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003178:	2b00      	cmp	r3, #0
 800317a:	d028      	beq.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800317c:	4b22      	ldr	r3, [pc, #136]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800317e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003182:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800318a:	491f      	ldr	r1, [pc, #124]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800318c:	4313      	orrs	r3, r2
 800318e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003196:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800319a:	d106      	bne.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800319c:	4b1a      	ldr	r3, [pc, #104]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	4a19      	ldr	r2, [pc, #100]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80031a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80031a6:	60d3      	str	r3, [r2, #12]
 80031a8:	e011      	b.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031ae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80031b2:	d10c      	bne.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	3304      	adds	r3, #4
 80031b8:	2101      	movs	r1, #1
 80031ba:	4618      	mov	r0, r3
 80031bc:	f000 f89a 	bl	80032f4 <RCCEx_PLLSAI1_Config>
 80031c0:	4603      	mov	r3, r0
 80031c2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80031c4:	7cfb      	ldrb	r3, [r7, #19]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d001      	beq.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 80031ca:	7cfb      	ldrb	r3, [r7, #19]
 80031cc:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d02a      	beq.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80031da:	4b0b      	ldr	r3, [pc, #44]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80031dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031e0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031e8:	4907      	ldr	r1, [pc, #28]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80031ea:	4313      	orrs	r3, r2
 80031ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031f8:	d108      	bne.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80031fa:	4b03      	ldr	r3, [pc, #12]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	4a02      	ldr	r2, [pc, #8]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003200:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003204:	60d3      	str	r3, [r2, #12]
 8003206:	e013      	b.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8003208:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003210:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003214:	d10c      	bne.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	3304      	adds	r3, #4
 800321a:	2101      	movs	r1, #1
 800321c:	4618      	mov	r0, r3
 800321e:	f000 f869 	bl	80032f4 <RCCEx_PLLSAI1_Config>
 8003222:	4603      	mov	r3, r0
 8003224:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003226:	7cfb      	ldrb	r3, [r7, #19]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d001      	beq.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 800322c:	7cfb      	ldrb	r3, [r7, #19]
 800322e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003238:	2b00      	cmp	r3, #0
 800323a:	d02f      	beq.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800323c:	4b2c      	ldr	r3, [pc, #176]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800323e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003242:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800324a:	4929      	ldr	r1, [pc, #164]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800324c:	4313      	orrs	r3, r2
 800324e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003256:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800325a:	d10d      	bne.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	3304      	adds	r3, #4
 8003260:	2102      	movs	r1, #2
 8003262:	4618      	mov	r0, r3
 8003264:	f000 f846 	bl	80032f4 <RCCEx_PLLSAI1_Config>
 8003268:	4603      	mov	r3, r0
 800326a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800326c:	7cfb      	ldrb	r3, [r7, #19]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d014      	beq.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8003272:	7cfb      	ldrb	r3, [r7, #19]
 8003274:	74bb      	strb	r3, [r7, #18]
 8003276:	e011      	b.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800327c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003280:	d10c      	bne.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	3320      	adds	r3, #32
 8003286:	2102      	movs	r1, #2
 8003288:	4618      	mov	r0, r3
 800328a:	f000 f925 	bl	80034d8 <RCCEx_PLLSAI2_Config>
 800328e:	4603      	mov	r3, r0
 8003290:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003292:	7cfb      	ldrb	r3, [r7, #19]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d001      	beq.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8003298:	7cfb      	ldrb	r3, [r7, #19]
 800329a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d00b      	beq.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80032a8:	4b11      	ldr	r3, [pc, #68]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80032aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ae:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032b8:	490d      	ldr	r1, [pc, #52]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80032ba:	4313      	orrs	r3, r2
 80032bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d00b      	beq.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80032cc:	4b08      	ldr	r3, [pc, #32]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80032ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032d2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032dc:	4904      	ldr	r1, [pc, #16]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80032de:	4313      	orrs	r3, r2
 80032e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80032e4:	7cbb      	ldrb	r3, [r7, #18]
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3718      	adds	r7, #24
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	40021000 	.word	0x40021000

080032f4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b084      	sub	sp, #16
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80032fe:	2300      	movs	r3, #0
 8003300:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003302:	4b74      	ldr	r3, [pc, #464]	; (80034d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003304:	68db      	ldr	r3, [r3, #12]
 8003306:	f003 0303 	and.w	r3, r3, #3
 800330a:	2b00      	cmp	r3, #0
 800330c:	d018      	beq.n	8003340 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800330e:	4b71      	ldr	r3, [pc, #452]	; (80034d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	f003 0203 	and.w	r2, r3, #3
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	429a      	cmp	r2, r3
 800331c:	d10d      	bne.n	800333a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
       ||
 8003322:	2b00      	cmp	r3, #0
 8003324:	d009      	beq.n	800333a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003326:	4b6b      	ldr	r3, [pc, #428]	; (80034d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	091b      	lsrs	r3, r3, #4
 800332c:	f003 0307 	and.w	r3, r3, #7
 8003330:	1c5a      	adds	r2, r3, #1
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685b      	ldr	r3, [r3, #4]
       ||
 8003336:	429a      	cmp	r2, r3
 8003338:	d047      	beq.n	80033ca <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	73fb      	strb	r3, [r7, #15]
 800333e:	e044      	b.n	80033ca <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	2b03      	cmp	r3, #3
 8003346:	d018      	beq.n	800337a <RCCEx_PLLSAI1_Config+0x86>
 8003348:	2b03      	cmp	r3, #3
 800334a:	d825      	bhi.n	8003398 <RCCEx_PLLSAI1_Config+0xa4>
 800334c:	2b01      	cmp	r3, #1
 800334e:	d002      	beq.n	8003356 <RCCEx_PLLSAI1_Config+0x62>
 8003350:	2b02      	cmp	r3, #2
 8003352:	d009      	beq.n	8003368 <RCCEx_PLLSAI1_Config+0x74>
 8003354:	e020      	b.n	8003398 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003356:	4b5f      	ldr	r3, [pc, #380]	; (80034d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0302 	and.w	r3, r3, #2
 800335e:	2b00      	cmp	r3, #0
 8003360:	d11d      	bne.n	800339e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003366:	e01a      	b.n	800339e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003368:	4b5a      	ldr	r3, [pc, #360]	; (80034d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003370:	2b00      	cmp	r3, #0
 8003372:	d116      	bne.n	80033a2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003378:	e013      	b.n	80033a2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800337a:	4b56      	ldr	r3, [pc, #344]	; (80034d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d10f      	bne.n	80033a6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003386:	4b53      	ldr	r3, [pc, #332]	; (80034d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d109      	bne.n	80033a6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003396:	e006      	b.n	80033a6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	73fb      	strb	r3, [r7, #15]
      break;
 800339c:	e004      	b.n	80033a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800339e:	bf00      	nop
 80033a0:	e002      	b.n	80033a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80033a2:	bf00      	nop
 80033a4:	e000      	b.n	80033a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80033a6:	bf00      	nop
    }

    if(status == HAL_OK)
 80033a8:	7bfb      	ldrb	r3, [r7, #15]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d10d      	bne.n	80033ca <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80033ae:	4b49      	ldr	r3, [pc, #292]	; (80034d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6819      	ldr	r1, [r3, #0]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	3b01      	subs	r3, #1
 80033c0:	011b      	lsls	r3, r3, #4
 80033c2:	430b      	orrs	r3, r1
 80033c4:	4943      	ldr	r1, [pc, #268]	; (80034d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033c6:	4313      	orrs	r3, r2
 80033c8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80033ca:	7bfb      	ldrb	r3, [r7, #15]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d17c      	bne.n	80034ca <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80033d0:	4b40      	ldr	r3, [pc, #256]	; (80034d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a3f      	ldr	r2, [pc, #252]	; (80034d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033d6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80033da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033dc:	f7fe fb2c 	bl	8001a38 <HAL_GetTick>
 80033e0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80033e2:	e009      	b.n	80033f8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80033e4:	f7fe fb28 	bl	8001a38 <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d902      	bls.n	80033f8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	73fb      	strb	r3, [r7, #15]
        break;
 80033f6:	e005      	b.n	8003404 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80033f8:	4b36      	ldr	r3, [pc, #216]	; (80034d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003400:	2b00      	cmp	r3, #0
 8003402:	d1ef      	bne.n	80033e4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003404:	7bfb      	ldrb	r3, [r7, #15]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d15f      	bne.n	80034ca <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d110      	bne.n	8003432 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003410:	4b30      	ldr	r3, [pc, #192]	; (80034d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003412:	691b      	ldr	r3, [r3, #16]
 8003414:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003418:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800341c:	687a      	ldr	r2, [r7, #4]
 800341e:	6892      	ldr	r2, [r2, #8]
 8003420:	0211      	lsls	r1, r2, #8
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	68d2      	ldr	r2, [r2, #12]
 8003426:	06d2      	lsls	r2, r2, #27
 8003428:	430a      	orrs	r2, r1
 800342a:	492a      	ldr	r1, [pc, #168]	; (80034d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800342c:	4313      	orrs	r3, r2
 800342e:	610b      	str	r3, [r1, #16]
 8003430:	e027      	b.n	8003482 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	2b01      	cmp	r3, #1
 8003436:	d112      	bne.n	800345e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003438:	4b26      	ldr	r3, [pc, #152]	; (80034d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800343a:	691b      	ldr	r3, [r3, #16]
 800343c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003440:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003444:	687a      	ldr	r2, [r7, #4]
 8003446:	6892      	ldr	r2, [r2, #8]
 8003448:	0211      	lsls	r1, r2, #8
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	6912      	ldr	r2, [r2, #16]
 800344e:	0852      	lsrs	r2, r2, #1
 8003450:	3a01      	subs	r2, #1
 8003452:	0552      	lsls	r2, r2, #21
 8003454:	430a      	orrs	r2, r1
 8003456:	491f      	ldr	r1, [pc, #124]	; (80034d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003458:	4313      	orrs	r3, r2
 800345a:	610b      	str	r3, [r1, #16]
 800345c:	e011      	b.n	8003482 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800345e:	4b1d      	ldr	r3, [pc, #116]	; (80034d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003460:	691b      	ldr	r3, [r3, #16]
 8003462:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003466:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	6892      	ldr	r2, [r2, #8]
 800346e:	0211      	lsls	r1, r2, #8
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	6952      	ldr	r2, [r2, #20]
 8003474:	0852      	lsrs	r2, r2, #1
 8003476:	3a01      	subs	r2, #1
 8003478:	0652      	lsls	r2, r2, #25
 800347a:	430a      	orrs	r2, r1
 800347c:	4915      	ldr	r1, [pc, #84]	; (80034d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800347e:	4313      	orrs	r3, r2
 8003480:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003482:	4b14      	ldr	r3, [pc, #80]	; (80034d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a13      	ldr	r2, [pc, #76]	; (80034d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003488:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800348c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800348e:	f7fe fad3 	bl	8001a38 <HAL_GetTick>
 8003492:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003494:	e009      	b.n	80034aa <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003496:	f7fe facf 	bl	8001a38 <HAL_GetTick>
 800349a:	4602      	mov	r2, r0
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	2b02      	cmp	r3, #2
 80034a2:	d902      	bls.n	80034aa <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80034a4:	2303      	movs	r3, #3
 80034a6:	73fb      	strb	r3, [r7, #15]
          break;
 80034a8:	e005      	b.n	80034b6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80034aa:	4b0a      	ldr	r3, [pc, #40]	; (80034d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d0ef      	beq.n	8003496 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80034b6:	7bfb      	ldrb	r3, [r7, #15]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d106      	bne.n	80034ca <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80034bc:	4b05      	ldr	r3, [pc, #20]	; (80034d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80034be:	691a      	ldr	r2, [r3, #16]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	699b      	ldr	r3, [r3, #24]
 80034c4:	4903      	ldr	r1, [pc, #12]	; (80034d4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80034c6:	4313      	orrs	r3, r2
 80034c8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80034ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3710      	adds	r7, #16
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}
 80034d4:	40021000 	.word	0x40021000

080034d8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b084      	sub	sp, #16
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80034e2:	2300      	movs	r3, #0
 80034e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80034e6:	4b69      	ldr	r3, [pc, #420]	; (800368c <RCCEx_PLLSAI2_Config+0x1b4>)
 80034e8:	68db      	ldr	r3, [r3, #12]
 80034ea:	f003 0303 	and.w	r3, r3, #3
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d018      	beq.n	8003524 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80034f2:	4b66      	ldr	r3, [pc, #408]	; (800368c <RCCEx_PLLSAI2_Config+0x1b4>)
 80034f4:	68db      	ldr	r3, [r3, #12]
 80034f6:	f003 0203 	and.w	r2, r3, #3
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	429a      	cmp	r2, r3
 8003500:	d10d      	bne.n	800351e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
       ||
 8003506:	2b00      	cmp	r3, #0
 8003508:	d009      	beq.n	800351e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800350a:	4b60      	ldr	r3, [pc, #384]	; (800368c <RCCEx_PLLSAI2_Config+0x1b4>)
 800350c:	68db      	ldr	r3, [r3, #12]
 800350e:	091b      	lsrs	r3, r3, #4
 8003510:	f003 0307 	and.w	r3, r3, #7
 8003514:	1c5a      	adds	r2, r3, #1
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	685b      	ldr	r3, [r3, #4]
       ||
 800351a:	429a      	cmp	r2, r3
 800351c:	d047      	beq.n	80035ae <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	73fb      	strb	r3, [r7, #15]
 8003522:	e044      	b.n	80035ae <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	2b03      	cmp	r3, #3
 800352a:	d018      	beq.n	800355e <RCCEx_PLLSAI2_Config+0x86>
 800352c:	2b03      	cmp	r3, #3
 800352e:	d825      	bhi.n	800357c <RCCEx_PLLSAI2_Config+0xa4>
 8003530:	2b01      	cmp	r3, #1
 8003532:	d002      	beq.n	800353a <RCCEx_PLLSAI2_Config+0x62>
 8003534:	2b02      	cmp	r3, #2
 8003536:	d009      	beq.n	800354c <RCCEx_PLLSAI2_Config+0x74>
 8003538:	e020      	b.n	800357c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800353a:	4b54      	ldr	r3, [pc, #336]	; (800368c <RCCEx_PLLSAI2_Config+0x1b4>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0302 	and.w	r3, r3, #2
 8003542:	2b00      	cmp	r3, #0
 8003544:	d11d      	bne.n	8003582 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800354a:	e01a      	b.n	8003582 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800354c:	4b4f      	ldr	r3, [pc, #316]	; (800368c <RCCEx_PLLSAI2_Config+0x1b4>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003554:	2b00      	cmp	r3, #0
 8003556:	d116      	bne.n	8003586 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800355c:	e013      	b.n	8003586 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800355e:	4b4b      	ldr	r3, [pc, #300]	; (800368c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d10f      	bne.n	800358a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800356a:	4b48      	ldr	r3, [pc, #288]	; (800368c <RCCEx_PLLSAI2_Config+0x1b4>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d109      	bne.n	800358a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800357a:	e006      	b.n	800358a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	73fb      	strb	r3, [r7, #15]
      break;
 8003580:	e004      	b.n	800358c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003582:	bf00      	nop
 8003584:	e002      	b.n	800358c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003586:	bf00      	nop
 8003588:	e000      	b.n	800358c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800358a:	bf00      	nop
    }

    if(status == HAL_OK)
 800358c:	7bfb      	ldrb	r3, [r7, #15]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d10d      	bne.n	80035ae <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003592:	4b3e      	ldr	r3, [pc, #248]	; (800368c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003594:	68db      	ldr	r3, [r3, #12]
 8003596:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6819      	ldr	r1, [r3, #0]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	3b01      	subs	r3, #1
 80035a4:	011b      	lsls	r3, r3, #4
 80035a6:	430b      	orrs	r3, r1
 80035a8:	4938      	ldr	r1, [pc, #224]	; (800368c <RCCEx_PLLSAI2_Config+0x1b4>)
 80035aa:	4313      	orrs	r3, r2
 80035ac:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80035ae:	7bfb      	ldrb	r3, [r7, #15]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d166      	bne.n	8003682 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80035b4:	4b35      	ldr	r3, [pc, #212]	; (800368c <RCCEx_PLLSAI2_Config+0x1b4>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a34      	ldr	r2, [pc, #208]	; (800368c <RCCEx_PLLSAI2_Config+0x1b4>)
 80035ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035c0:	f7fe fa3a 	bl	8001a38 <HAL_GetTick>
 80035c4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80035c6:	e009      	b.n	80035dc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80035c8:	f7fe fa36 	bl	8001a38 <HAL_GetTick>
 80035cc:	4602      	mov	r2, r0
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	2b02      	cmp	r3, #2
 80035d4:	d902      	bls.n	80035dc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	73fb      	strb	r3, [r7, #15]
        break;
 80035da:	e005      	b.n	80035e8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80035dc:	4b2b      	ldr	r3, [pc, #172]	; (800368c <RCCEx_PLLSAI2_Config+0x1b4>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d1ef      	bne.n	80035c8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80035e8:	7bfb      	ldrb	r3, [r7, #15]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d149      	bne.n	8003682 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d110      	bne.n	8003616 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80035f4:	4b25      	ldr	r3, [pc, #148]	; (800368c <RCCEx_PLLSAI2_Config+0x1b4>)
 80035f6:	695b      	ldr	r3, [r3, #20]
 80035f8:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80035fc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003600:	687a      	ldr	r2, [r7, #4]
 8003602:	6892      	ldr	r2, [r2, #8]
 8003604:	0211      	lsls	r1, r2, #8
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	68d2      	ldr	r2, [r2, #12]
 800360a:	06d2      	lsls	r2, r2, #27
 800360c:	430a      	orrs	r2, r1
 800360e:	491f      	ldr	r1, [pc, #124]	; (800368c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003610:	4313      	orrs	r3, r2
 8003612:	614b      	str	r3, [r1, #20]
 8003614:	e011      	b.n	800363a <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003616:	4b1d      	ldr	r3, [pc, #116]	; (800368c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003618:	695b      	ldr	r3, [r3, #20]
 800361a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800361e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	6892      	ldr	r2, [r2, #8]
 8003626:	0211      	lsls	r1, r2, #8
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	6912      	ldr	r2, [r2, #16]
 800362c:	0852      	lsrs	r2, r2, #1
 800362e:	3a01      	subs	r2, #1
 8003630:	0652      	lsls	r2, r2, #25
 8003632:	430a      	orrs	r2, r1
 8003634:	4915      	ldr	r1, [pc, #84]	; (800368c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003636:	4313      	orrs	r3, r2
 8003638:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800363a:	4b14      	ldr	r3, [pc, #80]	; (800368c <RCCEx_PLLSAI2_Config+0x1b4>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a13      	ldr	r2, [pc, #76]	; (800368c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003640:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003644:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003646:	f7fe f9f7 	bl	8001a38 <HAL_GetTick>
 800364a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800364c:	e009      	b.n	8003662 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800364e:	f7fe f9f3 	bl	8001a38 <HAL_GetTick>
 8003652:	4602      	mov	r2, r0
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	1ad3      	subs	r3, r2, r3
 8003658:	2b02      	cmp	r3, #2
 800365a:	d902      	bls.n	8003662 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 800365c:	2303      	movs	r3, #3
 800365e:	73fb      	strb	r3, [r7, #15]
          break;
 8003660:	e005      	b.n	800366e <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003662:	4b0a      	ldr	r3, [pc, #40]	; (800368c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d0ef      	beq.n	800364e <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 800366e:	7bfb      	ldrb	r3, [r7, #15]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d106      	bne.n	8003682 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003674:	4b05      	ldr	r3, [pc, #20]	; (800368c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003676:	695a      	ldr	r2, [r3, #20]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	695b      	ldr	r3, [r3, #20]
 800367c:	4903      	ldr	r1, [pc, #12]	; (800368c <RCCEx_PLLSAI2_Config+0x1b4>)
 800367e:	4313      	orrs	r3, r2
 8003680:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003682:	7bfb      	ldrb	r3, [r7, #15]
}
 8003684:	4618      	mov	r0, r3
 8003686:	3710      	adds	r7, #16
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}
 800368c:	40021000 	.word	0x40021000

08003690 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b082      	sub	sp, #8
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d101      	bne.n	80036a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e049      	b.n	8003736 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d106      	bne.n	80036bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f7fd ff92 	bl	80015e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2202      	movs	r2, #2
 80036c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	3304      	adds	r3, #4
 80036cc:	4619      	mov	r1, r3
 80036ce:	4610      	mov	r0, r2
 80036d0:	f000 ff4e 	bl	8004570 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2201      	movs	r2, #1
 80036f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2201      	movs	r2, #1
 8003728:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2201      	movs	r2, #1
 8003730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003734:	2300      	movs	r3, #0
}
 8003736:	4618      	mov	r0, r3
 8003738:	3708      	adds	r7, #8
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}

0800373e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800373e:	b580      	push	{r7, lr}
 8003740:	b082      	sub	sp, #8
 8003742:	af00      	add	r7, sp, #0
 8003744:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d101      	bne.n	8003750 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	e049      	b.n	80037e4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003756:	b2db      	uxtb	r3, r3
 8003758:	2b00      	cmp	r3, #0
 800375a:	d106      	bne.n	800376a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	f000 f841 	bl	80037ec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2202      	movs	r2, #2
 800376e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	3304      	adds	r3, #4
 800377a:	4619      	mov	r1, r3
 800377c:	4610      	mov	r0, r2
 800377e:	f000 fef7 	bl	8004570 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2201      	movs	r2, #1
 8003786:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2201      	movs	r2, #1
 800378e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2201      	movs	r2, #1
 8003796:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2201      	movs	r2, #1
 800379e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2201      	movs	r2, #1
 80037a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2201      	movs	r2, #1
 80037ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2201      	movs	r2, #1
 80037b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2201      	movs	r2, #1
 80037be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2201      	movs	r2, #1
 80037c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2201      	movs	r2, #1
 80037ce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2201      	movs	r2, #1
 80037d6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2201      	movs	r2, #1
 80037de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80037e2:	2300      	movs	r3, #0
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3708      	adds	r7, #8
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}

080037ec <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b083      	sub	sp, #12
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80037f4:	bf00      	nop
 80037f6:	370c      	adds	r7, #12
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr

08003800 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d109      	bne.n	8003824 <HAL_TIM_PWM_Start+0x24>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003816:	b2db      	uxtb	r3, r3
 8003818:	2b01      	cmp	r3, #1
 800381a:	bf14      	ite	ne
 800381c:	2301      	movne	r3, #1
 800381e:	2300      	moveq	r3, #0
 8003820:	b2db      	uxtb	r3, r3
 8003822:	e03c      	b.n	800389e <HAL_TIM_PWM_Start+0x9e>
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	2b04      	cmp	r3, #4
 8003828:	d109      	bne.n	800383e <HAL_TIM_PWM_Start+0x3e>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003830:	b2db      	uxtb	r3, r3
 8003832:	2b01      	cmp	r3, #1
 8003834:	bf14      	ite	ne
 8003836:	2301      	movne	r3, #1
 8003838:	2300      	moveq	r3, #0
 800383a:	b2db      	uxtb	r3, r3
 800383c:	e02f      	b.n	800389e <HAL_TIM_PWM_Start+0x9e>
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	2b08      	cmp	r3, #8
 8003842:	d109      	bne.n	8003858 <HAL_TIM_PWM_Start+0x58>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800384a:	b2db      	uxtb	r3, r3
 800384c:	2b01      	cmp	r3, #1
 800384e:	bf14      	ite	ne
 8003850:	2301      	movne	r3, #1
 8003852:	2300      	moveq	r3, #0
 8003854:	b2db      	uxtb	r3, r3
 8003856:	e022      	b.n	800389e <HAL_TIM_PWM_Start+0x9e>
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	2b0c      	cmp	r3, #12
 800385c:	d109      	bne.n	8003872 <HAL_TIM_PWM_Start+0x72>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003864:	b2db      	uxtb	r3, r3
 8003866:	2b01      	cmp	r3, #1
 8003868:	bf14      	ite	ne
 800386a:	2301      	movne	r3, #1
 800386c:	2300      	moveq	r3, #0
 800386e:	b2db      	uxtb	r3, r3
 8003870:	e015      	b.n	800389e <HAL_TIM_PWM_Start+0x9e>
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	2b10      	cmp	r3, #16
 8003876:	d109      	bne.n	800388c <HAL_TIM_PWM_Start+0x8c>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800387e:	b2db      	uxtb	r3, r3
 8003880:	2b01      	cmp	r3, #1
 8003882:	bf14      	ite	ne
 8003884:	2301      	movne	r3, #1
 8003886:	2300      	moveq	r3, #0
 8003888:	b2db      	uxtb	r3, r3
 800388a:	e008      	b.n	800389e <HAL_TIM_PWM_Start+0x9e>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003892:	b2db      	uxtb	r3, r3
 8003894:	2b01      	cmp	r3, #1
 8003896:	bf14      	ite	ne
 8003898:	2301      	movne	r3, #1
 800389a:	2300      	moveq	r3, #0
 800389c:	b2db      	uxtb	r3, r3
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d001      	beq.n	80038a6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e09c      	b.n	80039e0 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d104      	bne.n	80038b6 <HAL_TIM_PWM_Start+0xb6>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2202      	movs	r2, #2
 80038b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038b4:	e023      	b.n	80038fe <HAL_TIM_PWM_Start+0xfe>
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	2b04      	cmp	r3, #4
 80038ba:	d104      	bne.n	80038c6 <HAL_TIM_PWM_Start+0xc6>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2202      	movs	r2, #2
 80038c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038c4:	e01b      	b.n	80038fe <HAL_TIM_PWM_Start+0xfe>
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	2b08      	cmp	r3, #8
 80038ca:	d104      	bne.n	80038d6 <HAL_TIM_PWM_Start+0xd6>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2202      	movs	r2, #2
 80038d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038d4:	e013      	b.n	80038fe <HAL_TIM_PWM_Start+0xfe>
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	2b0c      	cmp	r3, #12
 80038da:	d104      	bne.n	80038e6 <HAL_TIM_PWM_Start+0xe6>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2202      	movs	r2, #2
 80038e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80038e4:	e00b      	b.n	80038fe <HAL_TIM_PWM_Start+0xfe>
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	2b10      	cmp	r3, #16
 80038ea:	d104      	bne.n	80038f6 <HAL_TIM_PWM_Start+0xf6>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2202      	movs	r2, #2
 80038f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038f4:	e003      	b.n	80038fe <HAL_TIM_PWM_Start+0xfe>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2202      	movs	r2, #2
 80038fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	2201      	movs	r2, #1
 8003904:	6839      	ldr	r1, [r7, #0]
 8003906:	4618      	mov	r0, r3
 8003908:	f001 fb60 	bl	8004fcc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a35      	ldr	r2, [pc, #212]	; (80039e8 <HAL_TIM_PWM_Start+0x1e8>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d013      	beq.n	800393e <HAL_TIM_PWM_Start+0x13e>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a34      	ldr	r2, [pc, #208]	; (80039ec <HAL_TIM_PWM_Start+0x1ec>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d00e      	beq.n	800393e <HAL_TIM_PWM_Start+0x13e>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a32      	ldr	r2, [pc, #200]	; (80039f0 <HAL_TIM_PWM_Start+0x1f0>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d009      	beq.n	800393e <HAL_TIM_PWM_Start+0x13e>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a31      	ldr	r2, [pc, #196]	; (80039f4 <HAL_TIM_PWM_Start+0x1f4>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d004      	beq.n	800393e <HAL_TIM_PWM_Start+0x13e>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a2f      	ldr	r2, [pc, #188]	; (80039f8 <HAL_TIM_PWM_Start+0x1f8>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d101      	bne.n	8003942 <HAL_TIM_PWM_Start+0x142>
 800393e:	2301      	movs	r3, #1
 8003940:	e000      	b.n	8003944 <HAL_TIM_PWM_Start+0x144>
 8003942:	2300      	movs	r3, #0
 8003944:	2b00      	cmp	r3, #0
 8003946:	d007      	beq.n	8003958 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003956:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a22      	ldr	r2, [pc, #136]	; (80039e8 <HAL_TIM_PWM_Start+0x1e8>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d01d      	beq.n	800399e <HAL_TIM_PWM_Start+0x19e>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800396a:	d018      	beq.n	800399e <HAL_TIM_PWM_Start+0x19e>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a22      	ldr	r2, [pc, #136]	; (80039fc <HAL_TIM_PWM_Start+0x1fc>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d013      	beq.n	800399e <HAL_TIM_PWM_Start+0x19e>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a21      	ldr	r2, [pc, #132]	; (8003a00 <HAL_TIM_PWM_Start+0x200>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d00e      	beq.n	800399e <HAL_TIM_PWM_Start+0x19e>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a1f      	ldr	r2, [pc, #124]	; (8003a04 <HAL_TIM_PWM_Start+0x204>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d009      	beq.n	800399e <HAL_TIM_PWM_Start+0x19e>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a17      	ldr	r2, [pc, #92]	; (80039ec <HAL_TIM_PWM_Start+0x1ec>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d004      	beq.n	800399e <HAL_TIM_PWM_Start+0x19e>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a15      	ldr	r2, [pc, #84]	; (80039f0 <HAL_TIM_PWM_Start+0x1f0>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d115      	bne.n	80039ca <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	689a      	ldr	r2, [r3, #8]
 80039a4:	4b18      	ldr	r3, [pc, #96]	; (8003a08 <HAL_TIM_PWM_Start+0x208>)
 80039a6:	4013      	ands	r3, r2
 80039a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2b06      	cmp	r3, #6
 80039ae:	d015      	beq.n	80039dc <HAL_TIM_PWM_Start+0x1dc>
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039b6:	d011      	beq.n	80039dc <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f042 0201 	orr.w	r2, r2, #1
 80039c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039c8:	e008      	b.n	80039dc <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f042 0201 	orr.w	r2, r2, #1
 80039d8:	601a      	str	r2, [r3, #0]
 80039da:	e000      	b.n	80039de <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039dc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80039de:	2300      	movs	r3, #0
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3710      	adds	r7, #16
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}
 80039e8:	40012c00 	.word	0x40012c00
 80039ec:	40013400 	.word	0x40013400
 80039f0:	40014000 	.word	0x40014000
 80039f4:	40014400 	.word	0x40014400
 80039f8:	40014800 	.word	0x40014800
 80039fc:	40000400 	.word	0x40000400
 8003a00:	40000800 	.word	0x40000800
 8003a04:	40000c00 	.word	0x40000c00
 8003a08:	00010007 	.word	0x00010007

08003a0c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b082      	sub	sp, #8
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d101      	bne.n	8003a1e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e049      	b.n	8003ab2 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d106      	bne.n	8003a38 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f000 f841 	bl	8003aba <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2202      	movs	r2, #2
 8003a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	3304      	adds	r3, #4
 8003a48:	4619      	mov	r1, r3
 8003a4a:	4610      	mov	r0, r2
 8003a4c:	f000 fd90 	bl	8004570 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2201      	movs	r2, #1
 8003a74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2201      	movs	r2, #1
 8003a94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ab0:	2300      	movs	r3, #0
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3708      	adds	r7, #8
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}

08003aba <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003aba:	b480      	push	{r7}
 8003abc:	b083      	sub	sp, #12
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003ac2:	bf00      	nop
 8003ac4:	370c      	adds	r7, #12
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr
	...

08003ad0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b084      	sub	sp, #16
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
 8003ad8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ada:	2300      	movs	r3, #0
 8003adc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d104      	bne.n	8003aee <HAL_TIM_IC_Start_IT+0x1e>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	e023      	b.n	8003b36 <HAL_TIM_IC_Start_IT+0x66>
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	2b04      	cmp	r3, #4
 8003af2:	d104      	bne.n	8003afe <HAL_TIM_IC_Start_IT+0x2e>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	e01b      	b.n	8003b36 <HAL_TIM_IC_Start_IT+0x66>
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	2b08      	cmp	r3, #8
 8003b02:	d104      	bne.n	8003b0e <HAL_TIM_IC_Start_IT+0x3e>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	e013      	b.n	8003b36 <HAL_TIM_IC_Start_IT+0x66>
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	2b0c      	cmp	r3, #12
 8003b12:	d104      	bne.n	8003b1e <HAL_TIM_IC_Start_IT+0x4e>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	e00b      	b.n	8003b36 <HAL_TIM_IC_Start_IT+0x66>
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	2b10      	cmp	r3, #16
 8003b22:	d104      	bne.n	8003b2e <HAL_TIM_IC_Start_IT+0x5e>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	e003      	b.n	8003b36 <HAL_TIM_IC_Start_IT+0x66>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d104      	bne.n	8003b48 <HAL_TIM_IC_Start_IT+0x78>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	e013      	b.n	8003b70 <HAL_TIM_IC_Start_IT+0xa0>
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	2b04      	cmp	r3, #4
 8003b4c:	d104      	bne.n	8003b58 <HAL_TIM_IC_Start_IT+0x88>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	e00b      	b.n	8003b70 <HAL_TIM_IC_Start_IT+0xa0>
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	2b08      	cmp	r3, #8
 8003b5c:	d104      	bne.n	8003b68 <HAL_TIM_IC_Start_IT+0x98>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	e003      	b.n	8003b70 <HAL_TIM_IC_Start_IT+0xa0>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003b72:	7bbb      	ldrb	r3, [r7, #14]
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d102      	bne.n	8003b7e <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003b78:	7b7b      	ldrb	r3, [r7, #13]
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d001      	beq.n	8003b82 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e0dd      	b.n	8003d3e <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d104      	bne.n	8003b92 <HAL_TIM_IC_Start_IT+0xc2>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2202      	movs	r2, #2
 8003b8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b90:	e023      	b.n	8003bda <HAL_TIM_IC_Start_IT+0x10a>
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	2b04      	cmp	r3, #4
 8003b96:	d104      	bne.n	8003ba2 <HAL_TIM_IC_Start_IT+0xd2>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2202      	movs	r2, #2
 8003b9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ba0:	e01b      	b.n	8003bda <HAL_TIM_IC_Start_IT+0x10a>
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	2b08      	cmp	r3, #8
 8003ba6:	d104      	bne.n	8003bb2 <HAL_TIM_IC_Start_IT+0xe2>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2202      	movs	r2, #2
 8003bac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bb0:	e013      	b.n	8003bda <HAL_TIM_IC_Start_IT+0x10a>
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	2b0c      	cmp	r3, #12
 8003bb6:	d104      	bne.n	8003bc2 <HAL_TIM_IC_Start_IT+0xf2>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2202      	movs	r2, #2
 8003bbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003bc0:	e00b      	b.n	8003bda <HAL_TIM_IC_Start_IT+0x10a>
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	2b10      	cmp	r3, #16
 8003bc6:	d104      	bne.n	8003bd2 <HAL_TIM_IC_Start_IT+0x102>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2202      	movs	r2, #2
 8003bcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003bd0:	e003      	b.n	8003bda <HAL_TIM_IC_Start_IT+0x10a>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2202      	movs	r2, #2
 8003bd6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d104      	bne.n	8003bea <HAL_TIM_IC_Start_IT+0x11a>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2202      	movs	r2, #2
 8003be4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003be8:	e013      	b.n	8003c12 <HAL_TIM_IC_Start_IT+0x142>
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	2b04      	cmp	r3, #4
 8003bee:	d104      	bne.n	8003bfa <HAL_TIM_IC_Start_IT+0x12a>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2202      	movs	r2, #2
 8003bf4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003bf8:	e00b      	b.n	8003c12 <HAL_TIM_IC_Start_IT+0x142>
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	2b08      	cmp	r3, #8
 8003bfe:	d104      	bne.n	8003c0a <HAL_TIM_IC_Start_IT+0x13a>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2202      	movs	r2, #2
 8003c04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003c08:	e003      	b.n	8003c12 <HAL_TIM_IC_Start_IT+0x142>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2202      	movs	r2, #2
 8003c0e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	2b0c      	cmp	r3, #12
 8003c16:	d841      	bhi.n	8003c9c <HAL_TIM_IC_Start_IT+0x1cc>
 8003c18:	a201      	add	r2, pc, #4	; (adr r2, 8003c20 <HAL_TIM_IC_Start_IT+0x150>)
 8003c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c1e:	bf00      	nop
 8003c20:	08003c55 	.word	0x08003c55
 8003c24:	08003c9d 	.word	0x08003c9d
 8003c28:	08003c9d 	.word	0x08003c9d
 8003c2c:	08003c9d 	.word	0x08003c9d
 8003c30:	08003c67 	.word	0x08003c67
 8003c34:	08003c9d 	.word	0x08003c9d
 8003c38:	08003c9d 	.word	0x08003c9d
 8003c3c:	08003c9d 	.word	0x08003c9d
 8003c40:	08003c79 	.word	0x08003c79
 8003c44:	08003c9d 	.word	0x08003c9d
 8003c48:	08003c9d 	.word	0x08003c9d
 8003c4c:	08003c9d 	.word	0x08003c9d
 8003c50:	08003c8b 	.word	0x08003c8b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	68da      	ldr	r2, [r3, #12]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f042 0202 	orr.w	r2, r2, #2
 8003c62:	60da      	str	r2, [r3, #12]
      break;
 8003c64:	e01d      	b.n	8003ca2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	68da      	ldr	r2, [r3, #12]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f042 0204 	orr.w	r2, r2, #4
 8003c74:	60da      	str	r2, [r3, #12]
      break;
 8003c76:	e014      	b.n	8003ca2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	68da      	ldr	r2, [r3, #12]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f042 0208 	orr.w	r2, r2, #8
 8003c86:	60da      	str	r2, [r3, #12]
      break;
 8003c88:	e00b      	b.n	8003ca2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	68da      	ldr	r2, [r3, #12]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f042 0210 	orr.w	r2, r2, #16
 8003c98:	60da      	str	r2, [r3, #12]
      break;
 8003c9a:	e002      	b.n	8003ca2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	73fb      	strb	r3, [r7, #15]
      break;
 8003ca0:	bf00      	nop
  }

  if (status == HAL_OK)
 8003ca2:	7bfb      	ldrb	r3, [r7, #15]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d149      	bne.n	8003d3c <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	2201      	movs	r2, #1
 8003cae:	6839      	ldr	r1, [r7, #0]
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f001 f98b 	bl	8004fcc <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a23      	ldr	r2, [pc, #140]	; (8003d48 <HAL_TIM_IC_Start_IT+0x278>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d01d      	beq.n	8003cfc <HAL_TIM_IC_Start_IT+0x22c>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cc8:	d018      	beq.n	8003cfc <HAL_TIM_IC_Start_IT+0x22c>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a1f      	ldr	r2, [pc, #124]	; (8003d4c <HAL_TIM_IC_Start_IT+0x27c>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d013      	beq.n	8003cfc <HAL_TIM_IC_Start_IT+0x22c>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a1d      	ldr	r2, [pc, #116]	; (8003d50 <HAL_TIM_IC_Start_IT+0x280>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d00e      	beq.n	8003cfc <HAL_TIM_IC_Start_IT+0x22c>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a1c      	ldr	r2, [pc, #112]	; (8003d54 <HAL_TIM_IC_Start_IT+0x284>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d009      	beq.n	8003cfc <HAL_TIM_IC_Start_IT+0x22c>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a1a      	ldr	r2, [pc, #104]	; (8003d58 <HAL_TIM_IC_Start_IT+0x288>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d004      	beq.n	8003cfc <HAL_TIM_IC_Start_IT+0x22c>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a19      	ldr	r2, [pc, #100]	; (8003d5c <HAL_TIM_IC_Start_IT+0x28c>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d115      	bne.n	8003d28 <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	689a      	ldr	r2, [r3, #8]
 8003d02:	4b17      	ldr	r3, [pc, #92]	; (8003d60 <HAL_TIM_IC_Start_IT+0x290>)
 8003d04:	4013      	ands	r3, r2
 8003d06:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	2b06      	cmp	r3, #6
 8003d0c:	d015      	beq.n	8003d3a <HAL_TIM_IC_Start_IT+0x26a>
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d14:	d011      	beq.n	8003d3a <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f042 0201 	orr.w	r2, r2, #1
 8003d24:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d26:	e008      	b.n	8003d3a <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f042 0201 	orr.w	r2, r2, #1
 8003d36:	601a      	str	r2, [r3, #0]
 8003d38:	e000      	b.n	8003d3c <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d3a:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8003d3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3710      	adds	r7, #16
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	bf00      	nop
 8003d48:	40012c00 	.word	0x40012c00
 8003d4c:	40000400 	.word	0x40000400
 8003d50:	40000800 	.word	0x40000800
 8003d54:	40000c00 	.word	0x40000c00
 8003d58:	40013400 	.word	0x40013400
 8003d5c:	40014000 	.word	0x40014000
 8003d60:	00010007 	.word	0x00010007

08003d64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b082      	sub	sp, #8
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	691b      	ldr	r3, [r3, #16]
 8003d72:	f003 0302 	and.w	r3, r3, #2
 8003d76:	2b02      	cmp	r3, #2
 8003d78:	d122      	bne.n	8003dc0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	f003 0302 	and.w	r3, r3, #2
 8003d84:	2b02      	cmp	r3, #2
 8003d86:	d11b      	bne.n	8003dc0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f06f 0202 	mvn.w	r2, #2
 8003d90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2201      	movs	r2, #1
 8003d96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	699b      	ldr	r3, [r3, #24]
 8003d9e:	f003 0303 	and.w	r3, r3, #3
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d003      	beq.n	8003dae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f7fd fb2a 	bl	8001400 <HAL_TIM_IC_CaptureCallback>
 8003dac:	e005      	b.n	8003dba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f000 fbc0 	bl	8004534 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f000 fbc7 	bl	8004548 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	691b      	ldr	r3, [r3, #16]
 8003dc6:	f003 0304 	and.w	r3, r3, #4
 8003dca:	2b04      	cmp	r3, #4
 8003dcc:	d122      	bne.n	8003e14 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	68db      	ldr	r3, [r3, #12]
 8003dd4:	f003 0304 	and.w	r3, r3, #4
 8003dd8:	2b04      	cmp	r3, #4
 8003dda:	d11b      	bne.n	8003e14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f06f 0204 	mvn.w	r2, #4
 8003de4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2202      	movs	r2, #2
 8003dea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	699b      	ldr	r3, [r3, #24]
 8003df2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d003      	beq.n	8003e02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f7fd fb00 	bl	8001400 <HAL_TIM_IC_CaptureCallback>
 8003e00:	e005      	b.n	8003e0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f000 fb96 	bl	8004534 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	f000 fb9d 	bl	8004548 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	691b      	ldr	r3, [r3, #16]
 8003e1a:	f003 0308 	and.w	r3, r3, #8
 8003e1e:	2b08      	cmp	r3, #8
 8003e20:	d122      	bne.n	8003e68 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	f003 0308 	and.w	r3, r3, #8
 8003e2c:	2b08      	cmp	r3, #8
 8003e2e:	d11b      	bne.n	8003e68 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f06f 0208 	mvn.w	r2, #8
 8003e38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2204      	movs	r2, #4
 8003e3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	69db      	ldr	r3, [r3, #28]
 8003e46:	f003 0303 	and.w	r3, r3, #3
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d003      	beq.n	8003e56 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f7fd fad6 	bl	8001400 <HAL_TIM_IC_CaptureCallback>
 8003e54:	e005      	b.n	8003e62 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f000 fb6c 	bl	8004534 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f000 fb73 	bl	8004548 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2200      	movs	r2, #0
 8003e66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	691b      	ldr	r3, [r3, #16]
 8003e6e:	f003 0310 	and.w	r3, r3, #16
 8003e72:	2b10      	cmp	r3, #16
 8003e74:	d122      	bne.n	8003ebc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	68db      	ldr	r3, [r3, #12]
 8003e7c:	f003 0310 	and.w	r3, r3, #16
 8003e80:	2b10      	cmp	r3, #16
 8003e82:	d11b      	bne.n	8003ebc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f06f 0210 	mvn.w	r2, #16
 8003e8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2208      	movs	r2, #8
 8003e92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	69db      	ldr	r3, [r3, #28]
 8003e9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d003      	beq.n	8003eaa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f7fd faac 	bl	8001400 <HAL_TIM_IC_CaptureCallback>
 8003ea8:	e005      	b.n	8003eb6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f000 fb42 	bl	8004534 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	f000 fb49 	bl	8004548 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	691b      	ldr	r3, [r3, #16]
 8003ec2:	f003 0301 	and.w	r3, r3, #1
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d10e      	bne.n	8003ee8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	f003 0301 	and.w	r3, r3, #1
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d107      	bne.n	8003ee8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f06f 0201 	mvn.w	r2, #1
 8003ee0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f000 fb1c 	bl	8004520 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	691b      	ldr	r3, [r3, #16]
 8003eee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ef2:	2b80      	cmp	r3, #128	; 0x80
 8003ef4:	d10e      	bne.n	8003f14 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f00:	2b80      	cmp	r3, #128	; 0x80
 8003f02:	d107      	bne.n	8003f14 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003f0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f001 f992 	bl	8005238 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	691b      	ldr	r3, [r3, #16]
 8003f1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f22:	d10e      	bne.n	8003f42 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	68db      	ldr	r3, [r3, #12]
 8003f2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f2e:	2b80      	cmp	r3, #128	; 0x80
 8003f30:	d107      	bne.n	8003f42 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003f3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f001 f985 	bl	800524c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	691b      	ldr	r3, [r3, #16]
 8003f48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f4c:	2b40      	cmp	r3, #64	; 0x40
 8003f4e:	d10e      	bne.n	8003f6e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	68db      	ldr	r3, [r3, #12]
 8003f56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f5a:	2b40      	cmp	r3, #64	; 0x40
 8003f5c:	d107      	bne.n	8003f6e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f000 faf7 	bl	800455c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	691b      	ldr	r3, [r3, #16]
 8003f74:	f003 0320 	and.w	r3, r3, #32
 8003f78:	2b20      	cmp	r3, #32
 8003f7a:	d10e      	bne.n	8003f9a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	f003 0320 	and.w	r3, r3, #32
 8003f86:	2b20      	cmp	r3, #32
 8003f88:	d107      	bne.n	8003f9a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f06f 0220 	mvn.w	r2, #32
 8003f92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f001 f945 	bl	8005224 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f9a:	bf00      	nop
 8003f9c:	3708      	adds	r7, #8
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}

08003fa2 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003fa2:	b580      	push	{r7, lr}
 8003fa4:	b086      	sub	sp, #24
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	60f8      	str	r0, [r7, #12]
 8003faa:	60b9      	str	r1, [r7, #8]
 8003fac:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d101      	bne.n	8003fc0 <HAL_TIM_IC_ConfigChannel+0x1e>
 8003fbc:	2302      	movs	r3, #2
 8003fbe:	e088      	b.n	80040d2 <HAL_TIM_IC_ConfigChannel+0x130>
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d11b      	bne.n	8004006 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	6818      	ldr	r0, [r3, #0]
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	6819      	ldr	r1, [r3, #0]
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	685a      	ldr	r2, [r3, #4]
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	68db      	ldr	r3, [r3, #12]
 8003fde:	f000 fe37 	bl	8004c50 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	699a      	ldr	r2, [r3, #24]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f022 020c 	bic.w	r2, r2, #12
 8003ff0:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	6999      	ldr	r1, [r3, #24]
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	689a      	ldr	r2, [r3, #8]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	430a      	orrs	r2, r1
 8004002:	619a      	str	r2, [r3, #24]
 8004004:	e060      	b.n	80040c8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2b04      	cmp	r3, #4
 800400a:	d11c      	bne.n	8004046 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	6818      	ldr	r0, [r3, #0]
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	6819      	ldr	r1, [r3, #0]
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	685a      	ldr	r2, [r3, #4]
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	f000 feb5 	bl	8004d8a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	699a      	ldr	r2, [r3, #24]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800402e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	6999      	ldr	r1, [r3, #24]
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	021a      	lsls	r2, r3, #8
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	430a      	orrs	r2, r1
 8004042:	619a      	str	r2, [r3, #24]
 8004044:	e040      	b.n	80040c8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2b08      	cmp	r3, #8
 800404a:	d11b      	bne.n	8004084 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	6818      	ldr	r0, [r3, #0]
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	6819      	ldr	r1, [r3, #0]
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	685a      	ldr	r2, [r3, #4]
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	f000 ff02 	bl	8004e64 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	69da      	ldr	r2, [r3, #28]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f022 020c 	bic.w	r2, r2, #12
 800406e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	69d9      	ldr	r1, [r3, #28]
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	689a      	ldr	r2, [r3, #8]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	430a      	orrs	r2, r1
 8004080:	61da      	str	r2, [r3, #28]
 8004082:	e021      	b.n	80040c8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2b0c      	cmp	r3, #12
 8004088:	d11c      	bne.n	80040c4 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	6818      	ldr	r0, [r3, #0]
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	6819      	ldr	r1, [r3, #0]
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	685a      	ldr	r2, [r3, #4]
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	68db      	ldr	r3, [r3, #12]
 800409a:	f000 ff1f 	bl	8004edc <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	69da      	ldr	r2, [r3, #28]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80040ac:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	69d9      	ldr	r1, [r3, #28]
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	021a      	lsls	r2, r3, #8
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	430a      	orrs	r2, r1
 80040c0:	61da      	str	r2, [r3, #28]
 80040c2:	e001      	b.n	80040c8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2200      	movs	r2, #0
 80040cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80040d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3718      	adds	r7, #24
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
	...

080040dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b086      	sub	sp, #24
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	60f8      	str	r0, [r7, #12]
 80040e4:	60b9      	str	r1, [r7, #8]
 80040e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040e8:	2300      	movs	r3, #0
 80040ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d101      	bne.n	80040fa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80040f6:	2302      	movs	r3, #2
 80040f8:	e0ff      	b.n	80042fa <HAL_TIM_PWM_ConfigChannel+0x21e>
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2201      	movs	r2, #1
 80040fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2b14      	cmp	r3, #20
 8004106:	f200 80f0 	bhi.w	80042ea <HAL_TIM_PWM_ConfigChannel+0x20e>
 800410a:	a201      	add	r2, pc, #4	; (adr r2, 8004110 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800410c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004110:	08004165 	.word	0x08004165
 8004114:	080042eb 	.word	0x080042eb
 8004118:	080042eb 	.word	0x080042eb
 800411c:	080042eb 	.word	0x080042eb
 8004120:	080041a5 	.word	0x080041a5
 8004124:	080042eb 	.word	0x080042eb
 8004128:	080042eb 	.word	0x080042eb
 800412c:	080042eb 	.word	0x080042eb
 8004130:	080041e7 	.word	0x080041e7
 8004134:	080042eb 	.word	0x080042eb
 8004138:	080042eb 	.word	0x080042eb
 800413c:	080042eb 	.word	0x080042eb
 8004140:	08004227 	.word	0x08004227
 8004144:	080042eb 	.word	0x080042eb
 8004148:	080042eb 	.word	0x080042eb
 800414c:	080042eb 	.word	0x080042eb
 8004150:	08004269 	.word	0x08004269
 8004154:	080042eb 	.word	0x080042eb
 8004158:	080042eb 	.word	0x080042eb
 800415c:	080042eb 	.word	0x080042eb
 8004160:	080042a9 	.word	0x080042a9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	68b9      	ldr	r1, [r7, #8]
 800416a:	4618      	mov	r0, r3
 800416c:	f000 fa9a 	bl	80046a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	699a      	ldr	r2, [r3, #24]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f042 0208 	orr.w	r2, r2, #8
 800417e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	699a      	ldr	r2, [r3, #24]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f022 0204 	bic.w	r2, r2, #4
 800418e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	6999      	ldr	r1, [r3, #24]
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	691a      	ldr	r2, [r3, #16]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	430a      	orrs	r2, r1
 80041a0:	619a      	str	r2, [r3, #24]
      break;
 80041a2:	e0a5      	b.n	80042f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	68b9      	ldr	r1, [r7, #8]
 80041aa:	4618      	mov	r0, r3
 80041ac:	f000 fb0a 	bl	80047c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	699a      	ldr	r2, [r3, #24]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	699a      	ldr	r2, [r3, #24]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	6999      	ldr	r1, [r3, #24]
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	691b      	ldr	r3, [r3, #16]
 80041da:	021a      	lsls	r2, r3, #8
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	430a      	orrs	r2, r1
 80041e2:	619a      	str	r2, [r3, #24]
      break;
 80041e4:	e084      	b.n	80042f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	68b9      	ldr	r1, [r7, #8]
 80041ec:	4618      	mov	r0, r3
 80041ee:	f000 fb73 	bl	80048d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	69da      	ldr	r2, [r3, #28]
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f042 0208 	orr.w	r2, r2, #8
 8004200:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	69da      	ldr	r2, [r3, #28]
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f022 0204 	bic.w	r2, r2, #4
 8004210:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	69d9      	ldr	r1, [r3, #28]
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	691a      	ldr	r2, [r3, #16]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	430a      	orrs	r2, r1
 8004222:	61da      	str	r2, [r3, #28]
      break;
 8004224:	e064      	b.n	80042f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	68b9      	ldr	r1, [r7, #8]
 800422c:	4618      	mov	r0, r3
 800422e:	f000 fbdb 	bl	80049e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	69da      	ldr	r2, [r3, #28]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004240:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	69da      	ldr	r2, [r3, #28]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004250:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	69d9      	ldr	r1, [r3, #28]
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	691b      	ldr	r3, [r3, #16]
 800425c:	021a      	lsls	r2, r3, #8
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	430a      	orrs	r2, r1
 8004264:	61da      	str	r2, [r3, #28]
      break;
 8004266:	e043      	b.n	80042f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	68b9      	ldr	r1, [r7, #8]
 800426e:	4618      	mov	r0, r3
 8004270:	f000 fc24 	bl	8004abc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f042 0208 	orr.w	r2, r2, #8
 8004282:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f022 0204 	bic.w	r2, r2, #4
 8004292:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	691a      	ldr	r2, [r3, #16]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	430a      	orrs	r2, r1
 80042a4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80042a6:	e023      	b.n	80042f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	68b9      	ldr	r1, [r7, #8]
 80042ae:	4618      	mov	r0, r3
 80042b0:	f000 fc68 	bl	8004b84 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042c2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042d2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	691b      	ldr	r3, [r3, #16]
 80042de:	021a      	lsls	r2, r3, #8
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	430a      	orrs	r2, r1
 80042e6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80042e8:	e002      	b.n	80042f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	75fb      	strb	r3, [r7, #23]
      break;
 80042ee:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2200      	movs	r2, #0
 80042f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80042f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3718      	adds	r7, #24
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
 8004302:	bf00      	nop

08004304 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b084      	sub	sp, #16
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
 800430c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800430e:	2300      	movs	r3, #0
 8004310:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004318:	2b01      	cmp	r3, #1
 800431a:	d101      	bne.n	8004320 <HAL_TIM_ConfigClockSource+0x1c>
 800431c:	2302      	movs	r3, #2
 800431e:	e0b6      	b.n	800448e <HAL_TIM_ConfigClockSource+0x18a>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2201      	movs	r2, #1
 8004324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2202      	movs	r2, #2
 800432c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800433e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004342:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800434a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	68ba      	ldr	r2, [r7, #8]
 8004352:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800435c:	d03e      	beq.n	80043dc <HAL_TIM_ConfigClockSource+0xd8>
 800435e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004362:	f200 8087 	bhi.w	8004474 <HAL_TIM_ConfigClockSource+0x170>
 8004366:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800436a:	f000 8086 	beq.w	800447a <HAL_TIM_ConfigClockSource+0x176>
 800436e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004372:	d87f      	bhi.n	8004474 <HAL_TIM_ConfigClockSource+0x170>
 8004374:	2b70      	cmp	r3, #112	; 0x70
 8004376:	d01a      	beq.n	80043ae <HAL_TIM_ConfigClockSource+0xaa>
 8004378:	2b70      	cmp	r3, #112	; 0x70
 800437a:	d87b      	bhi.n	8004474 <HAL_TIM_ConfigClockSource+0x170>
 800437c:	2b60      	cmp	r3, #96	; 0x60
 800437e:	d050      	beq.n	8004422 <HAL_TIM_ConfigClockSource+0x11e>
 8004380:	2b60      	cmp	r3, #96	; 0x60
 8004382:	d877      	bhi.n	8004474 <HAL_TIM_ConfigClockSource+0x170>
 8004384:	2b50      	cmp	r3, #80	; 0x50
 8004386:	d03c      	beq.n	8004402 <HAL_TIM_ConfigClockSource+0xfe>
 8004388:	2b50      	cmp	r3, #80	; 0x50
 800438a:	d873      	bhi.n	8004474 <HAL_TIM_ConfigClockSource+0x170>
 800438c:	2b40      	cmp	r3, #64	; 0x40
 800438e:	d058      	beq.n	8004442 <HAL_TIM_ConfigClockSource+0x13e>
 8004390:	2b40      	cmp	r3, #64	; 0x40
 8004392:	d86f      	bhi.n	8004474 <HAL_TIM_ConfigClockSource+0x170>
 8004394:	2b30      	cmp	r3, #48	; 0x30
 8004396:	d064      	beq.n	8004462 <HAL_TIM_ConfigClockSource+0x15e>
 8004398:	2b30      	cmp	r3, #48	; 0x30
 800439a:	d86b      	bhi.n	8004474 <HAL_TIM_ConfigClockSource+0x170>
 800439c:	2b20      	cmp	r3, #32
 800439e:	d060      	beq.n	8004462 <HAL_TIM_ConfigClockSource+0x15e>
 80043a0:	2b20      	cmp	r3, #32
 80043a2:	d867      	bhi.n	8004474 <HAL_TIM_ConfigClockSource+0x170>
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d05c      	beq.n	8004462 <HAL_TIM_ConfigClockSource+0x15e>
 80043a8:	2b10      	cmp	r3, #16
 80043aa:	d05a      	beq.n	8004462 <HAL_TIM_ConfigClockSource+0x15e>
 80043ac:	e062      	b.n	8004474 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6818      	ldr	r0, [r3, #0]
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	6899      	ldr	r1, [r3, #8]
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	685a      	ldr	r2, [r3, #4]
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	68db      	ldr	r3, [r3, #12]
 80043be:	f000 fde5 	bl	8004f8c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80043d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	68ba      	ldr	r2, [r7, #8]
 80043d8:	609a      	str	r2, [r3, #8]
      break;
 80043da:	e04f      	b.n	800447c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6818      	ldr	r0, [r3, #0]
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	6899      	ldr	r1, [r3, #8]
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	685a      	ldr	r2, [r3, #4]
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	68db      	ldr	r3, [r3, #12]
 80043ec:	f000 fdce 	bl	8004f8c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	689a      	ldr	r2, [r3, #8]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80043fe:	609a      	str	r2, [r3, #8]
      break;
 8004400:	e03c      	b.n	800447c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6818      	ldr	r0, [r3, #0]
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	6859      	ldr	r1, [r3, #4]
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	68db      	ldr	r3, [r3, #12]
 800440e:	461a      	mov	r2, r3
 8004410:	f000 fc8c 	bl	8004d2c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	2150      	movs	r1, #80	; 0x50
 800441a:	4618      	mov	r0, r3
 800441c:	f000 fd9b 	bl	8004f56 <TIM_ITRx_SetConfig>
      break;
 8004420:	e02c      	b.n	800447c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6818      	ldr	r0, [r3, #0]
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	6859      	ldr	r1, [r3, #4]
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	68db      	ldr	r3, [r3, #12]
 800442e:	461a      	mov	r2, r3
 8004430:	f000 fce8 	bl	8004e04 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	2160      	movs	r1, #96	; 0x60
 800443a:	4618      	mov	r0, r3
 800443c:	f000 fd8b 	bl	8004f56 <TIM_ITRx_SetConfig>
      break;
 8004440:	e01c      	b.n	800447c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6818      	ldr	r0, [r3, #0]
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	6859      	ldr	r1, [r3, #4]
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	68db      	ldr	r3, [r3, #12]
 800444e:	461a      	mov	r2, r3
 8004450:	f000 fc6c 	bl	8004d2c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	2140      	movs	r1, #64	; 0x40
 800445a:	4618      	mov	r0, r3
 800445c:	f000 fd7b 	bl	8004f56 <TIM_ITRx_SetConfig>
      break;
 8004460:	e00c      	b.n	800447c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4619      	mov	r1, r3
 800446c:	4610      	mov	r0, r2
 800446e:	f000 fd72 	bl	8004f56 <TIM_ITRx_SetConfig>
      break;
 8004472:	e003      	b.n	800447c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	73fb      	strb	r3, [r7, #15]
      break;
 8004478:	e000      	b.n	800447c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800447a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2201      	movs	r2, #1
 8004480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2200      	movs	r2, #0
 8004488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800448c:	7bfb      	ldrb	r3, [r7, #15]
}
 800448e:	4618      	mov	r0, r3
 8004490:	3710      	adds	r7, #16
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}
	...

08004498 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004498:	b480      	push	{r7}
 800449a:	b085      	sub	sp, #20
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
 80044a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80044a2:	2300      	movs	r3, #0
 80044a4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	2b0c      	cmp	r3, #12
 80044aa:	d831      	bhi.n	8004510 <HAL_TIM_ReadCapturedValue+0x78>
 80044ac:	a201      	add	r2, pc, #4	; (adr r2, 80044b4 <HAL_TIM_ReadCapturedValue+0x1c>)
 80044ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044b2:	bf00      	nop
 80044b4:	080044e9 	.word	0x080044e9
 80044b8:	08004511 	.word	0x08004511
 80044bc:	08004511 	.word	0x08004511
 80044c0:	08004511 	.word	0x08004511
 80044c4:	080044f3 	.word	0x080044f3
 80044c8:	08004511 	.word	0x08004511
 80044cc:	08004511 	.word	0x08004511
 80044d0:	08004511 	.word	0x08004511
 80044d4:	080044fd 	.word	0x080044fd
 80044d8:	08004511 	.word	0x08004511
 80044dc:	08004511 	.word	0x08004511
 80044e0:	08004511 	.word	0x08004511
 80044e4:	08004507 	.word	0x08004507
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044ee:	60fb      	str	r3, [r7, #12]

      break;
 80044f0:	e00f      	b.n	8004512 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044f8:	60fb      	str	r3, [r7, #12]

      break;
 80044fa:	e00a      	b.n	8004512 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004502:	60fb      	str	r3, [r7, #12]

      break;
 8004504:	e005      	b.n	8004512 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450c:	60fb      	str	r3, [r7, #12]

      break;
 800450e:	e000      	b.n	8004512 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004510:	bf00      	nop
  }

  return tmpreg;
 8004512:	68fb      	ldr	r3, [r7, #12]
}
 8004514:	4618      	mov	r0, r3
 8004516:	3714      	adds	r7, #20
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr

08004520 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004520:	b480      	push	{r7}
 8004522:	b083      	sub	sp, #12
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004528:	bf00      	nop
 800452a:	370c      	adds	r7, #12
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr

08004534 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004534:	b480      	push	{r7}
 8004536:	b083      	sub	sp, #12
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800453c:	bf00      	nop
 800453e:	370c      	adds	r7, #12
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr

08004548 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004548:	b480      	push	{r7}
 800454a:	b083      	sub	sp, #12
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004550:	bf00      	nop
 8004552:	370c      	adds	r7, #12
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr

0800455c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800455c:	b480      	push	{r7}
 800455e:	b083      	sub	sp, #12
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004564:	bf00      	nop
 8004566:	370c      	adds	r7, #12
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr

08004570 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004570:	b480      	push	{r7}
 8004572:	b085      	sub	sp, #20
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	4a40      	ldr	r2, [pc, #256]	; (8004684 <TIM_Base_SetConfig+0x114>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d013      	beq.n	80045b0 <TIM_Base_SetConfig+0x40>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800458e:	d00f      	beq.n	80045b0 <TIM_Base_SetConfig+0x40>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	4a3d      	ldr	r2, [pc, #244]	; (8004688 <TIM_Base_SetConfig+0x118>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d00b      	beq.n	80045b0 <TIM_Base_SetConfig+0x40>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	4a3c      	ldr	r2, [pc, #240]	; (800468c <TIM_Base_SetConfig+0x11c>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d007      	beq.n	80045b0 <TIM_Base_SetConfig+0x40>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	4a3b      	ldr	r2, [pc, #236]	; (8004690 <TIM_Base_SetConfig+0x120>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d003      	beq.n	80045b0 <TIM_Base_SetConfig+0x40>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	4a3a      	ldr	r2, [pc, #232]	; (8004694 <TIM_Base_SetConfig+0x124>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d108      	bne.n	80045c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	68fa      	ldr	r2, [r7, #12]
 80045be:	4313      	orrs	r3, r2
 80045c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	4a2f      	ldr	r2, [pc, #188]	; (8004684 <TIM_Base_SetConfig+0x114>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d01f      	beq.n	800460a <TIM_Base_SetConfig+0x9a>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045d0:	d01b      	beq.n	800460a <TIM_Base_SetConfig+0x9a>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	4a2c      	ldr	r2, [pc, #176]	; (8004688 <TIM_Base_SetConfig+0x118>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d017      	beq.n	800460a <TIM_Base_SetConfig+0x9a>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	4a2b      	ldr	r2, [pc, #172]	; (800468c <TIM_Base_SetConfig+0x11c>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d013      	beq.n	800460a <TIM_Base_SetConfig+0x9a>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	4a2a      	ldr	r2, [pc, #168]	; (8004690 <TIM_Base_SetConfig+0x120>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d00f      	beq.n	800460a <TIM_Base_SetConfig+0x9a>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	4a29      	ldr	r2, [pc, #164]	; (8004694 <TIM_Base_SetConfig+0x124>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d00b      	beq.n	800460a <TIM_Base_SetConfig+0x9a>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	4a28      	ldr	r2, [pc, #160]	; (8004698 <TIM_Base_SetConfig+0x128>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d007      	beq.n	800460a <TIM_Base_SetConfig+0x9a>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	4a27      	ldr	r2, [pc, #156]	; (800469c <TIM_Base_SetConfig+0x12c>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d003      	beq.n	800460a <TIM_Base_SetConfig+0x9a>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	4a26      	ldr	r2, [pc, #152]	; (80046a0 <TIM_Base_SetConfig+0x130>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d108      	bne.n	800461c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004610:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	68db      	ldr	r3, [r3, #12]
 8004616:	68fa      	ldr	r2, [r7, #12]
 8004618:	4313      	orrs	r3, r2
 800461a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	695b      	ldr	r3, [r3, #20]
 8004626:	4313      	orrs	r3, r2
 8004628:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	68fa      	ldr	r2, [r7, #12]
 800462e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	689a      	ldr	r2, [r3, #8]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	4a10      	ldr	r2, [pc, #64]	; (8004684 <TIM_Base_SetConfig+0x114>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d00f      	beq.n	8004668 <TIM_Base_SetConfig+0xf8>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	4a12      	ldr	r2, [pc, #72]	; (8004694 <TIM_Base_SetConfig+0x124>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d00b      	beq.n	8004668 <TIM_Base_SetConfig+0xf8>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	4a11      	ldr	r2, [pc, #68]	; (8004698 <TIM_Base_SetConfig+0x128>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d007      	beq.n	8004668 <TIM_Base_SetConfig+0xf8>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	4a10      	ldr	r2, [pc, #64]	; (800469c <TIM_Base_SetConfig+0x12c>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d003      	beq.n	8004668 <TIM_Base_SetConfig+0xf8>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	4a0f      	ldr	r2, [pc, #60]	; (80046a0 <TIM_Base_SetConfig+0x130>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d103      	bne.n	8004670 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	691a      	ldr	r2, [r3, #16]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2201      	movs	r2, #1
 8004674:	615a      	str	r2, [r3, #20]
}
 8004676:	bf00      	nop
 8004678:	3714      	adds	r7, #20
 800467a:	46bd      	mov	sp, r7
 800467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004680:	4770      	bx	lr
 8004682:	bf00      	nop
 8004684:	40012c00 	.word	0x40012c00
 8004688:	40000400 	.word	0x40000400
 800468c:	40000800 	.word	0x40000800
 8004690:	40000c00 	.word	0x40000c00
 8004694:	40013400 	.word	0x40013400
 8004698:	40014000 	.word	0x40014000
 800469c:	40014400 	.word	0x40014400
 80046a0:	40014800 	.word	0x40014800

080046a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b087      	sub	sp, #28
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6a1b      	ldr	r3, [r3, #32]
 80046b2:	f023 0201 	bic.w	r2, r3, #1
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6a1b      	ldr	r3, [r3, #32]
 80046be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	699b      	ldr	r3, [r3, #24]
 80046ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f023 0303 	bic.w	r3, r3, #3
 80046de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	68fa      	ldr	r2, [r7, #12]
 80046e6:	4313      	orrs	r3, r2
 80046e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	f023 0302 	bic.w	r3, r3, #2
 80046f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	697a      	ldr	r2, [r7, #20]
 80046f8:	4313      	orrs	r3, r2
 80046fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	4a2c      	ldr	r2, [pc, #176]	; (80047b0 <TIM_OC1_SetConfig+0x10c>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d00f      	beq.n	8004724 <TIM_OC1_SetConfig+0x80>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	4a2b      	ldr	r2, [pc, #172]	; (80047b4 <TIM_OC1_SetConfig+0x110>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d00b      	beq.n	8004724 <TIM_OC1_SetConfig+0x80>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	4a2a      	ldr	r2, [pc, #168]	; (80047b8 <TIM_OC1_SetConfig+0x114>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d007      	beq.n	8004724 <TIM_OC1_SetConfig+0x80>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	4a29      	ldr	r2, [pc, #164]	; (80047bc <TIM_OC1_SetConfig+0x118>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d003      	beq.n	8004724 <TIM_OC1_SetConfig+0x80>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	4a28      	ldr	r2, [pc, #160]	; (80047c0 <TIM_OC1_SetConfig+0x11c>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d10c      	bne.n	800473e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	f023 0308 	bic.w	r3, r3, #8
 800472a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	68db      	ldr	r3, [r3, #12]
 8004730:	697a      	ldr	r2, [r7, #20]
 8004732:	4313      	orrs	r3, r2
 8004734:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	f023 0304 	bic.w	r3, r3, #4
 800473c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	4a1b      	ldr	r2, [pc, #108]	; (80047b0 <TIM_OC1_SetConfig+0x10c>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d00f      	beq.n	8004766 <TIM_OC1_SetConfig+0xc2>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4a1a      	ldr	r2, [pc, #104]	; (80047b4 <TIM_OC1_SetConfig+0x110>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d00b      	beq.n	8004766 <TIM_OC1_SetConfig+0xc2>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	4a19      	ldr	r2, [pc, #100]	; (80047b8 <TIM_OC1_SetConfig+0x114>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d007      	beq.n	8004766 <TIM_OC1_SetConfig+0xc2>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	4a18      	ldr	r2, [pc, #96]	; (80047bc <TIM_OC1_SetConfig+0x118>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d003      	beq.n	8004766 <TIM_OC1_SetConfig+0xc2>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	4a17      	ldr	r2, [pc, #92]	; (80047c0 <TIM_OC1_SetConfig+0x11c>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d111      	bne.n	800478a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800476c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004774:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	695b      	ldr	r3, [r3, #20]
 800477a:	693a      	ldr	r2, [r7, #16]
 800477c:	4313      	orrs	r3, r2
 800477e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	699b      	ldr	r3, [r3, #24]
 8004784:	693a      	ldr	r2, [r7, #16]
 8004786:	4313      	orrs	r3, r2
 8004788:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	693a      	ldr	r2, [r7, #16]
 800478e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	68fa      	ldr	r2, [r7, #12]
 8004794:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	685a      	ldr	r2, [r3, #4]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	697a      	ldr	r2, [r7, #20]
 80047a2:	621a      	str	r2, [r3, #32]
}
 80047a4:	bf00      	nop
 80047a6:	371c      	adds	r7, #28
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr
 80047b0:	40012c00 	.word	0x40012c00
 80047b4:	40013400 	.word	0x40013400
 80047b8:	40014000 	.word	0x40014000
 80047bc:	40014400 	.word	0x40014400
 80047c0:	40014800 	.word	0x40014800

080047c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b087      	sub	sp, #28
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
 80047cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6a1b      	ldr	r3, [r3, #32]
 80047d2:	f023 0210 	bic.w	r2, r3, #16
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6a1b      	ldr	r3, [r3, #32]
 80047de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	699b      	ldr	r3, [r3, #24]
 80047ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	021b      	lsls	r3, r3, #8
 8004806:	68fa      	ldr	r2, [r7, #12]
 8004808:	4313      	orrs	r3, r2
 800480a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	f023 0320 	bic.w	r3, r3, #32
 8004812:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	011b      	lsls	r3, r3, #4
 800481a:	697a      	ldr	r2, [r7, #20]
 800481c:	4313      	orrs	r3, r2
 800481e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	4a28      	ldr	r2, [pc, #160]	; (80048c4 <TIM_OC2_SetConfig+0x100>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d003      	beq.n	8004830 <TIM_OC2_SetConfig+0x6c>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	4a27      	ldr	r2, [pc, #156]	; (80048c8 <TIM_OC2_SetConfig+0x104>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d10d      	bne.n	800484c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004836:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	68db      	ldr	r3, [r3, #12]
 800483c:	011b      	lsls	r3, r3, #4
 800483e:	697a      	ldr	r2, [r7, #20]
 8004840:	4313      	orrs	r3, r2
 8004842:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800484a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	4a1d      	ldr	r2, [pc, #116]	; (80048c4 <TIM_OC2_SetConfig+0x100>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d00f      	beq.n	8004874 <TIM_OC2_SetConfig+0xb0>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	4a1c      	ldr	r2, [pc, #112]	; (80048c8 <TIM_OC2_SetConfig+0x104>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d00b      	beq.n	8004874 <TIM_OC2_SetConfig+0xb0>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	4a1b      	ldr	r2, [pc, #108]	; (80048cc <TIM_OC2_SetConfig+0x108>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d007      	beq.n	8004874 <TIM_OC2_SetConfig+0xb0>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	4a1a      	ldr	r2, [pc, #104]	; (80048d0 <TIM_OC2_SetConfig+0x10c>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d003      	beq.n	8004874 <TIM_OC2_SetConfig+0xb0>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	4a19      	ldr	r2, [pc, #100]	; (80048d4 <TIM_OC2_SetConfig+0x110>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d113      	bne.n	800489c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800487a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004882:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	695b      	ldr	r3, [r3, #20]
 8004888:	009b      	lsls	r3, r3, #2
 800488a:	693a      	ldr	r2, [r7, #16]
 800488c:	4313      	orrs	r3, r2
 800488e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	699b      	ldr	r3, [r3, #24]
 8004894:	009b      	lsls	r3, r3, #2
 8004896:	693a      	ldr	r2, [r7, #16]
 8004898:	4313      	orrs	r3, r2
 800489a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	693a      	ldr	r2, [r7, #16]
 80048a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	68fa      	ldr	r2, [r7, #12]
 80048a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	685a      	ldr	r2, [r3, #4]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	697a      	ldr	r2, [r7, #20]
 80048b4:	621a      	str	r2, [r3, #32]
}
 80048b6:	bf00      	nop
 80048b8:	371c      	adds	r7, #28
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr
 80048c2:	bf00      	nop
 80048c4:	40012c00 	.word	0x40012c00
 80048c8:	40013400 	.word	0x40013400
 80048cc:	40014000 	.word	0x40014000
 80048d0:	40014400 	.word	0x40014400
 80048d4:	40014800 	.word	0x40014800

080048d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80048d8:	b480      	push	{r7}
 80048da:	b087      	sub	sp, #28
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
 80048e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6a1b      	ldr	r3, [r3, #32]
 80048e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6a1b      	ldr	r3, [r3, #32]
 80048f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	69db      	ldr	r3, [r3, #28]
 80048fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004906:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800490a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f023 0303 	bic.w	r3, r3, #3
 8004912:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	68fa      	ldr	r2, [r7, #12]
 800491a:	4313      	orrs	r3, r2
 800491c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004924:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	021b      	lsls	r3, r3, #8
 800492c:	697a      	ldr	r2, [r7, #20]
 800492e:	4313      	orrs	r3, r2
 8004930:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	4a27      	ldr	r2, [pc, #156]	; (80049d4 <TIM_OC3_SetConfig+0xfc>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d003      	beq.n	8004942 <TIM_OC3_SetConfig+0x6a>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	4a26      	ldr	r2, [pc, #152]	; (80049d8 <TIM_OC3_SetConfig+0x100>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d10d      	bne.n	800495e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004948:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	68db      	ldr	r3, [r3, #12]
 800494e:	021b      	lsls	r3, r3, #8
 8004950:	697a      	ldr	r2, [r7, #20]
 8004952:	4313      	orrs	r3, r2
 8004954:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800495c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	4a1c      	ldr	r2, [pc, #112]	; (80049d4 <TIM_OC3_SetConfig+0xfc>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d00f      	beq.n	8004986 <TIM_OC3_SetConfig+0xae>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	4a1b      	ldr	r2, [pc, #108]	; (80049d8 <TIM_OC3_SetConfig+0x100>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d00b      	beq.n	8004986 <TIM_OC3_SetConfig+0xae>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	4a1a      	ldr	r2, [pc, #104]	; (80049dc <TIM_OC3_SetConfig+0x104>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d007      	beq.n	8004986 <TIM_OC3_SetConfig+0xae>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	4a19      	ldr	r2, [pc, #100]	; (80049e0 <TIM_OC3_SetConfig+0x108>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d003      	beq.n	8004986 <TIM_OC3_SetConfig+0xae>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	4a18      	ldr	r2, [pc, #96]	; (80049e4 <TIM_OC3_SetConfig+0x10c>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d113      	bne.n	80049ae <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800498c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004994:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	695b      	ldr	r3, [r3, #20]
 800499a:	011b      	lsls	r3, r3, #4
 800499c:	693a      	ldr	r2, [r7, #16]
 800499e:	4313      	orrs	r3, r2
 80049a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	699b      	ldr	r3, [r3, #24]
 80049a6:	011b      	lsls	r3, r3, #4
 80049a8:	693a      	ldr	r2, [r7, #16]
 80049aa:	4313      	orrs	r3, r2
 80049ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	693a      	ldr	r2, [r7, #16]
 80049b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	68fa      	ldr	r2, [r7, #12]
 80049b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	685a      	ldr	r2, [r3, #4]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	697a      	ldr	r2, [r7, #20]
 80049c6:	621a      	str	r2, [r3, #32]
}
 80049c8:	bf00      	nop
 80049ca:	371c      	adds	r7, #28
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr
 80049d4:	40012c00 	.word	0x40012c00
 80049d8:	40013400 	.word	0x40013400
 80049dc:	40014000 	.word	0x40014000
 80049e0:	40014400 	.word	0x40014400
 80049e4:	40014800 	.word	0x40014800

080049e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b087      	sub	sp, #28
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
 80049f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6a1b      	ldr	r3, [r3, #32]
 80049f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6a1b      	ldr	r3, [r3, #32]
 8004a02:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	69db      	ldr	r3, [r3, #28]
 8004a0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	021b      	lsls	r3, r3, #8
 8004a2a:	68fa      	ldr	r2, [r7, #12]
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	031b      	lsls	r3, r3, #12
 8004a3e:	693a      	ldr	r2, [r7, #16]
 8004a40:	4313      	orrs	r3, r2
 8004a42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	4a18      	ldr	r2, [pc, #96]	; (8004aa8 <TIM_OC4_SetConfig+0xc0>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d00f      	beq.n	8004a6c <TIM_OC4_SetConfig+0x84>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	4a17      	ldr	r2, [pc, #92]	; (8004aac <TIM_OC4_SetConfig+0xc4>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d00b      	beq.n	8004a6c <TIM_OC4_SetConfig+0x84>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	4a16      	ldr	r2, [pc, #88]	; (8004ab0 <TIM_OC4_SetConfig+0xc8>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d007      	beq.n	8004a6c <TIM_OC4_SetConfig+0x84>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	4a15      	ldr	r2, [pc, #84]	; (8004ab4 <TIM_OC4_SetConfig+0xcc>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d003      	beq.n	8004a6c <TIM_OC4_SetConfig+0x84>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	4a14      	ldr	r2, [pc, #80]	; (8004ab8 <TIM_OC4_SetConfig+0xd0>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d109      	bne.n	8004a80 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a72:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	695b      	ldr	r3, [r3, #20]
 8004a78:	019b      	lsls	r3, r3, #6
 8004a7a:	697a      	ldr	r2, [r7, #20]
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	697a      	ldr	r2, [r7, #20]
 8004a84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	68fa      	ldr	r2, [r7, #12]
 8004a8a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	685a      	ldr	r2, [r3, #4]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	693a      	ldr	r2, [r7, #16]
 8004a98:	621a      	str	r2, [r3, #32]
}
 8004a9a:	bf00      	nop
 8004a9c:	371c      	adds	r7, #28
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa4:	4770      	bx	lr
 8004aa6:	bf00      	nop
 8004aa8:	40012c00 	.word	0x40012c00
 8004aac:	40013400 	.word	0x40013400
 8004ab0:	40014000 	.word	0x40014000
 8004ab4:	40014400 	.word	0x40014400
 8004ab8:	40014800 	.word	0x40014800

08004abc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b087      	sub	sp, #28
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
 8004ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6a1b      	ldr	r3, [r3, #32]
 8004aca:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6a1b      	ldr	r3, [r3, #32]
 8004ad6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004aea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	68fa      	ldr	r2, [r7, #12]
 8004af6:	4313      	orrs	r3, r2
 8004af8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004b00:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	041b      	lsls	r3, r3, #16
 8004b08:	693a      	ldr	r2, [r7, #16]
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	4a17      	ldr	r2, [pc, #92]	; (8004b70 <TIM_OC5_SetConfig+0xb4>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d00f      	beq.n	8004b36 <TIM_OC5_SetConfig+0x7a>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	4a16      	ldr	r2, [pc, #88]	; (8004b74 <TIM_OC5_SetConfig+0xb8>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d00b      	beq.n	8004b36 <TIM_OC5_SetConfig+0x7a>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	4a15      	ldr	r2, [pc, #84]	; (8004b78 <TIM_OC5_SetConfig+0xbc>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d007      	beq.n	8004b36 <TIM_OC5_SetConfig+0x7a>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	4a14      	ldr	r2, [pc, #80]	; (8004b7c <TIM_OC5_SetConfig+0xc0>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d003      	beq.n	8004b36 <TIM_OC5_SetConfig+0x7a>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	4a13      	ldr	r2, [pc, #76]	; (8004b80 <TIM_OC5_SetConfig+0xc4>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d109      	bne.n	8004b4a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b3c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	695b      	ldr	r3, [r3, #20]
 8004b42:	021b      	lsls	r3, r3, #8
 8004b44:	697a      	ldr	r2, [r7, #20]
 8004b46:	4313      	orrs	r3, r2
 8004b48:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	697a      	ldr	r2, [r7, #20]
 8004b4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	68fa      	ldr	r2, [r7, #12]
 8004b54:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	685a      	ldr	r2, [r3, #4]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	693a      	ldr	r2, [r7, #16]
 8004b62:	621a      	str	r2, [r3, #32]
}
 8004b64:	bf00      	nop
 8004b66:	371c      	adds	r7, #28
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6e:	4770      	bx	lr
 8004b70:	40012c00 	.word	0x40012c00
 8004b74:	40013400 	.word	0x40013400
 8004b78:	40014000 	.word	0x40014000
 8004b7c:	40014400 	.word	0x40014400
 8004b80:	40014800 	.word	0x40014800

08004b84 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b087      	sub	sp, #28
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
 8004b8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6a1b      	ldr	r3, [r3, #32]
 8004b92:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6a1b      	ldr	r3, [r3, #32]
 8004b9e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004baa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004bb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	021b      	lsls	r3, r3, #8
 8004bbe:	68fa      	ldr	r2, [r7, #12]
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004bca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	051b      	lsls	r3, r3, #20
 8004bd2:	693a      	ldr	r2, [r7, #16]
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	4a18      	ldr	r2, [pc, #96]	; (8004c3c <TIM_OC6_SetConfig+0xb8>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d00f      	beq.n	8004c00 <TIM_OC6_SetConfig+0x7c>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	4a17      	ldr	r2, [pc, #92]	; (8004c40 <TIM_OC6_SetConfig+0xbc>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d00b      	beq.n	8004c00 <TIM_OC6_SetConfig+0x7c>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	4a16      	ldr	r2, [pc, #88]	; (8004c44 <TIM_OC6_SetConfig+0xc0>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d007      	beq.n	8004c00 <TIM_OC6_SetConfig+0x7c>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	4a15      	ldr	r2, [pc, #84]	; (8004c48 <TIM_OC6_SetConfig+0xc4>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d003      	beq.n	8004c00 <TIM_OC6_SetConfig+0x7c>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	4a14      	ldr	r2, [pc, #80]	; (8004c4c <TIM_OC6_SetConfig+0xc8>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d109      	bne.n	8004c14 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c06:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	695b      	ldr	r3, [r3, #20]
 8004c0c:	029b      	lsls	r3, r3, #10
 8004c0e:	697a      	ldr	r2, [r7, #20]
 8004c10:	4313      	orrs	r3, r2
 8004c12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	697a      	ldr	r2, [r7, #20]
 8004c18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	68fa      	ldr	r2, [r7, #12]
 8004c1e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	685a      	ldr	r2, [r3, #4]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	693a      	ldr	r2, [r7, #16]
 8004c2c:	621a      	str	r2, [r3, #32]
}
 8004c2e:	bf00      	nop
 8004c30:	371c      	adds	r7, #28
 8004c32:	46bd      	mov	sp, r7
 8004c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c38:	4770      	bx	lr
 8004c3a:	bf00      	nop
 8004c3c:	40012c00 	.word	0x40012c00
 8004c40:	40013400 	.word	0x40013400
 8004c44:	40014000 	.word	0x40014000
 8004c48:	40014400 	.word	0x40014400
 8004c4c:	40014800 	.word	0x40014800

08004c50 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b087      	sub	sp, #28
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	60f8      	str	r0, [r7, #12]
 8004c58:	60b9      	str	r1, [r7, #8]
 8004c5a:	607a      	str	r2, [r7, #4]
 8004c5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	6a1b      	ldr	r3, [r3, #32]
 8004c62:	f023 0201 	bic.w	r2, r3, #1
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	699b      	ldr	r3, [r3, #24]
 8004c6e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	6a1b      	ldr	r3, [r3, #32]
 8004c74:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	4a26      	ldr	r2, [pc, #152]	; (8004d14 <TIM_TI1_SetConfig+0xc4>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d017      	beq.n	8004cae <TIM_TI1_SetConfig+0x5e>
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c84:	d013      	beq.n	8004cae <TIM_TI1_SetConfig+0x5e>
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	4a23      	ldr	r2, [pc, #140]	; (8004d18 <TIM_TI1_SetConfig+0xc8>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d00f      	beq.n	8004cae <TIM_TI1_SetConfig+0x5e>
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	4a22      	ldr	r2, [pc, #136]	; (8004d1c <TIM_TI1_SetConfig+0xcc>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d00b      	beq.n	8004cae <TIM_TI1_SetConfig+0x5e>
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	4a21      	ldr	r2, [pc, #132]	; (8004d20 <TIM_TI1_SetConfig+0xd0>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d007      	beq.n	8004cae <TIM_TI1_SetConfig+0x5e>
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	4a20      	ldr	r2, [pc, #128]	; (8004d24 <TIM_TI1_SetConfig+0xd4>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d003      	beq.n	8004cae <TIM_TI1_SetConfig+0x5e>
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	4a1f      	ldr	r2, [pc, #124]	; (8004d28 <TIM_TI1_SetConfig+0xd8>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d101      	bne.n	8004cb2 <TIM_TI1_SetConfig+0x62>
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e000      	b.n	8004cb4 <TIM_TI1_SetConfig+0x64>
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d008      	beq.n	8004cca <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	f023 0303 	bic.w	r3, r3, #3
 8004cbe:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004cc0:	697a      	ldr	r2, [r7, #20]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	617b      	str	r3, [r7, #20]
 8004cc8:	e003      	b.n	8004cd2 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	f043 0301 	orr.w	r3, r3, #1
 8004cd0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004cd8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	011b      	lsls	r3, r3, #4
 8004cde:	b2db      	uxtb	r3, r3
 8004ce0:	697a      	ldr	r2, [r7, #20]
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	f023 030a 	bic.w	r3, r3, #10
 8004cec:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	f003 030a 	and.w	r3, r3, #10
 8004cf4:	693a      	ldr	r2, [r7, #16]
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	697a      	ldr	r2, [r7, #20]
 8004cfe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	693a      	ldr	r2, [r7, #16]
 8004d04:	621a      	str	r2, [r3, #32]
}
 8004d06:	bf00      	nop
 8004d08:	371c      	adds	r7, #28
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr
 8004d12:	bf00      	nop
 8004d14:	40012c00 	.word	0x40012c00
 8004d18:	40000400 	.word	0x40000400
 8004d1c:	40000800 	.word	0x40000800
 8004d20:	40000c00 	.word	0x40000c00
 8004d24:	40013400 	.word	0x40013400
 8004d28:	40014000 	.word	0x40014000

08004d2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b087      	sub	sp, #28
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	60f8      	str	r0, [r7, #12]
 8004d34:	60b9      	str	r1, [r7, #8]
 8004d36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	6a1b      	ldr	r3, [r3, #32]
 8004d3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	6a1b      	ldr	r3, [r3, #32]
 8004d42:	f023 0201 	bic.w	r2, r3, #1
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	699b      	ldr	r3, [r3, #24]
 8004d4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	011b      	lsls	r3, r3, #4
 8004d5c:	693a      	ldr	r2, [r7, #16]
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	f023 030a 	bic.w	r3, r3, #10
 8004d68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d6a:	697a      	ldr	r2, [r7, #20]
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	693a      	ldr	r2, [r7, #16]
 8004d76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	697a      	ldr	r2, [r7, #20]
 8004d7c:	621a      	str	r2, [r3, #32]
}
 8004d7e:	bf00      	nop
 8004d80:	371c      	adds	r7, #28
 8004d82:	46bd      	mov	sp, r7
 8004d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d88:	4770      	bx	lr

08004d8a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004d8a:	b480      	push	{r7}
 8004d8c:	b087      	sub	sp, #28
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	60f8      	str	r0, [r7, #12]
 8004d92:	60b9      	str	r1, [r7, #8]
 8004d94:	607a      	str	r2, [r7, #4]
 8004d96:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	6a1b      	ldr	r3, [r3, #32]
 8004d9c:	f023 0210 	bic.w	r2, r3, #16
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	699b      	ldr	r3, [r3, #24]
 8004da8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	6a1b      	ldr	r3, [r3, #32]
 8004dae:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004db6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	021b      	lsls	r3, r3, #8
 8004dbc:	697a      	ldr	r2, [r7, #20]
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004dc8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	031b      	lsls	r3, r3, #12
 8004dce:	b29b      	uxth	r3, r3
 8004dd0:	697a      	ldr	r2, [r7, #20]
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004ddc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	011b      	lsls	r3, r3, #4
 8004de2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004de6:	693a      	ldr	r2, [r7, #16]
 8004de8:	4313      	orrs	r3, r2
 8004dea:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	697a      	ldr	r2, [r7, #20]
 8004df0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	693a      	ldr	r2, [r7, #16]
 8004df6:	621a      	str	r2, [r3, #32]
}
 8004df8:	bf00      	nop
 8004dfa:	371c      	adds	r7, #28
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr

08004e04 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b087      	sub	sp, #28
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	60f8      	str	r0, [r7, #12]
 8004e0c:	60b9      	str	r1, [r7, #8]
 8004e0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	6a1b      	ldr	r3, [r3, #32]
 8004e14:	f023 0210 	bic.w	r2, r3, #16
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	699b      	ldr	r3, [r3, #24]
 8004e20:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	6a1b      	ldr	r3, [r3, #32]
 8004e26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e2e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	031b      	lsls	r3, r3, #12
 8004e34:	697a      	ldr	r2, [r7, #20]
 8004e36:	4313      	orrs	r3, r2
 8004e38:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004e40:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	011b      	lsls	r3, r3, #4
 8004e46:	693a      	ldr	r2, [r7, #16]
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	697a      	ldr	r2, [r7, #20]
 8004e50:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	693a      	ldr	r2, [r7, #16]
 8004e56:	621a      	str	r2, [r3, #32]
}
 8004e58:	bf00      	nop
 8004e5a:	371c      	adds	r7, #28
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e62:	4770      	bx	lr

08004e64 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b087      	sub	sp, #28
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	60f8      	str	r0, [r7, #12]
 8004e6c:	60b9      	str	r1, [r7, #8]
 8004e6e:	607a      	str	r2, [r7, #4]
 8004e70:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	6a1b      	ldr	r3, [r3, #32]
 8004e76:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	69db      	ldr	r3, [r3, #28]
 8004e82:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	6a1b      	ldr	r3, [r3, #32]
 8004e88:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	f023 0303 	bic.w	r3, r3, #3
 8004e90:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004e92:	697a      	ldr	r2, [r7, #20]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	4313      	orrs	r3, r2
 8004e98:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ea0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	011b      	lsls	r3, r3, #4
 8004ea6:	b2db      	uxtb	r3, r3
 8004ea8:	697a      	ldr	r2, [r7, #20]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004eb4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	021b      	lsls	r3, r3, #8
 8004eba:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004ebe:	693a      	ldr	r2, [r7, #16]
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	697a      	ldr	r2, [r7, #20]
 8004ec8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	693a      	ldr	r2, [r7, #16]
 8004ece:	621a      	str	r2, [r3, #32]
}
 8004ed0:	bf00      	nop
 8004ed2:	371c      	adds	r7, #28
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr

08004edc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b087      	sub	sp, #28
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	60f8      	str	r0, [r7, #12]
 8004ee4:	60b9      	str	r1, [r7, #8]
 8004ee6:	607a      	str	r2, [r7, #4]
 8004ee8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	6a1b      	ldr	r3, [r3, #32]
 8004eee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	69db      	ldr	r3, [r3, #28]
 8004efa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	6a1b      	ldr	r3, [r3, #32]
 8004f00:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f08:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	021b      	lsls	r3, r3, #8
 8004f0e:	697a      	ldr	r2, [r7, #20]
 8004f10:	4313      	orrs	r3, r2
 8004f12:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f1a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	031b      	lsls	r3, r3, #12
 8004f20:	b29b      	uxth	r3, r3
 8004f22:	697a      	ldr	r2, [r7, #20]
 8004f24:	4313      	orrs	r3, r2
 8004f26:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004f2e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	031b      	lsls	r3, r3, #12
 8004f34:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004f38:	693a      	ldr	r2, [r7, #16]
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	697a      	ldr	r2, [r7, #20]
 8004f42:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	693a      	ldr	r2, [r7, #16]
 8004f48:	621a      	str	r2, [r3, #32]
}
 8004f4a:	bf00      	nop
 8004f4c:	371c      	adds	r7, #28
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f54:	4770      	bx	lr

08004f56 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f56:	b480      	push	{r7}
 8004f58:	b085      	sub	sp, #20
 8004f5a:	af00      	add	r7, sp, #0
 8004f5c:	6078      	str	r0, [r7, #4]
 8004f5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f6c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f6e:	683a      	ldr	r2, [r7, #0]
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	4313      	orrs	r3, r2
 8004f74:	f043 0307 	orr.w	r3, r3, #7
 8004f78:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	68fa      	ldr	r2, [r7, #12]
 8004f7e:	609a      	str	r2, [r3, #8]
}
 8004f80:	bf00      	nop
 8004f82:	3714      	adds	r7, #20
 8004f84:	46bd      	mov	sp, r7
 8004f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8a:	4770      	bx	lr

08004f8c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b087      	sub	sp, #28
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	60f8      	str	r0, [r7, #12]
 8004f94:	60b9      	str	r1, [r7, #8]
 8004f96:	607a      	str	r2, [r7, #4]
 8004f98:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004fa6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	021a      	lsls	r2, r3, #8
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	431a      	orrs	r2, r3
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	697a      	ldr	r2, [r7, #20]
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	697a      	ldr	r2, [r7, #20]
 8004fbe:	609a      	str	r2, [r3, #8]
}
 8004fc0:	bf00      	nop
 8004fc2:	371c      	adds	r7, #28
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr

08004fcc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b087      	sub	sp, #28
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	60f8      	str	r0, [r7, #12]
 8004fd4:	60b9      	str	r1, [r7, #8]
 8004fd6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	f003 031f 	and.w	r3, r3, #31
 8004fde:	2201      	movs	r2, #1
 8004fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	6a1a      	ldr	r2, [r3, #32]
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	43db      	mvns	r3, r3
 8004fee:	401a      	ands	r2, r3
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	6a1a      	ldr	r2, [r3, #32]
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	f003 031f 	and.w	r3, r3, #31
 8004ffe:	6879      	ldr	r1, [r7, #4]
 8005000:	fa01 f303 	lsl.w	r3, r1, r3
 8005004:	431a      	orrs	r2, r3
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	621a      	str	r2, [r3, #32]
}
 800500a:	bf00      	nop
 800500c:	371c      	adds	r7, #28
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr
	...

08005018 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005018:	b480      	push	{r7}
 800501a:	b085      	sub	sp, #20
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005028:	2b01      	cmp	r3, #1
 800502a:	d101      	bne.n	8005030 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800502c:	2302      	movs	r3, #2
 800502e:	e068      	b.n	8005102 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2201      	movs	r2, #1
 8005034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2202      	movs	r2, #2
 800503c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a2e      	ldr	r2, [pc, #184]	; (8005110 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d004      	beq.n	8005064 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a2d      	ldr	r2, [pc, #180]	; (8005114 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d108      	bne.n	8005076 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800506a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	68fa      	ldr	r2, [r7, #12]
 8005072:	4313      	orrs	r3, r2
 8005074:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800507c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	68fa      	ldr	r2, [r7, #12]
 8005084:	4313      	orrs	r3, r2
 8005086:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	68fa      	ldr	r2, [r7, #12]
 800508e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a1e      	ldr	r2, [pc, #120]	; (8005110 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d01d      	beq.n	80050d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050a2:	d018      	beq.n	80050d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a1b      	ldr	r2, [pc, #108]	; (8005118 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d013      	beq.n	80050d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a1a      	ldr	r2, [pc, #104]	; (800511c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d00e      	beq.n	80050d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a18      	ldr	r2, [pc, #96]	; (8005120 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d009      	beq.n	80050d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a13      	ldr	r2, [pc, #76]	; (8005114 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d004      	beq.n	80050d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a14      	ldr	r2, [pc, #80]	; (8005124 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d10c      	bne.n	80050f0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	68ba      	ldr	r2, [r7, #8]
 80050e4:	4313      	orrs	r3, r2
 80050e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	68ba      	ldr	r2, [r7, #8]
 80050ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2200      	movs	r2, #0
 80050fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005100:	2300      	movs	r3, #0
}
 8005102:	4618      	mov	r0, r3
 8005104:	3714      	adds	r7, #20
 8005106:	46bd      	mov	sp, r7
 8005108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510c:	4770      	bx	lr
 800510e:	bf00      	nop
 8005110:	40012c00 	.word	0x40012c00
 8005114:	40013400 	.word	0x40013400
 8005118:	40000400 	.word	0x40000400
 800511c:	40000800 	.word	0x40000800
 8005120:	40000c00 	.word	0x40000c00
 8005124:	40014000 	.word	0x40014000

08005128 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005128:	b480      	push	{r7}
 800512a:	b085      	sub	sp, #20
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005132:	2300      	movs	r3, #0
 8005134:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800513c:	2b01      	cmp	r3, #1
 800513e:	d101      	bne.n	8005144 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005140:	2302      	movs	r3, #2
 8005142:	e065      	b.n	8005210 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2201      	movs	r2, #1
 8005148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	68db      	ldr	r3, [r3, #12]
 8005156:	4313      	orrs	r3, r2
 8005158:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	4313      	orrs	r3, r2
 8005166:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	4313      	orrs	r3, r2
 8005174:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4313      	orrs	r3, r2
 8005182:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	691b      	ldr	r3, [r3, #16]
 800518e:	4313      	orrs	r3, r2
 8005190:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	695b      	ldr	r3, [r3, #20]
 800519c:	4313      	orrs	r3, r2
 800519e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051aa:	4313      	orrs	r3, r2
 80051ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	699b      	ldr	r3, [r3, #24]
 80051b8:	041b      	lsls	r3, r3, #16
 80051ba:	4313      	orrs	r3, r2
 80051bc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a16      	ldr	r2, [pc, #88]	; (800521c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d004      	beq.n	80051d2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a14      	ldr	r2, [pc, #80]	; (8005220 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d115      	bne.n	80051fe <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051dc:	051b      	lsls	r3, r3, #20
 80051de:	4313      	orrs	r3, r2
 80051e0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	69db      	ldr	r3, [r3, #28]
 80051ec:	4313      	orrs	r3, r2
 80051ee:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	6a1b      	ldr	r3, [r3, #32]
 80051fa:	4313      	orrs	r3, r2
 80051fc:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	68fa      	ldr	r2, [r7, #12]
 8005204:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2200      	movs	r2, #0
 800520a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800520e:	2300      	movs	r3, #0
}
 8005210:	4618      	mov	r0, r3
 8005212:	3714      	adds	r7, #20
 8005214:	46bd      	mov	sp, r7
 8005216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521a:	4770      	bx	lr
 800521c:	40012c00 	.word	0x40012c00
 8005220:	40013400 	.word	0x40013400

08005224 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005224:	b480      	push	{r7}
 8005226:	b083      	sub	sp, #12
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800522c:	bf00      	nop
 800522e:	370c      	adds	r7, #12
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr

08005238 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005238:	b480      	push	{r7}
 800523a:	b083      	sub	sp, #12
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005240:	bf00      	nop
 8005242:	370c      	adds	r7, #12
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr

0800524c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800524c:	b480      	push	{r7}
 800524e:	b083      	sub	sp, #12
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005254:	bf00      	nop
 8005256:	370c      	adds	r7, #12
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr

08005260 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b082      	sub	sp, #8
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d101      	bne.n	8005272 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800526e:	2301      	movs	r3, #1
 8005270:	e040      	b.n	80052f4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005276:	2b00      	cmp	r3, #0
 8005278:	d106      	bne.n	8005288 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2200      	movs	r2, #0
 800527e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f7fc f94c 	bl	8001520 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2224      	movs	r2, #36	; 0x24
 800528c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f022 0201 	bic.w	r2, r2, #1
 800529c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f000 f8c0 	bl	8005424 <UART_SetConfig>
 80052a4:	4603      	mov	r3, r0
 80052a6:	2b01      	cmp	r3, #1
 80052a8:	d101      	bne.n	80052ae <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	e022      	b.n	80052f4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d002      	beq.n	80052bc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f000 fb6c 	bl	8005994 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	685a      	ldr	r2, [r3, #4]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80052ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	689a      	ldr	r2, [r3, #8]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80052da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	681a      	ldr	r2, [r3, #0]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f042 0201 	orr.w	r2, r2, #1
 80052ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f000 fbf3 	bl	8005ad8 <UART_CheckIdleState>
 80052f2:	4603      	mov	r3, r0
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3708      	adds	r7, #8
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}

080052fc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b08a      	sub	sp, #40	; 0x28
 8005300:	af02      	add	r7, sp, #8
 8005302:	60f8      	str	r0, [r7, #12]
 8005304:	60b9      	str	r1, [r7, #8]
 8005306:	603b      	str	r3, [r7, #0]
 8005308:	4613      	mov	r3, r2
 800530a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005310:	2b20      	cmp	r3, #32
 8005312:	f040 8082 	bne.w	800541a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d002      	beq.n	8005322 <HAL_UART_Transmit+0x26>
 800531c:	88fb      	ldrh	r3, [r7, #6]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d101      	bne.n	8005326 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	e07a      	b.n	800541c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800532c:	2b01      	cmp	r3, #1
 800532e:	d101      	bne.n	8005334 <HAL_UART_Transmit+0x38>
 8005330:	2302      	movs	r3, #2
 8005332:	e073      	b.n	800541c <HAL_UART_Transmit+0x120>
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2201      	movs	r2, #1
 8005338:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2200      	movs	r2, #0
 8005340:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2221      	movs	r2, #33	; 0x21
 8005348:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800534a:	f7fc fb75 	bl	8001a38 <HAL_GetTick>
 800534e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	88fa      	ldrh	r2, [r7, #6]
 8005354:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	88fa      	ldrh	r2, [r7, #6]
 800535c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005368:	d108      	bne.n	800537c <HAL_UART_Transmit+0x80>
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	691b      	ldr	r3, [r3, #16]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d104      	bne.n	800537c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005372:	2300      	movs	r3, #0
 8005374:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	61bb      	str	r3, [r7, #24]
 800537a:	e003      	b.n	8005384 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005380:	2300      	movs	r3, #0
 8005382:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2200      	movs	r2, #0
 8005388:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800538c:	e02d      	b.n	80053ea <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	9300      	str	r3, [sp, #0]
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	2200      	movs	r2, #0
 8005396:	2180      	movs	r1, #128	; 0x80
 8005398:	68f8      	ldr	r0, [r7, #12]
 800539a:	f000 fbe6 	bl	8005b6a <UART_WaitOnFlagUntilTimeout>
 800539e:	4603      	mov	r3, r0
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d001      	beq.n	80053a8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80053a4:	2303      	movs	r3, #3
 80053a6:	e039      	b.n	800541c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80053a8:	69fb      	ldr	r3, [r7, #28]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d10b      	bne.n	80053c6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80053ae:	69bb      	ldr	r3, [r7, #24]
 80053b0:	881a      	ldrh	r2, [r3, #0]
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80053ba:	b292      	uxth	r2, r2
 80053bc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80053be:	69bb      	ldr	r3, [r7, #24]
 80053c0:	3302      	adds	r3, #2
 80053c2:	61bb      	str	r3, [r7, #24]
 80053c4:	e008      	b.n	80053d8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80053c6:	69fb      	ldr	r3, [r7, #28]
 80053c8:	781a      	ldrb	r2, [r3, #0]
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	b292      	uxth	r2, r2
 80053d0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80053d2:	69fb      	ldr	r3, [r7, #28]
 80053d4:	3301      	adds	r3, #1
 80053d6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80053de:	b29b      	uxth	r3, r3
 80053e0:	3b01      	subs	r3, #1
 80053e2:	b29a      	uxth	r2, r3
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80053f0:	b29b      	uxth	r3, r3
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d1cb      	bne.n	800538e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	9300      	str	r3, [sp, #0]
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	2200      	movs	r2, #0
 80053fe:	2140      	movs	r1, #64	; 0x40
 8005400:	68f8      	ldr	r0, [r7, #12]
 8005402:	f000 fbb2 	bl	8005b6a <UART_WaitOnFlagUntilTimeout>
 8005406:	4603      	mov	r3, r0
 8005408:	2b00      	cmp	r3, #0
 800540a:	d001      	beq.n	8005410 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800540c:	2303      	movs	r3, #3
 800540e:	e005      	b.n	800541c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2220      	movs	r2, #32
 8005414:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005416:	2300      	movs	r3, #0
 8005418:	e000      	b.n	800541c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800541a:	2302      	movs	r3, #2
  }
}
 800541c:	4618      	mov	r0, r3
 800541e:	3720      	adds	r7, #32
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}

08005424 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005424:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005428:	b08a      	sub	sp, #40	; 0x28
 800542a:	af00      	add	r7, sp, #0
 800542c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800542e:	2300      	movs	r3, #0
 8005430:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	689a      	ldr	r2, [r3, #8]
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	691b      	ldr	r3, [r3, #16]
 800543c:	431a      	orrs	r2, r3
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	695b      	ldr	r3, [r3, #20]
 8005442:	431a      	orrs	r2, r3
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	69db      	ldr	r3, [r3, #28]
 8005448:	4313      	orrs	r3, r2
 800544a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	4ba4      	ldr	r3, [pc, #656]	; (80056e4 <UART_SetConfig+0x2c0>)
 8005454:	4013      	ands	r3, r2
 8005456:	68fa      	ldr	r2, [r7, #12]
 8005458:	6812      	ldr	r2, [r2, #0]
 800545a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800545c:	430b      	orrs	r3, r1
 800545e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	68da      	ldr	r2, [r3, #12]
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	430a      	orrs	r2, r1
 8005474:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	699b      	ldr	r3, [r3, #24]
 800547a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a99      	ldr	r2, [pc, #612]	; (80056e8 <UART_SetConfig+0x2c4>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d004      	beq.n	8005490 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	6a1b      	ldr	r3, [r3, #32]
 800548a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800548c:	4313      	orrs	r3, r2
 800548e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054a0:	430a      	orrs	r2, r1
 80054a2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a90      	ldr	r2, [pc, #576]	; (80056ec <UART_SetConfig+0x2c8>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d126      	bne.n	80054fc <UART_SetConfig+0xd8>
 80054ae:	4b90      	ldr	r3, [pc, #576]	; (80056f0 <UART_SetConfig+0x2cc>)
 80054b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054b4:	f003 0303 	and.w	r3, r3, #3
 80054b8:	2b03      	cmp	r3, #3
 80054ba:	d81b      	bhi.n	80054f4 <UART_SetConfig+0xd0>
 80054bc:	a201      	add	r2, pc, #4	; (adr r2, 80054c4 <UART_SetConfig+0xa0>)
 80054be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054c2:	bf00      	nop
 80054c4:	080054d5 	.word	0x080054d5
 80054c8:	080054e5 	.word	0x080054e5
 80054cc:	080054dd 	.word	0x080054dd
 80054d0:	080054ed 	.word	0x080054ed
 80054d4:	2301      	movs	r3, #1
 80054d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054da:	e116      	b.n	800570a <UART_SetConfig+0x2e6>
 80054dc:	2302      	movs	r3, #2
 80054de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054e2:	e112      	b.n	800570a <UART_SetConfig+0x2e6>
 80054e4:	2304      	movs	r3, #4
 80054e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054ea:	e10e      	b.n	800570a <UART_SetConfig+0x2e6>
 80054ec:	2308      	movs	r3, #8
 80054ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054f2:	e10a      	b.n	800570a <UART_SetConfig+0x2e6>
 80054f4:	2310      	movs	r3, #16
 80054f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054fa:	e106      	b.n	800570a <UART_SetConfig+0x2e6>
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a7c      	ldr	r2, [pc, #496]	; (80056f4 <UART_SetConfig+0x2d0>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d138      	bne.n	8005578 <UART_SetConfig+0x154>
 8005506:	4b7a      	ldr	r3, [pc, #488]	; (80056f0 <UART_SetConfig+0x2cc>)
 8005508:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800550c:	f003 030c 	and.w	r3, r3, #12
 8005510:	2b0c      	cmp	r3, #12
 8005512:	d82d      	bhi.n	8005570 <UART_SetConfig+0x14c>
 8005514:	a201      	add	r2, pc, #4	; (adr r2, 800551c <UART_SetConfig+0xf8>)
 8005516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800551a:	bf00      	nop
 800551c:	08005551 	.word	0x08005551
 8005520:	08005571 	.word	0x08005571
 8005524:	08005571 	.word	0x08005571
 8005528:	08005571 	.word	0x08005571
 800552c:	08005561 	.word	0x08005561
 8005530:	08005571 	.word	0x08005571
 8005534:	08005571 	.word	0x08005571
 8005538:	08005571 	.word	0x08005571
 800553c:	08005559 	.word	0x08005559
 8005540:	08005571 	.word	0x08005571
 8005544:	08005571 	.word	0x08005571
 8005548:	08005571 	.word	0x08005571
 800554c:	08005569 	.word	0x08005569
 8005550:	2300      	movs	r3, #0
 8005552:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005556:	e0d8      	b.n	800570a <UART_SetConfig+0x2e6>
 8005558:	2302      	movs	r3, #2
 800555a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800555e:	e0d4      	b.n	800570a <UART_SetConfig+0x2e6>
 8005560:	2304      	movs	r3, #4
 8005562:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005566:	e0d0      	b.n	800570a <UART_SetConfig+0x2e6>
 8005568:	2308      	movs	r3, #8
 800556a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800556e:	e0cc      	b.n	800570a <UART_SetConfig+0x2e6>
 8005570:	2310      	movs	r3, #16
 8005572:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005576:	e0c8      	b.n	800570a <UART_SetConfig+0x2e6>
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a5e      	ldr	r2, [pc, #376]	; (80056f8 <UART_SetConfig+0x2d4>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d125      	bne.n	80055ce <UART_SetConfig+0x1aa>
 8005582:	4b5b      	ldr	r3, [pc, #364]	; (80056f0 <UART_SetConfig+0x2cc>)
 8005584:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005588:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800558c:	2b30      	cmp	r3, #48	; 0x30
 800558e:	d016      	beq.n	80055be <UART_SetConfig+0x19a>
 8005590:	2b30      	cmp	r3, #48	; 0x30
 8005592:	d818      	bhi.n	80055c6 <UART_SetConfig+0x1a2>
 8005594:	2b20      	cmp	r3, #32
 8005596:	d00a      	beq.n	80055ae <UART_SetConfig+0x18a>
 8005598:	2b20      	cmp	r3, #32
 800559a:	d814      	bhi.n	80055c6 <UART_SetConfig+0x1a2>
 800559c:	2b00      	cmp	r3, #0
 800559e:	d002      	beq.n	80055a6 <UART_SetConfig+0x182>
 80055a0:	2b10      	cmp	r3, #16
 80055a2:	d008      	beq.n	80055b6 <UART_SetConfig+0x192>
 80055a4:	e00f      	b.n	80055c6 <UART_SetConfig+0x1a2>
 80055a6:	2300      	movs	r3, #0
 80055a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055ac:	e0ad      	b.n	800570a <UART_SetConfig+0x2e6>
 80055ae:	2302      	movs	r3, #2
 80055b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055b4:	e0a9      	b.n	800570a <UART_SetConfig+0x2e6>
 80055b6:	2304      	movs	r3, #4
 80055b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055bc:	e0a5      	b.n	800570a <UART_SetConfig+0x2e6>
 80055be:	2308      	movs	r3, #8
 80055c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055c4:	e0a1      	b.n	800570a <UART_SetConfig+0x2e6>
 80055c6:	2310      	movs	r3, #16
 80055c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055cc:	e09d      	b.n	800570a <UART_SetConfig+0x2e6>
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a4a      	ldr	r2, [pc, #296]	; (80056fc <UART_SetConfig+0x2d8>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d125      	bne.n	8005624 <UART_SetConfig+0x200>
 80055d8:	4b45      	ldr	r3, [pc, #276]	; (80056f0 <UART_SetConfig+0x2cc>)
 80055da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055de:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80055e2:	2bc0      	cmp	r3, #192	; 0xc0
 80055e4:	d016      	beq.n	8005614 <UART_SetConfig+0x1f0>
 80055e6:	2bc0      	cmp	r3, #192	; 0xc0
 80055e8:	d818      	bhi.n	800561c <UART_SetConfig+0x1f8>
 80055ea:	2b80      	cmp	r3, #128	; 0x80
 80055ec:	d00a      	beq.n	8005604 <UART_SetConfig+0x1e0>
 80055ee:	2b80      	cmp	r3, #128	; 0x80
 80055f0:	d814      	bhi.n	800561c <UART_SetConfig+0x1f8>
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d002      	beq.n	80055fc <UART_SetConfig+0x1d8>
 80055f6:	2b40      	cmp	r3, #64	; 0x40
 80055f8:	d008      	beq.n	800560c <UART_SetConfig+0x1e8>
 80055fa:	e00f      	b.n	800561c <UART_SetConfig+0x1f8>
 80055fc:	2300      	movs	r3, #0
 80055fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005602:	e082      	b.n	800570a <UART_SetConfig+0x2e6>
 8005604:	2302      	movs	r3, #2
 8005606:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800560a:	e07e      	b.n	800570a <UART_SetConfig+0x2e6>
 800560c:	2304      	movs	r3, #4
 800560e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005612:	e07a      	b.n	800570a <UART_SetConfig+0x2e6>
 8005614:	2308      	movs	r3, #8
 8005616:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800561a:	e076      	b.n	800570a <UART_SetConfig+0x2e6>
 800561c:	2310      	movs	r3, #16
 800561e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005622:	e072      	b.n	800570a <UART_SetConfig+0x2e6>
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a35      	ldr	r2, [pc, #212]	; (8005700 <UART_SetConfig+0x2dc>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d12a      	bne.n	8005684 <UART_SetConfig+0x260>
 800562e:	4b30      	ldr	r3, [pc, #192]	; (80056f0 <UART_SetConfig+0x2cc>)
 8005630:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005634:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005638:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800563c:	d01a      	beq.n	8005674 <UART_SetConfig+0x250>
 800563e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005642:	d81b      	bhi.n	800567c <UART_SetConfig+0x258>
 8005644:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005648:	d00c      	beq.n	8005664 <UART_SetConfig+0x240>
 800564a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800564e:	d815      	bhi.n	800567c <UART_SetConfig+0x258>
 8005650:	2b00      	cmp	r3, #0
 8005652:	d003      	beq.n	800565c <UART_SetConfig+0x238>
 8005654:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005658:	d008      	beq.n	800566c <UART_SetConfig+0x248>
 800565a:	e00f      	b.n	800567c <UART_SetConfig+0x258>
 800565c:	2300      	movs	r3, #0
 800565e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005662:	e052      	b.n	800570a <UART_SetConfig+0x2e6>
 8005664:	2302      	movs	r3, #2
 8005666:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800566a:	e04e      	b.n	800570a <UART_SetConfig+0x2e6>
 800566c:	2304      	movs	r3, #4
 800566e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005672:	e04a      	b.n	800570a <UART_SetConfig+0x2e6>
 8005674:	2308      	movs	r3, #8
 8005676:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800567a:	e046      	b.n	800570a <UART_SetConfig+0x2e6>
 800567c:	2310      	movs	r3, #16
 800567e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005682:	e042      	b.n	800570a <UART_SetConfig+0x2e6>
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a17      	ldr	r2, [pc, #92]	; (80056e8 <UART_SetConfig+0x2c4>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d13a      	bne.n	8005704 <UART_SetConfig+0x2e0>
 800568e:	4b18      	ldr	r3, [pc, #96]	; (80056f0 <UART_SetConfig+0x2cc>)
 8005690:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005694:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005698:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800569c:	d01a      	beq.n	80056d4 <UART_SetConfig+0x2b0>
 800569e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80056a2:	d81b      	bhi.n	80056dc <UART_SetConfig+0x2b8>
 80056a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056a8:	d00c      	beq.n	80056c4 <UART_SetConfig+0x2a0>
 80056aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056ae:	d815      	bhi.n	80056dc <UART_SetConfig+0x2b8>
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d003      	beq.n	80056bc <UART_SetConfig+0x298>
 80056b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056b8:	d008      	beq.n	80056cc <UART_SetConfig+0x2a8>
 80056ba:	e00f      	b.n	80056dc <UART_SetConfig+0x2b8>
 80056bc:	2300      	movs	r3, #0
 80056be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056c2:	e022      	b.n	800570a <UART_SetConfig+0x2e6>
 80056c4:	2302      	movs	r3, #2
 80056c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056ca:	e01e      	b.n	800570a <UART_SetConfig+0x2e6>
 80056cc:	2304      	movs	r3, #4
 80056ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056d2:	e01a      	b.n	800570a <UART_SetConfig+0x2e6>
 80056d4:	2308      	movs	r3, #8
 80056d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056da:	e016      	b.n	800570a <UART_SetConfig+0x2e6>
 80056dc:	2310      	movs	r3, #16
 80056de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056e2:	e012      	b.n	800570a <UART_SetConfig+0x2e6>
 80056e4:	efff69f3 	.word	0xefff69f3
 80056e8:	40008000 	.word	0x40008000
 80056ec:	40013800 	.word	0x40013800
 80056f0:	40021000 	.word	0x40021000
 80056f4:	40004400 	.word	0x40004400
 80056f8:	40004800 	.word	0x40004800
 80056fc:	40004c00 	.word	0x40004c00
 8005700:	40005000 	.word	0x40005000
 8005704:	2310      	movs	r3, #16
 8005706:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a9f      	ldr	r2, [pc, #636]	; (800598c <UART_SetConfig+0x568>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d17a      	bne.n	800580a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005714:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005718:	2b08      	cmp	r3, #8
 800571a:	d824      	bhi.n	8005766 <UART_SetConfig+0x342>
 800571c:	a201      	add	r2, pc, #4	; (adr r2, 8005724 <UART_SetConfig+0x300>)
 800571e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005722:	bf00      	nop
 8005724:	08005749 	.word	0x08005749
 8005728:	08005767 	.word	0x08005767
 800572c:	08005751 	.word	0x08005751
 8005730:	08005767 	.word	0x08005767
 8005734:	08005757 	.word	0x08005757
 8005738:	08005767 	.word	0x08005767
 800573c:	08005767 	.word	0x08005767
 8005740:	08005767 	.word	0x08005767
 8005744:	0800575f 	.word	0x0800575f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005748:	f7fd fa4c 	bl	8002be4 <HAL_RCC_GetPCLK1Freq>
 800574c:	61f8      	str	r0, [r7, #28]
        break;
 800574e:	e010      	b.n	8005772 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005750:	4b8f      	ldr	r3, [pc, #572]	; (8005990 <UART_SetConfig+0x56c>)
 8005752:	61fb      	str	r3, [r7, #28]
        break;
 8005754:	e00d      	b.n	8005772 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005756:	f7fd f9ad 	bl	8002ab4 <HAL_RCC_GetSysClockFreq>
 800575a:	61f8      	str	r0, [r7, #28]
        break;
 800575c:	e009      	b.n	8005772 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800575e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005762:	61fb      	str	r3, [r7, #28]
        break;
 8005764:	e005      	b.n	8005772 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005766:	2300      	movs	r3, #0
 8005768:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005770:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005772:	69fb      	ldr	r3, [r7, #28]
 8005774:	2b00      	cmp	r3, #0
 8005776:	f000 80fb 	beq.w	8005970 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	685a      	ldr	r2, [r3, #4]
 800577e:	4613      	mov	r3, r2
 8005780:	005b      	lsls	r3, r3, #1
 8005782:	4413      	add	r3, r2
 8005784:	69fa      	ldr	r2, [r7, #28]
 8005786:	429a      	cmp	r2, r3
 8005788:	d305      	bcc.n	8005796 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005790:	69fa      	ldr	r2, [r7, #28]
 8005792:	429a      	cmp	r2, r3
 8005794:	d903      	bls.n	800579e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800579c:	e0e8      	b.n	8005970 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800579e:	69fb      	ldr	r3, [r7, #28]
 80057a0:	2200      	movs	r2, #0
 80057a2:	461c      	mov	r4, r3
 80057a4:	4615      	mov	r5, r2
 80057a6:	f04f 0200 	mov.w	r2, #0
 80057aa:	f04f 0300 	mov.w	r3, #0
 80057ae:	022b      	lsls	r3, r5, #8
 80057b0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80057b4:	0222      	lsls	r2, r4, #8
 80057b6:	68f9      	ldr	r1, [r7, #12]
 80057b8:	6849      	ldr	r1, [r1, #4]
 80057ba:	0849      	lsrs	r1, r1, #1
 80057bc:	2000      	movs	r0, #0
 80057be:	4688      	mov	r8, r1
 80057c0:	4681      	mov	r9, r0
 80057c2:	eb12 0a08 	adds.w	sl, r2, r8
 80057c6:	eb43 0b09 	adc.w	fp, r3, r9
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	2200      	movs	r2, #0
 80057d0:	603b      	str	r3, [r7, #0]
 80057d2:	607a      	str	r2, [r7, #4]
 80057d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80057d8:	4650      	mov	r0, sl
 80057da:	4659      	mov	r1, fp
 80057dc:	f7fb fa64 	bl	8000ca8 <__aeabi_uldivmod>
 80057e0:	4602      	mov	r2, r0
 80057e2:	460b      	mov	r3, r1
 80057e4:	4613      	mov	r3, r2
 80057e6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80057e8:	69bb      	ldr	r3, [r7, #24]
 80057ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80057ee:	d308      	bcc.n	8005802 <UART_SetConfig+0x3de>
 80057f0:	69bb      	ldr	r3, [r7, #24]
 80057f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057f6:	d204      	bcs.n	8005802 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	69ba      	ldr	r2, [r7, #24]
 80057fe:	60da      	str	r2, [r3, #12]
 8005800:	e0b6      	b.n	8005970 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005802:	2301      	movs	r3, #1
 8005804:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005808:	e0b2      	b.n	8005970 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	69db      	ldr	r3, [r3, #28]
 800580e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005812:	d15e      	bne.n	80058d2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005814:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005818:	2b08      	cmp	r3, #8
 800581a:	d828      	bhi.n	800586e <UART_SetConfig+0x44a>
 800581c:	a201      	add	r2, pc, #4	; (adr r2, 8005824 <UART_SetConfig+0x400>)
 800581e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005822:	bf00      	nop
 8005824:	08005849 	.word	0x08005849
 8005828:	08005851 	.word	0x08005851
 800582c:	08005859 	.word	0x08005859
 8005830:	0800586f 	.word	0x0800586f
 8005834:	0800585f 	.word	0x0800585f
 8005838:	0800586f 	.word	0x0800586f
 800583c:	0800586f 	.word	0x0800586f
 8005840:	0800586f 	.word	0x0800586f
 8005844:	08005867 	.word	0x08005867
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005848:	f7fd f9cc 	bl	8002be4 <HAL_RCC_GetPCLK1Freq>
 800584c:	61f8      	str	r0, [r7, #28]
        break;
 800584e:	e014      	b.n	800587a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005850:	f7fd f9de 	bl	8002c10 <HAL_RCC_GetPCLK2Freq>
 8005854:	61f8      	str	r0, [r7, #28]
        break;
 8005856:	e010      	b.n	800587a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005858:	4b4d      	ldr	r3, [pc, #308]	; (8005990 <UART_SetConfig+0x56c>)
 800585a:	61fb      	str	r3, [r7, #28]
        break;
 800585c:	e00d      	b.n	800587a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800585e:	f7fd f929 	bl	8002ab4 <HAL_RCC_GetSysClockFreq>
 8005862:	61f8      	str	r0, [r7, #28]
        break;
 8005864:	e009      	b.n	800587a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005866:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800586a:	61fb      	str	r3, [r7, #28]
        break;
 800586c:	e005      	b.n	800587a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800586e:	2300      	movs	r3, #0
 8005870:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005872:	2301      	movs	r3, #1
 8005874:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005878:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800587a:	69fb      	ldr	r3, [r7, #28]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d077      	beq.n	8005970 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005880:	69fb      	ldr	r3, [r7, #28]
 8005882:	005a      	lsls	r2, r3, #1
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	085b      	lsrs	r3, r3, #1
 800588a:	441a      	add	r2, r3
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	fbb2 f3f3 	udiv	r3, r2, r3
 8005894:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005896:	69bb      	ldr	r3, [r7, #24]
 8005898:	2b0f      	cmp	r3, #15
 800589a:	d916      	bls.n	80058ca <UART_SetConfig+0x4a6>
 800589c:	69bb      	ldr	r3, [r7, #24]
 800589e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058a2:	d212      	bcs.n	80058ca <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80058a4:	69bb      	ldr	r3, [r7, #24]
 80058a6:	b29b      	uxth	r3, r3
 80058a8:	f023 030f 	bic.w	r3, r3, #15
 80058ac:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80058ae:	69bb      	ldr	r3, [r7, #24]
 80058b0:	085b      	lsrs	r3, r3, #1
 80058b2:	b29b      	uxth	r3, r3
 80058b4:	f003 0307 	and.w	r3, r3, #7
 80058b8:	b29a      	uxth	r2, r3
 80058ba:	8afb      	ldrh	r3, [r7, #22]
 80058bc:	4313      	orrs	r3, r2
 80058be:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	8afa      	ldrh	r2, [r7, #22]
 80058c6:	60da      	str	r2, [r3, #12]
 80058c8:	e052      	b.n	8005970 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
 80058cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80058d0:	e04e      	b.n	8005970 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80058d2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80058d6:	2b08      	cmp	r3, #8
 80058d8:	d827      	bhi.n	800592a <UART_SetConfig+0x506>
 80058da:	a201      	add	r2, pc, #4	; (adr r2, 80058e0 <UART_SetConfig+0x4bc>)
 80058dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058e0:	08005905 	.word	0x08005905
 80058e4:	0800590d 	.word	0x0800590d
 80058e8:	08005915 	.word	0x08005915
 80058ec:	0800592b 	.word	0x0800592b
 80058f0:	0800591b 	.word	0x0800591b
 80058f4:	0800592b 	.word	0x0800592b
 80058f8:	0800592b 	.word	0x0800592b
 80058fc:	0800592b 	.word	0x0800592b
 8005900:	08005923 	.word	0x08005923
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005904:	f7fd f96e 	bl	8002be4 <HAL_RCC_GetPCLK1Freq>
 8005908:	61f8      	str	r0, [r7, #28]
        break;
 800590a:	e014      	b.n	8005936 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800590c:	f7fd f980 	bl	8002c10 <HAL_RCC_GetPCLK2Freq>
 8005910:	61f8      	str	r0, [r7, #28]
        break;
 8005912:	e010      	b.n	8005936 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005914:	4b1e      	ldr	r3, [pc, #120]	; (8005990 <UART_SetConfig+0x56c>)
 8005916:	61fb      	str	r3, [r7, #28]
        break;
 8005918:	e00d      	b.n	8005936 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800591a:	f7fd f8cb 	bl	8002ab4 <HAL_RCC_GetSysClockFreq>
 800591e:	61f8      	str	r0, [r7, #28]
        break;
 8005920:	e009      	b.n	8005936 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005922:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005926:	61fb      	str	r3, [r7, #28]
        break;
 8005928:	e005      	b.n	8005936 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800592a:	2300      	movs	r3, #0
 800592c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005934:	bf00      	nop
    }

    if (pclk != 0U)
 8005936:	69fb      	ldr	r3, [r7, #28]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d019      	beq.n	8005970 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	085a      	lsrs	r2, r3, #1
 8005942:	69fb      	ldr	r3, [r7, #28]
 8005944:	441a      	add	r2, r3
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	fbb2 f3f3 	udiv	r3, r2, r3
 800594e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005950:	69bb      	ldr	r3, [r7, #24]
 8005952:	2b0f      	cmp	r3, #15
 8005954:	d909      	bls.n	800596a <UART_SetConfig+0x546>
 8005956:	69bb      	ldr	r3, [r7, #24]
 8005958:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800595c:	d205      	bcs.n	800596a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800595e:	69bb      	ldr	r3, [r7, #24]
 8005960:	b29a      	uxth	r2, r3
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	60da      	str	r2, [r3, #12]
 8005968:	e002      	b.n	8005970 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2200      	movs	r2, #0
 8005974:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2200      	movs	r2, #0
 800597a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800597c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005980:	4618      	mov	r0, r3
 8005982:	3728      	adds	r7, #40	; 0x28
 8005984:	46bd      	mov	sp, r7
 8005986:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800598a:	bf00      	nop
 800598c:	40008000 	.word	0x40008000
 8005990:	00f42400 	.word	0x00f42400

08005994 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005994:	b480      	push	{r7}
 8005996:	b083      	sub	sp, #12
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a0:	f003 0301 	and.w	r3, r3, #1
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d00a      	beq.n	80059be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	430a      	orrs	r2, r1
 80059bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c2:	f003 0302 	and.w	r3, r3, #2
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d00a      	beq.n	80059e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	430a      	orrs	r2, r1
 80059de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e4:	f003 0304 	and.w	r3, r3, #4
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d00a      	beq.n	8005a02 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	430a      	orrs	r2, r1
 8005a00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a06:	f003 0308 	and.w	r3, r3, #8
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d00a      	beq.n	8005a24 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	430a      	orrs	r2, r1
 8005a22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a28:	f003 0310 	and.w	r3, r3, #16
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d00a      	beq.n	8005a46 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	430a      	orrs	r2, r1
 8005a44:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a4a:	f003 0320 	and.w	r3, r3, #32
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d00a      	beq.n	8005a68 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	430a      	orrs	r2, r1
 8005a66:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d01a      	beq.n	8005aaa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	430a      	orrs	r2, r1
 8005a88:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a92:	d10a      	bne.n	8005aaa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	430a      	orrs	r2, r1
 8005aa8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d00a      	beq.n	8005acc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	430a      	orrs	r2, r1
 8005aca:	605a      	str	r2, [r3, #4]
  }
}
 8005acc:	bf00      	nop
 8005ace:	370c      	adds	r7, #12
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad6:	4770      	bx	lr

08005ad8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b086      	sub	sp, #24
 8005adc:	af02      	add	r7, sp, #8
 8005ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005ae8:	f7fb ffa6 	bl	8001a38 <HAL_GetTick>
 8005aec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f003 0308 	and.w	r3, r3, #8
 8005af8:	2b08      	cmp	r3, #8
 8005afa:	d10e      	bne.n	8005b1a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005afc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b00:	9300      	str	r3, [sp, #0]
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2200      	movs	r2, #0
 8005b06:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f000 f82d 	bl	8005b6a <UART_WaitOnFlagUntilTimeout>
 8005b10:	4603      	mov	r3, r0
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d001      	beq.n	8005b1a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b16:	2303      	movs	r3, #3
 8005b18:	e023      	b.n	8005b62 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f003 0304 	and.w	r3, r3, #4
 8005b24:	2b04      	cmp	r3, #4
 8005b26:	d10e      	bne.n	8005b46 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b28:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b2c:	9300      	str	r3, [sp, #0]
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2200      	movs	r2, #0
 8005b32:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f000 f817 	bl	8005b6a <UART_WaitOnFlagUntilTimeout>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d001      	beq.n	8005b46 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b42:	2303      	movs	r3, #3
 8005b44:	e00d      	b.n	8005b62 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2220      	movs	r2, #32
 8005b4a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2220      	movs	r2, #32
 8005b50:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2200      	movs	r2, #0
 8005b56:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005b60:	2300      	movs	r3, #0
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	3710      	adds	r7, #16
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}

08005b6a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005b6a:	b580      	push	{r7, lr}
 8005b6c:	b09c      	sub	sp, #112	; 0x70
 8005b6e:	af00      	add	r7, sp, #0
 8005b70:	60f8      	str	r0, [r7, #12]
 8005b72:	60b9      	str	r1, [r7, #8]
 8005b74:	603b      	str	r3, [r7, #0]
 8005b76:	4613      	mov	r3, r2
 8005b78:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b7a:	e0a5      	b.n	8005cc8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b82:	f000 80a1 	beq.w	8005cc8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b86:	f7fb ff57 	bl	8001a38 <HAL_GetTick>
 8005b8a:	4602      	mov	r2, r0
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	1ad3      	subs	r3, r2, r3
 8005b90:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005b92:	429a      	cmp	r2, r3
 8005b94:	d302      	bcc.n	8005b9c <UART_WaitOnFlagUntilTimeout+0x32>
 8005b96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d13e      	bne.n	8005c1a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ba2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ba4:	e853 3f00 	ldrex	r3, [r3]
 8005ba8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005baa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005bb0:	667b      	str	r3, [r7, #100]	; 0x64
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	461a      	mov	r2, r3
 8005bb8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005bba:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005bbc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bbe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005bc0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005bc2:	e841 2300 	strex	r3, r2, [r1]
 8005bc6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005bc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d1e6      	bne.n	8005b9c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	3308      	adds	r3, #8
 8005bd4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bd8:	e853 3f00 	ldrex	r3, [r3]
 8005bdc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005be0:	f023 0301 	bic.w	r3, r3, #1
 8005be4:	663b      	str	r3, [r7, #96]	; 0x60
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	3308      	adds	r3, #8
 8005bec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005bee:	64ba      	str	r2, [r7, #72]	; 0x48
 8005bf0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bf2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005bf4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005bf6:	e841 2300 	strex	r3, r2, [r1]
 8005bfa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005bfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d1e5      	bne.n	8005bce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2220      	movs	r2, #32
 8005c06:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2220      	movs	r2, #32
 8005c0c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2200      	movs	r2, #0
 8005c12:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005c16:	2303      	movs	r3, #3
 8005c18:	e067      	b.n	8005cea <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f003 0304 	and.w	r3, r3, #4
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d04f      	beq.n	8005cc8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	69db      	ldr	r3, [r3, #28]
 8005c2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c36:	d147      	bne.n	8005cc8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c40:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c4a:	e853 3f00 	ldrex	r3, [r3]
 8005c4e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c52:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005c56:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	461a      	mov	r2, r3
 8005c5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c60:	637b      	str	r3, [r7, #52]	; 0x34
 8005c62:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c64:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005c66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c68:	e841 2300 	strex	r3, r2, [r1]
 8005c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d1e6      	bne.n	8005c42 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	3308      	adds	r3, #8
 8005c7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	e853 3f00 	ldrex	r3, [r3]
 8005c82:	613b      	str	r3, [r7, #16]
   return(result);
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	f023 0301 	bic.w	r3, r3, #1
 8005c8a:	66bb      	str	r3, [r7, #104]	; 0x68
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	3308      	adds	r3, #8
 8005c92:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005c94:	623a      	str	r2, [r7, #32]
 8005c96:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c98:	69f9      	ldr	r1, [r7, #28]
 8005c9a:	6a3a      	ldr	r2, [r7, #32]
 8005c9c:	e841 2300 	strex	r3, r2, [r1]
 8005ca0:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ca2:	69bb      	ldr	r3, [r7, #24]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d1e5      	bne.n	8005c74 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	2220      	movs	r2, #32
 8005cac:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2220      	movs	r2, #32
 8005cb2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2220      	movs	r2, #32
 8005cb8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005cc4:	2303      	movs	r3, #3
 8005cc6:	e010      	b.n	8005cea <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	69da      	ldr	r2, [r3, #28]
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	4013      	ands	r3, r2
 8005cd2:	68ba      	ldr	r2, [r7, #8]
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	bf0c      	ite	eq
 8005cd8:	2301      	moveq	r3, #1
 8005cda:	2300      	movne	r3, #0
 8005cdc:	b2db      	uxtb	r3, r3
 8005cde:	461a      	mov	r2, r3
 8005ce0:	79fb      	ldrb	r3, [r7, #7]
 8005ce2:	429a      	cmp	r2, r3
 8005ce4:	f43f af4a 	beq.w	8005b7c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ce8:	2300      	movs	r3, #0
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3770      	adds	r7, #112	; 0x70
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}
	...

08005cf4 <__errno>:
 8005cf4:	4b01      	ldr	r3, [pc, #4]	; (8005cfc <__errno+0x8>)
 8005cf6:	6818      	ldr	r0, [r3, #0]
 8005cf8:	4770      	bx	lr
 8005cfa:	bf00      	nop
 8005cfc:	2000000c 	.word	0x2000000c

08005d00 <__libc_init_array>:
 8005d00:	b570      	push	{r4, r5, r6, lr}
 8005d02:	4d0d      	ldr	r5, [pc, #52]	; (8005d38 <__libc_init_array+0x38>)
 8005d04:	4c0d      	ldr	r4, [pc, #52]	; (8005d3c <__libc_init_array+0x3c>)
 8005d06:	1b64      	subs	r4, r4, r5
 8005d08:	10a4      	asrs	r4, r4, #2
 8005d0a:	2600      	movs	r6, #0
 8005d0c:	42a6      	cmp	r6, r4
 8005d0e:	d109      	bne.n	8005d24 <__libc_init_array+0x24>
 8005d10:	4d0b      	ldr	r5, [pc, #44]	; (8005d40 <__libc_init_array+0x40>)
 8005d12:	4c0c      	ldr	r4, [pc, #48]	; (8005d44 <__libc_init_array+0x44>)
 8005d14:	f004 fd02 	bl	800a71c <_init>
 8005d18:	1b64      	subs	r4, r4, r5
 8005d1a:	10a4      	asrs	r4, r4, #2
 8005d1c:	2600      	movs	r6, #0
 8005d1e:	42a6      	cmp	r6, r4
 8005d20:	d105      	bne.n	8005d2e <__libc_init_array+0x2e>
 8005d22:	bd70      	pop	{r4, r5, r6, pc}
 8005d24:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d28:	4798      	blx	r3
 8005d2a:	3601      	adds	r6, #1
 8005d2c:	e7ee      	b.n	8005d0c <__libc_init_array+0xc>
 8005d2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d32:	4798      	blx	r3
 8005d34:	3601      	adds	r6, #1
 8005d36:	e7f2      	b.n	8005d1e <__libc_init_array+0x1e>
 8005d38:	0800ac64 	.word	0x0800ac64
 8005d3c:	0800ac64 	.word	0x0800ac64
 8005d40:	0800ac64 	.word	0x0800ac64
 8005d44:	0800ac68 	.word	0x0800ac68

08005d48 <memset>:
 8005d48:	4402      	add	r2, r0
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d100      	bne.n	8005d52 <memset+0xa>
 8005d50:	4770      	bx	lr
 8005d52:	f803 1b01 	strb.w	r1, [r3], #1
 8005d56:	e7f9      	b.n	8005d4c <memset+0x4>

08005d58 <__cvt>:
 8005d58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d5c:	ec55 4b10 	vmov	r4, r5, d0
 8005d60:	2d00      	cmp	r5, #0
 8005d62:	460e      	mov	r6, r1
 8005d64:	4619      	mov	r1, r3
 8005d66:	462b      	mov	r3, r5
 8005d68:	bfbb      	ittet	lt
 8005d6a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005d6e:	461d      	movlt	r5, r3
 8005d70:	2300      	movge	r3, #0
 8005d72:	232d      	movlt	r3, #45	; 0x2d
 8005d74:	700b      	strb	r3, [r1, #0]
 8005d76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005d78:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005d7c:	4691      	mov	r9, r2
 8005d7e:	f023 0820 	bic.w	r8, r3, #32
 8005d82:	bfbc      	itt	lt
 8005d84:	4622      	movlt	r2, r4
 8005d86:	4614      	movlt	r4, r2
 8005d88:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005d8c:	d005      	beq.n	8005d9a <__cvt+0x42>
 8005d8e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005d92:	d100      	bne.n	8005d96 <__cvt+0x3e>
 8005d94:	3601      	adds	r6, #1
 8005d96:	2102      	movs	r1, #2
 8005d98:	e000      	b.n	8005d9c <__cvt+0x44>
 8005d9a:	2103      	movs	r1, #3
 8005d9c:	ab03      	add	r3, sp, #12
 8005d9e:	9301      	str	r3, [sp, #4]
 8005da0:	ab02      	add	r3, sp, #8
 8005da2:	9300      	str	r3, [sp, #0]
 8005da4:	ec45 4b10 	vmov	d0, r4, r5
 8005da8:	4653      	mov	r3, sl
 8005daa:	4632      	mov	r2, r6
 8005dac:	f001 fee4 	bl	8007b78 <_dtoa_r>
 8005db0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005db4:	4607      	mov	r7, r0
 8005db6:	d102      	bne.n	8005dbe <__cvt+0x66>
 8005db8:	f019 0f01 	tst.w	r9, #1
 8005dbc:	d022      	beq.n	8005e04 <__cvt+0xac>
 8005dbe:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005dc2:	eb07 0906 	add.w	r9, r7, r6
 8005dc6:	d110      	bne.n	8005dea <__cvt+0x92>
 8005dc8:	783b      	ldrb	r3, [r7, #0]
 8005dca:	2b30      	cmp	r3, #48	; 0x30
 8005dcc:	d10a      	bne.n	8005de4 <__cvt+0x8c>
 8005dce:	2200      	movs	r2, #0
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	4620      	mov	r0, r4
 8005dd4:	4629      	mov	r1, r5
 8005dd6:	f7fa fe87 	bl	8000ae8 <__aeabi_dcmpeq>
 8005dda:	b918      	cbnz	r0, 8005de4 <__cvt+0x8c>
 8005ddc:	f1c6 0601 	rsb	r6, r6, #1
 8005de0:	f8ca 6000 	str.w	r6, [sl]
 8005de4:	f8da 3000 	ldr.w	r3, [sl]
 8005de8:	4499      	add	r9, r3
 8005dea:	2200      	movs	r2, #0
 8005dec:	2300      	movs	r3, #0
 8005dee:	4620      	mov	r0, r4
 8005df0:	4629      	mov	r1, r5
 8005df2:	f7fa fe79 	bl	8000ae8 <__aeabi_dcmpeq>
 8005df6:	b108      	cbz	r0, 8005dfc <__cvt+0xa4>
 8005df8:	f8cd 900c 	str.w	r9, [sp, #12]
 8005dfc:	2230      	movs	r2, #48	; 0x30
 8005dfe:	9b03      	ldr	r3, [sp, #12]
 8005e00:	454b      	cmp	r3, r9
 8005e02:	d307      	bcc.n	8005e14 <__cvt+0xbc>
 8005e04:	9b03      	ldr	r3, [sp, #12]
 8005e06:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005e08:	1bdb      	subs	r3, r3, r7
 8005e0a:	4638      	mov	r0, r7
 8005e0c:	6013      	str	r3, [r2, #0]
 8005e0e:	b004      	add	sp, #16
 8005e10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e14:	1c59      	adds	r1, r3, #1
 8005e16:	9103      	str	r1, [sp, #12]
 8005e18:	701a      	strb	r2, [r3, #0]
 8005e1a:	e7f0      	b.n	8005dfe <__cvt+0xa6>

08005e1c <__exponent>:
 8005e1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005e1e:	4603      	mov	r3, r0
 8005e20:	2900      	cmp	r1, #0
 8005e22:	bfb8      	it	lt
 8005e24:	4249      	neglt	r1, r1
 8005e26:	f803 2b02 	strb.w	r2, [r3], #2
 8005e2a:	bfb4      	ite	lt
 8005e2c:	222d      	movlt	r2, #45	; 0x2d
 8005e2e:	222b      	movge	r2, #43	; 0x2b
 8005e30:	2909      	cmp	r1, #9
 8005e32:	7042      	strb	r2, [r0, #1]
 8005e34:	dd2a      	ble.n	8005e8c <__exponent+0x70>
 8005e36:	f10d 0407 	add.w	r4, sp, #7
 8005e3a:	46a4      	mov	ip, r4
 8005e3c:	270a      	movs	r7, #10
 8005e3e:	46a6      	mov	lr, r4
 8005e40:	460a      	mov	r2, r1
 8005e42:	fb91 f6f7 	sdiv	r6, r1, r7
 8005e46:	fb07 1516 	mls	r5, r7, r6, r1
 8005e4a:	3530      	adds	r5, #48	; 0x30
 8005e4c:	2a63      	cmp	r2, #99	; 0x63
 8005e4e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8005e52:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005e56:	4631      	mov	r1, r6
 8005e58:	dcf1      	bgt.n	8005e3e <__exponent+0x22>
 8005e5a:	3130      	adds	r1, #48	; 0x30
 8005e5c:	f1ae 0502 	sub.w	r5, lr, #2
 8005e60:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005e64:	1c44      	adds	r4, r0, #1
 8005e66:	4629      	mov	r1, r5
 8005e68:	4561      	cmp	r1, ip
 8005e6a:	d30a      	bcc.n	8005e82 <__exponent+0x66>
 8005e6c:	f10d 0209 	add.w	r2, sp, #9
 8005e70:	eba2 020e 	sub.w	r2, r2, lr
 8005e74:	4565      	cmp	r5, ip
 8005e76:	bf88      	it	hi
 8005e78:	2200      	movhi	r2, #0
 8005e7a:	4413      	add	r3, r2
 8005e7c:	1a18      	subs	r0, r3, r0
 8005e7e:	b003      	add	sp, #12
 8005e80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e82:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005e86:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005e8a:	e7ed      	b.n	8005e68 <__exponent+0x4c>
 8005e8c:	2330      	movs	r3, #48	; 0x30
 8005e8e:	3130      	adds	r1, #48	; 0x30
 8005e90:	7083      	strb	r3, [r0, #2]
 8005e92:	70c1      	strb	r1, [r0, #3]
 8005e94:	1d03      	adds	r3, r0, #4
 8005e96:	e7f1      	b.n	8005e7c <__exponent+0x60>

08005e98 <_printf_float>:
 8005e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e9c:	ed2d 8b02 	vpush	{d8}
 8005ea0:	b08d      	sub	sp, #52	; 0x34
 8005ea2:	460c      	mov	r4, r1
 8005ea4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005ea8:	4616      	mov	r6, r2
 8005eaa:	461f      	mov	r7, r3
 8005eac:	4605      	mov	r5, r0
 8005eae:	f003 f977 	bl	80091a0 <_localeconv_r>
 8005eb2:	f8d0 a000 	ldr.w	sl, [r0]
 8005eb6:	4650      	mov	r0, sl
 8005eb8:	f7fa f99a 	bl	80001f0 <strlen>
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	930a      	str	r3, [sp, #40]	; 0x28
 8005ec0:	6823      	ldr	r3, [r4, #0]
 8005ec2:	9305      	str	r3, [sp, #20]
 8005ec4:	f8d8 3000 	ldr.w	r3, [r8]
 8005ec8:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005ecc:	3307      	adds	r3, #7
 8005ece:	f023 0307 	bic.w	r3, r3, #7
 8005ed2:	f103 0208 	add.w	r2, r3, #8
 8005ed6:	f8c8 2000 	str.w	r2, [r8]
 8005eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ede:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005ee2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005ee6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005eea:	9307      	str	r3, [sp, #28]
 8005eec:	f8cd 8018 	str.w	r8, [sp, #24]
 8005ef0:	ee08 0a10 	vmov	s16, r0
 8005ef4:	4b9f      	ldr	r3, [pc, #636]	; (8006174 <_printf_float+0x2dc>)
 8005ef6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005efa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005efe:	f7fa fe25 	bl	8000b4c <__aeabi_dcmpun>
 8005f02:	bb88      	cbnz	r0, 8005f68 <_printf_float+0xd0>
 8005f04:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005f08:	4b9a      	ldr	r3, [pc, #616]	; (8006174 <_printf_float+0x2dc>)
 8005f0a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005f0e:	f7fa fdff 	bl	8000b10 <__aeabi_dcmple>
 8005f12:	bb48      	cbnz	r0, 8005f68 <_printf_float+0xd0>
 8005f14:	2200      	movs	r2, #0
 8005f16:	2300      	movs	r3, #0
 8005f18:	4640      	mov	r0, r8
 8005f1a:	4649      	mov	r1, r9
 8005f1c:	f7fa fdee 	bl	8000afc <__aeabi_dcmplt>
 8005f20:	b110      	cbz	r0, 8005f28 <_printf_float+0x90>
 8005f22:	232d      	movs	r3, #45	; 0x2d
 8005f24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f28:	4b93      	ldr	r3, [pc, #588]	; (8006178 <_printf_float+0x2e0>)
 8005f2a:	4894      	ldr	r0, [pc, #592]	; (800617c <_printf_float+0x2e4>)
 8005f2c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005f30:	bf94      	ite	ls
 8005f32:	4698      	movls	r8, r3
 8005f34:	4680      	movhi	r8, r0
 8005f36:	2303      	movs	r3, #3
 8005f38:	6123      	str	r3, [r4, #16]
 8005f3a:	9b05      	ldr	r3, [sp, #20]
 8005f3c:	f023 0204 	bic.w	r2, r3, #4
 8005f40:	6022      	str	r2, [r4, #0]
 8005f42:	f04f 0900 	mov.w	r9, #0
 8005f46:	9700      	str	r7, [sp, #0]
 8005f48:	4633      	mov	r3, r6
 8005f4a:	aa0b      	add	r2, sp, #44	; 0x2c
 8005f4c:	4621      	mov	r1, r4
 8005f4e:	4628      	mov	r0, r5
 8005f50:	f000 f9d8 	bl	8006304 <_printf_common>
 8005f54:	3001      	adds	r0, #1
 8005f56:	f040 8090 	bne.w	800607a <_printf_float+0x1e2>
 8005f5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005f5e:	b00d      	add	sp, #52	; 0x34
 8005f60:	ecbd 8b02 	vpop	{d8}
 8005f64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f68:	4642      	mov	r2, r8
 8005f6a:	464b      	mov	r3, r9
 8005f6c:	4640      	mov	r0, r8
 8005f6e:	4649      	mov	r1, r9
 8005f70:	f7fa fdec 	bl	8000b4c <__aeabi_dcmpun>
 8005f74:	b140      	cbz	r0, 8005f88 <_printf_float+0xf0>
 8005f76:	464b      	mov	r3, r9
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	bfbc      	itt	lt
 8005f7c:	232d      	movlt	r3, #45	; 0x2d
 8005f7e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005f82:	487f      	ldr	r0, [pc, #508]	; (8006180 <_printf_float+0x2e8>)
 8005f84:	4b7f      	ldr	r3, [pc, #508]	; (8006184 <_printf_float+0x2ec>)
 8005f86:	e7d1      	b.n	8005f2c <_printf_float+0x94>
 8005f88:	6863      	ldr	r3, [r4, #4]
 8005f8a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005f8e:	9206      	str	r2, [sp, #24]
 8005f90:	1c5a      	adds	r2, r3, #1
 8005f92:	d13f      	bne.n	8006014 <_printf_float+0x17c>
 8005f94:	2306      	movs	r3, #6
 8005f96:	6063      	str	r3, [r4, #4]
 8005f98:	9b05      	ldr	r3, [sp, #20]
 8005f9a:	6861      	ldr	r1, [r4, #4]
 8005f9c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	9303      	str	r3, [sp, #12]
 8005fa4:	ab0a      	add	r3, sp, #40	; 0x28
 8005fa6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005faa:	ab09      	add	r3, sp, #36	; 0x24
 8005fac:	ec49 8b10 	vmov	d0, r8, r9
 8005fb0:	9300      	str	r3, [sp, #0]
 8005fb2:	6022      	str	r2, [r4, #0]
 8005fb4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005fb8:	4628      	mov	r0, r5
 8005fba:	f7ff fecd 	bl	8005d58 <__cvt>
 8005fbe:	9b06      	ldr	r3, [sp, #24]
 8005fc0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005fc2:	2b47      	cmp	r3, #71	; 0x47
 8005fc4:	4680      	mov	r8, r0
 8005fc6:	d108      	bne.n	8005fda <_printf_float+0x142>
 8005fc8:	1cc8      	adds	r0, r1, #3
 8005fca:	db02      	blt.n	8005fd2 <_printf_float+0x13a>
 8005fcc:	6863      	ldr	r3, [r4, #4]
 8005fce:	4299      	cmp	r1, r3
 8005fd0:	dd41      	ble.n	8006056 <_printf_float+0x1be>
 8005fd2:	f1ab 0b02 	sub.w	fp, fp, #2
 8005fd6:	fa5f fb8b 	uxtb.w	fp, fp
 8005fda:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005fde:	d820      	bhi.n	8006022 <_printf_float+0x18a>
 8005fe0:	3901      	subs	r1, #1
 8005fe2:	465a      	mov	r2, fp
 8005fe4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005fe8:	9109      	str	r1, [sp, #36]	; 0x24
 8005fea:	f7ff ff17 	bl	8005e1c <__exponent>
 8005fee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005ff0:	1813      	adds	r3, r2, r0
 8005ff2:	2a01      	cmp	r2, #1
 8005ff4:	4681      	mov	r9, r0
 8005ff6:	6123      	str	r3, [r4, #16]
 8005ff8:	dc02      	bgt.n	8006000 <_printf_float+0x168>
 8005ffa:	6822      	ldr	r2, [r4, #0]
 8005ffc:	07d2      	lsls	r2, r2, #31
 8005ffe:	d501      	bpl.n	8006004 <_printf_float+0x16c>
 8006000:	3301      	adds	r3, #1
 8006002:	6123      	str	r3, [r4, #16]
 8006004:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006008:	2b00      	cmp	r3, #0
 800600a:	d09c      	beq.n	8005f46 <_printf_float+0xae>
 800600c:	232d      	movs	r3, #45	; 0x2d
 800600e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006012:	e798      	b.n	8005f46 <_printf_float+0xae>
 8006014:	9a06      	ldr	r2, [sp, #24]
 8006016:	2a47      	cmp	r2, #71	; 0x47
 8006018:	d1be      	bne.n	8005f98 <_printf_float+0x100>
 800601a:	2b00      	cmp	r3, #0
 800601c:	d1bc      	bne.n	8005f98 <_printf_float+0x100>
 800601e:	2301      	movs	r3, #1
 8006020:	e7b9      	b.n	8005f96 <_printf_float+0xfe>
 8006022:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006026:	d118      	bne.n	800605a <_printf_float+0x1c2>
 8006028:	2900      	cmp	r1, #0
 800602a:	6863      	ldr	r3, [r4, #4]
 800602c:	dd0b      	ble.n	8006046 <_printf_float+0x1ae>
 800602e:	6121      	str	r1, [r4, #16]
 8006030:	b913      	cbnz	r3, 8006038 <_printf_float+0x1a0>
 8006032:	6822      	ldr	r2, [r4, #0]
 8006034:	07d0      	lsls	r0, r2, #31
 8006036:	d502      	bpl.n	800603e <_printf_float+0x1a6>
 8006038:	3301      	adds	r3, #1
 800603a:	440b      	add	r3, r1
 800603c:	6123      	str	r3, [r4, #16]
 800603e:	65a1      	str	r1, [r4, #88]	; 0x58
 8006040:	f04f 0900 	mov.w	r9, #0
 8006044:	e7de      	b.n	8006004 <_printf_float+0x16c>
 8006046:	b913      	cbnz	r3, 800604e <_printf_float+0x1b6>
 8006048:	6822      	ldr	r2, [r4, #0]
 800604a:	07d2      	lsls	r2, r2, #31
 800604c:	d501      	bpl.n	8006052 <_printf_float+0x1ba>
 800604e:	3302      	adds	r3, #2
 8006050:	e7f4      	b.n	800603c <_printf_float+0x1a4>
 8006052:	2301      	movs	r3, #1
 8006054:	e7f2      	b.n	800603c <_printf_float+0x1a4>
 8006056:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800605a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800605c:	4299      	cmp	r1, r3
 800605e:	db05      	blt.n	800606c <_printf_float+0x1d4>
 8006060:	6823      	ldr	r3, [r4, #0]
 8006062:	6121      	str	r1, [r4, #16]
 8006064:	07d8      	lsls	r0, r3, #31
 8006066:	d5ea      	bpl.n	800603e <_printf_float+0x1a6>
 8006068:	1c4b      	adds	r3, r1, #1
 800606a:	e7e7      	b.n	800603c <_printf_float+0x1a4>
 800606c:	2900      	cmp	r1, #0
 800606e:	bfd4      	ite	le
 8006070:	f1c1 0202 	rsble	r2, r1, #2
 8006074:	2201      	movgt	r2, #1
 8006076:	4413      	add	r3, r2
 8006078:	e7e0      	b.n	800603c <_printf_float+0x1a4>
 800607a:	6823      	ldr	r3, [r4, #0]
 800607c:	055a      	lsls	r2, r3, #21
 800607e:	d407      	bmi.n	8006090 <_printf_float+0x1f8>
 8006080:	6923      	ldr	r3, [r4, #16]
 8006082:	4642      	mov	r2, r8
 8006084:	4631      	mov	r1, r6
 8006086:	4628      	mov	r0, r5
 8006088:	47b8      	blx	r7
 800608a:	3001      	adds	r0, #1
 800608c:	d12c      	bne.n	80060e8 <_printf_float+0x250>
 800608e:	e764      	b.n	8005f5a <_printf_float+0xc2>
 8006090:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006094:	f240 80e0 	bls.w	8006258 <_printf_float+0x3c0>
 8006098:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800609c:	2200      	movs	r2, #0
 800609e:	2300      	movs	r3, #0
 80060a0:	f7fa fd22 	bl	8000ae8 <__aeabi_dcmpeq>
 80060a4:	2800      	cmp	r0, #0
 80060a6:	d034      	beq.n	8006112 <_printf_float+0x27a>
 80060a8:	4a37      	ldr	r2, [pc, #220]	; (8006188 <_printf_float+0x2f0>)
 80060aa:	2301      	movs	r3, #1
 80060ac:	4631      	mov	r1, r6
 80060ae:	4628      	mov	r0, r5
 80060b0:	47b8      	blx	r7
 80060b2:	3001      	adds	r0, #1
 80060b4:	f43f af51 	beq.w	8005f5a <_printf_float+0xc2>
 80060b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80060bc:	429a      	cmp	r2, r3
 80060be:	db02      	blt.n	80060c6 <_printf_float+0x22e>
 80060c0:	6823      	ldr	r3, [r4, #0]
 80060c2:	07d8      	lsls	r0, r3, #31
 80060c4:	d510      	bpl.n	80060e8 <_printf_float+0x250>
 80060c6:	ee18 3a10 	vmov	r3, s16
 80060ca:	4652      	mov	r2, sl
 80060cc:	4631      	mov	r1, r6
 80060ce:	4628      	mov	r0, r5
 80060d0:	47b8      	blx	r7
 80060d2:	3001      	adds	r0, #1
 80060d4:	f43f af41 	beq.w	8005f5a <_printf_float+0xc2>
 80060d8:	f04f 0800 	mov.w	r8, #0
 80060dc:	f104 091a 	add.w	r9, r4, #26
 80060e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060e2:	3b01      	subs	r3, #1
 80060e4:	4543      	cmp	r3, r8
 80060e6:	dc09      	bgt.n	80060fc <_printf_float+0x264>
 80060e8:	6823      	ldr	r3, [r4, #0]
 80060ea:	079b      	lsls	r3, r3, #30
 80060ec:	f100 8105 	bmi.w	80062fa <_printf_float+0x462>
 80060f0:	68e0      	ldr	r0, [r4, #12]
 80060f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80060f4:	4298      	cmp	r0, r3
 80060f6:	bfb8      	it	lt
 80060f8:	4618      	movlt	r0, r3
 80060fa:	e730      	b.n	8005f5e <_printf_float+0xc6>
 80060fc:	2301      	movs	r3, #1
 80060fe:	464a      	mov	r2, r9
 8006100:	4631      	mov	r1, r6
 8006102:	4628      	mov	r0, r5
 8006104:	47b8      	blx	r7
 8006106:	3001      	adds	r0, #1
 8006108:	f43f af27 	beq.w	8005f5a <_printf_float+0xc2>
 800610c:	f108 0801 	add.w	r8, r8, #1
 8006110:	e7e6      	b.n	80060e0 <_printf_float+0x248>
 8006112:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006114:	2b00      	cmp	r3, #0
 8006116:	dc39      	bgt.n	800618c <_printf_float+0x2f4>
 8006118:	4a1b      	ldr	r2, [pc, #108]	; (8006188 <_printf_float+0x2f0>)
 800611a:	2301      	movs	r3, #1
 800611c:	4631      	mov	r1, r6
 800611e:	4628      	mov	r0, r5
 8006120:	47b8      	blx	r7
 8006122:	3001      	adds	r0, #1
 8006124:	f43f af19 	beq.w	8005f5a <_printf_float+0xc2>
 8006128:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800612c:	4313      	orrs	r3, r2
 800612e:	d102      	bne.n	8006136 <_printf_float+0x29e>
 8006130:	6823      	ldr	r3, [r4, #0]
 8006132:	07d9      	lsls	r1, r3, #31
 8006134:	d5d8      	bpl.n	80060e8 <_printf_float+0x250>
 8006136:	ee18 3a10 	vmov	r3, s16
 800613a:	4652      	mov	r2, sl
 800613c:	4631      	mov	r1, r6
 800613e:	4628      	mov	r0, r5
 8006140:	47b8      	blx	r7
 8006142:	3001      	adds	r0, #1
 8006144:	f43f af09 	beq.w	8005f5a <_printf_float+0xc2>
 8006148:	f04f 0900 	mov.w	r9, #0
 800614c:	f104 0a1a 	add.w	sl, r4, #26
 8006150:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006152:	425b      	negs	r3, r3
 8006154:	454b      	cmp	r3, r9
 8006156:	dc01      	bgt.n	800615c <_printf_float+0x2c4>
 8006158:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800615a:	e792      	b.n	8006082 <_printf_float+0x1ea>
 800615c:	2301      	movs	r3, #1
 800615e:	4652      	mov	r2, sl
 8006160:	4631      	mov	r1, r6
 8006162:	4628      	mov	r0, r5
 8006164:	47b8      	blx	r7
 8006166:	3001      	adds	r0, #1
 8006168:	f43f aef7 	beq.w	8005f5a <_printf_float+0xc2>
 800616c:	f109 0901 	add.w	r9, r9, #1
 8006170:	e7ee      	b.n	8006150 <_printf_float+0x2b8>
 8006172:	bf00      	nop
 8006174:	7fefffff 	.word	0x7fefffff
 8006178:	0800a7b4 	.word	0x0800a7b4
 800617c:	0800a7b8 	.word	0x0800a7b8
 8006180:	0800a7c0 	.word	0x0800a7c0
 8006184:	0800a7bc 	.word	0x0800a7bc
 8006188:	0800a7c4 	.word	0x0800a7c4
 800618c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800618e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006190:	429a      	cmp	r2, r3
 8006192:	bfa8      	it	ge
 8006194:	461a      	movge	r2, r3
 8006196:	2a00      	cmp	r2, #0
 8006198:	4691      	mov	r9, r2
 800619a:	dc37      	bgt.n	800620c <_printf_float+0x374>
 800619c:	f04f 0b00 	mov.w	fp, #0
 80061a0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80061a4:	f104 021a 	add.w	r2, r4, #26
 80061a8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80061aa:	9305      	str	r3, [sp, #20]
 80061ac:	eba3 0309 	sub.w	r3, r3, r9
 80061b0:	455b      	cmp	r3, fp
 80061b2:	dc33      	bgt.n	800621c <_printf_float+0x384>
 80061b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80061b8:	429a      	cmp	r2, r3
 80061ba:	db3b      	blt.n	8006234 <_printf_float+0x39c>
 80061bc:	6823      	ldr	r3, [r4, #0]
 80061be:	07da      	lsls	r2, r3, #31
 80061c0:	d438      	bmi.n	8006234 <_printf_float+0x39c>
 80061c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061c4:	9a05      	ldr	r2, [sp, #20]
 80061c6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80061c8:	1a9a      	subs	r2, r3, r2
 80061ca:	eba3 0901 	sub.w	r9, r3, r1
 80061ce:	4591      	cmp	r9, r2
 80061d0:	bfa8      	it	ge
 80061d2:	4691      	movge	r9, r2
 80061d4:	f1b9 0f00 	cmp.w	r9, #0
 80061d8:	dc35      	bgt.n	8006246 <_printf_float+0x3ae>
 80061da:	f04f 0800 	mov.w	r8, #0
 80061de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80061e2:	f104 0a1a 	add.w	sl, r4, #26
 80061e6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80061ea:	1a9b      	subs	r3, r3, r2
 80061ec:	eba3 0309 	sub.w	r3, r3, r9
 80061f0:	4543      	cmp	r3, r8
 80061f2:	f77f af79 	ble.w	80060e8 <_printf_float+0x250>
 80061f6:	2301      	movs	r3, #1
 80061f8:	4652      	mov	r2, sl
 80061fa:	4631      	mov	r1, r6
 80061fc:	4628      	mov	r0, r5
 80061fe:	47b8      	blx	r7
 8006200:	3001      	adds	r0, #1
 8006202:	f43f aeaa 	beq.w	8005f5a <_printf_float+0xc2>
 8006206:	f108 0801 	add.w	r8, r8, #1
 800620a:	e7ec      	b.n	80061e6 <_printf_float+0x34e>
 800620c:	4613      	mov	r3, r2
 800620e:	4631      	mov	r1, r6
 8006210:	4642      	mov	r2, r8
 8006212:	4628      	mov	r0, r5
 8006214:	47b8      	blx	r7
 8006216:	3001      	adds	r0, #1
 8006218:	d1c0      	bne.n	800619c <_printf_float+0x304>
 800621a:	e69e      	b.n	8005f5a <_printf_float+0xc2>
 800621c:	2301      	movs	r3, #1
 800621e:	4631      	mov	r1, r6
 8006220:	4628      	mov	r0, r5
 8006222:	9205      	str	r2, [sp, #20]
 8006224:	47b8      	blx	r7
 8006226:	3001      	adds	r0, #1
 8006228:	f43f ae97 	beq.w	8005f5a <_printf_float+0xc2>
 800622c:	9a05      	ldr	r2, [sp, #20]
 800622e:	f10b 0b01 	add.w	fp, fp, #1
 8006232:	e7b9      	b.n	80061a8 <_printf_float+0x310>
 8006234:	ee18 3a10 	vmov	r3, s16
 8006238:	4652      	mov	r2, sl
 800623a:	4631      	mov	r1, r6
 800623c:	4628      	mov	r0, r5
 800623e:	47b8      	blx	r7
 8006240:	3001      	adds	r0, #1
 8006242:	d1be      	bne.n	80061c2 <_printf_float+0x32a>
 8006244:	e689      	b.n	8005f5a <_printf_float+0xc2>
 8006246:	9a05      	ldr	r2, [sp, #20]
 8006248:	464b      	mov	r3, r9
 800624a:	4442      	add	r2, r8
 800624c:	4631      	mov	r1, r6
 800624e:	4628      	mov	r0, r5
 8006250:	47b8      	blx	r7
 8006252:	3001      	adds	r0, #1
 8006254:	d1c1      	bne.n	80061da <_printf_float+0x342>
 8006256:	e680      	b.n	8005f5a <_printf_float+0xc2>
 8006258:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800625a:	2a01      	cmp	r2, #1
 800625c:	dc01      	bgt.n	8006262 <_printf_float+0x3ca>
 800625e:	07db      	lsls	r3, r3, #31
 8006260:	d538      	bpl.n	80062d4 <_printf_float+0x43c>
 8006262:	2301      	movs	r3, #1
 8006264:	4642      	mov	r2, r8
 8006266:	4631      	mov	r1, r6
 8006268:	4628      	mov	r0, r5
 800626a:	47b8      	blx	r7
 800626c:	3001      	adds	r0, #1
 800626e:	f43f ae74 	beq.w	8005f5a <_printf_float+0xc2>
 8006272:	ee18 3a10 	vmov	r3, s16
 8006276:	4652      	mov	r2, sl
 8006278:	4631      	mov	r1, r6
 800627a:	4628      	mov	r0, r5
 800627c:	47b8      	blx	r7
 800627e:	3001      	adds	r0, #1
 8006280:	f43f ae6b 	beq.w	8005f5a <_printf_float+0xc2>
 8006284:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006288:	2200      	movs	r2, #0
 800628a:	2300      	movs	r3, #0
 800628c:	f7fa fc2c 	bl	8000ae8 <__aeabi_dcmpeq>
 8006290:	b9d8      	cbnz	r0, 80062ca <_printf_float+0x432>
 8006292:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006294:	f108 0201 	add.w	r2, r8, #1
 8006298:	3b01      	subs	r3, #1
 800629a:	4631      	mov	r1, r6
 800629c:	4628      	mov	r0, r5
 800629e:	47b8      	blx	r7
 80062a0:	3001      	adds	r0, #1
 80062a2:	d10e      	bne.n	80062c2 <_printf_float+0x42a>
 80062a4:	e659      	b.n	8005f5a <_printf_float+0xc2>
 80062a6:	2301      	movs	r3, #1
 80062a8:	4652      	mov	r2, sl
 80062aa:	4631      	mov	r1, r6
 80062ac:	4628      	mov	r0, r5
 80062ae:	47b8      	blx	r7
 80062b0:	3001      	adds	r0, #1
 80062b2:	f43f ae52 	beq.w	8005f5a <_printf_float+0xc2>
 80062b6:	f108 0801 	add.w	r8, r8, #1
 80062ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062bc:	3b01      	subs	r3, #1
 80062be:	4543      	cmp	r3, r8
 80062c0:	dcf1      	bgt.n	80062a6 <_printf_float+0x40e>
 80062c2:	464b      	mov	r3, r9
 80062c4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80062c8:	e6dc      	b.n	8006084 <_printf_float+0x1ec>
 80062ca:	f04f 0800 	mov.w	r8, #0
 80062ce:	f104 0a1a 	add.w	sl, r4, #26
 80062d2:	e7f2      	b.n	80062ba <_printf_float+0x422>
 80062d4:	2301      	movs	r3, #1
 80062d6:	4642      	mov	r2, r8
 80062d8:	e7df      	b.n	800629a <_printf_float+0x402>
 80062da:	2301      	movs	r3, #1
 80062dc:	464a      	mov	r2, r9
 80062de:	4631      	mov	r1, r6
 80062e0:	4628      	mov	r0, r5
 80062e2:	47b8      	blx	r7
 80062e4:	3001      	adds	r0, #1
 80062e6:	f43f ae38 	beq.w	8005f5a <_printf_float+0xc2>
 80062ea:	f108 0801 	add.w	r8, r8, #1
 80062ee:	68e3      	ldr	r3, [r4, #12]
 80062f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80062f2:	1a5b      	subs	r3, r3, r1
 80062f4:	4543      	cmp	r3, r8
 80062f6:	dcf0      	bgt.n	80062da <_printf_float+0x442>
 80062f8:	e6fa      	b.n	80060f0 <_printf_float+0x258>
 80062fa:	f04f 0800 	mov.w	r8, #0
 80062fe:	f104 0919 	add.w	r9, r4, #25
 8006302:	e7f4      	b.n	80062ee <_printf_float+0x456>

08006304 <_printf_common>:
 8006304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006308:	4616      	mov	r6, r2
 800630a:	4699      	mov	r9, r3
 800630c:	688a      	ldr	r2, [r1, #8]
 800630e:	690b      	ldr	r3, [r1, #16]
 8006310:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006314:	4293      	cmp	r3, r2
 8006316:	bfb8      	it	lt
 8006318:	4613      	movlt	r3, r2
 800631a:	6033      	str	r3, [r6, #0]
 800631c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006320:	4607      	mov	r7, r0
 8006322:	460c      	mov	r4, r1
 8006324:	b10a      	cbz	r2, 800632a <_printf_common+0x26>
 8006326:	3301      	adds	r3, #1
 8006328:	6033      	str	r3, [r6, #0]
 800632a:	6823      	ldr	r3, [r4, #0]
 800632c:	0699      	lsls	r1, r3, #26
 800632e:	bf42      	ittt	mi
 8006330:	6833      	ldrmi	r3, [r6, #0]
 8006332:	3302      	addmi	r3, #2
 8006334:	6033      	strmi	r3, [r6, #0]
 8006336:	6825      	ldr	r5, [r4, #0]
 8006338:	f015 0506 	ands.w	r5, r5, #6
 800633c:	d106      	bne.n	800634c <_printf_common+0x48>
 800633e:	f104 0a19 	add.w	sl, r4, #25
 8006342:	68e3      	ldr	r3, [r4, #12]
 8006344:	6832      	ldr	r2, [r6, #0]
 8006346:	1a9b      	subs	r3, r3, r2
 8006348:	42ab      	cmp	r3, r5
 800634a:	dc26      	bgt.n	800639a <_printf_common+0x96>
 800634c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006350:	1e13      	subs	r3, r2, #0
 8006352:	6822      	ldr	r2, [r4, #0]
 8006354:	bf18      	it	ne
 8006356:	2301      	movne	r3, #1
 8006358:	0692      	lsls	r2, r2, #26
 800635a:	d42b      	bmi.n	80063b4 <_printf_common+0xb0>
 800635c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006360:	4649      	mov	r1, r9
 8006362:	4638      	mov	r0, r7
 8006364:	47c0      	blx	r8
 8006366:	3001      	adds	r0, #1
 8006368:	d01e      	beq.n	80063a8 <_printf_common+0xa4>
 800636a:	6823      	ldr	r3, [r4, #0]
 800636c:	68e5      	ldr	r5, [r4, #12]
 800636e:	6832      	ldr	r2, [r6, #0]
 8006370:	f003 0306 	and.w	r3, r3, #6
 8006374:	2b04      	cmp	r3, #4
 8006376:	bf08      	it	eq
 8006378:	1aad      	subeq	r5, r5, r2
 800637a:	68a3      	ldr	r3, [r4, #8]
 800637c:	6922      	ldr	r2, [r4, #16]
 800637e:	bf0c      	ite	eq
 8006380:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006384:	2500      	movne	r5, #0
 8006386:	4293      	cmp	r3, r2
 8006388:	bfc4      	itt	gt
 800638a:	1a9b      	subgt	r3, r3, r2
 800638c:	18ed      	addgt	r5, r5, r3
 800638e:	2600      	movs	r6, #0
 8006390:	341a      	adds	r4, #26
 8006392:	42b5      	cmp	r5, r6
 8006394:	d11a      	bne.n	80063cc <_printf_common+0xc8>
 8006396:	2000      	movs	r0, #0
 8006398:	e008      	b.n	80063ac <_printf_common+0xa8>
 800639a:	2301      	movs	r3, #1
 800639c:	4652      	mov	r2, sl
 800639e:	4649      	mov	r1, r9
 80063a0:	4638      	mov	r0, r7
 80063a2:	47c0      	blx	r8
 80063a4:	3001      	adds	r0, #1
 80063a6:	d103      	bne.n	80063b0 <_printf_common+0xac>
 80063a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80063ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063b0:	3501      	adds	r5, #1
 80063b2:	e7c6      	b.n	8006342 <_printf_common+0x3e>
 80063b4:	18e1      	adds	r1, r4, r3
 80063b6:	1c5a      	adds	r2, r3, #1
 80063b8:	2030      	movs	r0, #48	; 0x30
 80063ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80063be:	4422      	add	r2, r4
 80063c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80063c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80063c8:	3302      	adds	r3, #2
 80063ca:	e7c7      	b.n	800635c <_printf_common+0x58>
 80063cc:	2301      	movs	r3, #1
 80063ce:	4622      	mov	r2, r4
 80063d0:	4649      	mov	r1, r9
 80063d2:	4638      	mov	r0, r7
 80063d4:	47c0      	blx	r8
 80063d6:	3001      	adds	r0, #1
 80063d8:	d0e6      	beq.n	80063a8 <_printf_common+0xa4>
 80063da:	3601      	adds	r6, #1
 80063dc:	e7d9      	b.n	8006392 <_printf_common+0x8e>
	...

080063e0 <_printf_i>:
 80063e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80063e4:	7e0f      	ldrb	r7, [r1, #24]
 80063e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80063e8:	2f78      	cmp	r7, #120	; 0x78
 80063ea:	4691      	mov	r9, r2
 80063ec:	4680      	mov	r8, r0
 80063ee:	460c      	mov	r4, r1
 80063f0:	469a      	mov	sl, r3
 80063f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80063f6:	d807      	bhi.n	8006408 <_printf_i+0x28>
 80063f8:	2f62      	cmp	r7, #98	; 0x62
 80063fa:	d80a      	bhi.n	8006412 <_printf_i+0x32>
 80063fc:	2f00      	cmp	r7, #0
 80063fe:	f000 80d8 	beq.w	80065b2 <_printf_i+0x1d2>
 8006402:	2f58      	cmp	r7, #88	; 0x58
 8006404:	f000 80a3 	beq.w	800654e <_printf_i+0x16e>
 8006408:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800640c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006410:	e03a      	b.n	8006488 <_printf_i+0xa8>
 8006412:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006416:	2b15      	cmp	r3, #21
 8006418:	d8f6      	bhi.n	8006408 <_printf_i+0x28>
 800641a:	a101      	add	r1, pc, #4	; (adr r1, 8006420 <_printf_i+0x40>)
 800641c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006420:	08006479 	.word	0x08006479
 8006424:	0800648d 	.word	0x0800648d
 8006428:	08006409 	.word	0x08006409
 800642c:	08006409 	.word	0x08006409
 8006430:	08006409 	.word	0x08006409
 8006434:	08006409 	.word	0x08006409
 8006438:	0800648d 	.word	0x0800648d
 800643c:	08006409 	.word	0x08006409
 8006440:	08006409 	.word	0x08006409
 8006444:	08006409 	.word	0x08006409
 8006448:	08006409 	.word	0x08006409
 800644c:	08006599 	.word	0x08006599
 8006450:	080064bd 	.word	0x080064bd
 8006454:	0800657b 	.word	0x0800657b
 8006458:	08006409 	.word	0x08006409
 800645c:	08006409 	.word	0x08006409
 8006460:	080065bb 	.word	0x080065bb
 8006464:	08006409 	.word	0x08006409
 8006468:	080064bd 	.word	0x080064bd
 800646c:	08006409 	.word	0x08006409
 8006470:	08006409 	.word	0x08006409
 8006474:	08006583 	.word	0x08006583
 8006478:	682b      	ldr	r3, [r5, #0]
 800647a:	1d1a      	adds	r2, r3, #4
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	602a      	str	r2, [r5, #0]
 8006480:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006484:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006488:	2301      	movs	r3, #1
 800648a:	e0a3      	b.n	80065d4 <_printf_i+0x1f4>
 800648c:	6820      	ldr	r0, [r4, #0]
 800648e:	6829      	ldr	r1, [r5, #0]
 8006490:	0606      	lsls	r6, r0, #24
 8006492:	f101 0304 	add.w	r3, r1, #4
 8006496:	d50a      	bpl.n	80064ae <_printf_i+0xce>
 8006498:	680e      	ldr	r6, [r1, #0]
 800649a:	602b      	str	r3, [r5, #0]
 800649c:	2e00      	cmp	r6, #0
 800649e:	da03      	bge.n	80064a8 <_printf_i+0xc8>
 80064a0:	232d      	movs	r3, #45	; 0x2d
 80064a2:	4276      	negs	r6, r6
 80064a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064a8:	485e      	ldr	r0, [pc, #376]	; (8006624 <_printf_i+0x244>)
 80064aa:	230a      	movs	r3, #10
 80064ac:	e019      	b.n	80064e2 <_printf_i+0x102>
 80064ae:	680e      	ldr	r6, [r1, #0]
 80064b0:	602b      	str	r3, [r5, #0]
 80064b2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80064b6:	bf18      	it	ne
 80064b8:	b236      	sxthne	r6, r6
 80064ba:	e7ef      	b.n	800649c <_printf_i+0xbc>
 80064bc:	682b      	ldr	r3, [r5, #0]
 80064be:	6820      	ldr	r0, [r4, #0]
 80064c0:	1d19      	adds	r1, r3, #4
 80064c2:	6029      	str	r1, [r5, #0]
 80064c4:	0601      	lsls	r1, r0, #24
 80064c6:	d501      	bpl.n	80064cc <_printf_i+0xec>
 80064c8:	681e      	ldr	r6, [r3, #0]
 80064ca:	e002      	b.n	80064d2 <_printf_i+0xf2>
 80064cc:	0646      	lsls	r6, r0, #25
 80064ce:	d5fb      	bpl.n	80064c8 <_printf_i+0xe8>
 80064d0:	881e      	ldrh	r6, [r3, #0]
 80064d2:	4854      	ldr	r0, [pc, #336]	; (8006624 <_printf_i+0x244>)
 80064d4:	2f6f      	cmp	r7, #111	; 0x6f
 80064d6:	bf0c      	ite	eq
 80064d8:	2308      	moveq	r3, #8
 80064da:	230a      	movne	r3, #10
 80064dc:	2100      	movs	r1, #0
 80064de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80064e2:	6865      	ldr	r5, [r4, #4]
 80064e4:	60a5      	str	r5, [r4, #8]
 80064e6:	2d00      	cmp	r5, #0
 80064e8:	bfa2      	ittt	ge
 80064ea:	6821      	ldrge	r1, [r4, #0]
 80064ec:	f021 0104 	bicge.w	r1, r1, #4
 80064f0:	6021      	strge	r1, [r4, #0]
 80064f2:	b90e      	cbnz	r6, 80064f8 <_printf_i+0x118>
 80064f4:	2d00      	cmp	r5, #0
 80064f6:	d04d      	beq.n	8006594 <_printf_i+0x1b4>
 80064f8:	4615      	mov	r5, r2
 80064fa:	fbb6 f1f3 	udiv	r1, r6, r3
 80064fe:	fb03 6711 	mls	r7, r3, r1, r6
 8006502:	5dc7      	ldrb	r7, [r0, r7]
 8006504:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006508:	4637      	mov	r7, r6
 800650a:	42bb      	cmp	r3, r7
 800650c:	460e      	mov	r6, r1
 800650e:	d9f4      	bls.n	80064fa <_printf_i+0x11a>
 8006510:	2b08      	cmp	r3, #8
 8006512:	d10b      	bne.n	800652c <_printf_i+0x14c>
 8006514:	6823      	ldr	r3, [r4, #0]
 8006516:	07de      	lsls	r6, r3, #31
 8006518:	d508      	bpl.n	800652c <_printf_i+0x14c>
 800651a:	6923      	ldr	r3, [r4, #16]
 800651c:	6861      	ldr	r1, [r4, #4]
 800651e:	4299      	cmp	r1, r3
 8006520:	bfde      	ittt	le
 8006522:	2330      	movle	r3, #48	; 0x30
 8006524:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006528:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800652c:	1b52      	subs	r2, r2, r5
 800652e:	6122      	str	r2, [r4, #16]
 8006530:	f8cd a000 	str.w	sl, [sp]
 8006534:	464b      	mov	r3, r9
 8006536:	aa03      	add	r2, sp, #12
 8006538:	4621      	mov	r1, r4
 800653a:	4640      	mov	r0, r8
 800653c:	f7ff fee2 	bl	8006304 <_printf_common>
 8006540:	3001      	adds	r0, #1
 8006542:	d14c      	bne.n	80065de <_printf_i+0x1fe>
 8006544:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006548:	b004      	add	sp, #16
 800654a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800654e:	4835      	ldr	r0, [pc, #212]	; (8006624 <_printf_i+0x244>)
 8006550:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006554:	6829      	ldr	r1, [r5, #0]
 8006556:	6823      	ldr	r3, [r4, #0]
 8006558:	f851 6b04 	ldr.w	r6, [r1], #4
 800655c:	6029      	str	r1, [r5, #0]
 800655e:	061d      	lsls	r5, r3, #24
 8006560:	d514      	bpl.n	800658c <_printf_i+0x1ac>
 8006562:	07df      	lsls	r7, r3, #31
 8006564:	bf44      	itt	mi
 8006566:	f043 0320 	orrmi.w	r3, r3, #32
 800656a:	6023      	strmi	r3, [r4, #0]
 800656c:	b91e      	cbnz	r6, 8006576 <_printf_i+0x196>
 800656e:	6823      	ldr	r3, [r4, #0]
 8006570:	f023 0320 	bic.w	r3, r3, #32
 8006574:	6023      	str	r3, [r4, #0]
 8006576:	2310      	movs	r3, #16
 8006578:	e7b0      	b.n	80064dc <_printf_i+0xfc>
 800657a:	6823      	ldr	r3, [r4, #0]
 800657c:	f043 0320 	orr.w	r3, r3, #32
 8006580:	6023      	str	r3, [r4, #0]
 8006582:	2378      	movs	r3, #120	; 0x78
 8006584:	4828      	ldr	r0, [pc, #160]	; (8006628 <_printf_i+0x248>)
 8006586:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800658a:	e7e3      	b.n	8006554 <_printf_i+0x174>
 800658c:	0659      	lsls	r1, r3, #25
 800658e:	bf48      	it	mi
 8006590:	b2b6      	uxthmi	r6, r6
 8006592:	e7e6      	b.n	8006562 <_printf_i+0x182>
 8006594:	4615      	mov	r5, r2
 8006596:	e7bb      	b.n	8006510 <_printf_i+0x130>
 8006598:	682b      	ldr	r3, [r5, #0]
 800659a:	6826      	ldr	r6, [r4, #0]
 800659c:	6961      	ldr	r1, [r4, #20]
 800659e:	1d18      	adds	r0, r3, #4
 80065a0:	6028      	str	r0, [r5, #0]
 80065a2:	0635      	lsls	r5, r6, #24
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	d501      	bpl.n	80065ac <_printf_i+0x1cc>
 80065a8:	6019      	str	r1, [r3, #0]
 80065aa:	e002      	b.n	80065b2 <_printf_i+0x1d2>
 80065ac:	0670      	lsls	r0, r6, #25
 80065ae:	d5fb      	bpl.n	80065a8 <_printf_i+0x1c8>
 80065b0:	8019      	strh	r1, [r3, #0]
 80065b2:	2300      	movs	r3, #0
 80065b4:	6123      	str	r3, [r4, #16]
 80065b6:	4615      	mov	r5, r2
 80065b8:	e7ba      	b.n	8006530 <_printf_i+0x150>
 80065ba:	682b      	ldr	r3, [r5, #0]
 80065bc:	1d1a      	adds	r2, r3, #4
 80065be:	602a      	str	r2, [r5, #0]
 80065c0:	681d      	ldr	r5, [r3, #0]
 80065c2:	6862      	ldr	r2, [r4, #4]
 80065c4:	2100      	movs	r1, #0
 80065c6:	4628      	mov	r0, r5
 80065c8:	f7f9 fe1a 	bl	8000200 <memchr>
 80065cc:	b108      	cbz	r0, 80065d2 <_printf_i+0x1f2>
 80065ce:	1b40      	subs	r0, r0, r5
 80065d0:	6060      	str	r0, [r4, #4]
 80065d2:	6863      	ldr	r3, [r4, #4]
 80065d4:	6123      	str	r3, [r4, #16]
 80065d6:	2300      	movs	r3, #0
 80065d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80065dc:	e7a8      	b.n	8006530 <_printf_i+0x150>
 80065de:	6923      	ldr	r3, [r4, #16]
 80065e0:	462a      	mov	r2, r5
 80065e2:	4649      	mov	r1, r9
 80065e4:	4640      	mov	r0, r8
 80065e6:	47d0      	blx	sl
 80065e8:	3001      	adds	r0, #1
 80065ea:	d0ab      	beq.n	8006544 <_printf_i+0x164>
 80065ec:	6823      	ldr	r3, [r4, #0]
 80065ee:	079b      	lsls	r3, r3, #30
 80065f0:	d413      	bmi.n	800661a <_printf_i+0x23a>
 80065f2:	68e0      	ldr	r0, [r4, #12]
 80065f4:	9b03      	ldr	r3, [sp, #12]
 80065f6:	4298      	cmp	r0, r3
 80065f8:	bfb8      	it	lt
 80065fa:	4618      	movlt	r0, r3
 80065fc:	e7a4      	b.n	8006548 <_printf_i+0x168>
 80065fe:	2301      	movs	r3, #1
 8006600:	4632      	mov	r2, r6
 8006602:	4649      	mov	r1, r9
 8006604:	4640      	mov	r0, r8
 8006606:	47d0      	blx	sl
 8006608:	3001      	adds	r0, #1
 800660a:	d09b      	beq.n	8006544 <_printf_i+0x164>
 800660c:	3501      	adds	r5, #1
 800660e:	68e3      	ldr	r3, [r4, #12]
 8006610:	9903      	ldr	r1, [sp, #12]
 8006612:	1a5b      	subs	r3, r3, r1
 8006614:	42ab      	cmp	r3, r5
 8006616:	dcf2      	bgt.n	80065fe <_printf_i+0x21e>
 8006618:	e7eb      	b.n	80065f2 <_printf_i+0x212>
 800661a:	2500      	movs	r5, #0
 800661c:	f104 0619 	add.w	r6, r4, #25
 8006620:	e7f5      	b.n	800660e <_printf_i+0x22e>
 8006622:	bf00      	nop
 8006624:	0800a7c6 	.word	0x0800a7c6
 8006628:	0800a7d7 	.word	0x0800a7d7

0800662c <_scanf_float>:
 800662c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006630:	b087      	sub	sp, #28
 8006632:	4617      	mov	r7, r2
 8006634:	9303      	str	r3, [sp, #12]
 8006636:	688b      	ldr	r3, [r1, #8]
 8006638:	1e5a      	subs	r2, r3, #1
 800663a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800663e:	bf83      	ittte	hi
 8006640:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006644:	195b      	addhi	r3, r3, r5
 8006646:	9302      	strhi	r3, [sp, #8]
 8006648:	2300      	movls	r3, #0
 800664a:	bf86      	itte	hi
 800664c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006650:	608b      	strhi	r3, [r1, #8]
 8006652:	9302      	strls	r3, [sp, #8]
 8006654:	680b      	ldr	r3, [r1, #0]
 8006656:	468b      	mov	fp, r1
 8006658:	2500      	movs	r5, #0
 800665a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800665e:	f84b 3b1c 	str.w	r3, [fp], #28
 8006662:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006666:	4680      	mov	r8, r0
 8006668:	460c      	mov	r4, r1
 800666a:	465e      	mov	r6, fp
 800666c:	46aa      	mov	sl, r5
 800666e:	46a9      	mov	r9, r5
 8006670:	9501      	str	r5, [sp, #4]
 8006672:	68a2      	ldr	r2, [r4, #8]
 8006674:	b152      	cbz	r2, 800668c <_scanf_float+0x60>
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	781b      	ldrb	r3, [r3, #0]
 800667a:	2b4e      	cmp	r3, #78	; 0x4e
 800667c:	d864      	bhi.n	8006748 <_scanf_float+0x11c>
 800667e:	2b40      	cmp	r3, #64	; 0x40
 8006680:	d83c      	bhi.n	80066fc <_scanf_float+0xd0>
 8006682:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006686:	b2c8      	uxtb	r0, r1
 8006688:	280e      	cmp	r0, #14
 800668a:	d93a      	bls.n	8006702 <_scanf_float+0xd6>
 800668c:	f1b9 0f00 	cmp.w	r9, #0
 8006690:	d003      	beq.n	800669a <_scanf_float+0x6e>
 8006692:	6823      	ldr	r3, [r4, #0]
 8006694:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006698:	6023      	str	r3, [r4, #0]
 800669a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800669e:	f1ba 0f01 	cmp.w	sl, #1
 80066a2:	f200 8113 	bhi.w	80068cc <_scanf_float+0x2a0>
 80066a6:	455e      	cmp	r6, fp
 80066a8:	f200 8105 	bhi.w	80068b6 <_scanf_float+0x28a>
 80066ac:	2501      	movs	r5, #1
 80066ae:	4628      	mov	r0, r5
 80066b0:	b007      	add	sp, #28
 80066b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066b6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80066ba:	2a0d      	cmp	r2, #13
 80066bc:	d8e6      	bhi.n	800668c <_scanf_float+0x60>
 80066be:	a101      	add	r1, pc, #4	; (adr r1, 80066c4 <_scanf_float+0x98>)
 80066c0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80066c4:	08006803 	.word	0x08006803
 80066c8:	0800668d 	.word	0x0800668d
 80066cc:	0800668d 	.word	0x0800668d
 80066d0:	0800668d 	.word	0x0800668d
 80066d4:	08006863 	.word	0x08006863
 80066d8:	0800683b 	.word	0x0800683b
 80066dc:	0800668d 	.word	0x0800668d
 80066e0:	0800668d 	.word	0x0800668d
 80066e4:	08006811 	.word	0x08006811
 80066e8:	0800668d 	.word	0x0800668d
 80066ec:	0800668d 	.word	0x0800668d
 80066f0:	0800668d 	.word	0x0800668d
 80066f4:	0800668d 	.word	0x0800668d
 80066f8:	080067c9 	.word	0x080067c9
 80066fc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006700:	e7db      	b.n	80066ba <_scanf_float+0x8e>
 8006702:	290e      	cmp	r1, #14
 8006704:	d8c2      	bhi.n	800668c <_scanf_float+0x60>
 8006706:	a001      	add	r0, pc, #4	; (adr r0, 800670c <_scanf_float+0xe0>)
 8006708:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800670c:	080067bb 	.word	0x080067bb
 8006710:	0800668d 	.word	0x0800668d
 8006714:	080067bb 	.word	0x080067bb
 8006718:	0800684f 	.word	0x0800684f
 800671c:	0800668d 	.word	0x0800668d
 8006720:	08006769 	.word	0x08006769
 8006724:	080067a5 	.word	0x080067a5
 8006728:	080067a5 	.word	0x080067a5
 800672c:	080067a5 	.word	0x080067a5
 8006730:	080067a5 	.word	0x080067a5
 8006734:	080067a5 	.word	0x080067a5
 8006738:	080067a5 	.word	0x080067a5
 800673c:	080067a5 	.word	0x080067a5
 8006740:	080067a5 	.word	0x080067a5
 8006744:	080067a5 	.word	0x080067a5
 8006748:	2b6e      	cmp	r3, #110	; 0x6e
 800674a:	d809      	bhi.n	8006760 <_scanf_float+0x134>
 800674c:	2b60      	cmp	r3, #96	; 0x60
 800674e:	d8b2      	bhi.n	80066b6 <_scanf_float+0x8a>
 8006750:	2b54      	cmp	r3, #84	; 0x54
 8006752:	d077      	beq.n	8006844 <_scanf_float+0x218>
 8006754:	2b59      	cmp	r3, #89	; 0x59
 8006756:	d199      	bne.n	800668c <_scanf_float+0x60>
 8006758:	2d07      	cmp	r5, #7
 800675a:	d197      	bne.n	800668c <_scanf_float+0x60>
 800675c:	2508      	movs	r5, #8
 800675e:	e029      	b.n	80067b4 <_scanf_float+0x188>
 8006760:	2b74      	cmp	r3, #116	; 0x74
 8006762:	d06f      	beq.n	8006844 <_scanf_float+0x218>
 8006764:	2b79      	cmp	r3, #121	; 0x79
 8006766:	e7f6      	b.n	8006756 <_scanf_float+0x12a>
 8006768:	6821      	ldr	r1, [r4, #0]
 800676a:	05c8      	lsls	r0, r1, #23
 800676c:	d51a      	bpl.n	80067a4 <_scanf_float+0x178>
 800676e:	9b02      	ldr	r3, [sp, #8]
 8006770:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006774:	6021      	str	r1, [r4, #0]
 8006776:	f109 0901 	add.w	r9, r9, #1
 800677a:	b11b      	cbz	r3, 8006784 <_scanf_float+0x158>
 800677c:	3b01      	subs	r3, #1
 800677e:	3201      	adds	r2, #1
 8006780:	9302      	str	r3, [sp, #8]
 8006782:	60a2      	str	r2, [r4, #8]
 8006784:	68a3      	ldr	r3, [r4, #8]
 8006786:	3b01      	subs	r3, #1
 8006788:	60a3      	str	r3, [r4, #8]
 800678a:	6923      	ldr	r3, [r4, #16]
 800678c:	3301      	adds	r3, #1
 800678e:	6123      	str	r3, [r4, #16]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	3b01      	subs	r3, #1
 8006794:	2b00      	cmp	r3, #0
 8006796:	607b      	str	r3, [r7, #4]
 8006798:	f340 8084 	ble.w	80068a4 <_scanf_float+0x278>
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	3301      	adds	r3, #1
 80067a0:	603b      	str	r3, [r7, #0]
 80067a2:	e766      	b.n	8006672 <_scanf_float+0x46>
 80067a4:	eb1a 0f05 	cmn.w	sl, r5
 80067a8:	f47f af70 	bne.w	800668c <_scanf_float+0x60>
 80067ac:	6822      	ldr	r2, [r4, #0]
 80067ae:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80067b2:	6022      	str	r2, [r4, #0]
 80067b4:	f806 3b01 	strb.w	r3, [r6], #1
 80067b8:	e7e4      	b.n	8006784 <_scanf_float+0x158>
 80067ba:	6822      	ldr	r2, [r4, #0]
 80067bc:	0610      	lsls	r0, r2, #24
 80067be:	f57f af65 	bpl.w	800668c <_scanf_float+0x60>
 80067c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80067c6:	e7f4      	b.n	80067b2 <_scanf_float+0x186>
 80067c8:	f1ba 0f00 	cmp.w	sl, #0
 80067cc:	d10e      	bne.n	80067ec <_scanf_float+0x1c0>
 80067ce:	f1b9 0f00 	cmp.w	r9, #0
 80067d2:	d10e      	bne.n	80067f2 <_scanf_float+0x1c6>
 80067d4:	6822      	ldr	r2, [r4, #0]
 80067d6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80067da:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80067de:	d108      	bne.n	80067f2 <_scanf_float+0x1c6>
 80067e0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80067e4:	6022      	str	r2, [r4, #0]
 80067e6:	f04f 0a01 	mov.w	sl, #1
 80067ea:	e7e3      	b.n	80067b4 <_scanf_float+0x188>
 80067ec:	f1ba 0f02 	cmp.w	sl, #2
 80067f0:	d055      	beq.n	800689e <_scanf_float+0x272>
 80067f2:	2d01      	cmp	r5, #1
 80067f4:	d002      	beq.n	80067fc <_scanf_float+0x1d0>
 80067f6:	2d04      	cmp	r5, #4
 80067f8:	f47f af48 	bne.w	800668c <_scanf_float+0x60>
 80067fc:	3501      	adds	r5, #1
 80067fe:	b2ed      	uxtb	r5, r5
 8006800:	e7d8      	b.n	80067b4 <_scanf_float+0x188>
 8006802:	f1ba 0f01 	cmp.w	sl, #1
 8006806:	f47f af41 	bne.w	800668c <_scanf_float+0x60>
 800680a:	f04f 0a02 	mov.w	sl, #2
 800680e:	e7d1      	b.n	80067b4 <_scanf_float+0x188>
 8006810:	b97d      	cbnz	r5, 8006832 <_scanf_float+0x206>
 8006812:	f1b9 0f00 	cmp.w	r9, #0
 8006816:	f47f af3c 	bne.w	8006692 <_scanf_float+0x66>
 800681a:	6822      	ldr	r2, [r4, #0]
 800681c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006820:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006824:	f47f af39 	bne.w	800669a <_scanf_float+0x6e>
 8006828:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800682c:	6022      	str	r2, [r4, #0]
 800682e:	2501      	movs	r5, #1
 8006830:	e7c0      	b.n	80067b4 <_scanf_float+0x188>
 8006832:	2d03      	cmp	r5, #3
 8006834:	d0e2      	beq.n	80067fc <_scanf_float+0x1d0>
 8006836:	2d05      	cmp	r5, #5
 8006838:	e7de      	b.n	80067f8 <_scanf_float+0x1cc>
 800683a:	2d02      	cmp	r5, #2
 800683c:	f47f af26 	bne.w	800668c <_scanf_float+0x60>
 8006840:	2503      	movs	r5, #3
 8006842:	e7b7      	b.n	80067b4 <_scanf_float+0x188>
 8006844:	2d06      	cmp	r5, #6
 8006846:	f47f af21 	bne.w	800668c <_scanf_float+0x60>
 800684a:	2507      	movs	r5, #7
 800684c:	e7b2      	b.n	80067b4 <_scanf_float+0x188>
 800684e:	6822      	ldr	r2, [r4, #0]
 8006850:	0591      	lsls	r1, r2, #22
 8006852:	f57f af1b 	bpl.w	800668c <_scanf_float+0x60>
 8006856:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800685a:	6022      	str	r2, [r4, #0]
 800685c:	f8cd 9004 	str.w	r9, [sp, #4]
 8006860:	e7a8      	b.n	80067b4 <_scanf_float+0x188>
 8006862:	6822      	ldr	r2, [r4, #0]
 8006864:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006868:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800686c:	d006      	beq.n	800687c <_scanf_float+0x250>
 800686e:	0550      	lsls	r0, r2, #21
 8006870:	f57f af0c 	bpl.w	800668c <_scanf_float+0x60>
 8006874:	f1b9 0f00 	cmp.w	r9, #0
 8006878:	f43f af0f 	beq.w	800669a <_scanf_float+0x6e>
 800687c:	0591      	lsls	r1, r2, #22
 800687e:	bf58      	it	pl
 8006880:	9901      	ldrpl	r1, [sp, #4]
 8006882:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006886:	bf58      	it	pl
 8006888:	eba9 0101 	subpl.w	r1, r9, r1
 800688c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006890:	bf58      	it	pl
 8006892:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006896:	6022      	str	r2, [r4, #0]
 8006898:	f04f 0900 	mov.w	r9, #0
 800689c:	e78a      	b.n	80067b4 <_scanf_float+0x188>
 800689e:	f04f 0a03 	mov.w	sl, #3
 80068a2:	e787      	b.n	80067b4 <_scanf_float+0x188>
 80068a4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80068a8:	4639      	mov	r1, r7
 80068aa:	4640      	mov	r0, r8
 80068ac:	4798      	blx	r3
 80068ae:	2800      	cmp	r0, #0
 80068b0:	f43f aedf 	beq.w	8006672 <_scanf_float+0x46>
 80068b4:	e6ea      	b.n	800668c <_scanf_float+0x60>
 80068b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80068ba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80068be:	463a      	mov	r2, r7
 80068c0:	4640      	mov	r0, r8
 80068c2:	4798      	blx	r3
 80068c4:	6923      	ldr	r3, [r4, #16]
 80068c6:	3b01      	subs	r3, #1
 80068c8:	6123      	str	r3, [r4, #16]
 80068ca:	e6ec      	b.n	80066a6 <_scanf_float+0x7a>
 80068cc:	1e6b      	subs	r3, r5, #1
 80068ce:	2b06      	cmp	r3, #6
 80068d0:	d825      	bhi.n	800691e <_scanf_float+0x2f2>
 80068d2:	2d02      	cmp	r5, #2
 80068d4:	d836      	bhi.n	8006944 <_scanf_float+0x318>
 80068d6:	455e      	cmp	r6, fp
 80068d8:	f67f aee8 	bls.w	80066ac <_scanf_float+0x80>
 80068dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80068e0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80068e4:	463a      	mov	r2, r7
 80068e6:	4640      	mov	r0, r8
 80068e8:	4798      	blx	r3
 80068ea:	6923      	ldr	r3, [r4, #16]
 80068ec:	3b01      	subs	r3, #1
 80068ee:	6123      	str	r3, [r4, #16]
 80068f0:	e7f1      	b.n	80068d6 <_scanf_float+0x2aa>
 80068f2:	9802      	ldr	r0, [sp, #8]
 80068f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80068f8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80068fc:	9002      	str	r0, [sp, #8]
 80068fe:	463a      	mov	r2, r7
 8006900:	4640      	mov	r0, r8
 8006902:	4798      	blx	r3
 8006904:	6923      	ldr	r3, [r4, #16]
 8006906:	3b01      	subs	r3, #1
 8006908:	6123      	str	r3, [r4, #16]
 800690a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800690e:	fa5f fa8a 	uxtb.w	sl, sl
 8006912:	f1ba 0f02 	cmp.w	sl, #2
 8006916:	d1ec      	bne.n	80068f2 <_scanf_float+0x2c6>
 8006918:	3d03      	subs	r5, #3
 800691a:	b2ed      	uxtb	r5, r5
 800691c:	1b76      	subs	r6, r6, r5
 800691e:	6823      	ldr	r3, [r4, #0]
 8006920:	05da      	lsls	r2, r3, #23
 8006922:	d52f      	bpl.n	8006984 <_scanf_float+0x358>
 8006924:	055b      	lsls	r3, r3, #21
 8006926:	d510      	bpl.n	800694a <_scanf_float+0x31e>
 8006928:	455e      	cmp	r6, fp
 800692a:	f67f aebf 	bls.w	80066ac <_scanf_float+0x80>
 800692e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006932:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006936:	463a      	mov	r2, r7
 8006938:	4640      	mov	r0, r8
 800693a:	4798      	blx	r3
 800693c:	6923      	ldr	r3, [r4, #16]
 800693e:	3b01      	subs	r3, #1
 8006940:	6123      	str	r3, [r4, #16]
 8006942:	e7f1      	b.n	8006928 <_scanf_float+0x2fc>
 8006944:	46aa      	mov	sl, r5
 8006946:	9602      	str	r6, [sp, #8]
 8006948:	e7df      	b.n	800690a <_scanf_float+0x2de>
 800694a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800694e:	6923      	ldr	r3, [r4, #16]
 8006950:	2965      	cmp	r1, #101	; 0x65
 8006952:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8006956:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 800695a:	6123      	str	r3, [r4, #16]
 800695c:	d00c      	beq.n	8006978 <_scanf_float+0x34c>
 800695e:	2945      	cmp	r1, #69	; 0x45
 8006960:	d00a      	beq.n	8006978 <_scanf_float+0x34c>
 8006962:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006966:	463a      	mov	r2, r7
 8006968:	4640      	mov	r0, r8
 800696a:	4798      	blx	r3
 800696c:	6923      	ldr	r3, [r4, #16]
 800696e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006972:	3b01      	subs	r3, #1
 8006974:	1eb5      	subs	r5, r6, #2
 8006976:	6123      	str	r3, [r4, #16]
 8006978:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800697c:	463a      	mov	r2, r7
 800697e:	4640      	mov	r0, r8
 8006980:	4798      	blx	r3
 8006982:	462e      	mov	r6, r5
 8006984:	6825      	ldr	r5, [r4, #0]
 8006986:	f015 0510 	ands.w	r5, r5, #16
 800698a:	d159      	bne.n	8006a40 <_scanf_float+0x414>
 800698c:	7035      	strb	r5, [r6, #0]
 800698e:	6823      	ldr	r3, [r4, #0]
 8006990:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006994:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006998:	d11b      	bne.n	80069d2 <_scanf_float+0x3a6>
 800699a:	9b01      	ldr	r3, [sp, #4]
 800699c:	454b      	cmp	r3, r9
 800699e:	eba3 0209 	sub.w	r2, r3, r9
 80069a2:	d123      	bne.n	80069ec <_scanf_float+0x3c0>
 80069a4:	2200      	movs	r2, #0
 80069a6:	4659      	mov	r1, fp
 80069a8:	4640      	mov	r0, r8
 80069aa:	f000 ff0f 	bl	80077cc <_strtod_r>
 80069ae:	6822      	ldr	r2, [r4, #0]
 80069b0:	9b03      	ldr	r3, [sp, #12]
 80069b2:	f012 0f02 	tst.w	r2, #2
 80069b6:	ec57 6b10 	vmov	r6, r7, d0
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	d021      	beq.n	8006a02 <_scanf_float+0x3d6>
 80069be:	9903      	ldr	r1, [sp, #12]
 80069c0:	1d1a      	adds	r2, r3, #4
 80069c2:	600a      	str	r2, [r1, #0]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	e9c3 6700 	strd	r6, r7, [r3]
 80069ca:	68e3      	ldr	r3, [r4, #12]
 80069cc:	3301      	adds	r3, #1
 80069ce:	60e3      	str	r3, [r4, #12]
 80069d0:	e66d      	b.n	80066ae <_scanf_float+0x82>
 80069d2:	9b04      	ldr	r3, [sp, #16]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d0e5      	beq.n	80069a4 <_scanf_float+0x378>
 80069d8:	9905      	ldr	r1, [sp, #20]
 80069da:	230a      	movs	r3, #10
 80069dc:	462a      	mov	r2, r5
 80069de:	3101      	adds	r1, #1
 80069e0:	4640      	mov	r0, r8
 80069e2:	f000 ff7b 	bl	80078dc <_strtol_r>
 80069e6:	9b04      	ldr	r3, [sp, #16]
 80069e8:	9e05      	ldr	r6, [sp, #20]
 80069ea:	1ac2      	subs	r2, r0, r3
 80069ec:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80069f0:	429e      	cmp	r6, r3
 80069f2:	bf28      	it	cs
 80069f4:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80069f8:	4912      	ldr	r1, [pc, #72]	; (8006a44 <_scanf_float+0x418>)
 80069fa:	4630      	mov	r0, r6
 80069fc:	f000 f8a2 	bl	8006b44 <siprintf>
 8006a00:	e7d0      	b.n	80069a4 <_scanf_float+0x378>
 8006a02:	9903      	ldr	r1, [sp, #12]
 8006a04:	f012 0f04 	tst.w	r2, #4
 8006a08:	f103 0204 	add.w	r2, r3, #4
 8006a0c:	600a      	str	r2, [r1, #0]
 8006a0e:	d1d9      	bne.n	80069c4 <_scanf_float+0x398>
 8006a10:	f8d3 8000 	ldr.w	r8, [r3]
 8006a14:	ee10 2a10 	vmov	r2, s0
 8006a18:	ee10 0a10 	vmov	r0, s0
 8006a1c:	463b      	mov	r3, r7
 8006a1e:	4639      	mov	r1, r7
 8006a20:	f7fa f894 	bl	8000b4c <__aeabi_dcmpun>
 8006a24:	b128      	cbz	r0, 8006a32 <_scanf_float+0x406>
 8006a26:	4808      	ldr	r0, [pc, #32]	; (8006a48 <_scanf_float+0x41c>)
 8006a28:	f000 f886 	bl	8006b38 <nanf>
 8006a2c:	ed88 0a00 	vstr	s0, [r8]
 8006a30:	e7cb      	b.n	80069ca <_scanf_float+0x39e>
 8006a32:	4630      	mov	r0, r6
 8006a34:	4639      	mov	r1, r7
 8006a36:	f7fa f8e7 	bl	8000c08 <__aeabi_d2f>
 8006a3a:	f8c8 0000 	str.w	r0, [r8]
 8006a3e:	e7c4      	b.n	80069ca <_scanf_float+0x39e>
 8006a40:	2500      	movs	r5, #0
 8006a42:	e634      	b.n	80066ae <_scanf_float+0x82>
 8006a44:	0800a7e8 	.word	0x0800a7e8
 8006a48:	0800ac58 	.word	0x0800ac58

08006a4c <_puts_r>:
 8006a4c:	b570      	push	{r4, r5, r6, lr}
 8006a4e:	460e      	mov	r6, r1
 8006a50:	4605      	mov	r5, r0
 8006a52:	b118      	cbz	r0, 8006a5c <_puts_r+0x10>
 8006a54:	6983      	ldr	r3, [r0, #24]
 8006a56:	b90b      	cbnz	r3, 8006a5c <_puts_r+0x10>
 8006a58:	f001 ff96 	bl	8008988 <__sinit>
 8006a5c:	69ab      	ldr	r3, [r5, #24]
 8006a5e:	68ac      	ldr	r4, [r5, #8]
 8006a60:	b913      	cbnz	r3, 8006a68 <_puts_r+0x1c>
 8006a62:	4628      	mov	r0, r5
 8006a64:	f001 ff90 	bl	8008988 <__sinit>
 8006a68:	4b2c      	ldr	r3, [pc, #176]	; (8006b1c <_puts_r+0xd0>)
 8006a6a:	429c      	cmp	r4, r3
 8006a6c:	d120      	bne.n	8006ab0 <_puts_r+0x64>
 8006a6e:	686c      	ldr	r4, [r5, #4]
 8006a70:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006a72:	07db      	lsls	r3, r3, #31
 8006a74:	d405      	bmi.n	8006a82 <_puts_r+0x36>
 8006a76:	89a3      	ldrh	r3, [r4, #12]
 8006a78:	0598      	lsls	r0, r3, #22
 8006a7a:	d402      	bmi.n	8006a82 <_puts_r+0x36>
 8006a7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a7e:	f002 fb94 	bl	80091aa <__retarget_lock_acquire_recursive>
 8006a82:	89a3      	ldrh	r3, [r4, #12]
 8006a84:	0719      	lsls	r1, r3, #28
 8006a86:	d51d      	bpl.n	8006ac4 <_puts_r+0x78>
 8006a88:	6923      	ldr	r3, [r4, #16]
 8006a8a:	b1db      	cbz	r3, 8006ac4 <_puts_r+0x78>
 8006a8c:	3e01      	subs	r6, #1
 8006a8e:	68a3      	ldr	r3, [r4, #8]
 8006a90:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006a94:	3b01      	subs	r3, #1
 8006a96:	60a3      	str	r3, [r4, #8]
 8006a98:	bb39      	cbnz	r1, 8006aea <_puts_r+0x9e>
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	da38      	bge.n	8006b10 <_puts_r+0xc4>
 8006a9e:	4622      	mov	r2, r4
 8006aa0:	210a      	movs	r1, #10
 8006aa2:	4628      	mov	r0, r5
 8006aa4:	f000 ff1c 	bl	80078e0 <__swbuf_r>
 8006aa8:	3001      	adds	r0, #1
 8006aaa:	d011      	beq.n	8006ad0 <_puts_r+0x84>
 8006aac:	250a      	movs	r5, #10
 8006aae:	e011      	b.n	8006ad4 <_puts_r+0x88>
 8006ab0:	4b1b      	ldr	r3, [pc, #108]	; (8006b20 <_puts_r+0xd4>)
 8006ab2:	429c      	cmp	r4, r3
 8006ab4:	d101      	bne.n	8006aba <_puts_r+0x6e>
 8006ab6:	68ac      	ldr	r4, [r5, #8]
 8006ab8:	e7da      	b.n	8006a70 <_puts_r+0x24>
 8006aba:	4b1a      	ldr	r3, [pc, #104]	; (8006b24 <_puts_r+0xd8>)
 8006abc:	429c      	cmp	r4, r3
 8006abe:	bf08      	it	eq
 8006ac0:	68ec      	ldreq	r4, [r5, #12]
 8006ac2:	e7d5      	b.n	8006a70 <_puts_r+0x24>
 8006ac4:	4621      	mov	r1, r4
 8006ac6:	4628      	mov	r0, r5
 8006ac8:	f000 ff5c 	bl	8007984 <__swsetup_r>
 8006acc:	2800      	cmp	r0, #0
 8006ace:	d0dd      	beq.n	8006a8c <_puts_r+0x40>
 8006ad0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8006ad4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006ad6:	07da      	lsls	r2, r3, #31
 8006ad8:	d405      	bmi.n	8006ae6 <_puts_r+0x9a>
 8006ada:	89a3      	ldrh	r3, [r4, #12]
 8006adc:	059b      	lsls	r3, r3, #22
 8006ade:	d402      	bmi.n	8006ae6 <_puts_r+0x9a>
 8006ae0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ae2:	f002 fb63 	bl	80091ac <__retarget_lock_release_recursive>
 8006ae6:	4628      	mov	r0, r5
 8006ae8:	bd70      	pop	{r4, r5, r6, pc}
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	da04      	bge.n	8006af8 <_puts_r+0xac>
 8006aee:	69a2      	ldr	r2, [r4, #24]
 8006af0:	429a      	cmp	r2, r3
 8006af2:	dc06      	bgt.n	8006b02 <_puts_r+0xb6>
 8006af4:	290a      	cmp	r1, #10
 8006af6:	d004      	beq.n	8006b02 <_puts_r+0xb6>
 8006af8:	6823      	ldr	r3, [r4, #0]
 8006afa:	1c5a      	adds	r2, r3, #1
 8006afc:	6022      	str	r2, [r4, #0]
 8006afe:	7019      	strb	r1, [r3, #0]
 8006b00:	e7c5      	b.n	8006a8e <_puts_r+0x42>
 8006b02:	4622      	mov	r2, r4
 8006b04:	4628      	mov	r0, r5
 8006b06:	f000 feeb 	bl	80078e0 <__swbuf_r>
 8006b0a:	3001      	adds	r0, #1
 8006b0c:	d1bf      	bne.n	8006a8e <_puts_r+0x42>
 8006b0e:	e7df      	b.n	8006ad0 <_puts_r+0x84>
 8006b10:	6823      	ldr	r3, [r4, #0]
 8006b12:	250a      	movs	r5, #10
 8006b14:	1c5a      	adds	r2, r3, #1
 8006b16:	6022      	str	r2, [r4, #0]
 8006b18:	701d      	strb	r5, [r3, #0]
 8006b1a:	e7db      	b.n	8006ad4 <_puts_r+0x88>
 8006b1c:	0800a9f4 	.word	0x0800a9f4
 8006b20:	0800aa14 	.word	0x0800aa14
 8006b24:	0800a9d4 	.word	0x0800a9d4

08006b28 <puts>:
 8006b28:	4b02      	ldr	r3, [pc, #8]	; (8006b34 <puts+0xc>)
 8006b2a:	4601      	mov	r1, r0
 8006b2c:	6818      	ldr	r0, [r3, #0]
 8006b2e:	f7ff bf8d 	b.w	8006a4c <_puts_r>
 8006b32:	bf00      	nop
 8006b34:	2000000c 	.word	0x2000000c

08006b38 <nanf>:
 8006b38:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006b40 <nanf+0x8>
 8006b3c:	4770      	bx	lr
 8006b3e:	bf00      	nop
 8006b40:	7fc00000 	.word	0x7fc00000

08006b44 <siprintf>:
 8006b44:	b40e      	push	{r1, r2, r3}
 8006b46:	b500      	push	{lr}
 8006b48:	b09c      	sub	sp, #112	; 0x70
 8006b4a:	ab1d      	add	r3, sp, #116	; 0x74
 8006b4c:	9002      	str	r0, [sp, #8]
 8006b4e:	9006      	str	r0, [sp, #24]
 8006b50:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006b54:	4809      	ldr	r0, [pc, #36]	; (8006b7c <siprintf+0x38>)
 8006b56:	9107      	str	r1, [sp, #28]
 8006b58:	9104      	str	r1, [sp, #16]
 8006b5a:	4909      	ldr	r1, [pc, #36]	; (8006b80 <siprintf+0x3c>)
 8006b5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b60:	9105      	str	r1, [sp, #20]
 8006b62:	6800      	ldr	r0, [r0, #0]
 8006b64:	9301      	str	r3, [sp, #4]
 8006b66:	a902      	add	r1, sp, #8
 8006b68:	f003 f9c2 	bl	8009ef0 <_svfiprintf_r>
 8006b6c:	9b02      	ldr	r3, [sp, #8]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	701a      	strb	r2, [r3, #0]
 8006b72:	b01c      	add	sp, #112	; 0x70
 8006b74:	f85d eb04 	ldr.w	lr, [sp], #4
 8006b78:	b003      	add	sp, #12
 8006b7a:	4770      	bx	lr
 8006b7c:	2000000c 	.word	0x2000000c
 8006b80:	ffff0208 	.word	0xffff0208

08006b84 <sulp>:
 8006b84:	b570      	push	{r4, r5, r6, lr}
 8006b86:	4604      	mov	r4, r0
 8006b88:	460d      	mov	r5, r1
 8006b8a:	ec45 4b10 	vmov	d0, r4, r5
 8006b8e:	4616      	mov	r6, r2
 8006b90:	f002 ff0c 	bl	80099ac <__ulp>
 8006b94:	ec51 0b10 	vmov	r0, r1, d0
 8006b98:	b17e      	cbz	r6, 8006bba <sulp+0x36>
 8006b9a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006b9e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	dd09      	ble.n	8006bba <sulp+0x36>
 8006ba6:	051b      	lsls	r3, r3, #20
 8006ba8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006bac:	2400      	movs	r4, #0
 8006bae:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006bb2:	4622      	mov	r2, r4
 8006bb4:	462b      	mov	r3, r5
 8006bb6:	f7f9 fd2f 	bl	8000618 <__aeabi_dmul>
 8006bba:	bd70      	pop	{r4, r5, r6, pc}
 8006bbc:	0000      	movs	r0, r0
	...

08006bc0 <_strtod_l>:
 8006bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bc4:	ed2d 8b02 	vpush	{d8}
 8006bc8:	b09d      	sub	sp, #116	; 0x74
 8006bca:	461f      	mov	r7, r3
 8006bcc:	2300      	movs	r3, #0
 8006bce:	9318      	str	r3, [sp, #96]	; 0x60
 8006bd0:	4ba2      	ldr	r3, [pc, #648]	; (8006e5c <_strtod_l+0x29c>)
 8006bd2:	9213      	str	r2, [sp, #76]	; 0x4c
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	9305      	str	r3, [sp, #20]
 8006bd8:	4604      	mov	r4, r0
 8006bda:	4618      	mov	r0, r3
 8006bdc:	4688      	mov	r8, r1
 8006bde:	f7f9 fb07 	bl	80001f0 <strlen>
 8006be2:	f04f 0a00 	mov.w	sl, #0
 8006be6:	4605      	mov	r5, r0
 8006be8:	f04f 0b00 	mov.w	fp, #0
 8006bec:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006bf0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006bf2:	781a      	ldrb	r2, [r3, #0]
 8006bf4:	2a2b      	cmp	r2, #43	; 0x2b
 8006bf6:	d04e      	beq.n	8006c96 <_strtod_l+0xd6>
 8006bf8:	d83b      	bhi.n	8006c72 <_strtod_l+0xb2>
 8006bfa:	2a0d      	cmp	r2, #13
 8006bfc:	d834      	bhi.n	8006c68 <_strtod_l+0xa8>
 8006bfe:	2a08      	cmp	r2, #8
 8006c00:	d834      	bhi.n	8006c6c <_strtod_l+0xac>
 8006c02:	2a00      	cmp	r2, #0
 8006c04:	d03e      	beq.n	8006c84 <_strtod_l+0xc4>
 8006c06:	2300      	movs	r3, #0
 8006c08:	930a      	str	r3, [sp, #40]	; 0x28
 8006c0a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8006c0c:	7833      	ldrb	r3, [r6, #0]
 8006c0e:	2b30      	cmp	r3, #48	; 0x30
 8006c10:	f040 80b0 	bne.w	8006d74 <_strtod_l+0x1b4>
 8006c14:	7873      	ldrb	r3, [r6, #1]
 8006c16:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006c1a:	2b58      	cmp	r3, #88	; 0x58
 8006c1c:	d168      	bne.n	8006cf0 <_strtod_l+0x130>
 8006c1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c20:	9301      	str	r3, [sp, #4]
 8006c22:	ab18      	add	r3, sp, #96	; 0x60
 8006c24:	9702      	str	r7, [sp, #8]
 8006c26:	9300      	str	r3, [sp, #0]
 8006c28:	4a8d      	ldr	r2, [pc, #564]	; (8006e60 <_strtod_l+0x2a0>)
 8006c2a:	ab19      	add	r3, sp, #100	; 0x64
 8006c2c:	a917      	add	r1, sp, #92	; 0x5c
 8006c2e:	4620      	mov	r0, r4
 8006c30:	f001 ffae 	bl	8008b90 <__gethex>
 8006c34:	f010 0707 	ands.w	r7, r0, #7
 8006c38:	4605      	mov	r5, r0
 8006c3a:	d005      	beq.n	8006c48 <_strtod_l+0x88>
 8006c3c:	2f06      	cmp	r7, #6
 8006c3e:	d12c      	bne.n	8006c9a <_strtod_l+0xda>
 8006c40:	3601      	adds	r6, #1
 8006c42:	2300      	movs	r3, #0
 8006c44:	9617      	str	r6, [sp, #92]	; 0x5c
 8006c46:	930a      	str	r3, [sp, #40]	; 0x28
 8006c48:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	f040 8590 	bne.w	8007770 <_strtod_l+0xbb0>
 8006c50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c52:	b1eb      	cbz	r3, 8006c90 <_strtod_l+0xd0>
 8006c54:	4652      	mov	r2, sl
 8006c56:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006c5a:	ec43 2b10 	vmov	d0, r2, r3
 8006c5e:	b01d      	add	sp, #116	; 0x74
 8006c60:	ecbd 8b02 	vpop	{d8}
 8006c64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c68:	2a20      	cmp	r2, #32
 8006c6a:	d1cc      	bne.n	8006c06 <_strtod_l+0x46>
 8006c6c:	3301      	adds	r3, #1
 8006c6e:	9317      	str	r3, [sp, #92]	; 0x5c
 8006c70:	e7be      	b.n	8006bf0 <_strtod_l+0x30>
 8006c72:	2a2d      	cmp	r2, #45	; 0x2d
 8006c74:	d1c7      	bne.n	8006c06 <_strtod_l+0x46>
 8006c76:	2201      	movs	r2, #1
 8006c78:	920a      	str	r2, [sp, #40]	; 0x28
 8006c7a:	1c5a      	adds	r2, r3, #1
 8006c7c:	9217      	str	r2, [sp, #92]	; 0x5c
 8006c7e:	785b      	ldrb	r3, [r3, #1]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d1c2      	bne.n	8006c0a <_strtod_l+0x4a>
 8006c84:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006c86:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	f040 856e 	bne.w	800776c <_strtod_l+0xbac>
 8006c90:	4652      	mov	r2, sl
 8006c92:	465b      	mov	r3, fp
 8006c94:	e7e1      	b.n	8006c5a <_strtod_l+0x9a>
 8006c96:	2200      	movs	r2, #0
 8006c98:	e7ee      	b.n	8006c78 <_strtod_l+0xb8>
 8006c9a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006c9c:	b13a      	cbz	r2, 8006cae <_strtod_l+0xee>
 8006c9e:	2135      	movs	r1, #53	; 0x35
 8006ca0:	a81a      	add	r0, sp, #104	; 0x68
 8006ca2:	f002 ff8e 	bl	8009bc2 <__copybits>
 8006ca6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006ca8:	4620      	mov	r0, r4
 8006caa:	f002 fb4d 	bl	8009348 <_Bfree>
 8006cae:	3f01      	subs	r7, #1
 8006cb0:	2f04      	cmp	r7, #4
 8006cb2:	d806      	bhi.n	8006cc2 <_strtod_l+0x102>
 8006cb4:	e8df f007 	tbb	[pc, r7]
 8006cb8:	1714030a 	.word	0x1714030a
 8006cbc:	0a          	.byte	0x0a
 8006cbd:	00          	.byte	0x00
 8006cbe:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8006cc2:	0728      	lsls	r0, r5, #28
 8006cc4:	d5c0      	bpl.n	8006c48 <_strtod_l+0x88>
 8006cc6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8006cca:	e7bd      	b.n	8006c48 <_strtod_l+0x88>
 8006ccc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8006cd0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006cd2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006cd6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006cda:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006cde:	e7f0      	b.n	8006cc2 <_strtod_l+0x102>
 8006ce0:	f8df b180 	ldr.w	fp, [pc, #384]	; 8006e64 <_strtod_l+0x2a4>
 8006ce4:	e7ed      	b.n	8006cc2 <_strtod_l+0x102>
 8006ce6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8006cea:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8006cee:	e7e8      	b.n	8006cc2 <_strtod_l+0x102>
 8006cf0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006cf2:	1c5a      	adds	r2, r3, #1
 8006cf4:	9217      	str	r2, [sp, #92]	; 0x5c
 8006cf6:	785b      	ldrb	r3, [r3, #1]
 8006cf8:	2b30      	cmp	r3, #48	; 0x30
 8006cfa:	d0f9      	beq.n	8006cf0 <_strtod_l+0x130>
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d0a3      	beq.n	8006c48 <_strtod_l+0x88>
 8006d00:	2301      	movs	r3, #1
 8006d02:	f04f 0900 	mov.w	r9, #0
 8006d06:	9304      	str	r3, [sp, #16]
 8006d08:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006d0a:	9308      	str	r3, [sp, #32]
 8006d0c:	f8cd 901c 	str.w	r9, [sp, #28]
 8006d10:	464f      	mov	r7, r9
 8006d12:	220a      	movs	r2, #10
 8006d14:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8006d16:	7806      	ldrb	r6, [r0, #0]
 8006d18:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8006d1c:	b2d9      	uxtb	r1, r3
 8006d1e:	2909      	cmp	r1, #9
 8006d20:	d92a      	bls.n	8006d78 <_strtod_l+0x1b8>
 8006d22:	9905      	ldr	r1, [sp, #20]
 8006d24:	462a      	mov	r2, r5
 8006d26:	f003 fa3e 	bl	800a1a6 <strncmp>
 8006d2a:	b398      	cbz	r0, 8006d94 <_strtod_l+0x1d4>
 8006d2c:	2000      	movs	r0, #0
 8006d2e:	4632      	mov	r2, r6
 8006d30:	463d      	mov	r5, r7
 8006d32:	9005      	str	r0, [sp, #20]
 8006d34:	4603      	mov	r3, r0
 8006d36:	2a65      	cmp	r2, #101	; 0x65
 8006d38:	d001      	beq.n	8006d3e <_strtod_l+0x17e>
 8006d3a:	2a45      	cmp	r2, #69	; 0x45
 8006d3c:	d118      	bne.n	8006d70 <_strtod_l+0x1b0>
 8006d3e:	b91d      	cbnz	r5, 8006d48 <_strtod_l+0x188>
 8006d40:	9a04      	ldr	r2, [sp, #16]
 8006d42:	4302      	orrs	r2, r0
 8006d44:	d09e      	beq.n	8006c84 <_strtod_l+0xc4>
 8006d46:	2500      	movs	r5, #0
 8006d48:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8006d4c:	f108 0201 	add.w	r2, r8, #1
 8006d50:	9217      	str	r2, [sp, #92]	; 0x5c
 8006d52:	f898 2001 	ldrb.w	r2, [r8, #1]
 8006d56:	2a2b      	cmp	r2, #43	; 0x2b
 8006d58:	d075      	beq.n	8006e46 <_strtod_l+0x286>
 8006d5a:	2a2d      	cmp	r2, #45	; 0x2d
 8006d5c:	d07b      	beq.n	8006e56 <_strtod_l+0x296>
 8006d5e:	f04f 0c00 	mov.w	ip, #0
 8006d62:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006d66:	2909      	cmp	r1, #9
 8006d68:	f240 8082 	bls.w	8006e70 <_strtod_l+0x2b0>
 8006d6c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006d70:	2600      	movs	r6, #0
 8006d72:	e09d      	b.n	8006eb0 <_strtod_l+0x2f0>
 8006d74:	2300      	movs	r3, #0
 8006d76:	e7c4      	b.n	8006d02 <_strtod_l+0x142>
 8006d78:	2f08      	cmp	r7, #8
 8006d7a:	bfd8      	it	le
 8006d7c:	9907      	ldrle	r1, [sp, #28]
 8006d7e:	f100 0001 	add.w	r0, r0, #1
 8006d82:	bfda      	itte	le
 8006d84:	fb02 3301 	mlale	r3, r2, r1, r3
 8006d88:	9307      	strle	r3, [sp, #28]
 8006d8a:	fb02 3909 	mlagt	r9, r2, r9, r3
 8006d8e:	3701      	adds	r7, #1
 8006d90:	9017      	str	r0, [sp, #92]	; 0x5c
 8006d92:	e7bf      	b.n	8006d14 <_strtod_l+0x154>
 8006d94:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006d96:	195a      	adds	r2, r3, r5
 8006d98:	9217      	str	r2, [sp, #92]	; 0x5c
 8006d9a:	5d5a      	ldrb	r2, [r3, r5]
 8006d9c:	2f00      	cmp	r7, #0
 8006d9e:	d037      	beq.n	8006e10 <_strtod_l+0x250>
 8006da0:	9005      	str	r0, [sp, #20]
 8006da2:	463d      	mov	r5, r7
 8006da4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006da8:	2b09      	cmp	r3, #9
 8006daa:	d912      	bls.n	8006dd2 <_strtod_l+0x212>
 8006dac:	2301      	movs	r3, #1
 8006dae:	e7c2      	b.n	8006d36 <_strtod_l+0x176>
 8006db0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006db2:	1c5a      	adds	r2, r3, #1
 8006db4:	9217      	str	r2, [sp, #92]	; 0x5c
 8006db6:	785a      	ldrb	r2, [r3, #1]
 8006db8:	3001      	adds	r0, #1
 8006dba:	2a30      	cmp	r2, #48	; 0x30
 8006dbc:	d0f8      	beq.n	8006db0 <_strtod_l+0x1f0>
 8006dbe:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8006dc2:	2b08      	cmp	r3, #8
 8006dc4:	f200 84d9 	bhi.w	800777a <_strtod_l+0xbba>
 8006dc8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006dca:	9005      	str	r0, [sp, #20]
 8006dcc:	2000      	movs	r0, #0
 8006dce:	9308      	str	r3, [sp, #32]
 8006dd0:	4605      	mov	r5, r0
 8006dd2:	3a30      	subs	r2, #48	; 0x30
 8006dd4:	f100 0301 	add.w	r3, r0, #1
 8006dd8:	d014      	beq.n	8006e04 <_strtod_l+0x244>
 8006dda:	9905      	ldr	r1, [sp, #20]
 8006ddc:	4419      	add	r1, r3
 8006dde:	9105      	str	r1, [sp, #20]
 8006de0:	462b      	mov	r3, r5
 8006de2:	eb00 0e05 	add.w	lr, r0, r5
 8006de6:	210a      	movs	r1, #10
 8006de8:	4573      	cmp	r3, lr
 8006dea:	d113      	bne.n	8006e14 <_strtod_l+0x254>
 8006dec:	182b      	adds	r3, r5, r0
 8006dee:	2b08      	cmp	r3, #8
 8006df0:	f105 0501 	add.w	r5, r5, #1
 8006df4:	4405      	add	r5, r0
 8006df6:	dc1c      	bgt.n	8006e32 <_strtod_l+0x272>
 8006df8:	9907      	ldr	r1, [sp, #28]
 8006dfa:	230a      	movs	r3, #10
 8006dfc:	fb03 2301 	mla	r3, r3, r1, r2
 8006e00:	9307      	str	r3, [sp, #28]
 8006e02:	2300      	movs	r3, #0
 8006e04:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006e06:	1c51      	adds	r1, r2, #1
 8006e08:	9117      	str	r1, [sp, #92]	; 0x5c
 8006e0a:	7852      	ldrb	r2, [r2, #1]
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	e7c9      	b.n	8006da4 <_strtod_l+0x1e4>
 8006e10:	4638      	mov	r0, r7
 8006e12:	e7d2      	b.n	8006dba <_strtod_l+0x1fa>
 8006e14:	2b08      	cmp	r3, #8
 8006e16:	dc04      	bgt.n	8006e22 <_strtod_l+0x262>
 8006e18:	9e07      	ldr	r6, [sp, #28]
 8006e1a:	434e      	muls	r6, r1
 8006e1c:	9607      	str	r6, [sp, #28]
 8006e1e:	3301      	adds	r3, #1
 8006e20:	e7e2      	b.n	8006de8 <_strtod_l+0x228>
 8006e22:	f103 0c01 	add.w	ip, r3, #1
 8006e26:	f1bc 0f10 	cmp.w	ip, #16
 8006e2a:	bfd8      	it	le
 8006e2c:	fb01 f909 	mulle.w	r9, r1, r9
 8006e30:	e7f5      	b.n	8006e1e <_strtod_l+0x25e>
 8006e32:	2d10      	cmp	r5, #16
 8006e34:	bfdc      	itt	le
 8006e36:	230a      	movle	r3, #10
 8006e38:	fb03 2909 	mlale	r9, r3, r9, r2
 8006e3c:	e7e1      	b.n	8006e02 <_strtod_l+0x242>
 8006e3e:	2300      	movs	r3, #0
 8006e40:	9305      	str	r3, [sp, #20]
 8006e42:	2301      	movs	r3, #1
 8006e44:	e77c      	b.n	8006d40 <_strtod_l+0x180>
 8006e46:	f04f 0c00 	mov.w	ip, #0
 8006e4a:	f108 0202 	add.w	r2, r8, #2
 8006e4e:	9217      	str	r2, [sp, #92]	; 0x5c
 8006e50:	f898 2002 	ldrb.w	r2, [r8, #2]
 8006e54:	e785      	b.n	8006d62 <_strtod_l+0x1a2>
 8006e56:	f04f 0c01 	mov.w	ip, #1
 8006e5a:	e7f6      	b.n	8006e4a <_strtod_l+0x28a>
 8006e5c:	0800aa9c 	.word	0x0800aa9c
 8006e60:	0800a7f0 	.word	0x0800a7f0
 8006e64:	7ff00000 	.word	0x7ff00000
 8006e68:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006e6a:	1c51      	adds	r1, r2, #1
 8006e6c:	9117      	str	r1, [sp, #92]	; 0x5c
 8006e6e:	7852      	ldrb	r2, [r2, #1]
 8006e70:	2a30      	cmp	r2, #48	; 0x30
 8006e72:	d0f9      	beq.n	8006e68 <_strtod_l+0x2a8>
 8006e74:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8006e78:	2908      	cmp	r1, #8
 8006e7a:	f63f af79 	bhi.w	8006d70 <_strtod_l+0x1b0>
 8006e7e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8006e82:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006e84:	9206      	str	r2, [sp, #24]
 8006e86:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006e88:	1c51      	adds	r1, r2, #1
 8006e8a:	9117      	str	r1, [sp, #92]	; 0x5c
 8006e8c:	7852      	ldrb	r2, [r2, #1]
 8006e8e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8006e92:	2e09      	cmp	r6, #9
 8006e94:	d937      	bls.n	8006f06 <_strtod_l+0x346>
 8006e96:	9e06      	ldr	r6, [sp, #24]
 8006e98:	1b89      	subs	r1, r1, r6
 8006e9a:	2908      	cmp	r1, #8
 8006e9c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8006ea0:	dc02      	bgt.n	8006ea8 <_strtod_l+0x2e8>
 8006ea2:	4576      	cmp	r6, lr
 8006ea4:	bfa8      	it	ge
 8006ea6:	4676      	movge	r6, lr
 8006ea8:	f1bc 0f00 	cmp.w	ip, #0
 8006eac:	d000      	beq.n	8006eb0 <_strtod_l+0x2f0>
 8006eae:	4276      	negs	r6, r6
 8006eb0:	2d00      	cmp	r5, #0
 8006eb2:	d14d      	bne.n	8006f50 <_strtod_l+0x390>
 8006eb4:	9904      	ldr	r1, [sp, #16]
 8006eb6:	4301      	orrs	r1, r0
 8006eb8:	f47f aec6 	bne.w	8006c48 <_strtod_l+0x88>
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	f47f aee1 	bne.w	8006c84 <_strtod_l+0xc4>
 8006ec2:	2a69      	cmp	r2, #105	; 0x69
 8006ec4:	d027      	beq.n	8006f16 <_strtod_l+0x356>
 8006ec6:	dc24      	bgt.n	8006f12 <_strtod_l+0x352>
 8006ec8:	2a49      	cmp	r2, #73	; 0x49
 8006eca:	d024      	beq.n	8006f16 <_strtod_l+0x356>
 8006ecc:	2a4e      	cmp	r2, #78	; 0x4e
 8006ece:	f47f aed9 	bne.w	8006c84 <_strtod_l+0xc4>
 8006ed2:	499f      	ldr	r1, [pc, #636]	; (8007150 <_strtod_l+0x590>)
 8006ed4:	a817      	add	r0, sp, #92	; 0x5c
 8006ed6:	f002 f8b3 	bl	8009040 <__match>
 8006eda:	2800      	cmp	r0, #0
 8006edc:	f43f aed2 	beq.w	8006c84 <_strtod_l+0xc4>
 8006ee0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006ee2:	781b      	ldrb	r3, [r3, #0]
 8006ee4:	2b28      	cmp	r3, #40	; 0x28
 8006ee6:	d12d      	bne.n	8006f44 <_strtod_l+0x384>
 8006ee8:	499a      	ldr	r1, [pc, #616]	; (8007154 <_strtod_l+0x594>)
 8006eea:	aa1a      	add	r2, sp, #104	; 0x68
 8006eec:	a817      	add	r0, sp, #92	; 0x5c
 8006eee:	f002 f8bb 	bl	8009068 <__hexnan>
 8006ef2:	2805      	cmp	r0, #5
 8006ef4:	d126      	bne.n	8006f44 <_strtod_l+0x384>
 8006ef6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006ef8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8006efc:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8006f00:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8006f04:	e6a0      	b.n	8006c48 <_strtod_l+0x88>
 8006f06:	210a      	movs	r1, #10
 8006f08:	fb01 2e0e 	mla	lr, r1, lr, r2
 8006f0c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8006f10:	e7b9      	b.n	8006e86 <_strtod_l+0x2c6>
 8006f12:	2a6e      	cmp	r2, #110	; 0x6e
 8006f14:	e7db      	b.n	8006ece <_strtod_l+0x30e>
 8006f16:	4990      	ldr	r1, [pc, #576]	; (8007158 <_strtod_l+0x598>)
 8006f18:	a817      	add	r0, sp, #92	; 0x5c
 8006f1a:	f002 f891 	bl	8009040 <__match>
 8006f1e:	2800      	cmp	r0, #0
 8006f20:	f43f aeb0 	beq.w	8006c84 <_strtod_l+0xc4>
 8006f24:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006f26:	498d      	ldr	r1, [pc, #564]	; (800715c <_strtod_l+0x59c>)
 8006f28:	3b01      	subs	r3, #1
 8006f2a:	a817      	add	r0, sp, #92	; 0x5c
 8006f2c:	9317      	str	r3, [sp, #92]	; 0x5c
 8006f2e:	f002 f887 	bl	8009040 <__match>
 8006f32:	b910      	cbnz	r0, 8006f3a <_strtod_l+0x37a>
 8006f34:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006f36:	3301      	adds	r3, #1
 8006f38:	9317      	str	r3, [sp, #92]	; 0x5c
 8006f3a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800716c <_strtod_l+0x5ac>
 8006f3e:	f04f 0a00 	mov.w	sl, #0
 8006f42:	e681      	b.n	8006c48 <_strtod_l+0x88>
 8006f44:	4886      	ldr	r0, [pc, #536]	; (8007160 <_strtod_l+0x5a0>)
 8006f46:	f003 f8d3 	bl	800a0f0 <nan>
 8006f4a:	ec5b ab10 	vmov	sl, fp, d0
 8006f4e:	e67b      	b.n	8006c48 <_strtod_l+0x88>
 8006f50:	9b05      	ldr	r3, [sp, #20]
 8006f52:	9807      	ldr	r0, [sp, #28]
 8006f54:	1af3      	subs	r3, r6, r3
 8006f56:	2f00      	cmp	r7, #0
 8006f58:	bf08      	it	eq
 8006f5a:	462f      	moveq	r7, r5
 8006f5c:	2d10      	cmp	r5, #16
 8006f5e:	9306      	str	r3, [sp, #24]
 8006f60:	46a8      	mov	r8, r5
 8006f62:	bfa8      	it	ge
 8006f64:	f04f 0810 	movge.w	r8, #16
 8006f68:	f7f9 fadc 	bl	8000524 <__aeabi_ui2d>
 8006f6c:	2d09      	cmp	r5, #9
 8006f6e:	4682      	mov	sl, r0
 8006f70:	468b      	mov	fp, r1
 8006f72:	dd13      	ble.n	8006f9c <_strtod_l+0x3dc>
 8006f74:	4b7b      	ldr	r3, [pc, #492]	; (8007164 <_strtod_l+0x5a4>)
 8006f76:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8006f7a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006f7e:	f7f9 fb4b 	bl	8000618 <__aeabi_dmul>
 8006f82:	4682      	mov	sl, r0
 8006f84:	4648      	mov	r0, r9
 8006f86:	468b      	mov	fp, r1
 8006f88:	f7f9 facc 	bl	8000524 <__aeabi_ui2d>
 8006f8c:	4602      	mov	r2, r0
 8006f8e:	460b      	mov	r3, r1
 8006f90:	4650      	mov	r0, sl
 8006f92:	4659      	mov	r1, fp
 8006f94:	f7f9 f98a 	bl	80002ac <__adddf3>
 8006f98:	4682      	mov	sl, r0
 8006f9a:	468b      	mov	fp, r1
 8006f9c:	2d0f      	cmp	r5, #15
 8006f9e:	dc38      	bgt.n	8007012 <_strtod_l+0x452>
 8006fa0:	9b06      	ldr	r3, [sp, #24]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	f43f ae50 	beq.w	8006c48 <_strtod_l+0x88>
 8006fa8:	dd24      	ble.n	8006ff4 <_strtod_l+0x434>
 8006faa:	2b16      	cmp	r3, #22
 8006fac:	dc0b      	bgt.n	8006fc6 <_strtod_l+0x406>
 8006fae:	496d      	ldr	r1, [pc, #436]	; (8007164 <_strtod_l+0x5a4>)
 8006fb0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006fb4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006fb8:	4652      	mov	r2, sl
 8006fba:	465b      	mov	r3, fp
 8006fbc:	f7f9 fb2c 	bl	8000618 <__aeabi_dmul>
 8006fc0:	4682      	mov	sl, r0
 8006fc2:	468b      	mov	fp, r1
 8006fc4:	e640      	b.n	8006c48 <_strtod_l+0x88>
 8006fc6:	9a06      	ldr	r2, [sp, #24]
 8006fc8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	db20      	blt.n	8007012 <_strtod_l+0x452>
 8006fd0:	4c64      	ldr	r4, [pc, #400]	; (8007164 <_strtod_l+0x5a4>)
 8006fd2:	f1c5 050f 	rsb	r5, r5, #15
 8006fd6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006fda:	4652      	mov	r2, sl
 8006fdc:	465b      	mov	r3, fp
 8006fde:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006fe2:	f7f9 fb19 	bl	8000618 <__aeabi_dmul>
 8006fe6:	9b06      	ldr	r3, [sp, #24]
 8006fe8:	1b5d      	subs	r5, r3, r5
 8006fea:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006fee:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006ff2:	e7e3      	b.n	8006fbc <_strtod_l+0x3fc>
 8006ff4:	9b06      	ldr	r3, [sp, #24]
 8006ff6:	3316      	adds	r3, #22
 8006ff8:	db0b      	blt.n	8007012 <_strtod_l+0x452>
 8006ffa:	9b05      	ldr	r3, [sp, #20]
 8006ffc:	1b9e      	subs	r6, r3, r6
 8006ffe:	4b59      	ldr	r3, [pc, #356]	; (8007164 <_strtod_l+0x5a4>)
 8007000:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8007004:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007008:	4650      	mov	r0, sl
 800700a:	4659      	mov	r1, fp
 800700c:	f7f9 fc2e 	bl	800086c <__aeabi_ddiv>
 8007010:	e7d6      	b.n	8006fc0 <_strtod_l+0x400>
 8007012:	9b06      	ldr	r3, [sp, #24]
 8007014:	eba5 0808 	sub.w	r8, r5, r8
 8007018:	4498      	add	r8, r3
 800701a:	f1b8 0f00 	cmp.w	r8, #0
 800701e:	dd74      	ble.n	800710a <_strtod_l+0x54a>
 8007020:	f018 030f 	ands.w	r3, r8, #15
 8007024:	d00a      	beq.n	800703c <_strtod_l+0x47c>
 8007026:	494f      	ldr	r1, [pc, #316]	; (8007164 <_strtod_l+0x5a4>)
 8007028:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800702c:	4652      	mov	r2, sl
 800702e:	465b      	mov	r3, fp
 8007030:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007034:	f7f9 faf0 	bl	8000618 <__aeabi_dmul>
 8007038:	4682      	mov	sl, r0
 800703a:	468b      	mov	fp, r1
 800703c:	f038 080f 	bics.w	r8, r8, #15
 8007040:	d04f      	beq.n	80070e2 <_strtod_l+0x522>
 8007042:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8007046:	dd22      	ble.n	800708e <_strtod_l+0x4ce>
 8007048:	2500      	movs	r5, #0
 800704a:	462e      	mov	r6, r5
 800704c:	9507      	str	r5, [sp, #28]
 800704e:	9505      	str	r5, [sp, #20]
 8007050:	2322      	movs	r3, #34	; 0x22
 8007052:	f8df b118 	ldr.w	fp, [pc, #280]	; 800716c <_strtod_l+0x5ac>
 8007056:	6023      	str	r3, [r4, #0]
 8007058:	f04f 0a00 	mov.w	sl, #0
 800705c:	9b07      	ldr	r3, [sp, #28]
 800705e:	2b00      	cmp	r3, #0
 8007060:	f43f adf2 	beq.w	8006c48 <_strtod_l+0x88>
 8007064:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007066:	4620      	mov	r0, r4
 8007068:	f002 f96e 	bl	8009348 <_Bfree>
 800706c:	9905      	ldr	r1, [sp, #20]
 800706e:	4620      	mov	r0, r4
 8007070:	f002 f96a 	bl	8009348 <_Bfree>
 8007074:	4631      	mov	r1, r6
 8007076:	4620      	mov	r0, r4
 8007078:	f002 f966 	bl	8009348 <_Bfree>
 800707c:	9907      	ldr	r1, [sp, #28]
 800707e:	4620      	mov	r0, r4
 8007080:	f002 f962 	bl	8009348 <_Bfree>
 8007084:	4629      	mov	r1, r5
 8007086:	4620      	mov	r0, r4
 8007088:	f002 f95e 	bl	8009348 <_Bfree>
 800708c:	e5dc      	b.n	8006c48 <_strtod_l+0x88>
 800708e:	4b36      	ldr	r3, [pc, #216]	; (8007168 <_strtod_l+0x5a8>)
 8007090:	9304      	str	r3, [sp, #16]
 8007092:	2300      	movs	r3, #0
 8007094:	ea4f 1828 	mov.w	r8, r8, asr #4
 8007098:	4650      	mov	r0, sl
 800709a:	4659      	mov	r1, fp
 800709c:	4699      	mov	r9, r3
 800709e:	f1b8 0f01 	cmp.w	r8, #1
 80070a2:	dc21      	bgt.n	80070e8 <_strtod_l+0x528>
 80070a4:	b10b      	cbz	r3, 80070aa <_strtod_l+0x4ea>
 80070a6:	4682      	mov	sl, r0
 80070a8:	468b      	mov	fp, r1
 80070aa:	4b2f      	ldr	r3, [pc, #188]	; (8007168 <_strtod_l+0x5a8>)
 80070ac:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80070b0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80070b4:	4652      	mov	r2, sl
 80070b6:	465b      	mov	r3, fp
 80070b8:	e9d9 0100 	ldrd	r0, r1, [r9]
 80070bc:	f7f9 faac 	bl	8000618 <__aeabi_dmul>
 80070c0:	4b2a      	ldr	r3, [pc, #168]	; (800716c <_strtod_l+0x5ac>)
 80070c2:	460a      	mov	r2, r1
 80070c4:	400b      	ands	r3, r1
 80070c6:	492a      	ldr	r1, [pc, #168]	; (8007170 <_strtod_l+0x5b0>)
 80070c8:	428b      	cmp	r3, r1
 80070ca:	4682      	mov	sl, r0
 80070cc:	d8bc      	bhi.n	8007048 <_strtod_l+0x488>
 80070ce:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80070d2:	428b      	cmp	r3, r1
 80070d4:	bf86      	itte	hi
 80070d6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8007174 <_strtod_l+0x5b4>
 80070da:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 80070de:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80070e2:	2300      	movs	r3, #0
 80070e4:	9304      	str	r3, [sp, #16]
 80070e6:	e084      	b.n	80071f2 <_strtod_l+0x632>
 80070e8:	f018 0f01 	tst.w	r8, #1
 80070ec:	d005      	beq.n	80070fa <_strtod_l+0x53a>
 80070ee:	9b04      	ldr	r3, [sp, #16]
 80070f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070f4:	f7f9 fa90 	bl	8000618 <__aeabi_dmul>
 80070f8:	2301      	movs	r3, #1
 80070fa:	9a04      	ldr	r2, [sp, #16]
 80070fc:	3208      	adds	r2, #8
 80070fe:	f109 0901 	add.w	r9, r9, #1
 8007102:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007106:	9204      	str	r2, [sp, #16]
 8007108:	e7c9      	b.n	800709e <_strtod_l+0x4de>
 800710a:	d0ea      	beq.n	80070e2 <_strtod_l+0x522>
 800710c:	f1c8 0800 	rsb	r8, r8, #0
 8007110:	f018 020f 	ands.w	r2, r8, #15
 8007114:	d00a      	beq.n	800712c <_strtod_l+0x56c>
 8007116:	4b13      	ldr	r3, [pc, #76]	; (8007164 <_strtod_l+0x5a4>)
 8007118:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800711c:	4650      	mov	r0, sl
 800711e:	4659      	mov	r1, fp
 8007120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007124:	f7f9 fba2 	bl	800086c <__aeabi_ddiv>
 8007128:	4682      	mov	sl, r0
 800712a:	468b      	mov	fp, r1
 800712c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8007130:	d0d7      	beq.n	80070e2 <_strtod_l+0x522>
 8007132:	f1b8 0f1f 	cmp.w	r8, #31
 8007136:	dd1f      	ble.n	8007178 <_strtod_l+0x5b8>
 8007138:	2500      	movs	r5, #0
 800713a:	462e      	mov	r6, r5
 800713c:	9507      	str	r5, [sp, #28]
 800713e:	9505      	str	r5, [sp, #20]
 8007140:	2322      	movs	r3, #34	; 0x22
 8007142:	f04f 0a00 	mov.w	sl, #0
 8007146:	f04f 0b00 	mov.w	fp, #0
 800714a:	6023      	str	r3, [r4, #0]
 800714c:	e786      	b.n	800705c <_strtod_l+0x49c>
 800714e:	bf00      	nop
 8007150:	0800a7c1 	.word	0x0800a7c1
 8007154:	0800a804 	.word	0x0800a804
 8007158:	0800a7b9 	.word	0x0800a7b9
 800715c:	0800a944 	.word	0x0800a944
 8007160:	0800ac58 	.word	0x0800ac58
 8007164:	0800ab38 	.word	0x0800ab38
 8007168:	0800ab10 	.word	0x0800ab10
 800716c:	7ff00000 	.word	0x7ff00000
 8007170:	7ca00000 	.word	0x7ca00000
 8007174:	7fefffff 	.word	0x7fefffff
 8007178:	f018 0310 	ands.w	r3, r8, #16
 800717c:	bf18      	it	ne
 800717e:	236a      	movne	r3, #106	; 0x6a
 8007180:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8007530 <_strtod_l+0x970>
 8007184:	9304      	str	r3, [sp, #16]
 8007186:	4650      	mov	r0, sl
 8007188:	4659      	mov	r1, fp
 800718a:	2300      	movs	r3, #0
 800718c:	f018 0f01 	tst.w	r8, #1
 8007190:	d004      	beq.n	800719c <_strtod_l+0x5dc>
 8007192:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007196:	f7f9 fa3f 	bl	8000618 <__aeabi_dmul>
 800719a:	2301      	movs	r3, #1
 800719c:	ea5f 0868 	movs.w	r8, r8, asr #1
 80071a0:	f109 0908 	add.w	r9, r9, #8
 80071a4:	d1f2      	bne.n	800718c <_strtod_l+0x5cc>
 80071a6:	b10b      	cbz	r3, 80071ac <_strtod_l+0x5ec>
 80071a8:	4682      	mov	sl, r0
 80071aa:	468b      	mov	fp, r1
 80071ac:	9b04      	ldr	r3, [sp, #16]
 80071ae:	b1c3      	cbz	r3, 80071e2 <_strtod_l+0x622>
 80071b0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80071b4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	4659      	mov	r1, fp
 80071bc:	dd11      	ble.n	80071e2 <_strtod_l+0x622>
 80071be:	2b1f      	cmp	r3, #31
 80071c0:	f340 8124 	ble.w	800740c <_strtod_l+0x84c>
 80071c4:	2b34      	cmp	r3, #52	; 0x34
 80071c6:	bfde      	ittt	le
 80071c8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80071cc:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 80071d0:	fa03 f202 	lslle.w	r2, r3, r2
 80071d4:	f04f 0a00 	mov.w	sl, #0
 80071d8:	bfcc      	ite	gt
 80071da:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80071de:	ea02 0b01 	andle.w	fp, r2, r1
 80071e2:	2200      	movs	r2, #0
 80071e4:	2300      	movs	r3, #0
 80071e6:	4650      	mov	r0, sl
 80071e8:	4659      	mov	r1, fp
 80071ea:	f7f9 fc7d 	bl	8000ae8 <__aeabi_dcmpeq>
 80071ee:	2800      	cmp	r0, #0
 80071f0:	d1a2      	bne.n	8007138 <_strtod_l+0x578>
 80071f2:	9b07      	ldr	r3, [sp, #28]
 80071f4:	9300      	str	r3, [sp, #0]
 80071f6:	9908      	ldr	r1, [sp, #32]
 80071f8:	462b      	mov	r3, r5
 80071fa:	463a      	mov	r2, r7
 80071fc:	4620      	mov	r0, r4
 80071fe:	f002 f90b 	bl	8009418 <__s2b>
 8007202:	9007      	str	r0, [sp, #28]
 8007204:	2800      	cmp	r0, #0
 8007206:	f43f af1f 	beq.w	8007048 <_strtod_l+0x488>
 800720a:	9b05      	ldr	r3, [sp, #20]
 800720c:	1b9e      	subs	r6, r3, r6
 800720e:	9b06      	ldr	r3, [sp, #24]
 8007210:	2b00      	cmp	r3, #0
 8007212:	bfb4      	ite	lt
 8007214:	4633      	movlt	r3, r6
 8007216:	2300      	movge	r3, #0
 8007218:	930c      	str	r3, [sp, #48]	; 0x30
 800721a:	9b06      	ldr	r3, [sp, #24]
 800721c:	2500      	movs	r5, #0
 800721e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007222:	9312      	str	r3, [sp, #72]	; 0x48
 8007224:	462e      	mov	r6, r5
 8007226:	9b07      	ldr	r3, [sp, #28]
 8007228:	4620      	mov	r0, r4
 800722a:	6859      	ldr	r1, [r3, #4]
 800722c:	f002 f84c 	bl	80092c8 <_Balloc>
 8007230:	9005      	str	r0, [sp, #20]
 8007232:	2800      	cmp	r0, #0
 8007234:	f43f af0c 	beq.w	8007050 <_strtod_l+0x490>
 8007238:	9b07      	ldr	r3, [sp, #28]
 800723a:	691a      	ldr	r2, [r3, #16]
 800723c:	3202      	adds	r2, #2
 800723e:	f103 010c 	add.w	r1, r3, #12
 8007242:	0092      	lsls	r2, r2, #2
 8007244:	300c      	adds	r0, #12
 8007246:	f002 f831 	bl	80092ac <memcpy>
 800724a:	ec4b ab10 	vmov	d0, sl, fp
 800724e:	aa1a      	add	r2, sp, #104	; 0x68
 8007250:	a919      	add	r1, sp, #100	; 0x64
 8007252:	4620      	mov	r0, r4
 8007254:	f002 fc26 	bl	8009aa4 <__d2b>
 8007258:	ec4b ab18 	vmov	d8, sl, fp
 800725c:	9018      	str	r0, [sp, #96]	; 0x60
 800725e:	2800      	cmp	r0, #0
 8007260:	f43f aef6 	beq.w	8007050 <_strtod_l+0x490>
 8007264:	2101      	movs	r1, #1
 8007266:	4620      	mov	r0, r4
 8007268:	f002 f970 	bl	800954c <__i2b>
 800726c:	4606      	mov	r6, r0
 800726e:	2800      	cmp	r0, #0
 8007270:	f43f aeee 	beq.w	8007050 <_strtod_l+0x490>
 8007274:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007276:	9904      	ldr	r1, [sp, #16]
 8007278:	2b00      	cmp	r3, #0
 800727a:	bfab      	itete	ge
 800727c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800727e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8007280:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8007282:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8007286:	bfac      	ite	ge
 8007288:	eb03 0902 	addge.w	r9, r3, r2
 800728c:	1ad7      	sublt	r7, r2, r3
 800728e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007290:	eba3 0801 	sub.w	r8, r3, r1
 8007294:	4490      	add	r8, r2
 8007296:	4ba1      	ldr	r3, [pc, #644]	; (800751c <_strtod_l+0x95c>)
 8007298:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800729c:	4598      	cmp	r8, r3
 800729e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80072a2:	f280 80c7 	bge.w	8007434 <_strtod_l+0x874>
 80072a6:	eba3 0308 	sub.w	r3, r3, r8
 80072aa:	2b1f      	cmp	r3, #31
 80072ac:	eba2 0203 	sub.w	r2, r2, r3
 80072b0:	f04f 0101 	mov.w	r1, #1
 80072b4:	f300 80b1 	bgt.w	800741a <_strtod_l+0x85a>
 80072b8:	fa01 f303 	lsl.w	r3, r1, r3
 80072bc:	930d      	str	r3, [sp, #52]	; 0x34
 80072be:	2300      	movs	r3, #0
 80072c0:	9308      	str	r3, [sp, #32]
 80072c2:	eb09 0802 	add.w	r8, r9, r2
 80072c6:	9b04      	ldr	r3, [sp, #16]
 80072c8:	45c1      	cmp	r9, r8
 80072ca:	4417      	add	r7, r2
 80072cc:	441f      	add	r7, r3
 80072ce:	464b      	mov	r3, r9
 80072d0:	bfa8      	it	ge
 80072d2:	4643      	movge	r3, r8
 80072d4:	42bb      	cmp	r3, r7
 80072d6:	bfa8      	it	ge
 80072d8:	463b      	movge	r3, r7
 80072da:	2b00      	cmp	r3, #0
 80072dc:	bfc2      	ittt	gt
 80072de:	eba8 0803 	subgt.w	r8, r8, r3
 80072e2:	1aff      	subgt	r7, r7, r3
 80072e4:	eba9 0903 	subgt.w	r9, r9, r3
 80072e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	dd17      	ble.n	800731e <_strtod_l+0x75e>
 80072ee:	4631      	mov	r1, r6
 80072f0:	461a      	mov	r2, r3
 80072f2:	4620      	mov	r0, r4
 80072f4:	f002 f9ea 	bl	80096cc <__pow5mult>
 80072f8:	4606      	mov	r6, r0
 80072fa:	2800      	cmp	r0, #0
 80072fc:	f43f aea8 	beq.w	8007050 <_strtod_l+0x490>
 8007300:	4601      	mov	r1, r0
 8007302:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007304:	4620      	mov	r0, r4
 8007306:	f002 f937 	bl	8009578 <__multiply>
 800730a:	900b      	str	r0, [sp, #44]	; 0x2c
 800730c:	2800      	cmp	r0, #0
 800730e:	f43f ae9f 	beq.w	8007050 <_strtod_l+0x490>
 8007312:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007314:	4620      	mov	r0, r4
 8007316:	f002 f817 	bl	8009348 <_Bfree>
 800731a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800731c:	9318      	str	r3, [sp, #96]	; 0x60
 800731e:	f1b8 0f00 	cmp.w	r8, #0
 8007322:	f300 808c 	bgt.w	800743e <_strtod_l+0x87e>
 8007326:	9b06      	ldr	r3, [sp, #24]
 8007328:	2b00      	cmp	r3, #0
 800732a:	dd08      	ble.n	800733e <_strtod_l+0x77e>
 800732c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800732e:	9905      	ldr	r1, [sp, #20]
 8007330:	4620      	mov	r0, r4
 8007332:	f002 f9cb 	bl	80096cc <__pow5mult>
 8007336:	9005      	str	r0, [sp, #20]
 8007338:	2800      	cmp	r0, #0
 800733a:	f43f ae89 	beq.w	8007050 <_strtod_l+0x490>
 800733e:	2f00      	cmp	r7, #0
 8007340:	dd08      	ble.n	8007354 <_strtod_l+0x794>
 8007342:	9905      	ldr	r1, [sp, #20]
 8007344:	463a      	mov	r2, r7
 8007346:	4620      	mov	r0, r4
 8007348:	f002 fa1a 	bl	8009780 <__lshift>
 800734c:	9005      	str	r0, [sp, #20]
 800734e:	2800      	cmp	r0, #0
 8007350:	f43f ae7e 	beq.w	8007050 <_strtod_l+0x490>
 8007354:	f1b9 0f00 	cmp.w	r9, #0
 8007358:	dd08      	ble.n	800736c <_strtod_l+0x7ac>
 800735a:	4631      	mov	r1, r6
 800735c:	464a      	mov	r2, r9
 800735e:	4620      	mov	r0, r4
 8007360:	f002 fa0e 	bl	8009780 <__lshift>
 8007364:	4606      	mov	r6, r0
 8007366:	2800      	cmp	r0, #0
 8007368:	f43f ae72 	beq.w	8007050 <_strtod_l+0x490>
 800736c:	9a05      	ldr	r2, [sp, #20]
 800736e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007370:	4620      	mov	r0, r4
 8007372:	f002 fa91 	bl	8009898 <__mdiff>
 8007376:	4605      	mov	r5, r0
 8007378:	2800      	cmp	r0, #0
 800737a:	f43f ae69 	beq.w	8007050 <_strtod_l+0x490>
 800737e:	68c3      	ldr	r3, [r0, #12]
 8007380:	930b      	str	r3, [sp, #44]	; 0x2c
 8007382:	2300      	movs	r3, #0
 8007384:	60c3      	str	r3, [r0, #12]
 8007386:	4631      	mov	r1, r6
 8007388:	f002 fa6a 	bl	8009860 <__mcmp>
 800738c:	2800      	cmp	r0, #0
 800738e:	da60      	bge.n	8007452 <_strtod_l+0x892>
 8007390:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007392:	ea53 030a 	orrs.w	r3, r3, sl
 8007396:	f040 8082 	bne.w	800749e <_strtod_l+0x8de>
 800739a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d17d      	bne.n	800749e <_strtod_l+0x8de>
 80073a2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80073a6:	0d1b      	lsrs	r3, r3, #20
 80073a8:	051b      	lsls	r3, r3, #20
 80073aa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80073ae:	d976      	bls.n	800749e <_strtod_l+0x8de>
 80073b0:	696b      	ldr	r3, [r5, #20]
 80073b2:	b913      	cbnz	r3, 80073ba <_strtod_l+0x7fa>
 80073b4:	692b      	ldr	r3, [r5, #16]
 80073b6:	2b01      	cmp	r3, #1
 80073b8:	dd71      	ble.n	800749e <_strtod_l+0x8de>
 80073ba:	4629      	mov	r1, r5
 80073bc:	2201      	movs	r2, #1
 80073be:	4620      	mov	r0, r4
 80073c0:	f002 f9de 	bl	8009780 <__lshift>
 80073c4:	4631      	mov	r1, r6
 80073c6:	4605      	mov	r5, r0
 80073c8:	f002 fa4a 	bl	8009860 <__mcmp>
 80073cc:	2800      	cmp	r0, #0
 80073ce:	dd66      	ble.n	800749e <_strtod_l+0x8de>
 80073d0:	9904      	ldr	r1, [sp, #16]
 80073d2:	4a53      	ldr	r2, [pc, #332]	; (8007520 <_strtod_l+0x960>)
 80073d4:	465b      	mov	r3, fp
 80073d6:	2900      	cmp	r1, #0
 80073d8:	f000 8081 	beq.w	80074de <_strtod_l+0x91e>
 80073dc:	ea02 010b 	and.w	r1, r2, fp
 80073e0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80073e4:	dc7b      	bgt.n	80074de <_strtod_l+0x91e>
 80073e6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80073ea:	f77f aea9 	ble.w	8007140 <_strtod_l+0x580>
 80073ee:	4b4d      	ldr	r3, [pc, #308]	; (8007524 <_strtod_l+0x964>)
 80073f0:	4650      	mov	r0, sl
 80073f2:	4659      	mov	r1, fp
 80073f4:	2200      	movs	r2, #0
 80073f6:	f7f9 f90f 	bl	8000618 <__aeabi_dmul>
 80073fa:	460b      	mov	r3, r1
 80073fc:	4303      	orrs	r3, r0
 80073fe:	bf08      	it	eq
 8007400:	2322      	moveq	r3, #34	; 0x22
 8007402:	4682      	mov	sl, r0
 8007404:	468b      	mov	fp, r1
 8007406:	bf08      	it	eq
 8007408:	6023      	streq	r3, [r4, #0]
 800740a:	e62b      	b.n	8007064 <_strtod_l+0x4a4>
 800740c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007410:	fa02 f303 	lsl.w	r3, r2, r3
 8007414:	ea03 0a0a 	and.w	sl, r3, sl
 8007418:	e6e3      	b.n	80071e2 <_strtod_l+0x622>
 800741a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800741e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8007422:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8007426:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800742a:	fa01 f308 	lsl.w	r3, r1, r8
 800742e:	9308      	str	r3, [sp, #32]
 8007430:	910d      	str	r1, [sp, #52]	; 0x34
 8007432:	e746      	b.n	80072c2 <_strtod_l+0x702>
 8007434:	2300      	movs	r3, #0
 8007436:	9308      	str	r3, [sp, #32]
 8007438:	2301      	movs	r3, #1
 800743a:	930d      	str	r3, [sp, #52]	; 0x34
 800743c:	e741      	b.n	80072c2 <_strtod_l+0x702>
 800743e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007440:	4642      	mov	r2, r8
 8007442:	4620      	mov	r0, r4
 8007444:	f002 f99c 	bl	8009780 <__lshift>
 8007448:	9018      	str	r0, [sp, #96]	; 0x60
 800744a:	2800      	cmp	r0, #0
 800744c:	f47f af6b 	bne.w	8007326 <_strtod_l+0x766>
 8007450:	e5fe      	b.n	8007050 <_strtod_l+0x490>
 8007452:	465f      	mov	r7, fp
 8007454:	d16e      	bne.n	8007534 <_strtod_l+0x974>
 8007456:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007458:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800745c:	b342      	cbz	r2, 80074b0 <_strtod_l+0x8f0>
 800745e:	4a32      	ldr	r2, [pc, #200]	; (8007528 <_strtod_l+0x968>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d128      	bne.n	80074b6 <_strtod_l+0x8f6>
 8007464:	9b04      	ldr	r3, [sp, #16]
 8007466:	4651      	mov	r1, sl
 8007468:	b1eb      	cbz	r3, 80074a6 <_strtod_l+0x8e6>
 800746a:	4b2d      	ldr	r3, [pc, #180]	; (8007520 <_strtod_l+0x960>)
 800746c:	403b      	ands	r3, r7
 800746e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007472:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007476:	d819      	bhi.n	80074ac <_strtod_l+0x8ec>
 8007478:	0d1b      	lsrs	r3, r3, #20
 800747a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800747e:	fa02 f303 	lsl.w	r3, r2, r3
 8007482:	4299      	cmp	r1, r3
 8007484:	d117      	bne.n	80074b6 <_strtod_l+0x8f6>
 8007486:	4b29      	ldr	r3, [pc, #164]	; (800752c <_strtod_l+0x96c>)
 8007488:	429f      	cmp	r7, r3
 800748a:	d102      	bne.n	8007492 <_strtod_l+0x8d2>
 800748c:	3101      	adds	r1, #1
 800748e:	f43f addf 	beq.w	8007050 <_strtod_l+0x490>
 8007492:	4b23      	ldr	r3, [pc, #140]	; (8007520 <_strtod_l+0x960>)
 8007494:	403b      	ands	r3, r7
 8007496:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800749a:	f04f 0a00 	mov.w	sl, #0
 800749e:	9b04      	ldr	r3, [sp, #16]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d1a4      	bne.n	80073ee <_strtod_l+0x82e>
 80074a4:	e5de      	b.n	8007064 <_strtod_l+0x4a4>
 80074a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80074aa:	e7ea      	b.n	8007482 <_strtod_l+0x8c2>
 80074ac:	4613      	mov	r3, r2
 80074ae:	e7e8      	b.n	8007482 <_strtod_l+0x8c2>
 80074b0:	ea53 030a 	orrs.w	r3, r3, sl
 80074b4:	d08c      	beq.n	80073d0 <_strtod_l+0x810>
 80074b6:	9b08      	ldr	r3, [sp, #32]
 80074b8:	b1db      	cbz	r3, 80074f2 <_strtod_l+0x932>
 80074ba:	423b      	tst	r3, r7
 80074bc:	d0ef      	beq.n	800749e <_strtod_l+0x8de>
 80074be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80074c0:	9a04      	ldr	r2, [sp, #16]
 80074c2:	4650      	mov	r0, sl
 80074c4:	4659      	mov	r1, fp
 80074c6:	b1c3      	cbz	r3, 80074fa <_strtod_l+0x93a>
 80074c8:	f7ff fb5c 	bl	8006b84 <sulp>
 80074cc:	4602      	mov	r2, r0
 80074ce:	460b      	mov	r3, r1
 80074d0:	ec51 0b18 	vmov	r0, r1, d8
 80074d4:	f7f8 feea 	bl	80002ac <__adddf3>
 80074d8:	4682      	mov	sl, r0
 80074da:	468b      	mov	fp, r1
 80074dc:	e7df      	b.n	800749e <_strtod_l+0x8de>
 80074de:	4013      	ands	r3, r2
 80074e0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80074e4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80074e8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80074ec:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80074f0:	e7d5      	b.n	800749e <_strtod_l+0x8de>
 80074f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80074f4:	ea13 0f0a 	tst.w	r3, sl
 80074f8:	e7e0      	b.n	80074bc <_strtod_l+0x8fc>
 80074fa:	f7ff fb43 	bl	8006b84 <sulp>
 80074fe:	4602      	mov	r2, r0
 8007500:	460b      	mov	r3, r1
 8007502:	ec51 0b18 	vmov	r0, r1, d8
 8007506:	f7f8 fecf 	bl	80002a8 <__aeabi_dsub>
 800750a:	2200      	movs	r2, #0
 800750c:	2300      	movs	r3, #0
 800750e:	4682      	mov	sl, r0
 8007510:	468b      	mov	fp, r1
 8007512:	f7f9 fae9 	bl	8000ae8 <__aeabi_dcmpeq>
 8007516:	2800      	cmp	r0, #0
 8007518:	d0c1      	beq.n	800749e <_strtod_l+0x8de>
 800751a:	e611      	b.n	8007140 <_strtod_l+0x580>
 800751c:	fffffc02 	.word	0xfffffc02
 8007520:	7ff00000 	.word	0x7ff00000
 8007524:	39500000 	.word	0x39500000
 8007528:	000fffff 	.word	0x000fffff
 800752c:	7fefffff 	.word	0x7fefffff
 8007530:	0800a818 	.word	0x0800a818
 8007534:	4631      	mov	r1, r6
 8007536:	4628      	mov	r0, r5
 8007538:	f002 fb10 	bl	8009b5c <__ratio>
 800753c:	ec59 8b10 	vmov	r8, r9, d0
 8007540:	ee10 0a10 	vmov	r0, s0
 8007544:	2200      	movs	r2, #0
 8007546:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800754a:	4649      	mov	r1, r9
 800754c:	f7f9 fae0 	bl	8000b10 <__aeabi_dcmple>
 8007550:	2800      	cmp	r0, #0
 8007552:	d07a      	beq.n	800764a <_strtod_l+0xa8a>
 8007554:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007556:	2b00      	cmp	r3, #0
 8007558:	d04a      	beq.n	80075f0 <_strtod_l+0xa30>
 800755a:	4b95      	ldr	r3, [pc, #596]	; (80077b0 <_strtod_l+0xbf0>)
 800755c:	2200      	movs	r2, #0
 800755e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007562:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80077b0 <_strtod_l+0xbf0>
 8007566:	f04f 0800 	mov.w	r8, #0
 800756a:	4b92      	ldr	r3, [pc, #584]	; (80077b4 <_strtod_l+0xbf4>)
 800756c:	403b      	ands	r3, r7
 800756e:	930d      	str	r3, [sp, #52]	; 0x34
 8007570:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007572:	4b91      	ldr	r3, [pc, #580]	; (80077b8 <_strtod_l+0xbf8>)
 8007574:	429a      	cmp	r2, r3
 8007576:	f040 80b0 	bne.w	80076da <_strtod_l+0xb1a>
 800757a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800757e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8007582:	ec4b ab10 	vmov	d0, sl, fp
 8007586:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800758a:	f002 fa0f 	bl	80099ac <__ulp>
 800758e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007592:	ec53 2b10 	vmov	r2, r3, d0
 8007596:	f7f9 f83f 	bl	8000618 <__aeabi_dmul>
 800759a:	4652      	mov	r2, sl
 800759c:	465b      	mov	r3, fp
 800759e:	f7f8 fe85 	bl	80002ac <__adddf3>
 80075a2:	460b      	mov	r3, r1
 80075a4:	4983      	ldr	r1, [pc, #524]	; (80077b4 <_strtod_l+0xbf4>)
 80075a6:	4a85      	ldr	r2, [pc, #532]	; (80077bc <_strtod_l+0xbfc>)
 80075a8:	4019      	ands	r1, r3
 80075aa:	4291      	cmp	r1, r2
 80075ac:	4682      	mov	sl, r0
 80075ae:	d960      	bls.n	8007672 <_strtod_l+0xab2>
 80075b0:	ee18 3a90 	vmov	r3, s17
 80075b4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d104      	bne.n	80075c6 <_strtod_l+0xa06>
 80075bc:	ee18 3a10 	vmov	r3, s16
 80075c0:	3301      	adds	r3, #1
 80075c2:	f43f ad45 	beq.w	8007050 <_strtod_l+0x490>
 80075c6:	f8df b200 	ldr.w	fp, [pc, #512]	; 80077c8 <_strtod_l+0xc08>
 80075ca:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80075ce:	9918      	ldr	r1, [sp, #96]	; 0x60
 80075d0:	4620      	mov	r0, r4
 80075d2:	f001 feb9 	bl	8009348 <_Bfree>
 80075d6:	9905      	ldr	r1, [sp, #20]
 80075d8:	4620      	mov	r0, r4
 80075da:	f001 feb5 	bl	8009348 <_Bfree>
 80075de:	4631      	mov	r1, r6
 80075e0:	4620      	mov	r0, r4
 80075e2:	f001 feb1 	bl	8009348 <_Bfree>
 80075e6:	4629      	mov	r1, r5
 80075e8:	4620      	mov	r0, r4
 80075ea:	f001 fead 	bl	8009348 <_Bfree>
 80075ee:	e61a      	b.n	8007226 <_strtod_l+0x666>
 80075f0:	f1ba 0f00 	cmp.w	sl, #0
 80075f4:	d11b      	bne.n	800762e <_strtod_l+0xa6e>
 80075f6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80075fa:	b9f3      	cbnz	r3, 800763a <_strtod_l+0xa7a>
 80075fc:	4b6c      	ldr	r3, [pc, #432]	; (80077b0 <_strtod_l+0xbf0>)
 80075fe:	2200      	movs	r2, #0
 8007600:	4640      	mov	r0, r8
 8007602:	4649      	mov	r1, r9
 8007604:	f7f9 fa7a 	bl	8000afc <__aeabi_dcmplt>
 8007608:	b9d0      	cbnz	r0, 8007640 <_strtod_l+0xa80>
 800760a:	4640      	mov	r0, r8
 800760c:	4649      	mov	r1, r9
 800760e:	4b6c      	ldr	r3, [pc, #432]	; (80077c0 <_strtod_l+0xc00>)
 8007610:	2200      	movs	r2, #0
 8007612:	f7f9 f801 	bl	8000618 <__aeabi_dmul>
 8007616:	4680      	mov	r8, r0
 8007618:	4689      	mov	r9, r1
 800761a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800761e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8007622:	9315      	str	r3, [sp, #84]	; 0x54
 8007624:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007628:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800762c:	e79d      	b.n	800756a <_strtod_l+0x9aa>
 800762e:	f1ba 0f01 	cmp.w	sl, #1
 8007632:	d102      	bne.n	800763a <_strtod_l+0xa7a>
 8007634:	2f00      	cmp	r7, #0
 8007636:	f43f ad83 	beq.w	8007140 <_strtod_l+0x580>
 800763a:	4b62      	ldr	r3, [pc, #392]	; (80077c4 <_strtod_l+0xc04>)
 800763c:	2200      	movs	r2, #0
 800763e:	e78e      	b.n	800755e <_strtod_l+0x99e>
 8007640:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80077c0 <_strtod_l+0xc00>
 8007644:	f04f 0800 	mov.w	r8, #0
 8007648:	e7e7      	b.n	800761a <_strtod_l+0xa5a>
 800764a:	4b5d      	ldr	r3, [pc, #372]	; (80077c0 <_strtod_l+0xc00>)
 800764c:	4640      	mov	r0, r8
 800764e:	4649      	mov	r1, r9
 8007650:	2200      	movs	r2, #0
 8007652:	f7f8 ffe1 	bl	8000618 <__aeabi_dmul>
 8007656:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007658:	4680      	mov	r8, r0
 800765a:	4689      	mov	r9, r1
 800765c:	b933      	cbnz	r3, 800766c <_strtod_l+0xaac>
 800765e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007662:	900e      	str	r0, [sp, #56]	; 0x38
 8007664:	930f      	str	r3, [sp, #60]	; 0x3c
 8007666:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800766a:	e7dd      	b.n	8007628 <_strtod_l+0xa68>
 800766c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8007670:	e7f9      	b.n	8007666 <_strtod_l+0xaa6>
 8007672:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8007676:	9b04      	ldr	r3, [sp, #16]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d1a8      	bne.n	80075ce <_strtod_l+0xa0e>
 800767c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007680:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007682:	0d1b      	lsrs	r3, r3, #20
 8007684:	051b      	lsls	r3, r3, #20
 8007686:	429a      	cmp	r2, r3
 8007688:	d1a1      	bne.n	80075ce <_strtod_l+0xa0e>
 800768a:	4640      	mov	r0, r8
 800768c:	4649      	mov	r1, r9
 800768e:	f7f9 fb23 	bl	8000cd8 <__aeabi_d2lz>
 8007692:	f7f8 ff93 	bl	80005bc <__aeabi_l2d>
 8007696:	4602      	mov	r2, r0
 8007698:	460b      	mov	r3, r1
 800769a:	4640      	mov	r0, r8
 800769c:	4649      	mov	r1, r9
 800769e:	f7f8 fe03 	bl	80002a8 <__aeabi_dsub>
 80076a2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80076a4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80076a8:	ea43 030a 	orr.w	r3, r3, sl
 80076ac:	4313      	orrs	r3, r2
 80076ae:	4680      	mov	r8, r0
 80076b0:	4689      	mov	r9, r1
 80076b2:	d055      	beq.n	8007760 <_strtod_l+0xba0>
 80076b4:	a336      	add	r3, pc, #216	; (adr r3, 8007790 <_strtod_l+0xbd0>)
 80076b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ba:	f7f9 fa1f 	bl	8000afc <__aeabi_dcmplt>
 80076be:	2800      	cmp	r0, #0
 80076c0:	f47f acd0 	bne.w	8007064 <_strtod_l+0x4a4>
 80076c4:	a334      	add	r3, pc, #208	; (adr r3, 8007798 <_strtod_l+0xbd8>)
 80076c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ca:	4640      	mov	r0, r8
 80076cc:	4649      	mov	r1, r9
 80076ce:	f7f9 fa33 	bl	8000b38 <__aeabi_dcmpgt>
 80076d2:	2800      	cmp	r0, #0
 80076d4:	f43f af7b 	beq.w	80075ce <_strtod_l+0xa0e>
 80076d8:	e4c4      	b.n	8007064 <_strtod_l+0x4a4>
 80076da:	9b04      	ldr	r3, [sp, #16]
 80076dc:	b333      	cbz	r3, 800772c <_strtod_l+0xb6c>
 80076de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80076e0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80076e4:	d822      	bhi.n	800772c <_strtod_l+0xb6c>
 80076e6:	a32e      	add	r3, pc, #184	; (adr r3, 80077a0 <_strtod_l+0xbe0>)
 80076e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ec:	4640      	mov	r0, r8
 80076ee:	4649      	mov	r1, r9
 80076f0:	f7f9 fa0e 	bl	8000b10 <__aeabi_dcmple>
 80076f4:	b1a0      	cbz	r0, 8007720 <_strtod_l+0xb60>
 80076f6:	4649      	mov	r1, r9
 80076f8:	4640      	mov	r0, r8
 80076fa:	f7f9 fa65 	bl	8000bc8 <__aeabi_d2uiz>
 80076fe:	2801      	cmp	r0, #1
 8007700:	bf38      	it	cc
 8007702:	2001      	movcc	r0, #1
 8007704:	f7f8 ff0e 	bl	8000524 <__aeabi_ui2d>
 8007708:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800770a:	4680      	mov	r8, r0
 800770c:	4689      	mov	r9, r1
 800770e:	bb23      	cbnz	r3, 800775a <_strtod_l+0xb9a>
 8007710:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007714:	9010      	str	r0, [sp, #64]	; 0x40
 8007716:	9311      	str	r3, [sp, #68]	; 0x44
 8007718:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800771c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007720:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007722:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007724:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007728:	1a9b      	subs	r3, r3, r2
 800772a:	9309      	str	r3, [sp, #36]	; 0x24
 800772c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007730:	eeb0 0a48 	vmov.f32	s0, s16
 8007734:	eef0 0a68 	vmov.f32	s1, s17
 8007738:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800773c:	f002 f936 	bl	80099ac <__ulp>
 8007740:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007744:	ec53 2b10 	vmov	r2, r3, d0
 8007748:	f7f8 ff66 	bl	8000618 <__aeabi_dmul>
 800774c:	ec53 2b18 	vmov	r2, r3, d8
 8007750:	f7f8 fdac 	bl	80002ac <__adddf3>
 8007754:	4682      	mov	sl, r0
 8007756:	468b      	mov	fp, r1
 8007758:	e78d      	b.n	8007676 <_strtod_l+0xab6>
 800775a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800775e:	e7db      	b.n	8007718 <_strtod_l+0xb58>
 8007760:	a311      	add	r3, pc, #68	; (adr r3, 80077a8 <_strtod_l+0xbe8>)
 8007762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007766:	f7f9 f9c9 	bl	8000afc <__aeabi_dcmplt>
 800776a:	e7b2      	b.n	80076d2 <_strtod_l+0xb12>
 800776c:	2300      	movs	r3, #0
 800776e:	930a      	str	r3, [sp, #40]	; 0x28
 8007770:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007772:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007774:	6013      	str	r3, [r2, #0]
 8007776:	f7ff ba6b 	b.w	8006c50 <_strtod_l+0x90>
 800777a:	2a65      	cmp	r2, #101	; 0x65
 800777c:	f43f ab5f 	beq.w	8006e3e <_strtod_l+0x27e>
 8007780:	2a45      	cmp	r2, #69	; 0x45
 8007782:	f43f ab5c 	beq.w	8006e3e <_strtod_l+0x27e>
 8007786:	2301      	movs	r3, #1
 8007788:	f7ff bb94 	b.w	8006eb4 <_strtod_l+0x2f4>
 800778c:	f3af 8000 	nop.w
 8007790:	94a03595 	.word	0x94a03595
 8007794:	3fdfffff 	.word	0x3fdfffff
 8007798:	35afe535 	.word	0x35afe535
 800779c:	3fe00000 	.word	0x3fe00000
 80077a0:	ffc00000 	.word	0xffc00000
 80077a4:	41dfffff 	.word	0x41dfffff
 80077a8:	94a03595 	.word	0x94a03595
 80077ac:	3fcfffff 	.word	0x3fcfffff
 80077b0:	3ff00000 	.word	0x3ff00000
 80077b4:	7ff00000 	.word	0x7ff00000
 80077b8:	7fe00000 	.word	0x7fe00000
 80077bc:	7c9fffff 	.word	0x7c9fffff
 80077c0:	3fe00000 	.word	0x3fe00000
 80077c4:	bff00000 	.word	0xbff00000
 80077c8:	7fefffff 	.word	0x7fefffff

080077cc <_strtod_r>:
 80077cc:	4b01      	ldr	r3, [pc, #4]	; (80077d4 <_strtod_r+0x8>)
 80077ce:	f7ff b9f7 	b.w	8006bc0 <_strtod_l>
 80077d2:	bf00      	nop
 80077d4:	20000074 	.word	0x20000074

080077d8 <_strtol_l.constprop.0>:
 80077d8:	2b01      	cmp	r3, #1
 80077da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077de:	d001      	beq.n	80077e4 <_strtol_l.constprop.0+0xc>
 80077e0:	2b24      	cmp	r3, #36	; 0x24
 80077e2:	d906      	bls.n	80077f2 <_strtol_l.constprop.0+0x1a>
 80077e4:	f7fe fa86 	bl	8005cf4 <__errno>
 80077e8:	2316      	movs	r3, #22
 80077ea:	6003      	str	r3, [r0, #0]
 80077ec:	2000      	movs	r0, #0
 80077ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077f2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80078d8 <_strtol_l.constprop.0+0x100>
 80077f6:	460d      	mov	r5, r1
 80077f8:	462e      	mov	r6, r5
 80077fa:	f815 4b01 	ldrb.w	r4, [r5], #1
 80077fe:	f814 700c 	ldrb.w	r7, [r4, ip]
 8007802:	f017 0708 	ands.w	r7, r7, #8
 8007806:	d1f7      	bne.n	80077f8 <_strtol_l.constprop.0+0x20>
 8007808:	2c2d      	cmp	r4, #45	; 0x2d
 800780a:	d132      	bne.n	8007872 <_strtol_l.constprop.0+0x9a>
 800780c:	782c      	ldrb	r4, [r5, #0]
 800780e:	2701      	movs	r7, #1
 8007810:	1cb5      	adds	r5, r6, #2
 8007812:	2b00      	cmp	r3, #0
 8007814:	d05b      	beq.n	80078ce <_strtol_l.constprop.0+0xf6>
 8007816:	2b10      	cmp	r3, #16
 8007818:	d109      	bne.n	800782e <_strtol_l.constprop.0+0x56>
 800781a:	2c30      	cmp	r4, #48	; 0x30
 800781c:	d107      	bne.n	800782e <_strtol_l.constprop.0+0x56>
 800781e:	782c      	ldrb	r4, [r5, #0]
 8007820:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007824:	2c58      	cmp	r4, #88	; 0x58
 8007826:	d14d      	bne.n	80078c4 <_strtol_l.constprop.0+0xec>
 8007828:	786c      	ldrb	r4, [r5, #1]
 800782a:	2310      	movs	r3, #16
 800782c:	3502      	adds	r5, #2
 800782e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007832:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8007836:	f04f 0c00 	mov.w	ip, #0
 800783a:	fbb8 f9f3 	udiv	r9, r8, r3
 800783e:	4666      	mov	r6, ip
 8007840:	fb03 8a19 	mls	sl, r3, r9, r8
 8007844:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8007848:	f1be 0f09 	cmp.w	lr, #9
 800784c:	d816      	bhi.n	800787c <_strtol_l.constprop.0+0xa4>
 800784e:	4674      	mov	r4, lr
 8007850:	42a3      	cmp	r3, r4
 8007852:	dd24      	ble.n	800789e <_strtol_l.constprop.0+0xc6>
 8007854:	f1bc 0f00 	cmp.w	ip, #0
 8007858:	db1e      	blt.n	8007898 <_strtol_l.constprop.0+0xc0>
 800785a:	45b1      	cmp	r9, r6
 800785c:	d31c      	bcc.n	8007898 <_strtol_l.constprop.0+0xc0>
 800785e:	d101      	bne.n	8007864 <_strtol_l.constprop.0+0x8c>
 8007860:	45a2      	cmp	sl, r4
 8007862:	db19      	blt.n	8007898 <_strtol_l.constprop.0+0xc0>
 8007864:	fb06 4603 	mla	r6, r6, r3, r4
 8007868:	f04f 0c01 	mov.w	ip, #1
 800786c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007870:	e7e8      	b.n	8007844 <_strtol_l.constprop.0+0x6c>
 8007872:	2c2b      	cmp	r4, #43	; 0x2b
 8007874:	bf04      	itt	eq
 8007876:	782c      	ldrbeq	r4, [r5, #0]
 8007878:	1cb5      	addeq	r5, r6, #2
 800787a:	e7ca      	b.n	8007812 <_strtol_l.constprop.0+0x3a>
 800787c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8007880:	f1be 0f19 	cmp.w	lr, #25
 8007884:	d801      	bhi.n	800788a <_strtol_l.constprop.0+0xb2>
 8007886:	3c37      	subs	r4, #55	; 0x37
 8007888:	e7e2      	b.n	8007850 <_strtol_l.constprop.0+0x78>
 800788a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800788e:	f1be 0f19 	cmp.w	lr, #25
 8007892:	d804      	bhi.n	800789e <_strtol_l.constprop.0+0xc6>
 8007894:	3c57      	subs	r4, #87	; 0x57
 8007896:	e7db      	b.n	8007850 <_strtol_l.constprop.0+0x78>
 8007898:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800789c:	e7e6      	b.n	800786c <_strtol_l.constprop.0+0x94>
 800789e:	f1bc 0f00 	cmp.w	ip, #0
 80078a2:	da05      	bge.n	80078b0 <_strtol_l.constprop.0+0xd8>
 80078a4:	2322      	movs	r3, #34	; 0x22
 80078a6:	6003      	str	r3, [r0, #0]
 80078a8:	4646      	mov	r6, r8
 80078aa:	b942      	cbnz	r2, 80078be <_strtol_l.constprop.0+0xe6>
 80078ac:	4630      	mov	r0, r6
 80078ae:	e79e      	b.n	80077ee <_strtol_l.constprop.0+0x16>
 80078b0:	b107      	cbz	r7, 80078b4 <_strtol_l.constprop.0+0xdc>
 80078b2:	4276      	negs	r6, r6
 80078b4:	2a00      	cmp	r2, #0
 80078b6:	d0f9      	beq.n	80078ac <_strtol_l.constprop.0+0xd4>
 80078b8:	f1bc 0f00 	cmp.w	ip, #0
 80078bc:	d000      	beq.n	80078c0 <_strtol_l.constprop.0+0xe8>
 80078be:	1e69      	subs	r1, r5, #1
 80078c0:	6011      	str	r1, [r2, #0]
 80078c2:	e7f3      	b.n	80078ac <_strtol_l.constprop.0+0xd4>
 80078c4:	2430      	movs	r4, #48	; 0x30
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d1b1      	bne.n	800782e <_strtol_l.constprop.0+0x56>
 80078ca:	2308      	movs	r3, #8
 80078cc:	e7af      	b.n	800782e <_strtol_l.constprop.0+0x56>
 80078ce:	2c30      	cmp	r4, #48	; 0x30
 80078d0:	d0a5      	beq.n	800781e <_strtol_l.constprop.0+0x46>
 80078d2:	230a      	movs	r3, #10
 80078d4:	e7ab      	b.n	800782e <_strtol_l.constprop.0+0x56>
 80078d6:	bf00      	nop
 80078d8:	0800a841 	.word	0x0800a841

080078dc <_strtol_r>:
 80078dc:	f7ff bf7c 	b.w	80077d8 <_strtol_l.constprop.0>

080078e0 <__swbuf_r>:
 80078e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078e2:	460e      	mov	r6, r1
 80078e4:	4614      	mov	r4, r2
 80078e6:	4605      	mov	r5, r0
 80078e8:	b118      	cbz	r0, 80078f2 <__swbuf_r+0x12>
 80078ea:	6983      	ldr	r3, [r0, #24]
 80078ec:	b90b      	cbnz	r3, 80078f2 <__swbuf_r+0x12>
 80078ee:	f001 f84b 	bl	8008988 <__sinit>
 80078f2:	4b21      	ldr	r3, [pc, #132]	; (8007978 <__swbuf_r+0x98>)
 80078f4:	429c      	cmp	r4, r3
 80078f6:	d12b      	bne.n	8007950 <__swbuf_r+0x70>
 80078f8:	686c      	ldr	r4, [r5, #4]
 80078fa:	69a3      	ldr	r3, [r4, #24]
 80078fc:	60a3      	str	r3, [r4, #8]
 80078fe:	89a3      	ldrh	r3, [r4, #12]
 8007900:	071a      	lsls	r2, r3, #28
 8007902:	d52f      	bpl.n	8007964 <__swbuf_r+0x84>
 8007904:	6923      	ldr	r3, [r4, #16]
 8007906:	b36b      	cbz	r3, 8007964 <__swbuf_r+0x84>
 8007908:	6923      	ldr	r3, [r4, #16]
 800790a:	6820      	ldr	r0, [r4, #0]
 800790c:	1ac0      	subs	r0, r0, r3
 800790e:	6963      	ldr	r3, [r4, #20]
 8007910:	b2f6      	uxtb	r6, r6
 8007912:	4283      	cmp	r3, r0
 8007914:	4637      	mov	r7, r6
 8007916:	dc04      	bgt.n	8007922 <__swbuf_r+0x42>
 8007918:	4621      	mov	r1, r4
 800791a:	4628      	mov	r0, r5
 800791c:	f000 ffa0 	bl	8008860 <_fflush_r>
 8007920:	bb30      	cbnz	r0, 8007970 <__swbuf_r+0x90>
 8007922:	68a3      	ldr	r3, [r4, #8]
 8007924:	3b01      	subs	r3, #1
 8007926:	60a3      	str	r3, [r4, #8]
 8007928:	6823      	ldr	r3, [r4, #0]
 800792a:	1c5a      	adds	r2, r3, #1
 800792c:	6022      	str	r2, [r4, #0]
 800792e:	701e      	strb	r6, [r3, #0]
 8007930:	6963      	ldr	r3, [r4, #20]
 8007932:	3001      	adds	r0, #1
 8007934:	4283      	cmp	r3, r0
 8007936:	d004      	beq.n	8007942 <__swbuf_r+0x62>
 8007938:	89a3      	ldrh	r3, [r4, #12]
 800793a:	07db      	lsls	r3, r3, #31
 800793c:	d506      	bpl.n	800794c <__swbuf_r+0x6c>
 800793e:	2e0a      	cmp	r6, #10
 8007940:	d104      	bne.n	800794c <__swbuf_r+0x6c>
 8007942:	4621      	mov	r1, r4
 8007944:	4628      	mov	r0, r5
 8007946:	f000 ff8b 	bl	8008860 <_fflush_r>
 800794a:	b988      	cbnz	r0, 8007970 <__swbuf_r+0x90>
 800794c:	4638      	mov	r0, r7
 800794e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007950:	4b0a      	ldr	r3, [pc, #40]	; (800797c <__swbuf_r+0x9c>)
 8007952:	429c      	cmp	r4, r3
 8007954:	d101      	bne.n	800795a <__swbuf_r+0x7a>
 8007956:	68ac      	ldr	r4, [r5, #8]
 8007958:	e7cf      	b.n	80078fa <__swbuf_r+0x1a>
 800795a:	4b09      	ldr	r3, [pc, #36]	; (8007980 <__swbuf_r+0xa0>)
 800795c:	429c      	cmp	r4, r3
 800795e:	bf08      	it	eq
 8007960:	68ec      	ldreq	r4, [r5, #12]
 8007962:	e7ca      	b.n	80078fa <__swbuf_r+0x1a>
 8007964:	4621      	mov	r1, r4
 8007966:	4628      	mov	r0, r5
 8007968:	f000 f80c 	bl	8007984 <__swsetup_r>
 800796c:	2800      	cmp	r0, #0
 800796e:	d0cb      	beq.n	8007908 <__swbuf_r+0x28>
 8007970:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007974:	e7ea      	b.n	800794c <__swbuf_r+0x6c>
 8007976:	bf00      	nop
 8007978:	0800a9f4 	.word	0x0800a9f4
 800797c:	0800aa14 	.word	0x0800aa14
 8007980:	0800a9d4 	.word	0x0800a9d4

08007984 <__swsetup_r>:
 8007984:	4b32      	ldr	r3, [pc, #200]	; (8007a50 <__swsetup_r+0xcc>)
 8007986:	b570      	push	{r4, r5, r6, lr}
 8007988:	681d      	ldr	r5, [r3, #0]
 800798a:	4606      	mov	r6, r0
 800798c:	460c      	mov	r4, r1
 800798e:	b125      	cbz	r5, 800799a <__swsetup_r+0x16>
 8007990:	69ab      	ldr	r3, [r5, #24]
 8007992:	b913      	cbnz	r3, 800799a <__swsetup_r+0x16>
 8007994:	4628      	mov	r0, r5
 8007996:	f000 fff7 	bl	8008988 <__sinit>
 800799a:	4b2e      	ldr	r3, [pc, #184]	; (8007a54 <__swsetup_r+0xd0>)
 800799c:	429c      	cmp	r4, r3
 800799e:	d10f      	bne.n	80079c0 <__swsetup_r+0x3c>
 80079a0:	686c      	ldr	r4, [r5, #4]
 80079a2:	89a3      	ldrh	r3, [r4, #12]
 80079a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80079a8:	0719      	lsls	r1, r3, #28
 80079aa:	d42c      	bmi.n	8007a06 <__swsetup_r+0x82>
 80079ac:	06dd      	lsls	r5, r3, #27
 80079ae:	d411      	bmi.n	80079d4 <__swsetup_r+0x50>
 80079b0:	2309      	movs	r3, #9
 80079b2:	6033      	str	r3, [r6, #0]
 80079b4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80079b8:	81a3      	strh	r3, [r4, #12]
 80079ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80079be:	e03e      	b.n	8007a3e <__swsetup_r+0xba>
 80079c0:	4b25      	ldr	r3, [pc, #148]	; (8007a58 <__swsetup_r+0xd4>)
 80079c2:	429c      	cmp	r4, r3
 80079c4:	d101      	bne.n	80079ca <__swsetup_r+0x46>
 80079c6:	68ac      	ldr	r4, [r5, #8]
 80079c8:	e7eb      	b.n	80079a2 <__swsetup_r+0x1e>
 80079ca:	4b24      	ldr	r3, [pc, #144]	; (8007a5c <__swsetup_r+0xd8>)
 80079cc:	429c      	cmp	r4, r3
 80079ce:	bf08      	it	eq
 80079d0:	68ec      	ldreq	r4, [r5, #12]
 80079d2:	e7e6      	b.n	80079a2 <__swsetup_r+0x1e>
 80079d4:	0758      	lsls	r0, r3, #29
 80079d6:	d512      	bpl.n	80079fe <__swsetup_r+0x7a>
 80079d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80079da:	b141      	cbz	r1, 80079ee <__swsetup_r+0x6a>
 80079dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80079e0:	4299      	cmp	r1, r3
 80079e2:	d002      	beq.n	80079ea <__swsetup_r+0x66>
 80079e4:	4630      	mov	r0, r6
 80079e6:	f002 f947 	bl	8009c78 <_free_r>
 80079ea:	2300      	movs	r3, #0
 80079ec:	6363      	str	r3, [r4, #52]	; 0x34
 80079ee:	89a3      	ldrh	r3, [r4, #12]
 80079f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80079f4:	81a3      	strh	r3, [r4, #12]
 80079f6:	2300      	movs	r3, #0
 80079f8:	6063      	str	r3, [r4, #4]
 80079fa:	6923      	ldr	r3, [r4, #16]
 80079fc:	6023      	str	r3, [r4, #0]
 80079fe:	89a3      	ldrh	r3, [r4, #12]
 8007a00:	f043 0308 	orr.w	r3, r3, #8
 8007a04:	81a3      	strh	r3, [r4, #12]
 8007a06:	6923      	ldr	r3, [r4, #16]
 8007a08:	b94b      	cbnz	r3, 8007a1e <__swsetup_r+0x9a>
 8007a0a:	89a3      	ldrh	r3, [r4, #12]
 8007a0c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007a10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a14:	d003      	beq.n	8007a1e <__swsetup_r+0x9a>
 8007a16:	4621      	mov	r1, r4
 8007a18:	4630      	mov	r0, r6
 8007a1a:	f001 fbed 	bl	80091f8 <__smakebuf_r>
 8007a1e:	89a0      	ldrh	r0, [r4, #12]
 8007a20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007a24:	f010 0301 	ands.w	r3, r0, #1
 8007a28:	d00a      	beq.n	8007a40 <__swsetup_r+0xbc>
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	60a3      	str	r3, [r4, #8]
 8007a2e:	6963      	ldr	r3, [r4, #20]
 8007a30:	425b      	negs	r3, r3
 8007a32:	61a3      	str	r3, [r4, #24]
 8007a34:	6923      	ldr	r3, [r4, #16]
 8007a36:	b943      	cbnz	r3, 8007a4a <__swsetup_r+0xc6>
 8007a38:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007a3c:	d1ba      	bne.n	80079b4 <__swsetup_r+0x30>
 8007a3e:	bd70      	pop	{r4, r5, r6, pc}
 8007a40:	0781      	lsls	r1, r0, #30
 8007a42:	bf58      	it	pl
 8007a44:	6963      	ldrpl	r3, [r4, #20]
 8007a46:	60a3      	str	r3, [r4, #8]
 8007a48:	e7f4      	b.n	8007a34 <__swsetup_r+0xb0>
 8007a4a:	2000      	movs	r0, #0
 8007a4c:	e7f7      	b.n	8007a3e <__swsetup_r+0xba>
 8007a4e:	bf00      	nop
 8007a50:	2000000c 	.word	0x2000000c
 8007a54:	0800a9f4 	.word	0x0800a9f4
 8007a58:	0800aa14 	.word	0x0800aa14
 8007a5c:	0800a9d4 	.word	0x0800a9d4

08007a60 <quorem>:
 8007a60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a64:	6903      	ldr	r3, [r0, #16]
 8007a66:	690c      	ldr	r4, [r1, #16]
 8007a68:	42a3      	cmp	r3, r4
 8007a6a:	4607      	mov	r7, r0
 8007a6c:	f2c0 8081 	blt.w	8007b72 <quorem+0x112>
 8007a70:	3c01      	subs	r4, #1
 8007a72:	f101 0814 	add.w	r8, r1, #20
 8007a76:	f100 0514 	add.w	r5, r0, #20
 8007a7a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007a7e:	9301      	str	r3, [sp, #4]
 8007a80:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007a84:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007a88:	3301      	adds	r3, #1
 8007a8a:	429a      	cmp	r2, r3
 8007a8c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007a90:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007a94:	fbb2 f6f3 	udiv	r6, r2, r3
 8007a98:	d331      	bcc.n	8007afe <quorem+0x9e>
 8007a9a:	f04f 0e00 	mov.w	lr, #0
 8007a9e:	4640      	mov	r0, r8
 8007aa0:	46ac      	mov	ip, r5
 8007aa2:	46f2      	mov	sl, lr
 8007aa4:	f850 2b04 	ldr.w	r2, [r0], #4
 8007aa8:	b293      	uxth	r3, r2
 8007aaa:	fb06 e303 	mla	r3, r6, r3, lr
 8007aae:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007ab2:	b29b      	uxth	r3, r3
 8007ab4:	ebaa 0303 	sub.w	r3, sl, r3
 8007ab8:	f8dc a000 	ldr.w	sl, [ip]
 8007abc:	0c12      	lsrs	r2, r2, #16
 8007abe:	fa13 f38a 	uxtah	r3, r3, sl
 8007ac2:	fb06 e202 	mla	r2, r6, r2, lr
 8007ac6:	9300      	str	r3, [sp, #0]
 8007ac8:	9b00      	ldr	r3, [sp, #0]
 8007aca:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007ace:	b292      	uxth	r2, r2
 8007ad0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007ad4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007ad8:	f8bd 3000 	ldrh.w	r3, [sp]
 8007adc:	4581      	cmp	r9, r0
 8007ade:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007ae2:	f84c 3b04 	str.w	r3, [ip], #4
 8007ae6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007aea:	d2db      	bcs.n	8007aa4 <quorem+0x44>
 8007aec:	f855 300b 	ldr.w	r3, [r5, fp]
 8007af0:	b92b      	cbnz	r3, 8007afe <quorem+0x9e>
 8007af2:	9b01      	ldr	r3, [sp, #4]
 8007af4:	3b04      	subs	r3, #4
 8007af6:	429d      	cmp	r5, r3
 8007af8:	461a      	mov	r2, r3
 8007afa:	d32e      	bcc.n	8007b5a <quorem+0xfa>
 8007afc:	613c      	str	r4, [r7, #16]
 8007afe:	4638      	mov	r0, r7
 8007b00:	f001 feae 	bl	8009860 <__mcmp>
 8007b04:	2800      	cmp	r0, #0
 8007b06:	db24      	blt.n	8007b52 <quorem+0xf2>
 8007b08:	3601      	adds	r6, #1
 8007b0a:	4628      	mov	r0, r5
 8007b0c:	f04f 0c00 	mov.w	ip, #0
 8007b10:	f858 2b04 	ldr.w	r2, [r8], #4
 8007b14:	f8d0 e000 	ldr.w	lr, [r0]
 8007b18:	b293      	uxth	r3, r2
 8007b1a:	ebac 0303 	sub.w	r3, ip, r3
 8007b1e:	0c12      	lsrs	r2, r2, #16
 8007b20:	fa13 f38e 	uxtah	r3, r3, lr
 8007b24:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007b28:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007b2c:	b29b      	uxth	r3, r3
 8007b2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007b32:	45c1      	cmp	r9, r8
 8007b34:	f840 3b04 	str.w	r3, [r0], #4
 8007b38:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007b3c:	d2e8      	bcs.n	8007b10 <quorem+0xb0>
 8007b3e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007b42:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007b46:	b922      	cbnz	r2, 8007b52 <quorem+0xf2>
 8007b48:	3b04      	subs	r3, #4
 8007b4a:	429d      	cmp	r5, r3
 8007b4c:	461a      	mov	r2, r3
 8007b4e:	d30a      	bcc.n	8007b66 <quorem+0x106>
 8007b50:	613c      	str	r4, [r7, #16]
 8007b52:	4630      	mov	r0, r6
 8007b54:	b003      	add	sp, #12
 8007b56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b5a:	6812      	ldr	r2, [r2, #0]
 8007b5c:	3b04      	subs	r3, #4
 8007b5e:	2a00      	cmp	r2, #0
 8007b60:	d1cc      	bne.n	8007afc <quorem+0x9c>
 8007b62:	3c01      	subs	r4, #1
 8007b64:	e7c7      	b.n	8007af6 <quorem+0x96>
 8007b66:	6812      	ldr	r2, [r2, #0]
 8007b68:	3b04      	subs	r3, #4
 8007b6a:	2a00      	cmp	r2, #0
 8007b6c:	d1f0      	bne.n	8007b50 <quorem+0xf0>
 8007b6e:	3c01      	subs	r4, #1
 8007b70:	e7eb      	b.n	8007b4a <quorem+0xea>
 8007b72:	2000      	movs	r0, #0
 8007b74:	e7ee      	b.n	8007b54 <quorem+0xf4>
	...

08007b78 <_dtoa_r>:
 8007b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b7c:	ed2d 8b04 	vpush	{d8-d9}
 8007b80:	ec57 6b10 	vmov	r6, r7, d0
 8007b84:	b093      	sub	sp, #76	; 0x4c
 8007b86:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007b88:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007b8c:	9106      	str	r1, [sp, #24]
 8007b8e:	ee10 aa10 	vmov	sl, s0
 8007b92:	4604      	mov	r4, r0
 8007b94:	9209      	str	r2, [sp, #36]	; 0x24
 8007b96:	930c      	str	r3, [sp, #48]	; 0x30
 8007b98:	46bb      	mov	fp, r7
 8007b9a:	b975      	cbnz	r5, 8007bba <_dtoa_r+0x42>
 8007b9c:	2010      	movs	r0, #16
 8007b9e:	f001 fb6b 	bl	8009278 <malloc>
 8007ba2:	4602      	mov	r2, r0
 8007ba4:	6260      	str	r0, [r4, #36]	; 0x24
 8007ba6:	b920      	cbnz	r0, 8007bb2 <_dtoa_r+0x3a>
 8007ba8:	4ba7      	ldr	r3, [pc, #668]	; (8007e48 <_dtoa_r+0x2d0>)
 8007baa:	21ea      	movs	r1, #234	; 0xea
 8007bac:	48a7      	ldr	r0, [pc, #668]	; (8007e4c <_dtoa_r+0x2d4>)
 8007bae:	f002 fb2d 	bl	800a20c <__assert_func>
 8007bb2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007bb6:	6005      	str	r5, [r0, #0]
 8007bb8:	60c5      	str	r5, [r0, #12]
 8007bba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007bbc:	6819      	ldr	r1, [r3, #0]
 8007bbe:	b151      	cbz	r1, 8007bd6 <_dtoa_r+0x5e>
 8007bc0:	685a      	ldr	r2, [r3, #4]
 8007bc2:	604a      	str	r2, [r1, #4]
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	4093      	lsls	r3, r2
 8007bc8:	608b      	str	r3, [r1, #8]
 8007bca:	4620      	mov	r0, r4
 8007bcc:	f001 fbbc 	bl	8009348 <_Bfree>
 8007bd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	601a      	str	r2, [r3, #0]
 8007bd6:	1e3b      	subs	r3, r7, #0
 8007bd8:	bfaa      	itet	ge
 8007bda:	2300      	movge	r3, #0
 8007bdc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007be0:	f8c8 3000 	strge.w	r3, [r8]
 8007be4:	4b9a      	ldr	r3, [pc, #616]	; (8007e50 <_dtoa_r+0x2d8>)
 8007be6:	bfbc      	itt	lt
 8007be8:	2201      	movlt	r2, #1
 8007bea:	f8c8 2000 	strlt.w	r2, [r8]
 8007bee:	ea33 030b 	bics.w	r3, r3, fp
 8007bf2:	d11b      	bne.n	8007c2c <_dtoa_r+0xb4>
 8007bf4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007bf6:	f242 730f 	movw	r3, #9999	; 0x270f
 8007bfa:	6013      	str	r3, [r2, #0]
 8007bfc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007c00:	4333      	orrs	r3, r6
 8007c02:	f000 8592 	beq.w	800872a <_dtoa_r+0xbb2>
 8007c06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007c08:	b963      	cbnz	r3, 8007c24 <_dtoa_r+0xac>
 8007c0a:	4b92      	ldr	r3, [pc, #584]	; (8007e54 <_dtoa_r+0x2dc>)
 8007c0c:	e022      	b.n	8007c54 <_dtoa_r+0xdc>
 8007c0e:	4b92      	ldr	r3, [pc, #584]	; (8007e58 <_dtoa_r+0x2e0>)
 8007c10:	9301      	str	r3, [sp, #4]
 8007c12:	3308      	adds	r3, #8
 8007c14:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007c16:	6013      	str	r3, [r2, #0]
 8007c18:	9801      	ldr	r0, [sp, #4]
 8007c1a:	b013      	add	sp, #76	; 0x4c
 8007c1c:	ecbd 8b04 	vpop	{d8-d9}
 8007c20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c24:	4b8b      	ldr	r3, [pc, #556]	; (8007e54 <_dtoa_r+0x2dc>)
 8007c26:	9301      	str	r3, [sp, #4]
 8007c28:	3303      	adds	r3, #3
 8007c2a:	e7f3      	b.n	8007c14 <_dtoa_r+0x9c>
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	2300      	movs	r3, #0
 8007c30:	4650      	mov	r0, sl
 8007c32:	4659      	mov	r1, fp
 8007c34:	f7f8 ff58 	bl	8000ae8 <__aeabi_dcmpeq>
 8007c38:	ec4b ab19 	vmov	d9, sl, fp
 8007c3c:	4680      	mov	r8, r0
 8007c3e:	b158      	cbz	r0, 8007c58 <_dtoa_r+0xe0>
 8007c40:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007c42:	2301      	movs	r3, #1
 8007c44:	6013      	str	r3, [r2, #0]
 8007c46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	f000 856b 	beq.w	8008724 <_dtoa_r+0xbac>
 8007c4e:	4883      	ldr	r0, [pc, #524]	; (8007e5c <_dtoa_r+0x2e4>)
 8007c50:	6018      	str	r0, [r3, #0]
 8007c52:	1e43      	subs	r3, r0, #1
 8007c54:	9301      	str	r3, [sp, #4]
 8007c56:	e7df      	b.n	8007c18 <_dtoa_r+0xa0>
 8007c58:	ec4b ab10 	vmov	d0, sl, fp
 8007c5c:	aa10      	add	r2, sp, #64	; 0x40
 8007c5e:	a911      	add	r1, sp, #68	; 0x44
 8007c60:	4620      	mov	r0, r4
 8007c62:	f001 ff1f 	bl	8009aa4 <__d2b>
 8007c66:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007c6a:	ee08 0a10 	vmov	s16, r0
 8007c6e:	2d00      	cmp	r5, #0
 8007c70:	f000 8084 	beq.w	8007d7c <_dtoa_r+0x204>
 8007c74:	ee19 3a90 	vmov	r3, s19
 8007c78:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007c7c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007c80:	4656      	mov	r6, sl
 8007c82:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007c86:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007c8a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007c8e:	4b74      	ldr	r3, [pc, #464]	; (8007e60 <_dtoa_r+0x2e8>)
 8007c90:	2200      	movs	r2, #0
 8007c92:	4630      	mov	r0, r6
 8007c94:	4639      	mov	r1, r7
 8007c96:	f7f8 fb07 	bl	80002a8 <__aeabi_dsub>
 8007c9a:	a365      	add	r3, pc, #404	; (adr r3, 8007e30 <_dtoa_r+0x2b8>)
 8007c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ca0:	f7f8 fcba 	bl	8000618 <__aeabi_dmul>
 8007ca4:	a364      	add	r3, pc, #400	; (adr r3, 8007e38 <_dtoa_r+0x2c0>)
 8007ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007caa:	f7f8 faff 	bl	80002ac <__adddf3>
 8007cae:	4606      	mov	r6, r0
 8007cb0:	4628      	mov	r0, r5
 8007cb2:	460f      	mov	r7, r1
 8007cb4:	f7f8 fc46 	bl	8000544 <__aeabi_i2d>
 8007cb8:	a361      	add	r3, pc, #388	; (adr r3, 8007e40 <_dtoa_r+0x2c8>)
 8007cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cbe:	f7f8 fcab 	bl	8000618 <__aeabi_dmul>
 8007cc2:	4602      	mov	r2, r0
 8007cc4:	460b      	mov	r3, r1
 8007cc6:	4630      	mov	r0, r6
 8007cc8:	4639      	mov	r1, r7
 8007cca:	f7f8 faef 	bl	80002ac <__adddf3>
 8007cce:	4606      	mov	r6, r0
 8007cd0:	460f      	mov	r7, r1
 8007cd2:	f7f8 ff51 	bl	8000b78 <__aeabi_d2iz>
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	9000      	str	r0, [sp, #0]
 8007cda:	2300      	movs	r3, #0
 8007cdc:	4630      	mov	r0, r6
 8007cde:	4639      	mov	r1, r7
 8007ce0:	f7f8 ff0c 	bl	8000afc <__aeabi_dcmplt>
 8007ce4:	b150      	cbz	r0, 8007cfc <_dtoa_r+0x184>
 8007ce6:	9800      	ldr	r0, [sp, #0]
 8007ce8:	f7f8 fc2c 	bl	8000544 <__aeabi_i2d>
 8007cec:	4632      	mov	r2, r6
 8007cee:	463b      	mov	r3, r7
 8007cf0:	f7f8 fefa 	bl	8000ae8 <__aeabi_dcmpeq>
 8007cf4:	b910      	cbnz	r0, 8007cfc <_dtoa_r+0x184>
 8007cf6:	9b00      	ldr	r3, [sp, #0]
 8007cf8:	3b01      	subs	r3, #1
 8007cfa:	9300      	str	r3, [sp, #0]
 8007cfc:	9b00      	ldr	r3, [sp, #0]
 8007cfe:	2b16      	cmp	r3, #22
 8007d00:	d85a      	bhi.n	8007db8 <_dtoa_r+0x240>
 8007d02:	9a00      	ldr	r2, [sp, #0]
 8007d04:	4b57      	ldr	r3, [pc, #348]	; (8007e64 <_dtoa_r+0x2ec>)
 8007d06:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d0e:	ec51 0b19 	vmov	r0, r1, d9
 8007d12:	f7f8 fef3 	bl	8000afc <__aeabi_dcmplt>
 8007d16:	2800      	cmp	r0, #0
 8007d18:	d050      	beq.n	8007dbc <_dtoa_r+0x244>
 8007d1a:	9b00      	ldr	r3, [sp, #0]
 8007d1c:	3b01      	subs	r3, #1
 8007d1e:	9300      	str	r3, [sp, #0]
 8007d20:	2300      	movs	r3, #0
 8007d22:	930b      	str	r3, [sp, #44]	; 0x2c
 8007d24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007d26:	1b5d      	subs	r5, r3, r5
 8007d28:	1e6b      	subs	r3, r5, #1
 8007d2a:	9305      	str	r3, [sp, #20]
 8007d2c:	bf45      	ittet	mi
 8007d2e:	f1c5 0301 	rsbmi	r3, r5, #1
 8007d32:	9304      	strmi	r3, [sp, #16]
 8007d34:	2300      	movpl	r3, #0
 8007d36:	2300      	movmi	r3, #0
 8007d38:	bf4c      	ite	mi
 8007d3a:	9305      	strmi	r3, [sp, #20]
 8007d3c:	9304      	strpl	r3, [sp, #16]
 8007d3e:	9b00      	ldr	r3, [sp, #0]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	db3d      	blt.n	8007dc0 <_dtoa_r+0x248>
 8007d44:	9b05      	ldr	r3, [sp, #20]
 8007d46:	9a00      	ldr	r2, [sp, #0]
 8007d48:	920a      	str	r2, [sp, #40]	; 0x28
 8007d4a:	4413      	add	r3, r2
 8007d4c:	9305      	str	r3, [sp, #20]
 8007d4e:	2300      	movs	r3, #0
 8007d50:	9307      	str	r3, [sp, #28]
 8007d52:	9b06      	ldr	r3, [sp, #24]
 8007d54:	2b09      	cmp	r3, #9
 8007d56:	f200 8089 	bhi.w	8007e6c <_dtoa_r+0x2f4>
 8007d5a:	2b05      	cmp	r3, #5
 8007d5c:	bfc4      	itt	gt
 8007d5e:	3b04      	subgt	r3, #4
 8007d60:	9306      	strgt	r3, [sp, #24]
 8007d62:	9b06      	ldr	r3, [sp, #24]
 8007d64:	f1a3 0302 	sub.w	r3, r3, #2
 8007d68:	bfcc      	ite	gt
 8007d6a:	2500      	movgt	r5, #0
 8007d6c:	2501      	movle	r5, #1
 8007d6e:	2b03      	cmp	r3, #3
 8007d70:	f200 8087 	bhi.w	8007e82 <_dtoa_r+0x30a>
 8007d74:	e8df f003 	tbb	[pc, r3]
 8007d78:	59383a2d 	.word	0x59383a2d
 8007d7c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007d80:	441d      	add	r5, r3
 8007d82:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007d86:	2b20      	cmp	r3, #32
 8007d88:	bfc1      	itttt	gt
 8007d8a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007d8e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007d92:	fa0b f303 	lslgt.w	r3, fp, r3
 8007d96:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007d9a:	bfda      	itte	le
 8007d9c:	f1c3 0320 	rsble	r3, r3, #32
 8007da0:	fa06 f003 	lslle.w	r0, r6, r3
 8007da4:	4318      	orrgt	r0, r3
 8007da6:	f7f8 fbbd 	bl	8000524 <__aeabi_ui2d>
 8007daa:	2301      	movs	r3, #1
 8007dac:	4606      	mov	r6, r0
 8007dae:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007db2:	3d01      	subs	r5, #1
 8007db4:	930e      	str	r3, [sp, #56]	; 0x38
 8007db6:	e76a      	b.n	8007c8e <_dtoa_r+0x116>
 8007db8:	2301      	movs	r3, #1
 8007dba:	e7b2      	b.n	8007d22 <_dtoa_r+0x1aa>
 8007dbc:	900b      	str	r0, [sp, #44]	; 0x2c
 8007dbe:	e7b1      	b.n	8007d24 <_dtoa_r+0x1ac>
 8007dc0:	9b04      	ldr	r3, [sp, #16]
 8007dc2:	9a00      	ldr	r2, [sp, #0]
 8007dc4:	1a9b      	subs	r3, r3, r2
 8007dc6:	9304      	str	r3, [sp, #16]
 8007dc8:	4253      	negs	r3, r2
 8007dca:	9307      	str	r3, [sp, #28]
 8007dcc:	2300      	movs	r3, #0
 8007dce:	930a      	str	r3, [sp, #40]	; 0x28
 8007dd0:	e7bf      	b.n	8007d52 <_dtoa_r+0x1da>
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	9308      	str	r3, [sp, #32]
 8007dd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	dc55      	bgt.n	8007e88 <_dtoa_r+0x310>
 8007ddc:	2301      	movs	r3, #1
 8007dde:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007de2:	461a      	mov	r2, r3
 8007de4:	9209      	str	r2, [sp, #36]	; 0x24
 8007de6:	e00c      	b.n	8007e02 <_dtoa_r+0x28a>
 8007de8:	2301      	movs	r3, #1
 8007dea:	e7f3      	b.n	8007dd4 <_dtoa_r+0x25c>
 8007dec:	2300      	movs	r3, #0
 8007dee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007df0:	9308      	str	r3, [sp, #32]
 8007df2:	9b00      	ldr	r3, [sp, #0]
 8007df4:	4413      	add	r3, r2
 8007df6:	9302      	str	r3, [sp, #8]
 8007df8:	3301      	adds	r3, #1
 8007dfa:	2b01      	cmp	r3, #1
 8007dfc:	9303      	str	r3, [sp, #12]
 8007dfe:	bfb8      	it	lt
 8007e00:	2301      	movlt	r3, #1
 8007e02:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007e04:	2200      	movs	r2, #0
 8007e06:	6042      	str	r2, [r0, #4]
 8007e08:	2204      	movs	r2, #4
 8007e0a:	f102 0614 	add.w	r6, r2, #20
 8007e0e:	429e      	cmp	r6, r3
 8007e10:	6841      	ldr	r1, [r0, #4]
 8007e12:	d93d      	bls.n	8007e90 <_dtoa_r+0x318>
 8007e14:	4620      	mov	r0, r4
 8007e16:	f001 fa57 	bl	80092c8 <_Balloc>
 8007e1a:	9001      	str	r0, [sp, #4]
 8007e1c:	2800      	cmp	r0, #0
 8007e1e:	d13b      	bne.n	8007e98 <_dtoa_r+0x320>
 8007e20:	4b11      	ldr	r3, [pc, #68]	; (8007e68 <_dtoa_r+0x2f0>)
 8007e22:	4602      	mov	r2, r0
 8007e24:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007e28:	e6c0      	b.n	8007bac <_dtoa_r+0x34>
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	e7df      	b.n	8007dee <_dtoa_r+0x276>
 8007e2e:	bf00      	nop
 8007e30:	636f4361 	.word	0x636f4361
 8007e34:	3fd287a7 	.word	0x3fd287a7
 8007e38:	8b60c8b3 	.word	0x8b60c8b3
 8007e3c:	3fc68a28 	.word	0x3fc68a28
 8007e40:	509f79fb 	.word	0x509f79fb
 8007e44:	3fd34413 	.word	0x3fd34413
 8007e48:	0800a94e 	.word	0x0800a94e
 8007e4c:	0800a965 	.word	0x0800a965
 8007e50:	7ff00000 	.word	0x7ff00000
 8007e54:	0800a94a 	.word	0x0800a94a
 8007e58:	0800a941 	.word	0x0800a941
 8007e5c:	0800a7c5 	.word	0x0800a7c5
 8007e60:	3ff80000 	.word	0x3ff80000
 8007e64:	0800ab38 	.word	0x0800ab38
 8007e68:	0800a9c0 	.word	0x0800a9c0
 8007e6c:	2501      	movs	r5, #1
 8007e6e:	2300      	movs	r3, #0
 8007e70:	9306      	str	r3, [sp, #24]
 8007e72:	9508      	str	r5, [sp, #32]
 8007e74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007e78:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	2312      	movs	r3, #18
 8007e80:	e7b0      	b.n	8007de4 <_dtoa_r+0x26c>
 8007e82:	2301      	movs	r3, #1
 8007e84:	9308      	str	r3, [sp, #32]
 8007e86:	e7f5      	b.n	8007e74 <_dtoa_r+0x2fc>
 8007e88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e8a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007e8e:	e7b8      	b.n	8007e02 <_dtoa_r+0x28a>
 8007e90:	3101      	adds	r1, #1
 8007e92:	6041      	str	r1, [r0, #4]
 8007e94:	0052      	lsls	r2, r2, #1
 8007e96:	e7b8      	b.n	8007e0a <_dtoa_r+0x292>
 8007e98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e9a:	9a01      	ldr	r2, [sp, #4]
 8007e9c:	601a      	str	r2, [r3, #0]
 8007e9e:	9b03      	ldr	r3, [sp, #12]
 8007ea0:	2b0e      	cmp	r3, #14
 8007ea2:	f200 809d 	bhi.w	8007fe0 <_dtoa_r+0x468>
 8007ea6:	2d00      	cmp	r5, #0
 8007ea8:	f000 809a 	beq.w	8007fe0 <_dtoa_r+0x468>
 8007eac:	9b00      	ldr	r3, [sp, #0]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	dd32      	ble.n	8007f18 <_dtoa_r+0x3a0>
 8007eb2:	4ab7      	ldr	r2, [pc, #732]	; (8008190 <_dtoa_r+0x618>)
 8007eb4:	f003 030f 	and.w	r3, r3, #15
 8007eb8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007ebc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007ec0:	9b00      	ldr	r3, [sp, #0]
 8007ec2:	05d8      	lsls	r0, r3, #23
 8007ec4:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007ec8:	d516      	bpl.n	8007ef8 <_dtoa_r+0x380>
 8007eca:	4bb2      	ldr	r3, [pc, #712]	; (8008194 <_dtoa_r+0x61c>)
 8007ecc:	ec51 0b19 	vmov	r0, r1, d9
 8007ed0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007ed4:	f7f8 fcca 	bl	800086c <__aeabi_ddiv>
 8007ed8:	f007 070f 	and.w	r7, r7, #15
 8007edc:	4682      	mov	sl, r0
 8007ede:	468b      	mov	fp, r1
 8007ee0:	2503      	movs	r5, #3
 8007ee2:	4eac      	ldr	r6, [pc, #688]	; (8008194 <_dtoa_r+0x61c>)
 8007ee4:	b957      	cbnz	r7, 8007efc <_dtoa_r+0x384>
 8007ee6:	4642      	mov	r2, r8
 8007ee8:	464b      	mov	r3, r9
 8007eea:	4650      	mov	r0, sl
 8007eec:	4659      	mov	r1, fp
 8007eee:	f7f8 fcbd 	bl	800086c <__aeabi_ddiv>
 8007ef2:	4682      	mov	sl, r0
 8007ef4:	468b      	mov	fp, r1
 8007ef6:	e028      	b.n	8007f4a <_dtoa_r+0x3d2>
 8007ef8:	2502      	movs	r5, #2
 8007efa:	e7f2      	b.n	8007ee2 <_dtoa_r+0x36a>
 8007efc:	07f9      	lsls	r1, r7, #31
 8007efe:	d508      	bpl.n	8007f12 <_dtoa_r+0x39a>
 8007f00:	4640      	mov	r0, r8
 8007f02:	4649      	mov	r1, r9
 8007f04:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007f08:	f7f8 fb86 	bl	8000618 <__aeabi_dmul>
 8007f0c:	3501      	adds	r5, #1
 8007f0e:	4680      	mov	r8, r0
 8007f10:	4689      	mov	r9, r1
 8007f12:	107f      	asrs	r7, r7, #1
 8007f14:	3608      	adds	r6, #8
 8007f16:	e7e5      	b.n	8007ee4 <_dtoa_r+0x36c>
 8007f18:	f000 809b 	beq.w	8008052 <_dtoa_r+0x4da>
 8007f1c:	9b00      	ldr	r3, [sp, #0]
 8007f1e:	4f9d      	ldr	r7, [pc, #628]	; (8008194 <_dtoa_r+0x61c>)
 8007f20:	425e      	negs	r6, r3
 8007f22:	4b9b      	ldr	r3, [pc, #620]	; (8008190 <_dtoa_r+0x618>)
 8007f24:	f006 020f 	and.w	r2, r6, #15
 8007f28:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f30:	ec51 0b19 	vmov	r0, r1, d9
 8007f34:	f7f8 fb70 	bl	8000618 <__aeabi_dmul>
 8007f38:	1136      	asrs	r6, r6, #4
 8007f3a:	4682      	mov	sl, r0
 8007f3c:	468b      	mov	fp, r1
 8007f3e:	2300      	movs	r3, #0
 8007f40:	2502      	movs	r5, #2
 8007f42:	2e00      	cmp	r6, #0
 8007f44:	d17a      	bne.n	800803c <_dtoa_r+0x4c4>
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d1d3      	bne.n	8007ef2 <_dtoa_r+0x37a>
 8007f4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	f000 8082 	beq.w	8008056 <_dtoa_r+0x4de>
 8007f52:	4b91      	ldr	r3, [pc, #580]	; (8008198 <_dtoa_r+0x620>)
 8007f54:	2200      	movs	r2, #0
 8007f56:	4650      	mov	r0, sl
 8007f58:	4659      	mov	r1, fp
 8007f5a:	f7f8 fdcf 	bl	8000afc <__aeabi_dcmplt>
 8007f5e:	2800      	cmp	r0, #0
 8007f60:	d079      	beq.n	8008056 <_dtoa_r+0x4de>
 8007f62:	9b03      	ldr	r3, [sp, #12]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d076      	beq.n	8008056 <_dtoa_r+0x4de>
 8007f68:	9b02      	ldr	r3, [sp, #8]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	dd36      	ble.n	8007fdc <_dtoa_r+0x464>
 8007f6e:	9b00      	ldr	r3, [sp, #0]
 8007f70:	4650      	mov	r0, sl
 8007f72:	4659      	mov	r1, fp
 8007f74:	1e5f      	subs	r7, r3, #1
 8007f76:	2200      	movs	r2, #0
 8007f78:	4b88      	ldr	r3, [pc, #544]	; (800819c <_dtoa_r+0x624>)
 8007f7a:	f7f8 fb4d 	bl	8000618 <__aeabi_dmul>
 8007f7e:	9e02      	ldr	r6, [sp, #8]
 8007f80:	4682      	mov	sl, r0
 8007f82:	468b      	mov	fp, r1
 8007f84:	3501      	adds	r5, #1
 8007f86:	4628      	mov	r0, r5
 8007f88:	f7f8 fadc 	bl	8000544 <__aeabi_i2d>
 8007f8c:	4652      	mov	r2, sl
 8007f8e:	465b      	mov	r3, fp
 8007f90:	f7f8 fb42 	bl	8000618 <__aeabi_dmul>
 8007f94:	4b82      	ldr	r3, [pc, #520]	; (80081a0 <_dtoa_r+0x628>)
 8007f96:	2200      	movs	r2, #0
 8007f98:	f7f8 f988 	bl	80002ac <__adddf3>
 8007f9c:	46d0      	mov	r8, sl
 8007f9e:	46d9      	mov	r9, fp
 8007fa0:	4682      	mov	sl, r0
 8007fa2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007fa6:	2e00      	cmp	r6, #0
 8007fa8:	d158      	bne.n	800805c <_dtoa_r+0x4e4>
 8007faa:	4b7e      	ldr	r3, [pc, #504]	; (80081a4 <_dtoa_r+0x62c>)
 8007fac:	2200      	movs	r2, #0
 8007fae:	4640      	mov	r0, r8
 8007fb0:	4649      	mov	r1, r9
 8007fb2:	f7f8 f979 	bl	80002a8 <__aeabi_dsub>
 8007fb6:	4652      	mov	r2, sl
 8007fb8:	465b      	mov	r3, fp
 8007fba:	4680      	mov	r8, r0
 8007fbc:	4689      	mov	r9, r1
 8007fbe:	f7f8 fdbb 	bl	8000b38 <__aeabi_dcmpgt>
 8007fc2:	2800      	cmp	r0, #0
 8007fc4:	f040 8295 	bne.w	80084f2 <_dtoa_r+0x97a>
 8007fc8:	4652      	mov	r2, sl
 8007fca:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007fce:	4640      	mov	r0, r8
 8007fd0:	4649      	mov	r1, r9
 8007fd2:	f7f8 fd93 	bl	8000afc <__aeabi_dcmplt>
 8007fd6:	2800      	cmp	r0, #0
 8007fd8:	f040 8289 	bne.w	80084ee <_dtoa_r+0x976>
 8007fdc:	ec5b ab19 	vmov	sl, fp, d9
 8007fe0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	f2c0 8148 	blt.w	8008278 <_dtoa_r+0x700>
 8007fe8:	9a00      	ldr	r2, [sp, #0]
 8007fea:	2a0e      	cmp	r2, #14
 8007fec:	f300 8144 	bgt.w	8008278 <_dtoa_r+0x700>
 8007ff0:	4b67      	ldr	r3, [pc, #412]	; (8008190 <_dtoa_r+0x618>)
 8007ff2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ff6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007ffa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	f280 80d5 	bge.w	80081ac <_dtoa_r+0x634>
 8008002:	9b03      	ldr	r3, [sp, #12]
 8008004:	2b00      	cmp	r3, #0
 8008006:	f300 80d1 	bgt.w	80081ac <_dtoa_r+0x634>
 800800a:	f040 826f 	bne.w	80084ec <_dtoa_r+0x974>
 800800e:	4b65      	ldr	r3, [pc, #404]	; (80081a4 <_dtoa_r+0x62c>)
 8008010:	2200      	movs	r2, #0
 8008012:	4640      	mov	r0, r8
 8008014:	4649      	mov	r1, r9
 8008016:	f7f8 faff 	bl	8000618 <__aeabi_dmul>
 800801a:	4652      	mov	r2, sl
 800801c:	465b      	mov	r3, fp
 800801e:	f7f8 fd81 	bl	8000b24 <__aeabi_dcmpge>
 8008022:	9e03      	ldr	r6, [sp, #12]
 8008024:	4637      	mov	r7, r6
 8008026:	2800      	cmp	r0, #0
 8008028:	f040 8245 	bne.w	80084b6 <_dtoa_r+0x93e>
 800802c:	9d01      	ldr	r5, [sp, #4]
 800802e:	2331      	movs	r3, #49	; 0x31
 8008030:	f805 3b01 	strb.w	r3, [r5], #1
 8008034:	9b00      	ldr	r3, [sp, #0]
 8008036:	3301      	adds	r3, #1
 8008038:	9300      	str	r3, [sp, #0]
 800803a:	e240      	b.n	80084be <_dtoa_r+0x946>
 800803c:	07f2      	lsls	r2, r6, #31
 800803e:	d505      	bpl.n	800804c <_dtoa_r+0x4d4>
 8008040:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008044:	f7f8 fae8 	bl	8000618 <__aeabi_dmul>
 8008048:	3501      	adds	r5, #1
 800804a:	2301      	movs	r3, #1
 800804c:	1076      	asrs	r6, r6, #1
 800804e:	3708      	adds	r7, #8
 8008050:	e777      	b.n	8007f42 <_dtoa_r+0x3ca>
 8008052:	2502      	movs	r5, #2
 8008054:	e779      	b.n	8007f4a <_dtoa_r+0x3d2>
 8008056:	9f00      	ldr	r7, [sp, #0]
 8008058:	9e03      	ldr	r6, [sp, #12]
 800805a:	e794      	b.n	8007f86 <_dtoa_r+0x40e>
 800805c:	9901      	ldr	r1, [sp, #4]
 800805e:	4b4c      	ldr	r3, [pc, #304]	; (8008190 <_dtoa_r+0x618>)
 8008060:	4431      	add	r1, r6
 8008062:	910d      	str	r1, [sp, #52]	; 0x34
 8008064:	9908      	ldr	r1, [sp, #32]
 8008066:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800806a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800806e:	2900      	cmp	r1, #0
 8008070:	d043      	beq.n	80080fa <_dtoa_r+0x582>
 8008072:	494d      	ldr	r1, [pc, #308]	; (80081a8 <_dtoa_r+0x630>)
 8008074:	2000      	movs	r0, #0
 8008076:	f7f8 fbf9 	bl	800086c <__aeabi_ddiv>
 800807a:	4652      	mov	r2, sl
 800807c:	465b      	mov	r3, fp
 800807e:	f7f8 f913 	bl	80002a8 <__aeabi_dsub>
 8008082:	9d01      	ldr	r5, [sp, #4]
 8008084:	4682      	mov	sl, r0
 8008086:	468b      	mov	fp, r1
 8008088:	4649      	mov	r1, r9
 800808a:	4640      	mov	r0, r8
 800808c:	f7f8 fd74 	bl	8000b78 <__aeabi_d2iz>
 8008090:	4606      	mov	r6, r0
 8008092:	f7f8 fa57 	bl	8000544 <__aeabi_i2d>
 8008096:	4602      	mov	r2, r0
 8008098:	460b      	mov	r3, r1
 800809a:	4640      	mov	r0, r8
 800809c:	4649      	mov	r1, r9
 800809e:	f7f8 f903 	bl	80002a8 <__aeabi_dsub>
 80080a2:	3630      	adds	r6, #48	; 0x30
 80080a4:	f805 6b01 	strb.w	r6, [r5], #1
 80080a8:	4652      	mov	r2, sl
 80080aa:	465b      	mov	r3, fp
 80080ac:	4680      	mov	r8, r0
 80080ae:	4689      	mov	r9, r1
 80080b0:	f7f8 fd24 	bl	8000afc <__aeabi_dcmplt>
 80080b4:	2800      	cmp	r0, #0
 80080b6:	d163      	bne.n	8008180 <_dtoa_r+0x608>
 80080b8:	4642      	mov	r2, r8
 80080ba:	464b      	mov	r3, r9
 80080bc:	4936      	ldr	r1, [pc, #216]	; (8008198 <_dtoa_r+0x620>)
 80080be:	2000      	movs	r0, #0
 80080c0:	f7f8 f8f2 	bl	80002a8 <__aeabi_dsub>
 80080c4:	4652      	mov	r2, sl
 80080c6:	465b      	mov	r3, fp
 80080c8:	f7f8 fd18 	bl	8000afc <__aeabi_dcmplt>
 80080cc:	2800      	cmp	r0, #0
 80080ce:	f040 80b5 	bne.w	800823c <_dtoa_r+0x6c4>
 80080d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80080d4:	429d      	cmp	r5, r3
 80080d6:	d081      	beq.n	8007fdc <_dtoa_r+0x464>
 80080d8:	4b30      	ldr	r3, [pc, #192]	; (800819c <_dtoa_r+0x624>)
 80080da:	2200      	movs	r2, #0
 80080dc:	4650      	mov	r0, sl
 80080de:	4659      	mov	r1, fp
 80080e0:	f7f8 fa9a 	bl	8000618 <__aeabi_dmul>
 80080e4:	4b2d      	ldr	r3, [pc, #180]	; (800819c <_dtoa_r+0x624>)
 80080e6:	4682      	mov	sl, r0
 80080e8:	468b      	mov	fp, r1
 80080ea:	4640      	mov	r0, r8
 80080ec:	4649      	mov	r1, r9
 80080ee:	2200      	movs	r2, #0
 80080f0:	f7f8 fa92 	bl	8000618 <__aeabi_dmul>
 80080f4:	4680      	mov	r8, r0
 80080f6:	4689      	mov	r9, r1
 80080f8:	e7c6      	b.n	8008088 <_dtoa_r+0x510>
 80080fa:	4650      	mov	r0, sl
 80080fc:	4659      	mov	r1, fp
 80080fe:	f7f8 fa8b 	bl	8000618 <__aeabi_dmul>
 8008102:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008104:	9d01      	ldr	r5, [sp, #4]
 8008106:	930f      	str	r3, [sp, #60]	; 0x3c
 8008108:	4682      	mov	sl, r0
 800810a:	468b      	mov	fp, r1
 800810c:	4649      	mov	r1, r9
 800810e:	4640      	mov	r0, r8
 8008110:	f7f8 fd32 	bl	8000b78 <__aeabi_d2iz>
 8008114:	4606      	mov	r6, r0
 8008116:	f7f8 fa15 	bl	8000544 <__aeabi_i2d>
 800811a:	3630      	adds	r6, #48	; 0x30
 800811c:	4602      	mov	r2, r0
 800811e:	460b      	mov	r3, r1
 8008120:	4640      	mov	r0, r8
 8008122:	4649      	mov	r1, r9
 8008124:	f7f8 f8c0 	bl	80002a8 <__aeabi_dsub>
 8008128:	f805 6b01 	strb.w	r6, [r5], #1
 800812c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800812e:	429d      	cmp	r5, r3
 8008130:	4680      	mov	r8, r0
 8008132:	4689      	mov	r9, r1
 8008134:	f04f 0200 	mov.w	r2, #0
 8008138:	d124      	bne.n	8008184 <_dtoa_r+0x60c>
 800813a:	4b1b      	ldr	r3, [pc, #108]	; (80081a8 <_dtoa_r+0x630>)
 800813c:	4650      	mov	r0, sl
 800813e:	4659      	mov	r1, fp
 8008140:	f7f8 f8b4 	bl	80002ac <__adddf3>
 8008144:	4602      	mov	r2, r0
 8008146:	460b      	mov	r3, r1
 8008148:	4640      	mov	r0, r8
 800814a:	4649      	mov	r1, r9
 800814c:	f7f8 fcf4 	bl	8000b38 <__aeabi_dcmpgt>
 8008150:	2800      	cmp	r0, #0
 8008152:	d173      	bne.n	800823c <_dtoa_r+0x6c4>
 8008154:	4652      	mov	r2, sl
 8008156:	465b      	mov	r3, fp
 8008158:	4913      	ldr	r1, [pc, #76]	; (80081a8 <_dtoa_r+0x630>)
 800815a:	2000      	movs	r0, #0
 800815c:	f7f8 f8a4 	bl	80002a8 <__aeabi_dsub>
 8008160:	4602      	mov	r2, r0
 8008162:	460b      	mov	r3, r1
 8008164:	4640      	mov	r0, r8
 8008166:	4649      	mov	r1, r9
 8008168:	f7f8 fcc8 	bl	8000afc <__aeabi_dcmplt>
 800816c:	2800      	cmp	r0, #0
 800816e:	f43f af35 	beq.w	8007fdc <_dtoa_r+0x464>
 8008172:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008174:	1e6b      	subs	r3, r5, #1
 8008176:	930f      	str	r3, [sp, #60]	; 0x3c
 8008178:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800817c:	2b30      	cmp	r3, #48	; 0x30
 800817e:	d0f8      	beq.n	8008172 <_dtoa_r+0x5fa>
 8008180:	9700      	str	r7, [sp, #0]
 8008182:	e049      	b.n	8008218 <_dtoa_r+0x6a0>
 8008184:	4b05      	ldr	r3, [pc, #20]	; (800819c <_dtoa_r+0x624>)
 8008186:	f7f8 fa47 	bl	8000618 <__aeabi_dmul>
 800818a:	4680      	mov	r8, r0
 800818c:	4689      	mov	r9, r1
 800818e:	e7bd      	b.n	800810c <_dtoa_r+0x594>
 8008190:	0800ab38 	.word	0x0800ab38
 8008194:	0800ab10 	.word	0x0800ab10
 8008198:	3ff00000 	.word	0x3ff00000
 800819c:	40240000 	.word	0x40240000
 80081a0:	401c0000 	.word	0x401c0000
 80081a4:	40140000 	.word	0x40140000
 80081a8:	3fe00000 	.word	0x3fe00000
 80081ac:	9d01      	ldr	r5, [sp, #4]
 80081ae:	4656      	mov	r6, sl
 80081b0:	465f      	mov	r7, fp
 80081b2:	4642      	mov	r2, r8
 80081b4:	464b      	mov	r3, r9
 80081b6:	4630      	mov	r0, r6
 80081b8:	4639      	mov	r1, r7
 80081ba:	f7f8 fb57 	bl	800086c <__aeabi_ddiv>
 80081be:	f7f8 fcdb 	bl	8000b78 <__aeabi_d2iz>
 80081c2:	4682      	mov	sl, r0
 80081c4:	f7f8 f9be 	bl	8000544 <__aeabi_i2d>
 80081c8:	4642      	mov	r2, r8
 80081ca:	464b      	mov	r3, r9
 80081cc:	f7f8 fa24 	bl	8000618 <__aeabi_dmul>
 80081d0:	4602      	mov	r2, r0
 80081d2:	460b      	mov	r3, r1
 80081d4:	4630      	mov	r0, r6
 80081d6:	4639      	mov	r1, r7
 80081d8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80081dc:	f7f8 f864 	bl	80002a8 <__aeabi_dsub>
 80081e0:	f805 6b01 	strb.w	r6, [r5], #1
 80081e4:	9e01      	ldr	r6, [sp, #4]
 80081e6:	9f03      	ldr	r7, [sp, #12]
 80081e8:	1bae      	subs	r6, r5, r6
 80081ea:	42b7      	cmp	r7, r6
 80081ec:	4602      	mov	r2, r0
 80081ee:	460b      	mov	r3, r1
 80081f0:	d135      	bne.n	800825e <_dtoa_r+0x6e6>
 80081f2:	f7f8 f85b 	bl	80002ac <__adddf3>
 80081f6:	4642      	mov	r2, r8
 80081f8:	464b      	mov	r3, r9
 80081fa:	4606      	mov	r6, r0
 80081fc:	460f      	mov	r7, r1
 80081fe:	f7f8 fc9b 	bl	8000b38 <__aeabi_dcmpgt>
 8008202:	b9d0      	cbnz	r0, 800823a <_dtoa_r+0x6c2>
 8008204:	4642      	mov	r2, r8
 8008206:	464b      	mov	r3, r9
 8008208:	4630      	mov	r0, r6
 800820a:	4639      	mov	r1, r7
 800820c:	f7f8 fc6c 	bl	8000ae8 <__aeabi_dcmpeq>
 8008210:	b110      	cbz	r0, 8008218 <_dtoa_r+0x6a0>
 8008212:	f01a 0f01 	tst.w	sl, #1
 8008216:	d110      	bne.n	800823a <_dtoa_r+0x6c2>
 8008218:	4620      	mov	r0, r4
 800821a:	ee18 1a10 	vmov	r1, s16
 800821e:	f001 f893 	bl	8009348 <_Bfree>
 8008222:	2300      	movs	r3, #0
 8008224:	9800      	ldr	r0, [sp, #0]
 8008226:	702b      	strb	r3, [r5, #0]
 8008228:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800822a:	3001      	adds	r0, #1
 800822c:	6018      	str	r0, [r3, #0]
 800822e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008230:	2b00      	cmp	r3, #0
 8008232:	f43f acf1 	beq.w	8007c18 <_dtoa_r+0xa0>
 8008236:	601d      	str	r5, [r3, #0]
 8008238:	e4ee      	b.n	8007c18 <_dtoa_r+0xa0>
 800823a:	9f00      	ldr	r7, [sp, #0]
 800823c:	462b      	mov	r3, r5
 800823e:	461d      	mov	r5, r3
 8008240:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008244:	2a39      	cmp	r2, #57	; 0x39
 8008246:	d106      	bne.n	8008256 <_dtoa_r+0x6de>
 8008248:	9a01      	ldr	r2, [sp, #4]
 800824a:	429a      	cmp	r2, r3
 800824c:	d1f7      	bne.n	800823e <_dtoa_r+0x6c6>
 800824e:	9901      	ldr	r1, [sp, #4]
 8008250:	2230      	movs	r2, #48	; 0x30
 8008252:	3701      	adds	r7, #1
 8008254:	700a      	strb	r2, [r1, #0]
 8008256:	781a      	ldrb	r2, [r3, #0]
 8008258:	3201      	adds	r2, #1
 800825a:	701a      	strb	r2, [r3, #0]
 800825c:	e790      	b.n	8008180 <_dtoa_r+0x608>
 800825e:	4ba6      	ldr	r3, [pc, #664]	; (80084f8 <_dtoa_r+0x980>)
 8008260:	2200      	movs	r2, #0
 8008262:	f7f8 f9d9 	bl	8000618 <__aeabi_dmul>
 8008266:	2200      	movs	r2, #0
 8008268:	2300      	movs	r3, #0
 800826a:	4606      	mov	r6, r0
 800826c:	460f      	mov	r7, r1
 800826e:	f7f8 fc3b 	bl	8000ae8 <__aeabi_dcmpeq>
 8008272:	2800      	cmp	r0, #0
 8008274:	d09d      	beq.n	80081b2 <_dtoa_r+0x63a>
 8008276:	e7cf      	b.n	8008218 <_dtoa_r+0x6a0>
 8008278:	9a08      	ldr	r2, [sp, #32]
 800827a:	2a00      	cmp	r2, #0
 800827c:	f000 80d7 	beq.w	800842e <_dtoa_r+0x8b6>
 8008280:	9a06      	ldr	r2, [sp, #24]
 8008282:	2a01      	cmp	r2, #1
 8008284:	f300 80ba 	bgt.w	80083fc <_dtoa_r+0x884>
 8008288:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800828a:	2a00      	cmp	r2, #0
 800828c:	f000 80b2 	beq.w	80083f4 <_dtoa_r+0x87c>
 8008290:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008294:	9e07      	ldr	r6, [sp, #28]
 8008296:	9d04      	ldr	r5, [sp, #16]
 8008298:	9a04      	ldr	r2, [sp, #16]
 800829a:	441a      	add	r2, r3
 800829c:	9204      	str	r2, [sp, #16]
 800829e:	9a05      	ldr	r2, [sp, #20]
 80082a0:	2101      	movs	r1, #1
 80082a2:	441a      	add	r2, r3
 80082a4:	4620      	mov	r0, r4
 80082a6:	9205      	str	r2, [sp, #20]
 80082a8:	f001 f950 	bl	800954c <__i2b>
 80082ac:	4607      	mov	r7, r0
 80082ae:	2d00      	cmp	r5, #0
 80082b0:	dd0c      	ble.n	80082cc <_dtoa_r+0x754>
 80082b2:	9b05      	ldr	r3, [sp, #20]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	dd09      	ble.n	80082cc <_dtoa_r+0x754>
 80082b8:	42ab      	cmp	r3, r5
 80082ba:	9a04      	ldr	r2, [sp, #16]
 80082bc:	bfa8      	it	ge
 80082be:	462b      	movge	r3, r5
 80082c0:	1ad2      	subs	r2, r2, r3
 80082c2:	9204      	str	r2, [sp, #16]
 80082c4:	9a05      	ldr	r2, [sp, #20]
 80082c6:	1aed      	subs	r5, r5, r3
 80082c8:	1ad3      	subs	r3, r2, r3
 80082ca:	9305      	str	r3, [sp, #20]
 80082cc:	9b07      	ldr	r3, [sp, #28]
 80082ce:	b31b      	cbz	r3, 8008318 <_dtoa_r+0x7a0>
 80082d0:	9b08      	ldr	r3, [sp, #32]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	f000 80af 	beq.w	8008436 <_dtoa_r+0x8be>
 80082d8:	2e00      	cmp	r6, #0
 80082da:	dd13      	ble.n	8008304 <_dtoa_r+0x78c>
 80082dc:	4639      	mov	r1, r7
 80082de:	4632      	mov	r2, r6
 80082e0:	4620      	mov	r0, r4
 80082e2:	f001 f9f3 	bl	80096cc <__pow5mult>
 80082e6:	ee18 2a10 	vmov	r2, s16
 80082ea:	4601      	mov	r1, r0
 80082ec:	4607      	mov	r7, r0
 80082ee:	4620      	mov	r0, r4
 80082f0:	f001 f942 	bl	8009578 <__multiply>
 80082f4:	ee18 1a10 	vmov	r1, s16
 80082f8:	4680      	mov	r8, r0
 80082fa:	4620      	mov	r0, r4
 80082fc:	f001 f824 	bl	8009348 <_Bfree>
 8008300:	ee08 8a10 	vmov	s16, r8
 8008304:	9b07      	ldr	r3, [sp, #28]
 8008306:	1b9a      	subs	r2, r3, r6
 8008308:	d006      	beq.n	8008318 <_dtoa_r+0x7a0>
 800830a:	ee18 1a10 	vmov	r1, s16
 800830e:	4620      	mov	r0, r4
 8008310:	f001 f9dc 	bl	80096cc <__pow5mult>
 8008314:	ee08 0a10 	vmov	s16, r0
 8008318:	2101      	movs	r1, #1
 800831a:	4620      	mov	r0, r4
 800831c:	f001 f916 	bl	800954c <__i2b>
 8008320:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008322:	2b00      	cmp	r3, #0
 8008324:	4606      	mov	r6, r0
 8008326:	f340 8088 	ble.w	800843a <_dtoa_r+0x8c2>
 800832a:	461a      	mov	r2, r3
 800832c:	4601      	mov	r1, r0
 800832e:	4620      	mov	r0, r4
 8008330:	f001 f9cc 	bl	80096cc <__pow5mult>
 8008334:	9b06      	ldr	r3, [sp, #24]
 8008336:	2b01      	cmp	r3, #1
 8008338:	4606      	mov	r6, r0
 800833a:	f340 8081 	ble.w	8008440 <_dtoa_r+0x8c8>
 800833e:	f04f 0800 	mov.w	r8, #0
 8008342:	6933      	ldr	r3, [r6, #16]
 8008344:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008348:	6918      	ldr	r0, [r3, #16]
 800834a:	f001 f8af 	bl	80094ac <__hi0bits>
 800834e:	f1c0 0020 	rsb	r0, r0, #32
 8008352:	9b05      	ldr	r3, [sp, #20]
 8008354:	4418      	add	r0, r3
 8008356:	f010 001f 	ands.w	r0, r0, #31
 800835a:	f000 8092 	beq.w	8008482 <_dtoa_r+0x90a>
 800835e:	f1c0 0320 	rsb	r3, r0, #32
 8008362:	2b04      	cmp	r3, #4
 8008364:	f340 808a 	ble.w	800847c <_dtoa_r+0x904>
 8008368:	f1c0 001c 	rsb	r0, r0, #28
 800836c:	9b04      	ldr	r3, [sp, #16]
 800836e:	4403      	add	r3, r0
 8008370:	9304      	str	r3, [sp, #16]
 8008372:	9b05      	ldr	r3, [sp, #20]
 8008374:	4403      	add	r3, r0
 8008376:	4405      	add	r5, r0
 8008378:	9305      	str	r3, [sp, #20]
 800837a:	9b04      	ldr	r3, [sp, #16]
 800837c:	2b00      	cmp	r3, #0
 800837e:	dd07      	ble.n	8008390 <_dtoa_r+0x818>
 8008380:	ee18 1a10 	vmov	r1, s16
 8008384:	461a      	mov	r2, r3
 8008386:	4620      	mov	r0, r4
 8008388:	f001 f9fa 	bl	8009780 <__lshift>
 800838c:	ee08 0a10 	vmov	s16, r0
 8008390:	9b05      	ldr	r3, [sp, #20]
 8008392:	2b00      	cmp	r3, #0
 8008394:	dd05      	ble.n	80083a2 <_dtoa_r+0x82a>
 8008396:	4631      	mov	r1, r6
 8008398:	461a      	mov	r2, r3
 800839a:	4620      	mov	r0, r4
 800839c:	f001 f9f0 	bl	8009780 <__lshift>
 80083a0:	4606      	mov	r6, r0
 80083a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d06e      	beq.n	8008486 <_dtoa_r+0x90e>
 80083a8:	ee18 0a10 	vmov	r0, s16
 80083ac:	4631      	mov	r1, r6
 80083ae:	f001 fa57 	bl	8009860 <__mcmp>
 80083b2:	2800      	cmp	r0, #0
 80083b4:	da67      	bge.n	8008486 <_dtoa_r+0x90e>
 80083b6:	9b00      	ldr	r3, [sp, #0]
 80083b8:	3b01      	subs	r3, #1
 80083ba:	ee18 1a10 	vmov	r1, s16
 80083be:	9300      	str	r3, [sp, #0]
 80083c0:	220a      	movs	r2, #10
 80083c2:	2300      	movs	r3, #0
 80083c4:	4620      	mov	r0, r4
 80083c6:	f000 ffe1 	bl	800938c <__multadd>
 80083ca:	9b08      	ldr	r3, [sp, #32]
 80083cc:	ee08 0a10 	vmov	s16, r0
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	f000 81b1 	beq.w	8008738 <_dtoa_r+0xbc0>
 80083d6:	2300      	movs	r3, #0
 80083d8:	4639      	mov	r1, r7
 80083da:	220a      	movs	r2, #10
 80083dc:	4620      	mov	r0, r4
 80083de:	f000 ffd5 	bl	800938c <__multadd>
 80083e2:	9b02      	ldr	r3, [sp, #8]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	4607      	mov	r7, r0
 80083e8:	f300 808e 	bgt.w	8008508 <_dtoa_r+0x990>
 80083ec:	9b06      	ldr	r3, [sp, #24]
 80083ee:	2b02      	cmp	r3, #2
 80083f0:	dc51      	bgt.n	8008496 <_dtoa_r+0x91e>
 80083f2:	e089      	b.n	8008508 <_dtoa_r+0x990>
 80083f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80083f6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80083fa:	e74b      	b.n	8008294 <_dtoa_r+0x71c>
 80083fc:	9b03      	ldr	r3, [sp, #12]
 80083fe:	1e5e      	subs	r6, r3, #1
 8008400:	9b07      	ldr	r3, [sp, #28]
 8008402:	42b3      	cmp	r3, r6
 8008404:	bfbf      	itttt	lt
 8008406:	9b07      	ldrlt	r3, [sp, #28]
 8008408:	9607      	strlt	r6, [sp, #28]
 800840a:	1af2      	sublt	r2, r6, r3
 800840c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800840e:	bfb6      	itet	lt
 8008410:	189b      	addlt	r3, r3, r2
 8008412:	1b9e      	subge	r6, r3, r6
 8008414:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008416:	9b03      	ldr	r3, [sp, #12]
 8008418:	bfb8      	it	lt
 800841a:	2600      	movlt	r6, #0
 800841c:	2b00      	cmp	r3, #0
 800841e:	bfb7      	itett	lt
 8008420:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008424:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008428:	1a9d      	sublt	r5, r3, r2
 800842a:	2300      	movlt	r3, #0
 800842c:	e734      	b.n	8008298 <_dtoa_r+0x720>
 800842e:	9e07      	ldr	r6, [sp, #28]
 8008430:	9d04      	ldr	r5, [sp, #16]
 8008432:	9f08      	ldr	r7, [sp, #32]
 8008434:	e73b      	b.n	80082ae <_dtoa_r+0x736>
 8008436:	9a07      	ldr	r2, [sp, #28]
 8008438:	e767      	b.n	800830a <_dtoa_r+0x792>
 800843a:	9b06      	ldr	r3, [sp, #24]
 800843c:	2b01      	cmp	r3, #1
 800843e:	dc18      	bgt.n	8008472 <_dtoa_r+0x8fa>
 8008440:	f1ba 0f00 	cmp.w	sl, #0
 8008444:	d115      	bne.n	8008472 <_dtoa_r+0x8fa>
 8008446:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800844a:	b993      	cbnz	r3, 8008472 <_dtoa_r+0x8fa>
 800844c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008450:	0d1b      	lsrs	r3, r3, #20
 8008452:	051b      	lsls	r3, r3, #20
 8008454:	b183      	cbz	r3, 8008478 <_dtoa_r+0x900>
 8008456:	9b04      	ldr	r3, [sp, #16]
 8008458:	3301      	adds	r3, #1
 800845a:	9304      	str	r3, [sp, #16]
 800845c:	9b05      	ldr	r3, [sp, #20]
 800845e:	3301      	adds	r3, #1
 8008460:	9305      	str	r3, [sp, #20]
 8008462:	f04f 0801 	mov.w	r8, #1
 8008466:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008468:	2b00      	cmp	r3, #0
 800846a:	f47f af6a 	bne.w	8008342 <_dtoa_r+0x7ca>
 800846e:	2001      	movs	r0, #1
 8008470:	e76f      	b.n	8008352 <_dtoa_r+0x7da>
 8008472:	f04f 0800 	mov.w	r8, #0
 8008476:	e7f6      	b.n	8008466 <_dtoa_r+0x8ee>
 8008478:	4698      	mov	r8, r3
 800847a:	e7f4      	b.n	8008466 <_dtoa_r+0x8ee>
 800847c:	f43f af7d 	beq.w	800837a <_dtoa_r+0x802>
 8008480:	4618      	mov	r0, r3
 8008482:	301c      	adds	r0, #28
 8008484:	e772      	b.n	800836c <_dtoa_r+0x7f4>
 8008486:	9b03      	ldr	r3, [sp, #12]
 8008488:	2b00      	cmp	r3, #0
 800848a:	dc37      	bgt.n	80084fc <_dtoa_r+0x984>
 800848c:	9b06      	ldr	r3, [sp, #24]
 800848e:	2b02      	cmp	r3, #2
 8008490:	dd34      	ble.n	80084fc <_dtoa_r+0x984>
 8008492:	9b03      	ldr	r3, [sp, #12]
 8008494:	9302      	str	r3, [sp, #8]
 8008496:	9b02      	ldr	r3, [sp, #8]
 8008498:	b96b      	cbnz	r3, 80084b6 <_dtoa_r+0x93e>
 800849a:	4631      	mov	r1, r6
 800849c:	2205      	movs	r2, #5
 800849e:	4620      	mov	r0, r4
 80084a0:	f000 ff74 	bl	800938c <__multadd>
 80084a4:	4601      	mov	r1, r0
 80084a6:	4606      	mov	r6, r0
 80084a8:	ee18 0a10 	vmov	r0, s16
 80084ac:	f001 f9d8 	bl	8009860 <__mcmp>
 80084b0:	2800      	cmp	r0, #0
 80084b2:	f73f adbb 	bgt.w	800802c <_dtoa_r+0x4b4>
 80084b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084b8:	9d01      	ldr	r5, [sp, #4]
 80084ba:	43db      	mvns	r3, r3
 80084bc:	9300      	str	r3, [sp, #0]
 80084be:	f04f 0800 	mov.w	r8, #0
 80084c2:	4631      	mov	r1, r6
 80084c4:	4620      	mov	r0, r4
 80084c6:	f000 ff3f 	bl	8009348 <_Bfree>
 80084ca:	2f00      	cmp	r7, #0
 80084cc:	f43f aea4 	beq.w	8008218 <_dtoa_r+0x6a0>
 80084d0:	f1b8 0f00 	cmp.w	r8, #0
 80084d4:	d005      	beq.n	80084e2 <_dtoa_r+0x96a>
 80084d6:	45b8      	cmp	r8, r7
 80084d8:	d003      	beq.n	80084e2 <_dtoa_r+0x96a>
 80084da:	4641      	mov	r1, r8
 80084dc:	4620      	mov	r0, r4
 80084de:	f000 ff33 	bl	8009348 <_Bfree>
 80084e2:	4639      	mov	r1, r7
 80084e4:	4620      	mov	r0, r4
 80084e6:	f000 ff2f 	bl	8009348 <_Bfree>
 80084ea:	e695      	b.n	8008218 <_dtoa_r+0x6a0>
 80084ec:	2600      	movs	r6, #0
 80084ee:	4637      	mov	r7, r6
 80084f0:	e7e1      	b.n	80084b6 <_dtoa_r+0x93e>
 80084f2:	9700      	str	r7, [sp, #0]
 80084f4:	4637      	mov	r7, r6
 80084f6:	e599      	b.n	800802c <_dtoa_r+0x4b4>
 80084f8:	40240000 	.word	0x40240000
 80084fc:	9b08      	ldr	r3, [sp, #32]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	f000 80ca 	beq.w	8008698 <_dtoa_r+0xb20>
 8008504:	9b03      	ldr	r3, [sp, #12]
 8008506:	9302      	str	r3, [sp, #8]
 8008508:	2d00      	cmp	r5, #0
 800850a:	dd05      	ble.n	8008518 <_dtoa_r+0x9a0>
 800850c:	4639      	mov	r1, r7
 800850e:	462a      	mov	r2, r5
 8008510:	4620      	mov	r0, r4
 8008512:	f001 f935 	bl	8009780 <__lshift>
 8008516:	4607      	mov	r7, r0
 8008518:	f1b8 0f00 	cmp.w	r8, #0
 800851c:	d05b      	beq.n	80085d6 <_dtoa_r+0xa5e>
 800851e:	6879      	ldr	r1, [r7, #4]
 8008520:	4620      	mov	r0, r4
 8008522:	f000 fed1 	bl	80092c8 <_Balloc>
 8008526:	4605      	mov	r5, r0
 8008528:	b928      	cbnz	r0, 8008536 <_dtoa_r+0x9be>
 800852a:	4b87      	ldr	r3, [pc, #540]	; (8008748 <_dtoa_r+0xbd0>)
 800852c:	4602      	mov	r2, r0
 800852e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008532:	f7ff bb3b 	b.w	8007bac <_dtoa_r+0x34>
 8008536:	693a      	ldr	r2, [r7, #16]
 8008538:	3202      	adds	r2, #2
 800853a:	0092      	lsls	r2, r2, #2
 800853c:	f107 010c 	add.w	r1, r7, #12
 8008540:	300c      	adds	r0, #12
 8008542:	f000 feb3 	bl	80092ac <memcpy>
 8008546:	2201      	movs	r2, #1
 8008548:	4629      	mov	r1, r5
 800854a:	4620      	mov	r0, r4
 800854c:	f001 f918 	bl	8009780 <__lshift>
 8008550:	9b01      	ldr	r3, [sp, #4]
 8008552:	f103 0901 	add.w	r9, r3, #1
 8008556:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800855a:	4413      	add	r3, r2
 800855c:	9305      	str	r3, [sp, #20]
 800855e:	f00a 0301 	and.w	r3, sl, #1
 8008562:	46b8      	mov	r8, r7
 8008564:	9304      	str	r3, [sp, #16]
 8008566:	4607      	mov	r7, r0
 8008568:	4631      	mov	r1, r6
 800856a:	ee18 0a10 	vmov	r0, s16
 800856e:	f7ff fa77 	bl	8007a60 <quorem>
 8008572:	4641      	mov	r1, r8
 8008574:	9002      	str	r0, [sp, #8]
 8008576:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800857a:	ee18 0a10 	vmov	r0, s16
 800857e:	f001 f96f 	bl	8009860 <__mcmp>
 8008582:	463a      	mov	r2, r7
 8008584:	9003      	str	r0, [sp, #12]
 8008586:	4631      	mov	r1, r6
 8008588:	4620      	mov	r0, r4
 800858a:	f001 f985 	bl	8009898 <__mdiff>
 800858e:	68c2      	ldr	r2, [r0, #12]
 8008590:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8008594:	4605      	mov	r5, r0
 8008596:	bb02      	cbnz	r2, 80085da <_dtoa_r+0xa62>
 8008598:	4601      	mov	r1, r0
 800859a:	ee18 0a10 	vmov	r0, s16
 800859e:	f001 f95f 	bl	8009860 <__mcmp>
 80085a2:	4602      	mov	r2, r0
 80085a4:	4629      	mov	r1, r5
 80085a6:	4620      	mov	r0, r4
 80085a8:	9207      	str	r2, [sp, #28]
 80085aa:	f000 fecd 	bl	8009348 <_Bfree>
 80085ae:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80085b2:	ea43 0102 	orr.w	r1, r3, r2
 80085b6:	9b04      	ldr	r3, [sp, #16]
 80085b8:	430b      	orrs	r3, r1
 80085ba:	464d      	mov	r5, r9
 80085bc:	d10f      	bne.n	80085de <_dtoa_r+0xa66>
 80085be:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80085c2:	d02a      	beq.n	800861a <_dtoa_r+0xaa2>
 80085c4:	9b03      	ldr	r3, [sp, #12]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	dd02      	ble.n	80085d0 <_dtoa_r+0xa58>
 80085ca:	9b02      	ldr	r3, [sp, #8]
 80085cc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80085d0:	f88b a000 	strb.w	sl, [fp]
 80085d4:	e775      	b.n	80084c2 <_dtoa_r+0x94a>
 80085d6:	4638      	mov	r0, r7
 80085d8:	e7ba      	b.n	8008550 <_dtoa_r+0x9d8>
 80085da:	2201      	movs	r2, #1
 80085dc:	e7e2      	b.n	80085a4 <_dtoa_r+0xa2c>
 80085de:	9b03      	ldr	r3, [sp, #12]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	db04      	blt.n	80085ee <_dtoa_r+0xa76>
 80085e4:	9906      	ldr	r1, [sp, #24]
 80085e6:	430b      	orrs	r3, r1
 80085e8:	9904      	ldr	r1, [sp, #16]
 80085ea:	430b      	orrs	r3, r1
 80085ec:	d122      	bne.n	8008634 <_dtoa_r+0xabc>
 80085ee:	2a00      	cmp	r2, #0
 80085f0:	ddee      	ble.n	80085d0 <_dtoa_r+0xa58>
 80085f2:	ee18 1a10 	vmov	r1, s16
 80085f6:	2201      	movs	r2, #1
 80085f8:	4620      	mov	r0, r4
 80085fa:	f001 f8c1 	bl	8009780 <__lshift>
 80085fe:	4631      	mov	r1, r6
 8008600:	ee08 0a10 	vmov	s16, r0
 8008604:	f001 f92c 	bl	8009860 <__mcmp>
 8008608:	2800      	cmp	r0, #0
 800860a:	dc03      	bgt.n	8008614 <_dtoa_r+0xa9c>
 800860c:	d1e0      	bne.n	80085d0 <_dtoa_r+0xa58>
 800860e:	f01a 0f01 	tst.w	sl, #1
 8008612:	d0dd      	beq.n	80085d0 <_dtoa_r+0xa58>
 8008614:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008618:	d1d7      	bne.n	80085ca <_dtoa_r+0xa52>
 800861a:	2339      	movs	r3, #57	; 0x39
 800861c:	f88b 3000 	strb.w	r3, [fp]
 8008620:	462b      	mov	r3, r5
 8008622:	461d      	mov	r5, r3
 8008624:	3b01      	subs	r3, #1
 8008626:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800862a:	2a39      	cmp	r2, #57	; 0x39
 800862c:	d071      	beq.n	8008712 <_dtoa_r+0xb9a>
 800862e:	3201      	adds	r2, #1
 8008630:	701a      	strb	r2, [r3, #0]
 8008632:	e746      	b.n	80084c2 <_dtoa_r+0x94a>
 8008634:	2a00      	cmp	r2, #0
 8008636:	dd07      	ble.n	8008648 <_dtoa_r+0xad0>
 8008638:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800863c:	d0ed      	beq.n	800861a <_dtoa_r+0xaa2>
 800863e:	f10a 0301 	add.w	r3, sl, #1
 8008642:	f88b 3000 	strb.w	r3, [fp]
 8008646:	e73c      	b.n	80084c2 <_dtoa_r+0x94a>
 8008648:	9b05      	ldr	r3, [sp, #20]
 800864a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800864e:	4599      	cmp	r9, r3
 8008650:	d047      	beq.n	80086e2 <_dtoa_r+0xb6a>
 8008652:	ee18 1a10 	vmov	r1, s16
 8008656:	2300      	movs	r3, #0
 8008658:	220a      	movs	r2, #10
 800865a:	4620      	mov	r0, r4
 800865c:	f000 fe96 	bl	800938c <__multadd>
 8008660:	45b8      	cmp	r8, r7
 8008662:	ee08 0a10 	vmov	s16, r0
 8008666:	f04f 0300 	mov.w	r3, #0
 800866a:	f04f 020a 	mov.w	r2, #10
 800866e:	4641      	mov	r1, r8
 8008670:	4620      	mov	r0, r4
 8008672:	d106      	bne.n	8008682 <_dtoa_r+0xb0a>
 8008674:	f000 fe8a 	bl	800938c <__multadd>
 8008678:	4680      	mov	r8, r0
 800867a:	4607      	mov	r7, r0
 800867c:	f109 0901 	add.w	r9, r9, #1
 8008680:	e772      	b.n	8008568 <_dtoa_r+0x9f0>
 8008682:	f000 fe83 	bl	800938c <__multadd>
 8008686:	4639      	mov	r1, r7
 8008688:	4680      	mov	r8, r0
 800868a:	2300      	movs	r3, #0
 800868c:	220a      	movs	r2, #10
 800868e:	4620      	mov	r0, r4
 8008690:	f000 fe7c 	bl	800938c <__multadd>
 8008694:	4607      	mov	r7, r0
 8008696:	e7f1      	b.n	800867c <_dtoa_r+0xb04>
 8008698:	9b03      	ldr	r3, [sp, #12]
 800869a:	9302      	str	r3, [sp, #8]
 800869c:	9d01      	ldr	r5, [sp, #4]
 800869e:	ee18 0a10 	vmov	r0, s16
 80086a2:	4631      	mov	r1, r6
 80086a4:	f7ff f9dc 	bl	8007a60 <quorem>
 80086a8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80086ac:	9b01      	ldr	r3, [sp, #4]
 80086ae:	f805 ab01 	strb.w	sl, [r5], #1
 80086b2:	1aea      	subs	r2, r5, r3
 80086b4:	9b02      	ldr	r3, [sp, #8]
 80086b6:	4293      	cmp	r3, r2
 80086b8:	dd09      	ble.n	80086ce <_dtoa_r+0xb56>
 80086ba:	ee18 1a10 	vmov	r1, s16
 80086be:	2300      	movs	r3, #0
 80086c0:	220a      	movs	r2, #10
 80086c2:	4620      	mov	r0, r4
 80086c4:	f000 fe62 	bl	800938c <__multadd>
 80086c8:	ee08 0a10 	vmov	s16, r0
 80086cc:	e7e7      	b.n	800869e <_dtoa_r+0xb26>
 80086ce:	9b02      	ldr	r3, [sp, #8]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	bfc8      	it	gt
 80086d4:	461d      	movgt	r5, r3
 80086d6:	9b01      	ldr	r3, [sp, #4]
 80086d8:	bfd8      	it	le
 80086da:	2501      	movle	r5, #1
 80086dc:	441d      	add	r5, r3
 80086de:	f04f 0800 	mov.w	r8, #0
 80086e2:	ee18 1a10 	vmov	r1, s16
 80086e6:	2201      	movs	r2, #1
 80086e8:	4620      	mov	r0, r4
 80086ea:	f001 f849 	bl	8009780 <__lshift>
 80086ee:	4631      	mov	r1, r6
 80086f0:	ee08 0a10 	vmov	s16, r0
 80086f4:	f001 f8b4 	bl	8009860 <__mcmp>
 80086f8:	2800      	cmp	r0, #0
 80086fa:	dc91      	bgt.n	8008620 <_dtoa_r+0xaa8>
 80086fc:	d102      	bne.n	8008704 <_dtoa_r+0xb8c>
 80086fe:	f01a 0f01 	tst.w	sl, #1
 8008702:	d18d      	bne.n	8008620 <_dtoa_r+0xaa8>
 8008704:	462b      	mov	r3, r5
 8008706:	461d      	mov	r5, r3
 8008708:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800870c:	2a30      	cmp	r2, #48	; 0x30
 800870e:	d0fa      	beq.n	8008706 <_dtoa_r+0xb8e>
 8008710:	e6d7      	b.n	80084c2 <_dtoa_r+0x94a>
 8008712:	9a01      	ldr	r2, [sp, #4]
 8008714:	429a      	cmp	r2, r3
 8008716:	d184      	bne.n	8008622 <_dtoa_r+0xaaa>
 8008718:	9b00      	ldr	r3, [sp, #0]
 800871a:	3301      	adds	r3, #1
 800871c:	9300      	str	r3, [sp, #0]
 800871e:	2331      	movs	r3, #49	; 0x31
 8008720:	7013      	strb	r3, [r2, #0]
 8008722:	e6ce      	b.n	80084c2 <_dtoa_r+0x94a>
 8008724:	4b09      	ldr	r3, [pc, #36]	; (800874c <_dtoa_r+0xbd4>)
 8008726:	f7ff ba95 	b.w	8007c54 <_dtoa_r+0xdc>
 800872a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800872c:	2b00      	cmp	r3, #0
 800872e:	f47f aa6e 	bne.w	8007c0e <_dtoa_r+0x96>
 8008732:	4b07      	ldr	r3, [pc, #28]	; (8008750 <_dtoa_r+0xbd8>)
 8008734:	f7ff ba8e 	b.w	8007c54 <_dtoa_r+0xdc>
 8008738:	9b02      	ldr	r3, [sp, #8]
 800873a:	2b00      	cmp	r3, #0
 800873c:	dcae      	bgt.n	800869c <_dtoa_r+0xb24>
 800873e:	9b06      	ldr	r3, [sp, #24]
 8008740:	2b02      	cmp	r3, #2
 8008742:	f73f aea8 	bgt.w	8008496 <_dtoa_r+0x91e>
 8008746:	e7a9      	b.n	800869c <_dtoa_r+0xb24>
 8008748:	0800a9c0 	.word	0x0800a9c0
 800874c:	0800a7c4 	.word	0x0800a7c4
 8008750:	0800a941 	.word	0x0800a941

08008754 <__sflush_r>:
 8008754:	898a      	ldrh	r2, [r1, #12]
 8008756:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800875a:	4605      	mov	r5, r0
 800875c:	0710      	lsls	r0, r2, #28
 800875e:	460c      	mov	r4, r1
 8008760:	d458      	bmi.n	8008814 <__sflush_r+0xc0>
 8008762:	684b      	ldr	r3, [r1, #4]
 8008764:	2b00      	cmp	r3, #0
 8008766:	dc05      	bgt.n	8008774 <__sflush_r+0x20>
 8008768:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800876a:	2b00      	cmp	r3, #0
 800876c:	dc02      	bgt.n	8008774 <__sflush_r+0x20>
 800876e:	2000      	movs	r0, #0
 8008770:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008774:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008776:	2e00      	cmp	r6, #0
 8008778:	d0f9      	beq.n	800876e <__sflush_r+0x1a>
 800877a:	2300      	movs	r3, #0
 800877c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008780:	682f      	ldr	r7, [r5, #0]
 8008782:	602b      	str	r3, [r5, #0]
 8008784:	d032      	beq.n	80087ec <__sflush_r+0x98>
 8008786:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008788:	89a3      	ldrh	r3, [r4, #12]
 800878a:	075a      	lsls	r2, r3, #29
 800878c:	d505      	bpl.n	800879a <__sflush_r+0x46>
 800878e:	6863      	ldr	r3, [r4, #4]
 8008790:	1ac0      	subs	r0, r0, r3
 8008792:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008794:	b10b      	cbz	r3, 800879a <__sflush_r+0x46>
 8008796:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008798:	1ac0      	subs	r0, r0, r3
 800879a:	2300      	movs	r3, #0
 800879c:	4602      	mov	r2, r0
 800879e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80087a0:	6a21      	ldr	r1, [r4, #32]
 80087a2:	4628      	mov	r0, r5
 80087a4:	47b0      	blx	r6
 80087a6:	1c43      	adds	r3, r0, #1
 80087a8:	89a3      	ldrh	r3, [r4, #12]
 80087aa:	d106      	bne.n	80087ba <__sflush_r+0x66>
 80087ac:	6829      	ldr	r1, [r5, #0]
 80087ae:	291d      	cmp	r1, #29
 80087b0:	d82c      	bhi.n	800880c <__sflush_r+0xb8>
 80087b2:	4a2a      	ldr	r2, [pc, #168]	; (800885c <__sflush_r+0x108>)
 80087b4:	40ca      	lsrs	r2, r1
 80087b6:	07d6      	lsls	r6, r2, #31
 80087b8:	d528      	bpl.n	800880c <__sflush_r+0xb8>
 80087ba:	2200      	movs	r2, #0
 80087bc:	6062      	str	r2, [r4, #4]
 80087be:	04d9      	lsls	r1, r3, #19
 80087c0:	6922      	ldr	r2, [r4, #16]
 80087c2:	6022      	str	r2, [r4, #0]
 80087c4:	d504      	bpl.n	80087d0 <__sflush_r+0x7c>
 80087c6:	1c42      	adds	r2, r0, #1
 80087c8:	d101      	bne.n	80087ce <__sflush_r+0x7a>
 80087ca:	682b      	ldr	r3, [r5, #0]
 80087cc:	b903      	cbnz	r3, 80087d0 <__sflush_r+0x7c>
 80087ce:	6560      	str	r0, [r4, #84]	; 0x54
 80087d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80087d2:	602f      	str	r7, [r5, #0]
 80087d4:	2900      	cmp	r1, #0
 80087d6:	d0ca      	beq.n	800876e <__sflush_r+0x1a>
 80087d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80087dc:	4299      	cmp	r1, r3
 80087de:	d002      	beq.n	80087e6 <__sflush_r+0x92>
 80087e0:	4628      	mov	r0, r5
 80087e2:	f001 fa49 	bl	8009c78 <_free_r>
 80087e6:	2000      	movs	r0, #0
 80087e8:	6360      	str	r0, [r4, #52]	; 0x34
 80087ea:	e7c1      	b.n	8008770 <__sflush_r+0x1c>
 80087ec:	6a21      	ldr	r1, [r4, #32]
 80087ee:	2301      	movs	r3, #1
 80087f0:	4628      	mov	r0, r5
 80087f2:	47b0      	blx	r6
 80087f4:	1c41      	adds	r1, r0, #1
 80087f6:	d1c7      	bne.n	8008788 <__sflush_r+0x34>
 80087f8:	682b      	ldr	r3, [r5, #0]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d0c4      	beq.n	8008788 <__sflush_r+0x34>
 80087fe:	2b1d      	cmp	r3, #29
 8008800:	d001      	beq.n	8008806 <__sflush_r+0xb2>
 8008802:	2b16      	cmp	r3, #22
 8008804:	d101      	bne.n	800880a <__sflush_r+0xb6>
 8008806:	602f      	str	r7, [r5, #0]
 8008808:	e7b1      	b.n	800876e <__sflush_r+0x1a>
 800880a:	89a3      	ldrh	r3, [r4, #12]
 800880c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008810:	81a3      	strh	r3, [r4, #12]
 8008812:	e7ad      	b.n	8008770 <__sflush_r+0x1c>
 8008814:	690f      	ldr	r7, [r1, #16]
 8008816:	2f00      	cmp	r7, #0
 8008818:	d0a9      	beq.n	800876e <__sflush_r+0x1a>
 800881a:	0793      	lsls	r3, r2, #30
 800881c:	680e      	ldr	r6, [r1, #0]
 800881e:	bf08      	it	eq
 8008820:	694b      	ldreq	r3, [r1, #20]
 8008822:	600f      	str	r7, [r1, #0]
 8008824:	bf18      	it	ne
 8008826:	2300      	movne	r3, #0
 8008828:	eba6 0807 	sub.w	r8, r6, r7
 800882c:	608b      	str	r3, [r1, #8]
 800882e:	f1b8 0f00 	cmp.w	r8, #0
 8008832:	dd9c      	ble.n	800876e <__sflush_r+0x1a>
 8008834:	6a21      	ldr	r1, [r4, #32]
 8008836:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008838:	4643      	mov	r3, r8
 800883a:	463a      	mov	r2, r7
 800883c:	4628      	mov	r0, r5
 800883e:	47b0      	blx	r6
 8008840:	2800      	cmp	r0, #0
 8008842:	dc06      	bgt.n	8008852 <__sflush_r+0xfe>
 8008844:	89a3      	ldrh	r3, [r4, #12]
 8008846:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800884a:	81a3      	strh	r3, [r4, #12]
 800884c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008850:	e78e      	b.n	8008770 <__sflush_r+0x1c>
 8008852:	4407      	add	r7, r0
 8008854:	eba8 0800 	sub.w	r8, r8, r0
 8008858:	e7e9      	b.n	800882e <__sflush_r+0xda>
 800885a:	bf00      	nop
 800885c:	20400001 	.word	0x20400001

08008860 <_fflush_r>:
 8008860:	b538      	push	{r3, r4, r5, lr}
 8008862:	690b      	ldr	r3, [r1, #16]
 8008864:	4605      	mov	r5, r0
 8008866:	460c      	mov	r4, r1
 8008868:	b913      	cbnz	r3, 8008870 <_fflush_r+0x10>
 800886a:	2500      	movs	r5, #0
 800886c:	4628      	mov	r0, r5
 800886e:	bd38      	pop	{r3, r4, r5, pc}
 8008870:	b118      	cbz	r0, 800887a <_fflush_r+0x1a>
 8008872:	6983      	ldr	r3, [r0, #24]
 8008874:	b90b      	cbnz	r3, 800887a <_fflush_r+0x1a>
 8008876:	f000 f887 	bl	8008988 <__sinit>
 800887a:	4b14      	ldr	r3, [pc, #80]	; (80088cc <_fflush_r+0x6c>)
 800887c:	429c      	cmp	r4, r3
 800887e:	d11b      	bne.n	80088b8 <_fflush_r+0x58>
 8008880:	686c      	ldr	r4, [r5, #4]
 8008882:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d0ef      	beq.n	800886a <_fflush_r+0xa>
 800888a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800888c:	07d0      	lsls	r0, r2, #31
 800888e:	d404      	bmi.n	800889a <_fflush_r+0x3a>
 8008890:	0599      	lsls	r1, r3, #22
 8008892:	d402      	bmi.n	800889a <_fflush_r+0x3a>
 8008894:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008896:	f000 fc88 	bl	80091aa <__retarget_lock_acquire_recursive>
 800889a:	4628      	mov	r0, r5
 800889c:	4621      	mov	r1, r4
 800889e:	f7ff ff59 	bl	8008754 <__sflush_r>
 80088a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80088a4:	07da      	lsls	r2, r3, #31
 80088a6:	4605      	mov	r5, r0
 80088a8:	d4e0      	bmi.n	800886c <_fflush_r+0xc>
 80088aa:	89a3      	ldrh	r3, [r4, #12]
 80088ac:	059b      	lsls	r3, r3, #22
 80088ae:	d4dd      	bmi.n	800886c <_fflush_r+0xc>
 80088b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80088b2:	f000 fc7b 	bl	80091ac <__retarget_lock_release_recursive>
 80088b6:	e7d9      	b.n	800886c <_fflush_r+0xc>
 80088b8:	4b05      	ldr	r3, [pc, #20]	; (80088d0 <_fflush_r+0x70>)
 80088ba:	429c      	cmp	r4, r3
 80088bc:	d101      	bne.n	80088c2 <_fflush_r+0x62>
 80088be:	68ac      	ldr	r4, [r5, #8]
 80088c0:	e7df      	b.n	8008882 <_fflush_r+0x22>
 80088c2:	4b04      	ldr	r3, [pc, #16]	; (80088d4 <_fflush_r+0x74>)
 80088c4:	429c      	cmp	r4, r3
 80088c6:	bf08      	it	eq
 80088c8:	68ec      	ldreq	r4, [r5, #12]
 80088ca:	e7da      	b.n	8008882 <_fflush_r+0x22>
 80088cc:	0800a9f4 	.word	0x0800a9f4
 80088d0:	0800aa14 	.word	0x0800aa14
 80088d4:	0800a9d4 	.word	0x0800a9d4

080088d8 <std>:
 80088d8:	2300      	movs	r3, #0
 80088da:	b510      	push	{r4, lr}
 80088dc:	4604      	mov	r4, r0
 80088de:	e9c0 3300 	strd	r3, r3, [r0]
 80088e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80088e6:	6083      	str	r3, [r0, #8]
 80088e8:	8181      	strh	r1, [r0, #12]
 80088ea:	6643      	str	r3, [r0, #100]	; 0x64
 80088ec:	81c2      	strh	r2, [r0, #14]
 80088ee:	6183      	str	r3, [r0, #24]
 80088f0:	4619      	mov	r1, r3
 80088f2:	2208      	movs	r2, #8
 80088f4:	305c      	adds	r0, #92	; 0x5c
 80088f6:	f7fd fa27 	bl	8005d48 <memset>
 80088fa:	4b05      	ldr	r3, [pc, #20]	; (8008910 <std+0x38>)
 80088fc:	6263      	str	r3, [r4, #36]	; 0x24
 80088fe:	4b05      	ldr	r3, [pc, #20]	; (8008914 <std+0x3c>)
 8008900:	62a3      	str	r3, [r4, #40]	; 0x28
 8008902:	4b05      	ldr	r3, [pc, #20]	; (8008918 <std+0x40>)
 8008904:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008906:	4b05      	ldr	r3, [pc, #20]	; (800891c <std+0x44>)
 8008908:	6224      	str	r4, [r4, #32]
 800890a:	6323      	str	r3, [r4, #48]	; 0x30
 800890c:	bd10      	pop	{r4, pc}
 800890e:	bf00      	nop
 8008910:	0800a121 	.word	0x0800a121
 8008914:	0800a143 	.word	0x0800a143
 8008918:	0800a17b 	.word	0x0800a17b
 800891c:	0800a19f 	.word	0x0800a19f

08008920 <_cleanup_r>:
 8008920:	4901      	ldr	r1, [pc, #4]	; (8008928 <_cleanup_r+0x8>)
 8008922:	f000 b8af 	b.w	8008a84 <_fwalk_reent>
 8008926:	bf00      	nop
 8008928:	08008861 	.word	0x08008861

0800892c <__sfmoreglue>:
 800892c:	b570      	push	{r4, r5, r6, lr}
 800892e:	2268      	movs	r2, #104	; 0x68
 8008930:	1e4d      	subs	r5, r1, #1
 8008932:	4355      	muls	r5, r2
 8008934:	460e      	mov	r6, r1
 8008936:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800893a:	f001 fa09 	bl	8009d50 <_malloc_r>
 800893e:	4604      	mov	r4, r0
 8008940:	b140      	cbz	r0, 8008954 <__sfmoreglue+0x28>
 8008942:	2100      	movs	r1, #0
 8008944:	e9c0 1600 	strd	r1, r6, [r0]
 8008948:	300c      	adds	r0, #12
 800894a:	60a0      	str	r0, [r4, #8]
 800894c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008950:	f7fd f9fa 	bl	8005d48 <memset>
 8008954:	4620      	mov	r0, r4
 8008956:	bd70      	pop	{r4, r5, r6, pc}

08008958 <__sfp_lock_acquire>:
 8008958:	4801      	ldr	r0, [pc, #4]	; (8008960 <__sfp_lock_acquire+0x8>)
 800895a:	f000 bc26 	b.w	80091aa <__retarget_lock_acquire_recursive>
 800895e:	bf00      	nop
 8008960:	20000335 	.word	0x20000335

08008964 <__sfp_lock_release>:
 8008964:	4801      	ldr	r0, [pc, #4]	; (800896c <__sfp_lock_release+0x8>)
 8008966:	f000 bc21 	b.w	80091ac <__retarget_lock_release_recursive>
 800896a:	bf00      	nop
 800896c:	20000335 	.word	0x20000335

08008970 <__sinit_lock_acquire>:
 8008970:	4801      	ldr	r0, [pc, #4]	; (8008978 <__sinit_lock_acquire+0x8>)
 8008972:	f000 bc1a 	b.w	80091aa <__retarget_lock_acquire_recursive>
 8008976:	bf00      	nop
 8008978:	20000336 	.word	0x20000336

0800897c <__sinit_lock_release>:
 800897c:	4801      	ldr	r0, [pc, #4]	; (8008984 <__sinit_lock_release+0x8>)
 800897e:	f000 bc15 	b.w	80091ac <__retarget_lock_release_recursive>
 8008982:	bf00      	nop
 8008984:	20000336 	.word	0x20000336

08008988 <__sinit>:
 8008988:	b510      	push	{r4, lr}
 800898a:	4604      	mov	r4, r0
 800898c:	f7ff fff0 	bl	8008970 <__sinit_lock_acquire>
 8008990:	69a3      	ldr	r3, [r4, #24]
 8008992:	b11b      	cbz	r3, 800899c <__sinit+0x14>
 8008994:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008998:	f7ff bff0 	b.w	800897c <__sinit_lock_release>
 800899c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80089a0:	6523      	str	r3, [r4, #80]	; 0x50
 80089a2:	4b13      	ldr	r3, [pc, #76]	; (80089f0 <__sinit+0x68>)
 80089a4:	4a13      	ldr	r2, [pc, #76]	; (80089f4 <__sinit+0x6c>)
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	62a2      	str	r2, [r4, #40]	; 0x28
 80089aa:	42a3      	cmp	r3, r4
 80089ac:	bf04      	itt	eq
 80089ae:	2301      	moveq	r3, #1
 80089b0:	61a3      	streq	r3, [r4, #24]
 80089b2:	4620      	mov	r0, r4
 80089b4:	f000 f820 	bl	80089f8 <__sfp>
 80089b8:	6060      	str	r0, [r4, #4]
 80089ba:	4620      	mov	r0, r4
 80089bc:	f000 f81c 	bl	80089f8 <__sfp>
 80089c0:	60a0      	str	r0, [r4, #8]
 80089c2:	4620      	mov	r0, r4
 80089c4:	f000 f818 	bl	80089f8 <__sfp>
 80089c8:	2200      	movs	r2, #0
 80089ca:	60e0      	str	r0, [r4, #12]
 80089cc:	2104      	movs	r1, #4
 80089ce:	6860      	ldr	r0, [r4, #4]
 80089d0:	f7ff ff82 	bl	80088d8 <std>
 80089d4:	68a0      	ldr	r0, [r4, #8]
 80089d6:	2201      	movs	r2, #1
 80089d8:	2109      	movs	r1, #9
 80089da:	f7ff ff7d 	bl	80088d8 <std>
 80089de:	68e0      	ldr	r0, [r4, #12]
 80089e0:	2202      	movs	r2, #2
 80089e2:	2112      	movs	r1, #18
 80089e4:	f7ff ff78 	bl	80088d8 <std>
 80089e8:	2301      	movs	r3, #1
 80089ea:	61a3      	str	r3, [r4, #24]
 80089ec:	e7d2      	b.n	8008994 <__sinit+0xc>
 80089ee:	bf00      	nop
 80089f0:	0800a7b0 	.word	0x0800a7b0
 80089f4:	08008921 	.word	0x08008921

080089f8 <__sfp>:
 80089f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089fa:	4607      	mov	r7, r0
 80089fc:	f7ff ffac 	bl	8008958 <__sfp_lock_acquire>
 8008a00:	4b1e      	ldr	r3, [pc, #120]	; (8008a7c <__sfp+0x84>)
 8008a02:	681e      	ldr	r6, [r3, #0]
 8008a04:	69b3      	ldr	r3, [r6, #24]
 8008a06:	b913      	cbnz	r3, 8008a0e <__sfp+0x16>
 8008a08:	4630      	mov	r0, r6
 8008a0a:	f7ff ffbd 	bl	8008988 <__sinit>
 8008a0e:	3648      	adds	r6, #72	; 0x48
 8008a10:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008a14:	3b01      	subs	r3, #1
 8008a16:	d503      	bpl.n	8008a20 <__sfp+0x28>
 8008a18:	6833      	ldr	r3, [r6, #0]
 8008a1a:	b30b      	cbz	r3, 8008a60 <__sfp+0x68>
 8008a1c:	6836      	ldr	r6, [r6, #0]
 8008a1e:	e7f7      	b.n	8008a10 <__sfp+0x18>
 8008a20:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008a24:	b9d5      	cbnz	r5, 8008a5c <__sfp+0x64>
 8008a26:	4b16      	ldr	r3, [pc, #88]	; (8008a80 <__sfp+0x88>)
 8008a28:	60e3      	str	r3, [r4, #12]
 8008a2a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008a2e:	6665      	str	r5, [r4, #100]	; 0x64
 8008a30:	f000 fbba 	bl	80091a8 <__retarget_lock_init_recursive>
 8008a34:	f7ff ff96 	bl	8008964 <__sfp_lock_release>
 8008a38:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008a3c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008a40:	6025      	str	r5, [r4, #0]
 8008a42:	61a5      	str	r5, [r4, #24]
 8008a44:	2208      	movs	r2, #8
 8008a46:	4629      	mov	r1, r5
 8008a48:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008a4c:	f7fd f97c 	bl	8005d48 <memset>
 8008a50:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008a54:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008a58:	4620      	mov	r0, r4
 8008a5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a5c:	3468      	adds	r4, #104	; 0x68
 8008a5e:	e7d9      	b.n	8008a14 <__sfp+0x1c>
 8008a60:	2104      	movs	r1, #4
 8008a62:	4638      	mov	r0, r7
 8008a64:	f7ff ff62 	bl	800892c <__sfmoreglue>
 8008a68:	4604      	mov	r4, r0
 8008a6a:	6030      	str	r0, [r6, #0]
 8008a6c:	2800      	cmp	r0, #0
 8008a6e:	d1d5      	bne.n	8008a1c <__sfp+0x24>
 8008a70:	f7ff ff78 	bl	8008964 <__sfp_lock_release>
 8008a74:	230c      	movs	r3, #12
 8008a76:	603b      	str	r3, [r7, #0]
 8008a78:	e7ee      	b.n	8008a58 <__sfp+0x60>
 8008a7a:	bf00      	nop
 8008a7c:	0800a7b0 	.word	0x0800a7b0
 8008a80:	ffff0001 	.word	0xffff0001

08008a84 <_fwalk_reent>:
 8008a84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a88:	4606      	mov	r6, r0
 8008a8a:	4688      	mov	r8, r1
 8008a8c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008a90:	2700      	movs	r7, #0
 8008a92:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008a96:	f1b9 0901 	subs.w	r9, r9, #1
 8008a9a:	d505      	bpl.n	8008aa8 <_fwalk_reent+0x24>
 8008a9c:	6824      	ldr	r4, [r4, #0]
 8008a9e:	2c00      	cmp	r4, #0
 8008aa0:	d1f7      	bne.n	8008a92 <_fwalk_reent+0xe>
 8008aa2:	4638      	mov	r0, r7
 8008aa4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008aa8:	89ab      	ldrh	r3, [r5, #12]
 8008aaa:	2b01      	cmp	r3, #1
 8008aac:	d907      	bls.n	8008abe <_fwalk_reent+0x3a>
 8008aae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008ab2:	3301      	adds	r3, #1
 8008ab4:	d003      	beq.n	8008abe <_fwalk_reent+0x3a>
 8008ab6:	4629      	mov	r1, r5
 8008ab8:	4630      	mov	r0, r6
 8008aba:	47c0      	blx	r8
 8008abc:	4307      	orrs	r7, r0
 8008abe:	3568      	adds	r5, #104	; 0x68
 8008ac0:	e7e9      	b.n	8008a96 <_fwalk_reent+0x12>

08008ac2 <rshift>:
 8008ac2:	6903      	ldr	r3, [r0, #16]
 8008ac4:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008ac8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008acc:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008ad0:	f100 0414 	add.w	r4, r0, #20
 8008ad4:	dd45      	ble.n	8008b62 <rshift+0xa0>
 8008ad6:	f011 011f 	ands.w	r1, r1, #31
 8008ada:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008ade:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008ae2:	d10c      	bne.n	8008afe <rshift+0x3c>
 8008ae4:	f100 0710 	add.w	r7, r0, #16
 8008ae8:	4629      	mov	r1, r5
 8008aea:	42b1      	cmp	r1, r6
 8008aec:	d334      	bcc.n	8008b58 <rshift+0x96>
 8008aee:	1a9b      	subs	r3, r3, r2
 8008af0:	009b      	lsls	r3, r3, #2
 8008af2:	1eea      	subs	r2, r5, #3
 8008af4:	4296      	cmp	r6, r2
 8008af6:	bf38      	it	cc
 8008af8:	2300      	movcc	r3, #0
 8008afa:	4423      	add	r3, r4
 8008afc:	e015      	b.n	8008b2a <rshift+0x68>
 8008afe:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008b02:	f1c1 0820 	rsb	r8, r1, #32
 8008b06:	40cf      	lsrs	r7, r1
 8008b08:	f105 0e04 	add.w	lr, r5, #4
 8008b0c:	46a1      	mov	r9, r4
 8008b0e:	4576      	cmp	r6, lr
 8008b10:	46f4      	mov	ip, lr
 8008b12:	d815      	bhi.n	8008b40 <rshift+0x7e>
 8008b14:	1a9a      	subs	r2, r3, r2
 8008b16:	0092      	lsls	r2, r2, #2
 8008b18:	3a04      	subs	r2, #4
 8008b1a:	3501      	adds	r5, #1
 8008b1c:	42ae      	cmp	r6, r5
 8008b1e:	bf38      	it	cc
 8008b20:	2200      	movcc	r2, #0
 8008b22:	18a3      	adds	r3, r4, r2
 8008b24:	50a7      	str	r7, [r4, r2]
 8008b26:	b107      	cbz	r7, 8008b2a <rshift+0x68>
 8008b28:	3304      	adds	r3, #4
 8008b2a:	1b1a      	subs	r2, r3, r4
 8008b2c:	42a3      	cmp	r3, r4
 8008b2e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008b32:	bf08      	it	eq
 8008b34:	2300      	moveq	r3, #0
 8008b36:	6102      	str	r2, [r0, #16]
 8008b38:	bf08      	it	eq
 8008b3a:	6143      	streq	r3, [r0, #20]
 8008b3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008b40:	f8dc c000 	ldr.w	ip, [ip]
 8008b44:	fa0c fc08 	lsl.w	ip, ip, r8
 8008b48:	ea4c 0707 	orr.w	r7, ip, r7
 8008b4c:	f849 7b04 	str.w	r7, [r9], #4
 8008b50:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008b54:	40cf      	lsrs	r7, r1
 8008b56:	e7da      	b.n	8008b0e <rshift+0x4c>
 8008b58:	f851 cb04 	ldr.w	ip, [r1], #4
 8008b5c:	f847 cf04 	str.w	ip, [r7, #4]!
 8008b60:	e7c3      	b.n	8008aea <rshift+0x28>
 8008b62:	4623      	mov	r3, r4
 8008b64:	e7e1      	b.n	8008b2a <rshift+0x68>

08008b66 <__hexdig_fun>:
 8008b66:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008b6a:	2b09      	cmp	r3, #9
 8008b6c:	d802      	bhi.n	8008b74 <__hexdig_fun+0xe>
 8008b6e:	3820      	subs	r0, #32
 8008b70:	b2c0      	uxtb	r0, r0
 8008b72:	4770      	bx	lr
 8008b74:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008b78:	2b05      	cmp	r3, #5
 8008b7a:	d801      	bhi.n	8008b80 <__hexdig_fun+0x1a>
 8008b7c:	3847      	subs	r0, #71	; 0x47
 8008b7e:	e7f7      	b.n	8008b70 <__hexdig_fun+0xa>
 8008b80:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008b84:	2b05      	cmp	r3, #5
 8008b86:	d801      	bhi.n	8008b8c <__hexdig_fun+0x26>
 8008b88:	3827      	subs	r0, #39	; 0x27
 8008b8a:	e7f1      	b.n	8008b70 <__hexdig_fun+0xa>
 8008b8c:	2000      	movs	r0, #0
 8008b8e:	4770      	bx	lr

08008b90 <__gethex>:
 8008b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b94:	ed2d 8b02 	vpush	{d8}
 8008b98:	b089      	sub	sp, #36	; 0x24
 8008b9a:	ee08 0a10 	vmov	s16, r0
 8008b9e:	9304      	str	r3, [sp, #16]
 8008ba0:	4bb4      	ldr	r3, [pc, #720]	; (8008e74 <__gethex+0x2e4>)
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	9301      	str	r3, [sp, #4]
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	468b      	mov	fp, r1
 8008baa:	4690      	mov	r8, r2
 8008bac:	f7f7 fb20 	bl	80001f0 <strlen>
 8008bb0:	9b01      	ldr	r3, [sp, #4]
 8008bb2:	f8db 2000 	ldr.w	r2, [fp]
 8008bb6:	4403      	add	r3, r0
 8008bb8:	4682      	mov	sl, r0
 8008bba:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008bbe:	9305      	str	r3, [sp, #20]
 8008bc0:	1c93      	adds	r3, r2, #2
 8008bc2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008bc6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008bca:	32fe      	adds	r2, #254	; 0xfe
 8008bcc:	18d1      	adds	r1, r2, r3
 8008bce:	461f      	mov	r7, r3
 8008bd0:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008bd4:	9100      	str	r1, [sp, #0]
 8008bd6:	2830      	cmp	r0, #48	; 0x30
 8008bd8:	d0f8      	beq.n	8008bcc <__gethex+0x3c>
 8008bda:	f7ff ffc4 	bl	8008b66 <__hexdig_fun>
 8008bde:	4604      	mov	r4, r0
 8008be0:	2800      	cmp	r0, #0
 8008be2:	d13a      	bne.n	8008c5a <__gethex+0xca>
 8008be4:	9901      	ldr	r1, [sp, #4]
 8008be6:	4652      	mov	r2, sl
 8008be8:	4638      	mov	r0, r7
 8008bea:	f001 fadc 	bl	800a1a6 <strncmp>
 8008bee:	4605      	mov	r5, r0
 8008bf0:	2800      	cmp	r0, #0
 8008bf2:	d168      	bne.n	8008cc6 <__gethex+0x136>
 8008bf4:	f817 000a 	ldrb.w	r0, [r7, sl]
 8008bf8:	eb07 060a 	add.w	r6, r7, sl
 8008bfc:	f7ff ffb3 	bl	8008b66 <__hexdig_fun>
 8008c00:	2800      	cmp	r0, #0
 8008c02:	d062      	beq.n	8008cca <__gethex+0x13a>
 8008c04:	4633      	mov	r3, r6
 8008c06:	7818      	ldrb	r0, [r3, #0]
 8008c08:	2830      	cmp	r0, #48	; 0x30
 8008c0a:	461f      	mov	r7, r3
 8008c0c:	f103 0301 	add.w	r3, r3, #1
 8008c10:	d0f9      	beq.n	8008c06 <__gethex+0x76>
 8008c12:	f7ff ffa8 	bl	8008b66 <__hexdig_fun>
 8008c16:	2301      	movs	r3, #1
 8008c18:	fab0 f480 	clz	r4, r0
 8008c1c:	0964      	lsrs	r4, r4, #5
 8008c1e:	4635      	mov	r5, r6
 8008c20:	9300      	str	r3, [sp, #0]
 8008c22:	463a      	mov	r2, r7
 8008c24:	4616      	mov	r6, r2
 8008c26:	3201      	adds	r2, #1
 8008c28:	7830      	ldrb	r0, [r6, #0]
 8008c2a:	f7ff ff9c 	bl	8008b66 <__hexdig_fun>
 8008c2e:	2800      	cmp	r0, #0
 8008c30:	d1f8      	bne.n	8008c24 <__gethex+0x94>
 8008c32:	9901      	ldr	r1, [sp, #4]
 8008c34:	4652      	mov	r2, sl
 8008c36:	4630      	mov	r0, r6
 8008c38:	f001 fab5 	bl	800a1a6 <strncmp>
 8008c3c:	b980      	cbnz	r0, 8008c60 <__gethex+0xd0>
 8008c3e:	b94d      	cbnz	r5, 8008c54 <__gethex+0xc4>
 8008c40:	eb06 050a 	add.w	r5, r6, sl
 8008c44:	462a      	mov	r2, r5
 8008c46:	4616      	mov	r6, r2
 8008c48:	3201      	adds	r2, #1
 8008c4a:	7830      	ldrb	r0, [r6, #0]
 8008c4c:	f7ff ff8b 	bl	8008b66 <__hexdig_fun>
 8008c50:	2800      	cmp	r0, #0
 8008c52:	d1f8      	bne.n	8008c46 <__gethex+0xb6>
 8008c54:	1bad      	subs	r5, r5, r6
 8008c56:	00ad      	lsls	r5, r5, #2
 8008c58:	e004      	b.n	8008c64 <__gethex+0xd4>
 8008c5a:	2400      	movs	r4, #0
 8008c5c:	4625      	mov	r5, r4
 8008c5e:	e7e0      	b.n	8008c22 <__gethex+0x92>
 8008c60:	2d00      	cmp	r5, #0
 8008c62:	d1f7      	bne.n	8008c54 <__gethex+0xc4>
 8008c64:	7833      	ldrb	r3, [r6, #0]
 8008c66:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008c6a:	2b50      	cmp	r3, #80	; 0x50
 8008c6c:	d13b      	bne.n	8008ce6 <__gethex+0x156>
 8008c6e:	7873      	ldrb	r3, [r6, #1]
 8008c70:	2b2b      	cmp	r3, #43	; 0x2b
 8008c72:	d02c      	beq.n	8008cce <__gethex+0x13e>
 8008c74:	2b2d      	cmp	r3, #45	; 0x2d
 8008c76:	d02e      	beq.n	8008cd6 <__gethex+0x146>
 8008c78:	1c71      	adds	r1, r6, #1
 8008c7a:	f04f 0900 	mov.w	r9, #0
 8008c7e:	7808      	ldrb	r0, [r1, #0]
 8008c80:	f7ff ff71 	bl	8008b66 <__hexdig_fun>
 8008c84:	1e43      	subs	r3, r0, #1
 8008c86:	b2db      	uxtb	r3, r3
 8008c88:	2b18      	cmp	r3, #24
 8008c8a:	d82c      	bhi.n	8008ce6 <__gethex+0x156>
 8008c8c:	f1a0 0210 	sub.w	r2, r0, #16
 8008c90:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008c94:	f7ff ff67 	bl	8008b66 <__hexdig_fun>
 8008c98:	1e43      	subs	r3, r0, #1
 8008c9a:	b2db      	uxtb	r3, r3
 8008c9c:	2b18      	cmp	r3, #24
 8008c9e:	d91d      	bls.n	8008cdc <__gethex+0x14c>
 8008ca0:	f1b9 0f00 	cmp.w	r9, #0
 8008ca4:	d000      	beq.n	8008ca8 <__gethex+0x118>
 8008ca6:	4252      	negs	r2, r2
 8008ca8:	4415      	add	r5, r2
 8008caa:	f8cb 1000 	str.w	r1, [fp]
 8008cae:	b1e4      	cbz	r4, 8008cea <__gethex+0x15a>
 8008cb0:	9b00      	ldr	r3, [sp, #0]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	bf14      	ite	ne
 8008cb6:	2700      	movne	r7, #0
 8008cb8:	2706      	moveq	r7, #6
 8008cba:	4638      	mov	r0, r7
 8008cbc:	b009      	add	sp, #36	; 0x24
 8008cbe:	ecbd 8b02 	vpop	{d8}
 8008cc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cc6:	463e      	mov	r6, r7
 8008cc8:	4625      	mov	r5, r4
 8008cca:	2401      	movs	r4, #1
 8008ccc:	e7ca      	b.n	8008c64 <__gethex+0xd4>
 8008cce:	f04f 0900 	mov.w	r9, #0
 8008cd2:	1cb1      	adds	r1, r6, #2
 8008cd4:	e7d3      	b.n	8008c7e <__gethex+0xee>
 8008cd6:	f04f 0901 	mov.w	r9, #1
 8008cda:	e7fa      	b.n	8008cd2 <__gethex+0x142>
 8008cdc:	230a      	movs	r3, #10
 8008cde:	fb03 0202 	mla	r2, r3, r2, r0
 8008ce2:	3a10      	subs	r2, #16
 8008ce4:	e7d4      	b.n	8008c90 <__gethex+0x100>
 8008ce6:	4631      	mov	r1, r6
 8008ce8:	e7df      	b.n	8008caa <__gethex+0x11a>
 8008cea:	1bf3      	subs	r3, r6, r7
 8008cec:	3b01      	subs	r3, #1
 8008cee:	4621      	mov	r1, r4
 8008cf0:	2b07      	cmp	r3, #7
 8008cf2:	dc0b      	bgt.n	8008d0c <__gethex+0x17c>
 8008cf4:	ee18 0a10 	vmov	r0, s16
 8008cf8:	f000 fae6 	bl	80092c8 <_Balloc>
 8008cfc:	4604      	mov	r4, r0
 8008cfe:	b940      	cbnz	r0, 8008d12 <__gethex+0x182>
 8008d00:	4b5d      	ldr	r3, [pc, #372]	; (8008e78 <__gethex+0x2e8>)
 8008d02:	4602      	mov	r2, r0
 8008d04:	21de      	movs	r1, #222	; 0xde
 8008d06:	485d      	ldr	r0, [pc, #372]	; (8008e7c <__gethex+0x2ec>)
 8008d08:	f001 fa80 	bl	800a20c <__assert_func>
 8008d0c:	3101      	adds	r1, #1
 8008d0e:	105b      	asrs	r3, r3, #1
 8008d10:	e7ee      	b.n	8008cf0 <__gethex+0x160>
 8008d12:	f100 0914 	add.w	r9, r0, #20
 8008d16:	f04f 0b00 	mov.w	fp, #0
 8008d1a:	f1ca 0301 	rsb	r3, sl, #1
 8008d1e:	f8cd 9008 	str.w	r9, [sp, #8]
 8008d22:	f8cd b000 	str.w	fp, [sp]
 8008d26:	9306      	str	r3, [sp, #24]
 8008d28:	42b7      	cmp	r7, r6
 8008d2a:	d340      	bcc.n	8008dae <__gethex+0x21e>
 8008d2c:	9802      	ldr	r0, [sp, #8]
 8008d2e:	9b00      	ldr	r3, [sp, #0]
 8008d30:	f840 3b04 	str.w	r3, [r0], #4
 8008d34:	eba0 0009 	sub.w	r0, r0, r9
 8008d38:	1080      	asrs	r0, r0, #2
 8008d3a:	0146      	lsls	r6, r0, #5
 8008d3c:	6120      	str	r0, [r4, #16]
 8008d3e:	4618      	mov	r0, r3
 8008d40:	f000 fbb4 	bl	80094ac <__hi0bits>
 8008d44:	1a30      	subs	r0, r6, r0
 8008d46:	f8d8 6000 	ldr.w	r6, [r8]
 8008d4a:	42b0      	cmp	r0, r6
 8008d4c:	dd63      	ble.n	8008e16 <__gethex+0x286>
 8008d4e:	1b87      	subs	r7, r0, r6
 8008d50:	4639      	mov	r1, r7
 8008d52:	4620      	mov	r0, r4
 8008d54:	f000 ff58 	bl	8009c08 <__any_on>
 8008d58:	4682      	mov	sl, r0
 8008d5a:	b1a8      	cbz	r0, 8008d88 <__gethex+0x1f8>
 8008d5c:	1e7b      	subs	r3, r7, #1
 8008d5e:	1159      	asrs	r1, r3, #5
 8008d60:	f003 021f 	and.w	r2, r3, #31
 8008d64:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008d68:	f04f 0a01 	mov.w	sl, #1
 8008d6c:	fa0a f202 	lsl.w	r2, sl, r2
 8008d70:	420a      	tst	r2, r1
 8008d72:	d009      	beq.n	8008d88 <__gethex+0x1f8>
 8008d74:	4553      	cmp	r3, sl
 8008d76:	dd05      	ble.n	8008d84 <__gethex+0x1f4>
 8008d78:	1eb9      	subs	r1, r7, #2
 8008d7a:	4620      	mov	r0, r4
 8008d7c:	f000 ff44 	bl	8009c08 <__any_on>
 8008d80:	2800      	cmp	r0, #0
 8008d82:	d145      	bne.n	8008e10 <__gethex+0x280>
 8008d84:	f04f 0a02 	mov.w	sl, #2
 8008d88:	4639      	mov	r1, r7
 8008d8a:	4620      	mov	r0, r4
 8008d8c:	f7ff fe99 	bl	8008ac2 <rshift>
 8008d90:	443d      	add	r5, r7
 8008d92:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008d96:	42ab      	cmp	r3, r5
 8008d98:	da4c      	bge.n	8008e34 <__gethex+0x2a4>
 8008d9a:	ee18 0a10 	vmov	r0, s16
 8008d9e:	4621      	mov	r1, r4
 8008da0:	f000 fad2 	bl	8009348 <_Bfree>
 8008da4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008da6:	2300      	movs	r3, #0
 8008da8:	6013      	str	r3, [r2, #0]
 8008daa:	27a3      	movs	r7, #163	; 0xa3
 8008dac:	e785      	b.n	8008cba <__gethex+0x12a>
 8008dae:	1e73      	subs	r3, r6, #1
 8008db0:	9a05      	ldr	r2, [sp, #20]
 8008db2:	9303      	str	r3, [sp, #12]
 8008db4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008db8:	4293      	cmp	r3, r2
 8008dba:	d019      	beq.n	8008df0 <__gethex+0x260>
 8008dbc:	f1bb 0f20 	cmp.w	fp, #32
 8008dc0:	d107      	bne.n	8008dd2 <__gethex+0x242>
 8008dc2:	9b02      	ldr	r3, [sp, #8]
 8008dc4:	9a00      	ldr	r2, [sp, #0]
 8008dc6:	f843 2b04 	str.w	r2, [r3], #4
 8008dca:	9302      	str	r3, [sp, #8]
 8008dcc:	2300      	movs	r3, #0
 8008dce:	9300      	str	r3, [sp, #0]
 8008dd0:	469b      	mov	fp, r3
 8008dd2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008dd6:	f7ff fec6 	bl	8008b66 <__hexdig_fun>
 8008dda:	9b00      	ldr	r3, [sp, #0]
 8008ddc:	f000 000f 	and.w	r0, r0, #15
 8008de0:	fa00 f00b 	lsl.w	r0, r0, fp
 8008de4:	4303      	orrs	r3, r0
 8008de6:	9300      	str	r3, [sp, #0]
 8008de8:	f10b 0b04 	add.w	fp, fp, #4
 8008dec:	9b03      	ldr	r3, [sp, #12]
 8008dee:	e00d      	b.n	8008e0c <__gethex+0x27c>
 8008df0:	9b03      	ldr	r3, [sp, #12]
 8008df2:	9a06      	ldr	r2, [sp, #24]
 8008df4:	4413      	add	r3, r2
 8008df6:	42bb      	cmp	r3, r7
 8008df8:	d3e0      	bcc.n	8008dbc <__gethex+0x22c>
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	9901      	ldr	r1, [sp, #4]
 8008dfe:	9307      	str	r3, [sp, #28]
 8008e00:	4652      	mov	r2, sl
 8008e02:	f001 f9d0 	bl	800a1a6 <strncmp>
 8008e06:	9b07      	ldr	r3, [sp, #28]
 8008e08:	2800      	cmp	r0, #0
 8008e0a:	d1d7      	bne.n	8008dbc <__gethex+0x22c>
 8008e0c:	461e      	mov	r6, r3
 8008e0e:	e78b      	b.n	8008d28 <__gethex+0x198>
 8008e10:	f04f 0a03 	mov.w	sl, #3
 8008e14:	e7b8      	b.n	8008d88 <__gethex+0x1f8>
 8008e16:	da0a      	bge.n	8008e2e <__gethex+0x29e>
 8008e18:	1a37      	subs	r7, r6, r0
 8008e1a:	4621      	mov	r1, r4
 8008e1c:	ee18 0a10 	vmov	r0, s16
 8008e20:	463a      	mov	r2, r7
 8008e22:	f000 fcad 	bl	8009780 <__lshift>
 8008e26:	1bed      	subs	r5, r5, r7
 8008e28:	4604      	mov	r4, r0
 8008e2a:	f100 0914 	add.w	r9, r0, #20
 8008e2e:	f04f 0a00 	mov.w	sl, #0
 8008e32:	e7ae      	b.n	8008d92 <__gethex+0x202>
 8008e34:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008e38:	42a8      	cmp	r0, r5
 8008e3a:	dd72      	ble.n	8008f22 <__gethex+0x392>
 8008e3c:	1b45      	subs	r5, r0, r5
 8008e3e:	42ae      	cmp	r6, r5
 8008e40:	dc36      	bgt.n	8008eb0 <__gethex+0x320>
 8008e42:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008e46:	2b02      	cmp	r3, #2
 8008e48:	d02a      	beq.n	8008ea0 <__gethex+0x310>
 8008e4a:	2b03      	cmp	r3, #3
 8008e4c:	d02c      	beq.n	8008ea8 <__gethex+0x318>
 8008e4e:	2b01      	cmp	r3, #1
 8008e50:	d11c      	bne.n	8008e8c <__gethex+0x2fc>
 8008e52:	42ae      	cmp	r6, r5
 8008e54:	d11a      	bne.n	8008e8c <__gethex+0x2fc>
 8008e56:	2e01      	cmp	r6, #1
 8008e58:	d112      	bne.n	8008e80 <__gethex+0x2f0>
 8008e5a:	9a04      	ldr	r2, [sp, #16]
 8008e5c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008e60:	6013      	str	r3, [r2, #0]
 8008e62:	2301      	movs	r3, #1
 8008e64:	6123      	str	r3, [r4, #16]
 8008e66:	f8c9 3000 	str.w	r3, [r9]
 8008e6a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008e6c:	2762      	movs	r7, #98	; 0x62
 8008e6e:	601c      	str	r4, [r3, #0]
 8008e70:	e723      	b.n	8008cba <__gethex+0x12a>
 8008e72:	bf00      	nop
 8008e74:	0800aa9c 	.word	0x0800aa9c
 8008e78:	0800a9c0 	.word	0x0800a9c0
 8008e7c:	0800aa34 	.word	0x0800aa34
 8008e80:	1e71      	subs	r1, r6, #1
 8008e82:	4620      	mov	r0, r4
 8008e84:	f000 fec0 	bl	8009c08 <__any_on>
 8008e88:	2800      	cmp	r0, #0
 8008e8a:	d1e6      	bne.n	8008e5a <__gethex+0x2ca>
 8008e8c:	ee18 0a10 	vmov	r0, s16
 8008e90:	4621      	mov	r1, r4
 8008e92:	f000 fa59 	bl	8009348 <_Bfree>
 8008e96:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008e98:	2300      	movs	r3, #0
 8008e9a:	6013      	str	r3, [r2, #0]
 8008e9c:	2750      	movs	r7, #80	; 0x50
 8008e9e:	e70c      	b.n	8008cba <__gethex+0x12a>
 8008ea0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d1f2      	bne.n	8008e8c <__gethex+0x2fc>
 8008ea6:	e7d8      	b.n	8008e5a <__gethex+0x2ca>
 8008ea8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d1d5      	bne.n	8008e5a <__gethex+0x2ca>
 8008eae:	e7ed      	b.n	8008e8c <__gethex+0x2fc>
 8008eb0:	1e6f      	subs	r7, r5, #1
 8008eb2:	f1ba 0f00 	cmp.w	sl, #0
 8008eb6:	d131      	bne.n	8008f1c <__gethex+0x38c>
 8008eb8:	b127      	cbz	r7, 8008ec4 <__gethex+0x334>
 8008eba:	4639      	mov	r1, r7
 8008ebc:	4620      	mov	r0, r4
 8008ebe:	f000 fea3 	bl	8009c08 <__any_on>
 8008ec2:	4682      	mov	sl, r0
 8008ec4:	117b      	asrs	r3, r7, #5
 8008ec6:	2101      	movs	r1, #1
 8008ec8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008ecc:	f007 071f 	and.w	r7, r7, #31
 8008ed0:	fa01 f707 	lsl.w	r7, r1, r7
 8008ed4:	421f      	tst	r7, r3
 8008ed6:	4629      	mov	r1, r5
 8008ed8:	4620      	mov	r0, r4
 8008eda:	bf18      	it	ne
 8008edc:	f04a 0a02 	orrne.w	sl, sl, #2
 8008ee0:	1b76      	subs	r6, r6, r5
 8008ee2:	f7ff fdee 	bl	8008ac2 <rshift>
 8008ee6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008eea:	2702      	movs	r7, #2
 8008eec:	f1ba 0f00 	cmp.w	sl, #0
 8008ef0:	d048      	beq.n	8008f84 <__gethex+0x3f4>
 8008ef2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008ef6:	2b02      	cmp	r3, #2
 8008ef8:	d015      	beq.n	8008f26 <__gethex+0x396>
 8008efa:	2b03      	cmp	r3, #3
 8008efc:	d017      	beq.n	8008f2e <__gethex+0x39e>
 8008efe:	2b01      	cmp	r3, #1
 8008f00:	d109      	bne.n	8008f16 <__gethex+0x386>
 8008f02:	f01a 0f02 	tst.w	sl, #2
 8008f06:	d006      	beq.n	8008f16 <__gethex+0x386>
 8008f08:	f8d9 0000 	ldr.w	r0, [r9]
 8008f0c:	ea4a 0a00 	orr.w	sl, sl, r0
 8008f10:	f01a 0f01 	tst.w	sl, #1
 8008f14:	d10e      	bne.n	8008f34 <__gethex+0x3a4>
 8008f16:	f047 0710 	orr.w	r7, r7, #16
 8008f1a:	e033      	b.n	8008f84 <__gethex+0x3f4>
 8008f1c:	f04f 0a01 	mov.w	sl, #1
 8008f20:	e7d0      	b.n	8008ec4 <__gethex+0x334>
 8008f22:	2701      	movs	r7, #1
 8008f24:	e7e2      	b.n	8008eec <__gethex+0x35c>
 8008f26:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008f28:	f1c3 0301 	rsb	r3, r3, #1
 8008f2c:	9315      	str	r3, [sp, #84]	; 0x54
 8008f2e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d0f0      	beq.n	8008f16 <__gethex+0x386>
 8008f34:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008f38:	f104 0314 	add.w	r3, r4, #20
 8008f3c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008f40:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008f44:	f04f 0c00 	mov.w	ip, #0
 8008f48:	4618      	mov	r0, r3
 8008f4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f4e:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8008f52:	d01c      	beq.n	8008f8e <__gethex+0x3fe>
 8008f54:	3201      	adds	r2, #1
 8008f56:	6002      	str	r2, [r0, #0]
 8008f58:	2f02      	cmp	r7, #2
 8008f5a:	f104 0314 	add.w	r3, r4, #20
 8008f5e:	d13f      	bne.n	8008fe0 <__gethex+0x450>
 8008f60:	f8d8 2000 	ldr.w	r2, [r8]
 8008f64:	3a01      	subs	r2, #1
 8008f66:	42b2      	cmp	r2, r6
 8008f68:	d10a      	bne.n	8008f80 <__gethex+0x3f0>
 8008f6a:	1171      	asrs	r1, r6, #5
 8008f6c:	2201      	movs	r2, #1
 8008f6e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008f72:	f006 061f 	and.w	r6, r6, #31
 8008f76:	fa02 f606 	lsl.w	r6, r2, r6
 8008f7a:	421e      	tst	r6, r3
 8008f7c:	bf18      	it	ne
 8008f7e:	4617      	movne	r7, r2
 8008f80:	f047 0720 	orr.w	r7, r7, #32
 8008f84:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008f86:	601c      	str	r4, [r3, #0]
 8008f88:	9b04      	ldr	r3, [sp, #16]
 8008f8a:	601d      	str	r5, [r3, #0]
 8008f8c:	e695      	b.n	8008cba <__gethex+0x12a>
 8008f8e:	4299      	cmp	r1, r3
 8008f90:	f843 cc04 	str.w	ip, [r3, #-4]
 8008f94:	d8d8      	bhi.n	8008f48 <__gethex+0x3b8>
 8008f96:	68a3      	ldr	r3, [r4, #8]
 8008f98:	459b      	cmp	fp, r3
 8008f9a:	db19      	blt.n	8008fd0 <__gethex+0x440>
 8008f9c:	6861      	ldr	r1, [r4, #4]
 8008f9e:	ee18 0a10 	vmov	r0, s16
 8008fa2:	3101      	adds	r1, #1
 8008fa4:	f000 f990 	bl	80092c8 <_Balloc>
 8008fa8:	4681      	mov	r9, r0
 8008faa:	b918      	cbnz	r0, 8008fb4 <__gethex+0x424>
 8008fac:	4b1a      	ldr	r3, [pc, #104]	; (8009018 <__gethex+0x488>)
 8008fae:	4602      	mov	r2, r0
 8008fb0:	2184      	movs	r1, #132	; 0x84
 8008fb2:	e6a8      	b.n	8008d06 <__gethex+0x176>
 8008fb4:	6922      	ldr	r2, [r4, #16]
 8008fb6:	3202      	adds	r2, #2
 8008fb8:	f104 010c 	add.w	r1, r4, #12
 8008fbc:	0092      	lsls	r2, r2, #2
 8008fbe:	300c      	adds	r0, #12
 8008fc0:	f000 f974 	bl	80092ac <memcpy>
 8008fc4:	4621      	mov	r1, r4
 8008fc6:	ee18 0a10 	vmov	r0, s16
 8008fca:	f000 f9bd 	bl	8009348 <_Bfree>
 8008fce:	464c      	mov	r4, r9
 8008fd0:	6923      	ldr	r3, [r4, #16]
 8008fd2:	1c5a      	adds	r2, r3, #1
 8008fd4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008fd8:	6122      	str	r2, [r4, #16]
 8008fda:	2201      	movs	r2, #1
 8008fdc:	615a      	str	r2, [r3, #20]
 8008fde:	e7bb      	b.n	8008f58 <__gethex+0x3c8>
 8008fe0:	6922      	ldr	r2, [r4, #16]
 8008fe2:	455a      	cmp	r2, fp
 8008fe4:	dd0b      	ble.n	8008ffe <__gethex+0x46e>
 8008fe6:	2101      	movs	r1, #1
 8008fe8:	4620      	mov	r0, r4
 8008fea:	f7ff fd6a 	bl	8008ac2 <rshift>
 8008fee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008ff2:	3501      	adds	r5, #1
 8008ff4:	42ab      	cmp	r3, r5
 8008ff6:	f6ff aed0 	blt.w	8008d9a <__gethex+0x20a>
 8008ffa:	2701      	movs	r7, #1
 8008ffc:	e7c0      	b.n	8008f80 <__gethex+0x3f0>
 8008ffe:	f016 061f 	ands.w	r6, r6, #31
 8009002:	d0fa      	beq.n	8008ffa <__gethex+0x46a>
 8009004:	4453      	add	r3, sl
 8009006:	f1c6 0620 	rsb	r6, r6, #32
 800900a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800900e:	f000 fa4d 	bl	80094ac <__hi0bits>
 8009012:	42b0      	cmp	r0, r6
 8009014:	dbe7      	blt.n	8008fe6 <__gethex+0x456>
 8009016:	e7f0      	b.n	8008ffa <__gethex+0x46a>
 8009018:	0800a9c0 	.word	0x0800a9c0

0800901c <L_shift>:
 800901c:	f1c2 0208 	rsb	r2, r2, #8
 8009020:	0092      	lsls	r2, r2, #2
 8009022:	b570      	push	{r4, r5, r6, lr}
 8009024:	f1c2 0620 	rsb	r6, r2, #32
 8009028:	6843      	ldr	r3, [r0, #4]
 800902a:	6804      	ldr	r4, [r0, #0]
 800902c:	fa03 f506 	lsl.w	r5, r3, r6
 8009030:	432c      	orrs	r4, r5
 8009032:	40d3      	lsrs	r3, r2
 8009034:	6004      	str	r4, [r0, #0]
 8009036:	f840 3f04 	str.w	r3, [r0, #4]!
 800903a:	4288      	cmp	r0, r1
 800903c:	d3f4      	bcc.n	8009028 <L_shift+0xc>
 800903e:	bd70      	pop	{r4, r5, r6, pc}

08009040 <__match>:
 8009040:	b530      	push	{r4, r5, lr}
 8009042:	6803      	ldr	r3, [r0, #0]
 8009044:	3301      	adds	r3, #1
 8009046:	f811 4b01 	ldrb.w	r4, [r1], #1
 800904a:	b914      	cbnz	r4, 8009052 <__match+0x12>
 800904c:	6003      	str	r3, [r0, #0]
 800904e:	2001      	movs	r0, #1
 8009050:	bd30      	pop	{r4, r5, pc}
 8009052:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009056:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800905a:	2d19      	cmp	r5, #25
 800905c:	bf98      	it	ls
 800905e:	3220      	addls	r2, #32
 8009060:	42a2      	cmp	r2, r4
 8009062:	d0f0      	beq.n	8009046 <__match+0x6>
 8009064:	2000      	movs	r0, #0
 8009066:	e7f3      	b.n	8009050 <__match+0x10>

08009068 <__hexnan>:
 8009068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800906c:	680b      	ldr	r3, [r1, #0]
 800906e:	115e      	asrs	r6, r3, #5
 8009070:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009074:	f013 031f 	ands.w	r3, r3, #31
 8009078:	b087      	sub	sp, #28
 800907a:	bf18      	it	ne
 800907c:	3604      	addne	r6, #4
 800907e:	2500      	movs	r5, #0
 8009080:	1f37      	subs	r7, r6, #4
 8009082:	4690      	mov	r8, r2
 8009084:	6802      	ldr	r2, [r0, #0]
 8009086:	9301      	str	r3, [sp, #4]
 8009088:	4682      	mov	sl, r0
 800908a:	f846 5c04 	str.w	r5, [r6, #-4]
 800908e:	46b9      	mov	r9, r7
 8009090:	463c      	mov	r4, r7
 8009092:	9502      	str	r5, [sp, #8]
 8009094:	46ab      	mov	fp, r5
 8009096:	7851      	ldrb	r1, [r2, #1]
 8009098:	1c53      	adds	r3, r2, #1
 800909a:	9303      	str	r3, [sp, #12]
 800909c:	b341      	cbz	r1, 80090f0 <__hexnan+0x88>
 800909e:	4608      	mov	r0, r1
 80090a0:	9205      	str	r2, [sp, #20]
 80090a2:	9104      	str	r1, [sp, #16]
 80090a4:	f7ff fd5f 	bl	8008b66 <__hexdig_fun>
 80090a8:	2800      	cmp	r0, #0
 80090aa:	d14f      	bne.n	800914c <__hexnan+0xe4>
 80090ac:	9904      	ldr	r1, [sp, #16]
 80090ae:	9a05      	ldr	r2, [sp, #20]
 80090b0:	2920      	cmp	r1, #32
 80090b2:	d818      	bhi.n	80090e6 <__hexnan+0x7e>
 80090b4:	9b02      	ldr	r3, [sp, #8]
 80090b6:	459b      	cmp	fp, r3
 80090b8:	dd13      	ble.n	80090e2 <__hexnan+0x7a>
 80090ba:	454c      	cmp	r4, r9
 80090bc:	d206      	bcs.n	80090cc <__hexnan+0x64>
 80090be:	2d07      	cmp	r5, #7
 80090c0:	dc04      	bgt.n	80090cc <__hexnan+0x64>
 80090c2:	462a      	mov	r2, r5
 80090c4:	4649      	mov	r1, r9
 80090c6:	4620      	mov	r0, r4
 80090c8:	f7ff ffa8 	bl	800901c <L_shift>
 80090cc:	4544      	cmp	r4, r8
 80090ce:	d950      	bls.n	8009172 <__hexnan+0x10a>
 80090d0:	2300      	movs	r3, #0
 80090d2:	f1a4 0904 	sub.w	r9, r4, #4
 80090d6:	f844 3c04 	str.w	r3, [r4, #-4]
 80090da:	f8cd b008 	str.w	fp, [sp, #8]
 80090de:	464c      	mov	r4, r9
 80090e0:	461d      	mov	r5, r3
 80090e2:	9a03      	ldr	r2, [sp, #12]
 80090e4:	e7d7      	b.n	8009096 <__hexnan+0x2e>
 80090e6:	2929      	cmp	r1, #41	; 0x29
 80090e8:	d156      	bne.n	8009198 <__hexnan+0x130>
 80090ea:	3202      	adds	r2, #2
 80090ec:	f8ca 2000 	str.w	r2, [sl]
 80090f0:	f1bb 0f00 	cmp.w	fp, #0
 80090f4:	d050      	beq.n	8009198 <__hexnan+0x130>
 80090f6:	454c      	cmp	r4, r9
 80090f8:	d206      	bcs.n	8009108 <__hexnan+0xa0>
 80090fa:	2d07      	cmp	r5, #7
 80090fc:	dc04      	bgt.n	8009108 <__hexnan+0xa0>
 80090fe:	462a      	mov	r2, r5
 8009100:	4649      	mov	r1, r9
 8009102:	4620      	mov	r0, r4
 8009104:	f7ff ff8a 	bl	800901c <L_shift>
 8009108:	4544      	cmp	r4, r8
 800910a:	d934      	bls.n	8009176 <__hexnan+0x10e>
 800910c:	f1a8 0204 	sub.w	r2, r8, #4
 8009110:	4623      	mov	r3, r4
 8009112:	f853 1b04 	ldr.w	r1, [r3], #4
 8009116:	f842 1f04 	str.w	r1, [r2, #4]!
 800911a:	429f      	cmp	r7, r3
 800911c:	d2f9      	bcs.n	8009112 <__hexnan+0xaa>
 800911e:	1b3b      	subs	r3, r7, r4
 8009120:	f023 0303 	bic.w	r3, r3, #3
 8009124:	3304      	adds	r3, #4
 8009126:	3401      	adds	r4, #1
 8009128:	3e03      	subs	r6, #3
 800912a:	42b4      	cmp	r4, r6
 800912c:	bf88      	it	hi
 800912e:	2304      	movhi	r3, #4
 8009130:	4443      	add	r3, r8
 8009132:	2200      	movs	r2, #0
 8009134:	f843 2b04 	str.w	r2, [r3], #4
 8009138:	429f      	cmp	r7, r3
 800913a:	d2fb      	bcs.n	8009134 <__hexnan+0xcc>
 800913c:	683b      	ldr	r3, [r7, #0]
 800913e:	b91b      	cbnz	r3, 8009148 <__hexnan+0xe0>
 8009140:	4547      	cmp	r7, r8
 8009142:	d127      	bne.n	8009194 <__hexnan+0x12c>
 8009144:	2301      	movs	r3, #1
 8009146:	603b      	str	r3, [r7, #0]
 8009148:	2005      	movs	r0, #5
 800914a:	e026      	b.n	800919a <__hexnan+0x132>
 800914c:	3501      	adds	r5, #1
 800914e:	2d08      	cmp	r5, #8
 8009150:	f10b 0b01 	add.w	fp, fp, #1
 8009154:	dd06      	ble.n	8009164 <__hexnan+0xfc>
 8009156:	4544      	cmp	r4, r8
 8009158:	d9c3      	bls.n	80090e2 <__hexnan+0x7a>
 800915a:	2300      	movs	r3, #0
 800915c:	f844 3c04 	str.w	r3, [r4, #-4]
 8009160:	2501      	movs	r5, #1
 8009162:	3c04      	subs	r4, #4
 8009164:	6822      	ldr	r2, [r4, #0]
 8009166:	f000 000f 	and.w	r0, r0, #15
 800916a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800916e:	6022      	str	r2, [r4, #0]
 8009170:	e7b7      	b.n	80090e2 <__hexnan+0x7a>
 8009172:	2508      	movs	r5, #8
 8009174:	e7b5      	b.n	80090e2 <__hexnan+0x7a>
 8009176:	9b01      	ldr	r3, [sp, #4]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d0df      	beq.n	800913c <__hexnan+0xd4>
 800917c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009180:	f1c3 0320 	rsb	r3, r3, #32
 8009184:	fa22 f303 	lsr.w	r3, r2, r3
 8009188:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800918c:	401a      	ands	r2, r3
 800918e:	f846 2c04 	str.w	r2, [r6, #-4]
 8009192:	e7d3      	b.n	800913c <__hexnan+0xd4>
 8009194:	3f04      	subs	r7, #4
 8009196:	e7d1      	b.n	800913c <__hexnan+0xd4>
 8009198:	2004      	movs	r0, #4
 800919a:	b007      	add	sp, #28
 800919c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080091a0 <_localeconv_r>:
 80091a0:	4800      	ldr	r0, [pc, #0]	; (80091a4 <_localeconv_r+0x4>)
 80091a2:	4770      	bx	lr
 80091a4:	20000164 	.word	0x20000164

080091a8 <__retarget_lock_init_recursive>:
 80091a8:	4770      	bx	lr

080091aa <__retarget_lock_acquire_recursive>:
 80091aa:	4770      	bx	lr

080091ac <__retarget_lock_release_recursive>:
 80091ac:	4770      	bx	lr

080091ae <__swhatbuf_r>:
 80091ae:	b570      	push	{r4, r5, r6, lr}
 80091b0:	460e      	mov	r6, r1
 80091b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091b6:	2900      	cmp	r1, #0
 80091b8:	b096      	sub	sp, #88	; 0x58
 80091ba:	4614      	mov	r4, r2
 80091bc:	461d      	mov	r5, r3
 80091be:	da08      	bge.n	80091d2 <__swhatbuf_r+0x24>
 80091c0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80091c4:	2200      	movs	r2, #0
 80091c6:	602a      	str	r2, [r5, #0]
 80091c8:	061a      	lsls	r2, r3, #24
 80091ca:	d410      	bmi.n	80091ee <__swhatbuf_r+0x40>
 80091cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80091d0:	e00e      	b.n	80091f0 <__swhatbuf_r+0x42>
 80091d2:	466a      	mov	r2, sp
 80091d4:	f001 f85a 	bl	800a28c <_fstat_r>
 80091d8:	2800      	cmp	r0, #0
 80091da:	dbf1      	blt.n	80091c0 <__swhatbuf_r+0x12>
 80091dc:	9a01      	ldr	r2, [sp, #4]
 80091de:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80091e2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80091e6:	425a      	negs	r2, r3
 80091e8:	415a      	adcs	r2, r3
 80091ea:	602a      	str	r2, [r5, #0]
 80091ec:	e7ee      	b.n	80091cc <__swhatbuf_r+0x1e>
 80091ee:	2340      	movs	r3, #64	; 0x40
 80091f0:	2000      	movs	r0, #0
 80091f2:	6023      	str	r3, [r4, #0]
 80091f4:	b016      	add	sp, #88	; 0x58
 80091f6:	bd70      	pop	{r4, r5, r6, pc}

080091f8 <__smakebuf_r>:
 80091f8:	898b      	ldrh	r3, [r1, #12]
 80091fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80091fc:	079d      	lsls	r5, r3, #30
 80091fe:	4606      	mov	r6, r0
 8009200:	460c      	mov	r4, r1
 8009202:	d507      	bpl.n	8009214 <__smakebuf_r+0x1c>
 8009204:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009208:	6023      	str	r3, [r4, #0]
 800920a:	6123      	str	r3, [r4, #16]
 800920c:	2301      	movs	r3, #1
 800920e:	6163      	str	r3, [r4, #20]
 8009210:	b002      	add	sp, #8
 8009212:	bd70      	pop	{r4, r5, r6, pc}
 8009214:	ab01      	add	r3, sp, #4
 8009216:	466a      	mov	r2, sp
 8009218:	f7ff ffc9 	bl	80091ae <__swhatbuf_r>
 800921c:	9900      	ldr	r1, [sp, #0]
 800921e:	4605      	mov	r5, r0
 8009220:	4630      	mov	r0, r6
 8009222:	f000 fd95 	bl	8009d50 <_malloc_r>
 8009226:	b948      	cbnz	r0, 800923c <__smakebuf_r+0x44>
 8009228:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800922c:	059a      	lsls	r2, r3, #22
 800922e:	d4ef      	bmi.n	8009210 <__smakebuf_r+0x18>
 8009230:	f023 0303 	bic.w	r3, r3, #3
 8009234:	f043 0302 	orr.w	r3, r3, #2
 8009238:	81a3      	strh	r3, [r4, #12]
 800923a:	e7e3      	b.n	8009204 <__smakebuf_r+0xc>
 800923c:	4b0d      	ldr	r3, [pc, #52]	; (8009274 <__smakebuf_r+0x7c>)
 800923e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009240:	89a3      	ldrh	r3, [r4, #12]
 8009242:	6020      	str	r0, [r4, #0]
 8009244:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009248:	81a3      	strh	r3, [r4, #12]
 800924a:	9b00      	ldr	r3, [sp, #0]
 800924c:	6163      	str	r3, [r4, #20]
 800924e:	9b01      	ldr	r3, [sp, #4]
 8009250:	6120      	str	r0, [r4, #16]
 8009252:	b15b      	cbz	r3, 800926c <__smakebuf_r+0x74>
 8009254:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009258:	4630      	mov	r0, r6
 800925a:	f001 f829 	bl	800a2b0 <_isatty_r>
 800925e:	b128      	cbz	r0, 800926c <__smakebuf_r+0x74>
 8009260:	89a3      	ldrh	r3, [r4, #12]
 8009262:	f023 0303 	bic.w	r3, r3, #3
 8009266:	f043 0301 	orr.w	r3, r3, #1
 800926a:	81a3      	strh	r3, [r4, #12]
 800926c:	89a0      	ldrh	r0, [r4, #12]
 800926e:	4305      	orrs	r5, r0
 8009270:	81a5      	strh	r5, [r4, #12]
 8009272:	e7cd      	b.n	8009210 <__smakebuf_r+0x18>
 8009274:	08008921 	.word	0x08008921

08009278 <malloc>:
 8009278:	4b02      	ldr	r3, [pc, #8]	; (8009284 <malloc+0xc>)
 800927a:	4601      	mov	r1, r0
 800927c:	6818      	ldr	r0, [r3, #0]
 800927e:	f000 bd67 	b.w	8009d50 <_malloc_r>
 8009282:	bf00      	nop
 8009284:	2000000c 	.word	0x2000000c

08009288 <__ascii_mbtowc>:
 8009288:	b082      	sub	sp, #8
 800928a:	b901      	cbnz	r1, 800928e <__ascii_mbtowc+0x6>
 800928c:	a901      	add	r1, sp, #4
 800928e:	b142      	cbz	r2, 80092a2 <__ascii_mbtowc+0x1a>
 8009290:	b14b      	cbz	r3, 80092a6 <__ascii_mbtowc+0x1e>
 8009292:	7813      	ldrb	r3, [r2, #0]
 8009294:	600b      	str	r3, [r1, #0]
 8009296:	7812      	ldrb	r2, [r2, #0]
 8009298:	1e10      	subs	r0, r2, #0
 800929a:	bf18      	it	ne
 800929c:	2001      	movne	r0, #1
 800929e:	b002      	add	sp, #8
 80092a0:	4770      	bx	lr
 80092a2:	4610      	mov	r0, r2
 80092a4:	e7fb      	b.n	800929e <__ascii_mbtowc+0x16>
 80092a6:	f06f 0001 	mvn.w	r0, #1
 80092aa:	e7f8      	b.n	800929e <__ascii_mbtowc+0x16>

080092ac <memcpy>:
 80092ac:	440a      	add	r2, r1
 80092ae:	4291      	cmp	r1, r2
 80092b0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80092b4:	d100      	bne.n	80092b8 <memcpy+0xc>
 80092b6:	4770      	bx	lr
 80092b8:	b510      	push	{r4, lr}
 80092ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80092be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80092c2:	4291      	cmp	r1, r2
 80092c4:	d1f9      	bne.n	80092ba <memcpy+0xe>
 80092c6:	bd10      	pop	{r4, pc}

080092c8 <_Balloc>:
 80092c8:	b570      	push	{r4, r5, r6, lr}
 80092ca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80092cc:	4604      	mov	r4, r0
 80092ce:	460d      	mov	r5, r1
 80092d0:	b976      	cbnz	r6, 80092f0 <_Balloc+0x28>
 80092d2:	2010      	movs	r0, #16
 80092d4:	f7ff ffd0 	bl	8009278 <malloc>
 80092d8:	4602      	mov	r2, r0
 80092da:	6260      	str	r0, [r4, #36]	; 0x24
 80092dc:	b920      	cbnz	r0, 80092e8 <_Balloc+0x20>
 80092de:	4b18      	ldr	r3, [pc, #96]	; (8009340 <_Balloc+0x78>)
 80092e0:	4818      	ldr	r0, [pc, #96]	; (8009344 <_Balloc+0x7c>)
 80092e2:	2166      	movs	r1, #102	; 0x66
 80092e4:	f000 ff92 	bl	800a20c <__assert_func>
 80092e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80092ec:	6006      	str	r6, [r0, #0]
 80092ee:	60c6      	str	r6, [r0, #12]
 80092f0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80092f2:	68f3      	ldr	r3, [r6, #12]
 80092f4:	b183      	cbz	r3, 8009318 <_Balloc+0x50>
 80092f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80092f8:	68db      	ldr	r3, [r3, #12]
 80092fa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80092fe:	b9b8      	cbnz	r0, 8009330 <_Balloc+0x68>
 8009300:	2101      	movs	r1, #1
 8009302:	fa01 f605 	lsl.w	r6, r1, r5
 8009306:	1d72      	adds	r2, r6, #5
 8009308:	0092      	lsls	r2, r2, #2
 800930a:	4620      	mov	r0, r4
 800930c:	f000 fc9d 	bl	8009c4a <_calloc_r>
 8009310:	b160      	cbz	r0, 800932c <_Balloc+0x64>
 8009312:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009316:	e00e      	b.n	8009336 <_Balloc+0x6e>
 8009318:	2221      	movs	r2, #33	; 0x21
 800931a:	2104      	movs	r1, #4
 800931c:	4620      	mov	r0, r4
 800931e:	f000 fc94 	bl	8009c4a <_calloc_r>
 8009322:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009324:	60f0      	str	r0, [r6, #12]
 8009326:	68db      	ldr	r3, [r3, #12]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d1e4      	bne.n	80092f6 <_Balloc+0x2e>
 800932c:	2000      	movs	r0, #0
 800932e:	bd70      	pop	{r4, r5, r6, pc}
 8009330:	6802      	ldr	r2, [r0, #0]
 8009332:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009336:	2300      	movs	r3, #0
 8009338:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800933c:	e7f7      	b.n	800932e <_Balloc+0x66>
 800933e:	bf00      	nop
 8009340:	0800a94e 	.word	0x0800a94e
 8009344:	0800aab0 	.word	0x0800aab0

08009348 <_Bfree>:
 8009348:	b570      	push	{r4, r5, r6, lr}
 800934a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800934c:	4605      	mov	r5, r0
 800934e:	460c      	mov	r4, r1
 8009350:	b976      	cbnz	r6, 8009370 <_Bfree+0x28>
 8009352:	2010      	movs	r0, #16
 8009354:	f7ff ff90 	bl	8009278 <malloc>
 8009358:	4602      	mov	r2, r0
 800935a:	6268      	str	r0, [r5, #36]	; 0x24
 800935c:	b920      	cbnz	r0, 8009368 <_Bfree+0x20>
 800935e:	4b09      	ldr	r3, [pc, #36]	; (8009384 <_Bfree+0x3c>)
 8009360:	4809      	ldr	r0, [pc, #36]	; (8009388 <_Bfree+0x40>)
 8009362:	218a      	movs	r1, #138	; 0x8a
 8009364:	f000 ff52 	bl	800a20c <__assert_func>
 8009368:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800936c:	6006      	str	r6, [r0, #0]
 800936e:	60c6      	str	r6, [r0, #12]
 8009370:	b13c      	cbz	r4, 8009382 <_Bfree+0x3a>
 8009372:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009374:	6862      	ldr	r2, [r4, #4]
 8009376:	68db      	ldr	r3, [r3, #12]
 8009378:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800937c:	6021      	str	r1, [r4, #0]
 800937e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009382:	bd70      	pop	{r4, r5, r6, pc}
 8009384:	0800a94e 	.word	0x0800a94e
 8009388:	0800aab0 	.word	0x0800aab0

0800938c <__multadd>:
 800938c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009390:	690d      	ldr	r5, [r1, #16]
 8009392:	4607      	mov	r7, r0
 8009394:	460c      	mov	r4, r1
 8009396:	461e      	mov	r6, r3
 8009398:	f101 0c14 	add.w	ip, r1, #20
 800939c:	2000      	movs	r0, #0
 800939e:	f8dc 3000 	ldr.w	r3, [ip]
 80093a2:	b299      	uxth	r1, r3
 80093a4:	fb02 6101 	mla	r1, r2, r1, r6
 80093a8:	0c1e      	lsrs	r6, r3, #16
 80093aa:	0c0b      	lsrs	r3, r1, #16
 80093ac:	fb02 3306 	mla	r3, r2, r6, r3
 80093b0:	b289      	uxth	r1, r1
 80093b2:	3001      	adds	r0, #1
 80093b4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80093b8:	4285      	cmp	r5, r0
 80093ba:	f84c 1b04 	str.w	r1, [ip], #4
 80093be:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80093c2:	dcec      	bgt.n	800939e <__multadd+0x12>
 80093c4:	b30e      	cbz	r6, 800940a <__multadd+0x7e>
 80093c6:	68a3      	ldr	r3, [r4, #8]
 80093c8:	42ab      	cmp	r3, r5
 80093ca:	dc19      	bgt.n	8009400 <__multadd+0x74>
 80093cc:	6861      	ldr	r1, [r4, #4]
 80093ce:	4638      	mov	r0, r7
 80093d0:	3101      	adds	r1, #1
 80093d2:	f7ff ff79 	bl	80092c8 <_Balloc>
 80093d6:	4680      	mov	r8, r0
 80093d8:	b928      	cbnz	r0, 80093e6 <__multadd+0x5a>
 80093da:	4602      	mov	r2, r0
 80093dc:	4b0c      	ldr	r3, [pc, #48]	; (8009410 <__multadd+0x84>)
 80093de:	480d      	ldr	r0, [pc, #52]	; (8009414 <__multadd+0x88>)
 80093e0:	21b5      	movs	r1, #181	; 0xb5
 80093e2:	f000 ff13 	bl	800a20c <__assert_func>
 80093e6:	6922      	ldr	r2, [r4, #16]
 80093e8:	3202      	adds	r2, #2
 80093ea:	f104 010c 	add.w	r1, r4, #12
 80093ee:	0092      	lsls	r2, r2, #2
 80093f0:	300c      	adds	r0, #12
 80093f2:	f7ff ff5b 	bl	80092ac <memcpy>
 80093f6:	4621      	mov	r1, r4
 80093f8:	4638      	mov	r0, r7
 80093fa:	f7ff ffa5 	bl	8009348 <_Bfree>
 80093fe:	4644      	mov	r4, r8
 8009400:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009404:	3501      	adds	r5, #1
 8009406:	615e      	str	r6, [r3, #20]
 8009408:	6125      	str	r5, [r4, #16]
 800940a:	4620      	mov	r0, r4
 800940c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009410:	0800a9c0 	.word	0x0800a9c0
 8009414:	0800aab0 	.word	0x0800aab0

08009418 <__s2b>:
 8009418:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800941c:	460c      	mov	r4, r1
 800941e:	4615      	mov	r5, r2
 8009420:	461f      	mov	r7, r3
 8009422:	2209      	movs	r2, #9
 8009424:	3308      	adds	r3, #8
 8009426:	4606      	mov	r6, r0
 8009428:	fb93 f3f2 	sdiv	r3, r3, r2
 800942c:	2100      	movs	r1, #0
 800942e:	2201      	movs	r2, #1
 8009430:	429a      	cmp	r2, r3
 8009432:	db09      	blt.n	8009448 <__s2b+0x30>
 8009434:	4630      	mov	r0, r6
 8009436:	f7ff ff47 	bl	80092c8 <_Balloc>
 800943a:	b940      	cbnz	r0, 800944e <__s2b+0x36>
 800943c:	4602      	mov	r2, r0
 800943e:	4b19      	ldr	r3, [pc, #100]	; (80094a4 <__s2b+0x8c>)
 8009440:	4819      	ldr	r0, [pc, #100]	; (80094a8 <__s2b+0x90>)
 8009442:	21ce      	movs	r1, #206	; 0xce
 8009444:	f000 fee2 	bl	800a20c <__assert_func>
 8009448:	0052      	lsls	r2, r2, #1
 800944a:	3101      	adds	r1, #1
 800944c:	e7f0      	b.n	8009430 <__s2b+0x18>
 800944e:	9b08      	ldr	r3, [sp, #32]
 8009450:	6143      	str	r3, [r0, #20]
 8009452:	2d09      	cmp	r5, #9
 8009454:	f04f 0301 	mov.w	r3, #1
 8009458:	6103      	str	r3, [r0, #16]
 800945a:	dd16      	ble.n	800948a <__s2b+0x72>
 800945c:	f104 0909 	add.w	r9, r4, #9
 8009460:	46c8      	mov	r8, r9
 8009462:	442c      	add	r4, r5
 8009464:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009468:	4601      	mov	r1, r0
 800946a:	3b30      	subs	r3, #48	; 0x30
 800946c:	220a      	movs	r2, #10
 800946e:	4630      	mov	r0, r6
 8009470:	f7ff ff8c 	bl	800938c <__multadd>
 8009474:	45a0      	cmp	r8, r4
 8009476:	d1f5      	bne.n	8009464 <__s2b+0x4c>
 8009478:	f1a5 0408 	sub.w	r4, r5, #8
 800947c:	444c      	add	r4, r9
 800947e:	1b2d      	subs	r5, r5, r4
 8009480:	1963      	adds	r3, r4, r5
 8009482:	42bb      	cmp	r3, r7
 8009484:	db04      	blt.n	8009490 <__s2b+0x78>
 8009486:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800948a:	340a      	adds	r4, #10
 800948c:	2509      	movs	r5, #9
 800948e:	e7f6      	b.n	800947e <__s2b+0x66>
 8009490:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009494:	4601      	mov	r1, r0
 8009496:	3b30      	subs	r3, #48	; 0x30
 8009498:	220a      	movs	r2, #10
 800949a:	4630      	mov	r0, r6
 800949c:	f7ff ff76 	bl	800938c <__multadd>
 80094a0:	e7ee      	b.n	8009480 <__s2b+0x68>
 80094a2:	bf00      	nop
 80094a4:	0800a9c0 	.word	0x0800a9c0
 80094a8:	0800aab0 	.word	0x0800aab0

080094ac <__hi0bits>:
 80094ac:	0c03      	lsrs	r3, r0, #16
 80094ae:	041b      	lsls	r3, r3, #16
 80094b0:	b9d3      	cbnz	r3, 80094e8 <__hi0bits+0x3c>
 80094b2:	0400      	lsls	r0, r0, #16
 80094b4:	2310      	movs	r3, #16
 80094b6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80094ba:	bf04      	itt	eq
 80094bc:	0200      	lsleq	r0, r0, #8
 80094be:	3308      	addeq	r3, #8
 80094c0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80094c4:	bf04      	itt	eq
 80094c6:	0100      	lsleq	r0, r0, #4
 80094c8:	3304      	addeq	r3, #4
 80094ca:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80094ce:	bf04      	itt	eq
 80094d0:	0080      	lsleq	r0, r0, #2
 80094d2:	3302      	addeq	r3, #2
 80094d4:	2800      	cmp	r0, #0
 80094d6:	db05      	blt.n	80094e4 <__hi0bits+0x38>
 80094d8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80094dc:	f103 0301 	add.w	r3, r3, #1
 80094e0:	bf08      	it	eq
 80094e2:	2320      	moveq	r3, #32
 80094e4:	4618      	mov	r0, r3
 80094e6:	4770      	bx	lr
 80094e8:	2300      	movs	r3, #0
 80094ea:	e7e4      	b.n	80094b6 <__hi0bits+0xa>

080094ec <__lo0bits>:
 80094ec:	6803      	ldr	r3, [r0, #0]
 80094ee:	f013 0207 	ands.w	r2, r3, #7
 80094f2:	4601      	mov	r1, r0
 80094f4:	d00b      	beq.n	800950e <__lo0bits+0x22>
 80094f6:	07da      	lsls	r2, r3, #31
 80094f8:	d423      	bmi.n	8009542 <__lo0bits+0x56>
 80094fa:	0798      	lsls	r0, r3, #30
 80094fc:	bf49      	itett	mi
 80094fe:	085b      	lsrmi	r3, r3, #1
 8009500:	089b      	lsrpl	r3, r3, #2
 8009502:	2001      	movmi	r0, #1
 8009504:	600b      	strmi	r3, [r1, #0]
 8009506:	bf5c      	itt	pl
 8009508:	600b      	strpl	r3, [r1, #0]
 800950a:	2002      	movpl	r0, #2
 800950c:	4770      	bx	lr
 800950e:	b298      	uxth	r0, r3
 8009510:	b9a8      	cbnz	r0, 800953e <__lo0bits+0x52>
 8009512:	0c1b      	lsrs	r3, r3, #16
 8009514:	2010      	movs	r0, #16
 8009516:	b2da      	uxtb	r2, r3
 8009518:	b90a      	cbnz	r2, 800951e <__lo0bits+0x32>
 800951a:	3008      	adds	r0, #8
 800951c:	0a1b      	lsrs	r3, r3, #8
 800951e:	071a      	lsls	r2, r3, #28
 8009520:	bf04      	itt	eq
 8009522:	091b      	lsreq	r3, r3, #4
 8009524:	3004      	addeq	r0, #4
 8009526:	079a      	lsls	r2, r3, #30
 8009528:	bf04      	itt	eq
 800952a:	089b      	lsreq	r3, r3, #2
 800952c:	3002      	addeq	r0, #2
 800952e:	07da      	lsls	r2, r3, #31
 8009530:	d403      	bmi.n	800953a <__lo0bits+0x4e>
 8009532:	085b      	lsrs	r3, r3, #1
 8009534:	f100 0001 	add.w	r0, r0, #1
 8009538:	d005      	beq.n	8009546 <__lo0bits+0x5a>
 800953a:	600b      	str	r3, [r1, #0]
 800953c:	4770      	bx	lr
 800953e:	4610      	mov	r0, r2
 8009540:	e7e9      	b.n	8009516 <__lo0bits+0x2a>
 8009542:	2000      	movs	r0, #0
 8009544:	4770      	bx	lr
 8009546:	2020      	movs	r0, #32
 8009548:	4770      	bx	lr
	...

0800954c <__i2b>:
 800954c:	b510      	push	{r4, lr}
 800954e:	460c      	mov	r4, r1
 8009550:	2101      	movs	r1, #1
 8009552:	f7ff feb9 	bl	80092c8 <_Balloc>
 8009556:	4602      	mov	r2, r0
 8009558:	b928      	cbnz	r0, 8009566 <__i2b+0x1a>
 800955a:	4b05      	ldr	r3, [pc, #20]	; (8009570 <__i2b+0x24>)
 800955c:	4805      	ldr	r0, [pc, #20]	; (8009574 <__i2b+0x28>)
 800955e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009562:	f000 fe53 	bl	800a20c <__assert_func>
 8009566:	2301      	movs	r3, #1
 8009568:	6144      	str	r4, [r0, #20]
 800956a:	6103      	str	r3, [r0, #16]
 800956c:	bd10      	pop	{r4, pc}
 800956e:	bf00      	nop
 8009570:	0800a9c0 	.word	0x0800a9c0
 8009574:	0800aab0 	.word	0x0800aab0

08009578 <__multiply>:
 8009578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800957c:	4691      	mov	r9, r2
 800957e:	690a      	ldr	r2, [r1, #16]
 8009580:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009584:	429a      	cmp	r2, r3
 8009586:	bfb8      	it	lt
 8009588:	460b      	movlt	r3, r1
 800958a:	460c      	mov	r4, r1
 800958c:	bfbc      	itt	lt
 800958e:	464c      	movlt	r4, r9
 8009590:	4699      	movlt	r9, r3
 8009592:	6927      	ldr	r7, [r4, #16]
 8009594:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009598:	68a3      	ldr	r3, [r4, #8]
 800959a:	6861      	ldr	r1, [r4, #4]
 800959c:	eb07 060a 	add.w	r6, r7, sl
 80095a0:	42b3      	cmp	r3, r6
 80095a2:	b085      	sub	sp, #20
 80095a4:	bfb8      	it	lt
 80095a6:	3101      	addlt	r1, #1
 80095a8:	f7ff fe8e 	bl	80092c8 <_Balloc>
 80095ac:	b930      	cbnz	r0, 80095bc <__multiply+0x44>
 80095ae:	4602      	mov	r2, r0
 80095b0:	4b44      	ldr	r3, [pc, #272]	; (80096c4 <__multiply+0x14c>)
 80095b2:	4845      	ldr	r0, [pc, #276]	; (80096c8 <__multiply+0x150>)
 80095b4:	f240 115d 	movw	r1, #349	; 0x15d
 80095b8:	f000 fe28 	bl	800a20c <__assert_func>
 80095bc:	f100 0514 	add.w	r5, r0, #20
 80095c0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80095c4:	462b      	mov	r3, r5
 80095c6:	2200      	movs	r2, #0
 80095c8:	4543      	cmp	r3, r8
 80095ca:	d321      	bcc.n	8009610 <__multiply+0x98>
 80095cc:	f104 0314 	add.w	r3, r4, #20
 80095d0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80095d4:	f109 0314 	add.w	r3, r9, #20
 80095d8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80095dc:	9202      	str	r2, [sp, #8]
 80095de:	1b3a      	subs	r2, r7, r4
 80095e0:	3a15      	subs	r2, #21
 80095e2:	f022 0203 	bic.w	r2, r2, #3
 80095e6:	3204      	adds	r2, #4
 80095e8:	f104 0115 	add.w	r1, r4, #21
 80095ec:	428f      	cmp	r7, r1
 80095ee:	bf38      	it	cc
 80095f0:	2204      	movcc	r2, #4
 80095f2:	9201      	str	r2, [sp, #4]
 80095f4:	9a02      	ldr	r2, [sp, #8]
 80095f6:	9303      	str	r3, [sp, #12]
 80095f8:	429a      	cmp	r2, r3
 80095fa:	d80c      	bhi.n	8009616 <__multiply+0x9e>
 80095fc:	2e00      	cmp	r6, #0
 80095fe:	dd03      	ble.n	8009608 <__multiply+0x90>
 8009600:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009604:	2b00      	cmp	r3, #0
 8009606:	d05a      	beq.n	80096be <__multiply+0x146>
 8009608:	6106      	str	r6, [r0, #16]
 800960a:	b005      	add	sp, #20
 800960c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009610:	f843 2b04 	str.w	r2, [r3], #4
 8009614:	e7d8      	b.n	80095c8 <__multiply+0x50>
 8009616:	f8b3 a000 	ldrh.w	sl, [r3]
 800961a:	f1ba 0f00 	cmp.w	sl, #0
 800961e:	d024      	beq.n	800966a <__multiply+0xf2>
 8009620:	f104 0e14 	add.w	lr, r4, #20
 8009624:	46a9      	mov	r9, r5
 8009626:	f04f 0c00 	mov.w	ip, #0
 800962a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800962e:	f8d9 1000 	ldr.w	r1, [r9]
 8009632:	fa1f fb82 	uxth.w	fp, r2
 8009636:	b289      	uxth	r1, r1
 8009638:	fb0a 110b 	mla	r1, sl, fp, r1
 800963c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009640:	f8d9 2000 	ldr.w	r2, [r9]
 8009644:	4461      	add	r1, ip
 8009646:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800964a:	fb0a c20b 	mla	r2, sl, fp, ip
 800964e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009652:	b289      	uxth	r1, r1
 8009654:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009658:	4577      	cmp	r7, lr
 800965a:	f849 1b04 	str.w	r1, [r9], #4
 800965e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009662:	d8e2      	bhi.n	800962a <__multiply+0xb2>
 8009664:	9a01      	ldr	r2, [sp, #4]
 8009666:	f845 c002 	str.w	ip, [r5, r2]
 800966a:	9a03      	ldr	r2, [sp, #12]
 800966c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009670:	3304      	adds	r3, #4
 8009672:	f1b9 0f00 	cmp.w	r9, #0
 8009676:	d020      	beq.n	80096ba <__multiply+0x142>
 8009678:	6829      	ldr	r1, [r5, #0]
 800967a:	f104 0c14 	add.w	ip, r4, #20
 800967e:	46ae      	mov	lr, r5
 8009680:	f04f 0a00 	mov.w	sl, #0
 8009684:	f8bc b000 	ldrh.w	fp, [ip]
 8009688:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800968c:	fb09 220b 	mla	r2, r9, fp, r2
 8009690:	4492      	add	sl, r2
 8009692:	b289      	uxth	r1, r1
 8009694:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009698:	f84e 1b04 	str.w	r1, [lr], #4
 800969c:	f85c 2b04 	ldr.w	r2, [ip], #4
 80096a0:	f8be 1000 	ldrh.w	r1, [lr]
 80096a4:	0c12      	lsrs	r2, r2, #16
 80096a6:	fb09 1102 	mla	r1, r9, r2, r1
 80096aa:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80096ae:	4567      	cmp	r7, ip
 80096b0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80096b4:	d8e6      	bhi.n	8009684 <__multiply+0x10c>
 80096b6:	9a01      	ldr	r2, [sp, #4]
 80096b8:	50a9      	str	r1, [r5, r2]
 80096ba:	3504      	adds	r5, #4
 80096bc:	e79a      	b.n	80095f4 <__multiply+0x7c>
 80096be:	3e01      	subs	r6, #1
 80096c0:	e79c      	b.n	80095fc <__multiply+0x84>
 80096c2:	bf00      	nop
 80096c4:	0800a9c0 	.word	0x0800a9c0
 80096c8:	0800aab0 	.word	0x0800aab0

080096cc <__pow5mult>:
 80096cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80096d0:	4615      	mov	r5, r2
 80096d2:	f012 0203 	ands.w	r2, r2, #3
 80096d6:	4606      	mov	r6, r0
 80096d8:	460f      	mov	r7, r1
 80096da:	d007      	beq.n	80096ec <__pow5mult+0x20>
 80096dc:	4c25      	ldr	r4, [pc, #148]	; (8009774 <__pow5mult+0xa8>)
 80096de:	3a01      	subs	r2, #1
 80096e0:	2300      	movs	r3, #0
 80096e2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80096e6:	f7ff fe51 	bl	800938c <__multadd>
 80096ea:	4607      	mov	r7, r0
 80096ec:	10ad      	asrs	r5, r5, #2
 80096ee:	d03d      	beq.n	800976c <__pow5mult+0xa0>
 80096f0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80096f2:	b97c      	cbnz	r4, 8009714 <__pow5mult+0x48>
 80096f4:	2010      	movs	r0, #16
 80096f6:	f7ff fdbf 	bl	8009278 <malloc>
 80096fa:	4602      	mov	r2, r0
 80096fc:	6270      	str	r0, [r6, #36]	; 0x24
 80096fe:	b928      	cbnz	r0, 800970c <__pow5mult+0x40>
 8009700:	4b1d      	ldr	r3, [pc, #116]	; (8009778 <__pow5mult+0xac>)
 8009702:	481e      	ldr	r0, [pc, #120]	; (800977c <__pow5mult+0xb0>)
 8009704:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009708:	f000 fd80 	bl	800a20c <__assert_func>
 800970c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009710:	6004      	str	r4, [r0, #0]
 8009712:	60c4      	str	r4, [r0, #12]
 8009714:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009718:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800971c:	b94c      	cbnz	r4, 8009732 <__pow5mult+0x66>
 800971e:	f240 2171 	movw	r1, #625	; 0x271
 8009722:	4630      	mov	r0, r6
 8009724:	f7ff ff12 	bl	800954c <__i2b>
 8009728:	2300      	movs	r3, #0
 800972a:	f8c8 0008 	str.w	r0, [r8, #8]
 800972e:	4604      	mov	r4, r0
 8009730:	6003      	str	r3, [r0, #0]
 8009732:	f04f 0900 	mov.w	r9, #0
 8009736:	07eb      	lsls	r3, r5, #31
 8009738:	d50a      	bpl.n	8009750 <__pow5mult+0x84>
 800973a:	4639      	mov	r1, r7
 800973c:	4622      	mov	r2, r4
 800973e:	4630      	mov	r0, r6
 8009740:	f7ff ff1a 	bl	8009578 <__multiply>
 8009744:	4639      	mov	r1, r7
 8009746:	4680      	mov	r8, r0
 8009748:	4630      	mov	r0, r6
 800974a:	f7ff fdfd 	bl	8009348 <_Bfree>
 800974e:	4647      	mov	r7, r8
 8009750:	106d      	asrs	r5, r5, #1
 8009752:	d00b      	beq.n	800976c <__pow5mult+0xa0>
 8009754:	6820      	ldr	r0, [r4, #0]
 8009756:	b938      	cbnz	r0, 8009768 <__pow5mult+0x9c>
 8009758:	4622      	mov	r2, r4
 800975a:	4621      	mov	r1, r4
 800975c:	4630      	mov	r0, r6
 800975e:	f7ff ff0b 	bl	8009578 <__multiply>
 8009762:	6020      	str	r0, [r4, #0]
 8009764:	f8c0 9000 	str.w	r9, [r0]
 8009768:	4604      	mov	r4, r0
 800976a:	e7e4      	b.n	8009736 <__pow5mult+0x6a>
 800976c:	4638      	mov	r0, r7
 800976e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009772:	bf00      	nop
 8009774:	0800ac00 	.word	0x0800ac00
 8009778:	0800a94e 	.word	0x0800a94e
 800977c:	0800aab0 	.word	0x0800aab0

08009780 <__lshift>:
 8009780:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009784:	460c      	mov	r4, r1
 8009786:	6849      	ldr	r1, [r1, #4]
 8009788:	6923      	ldr	r3, [r4, #16]
 800978a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800978e:	68a3      	ldr	r3, [r4, #8]
 8009790:	4607      	mov	r7, r0
 8009792:	4691      	mov	r9, r2
 8009794:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009798:	f108 0601 	add.w	r6, r8, #1
 800979c:	42b3      	cmp	r3, r6
 800979e:	db0b      	blt.n	80097b8 <__lshift+0x38>
 80097a0:	4638      	mov	r0, r7
 80097a2:	f7ff fd91 	bl	80092c8 <_Balloc>
 80097a6:	4605      	mov	r5, r0
 80097a8:	b948      	cbnz	r0, 80097be <__lshift+0x3e>
 80097aa:	4602      	mov	r2, r0
 80097ac:	4b2a      	ldr	r3, [pc, #168]	; (8009858 <__lshift+0xd8>)
 80097ae:	482b      	ldr	r0, [pc, #172]	; (800985c <__lshift+0xdc>)
 80097b0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80097b4:	f000 fd2a 	bl	800a20c <__assert_func>
 80097b8:	3101      	adds	r1, #1
 80097ba:	005b      	lsls	r3, r3, #1
 80097bc:	e7ee      	b.n	800979c <__lshift+0x1c>
 80097be:	2300      	movs	r3, #0
 80097c0:	f100 0114 	add.w	r1, r0, #20
 80097c4:	f100 0210 	add.w	r2, r0, #16
 80097c8:	4618      	mov	r0, r3
 80097ca:	4553      	cmp	r3, sl
 80097cc:	db37      	blt.n	800983e <__lshift+0xbe>
 80097ce:	6920      	ldr	r0, [r4, #16]
 80097d0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80097d4:	f104 0314 	add.w	r3, r4, #20
 80097d8:	f019 091f 	ands.w	r9, r9, #31
 80097dc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80097e0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80097e4:	d02f      	beq.n	8009846 <__lshift+0xc6>
 80097e6:	f1c9 0e20 	rsb	lr, r9, #32
 80097ea:	468a      	mov	sl, r1
 80097ec:	f04f 0c00 	mov.w	ip, #0
 80097f0:	681a      	ldr	r2, [r3, #0]
 80097f2:	fa02 f209 	lsl.w	r2, r2, r9
 80097f6:	ea42 020c 	orr.w	r2, r2, ip
 80097fa:	f84a 2b04 	str.w	r2, [sl], #4
 80097fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8009802:	4298      	cmp	r0, r3
 8009804:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009808:	d8f2      	bhi.n	80097f0 <__lshift+0x70>
 800980a:	1b03      	subs	r3, r0, r4
 800980c:	3b15      	subs	r3, #21
 800980e:	f023 0303 	bic.w	r3, r3, #3
 8009812:	3304      	adds	r3, #4
 8009814:	f104 0215 	add.w	r2, r4, #21
 8009818:	4290      	cmp	r0, r2
 800981a:	bf38      	it	cc
 800981c:	2304      	movcc	r3, #4
 800981e:	f841 c003 	str.w	ip, [r1, r3]
 8009822:	f1bc 0f00 	cmp.w	ip, #0
 8009826:	d001      	beq.n	800982c <__lshift+0xac>
 8009828:	f108 0602 	add.w	r6, r8, #2
 800982c:	3e01      	subs	r6, #1
 800982e:	4638      	mov	r0, r7
 8009830:	612e      	str	r6, [r5, #16]
 8009832:	4621      	mov	r1, r4
 8009834:	f7ff fd88 	bl	8009348 <_Bfree>
 8009838:	4628      	mov	r0, r5
 800983a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800983e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009842:	3301      	adds	r3, #1
 8009844:	e7c1      	b.n	80097ca <__lshift+0x4a>
 8009846:	3904      	subs	r1, #4
 8009848:	f853 2b04 	ldr.w	r2, [r3], #4
 800984c:	f841 2f04 	str.w	r2, [r1, #4]!
 8009850:	4298      	cmp	r0, r3
 8009852:	d8f9      	bhi.n	8009848 <__lshift+0xc8>
 8009854:	e7ea      	b.n	800982c <__lshift+0xac>
 8009856:	bf00      	nop
 8009858:	0800a9c0 	.word	0x0800a9c0
 800985c:	0800aab0 	.word	0x0800aab0

08009860 <__mcmp>:
 8009860:	b530      	push	{r4, r5, lr}
 8009862:	6902      	ldr	r2, [r0, #16]
 8009864:	690c      	ldr	r4, [r1, #16]
 8009866:	1b12      	subs	r2, r2, r4
 8009868:	d10e      	bne.n	8009888 <__mcmp+0x28>
 800986a:	f100 0314 	add.w	r3, r0, #20
 800986e:	3114      	adds	r1, #20
 8009870:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009874:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009878:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800987c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009880:	42a5      	cmp	r5, r4
 8009882:	d003      	beq.n	800988c <__mcmp+0x2c>
 8009884:	d305      	bcc.n	8009892 <__mcmp+0x32>
 8009886:	2201      	movs	r2, #1
 8009888:	4610      	mov	r0, r2
 800988a:	bd30      	pop	{r4, r5, pc}
 800988c:	4283      	cmp	r3, r0
 800988e:	d3f3      	bcc.n	8009878 <__mcmp+0x18>
 8009890:	e7fa      	b.n	8009888 <__mcmp+0x28>
 8009892:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009896:	e7f7      	b.n	8009888 <__mcmp+0x28>

08009898 <__mdiff>:
 8009898:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800989c:	460c      	mov	r4, r1
 800989e:	4606      	mov	r6, r0
 80098a0:	4611      	mov	r1, r2
 80098a2:	4620      	mov	r0, r4
 80098a4:	4690      	mov	r8, r2
 80098a6:	f7ff ffdb 	bl	8009860 <__mcmp>
 80098aa:	1e05      	subs	r5, r0, #0
 80098ac:	d110      	bne.n	80098d0 <__mdiff+0x38>
 80098ae:	4629      	mov	r1, r5
 80098b0:	4630      	mov	r0, r6
 80098b2:	f7ff fd09 	bl	80092c8 <_Balloc>
 80098b6:	b930      	cbnz	r0, 80098c6 <__mdiff+0x2e>
 80098b8:	4b3a      	ldr	r3, [pc, #232]	; (80099a4 <__mdiff+0x10c>)
 80098ba:	4602      	mov	r2, r0
 80098bc:	f240 2132 	movw	r1, #562	; 0x232
 80098c0:	4839      	ldr	r0, [pc, #228]	; (80099a8 <__mdiff+0x110>)
 80098c2:	f000 fca3 	bl	800a20c <__assert_func>
 80098c6:	2301      	movs	r3, #1
 80098c8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80098cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098d0:	bfa4      	itt	ge
 80098d2:	4643      	movge	r3, r8
 80098d4:	46a0      	movge	r8, r4
 80098d6:	4630      	mov	r0, r6
 80098d8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80098dc:	bfa6      	itte	ge
 80098de:	461c      	movge	r4, r3
 80098e0:	2500      	movge	r5, #0
 80098e2:	2501      	movlt	r5, #1
 80098e4:	f7ff fcf0 	bl	80092c8 <_Balloc>
 80098e8:	b920      	cbnz	r0, 80098f4 <__mdiff+0x5c>
 80098ea:	4b2e      	ldr	r3, [pc, #184]	; (80099a4 <__mdiff+0x10c>)
 80098ec:	4602      	mov	r2, r0
 80098ee:	f44f 7110 	mov.w	r1, #576	; 0x240
 80098f2:	e7e5      	b.n	80098c0 <__mdiff+0x28>
 80098f4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80098f8:	6926      	ldr	r6, [r4, #16]
 80098fa:	60c5      	str	r5, [r0, #12]
 80098fc:	f104 0914 	add.w	r9, r4, #20
 8009900:	f108 0514 	add.w	r5, r8, #20
 8009904:	f100 0e14 	add.w	lr, r0, #20
 8009908:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800990c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009910:	f108 0210 	add.w	r2, r8, #16
 8009914:	46f2      	mov	sl, lr
 8009916:	2100      	movs	r1, #0
 8009918:	f859 3b04 	ldr.w	r3, [r9], #4
 800991c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009920:	fa1f f883 	uxth.w	r8, r3
 8009924:	fa11 f18b 	uxtah	r1, r1, fp
 8009928:	0c1b      	lsrs	r3, r3, #16
 800992a:	eba1 0808 	sub.w	r8, r1, r8
 800992e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009932:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009936:	fa1f f888 	uxth.w	r8, r8
 800993a:	1419      	asrs	r1, r3, #16
 800993c:	454e      	cmp	r6, r9
 800993e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009942:	f84a 3b04 	str.w	r3, [sl], #4
 8009946:	d8e7      	bhi.n	8009918 <__mdiff+0x80>
 8009948:	1b33      	subs	r3, r6, r4
 800994a:	3b15      	subs	r3, #21
 800994c:	f023 0303 	bic.w	r3, r3, #3
 8009950:	3304      	adds	r3, #4
 8009952:	3415      	adds	r4, #21
 8009954:	42a6      	cmp	r6, r4
 8009956:	bf38      	it	cc
 8009958:	2304      	movcc	r3, #4
 800995a:	441d      	add	r5, r3
 800995c:	4473      	add	r3, lr
 800995e:	469e      	mov	lr, r3
 8009960:	462e      	mov	r6, r5
 8009962:	4566      	cmp	r6, ip
 8009964:	d30e      	bcc.n	8009984 <__mdiff+0xec>
 8009966:	f10c 0203 	add.w	r2, ip, #3
 800996a:	1b52      	subs	r2, r2, r5
 800996c:	f022 0203 	bic.w	r2, r2, #3
 8009970:	3d03      	subs	r5, #3
 8009972:	45ac      	cmp	ip, r5
 8009974:	bf38      	it	cc
 8009976:	2200      	movcc	r2, #0
 8009978:	441a      	add	r2, r3
 800997a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800997e:	b17b      	cbz	r3, 80099a0 <__mdiff+0x108>
 8009980:	6107      	str	r7, [r0, #16]
 8009982:	e7a3      	b.n	80098cc <__mdiff+0x34>
 8009984:	f856 8b04 	ldr.w	r8, [r6], #4
 8009988:	fa11 f288 	uxtah	r2, r1, r8
 800998c:	1414      	asrs	r4, r2, #16
 800998e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009992:	b292      	uxth	r2, r2
 8009994:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009998:	f84e 2b04 	str.w	r2, [lr], #4
 800999c:	1421      	asrs	r1, r4, #16
 800999e:	e7e0      	b.n	8009962 <__mdiff+0xca>
 80099a0:	3f01      	subs	r7, #1
 80099a2:	e7ea      	b.n	800997a <__mdiff+0xe2>
 80099a4:	0800a9c0 	.word	0x0800a9c0
 80099a8:	0800aab0 	.word	0x0800aab0

080099ac <__ulp>:
 80099ac:	b082      	sub	sp, #8
 80099ae:	ed8d 0b00 	vstr	d0, [sp]
 80099b2:	9b01      	ldr	r3, [sp, #4]
 80099b4:	4912      	ldr	r1, [pc, #72]	; (8009a00 <__ulp+0x54>)
 80099b6:	4019      	ands	r1, r3
 80099b8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80099bc:	2900      	cmp	r1, #0
 80099be:	dd05      	ble.n	80099cc <__ulp+0x20>
 80099c0:	2200      	movs	r2, #0
 80099c2:	460b      	mov	r3, r1
 80099c4:	ec43 2b10 	vmov	d0, r2, r3
 80099c8:	b002      	add	sp, #8
 80099ca:	4770      	bx	lr
 80099cc:	4249      	negs	r1, r1
 80099ce:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80099d2:	ea4f 5021 	mov.w	r0, r1, asr #20
 80099d6:	f04f 0200 	mov.w	r2, #0
 80099da:	f04f 0300 	mov.w	r3, #0
 80099de:	da04      	bge.n	80099ea <__ulp+0x3e>
 80099e0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80099e4:	fa41 f300 	asr.w	r3, r1, r0
 80099e8:	e7ec      	b.n	80099c4 <__ulp+0x18>
 80099ea:	f1a0 0114 	sub.w	r1, r0, #20
 80099ee:	291e      	cmp	r1, #30
 80099f0:	bfda      	itte	le
 80099f2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80099f6:	fa20 f101 	lsrle.w	r1, r0, r1
 80099fa:	2101      	movgt	r1, #1
 80099fc:	460a      	mov	r2, r1
 80099fe:	e7e1      	b.n	80099c4 <__ulp+0x18>
 8009a00:	7ff00000 	.word	0x7ff00000

08009a04 <__b2d>:
 8009a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a06:	6905      	ldr	r5, [r0, #16]
 8009a08:	f100 0714 	add.w	r7, r0, #20
 8009a0c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009a10:	1f2e      	subs	r6, r5, #4
 8009a12:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8009a16:	4620      	mov	r0, r4
 8009a18:	f7ff fd48 	bl	80094ac <__hi0bits>
 8009a1c:	f1c0 0320 	rsb	r3, r0, #32
 8009a20:	280a      	cmp	r0, #10
 8009a22:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8009aa0 <__b2d+0x9c>
 8009a26:	600b      	str	r3, [r1, #0]
 8009a28:	dc14      	bgt.n	8009a54 <__b2d+0x50>
 8009a2a:	f1c0 0e0b 	rsb	lr, r0, #11
 8009a2e:	fa24 f10e 	lsr.w	r1, r4, lr
 8009a32:	42b7      	cmp	r7, r6
 8009a34:	ea41 030c 	orr.w	r3, r1, ip
 8009a38:	bf34      	ite	cc
 8009a3a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009a3e:	2100      	movcs	r1, #0
 8009a40:	3015      	adds	r0, #21
 8009a42:	fa04 f000 	lsl.w	r0, r4, r0
 8009a46:	fa21 f10e 	lsr.w	r1, r1, lr
 8009a4a:	ea40 0201 	orr.w	r2, r0, r1
 8009a4e:	ec43 2b10 	vmov	d0, r2, r3
 8009a52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a54:	42b7      	cmp	r7, r6
 8009a56:	bf3a      	itte	cc
 8009a58:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009a5c:	f1a5 0608 	subcc.w	r6, r5, #8
 8009a60:	2100      	movcs	r1, #0
 8009a62:	380b      	subs	r0, #11
 8009a64:	d017      	beq.n	8009a96 <__b2d+0x92>
 8009a66:	f1c0 0c20 	rsb	ip, r0, #32
 8009a6a:	fa04 f500 	lsl.w	r5, r4, r0
 8009a6e:	42be      	cmp	r6, r7
 8009a70:	fa21 f40c 	lsr.w	r4, r1, ip
 8009a74:	ea45 0504 	orr.w	r5, r5, r4
 8009a78:	bf8c      	ite	hi
 8009a7a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8009a7e:	2400      	movls	r4, #0
 8009a80:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8009a84:	fa01 f000 	lsl.w	r0, r1, r0
 8009a88:	fa24 f40c 	lsr.w	r4, r4, ip
 8009a8c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009a90:	ea40 0204 	orr.w	r2, r0, r4
 8009a94:	e7db      	b.n	8009a4e <__b2d+0x4a>
 8009a96:	ea44 030c 	orr.w	r3, r4, ip
 8009a9a:	460a      	mov	r2, r1
 8009a9c:	e7d7      	b.n	8009a4e <__b2d+0x4a>
 8009a9e:	bf00      	nop
 8009aa0:	3ff00000 	.word	0x3ff00000

08009aa4 <__d2b>:
 8009aa4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009aa8:	4689      	mov	r9, r1
 8009aaa:	2101      	movs	r1, #1
 8009aac:	ec57 6b10 	vmov	r6, r7, d0
 8009ab0:	4690      	mov	r8, r2
 8009ab2:	f7ff fc09 	bl	80092c8 <_Balloc>
 8009ab6:	4604      	mov	r4, r0
 8009ab8:	b930      	cbnz	r0, 8009ac8 <__d2b+0x24>
 8009aba:	4602      	mov	r2, r0
 8009abc:	4b25      	ldr	r3, [pc, #148]	; (8009b54 <__d2b+0xb0>)
 8009abe:	4826      	ldr	r0, [pc, #152]	; (8009b58 <__d2b+0xb4>)
 8009ac0:	f240 310a 	movw	r1, #778	; 0x30a
 8009ac4:	f000 fba2 	bl	800a20c <__assert_func>
 8009ac8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009acc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009ad0:	bb35      	cbnz	r5, 8009b20 <__d2b+0x7c>
 8009ad2:	2e00      	cmp	r6, #0
 8009ad4:	9301      	str	r3, [sp, #4]
 8009ad6:	d028      	beq.n	8009b2a <__d2b+0x86>
 8009ad8:	4668      	mov	r0, sp
 8009ada:	9600      	str	r6, [sp, #0]
 8009adc:	f7ff fd06 	bl	80094ec <__lo0bits>
 8009ae0:	9900      	ldr	r1, [sp, #0]
 8009ae2:	b300      	cbz	r0, 8009b26 <__d2b+0x82>
 8009ae4:	9a01      	ldr	r2, [sp, #4]
 8009ae6:	f1c0 0320 	rsb	r3, r0, #32
 8009aea:	fa02 f303 	lsl.w	r3, r2, r3
 8009aee:	430b      	orrs	r3, r1
 8009af0:	40c2      	lsrs	r2, r0
 8009af2:	6163      	str	r3, [r4, #20]
 8009af4:	9201      	str	r2, [sp, #4]
 8009af6:	9b01      	ldr	r3, [sp, #4]
 8009af8:	61a3      	str	r3, [r4, #24]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	bf14      	ite	ne
 8009afe:	2202      	movne	r2, #2
 8009b00:	2201      	moveq	r2, #1
 8009b02:	6122      	str	r2, [r4, #16]
 8009b04:	b1d5      	cbz	r5, 8009b3c <__d2b+0x98>
 8009b06:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009b0a:	4405      	add	r5, r0
 8009b0c:	f8c9 5000 	str.w	r5, [r9]
 8009b10:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009b14:	f8c8 0000 	str.w	r0, [r8]
 8009b18:	4620      	mov	r0, r4
 8009b1a:	b003      	add	sp, #12
 8009b1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009b20:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009b24:	e7d5      	b.n	8009ad2 <__d2b+0x2e>
 8009b26:	6161      	str	r1, [r4, #20]
 8009b28:	e7e5      	b.n	8009af6 <__d2b+0x52>
 8009b2a:	a801      	add	r0, sp, #4
 8009b2c:	f7ff fcde 	bl	80094ec <__lo0bits>
 8009b30:	9b01      	ldr	r3, [sp, #4]
 8009b32:	6163      	str	r3, [r4, #20]
 8009b34:	2201      	movs	r2, #1
 8009b36:	6122      	str	r2, [r4, #16]
 8009b38:	3020      	adds	r0, #32
 8009b3a:	e7e3      	b.n	8009b04 <__d2b+0x60>
 8009b3c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009b40:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009b44:	f8c9 0000 	str.w	r0, [r9]
 8009b48:	6918      	ldr	r0, [r3, #16]
 8009b4a:	f7ff fcaf 	bl	80094ac <__hi0bits>
 8009b4e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009b52:	e7df      	b.n	8009b14 <__d2b+0x70>
 8009b54:	0800a9c0 	.word	0x0800a9c0
 8009b58:	0800aab0 	.word	0x0800aab0

08009b5c <__ratio>:
 8009b5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b60:	4688      	mov	r8, r1
 8009b62:	4669      	mov	r1, sp
 8009b64:	4681      	mov	r9, r0
 8009b66:	f7ff ff4d 	bl	8009a04 <__b2d>
 8009b6a:	a901      	add	r1, sp, #4
 8009b6c:	4640      	mov	r0, r8
 8009b6e:	ec55 4b10 	vmov	r4, r5, d0
 8009b72:	f7ff ff47 	bl	8009a04 <__b2d>
 8009b76:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009b7a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009b7e:	eba3 0c02 	sub.w	ip, r3, r2
 8009b82:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009b86:	1a9b      	subs	r3, r3, r2
 8009b88:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009b8c:	ec51 0b10 	vmov	r0, r1, d0
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	bfd6      	itet	le
 8009b94:	460a      	movle	r2, r1
 8009b96:	462a      	movgt	r2, r5
 8009b98:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009b9c:	468b      	mov	fp, r1
 8009b9e:	462f      	mov	r7, r5
 8009ba0:	bfd4      	ite	le
 8009ba2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009ba6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009baa:	4620      	mov	r0, r4
 8009bac:	ee10 2a10 	vmov	r2, s0
 8009bb0:	465b      	mov	r3, fp
 8009bb2:	4639      	mov	r1, r7
 8009bb4:	f7f6 fe5a 	bl	800086c <__aeabi_ddiv>
 8009bb8:	ec41 0b10 	vmov	d0, r0, r1
 8009bbc:	b003      	add	sp, #12
 8009bbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009bc2 <__copybits>:
 8009bc2:	3901      	subs	r1, #1
 8009bc4:	b570      	push	{r4, r5, r6, lr}
 8009bc6:	1149      	asrs	r1, r1, #5
 8009bc8:	6914      	ldr	r4, [r2, #16]
 8009bca:	3101      	adds	r1, #1
 8009bcc:	f102 0314 	add.w	r3, r2, #20
 8009bd0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009bd4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009bd8:	1f05      	subs	r5, r0, #4
 8009bda:	42a3      	cmp	r3, r4
 8009bdc:	d30c      	bcc.n	8009bf8 <__copybits+0x36>
 8009bde:	1aa3      	subs	r3, r4, r2
 8009be0:	3b11      	subs	r3, #17
 8009be2:	f023 0303 	bic.w	r3, r3, #3
 8009be6:	3211      	adds	r2, #17
 8009be8:	42a2      	cmp	r2, r4
 8009bea:	bf88      	it	hi
 8009bec:	2300      	movhi	r3, #0
 8009bee:	4418      	add	r0, r3
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	4288      	cmp	r0, r1
 8009bf4:	d305      	bcc.n	8009c02 <__copybits+0x40>
 8009bf6:	bd70      	pop	{r4, r5, r6, pc}
 8009bf8:	f853 6b04 	ldr.w	r6, [r3], #4
 8009bfc:	f845 6f04 	str.w	r6, [r5, #4]!
 8009c00:	e7eb      	b.n	8009bda <__copybits+0x18>
 8009c02:	f840 3b04 	str.w	r3, [r0], #4
 8009c06:	e7f4      	b.n	8009bf2 <__copybits+0x30>

08009c08 <__any_on>:
 8009c08:	f100 0214 	add.w	r2, r0, #20
 8009c0c:	6900      	ldr	r0, [r0, #16]
 8009c0e:	114b      	asrs	r3, r1, #5
 8009c10:	4298      	cmp	r0, r3
 8009c12:	b510      	push	{r4, lr}
 8009c14:	db11      	blt.n	8009c3a <__any_on+0x32>
 8009c16:	dd0a      	ble.n	8009c2e <__any_on+0x26>
 8009c18:	f011 011f 	ands.w	r1, r1, #31
 8009c1c:	d007      	beq.n	8009c2e <__any_on+0x26>
 8009c1e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009c22:	fa24 f001 	lsr.w	r0, r4, r1
 8009c26:	fa00 f101 	lsl.w	r1, r0, r1
 8009c2a:	428c      	cmp	r4, r1
 8009c2c:	d10b      	bne.n	8009c46 <__any_on+0x3e>
 8009c2e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009c32:	4293      	cmp	r3, r2
 8009c34:	d803      	bhi.n	8009c3e <__any_on+0x36>
 8009c36:	2000      	movs	r0, #0
 8009c38:	bd10      	pop	{r4, pc}
 8009c3a:	4603      	mov	r3, r0
 8009c3c:	e7f7      	b.n	8009c2e <__any_on+0x26>
 8009c3e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009c42:	2900      	cmp	r1, #0
 8009c44:	d0f5      	beq.n	8009c32 <__any_on+0x2a>
 8009c46:	2001      	movs	r0, #1
 8009c48:	e7f6      	b.n	8009c38 <__any_on+0x30>

08009c4a <_calloc_r>:
 8009c4a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009c4c:	fba1 2402 	umull	r2, r4, r1, r2
 8009c50:	b94c      	cbnz	r4, 8009c66 <_calloc_r+0x1c>
 8009c52:	4611      	mov	r1, r2
 8009c54:	9201      	str	r2, [sp, #4]
 8009c56:	f000 f87b 	bl	8009d50 <_malloc_r>
 8009c5a:	9a01      	ldr	r2, [sp, #4]
 8009c5c:	4605      	mov	r5, r0
 8009c5e:	b930      	cbnz	r0, 8009c6e <_calloc_r+0x24>
 8009c60:	4628      	mov	r0, r5
 8009c62:	b003      	add	sp, #12
 8009c64:	bd30      	pop	{r4, r5, pc}
 8009c66:	220c      	movs	r2, #12
 8009c68:	6002      	str	r2, [r0, #0]
 8009c6a:	2500      	movs	r5, #0
 8009c6c:	e7f8      	b.n	8009c60 <_calloc_r+0x16>
 8009c6e:	4621      	mov	r1, r4
 8009c70:	f7fc f86a 	bl	8005d48 <memset>
 8009c74:	e7f4      	b.n	8009c60 <_calloc_r+0x16>
	...

08009c78 <_free_r>:
 8009c78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009c7a:	2900      	cmp	r1, #0
 8009c7c:	d044      	beq.n	8009d08 <_free_r+0x90>
 8009c7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c82:	9001      	str	r0, [sp, #4]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	f1a1 0404 	sub.w	r4, r1, #4
 8009c8a:	bfb8      	it	lt
 8009c8c:	18e4      	addlt	r4, r4, r3
 8009c8e:	f000 fb4b 	bl	800a328 <__malloc_lock>
 8009c92:	4a1e      	ldr	r2, [pc, #120]	; (8009d0c <_free_r+0x94>)
 8009c94:	9801      	ldr	r0, [sp, #4]
 8009c96:	6813      	ldr	r3, [r2, #0]
 8009c98:	b933      	cbnz	r3, 8009ca8 <_free_r+0x30>
 8009c9a:	6063      	str	r3, [r4, #4]
 8009c9c:	6014      	str	r4, [r2, #0]
 8009c9e:	b003      	add	sp, #12
 8009ca0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009ca4:	f000 bb46 	b.w	800a334 <__malloc_unlock>
 8009ca8:	42a3      	cmp	r3, r4
 8009caa:	d908      	bls.n	8009cbe <_free_r+0x46>
 8009cac:	6825      	ldr	r5, [r4, #0]
 8009cae:	1961      	adds	r1, r4, r5
 8009cb0:	428b      	cmp	r3, r1
 8009cb2:	bf01      	itttt	eq
 8009cb4:	6819      	ldreq	r1, [r3, #0]
 8009cb6:	685b      	ldreq	r3, [r3, #4]
 8009cb8:	1949      	addeq	r1, r1, r5
 8009cba:	6021      	streq	r1, [r4, #0]
 8009cbc:	e7ed      	b.n	8009c9a <_free_r+0x22>
 8009cbe:	461a      	mov	r2, r3
 8009cc0:	685b      	ldr	r3, [r3, #4]
 8009cc2:	b10b      	cbz	r3, 8009cc8 <_free_r+0x50>
 8009cc4:	42a3      	cmp	r3, r4
 8009cc6:	d9fa      	bls.n	8009cbe <_free_r+0x46>
 8009cc8:	6811      	ldr	r1, [r2, #0]
 8009cca:	1855      	adds	r5, r2, r1
 8009ccc:	42a5      	cmp	r5, r4
 8009cce:	d10b      	bne.n	8009ce8 <_free_r+0x70>
 8009cd0:	6824      	ldr	r4, [r4, #0]
 8009cd2:	4421      	add	r1, r4
 8009cd4:	1854      	adds	r4, r2, r1
 8009cd6:	42a3      	cmp	r3, r4
 8009cd8:	6011      	str	r1, [r2, #0]
 8009cda:	d1e0      	bne.n	8009c9e <_free_r+0x26>
 8009cdc:	681c      	ldr	r4, [r3, #0]
 8009cde:	685b      	ldr	r3, [r3, #4]
 8009ce0:	6053      	str	r3, [r2, #4]
 8009ce2:	4421      	add	r1, r4
 8009ce4:	6011      	str	r1, [r2, #0]
 8009ce6:	e7da      	b.n	8009c9e <_free_r+0x26>
 8009ce8:	d902      	bls.n	8009cf0 <_free_r+0x78>
 8009cea:	230c      	movs	r3, #12
 8009cec:	6003      	str	r3, [r0, #0]
 8009cee:	e7d6      	b.n	8009c9e <_free_r+0x26>
 8009cf0:	6825      	ldr	r5, [r4, #0]
 8009cf2:	1961      	adds	r1, r4, r5
 8009cf4:	428b      	cmp	r3, r1
 8009cf6:	bf04      	itt	eq
 8009cf8:	6819      	ldreq	r1, [r3, #0]
 8009cfa:	685b      	ldreq	r3, [r3, #4]
 8009cfc:	6063      	str	r3, [r4, #4]
 8009cfe:	bf04      	itt	eq
 8009d00:	1949      	addeq	r1, r1, r5
 8009d02:	6021      	streq	r1, [r4, #0]
 8009d04:	6054      	str	r4, [r2, #4]
 8009d06:	e7ca      	b.n	8009c9e <_free_r+0x26>
 8009d08:	b003      	add	sp, #12
 8009d0a:	bd30      	pop	{r4, r5, pc}
 8009d0c:	20000338 	.word	0x20000338

08009d10 <sbrk_aligned>:
 8009d10:	b570      	push	{r4, r5, r6, lr}
 8009d12:	4e0e      	ldr	r6, [pc, #56]	; (8009d4c <sbrk_aligned+0x3c>)
 8009d14:	460c      	mov	r4, r1
 8009d16:	6831      	ldr	r1, [r6, #0]
 8009d18:	4605      	mov	r5, r0
 8009d1a:	b911      	cbnz	r1, 8009d22 <sbrk_aligned+0x12>
 8009d1c:	f000 f9f0 	bl	800a100 <_sbrk_r>
 8009d20:	6030      	str	r0, [r6, #0]
 8009d22:	4621      	mov	r1, r4
 8009d24:	4628      	mov	r0, r5
 8009d26:	f000 f9eb 	bl	800a100 <_sbrk_r>
 8009d2a:	1c43      	adds	r3, r0, #1
 8009d2c:	d00a      	beq.n	8009d44 <sbrk_aligned+0x34>
 8009d2e:	1cc4      	adds	r4, r0, #3
 8009d30:	f024 0403 	bic.w	r4, r4, #3
 8009d34:	42a0      	cmp	r0, r4
 8009d36:	d007      	beq.n	8009d48 <sbrk_aligned+0x38>
 8009d38:	1a21      	subs	r1, r4, r0
 8009d3a:	4628      	mov	r0, r5
 8009d3c:	f000 f9e0 	bl	800a100 <_sbrk_r>
 8009d40:	3001      	adds	r0, #1
 8009d42:	d101      	bne.n	8009d48 <sbrk_aligned+0x38>
 8009d44:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009d48:	4620      	mov	r0, r4
 8009d4a:	bd70      	pop	{r4, r5, r6, pc}
 8009d4c:	2000033c 	.word	0x2000033c

08009d50 <_malloc_r>:
 8009d50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d54:	1ccd      	adds	r5, r1, #3
 8009d56:	f025 0503 	bic.w	r5, r5, #3
 8009d5a:	3508      	adds	r5, #8
 8009d5c:	2d0c      	cmp	r5, #12
 8009d5e:	bf38      	it	cc
 8009d60:	250c      	movcc	r5, #12
 8009d62:	2d00      	cmp	r5, #0
 8009d64:	4607      	mov	r7, r0
 8009d66:	db01      	blt.n	8009d6c <_malloc_r+0x1c>
 8009d68:	42a9      	cmp	r1, r5
 8009d6a:	d905      	bls.n	8009d78 <_malloc_r+0x28>
 8009d6c:	230c      	movs	r3, #12
 8009d6e:	603b      	str	r3, [r7, #0]
 8009d70:	2600      	movs	r6, #0
 8009d72:	4630      	mov	r0, r6
 8009d74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d78:	4e2e      	ldr	r6, [pc, #184]	; (8009e34 <_malloc_r+0xe4>)
 8009d7a:	f000 fad5 	bl	800a328 <__malloc_lock>
 8009d7e:	6833      	ldr	r3, [r6, #0]
 8009d80:	461c      	mov	r4, r3
 8009d82:	bb34      	cbnz	r4, 8009dd2 <_malloc_r+0x82>
 8009d84:	4629      	mov	r1, r5
 8009d86:	4638      	mov	r0, r7
 8009d88:	f7ff ffc2 	bl	8009d10 <sbrk_aligned>
 8009d8c:	1c43      	adds	r3, r0, #1
 8009d8e:	4604      	mov	r4, r0
 8009d90:	d14d      	bne.n	8009e2e <_malloc_r+0xde>
 8009d92:	6834      	ldr	r4, [r6, #0]
 8009d94:	4626      	mov	r6, r4
 8009d96:	2e00      	cmp	r6, #0
 8009d98:	d140      	bne.n	8009e1c <_malloc_r+0xcc>
 8009d9a:	6823      	ldr	r3, [r4, #0]
 8009d9c:	4631      	mov	r1, r6
 8009d9e:	4638      	mov	r0, r7
 8009da0:	eb04 0803 	add.w	r8, r4, r3
 8009da4:	f000 f9ac 	bl	800a100 <_sbrk_r>
 8009da8:	4580      	cmp	r8, r0
 8009daa:	d13a      	bne.n	8009e22 <_malloc_r+0xd2>
 8009dac:	6821      	ldr	r1, [r4, #0]
 8009dae:	3503      	adds	r5, #3
 8009db0:	1a6d      	subs	r5, r5, r1
 8009db2:	f025 0503 	bic.w	r5, r5, #3
 8009db6:	3508      	adds	r5, #8
 8009db8:	2d0c      	cmp	r5, #12
 8009dba:	bf38      	it	cc
 8009dbc:	250c      	movcc	r5, #12
 8009dbe:	4629      	mov	r1, r5
 8009dc0:	4638      	mov	r0, r7
 8009dc2:	f7ff ffa5 	bl	8009d10 <sbrk_aligned>
 8009dc6:	3001      	adds	r0, #1
 8009dc8:	d02b      	beq.n	8009e22 <_malloc_r+0xd2>
 8009dca:	6823      	ldr	r3, [r4, #0]
 8009dcc:	442b      	add	r3, r5
 8009dce:	6023      	str	r3, [r4, #0]
 8009dd0:	e00e      	b.n	8009df0 <_malloc_r+0xa0>
 8009dd2:	6822      	ldr	r2, [r4, #0]
 8009dd4:	1b52      	subs	r2, r2, r5
 8009dd6:	d41e      	bmi.n	8009e16 <_malloc_r+0xc6>
 8009dd8:	2a0b      	cmp	r2, #11
 8009dda:	d916      	bls.n	8009e0a <_malloc_r+0xba>
 8009ddc:	1961      	adds	r1, r4, r5
 8009dde:	42a3      	cmp	r3, r4
 8009de0:	6025      	str	r5, [r4, #0]
 8009de2:	bf18      	it	ne
 8009de4:	6059      	strne	r1, [r3, #4]
 8009de6:	6863      	ldr	r3, [r4, #4]
 8009de8:	bf08      	it	eq
 8009dea:	6031      	streq	r1, [r6, #0]
 8009dec:	5162      	str	r2, [r4, r5]
 8009dee:	604b      	str	r3, [r1, #4]
 8009df0:	4638      	mov	r0, r7
 8009df2:	f104 060b 	add.w	r6, r4, #11
 8009df6:	f000 fa9d 	bl	800a334 <__malloc_unlock>
 8009dfa:	f026 0607 	bic.w	r6, r6, #7
 8009dfe:	1d23      	adds	r3, r4, #4
 8009e00:	1af2      	subs	r2, r6, r3
 8009e02:	d0b6      	beq.n	8009d72 <_malloc_r+0x22>
 8009e04:	1b9b      	subs	r3, r3, r6
 8009e06:	50a3      	str	r3, [r4, r2]
 8009e08:	e7b3      	b.n	8009d72 <_malloc_r+0x22>
 8009e0a:	6862      	ldr	r2, [r4, #4]
 8009e0c:	42a3      	cmp	r3, r4
 8009e0e:	bf0c      	ite	eq
 8009e10:	6032      	streq	r2, [r6, #0]
 8009e12:	605a      	strne	r2, [r3, #4]
 8009e14:	e7ec      	b.n	8009df0 <_malloc_r+0xa0>
 8009e16:	4623      	mov	r3, r4
 8009e18:	6864      	ldr	r4, [r4, #4]
 8009e1a:	e7b2      	b.n	8009d82 <_malloc_r+0x32>
 8009e1c:	4634      	mov	r4, r6
 8009e1e:	6876      	ldr	r6, [r6, #4]
 8009e20:	e7b9      	b.n	8009d96 <_malloc_r+0x46>
 8009e22:	230c      	movs	r3, #12
 8009e24:	603b      	str	r3, [r7, #0]
 8009e26:	4638      	mov	r0, r7
 8009e28:	f000 fa84 	bl	800a334 <__malloc_unlock>
 8009e2c:	e7a1      	b.n	8009d72 <_malloc_r+0x22>
 8009e2e:	6025      	str	r5, [r4, #0]
 8009e30:	e7de      	b.n	8009df0 <_malloc_r+0xa0>
 8009e32:	bf00      	nop
 8009e34:	20000338 	.word	0x20000338

08009e38 <__ssputs_r>:
 8009e38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e3c:	688e      	ldr	r6, [r1, #8]
 8009e3e:	429e      	cmp	r6, r3
 8009e40:	4682      	mov	sl, r0
 8009e42:	460c      	mov	r4, r1
 8009e44:	4690      	mov	r8, r2
 8009e46:	461f      	mov	r7, r3
 8009e48:	d838      	bhi.n	8009ebc <__ssputs_r+0x84>
 8009e4a:	898a      	ldrh	r2, [r1, #12]
 8009e4c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009e50:	d032      	beq.n	8009eb8 <__ssputs_r+0x80>
 8009e52:	6825      	ldr	r5, [r4, #0]
 8009e54:	6909      	ldr	r1, [r1, #16]
 8009e56:	eba5 0901 	sub.w	r9, r5, r1
 8009e5a:	6965      	ldr	r5, [r4, #20]
 8009e5c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009e60:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009e64:	3301      	adds	r3, #1
 8009e66:	444b      	add	r3, r9
 8009e68:	106d      	asrs	r5, r5, #1
 8009e6a:	429d      	cmp	r5, r3
 8009e6c:	bf38      	it	cc
 8009e6e:	461d      	movcc	r5, r3
 8009e70:	0553      	lsls	r3, r2, #21
 8009e72:	d531      	bpl.n	8009ed8 <__ssputs_r+0xa0>
 8009e74:	4629      	mov	r1, r5
 8009e76:	f7ff ff6b 	bl	8009d50 <_malloc_r>
 8009e7a:	4606      	mov	r6, r0
 8009e7c:	b950      	cbnz	r0, 8009e94 <__ssputs_r+0x5c>
 8009e7e:	230c      	movs	r3, #12
 8009e80:	f8ca 3000 	str.w	r3, [sl]
 8009e84:	89a3      	ldrh	r3, [r4, #12]
 8009e86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e8a:	81a3      	strh	r3, [r4, #12]
 8009e8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009e90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e94:	6921      	ldr	r1, [r4, #16]
 8009e96:	464a      	mov	r2, r9
 8009e98:	f7ff fa08 	bl	80092ac <memcpy>
 8009e9c:	89a3      	ldrh	r3, [r4, #12]
 8009e9e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009ea2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ea6:	81a3      	strh	r3, [r4, #12]
 8009ea8:	6126      	str	r6, [r4, #16]
 8009eaa:	6165      	str	r5, [r4, #20]
 8009eac:	444e      	add	r6, r9
 8009eae:	eba5 0509 	sub.w	r5, r5, r9
 8009eb2:	6026      	str	r6, [r4, #0]
 8009eb4:	60a5      	str	r5, [r4, #8]
 8009eb6:	463e      	mov	r6, r7
 8009eb8:	42be      	cmp	r6, r7
 8009eba:	d900      	bls.n	8009ebe <__ssputs_r+0x86>
 8009ebc:	463e      	mov	r6, r7
 8009ebe:	6820      	ldr	r0, [r4, #0]
 8009ec0:	4632      	mov	r2, r6
 8009ec2:	4641      	mov	r1, r8
 8009ec4:	f000 fa16 	bl	800a2f4 <memmove>
 8009ec8:	68a3      	ldr	r3, [r4, #8]
 8009eca:	1b9b      	subs	r3, r3, r6
 8009ecc:	60a3      	str	r3, [r4, #8]
 8009ece:	6823      	ldr	r3, [r4, #0]
 8009ed0:	4433      	add	r3, r6
 8009ed2:	6023      	str	r3, [r4, #0]
 8009ed4:	2000      	movs	r0, #0
 8009ed6:	e7db      	b.n	8009e90 <__ssputs_r+0x58>
 8009ed8:	462a      	mov	r2, r5
 8009eda:	f000 fa31 	bl	800a340 <_realloc_r>
 8009ede:	4606      	mov	r6, r0
 8009ee0:	2800      	cmp	r0, #0
 8009ee2:	d1e1      	bne.n	8009ea8 <__ssputs_r+0x70>
 8009ee4:	6921      	ldr	r1, [r4, #16]
 8009ee6:	4650      	mov	r0, sl
 8009ee8:	f7ff fec6 	bl	8009c78 <_free_r>
 8009eec:	e7c7      	b.n	8009e7e <__ssputs_r+0x46>
	...

08009ef0 <_svfiprintf_r>:
 8009ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ef4:	4698      	mov	r8, r3
 8009ef6:	898b      	ldrh	r3, [r1, #12]
 8009ef8:	061b      	lsls	r3, r3, #24
 8009efa:	b09d      	sub	sp, #116	; 0x74
 8009efc:	4607      	mov	r7, r0
 8009efe:	460d      	mov	r5, r1
 8009f00:	4614      	mov	r4, r2
 8009f02:	d50e      	bpl.n	8009f22 <_svfiprintf_r+0x32>
 8009f04:	690b      	ldr	r3, [r1, #16]
 8009f06:	b963      	cbnz	r3, 8009f22 <_svfiprintf_r+0x32>
 8009f08:	2140      	movs	r1, #64	; 0x40
 8009f0a:	f7ff ff21 	bl	8009d50 <_malloc_r>
 8009f0e:	6028      	str	r0, [r5, #0]
 8009f10:	6128      	str	r0, [r5, #16]
 8009f12:	b920      	cbnz	r0, 8009f1e <_svfiprintf_r+0x2e>
 8009f14:	230c      	movs	r3, #12
 8009f16:	603b      	str	r3, [r7, #0]
 8009f18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009f1c:	e0d1      	b.n	800a0c2 <_svfiprintf_r+0x1d2>
 8009f1e:	2340      	movs	r3, #64	; 0x40
 8009f20:	616b      	str	r3, [r5, #20]
 8009f22:	2300      	movs	r3, #0
 8009f24:	9309      	str	r3, [sp, #36]	; 0x24
 8009f26:	2320      	movs	r3, #32
 8009f28:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009f2c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009f30:	2330      	movs	r3, #48	; 0x30
 8009f32:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a0dc <_svfiprintf_r+0x1ec>
 8009f36:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009f3a:	f04f 0901 	mov.w	r9, #1
 8009f3e:	4623      	mov	r3, r4
 8009f40:	469a      	mov	sl, r3
 8009f42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f46:	b10a      	cbz	r2, 8009f4c <_svfiprintf_r+0x5c>
 8009f48:	2a25      	cmp	r2, #37	; 0x25
 8009f4a:	d1f9      	bne.n	8009f40 <_svfiprintf_r+0x50>
 8009f4c:	ebba 0b04 	subs.w	fp, sl, r4
 8009f50:	d00b      	beq.n	8009f6a <_svfiprintf_r+0x7a>
 8009f52:	465b      	mov	r3, fp
 8009f54:	4622      	mov	r2, r4
 8009f56:	4629      	mov	r1, r5
 8009f58:	4638      	mov	r0, r7
 8009f5a:	f7ff ff6d 	bl	8009e38 <__ssputs_r>
 8009f5e:	3001      	adds	r0, #1
 8009f60:	f000 80aa 	beq.w	800a0b8 <_svfiprintf_r+0x1c8>
 8009f64:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f66:	445a      	add	r2, fp
 8009f68:	9209      	str	r2, [sp, #36]	; 0x24
 8009f6a:	f89a 3000 	ldrb.w	r3, [sl]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	f000 80a2 	beq.w	800a0b8 <_svfiprintf_r+0x1c8>
 8009f74:	2300      	movs	r3, #0
 8009f76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009f7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009f7e:	f10a 0a01 	add.w	sl, sl, #1
 8009f82:	9304      	str	r3, [sp, #16]
 8009f84:	9307      	str	r3, [sp, #28]
 8009f86:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009f8a:	931a      	str	r3, [sp, #104]	; 0x68
 8009f8c:	4654      	mov	r4, sl
 8009f8e:	2205      	movs	r2, #5
 8009f90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f94:	4851      	ldr	r0, [pc, #324]	; (800a0dc <_svfiprintf_r+0x1ec>)
 8009f96:	f7f6 f933 	bl	8000200 <memchr>
 8009f9a:	9a04      	ldr	r2, [sp, #16]
 8009f9c:	b9d8      	cbnz	r0, 8009fd6 <_svfiprintf_r+0xe6>
 8009f9e:	06d0      	lsls	r0, r2, #27
 8009fa0:	bf44      	itt	mi
 8009fa2:	2320      	movmi	r3, #32
 8009fa4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009fa8:	0711      	lsls	r1, r2, #28
 8009faa:	bf44      	itt	mi
 8009fac:	232b      	movmi	r3, #43	; 0x2b
 8009fae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009fb2:	f89a 3000 	ldrb.w	r3, [sl]
 8009fb6:	2b2a      	cmp	r3, #42	; 0x2a
 8009fb8:	d015      	beq.n	8009fe6 <_svfiprintf_r+0xf6>
 8009fba:	9a07      	ldr	r2, [sp, #28]
 8009fbc:	4654      	mov	r4, sl
 8009fbe:	2000      	movs	r0, #0
 8009fc0:	f04f 0c0a 	mov.w	ip, #10
 8009fc4:	4621      	mov	r1, r4
 8009fc6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009fca:	3b30      	subs	r3, #48	; 0x30
 8009fcc:	2b09      	cmp	r3, #9
 8009fce:	d94e      	bls.n	800a06e <_svfiprintf_r+0x17e>
 8009fd0:	b1b0      	cbz	r0, 800a000 <_svfiprintf_r+0x110>
 8009fd2:	9207      	str	r2, [sp, #28]
 8009fd4:	e014      	b.n	800a000 <_svfiprintf_r+0x110>
 8009fd6:	eba0 0308 	sub.w	r3, r0, r8
 8009fda:	fa09 f303 	lsl.w	r3, r9, r3
 8009fde:	4313      	orrs	r3, r2
 8009fe0:	9304      	str	r3, [sp, #16]
 8009fe2:	46a2      	mov	sl, r4
 8009fe4:	e7d2      	b.n	8009f8c <_svfiprintf_r+0x9c>
 8009fe6:	9b03      	ldr	r3, [sp, #12]
 8009fe8:	1d19      	adds	r1, r3, #4
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	9103      	str	r1, [sp, #12]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	bfbb      	ittet	lt
 8009ff2:	425b      	neglt	r3, r3
 8009ff4:	f042 0202 	orrlt.w	r2, r2, #2
 8009ff8:	9307      	strge	r3, [sp, #28]
 8009ffa:	9307      	strlt	r3, [sp, #28]
 8009ffc:	bfb8      	it	lt
 8009ffe:	9204      	strlt	r2, [sp, #16]
 800a000:	7823      	ldrb	r3, [r4, #0]
 800a002:	2b2e      	cmp	r3, #46	; 0x2e
 800a004:	d10c      	bne.n	800a020 <_svfiprintf_r+0x130>
 800a006:	7863      	ldrb	r3, [r4, #1]
 800a008:	2b2a      	cmp	r3, #42	; 0x2a
 800a00a:	d135      	bne.n	800a078 <_svfiprintf_r+0x188>
 800a00c:	9b03      	ldr	r3, [sp, #12]
 800a00e:	1d1a      	adds	r2, r3, #4
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	9203      	str	r2, [sp, #12]
 800a014:	2b00      	cmp	r3, #0
 800a016:	bfb8      	it	lt
 800a018:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a01c:	3402      	adds	r4, #2
 800a01e:	9305      	str	r3, [sp, #20]
 800a020:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a0ec <_svfiprintf_r+0x1fc>
 800a024:	7821      	ldrb	r1, [r4, #0]
 800a026:	2203      	movs	r2, #3
 800a028:	4650      	mov	r0, sl
 800a02a:	f7f6 f8e9 	bl	8000200 <memchr>
 800a02e:	b140      	cbz	r0, 800a042 <_svfiprintf_r+0x152>
 800a030:	2340      	movs	r3, #64	; 0x40
 800a032:	eba0 000a 	sub.w	r0, r0, sl
 800a036:	fa03 f000 	lsl.w	r0, r3, r0
 800a03a:	9b04      	ldr	r3, [sp, #16]
 800a03c:	4303      	orrs	r3, r0
 800a03e:	3401      	adds	r4, #1
 800a040:	9304      	str	r3, [sp, #16]
 800a042:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a046:	4826      	ldr	r0, [pc, #152]	; (800a0e0 <_svfiprintf_r+0x1f0>)
 800a048:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a04c:	2206      	movs	r2, #6
 800a04e:	f7f6 f8d7 	bl	8000200 <memchr>
 800a052:	2800      	cmp	r0, #0
 800a054:	d038      	beq.n	800a0c8 <_svfiprintf_r+0x1d8>
 800a056:	4b23      	ldr	r3, [pc, #140]	; (800a0e4 <_svfiprintf_r+0x1f4>)
 800a058:	bb1b      	cbnz	r3, 800a0a2 <_svfiprintf_r+0x1b2>
 800a05a:	9b03      	ldr	r3, [sp, #12]
 800a05c:	3307      	adds	r3, #7
 800a05e:	f023 0307 	bic.w	r3, r3, #7
 800a062:	3308      	adds	r3, #8
 800a064:	9303      	str	r3, [sp, #12]
 800a066:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a068:	4433      	add	r3, r6
 800a06a:	9309      	str	r3, [sp, #36]	; 0x24
 800a06c:	e767      	b.n	8009f3e <_svfiprintf_r+0x4e>
 800a06e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a072:	460c      	mov	r4, r1
 800a074:	2001      	movs	r0, #1
 800a076:	e7a5      	b.n	8009fc4 <_svfiprintf_r+0xd4>
 800a078:	2300      	movs	r3, #0
 800a07a:	3401      	adds	r4, #1
 800a07c:	9305      	str	r3, [sp, #20]
 800a07e:	4619      	mov	r1, r3
 800a080:	f04f 0c0a 	mov.w	ip, #10
 800a084:	4620      	mov	r0, r4
 800a086:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a08a:	3a30      	subs	r2, #48	; 0x30
 800a08c:	2a09      	cmp	r2, #9
 800a08e:	d903      	bls.n	800a098 <_svfiprintf_r+0x1a8>
 800a090:	2b00      	cmp	r3, #0
 800a092:	d0c5      	beq.n	800a020 <_svfiprintf_r+0x130>
 800a094:	9105      	str	r1, [sp, #20]
 800a096:	e7c3      	b.n	800a020 <_svfiprintf_r+0x130>
 800a098:	fb0c 2101 	mla	r1, ip, r1, r2
 800a09c:	4604      	mov	r4, r0
 800a09e:	2301      	movs	r3, #1
 800a0a0:	e7f0      	b.n	800a084 <_svfiprintf_r+0x194>
 800a0a2:	ab03      	add	r3, sp, #12
 800a0a4:	9300      	str	r3, [sp, #0]
 800a0a6:	462a      	mov	r2, r5
 800a0a8:	4b0f      	ldr	r3, [pc, #60]	; (800a0e8 <_svfiprintf_r+0x1f8>)
 800a0aa:	a904      	add	r1, sp, #16
 800a0ac:	4638      	mov	r0, r7
 800a0ae:	f7fb fef3 	bl	8005e98 <_printf_float>
 800a0b2:	1c42      	adds	r2, r0, #1
 800a0b4:	4606      	mov	r6, r0
 800a0b6:	d1d6      	bne.n	800a066 <_svfiprintf_r+0x176>
 800a0b8:	89ab      	ldrh	r3, [r5, #12]
 800a0ba:	065b      	lsls	r3, r3, #25
 800a0bc:	f53f af2c 	bmi.w	8009f18 <_svfiprintf_r+0x28>
 800a0c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a0c2:	b01d      	add	sp, #116	; 0x74
 800a0c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0c8:	ab03      	add	r3, sp, #12
 800a0ca:	9300      	str	r3, [sp, #0]
 800a0cc:	462a      	mov	r2, r5
 800a0ce:	4b06      	ldr	r3, [pc, #24]	; (800a0e8 <_svfiprintf_r+0x1f8>)
 800a0d0:	a904      	add	r1, sp, #16
 800a0d2:	4638      	mov	r0, r7
 800a0d4:	f7fc f984 	bl	80063e0 <_printf_i>
 800a0d8:	e7eb      	b.n	800a0b2 <_svfiprintf_r+0x1c2>
 800a0da:	bf00      	nop
 800a0dc:	0800ac0c 	.word	0x0800ac0c
 800a0e0:	0800ac16 	.word	0x0800ac16
 800a0e4:	08005e99 	.word	0x08005e99
 800a0e8:	08009e39 	.word	0x08009e39
 800a0ec:	0800ac12 	.word	0x0800ac12

0800a0f0 <nan>:
 800a0f0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a0f8 <nan+0x8>
 800a0f4:	4770      	bx	lr
 800a0f6:	bf00      	nop
 800a0f8:	00000000 	.word	0x00000000
 800a0fc:	7ff80000 	.word	0x7ff80000

0800a100 <_sbrk_r>:
 800a100:	b538      	push	{r3, r4, r5, lr}
 800a102:	4d06      	ldr	r5, [pc, #24]	; (800a11c <_sbrk_r+0x1c>)
 800a104:	2300      	movs	r3, #0
 800a106:	4604      	mov	r4, r0
 800a108:	4608      	mov	r0, r1
 800a10a:	602b      	str	r3, [r5, #0]
 800a10c:	f7f7 fbba 	bl	8001884 <_sbrk>
 800a110:	1c43      	adds	r3, r0, #1
 800a112:	d102      	bne.n	800a11a <_sbrk_r+0x1a>
 800a114:	682b      	ldr	r3, [r5, #0]
 800a116:	b103      	cbz	r3, 800a11a <_sbrk_r+0x1a>
 800a118:	6023      	str	r3, [r4, #0]
 800a11a:	bd38      	pop	{r3, r4, r5, pc}
 800a11c:	20000340 	.word	0x20000340

0800a120 <__sread>:
 800a120:	b510      	push	{r4, lr}
 800a122:	460c      	mov	r4, r1
 800a124:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a128:	f000 fa92 	bl	800a650 <_read_r>
 800a12c:	2800      	cmp	r0, #0
 800a12e:	bfab      	itete	ge
 800a130:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a132:	89a3      	ldrhlt	r3, [r4, #12]
 800a134:	181b      	addge	r3, r3, r0
 800a136:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a13a:	bfac      	ite	ge
 800a13c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a13e:	81a3      	strhlt	r3, [r4, #12]
 800a140:	bd10      	pop	{r4, pc}

0800a142 <__swrite>:
 800a142:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a146:	461f      	mov	r7, r3
 800a148:	898b      	ldrh	r3, [r1, #12]
 800a14a:	05db      	lsls	r3, r3, #23
 800a14c:	4605      	mov	r5, r0
 800a14e:	460c      	mov	r4, r1
 800a150:	4616      	mov	r6, r2
 800a152:	d505      	bpl.n	800a160 <__swrite+0x1e>
 800a154:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a158:	2302      	movs	r3, #2
 800a15a:	2200      	movs	r2, #0
 800a15c:	f000 f8b8 	bl	800a2d0 <_lseek_r>
 800a160:	89a3      	ldrh	r3, [r4, #12]
 800a162:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a166:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a16a:	81a3      	strh	r3, [r4, #12]
 800a16c:	4632      	mov	r2, r6
 800a16e:	463b      	mov	r3, r7
 800a170:	4628      	mov	r0, r5
 800a172:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a176:	f000 b837 	b.w	800a1e8 <_write_r>

0800a17a <__sseek>:
 800a17a:	b510      	push	{r4, lr}
 800a17c:	460c      	mov	r4, r1
 800a17e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a182:	f000 f8a5 	bl	800a2d0 <_lseek_r>
 800a186:	1c43      	adds	r3, r0, #1
 800a188:	89a3      	ldrh	r3, [r4, #12]
 800a18a:	bf15      	itete	ne
 800a18c:	6560      	strne	r0, [r4, #84]	; 0x54
 800a18e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a192:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a196:	81a3      	strheq	r3, [r4, #12]
 800a198:	bf18      	it	ne
 800a19a:	81a3      	strhne	r3, [r4, #12]
 800a19c:	bd10      	pop	{r4, pc}

0800a19e <__sclose>:
 800a19e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1a2:	f000 b851 	b.w	800a248 <_close_r>

0800a1a6 <strncmp>:
 800a1a6:	b510      	push	{r4, lr}
 800a1a8:	b17a      	cbz	r2, 800a1ca <strncmp+0x24>
 800a1aa:	4603      	mov	r3, r0
 800a1ac:	3901      	subs	r1, #1
 800a1ae:	1884      	adds	r4, r0, r2
 800a1b0:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a1b4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a1b8:	4290      	cmp	r0, r2
 800a1ba:	d101      	bne.n	800a1c0 <strncmp+0x1a>
 800a1bc:	42a3      	cmp	r3, r4
 800a1be:	d101      	bne.n	800a1c4 <strncmp+0x1e>
 800a1c0:	1a80      	subs	r0, r0, r2
 800a1c2:	bd10      	pop	{r4, pc}
 800a1c4:	2800      	cmp	r0, #0
 800a1c6:	d1f3      	bne.n	800a1b0 <strncmp+0xa>
 800a1c8:	e7fa      	b.n	800a1c0 <strncmp+0x1a>
 800a1ca:	4610      	mov	r0, r2
 800a1cc:	e7f9      	b.n	800a1c2 <strncmp+0x1c>

0800a1ce <__ascii_wctomb>:
 800a1ce:	b149      	cbz	r1, 800a1e4 <__ascii_wctomb+0x16>
 800a1d0:	2aff      	cmp	r2, #255	; 0xff
 800a1d2:	bf85      	ittet	hi
 800a1d4:	238a      	movhi	r3, #138	; 0x8a
 800a1d6:	6003      	strhi	r3, [r0, #0]
 800a1d8:	700a      	strbls	r2, [r1, #0]
 800a1da:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800a1de:	bf98      	it	ls
 800a1e0:	2001      	movls	r0, #1
 800a1e2:	4770      	bx	lr
 800a1e4:	4608      	mov	r0, r1
 800a1e6:	4770      	bx	lr

0800a1e8 <_write_r>:
 800a1e8:	b538      	push	{r3, r4, r5, lr}
 800a1ea:	4d07      	ldr	r5, [pc, #28]	; (800a208 <_write_r+0x20>)
 800a1ec:	4604      	mov	r4, r0
 800a1ee:	4608      	mov	r0, r1
 800a1f0:	4611      	mov	r1, r2
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	602a      	str	r2, [r5, #0]
 800a1f6:	461a      	mov	r2, r3
 800a1f8:	f7f7 fafa 	bl	80017f0 <_write>
 800a1fc:	1c43      	adds	r3, r0, #1
 800a1fe:	d102      	bne.n	800a206 <_write_r+0x1e>
 800a200:	682b      	ldr	r3, [r5, #0]
 800a202:	b103      	cbz	r3, 800a206 <_write_r+0x1e>
 800a204:	6023      	str	r3, [r4, #0]
 800a206:	bd38      	pop	{r3, r4, r5, pc}
 800a208:	20000340 	.word	0x20000340

0800a20c <__assert_func>:
 800a20c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a20e:	4614      	mov	r4, r2
 800a210:	461a      	mov	r2, r3
 800a212:	4b09      	ldr	r3, [pc, #36]	; (800a238 <__assert_func+0x2c>)
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	4605      	mov	r5, r0
 800a218:	68d8      	ldr	r0, [r3, #12]
 800a21a:	b14c      	cbz	r4, 800a230 <__assert_func+0x24>
 800a21c:	4b07      	ldr	r3, [pc, #28]	; (800a23c <__assert_func+0x30>)
 800a21e:	9100      	str	r1, [sp, #0]
 800a220:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a224:	4906      	ldr	r1, [pc, #24]	; (800a240 <__assert_func+0x34>)
 800a226:	462b      	mov	r3, r5
 800a228:	f000 f81e 	bl	800a268 <fiprintf>
 800a22c:	f000 fa22 	bl	800a674 <abort>
 800a230:	4b04      	ldr	r3, [pc, #16]	; (800a244 <__assert_func+0x38>)
 800a232:	461c      	mov	r4, r3
 800a234:	e7f3      	b.n	800a21e <__assert_func+0x12>
 800a236:	bf00      	nop
 800a238:	2000000c 	.word	0x2000000c
 800a23c:	0800ac1d 	.word	0x0800ac1d
 800a240:	0800ac2a 	.word	0x0800ac2a
 800a244:	0800ac58 	.word	0x0800ac58

0800a248 <_close_r>:
 800a248:	b538      	push	{r3, r4, r5, lr}
 800a24a:	4d06      	ldr	r5, [pc, #24]	; (800a264 <_close_r+0x1c>)
 800a24c:	2300      	movs	r3, #0
 800a24e:	4604      	mov	r4, r0
 800a250:	4608      	mov	r0, r1
 800a252:	602b      	str	r3, [r5, #0]
 800a254:	f7f7 fae2 	bl	800181c <_close>
 800a258:	1c43      	adds	r3, r0, #1
 800a25a:	d102      	bne.n	800a262 <_close_r+0x1a>
 800a25c:	682b      	ldr	r3, [r5, #0]
 800a25e:	b103      	cbz	r3, 800a262 <_close_r+0x1a>
 800a260:	6023      	str	r3, [r4, #0]
 800a262:	bd38      	pop	{r3, r4, r5, pc}
 800a264:	20000340 	.word	0x20000340

0800a268 <fiprintf>:
 800a268:	b40e      	push	{r1, r2, r3}
 800a26a:	b503      	push	{r0, r1, lr}
 800a26c:	4601      	mov	r1, r0
 800a26e:	ab03      	add	r3, sp, #12
 800a270:	4805      	ldr	r0, [pc, #20]	; (800a288 <fiprintf+0x20>)
 800a272:	f853 2b04 	ldr.w	r2, [r3], #4
 800a276:	6800      	ldr	r0, [r0, #0]
 800a278:	9301      	str	r3, [sp, #4]
 800a27a:	f000 f8b9 	bl	800a3f0 <_vfiprintf_r>
 800a27e:	b002      	add	sp, #8
 800a280:	f85d eb04 	ldr.w	lr, [sp], #4
 800a284:	b003      	add	sp, #12
 800a286:	4770      	bx	lr
 800a288:	2000000c 	.word	0x2000000c

0800a28c <_fstat_r>:
 800a28c:	b538      	push	{r3, r4, r5, lr}
 800a28e:	4d07      	ldr	r5, [pc, #28]	; (800a2ac <_fstat_r+0x20>)
 800a290:	2300      	movs	r3, #0
 800a292:	4604      	mov	r4, r0
 800a294:	4608      	mov	r0, r1
 800a296:	4611      	mov	r1, r2
 800a298:	602b      	str	r3, [r5, #0]
 800a29a:	f7f7 facb 	bl	8001834 <_fstat>
 800a29e:	1c43      	adds	r3, r0, #1
 800a2a0:	d102      	bne.n	800a2a8 <_fstat_r+0x1c>
 800a2a2:	682b      	ldr	r3, [r5, #0]
 800a2a4:	b103      	cbz	r3, 800a2a8 <_fstat_r+0x1c>
 800a2a6:	6023      	str	r3, [r4, #0]
 800a2a8:	bd38      	pop	{r3, r4, r5, pc}
 800a2aa:	bf00      	nop
 800a2ac:	20000340 	.word	0x20000340

0800a2b0 <_isatty_r>:
 800a2b0:	b538      	push	{r3, r4, r5, lr}
 800a2b2:	4d06      	ldr	r5, [pc, #24]	; (800a2cc <_isatty_r+0x1c>)
 800a2b4:	2300      	movs	r3, #0
 800a2b6:	4604      	mov	r4, r0
 800a2b8:	4608      	mov	r0, r1
 800a2ba:	602b      	str	r3, [r5, #0]
 800a2bc:	f7f7 faca 	bl	8001854 <_isatty>
 800a2c0:	1c43      	adds	r3, r0, #1
 800a2c2:	d102      	bne.n	800a2ca <_isatty_r+0x1a>
 800a2c4:	682b      	ldr	r3, [r5, #0]
 800a2c6:	b103      	cbz	r3, 800a2ca <_isatty_r+0x1a>
 800a2c8:	6023      	str	r3, [r4, #0]
 800a2ca:	bd38      	pop	{r3, r4, r5, pc}
 800a2cc:	20000340 	.word	0x20000340

0800a2d0 <_lseek_r>:
 800a2d0:	b538      	push	{r3, r4, r5, lr}
 800a2d2:	4d07      	ldr	r5, [pc, #28]	; (800a2f0 <_lseek_r+0x20>)
 800a2d4:	4604      	mov	r4, r0
 800a2d6:	4608      	mov	r0, r1
 800a2d8:	4611      	mov	r1, r2
 800a2da:	2200      	movs	r2, #0
 800a2dc:	602a      	str	r2, [r5, #0]
 800a2de:	461a      	mov	r2, r3
 800a2e0:	f7f7 fac3 	bl	800186a <_lseek>
 800a2e4:	1c43      	adds	r3, r0, #1
 800a2e6:	d102      	bne.n	800a2ee <_lseek_r+0x1e>
 800a2e8:	682b      	ldr	r3, [r5, #0]
 800a2ea:	b103      	cbz	r3, 800a2ee <_lseek_r+0x1e>
 800a2ec:	6023      	str	r3, [r4, #0]
 800a2ee:	bd38      	pop	{r3, r4, r5, pc}
 800a2f0:	20000340 	.word	0x20000340

0800a2f4 <memmove>:
 800a2f4:	4288      	cmp	r0, r1
 800a2f6:	b510      	push	{r4, lr}
 800a2f8:	eb01 0402 	add.w	r4, r1, r2
 800a2fc:	d902      	bls.n	800a304 <memmove+0x10>
 800a2fe:	4284      	cmp	r4, r0
 800a300:	4623      	mov	r3, r4
 800a302:	d807      	bhi.n	800a314 <memmove+0x20>
 800a304:	1e43      	subs	r3, r0, #1
 800a306:	42a1      	cmp	r1, r4
 800a308:	d008      	beq.n	800a31c <memmove+0x28>
 800a30a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a30e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a312:	e7f8      	b.n	800a306 <memmove+0x12>
 800a314:	4402      	add	r2, r0
 800a316:	4601      	mov	r1, r0
 800a318:	428a      	cmp	r2, r1
 800a31a:	d100      	bne.n	800a31e <memmove+0x2a>
 800a31c:	bd10      	pop	{r4, pc}
 800a31e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a322:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a326:	e7f7      	b.n	800a318 <memmove+0x24>

0800a328 <__malloc_lock>:
 800a328:	4801      	ldr	r0, [pc, #4]	; (800a330 <__malloc_lock+0x8>)
 800a32a:	f7fe bf3e 	b.w	80091aa <__retarget_lock_acquire_recursive>
 800a32e:	bf00      	nop
 800a330:	20000334 	.word	0x20000334

0800a334 <__malloc_unlock>:
 800a334:	4801      	ldr	r0, [pc, #4]	; (800a33c <__malloc_unlock+0x8>)
 800a336:	f7fe bf39 	b.w	80091ac <__retarget_lock_release_recursive>
 800a33a:	bf00      	nop
 800a33c:	20000334 	.word	0x20000334

0800a340 <_realloc_r>:
 800a340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a344:	4680      	mov	r8, r0
 800a346:	4614      	mov	r4, r2
 800a348:	460e      	mov	r6, r1
 800a34a:	b921      	cbnz	r1, 800a356 <_realloc_r+0x16>
 800a34c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a350:	4611      	mov	r1, r2
 800a352:	f7ff bcfd 	b.w	8009d50 <_malloc_r>
 800a356:	b92a      	cbnz	r2, 800a364 <_realloc_r+0x24>
 800a358:	f7ff fc8e 	bl	8009c78 <_free_r>
 800a35c:	4625      	mov	r5, r4
 800a35e:	4628      	mov	r0, r5
 800a360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a364:	f000 f98d 	bl	800a682 <_malloc_usable_size_r>
 800a368:	4284      	cmp	r4, r0
 800a36a:	4607      	mov	r7, r0
 800a36c:	d802      	bhi.n	800a374 <_realloc_r+0x34>
 800a36e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a372:	d812      	bhi.n	800a39a <_realloc_r+0x5a>
 800a374:	4621      	mov	r1, r4
 800a376:	4640      	mov	r0, r8
 800a378:	f7ff fcea 	bl	8009d50 <_malloc_r>
 800a37c:	4605      	mov	r5, r0
 800a37e:	2800      	cmp	r0, #0
 800a380:	d0ed      	beq.n	800a35e <_realloc_r+0x1e>
 800a382:	42bc      	cmp	r4, r7
 800a384:	4622      	mov	r2, r4
 800a386:	4631      	mov	r1, r6
 800a388:	bf28      	it	cs
 800a38a:	463a      	movcs	r2, r7
 800a38c:	f7fe ff8e 	bl	80092ac <memcpy>
 800a390:	4631      	mov	r1, r6
 800a392:	4640      	mov	r0, r8
 800a394:	f7ff fc70 	bl	8009c78 <_free_r>
 800a398:	e7e1      	b.n	800a35e <_realloc_r+0x1e>
 800a39a:	4635      	mov	r5, r6
 800a39c:	e7df      	b.n	800a35e <_realloc_r+0x1e>

0800a39e <__sfputc_r>:
 800a39e:	6893      	ldr	r3, [r2, #8]
 800a3a0:	3b01      	subs	r3, #1
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	b410      	push	{r4}
 800a3a6:	6093      	str	r3, [r2, #8]
 800a3a8:	da08      	bge.n	800a3bc <__sfputc_r+0x1e>
 800a3aa:	6994      	ldr	r4, [r2, #24]
 800a3ac:	42a3      	cmp	r3, r4
 800a3ae:	db01      	blt.n	800a3b4 <__sfputc_r+0x16>
 800a3b0:	290a      	cmp	r1, #10
 800a3b2:	d103      	bne.n	800a3bc <__sfputc_r+0x1e>
 800a3b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a3b8:	f7fd ba92 	b.w	80078e0 <__swbuf_r>
 800a3bc:	6813      	ldr	r3, [r2, #0]
 800a3be:	1c58      	adds	r0, r3, #1
 800a3c0:	6010      	str	r0, [r2, #0]
 800a3c2:	7019      	strb	r1, [r3, #0]
 800a3c4:	4608      	mov	r0, r1
 800a3c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a3ca:	4770      	bx	lr

0800a3cc <__sfputs_r>:
 800a3cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3ce:	4606      	mov	r6, r0
 800a3d0:	460f      	mov	r7, r1
 800a3d2:	4614      	mov	r4, r2
 800a3d4:	18d5      	adds	r5, r2, r3
 800a3d6:	42ac      	cmp	r4, r5
 800a3d8:	d101      	bne.n	800a3de <__sfputs_r+0x12>
 800a3da:	2000      	movs	r0, #0
 800a3dc:	e007      	b.n	800a3ee <__sfputs_r+0x22>
 800a3de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3e2:	463a      	mov	r2, r7
 800a3e4:	4630      	mov	r0, r6
 800a3e6:	f7ff ffda 	bl	800a39e <__sfputc_r>
 800a3ea:	1c43      	adds	r3, r0, #1
 800a3ec:	d1f3      	bne.n	800a3d6 <__sfputs_r+0xa>
 800a3ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a3f0 <_vfiprintf_r>:
 800a3f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3f4:	460d      	mov	r5, r1
 800a3f6:	b09d      	sub	sp, #116	; 0x74
 800a3f8:	4614      	mov	r4, r2
 800a3fa:	4698      	mov	r8, r3
 800a3fc:	4606      	mov	r6, r0
 800a3fe:	b118      	cbz	r0, 800a408 <_vfiprintf_r+0x18>
 800a400:	6983      	ldr	r3, [r0, #24]
 800a402:	b90b      	cbnz	r3, 800a408 <_vfiprintf_r+0x18>
 800a404:	f7fe fac0 	bl	8008988 <__sinit>
 800a408:	4b89      	ldr	r3, [pc, #548]	; (800a630 <_vfiprintf_r+0x240>)
 800a40a:	429d      	cmp	r5, r3
 800a40c:	d11b      	bne.n	800a446 <_vfiprintf_r+0x56>
 800a40e:	6875      	ldr	r5, [r6, #4]
 800a410:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a412:	07d9      	lsls	r1, r3, #31
 800a414:	d405      	bmi.n	800a422 <_vfiprintf_r+0x32>
 800a416:	89ab      	ldrh	r3, [r5, #12]
 800a418:	059a      	lsls	r2, r3, #22
 800a41a:	d402      	bmi.n	800a422 <_vfiprintf_r+0x32>
 800a41c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a41e:	f7fe fec4 	bl	80091aa <__retarget_lock_acquire_recursive>
 800a422:	89ab      	ldrh	r3, [r5, #12]
 800a424:	071b      	lsls	r3, r3, #28
 800a426:	d501      	bpl.n	800a42c <_vfiprintf_r+0x3c>
 800a428:	692b      	ldr	r3, [r5, #16]
 800a42a:	b9eb      	cbnz	r3, 800a468 <_vfiprintf_r+0x78>
 800a42c:	4629      	mov	r1, r5
 800a42e:	4630      	mov	r0, r6
 800a430:	f7fd faa8 	bl	8007984 <__swsetup_r>
 800a434:	b1c0      	cbz	r0, 800a468 <_vfiprintf_r+0x78>
 800a436:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a438:	07dc      	lsls	r4, r3, #31
 800a43a:	d50e      	bpl.n	800a45a <_vfiprintf_r+0x6a>
 800a43c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a440:	b01d      	add	sp, #116	; 0x74
 800a442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a446:	4b7b      	ldr	r3, [pc, #492]	; (800a634 <_vfiprintf_r+0x244>)
 800a448:	429d      	cmp	r5, r3
 800a44a:	d101      	bne.n	800a450 <_vfiprintf_r+0x60>
 800a44c:	68b5      	ldr	r5, [r6, #8]
 800a44e:	e7df      	b.n	800a410 <_vfiprintf_r+0x20>
 800a450:	4b79      	ldr	r3, [pc, #484]	; (800a638 <_vfiprintf_r+0x248>)
 800a452:	429d      	cmp	r5, r3
 800a454:	bf08      	it	eq
 800a456:	68f5      	ldreq	r5, [r6, #12]
 800a458:	e7da      	b.n	800a410 <_vfiprintf_r+0x20>
 800a45a:	89ab      	ldrh	r3, [r5, #12]
 800a45c:	0598      	lsls	r0, r3, #22
 800a45e:	d4ed      	bmi.n	800a43c <_vfiprintf_r+0x4c>
 800a460:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a462:	f7fe fea3 	bl	80091ac <__retarget_lock_release_recursive>
 800a466:	e7e9      	b.n	800a43c <_vfiprintf_r+0x4c>
 800a468:	2300      	movs	r3, #0
 800a46a:	9309      	str	r3, [sp, #36]	; 0x24
 800a46c:	2320      	movs	r3, #32
 800a46e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a472:	f8cd 800c 	str.w	r8, [sp, #12]
 800a476:	2330      	movs	r3, #48	; 0x30
 800a478:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a63c <_vfiprintf_r+0x24c>
 800a47c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a480:	f04f 0901 	mov.w	r9, #1
 800a484:	4623      	mov	r3, r4
 800a486:	469a      	mov	sl, r3
 800a488:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a48c:	b10a      	cbz	r2, 800a492 <_vfiprintf_r+0xa2>
 800a48e:	2a25      	cmp	r2, #37	; 0x25
 800a490:	d1f9      	bne.n	800a486 <_vfiprintf_r+0x96>
 800a492:	ebba 0b04 	subs.w	fp, sl, r4
 800a496:	d00b      	beq.n	800a4b0 <_vfiprintf_r+0xc0>
 800a498:	465b      	mov	r3, fp
 800a49a:	4622      	mov	r2, r4
 800a49c:	4629      	mov	r1, r5
 800a49e:	4630      	mov	r0, r6
 800a4a0:	f7ff ff94 	bl	800a3cc <__sfputs_r>
 800a4a4:	3001      	adds	r0, #1
 800a4a6:	f000 80aa 	beq.w	800a5fe <_vfiprintf_r+0x20e>
 800a4aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a4ac:	445a      	add	r2, fp
 800a4ae:	9209      	str	r2, [sp, #36]	; 0x24
 800a4b0:	f89a 3000 	ldrb.w	r3, [sl]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	f000 80a2 	beq.w	800a5fe <_vfiprintf_r+0x20e>
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a4c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a4c4:	f10a 0a01 	add.w	sl, sl, #1
 800a4c8:	9304      	str	r3, [sp, #16]
 800a4ca:	9307      	str	r3, [sp, #28]
 800a4cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a4d0:	931a      	str	r3, [sp, #104]	; 0x68
 800a4d2:	4654      	mov	r4, sl
 800a4d4:	2205      	movs	r2, #5
 800a4d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4da:	4858      	ldr	r0, [pc, #352]	; (800a63c <_vfiprintf_r+0x24c>)
 800a4dc:	f7f5 fe90 	bl	8000200 <memchr>
 800a4e0:	9a04      	ldr	r2, [sp, #16]
 800a4e2:	b9d8      	cbnz	r0, 800a51c <_vfiprintf_r+0x12c>
 800a4e4:	06d1      	lsls	r1, r2, #27
 800a4e6:	bf44      	itt	mi
 800a4e8:	2320      	movmi	r3, #32
 800a4ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a4ee:	0713      	lsls	r3, r2, #28
 800a4f0:	bf44      	itt	mi
 800a4f2:	232b      	movmi	r3, #43	; 0x2b
 800a4f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a4f8:	f89a 3000 	ldrb.w	r3, [sl]
 800a4fc:	2b2a      	cmp	r3, #42	; 0x2a
 800a4fe:	d015      	beq.n	800a52c <_vfiprintf_r+0x13c>
 800a500:	9a07      	ldr	r2, [sp, #28]
 800a502:	4654      	mov	r4, sl
 800a504:	2000      	movs	r0, #0
 800a506:	f04f 0c0a 	mov.w	ip, #10
 800a50a:	4621      	mov	r1, r4
 800a50c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a510:	3b30      	subs	r3, #48	; 0x30
 800a512:	2b09      	cmp	r3, #9
 800a514:	d94e      	bls.n	800a5b4 <_vfiprintf_r+0x1c4>
 800a516:	b1b0      	cbz	r0, 800a546 <_vfiprintf_r+0x156>
 800a518:	9207      	str	r2, [sp, #28]
 800a51a:	e014      	b.n	800a546 <_vfiprintf_r+0x156>
 800a51c:	eba0 0308 	sub.w	r3, r0, r8
 800a520:	fa09 f303 	lsl.w	r3, r9, r3
 800a524:	4313      	orrs	r3, r2
 800a526:	9304      	str	r3, [sp, #16]
 800a528:	46a2      	mov	sl, r4
 800a52a:	e7d2      	b.n	800a4d2 <_vfiprintf_r+0xe2>
 800a52c:	9b03      	ldr	r3, [sp, #12]
 800a52e:	1d19      	adds	r1, r3, #4
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	9103      	str	r1, [sp, #12]
 800a534:	2b00      	cmp	r3, #0
 800a536:	bfbb      	ittet	lt
 800a538:	425b      	neglt	r3, r3
 800a53a:	f042 0202 	orrlt.w	r2, r2, #2
 800a53e:	9307      	strge	r3, [sp, #28]
 800a540:	9307      	strlt	r3, [sp, #28]
 800a542:	bfb8      	it	lt
 800a544:	9204      	strlt	r2, [sp, #16]
 800a546:	7823      	ldrb	r3, [r4, #0]
 800a548:	2b2e      	cmp	r3, #46	; 0x2e
 800a54a:	d10c      	bne.n	800a566 <_vfiprintf_r+0x176>
 800a54c:	7863      	ldrb	r3, [r4, #1]
 800a54e:	2b2a      	cmp	r3, #42	; 0x2a
 800a550:	d135      	bne.n	800a5be <_vfiprintf_r+0x1ce>
 800a552:	9b03      	ldr	r3, [sp, #12]
 800a554:	1d1a      	adds	r2, r3, #4
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	9203      	str	r2, [sp, #12]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	bfb8      	it	lt
 800a55e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a562:	3402      	adds	r4, #2
 800a564:	9305      	str	r3, [sp, #20]
 800a566:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a64c <_vfiprintf_r+0x25c>
 800a56a:	7821      	ldrb	r1, [r4, #0]
 800a56c:	2203      	movs	r2, #3
 800a56e:	4650      	mov	r0, sl
 800a570:	f7f5 fe46 	bl	8000200 <memchr>
 800a574:	b140      	cbz	r0, 800a588 <_vfiprintf_r+0x198>
 800a576:	2340      	movs	r3, #64	; 0x40
 800a578:	eba0 000a 	sub.w	r0, r0, sl
 800a57c:	fa03 f000 	lsl.w	r0, r3, r0
 800a580:	9b04      	ldr	r3, [sp, #16]
 800a582:	4303      	orrs	r3, r0
 800a584:	3401      	adds	r4, #1
 800a586:	9304      	str	r3, [sp, #16]
 800a588:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a58c:	482c      	ldr	r0, [pc, #176]	; (800a640 <_vfiprintf_r+0x250>)
 800a58e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a592:	2206      	movs	r2, #6
 800a594:	f7f5 fe34 	bl	8000200 <memchr>
 800a598:	2800      	cmp	r0, #0
 800a59a:	d03f      	beq.n	800a61c <_vfiprintf_r+0x22c>
 800a59c:	4b29      	ldr	r3, [pc, #164]	; (800a644 <_vfiprintf_r+0x254>)
 800a59e:	bb1b      	cbnz	r3, 800a5e8 <_vfiprintf_r+0x1f8>
 800a5a0:	9b03      	ldr	r3, [sp, #12]
 800a5a2:	3307      	adds	r3, #7
 800a5a4:	f023 0307 	bic.w	r3, r3, #7
 800a5a8:	3308      	adds	r3, #8
 800a5aa:	9303      	str	r3, [sp, #12]
 800a5ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5ae:	443b      	add	r3, r7
 800a5b0:	9309      	str	r3, [sp, #36]	; 0x24
 800a5b2:	e767      	b.n	800a484 <_vfiprintf_r+0x94>
 800a5b4:	fb0c 3202 	mla	r2, ip, r2, r3
 800a5b8:	460c      	mov	r4, r1
 800a5ba:	2001      	movs	r0, #1
 800a5bc:	e7a5      	b.n	800a50a <_vfiprintf_r+0x11a>
 800a5be:	2300      	movs	r3, #0
 800a5c0:	3401      	adds	r4, #1
 800a5c2:	9305      	str	r3, [sp, #20]
 800a5c4:	4619      	mov	r1, r3
 800a5c6:	f04f 0c0a 	mov.w	ip, #10
 800a5ca:	4620      	mov	r0, r4
 800a5cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a5d0:	3a30      	subs	r2, #48	; 0x30
 800a5d2:	2a09      	cmp	r2, #9
 800a5d4:	d903      	bls.n	800a5de <_vfiprintf_r+0x1ee>
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d0c5      	beq.n	800a566 <_vfiprintf_r+0x176>
 800a5da:	9105      	str	r1, [sp, #20]
 800a5dc:	e7c3      	b.n	800a566 <_vfiprintf_r+0x176>
 800a5de:	fb0c 2101 	mla	r1, ip, r1, r2
 800a5e2:	4604      	mov	r4, r0
 800a5e4:	2301      	movs	r3, #1
 800a5e6:	e7f0      	b.n	800a5ca <_vfiprintf_r+0x1da>
 800a5e8:	ab03      	add	r3, sp, #12
 800a5ea:	9300      	str	r3, [sp, #0]
 800a5ec:	462a      	mov	r2, r5
 800a5ee:	4b16      	ldr	r3, [pc, #88]	; (800a648 <_vfiprintf_r+0x258>)
 800a5f0:	a904      	add	r1, sp, #16
 800a5f2:	4630      	mov	r0, r6
 800a5f4:	f7fb fc50 	bl	8005e98 <_printf_float>
 800a5f8:	4607      	mov	r7, r0
 800a5fa:	1c78      	adds	r0, r7, #1
 800a5fc:	d1d6      	bne.n	800a5ac <_vfiprintf_r+0x1bc>
 800a5fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a600:	07d9      	lsls	r1, r3, #31
 800a602:	d405      	bmi.n	800a610 <_vfiprintf_r+0x220>
 800a604:	89ab      	ldrh	r3, [r5, #12]
 800a606:	059a      	lsls	r2, r3, #22
 800a608:	d402      	bmi.n	800a610 <_vfiprintf_r+0x220>
 800a60a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a60c:	f7fe fdce 	bl	80091ac <__retarget_lock_release_recursive>
 800a610:	89ab      	ldrh	r3, [r5, #12]
 800a612:	065b      	lsls	r3, r3, #25
 800a614:	f53f af12 	bmi.w	800a43c <_vfiprintf_r+0x4c>
 800a618:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a61a:	e711      	b.n	800a440 <_vfiprintf_r+0x50>
 800a61c:	ab03      	add	r3, sp, #12
 800a61e:	9300      	str	r3, [sp, #0]
 800a620:	462a      	mov	r2, r5
 800a622:	4b09      	ldr	r3, [pc, #36]	; (800a648 <_vfiprintf_r+0x258>)
 800a624:	a904      	add	r1, sp, #16
 800a626:	4630      	mov	r0, r6
 800a628:	f7fb feda 	bl	80063e0 <_printf_i>
 800a62c:	e7e4      	b.n	800a5f8 <_vfiprintf_r+0x208>
 800a62e:	bf00      	nop
 800a630:	0800a9f4 	.word	0x0800a9f4
 800a634:	0800aa14 	.word	0x0800aa14
 800a638:	0800a9d4 	.word	0x0800a9d4
 800a63c:	0800ac0c 	.word	0x0800ac0c
 800a640:	0800ac16 	.word	0x0800ac16
 800a644:	08005e99 	.word	0x08005e99
 800a648:	0800a3cd 	.word	0x0800a3cd
 800a64c:	0800ac12 	.word	0x0800ac12

0800a650 <_read_r>:
 800a650:	b538      	push	{r3, r4, r5, lr}
 800a652:	4d07      	ldr	r5, [pc, #28]	; (800a670 <_read_r+0x20>)
 800a654:	4604      	mov	r4, r0
 800a656:	4608      	mov	r0, r1
 800a658:	4611      	mov	r1, r2
 800a65a:	2200      	movs	r2, #0
 800a65c:	602a      	str	r2, [r5, #0]
 800a65e:	461a      	mov	r2, r3
 800a660:	f7f7 f8a8 	bl	80017b4 <_read>
 800a664:	1c43      	adds	r3, r0, #1
 800a666:	d102      	bne.n	800a66e <_read_r+0x1e>
 800a668:	682b      	ldr	r3, [r5, #0]
 800a66a:	b103      	cbz	r3, 800a66e <_read_r+0x1e>
 800a66c:	6023      	str	r3, [r4, #0]
 800a66e:	bd38      	pop	{r3, r4, r5, pc}
 800a670:	20000340 	.word	0x20000340

0800a674 <abort>:
 800a674:	b508      	push	{r3, lr}
 800a676:	2006      	movs	r0, #6
 800a678:	f000 f834 	bl	800a6e4 <raise>
 800a67c:	2001      	movs	r0, #1
 800a67e:	f7f7 f88f 	bl	80017a0 <_exit>

0800a682 <_malloc_usable_size_r>:
 800a682:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a686:	1f18      	subs	r0, r3, #4
 800a688:	2b00      	cmp	r3, #0
 800a68a:	bfbc      	itt	lt
 800a68c:	580b      	ldrlt	r3, [r1, r0]
 800a68e:	18c0      	addlt	r0, r0, r3
 800a690:	4770      	bx	lr

0800a692 <_raise_r>:
 800a692:	291f      	cmp	r1, #31
 800a694:	b538      	push	{r3, r4, r5, lr}
 800a696:	4604      	mov	r4, r0
 800a698:	460d      	mov	r5, r1
 800a69a:	d904      	bls.n	800a6a6 <_raise_r+0x14>
 800a69c:	2316      	movs	r3, #22
 800a69e:	6003      	str	r3, [r0, #0]
 800a6a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a6a4:	bd38      	pop	{r3, r4, r5, pc}
 800a6a6:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a6a8:	b112      	cbz	r2, 800a6b0 <_raise_r+0x1e>
 800a6aa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a6ae:	b94b      	cbnz	r3, 800a6c4 <_raise_r+0x32>
 800a6b0:	4620      	mov	r0, r4
 800a6b2:	f000 f831 	bl	800a718 <_getpid_r>
 800a6b6:	462a      	mov	r2, r5
 800a6b8:	4601      	mov	r1, r0
 800a6ba:	4620      	mov	r0, r4
 800a6bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a6c0:	f000 b818 	b.w	800a6f4 <_kill_r>
 800a6c4:	2b01      	cmp	r3, #1
 800a6c6:	d00a      	beq.n	800a6de <_raise_r+0x4c>
 800a6c8:	1c59      	adds	r1, r3, #1
 800a6ca:	d103      	bne.n	800a6d4 <_raise_r+0x42>
 800a6cc:	2316      	movs	r3, #22
 800a6ce:	6003      	str	r3, [r0, #0]
 800a6d0:	2001      	movs	r0, #1
 800a6d2:	e7e7      	b.n	800a6a4 <_raise_r+0x12>
 800a6d4:	2400      	movs	r4, #0
 800a6d6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a6da:	4628      	mov	r0, r5
 800a6dc:	4798      	blx	r3
 800a6de:	2000      	movs	r0, #0
 800a6e0:	e7e0      	b.n	800a6a4 <_raise_r+0x12>
	...

0800a6e4 <raise>:
 800a6e4:	4b02      	ldr	r3, [pc, #8]	; (800a6f0 <raise+0xc>)
 800a6e6:	4601      	mov	r1, r0
 800a6e8:	6818      	ldr	r0, [r3, #0]
 800a6ea:	f7ff bfd2 	b.w	800a692 <_raise_r>
 800a6ee:	bf00      	nop
 800a6f0:	2000000c 	.word	0x2000000c

0800a6f4 <_kill_r>:
 800a6f4:	b538      	push	{r3, r4, r5, lr}
 800a6f6:	4d07      	ldr	r5, [pc, #28]	; (800a714 <_kill_r+0x20>)
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	4604      	mov	r4, r0
 800a6fc:	4608      	mov	r0, r1
 800a6fe:	4611      	mov	r1, r2
 800a700:	602b      	str	r3, [r5, #0]
 800a702:	f7f7 f83d 	bl	8001780 <_kill>
 800a706:	1c43      	adds	r3, r0, #1
 800a708:	d102      	bne.n	800a710 <_kill_r+0x1c>
 800a70a:	682b      	ldr	r3, [r5, #0]
 800a70c:	b103      	cbz	r3, 800a710 <_kill_r+0x1c>
 800a70e:	6023      	str	r3, [r4, #0]
 800a710:	bd38      	pop	{r3, r4, r5, pc}
 800a712:	bf00      	nop
 800a714:	20000340 	.word	0x20000340

0800a718 <_getpid_r>:
 800a718:	f7f7 b82a 	b.w	8001770 <_getpid>

0800a71c <_init>:
 800a71c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a71e:	bf00      	nop
 800a720:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a722:	bc08      	pop	{r3}
 800a724:	469e      	mov	lr, r3
 800a726:	4770      	bx	lr

0800a728 <_fini>:
 800a728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a72a:	bf00      	nop
 800a72c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a72e:	bc08      	pop	{r3}
 800a730:	469e      	mov	lr, r3
 800a732:	4770      	bx	lr
