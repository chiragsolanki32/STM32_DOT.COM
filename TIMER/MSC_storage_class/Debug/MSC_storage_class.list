
MSC_storage_class.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013f60  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000fbc  08014120  08014120  00024120  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080150dc  080150dc  00030200  2**0
                  CONTENTS
  4 .ARM          00000008  080150dc  080150dc  000250dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080150e4  080150e4  00030200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080150e4  080150e4  000250e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080150e8  080150e8  000250e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  080150ec  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002e14  20000200  080152ec  00030200  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20003014  080152ec  00033014  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030200  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020bb3  00000000  00000000  00030230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004ab3  00000000  00000000  00050de3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001580  00000000  00000000  00055898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013e8  00000000  00000000  00056e18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002fae3  00000000  00000000  00058200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002102b  00000000  00000000  00087ce3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00104fbe  00000000  00000000  000a8d0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001adccc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006d6c  00000000  00000000  001add1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000200 	.word	0x20000200
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08014108 	.word	0x08014108

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000204 	.word	0x20000204
 80001fc:	08014108 	.word	0x08014108

08000200 <strcmp>:
 8000200:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000204:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000208:	2a01      	cmp	r2, #1
 800020a:	bf28      	it	cs
 800020c:	429a      	cmpcs	r2, r3
 800020e:	d0f7      	beq.n	8000200 <strcmp>
 8000210:	1ad0      	subs	r0, r2, r3
 8000212:	4770      	bx	lr

08000214 <strlen>:
 8000214:	4603      	mov	r3, r0
 8000216:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021a:	2a00      	cmp	r2, #0
 800021c:	d1fb      	bne.n	8000216 <strlen+0x2>
 800021e:	1a18      	subs	r0, r3, r0
 8000220:	3801      	subs	r0, #1
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cec:	f000 b9aa 	b.w	8001044 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	4604      	mov	r4, r0
 8000d7c:	468e      	mov	lr, r1
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d14d      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d82:	428a      	cmp	r2, r1
 8000d84:	4694      	mov	ip, r2
 8000d86:	d969      	bls.n	8000e5c <__udivmoddi4+0xe8>
 8000d88:	fab2 f282 	clz	r2, r2
 8000d8c:	b152      	cbz	r2, 8000da4 <__udivmoddi4+0x30>
 8000d8e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d92:	f1c2 0120 	rsb	r1, r2, #32
 8000d96:	fa20 f101 	lsr.w	r1, r0, r1
 8000d9a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9e:	ea41 0e03 	orr.w	lr, r1, r3
 8000da2:	4094      	lsls	r4, r2
 8000da4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da8:	0c21      	lsrs	r1, r4, #16
 8000daa:	fbbe f6f8 	udiv	r6, lr, r8
 8000dae:	fa1f f78c 	uxth.w	r7, ip
 8000db2:	fb08 e316 	mls	r3, r8, r6, lr
 8000db6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000dba:	fb06 f107 	mul.w	r1, r6, r7
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000dca:	f080 811f 	bcs.w	800100c <__udivmoddi4+0x298>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 811c 	bls.w	800100c <__udivmoddi4+0x298>
 8000dd4:	3e02      	subs	r6, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a5b      	subs	r3, r3, r1
 8000dda:	b2a4      	uxth	r4, r4
 8000ddc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000de0:	fb08 3310 	mls	r3, r8, r0, r3
 8000de4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000de8:	fb00 f707 	mul.w	r7, r0, r7
 8000dec:	42a7      	cmp	r7, r4
 8000dee:	d90a      	bls.n	8000e06 <__udivmoddi4+0x92>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000df8:	f080 810a 	bcs.w	8001010 <__udivmoddi4+0x29c>
 8000dfc:	42a7      	cmp	r7, r4
 8000dfe:	f240 8107 	bls.w	8001010 <__udivmoddi4+0x29c>
 8000e02:	4464      	add	r4, ip
 8000e04:	3802      	subs	r0, #2
 8000e06:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e0a:	1be4      	subs	r4, r4, r7
 8000e0c:	2600      	movs	r6, #0
 8000e0e:	b11d      	cbz	r5, 8000e18 <__udivmoddi4+0xa4>
 8000e10:	40d4      	lsrs	r4, r2
 8000e12:	2300      	movs	r3, #0
 8000e14:	e9c5 4300 	strd	r4, r3, [r5]
 8000e18:	4631      	mov	r1, r6
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d909      	bls.n	8000e36 <__udivmoddi4+0xc2>
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	f000 80ef 	beq.w	8001006 <__udivmoddi4+0x292>
 8000e28:	2600      	movs	r6, #0
 8000e2a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e2e:	4630      	mov	r0, r6
 8000e30:	4631      	mov	r1, r6
 8000e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e36:	fab3 f683 	clz	r6, r3
 8000e3a:	2e00      	cmp	r6, #0
 8000e3c:	d14a      	bne.n	8000ed4 <__udivmoddi4+0x160>
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d302      	bcc.n	8000e48 <__udivmoddi4+0xd4>
 8000e42:	4282      	cmp	r2, r0
 8000e44:	f200 80f9 	bhi.w	800103a <__udivmoddi4+0x2c6>
 8000e48:	1a84      	subs	r4, r0, r2
 8000e4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e4e:	2001      	movs	r0, #1
 8000e50:	469e      	mov	lr, r3
 8000e52:	2d00      	cmp	r5, #0
 8000e54:	d0e0      	beq.n	8000e18 <__udivmoddi4+0xa4>
 8000e56:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e5a:	e7dd      	b.n	8000e18 <__udivmoddi4+0xa4>
 8000e5c:	b902      	cbnz	r2, 8000e60 <__udivmoddi4+0xec>
 8000e5e:	deff      	udf	#255	; 0xff
 8000e60:	fab2 f282 	clz	r2, r2
 8000e64:	2a00      	cmp	r2, #0
 8000e66:	f040 8092 	bne.w	8000f8e <__udivmoddi4+0x21a>
 8000e6a:	eba1 010c 	sub.w	r1, r1, ip
 8000e6e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e72:	fa1f fe8c 	uxth.w	lr, ip
 8000e76:	2601      	movs	r6, #1
 8000e78:	0c20      	lsrs	r0, r4, #16
 8000e7a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e7e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e82:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e86:	fb0e f003 	mul.w	r0, lr, r3
 8000e8a:	4288      	cmp	r0, r1
 8000e8c:	d908      	bls.n	8000ea0 <__udivmoddi4+0x12c>
 8000e8e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e92:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e96:	d202      	bcs.n	8000e9e <__udivmoddi4+0x12a>
 8000e98:	4288      	cmp	r0, r1
 8000e9a:	f200 80cb 	bhi.w	8001034 <__udivmoddi4+0x2c0>
 8000e9e:	4643      	mov	r3, r8
 8000ea0:	1a09      	subs	r1, r1, r0
 8000ea2:	b2a4      	uxth	r4, r4
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1110 	mls	r1, r7, r0, r1
 8000eac:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000eb0:	fb0e fe00 	mul.w	lr, lr, r0
 8000eb4:	45a6      	cmp	lr, r4
 8000eb6:	d908      	bls.n	8000eca <__udivmoddi4+0x156>
 8000eb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ebc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000ec0:	d202      	bcs.n	8000ec8 <__udivmoddi4+0x154>
 8000ec2:	45a6      	cmp	lr, r4
 8000ec4:	f200 80bb 	bhi.w	800103e <__udivmoddi4+0x2ca>
 8000ec8:	4608      	mov	r0, r1
 8000eca:	eba4 040e 	sub.w	r4, r4, lr
 8000ece:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ed2:	e79c      	b.n	8000e0e <__udivmoddi4+0x9a>
 8000ed4:	f1c6 0720 	rsb	r7, r6, #32
 8000ed8:	40b3      	lsls	r3, r6
 8000eda:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ede:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ee2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ee6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eea:	431c      	orrs	r4, r3
 8000eec:	40f9      	lsrs	r1, r7
 8000eee:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ef2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ef6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000efa:	0c20      	lsrs	r0, r4, #16
 8000efc:	fa1f fe8c 	uxth.w	lr, ip
 8000f00:	fb09 1118 	mls	r1, r9, r8, r1
 8000f04:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f08:	fb08 f00e 	mul.w	r0, r8, lr
 8000f0c:	4288      	cmp	r0, r1
 8000f0e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f12:	d90b      	bls.n	8000f2c <__udivmoddi4+0x1b8>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000f1c:	f080 8088 	bcs.w	8001030 <__udivmoddi4+0x2bc>
 8000f20:	4288      	cmp	r0, r1
 8000f22:	f240 8085 	bls.w	8001030 <__udivmoddi4+0x2bc>
 8000f26:	f1a8 0802 	sub.w	r8, r8, #2
 8000f2a:	4461      	add	r1, ip
 8000f2c:	1a09      	subs	r1, r1, r0
 8000f2e:	b2a4      	uxth	r4, r4
 8000f30:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f34:	fb09 1110 	mls	r1, r9, r0, r1
 8000f38:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f3c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f40:	458e      	cmp	lr, r1
 8000f42:	d908      	bls.n	8000f56 <__udivmoddi4+0x1e2>
 8000f44:	eb1c 0101 	adds.w	r1, ip, r1
 8000f48:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000f4c:	d26c      	bcs.n	8001028 <__udivmoddi4+0x2b4>
 8000f4e:	458e      	cmp	lr, r1
 8000f50:	d96a      	bls.n	8001028 <__udivmoddi4+0x2b4>
 8000f52:	3802      	subs	r0, #2
 8000f54:	4461      	add	r1, ip
 8000f56:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f5a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f5e:	eba1 010e 	sub.w	r1, r1, lr
 8000f62:	42a1      	cmp	r1, r4
 8000f64:	46c8      	mov	r8, r9
 8000f66:	46a6      	mov	lr, r4
 8000f68:	d356      	bcc.n	8001018 <__udivmoddi4+0x2a4>
 8000f6a:	d053      	beq.n	8001014 <__udivmoddi4+0x2a0>
 8000f6c:	b15d      	cbz	r5, 8000f86 <__udivmoddi4+0x212>
 8000f6e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f72:	eb61 010e 	sbc.w	r1, r1, lr
 8000f76:	fa01 f707 	lsl.w	r7, r1, r7
 8000f7a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f7e:	40f1      	lsrs	r1, r6
 8000f80:	431f      	orrs	r7, r3
 8000f82:	e9c5 7100 	strd	r7, r1, [r5]
 8000f86:	2600      	movs	r6, #0
 8000f88:	4631      	mov	r1, r6
 8000f8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f8e:	f1c2 0320 	rsb	r3, r2, #32
 8000f92:	40d8      	lsrs	r0, r3
 8000f94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f98:	fa21 f303 	lsr.w	r3, r1, r3
 8000f9c:	4091      	lsls	r1, r2
 8000f9e:	4301      	orrs	r1, r0
 8000fa0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fa4:	fa1f fe8c 	uxth.w	lr, ip
 8000fa8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000fac:	fb07 3610 	mls	r6, r7, r0, r3
 8000fb0:	0c0b      	lsrs	r3, r1, #16
 8000fb2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fb6:	fb00 f60e 	mul.w	r6, r0, lr
 8000fba:	429e      	cmp	r6, r3
 8000fbc:	fa04 f402 	lsl.w	r4, r4, r2
 8000fc0:	d908      	bls.n	8000fd4 <__udivmoddi4+0x260>
 8000fc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fc6:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000fca:	d22f      	bcs.n	800102c <__udivmoddi4+0x2b8>
 8000fcc:	429e      	cmp	r6, r3
 8000fce:	d92d      	bls.n	800102c <__udivmoddi4+0x2b8>
 8000fd0:	3802      	subs	r0, #2
 8000fd2:	4463      	add	r3, ip
 8000fd4:	1b9b      	subs	r3, r3, r6
 8000fd6:	b289      	uxth	r1, r1
 8000fd8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fdc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fe0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fe4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fe8:	428b      	cmp	r3, r1
 8000fea:	d908      	bls.n	8000ffe <__udivmoddi4+0x28a>
 8000fec:	eb1c 0101 	adds.w	r1, ip, r1
 8000ff0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000ff4:	d216      	bcs.n	8001024 <__udivmoddi4+0x2b0>
 8000ff6:	428b      	cmp	r3, r1
 8000ff8:	d914      	bls.n	8001024 <__udivmoddi4+0x2b0>
 8000ffa:	3e02      	subs	r6, #2
 8000ffc:	4461      	add	r1, ip
 8000ffe:	1ac9      	subs	r1, r1, r3
 8001000:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001004:	e738      	b.n	8000e78 <__udivmoddi4+0x104>
 8001006:	462e      	mov	r6, r5
 8001008:	4628      	mov	r0, r5
 800100a:	e705      	b.n	8000e18 <__udivmoddi4+0xa4>
 800100c:	4606      	mov	r6, r0
 800100e:	e6e3      	b.n	8000dd8 <__udivmoddi4+0x64>
 8001010:	4618      	mov	r0, r3
 8001012:	e6f8      	b.n	8000e06 <__udivmoddi4+0x92>
 8001014:	454b      	cmp	r3, r9
 8001016:	d2a9      	bcs.n	8000f6c <__udivmoddi4+0x1f8>
 8001018:	ebb9 0802 	subs.w	r8, r9, r2
 800101c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001020:	3801      	subs	r0, #1
 8001022:	e7a3      	b.n	8000f6c <__udivmoddi4+0x1f8>
 8001024:	4646      	mov	r6, r8
 8001026:	e7ea      	b.n	8000ffe <__udivmoddi4+0x28a>
 8001028:	4620      	mov	r0, r4
 800102a:	e794      	b.n	8000f56 <__udivmoddi4+0x1e2>
 800102c:	4640      	mov	r0, r8
 800102e:	e7d1      	b.n	8000fd4 <__udivmoddi4+0x260>
 8001030:	46d0      	mov	r8, sl
 8001032:	e77b      	b.n	8000f2c <__udivmoddi4+0x1b8>
 8001034:	3b02      	subs	r3, #2
 8001036:	4461      	add	r1, ip
 8001038:	e732      	b.n	8000ea0 <__udivmoddi4+0x12c>
 800103a:	4630      	mov	r0, r6
 800103c:	e709      	b.n	8000e52 <__udivmoddi4+0xde>
 800103e:	4464      	add	r4, ip
 8001040:	3802      	subs	r0, #2
 8001042:	e742      	b.n	8000eca <__udivmoddi4+0x156>

08001044 <__aeabi_idiv0>:
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop

08001048 <Send_Uart>:
DWORD fre_clust;
uint32_t total, free_space;


void Send_Uart (char *string)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(UART, (uint8_t *)string, strlen (string), HAL_MAX_DELAY);
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	f7ff f8df 	bl	8000214 <strlen>
 8001056:	4603      	mov	r3, r0
 8001058:	b29a      	uxth	r2, r3
 800105a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800105e:	6879      	ldr	r1, [r7, #4]
 8001060:	4803      	ldr	r0, [pc, #12]	; (8001070 <Send_Uart+0x28>)
 8001062:	f004 fa99 	bl	8005598 <HAL_UART_Transmit>
}
 8001066:	bf00      	nop
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	20000358 	.word	0x20000358

08001074 <Mount_USB>:



void Mount_USB (void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
	fresult = f_mount(&USBHFatFS, USBHPath, 1);
 8001078:	2201      	movs	r2, #1
 800107a:	490a      	ldr	r1, [pc, #40]	; (80010a4 <Mount_USB+0x30>)
 800107c:	480a      	ldr	r0, [pc, #40]	; (80010a8 <Mount_USB+0x34>)
 800107e:	f00c fcfd 	bl	800da7c <f_mount>
 8001082:	4603      	mov	r3, r0
 8001084:	461a      	mov	r2, r3
 8001086:	4b09      	ldr	r3, [pc, #36]	; (80010ac <Mount_USB+0x38>)
 8001088:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK) Send_Uart ("ERROR!!! in mounting USB ...\n\n");
 800108a:	4b08      	ldr	r3, [pc, #32]	; (80010ac <Mount_USB+0x38>)
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d003      	beq.n	800109a <Mount_USB+0x26>
 8001092:	4807      	ldr	r0, [pc, #28]	; (80010b0 <Mount_USB+0x3c>)
 8001094:	f7ff ffd8 	bl	8001048 <Send_Uart>
	else Send_Uart("USB mounted successfully...\n");
}
 8001098:	e002      	b.n	80010a0 <Mount_USB+0x2c>
	else Send_Uart("USB mounted successfully...\n");
 800109a:	4806      	ldr	r0, [pc, #24]	; (80010b4 <Mount_USB+0x40>)
 800109c:	f7ff ffd4 	bl	8001048 <Send_Uart>
}
 80010a0:	bf00      	nop
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	200003f4 	.word	0x200003f4
 80010a8:	200003f8 	.word	0x200003f8
 80010ac:	20000340 	.word	0x20000340
 80010b0:	08014120 	.word	0x08014120
 80010b4:	08014140 	.word	0x08014140

080010b8 <Unmount_USB>:

void Unmount_USB (void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
	fresult = f_mount(NULL, USBHPath, 1);
 80010bc:	2201      	movs	r2, #1
 80010be:	490a      	ldr	r1, [pc, #40]	; (80010e8 <Unmount_USB+0x30>)
 80010c0:	2000      	movs	r0, #0
 80010c2:	f00c fcdb 	bl	800da7c <f_mount>
 80010c6:	4603      	mov	r3, r0
 80010c8:	461a      	mov	r2, r3
 80010ca:	4b08      	ldr	r3, [pc, #32]	; (80010ec <Unmount_USB+0x34>)
 80010cc:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK) Send_Uart ("USB UNMOUNTED successfully...\n\n\n");
 80010ce:	4b07      	ldr	r3, [pc, #28]	; (80010ec <Unmount_USB+0x34>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d103      	bne.n	80010de <Unmount_USB+0x26>
 80010d6:	4806      	ldr	r0, [pc, #24]	; (80010f0 <Unmount_USB+0x38>)
 80010d8:	f7ff ffb6 	bl	8001048 <Send_Uart>
	else Send_Uart("ERROR!!! in UNMOUNTING USB \n\n\n");
}
 80010dc:	e002      	b.n	80010e4 <Unmount_USB+0x2c>
	else Send_Uart("ERROR!!! in UNMOUNTING USB \n\n\n");
 80010de:	4805      	ldr	r0, [pc, #20]	; (80010f4 <Unmount_USB+0x3c>)
 80010e0:	f7ff ffb2 	bl	8001048 <Send_Uart>
}
 80010e4:	bf00      	nop
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	200003f4 	.word	0x200003f4
 80010ec:	20000340 	.word	0x20000340
 80010f0:	08014160 	.word	0x08014160
 80010f4:	08014184 	.word	0x08014184

080010f8 <Scan_USB>:

/* Start node to be scanned (***also used as work area***) */
FRESULT Scan_USB (char* pat)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b09a      	sub	sp, #104	; 0x68
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
    DIR dir;
    UINT i;
    char *path = malloc(20*sizeof (char));
 8001100:	2014      	movs	r0, #20
 8001102:	f00e fb83 	bl	800f80c <malloc>
 8001106:	4603      	mov	r3, r0
 8001108:	667b      	str	r3, [r7, #100]	; 0x64
    sprintf (path, "%s",pat);
 800110a:	687a      	ldr	r2, [r7, #4]
 800110c:	4944      	ldr	r1, [pc, #272]	; (8001220 <Scan_USB+0x128>)
 800110e:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8001110:	f00f fb12 	bl	8010738 <siprintf>

    fresult = f_opendir(&dir, path);                       /* Open the directory */
 8001114:	f107 0308 	add.w	r3, r7, #8
 8001118:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800111a:	4618      	mov	r0, r3
 800111c:	f00d fae6 	bl	800e6ec <f_opendir>
 8001120:	4603      	mov	r3, r0
 8001122:	461a      	mov	r2, r3
 8001124:	4b3f      	ldr	r3, [pc, #252]	; (8001224 <Scan_USB+0x12c>)
 8001126:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 8001128:	4b3e      	ldr	r3, [pc, #248]	; (8001224 <Scan_USB+0x12c>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d16e      	bne.n	800120e <Scan_USB+0x116>
    {
        for (;;)
        {
            fresult = f_readdir(&dir, &USBHfno);                   /* Read a directory item */
 8001130:	f107 0308 	add.w	r3, r7, #8
 8001134:	493c      	ldr	r1, [pc, #240]	; (8001228 <Scan_USB+0x130>)
 8001136:	4618      	mov	r0, r3
 8001138:	f00d fba7 	bl	800e88a <f_readdir>
 800113c:	4603      	mov	r3, r0
 800113e:	461a      	mov	r2, r3
 8001140:	4b38      	ldr	r3, [pc, #224]	; (8001224 <Scan_USB+0x12c>)
 8001142:	701a      	strb	r2, [r3, #0]
            if (fresult != FR_OK || USBHfno.fname[0] == 0) break;  /* Break on error or end of dir */
 8001144:	4b37      	ldr	r3, [pc, #220]	; (8001224 <Scan_USB+0x12c>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d15b      	bne.n	8001204 <Scan_USB+0x10c>
 800114c:	4b36      	ldr	r3, [pc, #216]	; (8001228 <Scan_USB+0x130>)
 800114e:	7e9b      	ldrb	r3, [r3, #26]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d057      	beq.n	8001204 <Scan_USB+0x10c>
            if (USBHfno.fattrib & AM_DIR)     /* It is a directory */
 8001154:	4b34      	ldr	r3, [pc, #208]	; (8001228 <Scan_USB+0x130>)
 8001156:	7b1b      	ldrb	r3, [r3, #12]
 8001158:	f003 0310 	and.w	r3, r3, #16
 800115c:	2b00      	cmp	r3, #0
 800115e:	d03a      	beq.n	80011d6 <Scan_USB+0xde>
            {
            	if (!(strcmp ("SYSTEM~1", USBHfno.fname))) continue;
 8001160:	4932      	ldr	r1, [pc, #200]	; (800122c <Scan_USB+0x134>)
 8001162:	4833      	ldr	r0, [pc, #204]	; (8001230 <Scan_USB+0x138>)
 8001164:	f7ff f84c 	bl	8000200 <strcmp>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d045      	beq.n	80011fa <Scan_USB+0x102>
            	if (!(strcmp("System Volume Information", USBHfno.fname))) continue;
 800116e:	492f      	ldr	r1, [pc, #188]	; (800122c <Scan_USB+0x134>)
 8001170:	4830      	ldr	r0, [pc, #192]	; (8001234 <Scan_USB+0x13c>)
 8001172:	f7ff f845 	bl	8000200 <strcmp>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d040      	beq.n	80011fe <Scan_USB+0x106>
            	char *buf = malloc(30*sizeof(char));
 800117c:	201e      	movs	r0, #30
 800117e:	f00e fb45 	bl	800f80c <malloc>
 8001182:	4603      	mov	r3, r0
 8001184:	65fb      	str	r3, [r7, #92]	; 0x5c
            	sprintf (buf, "Dir: %s\r\n", USBHfno.fname);
 8001186:	4a29      	ldr	r2, [pc, #164]	; (800122c <Scan_USB+0x134>)
 8001188:	492b      	ldr	r1, [pc, #172]	; (8001238 <Scan_USB+0x140>)
 800118a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800118c:	f00f fad4 	bl	8010738 <siprintf>
            	Send_Uart(buf);
 8001190:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001192:	f7ff ff59 	bl	8001048 <Send_Uart>
            	free(buf);
 8001196:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001198:	f00e fb40 	bl	800f81c <free>
                i = strlen(path);
 800119c:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800119e:	f7ff f839 	bl	8000214 <strlen>
 80011a2:	65b8      	str	r0, [r7, #88]	; 0x58
                sprintf(&path[i], "/%s", USBHfno.fname);
 80011a4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80011a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80011a8:	4413      	add	r3, r2
 80011aa:	4a20      	ldr	r2, [pc, #128]	; (800122c <Scan_USB+0x134>)
 80011ac:	4923      	ldr	r1, [pc, #140]	; (800123c <Scan_USB+0x144>)
 80011ae:	4618      	mov	r0, r3
 80011b0:	f00f fac2 	bl	8010738 <siprintf>
                fresult = Scan_USB(path);                     /* Enter the directory */
 80011b4:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80011b6:	f7ff ff9f 	bl	80010f8 <Scan_USB>
 80011ba:	4603      	mov	r3, r0
 80011bc:	461a      	mov	r2, r3
 80011be:	4b19      	ldr	r3, [pc, #100]	; (8001224 <Scan_USB+0x12c>)
 80011c0:	701a      	strb	r2, [r3, #0]
                if (fresult != FR_OK) break;
 80011c2:	4b18      	ldr	r3, [pc, #96]	; (8001224 <Scan_USB+0x12c>)
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d11b      	bne.n	8001202 <Scan_USB+0x10a>
                path[i] = 0;
 80011ca:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80011cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80011ce:	4413      	add	r3, r2
 80011d0:	2200      	movs	r2, #0
 80011d2:	701a      	strb	r2, [r3, #0]
 80011d4:	e7ac      	b.n	8001130 <Scan_USB+0x38>
            }
            else
            {   /* It is a file. */
           	   char *buf = malloc(30*sizeof(char));
 80011d6:	201e      	movs	r0, #30
 80011d8:	f00e fb18 	bl	800f80c <malloc>
 80011dc:	4603      	mov	r3, r0
 80011de:	663b      	str	r3, [r7, #96]	; 0x60
               sprintf(buf,"File: %s/%s\n", path, USBHfno.fname);
 80011e0:	4b12      	ldr	r3, [pc, #72]	; (800122c <Scan_USB+0x134>)
 80011e2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80011e4:	4916      	ldr	r1, [pc, #88]	; (8001240 <Scan_USB+0x148>)
 80011e6:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80011e8:	f00f faa6 	bl	8010738 <siprintf>
               Send_Uart(buf);
 80011ec:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80011ee:	f7ff ff2b 	bl	8001048 <Send_Uart>
               free(buf);
 80011f2:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80011f4:	f00e fb12 	bl	800f81c <free>
 80011f8:	e79a      	b.n	8001130 <Scan_USB+0x38>
            	if (!(strcmp ("SYSTEM~1", USBHfno.fname))) continue;
 80011fa:	bf00      	nop
 80011fc:	e798      	b.n	8001130 <Scan_USB+0x38>
            	if (!(strcmp("System Volume Information", USBHfno.fname))) continue;
 80011fe:	bf00      	nop
            fresult = f_readdir(&dir, &USBHfno);                   /* Read a directory item */
 8001200:	e796      	b.n	8001130 <Scan_USB+0x38>
                if (fresult != FR_OK) break;
 8001202:	bf00      	nop
            }
        }
        f_closedir(&dir);
 8001204:	f107 0308 	add.w	r3, r7, #8
 8001208:	4618      	mov	r0, r3
 800120a:	f00d fb18 	bl	800e83e <f_closedir>
    }
    free(path);
 800120e:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8001210:	f00e fb04 	bl	800f81c <free>
    return fresult;
 8001214:	4b03      	ldr	r3, [pc, #12]	; (8001224 <Scan_USB+0x12c>)
 8001216:	781b      	ldrb	r3, [r3, #0]
}
 8001218:	4618      	mov	r0, r3
 800121a:	3768      	adds	r7, #104	; 0x68
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	080141a4 	.word	0x080141a4
 8001224:	20000340 	.word	0x20000340
 8001228:	20000220 	.word	0x20000220
 800122c:	2000023a 	.word	0x2000023a
 8001230:	080141a8 	.word	0x080141a8
 8001234:	080141b4 	.word	0x080141b4
 8001238:	080141d0 	.word	0x080141d0
 800123c:	080141dc 	.word	0x080141dc
 8001240:	080141e0 	.word	0x080141e0

08001244 <Write_File>:




FRESULT Write_File (char *name, char *data)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b088      	sub	sp, #32
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	6039      	str	r1, [r7, #0]

	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &USBHfno);
 800124e:	4955      	ldr	r1, [pc, #340]	; (80013a4 <Write_File+0x160>)
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	f00d fb57 	bl	800e904 <f_stat>
 8001256:	4603      	mov	r3, r0
 8001258:	461a      	mov	r2, r3
 800125a:	4b53      	ldr	r3, [pc, #332]	; (80013a8 <Write_File+0x164>)
 800125c:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 800125e:	4b52      	ldr	r3, [pc, #328]	; (80013a8 <Write_File+0x164>)
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d012      	beq.n	800128c <Write_File+0x48>
	{
		char *buf = malloc(100*sizeof(char));
 8001266:	2064      	movs	r0, #100	; 0x64
 8001268:	f00e fad0 	bl	800f80c <malloc>
 800126c:	4603      	mov	r3, r0
 800126e:	60bb      	str	r3, [r7, #8]
		sprintf (buf, "ERROR!!! *%s* does not exists\n\n", name);
 8001270:	687a      	ldr	r2, [r7, #4]
 8001272:	494e      	ldr	r1, [pc, #312]	; (80013ac <Write_File+0x168>)
 8001274:	68b8      	ldr	r0, [r7, #8]
 8001276:	f00f fa5f 	bl	8010738 <siprintf>
		Send_Uart (buf);
 800127a:	68b8      	ldr	r0, [r7, #8]
 800127c:	f7ff fee4 	bl	8001048 <Send_Uart>
	    free(buf);
 8001280:	68b8      	ldr	r0, [r7, #8]
 8001282:	f00e facb 	bl	800f81c <free>
	    return fresult;
 8001286:	4b48      	ldr	r3, [pc, #288]	; (80013a8 <Write_File+0x164>)
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	e087      	b.n	800139c <Write_File+0x158>
	}

	else
	{
	    /* Create a file with read write access and open it */
	    fresult = f_open(&USBHFile, name, FA_OPEN_EXISTING | FA_WRITE);
 800128c:	2202      	movs	r2, #2
 800128e:	6879      	ldr	r1, [r7, #4]
 8001290:	4847      	ldr	r0, [pc, #284]	; (80013b0 <Write_File+0x16c>)
 8001292:	f00c fc39 	bl	800db08 <f_open>
 8001296:	4603      	mov	r3, r0
 8001298:	461a      	mov	r2, r3
 800129a:	4b43      	ldr	r3, [pc, #268]	; (80013a8 <Write_File+0x164>)
 800129c:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 800129e:	4b42      	ldr	r3, [pc, #264]	; (80013a8 <Write_File+0x164>)
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d015      	beq.n	80012d2 <Write_File+0x8e>
	    {
	    	char *buf = malloc(100*sizeof(char));
 80012a6:	2064      	movs	r0, #100	; 0x64
 80012a8:	f00e fab0 	bl	800f80c <malloc>
 80012ac:	4603      	mov	r3, r0
 80012ae:	60fb      	str	r3, [r7, #12]
	    	sprintf (buf, "ERROR!!! No. %d in opening file *%s*\n\n", fresult, name);
 80012b0:	4b3d      	ldr	r3, [pc, #244]	; (80013a8 <Write_File+0x164>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	461a      	mov	r2, r3
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	493e      	ldr	r1, [pc, #248]	; (80013b4 <Write_File+0x170>)
 80012ba:	68f8      	ldr	r0, [r7, #12]
 80012bc:	f00f fa3c 	bl	8010738 <siprintf>
	    	Send_Uart(buf);
 80012c0:	68f8      	ldr	r0, [r7, #12]
 80012c2:	f7ff fec1 	bl	8001048 <Send_Uart>
	        free(buf);
 80012c6:	68f8      	ldr	r0, [r7, #12]
 80012c8:	f00e faa8 	bl	800f81c <free>
	        return fresult;
 80012cc:	4b36      	ldr	r3, [pc, #216]	; (80013a8 <Write_File+0x164>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	e064      	b.n	800139c <Write_File+0x158>
	    }

	    else
	    {
	    	char *buf = malloc(100*sizeof(char));
 80012d2:	2064      	movs	r0, #100	; 0x64
 80012d4:	f00e fa9a 	bl	800f80c <malloc>
 80012d8:	4603      	mov	r3, r0
 80012da:	61fb      	str	r3, [r7, #28]
	    	sprintf (buf, "Opening file-->  *%s*  To WRITE data in it\n", name);
 80012dc:	687a      	ldr	r2, [r7, #4]
 80012de:	4936      	ldr	r1, [pc, #216]	; (80013b8 <Write_File+0x174>)
 80012e0:	69f8      	ldr	r0, [r7, #28]
 80012e2:	f00f fa29 	bl	8010738 <siprintf>
	    	Send_Uart(buf);
 80012e6:	69f8      	ldr	r0, [r7, #28]
 80012e8:	f7ff feae 	bl	8001048 <Send_Uart>
	        free(buf);
 80012ec:	69f8      	ldr	r0, [r7, #28]
 80012ee:	f00e fa95 	bl	800f81c <free>

	    	fresult = f_write(&USBHFile, data, strlen(data), &bw);
 80012f2:	6838      	ldr	r0, [r7, #0]
 80012f4:	f7fe ff8e 	bl	8000214 <strlen>
 80012f8:	4602      	mov	r2, r0
 80012fa:	4b30      	ldr	r3, [pc, #192]	; (80013bc <Write_File+0x178>)
 80012fc:	6839      	ldr	r1, [r7, #0]
 80012fe:	482c      	ldr	r0, [pc, #176]	; (80013b0 <Write_File+0x16c>)
 8001300:	f00c fed5 	bl	800e0ae <f_write>
 8001304:	4603      	mov	r3, r0
 8001306:	461a      	mov	r2, r3
 8001308:	4b27      	ldr	r3, [pc, #156]	; (80013a8 <Write_File+0x164>)
 800130a:	701a      	strb	r2, [r3, #0]
	    	if (fresult != FR_OK)
 800130c:	4b26      	ldr	r3, [pc, #152]	; (80013a8 <Write_File+0x164>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d012      	beq.n	800133a <Write_File+0xf6>
	    	{
	    		char *buf = malloc(100*sizeof(char));
 8001314:	2064      	movs	r0, #100	; 0x64
 8001316:	f00e fa79 	bl	800f80c <malloc>
 800131a:	4603      	mov	r3, r0
 800131c:	61bb      	str	r3, [r7, #24]
	    		sprintf (buf, "ERROR!!! No. %d while writing to the FILE *%s*\n\n", fresult, name);
 800131e:	4b22      	ldr	r3, [pc, #136]	; (80013a8 <Write_File+0x164>)
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	461a      	mov	r2, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	4926      	ldr	r1, [pc, #152]	; (80013c0 <Write_File+0x17c>)
 8001328:	69b8      	ldr	r0, [r7, #24]
 800132a:	f00f fa05 	bl	8010738 <siprintf>
	    		Send_Uart(buf);
 800132e:	69b8      	ldr	r0, [r7, #24]
 8001330:	f7ff fe8a 	bl	8001048 <Send_Uart>
	    		free(buf);
 8001334:	69b8      	ldr	r0, [r7, #24]
 8001336:	f00e fa71 	bl	800f81c <free>
	    	}

	    	/* Close file */
	    	fresult = f_close(&USBHFile);
 800133a:	481d      	ldr	r0, [pc, #116]	; (80013b0 <Write_File+0x16c>)
 800133c:	f00d f9ac 	bl	800e698 <f_close>
 8001340:	4603      	mov	r3, r0
 8001342:	461a      	mov	r2, r3
 8001344:	4b18      	ldr	r3, [pc, #96]	; (80013a8 <Write_File+0x164>)
 8001346:	701a      	strb	r2, [r3, #0]
	    	if (fresult != FR_OK)
 8001348:	4b17      	ldr	r3, [pc, #92]	; (80013a8 <Write_File+0x164>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d013      	beq.n	8001378 <Write_File+0x134>
	    	{
	    		char *buf = malloc(100*sizeof(char));
 8001350:	2064      	movs	r0, #100	; 0x64
 8001352:	f00e fa5b 	bl	800f80c <malloc>
 8001356:	4603      	mov	r3, r0
 8001358:	613b      	str	r3, [r7, #16]
	    		sprintf (buf, "ERROR!!! No. %d in closing file *%s* after writing it\n\n", fresult, name);
 800135a:	4b13      	ldr	r3, [pc, #76]	; (80013a8 <Write_File+0x164>)
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	461a      	mov	r2, r3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	4918      	ldr	r1, [pc, #96]	; (80013c4 <Write_File+0x180>)
 8001364:	6938      	ldr	r0, [r7, #16]
 8001366:	f00f f9e7 	bl	8010738 <siprintf>
	    		Send_Uart(buf);
 800136a:	6938      	ldr	r0, [r7, #16]
 800136c:	f7ff fe6c 	bl	8001048 <Send_Uart>
	    		free(buf);
 8001370:	6938      	ldr	r0, [r7, #16]
 8001372:	f00e fa53 	bl	800f81c <free>
 8001376:	e00f      	b.n	8001398 <Write_File+0x154>
	    	}
	    	else
	    	{
	    		char *buf = malloc(100*sizeof(char));
 8001378:	2064      	movs	r0, #100	; 0x64
 800137a:	f00e fa47 	bl	800f80c <malloc>
 800137e:	4603      	mov	r3, r0
 8001380:	617b      	str	r3, [r7, #20]
	    		sprintf (buf, "File *%s* is WRITTEN and CLOSED successfully\n\n", name);
 8001382:	687a      	ldr	r2, [r7, #4]
 8001384:	4910      	ldr	r1, [pc, #64]	; (80013c8 <Write_File+0x184>)
 8001386:	6978      	ldr	r0, [r7, #20]
 8001388:	f00f f9d6 	bl	8010738 <siprintf>
	    		Send_Uart(buf);
 800138c:	6978      	ldr	r0, [r7, #20]
 800138e:	f7ff fe5b 	bl	8001048 <Send_Uart>
	    		free(buf);
 8001392:	6978      	ldr	r0, [r7, #20]
 8001394:	f00e fa42 	bl	800f81c <free>
	    	}
	    }
	    return fresult;
 8001398:	4b03      	ldr	r3, [pc, #12]	; (80013a8 <Write_File+0x164>)
 800139a:	781b      	ldrb	r3, [r3, #0]
	}
}
 800139c:	4618      	mov	r0, r3
 800139e:	3720      	adds	r7, #32
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	20000220 	.word	0x20000220
 80013a8:	20000340 	.word	0x20000340
 80013ac:	080141f4 	.word	0x080141f4
 80013b0:	20001438 	.word	0x20001438
 80013b4:	08014214 	.word	0x08014214
 80013b8:	0801423c 	.word	0x0801423c
 80013bc:	20000344 	.word	0x20000344
 80013c0:	08014268 	.word	0x08014268
 80013c4:	0801429c 	.word	0x0801429c
 80013c8:	080142d4 	.word	0x080142d4

080013cc <Create_File>:
	    return fresult;
	}
}

FRESULT Create_File (char *name)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b088      	sub	sp, #32
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
	fresult = f_stat (name, &USBHfno);
 80013d4:	4943      	ldr	r1, [pc, #268]	; (80014e4 <Create_File+0x118>)
 80013d6:	6878      	ldr	r0, [r7, #4]
 80013d8:	f00d fa94 	bl	800e904 <f_stat>
 80013dc:	4603      	mov	r3, r0
 80013de:	461a      	mov	r2, r3
 80013e0:	4b41      	ldr	r3, [pc, #260]	; (80014e8 <Create_File+0x11c>)
 80013e2:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 80013e4:	4b40      	ldr	r3, [pc, #256]	; (80014e8 <Create_File+0x11c>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d112      	bne.n	8001412 <Create_File+0x46>
	{
		char *buf = malloc(100*sizeof(char));
 80013ec:	2064      	movs	r0, #100	; 0x64
 80013ee:	f00e fa0d 	bl	800f80c <malloc>
 80013f2:	4603      	mov	r3, r0
 80013f4:	60fb      	str	r3, [r7, #12]
		sprintf (buf, "ERROR!!! *%s* already exists!!!!\n use Update_File \n\n",name);
 80013f6:	687a      	ldr	r2, [r7, #4]
 80013f8:	493c      	ldr	r1, [pc, #240]	; (80014ec <Create_File+0x120>)
 80013fa:	68f8      	ldr	r0, [r7, #12]
 80013fc:	f00f f99c 	bl	8010738 <siprintf>
		Send_Uart(buf);
 8001400:	68f8      	ldr	r0, [r7, #12]
 8001402:	f7ff fe21 	bl	8001048 <Send_Uart>
		free(buf);
 8001406:	68f8      	ldr	r0, [r7, #12]
 8001408:	f00e fa08 	bl	800f81c <free>
	    return fresult;
 800140c:	4b36      	ldr	r3, [pc, #216]	; (80014e8 <Create_File+0x11c>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	e063      	b.n	80014da <Create_File+0x10e>
	}
	else
	{
		fresult = f_open(&USBHFile, name, FA_CREATE_ALWAYS|FA_READ|FA_WRITE);
 8001412:	220b      	movs	r2, #11
 8001414:	6879      	ldr	r1, [r7, #4]
 8001416:	4836      	ldr	r0, [pc, #216]	; (80014f0 <Create_File+0x124>)
 8001418:	f00c fb76 	bl	800db08 <f_open>
 800141c:	4603      	mov	r3, r0
 800141e:	461a      	mov	r2, r3
 8001420:	4b31      	ldr	r3, [pc, #196]	; (80014e8 <Create_File+0x11c>)
 8001422:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8001424:	4b30      	ldr	r3, [pc, #192]	; (80014e8 <Create_File+0x11c>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d015      	beq.n	8001458 <Create_File+0x8c>
		{
			char *buf = malloc(100*sizeof(char));
 800142c:	2064      	movs	r0, #100	; 0x64
 800142e:	f00e f9ed 	bl	800f80c <malloc>
 8001432:	4603      	mov	r3, r0
 8001434:	613b      	str	r3, [r7, #16]
			sprintf (buf, "ERROR!!! No. %d in creating file *%s*\n\n", fresult, name);
 8001436:	4b2c      	ldr	r3, [pc, #176]	; (80014e8 <Create_File+0x11c>)
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	461a      	mov	r2, r3
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	492d      	ldr	r1, [pc, #180]	; (80014f4 <Create_File+0x128>)
 8001440:	6938      	ldr	r0, [r7, #16]
 8001442:	f00f f979 	bl	8010738 <siprintf>
			Send_Uart(buf);
 8001446:	6938      	ldr	r0, [r7, #16]
 8001448:	f7ff fdfe 	bl	8001048 <Send_Uart>
			free(buf);
 800144c:	6938      	ldr	r0, [r7, #16]
 800144e:	f00e f9e5 	bl	800f81c <free>
		    return fresult;
 8001452:	4b25      	ldr	r3, [pc, #148]	; (80014e8 <Create_File+0x11c>)
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	e040      	b.n	80014da <Create_File+0x10e>
		}
		else
		{
			char *buf = malloc(100*sizeof(char));
 8001458:	2064      	movs	r0, #100	; 0x64
 800145a:	f00e f9d7 	bl	800f80c <malloc>
 800145e:	4603      	mov	r3, r0
 8001460:	61fb      	str	r3, [r7, #28]
			sprintf (buf, "*%s* created successfully\n Now use Write_File to write data\n",name);
 8001462:	687a      	ldr	r2, [r7, #4]
 8001464:	4924      	ldr	r1, [pc, #144]	; (80014f8 <Create_File+0x12c>)
 8001466:	69f8      	ldr	r0, [r7, #28]
 8001468:	f00f f966 	bl	8010738 <siprintf>
			Send_Uart(buf);
 800146c:	69f8      	ldr	r0, [r7, #28]
 800146e:	f7ff fdeb 	bl	8001048 <Send_Uart>
			free(buf);
 8001472:	69f8      	ldr	r0, [r7, #28]
 8001474:	f00e f9d2 	bl	800f81c <free>
		}

		fresult = f_close(&USBHFile);
 8001478:	481d      	ldr	r0, [pc, #116]	; (80014f0 <Create_File+0x124>)
 800147a:	f00d f90d 	bl	800e698 <f_close>
 800147e:	4603      	mov	r3, r0
 8001480:	461a      	mov	r2, r3
 8001482:	4b19      	ldr	r3, [pc, #100]	; (80014e8 <Create_File+0x11c>)
 8001484:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8001486:	4b18      	ldr	r3, [pc, #96]	; (80014e8 <Create_File+0x11c>)
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d013      	beq.n	80014b6 <Create_File+0xea>
		{
			char *buf = malloc(100*sizeof(char));
 800148e:	2064      	movs	r0, #100	; 0x64
 8001490:	f00e f9bc 	bl	800f80c <malloc>
 8001494:	4603      	mov	r3, r0
 8001496:	617b      	str	r3, [r7, #20]
			sprintf (buf, "ERROR No. %d in closing file *%s*\n\n", fresult, name);
 8001498:	4b13      	ldr	r3, [pc, #76]	; (80014e8 <Create_File+0x11c>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	461a      	mov	r2, r3
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4916      	ldr	r1, [pc, #88]	; (80014fc <Create_File+0x130>)
 80014a2:	6978      	ldr	r0, [r7, #20]
 80014a4:	f00f f948 	bl	8010738 <siprintf>
			Send_Uart(buf);
 80014a8:	6978      	ldr	r0, [r7, #20]
 80014aa:	f7ff fdcd 	bl	8001048 <Send_Uart>
			free(buf);
 80014ae:	6978      	ldr	r0, [r7, #20]
 80014b0:	f00e f9b4 	bl	800f81c <free>
 80014b4:	e00f      	b.n	80014d6 <Create_File+0x10a>
		}
		else
		{
			char *buf = malloc(100*sizeof(char));
 80014b6:	2064      	movs	r0, #100	; 0x64
 80014b8:	f00e f9a8 	bl	800f80c <malloc>
 80014bc:	4603      	mov	r3, r0
 80014be:	61bb      	str	r3, [r7, #24]
			sprintf (buf, "File *%s* CLOSED successfully\n\n", name);
 80014c0:	687a      	ldr	r2, [r7, #4]
 80014c2:	490f      	ldr	r1, [pc, #60]	; (8001500 <Create_File+0x134>)
 80014c4:	69b8      	ldr	r0, [r7, #24]
 80014c6:	f00f f937 	bl	8010738 <siprintf>
			Send_Uart(buf);
 80014ca:	69b8      	ldr	r0, [r7, #24]
 80014cc:	f7ff fdbc 	bl	8001048 <Send_Uart>
			free(buf);
 80014d0:	69b8      	ldr	r0, [r7, #24]
 80014d2:	f00e f9a3 	bl	800f81c <free>
		}
	}
    return fresult;
 80014d6:	4b04      	ldr	r3, [pc, #16]	; (80014e8 <Create_File+0x11c>)
 80014d8:	781b      	ldrb	r3, [r3, #0]
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3720      	adds	r7, #32
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	20000220 	.word	0x20000220
 80014e8:	20000340 	.word	0x20000340
 80014ec:	080143c8 	.word	0x080143c8
 80014f0:	20001438 	.word	0x20001438
 80014f4:	08014400 	.word	0x08014400
 80014f8:	08014428 	.word	0x08014428
 80014fc:	08014468 	.word	0x08014468
 8001500:	080143a8 	.word	0x080143a8

08001504 <Update_File>:

FRESULT Update_File (char *name, char *data)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b08a      	sub	sp, #40	; 0x28
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	6039      	str	r1, [r7, #0]
	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &USBHfno);
 800150e:	495e      	ldr	r1, [pc, #376]	; (8001688 <Update_File+0x184>)
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f00d f9f7 	bl	800e904 <f_stat>
 8001516:	4603      	mov	r3, r0
 8001518:	461a      	mov	r2, r3
 800151a:	4b5c      	ldr	r3, [pc, #368]	; (800168c <Update_File+0x188>)
 800151c:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 800151e:	4b5b      	ldr	r3, [pc, #364]	; (800168c <Update_File+0x188>)
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d012      	beq.n	800154c <Update_File+0x48>
	{
		char *buf = malloc(100*sizeof(char));
 8001526:	2064      	movs	r0, #100	; 0x64
 8001528:	f00e f970 	bl	800f80c <malloc>
 800152c:	4603      	mov	r3, r0
 800152e:	60fb      	str	r3, [r7, #12]
		sprintf (buf, "ERROR!!! *%s* does not exists\n\n", name);
 8001530:	687a      	ldr	r2, [r7, #4]
 8001532:	4957      	ldr	r1, [pc, #348]	; (8001690 <Update_File+0x18c>)
 8001534:	68f8      	ldr	r0, [r7, #12]
 8001536:	f00f f8ff 	bl	8010738 <siprintf>
		Send_Uart (buf);
 800153a:	68f8      	ldr	r0, [r7, #12]
 800153c:	f7ff fd84 	bl	8001048 <Send_Uart>
		free(buf);
 8001540:	68f8      	ldr	r0, [r7, #12]
 8001542:	f00e f96b 	bl	800f81c <free>
	    return fresult;
 8001546:	4b51      	ldr	r3, [pc, #324]	; (800168c <Update_File+0x188>)
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	e098      	b.n	800167e <Update_File+0x17a>
	}

	else
	{
		 /* Create a file with read write access and open it */
	    fresult = f_open(&USBHFile, name, FA_OPEN_APPEND | FA_WRITE);
 800154c:	2232      	movs	r2, #50	; 0x32
 800154e:	6879      	ldr	r1, [r7, #4]
 8001550:	4850      	ldr	r0, [pc, #320]	; (8001694 <Update_File+0x190>)
 8001552:	f00c fad9 	bl	800db08 <f_open>
 8001556:	4603      	mov	r3, r0
 8001558:	461a      	mov	r2, r3
 800155a:	4b4c      	ldr	r3, [pc, #304]	; (800168c <Update_File+0x188>)
 800155c:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 800155e:	4b4b      	ldr	r3, [pc, #300]	; (800168c <Update_File+0x188>)
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d015      	beq.n	8001592 <Update_File+0x8e>
	    {
	    	char *buf = malloc(100*sizeof(char));
 8001566:	2064      	movs	r0, #100	; 0x64
 8001568:	f00e f950 	bl	800f80c <malloc>
 800156c:	4603      	mov	r3, r0
 800156e:	613b      	str	r3, [r7, #16]
	    	sprintf (buf, "ERROR!!! No. %d in opening file *%s*\n\n", fresult, name);
 8001570:	4b46      	ldr	r3, [pc, #280]	; (800168c <Update_File+0x188>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	461a      	mov	r2, r3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4947      	ldr	r1, [pc, #284]	; (8001698 <Update_File+0x194>)
 800157a:	6938      	ldr	r0, [r7, #16]
 800157c:	f00f f8dc 	bl	8010738 <siprintf>
	    	Send_Uart(buf);
 8001580:	6938      	ldr	r0, [r7, #16]
 8001582:	f7ff fd61 	bl	8001048 <Send_Uart>
	        free(buf);
 8001586:	6938      	ldr	r0, [r7, #16]
 8001588:	f00e f948 	bl	800f81c <free>
	        return fresult;
 800158c:	4b3f      	ldr	r3, [pc, #252]	; (800168c <Update_File+0x188>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	e075      	b.n	800167e <Update_File+0x17a>
	    }

    	char *buf = malloc(100*sizeof(char));
 8001592:	2064      	movs	r0, #100	; 0x64
 8001594:	f00e f93a 	bl	800f80c <malloc>
 8001598:	4603      	mov	r3, r0
 800159a:	627b      	str	r3, [r7, #36]	; 0x24
    	sprintf (buf, "Opening file-->  *%s*  To UPDATE data in it\n", name);
 800159c:	687a      	ldr	r2, [r7, #4]
 800159e:	493f      	ldr	r1, [pc, #252]	; (800169c <Update_File+0x198>)
 80015a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80015a2:	f00f f8c9 	bl	8010738 <siprintf>
    	Send_Uart(buf);
 80015a6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80015a8:	f7ff fd4e 	bl	8001048 <Send_Uart>
        free(buf);
 80015ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80015ae:	f00e f935 	bl	800f81c <free>

	    /* Writing text */
	    fresult = f_write(&USBHFile, data, strlen (data), &bw);
 80015b2:	6838      	ldr	r0, [r7, #0]
 80015b4:	f7fe fe2e 	bl	8000214 <strlen>
 80015b8:	4602      	mov	r2, r0
 80015ba:	4b39      	ldr	r3, [pc, #228]	; (80016a0 <Update_File+0x19c>)
 80015bc:	6839      	ldr	r1, [r7, #0]
 80015be:	4835      	ldr	r0, [pc, #212]	; (8001694 <Update_File+0x190>)
 80015c0:	f00c fd75 	bl	800e0ae <f_write>
 80015c4:	4603      	mov	r3, r0
 80015c6:	461a      	mov	r2, r3
 80015c8:	4b30      	ldr	r3, [pc, #192]	; (800168c <Update_File+0x188>)
 80015ca:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 80015cc:	4b2f      	ldr	r3, [pc, #188]	; (800168c <Update_File+0x188>)
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d013      	beq.n	80015fc <Update_File+0xf8>
	    {
	    	char *buf = malloc(100*sizeof(char));
 80015d4:	2064      	movs	r0, #100	; 0x64
 80015d6:	f00e f919 	bl	800f80c <malloc>
 80015da:	4603      	mov	r3, r0
 80015dc:	61fb      	str	r3, [r7, #28]
	    	sprintf (buf, "ERROR!!! No. %d in writing file *%s*\n\n", fresult, name);
 80015de:	4b2b      	ldr	r3, [pc, #172]	; (800168c <Update_File+0x188>)
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	461a      	mov	r2, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	492f      	ldr	r1, [pc, #188]	; (80016a4 <Update_File+0x1a0>)
 80015e8:	69f8      	ldr	r0, [r7, #28]
 80015ea:	f00f f8a5 	bl	8010738 <siprintf>
	    	Send_Uart(buf);
 80015ee:	69f8      	ldr	r0, [r7, #28]
 80015f0:	f7ff fd2a 	bl	8001048 <Send_Uart>
	    	free(buf);
 80015f4:	69f8      	ldr	r0, [r7, #28]
 80015f6:	f00e f911 	bl	800f81c <free>
 80015fa:	e00f      	b.n	800161c <Update_File+0x118>
	    }

	    else
	    {
	    	char *buf = malloc(100*sizeof(char));
 80015fc:	2064      	movs	r0, #100	; 0x64
 80015fe:	f00e f905 	bl	800f80c <malloc>
 8001602:	4603      	mov	r3, r0
 8001604:	623b      	str	r3, [r7, #32]
	    	sprintf (buf, "*%s* UPDATED successfully\n", name);
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	4927      	ldr	r1, [pc, #156]	; (80016a8 <Update_File+0x1a4>)
 800160a:	6a38      	ldr	r0, [r7, #32]
 800160c:	f00f f894 	bl	8010738 <siprintf>
	    	Send_Uart(buf);
 8001610:	6a38      	ldr	r0, [r7, #32]
 8001612:	f7ff fd19 	bl	8001048 <Send_Uart>
	    	free(buf);
 8001616:	6a38      	ldr	r0, [r7, #32]
 8001618:	f00e f900 	bl	800f81c <free>
	    }

	    /* Close file */
	    fresult = f_close(&USBHFile);
 800161c:	481d      	ldr	r0, [pc, #116]	; (8001694 <Update_File+0x190>)
 800161e:	f00d f83b 	bl	800e698 <f_close>
 8001622:	4603      	mov	r3, r0
 8001624:	461a      	mov	r2, r3
 8001626:	4b19      	ldr	r3, [pc, #100]	; (800168c <Update_File+0x188>)
 8001628:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 800162a:	4b18      	ldr	r3, [pc, #96]	; (800168c <Update_File+0x188>)
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d013      	beq.n	800165a <Update_File+0x156>
	    {
	    	char *buf = malloc(100*sizeof(char));
 8001632:	2064      	movs	r0, #100	; 0x64
 8001634:	f00e f8ea 	bl	800f80c <malloc>
 8001638:	4603      	mov	r3, r0
 800163a:	617b      	str	r3, [r7, #20]
	    	sprintf (buf, "ERROR!!! No. %d in closing file *%s*\n\n", fresult, name);
 800163c:	4b13      	ldr	r3, [pc, #76]	; (800168c <Update_File+0x188>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	461a      	mov	r2, r3
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4919      	ldr	r1, [pc, #100]	; (80016ac <Update_File+0x1a8>)
 8001646:	6978      	ldr	r0, [r7, #20]
 8001648:	f00f f876 	bl	8010738 <siprintf>
	    	Send_Uart(buf);
 800164c:	6978      	ldr	r0, [r7, #20]
 800164e:	f7ff fcfb 	bl	8001048 <Send_Uart>
	    	free(buf);
 8001652:	6978      	ldr	r0, [r7, #20]
 8001654:	f00e f8e2 	bl	800f81c <free>
 8001658:	e00f      	b.n	800167a <Update_File+0x176>
	    }
	    else
	    {
	    	char *buf = malloc(100*sizeof(char));
 800165a:	2064      	movs	r0, #100	; 0x64
 800165c:	f00e f8d6 	bl	800f80c <malloc>
 8001660:	4603      	mov	r3, r0
 8001662:	61bb      	str	r3, [r7, #24]
	    	sprintf (buf, "File *%s* CLOSED successfully\n\n", name);
 8001664:	687a      	ldr	r2, [r7, #4]
 8001666:	4912      	ldr	r1, [pc, #72]	; (80016b0 <Update_File+0x1ac>)
 8001668:	69b8      	ldr	r0, [r7, #24]
 800166a:	f00f f865 	bl	8010738 <siprintf>
	    	Send_Uart(buf);
 800166e:	69b8      	ldr	r0, [r7, #24]
 8001670:	f7ff fcea 	bl	8001048 <Send_Uart>
	    	free(buf);
 8001674:	69b8      	ldr	r0, [r7, #24]
 8001676:	f00e f8d1 	bl	800f81c <free>
	     }
	}
    return fresult;
 800167a:	4b04      	ldr	r3, [pc, #16]	; (800168c <Update_File+0x188>)
 800167c:	781b      	ldrb	r3, [r3, #0]
}
 800167e:	4618      	mov	r0, r3
 8001680:	3728      	adds	r7, #40	; 0x28
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	20000220 	.word	0x20000220
 800168c:	20000340 	.word	0x20000340
 8001690:	080141f4 	.word	0x080141f4
 8001694:	20001438 	.word	0x20001438
 8001698:	08014214 	.word	0x08014214
 800169c:	0801448c 	.word	0x0801448c
 80016a0:	20000344 	.word	0x20000344
 80016a4:	080144bc 	.word	0x080144bc
 80016a8:	080144e4 	.word	0x080144e4
 80016ac:	08014380 	.word	0x08014380
 80016b0:	080143a8 	.word	0x080143a8

080016b4 <Create_Dir>:
	}
	return fresult;
}

FRESULT Create_Dir (char *name)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b084      	sub	sp, #16
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
    fresult = f_mkdir(name);
 80016bc:	6878      	ldr	r0, [r7, #4]
 80016be:	f00d fa61 	bl	800eb84 <f_mkdir>
 80016c2:	4603      	mov	r3, r0
 80016c4:	461a      	mov	r2, r3
 80016c6:	4b18      	ldr	r3, [pc, #96]	; (8001728 <Create_Dir+0x74>)
 80016c8:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 80016ca:	4b17      	ldr	r3, [pc, #92]	; (8001728 <Create_Dir+0x74>)
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d110      	bne.n	80016f4 <Create_Dir+0x40>
    {
    	char *buf = malloc(100*sizeof(char));
 80016d2:	2064      	movs	r0, #100	; 0x64
 80016d4:	f00e f89a 	bl	800f80c <malloc>
 80016d8:	4603      	mov	r3, r0
 80016da:	60bb      	str	r3, [r7, #8]
    	sprintf (buf, "*%s* has been created successfully\n\n", name);
 80016dc:	687a      	ldr	r2, [r7, #4]
 80016de:	4913      	ldr	r1, [pc, #76]	; (800172c <Create_Dir+0x78>)
 80016e0:	68b8      	ldr	r0, [r7, #8]
 80016e2:	f00f f829 	bl	8010738 <siprintf>
    	Send_Uart (buf);
 80016e6:	68b8      	ldr	r0, [r7, #8]
 80016e8:	f7ff fcae 	bl	8001048 <Send_Uart>
    	free(buf);
 80016ec:	68b8      	ldr	r0, [r7, #8]
 80016ee:	f00e f895 	bl	800f81c <free>
 80016f2:	e012      	b.n	800171a <Create_Dir+0x66>
    }
    else
    {
    	char *buf = malloc(100*sizeof(char));
 80016f4:	2064      	movs	r0, #100	; 0x64
 80016f6:	f00e f889 	bl	800f80c <malloc>
 80016fa:	4603      	mov	r3, r0
 80016fc:	60fb      	str	r3, [r7, #12]
    	sprintf (buf, "ERROR No. %d in creating directory *%s*\n\n", fresult,name);
 80016fe:	4b0a      	ldr	r3, [pc, #40]	; (8001728 <Create_Dir+0x74>)
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	461a      	mov	r2, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	490a      	ldr	r1, [pc, #40]	; (8001730 <Create_Dir+0x7c>)
 8001708:	68f8      	ldr	r0, [r7, #12]
 800170a:	f00f f815 	bl	8010738 <siprintf>
    	Send_Uart(buf);
 800170e:	68f8      	ldr	r0, [r7, #12]
 8001710:	f7ff fc9a 	bl	8001048 <Send_Uart>
    	free(buf);
 8001714:	68f8      	ldr	r0, [r7, #12]
 8001716:	f00e f881 	bl	800f81c <free>
    }
    return fresult;
 800171a:	4b03      	ldr	r3, [pc, #12]	; (8001728 <Create_Dir+0x74>)
 800171c:	781b      	ldrb	r3, [r3, #0]
}
 800171e:	4618      	mov	r0, r3
 8001720:	3710      	adds	r7, #16
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	20000340 	.word	0x20000340
 800172c:	08014548 	.word	0x08014548
 8001730:	08014570 	.word	0x08014570

08001734 <Check_USB_Details>:

void Check_USB_Details (void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
    /* Check free space */
    f_getfree("", &fre_clust, &pUSBHFatFS);
 800173a:	4a30      	ldr	r2, [pc, #192]	; (80017fc <Check_USB_Details+0xc8>)
 800173c:	4930      	ldr	r1, [pc, #192]	; (8001800 <Check_USB_Details+0xcc>)
 800173e:	4831      	ldr	r0, [pc, #196]	; (8001804 <Check_USB_Details+0xd0>)
 8001740:	f00d f919 	bl	800e976 <f_getfree>

    total = (uint32_t)((pUSBHFatFS->n_fatent - 2) * pUSBHFatFS->csize * 0.5);
 8001744:	4b2d      	ldr	r3, [pc, #180]	; (80017fc <Check_USB_Details+0xc8>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	6a1b      	ldr	r3, [r3, #32]
 800174a:	3b02      	subs	r3, #2
 800174c:	4a2b      	ldr	r2, [pc, #172]	; (80017fc <Check_USB_Details+0xc8>)
 800174e:	6812      	ldr	r2, [r2, #0]
 8001750:	8952      	ldrh	r2, [r2, #10]
 8001752:	fb02 f303 	mul.w	r3, r2, r3
 8001756:	4618      	mov	r0, r3
 8001758:	f7fe fefc 	bl	8000554 <__aeabi_ui2d>
 800175c:	f04f 0200 	mov.w	r2, #0
 8001760:	4b29      	ldr	r3, [pc, #164]	; (8001808 <Check_USB_Details+0xd4>)
 8001762:	f7fe ff71 	bl	8000648 <__aeabi_dmul>
 8001766:	4602      	mov	r2, r0
 8001768:	460b      	mov	r3, r1
 800176a:	4610      	mov	r0, r2
 800176c:	4619      	mov	r1, r3
 800176e:	f7ff fa43 	bl	8000bf8 <__aeabi_d2uiz>
 8001772:	4603      	mov	r3, r0
 8001774:	4a25      	ldr	r2, [pc, #148]	; (800180c <Check_USB_Details+0xd8>)
 8001776:	6013      	str	r3, [r2, #0]
    char *buf = malloc(30*sizeof(char));
 8001778:	201e      	movs	r0, #30
 800177a:	f00e f847 	bl	800f80c <malloc>
 800177e:	4603      	mov	r3, r0
 8001780:	607b      	str	r3, [r7, #4]
    sprintf (buf, "USB  Total Size: \t%lu\n",total);
 8001782:	4b22      	ldr	r3, [pc, #136]	; (800180c <Check_USB_Details+0xd8>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	461a      	mov	r2, r3
 8001788:	4921      	ldr	r1, [pc, #132]	; (8001810 <Check_USB_Details+0xdc>)
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f00e ffd4 	bl	8010738 <siprintf>
    Send_Uart(buf);
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f7ff fc59 	bl	8001048 <Send_Uart>
    free(buf);
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f00e f840 	bl	800f81c <free>
    free_space = (uint32_t)(fre_clust * pUSBHFatFS->csize * 0.5);
 800179c:	4b17      	ldr	r3, [pc, #92]	; (80017fc <Check_USB_Details+0xc8>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	895b      	ldrh	r3, [r3, #10]
 80017a2:	461a      	mov	r2, r3
 80017a4:	4b16      	ldr	r3, [pc, #88]	; (8001800 <Check_USB_Details+0xcc>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	fb02 f303 	mul.w	r3, r2, r3
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7fe fed1 	bl	8000554 <__aeabi_ui2d>
 80017b2:	f04f 0200 	mov.w	r2, #0
 80017b6:	4b14      	ldr	r3, [pc, #80]	; (8001808 <Check_USB_Details+0xd4>)
 80017b8:	f7fe ff46 	bl	8000648 <__aeabi_dmul>
 80017bc:	4602      	mov	r2, r0
 80017be:	460b      	mov	r3, r1
 80017c0:	4610      	mov	r0, r2
 80017c2:	4619      	mov	r1, r3
 80017c4:	f7ff fa18 	bl	8000bf8 <__aeabi_d2uiz>
 80017c8:	4603      	mov	r3, r0
 80017ca:	4a12      	ldr	r2, [pc, #72]	; (8001814 <Check_USB_Details+0xe0>)
 80017cc:	6013      	str	r3, [r2, #0]
    buf = malloc(30*sizeof(char));
 80017ce:	201e      	movs	r0, #30
 80017d0:	f00e f81c 	bl	800f80c <malloc>
 80017d4:	4603      	mov	r3, r0
 80017d6:	607b      	str	r3, [r7, #4]
    sprintf (buf, "USB Free Space: \t%lu\n",free_space);
 80017d8:	4b0e      	ldr	r3, [pc, #56]	; (8001814 <Check_USB_Details+0xe0>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	461a      	mov	r2, r3
 80017de:	490e      	ldr	r1, [pc, #56]	; (8001818 <Check_USB_Details+0xe4>)
 80017e0:	6878      	ldr	r0, [r7, #4]
 80017e2:	f00e ffa9 	bl	8010738 <siprintf>
    Send_Uart(buf);
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	f7ff fc2e 	bl	8001048 <Send_Uart>
    free(buf);
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f00e f815 	bl	800f81c <free>
}
 80017f2:	bf00      	nop
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	20000348 	.word	0x20000348
 8001800:	2000034c 	.word	0x2000034c
 8001804:	0801459c 	.word	0x0801459c
 8001808:	3fe00000 	.word	0x3fe00000
 800180c:	20000350 	.word	0x20000350
 8001810:	080145a0 	.word	0x080145a0
 8001814:	20000354 	.word	0x20000354
 8001818:	080145b8 	.word	0x080145b8

0800181c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001820:	f000 fac3 	bl	8001daa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001824:	f000 f80b 	bl	800183e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001828:	f000 f8a8 	bl	800197c <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 800182c:	f000 f85a 	bl	80018e4 <MX_LPUART1_UART_Init>
  MX_FATFS_Init();
 8001830:	f005 fbd0 	bl	8006fd4 <MX_FATFS_Init>
  MX_USB_HOST_Init();
 8001834:	f00d fc16 	bl	800f064 <MX_USB_HOST_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8001838:	f00d fc3a 	bl	800f0b0 <MX_USB_HOST_Process>
 800183c:	e7fc      	b.n	8001838 <main+0x1c>

0800183e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800183e:	b580      	push	{r7, lr}
 8001840:	b096      	sub	sp, #88	; 0x58
 8001842:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001844:	f107 0314 	add.w	r3, r7, #20
 8001848:	2244      	movs	r2, #68	; 0x44
 800184a:	2100      	movs	r1, #0
 800184c:	4618      	mov	r0, r3
 800184e:	f00d fffb 	bl	800f848 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001852:	463b      	mov	r3, r7
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]
 8001858:	605a      	str	r2, [r3, #4]
 800185a:	609a      	str	r2, [r3, #8]
 800185c:	60da      	str	r2, [r3, #12]
 800185e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8001860:	2000      	movs	r0, #0
 8001862:	f002 f995 	bl	8003b90 <HAL_PWREx_ControlVoltageScaling>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <SystemClock_Config+0x32>
  {
    Error_Handler();
 800186c:	f000 f8de 	bl	8001a2c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8001870:	2322      	movs	r3, #34	; 0x22
 8001872:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001874:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001878:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800187a:	2301      	movs	r3, #1
 800187c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800187e:	2340      	movs	r3, #64	; 0x40
 8001880:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001882:	2302      	movs	r3, #2
 8001884:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001886:	2302      	movs	r3, #2
 8001888:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 800188a:	2302      	movs	r3, #2
 800188c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 800188e:	231e      	movs	r3, #30
 8001890:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001892:	2302      	movs	r3, #2
 8001894:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001896:	2302      	movs	r3, #2
 8001898:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800189a:	2302      	movs	r3, #2
 800189c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800189e:	f107 0314 	add.w	r3, r7, #20
 80018a2:	4618      	mov	r0, r3
 80018a4:	f002 fa38 	bl	8003d18 <HAL_RCC_OscConfig>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80018ae:	f000 f8bd 	bl	8001a2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018b2:	230f      	movs	r3, #15
 80018b4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018b6:	2303      	movs	r3, #3
 80018b8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018ba:	2300      	movs	r3, #0
 80018bc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018c4:	2300      	movs	r3, #0
 80018c6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80018c8:	463b      	mov	r3, r7
 80018ca:	2105      	movs	r1, #5
 80018cc:	4618      	mov	r0, r3
 80018ce:	f002 fe3d 	bl	800454c <HAL_RCC_ClockConfig>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d001      	beq.n	80018dc <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80018d8:	f000 f8a8 	bl	8001a2c <Error_Handler>
  }
}
 80018dc:	bf00      	nop
 80018de:	3758      	adds	r7, #88	; 0x58
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80018e8:	4b22      	ldr	r3, [pc, #136]	; (8001974 <MX_LPUART1_UART_Init+0x90>)
 80018ea:	4a23      	ldr	r2, [pc, #140]	; (8001978 <MX_LPUART1_UART_Init+0x94>)
 80018ec:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80018ee:	4b21      	ldr	r3, [pc, #132]	; (8001974 <MX_LPUART1_UART_Init+0x90>)
 80018f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018f4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018f6:	4b1f      	ldr	r3, [pc, #124]	; (8001974 <MX_LPUART1_UART_Init+0x90>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80018fc:	4b1d      	ldr	r3, [pc, #116]	; (8001974 <MX_LPUART1_UART_Init+0x90>)
 80018fe:	2200      	movs	r2, #0
 8001900:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001902:	4b1c      	ldr	r3, [pc, #112]	; (8001974 <MX_LPUART1_UART_Init+0x90>)
 8001904:	2200      	movs	r2, #0
 8001906:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001908:	4b1a      	ldr	r3, [pc, #104]	; (8001974 <MX_LPUART1_UART_Init+0x90>)
 800190a:	220c      	movs	r2, #12
 800190c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800190e:	4b19      	ldr	r3, [pc, #100]	; (8001974 <MX_LPUART1_UART_Init+0x90>)
 8001910:	2200      	movs	r2, #0
 8001912:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001914:	4b17      	ldr	r3, [pc, #92]	; (8001974 <MX_LPUART1_UART_Init+0x90>)
 8001916:	2200      	movs	r2, #0
 8001918:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800191a:	4b16      	ldr	r3, [pc, #88]	; (8001974 <MX_LPUART1_UART_Init+0x90>)
 800191c:	2200      	movs	r2, #0
 800191e:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001920:	4b14      	ldr	r3, [pc, #80]	; (8001974 <MX_LPUART1_UART_Init+0x90>)
 8001922:	2200      	movs	r2, #0
 8001924:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8001926:	4b13      	ldr	r3, [pc, #76]	; (8001974 <MX_LPUART1_UART_Init+0x90>)
 8001928:	2200      	movs	r2, #0
 800192a:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800192c:	4811      	ldr	r0, [pc, #68]	; (8001974 <MX_LPUART1_UART_Init+0x90>)
 800192e:	f003 fde3 	bl	80054f8 <HAL_UART_Init>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8001938:	f000 f878 	bl	8001a2c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800193c:	2100      	movs	r1, #0
 800193e:	480d      	ldr	r0, [pc, #52]	; (8001974 <MX_LPUART1_UART_Init+0x90>)
 8001940:	f004 fbac 	bl	800609c <HAL_UARTEx_SetTxFifoThreshold>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 800194a:	f000 f86f 	bl	8001a2c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800194e:	2100      	movs	r1, #0
 8001950:	4808      	ldr	r0, [pc, #32]	; (8001974 <MX_LPUART1_UART_Init+0x90>)
 8001952:	f004 fbe1 	bl	8006118 <HAL_UARTEx_SetRxFifoThreshold>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 800195c:	f000 f866 	bl	8001a2c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001960:	4804      	ldr	r0, [pc, #16]	; (8001974 <MX_LPUART1_UART_Init+0x90>)
 8001962:	f004 fb62 	bl	800602a <HAL_UARTEx_DisableFifoMode>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 800196c:	f000 f85e 	bl	8001a2c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001970:	bf00      	nop
 8001972:	bd80      	pop	{r7, pc}
 8001974:	20000358 	.word	0x20000358
 8001978:	40008000 	.word	0x40008000

0800197c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b08a      	sub	sp, #40	; 0x28
 8001980:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001982:	f107 0314 	add.w	r3, r7, #20
 8001986:	2200      	movs	r2, #0
 8001988:	601a      	str	r2, [r3, #0]
 800198a:	605a      	str	r2, [r3, #4]
 800198c:	609a      	str	r2, [r3, #8]
 800198e:	60da      	str	r2, [r3, #12]
 8001990:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001992:	4b24      	ldr	r3, [pc, #144]	; (8001a24 <MX_GPIO_Init+0xa8>)
 8001994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001996:	4a23      	ldr	r2, [pc, #140]	; (8001a24 <MX_GPIO_Init+0xa8>)
 8001998:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800199c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800199e:	4b21      	ldr	r3, [pc, #132]	; (8001a24 <MX_GPIO_Init+0xa8>)
 80019a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019a6:	613b      	str	r3, [r7, #16]
 80019a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019aa:	4b1e      	ldr	r3, [pc, #120]	; (8001a24 <MX_GPIO_Init+0xa8>)
 80019ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ae:	4a1d      	ldr	r2, [pc, #116]	; (8001a24 <MX_GPIO_Init+0xa8>)
 80019b0:	f043 0304 	orr.w	r3, r3, #4
 80019b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019b6:	4b1b      	ldr	r3, [pc, #108]	; (8001a24 <MX_GPIO_Init+0xa8>)
 80019b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ba:	f003 0304 	and.w	r3, r3, #4
 80019be:	60fb      	str	r3, [r7, #12]
 80019c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80019c2:	4b18      	ldr	r3, [pc, #96]	; (8001a24 <MX_GPIO_Init+0xa8>)
 80019c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019c6:	4a17      	ldr	r2, [pc, #92]	; (8001a24 <MX_GPIO_Init+0xa8>)
 80019c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019ce:	4b15      	ldr	r3, [pc, #84]	; (8001a24 <MX_GPIO_Init+0xa8>)
 80019d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019d6:	60bb      	str	r3, [r7, #8]
 80019d8:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 80019da:	f002 f98d 	bl	8003cf8 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019de:	4b11      	ldr	r3, [pc, #68]	; (8001a24 <MX_GPIO_Init+0xa8>)
 80019e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019e2:	4a10      	ldr	r2, [pc, #64]	; (8001a24 <MX_GPIO_Init+0xa8>)
 80019e4:	f043 0301 	orr.w	r3, r3, #1
 80019e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019ea:	4b0e      	ldr	r3, [pc, #56]	; (8001a24 <MX_GPIO_Init+0xa8>)
 80019ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ee:	f003 0301 	and.w	r3, r3, #1
 80019f2:	607b      	str	r3, [r7, #4]
 80019f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 80019f6:	2200      	movs	r2, #0
 80019f8:	2101      	movs	r1, #1
 80019fa:	480b      	ldr	r0, [pc, #44]	; (8001a28 <MX_GPIO_Init+0xac>)
 80019fc:	f000 fd12 	bl	8002424 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a00:	2301      	movs	r3, #1
 8001a02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a04:	2301      	movs	r3, #1
 8001a06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a10:	f107 0314 	add.w	r3, r7, #20
 8001a14:	4619      	mov	r1, r3
 8001a16:	4804      	ldr	r0, [pc, #16]	; (8001a28 <MX_GPIO_Init+0xac>)
 8001a18:	f000 fb72 	bl	8002100 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a1c:	bf00      	nop
 8001a1e:	3728      	adds	r7, #40	; 0x28
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	40021000 	.word	0x40021000
 8001a28:	48000800 	.word	0x48000800

08001a2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a30:	b672      	cpsid	i
}
 8001a32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a34:	e7fe      	b.n	8001a34 <Error_Handler+0x8>
	...

08001a38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a3e:	4b0f      	ldr	r3, [pc, #60]	; (8001a7c <HAL_MspInit+0x44>)
 8001a40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a42:	4a0e      	ldr	r2, [pc, #56]	; (8001a7c <HAL_MspInit+0x44>)
 8001a44:	f043 0301 	orr.w	r3, r3, #1
 8001a48:	6613      	str	r3, [r2, #96]	; 0x60
 8001a4a:	4b0c      	ldr	r3, [pc, #48]	; (8001a7c <HAL_MspInit+0x44>)
 8001a4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a4e:	f003 0301 	and.w	r3, r3, #1
 8001a52:	607b      	str	r3, [r7, #4]
 8001a54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a56:	4b09      	ldr	r3, [pc, #36]	; (8001a7c <HAL_MspInit+0x44>)
 8001a58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a5a:	4a08      	ldr	r2, [pc, #32]	; (8001a7c <HAL_MspInit+0x44>)
 8001a5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a60:	6593      	str	r3, [r2, #88]	; 0x58
 8001a62:	4b06      	ldr	r3, [pc, #24]	; (8001a7c <HAL_MspInit+0x44>)
 8001a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a6a:	603b      	str	r3, [r7, #0]
 8001a6c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a6e:	bf00      	nop
 8001a70:	370c      	adds	r7, #12
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	40021000 	.word	0x40021000

08001a80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b0ae      	sub	sp, #184	; 0xb8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a88:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]
 8001a90:	605a      	str	r2, [r3, #4]
 8001a92:	609a      	str	r2, [r3, #8]
 8001a94:	60da      	str	r2, [r3, #12]
 8001a96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a98:	f107 0310 	add.w	r3, r7, #16
 8001a9c:	2294      	movs	r2, #148	; 0x94
 8001a9e:	2100      	movs	r1, #0
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f00d fed1 	bl	800f848 <memset>
  if(huart->Instance==LPUART1)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a22      	ldr	r2, [pc, #136]	; (8001b34 <HAL_UART_MspInit+0xb4>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d13d      	bne.n	8001b2c <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001ab0:	2320      	movs	r3, #32
 8001ab2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ab8:	f107 0310 	add.w	r3, r7, #16
 8001abc:	4618      	mov	r0, r3
 8001abe:	f003 f803 	bl	8004ac8 <HAL_RCCEx_PeriphCLKConfig>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001ac8:	f7ff ffb0 	bl	8001a2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001acc:	4b1a      	ldr	r3, [pc, #104]	; (8001b38 <HAL_UART_MspInit+0xb8>)
 8001ace:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ad0:	4a19      	ldr	r2, [pc, #100]	; (8001b38 <HAL_UART_MspInit+0xb8>)
 8001ad2:	f043 0301 	orr.w	r3, r3, #1
 8001ad6:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001ad8:	4b17      	ldr	r3, [pc, #92]	; (8001b38 <HAL_UART_MspInit+0xb8>)
 8001ada:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001adc:	f003 0301 	and.w	r3, r3, #1
 8001ae0:	60fb      	str	r3, [r7, #12]
 8001ae2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001ae4:	4b14      	ldr	r3, [pc, #80]	; (8001b38 <HAL_UART_MspInit+0xb8>)
 8001ae6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ae8:	4a13      	ldr	r2, [pc, #76]	; (8001b38 <HAL_UART_MspInit+0xb8>)
 8001aea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001aee:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001af0:	4b11      	ldr	r3, [pc, #68]	; (8001b38 <HAL_UART_MspInit+0xb8>)
 8001af2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001af4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001af8:	60bb      	str	r3, [r7, #8]
 8001afa:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8001afc:	f002 f8fc 	bl	8003cf8 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001b00:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001b04:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b08:	2302      	movs	r3, #2
 8001b0a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b14:	2303      	movs	r3, #3
 8001b16:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001b1a:	2308      	movs	r3, #8
 8001b1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b20:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001b24:	4619      	mov	r1, r3
 8001b26:	4805      	ldr	r0, [pc, #20]	; (8001b3c <HAL_UART_MspInit+0xbc>)
 8001b28:	f000 faea 	bl	8002100 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8001b2c:	bf00      	nop
 8001b2e:	37b8      	adds	r7, #184	; 0xb8
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	40008000 	.word	0x40008000
 8001b38:	40021000 	.word	0x40021000
 8001b3c:	48001800 	.word	0x48001800

08001b40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b44:	e7fe      	b.n	8001b44 <NMI_Handler+0x4>

08001b46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b46:	b480      	push	{r7}
 8001b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b4a:	e7fe      	b.n	8001b4a <HardFault_Handler+0x4>

08001b4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b50:	e7fe      	b.n	8001b50 <MemManage_Handler+0x4>

08001b52 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b52:	b480      	push	{r7}
 8001b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b56:	e7fe      	b.n	8001b56 <BusFault_Handler+0x4>

08001b58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b5c:	e7fe      	b.n	8001b5c <UsageFault_Handler+0x4>

08001b5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b5e:	b480      	push	{r7}
 8001b60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b62:	bf00      	nop
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr

08001b6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b70:	bf00      	nop
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr

08001b7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b7e:	bf00      	nop
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr

08001b88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b8c:	f000 f962 	bl	8001e54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b90:	bf00      	nop
 8001b92:	bd80      	pop	{r7, pc}

08001b94 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001b98:	4802      	ldr	r0, [pc, #8]	; (8001ba4 <OTG_FS_IRQHandler+0x10>)
 8001b9a:	f000 fec1 	bl	8002920 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001b9e:	bf00      	nop
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	20002d00 	.word	0x20002d00

08001ba8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  return 1;
 8001bac:	2301      	movs	r3, #1
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr

08001bb8 <_kill>:

int _kill(int pid, int sig)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001bc2:	f00d fdf9 	bl	800f7b8 <__errno>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2216      	movs	r2, #22
 8001bca:	601a      	str	r2, [r3, #0]
  return -1;
 8001bcc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3708      	adds	r7, #8
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <_exit>:

void _exit (int status)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001be0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f7ff ffe7 	bl	8001bb8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001bea:	e7fe      	b.n	8001bea <_exit+0x12>

08001bec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b086      	sub	sp, #24
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	60f8      	str	r0, [r7, #12]
 8001bf4:	60b9      	str	r1, [r7, #8]
 8001bf6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	617b      	str	r3, [r7, #20]
 8001bfc:	e00a      	b.n	8001c14 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001bfe:	f3af 8000 	nop.w
 8001c02:	4601      	mov	r1, r0
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	1c5a      	adds	r2, r3, #1
 8001c08:	60ba      	str	r2, [r7, #8]
 8001c0a:	b2ca      	uxtb	r2, r1
 8001c0c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	3301      	adds	r3, #1
 8001c12:	617b      	str	r3, [r7, #20]
 8001c14:	697a      	ldr	r2, [r7, #20]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	dbf0      	blt.n	8001bfe <_read+0x12>
  }

  return len;
 8001c1c:	687b      	ldr	r3, [r7, #4]
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3718      	adds	r7, #24
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}

08001c26 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b086      	sub	sp, #24
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	60f8      	str	r0, [r7, #12]
 8001c2e:	60b9      	str	r1, [r7, #8]
 8001c30:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c32:	2300      	movs	r3, #0
 8001c34:	617b      	str	r3, [r7, #20]
 8001c36:	e009      	b.n	8001c4c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	1c5a      	adds	r2, r3, #1
 8001c3c:	60ba      	str	r2, [r7, #8]
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	4618      	mov	r0, r3
 8001c42:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	3301      	adds	r3, #1
 8001c4a:	617b      	str	r3, [r7, #20]
 8001c4c:	697a      	ldr	r2, [r7, #20]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	429a      	cmp	r2, r3
 8001c52:	dbf1      	blt.n	8001c38 <_write+0x12>
  }
  return len;
 8001c54:	687b      	ldr	r3, [r7, #4]
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3718      	adds	r7, #24
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}

08001c5e <_close>:

int _close(int file)
{
 8001c5e:	b480      	push	{r7}
 8001c60:	b083      	sub	sp, #12
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	370c      	adds	r7, #12
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr

08001c76 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c76:	b480      	push	{r7}
 8001c78:	b083      	sub	sp, #12
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	6078      	str	r0, [r7, #4]
 8001c7e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c86:	605a      	str	r2, [r3, #4]
  return 0;
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	370c      	adds	r7, #12
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr

08001c96 <_isatty>:

int _isatty(int file)
{
 8001c96:	b480      	push	{r7}
 8001c98:	b083      	sub	sp, #12
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c9e:	2301      	movs	r3, #1
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	370c      	adds	r7, #12
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr

08001cac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b085      	sub	sp, #20
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	60f8      	str	r0, [r7, #12]
 8001cb4:	60b9      	str	r1, [r7, #8]
 8001cb6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3714      	adds	r7, #20
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
	...

08001cc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b086      	sub	sp, #24
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cd0:	4a14      	ldr	r2, [pc, #80]	; (8001d24 <_sbrk+0x5c>)
 8001cd2:	4b15      	ldr	r3, [pc, #84]	; (8001d28 <_sbrk+0x60>)
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cdc:	4b13      	ldr	r3, [pc, #76]	; (8001d2c <_sbrk+0x64>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d102      	bne.n	8001cea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ce4:	4b11      	ldr	r3, [pc, #68]	; (8001d2c <_sbrk+0x64>)
 8001ce6:	4a12      	ldr	r2, [pc, #72]	; (8001d30 <_sbrk+0x68>)
 8001ce8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cea:	4b10      	ldr	r3, [pc, #64]	; (8001d2c <_sbrk+0x64>)
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4413      	add	r3, r2
 8001cf2:	693a      	ldr	r2, [r7, #16]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d207      	bcs.n	8001d08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cf8:	f00d fd5e 	bl	800f7b8 <__errno>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	220c      	movs	r2, #12
 8001d00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d06:	e009      	b.n	8001d1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d08:	4b08      	ldr	r3, [pc, #32]	; (8001d2c <_sbrk+0x64>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d0e:	4b07      	ldr	r3, [pc, #28]	; (8001d2c <_sbrk+0x64>)
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4413      	add	r3, r2
 8001d16:	4a05      	ldr	r2, [pc, #20]	; (8001d2c <_sbrk+0x64>)
 8001d18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3718      	adds	r7, #24
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	200a0000 	.word	0x200a0000
 8001d28:	00000400 	.word	0x00000400
 8001d2c:	200003e8 	.word	0x200003e8
 8001d30:	20003018 	.word	0x20003018

08001d34 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001d38:	4b06      	ldr	r3, [pc, #24]	; (8001d54 <SystemInit+0x20>)
 8001d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d3e:	4a05      	ldr	r2, [pc, #20]	; (8001d54 <SystemInit+0x20>)
 8001d40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001d48:	bf00      	nop
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop
 8001d54:	e000ed00 	.word	0xe000ed00

08001d58 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001d58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d90 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d5c:	f7ff ffea 	bl	8001d34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d60:	480c      	ldr	r0, [pc, #48]	; (8001d94 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d62:	490d      	ldr	r1, [pc, #52]	; (8001d98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d64:	4a0d      	ldr	r2, [pc, #52]	; (8001d9c <LoopForever+0xe>)
  movs r3, #0
 8001d66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d68:	e002      	b.n	8001d70 <LoopCopyDataInit>

08001d6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d6e:	3304      	adds	r3, #4

08001d70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d74:	d3f9      	bcc.n	8001d6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d76:	4a0a      	ldr	r2, [pc, #40]	; (8001da0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d78:	4c0a      	ldr	r4, [pc, #40]	; (8001da4 <LoopForever+0x16>)
  movs r3, #0
 8001d7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d7c:	e001      	b.n	8001d82 <LoopFillZerobss>

08001d7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d80:	3204      	adds	r2, #4

08001d82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d84:	d3fb      	bcc.n	8001d7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d86:	f00d fd1d 	bl	800f7c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d8a:	f7ff fd47 	bl	800181c <main>

08001d8e <LoopForever>:

LoopForever:
    b LoopForever
 8001d8e:	e7fe      	b.n	8001d8e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001d90:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001d94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d98:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 8001d9c:	080150ec 	.word	0x080150ec
  ldr r2, =_sbss
 8001da0:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8001da4:	20003014 	.word	0x20003014

08001da8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001da8:	e7fe      	b.n	8001da8 <ADC1_IRQHandler>

08001daa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001daa:	b580      	push	{r7, lr}
 8001dac:	b082      	sub	sp, #8
 8001dae:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001db0:	2300      	movs	r3, #0
 8001db2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001db4:	2003      	movs	r0, #3
 8001db6:	f000 f961 	bl	800207c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001dba:	2000      	movs	r0, #0
 8001dbc:	f000 f80e 	bl	8001ddc <HAL_InitTick>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d002      	beq.n	8001dcc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	71fb      	strb	r3, [r7, #7]
 8001dca:	e001      	b.n	8001dd0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001dcc:	f7ff fe34 	bl	8001a38 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001dd0:	79fb      	ldrb	r3, [r7, #7]
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
	...

08001ddc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b084      	sub	sp, #16
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001de4:	2300      	movs	r3, #0
 8001de6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001de8:	4b17      	ldr	r3, [pc, #92]	; (8001e48 <HAL_InitTick+0x6c>)
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d023      	beq.n	8001e38 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001df0:	4b16      	ldr	r3, [pc, #88]	; (8001e4c <HAL_InitTick+0x70>)
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	4b14      	ldr	r3, [pc, #80]	; (8001e48 <HAL_InitTick+0x6c>)
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	4619      	mov	r1, r3
 8001dfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e06:	4618      	mov	r0, r3
 8001e08:	f000 f96d 	bl	80020e6 <HAL_SYSTICK_Config>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d10f      	bne.n	8001e32 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2b0f      	cmp	r3, #15
 8001e16:	d809      	bhi.n	8001e2c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e18:	2200      	movs	r2, #0
 8001e1a:	6879      	ldr	r1, [r7, #4]
 8001e1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e20:	f000 f937 	bl	8002092 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e24:	4a0a      	ldr	r2, [pc, #40]	; (8001e50 <HAL_InitTick+0x74>)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6013      	str	r3, [r2, #0]
 8001e2a:	e007      	b.n	8001e3c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	73fb      	strb	r3, [r7, #15]
 8001e30:	e004      	b.n	8001e3c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	73fb      	strb	r3, [r7, #15]
 8001e36:	e001      	b.n	8001e3c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001e3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3710      	adds	r7, #16
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	20000008 	.word	0x20000008
 8001e4c:	20000000 	.word	0x20000000
 8001e50:	20000004 	.word	0x20000004

08001e54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e58:	4b06      	ldr	r3, [pc, #24]	; (8001e74 <HAL_IncTick+0x20>)
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	4b06      	ldr	r3, [pc, #24]	; (8001e78 <HAL_IncTick+0x24>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4413      	add	r3, r2
 8001e64:	4a04      	ldr	r2, [pc, #16]	; (8001e78 <HAL_IncTick+0x24>)
 8001e66:	6013      	str	r3, [r2, #0]
}
 8001e68:	bf00      	nop
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
 8001e74:	20000008 	.word	0x20000008
 8001e78:	200003ec 	.word	0x200003ec

08001e7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e80:	4b03      	ldr	r3, [pc, #12]	; (8001e90 <HAL_GetTick+0x14>)
 8001e82:	681b      	ldr	r3, [r3, #0]
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	200003ec 	.word	0x200003ec

08001e94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e9c:	f7ff ffee 	bl	8001e7c <HAL_GetTick>
 8001ea0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001eac:	d005      	beq.n	8001eba <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001eae:	4b0a      	ldr	r3, [pc, #40]	; (8001ed8 <HAL_Delay+0x44>)
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	4413      	add	r3, r2
 8001eb8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001eba:	bf00      	nop
 8001ebc:	f7ff ffde 	bl	8001e7c <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	68fa      	ldr	r2, [r7, #12]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d8f7      	bhi.n	8001ebc <HAL_Delay+0x28>
  {
  }
}
 8001ecc:	bf00      	nop
 8001ece:	bf00      	nop
 8001ed0:	3710      	adds	r7, #16
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	20000008 	.word	0x20000008

08001edc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b085      	sub	sp, #20
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f003 0307 	and.w	r3, r3, #7
 8001eea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001eec:	4b0c      	ldr	r3, [pc, #48]	; (8001f20 <__NVIC_SetPriorityGrouping+0x44>)
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ef2:	68ba      	ldr	r2, [r7, #8]
 8001ef4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ef8:	4013      	ands	r3, r2
 8001efa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f0e:	4a04      	ldr	r2, [pc, #16]	; (8001f20 <__NVIC_SetPriorityGrouping+0x44>)
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	60d3      	str	r3, [r2, #12]
}
 8001f14:	bf00      	nop
 8001f16:	3714      	adds	r7, #20
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr
 8001f20:	e000ed00 	.word	0xe000ed00

08001f24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f28:	4b04      	ldr	r3, [pc, #16]	; (8001f3c <__NVIC_GetPriorityGrouping+0x18>)
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	0a1b      	lsrs	r3, r3, #8
 8001f2e:	f003 0307 	and.w	r3, r3, #7
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr
 8001f3c:	e000ed00 	.word	0xe000ed00

08001f40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	4603      	mov	r3, r0
 8001f48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	db0b      	blt.n	8001f6a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f52:	79fb      	ldrb	r3, [r7, #7]
 8001f54:	f003 021f 	and.w	r2, r3, #31
 8001f58:	4907      	ldr	r1, [pc, #28]	; (8001f78 <__NVIC_EnableIRQ+0x38>)
 8001f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f5e:	095b      	lsrs	r3, r3, #5
 8001f60:	2001      	movs	r0, #1
 8001f62:	fa00 f202 	lsl.w	r2, r0, r2
 8001f66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f6a:	bf00      	nop
 8001f6c:	370c      	adds	r7, #12
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	e000e100 	.word	0xe000e100

08001f7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	4603      	mov	r3, r0
 8001f84:	6039      	str	r1, [r7, #0]
 8001f86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	db0a      	blt.n	8001fa6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	b2da      	uxtb	r2, r3
 8001f94:	490c      	ldr	r1, [pc, #48]	; (8001fc8 <__NVIC_SetPriority+0x4c>)
 8001f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f9a:	0112      	lsls	r2, r2, #4
 8001f9c:	b2d2      	uxtb	r2, r2
 8001f9e:	440b      	add	r3, r1
 8001fa0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fa4:	e00a      	b.n	8001fbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	b2da      	uxtb	r2, r3
 8001faa:	4908      	ldr	r1, [pc, #32]	; (8001fcc <__NVIC_SetPriority+0x50>)
 8001fac:	79fb      	ldrb	r3, [r7, #7]
 8001fae:	f003 030f 	and.w	r3, r3, #15
 8001fb2:	3b04      	subs	r3, #4
 8001fb4:	0112      	lsls	r2, r2, #4
 8001fb6:	b2d2      	uxtb	r2, r2
 8001fb8:	440b      	add	r3, r1
 8001fba:	761a      	strb	r2, [r3, #24]
}
 8001fbc:	bf00      	nop
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr
 8001fc8:	e000e100 	.word	0xe000e100
 8001fcc:	e000ed00 	.word	0xe000ed00

08001fd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b089      	sub	sp, #36	; 0x24
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	60f8      	str	r0, [r7, #12]
 8001fd8:	60b9      	str	r1, [r7, #8]
 8001fda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	f003 0307 	and.w	r3, r3, #7
 8001fe2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	f1c3 0307 	rsb	r3, r3, #7
 8001fea:	2b04      	cmp	r3, #4
 8001fec:	bf28      	it	cs
 8001fee:	2304      	movcs	r3, #4
 8001ff0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	3304      	adds	r3, #4
 8001ff6:	2b06      	cmp	r3, #6
 8001ff8:	d902      	bls.n	8002000 <NVIC_EncodePriority+0x30>
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	3b03      	subs	r3, #3
 8001ffe:	e000      	b.n	8002002 <NVIC_EncodePriority+0x32>
 8002000:	2300      	movs	r3, #0
 8002002:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002004:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002008:	69bb      	ldr	r3, [r7, #24]
 800200a:	fa02 f303 	lsl.w	r3, r2, r3
 800200e:	43da      	mvns	r2, r3
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	401a      	ands	r2, r3
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002018:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	fa01 f303 	lsl.w	r3, r1, r3
 8002022:	43d9      	mvns	r1, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002028:	4313      	orrs	r3, r2
         );
}
 800202a:	4618      	mov	r0, r3
 800202c:	3724      	adds	r7, #36	; 0x24
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
	...

08002038 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	3b01      	subs	r3, #1
 8002044:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002048:	d301      	bcc.n	800204e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800204a:	2301      	movs	r3, #1
 800204c:	e00f      	b.n	800206e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800204e:	4a0a      	ldr	r2, [pc, #40]	; (8002078 <SysTick_Config+0x40>)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	3b01      	subs	r3, #1
 8002054:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002056:	210f      	movs	r1, #15
 8002058:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800205c:	f7ff ff8e 	bl	8001f7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002060:	4b05      	ldr	r3, [pc, #20]	; (8002078 <SysTick_Config+0x40>)
 8002062:	2200      	movs	r2, #0
 8002064:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002066:	4b04      	ldr	r3, [pc, #16]	; (8002078 <SysTick_Config+0x40>)
 8002068:	2207      	movs	r2, #7
 800206a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800206c:	2300      	movs	r3, #0
}
 800206e:	4618      	mov	r0, r3
 8002070:	3708      	adds	r7, #8
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	e000e010 	.word	0xe000e010

0800207c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f7ff ff29 	bl	8001edc <__NVIC_SetPriorityGrouping>
}
 800208a:	bf00      	nop
 800208c:	3708      	adds	r7, #8
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}

08002092 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002092:	b580      	push	{r7, lr}
 8002094:	b086      	sub	sp, #24
 8002096:	af00      	add	r7, sp, #0
 8002098:	4603      	mov	r3, r0
 800209a:	60b9      	str	r1, [r7, #8]
 800209c:	607a      	str	r2, [r7, #4]
 800209e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80020a0:	2300      	movs	r3, #0
 80020a2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80020a4:	f7ff ff3e 	bl	8001f24 <__NVIC_GetPriorityGrouping>
 80020a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	68b9      	ldr	r1, [r7, #8]
 80020ae:	6978      	ldr	r0, [r7, #20]
 80020b0:	f7ff ff8e 	bl	8001fd0 <NVIC_EncodePriority>
 80020b4:	4602      	mov	r2, r0
 80020b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020ba:	4611      	mov	r1, r2
 80020bc:	4618      	mov	r0, r3
 80020be:	f7ff ff5d 	bl	8001f7c <__NVIC_SetPriority>
}
 80020c2:	bf00      	nop
 80020c4:	3718      	adds	r7, #24
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}

080020ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020ca:	b580      	push	{r7, lr}
 80020cc:	b082      	sub	sp, #8
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	4603      	mov	r3, r0
 80020d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d8:	4618      	mov	r0, r3
 80020da:	f7ff ff31 	bl	8001f40 <__NVIC_EnableIRQ>
}
 80020de:	bf00      	nop
 80020e0:	3708      	adds	r7, #8
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}

080020e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020e6:	b580      	push	{r7, lr}
 80020e8:	b082      	sub	sp, #8
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f7ff ffa2 	bl	8002038 <SysTick_Config>
 80020f4:	4603      	mov	r3, r0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3708      	adds	r7, #8
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
	...

08002100 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002100:	b480      	push	{r7}
 8002102:	b087      	sub	sp, #28
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800210a:	2300      	movs	r3, #0
 800210c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800210e:	e166      	b.n	80023de <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	2101      	movs	r1, #1
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	fa01 f303 	lsl.w	r3, r1, r3
 800211c:	4013      	ands	r3, r2
 800211e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2b00      	cmp	r3, #0
 8002124:	f000 8158 	beq.w	80023d8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f003 0303 	and.w	r3, r3, #3
 8002130:	2b01      	cmp	r3, #1
 8002132:	d005      	beq.n	8002140 <HAL_GPIO_Init+0x40>
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f003 0303 	and.w	r3, r3, #3
 800213c:	2b02      	cmp	r3, #2
 800213e:	d130      	bne.n	80021a2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	005b      	lsls	r3, r3, #1
 800214a:	2203      	movs	r2, #3
 800214c:	fa02 f303 	lsl.w	r3, r2, r3
 8002150:	43db      	mvns	r3, r3
 8002152:	693a      	ldr	r2, [r7, #16]
 8002154:	4013      	ands	r3, r2
 8002156:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	68da      	ldr	r2, [r3, #12]
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	005b      	lsls	r3, r3, #1
 8002160:	fa02 f303 	lsl.w	r3, r2, r3
 8002164:	693a      	ldr	r2, [r7, #16]
 8002166:	4313      	orrs	r3, r2
 8002168:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	693a      	ldr	r2, [r7, #16]
 800216e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002176:	2201      	movs	r2, #1
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	fa02 f303 	lsl.w	r3, r2, r3
 800217e:	43db      	mvns	r3, r3
 8002180:	693a      	ldr	r2, [r7, #16]
 8002182:	4013      	ands	r3, r2
 8002184:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	091b      	lsrs	r3, r3, #4
 800218c:	f003 0201 	and.w	r2, r3, #1
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	fa02 f303 	lsl.w	r3, r2, r3
 8002196:	693a      	ldr	r2, [r7, #16]
 8002198:	4313      	orrs	r3, r2
 800219a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	693a      	ldr	r2, [r7, #16]
 80021a0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	f003 0303 	and.w	r3, r3, #3
 80021aa:	2b03      	cmp	r3, #3
 80021ac:	d017      	beq.n	80021de <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	68db      	ldr	r3, [r3, #12]
 80021b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	005b      	lsls	r3, r3, #1
 80021b8:	2203      	movs	r2, #3
 80021ba:	fa02 f303 	lsl.w	r3, r2, r3
 80021be:	43db      	mvns	r3, r3
 80021c0:	693a      	ldr	r2, [r7, #16]
 80021c2:	4013      	ands	r3, r2
 80021c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	689a      	ldr	r2, [r3, #8]
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	005b      	lsls	r3, r3, #1
 80021ce:	fa02 f303 	lsl.w	r3, r2, r3
 80021d2:	693a      	ldr	r2, [r7, #16]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	693a      	ldr	r2, [r7, #16]
 80021dc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	f003 0303 	and.w	r3, r3, #3
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	d123      	bne.n	8002232 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	08da      	lsrs	r2, r3, #3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	3208      	adds	r2, #8
 80021f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	f003 0307 	and.w	r3, r3, #7
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	220f      	movs	r2, #15
 8002202:	fa02 f303 	lsl.w	r3, r2, r3
 8002206:	43db      	mvns	r3, r3
 8002208:	693a      	ldr	r2, [r7, #16]
 800220a:	4013      	ands	r3, r2
 800220c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	691a      	ldr	r2, [r3, #16]
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	f003 0307 	and.w	r3, r3, #7
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	fa02 f303 	lsl.w	r3, r2, r3
 800221e:	693a      	ldr	r2, [r7, #16]
 8002220:	4313      	orrs	r3, r2
 8002222:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	08da      	lsrs	r2, r3, #3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	3208      	adds	r2, #8
 800222c:	6939      	ldr	r1, [r7, #16]
 800222e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	005b      	lsls	r3, r3, #1
 800223c:	2203      	movs	r2, #3
 800223e:	fa02 f303 	lsl.w	r3, r2, r3
 8002242:	43db      	mvns	r3, r3
 8002244:	693a      	ldr	r2, [r7, #16]
 8002246:	4013      	ands	r3, r2
 8002248:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f003 0203 	and.w	r2, r3, #3
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	005b      	lsls	r3, r3, #1
 8002256:	fa02 f303 	lsl.w	r3, r2, r3
 800225a:	693a      	ldr	r2, [r7, #16]
 800225c:	4313      	orrs	r3, r2
 800225e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	693a      	ldr	r2, [r7, #16]
 8002264:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800226e:	2b00      	cmp	r3, #0
 8002270:	f000 80b2 	beq.w	80023d8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002274:	4b61      	ldr	r3, [pc, #388]	; (80023fc <HAL_GPIO_Init+0x2fc>)
 8002276:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002278:	4a60      	ldr	r2, [pc, #384]	; (80023fc <HAL_GPIO_Init+0x2fc>)
 800227a:	f043 0301 	orr.w	r3, r3, #1
 800227e:	6613      	str	r3, [r2, #96]	; 0x60
 8002280:	4b5e      	ldr	r3, [pc, #376]	; (80023fc <HAL_GPIO_Init+0x2fc>)
 8002282:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002284:	f003 0301 	and.w	r3, r3, #1
 8002288:	60bb      	str	r3, [r7, #8]
 800228a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800228c:	4a5c      	ldr	r2, [pc, #368]	; (8002400 <HAL_GPIO_Init+0x300>)
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	089b      	lsrs	r3, r3, #2
 8002292:	3302      	adds	r3, #2
 8002294:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002298:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	f003 0303 	and.w	r3, r3, #3
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	220f      	movs	r2, #15
 80022a4:	fa02 f303 	lsl.w	r3, r2, r3
 80022a8:	43db      	mvns	r3, r3
 80022aa:	693a      	ldr	r2, [r7, #16]
 80022ac:	4013      	ands	r3, r2
 80022ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80022b6:	d02b      	beq.n	8002310 <HAL_GPIO_Init+0x210>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	4a52      	ldr	r2, [pc, #328]	; (8002404 <HAL_GPIO_Init+0x304>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d025      	beq.n	800230c <HAL_GPIO_Init+0x20c>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	4a51      	ldr	r2, [pc, #324]	; (8002408 <HAL_GPIO_Init+0x308>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d01f      	beq.n	8002308 <HAL_GPIO_Init+0x208>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	4a50      	ldr	r2, [pc, #320]	; (800240c <HAL_GPIO_Init+0x30c>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d019      	beq.n	8002304 <HAL_GPIO_Init+0x204>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	4a4f      	ldr	r2, [pc, #316]	; (8002410 <HAL_GPIO_Init+0x310>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d013      	beq.n	8002300 <HAL_GPIO_Init+0x200>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	4a4e      	ldr	r2, [pc, #312]	; (8002414 <HAL_GPIO_Init+0x314>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d00d      	beq.n	80022fc <HAL_GPIO_Init+0x1fc>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	4a4d      	ldr	r2, [pc, #308]	; (8002418 <HAL_GPIO_Init+0x318>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d007      	beq.n	80022f8 <HAL_GPIO_Init+0x1f8>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	4a4c      	ldr	r2, [pc, #304]	; (800241c <HAL_GPIO_Init+0x31c>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d101      	bne.n	80022f4 <HAL_GPIO_Init+0x1f4>
 80022f0:	2307      	movs	r3, #7
 80022f2:	e00e      	b.n	8002312 <HAL_GPIO_Init+0x212>
 80022f4:	2308      	movs	r3, #8
 80022f6:	e00c      	b.n	8002312 <HAL_GPIO_Init+0x212>
 80022f8:	2306      	movs	r3, #6
 80022fa:	e00a      	b.n	8002312 <HAL_GPIO_Init+0x212>
 80022fc:	2305      	movs	r3, #5
 80022fe:	e008      	b.n	8002312 <HAL_GPIO_Init+0x212>
 8002300:	2304      	movs	r3, #4
 8002302:	e006      	b.n	8002312 <HAL_GPIO_Init+0x212>
 8002304:	2303      	movs	r3, #3
 8002306:	e004      	b.n	8002312 <HAL_GPIO_Init+0x212>
 8002308:	2302      	movs	r3, #2
 800230a:	e002      	b.n	8002312 <HAL_GPIO_Init+0x212>
 800230c:	2301      	movs	r3, #1
 800230e:	e000      	b.n	8002312 <HAL_GPIO_Init+0x212>
 8002310:	2300      	movs	r3, #0
 8002312:	697a      	ldr	r2, [r7, #20]
 8002314:	f002 0203 	and.w	r2, r2, #3
 8002318:	0092      	lsls	r2, r2, #2
 800231a:	4093      	lsls	r3, r2
 800231c:	693a      	ldr	r2, [r7, #16]
 800231e:	4313      	orrs	r3, r2
 8002320:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002322:	4937      	ldr	r1, [pc, #220]	; (8002400 <HAL_GPIO_Init+0x300>)
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	089b      	lsrs	r3, r3, #2
 8002328:	3302      	adds	r3, #2
 800232a:	693a      	ldr	r2, [r7, #16]
 800232c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002330:	4b3b      	ldr	r3, [pc, #236]	; (8002420 <HAL_GPIO_Init+0x320>)
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	43db      	mvns	r3, r3
 800233a:	693a      	ldr	r2, [r7, #16]
 800233c:	4013      	ands	r3, r2
 800233e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002348:	2b00      	cmp	r3, #0
 800234a:	d003      	beq.n	8002354 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800234c:	693a      	ldr	r2, [r7, #16]
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	4313      	orrs	r3, r2
 8002352:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002354:	4a32      	ldr	r2, [pc, #200]	; (8002420 <HAL_GPIO_Init+0x320>)
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800235a:	4b31      	ldr	r3, [pc, #196]	; (8002420 <HAL_GPIO_Init+0x320>)
 800235c:	68db      	ldr	r3, [r3, #12]
 800235e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	43db      	mvns	r3, r3
 8002364:	693a      	ldr	r2, [r7, #16]
 8002366:	4013      	ands	r3, r2
 8002368:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d003      	beq.n	800237e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002376:	693a      	ldr	r2, [r7, #16]
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	4313      	orrs	r3, r2
 800237c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800237e:	4a28      	ldr	r2, [pc, #160]	; (8002420 <HAL_GPIO_Init+0x320>)
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002384:	4b26      	ldr	r3, [pc, #152]	; (8002420 <HAL_GPIO_Init+0x320>)
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	43db      	mvns	r3, r3
 800238e:	693a      	ldr	r2, [r7, #16]
 8002390:	4013      	ands	r3, r2
 8002392:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d003      	beq.n	80023a8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80023a0:	693a      	ldr	r2, [r7, #16]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	4313      	orrs	r3, r2
 80023a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80023a8:	4a1d      	ldr	r2, [pc, #116]	; (8002420 <HAL_GPIO_Init+0x320>)
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80023ae:	4b1c      	ldr	r3, [pc, #112]	; (8002420 <HAL_GPIO_Init+0x320>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	43db      	mvns	r3, r3
 80023b8:	693a      	ldr	r2, [r7, #16]
 80023ba:	4013      	ands	r3, r2
 80023bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d003      	beq.n	80023d2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80023ca:	693a      	ldr	r2, [r7, #16]
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80023d2:	4a13      	ldr	r2, [pc, #76]	; (8002420 <HAL_GPIO_Init+0x320>)
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	3301      	adds	r3, #1
 80023dc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	fa22 f303 	lsr.w	r3, r2, r3
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	f47f ae91 	bne.w	8002110 <HAL_GPIO_Init+0x10>
  }
}
 80023ee:	bf00      	nop
 80023f0:	bf00      	nop
 80023f2:	371c      	adds	r7, #28
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr
 80023fc:	40021000 	.word	0x40021000
 8002400:	40010000 	.word	0x40010000
 8002404:	48000400 	.word	0x48000400
 8002408:	48000800 	.word	0x48000800
 800240c:	48000c00 	.word	0x48000c00
 8002410:	48001000 	.word	0x48001000
 8002414:	48001400 	.word	0x48001400
 8002418:	48001800 	.word	0x48001800
 800241c:	48001c00 	.word	0x48001c00
 8002420:	40010400 	.word	0x40010400

08002424 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	460b      	mov	r3, r1
 800242e:	807b      	strh	r3, [r7, #2]
 8002430:	4613      	mov	r3, r2
 8002432:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002434:	787b      	ldrb	r3, [r7, #1]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d003      	beq.n	8002442 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800243a:	887a      	ldrh	r2, [r7, #2]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002440:	e002      	b.n	8002448 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002442:	887a      	ldrh	r2, [r7, #2]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002448:	bf00      	nop
 800244a:	370c      	adds	r7, #12
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr

08002454 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002456:	b08f      	sub	sp, #60	; 0x3c
 8002458:	af0a      	add	r7, sp, #40	; 0x28
 800245a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d101      	bne.n	8002466 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e054      	b.n	8002510 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8002472:	b2db      	uxtb	r3, r3
 8002474:	2b00      	cmp	r3, #0
 8002476:	d106      	bne.n	8002486 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2200      	movs	r2, #0
 800247c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f00c fe8b 	bl	800f19c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2203      	movs	r2, #3
 800248a:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002492:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002496:	2b00      	cmp	r3, #0
 8002498:	d102      	bne.n	80024a0 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2200      	movs	r2, #0
 800249e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4618      	mov	r0, r3
 80024a6:	f003 ff00 	bl	80062aa <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	603b      	str	r3, [r7, #0]
 80024b0:	687e      	ldr	r6, [r7, #4]
 80024b2:	466d      	mov	r5, sp
 80024b4:	f106 0410 	add.w	r4, r6, #16
 80024b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024c0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80024c4:	e885 0003 	stmia.w	r5, {r0, r1}
 80024c8:	1d33      	adds	r3, r6, #4
 80024ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024cc:	6838      	ldr	r0, [r7, #0]
 80024ce:	f003 feaf 	bl	8006230 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	2101      	movs	r1, #1
 80024d8:	4618      	mov	r0, r3
 80024da:	f003 fef7 	bl	80062cc <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	603b      	str	r3, [r7, #0]
 80024e4:	687e      	ldr	r6, [r7, #4]
 80024e6:	466d      	mov	r5, sp
 80024e8:	f106 0410 	add.w	r4, r6, #16
 80024ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024f4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80024f8:	e885 0003 	stmia.w	r5, {r0, r1}
 80024fc:	1d33      	adds	r3, r6, #4
 80024fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002500:	6838      	ldr	r0, [r7, #0]
 8002502:	f004 f87b 	bl	80065fc <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2201      	movs	r2, #1
 800250a:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 800250e:	2300      	movs	r3, #0
}
 8002510:	4618      	mov	r0, r3
 8002512:	3714      	adds	r7, #20
 8002514:	46bd      	mov	sp, r7
 8002516:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002518 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002518:	b590      	push	{r4, r7, lr}
 800251a:	b089      	sub	sp, #36	; 0x24
 800251c:	af04      	add	r7, sp, #16
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	4608      	mov	r0, r1
 8002522:	4611      	mov	r1, r2
 8002524:	461a      	mov	r2, r3
 8002526:	4603      	mov	r3, r0
 8002528:	70fb      	strb	r3, [r7, #3]
 800252a:	460b      	mov	r3, r1
 800252c:	70bb      	strb	r3, [r7, #2]
 800252e:	4613      	mov	r3, r2
 8002530:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002538:	2b01      	cmp	r3, #1
 800253a:	d101      	bne.n	8002540 <HAL_HCD_HC_Init+0x28>
 800253c:	2302      	movs	r3, #2
 800253e:	e076      	b.n	800262e <HAL_HCD_HC_Init+0x116>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2201      	movs	r2, #1
 8002544:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8002548:	78fb      	ldrb	r3, [r7, #3]
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	212c      	movs	r1, #44	; 0x2c
 800254e:	fb01 f303 	mul.w	r3, r1, r3
 8002552:	4413      	add	r3, r2
 8002554:	333d      	adds	r3, #61	; 0x3d
 8002556:	2200      	movs	r2, #0
 8002558:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800255a:	78fb      	ldrb	r3, [r7, #3]
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	212c      	movs	r1, #44	; 0x2c
 8002560:	fb01 f303 	mul.w	r3, r1, r3
 8002564:	4413      	add	r3, r2
 8002566:	3338      	adds	r3, #56	; 0x38
 8002568:	787a      	ldrb	r2, [r7, #1]
 800256a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800256c:	78fb      	ldrb	r3, [r7, #3]
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	212c      	movs	r1, #44	; 0x2c
 8002572:	fb01 f303 	mul.w	r3, r1, r3
 8002576:	4413      	add	r3, r2
 8002578:	3340      	adds	r3, #64	; 0x40
 800257a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800257c:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800257e:	78fb      	ldrb	r3, [r7, #3]
 8002580:	687a      	ldr	r2, [r7, #4]
 8002582:	212c      	movs	r1, #44	; 0x2c
 8002584:	fb01 f303 	mul.w	r3, r1, r3
 8002588:	4413      	add	r3, r2
 800258a:	3339      	adds	r3, #57	; 0x39
 800258c:	78fa      	ldrb	r2, [r7, #3]
 800258e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002590:	78fb      	ldrb	r3, [r7, #3]
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	212c      	movs	r1, #44	; 0x2c
 8002596:	fb01 f303 	mul.w	r3, r1, r3
 800259a:	4413      	add	r3, r2
 800259c:	333f      	adds	r3, #63	; 0x3f
 800259e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80025a2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80025a4:	78fb      	ldrb	r3, [r7, #3]
 80025a6:	78ba      	ldrb	r2, [r7, #2]
 80025a8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80025ac:	b2d0      	uxtb	r0, r2
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	212c      	movs	r1, #44	; 0x2c
 80025b2:	fb01 f303 	mul.w	r3, r1, r3
 80025b6:	4413      	add	r3, r2
 80025b8:	333a      	adds	r3, #58	; 0x3a
 80025ba:	4602      	mov	r2, r0
 80025bc:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80025be:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	da09      	bge.n	80025da <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80025c6:	78fb      	ldrb	r3, [r7, #3]
 80025c8:	687a      	ldr	r2, [r7, #4]
 80025ca:	212c      	movs	r1, #44	; 0x2c
 80025cc:	fb01 f303 	mul.w	r3, r1, r3
 80025d0:	4413      	add	r3, r2
 80025d2:	333b      	adds	r3, #59	; 0x3b
 80025d4:	2201      	movs	r2, #1
 80025d6:	701a      	strb	r2, [r3, #0]
 80025d8:	e008      	b.n	80025ec <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80025da:	78fb      	ldrb	r3, [r7, #3]
 80025dc:	687a      	ldr	r2, [r7, #4]
 80025de:	212c      	movs	r1, #44	; 0x2c
 80025e0:	fb01 f303 	mul.w	r3, r1, r3
 80025e4:	4413      	add	r3, r2
 80025e6:	333b      	adds	r3, #59	; 0x3b
 80025e8:	2200      	movs	r2, #0
 80025ea:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80025ec:	78fb      	ldrb	r3, [r7, #3]
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	212c      	movs	r1, #44	; 0x2c
 80025f2:	fb01 f303 	mul.w	r3, r1, r3
 80025f6:	4413      	add	r3, r2
 80025f8:	333c      	adds	r3, #60	; 0x3c
 80025fa:	f897 2020 	ldrb.w	r2, [r7, #32]
 80025fe:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6818      	ldr	r0, [r3, #0]
 8002604:	787c      	ldrb	r4, [r7, #1]
 8002606:	78ba      	ldrb	r2, [r7, #2]
 8002608:	78f9      	ldrb	r1, [r7, #3]
 800260a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800260c:	9302      	str	r3, [sp, #8]
 800260e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002612:	9301      	str	r3, [sp, #4]
 8002614:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002618:	9300      	str	r3, [sp, #0]
 800261a:	4623      	mov	r3, r4
 800261c:	f004 f936 	bl	800688c <USB_HC_Init>
 8002620:	4603      	mov	r3, r0
 8002622:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2200      	movs	r2, #0
 8002628:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800262c:	7bfb      	ldrb	r3, [r7, #15]
}
 800262e:	4618      	mov	r0, r3
 8002630:	3714      	adds	r7, #20
 8002632:	46bd      	mov	sp, r7
 8002634:	bd90      	pop	{r4, r7, pc}

08002636 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002636:	b580      	push	{r7, lr}
 8002638:	b084      	sub	sp, #16
 800263a:	af00      	add	r7, sp, #0
 800263c:	6078      	str	r0, [r7, #4]
 800263e:	460b      	mov	r3, r1
 8002640:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002642:	2300      	movs	r3, #0
 8002644:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800264c:	2b01      	cmp	r3, #1
 800264e:	d101      	bne.n	8002654 <HAL_HCD_HC_Halt+0x1e>
 8002650:	2302      	movs	r3, #2
 8002652:	e00f      	b.n	8002674 <HAL_HCD_HC_Halt+0x3e>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2201      	movs	r2, #1
 8002658:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	78fa      	ldrb	r2, [r7, #3]
 8002662:	4611      	mov	r1, r2
 8002664:	4618      	mov	r0, r3
 8002666:	f004 fb26 	bl	8006cb6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2200      	movs	r2, #0
 800266e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002672:	7bfb      	ldrb	r3, [r7, #15]
}
 8002674:	4618      	mov	r0, r3
 8002676:	3710      	adds	r7, #16
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}

0800267c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	4608      	mov	r0, r1
 8002686:	4611      	mov	r1, r2
 8002688:	461a      	mov	r2, r3
 800268a:	4603      	mov	r3, r0
 800268c:	70fb      	strb	r3, [r7, #3]
 800268e:	460b      	mov	r3, r1
 8002690:	70bb      	strb	r3, [r7, #2]
 8002692:	4613      	mov	r3, r2
 8002694:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002696:	78fb      	ldrb	r3, [r7, #3]
 8002698:	687a      	ldr	r2, [r7, #4]
 800269a:	212c      	movs	r1, #44	; 0x2c
 800269c:	fb01 f303 	mul.w	r3, r1, r3
 80026a0:	4413      	add	r3, r2
 80026a2:	333b      	adds	r3, #59	; 0x3b
 80026a4:	78ba      	ldrb	r2, [r7, #2]
 80026a6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80026a8:	78fb      	ldrb	r3, [r7, #3]
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	212c      	movs	r1, #44	; 0x2c
 80026ae:	fb01 f303 	mul.w	r3, r1, r3
 80026b2:	4413      	add	r3, r2
 80026b4:	333f      	adds	r3, #63	; 0x3f
 80026b6:	787a      	ldrb	r2, [r7, #1]
 80026b8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80026ba:	7c3b      	ldrb	r3, [r7, #16]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d112      	bne.n	80026e6 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80026c0:	78fb      	ldrb	r3, [r7, #3]
 80026c2:	687a      	ldr	r2, [r7, #4]
 80026c4:	212c      	movs	r1, #44	; 0x2c
 80026c6:	fb01 f303 	mul.w	r3, r1, r3
 80026ca:	4413      	add	r3, r2
 80026cc:	3342      	adds	r3, #66	; 0x42
 80026ce:	2203      	movs	r2, #3
 80026d0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80026d2:	78fb      	ldrb	r3, [r7, #3]
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	212c      	movs	r1, #44	; 0x2c
 80026d8:	fb01 f303 	mul.w	r3, r1, r3
 80026dc:	4413      	add	r3, r2
 80026de:	333d      	adds	r3, #61	; 0x3d
 80026e0:	7f3a      	ldrb	r2, [r7, #28]
 80026e2:	701a      	strb	r2, [r3, #0]
 80026e4:	e008      	b.n	80026f8 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80026e6:	78fb      	ldrb	r3, [r7, #3]
 80026e8:	687a      	ldr	r2, [r7, #4]
 80026ea:	212c      	movs	r1, #44	; 0x2c
 80026ec:	fb01 f303 	mul.w	r3, r1, r3
 80026f0:	4413      	add	r3, r2
 80026f2:	3342      	adds	r3, #66	; 0x42
 80026f4:	2202      	movs	r2, #2
 80026f6:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80026f8:	787b      	ldrb	r3, [r7, #1]
 80026fa:	2b03      	cmp	r3, #3
 80026fc:	f200 80c6 	bhi.w	800288c <HAL_HCD_HC_SubmitRequest+0x210>
 8002700:	a201      	add	r2, pc, #4	; (adr r2, 8002708 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8002702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002706:	bf00      	nop
 8002708:	08002719 	.word	0x08002719
 800270c:	08002879 	.word	0x08002879
 8002710:	0800277d 	.word	0x0800277d
 8002714:	080027fb 	.word	0x080027fb
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002718:	7c3b      	ldrb	r3, [r7, #16]
 800271a:	2b01      	cmp	r3, #1
 800271c:	f040 80b8 	bne.w	8002890 <HAL_HCD_HC_SubmitRequest+0x214>
 8002720:	78bb      	ldrb	r3, [r7, #2]
 8002722:	2b00      	cmp	r3, #0
 8002724:	f040 80b4 	bne.w	8002890 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8002728:	8b3b      	ldrh	r3, [r7, #24]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d108      	bne.n	8002740 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800272e:	78fb      	ldrb	r3, [r7, #3]
 8002730:	687a      	ldr	r2, [r7, #4]
 8002732:	212c      	movs	r1, #44	; 0x2c
 8002734:	fb01 f303 	mul.w	r3, r1, r3
 8002738:	4413      	add	r3, r2
 800273a:	3355      	adds	r3, #85	; 0x55
 800273c:	2201      	movs	r2, #1
 800273e:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002740:	78fb      	ldrb	r3, [r7, #3]
 8002742:	687a      	ldr	r2, [r7, #4]
 8002744:	212c      	movs	r1, #44	; 0x2c
 8002746:	fb01 f303 	mul.w	r3, r1, r3
 800274a:	4413      	add	r3, r2
 800274c:	3355      	adds	r3, #85	; 0x55
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d109      	bne.n	8002768 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002754:	78fb      	ldrb	r3, [r7, #3]
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	212c      	movs	r1, #44	; 0x2c
 800275a:	fb01 f303 	mul.w	r3, r1, r3
 800275e:	4413      	add	r3, r2
 8002760:	3342      	adds	r3, #66	; 0x42
 8002762:	2200      	movs	r2, #0
 8002764:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002766:	e093      	b.n	8002890 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002768:	78fb      	ldrb	r3, [r7, #3]
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	212c      	movs	r1, #44	; 0x2c
 800276e:	fb01 f303 	mul.w	r3, r1, r3
 8002772:	4413      	add	r3, r2
 8002774:	3342      	adds	r3, #66	; 0x42
 8002776:	2202      	movs	r2, #2
 8002778:	701a      	strb	r2, [r3, #0]
      break;
 800277a:	e089      	b.n	8002890 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800277c:	78bb      	ldrb	r3, [r7, #2]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d11d      	bne.n	80027be <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002782:	78fb      	ldrb	r3, [r7, #3]
 8002784:	687a      	ldr	r2, [r7, #4]
 8002786:	212c      	movs	r1, #44	; 0x2c
 8002788:	fb01 f303 	mul.w	r3, r1, r3
 800278c:	4413      	add	r3, r2
 800278e:	3355      	adds	r3, #85	; 0x55
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d109      	bne.n	80027aa <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002796:	78fb      	ldrb	r3, [r7, #3]
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	212c      	movs	r1, #44	; 0x2c
 800279c:	fb01 f303 	mul.w	r3, r1, r3
 80027a0:	4413      	add	r3, r2
 80027a2:	3342      	adds	r3, #66	; 0x42
 80027a4:	2200      	movs	r2, #0
 80027a6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80027a8:	e073      	b.n	8002892 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80027aa:	78fb      	ldrb	r3, [r7, #3]
 80027ac:	687a      	ldr	r2, [r7, #4]
 80027ae:	212c      	movs	r1, #44	; 0x2c
 80027b0:	fb01 f303 	mul.w	r3, r1, r3
 80027b4:	4413      	add	r3, r2
 80027b6:	3342      	adds	r3, #66	; 0x42
 80027b8:	2202      	movs	r2, #2
 80027ba:	701a      	strb	r2, [r3, #0]
      break;
 80027bc:	e069      	b.n	8002892 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80027be:	78fb      	ldrb	r3, [r7, #3]
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	212c      	movs	r1, #44	; 0x2c
 80027c4:	fb01 f303 	mul.w	r3, r1, r3
 80027c8:	4413      	add	r3, r2
 80027ca:	3354      	adds	r3, #84	; 0x54
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d109      	bne.n	80027e6 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80027d2:	78fb      	ldrb	r3, [r7, #3]
 80027d4:	687a      	ldr	r2, [r7, #4]
 80027d6:	212c      	movs	r1, #44	; 0x2c
 80027d8:	fb01 f303 	mul.w	r3, r1, r3
 80027dc:	4413      	add	r3, r2
 80027de:	3342      	adds	r3, #66	; 0x42
 80027e0:	2200      	movs	r2, #0
 80027e2:	701a      	strb	r2, [r3, #0]
      break;
 80027e4:	e055      	b.n	8002892 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80027e6:	78fb      	ldrb	r3, [r7, #3]
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	212c      	movs	r1, #44	; 0x2c
 80027ec:	fb01 f303 	mul.w	r3, r1, r3
 80027f0:	4413      	add	r3, r2
 80027f2:	3342      	adds	r3, #66	; 0x42
 80027f4:	2202      	movs	r2, #2
 80027f6:	701a      	strb	r2, [r3, #0]
      break;
 80027f8:	e04b      	b.n	8002892 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80027fa:	78bb      	ldrb	r3, [r7, #2]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d11d      	bne.n	800283c <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002800:	78fb      	ldrb	r3, [r7, #3]
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	212c      	movs	r1, #44	; 0x2c
 8002806:	fb01 f303 	mul.w	r3, r1, r3
 800280a:	4413      	add	r3, r2
 800280c:	3355      	adds	r3, #85	; 0x55
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d109      	bne.n	8002828 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002814:	78fb      	ldrb	r3, [r7, #3]
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	212c      	movs	r1, #44	; 0x2c
 800281a:	fb01 f303 	mul.w	r3, r1, r3
 800281e:	4413      	add	r3, r2
 8002820:	3342      	adds	r3, #66	; 0x42
 8002822:	2200      	movs	r2, #0
 8002824:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002826:	e034      	b.n	8002892 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002828:	78fb      	ldrb	r3, [r7, #3]
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	212c      	movs	r1, #44	; 0x2c
 800282e:	fb01 f303 	mul.w	r3, r1, r3
 8002832:	4413      	add	r3, r2
 8002834:	3342      	adds	r3, #66	; 0x42
 8002836:	2202      	movs	r2, #2
 8002838:	701a      	strb	r2, [r3, #0]
      break;
 800283a:	e02a      	b.n	8002892 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800283c:	78fb      	ldrb	r3, [r7, #3]
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	212c      	movs	r1, #44	; 0x2c
 8002842:	fb01 f303 	mul.w	r3, r1, r3
 8002846:	4413      	add	r3, r2
 8002848:	3354      	adds	r3, #84	; 0x54
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d109      	bne.n	8002864 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002850:	78fb      	ldrb	r3, [r7, #3]
 8002852:	687a      	ldr	r2, [r7, #4]
 8002854:	212c      	movs	r1, #44	; 0x2c
 8002856:	fb01 f303 	mul.w	r3, r1, r3
 800285a:	4413      	add	r3, r2
 800285c:	3342      	adds	r3, #66	; 0x42
 800285e:	2200      	movs	r2, #0
 8002860:	701a      	strb	r2, [r3, #0]
      break;
 8002862:	e016      	b.n	8002892 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002864:	78fb      	ldrb	r3, [r7, #3]
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	212c      	movs	r1, #44	; 0x2c
 800286a:	fb01 f303 	mul.w	r3, r1, r3
 800286e:	4413      	add	r3, r2
 8002870:	3342      	adds	r3, #66	; 0x42
 8002872:	2202      	movs	r2, #2
 8002874:	701a      	strb	r2, [r3, #0]
      break;
 8002876:	e00c      	b.n	8002892 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002878:	78fb      	ldrb	r3, [r7, #3]
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	212c      	movs	r1, #44	; 0x2c
 800287e:	fb01 f303 	mul.w	r3, r1, r3
 8002882:	4413      	add	r3, r2
 8002884:	3342      	adds	r3, #66	; 0x42
 8002886:	2200      	movs	r2, #0
 8002888:	701a      	strb	r2, [r3, #0]
      break;
 800288a:	e002      	b.n	8002892 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 800288c:	bf00      	nop
 800288e:	e000      	b.n	8002892 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8002890:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002892:	78fb      	ldrb	r3, [r7, #3]
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	212c      	movs	r1, #44	; 0x2c
 8002898:	fb01 f303 	mul.w	r3, r1, r3
 800289c:	4413      	add	r3, r2
 800289e:	3344      	adds	r3, #68	; 0x44
 80028a0:	697a      	ldr	r2, [r7, #20]
 80028a2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80028a4:	78fb      	ldrb	r3, [r7, #3]
 80028a6:	8b3a      	ldrh	r2, [r7, #24]
 80028a8:	6879      	ldr	r1, [r7, #4]
 80028aa:	202c      	movs	r0, #44	; 0x2c
 80028ac:	fb00 f303 	mul.w	r3, r0, r3
 80028b0:	440b      	add	r3, r1
 80028b2:	334c      	adds	r3, #76	; 0x4c
 80028b4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80028b6:	78fb      	ldrb	r3, [r7, #3]
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	212c      	movs	r1, #44	; 0x2c
 80028bc:	fb01 f303 	mul.w	r3, r1, r3
 80028c0:	4413      	add	r3, r2
 80028c2:	3360      	adds	r3, #96	; 0x60
 80028c4:	2200      	movs	r2, #0
 80028c6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80028c8:	78fb      	ldrb	r3, [r7, #3]
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	212c      	movs	r1, #44	; 0x2c
 80028ce:	fb01 f303 	mul.w	r3, r1, r3
 80028d2:	4413      	add	r3, r2
 80028d4:	3350      	adds	r3, #80	; 0x50
 80028d6:	2200      	movs	r2, #0
 80028d8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80028da:	78fb      	ldrb	r3, [r7, #3]
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	212c      	movs	r1, #44	; 0x2c
 80028e0:	fb01 f303 	mul.w	r3, r1, r3
 80028e4:	4413      	add	r3, r2
 80028e6:	3339      	adds	r3, #57	; 0x39
 80028e8:	78fa      	ldrb	r2, [r7, #3]
 80028ea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80028ec:	78fb      	ldrb	r3, [r7, #3]
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	212c      	movs	r1, #44	; 0x2c
 80028f2:	fb01 f303 	mul.w	r3, r1, r3
 80028f6:	4413      	add	r3, r2
 80028f8:	3361      	adds	r3, #97	; 0x61
 80028fa:	2200      	movs	r2, #0
 80028fc:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num]);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6818      	ldr	r0, [r3, #0]
 8002902:	78fb      	ldrb	r3, [r7, #3]
 8002904:	222c      	movs	r2, #44	; 0x2c
 8002906:	fb02 f303 	mul.w	r3, r2, r3
 800290a:	3338      	adds	r3, #56	; 0x38
 800290c:	687a      	ldr	r2, [r7, #4]
 800290e:	4413      	add	r3, r2
 8002910:	4619      	mov	r1, r3
 8002912:	f004 f8c7 	bl	8006aa4 <USB_HC_StartXfer>
 8002916:	4603      	mov	r3, r0
}
 8002918:	4618      	mov	r0, r3
 800291a:	3708      	adds	r7, #8
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}

08002920 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b086      	sub	sp, #24
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4618      	mov	r0, r3
 8002938:	f003 fe1d 	bl	8006576 <USB_GetMode>
 800293c:	4603      	mov	r3, r0
 800293e:	2b01      	cmp	r3, #1
 8002940:	f040 80f6 	bne.w	8002b30 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4618      	mov	r0, r3
 800294a:	f003 fe01 	bl	8006550 <USB_ReadInterrupts>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	f000 80ec 	beq.w	8002b2e <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4618      	mov	r0, r3
 800295c:	f003 fdf8 	bl	8006550 <USB_ReadInterrupts>
 8002960:	4603      	mov	r3, r0
 8002962:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002966:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800296a:	d104      	bne.n	8002976 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002974:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4618      	mov	r0, r3
 800297c:	f003 fde8 	bl	8006550 <USB_ReadInterrupts>
 8002980:	4603      	mov	r3, r0
 8002982:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002986:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800298a:	d104      	bne.n	8002996 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002994:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4618      	mov	r0, r3
 800299c:	f003 fdd8 	bl	8006550 <USB_ReadInterrupts>
 80029a0:	4603      	mov	r3, r0
 80029a2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80029a6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80029aa:	d104      	bne.n	80029b6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80029b4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4618      	mov	r0, r3
 80029bc:	f003 fdc8 	bl	8006550 <USB_ReadInterrupts>
 80029c0:	4603      	mov	r3, r0
 80029c2:	f003 0302 	and.w	r3, r3, #2
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d103      	bne.n	80029d2 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	2202      	movs	r2, #2
 80029d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4618      	mov	r0, r3
 80029d8:	f003 fdba 	bl	8006550 <USB_ReadInterrupts>
 80029dc:	4603      	mov	r3, r0
 80029de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80029e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029e6:	d11c      	bne.n	8002a22 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80029f0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0301 	and.w	r3, r3, #1
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d10f      	bne.n	8002a22 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002a02:	2110      	movs	r1, #16
 8002a04:	6938      	ldr	r0, [r7, #16]
 8002a06:	f003 fcad 	bl	8006364 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002a0a:	6938      	ldr	r0, [r7, #16]
 8002a0c:	f003 fcde 	bl	80063cc <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	2101      	movs	r1, #1
 8002a16:	4618      	mov	r0, r3
 8002a18:	f003 fe72 	bl	8006700 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	f00c fc6d 	bl	800f2fc <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4618      	mov	r0, r3
 8002a28:	f003 fd92 	bl	8006550 <USB_ReadInterrupts>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a32:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a36:	d102      	bne.n	8002a3e <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f001 f815 	bl	8003a68 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4618      	mov	r0, r3
 8002a44:	f003 fd84 	bl	8006550 <USB_ReadInterrupts>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	f003 0308 	and.w	r3, r3, #8
 8002a4e:	2b08      	cmp	r3, #8
 8002a50:	d106      	bne.n	8002a60 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f00c fc36 	bl	800f2c4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2208      	movs	r2, #8
 8002a5e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4618      	mov	r0, r3
 8002a66:	f003 fd73 	bl	8006550 <USB_ReadInterrupts>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	f003 0310 	and.w	r3, r3, #16
 8002a70:	2b10      	cmp	r3, #16
 8002a72:	d101      	bne.n	8002a78 <HAL_HCD_IRQHandler+0x158>
 8002a74:	2301      	movs	r3, #1
 8002a76:	e000      	b.n	8002a7a <HAL_HCD_IRQHandler+0x15a>
 8002a78:	2300      	movs	r3, #0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d012      	beq.n	8002aa4 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	699a      	ldr	r2, [r3, #24]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f022 0210 	bic.w	r2, r2, #16
 8002a8c:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f000 ff18 	bl	80038c4 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	699a      	ldr	r2, [r3, #24]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f042 0210 	orr.w	r2, r2, #16
 8002aa2:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f003 fd51 	bl	8006550 <USB_ReadInterrupts>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ab4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002ab8:	d13a      	bne.n	8002b30 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f004 f8e8 	bl	8006c94 <USB_HC_ReadInterrupt>
 8002ac4:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	617b      	str	r3, [r7, #20]
 8002aca:	e025      	b.n	8002b18 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	f003 030f 	and.w	r3, r3, #15
 8002ad2:	68ba      	ldr	r2, [r7, #8]
 8002ad4:	fa22 f303 	lsr.w	r3, r2, r3
 8002ad8:	f003 0301 	and.w	r3, r3, #1
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d018      	beq.n	8002b12 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	015a      	lsls	r2, r3, #5
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	4413      	add	r3, r2
 8002ae8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002af2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002af6:	d106      	bne.n	8002b06 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	4619      	mov	r1, r3
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f000 f8ab 	bl	8002c5a <HCD_HC_IN_IRQHandler>
 8002b04:	e005      	b.n	8002b12 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	f000 fbd7 	bl	80032c0 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	3301      	adds	r3, #1
 8002b16:	617b      	str	r3, [r7, #20]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	697a      	ldr	r2, [r7, #20]
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d3d4      	bcc.n	8002acc <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b2a:	615a      	str	r2, [r3, #20]
 8002b2c:	e000      	b.n	8002b30 <HAL_HCD_IRQHandler+0x210>
      return;
 8002b2e:	bf00      	nop
    }
  }
}
 8002b30:	3718      	adds	r7, #24
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}

08002b36 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002b36:	b580      	push	{r7, lr}
 8002b38:	b082      	sub	sp, #8
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d101      	bne.n	8002b4c <HAL_HCD_Start+0x16>
 8002b48:	2302      	movs	r3, #2
 8002b4a:	e013      	b.n	8002b74 <HAL_HCD_Start+0x3e>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	2101      	movs	r1, #1
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f003 fe34 	bl	80067c8 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4618      	mov	r0, r3
 8002b66:	f003 fb8f 	bl	8006288 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002b72:	2300      	movs	r3, #0
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3708      	adds	r7, #8
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}

08002b7c <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d101      	bne.n	8002b92 <HAL_HCD_Stop+0x16>
 8002b8e:	2302      	movs	r3, #2
 8002b90:	e00d      	b.n	8002bae <HAL_HCD_Stop+0x32>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2201      	movs	r2, #1
 8002b96:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f004 f985 	bl	8006eae <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002bac:	2300      	movs	r3, #0
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3708      	adds	r7, #8
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}

08002bb6 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002bb6:	b580      	push	{r7, lr}
 8002bb8:	b082      	sub	sp, #8
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f003 fdd6 	bl	8006774 <USB_ResetPort>
 8002bc8:	4603      	mov	r3, r0
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3708      	adds	r7, #8
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}

08002bd2 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002bd2:	b480      	push	{r7}
 8002bd4:	b083      	sub	sp, #12
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	6078      	str	r0, [r7, #4]
 8002bda:	460b      	mov	r3, r1
 8002bdc:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002bde:	78fb      	ldrb	r3, [r7, #3]
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	212c      	movs	r1, #44	; 0x2c
 8002be4:	fb01 f303 	mul.w	r3, r1, r3
 8002be8:	4413      	add	r3, r2
 8002bea:	3360      	adds	r3, #96	; 0x60
 8002bec:	781b      	ldrb	r3, [r3, #0]
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	370c      	adds	r7, #12
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr

08002bfa <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002bfa:	b480      	push	{r7}
 8002bfc:	b083      	sub	sp, #12
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	6078      	str	r0, [r7, #4]
 8002c02:	460b      	mov	r3, r1
 8002c04:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002c06:	78fb      	ldrb	r3, [r7, #3]
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	212c      	movs	r1, #44	; 0x2c
 8002c0c:	fb01 f303 	mul.w	r3, r1, r3
 8002c10:	4413      	add	r3, r2
 8002c12:	3350      	adds	r3, #80	; 0x50
 8002c14:	681b      	ldr	r3, [r3, #0]
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	370c      	adds	r7, #12
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr

08002c22 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002c22:	b580      	push	{r7, lr}
 8002c24:	b082      	sub	sp, #8
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f003 fe1a 	bl	8006868 <USB_GetCurrentFrame>
 8002c34:	4603      	mov	r3, r0
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3708      	adds	r7, #8
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}

08002c3e <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002c3e:	b580      	push	{r7, lr}
 8002c40:	b082      	sub	sp, #8
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f003 fdf5 	bl	800683a <USB_GetHostSpeed>
 8002c50:	4603      	mov	r3, r0
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3708      	adds	r7, #8
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}

08002c5a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002c5a:	b580      	push	{r7, lr}
 8002c5c:	b086      	sub	sp, #24
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	6078      	str	r0, [r7, #4]
 8002c62:	460b      	mov	r3, r1
 8002c64:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002c70:	78fb      	ldrb	r3, [r7, #3]
 8002c72:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	015a      	lsls	r2, r3, #5
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	4413      	add	r3, r2
 8002c7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	f003 0304 	and.w	r3, r3, #4
 8002c86:	2b04      	cmp	r3, #4
 8002c88:	d11a      	bne.n	8002cc0 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	015a      	lsls	r2, r3, #5
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	4413      	add	r3, r2
 8002c92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c96:	461a      	mov	r2, r3
 8002c98:	2304      	movs	r3, #4
 8002c9a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002c9c:	687a      	ldr	r2, [r7, #4]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	212c      	movs	r1, #44	; 0x2c
 8002ca2:	fb01 f303 	mul.w	r3, r1, r3
 8002ca6:	4413      	add	r3, r2
 8002ca8:	3361      	adds	r3, #97	; 0x61
 8002caa:	2206      	movs	r2, #6
 8002cac:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	68fa      	ldr	r2, [r7, #12]
 8002cb4:	b2d2      	uxtb	r2, r2
 8002cb6:	4611      	mov	r1, r2
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f003 fffc 	bl	8006cb6 <USB_HC_Halt>
 8002cbe:	e0af      	b.n	8002e20 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	015a      	lsls	r2, r3, #5
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	4413      	add	r3, r2
 8002cc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cd6:	d11b      	bne.n	8002d10 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	015a      	lsls	r2, r3, #5
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	4413      	add	r3, r2
 8002ce0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002cea:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002cec:	687a      	ldr	r2, [r7, #4]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	212c      	movs	r1, #44	; 0x2c
 8002cf2:	fb01 f303 	mul.w	r3, r1, r3
 8002cf6:	4413      	add	r3, r2
 8002cf8:	3361      	adds	r3, #97	; 0x61
 8002cfa:	2207      	movs	r2, #7
 8002cfc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	68fa      	ldr	r2, [r7, #12]
 8002d04:	b2d2      	uxtb	r2, r2
 8002d06:	4611      	mov	r1, r2
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f003 ffd4 	bl	8006cb6 <USB_HC_Halt>
 8002d0e:	e087      	b.n	8002e20 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	015a      	lsls	r2, r3, #5
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	4413      	add	r3, r2
 8002d18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	f003 0320 	and.w	r3, r3, #32
 8002d22:	2b20      	cmp	r3, #32
 8002d24:	d109      	bne.n	8002d3a <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	015a      	lsls	r2, r3, #5
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	4413      	add	r3, r2
 8002d2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d32:	461a      	mov	r2, r3
 8002d34:	2320      	movs	r3, #32
 8002d36:	6093      	str	r3, [r2, #8]
 8002d38:	e072      	b.n	8002e20 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	015a      	lsls	r2, r3, #5
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	4413      	add	r3, r2
 8002d42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	f003 0308 	and.w	r3, r3, #8
 8002d4c:	2b08      	cmp	r3, #8
 8002d4e:	d11a      	bne.n	8002d86 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	015a      	lsls	r2, r3, #5
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	4413      	add	r3, r2
 8002d58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	2308      	movs	r3, #8
 8002d60:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	212c      	movs	r1, #44	; 0x2c
 8002d68:	fb01 f303 	mul.w	r3, r1, r3
 8002d6c:	4413      	add	r3, r2
 8002d6e:	3361      	adds	r3, #97	; 0x61
 8002d70:	2205      	movs	r2, #5
 8002d72:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	68fa      	ldr	r2, [r7, #12]
 8002d7a:	b2d2      	uxtb	r2, r2
 8002d7c:	4611      	mov	r1, r2
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f003 ff99 	bl	8006cb6 <USB_HC_Halt>
 8002d84:	e04c      	b.n	8002e20 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	015a      	lsls	r2, r3, #5
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	4413      	add	r3, r2
 8002d8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d9c:	d11b      	bne.n	8002dd6 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	015a      	lsls	r2, r3, #5
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	4413      	add	r3, r2
 8002da6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002daa:	461a      	mov	r2, r3
 8002dac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002db0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	212c      	movs	r1, #44	; 0x2c
 8002db8:	fb01 f303 	mul.w	r3, r1, r3
 8002dbc:	4413      	add	r3, r2
 8002dbe:	3361      	adds	r3, #97	; 0x61
 8002dc0:	2208      	movs	r2, #8
 8002dc2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	68fa      	ldr	r2, [r7, #12]
 8002dca:	b2d2      	uxtb	r2, r2
 8002dcc:	4611      	mov	r1, r2
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f003 ff71 	bl	8006cb6 <USB_HC_Halt>
 8002dd4:	e024      	b.n	8002e20 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	015a      	lsls	r2, r3, #5
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	4413      	add	r3, r2
 8002dde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002de8:	2b80      	cmp	r3, #128	; 0x80
 8002dea:	d119      	bne.n	8002e20 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	015a      	lsls	r2, r3, #5
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	4413      	add	r3, r2
 8002df4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002df8:	461a      	mov	r2, r3
 8002dfa:	2380      	movs	r3, #128	; 0x80
 8002dfc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	212c      	movs	r1, #44	; 0x2c
 8002e04:	fb01 f303 	mul.w	r3, r1, r3
 8002e08:	4413      	add	r3, r2
 8002e0a:	3361      	adds	r3, #97	; 0x61
 8002e0c:	2206      	movs	r2, #6
 8002e0e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	68fa      	ldr	r2, [r7, #12]
 8002e16:	b2d2      	uxtb	r2, r2
 8002e18:	4611      	mov	r1, r2
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f003 ff4b 	bl	8006cb6 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	015a      	lsls	r2, r3, #5
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	4413      	add	r3, r2
 8002e28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e36:	d112      	bne.n	8002e5e <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	68fa      	ldr	r2, [r7, #12]
 8002e3e:	b2d2      	uxtb	r2, r2
 8002e40:	4611      	mov	r1, r2
 8002e42:	4618      	mov	r0, r3
 8002e44:	f003 ff37 	bl	8006cb6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	015a      	lsls	r2, r3, #5
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	4413      	add	r3, r2
 8002e50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e54:	461a      	mov	r2, r3
 8002e56:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e5a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002e5c:	e22c      	b.n	80032b8 <HCD_HC_IN_IRQHandler+0x65e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	015a      	lsls	r2, r3, #5
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	4413      	add	r3, r2
 8002e66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	f003 0301 	and.w	r3, r3, #1
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	f040 80c1 	bne.w	8002ff8 <HCD_HC_IN_IRQHandler+0x39e>
    hhcd->hc[ch_num].state = HC_XFRC;
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	212c      	movs	r1, #44	; 0x2c
 8002e7c:	fb01 f303 	mul.w	r3, r1, r3
 8002e80:	4413      	add	r3, r2
 8002e82:	3361      	adds	r3, #97	; 0x61
 8002e84:	2201      	movs	r2, #1
 8002e86:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	212c      	movs	r1, #44	; 0x2c
 8002e8e:	fb01 f303 	mul.w	r3, r1, r3
 8002e92:	4413      	add	r3, r2
 8002e94:	335c      	adds	r3, #92	; 0x5c
 8002e96:	2200      	movs	r2, #0
 8002e98:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	015a      	lsls	r2, r3, #5
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	4413      	add	r3, r2
 8002ea2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	212c      	movs	r1, #44	; 0x2c
 8002eb2:	fb01 f303 	mul.w	r3, r1, r3
 8002eb6:	4413      	add	r3, r2
 8002eb8:	333f      	adds	r3, #63	; 0x3f
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d009      	beq.n	8002ed4 <HCD_HC_IN_IRQHandler+0x27a>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002ec0:	687a      	ldr	r2, [r7, #4]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	212c      	movs	r1, #44	; 0x2c
 8002ec6:	fb01 f303 	mul.w	r3, r1, r3
 8002eca:	4413      	add	r3, r2
 8002ecc:	333f      	adds	r3, #63	; 0x3f
 8002ece:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002ed0:	2b02      	cmp	r3, #2
 8002ed2:	d111      	bne.n	8002ef8 <HCD_HC_IN_IRQHandler+0x29e>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	68fa      	ldr	r2, [r7, #12]
 8002eda:	b2d2      	uxtb	r2, r2
 8002edc:	4611      	mov	r1, r2
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f003 fee9 	bl	8006cb6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	015a      	lsls	r2, r3, #5
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	4413      	add	r3, r2
 8002eec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ef0:	461a      	mov	r2, r3
 8002ef2:	2310      	movs	r3, #16
 8002ef4:	6093      	str	r3, [r2, #8]
 8002ef6:	e03a      	b.n	8002f6e <HCD_HC_IN_IRQHandler+0x314>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002ef8:	687a      	ldr	r2, [r7, #4]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	212c      	movs	r1, #44	; 0x2c
 8002efe:	fb01 f303 	mul.w	r3, r1, r3
 8002f02:	4413      	add	r3, r2
 8002f04:	333f      	adds	r3, #63	; 0x3f
 8002f06:	781b      	ldrb	r3, [r3, #0]
 8002f08:	2b03      	cmp	r3, #3
 8002f0a:	d009      	beq.n	8002f20 <HCD_HC_IN_IRQHandler+0x2c6>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002f0c:	687a      	ldr	r2, [r7, #4]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	212c      	movs	r1, #44	; 0x2c
 8002f12:	fb01 f303 	mul.w	r3, r1, r3
 8002f16:	4413      	add	r3, r2
 8002f18:	333f      	adds	r3, #63	; 0x3f
 8002f1a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d126      	bne.n	8002f6e <HCD_HC_IN_IRQHandler+0x314>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	015a      	lsls	r2, r3, #5
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	4413      	add	r3, r2
 8002f28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	68fa      	ldr	r2, [r7, #12]
 8002f30:	0151      	lsls	r1, r2, #5
 8002f32:	693a      	ldr	r2, [r7, #16]
 8002f34:	440a      	add	r2, r1
 8002f36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f3a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002f3e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	212c      	movs	r1, #44	; 0x2c
 8002f46:	fb01 f303 	mul.w	r3, r1, r3
 8002f4a:	4413      	add	r3, r2
 8002f4c:	3360      	adds	r3, #96	; 0x60
 8002f4e:	2201      	movs	r2, #1
 8002f50:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	b2d9      	uxtb	r1, r3
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	202c      	movs	r0, #44	; 0x2c
 8002f5c:	fb00 f303 	mul.w	r3, r0, r3
 8002f60:	4413      	add	r3, r2
 8002f62:	3360      	adds	r3, #96	; 0x60
 8002f64:	781b      	ldrb	r3, [r3, #0]
 8002f66:	461a      	mov	r2, r3
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	f00c f9d5 	bl	800f318 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	691b      	ldr	r3, [r3, #16]
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d12b      	bne.n	8002fce <HCD_HC_IN_IRQHandler+0x374>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	212c      	movs	r1, #44	; 0x2c
 8002f7c:	fb01 f303 	mul.w	r3, r1, r3
 8002f80:	4413      	add	r3, r2
 8002f82:	3348      	adds	r3, #72	; 0x48
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	6879      	ldr	r1, [r7, #4]
 8002f88:	68fa      	ldr	r2, [r7, #12]
 8002f8a:	202c      	movs	r0, #44	; 0x2c
 8002f8c:	fb00 f202 	mul.w	r2, r0, r2
 8002f90:	440a      	add	r2, r1
 8002f92:	3240      	adds	r2, #64	; 0x40
 8002f94:	8812      	ldrh	r2, [r2, #0]
 8002f96:	fbb3 f3f2 	udiv	r3, r3, r2
 8002f9a:	f003 0301 	and.w	r3, r3, #1
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	f000 818a 	beq.w	80032b8 <HCD_HC_IN_IRQHandler+0x65e>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002fa4:	687a      	ldr	r2, [r7, #4]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	212c      	movs	r1, #44	; 0x2c
 8002faa:	fb01 f303 	mul.w	r3, r1, r3
 8002fae:	4413      	add	r3, r2
 8002fb0:	3354      	adds	r3, #84	; 0x54
 8002fb2:	781b      	ldrb	r3, [r3, #0]
 8002fb4:	f083 0301 	eor.w	r3, r3, #1
 8002fb8:	b2d8      	uxtb	r0, r3
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	212c      	movs	r1, #44	; 0x2c
 8002fc0:	fb01 f303 	mul.w	r3, r1, r3
 8002fc4:	4413      	add	r3, r2
 8002fc6:	3354      	adds	r3, #84	; 0x54
 8002fc8:	4602      	mov	r2, r0
 8002fca:	701a      	strb	r2, [r3, #0]
}
 8002fcc:	e174      	b.n	80032b8 <HCD_HC_IN_IRQHandler+0x65e>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	212c      	movs	r1, #44	; 0x2c
 8002fd4:	fb01 f303 	mul.w	r3, r1, r3
 8002fd8:	4413      	add	r3, r2
 8002fda:	3354      	adds	r3, #84	; 0x54
 8002fdc:	781b      	ldrb	r3, [r3, #0]
 8002fde:	f083 0301 	eor.w	r3, r3, #1
 8002fe2:	b2d8      	uxtb	r0, r3
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	212c      	movs	r1, #44	; 0x2c
 8002fea:	fb01 f303 	mul.w	r3, r1, r3
 8002fee:	4413      	add	r3, r2
 8002ff0:	3354      	adds	r3, #84	; 0x54
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	701a      	strb	r2, [r3, #0]
}
 8002ff6:	e15f      	b.n	80032b8 <HCD_HC_IN_IRQHandler+0x65e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	015a      	lsls	r2, r3, #5
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	4413      	add	r3, r2
 8003000:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	f003 0302 	and.w	r3, r3, #2
 800300a:	2b02      	cmp	r3, #2
 800300c:	f040 80f6 	bne.w	80031fc <HCD_HC_IN_IRQHandler+0x5a2>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	212c      	movs	r1, #44	; 0x2c
 8003016:	fb01 f303 	mul.w	r3, r1, r3
 800301a:	4413      	add	r3, r2
 800301c:	3361      	adds	r3, #97	; 0x61
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	2b01      	cmp	r3, #1
 8003022:	d109      	bne.n	8003038 <HCD_HC_IN_IRQHandler+0x3de>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003024:	687a      	ldr	r2, [r7, #4]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	212c      	movs	r1, #44	; 0x2c
 800302a:	fb01 f303 	mul.w	r3, r1, r3
 800302e:	4413      	add	r3, r2
 8003030:	3360      	adds	r3, #96	; 0x60
 8003032:	2201      	movs	r2, #1
 8003034:	701a      	strb	r2, [r3, #0]
 8003036:	e0c9      	b.n	80031cc <HCD_HC_IN_IRQHandler+0x572>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003038:	687a      	ldr	r2, [r7, #4]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	212c      	movs	r1, #44	; 0x2c
 800303e:	fb01 f303 	mul.w	r3, r1, r3
 8003042:	4413      	add	r3, r2
 8003044:	3361      	adds	r3, #97	; 0x61
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	2b05      	cmp	r3, #5
 800304a:	d109      	bne.n	8003060 <HCD_HC_IN_IRQHandler+0x406>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800304c:	687a      	ldr	r2, [r7, #4]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	212c      	movs	r1, #44	; 0x2c
 8003052:	fb01 f303 	mul.w	r3, r1, r3
 8003056:	4413      	add	r3, r2
 8003058:	3360      	adds	r3, #96	; 0x60
 800305a:	2205      	movs	r2, #5
 800305c:	701a      	strb	r2, [r3, #0]
 800305e:	e0b5      	b.n	80031cc <HCD_HC_IN_IRQHandler+0x572>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	212c      	movs	r1, #44	; 0x2c
 8003066:	fb01 f303 	mul.w	r3, r1, r3
 800306a:	4413      	add	r3, r2
 800306c:	3361      	adds	r3, #97	; 0x61
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	2b06      	cmp	r3, #6
 8003072:	d009      	beq.n	8003088 <HCD_HC_IN_IRQHandler+0x42e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	212c      	movs	r1, #44	; 0x2c
 800307a:	fb01 f303 	mul.w	r3, r1, r3
 800307e:	4413      	add	r3, r2
 8003080:	3361      	adds	r3, #97	; 0x61
 8003082:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003084:	2b08      	cmp	r3, #8
 8003086:	d150      	bne.n	800312a <HCD_HC_IN_IRQHandler+0x4d0>
      hhcd->hc[ch_num].ErrCnt++;
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	212c      	movs	r1, #44	; 0x2c
 800308e:	fb01 f303 	mul.w	r3, r1, r3
 8003092:	4413      	add	r3, r2
 8003094:	335c      	adds	r3, #92	; 0x5c
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	1c5a      	adds	r2, r3, #1
 800309a:	6879      	ldr	r1, [r7, #4]
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	202c      	movs	r0, #44	; 0x2c
 80030a0:	fb00 f303 	mul.w	r3, r0, r3
 80030a4:	440b      	add	r3, r1
 80030a6:	335c      	adds	r3, #92	; 0x5c
 80030a8:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	212c      	movs	r1, #44	; 0x2c
 80030b0:	fb01 f303 	mul.w	r3, r1, r3
 80030b4:	4413      	add	r3, r2
 80030b6:	335c      	adds	r3, #92	; 0x5c
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d912      	bls.n	80030e4 <HCD_HC_IN_IRQHandler+0x48a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	212c      	movs	r1, #44	; 0x2c
 80030c4:	fb01 f303 	mul.w	r3, r1, r3
 80030c8:	4413      	add	r3, r2
 80030ca:	335c      	adds	r3, #92	; 0x5c
 80030cc:	2200      	movs	r2, #0
 80030ce:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	212c      	movs	r1, #44	; 0x2c
 80030d6:	fb01 f303 	mul.w	r3, r1, r3
 80030da:	4413      	add	r3, r2
 80030dc:	3360      	adds	r3, #96	; 0x60
 80030de:	2204      	movs	r2, #4
 80030e0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80030e2:	e073      	b.n	80031cc <HCD_HC_IN_IRQHandler+0x572>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	212c      	movs	r1, #44	; 0x2c
 80030ea:	fb01 f303 	mul.w	r3, r1, r3
 80030ee:	4413      	add	r3, r2
 80030f0:	3360      	adds	r3, #96	; 0x60
 80030f2:	2202      	movs	r2, #2
 80030f4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	015a      	lsls	r2, r3, #5
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	4413      	add	r3, r2
 80030fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800310c:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003114:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	015a      	lsls	r2, r3, #5
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	4413      	add	r3, r2
 800311e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003122:	461a      	mov	r2, r3
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003128:	e050      	b.n	80031cc <HCD_HC_IN_IRQHandler+0x572>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	212c      	movs	r1, #44	; 0x2c
 8003130:	fb01 f303 	mul.w	r3, r1, r3
 8003134:	4413      	add	r3, r2
 8003136:	3361      	adds	r3, #97	; 0x61
 8003138:	781b      	ldrb	r3, [r3, #0]
 800313a:	2b03      	cmp	r3, #3
 800313c:	d122      	bne.n	8003184 <HCD_HC_IN_IRQHandler+0x52a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	212c      	movs	r1, #44	; 0x2c
 8003144:	fb01 f303 	mul.w	r3, r1, r3
 8003148:	4413      	add	r3, r2
 800314a:	3360      	adds	r3, #96	; 0x60
 800314c:	2202      	movs	r2, #2
 800314e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	015a      	lsls	r2, r3, #5
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	4413      	add	r3, r2
 8003158:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003166:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800316e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	015a      	lsls	r2, r3, #5
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	4413      	add	r3, r2
 8003178:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800317c:	461a      	mov	r2, r3
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	6013      	str	r3, [r2, #0]
 8003182:	e023      	b.n	80031cc <HCD_HC_IN_IRQHandler+0x572>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003184:	687a      	ldr	r2, [r7, #4]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	212c      	movs	r1, #44	; 0x2c
 800318a:	fb01 f303 	mul.w	r3, r1, r3
 800318e:	4413      	add	r3, r2
 8003190:	3361      	adds	r3, #97	; 0x61
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	2b07      	cmp	r3, #7
 8003196:	d119      	bne.n	80031cc <HCD_HC_IN_IRQHandler+0x572>
      hhcd->hc[ch_num].ErrCnt++;
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	212c      	movs	r1, #44	; 0x2c
 800319e:	fb01 f303 	mul.w	r3, r1, r3
 80031a2:	4413      	add	r3, r2
 80031a4:	335c      	adds	r3, #92	; 0x5c
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	1c5a      	adds	r2, r3, #1
 80031aa:	6879      	ldr	r1, [r7, #4]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	202c      	movs	r0, #44	; 0x2c
 80031b0:	fb00 f303 	mul.w	r3, r0, r3
 80031b4:	440b      	add	r3, r1
 80031b6:	335c      	adds	r3, #92	; 0x5c
 80031b8:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	212c      	movs	r1, #44	; 0x2c
 80031c0:	fb01 f303 	mul.w	r3, r1, r3
 80031c4:	4413      	add	r3, r2
 80031c6:	3360      	adds	r3, #96	; 0x60
 80031c8:	2204      	movs	r2, #4
 80031ca:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	015a      	lsls	r2, r3, #5
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	4413      	add	r3, r2
 80031d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031d8:	461a      	mov	r2, r3
 80031da:	2302      	movs	r3, #2
 80031dc:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	b2d9      	uxtb	r1, r3
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	202c      	movs	r0, #44	; 0x2c
 80031e8:	fb00 f303 	mul.w	r3, r0, r3
 80031ec:	4413      	add	r3, r2
 80031ee:	3360      	adds	r3, #96	; 0x60
 80031f0:	781b      	ldrb	r3, [r3, #0]
 80031f2:	461a      	mov	r2, r3
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f00c f88f 	bl	800f318 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80031fa:	e05d      	b.n	80032b8 <HCD_HC_IN_IRQHandler+0x65e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	015a      	lsls	r2, r3, #5
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	4413      	add	r3, r2
 8003204:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	f003 0310 	and.w	r3, r3, #16
 800320e:	2b10      	cmp	r3, #16
 8003210:	d152      	bne.n	80032b8 <HCD_HC_IN_IRQHandler+0x65e>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	212c      	movs	r1, #44	; 0x2c
 8003218:	fb01 f303 	mul.w	r3, r1, r3
 800321c:	4413      	add	r3, r2
 800321e:	333f      	adds	r3, #63	; 0x3f
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	2b03      	cmp	r3, #3
 8003224:	d111      	bne.n	800324a <HCD_HC_IN_IRQHandler+0x5f0>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	212c      	movs	r1, #44	; 0x2c
 800322c:	fb01 f303 	mul.w	r3, r1, r3
 8003230:	4413      	add	r3, r2
 8003232:	335c      	adds	r3, #92	; 0x5c
 8003234:	2200      	movs	r2, #0
 8003236:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	68fa      	ldr	r2, [r7, #12]
 800323e:	b2d2      	uxtb	r2, r2
 8003240:	4611      	mov	r1, r2
 8003242:	4618      	mov	r0, r3
 8003244:	f003 fd37 	bl	8006cb6 <USB_HC_Halt>
 8003248:	e02d      	b.n	80032a6 <HCD_HC_IN_IRQHandler+0x64c>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	212c      	movs	r1, #44	; 0x2c
 8003250:	fb01 f303 	mul.w	r3, r1, r3
 8003254:	4413      	add	r3, r2
 8003256:	333f      	adds	r3, #63	; 0x3f
 8003258:	781b      	ldrb	r3, [r3, #0]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d009      	beq.n	8003272 <HCD_HC_IN_IRQHandler+0x618>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800325e:	687a      	ldr	r2, [r7, #4]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	212c      	movs	r1, #44	; 0x2c
 8003264:	fb01 f303 	mul.w	r3, r1, r3
 8003268:	4413      	add	r3, r2
 800326a:	333f      	adds	r3, #63	; 0x3f
 800326c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800326e:	2b02      	cmp	r3, #2
 8003270:	d119      	bne.n	80032a6 <HCD_HC_IN_IRQHandler+0x64c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	212c      	movs	r1, #44	; 0x2c
 8003278:	fb01 f303 	mul.w	r3, r1, r3
 800327c:	4413      	add	r3, r2
 800327e:	335c      	adds	r3, #92	; 0x5c
 8003280:	2200      	movs	r2, #0
 8003282:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_NAK;
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	212c      	movs	r1, #44	; 0x2c
 800328a:	fb01 f303 	mul.w	r3, r1, r3
 800328e:	4413      	add	r3, r2
 8003290:	3361      	adds	r3, #97	; 0x61
 8003292:	2203      	movs	r2, #3
 8003294:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	68fa      	ldr	r2, [r7, #12]
 800329c:	b2d2      	uxtb	r2, r2
 800329e:	4611      	mov	r1, r2
 80032a0:	4618      	mov	r0, r3
 80032a2:	f003 fd08 	bl	8006cb6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	015a      	lsls	r2, r3, #5
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	4413      	add	r3, r2
 80032ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032b2:	461a      	mov	r2, r3
 80032b4:	2310      	movs	r3, #16
 80032b6:	6093      	str	r3, [r2, #8]
}
 80032b8:	bf00      	nop
 80032ba:	3718      	adds	r7, #24
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}

080032c0 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b088      	sub	sp, #32
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	460b      	mov	r3, r1
 80032ca:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80032d6:	78fb      	ldrb	r3, [r7, #3]
 80032d8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	015a      	lsls	r2, r3, #5
 80032de:	69bb      	ldr	r3, [r7, #24]
 80032e0:	4413      	add	r3, r2
 80032e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	f003 0304 	and.w	r3, r3, #4
 80032ec:	2b04      	cmp	r3, #4
 80032ee:	d11a      	bne.n	8003326 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	015a      	lsls	r2, r3, #5
 80032f4:	69bb      	ldr	r3, [r7, #24]
 80032f6:	4413      	add	r3, r2
 80032f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032fc:	461a      	mov	r2, r3
 80032fe:	2304      	movs	r3, #4
 8003300:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	212c      	movs	r1, #44	; 0x2c
 8003308:	fb01 f303 	mul.w	r3, r1, r3
 800330c:	4413      	add	r3, r2
 800330e:	3361      	adds	r3, #97	; 0x61
 8003310:	2206      	movs	r2, #6
 8003312:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	697a      	ldr	r2, [r7, #20]
 800331a:	b2d2      	uxtb	r2, r2
 800331c:	4611      	mov	r1, r2
 800331e:	4618      	mov	r0, r3
 8003320:	f003 fcc9 	bl	8006cb6 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8003324:	e2ca      	b.n	80038bc <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	015a      	lsls	r2, r3, #5
 800332a:	69bb      	ldr	r3, [r7, #24]
 800332c:	4413      	add	r3, r2
 800332e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	f003 0320 	and.w	r3, r3, #32
 8003338:	2b20      	cmp	r3, #32
 800333a:	d12e      	bne.n	800339a <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	015a      	lsls	r2, r3, #5
 8003340:	69bb      	ldr	r3, [r7, #24]
 8003342:	4413      	add	r3, r2
 8003344:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003348:	461a      	mov	r2, r3
 800334a:	2320      	movs	r3, #32
 800334c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	212c      	movs	r1, #44	; 0x2c
 8003354:	fb01 f303 	mul.w	r3, r1, r3
 8003358:	4413      	add	r3, r2
 800335a:	333d      	adds	r3, #61	; 0x3d
 800335c:	781b      	ldrb	r3, [r3, #0]
 800335e:	2b01      	cmp	r3, #1
 8003360:	f040 82ac 	bne.w	80038bc <HCD_HC_OUT_IRQHandler+0x5fc>
      hhcd->hc[ch_num].do_ping = 0U;
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	212c      	movs	r1, #44	; 0x2c
 800336a:	fb01 f303 	mul.w	r3, r1, r3
 800336e:	4413      	add	r3, r2
 8003370:	333d      	adds	r3, #61	; 0x3d
 8003372:	2200      	movs	r2, #0
 8003374:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003376:	687a      	ldr	r2, [r7, #4]
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	212c      	movs	r1, #44	; 0x2c
 800337c:	fb01 f303 	mul.w	r3, r1, r3
 8003380:	4413      	add	r3, r2
 8003382:	3360      	adds	r3, #96	; 0x60
 8003384:	2202      	movs	r2, #2
 8003386:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	697a      	ldr	r2, [r7, #20]
 800338e:	b2d2      	uxtb	r2, r2
 8003390:	4611      	mov	r1, r2
 8003392:	4618      	mov	r0, r3
 8003394:	f003 fc8f 	bl	8006cb6 <USB_HC_Halt>
}
 8003398:	e290      	b.n	80038bc <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	015a      	lsls	r2, r3, #5
 800339e:	69bb      	ldr	r3, [r7, #24]
 80033a0:	4413      	add	r3, r2
 80033a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033b0:	d112      	bne.n	80033d8 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	015a      	lsls	r2, r3, #5
 80033b6:	69bb      	ldr	r3, [r7, #24]
 80033b8:	4413      	add	r3, r2
 80033ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033be:	461a      	mov	r2, r3
 80033c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80033c4:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	697a      	ldr	r2, [r7, #20]
 80033cc:	b2d2      	uxtb	r2, r2
 80033ce:	4611      	mov	r1, r2
 80033d0:	4618      	mov	r0, r3
 80033d2:	f003 fc70 	bl	8006cb6 <USB_HC_Halt>
}
 80033d6:	e271      	b.n	80038bc <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	015a      	lsls	r2, r3, #5
 80033dc:	69bb      	ldr	r3, [r7, #24]
 80033de:	4413      	add	r3, r2
 80033e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	f003 0301 	and.w	r3, r3, #1
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d140      	bne.n	8003470 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80033ee:	687a      	ldr	r2, [r7, #4]
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	212c      	movs	r1, #44	; 0x2c
 80033f4:	fb01 f303 	mul.w	r3, r1, r3
 80033f8:	4413      	add	r3, r2
 80033fa:	335c      	adds	r3, #92	; 0x5c
 80033fc:	2200      	movs	r2, #0
 80033fe:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	015a      	lsls	r2, r3, #5
 8003404:	69bb      	ldr	r3, [r7, #24]
 8003406:	4413      	add	r3, r2
 8003408:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003412:	2b40      	cmp	r3, #64	; 0x40
 8003414:	d111      	bne.n	800343a <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	212c      	movs	r1, #44	; 0x2c
 800341c:	fb01 f303 	mul.w	r3, r1, r3
 8003420:	4413      	add	r3, r2
 8003422:	333d      	adds	r3, #61	; 0x3d
 8003424:	2201      	movs	r2, #1
 8003426:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	015a      	lsls	r2, r3, #5
 800342c:	69bb      	ldr	r3, [r7, #24]
 800342e:	4413      	add	r3, r2
 8003430:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003434:	461a      	mov	r2, r3
 8003436:	2340      	movs	r3, #64	; 0x40
 8003438:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	015a      	lsls	r2, r3, #5
 800343e:	69bb      	ldr	r3, [r7, #24]
 8003440:	4413      	add	r3, r2
 8003442:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003446:	461a      	mov	r2, r3
 8003448:	2301      	movs	r3, #1
 800344a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	212c      	movs	r1, #44	; 0x2c
 8003452:	fb01 f303 	mul.w	r3, r1, r3
 8003456:	4413      	add	r3, r2
 8003458:	3361      	adds	r3, #97	; 0x61
 800345a:	2201      	movs	r2, #1
 800345c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	697a      	ldr	r2, [r7, #20]
 8003464:	b2d2      	uxtb	r2, r2
 8003466:	4611      	mov	r1, r2
 8003468:	4618      	mov	r0, r3
 800346a:	f003 fc24 	bl	8006cb6 <USB_HC_Halt>
}
 800346e:	e225      	b.n	80038bc <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	015a      	lsls	r2, r3, #5
 8003474:	69bb      	ldr	r3, [r7, #24]
 8003476:	4413      	add	r3, r2
 8003478:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003482:	2b40      	cmp	r3, #64	; 0x40
 8003484:	d12c      	bne.n	80034e0 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	212c      	movs	r1, #44	; 0x2c
 800348c:	fb01 f303 	mul.w	r3, r1, r3
 8003490:	4413      	add	r3, r2
 8003492:	3361      	adds	r3, #97	; 0x61
 8003494:	2204      	movs	r2, #4
 8003496:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003498:	687a      	ldr	r2, [r7, #4]
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	212c      	movs	r1, #44	; 0x2c
 800349e:	fb01 f303 	mul.w	r3, r1, r3
 80034a2:	4413      	add	r3, r2
 80034a4:	333d      	adds	r3, #61	; 0x3d
 80034a6:	2201      	movs	r2, #1
 80034a8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	212c      	movs	r1, #44	; 0x2c
 80034b0:	fb01 f303 	mul.w	r3, r1, r3
 80034b4:	4413      	add	r3, r2
 80034b6:	335c      	adds	r3, #92	; 0x5c
 80034b8:	2200      	movs	r2, #0
 80034ba:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	697a      	ldr	r2, [r7, #20]
 80034c2:	b2d2      	uxtb	r2, r2
 80034c4:	4611      	mov	r1, r2
 80034c6:	4618      	mov	r0, r3
 80034c8:	f003 fbf5 	bl	8006cb6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	015a      	lsls	r2, r3, #5
 80034d0:	69bb      	ldr	r3, [r7, #24]
 80034d2:	4413      	add	r3, r2
 80034d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034d8:	461a      	mov	r2, r3
 80034da:	2340      	movs	r3, #64	; 0x40
 80034dc:	6093      	str	r3, [r2, #8]
}
 80034de:	e1ed      	b.n	80038bc <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	015a      	lsls	r2, r3, #5
 80034e4:	69bb      	ldr	r3, [r7, #24]
 80034e6:	4413      	add	r3, r2
 80034e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	f003 0308 	and.w	r3, r3, #8
 80034f2:	2b08      	cmp	r3, #8
 80034f4:	d11a      	bne.n	800352c <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	015a      	lsls	r2, r3, #5
 80034fa:	69bb      	ldr	r3, [r7, #24]
 80034fc:	4413      	add	r3, r2
 80034fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003502:	461a      	mov	r2, r3
 8003504:	2308      	movs	r3, #8
 8003506:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	212c      	movs	r1, #44	; 0x2c
 800350e:	fb01 f303 	mul.w	r3, r1, r3
 8003512:	4413      	add	r3, r2
 8003514:	3361      	adds	r3, #97	; 0x61
 8003516:	2205      	movs	r2, #5
 8003518:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	697a      	ldr	r2, [r7, #20]
 8003520:	b2d2      	uxtb	r2, r2
 8003522:	4611      	mov	r1, r2
 8003524:	4618      	mov	r0, r3
 8003526:	f003 fbc6 	bl	8006cb6 <USB_HC_Halt>
}
 800352a:	e1c7      	b.n	80038bc <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	015a      	lsls	r2, r3, #5
 8003530:	69bb      	ldr	r3, [r7, #24]
 8003532:	4413      	add	r3, r2
 8003534:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	f003 0310 	and.w	r3, r3, #16
 800353e:	2b10      	cmp	r3, #16
 8003540:	d123      	bne.n	800358a <HCD_HC_OUT_IRQHandler+0x2ca>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	212c      	movs	r1, #44	; 0x2c
 8003548:	fb01 f303 	mul.w	r3, r1, r3
 800354c:	4413      	add	r3, r2
 800354e:	335c      	adds	r3, #92	; 0x5c
 8003550:	2200      	movs	r2, #0
 8003552:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003554:	687a      	ldr	r2, [r7, #4]
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	212c      	movs	r1, #44	; 0x2c
 800355a:	fb01 f303 	mul.w	r3, r1, r3
 800355e:	4413      	add	r3, r2
 8003560:	3361      	adds	r3, #97	; 0x61
 8003562:	2203      	movs	r2, #3
 8003564:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	697a      	ldr	r2, [r7, #20]
 800356c:	b2d2      	uxtb	r2, r2
 800356e:	4611      	mov	r1, r2
 8003570:	4618      	mov	r0, r3
 8003572:	f003 fba0 	bl	8006cb6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	015a      	lsls	r2, r3, #5
 800357a:	69bb      	ldr	r3, [r7, #24]
 800357c:	4413      	add	r3, r2
 800357e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003582:	461a      	mov	r2, r3
 8003584:	2310      	movs	r3, #16
 8003586:	6093      	str	r3, [r2, #8]
}
 8003588:	e198      	b.n	80038bc <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	015a      	lsls	r2, r3, #5
 800358e:	69bb      	ldr	r3, [r7, #24]
 8003590:	4413      	add	r3, r2
 8003592:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800359c:	2b80      	cmp	r3, #128	; 0x80
 800359e:	d11a      	bne.n	80035d6 <HCD_HC_OUT_IRQHandler+0x316>
    hhcd->hc[ch_num].state = HC_XACTERR;
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	212c      	movs	r1, #44	; 0x2c
 80035a6:	fb01 f303 	mul.w	r3, r1, r3
 80035aa:	4413      	add	r3, r2
 80035ac:	3361      	adds	r3, #97	; 0x61
 80035ae:	2206      	movs	r2, #6
 80035b0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	697a      	ldr	r2, [r7, #20]
 80035b8:	b2d2      	uxtb	r2, r2
 80035ba:	4611      	mov	r1, r2
 80035bc:	4618      	mov	r0, r3
 80035be:	f003 fb7a 	bl	8006cb6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	015a      	lsls	r2, r3, #5
 80035c6:	69bb      	ldr	r3, [r7, #24]
 80035c8:	4413      	add	r3, r2
 80035ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035ce:	461a      	mov	r2, r3
 80035d0:	2380      	movs	r3, #128	; 0x80
 80035d2:	6093      	str	r3, [r2, #8]
}
 80035d4:	e172      	b.n	80038bc <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	015a      	lsls	r2, r3, #5
 80035da:	69bb      	ldr	r3, [r7, #24]
 80035dc:	4413      	add	r3, r2
 80035de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035ec:	d11b      	bne.n	8003626 <HCD_HC_OUT_IRQHandler+0x366>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	212c      	movs	r1, #44	; 0x2c
 80035f4:	fb01 f303 	mul.w	r3, r1, r3
 80035f8:	4413      	add	r3, r2
 80035fa:	3361      	adds	r3, #97	; 0x61
 80035fc:	2208      	movs	r2, #8
 80035fe:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	697a      	ldr	r2, [r7, #20]
 8003606:	b2d2      	uxtb	r2, r2
 8003608:	4611      	mov	r1, r2
 800360a:	4618      	mov	r0, r3
 800360c:	f003 fb53 	bl	8006cb6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	015a      	lsls	r2, r3, #5
 8003614:	69bb      	ldr	r3, [r7, #24]
 8003616:	4413      	add	r3, r2
 8003618:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800361c:	461a      	mov	r2, r3
 800361e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003622:	6093      	str	r3, [r2, #8]
}
 8003624:	e14a      	b.n	80038bc <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	015a      	lsls	r2, r3, #5
 800362a:	69bb      	ldr	r3, [r7, #24]
 800362c:	4413      	add	r3, r2
 800362e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	f003 0302 	and.w	r3, r3, #2
 8003638:	2b02      	cmp	r3, #2
 800363a:	f040 813f 	bne.w	80038bc <HCD_HC_OUT_IRQHandler+0x5fc>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800363e:	687a      	ldr	r2, [r7, #4]
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	212c      	movs	r1, #44	; 0x2c
 8003644:	fb01 f303 	mul.w	r3, r1, r3
 8003648:	4413      	add	r3, r2
 800364a:	3361      	adds	r3, #97	; 0x61
 800364c:	781b      	ldrb	r3, [r3, #0]
 800364e:	2b01      	cmp	r3, #1
 8003650:	d17d      	bne.n	800374e <HCD_HC_OUT_IRQHandler+0x48e>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	212c      	movs	r1, #44	; 0x2c
 8003658:	fb01 f303 	mul.w	r3, r1, r3
 800365c:	4413      	add	r3, r2
 800365e:	3360      	adds	r3, #96	; 0x60
 8003660:	2201      	movs	r2, #1
 8003662:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003664:	687a      	ldr	r2, [r7, #4]
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	212c      	movs	r1, #44	; 0x2c
 800366a:	fb01 f303 	mul.w	r3, r1, r3
 800366e:	4413      	add	r3, r2
 8003670:	333f      	adds	r3, #63	; 0x3f
 8003672:	781b      	ldrb	r3, [r3, #0]
 8003674:	2b02      	cmp	r3, #2
 8003676:	d00a      	beq.n	800368e <HCD_HC_OUT_IRQHandler+0x3ce>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003678:	687a      	ldr	r2, [r7, #4]
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	212c      	movs	r1, #44	; 0x2c
 800367e:	fb01 f303 	mul.w	r3, r1, r3
 8003682:	4413      	add	r3, r2
 8003684:	333f      	adds	r3, #63	; 0x3f
 8003686:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003688:	2b03      	cmp	r3, #3
 800368a:	f040 8100 	bne.w	800388e <HCD_HC_OUT_IRQHandler+0x5ce>
        if (hhcd->Init.dma_enable == 0U)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	691b      	ldr	r3, [r3, #16]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d113      	bne.n	80036be <HCD_HC_OUT_IRQHandler+0x3fe>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003696:	687a      	ldr	r2, [r7, #4]
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	212c      	movs	r1, #44	; 0x2c
 800369c:	fb01 f303 	mul.w	r3, r1, r3
 80036a0:	4413      	add	r3, r2
 80036a2:	3355      	adds	r3, #85	; 0x55
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	f083 0301 	eor.w	r3, r3, #1
 80036aa:	b2d8      	uxtb	r0, r3
 80036ac:	687a      	ldr	r2, [r7, #4]
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	212c      	movs	r1, #44	; 0x2c
 80036b2:	fb01 f303 	mul.w	r3, r1, r3
 80036b6:	4413      	add	r3, r2
 80036b8:	3355      	adds	r3, #85	; 0x55
 80036ba:	4602      	mov	r2, r0
 80036bc:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	691b      	ldr	r3, [r3, #16]
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	f040 80e3 	bne.w	800388e <HCD_HC_OUT_IRQHandler+0x5ce>
 80036c8:	687a      	ldr	r2, [r7, #4]
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	212c      	movs	r1, #44	; 0x2c
 80036ce:	fb01 f303 	mul.w	r3, r1, r3
 80036d2:	4413      	add	r3, r2
 80036d4:	334c      	adds	r3, #76	; 0x4c
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	f000 80d8 	beq.w	800388e <HCD_HC_OUT_IRQHandler+0x5ce>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	212c      	movs	r1, #44	; 0x2c
 80036e4:	fb01 f303 	mul.w	r3, r1, r3
 80036e8:	4413      	add	r3, r2
 80036ea:	334c      	adds	r3, #76	; 0x4c
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	6879      	ldr	r1, [r7, #4]
 80036f0:	697a      	ldr	r2, [r7, #20]
 80036f2:	202c      	movs	r0, #44	; 0x2c
 80036f4:	fb00 f202 	mul.w	r2, r0, r2
 80036f8:	440a      	add	r2, r1
 80036fa:	3240      	adds	r2, #64	; 0x40
 80036fc:	8812      	ldrh	r2, [r2, #0]
 80036fe:	4413      	add	r3, r2
 8003700:	3b01      	subs	r3, #1
 8003702:	6879      	ldr	r1, [r7, #4]
 8003704:	697a      	ldr	r2, [r7, #20]
 8003706:	202c      	movs	r0, #44	; 0x2c
 8003708:	fb00 f202 	mul.w	r2, r0, r2
 800370c:	440a      	add	r2, r1
 800370e:	3240      	adds	r2, #64	; 0x40
 8003710:	8812      	ldrh	r2, [r2, #0]
 8003712:	fbb3 f3f2 	udiv	r3, r3, r2
 8003716:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f003 0301 	and.w	r3, r3, #1
 800371e:	2b00      	cmp	r3, #0
 8003720:	f000 80b5 	beq.w	800388e <HCD_HC_OUT_IRQHandler+0x5ce>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	212c      	movs	r1, #44	; 0x2c
 800372a:	fb01 f303 	mul.w	r3, r1, r3
 800372e:	4413      	add	r3, r2
 8003730:	3355      	adds	r3, #85	; 0x55
 8003732:	781b      	ldrb	r3, [r3, #0]
 8003734:	f083 0301 	eor.w	r3, r3, #1
 8003738:	b2d8      	uxtb	r0, r3
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	212c      	movs	r1, #44	; 0x2c
 8003740:	fb01 f303 	mul.w	r3, r1, r3
 8003744:	4413      	add	r3, r2
 8003746:	3355      	adds	r3, #85	; 0x55
 8003748:	4602      	mov	r2, r0
 800374a:	701a      	strb	r2, [r3, #0]
 800374c:	e09f      	b.n	800388e <HCD_HC_OUT_IRQHandler+0x5ce>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	212c      	movs	r1, #44	; 0x2c
 8003754:	fb01 f303 	mul.w	r3, r1, r3
 8003758:	4413      	add	r3, r2
 800375a:	3361      	adds	r3, #97	; 0x61
 800375c:	781b      	ldrb	r3, [r3, #0]
 800375e:	2b03      	cmp	r3, #3
 8003760:	d109      	bne.n	8003776 <HCD_HC_OUT_IRQHandler+0x4b6>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	212c      	movs	r1, #44	; 0x2c
 8003768:	fb01 f303 	mul.w	r3, r1, r3
 800376c:	4413      	add	r3, r2
 800376e:	3360      	adds	r3, #96	; 0x60
 8003770:	2202      	movs	r2, #2
 8003772:	701a      	strb	r2, [r3, #0]
 8003774:	e08b      	b.n	800388e <HCD_HC_OUT_IRQHandler+0x5ce>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	212c      	movs	r1, #44	; 0x2c
 800377c:	fb01 f303 	mul.w	r3, r1, r3
 8003780:	4413      	add	r3, r2
 8003782:	3361      	adds	r3, #97	; 0x61
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	2b04      	cmp	r3, #4
 8003788:	d109      	bne.n	800379e <HCD_HC_OUT_IRQHandler+0x4de>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	212c      	movs	r1, #44	; 0x2c
 8003790:	fb01 f303 	mul.w	r3, r1, r3
 8003794:	4413      	add	r3, r2
 8003796:	3360      	adds	r3, #96	; 0x60
 8003798:	2202      	movs	r2, #2
 800379a:	701a      	strb	r2, [r3, #0]
 800379c:	e077      	b.n	800388e <HCD_HC_OUT_IRQHandler+0x5ce>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	212c      	movs	r1, #44	; 0x2c
 80037a4:	fb01 f303 	mul.w	r3, r1, r3
 80037a8:	4413      	add	r3, r2
 80037aa:	3361      	adds	r3, #97	; 0x61
 80037ac:	781b      	ldrb	r3, [r3, #0]
 80037ae:	2b05      	cmp	r3, #5
 80037b0:	d109      	bne.n	80037c6 <HCD_HC_OUT_IRQHandler+0x506>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	212c      	movs	r1, #44	; 0x2c
 80037b8:	fb01 f303 	mul.w	r3, r1, r3
 80037bc:	4413      	add	r3, r2
 80037be:	3360      	adds	r3, #96	; 0x60
 80037c0:	2205      	movs	r2, #5
 80037c2:	701a      	strb	r2, [r3, #0]
 80037c4:	e063      	b.n	800388e <HCD_HC_OUT_IRQHandler+0x5ce>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	212c      	movs	r1, #44	; 0x2c
 80037cc:	fb01 f303 	mul.w	r3, r1, r3
 80037d0:	4413      	add	r3, r2
 80037d2:	3361      	adds	r3, #97	; 0x61
 80037d4:	781b      	ldrb	r3, [r3, #0]
 80037d6:	2b06      	cmp	r3, #6
 80037d8:	d009      	beq.n	80037ee <HCD_HC_OUT_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	212c      	movs	r1, #44	; 0x2c
 80037e0:	fb01 f303 	mul.w	r3, r1, r3
 80037e4:	4413      	add	r3, r2
 80037e6:	3361      	adds	r3, #97	; 0x61
 80037e8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80037ea:	2b08      	cmp	r3, #8
 80037ec:	d14f      	bne.n	800388e <HCD_HC_OUT_IRQHandler+0x5ce>
      hhcd->hc[ch_num].ErrCnt++;
 80037ee:	687a      	ldr	r2, [r7, #4]
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	212c      	movs	r1, #44	; 0x2c
 80037f4:	fb01 f303 	mul.w	r3, r1, r3
 80037f8:	4413      	add	r3, r2
 80037fa:	335c      	adds	r3, #92	; 0x5c
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	1c5a      	adds	r2, r3, #1
 8003800:	6879      	ldr	r1, [r7, #4]
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	202c      	movs	r0, #44	; 0x2c
 8003806:	fb00 f303 	mul.w	r3, r0, r3
 800380a:	440b      	add	r3, r1
 800380c:	335c      	adds	r3, #92	; 0x5c
 800380e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	212c      	movs	r1, #44	; 0x2c
 8003816:	fb01 f303 	mul.w	r3, r1, r3
 800381a:	4413      	add	r3, r2
 800381c:	335c      	adds	r3, #92	; 0x5c
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2b02      	cmp	r3, #2
 8003822:	d912      	bls.n	800384a <HCD_HC_OUT_IRQHandler+0x58a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003824:	687a      	ldr	r2, [r7, #4]
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	212c      	movs	r1, #44	; 0x2c
 800382a:	fb01 f303 	mul.w	r3, r1, r3
 800382e:	4413      	add	r3, r2
 8003830:	335c      	adds	r3, #92	; 0x5c
 8003832:	2200      	movs	r2, #0
 8003834:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	212c      	movs	r1, #44	; 0x2c
 800383c:	fb01 f303 	mul.w	r3, r1, r3
 8003840:	4413      	add	r3, r2
 8003842:	3360      	adds	r3, #96	; 0x60
 8003844:	2204      	movs	r2, #4
 8003846:	701a      	strb	r2, [r3, #0]
 8003848:	e021      	b.n	800388e <HCD_HC_OUT_IRQHandler+0x5ce>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	212c      	movs	r1, #44	; 0x2c
 8003850:	fb01 f303 	mul.w	r3, r1, r3
 8003854:	4413      	add	r3, r2
 8003856:	3360      	adds	r3, #96	; 0x60
 8003858:	2202      	movs	r2, #2
 800385a:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	015a      	lsls	r2, r3, #5
 8003860:	69bb      	ldr	r3, [r7, #24]
 8003862:	4413      	add	r3, r2
 8003864:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003872:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800387a:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	015a      	lsls	r2, r3, #5
 8003880:	69bb      	ldr	r3, [r7, #24]
 8003882:	4413      	add	r3, r2
 8003884:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003888:	461a      	mov	r2, r3
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	015a      	lsls	r2, r3, #5
 8003892:	69bb      	ldr	r3, [r7, #24]
 8003894:	4413      	add	r3, r2
 8003896:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800389a:	461a      	mov	r2, r3
 800389c:	2302      	movs	r3, #2
 800389e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	b2d9      	uxtb	r1, r3
 80038a4:	687a      	ldr	r2, [r7, #4]
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	202c      	movs	r0, #44	; 0x2c
 80038aa:	fb00 f303 	mul.w	r3, r0, r3
 80038ae:	4413      	add	r3, r2
 80038b0:	3360      	adds	r3, #96	; 0x60
 80038b2:	781b      	ldrb	r3, [r3, #0]
 80038b4:	461a      	mov	r2, r3
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f00b fd2e 	bl	800f318 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80038bc:	bf00      	nop
 80038be:	3720      	adds	r7, #32
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}

080038c4 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b08a      	sub	sp, #40	; 0x28
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d4:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	6a1b      	ldr	r3, [r3, #32]
 80038dc:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	f003 030f 	and.w	r3, r3, #15
 80038e4:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	0c5b      	lsrs	r3, r3, #17
 80038ea:	f003 030f 	and.w	r3, r3, #15
 80038ee:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	091b      	lsrs	r3, r3, #4
 80038f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80038f8:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	2b02      	cmp	r3, #2
 80038fe:	d004      	beq.n	800390a <HCD_RXQLVL_IRQHandler+0x46>
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	2b05      	cmp	r3, #5
 8003904:	f000 80a9 	beq.w	8003a5a <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003908:	e0aa      	b.n	8003a60 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	2b00      	cmp	r3, #0
 800390e:	f000 80a6 	beq.w	8003a5e <HCD_RXQLVL_IRQHandler+0x19a>
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	69bb      	ldr	r3, [r7, #24]
 8003916:	212c      	movs	r1, #44	; 0x2c
 8003918:	fb01 f303 	mul.w	r3, r1, r3
 800391c:	4413      	add	r3, r2
 800391e:	3344      	adds	r3, #68	; 0x44
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	2b00      	cmp	r3, #0
 8003924:	f000 809b 	beq.w	8003a5e <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003928:	687a      	ldr	r2, [r7, #4]
 800392a:	69bb      	ldr	r3, [r7, #24]
 800392c:	212c      	movs	r1, #44	; 0x2c
 800392e:	fb01 f303 	mul.w	r3, r1, r3
 8003932:	4413      	add	r3, r2
 8003934:	3350      	adds	r3, #80	; 0x50
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	441a      	add	r2, r3
 800393c:	6879      	ldr	r1, [r7, #4]
 800393e:	69bb      	ldr	r3, [r7, #24]
 8003940:	202c      	movs	r0, #44	; 0x2c
 8003942:	fb00 f303 	mul.w	r3, r0, r3
 8003946:	440b      	add	r3, r1
 8003948:	334c      	adds	r3, #76	; 0x4c
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	429a      	cmp	r2, r3
 800394e:	d87a      	bhi.n	8003a46 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6818      	ldr	r0, [r3, #0]
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	69bb      	ldr	r3, [r7, #24]
 8003958:	212c      	movs	r1, #44	; 0x2c
 800395a:	fb01 f303 	mul.w	r3, r1, r3
 800395e:	4413      	add	r3, r2
 8003960:	3344      	adds	r3, #68	; 0x44
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	693a      	ldr	r2, [r7, #16]
 8003966:	b292      	uxth	r2, r2
 8003968:	4619      	mov	r1, r3
 800396a:	f002 fd99 	bl	80064a0 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	69bb      	ldr	r3, [r7, #24]
 8003972:	212c      	movs	r1, #44	; 0x2c
 8003974:	fb01 f303 	mul.w	r3, r1, r3
 8003978:	4413      	add	r3, r2
 800397a:	3344      	adds	r3, #68	; 0x44
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	441a      	add	r2, r3
 8003982:	6879      	ldr	r1, [r7, #4]
 8003984:	69bb      	ldr	r3, [r7, #24]
 8003986:	202c      	movs	r0, #44	; 0x2c
 8003988:	fb00 f303 	mul.w	r3, r0, r3
 800398c:	440b      	add	r3, r1
 800398e:	3344      	adds	r3, #68	; 0x44
 8003990:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	69bb      	ldr	r3, [r7, #24]
 8003996:	212c      	movs	r1, #44	; 0x2c
 8003998:	fb01 f303 	mul.w	r3, r1, r3
 800399c:	4413      	add	r3, r2
 800399e:	3350      	adds	r3, #80	; 0x50
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	441a      	add	r2, r3
 80039a6:	6879      	ldr	r1, [r7, #4]
 80039a8:	69bb      	ldr	r3, [r7, #24]
 80039aa:	202c      	movs	r0, #44	; 0x2c
 80039ac:	fb00 f303 	mul.w	r3, r0, r3
 80039b0:	440b      	add	r3, r1
 80039b2:	3350      	adds	r3, #80	; 0x50
 80039b4:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80039b6:	69bb      	ldr	r3, [r7, #24]
 80039b8:	015a      	lsls	r2, r3, #5
 80039ba:	6a3b      	ldr	r3, [r7, #32]
 80039bc:	4413      	add	r3, r2
 80039be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039c2:	691b      	ldr	r3, [r3, #16]
 80039c4:	0cdb      	lsrs	r3, r3, #19
 80039c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039ca:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80039cc:	687a      	ldr	r2, [r7, #4]
 80039ce:	69bb      	ldr	r3, [r7, #24]
 80039d0:	212c      	movs	r1, #44	; 0x2c
 80039d2:	fb01 f303 	mul.w	r3, r1, r3
 80039d6:	4413      	add	r3, r2
 80039d8:	3340      	adds	r3, #64	; 0x40
 80039da:	881b      	ldrh	r3, [r3, #0]
 80039dc:	461a      	mov	r2, r3
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d13c      	bne.n	8003a5e <HCD_RXQLVL_IRQHandler+0x19a>
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d039      	beq.n	8003a5e <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80039ea:	69bb      	ldr	r3, [r7, #24]
 80039ec:	015a      	lsls	r2, r3, #5
 80039ee:	6a3b      	ldr	r3, [r7, #32]
 80039f0:	4413      	add	r3, r2
 80039f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003a00:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003a08:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003a0a:	69bb      	ldr	r3, [r7, #24]
 8003a0c:	015a      	lsls	r2, r3, #5
 8003a0e:	6a3b      	ldr	r3, [r7, #32]
 8003a10:	4413      	add	r3, r2
 8003a12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a16:	461a      	mov	r2, r3
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	69bb      	ldr	r3, [r7, #24]
 8003a20:	212c      	movs	r1, #44	; 0x2c
 8003a22:	fb01 f303 	mul.w	r3, r1, r3
 8003a26:	4413      	add	r3, r2
 8003a28:	3354      	adds	r3, #84	; 0x54
 8003a2a:	781b      	ldrb	r3, [r3, #0]
 8003a2c:	f083 0301 	eor.w	r3, r3, #1
 8003a30:	b2d8      	uxtb	r0, r3
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	69bb      	ldr	r3, [r7, #24]
 8003a36:	212c      	movs	r1, #44	; 0x2c
 8003a38:	fb01 f303 	mul.w	r3, r1, r3
 8003a3c:	4413      	add	r3, r2
 8003a3e:	3354      	adds	r3, #84	; 0x54
 8003a40:	4602      	mov	r2, r0
 8003a42:	701a      	strb	r2, [r3, #0]
      break;
 8003a44:	e00b      	b.n	8003a5e <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	69bb      	ldr	r3, [r7, #24]
 8003a4a:	212c      	movs	r1, #44	; 0x2c
 8003a4c:	fb01 f303 	mul.w	r3, r1, r3
 8003a50:	4413      	add	r3, r2
 8003a52:	3360      	adds	r3, #96	; 0x60
 8003a54:	2204      	movs	r2, #4
 8003a56:	701a      	strb	r2, [r3, #0]
      break;
 8003a58:	e001      	b.n	8003a5e <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003a5a:	bf00      	nop
 8003a5c:	e000      	b.n	8003a60 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003a5e:	bf00      	nop
  }
}
 8003a60:	bf00      	nop
 8003a62:	3728      	adds	r7, #40	; 0x28
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}

08003a68 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b086      	sub	sp, #24
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003a94:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	f003 0302 	and.w	r3, r3, #2
 8003a9c:	2b02      	cmp	r3, #2
 8003a9e:	d10b      	bne.n	8003ab8 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f003 0301 	and.w	r3, r3, #1
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d102      	bne.n	8003ab0 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f00b fc18 	bl	800f2e0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	f043 0302 	orr.w	r3, r3, #2
 8003ab6:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f003 0308 	and.w	r3, r3, #8
 8003abe:	2b08      	cmp	r3, #8
 8003ac0:	d132      	bne.n	8003b28 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	f043 0308 	orr.w	r3, r3, #8
 8003ac8:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	f003 0304 	and.w	r3, r3, #4
 8003ad0:	2b04      	cmp	r3, #4
 8003ad2:	d126      	bne.n	8003b22 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	699b      	ldr	r3, [r3, #24]
 8003ad8:	2b02      	cmp	r3, #2
 8003ada:	d113      	bne.n	8003b04 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003ae2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003ae6:	d106      	bne.n	8003af6 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	2102      	movs	r1, #2
 8003aee:	4618      	mov	r0, r3
 8003af0:	f002 fe06 	bl	8006700 <USB_InitFSLSPClkSel>
 8003af4:	e011      	b.n	8003b1a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	2101      	movs	r1, #1
 8003afc:	4618      	mov	r0, r3
 8003afe:	f002 fdff 	bl	8006700 <USB_InitFSLSPClkSel>
 8003b02:	e00a      	b.n	8003b1a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d106      	bne.n	8003b1a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b12:	461a      	mov	r2, r3
 8003b14:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003b18:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f00b fc0a 	bl	800f334 <HAL_HCD_PortEnabled_Callback>
 8003b20:	e002      	b.n	8003b28 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f00b fc14 	bl	800f350 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	f003 0320 	and.w	r3, r3, #32
 8003b2e:	2b20      	cmp	r3, #32
 8003b30:	d103      	bne.n	8003b3a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	f043 0320 	orr.w	r3, r3, #32
 8003b38:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003b40:	461a      	mov	r2, r3
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	6013      	str	r3, [r2, #0]
}
 8003b46:	bf00      	nop
 8003b48:	3718      	adds	r7, #24
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
	...

08003b50 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003b50:	b480      	push	{r7}
 8003b52:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003b54:	4b0d      	ldr	r3, [pc, #52]	; (8003b8c <HAL_PWREx_GetVoltageRange+0x3c>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003b5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b60:	d102      	bne.n	8003b68 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8003b62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b66:	e00b      	b.n	8003b80 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8003b68:	4b08      	ldr	r3, [pc, #32]	; (8003b8c <HAL_PWREx_GetVoltageRange+0x3c>)
 8003b6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b76:	d102      	bne.n	8003b7e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8003b78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b7c:	e000      	b.n	8003b80 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8003b7e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr
 8003b8a:	bf00      	nop
 8003b8c:	40007000 	.word	0x40007000

08003b90 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b085      	sub	sp, #20
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d141      	bne.n	8003c22 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003b9e:	4b4b      	ldr	r3, [pc, #300]	; (8003ccc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003ba6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003baa:	d131      	bne.n	8003c10 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003bac:	4b47      	ldr	r3, [pc, #284]	; (8003ccc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003bb2:	4a46      	ldr	r2, [pc, #280]	; (8003ccc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bb8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003bbc:	4b43      	ldr	r3, [pc, #268]	; (8003ccc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003bc4:	4a41      	ldr	r2, [pc, #260]	; (8003ccc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003bca:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003bcc:	4b40      	ldr	r3, [pc, #256]	; (8003cd0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	2232      	movs	r2, #50	; 0x32
 8003bd2:	fb02 f303 	mul.w	r3, r2, r3
 8003bd6:	4a3f      	ldr	r2, [pc, #252]	; (8003cd4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003bd8:	fba2 2303 	umull	r2, r3, r2, r3
 8003bdc:	0c9b      	lsrs	r3, r3, #18
 8003bde:	3301      	adds	r3, #1
 8003be0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003be2:	e002      	b.n	8003bea <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	3b01      	subs	r3, #1
 8003be8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003bea:	4b38      	ldr	r3, [pc, #224]	; (8003ccc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bec:	695b      	ldr	r3, [r3, #20]
 8003bee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bf6:	d102      	bne.n	8003bfe <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d1f2      	bne.n	8003be4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003bfe:	4b33      	ldr	r3, [pc, #204]	; (8003ccc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c00:	695b      	ldr	r3, [r3, #20]
 8003c02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c0a:	d158      	bne.n	8003cbe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003c0c:	2303      	movs	r3, #3
 8003c0e:	e057      	b.n	8003cc0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003c10:	4b2e      	ldr	r3, [pc, #184]	; (8003ccc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c16:	4a2d      	ldr	r2, [pc, #180]	; (8003ccc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c1c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003c20:	e04d      	b.n	8003cbe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c28:	d141      	bne.n	8003cae <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003c2a:	4b28      	ldr	r3, [pc, #160]	; (8003ccc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003c32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c36:	d131      	bne.n	8003c9c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003c38:	4b24      	ldr	r3, [pc, #144]	; (8003ccc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c3e:	4a23      	ldr	r2, [pc, #140]	; (8003ccc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c44:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003c48:	4b20      	ldr	r3, [pc, #128]	; (8003ccc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003c50:	4a1e      	ldr	r2, [pc, #120]	; (8003ccc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c56:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003c58:	4b1d      	ldr	r3, [pc, #116]	; (8003cd0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	2232      	movs	r2, #50	; 0x32
 8003c5e:	fb02 f303 	mul.w	r3, r2, r3
 8003c62:	4a1c      	ldr	r2, [pc, #112]	; (8003cd4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003c64:	fba2 2303 	umull	r2, r3, r2, r3
 8003c68:	0c9b      	lsrs	r3, r3, #18
 8003c6a:	3301      	adds	r3, #1
 8003c6c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c6e:	e002      	b.n	8003c76 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	3b01      	subs	r3, #1
 8003c74:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c76:	4b15      	ldr	r3, [pc, #84]	; (8003ccc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c78:	695b      	ldr	r3, [r3, #20]
 8003c7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c82:	d102      	bne.n	8003c8a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d1f2      	bne.n	8003c70 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003c8a:	4b10      	ldr	r3, [pc, #64]	; (8003ccc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c8c:	695b      	ldr	r3, [r3, #20]
 8003c8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c96:	d112      	bne.n	8003cbe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003c98:	2303      	movs	r3, #3
 8003c9a:	e011      	b.n	8003cc0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003c9c:	4b0b      	ldr	r3, [pc, #44]	; (8003ccc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ca2:	4a0a      	ldr	r2, [pc, #40]	; (8003ccc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ca4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ca8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003cac:	e007      	b.n	8003cbe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003cae:	4b07      	ldr	r3, [pc, #28]	; (8003ccc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003cb6:	4a05      	ldr	r2, [pc, #20]	; (8003ccc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cb8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003cbc:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003cbe:	2300      	movs	r3, #0
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3714      	adds	r7, #20
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr
 8003ccc:	40007000 	.word	0x40007000
 8003cd0:	20000000 	.word	0x20000000
 8003cd4:	431bde83 	.word	0x431bde83

08003cd8 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003cdc:	4b05      	ldr	r3, [pc, #20]	; (8003cf4 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	4a04      	ldr	r2, [pc, #16]	; (8003cf4 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003ce2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ce6:	6053      	str	r3, [r2, #4]
}
 8003ce8:	bf00      	nop
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr
 8003cf2:	bf00      	nop
 8003cf4:	40007000 	.word	0x40007000

08003cf8 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8003cfc:	4b05      	ldr	r3, [pc, #20]	; (8003d14 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	4a04      	ldr	r2, [pc, #16]	; (8003d14 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003d02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d06:	6053      	str	r3, [r2, #4]
}
 8003d08:	bf00      	nop
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr
 8003d12:	bf00      	nop
 8003d14:	40007000 	.word	0x40007000

08003d18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b088      	sub	sp, #32
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d102      	bne.n	8003d2c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	f000 bc08 	b.w	800453c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d2c:	4b96      	ldr	r3, [pc, #600]	; (8003f88 <HAL_RCC_OscConfig+0x270>)
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	f003 030c 	and.w	r3, r3, #12
 8003d34:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d36:	4b94      	ldr	r3, [pc, #592]	; (8003f88 <HAL_RCC_OscConfig+0x270>)
 8003d38:	68db      	ldr	r3, [r3, #12]
 8003d3a:	f003 0303 	and.w	r3, r3, #3
 8003d3e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 0310 	and.w	r3, r3, #16
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	f000 80e4 	beq.w	8003f16 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003d4e:	69bb      	ldr	r3, [r7, #24]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d007      	beq.n	8003d64 <HAL_RCC_OscConfig+0x4c>
 8003d54:	69bb      	ldr	r3, [r7, #24]
 8003d56:	2b0c      	cmp	r3, #12
 8003d58:	f040 808b 	bne.w	8003e72 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	f040 8087 	bne.w	8003e72 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003d64:	4b88      	ldr	r3, [pc, #544]	; (8003f88 <HAL_RCC_OscConfig+0x270>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 0302 	and.w	r3, r3, #2
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d005      	beq.n	8003d7c <HAL_RCC_OscConfig+0x64>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	699b      	ldr	r3, [r3, #24]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d101      	bne.n	8003d7c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e3df      	b.n	800453c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6a1a      	ldr	r2, [r3, #32]
 8003d80:	4b81      	ldr	r3, [pc, #516]	; (8003f88 <HAL_RCC_OscConfig+0x270>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 0308 	and.w	r3, r3, #8
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d004      	beq.n	8003d96 <HAL_RCC_OscConfig+0x7e>
 8003d8c:	4b7e      	ldr	r3, [pc, #504]	; (8003f88 <HAL_RCC_OscConfig+0x270>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d94:	e005      	b.n	8003da2 <HAL_RCC_OscConfig+0x8a>
 8003d96:	4b7c      	ldr	r3, [pc, #496]	; (8003f88 <HAL_RCC_OscConfig+0x270>)
 8003d98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d9c:	091b      	lsrs	r3, r3, #4
 8003d9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d223      	bcs.n	8003dee <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6a1b      	ldr	r3, [r3, #32]
 8003daa:	4618      	mov	r0, r3
 8003dac:	f000 fdcc 	bl	8004948 <RCC_SetFlashLatencyFromMSIRange>
 8003db0:	4603      	mov	r3, r0
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d001      	beq.n	8003dba <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e3c0      	b.n	800453c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003dba:	4b73      	ldr	r3, [pc, #460]	; (8003f88 <HAL_RCC_OscConfig+0x270>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a72      	ldr	r2, [pc, #456]	; (8003f88 <HAL_RCC_OscConfig+0x270>)
 8003dc0:	f043 0308 	orr.w	r3, r3, #8
 8003dc4:	6013      	str	r3, [r2, #0]
 8003dc6:	4b70      	ldr	r3, [pc, #448]	; (8003f88 <HAL_RCC_OscConfig+0x270>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6a1b      	ldr	r3, [r3, #32]
 8003dd2:	496d      	ldr	r1, [pc, #436]	; (8003f88 <HAL_RCC_OscConfig+0x270>)
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003dd8:	4b6b      	ldr	r3, [pc, #428]	; (8003f88 <HAL_RCC_OscConfig+0x270>)
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	69db      	ldr	r3, [r3, #28]
 8003de4:	021b      	lsls	r3, r3, #8
 8003de6:	4968      	ldr	r1, [pc, #416]	; (8003f88 <HAL_RCC_OscConfig+0x270>)
 8003de8:	4313      	orrs	r3, r2
 8003dea:	604b      	str	r3, [r1, #4]
 8003dec:	e025      	b.n	8003e3a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003dee:	4b66      	ldr	r3, [pc, #408]	; (8003f88 <HAL_RCC_OscConfig+0x270>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a65      	ldr	r2, [pc, #404]	; (8003f88 <HAL_RCC_OscConfig+0x270>)
 8003df4:	f043 0308 	orr.w	r3, r3, #8
 8003df8:	6013      	str	r3, [r2, #0]
 8003dfa:	4b63      	ldr	r3, [pc, #396]	; (8003f88 <HAL_RCC_OscConfig+0x270>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6a1b      	ldr	r3, [r3, #32]
 8003e06:	4960      	ldr	r1, [pc, #384]	; (8003f88 <HAL_RCC_OscConfig+0x270>)
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e0c:	4b5e      	ldr	r3, [pc, #376]	; (8003f88 <HAL_RCC_OscConfig+0x270>)
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	69db      	ldr	r3, [r3, #28]
 8003e18:	021b      	lsls	r3, r3, #8
 8003e1a:	495b      	ldr	r1, [pc, #364]	; (8003f88 <HAL_RCC_OscConfig+0x270>)
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e20:	69bb      	ldr	r3, [r7, #24]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d109      	bne.n	8003e3a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a1b      	ldr	r3, [r3, #32]
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f000 fd8c 	bl	8004948 <RCC_SetFlashLatencyFromMSIRange>
 8003e30:	4603      	mov	r3, r0
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d001      	beq.n	8003e3a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e380      	b.n	800453c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003e3a:	f000 fcc1 	bl	80047c0 <HAL_RCC_GetSysClockFreq>
 8003e3e:	4602      	mov	r2, r0
 8003e40:	4b51      	ldr	r3, [pc, #324]	; (8003f88 <HAL_RCC_OscConfig+0x270>)
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	091b      	lsrs	r3, r3, #4
 8003e46:	f003 030f 	and.w	r3, r3, #15
 8003e4a:	4950      	ldr	r1, [pc, #320]	; (8003f8c <HAL_RCC_OscConfig+0x274>)
 8003e4c:	5ccb      	ldrb	r3, [r1, r3]
 8003e4e:	f003 031f 	and.w	r3, r3, #31
 8003e52:	fa22 f303 	lsr.w	r3, r2, r3
 8003e56:	4a4e      	ldr	r2, [pc, #312]	; (8003f90 <HAL_RCC_OscConfig+0x278>)
 8003e58:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003e5a:	4b4e      	ldr	r3, [pc, #312]	; (8003f94 <HAL_RCC_OscConfig+0x27c>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f7fd ffbc 	bl	8001ddc <HAL_InitTick>
 8003e64:	4603      	mov	r3, r0
 8003e66:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003e68:	7bfb      	ldrb	r3, [r7, #15]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d052      	beq.n	8003f14 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003e6e:	7bfb      	ldrb	r3, [r7, #15]
 8003e70:	e364      	b.n	800453c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	699b      	ldr	r3, [r3, #24]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d032      	beq.n	8003ee0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003e7a:	4b43      	ldr	r3, [pc, #268]	; (8003f88 <HAL_RCC_OscConfig+0x270>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a42      	ldr	r2, [pc, #264]	; (8003f88 <HAL_RCC_OscConfig+0x270>)
 8003e80:	f043 0301 	orr.w	r3, r3, #1
 8003e84:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003e86:	f7fd fff9 	bl	8001e7c <HAL_GetTick>
 8003e8a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e8c:	e008      	b.n	8003ea0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003e8e:	f7fd fff5 	bl	8001e7c <HAL_GetTick>
 8003e92:	4602      	mov	r2, r0
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	1ad3      	subs	r3, r2, r3
 8003e98:	2b02      	cmp	r3, #2
 8003e9a:	d901      	bls.n	8003ea0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003e9c:	2303      	movs	r3, #3
 8003e9e:	e34d      	b.n	800453c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003ea0:	4b39      	ldr	r3, [pc, #228]	; (8003f88 <HAL_RCC_OscConfig+0x270>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 0302 	and.w	r3, r3, #2
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d0f0      	beq.n	8003e8e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003eac:	4b36      	ldr	r3, [pc, #216]	; (8003f88 <HAL_RCC_OscConfig+0x270>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a35      	ldr	r2, [pc, #212]	; (8003f88 <HAL_RCC_OscConfig+0x270>)
 8003eb2:	f043 0308 	orr.w	r3, r3, #8
 8003eb6:	6013      	str	r3, [r2, #0]
 8003eb8:	4b33      	ldr	r3, [pc, #204]	; (8003f88 <HAL_RCC_OscConfig+0x270>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6a1b      	ldr	r3, [r3, #32]
 8003ec4:	4930      	ldr	r1, [pc, #192]	; (8003f88 <HAL_RCC_OscConfig+0x270>)
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003eca:	4b2f      	ldr	r3, [pc, #188]	; (8003f88 <HAL_RCC_OscConfig+0x270>)
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	69db      	ldr	r3, [r3, #28]
 8003ed6:	021b      	lsls	r3, r3, #8
 8003ed8:	492b      	ldr	r1, [pc, #172]	; (8003f88 <HAL_RCC_OscConfig+0x270>)
 8003eda:	4313      	orrs	r3, r2
 8003edc:	604b      	str	r3, [r1, #4]
 8003ede:	e01a      	b.n	8003f16 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003ee0:	4b29      	ldr	r3, [pc, #164]	; (8003f88 <HAL_RCC_OscConfig+0x270>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a28      	ldr	r2, [pc, #160]	; (8003f88 <HAL_RCC_OscConfig+0x270>)
 8003ee6:	f023 0301 	bic.w	r3, r3, #1
 8003eea:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003eec:	f7fd ffc6 	bl	8001e7c <HAL_GetTick>
 8003ef0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003ef2:	e008      	b.n	8003f06 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003ef4:	f7fd ffc2 	bl	8001e7c <HAL_GetTick>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	2b02      	cmp	r3, #2
 8003f00:	d901      	bls.n	8003f06 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003f02:	2303      	movs	r3, #3
 8003f04:	e31a      	b.n	800453c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003f06:	4b20      	ldr	r3, [pc, #128]	; (8003f88 <HAL_RCC_OscConfig+0x270>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 0302 	and.w	r3, r3, #2
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d1f0      	bne.n	8003ef4 <HAL_RCC_OscConfig+0x1dc>
 8003f12:	e000      	b.n	8003f16 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003f14:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 0301 	and.w	r3, r3, #1
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d073      	beq.n	800400a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003f22:	69bb      	ldr	r3, [r7, #24]
 8003f24:	2b08      	cmp	r3, #8
 8003f26:	d005      	beq.n	8003f34 <HAL_RCC_OscConfig+0x21c>
 8003f28:	69bb      	ldr	r3, [r7, #24]
 8003f2a:	2b0c      	cmp	r3, #12
 8003f2c:	d10e      	bne.n	8003f4c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	2b03      	cmp	r3, #3
 8003f32:	d10b      	bne.n	8003f4c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f34:	4b14      	ldr	r3, [pc, #80]	; (8003f88 <HAL_RCC_OscConfig+0x270>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d063      	beq.n	8004008 <HAL_RCC_OscConfig+0x2f0>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d15f      	bne.n	8004008 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	e2f7      	b.n	800453c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f54:	d106      	bne.n	8003f64 <HAL_RCC_OscConfig+0x24c>
 8003f56:	4b0c      	ldr	r3, [pc, #48]	; (8003f88 <HAL_RCC_OscConfig+0x270>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a0b      	ldr	r2, [pc, #44]	; (8003f88 <HAL_RCC_OscConfig+0x270>)
 8003f5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f60:	6013      	str	r3, [r2, #0]
 8003f62:	e025      	b.n	8003fb0 <HAL_RCC_OscConfig+0x298>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f6c:	d114      	bne.n	8003f98 <HAL_RCC_OscConfig+0x280>
 8003f6e:	4b06      	ldr	r3, [pc, #24]	; (8003f88 <HAL_RCC_OscConfig+0x270>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a05      	ldr	r2, [pc, #20]	; (8003f88 <HAL_RCC_OscConfig+0x270>)
 8003f74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f78:	6013      	str	r3, [r2, #0]
 8003f7a:	4b03      	ldr	r3, [pc, #12]	; (8003f88 <HAL_RCC_OscConfig+0x270>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a02      	ldr	r2, [pc, #8]	; (8003f88 <HAL_RCC_OscConfig+0x270>)
 8003f80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f84:	6013      	str	r3, [r2, #0]
 8003f86:	e013      	b.n	8003fb0 <HAL_RCC_OscConfig+0x298>
 8003f88:	40021000 	.word	0x40021000
 8003f8c:	08014770 	.word	0x08014770
 8003f90:	20000000 	.word	0x20000000
 8003f94:	20000004 	.word	0x20000004
 8003f98:	4ba0      	ldr	r3, [pc, #640]	; (800421c <HAL_RCC_OscConfig+0x504>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a9f      	ldr	r2, [pc, #636]	; (800421c <HAL_RCC_OscConfig+0x504>)
 8003f9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fa2:	6013      	str	r3, [r2, #0]
 8003fa4:	4b9d      	ldr	r3, [pc, #628]	; (800421c <HAL_RCC_OscConfig+0x504>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a9c      	ldr	r2, [pc, #624]	; (800421c <HAL_RCC_OscConfig+0x504>)
 8003faa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d013      	beq.n	8003fe0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fb8:	f7fd ff60 	bl	8001e7c <HAL_GetTick>
 8003fbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003fbe:	e008      	b.n	8003fd2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fc0:	f7fd ff5c 	bl	8001e7c <HAL_GetTick>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	2b64      	cmp	r3, #100	; 0x64
 8003fcc:	d901      	bls.n	8003fd2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003fce:	2303      	movs	r3, #3
 8003fd0:	e2b4      	b.n	800453c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003fd2:	4b92      	ldr	r3, [pc, #584]	; (800421c <HAL_RCC_OscConfig+0x504>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d0f0      	beq.n	8003fc0 <HAL_RCC_OscConfig+0x2a8>
 8003fde:	e014      	b.n	800400a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fe0:	f7fd ff4c 	bl	8001e7c <HAL_GetTick>
 8003fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003fe6:	e008      	b.n	8003ffa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fe8:	f7fd ff48 	bl	8001e7c <HAL_GetTick>
 8003fec:	4602      	mov	r2, r0
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	1ad3      	subs	r3, r2, r3
 8003ff2:	2b64      	cmp	r3, #100	; 0x64
 8003ff4:	d901      	bls.n	8003ffa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	e2a0      	b.n	800453c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ffa:	4b88      	ldr	r3, [pc, #544]	; (800421c <HAL_RCC_OscConfig+0x504>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004002:	2b00      	cmp	r3, #0
 8004004:	d1f0      	bne.n	8003fe8 <HAL_RCC_OscConfig+0x2d0>
 8004006:	e000      	b.n	800400a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004008:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0302 	and.w	r3, r3, #2
 8004012:	2b00      	cmp	r3, #0
 8004014:	d060      	beq.n	80040d8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004016:	69bb      	ldr	r3, [r7, #24]
 8004018:	2b04      	cmp	r3, #4
 800401a:	d005      	beq.n	8004028 <HAL_RCC_OscConfig+0x310>
 800401c:	69bb      	ldr	r3, [r7, #24]
 800401e:	2b0c      	cmp	r3, #12
 8004020:	d119      	bne.n	8004056 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	2b02      	cmp	r3, #2
 8004026:	d116      	bne.n	8004056 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004028:	4b7c      	ldr	r3, [pc, #496]	; (800421c <HAL_RCC_OscConfig+0x504>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004030:	2b00      	cmp	r3, #0
 8004032:	d005      	beq.n	8004040 <HAL_RCC_OscConfig+0x328>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d101      	bne.n	8004040 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	e27d      	b.n	800453c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004040:	4b76      	ldr	r3, [pc, #472]	; (800421c <HAL_RCC_OscConfig+0x504>)
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	691b      	ldr	r3, [r3, #16]
 800404c:	061b      	lsls	r3, r3, #24
 800404e:	4973      	ldr	r1, [pc, #460]	; (800421c <HAL_RCC_OscConfig+0x504>)
 8004050:	4313      	orrs	r3, r2
 8004052:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004054:	e040      	b.n	80040d8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	68db      	ldr	r3, [r3, #12]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d023      	beq.n	80040a6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800405e:	4b6f      	ldr	r3, [pc, #444]	; (800421c <HAL_RCC_OscConfig+0x504>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a6e      	ldr	r2, [pc, #440]	; (800421c <HAL_RCC_OscConfig+0x504>)
 8004064:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004068:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800406a:	f7fd ff07 	bl	8001e7c <HAL_GetTick>
 800406e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004070:	e008      	b.n	8004084 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004072:	f7fd ff03 	bl	8001e7c <HAL_GetTick>
 8004076:	4602      	mov	r2, r0
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	2b02      	cmp	r3, #2
 800407e:	d901      	bls.n	8004084 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004080:	2303      	movs	r3, #3
 8004082:	e25b      	b.n	800453c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004084:	4b65      	ldr	r3, [pc, #404]	; (800421c <HAL_RCC_OscConfig+0x504>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800408c:	2b00      	cmp	r3, #0
 800408e:	d0f0      	beq.n	8004072 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004090:	4b62      	ldr	r3, [pc, #392]	; (800421c <HAL_RCC_OscConfig+0x504>)
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	691b      	ldr	r3, [r3, #16]
 800409c:	061b      	lsls	r3, r3, #24
 800409e:	495f      	ldr	r1, [pc, #380]	; (800421c <HAL_RCC_OscConfig+0x504>)
 80040a0:	4313      	orrs	r3, r2
 80040a2:	604b      	str	r3, [r1, #4]
 80040a4:	e018      	b.n	80040d8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040a6:	4b5d      	ldr	r3, [pc, #372]	; (800421c <HAL_RCC_OscConfig+0x504>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a5c      	ldr	r2, [pc, #368]	; (800421c <HAL_RCC_OscConfig+0x504>)
 80040ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040b2:	f7fd fee3 	bl	8001e7c <HAL_GetTick>
 80040b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80040b8:	e008      	b.n	80040cc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040ba:	f7fd fedf 	bl	8001e7c <HAL_GetTick>
 80040be:	4602      	mov	r2, r0
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	1ad3      	subs	r3, r2, r3
 80040c4:	2b02      	cmp	r3, #2
 80040c6:	d901      	bls.n	80040cc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80040c8:	2303      	movs	r3, #3
 80040ca:	e237      	b.n	800453c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80040cc:	4b53      	ldr	r3, [pc, #332]	; (800421c <HAL_RCC_OscConfig+0x504>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d1f0      	bne.n	80040ba <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 0308 	and.w	r3, r3, #8
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d03c      	beq.n	800415e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	695b      	ldr	r3, [r3, #20]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d01c      	beq.n	8004126 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040ec:	4b4b      	ldr	r3, [pc, #300]	; (800421c <HAL_RCC_OscConfig+0x504>)
 80040ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040f2:	4a4a      	ldr	r2, [pc, #296]	; (800421c <HAL_RCC_OscConfig+0x504>)
 80040f4:	f043 0301 	orr.w	r3, r3, #1
 80040f8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040fc:	f7fd febe 	bl	8001e7c <HAL_GetTick>
 8004100:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004102:	e008      	b.n	8004116 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004104:	f7fd feba 	bl	8001e7c <HAL_GetTick>
 8004108:	4602      	mov	r2, r0
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	1ad3      	subs	r3, r2, r3
 800410e:	2b02      	cmp	r3, #2
 8004110:	d901      	bls.n	8004116 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004112:	2303      	movs	r3, #3
 8004114:	e212      	b.n	800453c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004116:	4b41      	ldr	r3, [pc, #260]	; (800421c <HAL_RCC_OscConfig+0x504>)
 8004118:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800411c:	f003 0302 	and.w	r3, r3, #2
 8004120:	2b00      	cmp	r3, #0
 8004122:	d0ef      	beq.n	8004104 <HAL_RCC_OscConfig+0x3ec>
 8004124:	e01b      	b.n	800415e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004126:	4b3d      	ldr	r3, [pc, #244]	; (800421c <HAL_RCC_OscConfig+0x504>)
 8004128:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800412c:	4a3b      	ldr	r2, [pc, #236]	; (800421c <HAL_RCC_OscConfig+0x504>)
 800412e:	f023 0301 	bic.w	r3, r3, #1
 8004132:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004136:	f7fd fea1 	bl	8001e7c <HAL_GetTick>
 800413a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800413c:	e008      	b.n	8004150 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800413e:	f7fd fe9d 	bl	8001e7c <HAL_GetTick>
 8004142:	4602      	mov	r2, r0
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	1ad3      	subs	r3, r2, r3
 8004148:	2b02      	cmp	r3, #2
 800414a:	d901      	bls.n	8004150 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800414c:	2303      	movs	r3, #3
 800414e:	e1f5      	b.n	800453c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004150:	4b32      	ldr	r3, [pc, #200]	; (800421c <HAL_RCC_OscConfig+0x504>)
 8004152:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004156:	f003 0302 	and.w	r3, r3, #2
 800415a:	2b00      	cmp	r3, #0
 800415c:	d1ef      	bne.n	800413e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 0304 	and.w	r3, r3, #4
 8004166:	2b00      	cmp	r3, #0
 8004168:	f000 80a6 	beq.w	80042b8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800416c:	2300      	movs	r3, #0
 800416e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004170:	4b2a      	ldr	r3, [pc, #168]	; (800421c <HAL_RCC_OscConfig+0x504>)
 8004172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004174:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004178:	2b00      	cmp	r3, #0
 800417a:	d10d      	bne.n	8004198 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800417c:	4b27      	ldr	r3, [pc, #156]	; (800421c <HAL_RCC_OscConfig+0x504>)
 800417e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004180:	4a26      	ldr	r2, [pc, #152]	; (800421c <HAL_RCC_OscConfig+0x504>)
 8004182:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004186:	6593      	str	r3, [r2, #88]	; 0x58
 8004188:	4b24      	ldr	r3, [pc, #144]	; (800421c <HAL_RCC_OscConfig+0x504>)
 800418a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800418c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004190:	60bb      	str	r3, [r7, #8]
 8004192:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004194:	2301      	movs	r3, #1
 8004196:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004198:	4b21      	ldr	r3, [pc, #132]	; (8004220 <HAL_RCC_OscConfig+0x508>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d118      	bne.n	80041d6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80041a4:	4b1e      	ldr	r3, [pc, #120]	; (8004220 <HAL_RCC_OscConfig+0x508>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a1d      	ldr	r2, [pc, #116]	; (8004220 <HAL_RCC_OscConfig+0x508>)
 80041aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041ae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041b0:	f7fd fe64 	bl	8001e7c <HAL_GetTick>
 80041b4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041b6:	e008      	b.n	80041ca <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041b8:	f7fd fe60 	bl	8001e7c <HAL_GetTick>
 80041bc:	4602      	mov	r2, r0
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	1ad3      	subs	r3, r2, r3
 80041c2:	2b02      	cmp	r3, #2
 80041c4:	d901      	bls.n	80041ca <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80041c6:	2303      	movs	r3, #3
 80041c8:	e1b8      	b.n	800453c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041ca:	4b15      	ldr	r3, [pc, #84]	; (8004220 <HAL_RCC_OscConfig+0x508>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d0f0      	beq.n	80041b8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d108      	bne.n	80041f0 <HAL_RCC_OscConfig+0x4d8>
 80041de:	4b0f      	ldr	r3, [pc, #60]	; (800421c <HAL_RCC_OscConfig+0x504>)
 80041e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041e4:	4a0d      	ldr	r2, [pc, #52]	; (800421c <HAL_RCC_OscConfig+0x504>)
 80041e6:	f043 0301 	orr.w	r3, r3, #1
 80041ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80041ee:	e029      	b.n	8004244 <HAL_RCC_OscConfig+0x52c>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	2b05      	cmp	r3, #5
 80041f6:	d115      	bne.n	8004224 <HAL_RCC_OscConfig+0x50c>
 80041f8:	4b08      	ldr	r3, [pc, #32]	; (800421c <HAL_RCC_OscConfig+0x504>)
 80041fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041fe:	4a07      	ldr	r2, [pc, #28]	; (800421c <HAL_RCC_OscConfig+0x504>)
 8004200:	f043 0304 	orr.w	r3, r3, #4
 8004204:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004208:	4b04      	ldr	r3, [pc, #16]	; (800421c <HAL_RCC_OscConfig+0x504>)
 800420a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800420e:	4a03      	ldr	r2, [pc, #12]	; (800421c <HAL_RCC_OscConfig+0x504>)
 8004210:	f043 0301 	orr.w	r3, r3, #1
 8004214:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004218:	e014      	b.n	8004244 <HAL_RCC_OscConfig+0x52c>
 800421a:	bf00      	nop
 800421c:	40021000 	.word	0x40021000
 8004220:	40007000 	.word	0x40007000
 8004224:	4b9d      	ldr	r3, [pc, #628]	; (800449c <HAL_RCC_OscConfig+0x784>)
 8004226:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800422a:	4a9c      	ldr	r2, [pc, #624]	; (800449c <HAL_RCC_OscConfig+0x784>)
 800422c:	f023 0301 	bic.w	r3, r3, #1
 8004230:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004234:	4b99      	ldr	r3, [pc, #612]	; (800449c <HAL_RCC_OscConfig+0x784>)
 8004236:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800423a:	4a98      	ldr	r2, [pc, #608]	; (800449c <HAL_RCC_OscConfig+0x784>)
 800423c:	f023 0304 	bic.w	r3, r3, #4
 8004240:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d016      	beq.n	800427a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800424c:	f7fd fe16 	bl	8001e7c <HAL_GetTick>
 8004250:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004252:	e00a      	b.n	800426a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004254:	f7fd fe12 	bl	8001e7c <HAL_GetTick>
 8004258:	4602      	mov	r2, r0
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	1ad3      	subs	r3, r2, r3
 800425e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004262:	4293      	cmp	r3, r2
 8004264:	d901      	bls.n	800426a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004266:	2303      	movs	r3, #3
 8004268:	e168      	b.n	800453c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800426a:	4b8c      	ldr	r3, [pc, #560]	; (800449c <HAL_RCC_OscConfig+0x784>)
 800426c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004270:	f003 0302 	and.w	r3, r3, #2
 8004274:	2b00      	cmp	r3, #0
 8004276:	d0ed      	beq.n	8004254 <HAL_RCC_OscConfig+0x53c>
 8004278:	e015      	b.n	80042a6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800427a:	f7fd fdff 	bl	8001e7c <HAL_GetTick>
 800427e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004280:	e00a      	b.n	8004298 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004282:	f7fd fdfb 	bl	8001e7c <HAL_GetTick>
 8004286:	4602      	mov	r2, r0
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	1ad3      	subs	r3, r2, r3
 800428c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004290:	4293      	cmp	r3, r2
 8004292:	d901      	bls.n	8004298 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004294:	2303      	movs	r3, #3
 8004296:	e151      	b.n	800453c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004298:	4b80      	ldr	r3, [pc, #512]	; (800449c <HAL_RCC_OscConfig+0x784>)
 800429a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800429e:	f003 0302 	and.w	r3, r3, #2
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d1ed      	bne.n	8004282 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042a6:	7ffb      	ldrb	r3, [r7, #31]
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d105      	bne.n	80042b8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042ac:	4b7b      	ldr	r3, [pc, #492]	; (800449c <HAL_RCC_OscConfig+0x784>)
 80042ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042b0:	4a7a      	ldr	r2, [pc, #488]	; (800449c <HAL_RCC_OscConfig+0x784>)
 80042b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042b6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f003 0320 	and.w	r3, r3, #32
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d03c      	beq.n	800433e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d01c      	beq.n	8004306 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80042cc:	4b73      	ldr	r3, [pc, #460]	; (800449c <HAL_RCC_OscConfig+0x784>)
 80042ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80042d2:	4a72      	ldr	r2, [pc, #456]	; (800449c <HAL_RCC_OscConfig+0x784>)
 80042d4:	f043 0301 	orr.w	r3, r3, #1
 80042d8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042dc:	f7fd fdce 	bl	8001e7c <HAL_GetTick>
 80042e0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80042e2:	e008      	b.n	80042f6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80042e4:	f7fd fdca 	bl	8001e7c <HAL_GetTick>
 80042e8:	4602      	mov	r2, r0
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	2b02      	cmp	r3, #2
 80042f0:	d901      	bls.n	80042f6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80042f2:	2303      	movs	r3, #3
 80042f4:	e122      	b.n	800453c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80042f6:	4b69      	ldr	r3, [pc, #420]	; (800449c <HAL_RCC_OscConfig+0x784>)
 80042f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80042fc:	f003 0302 	and.w	r3, r3, #2
 8004300:	2b00      	cmp	r3, #0
 8004302:	d0ef      	beq.n	80042e4 <HAL_RCC_OscConfig+0x5cc>
 8004304:	e01b      	b.n	800433e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004306:	4b65      	ldr	r3, [pc, #404]	; (800449c <HAL_RCC_OscConfig+0x784>)
 8004308:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800430c:	4a63      	ldr	r2, [pc, #396]	; (800449c <HAL_RCC_OscConfig+0x784>)
 800430e:	f023 0301 	bic.w	r3, r3, #1
 8004312:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004316:	f7fd fdb1 	bl	8001e7c <HAL_GetTick>
 800431a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800431c:	e008      	b.n	8004330 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800431e:	f7fd fdad 	bl	8001e7c <HAL_GetTick>
 8004322:	4602      	mov	r2, r0
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	1ad3      	subs	r3, r2, r3
 8004328:	2b02      	cmp	r3, #2
 800432a:	d901      	bls.n	8004330 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800432c:	2303      	movs	r3, #3
 800432e:	e105      	b.n	800453c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004330:	4b5a      	ldr	r3, [pc, #360]	; (800449c <HAL_RCC_OscConfig+0x784>)
 8004332:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004336:	f003 0302 	and.w	r3, r3, #2
 800433a:	2b00      	cmp	r3, #0
 800433c:	d1ef      	bne.n	800431e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004342:	2b00      	cmp	r3, #0
 8004344:	f000 80f9 	beq.w	800453a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800434c:	2b02      	cmp	r3, #2
 800434e:	f040 80cf 	bne.w	80044f0 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004352:	4b52      	ldr	r3, [pc, #328]	; (800449c <HAL_RCC_OscConfig+0x784>)
 8004354:	68db      	ldr	r3, [r3, #12]
 8004356:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	f003 0203 	and.w	r2, r3, #3
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004362:	429a      	cmp	r2, r3
 8004364:	d12c      	bne.n	80043c0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004370:	3b01      	subs	r3, #1
 8004372:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004374:	429a      	cmp	r2, r3
 8004376:	d123      	bne.n	80043c0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004382:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004384:	429a      	cmp	r2, r3
 8004386:	d11b      	bne.n	80043c0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004392:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004394:	429a      	cmp	r2, r3
 8004396:	d113      	bne.n	80043c0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043a2:	085b      	lsrs	r3, r3, #1
 80043a4:	3b01      	subs	r3, #1
 80043a6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d109      	bne.n	80043c0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b6:	085b      	lsrs	r3, r3, #1
 80043b8:	3b01      	subs	r3, #1
 80043ba:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80043bc:	429a      	cmp	r2, r3
 80043be:	d071      	beq.n	80044a4 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80043c0:	69bb      	ldr	r3, [r7, #24]
 80043c2:	2b0c      	cmp	r3, #12
 80043c4:	d068      	beq.n	8004498 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80043c6:	4b35      	ldr	r3, [pc, #212]	; (800449c <HAL_RCC_OscConfig+0x784>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d105      	bne.n	80043de <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80043d2:	4b32      	ldr	r3, [pc, #200]	; (800449c <HAL_RCC_OscConfig+0x784>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d001      	beq.n	80043e2 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e0ac      	b.n	800453c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80043e2:	4b2e      	ldr	r3, [pc, #184]	; (800449c <HAL_RCC_OscConfig+0x784>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a2d      	ldr	r2, [pc, #180]	; (800449c <HAL_RCC_OscConfig+0x784>)
 80043e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043ec:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80043ee:	f7fd fd45 	bl	8001e7c <HAL_GetTick>
 80043f2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043f4:	e008      	b.n	8004408 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043f6:	f7fd fd41 	bl	8001e7c <HAL_GetTick>
 80043fa:	4602      	mov	r2, r0
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	1ad3      	subs	r3, r2, r3
 8004400:	2b02      	cmp	r3, #2
 8004402:	d901      	bls.n	8004408 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004404:	2303      	movs	r3, #3
 8004406:	e099      	b.n	800453c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004408:	4b24      	ldr	r3, [pc, #144]	; (800449c <HAL_RCC_OscConfig+0x784>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004410:	2b00      	cmp	r3, #0
 8004412:	d1f0      	bne.n	80043f6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004414:	4b21      	ldr	r3, [pc, #132]	; (800449c <HAL_RCC_OscConfig+0x784>)
 8004416:	68da      	ldr	r2, [r3, #12]
 8004418:	4b21      	ldr	r3, [pc, #132]	; (80044a0 <HAL_RCC_OscConfig+0x788>)
 800441a:	4013      	ands	r3, r2
 800441c:	687a      	ldr	r2, [r7, #4]
 800441e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004420:	687a      	ldr	r2, [r7, #4]
 8004422:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004424:	3a01      	subs	r2, #1
 8004426:	0112      	lsls	r2, r2, #4
 8004428:	4311      	orrs	r1, r2
 800442a:	687a      	ldr	r2, [r7, #4]
 800442c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800442e:	0212      	lsls	r2, r2, #8
 8004430:	4311      	orrs	r1, r2
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004436:	0852      	lsrs	r2, r2, #1
 8004438:	3a01      	subs	r2, #1
 800443a:	0552      	lsls	r2, r2, #21
 800443c:	4311      	orrs	r1, r2
 800443e:	687a      	ldr	r2, [r7, #4]
 8004440:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004442:	0852      	lsrs	r2, r2, #1
 8004444:	3a01      	subs	r2, #1
 8004446:	0652      	lsls	r2, r2, #25
 8004448:	4311      	orrs	r1, r2
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800444e:	06d2      	lsls	r2, r2, #27
 8004450:	430a      	orrs	r2, r1
 8004452:	4912      	ldr	r1, [pc, #72]	; (800449c <HAL_RCC_OscConfig+0x784>)
 8004454:	4313      	orrs	r3, r2
 8004456:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004458:	4b10      	ldr	r3, [pc, #64]	; (800449c <HAL_RCC_OscConfig+0x784>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a0f      	ldr	r2, [pc, #60]	; (800449c <HAL_RCC_OscConfig+0x784>)
 800445e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004462:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004464:	4b0d      	ldr	r3, [pc, #52]	; (800449c <HAL_RCC_OscConfig+0x784>)
 8004466:	68db      	ldr	r3, [r3, #12]
 8004468:	4a0c      	ldr	r2, [pc, #48]	; (800449c <HAL_RCC_OscConfig+0x784>)
 800446a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800446e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004470:	f7fd fd04 	bl	8001e7c <HAL_GetTick>
 8004474:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004476:	e008      	b.n	800448a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004478:	f7fd fd00 	bl	8001e7c <HAL_GetTick>
 800447c:	4602      	mov	r2, r0
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	1ad3      	subs	r3, r2, r3
 8004482:	2b02      	cmp	r3, #2
 8004484:	d901      	bls.n	800448a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8004486:	2303      	movs	r3, #3
 8004488:	e058      	b.n	800453c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800448a:	4b04      	ldr	r3, [pc, #16]	; (800449c <HAL_RCC_OscConfig+0x784>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004492:	2b00      	cmp	r3, #0
 8004494:	d0f0      	beq.n	8004478 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004496:	e050      	b.n	800453a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	e04f      	b.n	800453c <HAL_RCC_OscConfig+0x824>
 800449c:	40021000 	.word	0x40021000
 80044a0:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044a4:	4b27      	ldr	r3, [pc, #156]	; (8004544 <HAL_RCC_OscConfig+0x82c>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d144      	bne.n	800453a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80044b0:	4b24      	ldr	r3, [pc, #144]	; (8004544 <HAL_RCC_OscConfig+0x82c>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a23      	ldr	r2, [pc, #140]	; (8004544 <HAL_RCC_OscConfig+0x82c>)
 80044b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044ba:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80044bc:	4b21      	ldr	r3, [pc, #132]	; (8004544 <HAL_RCC_OscConfig+0x82c>)
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	4a20      	ldr	r2, [pc, #128]	; (8004544 <HAL_RCC_OscConfig+0x82c>)
 80044c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044c6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80044c8:	f7fd fcd8 	bl	8001e7c <HAL_GetTick>
 80044cc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044ce:	e008      	b.n	80044e2 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044d0:	f7fd fcd4 	bl	8001e7c <HAL_GetTick>
 80044d4:	4602      	mov	r2, r0
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	1ad3      	subs	r3, r2, r3
 80044da:	2b02      	cmp	r3, #2
 80044dc:	d901      	bls.n	80044e2 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80044de:	2303      	movs	r3, #3
 80044e0:	e02c      	b.n	800453c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044e2:	4b18      	ldr	r3, [pc, #96]	; (8004544 <HAL_RCC_OscConfig+0x82c>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d0f0      	beq.n	80044d0 <HAL_RCC_OscConfig+0x7b8>
 80044ee:	e024      	b.n	800453a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80044f0:	69bb      	ldr	r3, [r7, #24]
 80044f2:	2b0c      	cmp	r3, #12
 80044f4:	d01f      	beq.n	8004536 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044f6:	4b13      	ldr	r3, [pc, #76]	; (8004544 <HAL_RCC_OscConfig+0x82c>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a12      	ldr	r2, [pc, #72]	; (8004544 <HAL_RCC_OscConfig+0x82c>)
 80044fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004500:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004502:	f7fd fcbb 	bl	8001e7c <HAL_GetTick>
 8004506:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004508:	e008      	b.n	800451c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800450a:	f7fd fcb7 	bl	8001e7c <HAL_GetTick>
 800450e:	4602      	mov	r2, r0
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	1ad3      	subs	r3, r2, r3
 8004514:	2b02      	cmp	r3, #2
 8004516:	d901      	bls.n	800451c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8004518:	2303      	movs	r3, #3
 800451a:	e00f      	b.n	800453c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800451c:	4b09      	ldr	r3, [pc, #36]	; (8004544 <HAL_RCC_OscConfig+0x82c>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004524:	2b00      	cmp	r3, #0
 8004526:	d1f0      	bne.n	800450a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004528:	4b06      	ldr	r3, [pc, #24]	; (8004544 <HAL_RCC_OscConfig+0x82c>)
 800452a:	68da      	ldr	r2, [r3, #12]
 800452c:	4905      	ldr	r1, [pc, #20]	; (8004544 <HAL_RCC_OscConfig+0x82c>)
 800452e:	4b06      	ldr	r3, [pc, #24]	; (8004548 <HAL_RCC_OscConfig+0x830>)
 8004530:	4013      	ands	r3, r2
 8004532:	60cb      	str	r3, [r1, #12]
 8004534:	e001      	b.n	800453a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e000      	b.n	800453c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800453a:	2300      	movs	r3, #0
}
 800453c:	4618      	mov	r0, r3
 800453e:	3720      	adds	r7, #32
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}
 8004544:	40021000 	.word	0x40021000
 8004548:	feeefffc 	.word	0xfeeefffc

0800454c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b086      	sub	sp, #24
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
 8004554:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004556:	2300      	movs	r3, #0
 8004558:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d101      	bne.n	8004564 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	e11d      	b.n	80047a0 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004564:	4b90      	ldr	r3, [pc, #576]	; (80047a8 <HAL_RCC_ClockConfig+0x25c>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 030f 	and.w	r3, r3, #15
 800456c:	683a      	ldr	r2, [r7, #0]
 800456e:	429a      	cmp	r2, r3
 8004570:	d910      	bls.n	8004594 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004572:	4b8d      	ldr	r3, [pc, #564]	; (80047a8 <HAL_RCC_ClockConfig+0x25c>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f023 020f 	bic.w	r2, r3, #15
 800457a:	498b      	ldr	r1, [pc, #556]	; (80047a8 <HAL_RCC_ClockConfig+0x25c>)
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	4313      	orrs	r3, r2
 8004580:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004582:	4b89      	ldr	r3, [pc, #548]	; (80047a8 <HAL_RCC_ClockConfig+0x25c>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 030f 	and.w	r3, r3, #15
 800458a:	683a      	ldr	r2, [r7, #0]
 800458c:	429a      	cmp	r2, r3
 800458e:	d001      	beq.n	8004594 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	e105      	b.n	80047a0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 0302 	and.w	r3, r3, #2
 800459c:	2b00      	cmp	r3, #0
 800459e:	d010      	beq.n	80045c2 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	689a      	ldr	r2, [r3, #8]
 80045a4:	4b81      	ldr	r3, [pc, #516]	; (80047ac <HAL_RCC_ClockConfig+0x260>)
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d908      	bls.n	80045c2 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045b0:	4b7e      	ldr	r3, [pc, #504]	; (80047ac <HAL_RCC_ClockConfig+0x260>)
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	497b      	ldr	r1, [pc, #492]	; (80047ac <HAL_RCC_ClockConfig+0x260>)
 80045be:	4313      	orrs	r3, r2
 80045c0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 0301 	and.w	r3, r3, #1
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d079      	beq.n	80046c2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	2b03      	cmp	r3, #3
 80045d4:	d11e      	bne.n	8004614 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045d6:	4b75      	ldr	r3, [pc, #468]	; (80047ac <HAL_RCC_ClockConfig+0x260>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d101      	bne.n	80045e6 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e0dc      	b.n	80047a0 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80045e6:	f000 fa09 	bl	80049fc <RCC_GetSysClockFreqFromPLLSource>
 80045ea:	4603      	mov	r3, r0
 80045ec:	4a70      	ldr	r2, [pc, #448]	; (80047b0 <HAL_RCC_ClockConfig+0x264>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d946      	bls.n	8004680 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80045f2:	4b6e      	ldr	r3, [pc, #440]	; (80047ac <HAL_RCC_ClockConfig+0x260>)
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d140      	bne.n	8004680 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80045fe:	4b6b      	ldr	r3, [pc, #428]	; (80047ac <HAL_RCC_ClockConfig+0x260>)
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004606:	4a69      	ldr	r2, [pc, #420]	; (80047ac <HAL_RCC_ClockConfig+0x260>)
 8004608:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800460c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800460e:	2380      	movs	r3, #128	; 0x80
 8004610:	617b      	str	r3, [r7, #20]
 8004612:	e035      	b.n	8004680 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	2b02      	cmp	r3, #2
 800461a:	d107      	bne.n	800462c <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800461c:	4b63      	ldr	r3, [pc, #396]	; (80047ac <HAL_RCC_ClockConfig+0x260>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004624:	2b00      	cmp	r3, #0
 8004626:	d115      	bne.n	8004654 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	e0b9      	b.n	80047a0 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d107      	bne.n	8004644 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004634:	4b5d      	ldr	r3, [pc, #372]	; (80047ac <HAL_RCC_ClockConfig+0x260>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 0302 	and.w	r3, r3, #2
 800463c:	2b00      	cmp	r3, #0
 800463e:	d109      	bne.n	8004654 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	e0ad      	b.n	80047a0 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004644:	4b59      	ldr	r3, [pc, #356]	; (80047ac <HAL_RCC_ClockConfig+0x260>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800464c:	2b00      	cmp	r3, #0
 800464e:	d101      	bne.n	8004654 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	e0a5      	b.n	80047a0 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8004654:	f000 f8b4 	bl	80047c0 <HAL_RCC_GetSysClockFreq>
 8004658:	4603      	mov	r3, r0
 800465a:	4a55      	ldr	r2, [pc, #340]	; (80047b0 <HAL_RCC_ClockConfig+0x264>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d90f      	bls.n	8004680 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004660:	4b52      	ldr	r3, [pc, #328]	; (80047ac <HAL_RCC_ClockConfig+0x260>)
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004668:	2b00      	cmp	r3, #0
 800466a:	d109      	bne.n	8004680 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800466c:	4b4f      	ldr	r3, [pc, #316]	; (80047ac <HAL_RCC_ClockConfig+0x260>)
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004674:	4a4d      	ldr	r2, [pc, #308]	; (80047ac <HAL_RCC_ClockConfig+0x260>)
 8004676:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800467a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800467c:	2380      	movs	r3, #128	; 0x80
 800467e:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004680:	4b4a      	ldr	r3, [pc, #296]	; (80047ac <HAL_RCC_ClockConfig+0x260>)
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	f023 0203 	bic.w	r2, r3, #3
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	4947      	ldr	r1, [pc, #284]	; (80047ac <HAL_RCC_ClockConfig+0x260>)
 800468e:	4313      	orrs	r3, r2
 8004690:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004692:	f7fd fbf3 	bl	8001e7c <HAL_GetTick>
 8004696:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004698:	e00a      	b.n	80046b0 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800469a:	f7fd fbef 	bl	8001e7c <HAL_GetTick>
 800469e:	4602      	mov	r2, r0
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	1ad3      	subs	r3, r2, r3
 80046a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d901      	bls.n	80046b0 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80046ac:	2303      	movs	r3, #3
 80046ae:	e077      	b.n	80047a0 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046b0:	4b3e      	ldr	r3, [pc, #248]	; (80047ac <HAL_RCC_ClockConfig+0x260>)
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	f003 020c 	and.w	r2, r3, #12
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	009b      	lsls	r3, r3, #2
 80046be:	429a      	cmp	r2, r3
 80046c0:	d1eb      	bne.n	800469a <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	2b80      	cmp	r3, #128	; 0x80
 80046c6:	d105      	bne.n	80046d4 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80046c8:	4b38      	ldr	r3, [pc, #224]	; (80047ac <HAL_RCC_ClockConfig+0x260>)
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	4a37      	ldr	r2, [pc, #220]	; (80047ac <HAL_RCC_ClockConfig+0x260>)
 80046ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80046d2:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 0302 	and.w	r3, r3, #2
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d010      	beq.n	8004702 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	689a      	ldr	r2, [r3, #8]
 80046e4:	4b31      	ldr	r3, [pc, #196]	; (80047ac <HAL_RCC_ClockConfig+0x260>)
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d208      	bcs.n	8004702 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046f0:	4b2e      	ldr	r3, [pc, #184]	; (80047ac <HAL_RCC_ClockConfig+0x260>)
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	492b      	ldr	r1, [pc, #172]	; (80047ac <HAL_RCC_ClockConfig+0x260>)
 80046fe:	4313      	orrs	r3, r2
 8004700:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004702:	4b29      	ldr	r3, [pc, #164]	; (80047a8 <HAL_RCC_ClockConfig+0x25c>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 030f 	and.w	r3, r3, #15
 800470a:	683a      	ldr	r2, [r7, #0]
 800470c:	429a      	cmp	r2, r3
 800470e:	d210      	bcs.n	8004732 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004710:	4b25      	ldr	r3, [pc, #148]	; (80047a8 <HAL_RCC_ClockConfig+0x25c>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f023 020f 	bic.w	r2, r3, #15
 8004718:	4923      	ldr	r1, [pc, #140]	; (80047a8 <HAL_RCC_ClockConfig+0x25c>)
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	4313      	orrs	r3, r2
 800471e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004720:	4b21      	ldr	r3, [pc, #132]	; (80047a8 <HAL_RCC_ClockConfig+0x25c>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f003 030f 	and.w	r3, r3, #15
 8004728:	683a      	ldr	r2, [r7, #0]
 800472a:	429a      	cmp	r2, r3
 800472c:	d001      	beq.n	8004732 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	e036      	b.n	80047a0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 0304 	and.w	r3, r3, #4
 800473a:	2b00      	cmp	r3, #0
 800473c:	d008      	beq.n	8004750 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800473e:	4b1b      	ldr	r3, [pc, #108]	; (80047ac <HAL_RCC_ClockConfig+0x260>)
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	68db      	ldr	r3, [r3, #12]
 800474a:	4918      	ldr	r1, [pc, #96]	; (80047ac <HAL_RCC_ClockConfig+0x260>)
 800474c:	4313      	orrs	r3, r2
 800474e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 0308 	and.w	r3, r3, #8
 8004758:	2b00      	cmp	r3, #0
 800475a:	d009      	beq.n	8004770 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800475c:	4b13      	ldr	r3, [pc, #76]	; (80047ac <HAL_RCC_ClockConfig+0x260>)
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	691b      	ldr	r3, [r3, #16]
 8004768:	00db      	lsls	r3, r3, #3
 800476a:	4910      	ldr	r1, [pc, #64]	; (80047ac <HAL_RCC_ClockConfig+0x260>)
 800476c:	4313      	orrs	r3, r2
 800476e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004770:	f000 f826 	bl	80047c0 <HAL_RCC_GetSysClockFreq>
 8004774:	4602      	mov	r2, r0
 8004776:	4b0d      	ldr	r3, [pc, #52]	; (80047ac <HAL_RCC_ClockConfig+0x260>)
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	091b      	lsrs	r3, r3, #4
 800477c:	f003 030f 	and.w	r3, r3, #15
 8004780:	490c      	ldr	r1, [pc, #48]	; (80047b4 <HAL_RCC_ClockConfig+0x268>)
 8004782:	5ccb      	ldrb	r3, [r1, r3]
 8004784:	f003 031f 	and.w	r3, r3, #31
 8004788:	fa22 f303 	lsr.w	r3, r2, r3
 800478c:	4a0a      	ldr	r2, [pc, #40]	; (80047b8 <HAL_RCC_ClockConfig+0x26c>)
 800478e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004790:	4b0a      	ldr	r3, [pc, #40]	; (80047bc <HAL_RCC_ClockConfig+0x270>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4618      	mov	r0, r3
 8004796:	f7fd fb21 	bl	8001ddc <HAL_InitTick>
 800479a:	4603      	mov	r3, r0
 800479c:	73fb      	strb	r3, [r7, #15]

  return status;
 800479e:	7bfb      	ldrb	r3, [r7, #15]
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3718      	adds	r7, #24
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}
 80047a8:	40022000 	.word	0x40022000
 80047ac:	40021000 	.word	0x40021000
 80047b0:	04c4b400 	.word	0x04c4b400
 80047b4:	08014770 	.word	0x08014770
 80047b8:	20000000 	.word	0x20000000
 80047bc:	20000004 	.word	0x20000004

080047c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b089      	sub	sp, #36	; 0x24
 80047c4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80047c6:	2300      	movs	r3, #0
 80047c8:	61fb      	str	r3, [r7, #28]
 80047ca:	2300      	movs	r3, #0
 80047cc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047ce:	4b3e      	ldr	r3, [pc, #248]	; (80048c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	f003 030c 	and.w	r3, r3, #12
 80047d6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80047d8:	4b3b      	ldr	r3, [pc, #236]	; (80048c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	f003 0303 	and.w	r3, r3, #3
 80047e0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d005      	beq.n	80047f4 <HAL_RCC_GetSysClockFreq+0x34>
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	2b0c      	cmp	r3, #12
 80047ec:	d121      	bne.n	8004832 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d11e      	bne.n	8004832 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80047f4:	4b34      	ldr	r3, [pc, #208]	; (80048c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 0308 	and.w	r3, r3, #8
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d107      	bne.n	8004810 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004800:	4b31      	ldr	r3, [pc, #196]	; (80048c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004802:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004806:	0a1b      	lsrs	r3, r3, #8
 8004808:	f003 030f 	and.w	r3, r3, #15
 800480c:	61fb      	str	r3, [r7, #28]
 800480e:	e005      	b.n	800481c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004810:	4b2d      	ldr	r3, [pc, #180]	; (80048c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	091b      	lsrs	r3, r3, #4
 8004816:	f003 030f 	and.w	r3, r3, #15
 800481a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800481c:	4a2b      	ldr	r2, [pc, #172]	; (80048cc <HAL_RCC_GetSysClockFreq+0x10c>)
 800481e:	69fb      	ldr	r3, [r7, #28]
 8004820:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004824:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d10d      	bne.n	8004848 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800482c:	69fb      	ldr	r3, [r7, #28]
 800482e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004830:	e00a      	b.n	8004848 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	2b04      	cmp	r3, #4
 8004836:	d102      	bne.n	800483e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004838:	4b25      	ldr	r3, [pc, #148]	; (80048d0 <HAL_RCC_GetSysClockFreq+0x110>)
 800483a:	61bb      	str	r3, [r7, #24]
 800483c:	e004      	b.n	8004848 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	2b08      	cmp	r3, #8
 8004842:	d101      	bne.n	8004848 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004844:	4b23      	ldr	r3, [pc, #140]	; (80048d4 <HAL_RCC_GetSysClockFreq+0x114>)
 8004846:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	2b0c      	cmp	r3, #12
 800484c:	d134      	bne.n	80048b8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800484e:	4b1e      	ldr	r3, [pc, #120]	; (80048c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004850:	68db      	ldr	r3, [r3, #12]
 8004852:	f003 0303 	and.w	r3, r3, #3
 8004856:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	2b02      	cmp	r3, #2
 800485c:	d003      	beq.n	8004866 <HAL_RCC_GetSysClockFreq+0xa6>
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	2b03      	cmp	r3, #3
 8004862:	d003      	beq.n	800486c <HAL_RCC_GetSysClockFreq+0xac>
 8004864:	e005      	b.n	8004872 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004866:	4b1a      	ldr	r3, [pc, #104]	; (80048d0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004868:	617b      	str	r3, [r7, #20]
      break;
 800486a:	e005      	b.n	8004878 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800486c:	4b19      	ldr	r3, [pc, #100]	; (80048d4 <HAL_RCC_GetSysClockFreq+0x114>)
 800486e:	617b      	str	r3, [r7, #20]
      break;
 8004870:	e002      	b.n	8004878 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004872:	69fb      	ldr	r3, [r7, #28]
 8004874:	617b      	str	r3, [r7, #20]
      break;
 8004876:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004878:	4b13      	ldr	r3, [pc, #76]	; (80048c8 <HAL_RCC_GetSysClockFreq+0x108>)
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	091b      	lsrs	r3, r3, #4
 800487e:	f003 030f 	and.w	r3, r3, #15
 8004882:	3301      	adds	r3, #1
 8004884:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004886:	4b10      	ldr	r3, [pc, #64]	; (80048c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	0a1b      	lsrs	r3, r3, #8
 800488c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004890:	697a      	ldr	r2, [r7, #20]
 8004892:	fb03 f202 	mul.w	r2, r3, r2
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	fbb2 f3f3 	udiv	r3, r2, r3
 800489c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800489e:	4b0a      	ldr	r3, [pc, #40]	; (80048c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80048a0:	68db      	ldr	r3, [r3, #12]
 80048a2:	0e5b      	lsrs	r3, r3, #25
 80048a4:	f003 0303 	and.w	r3, r3, #3
 80048a8:	3301      	adds	r3, #1
 80048aa:	005b      	lsls	r3, r3, #1
 80048ac:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80048ae:	697a      	ldr	r2, [r7, #20]
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80048b6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80048b8:	69bb      	ldr	r3, [r7, #24]
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3724      	adds	r7, #36	; 0x24
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr
 80048c6:	bf00      	nop
 80048c8:	40021000 	.word	0x40021000
 80048cc:	08014788 	.word	0x08014788
 80048d0:	00f42400 	.word	0x00f42400
 80048d4:	007a1200 	.word	0x007a1200

080048d8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048d8:	b480      	push	{r7}
 80048da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048dc:	4b03      	ldr	r3, [pc, #12]	; (80048ec <HAL_RCC_GetHCLKFreq+0x14>)
 80048de:	681b      	ldr	r3, [r3, #0]
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr
 80048ea:	bf00      	nop
 80048ec:	20000000 	.word	0x20000000

080048f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80048f4:	f7ff fff0 	bl	80048d8 <HAL_RCC_GetHCLKFreq>
 80048f8:	4602      	mov	r2, r0
 80048fa:	4b06      	ldr	r3, [pc, #24]	; (8004914 <HAL_RCC_GetPCLK1Freq+0x24>)
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	0a1b      	lsrs	r3, r3, #8
 8004900:	f003 0307 	and.w	r3, r3, #7
 8004904:	4904      	ldr	r1, [pc, #16]	; (8004918 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004906:	5ccb      	ldrb	r3, [r1, r3]
 8004908:	f003 031f 	and.w	r3, r3, #31
 800490c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004910:	4618      	mov	r0, r3
 8004912:	bd80      	pop	{r7, pc}
 8004914:	40021000 	.word	0x40021000
 8004918:	08014780 	.word	0x08014780

0800491c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004920:	f7ff ffda 	bl	80048d8 <HAL_RCC_GetHCLKFreq>
 8004924:	4602      	mov	r2, r0
 8004926:	4b06      	ldr	r3, [pc, #24]	; (8004940 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	0adb      	lsrs	r3, r3, #11
 800492c:	f003 0307 	and.w	r3, r3, #7
 8004930:	4904      	ldr	r1, [pc, #16]	; (8004944 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004932:	5ccb      	ldrb	r3, [r1, r3]
 8004934:	f003 031f 	and.w	r3, r3, #31
 8004938:	fa22 f303 	lsr.w	r3, r2, r3
}
 800493c:	4618      	mov	r0, r3
 800493e:	bd80      	pop	{r7, pc}
 8004940:	40021000 	.word	0x40021000
 8004944:	08014780 	.word	0x08014780

08004948 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b086      	sub	sp, #24
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004950:	2300      	movs	r3, #0
 8004952:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004954:	4b27      	ldr	r3, [pc, #156]	; (80049f4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004956:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004958:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800495c:	2b00      	cmp	r3, #0
 800495e:	d003      	beq.n	8004968 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004960:	f7ff f8f6 	bl	8003b50 <HAL_PWREx_GetVoltageRange>
 8004964:	6178      	str	r0, [r7, #20]
 8004966:	e014      	b.n	8004992 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004968:	4b22      	ldr	r3, [pc, #136]	; (80049f4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800496a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800496c:	4a21      	ldr	r2, [pc, #132]	; (80049f4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800496e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004972:	6593      	str	r3, [r2, #88]	; 0x58
 8004974:	4b1f      	ldr	r3, [pc, #124]	; (80049f4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004978:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800497c:	60fb      	str	r3, [r7, #12]
 800497e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004980:	f7ff f8e6 	bl	8003b50 <HAL_PWREx_GetVoltageRange>
 8004984:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004986:	4b1b      	ldr	r3, [pc, #108]	; (80049f4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800498a:	4a1a      	ldr	r2, [pc, #104]	; (80049f4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800498c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004990:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004998:	d10b      	bne.n	80049b2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2b80      	cmp	r3, #128	; 0x80
 800499e:	d913      	bls.n	80049c8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2ba0      	cmp	r3, #160	; 0xa0
 80049a4:	d902      	bls.n	80049ac <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80049a6:	2302      	movs	r3, #2
 80049a8:	613b      	str	r3, [r7, #16]
 80049aa:	e00d      	b.n	80049c8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80049ac:	2301      	movs	r3, #1
 80049ae:	613b      	str	r3, [r7, #16]
 80049b0:	e00a      	b.n	80049c8 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2b7f      	cmp	r3, #127	; 0x7f
 80049b6:	d902      	bls.n	80049be <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80049b8:	2302      	movs	r3, #2
 80049ba:	613b      	str	r3, [r7, #16]
 80049bc:	e004      	b.n	80049c8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2b70      	cmp	r3, #112	; 0x70
 80049c2:	d101      	bne.n	80049c8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80049c4:	2301      	movs	r3, #1
 80049c6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80049c8:	4b0b      	ldr	r3, [pc, #44]	; (80049f8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f023 020f 	bic.w	r2, r3, #15
 80049d0:	4909      	ldr	r1, [pc, #36]	; (80049f8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	4313      	orrs	r3, r2
 80049d6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80049d8:	4b07      	ldr	r3, [pc, #28]	; (80049f8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f003 030f 	and.w	r3, r3, #15
 80049e0:	693a      	ldr	r2, [r7, #16]
 80049e2:	429a      	cmp	r2, r3
 80049e4:	d001      	beq.n	80049ea <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e000      	b.n	80049ec <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80049ea:	2300      	movs	r3, #0
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	3718      	adds	r7, #24
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}
 80049f4:	40021000 	.word	0x40021000
 80049f8:	40022000 	.word	0x40022000

080049fc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b087      	sub	sp, #28
 8004a00:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004a02:	4b2d      	ldr	r3, [pc, #180]	; (8004ab8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004a04:	68db      	ldr	r3, [r3, #12]
 8004a06:	f003 0303 	and.w	r3, r3, #3
 8004a0a:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2b03      	cmp	r3, #3
 8004a10:	d00b      	beq.n	8004a2a <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2b03      	cmp	r3, #3
 8004a16:	d825      	bhi.n	8004a64 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d008      	beq.n	8004a30 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2b02      	cmp	r3, #2
 8004a22:	d11f      	bne.n	8004a64 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8004a24:	4b25      	ldr	r3, [pc, #148]	; (8004abc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004a26:	613b      	str	r3, [r7, #16]
    break;
 8004a28:	e01f      	b.n	8004a6a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8004a2a:	4b25      	ldr	r3, [pc, #148]	; (8004ac0 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8004a2c:	613b      	str	r3, [r7, #16]
    break;
 8004a2e:	e01c      	b.n	8004a6a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004a30:	4b21      	ldr	r3, [pc, #132]	; (8004ab8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 0308 	and.w	r3, r3, #8
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d107      	bne.n	8004a4c <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004a3c:	4b1e      	ldr	r3, [pc, #120]	; (8004ab8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004a3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a42:	0a1b      	lsrs	r3, r3, #8
 8004a44:	f003 030f 	and.w	r3, r3, #15
 8004a48:	617b      	str	r3, [r7, #20]
 8004a4a:	e005      	b.n	8004a58 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004a4c:	4b1a      	ldr	r3, [pc, #104]	; (8004ab8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	091b      	lsrs	r3, r3, #4
 8004a52:	f003 030f 	and.w	r3, r3, #15
 8004a56:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8004a58:	4a1a      	ldr	r2, [pc, #104]	; (8004ac4 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a60:	613b      	str	r3, [r7, #16]
    break;
 8004a62:	e002      	b.n	8004a6a <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8004a64:	2300      	movs	r3, #0
 8004a66:	613b      	str	r3, [r7, #16]
    break;
 8004a68:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004a6a:	4b13      	ldr	r3, [pc, #76]	; (8004ab8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004a6c:	68db      	ldr	r3, [r3, #12]
 8004a6e:	091b      	lsrs	r3, r3, #4
 8004a70:	f003 030f 	and.w	r3, r3, #15
 8004a74:	3301      	adds	r3, #1
 8004a76:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004a78:	4b0f      	ldr	r3, [pc, #60]	; (8004ab8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	0a1b      	lsrs	r3, r3, #8
 8004a7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a82:	693a      	ldr	r2, [r7, #16]
 8004a84:	fb03 f202 	mul.w	r2, r3, r2
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a8e:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004a90:	4b09      	ldr	r3, [pc, #36]	; (8004ab8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	0e5b      	lsrs	r3, r3, #25
 8004a96:	f003 0303 	and.w	r3, r3, #3
 8004a9a:	3301      	adds	r3, #1
 8004a9c:	005b      	lsls	r3, r3, #1
 8004a9e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004aa0:	693a      	ldr	r2, [r7, #16]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aa8:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8004aaa:	683b      	ldr	r3, [r7, #0]
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	371c      	adds	r7, #28
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr
 8004ab8:	40021000 	.word	0x40021000
 8004abc:	00f42400 	.word	0x00f42400
 8004ac0:	007a1200 	.word	0x007a1200
 8004ac4:	08014788 	.word	0x08014788

08004ac8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b086      	sub	sp, #24
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d040      	beq.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ae8:	2b80      	cmp	r3, #128	; 0x80
 8004aea:	d02a      	beq.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004aec:	2b80      	cmp	r3, #128	; 0x80
 8004aee:	d825      	bhi.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004af0:	2b60      	cmp	r3, #96	; 0x60
 8004af2:	d026      	beq.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004af4:	2b60      	cmp	r3, #96	; 0x60
 8004af6:	d821      	bhi.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004af8:	2b40      	cmp	r3, #64	; 0x40
 8004afa:	d006      	beq.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004afc:	2b40      	cmp	r3, #64	; 0x40
 8004afe:	d81d      	bhi.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d009      	beq.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004b04:	2b20      	cmp	r3, #32
 8004b06:	d010      	beq.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004b08:	e018      	b.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004b0a:	4b89      	ldr	r3, [pc, #548]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b0c:	68db      	ldr	r3, [r3, #12]
 8004b0e:	4a88      	ldr	r2, [pc, #544]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b14:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004b16:	e015      	b.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	3304      	adds	r3, #4
 8004b1c:	2100      	movs	r1, #0
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f000 fb02 	bl	8005128 <RCCEx_PLLSAI1_Config>
 8004b24:	4603      	mov	r3, r0
 8004b26:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004b28:	e00c      	b.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	3320      	adds	r3, #32
 8004b2e:	2100      	movs	r1, #0
 8004b30:	4618      	mov	r0, r3
 8004b32:	f000 fbed 	bl	8005310 <RCCEx_PLLSAI2_Config>
 8004b36:	4603      	mov	r3, r0
 8004b38:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004b3a:	e003      	b.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	74fb      	strb	r3, [r7, #19]
      break;
 8004b40:	e000      	b.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8004b42:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b44:	7cfb      	ldrb	r3, [r7, #19]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d10b      	bne.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004b4a:	4b79      	ldr	r3, [pc, #484]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b4c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004b50:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b58:	4975      	ldr	r1, [pc, #468]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004b60:	e001      	b.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b62:	7cfb      	ldrb	r3, [r7, #19]
 8004b64:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d047      	beq.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b7a:	d030      	beq.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004b7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b80:	d82a      	bhi.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004b82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b86:	d02a      	beq.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004b88:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b8c:	d824      	bhi.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004b8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b92:	d008      	beq.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004b94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b98:	d81e      	bhi.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d00a      	beq.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004b9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ba2:	d010      	beq.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004ba4:	e018      	b.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004ba6:	4b62      	ldr	r3, [pc, #392]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ba8:	68db      	ldr	r3, [r3, #12]
 8004baa:	4a61      	ldr	r2, [pc, #388]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004bac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bb0:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004bb2:	e015      	b.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	3304      	adds	r3, #4
 8004bb8:	2100      	movs	r1, #0
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f000 fab4 	bl	8005128 <RCCEx_PLLSAI1_Config>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004bc4:	e00c      	b.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	3320      	adds	r3, #32
 8004bca:	2100      	movs	r1, #0
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f000 fb9f 	bl	8005310 <RCCEx_PLLSAI2_Config>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004bd6:	e003      	b.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	74fb      	strb	r3, [r7, #19]
      break;
 8004bdc:	e000      	b.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8004bde:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004be0:	7cfb      	ldrb	r3, [r7, #19]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d10b      	bne.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004be6:	4b52      	ldr	r3, [pc, #328]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004be8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004bec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bf4:	494e      	ldr	r1, [pc, #312]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004bfc:	e001      	b.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bfe:	7cfb      	ldrb	r3, [r7, #19]
 8004c00:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	f000 809f 	beq.w	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c10:	2300      	movs	r3, #0
 8004c12:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004c14:	4b46      	ldr	r3, [pc, #280]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d101      	bne.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004c20:	2301      	movs	r3, #1
 8004c22:	e000      	b.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004c24:	2300      	movs	r3, #0
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d00d      	beq.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c2a:	4b41      	ldr	r3, [pc, #260]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c2e:	4a40      	ldr	r2, [pc, #256]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c34:	6593      	str	r3, [r2, #88]	; 0x58
 8004c36:	4b3e      	ldr	r3, [pc, #248]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c3e:	60bb      	str	r3, [r7, #8]
 8004c40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c42:	2301      	movs	r3, #1
 8004c44:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c46:	4b3b      	ldr	r3, [pc, #236]	; (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a3a      	ldr	r2, [pc, #232]	; (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004c4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c50:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004c52:	f7fd f913 	bl	8001e7c <HAL_GetTick>
 8004c56:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004c58:	e009      	b.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c5a:	f7fd f90f 	bl	8001e7c <HAL_GetTick>
 8004c5e:	4602      	mov	r2, r0
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	1ad3      	subs	r3, r2, r3
 8004c64:	2b02      	cmp	r3, #2
 8004c66:	d902      	bls.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8004c68:	2303      	movs	r3, #3
 8004c6a:	74fb      	strb	r3, [r7, #19]
        break;
 8004c6c:	e005      	b.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004c6e:	4b31      	ldr	r3, [pc, #196]	; (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d0ef      	beq.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8004c7a:	7cfb      	ldrb	r3, [r7, #19]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d15b      	bne.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004c80:	4b2b      	ldr	r3, [pc, #172]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c8a:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d01f      	beq.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c98:	697a      	ldr	r2, [r7, #20]
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	d019      	beq.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004c9e:	4b24      	ldr	r3, [pc, #144]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ca4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ca8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004caa:	4b21      	ldr	r3, [pc, #132]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cb0:	4a1f      	ldr	r2, [pc, #124]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004cb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cb6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004cba:	4b1d      	ldr	r3, [pc, #116]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cc0:	4a1b      	ldr	r2, [pc, #108]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004cc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cc6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004cca:	4a19      	ldr	r2, [pc, #100]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	f003 0301 	and.w	r3, r3, #1
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d016      	beq.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cdc:	f7fd f8ce 	bl	8001e7c <HAL_GetTick>
 8004ce0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ce2:	e00b      	b.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ce4:	f7fd f8ca 	bl	8001e7c <HAL_GetTick>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	1ad3      	subs	r3, r2, r3
 8004cee:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d902      	bls.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8004cf6:	2303      	movs	r3, #3
 8004cf8:	74fb      	strb	r3, [r7, #19]
            break;
 8004cfa:	e006      	b.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cfc:	4b0c      	ldr	r3, [pc, #48]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d02:	f003 0302 	and.w	r3, r3, #2
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d0ec      	beq.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8004d0a:	7cfb      	ldrb	r3, [r7, #19]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d10c      	bne.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d10:	4b07      	ldr	r3, [pc, #28]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d16:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d20:	4903      	ldr	r1, [pc, #12]	; (8004d30 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d22:	4313      	orrs	r3, r2
 8004d24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004d28:	e008      	b.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004d2a:	7cfb      	ldrb	r3, [r7, #19]
 8004d2c:	74bb      	strb	r3, [r7, #18]
 8004d2e:	e005      	b.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x274>
 8004d30:	40021000 	.word	0x40021000
 8004d34:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d38:	7cfb      	ldrb	r3, [r7, #19]
 8004d3a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d3c:	7c7b      	ldrb	r3, [r7, #17]
 8004d3e:	2b01      	cmp	r3, #1
 8004d40:	d105      	bne.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d42:	4ba0      	ldr	r3, [pc, #640]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d46:	4a9f      	ldr	r2, [pc, #636]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d4c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f003 0301 	and.w	r3, r3, #1
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d00a      	beq.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004d5a:	4b9a      	ldr	r3, [pc, #616]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d60:	f023 0203 	bic.w	r2, r3, #3
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d68:	4996      	ldr	r1, [pc, #600]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f003 0302 	and.w	r3, r3, #2
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d00a      	beq.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004d7c:	4b91      	ldr	r3, [pc, #580]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d82:	f023 020c 	bic.w	r2, r3, #12
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d8a:	498e      	ldr	r1, [pc, #568]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f003 0304 	and.w	r3, r3, #4
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d00a      	beq.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004d9e:	4b89      	ldr	r3, [pc, #548]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004da0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004da4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dac:	4985      	ldr	r1, [pc, #532]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004dae:	4313      	orrs	r3, r2
 8004db0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f003 0308 	and.w	r3, r3, #8
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d00a      	beq.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004dc0:	4b80      	ldr	r3, [pc, #512]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dc6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dce:	497d      	ldr	r1, [pc, #500]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f003 0310 	and.w	r3, r3, #16
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d00a      	beq.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004de2:	4b78      	ldr	r3, [pc, #480]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004de8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004df0:	4974      	ldr	r1, [pc, #464]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004df2:	4313      	orrs	r3, r2
 8004df4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f003 0320 	and.w	r3, r3, #32
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d00a      	beq.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004e04:	4b6f      	ldr	r3, [pc, #444]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e0a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e12:	496c      	ldr	r1, [pc, #432]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e14:	4313      	orrs	r3, r2
 8004e16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d00a      	beq.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004e26:	4b67      	ldr	r3, [pc, #412]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e2c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e34:	4963      	ldr	r1, [pc, #396]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e36:	4313      	orrs	r3, r2
 8004e38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d00a      	beq.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004e48:	4b5e      	ldr	r3, [pc, #376]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e4e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e56:	495b      	ldr	r1, [pc, #364]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d00a      	beq.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e6a:	4b56      	ldr	r3, [pc, #344]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e70:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e78:	4952      	ldr	r1, [pc, #328]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d00a      	beq.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004e8c:	4b4d      	ldr	r3, [pc, #308]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e92:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e9a:	494a      	ldr	r1, [pc, #296]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d00a      	beq.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004eae:	4b45      	ldr	r3, [pc, #276]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004eb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eb4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ebc:	4941      	ldr	r1, [pc, #260]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d00a      	beq.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004ed0:	4b3c      	ldr	r3, [pc, #240]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ed2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004ed6:	f023 0203 	bic.w	r2, r3, #3
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ede:	4939      	ldr	r1, [pc, #228]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d028      	beq.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004ef2:	4b34      	ldr	r3, [pc, #208]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ef4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ef8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f00:	4930      	ldr	r1, [pc, #192]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f02:	4313      	orrs	r3, r2
 8004f04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f0c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f10:	d106      	bne.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f12:	4b2c      	ldr	r3, [pc, #176]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f14:	68db      	ldr	r3, [r3, #12]
 8004f16:	4a2b      	ldr	r2, [pc, #172]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f18:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f1c:	60d3      	str	r3, [r2, #12]
 8004f1e:	e011      	b.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f24:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004f28:	d10c      	bne.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	3304      	adds	r3, #4
 8004f2e:	2101      	movs	r1, #1
 8004f30:	4618      	mov	r0, r3
 8004f32:	f000 f8f9 	bl	8005128 <RCCEx_PLLSAI1_Config>
 8004f36:	4603      	mov	r3, r0
 8004f38:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004f3a:	7cfb      	ldrb	r3, [r7, #19]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d001      	beq.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8004f40:	7cfb      	ldrb	r3, [r7, #19]
 8004f42:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d04d      	beq.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f58:	d108      	bne.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8004f5a:	4b1a      	ldr	r3, [pc, #104]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f5c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f60:	4a18      	ldr	r2, [pc, #96]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004f66:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004f6a:	e012      	b.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004f6c:	4b15      	ldr	r3, [pc, #84]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f72:	4a14      	ldr	r2, [pc, #80]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f74:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f78:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004f7c:	4b11      	ldr	r3, [pc, #68]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f82:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f8a:	490e      	ldr	r1, [pc, #56]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f96:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f9a:	d106      	bne.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f9c:	4b09      	ldr	r3, [pc, #36]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f9e:	68db      	ldr	r3, [r3, #12]
 8004fa0:	4a08      	ldr	r2, [pc, #32]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004fa2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004fa6:	60d3      	str	r3, [r2, #12]
 8004fa8:	e020      	b.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004fae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004fb2:	d109      	bne.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004fb4:	4b03      	ldr	r3, [pc, #12]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	4a02      	ldr	r2, [pc, #8]	; (8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004fba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fbe:	60d3      	str	r3, [r2, #12]
 8004fc0:	e014      	b.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004fc2:	bf00      	nop
 8004fc4:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004fcc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004fd0:	d10c      	bne.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	3304      	adds	r3, #4
 8004fd6:	2101      	movs	r1, #1
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f000 f8a5 	bl	8005128 <RCCEx_PLLSAI1_Config>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004fe2:	7cfb      	ldrb	r3, [r7, #19]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d001      	beq.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8004fe8:	7cfb      	ldrb	r3, [r7, #19]
 8004fea:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d028      	beq.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004ff8:	4b4a      	ldr	r3, [pc, #296]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ffe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005006:	4947      	ldr	r1, [pc, #284]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005008:	4313      	orrs	r3, r2
 800500a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005012:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005016:	d106      	bne.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005018:	4b42      	ldr	r3, [pc, #264]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800501a:	68db      	ldr	r3, [r3, #12]
 800501c:	4a41      	ldr	r2, [pc, #260]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800501e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005022:	60d3      	str	r3, [r2, #12]
 8005024:	e011      	b.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800502a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800502e:	d10c      	bne.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	3304      	adds	r3, #4
 8005034:	2101      	movs	r1, #1
 8005036:	4618      	mov	r0, r3
 8005038:	f000 f876 	bl	8005128 <RCCEx_PLLSAI1_Config>
 800503c:	4603      	mov	r3, r0
 800503e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005040:	7cfb      	ldrb	r3, [r7, #19]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d001      	beq.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8005046:	7cfb      	ldrb	r3, [r7, #19]
 8005048:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005052:	2b00      	cmp	r3, #0
 8005054:	d01e      	beq.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005056:	4b33      	ldr	r3, [pc, #204]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005058:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800505c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005066:	492f      	ldr	r1, [pc, #188]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005068:	4313      	orrs	r3, r2
 800506a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005074:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005078:	d10c      	bne.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	3304      	adds	r3, #4
 800507e:	2102      	movs	r1, #2
 8005080:	4618      	mov	r0, r3
 8005082:	f000 f851 	bl	8005128 <RCCEx_PLLSAI1_Config>
 8005086:	4603      	mov	r3, r0
 8005088:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800508a:	7cfb      	ldrb	r3, [r7, #19]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d001      	beq.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8005090:	7cfb      	ldrb	r3, [r7, #19]
 8005092:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800509c:	2b00      	cmp	r3, #0
 800509e:	d00b      	beq.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80050a0:	4b20      	ldr	r3, [pc, #128]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80050a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80050a6:	f023 0204 	bic.w	r2, r3, #4
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050b0:	491c      	ldr	r1, [pc, #112]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80050b2:	4313      	orrs	r3, r2
 80050b4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d00b      	beq.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80050c4:	4b17      	ldr	r3, [pc, #92]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80050c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80050ca:	f023 0218 	bic.w	r2, r3, #24
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050d4:	4913      	ldr	r1, [pc, #76]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80050d6:	4313      	orrs	r3, r2
 80050d8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d017      	beq.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80050e8:	4b0e      	ldr	r3, [pc, #56]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80050ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80050ee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050f8:	490a      	ldr	r1, [pc, #40]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80050fa:	4313      	orrs	r3, r2
 80050fc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005106:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800510a:	d105      	bne.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800510c:	4b05      	ldr	r3, [pc, #20]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800510e:	68db      	ldr	r3, [r3, #12]
 8005110:	4a04      	ldr	r2, [pc, #16]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005112:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005116:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005118:	7cbb      	ldrb	r3, [r7, #18]
}
 800511a:	4618      	mov	r0, r3
 800511c:	3718      	adds	r7, #24
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}
 8005122:	bf00      	nop
 8005124:	40021000 	.word	0x40021000

08005128 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b084      	sub	sp, #16
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005132:	2300      	movs	r3, #0
 8005134:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005136:	4b72      	ldr	r3, [pc, #456]	; (8005300 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005138:	68db      	ldr	r3, [r3, #12]
 800513a:	f003 0303 	and.w	r3, r3, #3
 800513e:	2b00      	cmp	r3, #0
 8005140:	d00e      	beq.n	8005160 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005142:	4b6f      	ldr	r3, [pc, #444]	; (8005300 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005144:	68db      	ldr	r3, [r3, #12]
 8005146:	f003 0203 	and.w	r2, r3, #3
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	429a      	cmp	r2, r3
 8005150:	d103      	bne.n	800515a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
       ||
 8005156:	2b00      	cmp	r3, #0
 8005158:	d142      	bne.n	80051e0 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	73fb      	strb	r3, [r7, #15]
 800515e:	e03f      	b.n	80051e0 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	2b03      	cmp	r3, #3
 8005166:	d018      	beq.n	800519a <RCCEx_PLLSAI1_Config+0x72>
 8005168:	2b03      	cmp	r3, #3
 800516a:	d825      	bhi.n	80051b8 <RCCEx_PLLSAI1_Config+0x90>
 800516c:	2b01      	cmp	r3, #1
 800516e:	d002      	beq.n	8005176 <RCCEx_PLLSAI1_Config+0x4e>
 8005170:	2b02      	cmp	r3, #2
 8005172:	d009      	beq.n	8005188 <RCCEx_PLLSAI1_Config+0x60>
 8005174:	e020      	b.n	80051b8 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005176:	4b62      	ldr	r3, [pc, #392]	; (8005300 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f003 0302 	and.w	r3, r3, #2
 800517e:	2b00      	cmp	r3, #0
 8005180:	d11d      	bne.n	80051be <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8005182:	2301      	movs	r3, #1
 8005184:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005186:	e01a      	b.n	80051be <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005188:	4b5d      	ldr	r3, [pc, #372]	; (8005300 <RCCEx_PLLSAI1_Config+0x1d8>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005190:	2b00      	cmp	r3, #0
 8005192:	d116      	bne.n	80051c2 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005198:	e013      	b.n	80051c2 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800519a:	4b59      	ldr	r3, [pc, #356]	; (8005300 <RCCEx_PLLSAI1_Config+0x1d8>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d10f      	bne.n	80051c6 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80051a6:	4b56      	ldr	r3, [pc, #344]	; (8005300 <RCCEx_PLLSAI1_Config+0x1d8>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d109      	bne.n	80051c6 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80051b2:	2301      	movs	r3, #1
 80051b4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80051b6:	e006      	b.n	80051c6 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80051b8:	2301      	movs	r3, #1
 80051ba:	73fb      	strb	r3, [r7, #15]
      break;
 80051bc:	e004      	b.n	80051c8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80051be:	bf00      	nop
 80051c0:	e002      	b.n	80051c8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80051c2:	bf00      	nop
 80051c4:	e000      	b.n	80051c8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80051c6:	bf00      	nop
    }

    if(status == HAL_OK)
 80051c8:	7bfb      	ldrb	r3, [r7, #15]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d108      	bne.n	80051e0 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80051ce:	4b4c      	ldr	r3, [pc, #304]	; (8005300 <RCCEx_PLLSAI1_Config+0x1d8>)
 80051d0:	68db      	ldr	r3, [r3, #12]
 80051d2:	f023 0203 	bic.w	r2, r3, #3
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4949      	ldr	r1, [pc, #292]	; (8005300 <RCCEx_PLLSAI1_Config+0x1d8>)
 80051dc:	4313      	orrs	r3, r2
 80051de:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80051e0:	7bfb      	ldrb	r3, [r7, #15]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	f040 8086 	bne.w	80052f4 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80051e8:	4b45      	ldr	r3, [pc, #276]	; (8005300 <RCCEx_PLLSAI1_Config+0x1d8>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a44      	ldr	r2, [pc, #272]	; (8005300 <RCCEx_PLLSAI1_Config+0x1d8>)
 80051ee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80051f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051f4:	f7fc fe42 	bl	8001e7c <HAL_GetTick>
 80051f8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80051fa:	e009      	b.n	8005210 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80051fc:	f7fc fe3e 	bl	8001e7c <HAL_GetTick>
 8005200:	4602      	mov	r2, r0
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	1ad3      	subs	r3, r2, r3
 8005206:	2b02      	cmp	r3, #2
 8005208:	d902      	bls.n	8005210 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800520a:	2303      	movs	r3, #3
 800520c:	73fb      	strb	r3, [r7, #15]
        break;
 800520e:	e005      	b.n	800521c <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005210:	4b3b      	ldr	r3, [pc, #236]	; (8005300 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005218:	2b00      	cmp	r3, #0
 800521a:	d1ef      	bne.n	80051fc <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800521c:	7bfb      	ldrb	r3, [r7, #15]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d168      	bne.n	80052f4 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d113      	bne.n	8005250 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005228:	4b35      	ldr	r3, [pc, #212]	; (8005300 <RCCEx_PLLSAI1_Config+0x1d8>)
 800522a:	691a      	ldr	r2, [r3, #16]
 800522c:	4b35      	ldr	r3, [pc, #212]	; (8005304 <RCCEx_PLLSAI1_Config+0x1dc>)
 800522e:	4013      	ands	r3, r2
 8005230:	687a      	ldr	r2, [r7, #4]
 8005232:	6892      	ldr	r2, [r2, #8]
 8005234:	0211      	lsls	r1, r2, #8
 8005236:	687a      	ldr	r2, [r7, #4]
 8005238:	68d2      	ldr	r2, [r2, #12]
 800523a:	06d2      	lsls	r2, r2, #27
 800523c:	4311      	orrs	r1, r2
 800523e:	687a      	ldr	r2, [r7, #4]
 8005240:	6852      	ldr	r2, [r2, #4]
 8005242:	3a01      	subs	r2, #1
 8005244:	0112      	lsls	r2, r2, #4
 8005246:	430a      	orrs	r2, r1
 8005248:	492d      	ldr	r1, [pc, #180]	; (8005300 <RCCEx_PLLSAI1_Config+0x1d8>)
 800524a:	4313      	orrs	r3, r2
 800524c:	610b      	str	r3, [r1, #16]
 800524e:	e02d      	b.n	80052ac <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	2b01      	cmp	r3, #1
 8005254:	d115      	bne.n	8005282 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005256:	4b2a      	ldr	r3, [pc, #168]	; (8005300 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005258:	691a      	ldr	r2, [r3, #16]
 800525a:	4b2b      	ldr	r3, [pc, #172]	; (8005308 <RCCEx_PLLSAI1_Config+0x1e0>)
 800525c:	4013      	ands	r3, r2
 800525e:	687a      	ldr	r2, [r7, #4]
 8005260:	6892      	ldr	r2, [r2, #8]
 8005262:	0211      	lsls	r1, r2, #8
 8005264:	687a      	ldr	r2, [r7, #4]
 8005266:	6912      	ldr	r2, [r2, #16]
 8005268:	0852      	lsrs	r2, r2, #1
 800526a:	3a01      	subs	r2, #1
 800526c:	0552      	lsls	r2, r2, #21
 800526e:	4311      	orrs	r1, r2
 8005270:	687a      	ldr	r2, [r7, #4]
 8005272:	6852      	ldr	r2, [r2, #4]
 8005274:	3a01      	subs	r2, #1
 8005276:	0112      	lsls	r2, r2, #4
 8005278:	430a      	orrs	r2, r1
 800527a:	4921      	ldr	r1, [pc, #132]	; (8005300 <RCCEx_PLLSAI1_Config+0x1d8>)
 800527c:	4313      	orrs	r3, r2
 800527e:	610b      	str	r3, [r1, #16]
 8005280:	e014      	b.n	80052ac <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005282:	4b1f      	ldr	r3, [pc, #124]	; (8005300 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005284:	691a      	ldr	r2, [r3, #16]
 8005286:	4b21      	ldr	r3, [pc, #132]	; (800530c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005288:	4013      	ands	r3, r2
 800528a:	687a      	ldr	r2, [r7, #4]
 800528c:	6892      	ldr	r2, [r2, #8]
 800528e:	0211      	lsls	r1, r2, #8
 8005290:	687a      	ldr	r2, [r7, #4]
 8005292:	6952      	ldr	r2, [r2, #20]
 8005294:	0852      	lsrs	r2, r2, #1
 8005296:	3a01      	subs	r2, #1
 8005298:	0652      	lsls	r2, r2, #25
 800529a:	4311      	orrs	r1, r2
 800529c:	687a      	ldr	r2, [r7, #4]
 800529e:	6852      	ldr	r2, [r2, #4]
 80052a0:	3a01      	subs	r2, #1
 80052a2:	0112      	lsls	r2, r2, #4
 80052a4:	430a      	orrs	r2, r1
 80052a6:	4916      	ldr	r1, [pc, #88]	; (8005300 <RCCEx_PLLSAI1_Config+0x1d8>)
 80052a8:	4313      	orrs	r3, r2
 80052aa:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80052ac:	4b14      	ldr	r3, [pc, #80]	; (8005300 <RCCEx_PLLSAI1_Config+0x1d8>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a13      	ldr	r2, [pc, #76]	; (8005300 <RCCEx_PLLSAI1_Config+0x1d8>)
 80052b2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80052b6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052b8:	f7fc fde0 	bl	8001e7c <HAL_GetTick>
 80052bc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80052be:	e009      	b.n	80052d4 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80052c0:	f7fc fddc 	bl	8001e7c <HAL_GetTick>
 80052c4:	4602      	mov	r2, r0
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	1ad3      	subs	r3, r2, r3
 80052ca:	2b02      	cmp	r3, #2
 80052cc:	d902      	bls.n	80052d4 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80052ce:	2303      	movs	r3, #3
 80052d0:	73fb      	strb	r3, [r7, #15]
          break;
 80052d2:	e005      	b.n	80052e0 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80052d4:	4b0a      	ldr	r3, [pc, #40]	; (8005300 <RCCEx_PLLSAI1_Config+0x1d8>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d0ef      	beq.n	80052c0 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80052e0:	7bfb      	ldrb	r3, [r7, #15]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d106      	bne.n	80052f4 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80052e6:	4b06      	ldr	r3, [pc, #24]	; (8005300 <RCCEx_PLLSAI1_Config+0x1d8>)
 80052e8:	691a      	ldr	r2, [r3, #16]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	699b      	ldr	r3, [r3, #24]
 80052ee:	4904      	ldr	r1, [pc, #16]	; (8005300 <RCCEx_PLLSAI1_Config+0x1d8>)
 80052f0:	4313      	orrs	r3, r2
 80052f2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80052f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3710      	adds	r7, #16
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}
 80052fe:	bf00      	nop
 8005300:	40021000 	.word	0x40021000
 8005304:	07ff800f 	.word	0x07ff800f
 8005308:	ff9f800f 	.word	0xff9f800f
 800530c:	f9ff800f 	.word	0xf9ff800f

08005310 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b084      	sub	sp, #16
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800531a:	2300      	movs	r3, #0
 800531c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800531e:	4b72      	ldr	r3, [pc, #456]	; (80054e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005320:	68db      	ldr	r3, [r3, #12]
 8005322:	f003 0303 	and.w	r3, r3, #3
 8005326:	2b00      	cmp	r3, #0
 8005328:	d00e      	beq.n	8005348 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800532a:	4b6f      	ldr	r3, [pc, #444]	; (80054e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800532c:	68db      	ldr	r3, [r3, #12]
 800532e:	f003 0203 	and.w	r2, r3, #3
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	429a      	cmp	r2, r3
 8005338:	d103      	bne.n	8005342 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
       ||
 800533e:	2b00      	cmp	r3, #0
 8005340:	d142      	bne.n	80053c8 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	73fb      	strb	r3, [r7, #15]
 8005346:	e03f      	b.n	80053c8 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	2b03      	cmp	r3, #3
 800534e:	d018      	beq.n	8005382 <RCCEx_PLLSAI2_Config+0x72>
 8005350:	2b03      	cmp	r3, #3
 8005352:	d825      	bhi.n	80053a0 <RCCEx_PLLSAI2_Config+0x90>
 8005354:	2b01      	cmp	r3, #1
 8005356:	d002      	beq.n	800535e <RCCEx_PLLSAI2_Config+0x4e>
 8005358:	2b02      	cmp	r3, #2
 800535a:	d009      	beq.n	8005370 <RCCEx_PLLSAI2_Config+0x60>
 800535c:	e020      	b.n	80053a0 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800535e:	4b62      	ldr	r3, [pc, #392]	; (80054e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f003 0302 	and.w	r3, r3, #2
 8005366:	2b00      	cmp	r3, #0
 8005368:	d11d      	bne.n	80053a6 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800536a:	2301      	movs	r3, #1
 800536c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800536e:	e01a      	b.n	80053a6 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005370:	4b5d      	ldr	r3, [pc, #372]	; (80054e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005378:	2b00      	cmp	r3, #0
 800537a:	d116      	bne.n	80053aa <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 800537c:	2301      	movs	r3, #1
 800537e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005380:	e013      	b.n	80053aa <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005382:	4b59      	ldr	r3, [pc, #356]	; (80054e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800538a:	2b00      	cmp	r3, #0
 800538c:	d10f      	bne.n	80053ae <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800538e:	4b56      	ldr	r3, [pc, #344]	; (80054e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005396:	2b00      	cmp	r3, #0
 8005398:	d109      	bne.n	80053ae <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800539a:	2301      	movs	r3, #1
 800539c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800539e:	e006      	b.n	80053ae <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80053a0:	2301      	movs	r3, #1
 80053a2:	73fb      	strb	r3, [r7, #15]
      break;
 80053a4:	e004      	b.n	80053b0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80053a6:	bf00      	nop
 80053a8:	e002      	b.n	80053b0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80053aa:	bf00      	nop
 80053ac:	e000      	b.n	80053b0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80053ae:	bf00      	nop
    }

    if(status == HAL_OK)
 80053b0:	7bfb      	ldrb	r3, [r7, #15]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d108      	bne.n	80053c8 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80053b6:	4b4c      	ldr	r3, [pc, #304]	; (80054e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80053b8:	68db      	ldr	r3, [r3, #12]
 80053ba:	f023 0203 	bic.w	r2, r3, #3
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4949      	ldr	r1, [pc, #292]	; (80054e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80053c4:	4313      	orrs	r3, r2
 80053c6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80053c8:	7bfb      	ldrb	r3, [r7, #15]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	f040 8086 	bne.w	80054dc <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80053d0:	4b45      	ldr	r3, [pc, #276]	; (80054e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a44      	ldr	r2, [pc, #272]	; (80054e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80053d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053dc:	f7fc fd4e 	bl	8001e7c <HAL_GetTick>
 80053e0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80053e2:	e009      	b.n	80053f8 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80053e4:	f7fc fd4a 	bl	8001e7c <HAL_GetTick>
 80053e8:	4602      	mov	r2, r0
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	1ad3      	subs	r3, r2, r3
 80053ee:	2b02      	cmp	r3, #2
 80053f0:	d902      	bls.n	80053f8 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80053f2:	2303      	movs	r3, #3
 80053f4:	73fb      	strb	r3, [r7, #15]
        break;
 80053f6:	e005      	b.n	8005404 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80053f8:	4b3b      	ldr	r3, [pc, #236]	; (80054e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005400:	2b00      	cmp	r3, #0
 8005402:	d1ef      	bne.n	80053e4 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005404:	7bfb      	ldrb	r3, [r7, #15]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d168      	bne.n	80054dc <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d113      	bne.n	8005438 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005410:	4b35      	ldr	r3, [pc, #212]	; (80054e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005412:	695a      	ldr	r2, [r3, #20]
 8005414:	4b35      	ldr	r3, [pc, #212]	; (80054ec <RCCEx_PLLSAI2_Config+0x1dc>)
 8005416:	4013      	ands	r3, r2
 8005418:	687a      	ldr	r2, [r7, #4]
 800541a:	6892      	ldr	r2, [r2, #8]
 800541c:	0211      	lsls	r1, r2, #8
 800541e:	687a      	ldr	r2, [r7, #4]
 8005420:	68d2      	ldr	r2, [r2, #12]
 8005422:	06d2      	lsls	r2, r2, #27
 8005424:	4311      	orrs	r1, r2
 8005426:	687a      	ldr	r2, [r7, #4]
 8005428:	6852      	ldr	r2, [r2, #4]
 800542a:	3a01      	subs	r2, #1
 800542c:	0112      	lsls	r2, r2, #4
 800542e:	430a      	orrs	r2, r1
 8005430:	492d      	ldr	r1, [pc, #180]	; (80054e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005432:	4313      	orrs	r3, r2
 8005434:	614b      	str	r3, [r1, #20]
 8005436:	e02d      	b.n	8005494 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	2b01      	cmp	r3, #1
 800543c:	d115      	bne.n	800546a <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800543e:	4b2a      	ldr	r3, [pc, #168]	; (80054e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005440:	695a      	ldr	r2, [r3, #20]
 8005442:	4b2b      	ldr	r3, [pc, #172]	; (80054f0 <RCCEx_PLLSAI2_Config+0x1e0>)
 8005444:	4013      	ands	r3, r2
 8005446:	687a      	ldr	r2, [r7, #4]
 8005448:	6892      	ldr	r2, [r2, #8]
 800544a:	0211      	lsls	r1, r2, #8
 800544c:	687a      	ldr	r2, [r7, #4]
 800544e:	6912      	ldr	r2, [r2, #16]
 8005450:	0852      	lsrs	r2, r2, #1
 8005452:	3a01      	subs	r2, #1
 8005454:	0552      	lsls	r2, r2, #21
 8005456:	4311      	orrs	r1, r2
 8005458:	687a      	ldr	r2, [r7, #4]
 800545a:	6852      	ldr	r2, [r2, #4]
 800545c:	3a01      	subs	r2, #1
 800545e:	0112      	lsls	r2, r2, #4
 8005460:	430a      	orrs	r2, r1
 8005462:	4921      	ldr	r1, [pc, #132]	; (80054e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005464:	4313      	orrs	r3, r2
 8005466:	614b      	str	r3, [r1, #20]
 8005468:	e014      	b.n	8005494 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800546a:	4b1f      	ldr	r3, [pc, #124]	; (80054e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800546c:	695a      	ldr	r2, [r3, #20]
 800546e:	4b21      	ldr	r3, [pc, #132]	; (80054f4 <RCCEx_PLLSAI2_Config+0x1e4>)
 8005470:	4013      	ands	r3, r2
 8005472:	687a      	ldr	r2, [r7, #4]
 8005474:	6892      	ldr	r2, [r2, #8]
 8005476:	0211      	lsls	r1, r2, #8
 8005478:	687a      	ldr	r2, [r7, #4]
 800547a:	6952      	ldr	r2, [r2, #20]
 800547c:	0852      	lsrs	r2, r2, #1
 800547e:	3a01      	subs	r2, #1
 8005480:	0652      	lsls	r2, r2, #25
 8005482:	4311      	orrs	r1, r2
 8005484:	687a      	ldr	r2, [r7, #4]
 8005486:	6852      	ldr	r2, [r2, #4]
 8005488:	3a01      	subs	r2, #1
 800548a:	0112      	lsls	r2, r2, #4
 800548c:	430a      	orrs	r2, r1
 800548e:	4916      	ldr	r1, [pc, #88]	; (80054e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005490:	4313      	orrs	r3, r2
 8005492:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005494:	4b14      	ldr	r3, [pc, #80]	; (80054e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a13      	ldr	r2, [pc, #76]	; (80054e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800549a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800549e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054a0:	f7fc fcec 	bl	8001e7c <HAL_GetTick>
 80054a4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80054a6:	e009      	b.n	80054bc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80054a8:	f7fc fce8 	bl	8001e7c <HAL_GetTick>
 80054ac:	4602      	mov	r2, r0
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	1ad3      	subs	r3, r2, r3
 80054b2:	2b02      	cmp	r3, #2
 80054b4:	d902      	bls.n	80054bc <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80054b6:	2303      	movs	r3, #3
 80054b8:	73fb      	strb	r3, [r7, #15]
          break;
 80054ba:	e005      	b.n	80054c8 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80054bc:	4b0a      	ldr	r3, [pc, #40]	; (80054e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d0ef      	beq.n	80054a8 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80054c8:	7bfb      	ldrb	r3, [r7, #15]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d106      	bne.n	80054dc <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80054ce:	4b06      	ldr	r3, [pc, #24]	; (80054e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80054d0:	695a      	ldr	r2, [r3, #20]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	699b      	ldr	r3, [r3, #24]
 80054d6:	4904      	ldr	r1, [pc, #16]	; (80054e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80054d8:	4313      	orrs	r3, r2
 80054da:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80054dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3710      	adds	r7, #16
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}
 80054e6:	bf00      	nop
 80054e8:	40021000 	.word	0x40021000
 80054ec:	07ff800f 	.word	0x07ff800f
 80054f0:	ff9f800f 	.word	0xff9f800f
 80054f4:	f9ff800f 	.word	0xf9ff800f

080054f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b082      	sub	sp, #8
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d101      	bne.n	800550a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	e042      	b.n	8005590 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005510:	2b00      	cmp	r3, #0
 8005512:	d106      	bne.n	8005522 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2200      	movs	r2, #0
 8005518:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800551c:	6878      	ldr	r0, [r7, #4]
 800551e:	f7fc faaf 	bl	8001a80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2224      	movs	r2, #36	; 0x24
 8005526:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f022 0201 	bic.w	r2, r2, #1
 8005538:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f000 f8c4 	bl	80056c8 <UART_SetConfig>
 8005540:	4603      	mov	r3, r0
 8005542:	2b01      	cmp	r3, #1
 8005544:	d101      	bne.n	800554a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	e022      	b.n	8005590 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800554e:	2b00      	cmp	r3, #0
 8005550:	d002      	beq.n	8005558 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f000 fbb4 	bl	8005cc0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	685a      	ldr	r2, [r3, #4]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005566:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	689a      	ldr	r2, [r3, #8]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005576:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	681a      	ldr	r2, [r3, #0]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f042 0201 	orr.w	r2, r2, #1
 8005586:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005588:	6878      	ldr	r0, [r7, #4]
 800558a:	f000 fc3b 	bl	8005e04 <UART_CheckIdleState>
 800558e:	4603      	mov	r3, r0
}
 8005590:	4618      	mov	r0, r3
 8005592:	3708      	adds	r7, #8
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}

08005598 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b08a      	sub	sp, #40	; 0x28
 800559c:	af02      	add	r7, sp, #8
 800559e:	60f8      	str	r0, [r7, #12]
 80055a0:	60b9      	str	r1, [r7, #8]
 80055a2:	603b      	str	r3, [r7, #0]
 80055a4:	4613      	mov	r3, r2
 80055a6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055ae:	2b20      	cmp	r3, #32
 80055b0:	f040 8084 	bne.w	80056bc <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d002      	beq.n	80055c0 <HAL_UART_Transmit+0x28>
 80055ba:	88fb      	ldrh	r3, [r7, #6]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d101      	bne.n	80055c4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80055c0:	2301      	movs	r3, #1
 80055c2:	e07c      	b.n	80056be <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80055ca:	2b01      	cmp	r3, #1
 80055cc:	d101      	bne.n	80055d2 <HAL_UART_Transmit+0x3a>
 80055ce:	2302      	movs	r3, #2
 80055d0:	e075      	b.n	80056be <HAL_UART_Transmit+0x126>
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2201      	movs	r2, #1
 80055d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2200      	movs	r2, #0
 80055de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2221      	movs	r2, #33	; 0x21
 80055e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80055ea:	f7fc fc47 	bl	8001e7c <HAL_GetTick>
 80055ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	88fa      	ldrh	r2, [r7, #6]
 80055f4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	88fa      	ldrh	r2, [r7, #6]
 80055fc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005608:	d108      	bne.n	800561c <HAL_UART_Transmit+0x84>
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	691b      	ldr	r3, [r3, #16]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d104      	bne.n	800561c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8005612:	2300      	movs	r3, #0
 8005614:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	61bb      	str	r3, [r7, #24]
 800561a:	e003      	b.n	8005624 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005620:	2300      	movs	r3, #0
 8005622:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2200      	movs	r2, #0
 8005628:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800562c:	e02d      	b.n	800568a <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	9300      	str	r3, [sp, #0]
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	2200      	movs	r2, #0
 8005636:	2180      	movs	r1, #128	; 0x80
 8005638:	68f8      	ldr	r0, [r7, #12]
 800563a:	f000 fc2e 	bl	8005e9a <UART_WaitOnFlagUntilTimeout>
 800563e:	4603      	mov	r3, r0
 8005640:	2b00      	cmp	r3, #0
 8005642:	d001      	beq.n	8005648 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8005644:	2303      	movs	r3, #3
 8005646:	e03a      	b.n	80056be <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 8005648:	69fb      	ldr	r3, [r7, #28]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d10b      	bne.n	8005666 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800564e:	69bb      	ldr	r3, [r7, #24]
 8005650:	881a      	ldrh	r2, [r3, #0]
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800565a:	b292      	uxth	r2, r2
 800565c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800565e:	69bb      	ldr	r3, [r7, #24]
 8005660:	3302      	adds	r3, #2
 8005662:	61bb      	str	r3, [r7, #24]
 8005664:	e008      	b.n	8005678 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005666:	69fb      	ldr	r3, [r7, #28]
 8005668:	781a      	ldrb	r2, [r3, #0]
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	b292      	uxth	r2, r2
 8005670:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005672:	69fb      	ldr	r3, [r7, #28]
 8005674:	3301      	adds	r3, #1
 8005676:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800567e:	b29b      	uxth	r3, r3
 8005680:	3b01      	subs	r3, #1
 8005682:	b29a      	uxth	r2, r3
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005690:	b29b      	uxth	r3, r3
 8005692:	2b00      	cmp	r3, #0
 8005694:	d1cb      	bne.n	800562e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	9300      	str	r3, [sp, #0]
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	2200      	movs	r2, #0
 800569e:	2140      	movs	r1, #64	; 0x40
 80056a0:	68f8      	ldr	r0, [r7, #12]
 80056a2:	f000 fbfa 	bl	8005e9a <UART_WaitOnFlagUntilTimeout>
 80056a6:	4603      	mov	r3, r0
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d001      	beq.n	80056b0 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 80056ac:	2303      	movs	r3, #3
 80056ae:	e006      	b.n	80056be <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2220      	movs	r2, #32
 80056b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80056b8:	2300      	movs	r3, #0
 80056ba:	e000      	b.n	80056be <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 80056bc:	2302      	movs	r3, #2
  }
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3720      	adds	r7, #32
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}
	...

080056c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80056c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80056cc:	b08c      	sub	sp, #48	; 0x30
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80056d2:	2300      	movs	r3, #0
 80056d4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	689a      	ldr	r2, [r3, #8]
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	691b      	ldr	r3, [r3, #16]
 80056e0:	431a      	orrs	r2, r3
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	695b      	ldr	r3, [r3, #20]
 80056e6:	431a      	orrs	r2, r3
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	69db      	ldr	r3, [r3, #28]
 80056ec:	4313      	orrs	r3, r2
 80056ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	4baa      	ldr	r3, [pc, #680]	; (80059a0 <UART_SetConfig+0x2d8>)
 80056f8:	4013      	ands	r3, r2
 80056fa:	697a      	ldr	r2, [r7, #20]
 80056fc:	6812      	ldr	r2, [r2, #0]
 80056fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005700:	430b      	orrs	r3, r1
 8005702:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	68da      	ldr	r2, [r3, #12]
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	430a      	orrs	r2, r1
 8005718:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	699b      	ldr	r3, [r3, #24]
 800571e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a9f      	ldr	r2, [pc, #636]	; (80059a4 <UART_SetConfig+0x2dc>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d004      	beq.n	8005734 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	6a1b      	ldr	r3, [r3, #32]
 800572e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005730:	4313      	orrs	r3, r2
 8005732:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800573e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005742:	697a      	ldr	r2, [r7, #20]
 8005744:	6812      	ldr	r2, [r2, #0]
 8005746:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005748:	430b      	orrs	r3, r1
 800574a:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005752:	f023 010f 	bic.w	r1, r3, #15
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	430a      	orrs	r2, r1
 8005760:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a90      	ldr	r2, [pc, #576]	; (80059a8 <UART_SetConfig+0x2e0>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d125      	bne.n	80057b8 <UART_SetConfig+0xf0>
 800576c:	4b8f      	ldr	r3, [pc, #572]	; (80059ac <UART_SetConfig+0x2e4>)
 800576e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005772:	f003 0303 	and.w	r3, r3, #3
 8005776:	2b03      	cmp	r3, #3
 8005778:	d81a      	bhi.n	80057b0 <UART_SetConfig+0xe8>
 800577a:	a201      	add	r2, pc, #4	; (adr r2, 8005780 <UART_SetConfig+0xb8>)
 800577c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005780:	08005791 	.word	0x08005791
 8005784:	080057a1 	.word	0x080057a1
 8005788:	08005799 	.word	0x08005799
 800578c:	080057a9 	.word	0x080057a9
 8005790:	2301      	movs	r3, #1
 8005792:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005796:	e116      	b.n	80059c6 <UART_SetConfig+0x2fe>
 8005798:	2302      	movs	r3, #2
 800579a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800579e:	e112      	b.n	80059c6 <UART_SetConfig+0x2fe>
 80057a0:	2304      	movs	r3, #4
 80057a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057a6:	e10e      	b.n	80059c6 <UART_SetConfig+0x2fe>
 80057a8:	2308      	movs	r3, #8
 80057aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057ae:	e10a      	b.n	80059c6 <UART_SetConfig+0x2fe>
 80057b0:	2310      	movs	r3, #16
 80057b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057b6:	e106      	b.n	80059c6 <UART_SetConfig+0x2fe>
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a7c      	ldr	r2, [pc, #496]	; (80059b0 <UART_SetConfig+0x2e8>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d138      	bne.n	8005834 <UART_SetConfig+0x16c>
 80057c2:	4b7a      	ldr	r3, [pc, #488]	; (80059ac <UART_SetConfig+0x2e4>)
 80057c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057c8:	f003 030c 	and.w	r3, r3, #12
 80057cc:	2b0c      	cmp	r3, #12
 80057ce:	d82d      	bhi.n	800582c <UART_SetConfig+0x164>
 80057d0:	a201      	add	r2, pc, #4	; (adr r2, 80057d8 <UART_SetConfig+0x110>)
 80057d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057d6:	bf00      	nop
 80057d8:	0800580d 	.word	0x0800580d
 80057dc:	0800582d 	.word	0x0800582d
 80057e0:	0800582d 	.word	0x0800582d
 80057e4:	0800582d 	.word	0x0800582d
 80057e8:	0800581d 	.word	0x0800581d
 80057ec:	0800582d 	.word	0x0800582d
 80057f0:	0800582d 	.word	0x0800582d
 80057f4:	0800582d 	.word	0x0800582d
 80057f8:	08005815 	.word	0x08005815
 80057fc:	0800582d 	.word	0x0800582d
 8005800:	0800582d 	.word	0x0800582d
 8005804:	0800582d 	.word	0x0800582d
 8005808:	08005825 	.word	0x08005825
 800580c:	2300      	movs	r3, #0
 800580e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005812:	e0d8      	b.n	80059c6 <UART_SetConfig+0x2fe>
 8005814:	2302      	movs	r3, #2
 8005816:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800581a:	e0d4      	b.n	80059c6 <UART_SetConfig+0x2fe>
 800581c:	2304      	movs	r3, #4
 800581e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005822:	e0d0      	b.n	80059c6 <UART_SetConfig+0x2fe>
 8005824:	2308      	movs	r3, #8
 8005826:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800582a:	e0cc      	b.n	80059c6 <UART_SetConfig+0x2fe>
 800582c:	2310      	movs	r3, #16
 800582e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005832:	e0c8      	b.n	80059c6 <UART_SetConfig+0x2fe>
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a5e      	ldr	r2, [pc, #376]	; (80059b4 <UART_SetConfig+0x2ec>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d125      	bne.n	800588a <UART_SetConfig+0x1c2>
 800583e:	4b5b      	ldr	r3, [pc, #364]	; (80059ac <UART_SetConfig+0x2e4>)
 8005840:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005844:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005848:	2b30      	cmp	r3, #48	; 0x30
 800584a:	d016      	beq.n	800587a <UART_SetConfig+0x1b2>
 800584c:	2b30      	cmp	r3, #48	; 0x30
 800584e:	d818      	bhi.n	8005882 <UART_SetConfig+0x1ba>
 8005850:	2b20      	cmp	r3, #32
 8005852:	d00a      	beq.n	800586a <UART_SetConfig+0x1a2>
 8005854:	2b20      	cmp	r3, #32
 8005856:	d814      	bhi.n	8005882 <UART_SetConfig+0x1ba>
 8005858:	2b00      	cmp	r3, #0
 800585a:	d002      	beq.n	8005862 <UART_SetConfig+0x19a>
 800585c:	2b10      	cmp	r3, #16
 800585e:	d008      	beq.n	8005872 <UART_SetConfig+0x1aa>
 8005860:	e00f      	b.n	8005882 <UART_SetConfig+0x1ba>
 8005862:	2300      	movs	r3, #0
 8005864:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005868:	e0ad      	b.n	80059c6 <UART_SetConfig+0x2fe>
 800586a:	2302      	movs	r3, #2
 800586c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005870:	e0a9      	b.n	80059c6 <UART_SetConfig+0x2fe>
 8005872:	2304      	movs	r3, #4
 8005874:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005878:	e0a5      	b.n	80059c6 <UART_SetConfig+0x2fe>
 800587a:	2308      	movs	r3, #8
 800587c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005880:	e0a1      	b.n	80059c6 <UART_SetConfig+0x2fe>
 8005882:	2310      	movs	r3, #16
 8005884:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005888:	e09d      	b.n	80059c6 <UART_SetConfig+0x2fe>
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a4a      	ldr	r2, [pc, #296]	; (80059b8 <UART_SetConfig+0x2f0>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d125      	bne.n	80058e0 <UART_SetConfig+0x218>
 8005894:	4b45      	ldr	r3, [pc, #276]	; (80059ac <UART_SetConfig+0x2e4>)
 8005896:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800589a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800589e:	2bc0      	cmp	r3, #192	; 0xc0
 80058a0:	d016      	beq.n	80058d0 <UART_SetConfig+0x208>
 80058a2:	2bc0      	cmp	r3, #192	; 0xc0
 80058a4:	d818      	bhi.n	80058d8 <UART_SetConfig+0x210>
 80058a6:	2b80      	cmp	r3, #128	; 0x80
 80058a8:	d00a      	beq.n	80058c0 <UART_SetConfig+0x1f8>
 80058aa:	2b80      	cmp	r3, #128	; 0x80
 80058ac:	d814      	bhi.n	80058d8 <UART_SetConfig+0x210>
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d002      	beq.n	80058b8 <UART_SetConfig+0x1f0>
 80058b2:	2b40      	cmp	r3, #64	; 0x40
 80058b4:	d008      	beq.n	80058c8 <UART_SetConfig+0x200>
 80058b6:	e00f      	b.n	80058d8 <UART_SetConfig+0x210>
 80058b8:	2300      	movs	r3, #0
 80058ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058be:	e082      	b.n	80059c6 <UART_SetConfig+0x2fe>
 80058c0:	2302      	movs	r3, #2
 80058c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058c6:	e07e      	b.n	80059c6 <UART_SetConfig+0x2fe>
 80058c8:	2304      	movs	r3, #4
 80058ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058ce:	e07a      	b.n	80059c6 <UART_SetConfig+0x2fe>
 80058d0:	2308      	movs	r3, #8
 80058d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058d6:	e076      	b.n	80059c6 <UART_SetConfig+0x2fe>
 80058d8:	2310      	movs	r3, #16
 80058da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058de:	e072      	b.n	80059c6 <UART_SetConfig+0x2fe>
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a35      	ldr	r2, [pc, #212]	; (80059bc <UART_SetConfig+0x2f4>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d12a      	bne.n	8005940 <UART_SetConfig+0x278>
 80058ea:	4b30      	ldr	r3, [pc, #192]	; (80059ac <UART_SetConfig+0x2e4>)
 80058ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80058f8:	d01a      	beq.n	8005930 <UART_SetConfig+0x268>
 80058fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80058fe:	d81b      	bhi.n	8005938 <UART_SetConfig+0x270>
 8005900:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005904:	d00c      	beq.n	8005920 <UART_SetConfig+0x258>
 8005906:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800590a:	d815      	bhi.n	8005938 <UART_SetConfig+0x270>
 800590c:	2b00      	cmp	r3, #0
 800590e:	d003      	beq.n	8005918 <UART_SetConfig+0x250>
 8005910:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005914:	d008      	beq.n	8005928 <UART_SetConfig+0x260>
 8005916:	e00f      	b.n	8005938 <UART_SetConfig+0x270>
 8005918:	2300      	movs	r3, #0
 800591a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800591e:	e052      	b.n	80059c6 <UART_SetConfig+0x2fe>
 8005920:	2302      	movs	r3, #2
 8005922:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005926:	e04e      	b.n	80059c6 <UART_SetConfig+0x2fe>
 8005928:	2304      	movs	r3, #4
 800592a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800592e:	e04a      	b.n	80059c6 <UART_SetConfig+0x2fe>
 8005930:	2308      	movs	r3, #8
 8005932:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005936:	e046      	b.n	80059c6 <UART_SetConfig+0x2fe>
 8005938:	2310      	movs	r3, #16
 800593a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800593e:	e042      	b.n	80059c6 <UART_SetConfig+0x2fe>
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a17      	ldr	r2, [pc, #92]	; (80059a4 <UART_SetConfig+0x2dc>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d13a      	bne.n	80059c0 <UART_SetConfig+0x2f8>
 800594a:	4b18      	ldr	r3, [pc, #96]	; (80059ac <UART_SetConfig+0x2e4>)
 800594c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005950:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005954:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005958:	d01a      	beq.n	8005990 <UART_SetConfig+0x2c8>
 800595a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800595e:	d81b      	bhi.n	8005998 <UART_SetConfig+0x2d0>
 8005960:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005964:	d00c      	beq.n	8005980 <UART_SetConfig+0x2b8>
 8005966:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800596a:	d815      	bhi.n	8005998 <UART_SetConfig+0x2d0>
 800596c:	2b00      	cmp	r3, #0
 800596e:	d003      	beq.n	8005978 <UART_SetConfig+0x2b0>
 8005970:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005974:	d008      	beq.n	8005988 <UART_SetConfig+0x2c0>
 8005976:	e00f      	b.n	8005998 <UART_SetConfig+0x2d0>
 8005978:	2300      	movs	r3, #0
 800597a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800597e:	e022      	b.n	80059c6 <UART_SetConfig+0x2fe>
 8005980:	2302      	movs	r3, #2
 8005982:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005986:	e01e      	b.n	80059c6 <UART_SetConfig+0x2fe>
 8005988:	2304      	movs	r3, #4
 800598a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800598e:	e01a      	b.n	80059c6 <UART_SetConfig+0x2fe>
 8005990:	2308      	movs	r3, #8
 8005992:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005996:	e016      	b.n	80059c6 <UART_SetConfig+0x2fe>
 8005998:	2310      	movs	r3, #16
 800599a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800599e:	e012      	b.n	80059c6 <UART_SetConfig+0x2fe>
 80059a0:	cfff69f3 	.word	0xcfff69f3
 80059a4:	40008000 	.word	0x40008000
 80059a8:	40013800 	.word	0x40013800
 80059ac:	40021000 	.word	0x40021000
 80059b0:	40004400 	.word	0x40004400
 80059b4:	40004800 	.word	0x40004800
 80059b8:	40004c00 	.word	0x40004c00
 80059bc:	40005000 	.word	0x40005000
 80059c0:	2310      	movs	r3, #16
 80059c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4aae      	ldr	r2, [pc, #696]	; (8005c84 <UART_SetConfig+0x5bc>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	f040 8097 	bne.w	8005b00 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80059d2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80059d6:	2b08      	cmp	r3, #8
 80059d8:	d823      	bhi.n	8005a22 <UART_SetConfig+0x35a>
 80059da:	a201      	add	r2, pc, #4	; (adr r2, 80059e0 <UART_SetConfig+0x318>)
 80059dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059e0:	08005a05 	.word	0x08005a05
 80059e4:	08005a23 	.word	0x08005a23
 80059e8:	08005a0d 	.word	0x08005a0d
 80059ec:	08005a23 	.word	0x08005a23
 80059f0:	08005a13 	.word	0x08005a13
 80059f4:	08005a23 	.word	0x08005a23
 80059f8:	08005a23 	.word	0x08005a23
 80059fc:	08005a23 	.word	0x08005a23
 8005a00:	08005a1b 	.word	0x08005a1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a04:	f7fe ff74 	bl	80048f0 <HAL_RCC_GetPCLK1Freq>
 8005a08:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005a0a:	e010      	b.n	8005a2e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a0c:	4b9e      	ldr	r3, [pc, #632]	; (8005c88 <UART_SetConfig+0x5c0>)
 8005a0e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005a10:	e00d      	b.n	8005a2e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a12:	f7fe fed5 	bl	80047c0 <HAL_RCC_GetSysClockFreq>
 8005a16:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005a18:	e009      	b.n	8005a2e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a1e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005a20:	e005      	b.n	8005a2e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005a22:	2300      	movs	r3, #0
 8005a24:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005a26:	2301      	movs	r3, #1
 8005a28:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005a2c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	f000 8130 	beq.w	8005c96 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a3a:	4a94      	ldr	r2, [pc, #592]	; (8005c8c <UART_SetConfig+0x5c4>)
 8005a3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a40:	461a      	mov	r2, r3
 8005a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a44:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a48:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	685a      	ldr	r2, [r3, #4]
 8005a4e:	4613      	mov	r3, r2
 8005a50:	005b      	lsls	r3, r3, #1
 8005a52:	4413      	add	r3, r2
 8005a54:	69ba      	ldr	r2, [r7, #24]
 8005a56:	429a      	cmp	r2, r3
 8005a58:	d305      	bcc.n	8005a66 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005a60:	69ba      	ldr	r2, [r7, #24]
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d903      	bls.n	8005a6e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005a66:	2301      	movs	r3, #1
 8005a68:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005a6c:	e113      	b.n	8005c96 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a70:	2200      	movs	r2, #0
 8005a72:	60bb      	str	r3, [r7, #8]
 8005a74:	60fa      	str	r2, [r7, #12]
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a7a:	4a84      	ldr	r2, [pc, #528]	; (8005c8c <UART_SetConfig+0x5c4>)
 8005a7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a80:	b29b      	uxth	r3, r3
 8005a82:	2200      	movs	r2, #0
 8005a84:	603b      	str	r3, [r7, #0]
 8005a86:	607a      	str	r2, [r7, #4]
 8005a88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a8c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005a90:	f7fb f922 	bl	8000cd8 <__aeabi_uldivmod>
 8005a94:	4602      	mov	r2, r0
 8005a96:	460b      	mov	r3, r1
 8005a98:	4610      	mov	r0, r2
 8005a9a:	4619      	mov	r1, r3
 8005a9c:	f04f 0200 	mov.w	r2, #0
 8005aa0:	f04f 0300 	mov.w	r3, #0
 8005aa4:	020b      	lsls	r3, r1, #8
 8005aa6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005aaa:	0202      	lsls	r2, r0, #8
 8005aac:	6979      	ldr	r1, [r7, #20]
 8005aae:	6849      	ldr	r1, [r1, #4]
 8005ab0:	0849      	lsrs	r1, r1, #1
 8005ab2:	2000      	movs	r0, #0
 8005ab4:	460c      	mov	r4, r1
 8005ab6:	4605      	mov	r5, r0
 8005ab8:	eb12 0804 	adds.w	r8, r2, r4
 8005abc:	eb43 0905 	adc.w	r9, r3, r5
 8005ac0:	697b      	ldr	r3, [r7, #20]
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	469a      	mov	sl, r3
 8005ac8:	4693      	mov	fp, r2
 8005aca:	4652      	mov	r2, sl
 8005acc:	465b      	mov	r3, fp
 8005ace:	4640      	mov	r0, r8
 8005ad0:	4649      	mov	r1, r9
 8005ad2:	f7fb f901 	bl	8000cd8 <__aeabi_uldivmod>
 8005ad6:	4602      	mov	r2, r0
 8005ad8:	460b      	mov	r3, r1
 8005ada:	4613      	mov	r3, r2
 8005adc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005ade:	6a3b      	ldr	r3, [r7, #32]
 8005ae0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ae4:	d308      	bcc.n	8005af8 <UART_SetConfig+0x430>
 8005ae6:	6a3b      	ldr	r3, [r7, #32]
 8005ae8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005aec:	d204      	bcs.n	8005af8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	6a3a      	ldr	r2, [r7, #32]
 8005af4:	60da      	str	r2, [r3, #12]
 8005af6:	e0ce      	b.n	8005c96 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005af8:	2301      	movs	r3, #1
 8005afa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005afe:	e0ca      	b.n	8005c96 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	69db      	ldr	r3, [r3, #28]
 8005b04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b08:	d166      	bne.n	8005bd8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005b0a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005b0e:	2b08      	cmp	r3, #8
 8005b10:	d827      	bhi.n	8005b62 <UART_SetConfig+0x49a>
 8005b12:	a201      	add	r2, pc, #4	; (adr r2, 8005b18 <UART_SetConfig+0x450>)
 8005b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b18:	08005b3d 	.word	0x08005b3d
 8005b1c:	08005b45 	.word	0x08005b45
 8005b20:	08005b4d 	.word	0x08005b4d
 8005b24:	08005b63 	.word	0x08005b63
 8005b28:	08005b53 	.word	0x08005b53
 8005b2c:	08005b63 	.word	0x08005b63
 8005b30:	08005b63 	.word	0x08005b63
 8005b34:	08005b63 	.word	0x08005b63
 8005b38:	08005b5b 	.word	0x08005b5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b3c:	f7fe fed8 	bl	80048f0 <HAL_RCC_GetPCLK1Freq>
 8005b40:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005b42:	e014      	b.n	8005b6e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b44:	f7fe feea 	bl	800491c <HAL_RCC_GetPCLK2Freq>
 8005b48:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005b4a:	e010      	b.n	8005b6e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b4c:	4b4e      	ldr	r3, [pc, #312]	; (8005c88 <UART_SetConfig+0x5c0>)
 8005b4e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005b50:	e00d      	b.n	8005b6e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b52:	f7fe fe35 	bl	80047c0 <HAL_RCC_GetSysClockFreq>
 8005b56:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005b58:	e009      	b.n	8005b6e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b5e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005b60:	e005      	b.n	8005b6e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005b62:	2300      	movs	r3, #0
 8005b64:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005b66:	2301      	movs	r3, #1
 8005b68:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005b6c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	f000 8090 	beq.w	8005c96 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b7a:	4a44      	ldr	r2, [pc, #272]	; (8005c8c <UART_SetConfig+0x5c4>)
 8005b7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b80:	461a      	mov	r2, r3
 8005b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b84:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b88:	005a      	lsls	r2, r3, #1
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	085b      	lsrs	r3, r3, #1
 8005b90:	441a      	add	r2, r3
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b9a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b9c:	6a3b      	ldr	r3, [r7, #32]
 8005b9e:	2b0f      	cmp	r3, #15
 8005ba0:	d916      	bls.n	8005bd0 <UART_SetConfig+0x508>
 8005ba2:	6a3b      	ldr	r3, [r7, #32]
 8005ba4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ba8:	d212      	bcs.n	8005bd0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005baa:	6a3b      	ldr	r3, [r7, #32]
 8005bac:	b29b      	uxth	r3, r3
 8005bae:	f023 030f 	bic.w	r3, r3, #15
 8005bb2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005bb4:	6a3b      	ldr	r3, [r7, #32]
 8005bb6:	085b      	lsrs	r3, r3, #1
 8005bb8:	b29b      	uxth	r3, r3
 8005bba:	f003 0307 	and.w	r3, r3, #7
 8005bbe:	b29a      	uxth	r2, r3
 8005bc0:	8bfb      	ldrh	r3, [r7, #30]
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	8bfa      	ldrh	r2, [r7, #30]
 8005bcc:	60da      	str	r2, [r3, #12]
 8005bce:	e062      	b.n	8005c96 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005bd6:	e05e      	b.n	8005c96 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005bd8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005bdc:	2b08      	cmp	r3, #8
 8005bde:	d828      	bhi.n	8005c32 <UART_SetConfig+0x56a>
 8005be0:	a201      	add	r2, pc, #4	; (adr r2, 8005be8 <UART_SetConfig+0x520>)
 8005be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005be6:	bf00      	nop
 8005be8:	08005c0d 	.word	0x08005c0d
 8005bec:	08005c15 	.word	0x08005c15
 8005bf0:	08005c1d 	.word	0x08005c1d
 8005bf4:	08005c33 	.word	0x08005c33
 8005bf8:	08005c23 	.word	0x08005c23
 8005bfc:	08005c33 	.word	0x08005c33
 8005c00:	08005c33 	.word	0x08005c33
 8005c04:	08005c33 	.word	0x08005c33
 8005c08:	08005c2b 	.word	0x08005c2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c0c:	f7fe fe70 	bl	80048f0 <HAL_RCC_GetPCLK1Freq>
 8005c10:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005c12:	e014      	b.n	8005c3e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c14:	f7fe fe82 	bl	800491c <HAL_RCC_GetPCLK2Freq>
 8005c18:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005c1a:	e010      	b.n	8005c3e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c1c:	4b1a      	ldr	r3, [pc, #104]	; (8005c88 <UART_SetConfig+0x5c0>)
 8005c1e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005c20:	e00d      	b.n	8005c3e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c22:	f7fe fdcd 	bl	80047c0 <HAL_RCC_GetSysClockFreq>
 8005c26:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005c28:	e009      	b.n	8005c3e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c2e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005c30:	e005      	b.n	8005c3e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005c32:	2300      	movs	r3, #0
 8005c34:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005c3c:	bf00      	nop
    }

    if (pclk != 0U)
 8005c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d028      	beq.n	8005c96 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c48:	4a10      	ldr	r2, [pc, #64]	; (8005c8c <UART_SetConfig+0x5c4>)
 8005c4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c4e:	461a      	mov	r2, r3
 8005c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c52:	fbb3 f2f2 	udiv	r2, r3, r2
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	085b      	lsrs	r3, r3, #1
 8005c5c:	441a      	add	r2, r3
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c66:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c68:	6a3b      	ldr	r3, [r7, #32]
 8005c6a:	2b0f      	cmp	r3, #15
 8005c6c:	d910      	bls.n	8005c90 <UART_SetConfig+0x5c8>
 8005c6e:	6a3b      	ldr	r3, [r7, #32]
 8005c70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c74:	d20c      	bcs.n	8005c90 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005c76:	6a3b      	ldr	r3, [r7, #32]
 8005c78:	b29a      	uxth	r2, r3
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	60da      	str	r2, [r3, #12]
 8005c80:	e009      	b.n	8005c96 <UART_SetConfig+0x5ce>
 8005c82:	bf00      	nop
 8005c84:	40008000 	.word	0x40008000
 8005c88:	00f42400 	.word	0x00f42400
 8005c8c:	080147b8 	.word	0x080147b8
      }
      else
      {
        ret = HAL_ERROR;
 8005c90:	2301      	movs	r3, #1
 8005c92:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	2201      	movs	r2, #1
 8005c9a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	2201      	movs	r2, #1
 8005ca2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005cb2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3730      	adds	r7, #48	; 0x30
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005cc0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b083      	sub	sp, #12
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ccc:	f003 0301 	and.w	r3, r3, #1
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d00a      	beq.n	8005cea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	430a      	orrs	r2, r1
 8005ce8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cee:	f003 0302 	and.w	r3, r3, #2
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d00a      	beq.n	8005d0c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	430a      	orrs	r2, r1
 8005d0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d10:	f003 0304 	and.w	r3, r3, #4
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d00a      	beq.n	8005d2e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	430a      	orrs	r2, r1
 8005d2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d32:	f003 0308 	and.w	r3, r3, #8
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d00a      	beq.n	8005d50 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	430a      	orrs	r2, r1
 8005d4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d54:	f003 0310 	and.w	r3, r3, #16
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d00a      	beq.n	8005d72 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	689b      	ldr	r3, [r3, #8]
 8005d62:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	430a      	orrs	r2, r1
 8005d70:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d76:	f003 0320 	and.w	r3, r3, #32
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d00a      	beq.n	8005d94 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	689b      	ldr	r3, [r3, #8]
 8005d84:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	430a      	orrs	r2, r1
 8005d92:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d01a      	beq.n	8005dd6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	430a      	orrs	r2, r1
 8005db4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005dbe:	d10a      	bne.n	8005dd6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	430a      	orrs	r2, r1
 8005dd4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d00a      	beq.n	8005df8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	430a      	orrs	r2, r1
 8005df6:	605a      	str	r2, [r3, #4]
  }
}
 8005df8:	bf00      	nop
 8005dfa:	370c      	adds	r7, #12
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e02:	4770      	bx	lr

08005e04 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b086      	sub	sp, #24
 8005e08:	af02      	add	r7, sp, #8
 8005e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005e14:	f7fc f832 	bl	8001e7c <HAL_GetTick>
 8005e18:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f003 0308 	and.w	r3, r3, #8
 8005e24:	2b08      	cmp	r3, #8
 8005e26:	d10e      	bne.n	8005e46 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e28:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005e2c:	9300      	str	r3, [sp, #0]
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2200      	movs	r2, #0
 8005e32:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f000 f82f 	bl	8005e9a <UART_WaitOnFlagUntilTimeout>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d001      	beq.n	8005e46 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e42:	2303      	movs	r3, #3
 8005e44:	e025      	b.n	8005e92 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f003 0304 	and.w	r3, r3, #4
 8005e50:	2b04      	cmp	r3, #4
 8005e52:	d10e      	bne.n	8005e72 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e54:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005e58:	9300      	str	r3, [sp, #0]
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f000 f819 	bl	8005e9a <UART_WaitOnFlagUntilTimeout>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d001      	beq.n	8005e72 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e6e:	2303      	movs	r3, #3
 8005e70:	e00f      	b.n	8005e92 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2220      	movs	r2, #32
 8005e76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2220      	movs	r2, #32
 8005e7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2200      	movs	r2, #0
 8005e86:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005e90:	2300      	movs	r3, #0
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3710      	adds	r7, #16
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}

08005e9a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005e9a:	b580      	push	{r7, lr}
 8005e9c:	b09c      	sub	sp, #112	; 0x70
 8005e9e:	af00      	add	r7, sp, #0
 8005ea0:	60f8      	str	r0, [r7, #12]
 8005ea2:	60b9      	str	r1, [r7, #8]
 8005ea4:	603b      	str	r3, [r7, #0]
 8005ea6:	4613      	mov	r3, r2
 8005ea8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005eaa:	e0a9      	b.n	8006000 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005eac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005eae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005eb2:	f000 80a5 	beq.w	8006000 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005eb6:	f7fb ffe1 	bl	8001e7c <HAL_GetTick>
 8005eba:	4602      	mov	r2, r0
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	1ad3      	subs	r3, r2, r3
 8005ec0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005ec2:	429a      	cmp	r2, r3
 8005ec4:	d302      	bcc.n	8005ecc <UART_WaitOnFlagUntilTimeout+0x32>
 8005ec6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d140      	bne.n	8005f4e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ed2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ed4:	e853 3f00 	ldrex	r3, [r3]
 8005ed8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005eda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005edc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005ee0:	667b      	str	r3, [r7, #100]	; 0x64
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	461a      	mov	r2, r3
 8005ee8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005eea:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005eec:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005ef0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005ef2:	e841 2300 	strex	r3, r2, [r1]
 8005ef6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005ef8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d1e6      	bne.n	8005ecc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	3308      	adds	r3, #8
 8005f04:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f08:	e853 3f00 	ldrex	r3, [r3]
 8005f0c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f10:	f023 0301 	bic.w	r3, r3, #1
 8005f14:	663b      	str	r3, [r7, #96]	; 0x60
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	3308      	adds	r3, #8
 8005f1c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005f1e:	64ba      	str	r2, [r7, #72]	; 0x48
 8005f20:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f22:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005f24:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f26:	e841 2300 	strex	r3, r2, [r1]
 8005f2a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005f2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d1e5      	bne.n	8005efe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2220      	movs	r2, #32
 8005f36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	2220      	movs	r2, #32
 8005f3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2200      	movs	r2, #0
 8005f46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005f4a:	2303      	movs	r3, #3
 8005f4c:	e069      	b.n	8006022 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f003 0304 	and.w	r3, r3, #4
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d051      	beq.n	8006000 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	69db      	ldr	r3, [r3, #28]
 8005f62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f6a:	d149      	bne.n	8006000 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f74:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f7e:	e853 3f00 	ldrex	r3, [r3]
 8005f82:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f86:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005f8a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	461a      	mov	r2, r3
 8005f92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f94:	637b      	str	r3, [r7, #52]	; 0x34
 8005f96:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f98:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005f9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f9c:	e841 2300 	strex	r3, r2, [r1]
 8005fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d1e6      	bne.n	8005f76 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	3308      	adds	r3, #8
 8005fae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	e853 3f00 	ldrex	r3, [r3]
 8005fb6:	613b      	str	r3, [r7, #16]
   return(result);
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	f023 0301 	bic.w	r3, r3, #1
 8005fbe:	66bb      	str	r3, [r7, #104]	; 0x68
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	3308      	adds	r3, #8
 8005fc6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005fc8:	623a      	str	r2, [r7, #32]
 8005fca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fcc:	69f9      	ldr	r1, [r7, #28]
 8005fce:	6a3a      	ldr	r2, [r7, #32]
 8005fd0:	e841 2300 	strex	r3, r2, [r1]
 8005fd4:	61bb      	str	r3, [r7, #24]
   return(result);
 8005fd6:	69bb      	ldr	r3, [r7, #24]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d1e5      	bne.n	8005fa8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2220      	movs	r2, #32
 8005fe0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	2220      	movs	r2, #32
 8005fe8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2220      	movs	r2, #32
 8005ff0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005ffc:	2303      	movs	r3, #3
 8005ffe:	e010      	b.n	8006022 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	69da      	ldr	r2, [r3, #28]
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	4013      	ands	r3, r2
 800600a:	68ba      	ldr	r2, [r7, #8]
 800600c:	429a      	cmp	r2, r3
 800600e:	bf0c      	ite	eq
 8006010:	2301      	moveq	r3, #1
 8006012:	2300      	movne	r3, #0
 8006014:	b2db      	uxtb	r3, r3
 8006016:	461a      	mov	r2, r3
 8006018:	79fb      	ldrb	r3, [r7, #7]
 800601a:	429a      	cmp	r2, r3
 800601c:	f43f af46 	beq.w	8005eac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006020:	2300      	movs	r3, #0
}
 8006022:	4618      	mov	r0, r3
 8006024:	3770      	adds	r7, #112	; 0x70
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}

0800602a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800602a:	b480      	push	{r7}
 800602c:	b085      	sub	sp, #20
 800602e:	af00      	add	r7, sp, #0
 8006030:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006038:	2b01      	cmp	r3, #1
 800603a:	d101      	bne.n	8006040 <HAL_UARTEx_DisableFifoMode+0x16>
 800603c:	2302      	movs	r3, #2
 800603e:	e027      	b.n	8006090 <HAL_UARTEx_DisableFifoMode+0x66>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2201      	movs	r2, #1
 8006044:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2224      	movs	r2, #36	; 0x24
 800604c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	681a      	ldr	r2, [r3, #0]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f022 0201 	bic.w	r2, r2, #1
 8006066:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800606e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2200      	movs	r2, #0
 8006074:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	68fa      	ldr	r2, [r7, #12]
 800607c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2220      	movs	r2, #32
 8006082:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2200      	movs	r2, #0
 800608a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800608e:	2300      	movs	r3, #0
}
 8006090:	4618      	mov	r0, r3
 8006092:	3714      	adds	r7, #20
 8006094:	46bd      	mov	sp, r7
 8006096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609a:	4770      	bx	lr

0800609c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b084      	sub	sp, #16
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
 80060a4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	d101      	bne.n	80060b4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80060b0:	2302      	movs	r3, #2
 80060b2:	e02d      	b.n	8006110 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2201      	movs	r2, #1
 80060b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2224      	movs	r2, #36	; 0x24
 80060c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	681a      	ldr	r2, [r3, #0]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f022 0201 	bic.w	r2, r2, #1
 80060da:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	689b      	ldr	r3, [r3, #8]
 80060e2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	683a      	ldr	r2, [r7, #0]
 80060ec:	430a      	orrs	r2, r1
 80060ee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f000 f84f 	bl	8006194 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	68fa      	ldr	r2, [r7, #12]
 80060fc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2220      	movs	r2, #32
 8006102:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2200      	movs	r2, #0
 800610a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800610e:	2300      	movs	r3, #0
}
 8006110:	4618      	mov	r0, r3
 8006112:	3710      	adds	r7, #16
 8006114:	46bd      	mov	sp, r7
 8006116:	bd80      	pop	{r7, pc}

08006118 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b084      	sub	sp, #16
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
 8006120:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006128:	2b01      	cmp	r3, #1
 800612a:	d101      	bne.n	8006130 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800612c:	2302      	movs	r3, #2
 800612e:	e02d      	b.n	800618c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2201      	movs	r2, #1
 8006134:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2224      	movs	r2, #36	; 0x24
 800613c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	681a      	ldr	r2, [r3, #0]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f022 0201 	bic.w	r2, r2, #1
 8006156:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	689b      	ldr	r3, [r3, #8]
 800615e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	683a      	ldr	r2, [r7, #0]
 8006168:	430a      	orrs	r2, r1
 800616a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	f000 f811 	bl	8006194 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	68fa      	ldr	r2, [r7, #12]
 8006178:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2220      	movs	r2, #32
 800617e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2200      	movs	r2, #0
 8006186:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800618a:	2300      	movs	r3, #0
}
 800618c:	4618      	mov	r0, r3
 800618e:	3710      	adds	r7, #16
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}

08006194 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006194:	b480      	push	{r7}
 8006196:	b085      	sub	sp, #20
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d108      	bne.n	80061b6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2201      	movs	r2, #1
 80061a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2201      	movs	r2, #1
 80061b0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80061b4:	e031      	b.n	800621a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80061b6:	2308      	movs	r3, #8
 80061b8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80061ba:	2308      	movs	r3, #8
 80061bc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	689b      	ldr	r3, [r3, #8]
 80061c4:	0e5b      	lsrs	r3, r3, #25
 80061c6:	b2db      	uxtb	r3, r3
 80061c8:	f003 0307 	and.w	r3, r3, #7
 80061cc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	689b      	ldr	r3, [r3, #8]
 80061d4:	0f5b      	lsrs	r3, r3, #29
 80061d6:	b2db      	uxtb	r3, r3
 80061d8:	f003 0307 	and.w	r3, r3, #7
 80061dc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80061de:	7bbb      	ldrb	r3, [r7, #14]
 80061e0:	7b3a      	ldrb	r2, [r7, #12]
 80061e2:	4911      	ldr	r1, [pc, #68]	; (8006228 <UARTEx_SetNbDataToProcess+0x94>)
 80061e4:	5c8a      	ldrb	r2, [r1, r2]
 80061e6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80061ea:	7b3a      	ldrb	r2, [r7, #12]
 80061ec:	490f      	ldr	r1, [pc, #60]	; (800622c <UARTEx_SetNbDataToProcess+0x98>)
 80061ee:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80061f0:	fb93 f3f2 	sdiv	r3, r3, r2
 80061f4:	b29a      	uxth	r2, r3
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80061fc:	7bfb      	ldrb	r3, [r7, #15]
 80061fe:	7b7a      	ldrb	r2, [r7, #13]
 8006200:	4909      	ldr	r1, [pc, #36]	; (8006228 <UARTEx_SetNbDataToProcess+0x94>)
 8006202:	5c8a      	ldrb	r2, [r1, r2]
 8006204:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006208:	7b7a      	ldrb	r2, [r7, #13]
 800620a:	4908      	ldr	r1, [pc, #32]	; (800622c <UARTEx_SetNbDataToProcess+0x98>)
 800620c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800620e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006212:	b29a      	uxth	r2, r3
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800621a:	bf00      	nop
 800621c:	3714      	adds	r7, #20
 800621e:	46bd      	mov	sp, r7
 8006220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006224:	4770      	bx	lr
 8006226:	bf00      	nop
 8006228:	080147d0 	.word	0x080147d0
 800622c:	080147d8 	.word	0x080147d8

08006230 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006230:	b084      	sub	sp, #16
 8006232:	b580      	push	{r7, lr}
 8006234:	b084      	sub	sp, #16
 8006236:	af00      	add	r7, sp, #0
 8006238:	6078      	str	r0, [r7, #4]
 800623a:	f107 001c 	add.w	r0, r7, #28
 800623e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	68db      	ldr	r3, [r3, #12]
 8006246:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f000 f9a0 	bl	8006594 <USB_CoreReset>
 8006254:	4603      	mov	r3, r0
 8006256:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8006258:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800625a:	2b00      	cmp	r3, #0
 800625c:	d106      	bne.n	800626c <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006262:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	639a      	str	r2, [r3, #56]	; 0x38
 800626a:	e005      	b.n	8006278 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006270:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8006278:	7bfb      	ldrb	r3, [r7, #15]
}
 800627a:	4618      	mov	r0, r3
 800627c:	3710      	adds	r7, #16
 800627e:	46bd      	mov	sp, r7
 8006280:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006284:	b004      	add	sp, #16
 8006286:	4770      	bx	lr

08006288 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006288:	b480      	push	{r7}
 800628a:	b083      	sub	sp, #12
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	689b      	ldr	r3, [r3, #8]
 8006294:	f043 0201 	orr.w	r2, r3, #1
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800629c:	2300      	movs	r3, #0
}
 800629e:	4618      	mov	r0, r3
 80062a0:	370c      	adds	r7, #12
 80062a2:	46bd      	mov	sp, r7
 80062a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a8:	4770      	bx	lr

080062aa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80062aa:	b480      	push	{r7}
 80062ac:	b083      	sub	sp, #12
 80062ae:	af00      	add	r7, sp, #0
 80062b0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	689b      	ldr	r3, [r3, #8]
 80062b6:	f023 0201 	bic.w	r2, r3, #1
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80062be:	2300      	movs	r3, #0
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	370c      	adds	r7, #12
 80062c4:	46bd      	mov	sp, r7
 80062c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ca:	4770      	bx	lr

080062cc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b084      	sub	sp, #16
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
 80062d4:	460b      	mov	r3, r1
 80062d6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80062d8:	2300      	movs	r3, #0
 80062da:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	68db      	ldr	r3, [r3, #12]
 80062e0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80062e8:	78fb      	ldrb	r3, [r7, #3]
 80062ea:	2b01      	cmp	r3, #1
 80062ec:	d115      	bne.n	800631a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	68db      	ldr	r3, [r3, #12]
 80062f2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80062fa:	2001      	movs	r0, #1
 80062fc:	f7fb fdca 	bl	8001e94 <HAL_Delay>
      ms++;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	3301      	adds	r3, #1
 8006304:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f000 f935 	bl	8006576 <USB_GetMode>
 800630c:	4603      	mov	r3, r0
 800630e:	2b01      	cmp	r3, #1
 8006310:	d01e      	beq.n	8006350 <USB_SetCurrentMode+0x84>
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	2b31      	cmp	r3, #49	; 0x31
 8006316:	d9f0      	bls.n	80062fa <USB_SetCurrentMode+0x2e>
 8006318:	e01a      	b.n	8006350 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800631a:	78fb      	ldrb	r3, [r7, #3]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d115      	bne.n	800634c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	68db      	ldr	r3, [r3, #12]
 8006324:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800632c:	2001      	movs	r0, #1
 800632e:	f7fb fdb1 	bl	8001e94 <HAL_Delay>
      ms++;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	3301      	adds	r3, #1
 8006336:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	f000 f91c 	bl	8006576 <USB_GetMode>
 800633e:	4603      	mov	r3, r0
 8006340:	2b00      	cmp	r3, #0
 8006342:	d005      	beq.n	8006350 <USB_SetCurrentMode+0x84>
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2b31      	cmp	r3, #49	; 0x31
 8006348:	d9f0      	bls.n	800632c <USB_SetCurrentMode+0x60>
 800634a:	e001      	b.n	8006350 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800634c:	2301      	movs	r3, #1
 800634e:	e005      	b.n	800635c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	2b32      	cmp	r3, #50	; 0x32
 8006354:	d101      	bne.n	800635a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006356:	2301      	movs	r3, #1
 8006358:	e000      	b.n	800635c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800635a:	2300      	movs	r3, #0
}
 800635c:	4618      	mov	r0, r3
 800635e:	3710      	adds	r7, #16
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}

08006364 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006364:	b480      	push	{r7}
 8006366:	b085      	sub	sp, #20
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
 800636c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800636e:	2300      	movs	r3, #0
 8006370:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	3301      	adds	r3, #1
 8006376:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	4a13      	ldr	r2, [pc, #76]	; (80063c8 <USB_FlushTxFifo+0x64>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d901      	bls.n	8006384 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006380:	2303      	movs	r3, #3
 8006382:	e01b      	b.n	80063bc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	691b      	ldr	r3, [r3, #16]
 8006388:	2b00      	cmp	r3, #0
 800638a:	daf2      	bge.n	8006372 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800638c:	2300      	movs	r3, #0
 800638e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	019b      	lsls	r3, r3, #6
 8006394:	f043 0220 	orr.w	r2, r3, #32
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	3301      	adds	r3, #1
 80063a0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	4a08      	ldr	r2, [pc, #32]	; (80063c8 <USB_FlushTxFifo+0x64>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d901      	bls.n	80063ae <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80063aa:	2303      	movs	r3, #3
 80063ac:	e006      	b.n	80063bc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	691b      	ldr	r3, [r3, #16]
 80063b2:	f003 0320 	and.w	r3, r3, #32
 80063b6:	2b20      	cmp	r3, #32
 80063b8:	d0f0      	beq.n	800639c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80063ba:	2300      	movs	r3, #0
}
 80063bc:	4618      	mov	r0, r3
 80063be:	3714      	adds	r7, #20
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr
 80063c8:	00030d40 	.word	0x00030d40

080063cc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b085      	sub	sp, #20
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80063d4:	2300      	movs	r3, #0
 80063d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	3301      	adds	r3, #1
 80063dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	4a11      	ldr	r2, [pc, #68]	; (8006428 <USB_FlushRxFifo+0x5c>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d901      	bls.n	80063ea <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80063e6:	2303      	movs	r3, #3
 80063e8:	e018      	b.n	800641c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	691b      	ldr	r3, [r3, #16]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	daf2      	bge.n	80063d8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80063f2:	2300      	movs	r3, #0
 80063f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2210      	movs	r2, #16
 80063fa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	3301      	adds	r3, #1
 8006400:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	4a08      	ldr	r2, [pc, #32]	; (8006428 <USB_FlushRxFifo+0x5c>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d901      	bls.n	800640e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800640a:	2303      	movs	r3, #3
 800640c:	e006      	b.n	800641c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	691b      	ldr	r3, [r3, #16]
 8006412:	f003 0310 	and.w	r3, r3, #16
 8006416:	2b10      	cmp	r3, #16
 8006418:	d0f0      	beq.n	80063fc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800641a:	2300      	movs	r3, #0
}
 800641c:	4618      	mov	r0, r3
 800641e:	3714      	adds	r7, #20
 8006420:	46bd      	mov	sp, r7
 8006422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006426:	4770      	bx	lr
 8006428:	00030d40 	.word	0x00030d40

0800642c <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 800642c:	b480      	push	{r7}
 800642e:	b089      	sub	sp, #36	; 0x24
 8006430:	af00      	add	r7, sp, #0
 8006432:	60f8      	str	r0, [r7, #12]
 8006434:	60b9      	str	r1, [r7, #8]
 8006436:	4611      	mov	r1, r2
 8006438:	461a      	mov	r2, r3
 800643a:	460b      	mov	r3, r1
 800643c:	71fb      	strb	r3, [r7, #7]
 800643e:	4613      	mov	r3, r2
 8006440:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800644a:	88bb      	ldrh	r3, [r7, #4]
 800644c:	3303      	adds	r3, #3
 800644e:	089b      	lsrs	r3, r3, #2
 8006450:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8006452:	2300      	movs	r3, #0
 8006454:	61bb      	str	r3, [r7, #24]
 8006456:	e018      	b.n	800648a <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006458:	79fb      	ldrb	r3, [r7, #7]
 800645a:	031a      	lsls	r2, r3, #12
 800645c:	697b      	ldr	r3, [r7, #20]
 800645e:	4413      	add	r3, r2
 8006460:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006464:	461a      	mov	r2, r3
 8006466:	69fb      	ldr	r3, [r7, #28]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	6013      	str	r3, [r2, #0]
    pSrc++;
 800646c:	69fb      	ldr	r3, [r7, #28]
 800646e:	3301      	adds	r3, #1
 8006470:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8006472:	69fb      	ldr	r3, [r7, #28]
 8006474:	3301      	adds	r3, #1
 8006476:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8006478:	69fb      	ldr	r3, [r7, #28]
 800647a:	3301      	adds	r3, #1
 800647c:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800647e:	69fb      	ldr	r3, [r7, #28]
 8006480:	3301      	adds	r3, #1
 8006482:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006484:	69bb      	ldr	r3, [r7, #24]
 8006486:	3301      	adds	r3, #1
 8006488:	61bb      	str	r3, [r7, #24]
 800648a:	69ba      	ldr	r2, [r7, #24]
 800648c:	693b      	ldr	r3, [r7, #16]
 800648e:	429a      	cmp	r2, r3
 8006490:	d3e2      	bcc.n	8006458 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8006492:	2300      	movs	r3, #0
}
 8006494:	4618      	mov	r0, r3
 8006496:	3724      	adds	r7, #36	; 0x24
 8006498:	46bd      	mov	sp, r7
 800649a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649e:	4770      	bx	lr

080064a0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b08b      	sub	sp, #44	; 0x2c
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	60f8      	str	r0, [r7, #12]
 80064a8:	60b9      	str	r1, [r7, #8]
 80064aa:	4613      	mov	r3, r2
 80064ac:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80064b6:	88fb      	ldrh	r3, [r7, #6]
 80064b8:	089b      	lsrs	r3, r3, #2
 80064ba:	b29b      	uxth	r3, r3
 80064bc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80064be:	88fb      	ldrh	r3, [r7, #6]
 80064c0:	f003 0303 	and.w	r3, r3, #3
 80064c4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80064c6:	2300      	movs	r3, #0
 80064c8:	623b      	str	r3, [r7, #32]
 80064ca:	e014      	b.n	80064f6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80064cc:	69bb      	ldr	r3, [r7, #24]
 80064ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064d2:	681a      	ldr	r2, [r3, #0]
 80064d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d6:	601a      	str	r2, [r3, #0]
    pDest++;
 80064d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064da:	3301      	adds	r3, #1
 80064dc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80064de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e0:	3301      	adds	r3, #1
 80064e2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80064e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e6:	3301      	adds	r3, #1
 80064e8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80064ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ec:	3301      	adds	r3, #1
 80064ee:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80064f0:	6a3b      	ldr	r3, [r7, #32]
 80064f2:	3301      	adds	r3, #1
 80064f4:	623b      	str	r3, [r7, #32]
 80064f6:	6a3a      	ldr	r2, [r7, #32]
 80064f8:	697b      	ldr	r3, [r7, #20]
 80064fa:	429a      	cmp	r2, r3
 80064fc:	d3e6      	bcc.n	80064cc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80064fe:	8bfb      	ldrh	r3, [r7, #30]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d01e      	beq.n	8006542 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006504:	2300      	movs	r3, #0
 8006506:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006508:	69bb      	ldr	r3, [r7, #24]
 800650a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800650e:	461a      	mov	r2, r3
 8006510:	f107 0310 	add.w	r3, r7, #16
 8006514:	6812      	ldr	r2, [r2, #0]
 8006516:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006518:	693a      	ldr	r2, [r7, #16]
 800651a:	6a3b      	ldr	r3, [r7, #32]
 800651c:	b2db      	uxtb	r3, r3
 800651e:	00db      	lsls	r3, r3, #3
 8006520:	fa22 f303 	lsr.w	r3, r2, r3
 8006524:	b2da      	uxtb	r2, r3
 8006526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006528:	701a      	strb	r2, [r3, #0]
      i++;
 800652a:	6a3b      	ldr	r3, [r7, #32]
 800652c:	3301      	adds	r3, #1
 800652e:	623b      	str	r3, [r7, #32]
      pDest++;
 8006530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006532:	3301      	adds	r3, #1
 8006534:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006536:	8bfb      	ldrh	r3, [r7, #30]
 8006538:	3b01      	subs	r3, #1
 800653a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800653c:	8bfb      	ldrh	r3, [r7, #30]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d1ea      	bne.n	8006518 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006544:	4618      	mov	r0, r3
 8006546:	372c      	adds	r7, #44	; 0x2c
 8006548:	46bd      	mov	sp, r7
 800654a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654e:	4770      	bx	lr

08006550 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006550:	b480      	push	{r7}
 8006552:	b085      	sub	sp, #20
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	695b      	ldr	r3, [r3, #20]
 800655c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	699b      	ldr	r3, [r3, #24]
 8006562:	68fa      	ldr	r2, [r7, #12]
 8006564:	4013      	ands	r3, r2
 8006566:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006568:	68fb      	ldr	r3, [r7, #12]
}
 800656a:	4618      	mov	r0, r3
 800656c:	3714      	adds	r7, #20
 800656e:	46bd      	mov	sp, r7
 8006570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006574:	4770      	bx	lr

08006576 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006576:	b480      	push	{r7}
 8006578:	b083      	sub	sp, #12
 800657a:	af00      	add	r7, sp, #0
 800657c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	695b      	ldr	r3, [r3, #20]
 8006582:	f003 0301 	and.w	r3, r3, #1
}
 8006586:	4618      	mov	r0, r3
 8006588:	370c      	adds	r7, #12
 800658a:	46bd      	mov	sp, r7
 800658c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006590:	4770      	bx	lr
	...

08006594 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006594:	b480      	push	{r7}
 8006596:	b085      	sub	sp, #20
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800659c:	2300      	movs	r3, #0
 800659e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	3301      	adds	r3, #1
 80065a4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	4a13      	ldr	r2, [pc, #76]	; (80065f8 <USB_CoreReset+0x64>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d901      	bls.n	80065b2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80065ae:	2303      	movs	r3, #3
 80065b0:	e01b      	b.n	80065ea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	691b      	ldr	r3, [r3, #16]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	daf2      	bge.n	80065a0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80065ba:	2300      	movs	r3, #0
 80065bc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	691b      	ldr	r3, [r3, #16]
 80065c2:	f043 0201 	orr.w	r2, r3, #1
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	3301      	adds	r3, #1
 80065ce:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	4a09      	ldr	r2, [pc, #36]	; (80065f8 <USB_CoreReset+0x64>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d901      	bls.n	80065dc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80065d8:	2303      	movs	r3, #3
 80065da:	e006      	b.n	80065ea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	691b      	ldr	r3, [r3, #16]
 80065e0:	f003 0301 	and.w	r3, r3, #1
 80065e4:	2b01      	cmp	r3, #1
 80065e6:	d0f0      	beq.n	80065ca <USB_CoreReset+0x36>

  return HAL_OK;
 80065e8:	2300      	movs	r3, #0
}
 80065ea:	4618      	mov	r0, r3
 80065ec:	3714      	adds	r7, #20
 80065ee:	46bd      	mov	sp, r7
 80065f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f4:	4770      	bx	lr
 80065f6:	bf00      	nop
 80065f8:	00030d40 	.word	0x00030d40

080065fc <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80065fc:	b084      	sub	sp, #16
 80065fe:	b580      	push	{r7, lr}
 8006600:	b086      	sub	sp, #24
 8006602:	af00      	add	r7, sp, #0
 8006604:	6078      	str	r0, [r7, #4]
 8006606:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800660a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800660e:	2300      	movs	r3, #0
 8006610:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800661c:	461a      	mov	r2, r3
 800661e:	2300      	movs	r3, #0
 8006620:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006626:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006632:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	639a      	str	r2, [r3, #56]	; 0x38

  /* Set default Max speed support */
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	68fa      	ldr	r2, [r7, #12]
 8006644:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006648:	f023 0304 	bic.w	r3, r3, #4
 800664c:	6013      	str	r3, [r2, #0]

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800664e:	2110      	movs	r1, #16
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f7ff fe87 	bl	8006364 <USB_FlushTxFifo>
 8006656:	4603      	mov	r3, r0
 8006658:	2b00      	cmp	r3, #0
 800665a:	d001      	beq.n	8006660 <USB_HostInit+0x64>
  {
    ret = HAL_ERROR;
 800665c:	2301      	movs	r3, #1
 800665e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f7ff feb3 	bl	80063cc <USB_FlushRxFifo>
 8006666:	4603      	mov	r3, r0
 8006668:	2b00      	cmp	r3, #0
 800666a:	d001      	beq.n	8006670 <USB_HostInit+0x74>
  {
    ret = HAL_ERROR;
 800666c:	2301      	movs	r3, #1
 800666e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006670:	2300      	movs	r3, #0
 8006672:	613b      	str	r3, [r7, #16]
 8006674:	e015      	b.n	80066a2 <USB_HostInit+0xa6>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006676:	693b      	ldr	r3, [r7, #16]
 8006678:	015a      	lsls	r2, r3, #5
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	4413      	add	r3, r2
 800667e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006682:	461a      	mov	r2, r3
 8006684:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006688:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	015a      	lsls	r2, r3, #5
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	4413      	add	r3, r2
 8006692:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006696:	461a      	mov	r2, r3
 8006698:	2300      	movs	r3, #0
 800669a:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	3301      	adds	r3, #1
 80066a0:	613b      	str	r3, [r7, #16]
 80066a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066a4:	693a      	ldr	r2, [r7, #16]
 80066a6:	429a      	cmp	r2, r3
 80066a8:	d3e5      	bcc.n	8006676 <USB_HostInit+0x7a>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2200      	movs	r2, #0
 80066ae:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80066b6:	615a      	str	r2, [r3, #20]

  /* set Rx FIFO size */
  USBx->GRXFSIZ  = 0x80U;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2280      	movs	r2, #128	; 0x80
 80066bc:	625a      	str	r2, [r3, #36]	; 0x24
  USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	4a0c      	ldr	r2, [pc, #48]	; (80066f4 <USB_HostInit+0xf8>)
 80066c2:	629a      	str	r2, [r3, #40]	; 0x28
  USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	4a0c      	ldr	r2, [pc, #48]	; (80066f8 <USB_HostInit+0xfc>)
 80066c8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	699b      	ldr	r3, [r3, #24]
 80066d0:	f043 0210 	orr.w	r2, r3, #16
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	699a      	ldr	r2, [r3, #24]
 80066dc:	4b07      	ldr	r3, [pc, #28]	; (80066fc <USB_HostInit+0x100>)
 80066de:	4313      	orrs	r3, r2
 80066e0:	687a      	ldr	r2, [r7, #4]
 80066e2:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80066e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80066e6:	4618      	mov	r0, r3
 80066e8:	3718      	adds	r7, #24
 80066ea:	46bd      	mov	sp, r7
 80066ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80066f0:	b004      	add	sp, #16
 80066f2:	4770      	bx	lr
 80066f4:	00600080 	.word	0x00600080
 80066f8:	004000e0 	.word	0x004000e0
 80066fc:	a3200008 	.word	0xa3200008

08006700 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006700:	b480      	push	{r7}
 8006702:	b085      	sub	sp, #20
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
 8006708:	460b      	mov	r3, r1
 800670a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	68fa      	ldr	r2, [r7, #12]
 800671a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800671e:	f023 0303 	bic.w	r3, r3, #3
 8006722:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800672a:	681a      	ldr	r2, [r3, #0]
 800672c:	78fb      	ldrb	r3, [r7, #3]
 800672e:	f003 0303 	and.w	r3, r3, #3
 8006732:	68f9      	ldr	r1, [r7, #12]
 8006734:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006738:	4313      	orrs	r3, r2
 800673a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800673c:	78fb      	ldrb	r3, [r7, #3]
 800673e:	2b01      	cmp	r3, #1
 8006740:	d107      	bne.n	8006752 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006748:	461a      	mov	r2, r3
 800674a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800674e:	6053      	str	r3, [r2, #4]
 8006750:	e009      	b.n	8006766 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8006752:	78fb      	ldrb	r3, [r7, #3]
 8006754:	2b02      	cmp	r3, #2
 8006756:	d106      	bne.n	8006766 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800675e:	461a      	mov	r2, r3
 8006760:	f241 7370 	movw	r3, #6000	; 0x1770
 8006764:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8006766:	2300      	movs	r3, #0
}
 8006768:	4618      	mov	r0, r3
 800676a:	3714      	adds	r7, #20
 800676c:	46bd      	mov	sp, r7
 800676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006772:	4770      	bx	lr

08006774 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b084      	sub	sp, #16
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006780:	2300      	movs	r3, #0
 8006782:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006794:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	68fa      	ldr	r2, [r7, #12]
 800679a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800679e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067a2:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80067a4:	2064      	movs	r0, #100	; 0x64
 80067a6:	f7fb fb75 	bl	8001e94 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	68fa      	ldr	r2, [r7, #12]
 80067ae:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80067b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067b6:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80067b8:	200a      	movs	r0, #10
 80067ba:	f7fb fb6b 	bl	8001e94 <HAL_Delay>

  return HAL_OK;
 80067be:	2300      	movs	r3, #0
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	3710      	adds	r7, #16
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bd80      	pop	{r7, pc}

080067c8 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80067c8:	b480      	push	{r7}
 80067ca:	b085      	sub	sp, #20
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
 80067d0:	460b      	mov	r3, r1
 80067d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80067d8:	2300      	movs	r3, #0
 80067da:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80067ec:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d109      	bne.n	800680c <USB_DriveVbus+0x44>
 80067f8:	78fb      	ldrb	r3, [r7, #3]
 80067fa:	2b01      	cmp	r3, #1
 80067fc:	d106      	bne.n	800680c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	68fa      	ldr	r2, [r7, #12]
 8006802:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006806:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800680a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006812:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006816:	d109      	bne.n	800682c <USB_DriveVbus+0x64>
 8006818:	78fb      	ldrb	r3, [r7, #3]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d106      	bne.n	800682c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	68fa      	ldr	r2, [r7, #12]
 8006822:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006826:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800682a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800682c:	2300      	movs	r3, #0
}
 800682e:	4618      	mov	r0, r3
 8006830:	3714      	adds	r7, #20
 8006832:	46bd      	mov	sp, r7
 8006834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006838:	4770      	bx	lr

0800683a <USB_GetHostSpeed>:
  *          This parameter can be one of these values:
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800683a:	b480      	push	{r7}
 800683c:	b085      	sub	sp, #20
 800683e:	af00      	add	r7, sp, #0
 8006840:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006846:	2300      	movs	r3, #0
 8006848:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	0c5b      	lsrs	r3, r3, #17
 8006858:	f003 0303 	and.w	r3, r3, #3
}
 800685c:	4618      	mov	r0, r3
 800685e:	3714      	adds	r7, #20
 8006860:	46bd      	mov	sp, r7
 8006862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006866:	4770      	bx	lr

08006868 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8006868:	b480      	push	{r7}
 800686a:	b085      	sub	sp, #20
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800687a:	689b      	ldr	r3, [r3, #8]
 800687c:	b29b      	uxth	r3, r3
}
 800687e:	4618      	mov	r0, r3
 8006880:	3714      	adds	r7, #20
 8006882:	46bd      	mov	sp, r7
 8006884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006888:	4770      	bx	lr
	...

0800688c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b088      	sub	sp, #32
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
 8006894:	4608      	mov	r0, r1
 8006896:	4611      	mov	r1, r2
 8006898:	461a      	mov	r2, r3
 800689a:	4603      	mov	r3, r0
 800689c:	70fb      	strb	r3, [r7, #3]
 800689e:	460b      	mov	r3, r1
 80068a0:	70bb      	strb	r3, [r7, #2]
 80068a2:	4613      	mov	r3, r2
 80068a4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80068a6:	2300      	movs	r3, #0
 80068a8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80068ae:	78fb      	ldrb	r3, [r7, #3]
 80068b0:	015a      	lsls	r2, r3, #5
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	4413      	add	r3, r2
 80068b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068ba:	461a      	mov	r2, r3
 80068bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80068c0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80068c2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80068c6:	2b03      	cmp	r3, #3
 80068c8:	d867      	bhi.n	800699a <USB_HC_Init+0x10e>
 80068ca:	a201      	add	r2, pc, #4	; (adr r2, 80068d0 <USB_HC_Init+0x44>)
 80068cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068d0:	080068e1 	.word	0x080068e1
 80068d4:	0800695d 	.word	0x0800695d
 80068d8:	080068e1 	.word	0x080068e1
 80068dc:	0800691f 	.word	0x0800691f
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80068e0:	78fb      	ldrb	r3, [r7, #3]
 80068e2:	015a      	lsls	r2, r3, #5
 80068e4:	693b      	ldr	r3, [r7, #16]
 80068e6:	4413      	add	r3, r2
 80068e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068ec:	461a      	mov	r2, r3
 80068ee:	f240 439d 	movw	r3, #1181	; 0x49d
 80068f2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80068f4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	da51      	bge.n	80069a0 <USB_HC_Init+0x114>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80068fc:	78fb      	ldrb	r3, [r7, #3]
 80068fe:	015a      	lsls	r2, r3, #5
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	4413      	add	r3, r2
 8006904:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006908:	68db      	ldr	r3, [r3, #12]
 800690a:	78fa      	ldrb	r2, [r7, #3]
 800690c:	0151      	lsls	r1, r2, #5
 800690e:	693a      	ldr	r2, [r7, #16]
 8006910:	440a      	add	r2, r1
 8006912:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006916:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800691a:	60d3      	str	r3, [r2, #12]
      }
      break;
 800691c:	e040      	b.n	80069a0 <USB_HC_Init+0x114>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800691e:	78fb      	ldrb	r3, [r7, #3]
 8006920:	015a      	lsls	r2, r3, #5
 8006922:	693b      	ldr	r3, [r7, #16]
 8006924:	4413      	add	r3, r2
 8006926:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800692a:	461a      	mov	r2, r3
 800692c:	f240 639d 	movw	r3, #1693	; 0x69d
 8006930:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006932:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006936:	2b00      	cmp	r3, #0
 8006938:	da34      	bge.n	80069a4 <USB_HC_Init+0x118>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800693a:	78fb      	ldrb	r3, [r7, #3]
 800693c:	015a      	lsls	r2, r3, #5
 800693e:	693b      	ldr	r3, [r7, #16]
 8006940:	4413      	add	r3, r2
 8006942:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006946:	68db      	ldr	r3, [r3, #12]
 8006948:	78fa      	ldrb	r2, [r7, #3]
 800694a:	0151      	lsls	r1, r2, #5
 800694c:	693a      	ldr	r2, [r7, #16]
 800694e:	440a      	add	r2, r1
 8006950:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006954:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006958:	60d3      	str	r3, [r2, #12]
      }

      break;
 800695a:	e023      	b.n	80069a4 <USB_HC_Init+0x118>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800695c:	78fb      	ldrb	r3, [r7, #3]
 800695e:	015a      	lsls	r2, r3, #5
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	4413      	add	r3, r2
 8006964:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006968:	461a      	mov	r2, r3
 800696a:	f240 2325 	movw	r3, #549	; 0x225
 800696e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006970:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006974:	2b00      	cmp	r3, #0
 8006976:	da17      	bge.n	80069a8 <USB_HC_Init+0x11c>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006978:	78fb      	ldrb	r3, [r7, #3]
 800697a:	015a      	lsls	r2, r3, #5
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	4413      	add	r3, r2
 8006980:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006984:	68db      	ldr	r3, [r3, #12]
 8006986:	78fa      	ldrb	r2, [r7, #3]
 8006988:	0151      	lsls	r1, r2, #5
 800698a:	693a      	ldr	r2, [r7, #16]
 800698c:	440a      	add	r2, r1
 800698e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006992:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006996:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006998:	e006      	b.n	80069a8 <USB_HC_Init+0x11c>

    default:
      ret = HAL_ERROR;
 800699a:	2301      	movs	r3, #1
 800699c:	77fb      	strb	r3, [r7, #31]
      break;
 800699e:	e004      	b.n	80069aa <USB_HC_Init+0x11e>
      break;
 80069a0:	bf00      	nop
 80069a2:	e002      	b.n	80069aa <USB_HC_Init+0x11e>
      break;
 80069a4:	bf00      	nop
 80069a6:	e000      	b.n	80069aa <USB_HC_Init+0x11e>
      break;
 80069a8:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80069aa:	78fb      	ldrb	r3, [r7, #3]
 80069ac:	015a      	lsls	r2, r3, #5
 80069ae:	693b      	ldr	r3, [r7, #16]
 80069b0:	4413      	add	r3, r2
 80069b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069b6:	68db      	ldr	r3, [r3, #12]
 80069b8:	78fa      	ldrb	r2, [r7, #3]
 80069ba:	0151      	lsls	r1, r2, #5
 80069bc:	693a      	ldr	r2, [r7, #16]
 80069be:	440a      	add	r2, r1
 80069c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80069c4:	f043 0302 	orr.w	r3, r3, #2
 80069c8:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80069ca:	693b      	ldr	r3, [r7, #16]
 80069cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80069d0:	699a      	ldr	r2, [r3, #24]
 80069d2:	78fb      	ldrb	r3, [r7, #3]
 80069d4:	f003 030f 	and.w	r3, r3, #15
 80069d8:	2101      	movs	r1, #1
 80069da:	fa01 f303 	lsl.w	r3, r1, r3
 80069de:	6939      	ldr	r1, [r7, #16]
 80069e0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80069e4:	4313      	orrs	r3, r2
 80069e6:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	699b      	ldr	r3, [r3, #24]
 80069ec:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80069f4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	da03      	bge.n	8006a04 <USB_HC_Init+0x178>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80069fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a00:	61bb      	str	r3, [r7, #24]
 8006a02:	e001      	b.n	8006a08 <USB_HC_Init+0x17c>
  }
  else
  {
    HCcharEpDir = 0U;
 8006a04:	2300      	movs	r3, #0
 8006a06:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f7ff ff16 	bl	800683a <USB_GetHostSpeed>
 8006a0e:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006a10:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006a14:	2b02      	cmp	r3, #2
 8006a16:	d106      	bne.n	8006a26 <USB_HC_Init+0x19a>
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	2b02      	cmp	r3, #2
 8006a1c:	d003      	beq.n	8006a26 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006a1e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006a22:	617b      	str	r3, [r7, #20]
 8006a24:	e001      	b.n	8006a2a <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006a26:	2300      	movs	r3, #0
 8006a28:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006a2a:	787b      	ldrb	r3, [r7, #1]
 8006a2c:	059b      	lsls	r3, r3, #22
 8006a2e:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006a32:	78bb      	ldrb	r3, [r7, #2]
 8006a34:	02db      	lsls	r3, r3, #11
 8006a36:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006a3a:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006a3c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006a40:	049b      	lsls	r3, r3, #18
 8006a42:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006a46:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006a48:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006a4a:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006a4e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006a50:	69bb      	ldr	r3, [r7, #24]
 8006a52:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006a54:	78fb      	ldrb	r3, [r7, #3]
 8006a56:	0159      	lsls	r1, r3, #5
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	440b      	add	r3, r1
 8006a5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a60:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006a66:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8006a68:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006a6c:	2b03      	cmp	r3, #3
 8006a6e:	d003      	beq.n	8006a78 <USB_HC_Init+0x1ec>
 8006a70:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006a74:	2b01      	cmp	r3, #1
 8006a76:	d10f      	bne.n	8006a98 <USB_HC_Init+0x20c>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006a78:	78fb      	ldrb	r3, [r7, #3]
 8006a7a:	015a      	lsls	r2, r3, #5
 8006a7c:	693b      	ldr	r3, [r7, #16]
 8006a7e:	4413      	add	r3, r2
 8006a80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	78fa      	ldrb	r2, [r7, #3]
 8006a88:	0151      	lsls	r1, r2, #5
 8006a8a:	693a      	ldr	r2, [r7, #16]
 8006a8c:	440a      	add	r2, r1
 8006a8e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a92:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006a96:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006a98:	7ffb      	ldrb	r3, [r7, #31]
}
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	3720      	adds	r7, #32
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}
 8006aa2:	bf00      	nop

08006aa4 <USB_HC_StartXfer>:
  * @param  USBx  Selected device
  * @param  hc  pointer to host channel structure
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b088      	sub	sp, #32
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
 8006aac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	785b      	ldrb	r3, [r3, #1]
 8006ab6:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006ab8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006abc:	827b      	strh	r3, [r7, #18]

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	695b      	ldr	r3, [r3, #20]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d018      	beq.n	8006af8 <USB_HC_StartXfer+0x54>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	695b      	ldr	r3, [r3, #20]
 8006aca:	683a      	ldr	r2, [r7, #0]
 8006acc:	8912      	ldrh	r2, [r2, #8]
 8006ace:	4413      	add	r3, r2
 8006ad0:	3b01      	subs	r3, #1
 8006ad2:	683a      	ldr	r2, [r7, #0]
 8006ad4:	8912      	ldrh	r2, [r2, #8]
 8006ad6:	fbb3 f3f2 	udiv	r3, r3, r2
 8006ada:	83fb      	strh	r3, [r7, #30]

    if (num_packets > max_hc_pkt_count)
 8006adc:	8bfa      	ldrh	r2, [r7, #30]
 8006ade:	8a7b      	ldrh	r3, [r7, #18]
 8006ae0:	429a      	cmp	r2, r3
 8006ae2:	d90b      	bls.n	8006afc <USB_HC_StartXfer+0x58>
    {
      num_packets = max_hc_pkt_count;
 8006ae4:	8a7b      	ldrh	r3, [r7, #18]
 8006ae6:	83fb      	strh	r3, [r7, #30]
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006ae8:	8bfb      	ldrh	r3, [r7, #30]
 8006aea:	683a      	ldr	r2, [r7, #0]
 8006aec:	8912      	ldrh	r2, [r2, #8]
 8006aee:	fb03 f202 	mul.w	r2, r3, r2
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	611a      	str	r2, [r3, #16]
 8006af6:	e001      	b.n	8006afc <USB_HC_StartXfer+0x58>
    }
  }
  else
  {
    num_packets = 1U;
 8006af8:	2301      	movs	r3, #1
 8006afa:	83fb      	strh	r3, [r7, #30]

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	78db      	ldrb	r3, [r3, #3]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d007      	beq.n	8006b14 <USB_HC_StartXfer+0x70>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006b04:	8bfb      	ldrh	r3, [r7, #30]
 8006b06:	683a      	ldr	r2, [r7, #0]
 8006b08:	8912      	ldrh	r2, [r2, #8]
 8006b0a:	fb03 f202 	mul.w	r2, r3, r2
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	611a      	str	r2, [r3, #16]
 8006b12:	e003      	b.n	8006b1c <USB_HC_StartXfer+0x78>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	695a      	ldr	r2, [r3, #20]
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	691b      	ldr	r3, [r3, #16]
 8006b20:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006b24:	8bfb      	ldrh	r3, [r7, #30]
 8006b26:	04d9      	lsls	r1, r3, #19
 8006b28:	4b59      	ldr	r3, [pc, #356]	; (8006c90 <USB_HC_StartXfer+0x1ec>)
 8006b2a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006b2c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	7a9b      	ldrb	r3, [r3, #10]
 8006b32:	075b      	lsls	r3, r3, #29
 8006b34:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006b38:	6979      	ldr	r1, [r7, #20]
 8006b3a:	0148      	lsls	r0, r1, #5
 8006b3c:	69b9      	ldr	r1, [r7, #24]
 8006b3e:	4401      	add	r1, r0
 8006b40:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006b44:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006b46:	610b      	str	r3, [r1, #16]

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006b48:	69bb      	ldr	r3, [r7, #24]
 8006b4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b4e:	689b      	ldr	r3, [r3, #8]
 8006b50:	f003 0301 	and.w	r3, r3, #1
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	bf0c      	ite	eq
 8006b58:	2301      	moveq	r3, #1
 8006b5a:	2300      	movne	r3, #0
 8006b5c:	b2db      	uxtb	r3, r3
 8006b5e:	747b      	strb	r3, [r7, #17]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	015a      	lsls	r2, r3, #5
 8006b64:	69bb      	ldr	r3, [r7, #24]
 8006b66:	4413      	add	r3, r2
 8006b68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	697a      	ldr	r2, [r7, #20]
 8006b70:	0151      	lsls	r1, r2, #5
 8006b72:	69ba      	ldr	r2, [r7, #24]
 8006b74:	440a      	add	r2, r1
 8006b76:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b7a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006b7e:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	015a      	lsls	r2, r3, #5
 8006b84:	69bb      	ldr	r3, [r7, #24]
 8006b86:	4413      	add	r3, r2
 8006b88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b8c:	681a      	ldr	r2, [r3, #0]
 8006b8e:	7c7b      	ldrb	r3, [r7, #17]
 8006b90:	075b      	lsls	r3, r3, #29
 8006b92:	6979      	ldr	r1, [r7, #20]
 8006b94:	0148      	lsls	r0, r1, #5
 8006b96:	69b9      	ldr	r1, [r7, #24]
 8006b98:	4401      	add	r1, r0
 8006b9a:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006b9e:	4313      	orrs	r3, r2
 8006ba0:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	015a      	lsls	r2, r3, #5
 8006ba6:	69bb      	ldr	r3, [r7, #24]
 8006ba8:	4413      	add	r3, r2
 8006baa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006bb8:	60bb      	str	r3, [r7, #8]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	78db      	ldrb	r3, [r3, #3]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d004      	beq.n	8006bcc <USB_HC_StartXfer+0x128>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bc8:	60bb      	str	r3, [r7, #8]
 8006bca:	e003      	b.n	8006bd4 <USB_HC_StartXfer+0x130>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006bd2:	60bb      	str	r3, [r7, #8]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006bda:	60bb      	str	r3, [r7, #8]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	015a      	lsls	r2, r3, #5
 8006be0:	69bb      	ldr	r3, [r7, #24]
 8006be2:	4413      	add	r3, r2
 8006be4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006be8:	461a      	mov	r2, r3
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	6013      	str	r3, [r2, #0]

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	78db      	ldrb	r3, [r3, #3]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d147      	bne.n	8006c86 <USB_HC_StartXfer+0x1e2>
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	695b      	ldr	r3, [r3, #20]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d043      	beq.n	8006c86 <USB_HC_StartXfer+0x1e2>
  {
    switch (hc->ep_type)
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	79db      	ldrb	r3, [r3, #7]
 8006c02:	2b03      	cmp	r3, #3
 8006c04:	d830      	bhi.n	8006c68 <USB_HC_StartXfer+0x1c4>
 8006c06:	a201      	add	r2, pc, #4	; (adr r2, 8006c0c <USB_HC_StartXfer+0x168>)
 8006c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c0c:	08006c1d 	.word	0x08006c1d
 8006c10:	08006c41 	.word	0x08006c41
 8006c14:	08006c1d 	.word	0x08006c1d
 8006c18:	08006c41 	.word	0x08006c41
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	695b      	ldr	r3, [r3, #20]
 8006c20:	3303      	adds	r3, #3
 8006c22:	089b      	lsrs	r3, r3, #2
 8006c24:	81fb      	strh	r3, [r7, #14]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006c26:	89fa      	ldrh	r2, [r7, #14]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c2c:	b29b      	uxth	r3, r3
 8006c2e:	429a      	cmp	r2, r3
 8006c30:	d91c      	bls.n	8006c6c <USB_HC_StartXfer+0x1c8>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	699b      	ldr	r3, [r3, #24]
 8006c36:	f043 0220 	orr.w	r2, r3, #32
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	619a      	str	r2, [r3, #24]
        }
        break;
 8006c3e:	e015      	b.n	8006c6c <USB_HC_StartXfer+0x1c8>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	695b      	ldr	r3, [r3, #20]
 8006c44:	3303      	adds	r3, #3
 8006c46:	089b      	lsrs	r3, r3, #2
 8006c48:	81fb      	strh	r3, [r7, #14]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006c4a:	89fa      	ldrh	r2, [r7, #14]
 8006c4c:	69bb      	ldr	r3, [r7, #24]
 8006c4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c52:	691b      	ldr	r3, [r3, #16]
 8006c54:	b29b      	uxth	r3, r3
 8006c56:	429a      	cmp	r2, r3
 8006c58:	d90a      	bls.n	8006c70 <USB_HC_StartXfer+0x1cc>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	699b      	ldr	r3, [r3, #24]
 8006c5e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	619a      	str	r2, [r3, #24]
        }
        break;
 8006c66:	e003      	b.n	8006c70 <USB_HC_StartXfer+0x1cc>

      default:
        break;
 8006c68:	bf00      	nop
 8006c6a:	e002      	b.n	8006c72 <USB_HC_StartXfer+0x1ce>
        break;
 8006c6c:	bf00      	nop
 8006c6e:	e000      	b.n	8006c72 <USB_HC_StartXfer+0x1ce>
        break;
 8006c70:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len);
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	68d9      	ldr	r1, [r3, #12]
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	785a      	ldrb	r2, [r3, #1]
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	695b      	ldr	r3, [r3, #20]
 8006c7e:	b29b      	uxth	r3, r3
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f7ff fbd3 	bl	800642c <USB_WritePacket>
  }

  return HAL_OK;
 8006c86:	2300      	movs	r3, #0
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	3720      	adds	r7, #32
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bd80      	pop	{r7, pc}
 8006c90:	1ff80000 	.word	0x1ff80000

08006c94 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b085      	sub	sp, #20
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ca6:	695b      	ldr	r3, [r3, #20]
 8006ca8:	b29b      	uxth	r3, r3
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	3714      	adds	r7, #20
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb4:	4770      	bx	lr

08006cb6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006cb6:	b480      	push	{r7}
 8006cb8:	b089      	sub	sp, #36	; 0x24
 8006cba:	af00      	add	r7, sp, #0
 8006cbc:	6078      	str	r0, [r7, #4]
 8006cbe:	460b      	mov	r3, r1
 8006cc0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8006cc6:	78fb      	ldrb	r3, [r7, #3]
 8006cc8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006cce:	69bb      	ldr	r3, [r7, #24]
 8006cd0:	015a      	lsls	r2, r3, #5
 8006cd2:	69fb      	ldr	r3, [r7, #28]
 8006cd4:	4413      	add	r3, r2
 8006cd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	0c9b      	lsrs	r3, r3, #18
 8006cde:	f003 0303 	and.w	r3, r3, #3
 8006ce2:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006ce4:	69bb      	ldr	r3, [r7, #24]
 8006ce6:	015a      	lsls	r2, r3, #5
 8006ce8:	69fb      	ldr	r3, [r7, #28]
 8006cea:	4413      	add	r3, r2
 8006cec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	0fdb      	lsrs	r3, r3, #31
 8006cf4:	f003 0301 	and.w	r3, r3, #1
 8006cf8:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	689b      	ldr	r3, [r3, #8]
 8006cfe:	f003 0320 	and.w	r3, r3, #32
 8006d02:	2b20      	cmp	r3, #32
 8006d04:	d104      	bne.n	8006d10 <USB_HC_Halt+0x5a>
 8006d06:	693b      	ldr	r3, [r7, #16]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d101      	bne.n	8006d10 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	e0c8      	b.n	8006ea2 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006d10:	697b      	ldr	r3, [r7, #20]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d002      	beq.n	8006d1c <USB_HC_Halt+0x66>
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	2b02      	cmp	r3, #2
 8006d1a:	d163      	bne.n	8006de4 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006d1c:	69bb      	ldr	r3, [r7, #24]
 8006d1e:	015a      	lsls	r2, r3, #5
 8006d20:	69fb      	ldr	r3, [r7, #28]
 8006d22:	4413      	add	r3, r2
 8006d24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	69ba      	ldr	r2, [r7, #24]
 8006d2c:	0151      	lsls	r1, r2, #5
 8006d2e:	69fa      	ldr	r2, [r7, #28]
 8006d30:	440a      	add	r2, r1
 8006d32:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d36:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006d3a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	689b      	ldr	r3, [r3, #8]
 8006d40:	f003 0320 	and.w	r3, r3, #32
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	f040 80ab 	bne.w	8006ea0 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d4e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d133      	bne.n	8006dbe <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006d56:	69bb      	ldr	r3, [r7, #24]
 8006d58:	015a      	lsls	r2, r3, #5
 8006d5a:	69fb      	ldr	r3, [r7, #28]
 8006d5c:	4413      	add	r3, r2
 8006d5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	69ba      	ldr	r2, [r7, #24]
 8006d66:	0151      	lsls	r1, r2, #5
 8006d68:	69fa      	ldr	r2, [r7, #28]
 8006d6a:	440a      	add	r2, r1
 8006d6c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d70:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006d74:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006d76:	69bb      	ldr	r3, [r7, #24]
 8006d78:	015a      	lsls	r2, r3, #5
 8006d7a:	69fb      	ldr	r3, [r7, #28]
 8006d7c:	4413      	add	r3, r2
 8006d7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	69ba      	ldr	r2, [r7, #24]
 8006d86:	0151      	lsls	r1, r2, #5
 8006d88:	69fa      	ldr	r2, [r7, #28]
 8006d8a:	440a      	add	r2, r1
 8006d8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d90:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006d94:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	3301      	adds	r3, #1
 8006d9a:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006da2:	d81d      	bhi.n	8006de0 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006da4:	69bb      	ldr	r3, [r7, #24]
 8006da6:	015a      	lsls	r2, r3, #5
 8006da8:	69fb      	ldr	r3, [r7, #28]
 8006daa:	4413      	add	r3, r2
 8006dac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006db6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006dba:	d0ec      	beq.n	8006d96 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006dbc:	e070      	b.n	8006ea0 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006dbe:	69bb      	ldr	r3, [r7, #24]
 8006dc0:	015a      	lsls	r2, r3, #5
 8006dc2:	69fb      	ldr	r3, [r7, #28]
 8006dc4:	4413      	add	r3, r2
 8006dc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	69ba      	ldr	r2, [r7, #24]
 8006dce:	0151      	lsls	r1, r2, #5
 8006dd0:	69fa      	ldr	r2, [r7, #28]
 8006dd2:	440a      	add	r2, r1
 8006dd4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006dd8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006ddc:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006dde:	e05f      	b.n	8006ea0 <USB_HC_Halt+0x1ea>
            break;
 8006de0:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006de2:	e05d      	b.n	8006ea0 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006de4:	69bb      	ldr	r3, [r7, #24]
 8006de6:	015a      	lsls	r2, r3, #5
 8006de8:	69fb      	ldr	r3, [r7, #28]
 8006dea:	4413      	add	r3, r2
 8006dec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	69ba      	ldr	r2, [r7, #24]
 8006df4:	0151      	lsls	r1, r2, #5
 8006df6:	69fa      	ldr	r2, [r7, #28]
 8006df8:	440a      	add	r2, r1
 8006dfa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006dfe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006e02:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006e04:	69fb      	ldr	r3, [r7, #28]
 8006e06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e0a:	691b      	ldr	r3, [r3, #16]
 8006e0c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d133      	bne.n	8006e7c <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006e14:	69bb      	ldr	r3, [r7, #24]
 8006e16:	015a      	lsls	r2, r3, #5
 8006e18:	69fb      	ldr	r3, [r7, #28]
 8006e1a:	4413      	add	r3, r2
 8006e1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	69ba      	ldr	r2, [r7, #24]
 8006e24:	0151      	lsls	r1, r2, #5
 8006e26:	69fa      	ldr	r2, [r7, #28]
 8006e28:	440a      	add	r2, r1
 8006e2a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e2e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006e32:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006e34:	69bb      	ldr	r3, [r7, #24]
 8006e36:	015a      	lsls	r2, r3, #5
 8006e38:	69fb      	ldr	r3, [r7, #28]
 8006e3a:	4413      	add	r3, r2
 8006e3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	69ba      	ldr	r2, [r7, #24]
 8006e44:	0151      	lsls	r1, r2, #5
 8006e46:	69fa      	ldr	r2, [r7, #28]
 8006e48:	440a      	add	r2, r1
 8006e4a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e4e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006e52:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	3301      	adds	r3, #1
 8006e58:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006e60:	d81d      	bhi.n	8006e9e <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006e62:	69bb      	ldr	r3, [r7, #24]
 8006e64:	015a      	lsls	r2, r3, #5
 8006e66:	69fb      	ldr	r3, [r7, #28]
 8006e68:	4413      	add	r3, r2
 8006e6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e74:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e78:	d0ec      	beq.n	8006e54 <USB_HC_Halt+0x19e>
 8006e7a:	e011      	b.n	8006ea0 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006e7c:	69bb      	ldr	r3, [r7, #24]
 8006e7e:	015a      	lsls	r2, r3, #5
 8006e80:	69fb      	ldr	r3, [r7, #28]
 8006e82:	4413      	add	r3, r2
 8006e84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	69ba      	ldr	r2, [r7, #24]
 8006e8c:	0151      	lsls	r1, r2, #5
 8006e8e:	69fa      	ldr	r2, [r7, #28]
 8006e90:	440a      	add	r2, r1
 8006e92:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006e9a:	6013      	str	r3, [r2, #0]
 8006e9c:	e000      	b.n	8006ea0 <USB_HC_Halt+0x1ea>
          break;
 8006e9e:	bf00      	nop
    }
  }

  return HAL_OK;
 8006ea0:	2300      	movs	r3, #0
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	3724      	adds	r7, #36	; 0x24
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eac:	4770      	bx	lr

08006eae <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006eae:	b580      	push	{r7, lr}
 8006eb0:	b088      	sub	sp, #32
 8006eb2:	af00      	add	r7, sp, #0
 8006eb4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f7ff f9f1 	bl	80062aa <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006ec8:	2110      	movs	r1, #16
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f7ff fa4a 	bl	8006364 <USB_FlushTxFifo>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d001      	beq.n	8006eda <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f7ff fa76 	bl	80063cc <USB_FlushRxFifo>
 8006ee0:	4603      	mov	r3, r0
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d001      	beq.n	8006eea <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006eea:	2300      	movs	r3, #0
 8006eec:	61bb      	str	r3, [r7, #24]
 8006eee:	e01f      	b.n	8006f30 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006ef0:	69bb      	ldr	r3, [r7, #24]
 8006ef2:	015a      	lsls	r2, r3, #5
 8006ef4:	697b      	ldr	r3, [r7, #20]
 8006ef6:	4413      	add	r3, r2
 8006ef8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006f00:	693b      	ldr	r3, [r7, #16]
 8006f02:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006f06:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006f08:	693b      	ldr	r3, [r7, #16]
 8006f0a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006f0e:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006f10:	693b      	ldr	r3, [r7, #16]
 8006f12:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006f16:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006f18:	69bb      	ldr	r3, [r7, #24]
 8006f1a:	015a      	lsls	r2, r3, #5
 8006f1c:	697b      	ldr	r3, [r7, #20]
 8006f1e:	4413      	add	r3, r2
 8006f20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f24:	461a      	mov	r2, r3
 8006f26:	693b      	ldr	r3, [r7, #16]
 8006f28:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006f2a:	69bb      	ldr	r3, [r7, #24]
 8006f2c:	3301      	adds	r3, #1
 8006f2e:	61bb      	str	r3, [r7, #24]
 8006f30:	69bb      	ldr	r3, [r7, #24]
 8006f32:	2b0f      	cmp	r3, #15
 8006f34:	d9dc      	bls.n	8006ef0 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006f36:	2300      	movs	r3, #0
 8006f38:	61bb      	str	r3, [r7, #24]
 8006f3a:	e034      	b.n	8006fa6 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8006f3c:	69bb      	ldr	r3, [r7, #24]
 8006f3e:	015a      	lsls	r2, r3, #5
 8006f40:	697b      	ldr	r3, [r7, #20]
 8006f42:	4413      	add	r3, r2
 8006f44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006f4c:	693b      	ldr	r3, [r7, #16]
 8006f4e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006f52:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8006f54:	693b      	ldr	r3, [r7, #16]
 8006f56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006f5a:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006f62:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006f64:	69bb      	ldr	r3, [r7, #24]
 8006f66:	015a      	lsls	r2, r3, #5
 8006f68:	697b      	ldr	r3, [r7, #20]
 8006f6a:	4413      	add	r3, r2
 8006f6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f70:	461a      	mov	r2, r3
 8006f72:	693b      	ldr	r3, [r7, #16]
 8006f74:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	3301      	adds	r3, #1
 8006f7a:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006f82:	d80c      	bhi.n	8006f9e <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006f84:	69bb      	ldr	r3, [r7, #24]
 8006f86:	015a      	lsls	r2, r3, #5
 8006f88:	697b      	ldr	r3, [r7, #20]
 8006f8a:	4413      	add	r3, r2
 8006f8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f96:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f9a:	d0ec      	beq.n	8006f76 <USB_StopHost+0xc8>
 8006f9c:	e000      	b.n	8006fa0 <USB_StopHost+0xf2>
        break;
 8006f9e:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006fa0:	69bb      	ldr	r3, [r7, #24]
 8006fa2:	3301      	adds	r3, #1
 8006fa4:	61bb      	str	r3, [r7, #24]
 8006fa6:	69bb      	ldr	r3, [r7, #24]
 8006fa8:	2b0f      	cmp	r3, #15
 8006faa:	d9c7      	bls.n	8006f3c <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006fac:	697b      	ldr	r3, [r7, #20]
 8006fae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006fb2:	461a      	mov	r2, r3
 8006fb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006fb8:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006fc0:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f7ff f960 	bl	8006288 <USB_EnableGlobalInt>

  return ret;
 8006fc8:	7ffb      	ldrb	r3, [r7, #31]
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	3720      	adds	r7, #32
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd80      	pop	{r7, pc}
	...

08006fd4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 8006fd8:	4904      	ldr	r1, [pc, #16]	; (8006fec <MX_FATFS_Init+0x18>)
 8006fda:	4805      	ldr	r0, [pc, #20]	; (8006ff0 <MX_FATFS_Init+0x1c>)
 8006fdc:	f007 ff6c 	bl	800eeb8 <FATFS_LinkDriver>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	461a      	mov	r2, r3
 8006fe4:	4b03      	ldr	r3, [pc, #12]	; (8006ff4 <MX_FATFS_Init+0x20>)
 8006fe6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006fe8:	bf00      	nop
 8006fea:	bd80      	pop	{r7, pc}
 8006fec:	200003f4 	.word	0x200003f4
 8006ff0:	080147e0 	.word	0x080147e0
 8006ff4:	200003f0 	.word	0x200003f0

08006ff8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8006ffc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	46bd      	mov	sp, r7
 8007002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007006:	4770      	bx	lr

08007008 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 8007008:	b480      	push	{r7}
 800700a:	b083      	sub	sp, #12
 800700c:	af00      	add	r7, sp, #0
 800700e:	4603      	mov	r3, r0
 8007010:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 8007012:	2300      	movs	r3, #0
}
 8007014:	4618      	mov	r0, r3
 8007016:	370c      	adds	r7, #12
 8007018:	46bd      	mov	sp, r7
 800701a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701e:	4770      	bx	lr

08007020 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b084      	sub	sp, #16
 8007024:	af00      	add	r7, sp, #0
 8007026:	4603      	mov	r3, r0
 8007028:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 800702a:	2301      	movs	r3, #1
 800702c:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 800702e:	79fb      	ldrb	r3, [r7, #7]
 8007030:	4619      	mov	r1, r3
 8007032:	4808      	ldr	r0, [pc, #32]	; (8007054 <USBH_status+0x34>)
 8007034:	f000 fe1a 	bl	8007c6c <USBH_MSC_UnitIsReady>
 8007038:	4603      	mov	r3, r0
 800703a:	2b00      	cmp	r3, #0
 800703c:	d002      	beq.n	8007044 <USBH_status+0x24>
  {
    res = RES_OK;
 800703e:	2300      	movs	r3, #0
 8007040:	73fb      	strb	r3, [r7, #15]
 8007042:	e001      	b.n	8007048 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 8007044:	2301      	movs	r3, #1
 8007046:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8007048:	7bfb      	ldrb	r3, [r7, #15]
}
 800704a:	4618      	mov	r0, r3
 800704c:	3710      	adds	r7, #16
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}
 8007052:	bf00      	nop
 8007054:	20002924 	.word	0x20002924

08007058 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b094      	sub	sp, #80	; 0x50
 800705c:	af02      	add	r7, sp, #8
 800705e:	60b9      	str	r1, [r7, #8]
 8007060:	607a      	str	r2, [r7, #4]
 8007062:	603b      	str	r3, [r7, #0]
 8007064:	4603      	mov	r3, r0
 8007066:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007068:	2301      	movs	r3, #1
 800706a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 800706e:	7bf9      	ldrb	r1, [r7, #15]
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	9300      	str	r3, [sp, #0]
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	687a      	ldr	r2, [r7, #4]
 8007078:	4813      	ldr	r0, [pc, #76]	; (80070c8 <USBH_read+0x70>)
 800707a:	f000 fe41 	bl	8007d00 <USBH_MSC_Read>
 800707e:	4603      	mov	r3, r0
 8007080:	2b00      	cmp	r3, #0
 8007082:	d103      	bne.n	800708c <USBH_read+0x34>
  {
    res = RES_OK;
 8007084:	2300      	movs	r3, #0
 8007086:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800708a:	e017      	b.n	80070bc <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 800708c:	f107 0210 	add.w	r2, r7, #16
 8007090:	7bfb      	ldrb	r3, [r7, #15]
 8007092:	4619      	mov	r1, r3
 8007094:	480c      	ldr	r0, [pc, #48]	; (80070c8 <USBH_read+0x70>)
 8007096:	f000 fe0f 	bl	8007cb8 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800709a:	7f7b      	ldrb	r3, [r7, #29]
 800709c:	2b3a      	cmp	r3, #58	; 0x3a
 800709e:	d005      	beq.n	80070ac <USBH_read+0x54>
 80070a0:	2b3a      	cmp	r3, #58	; 0x3a
 80070a2:	dc07      	bgt.n	80070b4 <USBH_read+0x5c>
 80070a4:	2b04      	cmp	r3, #4
 80070a6:	d001      	beq.n	80070ac <USBH_read+0x54>
 80070a8:	2b28      	cmp	r3, #40	; 0x28
 80070aa:	d103      	bne.n	80070b4 <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 80070ac:	2303      	movs	r3, #3
 80070ae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80070b2:	e003      	b.n	80070bc <USBH_read+0x64>

    default:
      res = RES_ERROR;
 80070b4:	2301      	movs	r3, #1
 80070b6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80070ba:	bf00      	nop
    }
  }

  return res;
 80070bc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3748      	adds	r7, #72	; 0x48
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}
 80070c8:	20002924 	.word	0x20002924

080070cc <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b094      	sub	sp, #80	; 0x50
 80070d0:	af02      	add	r7, sp, #8
 80070d2:	60b9      	str	r1, [r7, #8]
 80070d4:	607a      	str	r2, [r7, #4]
 80070d6:	603b      	str	r3, [r7, #0]
 80070d8:	4603      	mov	r3, r0
 80070da:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80070dc:	2301      	movs	r3, #1
 80070de:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 80070e2:	7bf9      	ldrb	r1, [r7, #15]
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	9300      	str	r3, [sp, #0]
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	687a      	ldr	r2, [r7, #4]
 80070ec:	4817      	ldr	r0, [pc, #92]	; (800714c <USBH_write+0x80>)
 80070ee:	f000 fe70 	bl	8007dd2 <USBH_MSC_Write>
 80070f2:	4603      	mov	r3, r0
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d103      	bne.n	8007100 <USBH_write+0x34>
  {
    res = RES_OK;
 80070f8:	2300      	movs	r3, #0
 80070fa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80070fe:	e01f      	b.n	8007140 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8007100:	f107 0210 	add.w	r2, r7, #16
 8007104:	7bfb      	ldrb	r3, [r7, #15]
 8007106:	4619      	mov	r1, r3
 8007108:	4810      	ldr	r0, [pc, #64]	; (800714c <USBH_write+0x80>)
 800710a:	f000 fdd5 	bl	8007cb8 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800710e:	7f7b      	ldrb	r3, [r7, #29]
 8007110:	2b3a      	cmp	r3, #58	; 0x3a
 8007112:	d00d      	beq.n	8007130 <USBH_write+0x64>
 8007114:	2b3a      	cmp	r3, #58	; 0x3a
 8007116:	dc0f      	bgt.n	8007138 <USBH_write+0x6c>
 8007118:	2b28      	cmp	r3, #40	; 0x28
 800711a:	d009      	beq.n	8007130 <USBH_write+0x64>
 800711c:	2b28      	cmp	r3, #40	; 0x28
 800711e:	dc0b      	bgt.n	8007138 <USBH_write+0x6c>
 8007120:	2b04      	cmp	r3, #4
 8007122:	d005      	beq.n	8007130 <USBH_write+0x64>
 8007124:	2b27      	cmp	r3, #39	; 0x27
 8007126:	d107      	bne.n	8007138 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 8007128:	2302      	movs	r3, #2
 800712a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800712e:	e007      	b.n	8007140 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 8007130:	2303      	movs	r3, #3
 8007132:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8007136:	e003      	b.n	8007140 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 8007138:	2301      	movs	r3, #1
 800713a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800713e:	bf00      	nop
    }
  }

  return res;
 8007140:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8007144:	4618      	mov	r0, r3
 8007146:	3748      	adds	r7, #72	; 0x48
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}
 800714c:	20002924 	.word	0x20002924

08007150 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b090      	sub	sp, #64	; 0x40
 8007154:	af00      	add	r7, sp, #0
 8007156:	4603      	mov	r3, r0
 8007158:	603a      	str	r2, [r7, #0]
 800715a:	71fb      	strb	r3, [r7, #7]
 800715c:	460b      	mov	r3, r1
 800715e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8007160:	2301      	movs	r3, #1
 8007162:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 8007166:	79bb      	ldrb	r3, [r7, #6]
 8007168:	2b03      	cmp	r3, #3
 800716a:	d852      	bhi.n	8007212 <USBH_ioctl+0xc2>
 800716c:	a201      	add	r2, pc, #4	; (adr r2, 8007174 <USBH_ioctl+0x24>)
 800716e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007172:	bf00      	nop
 8007174:	08007185 	.word	0x08007185
 8007178:	0800718d 	.word	0x0800718d
 800717c:	080071b7 	.word	0x080071b7
 8007180:	080071e3 	.word	0x080071e3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 8007184:	2300      	movs	r3, #0
 8007186:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800718a:	e045      	b.n	8007218 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800718c:	f107 0208 	add.w	r2, r7, #8
 8007190:	79fb      	ldrb	r3, [r7, #7]
 8007192:	4619      	mov	r1, r3
 8007194:	4823      	ldr	r0, [pc, #140]	; (8007224 <USBH_ioctl+0xd4>)
 8007196:	f000 fd8f 	bl	8007cb8 <USBH_MSC_GetLUNInfo>
 800719a:	4603      	mov	r3, r0
 800719c:	2b00      	cmp	r3, #0
 800719e:	d106      	bne.n	80071ae <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 80071a0:	68fa      	ldr	r2, [r7, #12]
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 80071a6:	2300      	movs	r3, #0
 80071a8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 80071ac:	e034      	b.n	8007218 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 80071ae:	2301      	movs	r3, #1
 80071b0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 80071b4:	e030      	b.n	8007218 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 80071b6:	f107 0208 	add.w	r2, r7, #8
 80071ba:	79fb      	ldrb	r3, [r7, #7]
 80071bc:	4619      	mov	r1, r3
 80071be:	4819      	ldr	r0, [pc, #100]	; (8007224 <USBH_ioctl+0xd4>)
 80071c0:	f000 fd7a 	bl	8007cb8 <USBH_MSC_GetLUNInfo>
 80071c4:	4603      	mov	r3, r0
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d107      	bne.n	80071da <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 80071ca:	8a3b      	ldrh	r3, [r7, #16]
 80071cc:	461a      	mov	r2, r3
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 80071d2:	2300      	movs	r3, #0
 80071d4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 80071d8:	e01e      	b.n	8007218 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 80071da:	2301      	movs	r3, #1
 80071dc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 80071e0:	e01a      	b.n	8007218 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 80071e2:	f107 0208 	add.w	r2, r7, #8
 80071e6:	79fb      	ldrb	r3, [r7, #7]
 80071e8:	4619      	mov	r1, r3
 80071ea:	480e      	ldr	r0, [pc, #56]	; (8007224 <USBH_ioctl+0xd4>)
 80071ec:	f000 fd64 	bl	8007cb8 <USBH_MSC_GetLUNInfo>
 80071f0:	4603      	mov	r3, r0
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d109      	bne.n	800720a <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 80071f6:	8a3b      	ldrh	r3, [r7, #16]
 80071f8:	0a5b      	lsrs	r3, r3, #9
 80071fa:	b29b      	uxth	r3, r3
 80071fc:	461a      	mov	r2, r3
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8007202:	2300      	movs	r3, #0
 8007204:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8007208:	e006      	b.n	8007218 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800720a:	2301      	movs	r3, #1
 800720c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8007210:	e002      	b.n	8007218 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 8007212:	2304      	movs	r3, #4
 8007214:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 8007218:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800721c:	4618      	mov	r0, r3
 800721e:	3740      	adds	r7, #64	; 0x40
 8007220:	46bd      	mov	sp, r7
 8007222:	bd80      	pop	{r7, pc}
 8007224:	20002924 	.word	0x20002924

08007228 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007228:	b590      	push	{r4, r7, lr}
 800722a:	b089      	sub	sp, #36	; 0x24
 800722c:	af04      	add	r7, sp, #16
 800722e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007236:	7919      	ldrb	r1, [r3, #4]
 8007238:	2350      	movs	r3, #80	; 0x50
 800723a:	2206      	movs	r2, #6
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f001 fc53 	bl	8008ae8 <USBH_FindInterface>
 8007242:	4603      	mov	r3, r0
 8007244:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 8007246:	7bfb      	ldrb	r3, [r7, #15]
 8007248:	2bff      	cmp	r3, #255	; 0xff
 800724a:	d002      	beq.n	8007252 <USBH_MSC_InterfaceInit+0x2a>
 800724c:	7bfb      	ldrb	r3, [r7, #15]
 800724e:	2b01      	cmp	r3, #1
 8007250:	d901      	bls.n	8007256 <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007252:	2302      	movs	r3, #2
 8007254:	e0ef      	b.n	8007436 <USBH_MSC_InterfaceInit+0x20e>
  }

  status = USBH_SelectInterface(phost, interface);
 8007256:	7bfb      	ldrb	r3, [r7, #15]
 8007258:	4619      	mov	r1, r3
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f001 fc28 	bl	8008ab0 <USBH_SelectInterface>
 8007260:	4603      	mov	r3, r0
 8007262:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007264:	7bbb      	ldrb	r3, [r7, #14]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d001      	beq.n	800726e <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 800726a:	2302      	movs	r3, #2
 800726c:	e0e3      	b.n	8007436 <USBH_MSC_InterfaceInit+0x20e>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8007274:	f44f 7080 	mov.w	r0, #256	; 0x100
 8007278:	f008 fac8 	bl	800f80c <malloc>
 800727c:	4603      	mov	r3, r0
 800727e:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007286:	69db      	ldr	r3, [r3, #28]
 8007288:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 800728a:	68bb      	ldr	r3, [r7, #8]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d101      	bne.n	8007294 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 8007290:	2302      	movs	r3, #2
 8007292:	e0d0      	b.n	8007436 <USBH_MSC_InterfaceInit+0x20e>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8007294:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007298:	2100      	movs	r1, #0
 800729a:	68b8      	ldr	r0, [r7, #8]
 800729c:	f008 fad4 	bl	800f848 <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80072a0:	7bfb      	ldrb	r3, [r7, #15]
 80072a2:	687a      	ldr	r2, [r7, #4]
 80072a4:	211a      	movs	r1, #26
 80072a6:	fb01 f303 	mul.w	r3, r1, r3
 80072aa:	4413      	add	r3, r2
 80072ac:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80072b0:	781b      	ldrb	r3, [r3, #0]
 80072b2:	b25b      	sxtb	r3, r3
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	da16      	bge.n	80072e6 <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 80072b8:	7bfb      	ldrb	r3, [r7, #15]
 80072ba:	687a      	ldr	r2, [r7, #4]
 80072bc:	211a      	movs	r1, #26
 80072be:	fb01 f303 	mul.w	r3, r1, r3
 80072c2:	4413      	add	r3, r2
 80072c4:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80072c8:	781a      	ldrb	r2, [r3, #0]
 80072ca:	68bb      	ldr	r3, [r7, #8]
 80072cc:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80072ce:	7bfb      	ldrb	r3, [r7, #15]
 80072d0:	687a      	ldr	r2, [r7, #4]
 80072d2:	211a      	movs	r1, #26
 80072d4:	fb01 f303 	mul.w	r3, r1, r3
 80072d8:	4413      	add	r3, r2
 80072da:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80072de:	881a      	ldrh	r2, [r3, #0]
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	815a      	strh	r2, [r3, #10]
 80072e4:	e015      	b.n	8007312 <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 80072e6:	7bfb      	ldrb	r3, [r7, #15]
 80072e8:	687a      	ldr	r2, [r7, #4]
 80072ea:	211a      	movs	r1, #26
 80072ec:	fb01 f303 	mul.w	r3, r1, r3
 80072f0:	4413      	add	r3, r2
 80072f2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80072f6:	781a      	ldrb	r2, [r3, #0]
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80072fc:	7bfb      	ldrb	r3, [r7, #15]
 80072fe:	687a      	ldr	r2, [r7, #4]
 8007300:	211a      	movs	r1, #26
 8007302:	fb01 f303 	mul.w	r3, r1, r3
 8007306:	4413      	add	r3, r2
 8007308:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800730c:	881a      	ldrh	r2, [r3, #0]
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8007312:	7bfb      	ldrb	r3, [r7, #15]
 8007314:	687a      	ldr	r2, [r7, #4]
 8007316:	211a      	movs	r1, #26
 8007318:	fb01 f303 	mul.w	r3, r1, r3
 800731c:	4413      	add	r3, r2
 800731e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007322:	781b      	ldrb	r3, [r3, #0]
 8007324:	b25b      	sxtb	r3, r3
 8007326:	2b00      	cmp	r3, #0
 8007328:	da16      	bge.n	8007358 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800732a:	7bfb      	ldrb	r3, [r7, #15]
 800732c:	687a      	ldr	r2, [r7, #4]
 800732e:	211a      	movs	r1, #26
 8007330:	fb01 f303 	mul.w	r3, r1, r3
 8007334:	4413      	add	r3, r2
 8007336:	f203 3356 	addw	r3, r3, #854	; 0x356
 800733a:	781a      	ldrb	r2, [r3, #0]
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007340:	7bfb      	ldrb	r3, [r7, #15]
 8007342:	687a      	ldr	r2, [r7, #4]
 8007344:	211a      	movs	r1, #26
 8007346:	fb01 f303 	mul.w	r3, r1, r3
 800734a:	4413      	add	r3, r2
 800734c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007350:	881a      	ldrh	r2, [r3, #0]
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	815a      	strh	r2, [r3, #10]
 8007356:	e015      	b.n	8007384 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8007358:	7bfb      	ldrb	r3, [r7, #15]
 800735a:	687a      	ldr	r2, [r7, #4]
 800735c:	211a      	movs	r1, #26
 800735e:	fb01 f303 	mul.w	r3, r1, r3
 8007362:	4413      	add	r3, r2
 8007364:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007368:	781a      	ldrb	r2, [r3, #0]
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800736e:	7bfb      	ldrb	r3, [r7, #15]
 8007370:	687a      	ldr	r2, [r7, #4]
 8007372:	211a      	movs	r1, #26
 8007374:	fb01 f303 	mul.w	r3, r1, r3
 8007378:	4413      	add	r3, r2
 800737a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800737e:	881a      	ldrh	r2, [r3, #0]
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	2200      	movs	r2, #0
 8007388:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	2200      	movs	r2, #0
 800738e:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	2200      	movs	r2, #0
 8007394:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	799b      	ldrb	r3, [r3, #6]
 800739a:	4619      	mov	r1, r3
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	f002 fdc4 	bl	8009f2a <USBH_AllocPipe>
 80073a2:	4603      	mov	r3, r0
 80073a4:	461a      	mov	r2, r3
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	79db      	ldrb	r3, [r3, #7]
 80073ae:	4619      	mov	r1, r3
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	f002 fdba 	bl	8009f2a <USBH_AllocPipe>
 80073b6:	4603      	mov	r3, r0
 80073b8:	461a      	mov	r2, r3
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f000 fdac 	bl	8007f1c <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	7959      	ldrb	r1, [r3, #5]
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	7998      	ldrb	r0, [r3, #6]
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80073d8:	68ba      	ldr	r2, [r7, #8]
 80073da:	8912      	ldrh	r2, [r2, #8]
 80073dc:	9202      	str	r2, [sp, #8]
 80073de:	2202      	movs	r2, #2
 80073e0:	9201      	str	r2, [sp, #4]
 80073e2:	9300      	str	r3, [sp, #0]
 80073e4:	4623      	mov	r3, r4
 80073e6:	4602      	mov	r2, r0
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f002 fd6f 	bl	8009ecc <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	7919      	ldrb	r1, [r3, #4]
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	79d8      	ldrb	r0, [r3, #7]
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007402:	68ba      	ldr	r2, [r7, #8]
 8007404:	8952      	ldrh	r2, [r2, #10]
 8007406:	9202      	str	r2, [sp, #8]
 8007408:	2202      	movs	r2, #2
 800740a:	9201      	str	r2, [sp, #4]
 800740c:	9300      	str	r3, [sp, #0]
 800740e:	4623      	mov	r3, r4
 8007410:	4602      	mov	r2, r0
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f002 fd5a 	bl	8009ecc <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	791b      	ldrb	r3, [r3, #4]
 800741c:	2200      	movs	r2, #0
 800741e:	4619      	mov	r1, r3
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f008 f915 	bl	800f650 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	795b      	ldrb	r3, [r3, #5]
 800742a:	2200      	movs	r2, #0
 800742c:	4619      	mov	r1, r3
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f008 f90e 	bl	800f650 <USBH_LL_SetToggle>

  return USBH_OK;
 8007434:	2300      	movs	r3, #0
}
 8007436:	4618      	mov	r0, r3
 8007438:	3714      	adds	r7, #20
 800743a:	46bd      	mov	sp, r7
 800743c:	bd90      	pop	{r4, r7, pc}

0800743e <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800743e:	b580      	push	{r7, lr}
 8007440:	b084      	sub	sp, #16
 8007442:	af00      	add	r7, sp, #0
 8007444:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800744c:	69db      	ldr	r3, [r3, #28]
 800744e:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	795b      	ldrb	r3, [r3, #5]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d00e      	beq.n	8007476 <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	795b      	ldrb	r3, [r3, #5]
 800745c:	4619      	mov	r1, r3
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f002 fd53 	bl	8009f0a <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	795b      	ldrb	r3, [r3, #5]
 8007468:	4619      	mov	r1, r3
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f002 fd7e 	bl	8009f6c <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	2200      	movs	r2, #0
 8007474:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	791b      	ldrb	r3, [r3, #4]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d00e      	beq.n	800749c <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	791b      	ldrb	r3, [r3, #4]
 8007482:	4619      	mov	r1, r3
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f002 fd40 	bl	8009f0a <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	791b      	ldrb	r3, [r3, #4]
 800748e:	4619      	mov	r1, r3
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	f002 fd6b 	bl	8009f6c <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	2200      	movs	r2, #0
 800749a:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074a2:	69db      	ldr	r3, [r3, #28]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d00b      	beq.n	80074c0 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074ae:	69db      	ldr	r3, [r3, #28]
 80074b0:	4618      	mov	r0, r3
 80074b2:	f008 f9b3 	bl	800f81c <free>
    phost->pActiveClass->pData = 0U;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074bc:	2200      	movs	r2, #0
 80074be:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80074c0:	2300      	movs	r3, #0
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	3710      	adds	r7, #16
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}

080074ca <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80074ca:	b580      	push	{r7, lr}
 80074cc:	b084      	sub	sp, #16
 80074ce:	af00      	add	r7, sp, #0
 80074d0:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074d8:	69db      	ldr	r3, [r3, #28]
 80074da:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 80074dc:	2301      	movs	r3, #1
 80074de:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	7b9b      	ldrb	r3, [r3, #14]
 80074e4:	2b03      	cmp	r3, #3
 80074e6:	d041      	beq.n	800756c <USBH_MSC_ClassRequest+0xa2>
 80074e8:	2b03      	cmp	r3, #3
 80074ea:	dc4b      	bgt.n	8007584 <USBH_MSC_ClassRequest+0xba>
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d001      	beq.n	80074f4 <USBH_MSC_ClassRequest+0x2a>
 80074f0:	2b02      	cmp	r3, #2
 80074f2:	d147      	bne.n	8007584 <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	4619      	mov	r1, r3
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f000 fcf0 	bl	8007ede <USBH_MSC_BOT_REQ_GetMaxLUN>
 80074fe:	4603      	mov	r3, r0
 8007500:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considred as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 8007502:	7bfb      	ldrb	r3, [r7, #15]
 8007504:	2b03      	cmp	r3, #3
 8007506:	d104      	bne.n	8007512 <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	2200      	movs	r2, #0
 800750c:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 800750e:	2300      	movs	r3, #0
 8007510:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 8007512:	7bfb      	ldrb	r3, [r7, #15]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d137      	bne.n	8007588 <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	781b      	ldrb	r3, [r3, #0]
 800751c:	2b02      	cmp	r3, #2
 800751e:	d804      	bhi.n	800752a <USBH_MSC_ClassRequest+0x60>
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	781b      	ldrb	r3, [r3, #0]
 8007524:	3301      	adds	r3, #1
 8007526:	b2da      	uxtb	r2, r3
 8007528:	e000      	b.n	800752c <USBH_MSC_ClassRequest+0x62>
 800752a:	2202      	movs	r2, #2
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8007530:	2300      	movs	r3, #0
 8007532:	73bb      	strb	r3, [r7, #14]
 8007534:	e014      	b.n	8007560 <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8007536:	7bbb      	ldrb	r3, [r7, #14]
 8007538:	68ba      	ldr	r2, [r7, #8]
 800753a:	2134      	movs	r1, #52	; 0x34
 800753c:	fb01 f303 	mul.w	r3, r1, r3
 8007540:	4413      	add	r3, r2
 8007542:	3392      	adds	r3, #146	; 0x92
 8007544:	2202      	movs	r2, #2
 8007546:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 8007548:	7bbb      	ldrb	r3, [r7, #14]
 800754a:	68ba      	ldr	r2, [r7, #8]
 800754c:	2134      	movs	r1, #52	; 0x34
 800754e:	fb01 f303 	mul.w	r3, r1, r3
 8007552:	4413      	add	r3, r2
 8007554:	33c1      	adds	r3, #193	; 0xc1
 8007556:	2200      	movs	r2, #0
 8007558:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800755a:	7bbb      	ldrb	r3, [r7, #14]
 800755c:	3301      	adds	r3, #1
 800755e:	73bb      	strb	r3, [r7, #14]
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	781b      	ldrb	r3, [r3, #0]
 8007564:	7bba      	ldrb	r2, [r7, #14]
 8007566:	429a      	cmp	r2, r3
 8007568:	d3e5      	bcc.n	8007536 <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 800756a:	e00d      	b.n	8007588 <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 800756c:	2100      	movs	r1, #0
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f002 f87b 	bl	800966a <USBH_ClrFeature>
 8007574:	4603      	mov	r3, r0
 8007576:	2b00      	cmp	r3, #0
 8007578:	d108      	bne.n	800758c <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	7bda      	ldrb	r2, [r3, #15]
 800757e:	68bb      	ldr	r3, [r7, #8]
 8007580:	739a      	strb	r2, [r3, #14]
      }
      break;
 8007582:	e003      	b.n	800758c <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 8007584:	bf00      	nop
 8007586:	e002      	b.n	800758e <USBH_MSC_ClassRequest+0xc4>
      break;
 8007588:	bf00      	nop
 800758a:	e000      	b.n	800758e <USBH_MSC_ClassRequest+0xc4>
      break;
 800758c:	bf00      	nop
  }

  return status;
 800758e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007590:	4618      	mov	r0, r3
 8007592:	3710      	adds	r7, #16
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}

08007598 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b086      	sub	sp, #24
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80075a6:	69db      	ldr	r3, [r3, #28]
 80075a8:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 80075aa:	2301      	movs	r3, #1
 80075ac:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 80075ae:	2301      	movs	r3, #1
 80075b0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 80075b2:	2301      	movs	r3, #1
 80075b4:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 80075b6:	693b      	ldr	r3, [r7, #16]
 80075b8:	7b1b      	ldrb	r3, [r3, #12]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d003      	beq.n	80075c6 <USBH_MSC_Process+0x2e>
 80075be:	2b01      	cmp	r3, #1
 80075c0:	f000 8271 	beq.w	8007aa6 <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 80075c4:	e272      	b.n	8007aac <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 80075c6:	693b      	ldr	r3, [r7, #16]
 80075c8:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 80075cc:	693b      	ldr	r3, [r7, #16]
 80075ce:	781b      	ldrb	r3, [r3, #0]
 80075d0:	b29b      	uxth	r3, r3
 80075d2:	429a      	cmp	r2, r3
 80075d4:	f080 824f 	bcs.w	8007a76 <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 80075d8:	693b      	ldr	r3, [r7, #16]
 80075da:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80075de:	4619      	mov	r1, r3
 80075e0:	693a      	ldr	r2, [r7, #16]
 80075e2:	2334      	movs	r3, #52	; 0x34
 80075e4:	fb01 f303 	mul.w	r3, r1, r3
 80075e8:	4413      	add	r3, r2
 80075ea:	3391      	adds	r3, #145	; 0x91
 80075ec:	2201      	movs	r2, #1
 80075ee:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 80075f0:	693b      	ldr	r3, [r7, #16]
 80075f2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80075f6:	4619      	mov	r1, r3
 80075f8:	693a      	ldr	r2, [r7, #16]
 80075fa:	2334      	movs	r3, #52	; 0x34
 80075fc:	fb01 f303 	mul.w	r3, r1, r3
 8007600:	4413      	add	r3, r2
 8007602:	3390      	adds	r3, #144	; 0x90
 8007604:	781b      	ldrb	r3, [r3, #0]
 8007606:	2b08      	cmp	r3, #8
 8007608:	f200 8243 	bhi.w	8007a92 <USBH_MSC_Process+0x4fa>
 800760c:	a201      	add	r2, pc, #4	; (adr r2, 8007614 <USBH_MSC_Process+0x7c>)
 800760e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007612:	bf00      	nop
 8007614:	08007639 	.word	0x08007639
 8007618:	08007a93 	.word	0x08007a93
 800761c:	08007701 	.word	0x08007701
 8007620:	08007885 	.word	0x08007885
 8007624:	0800765f 	.word	0x0800765f
 8007628:	08007951 	.word	0x08007951
 800762c:	08007a93 	.word	0x08007a93
 8007630:	08007a93 	.word	0x08007a93
 8007634:	08007a65 	.word	0x08007a65
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8007638:	693b      	ldr	r3, [r7, #16]
 800763a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800763e:	4619      	mov	r1, r3
 8007640:	693a      	ldr	r2, [r7, #16]
 8007642:	2334      	movs	r3, #52	; 0x34
 8007644:	fb01 f303 	mul.w	r3, r1, r3
 8007648:	4413      	add	r3, r2
 800764a:	3390      	adds	r3, #144	; 0x90
 800764c:	2204      	movs	r2, #4
 800764e:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8007656:	693b      	ldr	r3, [r7, #16]
 8007658:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 800765c:	e222      	b.n	8007aa4 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 800765e:	693b      	ldr	r3, [r7, #16]
 8007660:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007664:	b2d9      	uxtb	r1, r3
 8007666:	693b      	ldr	r3, [r7, #16]
 8007668:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800766c:	461a      	mov	r2, r3
 800766e:	2334      	movs	r3, #52	; 0x34
 8007670:	fb02 f303 	mul.w	r3, r2, r3
 8007674:	3398      	adds	r3, #152	; 0x98
 8007676:	693a      	ldr	r2, [r7, #16]
 8007678:	4413      	add	r3, r2
 800767a:	3307      	adds	r3, #7
 800767c:	461a      	mov	r2, r3
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f000 ff6a 	bl	8008558 <USBH_MSC_SCSI_Inquiry>
 8007684:	4603      	mov	r3, r0
 8007686:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8007688:	7bfb      	ldrb	r3, [r7, #15]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d10b      	bne.n	80076a6 <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800768e:	693b      	ldr	r3, [r7, #16]
 8007690:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007694:	4619      	mov	r1, r3
 8007696:	693a      	ldr	r2, [r7, #16]
 8007698:	2334      	movs	r3, #52	; 0x34
 800769a:	fb01 f303 	mul.w	r3, r1, r3
 800769e:	4413      	add	r3, r2
 80076a0:	3390      	adds	r3, #144	; 0x90
 80076a2:	2202      	movs	r2, #2
 80076a4:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 80076a6:	7bfb      	ldrb	r3, [r7, #15]
 80076a8:	2b02      	cmp	r3, #2
 80076aa:	d10c      	bne.n	80076c6 <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80076ac:	693b      	ldr	r3, [r7, #16]
 80076ae:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80076b2:	4619      	mov	r1, r3
 80076b4:	693a      	ldr	r2, [r7, #16]
 80076b6:	2334      	movs	r3, #52	; 0x34
 80076b8:	fb01 f303 	mul.w	r3, r1, r3
 80076bc:	4413      	add	r3, r2
 80076be:	3390      	adds	r3, #144	; 0x90
 80076c0:	2205      	movs	r2, #5
 80076c2:	701a      	strb	r2, [r3, #0]
            break;
 80076c4:	e1e7      	b.n	8007a96 <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 80076c6:	7bfb      	ldrb	r3, [r7, #15]
 80076c8:	2b04      	cmp	r3, #4
 80076ca:	f040 81e4 	bne.w	8007a96 <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80076ce:	693b      	ldr	r3, [r7, #16]
 80076d0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80076d4:	4619      	mov	r1, r3
 80076d6:	693a      	ldr	r2, [r7, #16]
 80076d8:	2334      	movs	r3, #52	; 0x34
 80076da:	fb01 f303 	mul.w	r3, r1, r3
 80076de:	4413      	add	r3, r2
 80076e0:	3390      	adds	r3, #144	; 0x90
 80076e2:	2201      	movs	r2, #1
 80076e4:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80076e6:	693b      	ldr	r3, [r7, #16]
 80076e8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80076ec:	4619      	mov	r1, r3
 80076ee:	693a      	ldr	r2, [r7, #16]
 80076f0:	2334      	movs	r3, #52	; 0x34
 80076f2:	fb01 f303 	mul.w	r3, r1, r3
 80076f6:	4413      	add	r3, r2
 80076f8:	3391      	adds	r3, #145	; 0x91
 80076fa:	2202      	movs	r2, #2
 80076fc:	701a      	strb	r2, [r3, #0]
            break;
 80076fe:	e1ca      	b.n	8007a96 <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 8007700:	693b      	ldr	r3, [r7, #16]
 8007702:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007706:	b2db      	uxtb	r3, r3
 8007708:	4619      	mov	r1, r3
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f000 fe66 	bl	80083dc <USBH_MSC_SCSI_TestUnitReady>
 8007710:	4603      	mov	r3, r0
 8007712:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 8007714:	7bbb      	ldrb	r3, [r7, #14]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d149      	bne.n	80077ae <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 800771a:	693b      	ldr	r3, [r7, #16]
 800771c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007720:	4619      	mov	r1, r3
 8007722:	693a      	ldr	r2, [r7, #16]
 8007724:	2334      	movs	r3, #52	; 0x34
 8007726:	fb01 f303 	mul.w	r3, r1, r3
 800772a:	4413      	add	r3, r2
 800772c:	3392      	adds	r3, #146	; 0x92
 800772e:	781b      	ldrb	r3, [r3, #0]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d00c      	beq.n	800774e <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8007734:	693b      	ldr	r3, [r7, #16]
 8007736:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800773a:	4619      	mov	r1, r3
 800773c:	693a      	ldr	r2, [r7, #16]
 800773e:	2334      	movs	r3, #52	; 0x34
 8007740:	fb01 f303 	mul.w	r3, r1, r3
 8007744:	4413      	add	r3, r2
 8007746:	33c1      	adds	r3, #193	; 0xc1
 8007748:	2201      	movs	r2, #1
 800774a:	701a      	strb	r2, [r3, #0]
 800774c:	e00b      	b.n	8007766 <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800774e:	693b      	ldr	r3, [r7, #16]
 8007750:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007754:	4619      	mov	r1, r3
 8007756:	693a      	ldr	r2, [r7, #16]
 8007758:	2334      	movs	r3, #52	; 0x34
 800775a:	fb01 f303 	mul.w	r3, r1, r3
 800775e:	4413      	add	r3, r2
 8007760:	33c1      	adds	r3, #193	; 0xc1
 8007762:	2200      	movs	r2, #0
 8007764:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8007766:	693b      	ldr	r3, [r7, #16]
 8007768:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800776c:	4619      	mov	r1, r3
 800776e:	693a      	ldr	r2, [r7, #16]
 8007770:	2334      	movs	r3, #52	; 0x34
 8007772:	fb01 f303 	mul.w	r3, r1, r3
 8007776:	4413      	add	r3, r2
 8007778:	3390      	adds	r3, #144	; 0x90
 800777a:	2203      	movs	r2, #3
 800777c:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800777e:	693b      	ldr	r3, [r7, #16]
 8007780:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007784:	4619      	mov	r1, r3
 8007786:	693a      	ldr	r2, [r7, #16]
 8007788:	2334      	movs	r3, #52	; 0x34
 800778a:	fb01 f303 	mul.w	r3, r1, r3
 800778e:	4413      	add	r3, r2
 8007790:	3391      	adds	r3, #145	; 0x91
 8007792:	2200      	movs	r2, #0
 8007794:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 8007796:	693b      	ldr	r3, [r7, #16]
 8007798:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800779c:	4619      	mov	r1, r3
 800779e:	693a      	ldr	r2, [r7, #16]
 80077a0:	2334      	movs	r3, #52	; 0x34
 80077a2:	fb01 f303 	mul.w	r3, r1, r3
 80077a6:	4413      	add	r3, r2
 80077a8:	3392      	adds	r3, #146	; 0x92
 80077aa:	2200      	movs	r2, #0
 80077ac:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 80077ae:	7bbb      	ldrb	r3, [r7, #14]
 80077b0:	2b02      	cmp	r3, #2
 80077b2:	d14a      	bne.n	800784a <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 80077b4:	693b      	ldr	r3, [r7, #16]
 80077b6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80077ba:	4619      	mov	r1, r3
 80077bc:	693a      	ldr	r2, [r7, #16]
 80077be:	2334      	movs	r3, #52	; 0x34
 80077c0:	fb01 f303 	mul.w	r3, r1, r3
 80077c4:	4413      	add	r3, r2
 80077c6:	3392      	adds	r3, #146	; 0x92
 80077c8:	781b      	ldrb	r3, [r3, #0]
 80077ca:	2b02      	cmp	r3, #2
 80077cc:	d00c      	beq.n	80077e8 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 80077ce:	693b      	ldr	r3, [r7, #16]
 80077d0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80077d4:	4619      	mov	r1, r3
 80077d6:	693a      	ldr	r2, [r7, #16]
 80077d8:	2334      	movs	r3, #52	; 0x34
 80077da:	fb01 f303 	mul.w	r3, r1, r3
 80077de:	4413      	add	r3, r2
 80077e0:	33c1      	adds	r3, #193	; 0xc1
 80077e2:	2201      	movs	r2, #1
 80077e4:	701a      	strb	r2, [r3, #0]
 80077e6:	e00b      	b.n	8007800 <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 80077e8:	693b      	ldr	r3, [r7, #16]
 80077ea:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80077ee:	4619      	mov	r1, r3
 80077f0:	693a      	ldr	r2, [r7, #16]
 80077f2:	2334      	movs	r3, #52	; 0x34
 80077f4:	fb01 f303 	mul.w	r3, r1, r3
 80077f8:	4413      	add	r3, r2
 80077fa:	33c1      	adds	r3, #193	; 0xc1
 80077fc:	2200      	movs	r2, #0
 80077fe:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8007800:	693b      	ldr	r3, [r7, #16]
 8007802:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007806:	4619      	mov	r1, r3
 8007808:	693a      	ldr	r2, [r7, #16]
 800780a:	2334      	movs	r3, #52	; 0x34
 800780c:	fb01 f303 	mul.w	r3, r1, r3
 8007810:	4413      	add	r3, r2
 8007812:	3390      	adds	r3, #144	; 0x90
 8007814:	2205      	movs	r2, #5
 8007816:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8007818:	693b      	ldr	r3, [r7, #16]
 800781a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800781e:	4619      	mov	r1, r3
 8007820:	693a      	ldr	r2, [r7, #16]
 8007822:	2334      	movs	r3, #52	; 0x34
 8007824:	fb01 f303 	mul.w	r3, r1, r3
 8007828:	4413      	add	r3, r2
 800782a:	3391      	adds	r3, #145	; 0x91
 800782c:	2201      	movs	r2, #1
 800782e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8007830:	693b      	ldr	r3, [r7, #16]
 8007832:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007836:	4619      	mov	r1, r3
 8007838:	693a      	ldr	r2, [r7, #16]
 800783a:	2334      	movs	r3, #52	; 0x34
 800783c:	fb01 f303 	mul.w	r3, r1, r3
 8007840:	4413      	add	r3, r2
 8007842:	3392      	adds	r3, #146	; 0x92
 8007844:	2202      	movs	r2, #2
 8007846:	701a      	strb	r2, [r3, #0]
            break;
 8007848:	e127      	b.n	8007a9a <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 800784a:	7bbb      	ldrb	r3, [r7, #14]
 800784c:	2b04      	cmp	r3, #4
 800784e:	f040 8124 	bne.w	8007a9a <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8007852:	693b      	ldr	r3, [r7, #16]
 8007854:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007858:	4619      	mov	r1, r3
 800785a:	693a      	ldr	r2, [r7, #16]
 800785c:	2334      	movs	r3, #52	; 0x34
 800785e:	fb01 f303 	mul.w	r3, r1, r3
 8007862:	4413      	add	r3, r2
 8007864:	3390      	adds	r3, #144	; 0x90
 8007866:	2201      	movs	r2, #1
 8007868:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800786a:	693b      	ldr	r3, [r7, #16]
 800786c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007870:	4619      	mov	r1, r3
 8007872:	693a      	ldr	r2, [r7, #16]
 8007874:	2334      	movs	r3, #52	; 0x34
 8007876:	fb01 f303 	mul.w	r3, r1, r3
 800787a:	4413      	add	r3, r2
 800787c:	3391      	adds	r3, #145	; 0x91
 800787e:	2202      	movs	r2, #2
 8007880:	701a      	strb	r2, [r3, #0]
            break;
 8007882:	e10a      	b.n	8007a9a <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 8007884:	693b      	ldr	r3, [r7, #16]
 8007886:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800788a:	b2d9      	uxtb	r1, r3
 800788c:	693b      	ldr	r3, [r7, #16]
 800788e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007892:	461a      	mov	r2, r3
 8007894:	2334      	movs	r3, #52	; 0x34
 8007896:	fb02 f303 	mul.w	r3, r2, r3
 800789a:	3390      	adds	r3, #144	; 0x90
 800789c:	693a      	ldr	r2, [r7, #16]
 800789e:	4413      	add	r3, r2
 80078a0:	3304      	adds	r3, #4
 80078a2:	461a      	mov	r2, r3
 80078a4:	6878      	ldr	r0, [r7, #4]
 80078a6:	f000 fddc 	bl	8008462 <USBH_MSC_SCSI_ReadCapacity>
 80078aa:	4603      	mov	r3, r0
 80078ac:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 80078ae:	7bfb      	ldrb	r3, [r7, #15]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d120      	bne.n	80078f6 <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80078b4:	693b      	ldr	r3, [r7, #16]
 80078b6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80078ba:	4619      	mov	r1, r3
 80078bc:	693a      	ldr	r2, [r7, #16]
 80078be:	2334      	movs	r3, #52	; 0x34
 80078c0:	fb01 f303 	mul.w	r3, r1, r3
 80078c4:	4413      	add	r3, r2
 80078c6:	3390      	adds	r3, #144	; 0x90
 80078c8:	2201      	movs	r2, #1
 80078ca:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 80078cc:	693b      	ldr	r3, [r7, #16]
 80078ce:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80078d2:	4619      	mov	r1, r3
 80078d4:	693a      	ldr	r2, [r7, #16]
 80078d6:	2334      	movs	r3, #52	; 0x34
 80078d8:	fb01 f303 	mul.w	r3, r1, r3
 80078dc:	4413      	add	r3, r2
 80078de:	3391      	adds	r3, #145	; 0x91
 80078e0:	2200      	movs	r2, #0
 80078e2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 80078e4:	693b      	ldr	r3, [r7, #16]
 80078e6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80078ea:	3301      	adds	r3, #1
 80078ec:	b29a      	uxth	r2, r3
 80078ee:	693b      	ldr	r3, [r7, #16]
 80078f0:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 80078f4:	e0d3      	b.n	8007a9e <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 80078f6:	7bfb      	ldrb	r3, [r7, #15]
 80078f8:	2b02      	cmp	r3, #2
 80078fa:	d10c      	bne.n	8007916 <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80078fc:	693b      	ldr	r3, [r7, #16]
 80078fe:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007902:	4619      	mov	r1, r3
 8007904:	693a      	ldr	r2, [r7, #16]
 8007906:	2334      	movs	r3, #52	; 0x34
 8007908:	fb01 f303 	mul.w	r3, r1, r3
 800790c:	4413      	add	r3, r2
 800790e:	3390      	adds	r3, #144	; 0x90
 8007910:	2205      	movs	r2, #5
 8007912:	701a      	strb	r2, [r3, #0]
            break;
 8007914:	e0c3      	b.n	8007a9e <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8007916:	7bfb      	ldrb	r3, [r7, #15]
 8007918:	2b04      	cmp	r3, #4
 800791a:	f040 80c0 	bne.w	8007a9e <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800791e:	693b      	ldr	r3, [r7, #16]
 8007920:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007924:	4619      	mov	r1, r3
 8007926:	693a      	ldr	r2, [r7, #16]
 8007928:	2334      	movs	r3, #52	; 0x34
 800792a:	fb01 f303 	mul.w	r3, r1, r3
 800792e:	4413      	add	r3, r2
 8007930:	3390      	adds	r3, #144	; 0x90
 8007932:	2201      	movs	r2, #1
 8007934:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8007936:	693b      	ldr	r3, [r7, #16]
 8007938:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800793c:	4619      	mov	r1, r3
 800793e:	693a      	ldr	r2, [r7, #16]
 8007940:	2334      	movs	r3, #52	; 0x34
 8007942:	fb01 f303 	mul.w	r3, r1, r3
 8007946:	4413      	add	r3, r2
 8007948:	3391      	adds	r3, #145	; 0x91
 800794a:	2202      	movs	r2, #2
 800794c:	701a      	strb	r2, [r3, #0]
            break;
 800794e:	e0a6      	b.n	8007a9e <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 8007950:	693b      	ldr	r3, [r7, #16]
 8007952:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007956:	b2d9      	uxtb	r1, r3
 8007958:	693b      	ldr	r3, [r7, #16]
 800795a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800795e:	461a      	mov	r2, r3
 8007960:	2334      	movs	r3, #52	; 0x34
 8007962:	fb02 f303 	mul.w	r3, r2, r3
 8007966:	3398      	adds	r3, #152	; 0x98
 8007968:	693a      	ldr	r2, [r7, #16]
 800796a:	4413      	add	r3, r2
 800796c:	3304      	adds	r3, #4
 800796e:	461a      	mov	r2, r3
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	f000 fe96 	bl	80086a2 <USBH_MSC_SCSI_RequestSense>
 8007976:	4603      	mov	r3, r0
 8007978:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800797a:	7bfb      	ldrb	r3, [r7, #15]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d145      	bne.n	8007a0c <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8007980:	693b      	ldr	r3, [r7, #16]
 8007982:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007986:	4619      	mov	r1, r3
 8007988:	693a      	ldr	r2, [r7, #16]
 800798a:	2334      	movs	r3, #52	; 0x34
 800798c:	fb01 f303 	mul.w	r3, r1, r3
 8007990:	4413      	add	r3, r2
 8007992:	339c      	adds	r3, #156	; 0x9c
 8007994:	781b      	ldrb	r3, [r3, #0]
 8007996:	2b06      	cmp	r3, #6
 8007998:	d00c      	beq.n	80079b4 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 800799a:	693b      	ldr	r3, [r7, #16]
 800799c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80079a0:	4619      	mov	r1, r3
 80079a2:	693a      	ldr	r2, [r7, #16]
 80079a4:	2334      	movs	r3, #52	; 0x34
 80079a6:	fb01 f303 	mul.w	r3, r1, r3
 80079aa:	4413      	add	r3, r2
 80079ac:	339c      	adds	r3, #156	; 0x9c
 80079ae:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 80079b0:	2b02      	cmp	r3, #2
 80079b2:	d117      	bne.n	80079e4 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 80079ba:	693b      	ldr	r3, [r7, #16]
 80079bc:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80079c0:	1ad3      	subs	r3, r2, r3
 80079c2:	f242 720f 	movw	r2, #9999	; 0x270f
 80079c6:	4293      	cmp	r3, r2
 80079c8:	d80c      	bhi.n	80079e4 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 80079ca:	693b      	ldr	r3, [r7, #16]
 80079cc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80079d0:	4619      	mov	r1, r3
 80079d2:	693a      	ldr	r2, [r7, #16]
 80079d4:	2334      	movs	r3, #52	; 0x34
 80079d6:	fb01 f303 	mul.w	r3, r1, r3
 80079da:	4413      	add	r3, r2
 80079dc:	3390      	adds	r3, #144	; 0x90
 80079de:	2202      	movs	r2, #2
 80079e0:	701a      	strb	r2, [r3, #0]
                  break;
 80079e2:	e05f      	b.n	8007aa4 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80079e4:	693b      	ldr	r3, [r7, #16]
 80079e6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80079ea:	4619      	mov	r1, r3
 80079ec:	693a      	ldr	r2, [r7, #16]
 80079ee:	2334      	movs	r3, #52	; 0x34
 80079f0:	fb01 f303 	mul.w	r3, r1, r3
 80079f4:	4413      	add	r3, r2
 80079f6:	3390      	adds	r3, #144	; 0x90
 80079f8:	2201      	movs	r2, #1
 80079fa:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 80079fc:	693b      	ldr	r3, [r7, #16]
 80079fe:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007a02:	3301      	adds	r3, #1
 8007a04:	b29a      	uxth	r2, r3
 8007a06:	693b      	ldr	r3, [r7, #16]
 8007a08:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 8007a0c:	7bfb      	ldrb	r3, [r7, #15]
 8007a0e:	2b02      	cmp	r3, #2
 8007a10:	d10c      	bne.n	8007a2c <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8007a12:	693b      	ldr	r3, [r7, #16]
 8007a14:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007a18:	4619      	mov	r1, r3
 8007a1a:	693a      	ldr	r2, [r7, #16]
 8007a1c:	2334      	movs	r3, #52	; 0x34
 8007a1e:	fb01 f303 	mul.w	r3, r1, r3
 8007a22:	4413      	add	r3, r2
 8007a24:	3390      	adds	r3, #144	; 0x90
 8007a26:	2208      	movs	r2, #8
 8007a28:	701a      	strb	r2, [r3, #0]
            break;
 8007a2a:	e03a      	b.n	8007aa2 <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8007a2c:	7bfb      	ldrb	r3, [r7, #15]
 8007a2e:	2b04      	cmp	r3, #4
 8007a30:	d137      	bne.n	8007aa2 <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8007a32:	693b      	ldr	r3, [r7, #16]
 8007a34:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007a38:	4619      	mov	r1, r3
 8007a3a:	693a      	ldr	r2, [r7, #16]
 8007a3c:	2334      	movs	r3, #52	; 0x34
 8007a3e:	fb01 f303 	mul.w	r3, r1, r3
 8007a42:	4413      	add	r3, r2
 8007a44:	3390      	adds	r3, #144	; 0x90
 8007a46:	2201      	movs	r2, #1
 8007a48:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8007a4a:	693b      	ldr	r3, [r7, #16]
 8007a4c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007a50:	4619      	mov	r1, r3
 8007a52:	693a      	ldr	r2, [r7, #16]
 8007a54:	2334      	movs	r3, #52	; 0x34
 8007a56:	fb01 f303 	mul.w	r3, r1, r3
 8007a5a:	4413      	add	r3, r2
 8007a5c:	3391      	adds	r3, #145	; 0x91
 8007a5e:	2202      	movs	r2, #2
 8007a60:	701a      	strb	r2, [r3, #0]
            break;
 8007a62:	e01e      	b.n	8007aa2 <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 8007a64:	693b      	ldr	r3, [r7, #16]
 8007a66:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007a6a:	3301      	adds	r3, #1
 8007a6c:	b29a      	uxth	r2, r3
 8007a6e:	693b      	ldr	r3, [r7, #16]
 8007a70:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8007a74:	e016      	b.n	8007aa4 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 8007a76:	693b      	ldr	r3, [r7, #16]
 8007a78:	2200      	movs	r2, #0
 8007a7a:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 8007a7e:	693b      	ldr	r3, [r7, #16]
 8007a80:	2201      	movs	r2, #1
 8007a82:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007a8a:	2102      	movs	r1, #2
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	4798      	blx	r3
      break;
 8007a90:	e00c      	b.n	8007aac <USBH_MSC_Process+0x514>
            break;
 8007a92:	bf00      	nop
 8007a94:	e00a      	b.n	8007aac <USBH_MSC_Process+0x514>
            break;
 8007a96:	bf00      	nop
 8007a98:	e008      	b.n	8007aac <USBH_MSC_Process+0x514>
            break;
 8007a9a:	bf00      	nop
 8007a9c:	e006      	b.n	8007aac <USBH_MSC_Process+0x514>
            break;
 8007a9e:	bf00      	nop
 8007aa0:	e004      	b.n	8007aac <USBH_MSC_Process+0x514>
            break;
 8007aa2:	bf00      	nop
      break;
 8007aa4:	e002      	b.n	8007aac <USBH_MSC_Process+0x514>
      error = USBH_OK;
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	75fb      	strb	r3, [r7, #23]
      break;
 8007aaa:	bf00      	nop
  }
  return error;
 8007aac:	7dfb      	ldrb	r3, [r7, #23]
}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	3718      	adds	r7, #24
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}
 8007ab6:	bf00      	nop

08007ab8 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b083      	sub	sp, #12
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007ac0:	2300      	movs	r3, #0
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	370c      	adds	r7, #12
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007acc:	4770      	bx	lr

08007ace <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8007ace:	b580      	push	{r7, lr}
 8007ad0:	b088      	sub	sp, #32
 8007ad2:	af02      	add	r7, sp, #8
 8007ad4:	6078      	str	r0, [r7, #4]
 8007ad6:	460b      	mov	r3, r1
 8007ad8:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007ae0:	69db      	ldr	r3, [r3, #28]
 8007ae2:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 8007ae4:	2301      	movs	r3, #1
 8007ae6:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 8007ae8:	2301      	movs	r3, #1
 8007aea:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 8007aec:	78fb      	ldrb	r3, [r7, #3]
 8007aee:	693a      	ldr	r2, [r7, #16]
 8007af0:	2134      	movs	r1, #52	; 0x34
 8007af2:	fb01 f303 	mul.w	r3, r1, r3
 8007af6:	4413      	add	r3, r2
 8007af8:	3390      	adds	r3, #144	; 0x90
 8007afa:	781b      	ldrb	r3, [r3, #0]
 8007afc:	2b07      	cmp	r3, #7
 8007afe:	d03c      	beq.n	8007b7a <USBH_MSC_RdWrProcess+0xac>
 8007b00:	2b07      	cmp	r3, #7
 8007b02:	f300 80a7 	bgt.w	8007c54 <USBH_MSC_RdWrProcess+0x186>
 8007b06:	2b05      	cmp	r3, #5
 8007b08:	d06c      	beq.n	8007be4 <USBH_MSC_RdWrProcess+0x116>
 8007b0a:	2b06      	cmp	r3, #6
 8007b0c:	f040 80a2 	bne.w	8007c54 <USBH_MSC_RdWrProcess+0x186>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 8007b10:	78f9      	ldrb	r1, [r7, #3]
 8007b12:	2300      	movs	r3, #0
 8007b14:	9300      	str	r3, [sp, #0]
 8007b16:	2300      	movs	r3, #0
 8007b18:	2200      	movs	r2, #0
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f000 fea5 	bl	800886a <USBH_MSC_SCSI_Read>
 8007b20:	4603      	mov	r3, r0
 8007b22:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8007b24:	7bfb      	ldrb	r3, [r7, #15]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d10b      	bne.n	8007b42 <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8007b2a:	78fb      	ldrb	r3, [r7, #3]
 8007b2c:	693a      	ldr	r2, [r7, #16]
 8007b2e:	2134      	movs	r1, #52	; 0x34
 8007b30:	fb01 f303 	mul.w	r3, r1, r3
 8007b34:	4413      	add	r3, r2
 8007b36:	3390      	adds	r3, #144	; 0x90
 8007b38:	2201      	movs	r2, #1
 8007b3a:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007b40:	e08a      	b.n	8007c58 <USBH_MSC_RdWrProcess+0x18a>
      else if (scsi_status == USBH_FAIL)
 8007b42:	7bfb      	ldrb	r3, [r7, #15]
 8007b44:	2b02      	cmp	r3, #2
 8007b46:	d109      	bne.n	8007b5c <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8007b48:	78fb      	ldrb	r3, [r7, #3]
 8007b4a:	693a      	ldr	r2, [r7, #16]
 8007b4c:	2134      	movs	r1, #52	; 0x34
 8007b4e:	fb01 f303 	mul.w	r3, r1, r3
 8007b52:	4413      	add	r3, r2
 8007b54:	3390      	adds	r3, #144	; 0x90
 8007b56:	2205      	movs	r2, #5
 8007b58:	701a      	strb	r2, [r3, #0]
      break;
 8007b5a:	e07d      	b.n	8007c58 <USBH_MSC_RdWrProcess+0x18a>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8007b5c:	7bfb      	ldrb	r3, [r7, #15]
 8007b5e:	2b04      	cmp	r3, #4
 8007b60:	d17a      	bne.n	8007c58 <USBH_MSC_RdWrProcess+0x18a>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8007b62:	78fb      	ldrb	r3, [r7, #3]
 8007b64:	693a      	ldr	r2, [r7, #16]
 8007b66:	2134      	movs	r1, #52	; 0x34
 8007b68:	fb01 f303 	mul.w	r3, r1, r3
 8007b6c:	4413      	add	r3, r2
 8007b6e:	3390      	adds	r3, #144	; 0x90
 8007b70:	2208      	movs	r2, #8
 8007b72:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8007b74:	2302      	movs	r3, #2
 8007b76:	75fb      	strb	r3, [r7, #23]
      break;
 8007b78:	e06e      	b.n	8007c58 <USBH_MSC_RdWrProcess+0x18a>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 8007b7a:	78f9      	ldrb	r1, [r7, #3]
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	9300      	str	r3, [sp, #0]
 8007b80:	2300      	movs	r3, #0
 8007b82:	2200      	movs	r2, #0
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	f000 fe05 	bl	8008794 <USBH_MSC_SCSI_Write>
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8007b8e:	7bfb      	ldrb	r3, [r7, #15]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d10b      	bne.n	8007bac <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8007b94:	78fb      	ldrb	r3, [r7, #3]
 8007b96:	693a      	ldr	r2, [r7, #16]
 8007b98:	2134      	movs	r1, #52	; 0x34
 8007b9a:	fb01 f303 	mul.w	r3, r1, r3
 8007b9e:	4413      	add	r3, r2
 8007ba0:	3390      	adds	r3, #144	; 0x90
 8007ba2:	2201      	movs	r2, #1
 8007ba4:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007baa:	e057      	b.n	8007c5c <USBH_MSC_RdWrProcess+0x18e>
      else if (scsi_status == USBH_FAIL)
 8007bac:	7bfb      	ldrb	r3, [r7, #15]
 8007bae:	2b02      	cmp	r3, #2
 8007bb0:	d109      	bne.n	8007bc6 <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8007bb2:	78fb      	ldrb	r3, [r7, #3]
 8007bb4:	693a      	ldr	r2, [r7, #16]
 8007bb6:	2134      	movs	r1, #52	; 0x34
 8007bb8:	fb01 f303 	mul.w	r3, r1, r3
 8007bbc:	4413      	add	r3, r2
 8007bbe:	3390      	adds	r3, #144	; 0x90
 8007bc0:	2205      	movs	r2, #5
 8007bc2:	701a      	strb	r2, [r3, #0]
      break;
 8007bc4:	e04a      	b.n	8007c5c <USBH_MSC_RdWrProcess+0x18e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8007bc6:	7bfb      	ldrb	r3, [r7, #15]
 8007bc8:	2b04      	cmp	r3, #4
 8007bca:	d147      	bne.n	8007c5c <USBH_MSC_RdWrProcess+0x18e>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8007bcc:	78fb      	ldrb	r3, [r7, #3]
 8007bce:	693a      	ldr	r2, [r7, #16]
 8007bd0:	2134      	movs	r1, #52	; 0x34
 8007bd2:	fb01 f303 	mul.w	r3, r1, r3
 8007bd6:	4413      	add	r3, r2
 8007bd8:	3390      	adds	r3, #144	; 0x90
 8007bda:	2208      	movs	r2, #8
 8007bdc:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8007bde:	2302      	movs	r3, #2
 8007be0:	75fb      	strb	r3, [r7, #23]
      break;
 8007be2:	e03b      	b.n	8007c5c <USBH_MSC_RdWrProcess+0x18e>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 8007be4:	78fb      	ldrb	r3, [r7, #3]
 8007be6:	2234      	movs	r2, #52	; 0x34
 8007be8:	fb02 f303 	mul.w	r3, r2, r3
 8007bec:	3398      	adds	r3, #152	; 0x98
 8007bee:	693a      	ldr	r2, [r7, #16]
 8007bf0:	4413      	add	r3, r2
 8007bf2:	1d1a      	adds	r2, r3, #4
 8007bf4:	78fb      	ldrb	r3, [r7, #3]
 8007bf6:	4619      	mov	r1, r3
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	f000 fd52 	bl	80086a2 <USBH_MSC_SCSI_RequestSense>
 8007bfe:	4603      	mov	r3, r0
 8007c00:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8007c02:	7bfb      	ldrb	r3, [r7, #15]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d113      	bne.n	8007c30 <USBH_MSC_RdWrProcess+0x162>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8007c08:	78fb      	ldrb	r3, [r7, #3]
 8007c0a:	693a      	ldr	r2, [r7, #16]
 8007c0c:	2134      	movs	r1, #52	; 0x34
 8007c0e:	fb01 f303 	mul.w	r3, r1, r3
 8007c12:	4413      	add	r3, r2
 8007c14:	3390      	adds	r3, #144	; 0x90
 8007c16:	2201      	movs	r2, #1
 8007c18:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 8007c1a:	78fb      	ldrb	r3, [r7, #3]
 8007c1c:	693a      	ldr	r2, [r7, #16]
 8007c1e:	2134      	movs	r1, #52	; 0x34
 8007c20:	fb01 f303 	mul.w	r3, r1, r3
 8007c24:	4413      	add	r3, r2
 8007c26:	3391      	adds	r3, #145	; 0x91
 8007c28:	2202      	movs	r2, #2
 8007c2a:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 8007c2c:	2302      	movs	r3, #2
 8007c2e:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 8007c30:	7bfb      	ldrb	r3, [r7, #15]
 8007c32:	2b02      	cmp	r3, #2
 8007c34:	d014      	beq.n	8007c60 <USBH_MSC_RdWrProcess+0x192>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8007c36:	7bfb      	ldrb	r3, [r7, #15]
 8007c38:	2b04      	cmp	r3, #4
 8007c3a:	d111      	bne.n	8007c60 <USBH_MSC_RdWrProcess+0x192>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8007c3c:	78fb      	ldrb	r3, [r7, #3]
 8007c3e:	693a      	ldr	r2, [r7, #16]
 8007c40:	2134      	movs	r1, #52	; 0x34
 8007c42:	fb01 f303 	mul.w	r3, r1, r3
 8007c46:	4413      	add	r3, r2
 8007c48:	3390      	adds	r3, #144	; 0x90
 8007c4a:	2208      	movs	r2, #8
 8007c4c:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8007c4e:	2302      	movs	r3, #2
 8007c50:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007c52:	e005      	b.n	8007c60 <USBH_MSC_RdWrProcess+0x192>

    default:
      break;
 8007c54:	bf00      	nop
 8007c56:	e004      	b.n	8007c62 <USBH_MSC_RdWrProcess+0x194>
      break;
 8007c58:	bf00      	nop
 8007c5a:	e002      	b.n	8007c62 <USBH_MSC_RdWrProcess+0x194>
      break;
 8007c5c:	bf00      	nop
 8007c5e:	e000      	b.n	8007c62 <USBH_MSC_RdWrProcess+0x194>
      break;
 8007c60:	bf00      	nop

  }
  return error;
 8007c62:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c64:	4618      	mov	r0, r3
 8007c66:	3718      	adds	r7, #24
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bd80      	pop	{r7, pc}

08007c6c <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b085      	sub	sp, #20
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
 8007c74:	460b      	mov	r3, r1
 8007c76:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007c7e:	69db      	ldr	r3, [r3, #28]
 8007c80:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	781b      	ldrb	r3, [r3, #0]
 8007c86:	b2db      	uxtb	r3, r3
 8007c88:	2b0b      	cmp	r3, #11
 8007c8a:	d10c      	bne.n	8007ca6 <USBH_MSC_UnitIsReady+0x3a>
 8007c8c:	78fb      	ldrb	r3, [r7, #3]
 8007c8e:	68ba      	ldr	r2, [r7, #8]
 8007c90:	2134      	movs	r1, #52	; 0x34
 8007c92:	fb01 f303 	mul.w	r3, r1, r3
 8007c96:	4413      	add	r3, r2
 8007c98:	3391      	adds	r3, #145	; 0x91
 8007c9a:	781b      	ldrb	r3, [r3, #0]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d102      	bne.n	8007ca6 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 8007ca0:	2301      	movs	r3, #1
 8007ca2:	73fb      	strb	r3, [r7, #15]
 8007ca4:	e001      	b.n	8007caa <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8007caa:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	3714      	adds	r7, #20
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb6:	4770      	bx	lr

08007cb8 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b086      	sub	sp, #24
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	60f8      	str	r0, [r7, #12]
 8007cc0:	460b      	mov	r3, r1
 8007cc2:	607a      	str	r2, [r7, #4]
 8007cc4:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007ccc:	69db      	ldr	r3, [r3, #28]
 8007cce:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	781b      	ldrb	r3, [r3, #0]
 8007cd4:	b2db      	uxtb	r3, r3
 8007cd6:	2b0b      	cmp	r3, #11
 8007cd8:	d10d      	bne.n	8007cf6 <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 8007cda:	7afb      	ldrb	r3, [r7, #11]
 8007cdc:	2234      	movs	r2, #52	; 0x34
 8007cde:	fb02 f303 	mul.w	r3, r2, r3
 8007ce2:	3390      	adds	r3, #144	; 0x90
 8007ce4:	697a      	ldr	r2, [r7, #20]
 8007ce6:	4413      	add	r3, r2
 8007ce8:	2234      	movs	r2, #52	; 0x34
 8007cea:	4619      	mov	r1, r3
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	f007 fd9d 	bl	800f82c <memcpy>
    return USBH_OK;
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	e000      	b.n	8007cf8 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 8007cf6:	2302      	movs	r3, #2
  }
}
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	3718      	adds	r7, #24
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bd80      	pop	{r7, pc}

08007d00 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b088      	sub	sp, #32
 8007d04:	af02      	add	r7, sp, #8
 8007d06:	60f8      	str	r0, [r7, #12]
 8007d08:	607a      	str	r2, [r7, #4]
 8007d0a:	603b      	str	r3, [r7, #0]
 8007d0c:	460b      	mov	r3, r1
 8007d0e:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007d16:	69db      	ldr	r3, [r3, #28]
 8007d18:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007d20:	b2db      	uxtb	r3, r3
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d00e      	beq.n	8007d44 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	781b      	ldrb	r3, [r3, #0]
 8007d2a:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8007d2c:	2b0b      	cmp	r3, #11
 8007d2e:	d109      	bne.n	8007d44 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8007d30:	7afb      	ldrb	r3, [r7, #11]
 8007d32:	697a      	ldr	r2, [r7, #20]
 8007d34:	2134      	movs	r1, #52	; 0x34
 8007d36:	fb01 f303 	mul.w	r3, r1, r3
 8007d3a:	4413      	add	r3, r2
 8007d3c:	3390      	adds	r3, #144	; 0x90
 8007d3e:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8007d40:	2b01      	cmp	r3, #1
 8007d42:	d001      	beq.n	8007d48 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 8007d44:	2302      	movs	r3, #2
 8007d46:	e040      	b.n	8007dca <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 8007d48:	697b      	ldr	r3, [r7, #20]
 8007d4a:	2206      	movs	r2, #6
 8007d4c:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 8007d4e:	7afb      	ldrb	r3, [r7, #11]
 8007d50:	697a      	ldr	r2, [r7, #20]
 8007d52:	2134      	movs	r1, #52	; 0x34
 8007d54:	fb01 f303 	mul.w	r3, r1, r3
 8007d58:	4413      	add	r3, r2
 8007d5a:	3390      	adds	r3, #144	; 0x90
 8007d5c:	2206      	movs	r2, #6
 8007d5e:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8007d60:	7afb      	ldrb	r3, [r7, #11]
 8007d62:	b29a      	uxth	r2, r3
 8007d64:	697b      	ldr	r3, [r7, #20]
 8007d66:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 8007d6a:	7af9      	ldrb	r1, [r7, #11]
 8007d6c:	6a3b      	ldr	r3, [r7, #32]
 8007d6e:	9300      	str	r3, [sp, #0]
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	687a      	ldr	r2, [r7, #4]
 8007d74:	68f8      	ldr	r0, [r7, #12]
 8007d76:	f000 fd78 	bl	800886a <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007d80:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8007d82:	e016      	b.n	8007db2 <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8007d8a:	693b      	ldr	r3, [r7, #16]
 8007d8c:	1ad2      	subs	r2, r2, r3
 8007d8e:	6a3b      	ldr	r3, [r7, #32]
 8007d90:	f242 7110 	movw	r1, #10000	; 0x2710
 8007d94:	fb01 f303 	mul.w	r3, r1, r3
 8007d98:	429a      	cmp	r2, r3
 8007d9a:	d805      	bhi.n	8007da8 <USBH_MSC_Read+0xa8>
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007da2:	b2db      	uxtb	r3, r3
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d104      	bne.n	8007db2 <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8007da8:	697b      	ldr	r3, [r7, #20]
 8007daa:	2201      	movs	r2, #1
 8007dac:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8007dae:	2302      	movs	r3, #2
 8007db0:	e00b      	b.n	8007dca <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8007db2:	7afb      	ldrb	r3, [r7, #11]
 8007db4:	4619      	mov	r1, r3
 8007db6:	68f8      	ldr	r0, [r7, #12]
 8007db8:	f7ff fe89 	bl	8007ace <USBH_MSC_RdWrProcess>
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	2b01      	cmp	r3, #1
 8007dc0:	d0e0      	beq.n	8007d84 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	2201      	movs	r2, #1
 8007dc6:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 8007dc8:	2300      	movs	r3, #0
}
 8007dca:	4618      	mov	r0, r3
 8007dcc:	3718      	adds	r7, #24
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd80      	pop	{r7, pc}

08007dd2 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 8007dd2:	b580      	push	{r7, lr}
 8007dd4:	b088      	sub	sp, #32
 8007dd6:	af02      	add	r7, sp, #8
 8007dd8:	60f8      	str	r0, [r7, #12]
 8007dda:	607a      	str	r2, [r7, #4]
 8007ddc:	603b      	str	r3, [r7, #0]
 8007dde:	460b      	mov	r3, r1
 8007de0:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007de8:	69db      	ldr	r3, [r3, #28]
 8007dea:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007df2:	b2db      	uxtb	r3, r3
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d00e      	beq.n	8007e16 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	781b      	ldrb	r3, [r3, #0]
 8007dfc:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8007dfe:	2b0b      	cmp	r3, #11
 8007e00:	d109      	bne.n	8007e16 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8007e02:	7afb      	ldrb	r3, [r7, #11]
 8007e04:	697a      	ldr	r2, [r7, #20]
 8007e06:	2134      	movs	r1, #52	; 0x34
 8007e08:	fb01 f303 	mul.w	r3, r1, r3
 8007e0c:	4413      	add	r3, r2
 8007e0e:	3390      	adds	r3, #144	; 0x90
 8007e10:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8007e12:	2b01      	cmp	r3, #1
 8007e14:	d001      	beq.n	8007e1a <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 8007e16:	2302      	movs	r3, #2
 8007e18:	e040      	b.n	8007e9c <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 8007e1a:	697b      	ldr	r3, [r7, #20]
 8007e1c:	2207      	movs	r2, #7
 8007e1e:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 8007e20:	7afb      	ldrb	r3, [r7, #11]
 8007e22:	697a      	ldr	r2, [r7, #20]
 8007e24:	2134      	movs	r1, #52	; 0x34
 8007e26:	fb01 f303 	mul.w	r3, r1, r3
 8007e2a:	4413      	add	r3, r2
 8007e2c:	3390      	adds	r3, #144	; 0x90
 8007e2e:	2207      	movs	r2, #7
 8007e30:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8007e32:	7afb      	ldrb	r3, [r7, #11]
 8007e34:	b29a      	uxth	r2, r3
 8007e36:	697b      	ldr	r3, [r7, #20]
 8007e38:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 8007e3c:	7af9      	ldrb	r1, [r7, #11]
 8007e3e:	6a3b      	ldr	r3, [r7, #32]
 8007e40:	9300      	str	r3, [sp, #0]
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	687a      	ldr	r2, [r7, #4]
 8007e46:	68f8      	ldr	r0, [r7, #12]
 8007e48:	f000 fca4 	bl	8008794 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007e52:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8007e54:	e016      	b.n	8007e84 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8007e5c:	693b      	ldr	r3, [r7, #16]
 8007e5e:	1ad2      	subs	r2, r2, r3
 8007e60:	6a3b      	ldr	r3, [r7, #32]
 8007e62:	f242 7110 	movw	r1, #10000	; 0x2710
 8007e66:	fb01 f303 	mul.w	r3, r1, r3
 8007e6a:	429a      	cmp	r2, r3
 8007e6c:	d805      	bhi.n	8007e7a <USBH_MSC_Write+0xa8>
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007e74:	b2db      	uxtb	r3, r3
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d104      	bne.n	8007e84 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8007e7a:	697b      	ldr	r3, [r7, #20]
 8007e7c:	2201      	movs	r2, #1
 8007e7e:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8007e80:	2302      	movs	r3, #2
 8007e82:	e00b      	b.n	8007e9c <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8007e84:	7afb      	ldrb	r3, [r7, #11]
 8007e86:	4619      	mov	r1, r3
 8007e88:	68f8      	ldr	r0, [r7, #12]
 8007e8a:	f7ff fe20 	bl	8007ace <USBH_MSC_RdWrProcess>
 8007e8e:	4603      	mov	r3, r0
 8007e90:	2b01      	cmp	r3, #1
 8007e92:	d0e0      	beq.n	8007e56 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8007e94:	697b      	ldr	r3, [r7, #20]
 8007e96:	2201      	movs	r2, #1
 8007e98:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 8007e9a:	2300      	movs	r3, #0
}
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	3718      	adds	r7, #24
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	bd80      	pop	{r7, pc}

08007ea4 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b082      	sub	sp, #8
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2221      	movs	r2, #33	; 0x21
 8007eb0:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	22ff      	movs	r2, #255	; 0xff
 8007eb6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 8007eca:	2200      	movs	r2, #0
 8007ecc:	2100      	movs	r1, #0
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	f001 fdab 	bl	8009a2a <USBH_CtlReq>
 8007ed4:	4603      	mov	r3, r0
}
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	3708      	adds	r7, #8
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bd80      	pop	{r7, pc}

08007ede <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 8007ede:	b580      	push	{r7, lr}
 8007ee0:	b082      	sub	sp, #8
 8007ee2:	af00      	add	r7, sp, #0
 8007ee4:	6078      	str	r0, [r7, #4]
 8007ee6:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	22a1      	movs	r2, #161	; 0xa1
 8007eec:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	22fe      	movs	r2, #254	; 0xfe
 8007ef2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2200      	movs	r2, #0
 8007efe:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2201      	movs	r2, #1
 8007f04:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 8007f06:	2201      	movs	r2, #1
 8007f08:	6839      	ldr	r1, [r7, #0]
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	f001 fd8d 	bl	8009a2a <USBH_CtlReq>
 8007f10:	4603      	mov	r3, r0
}
 8007f12:	4618      	mov	r0, r3
 8007f14:	3708      	adds	r7, #8
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd80      	pop	{r7, pc}
	...

08007f1c <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 8007f1c:	b480      	push	{r7}
 8007f1e:	b085      	sub	sp, #20
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007f2a:	69db      	ldr	r3, [r3, #28]
 8007f2c:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	4a09      	ldr	r2, [pc, #36]	; (8007f58 <USBH_MSC_BOT_Init+0x3c>)
 8007f32:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	4a09      	ldr	r2, [pc, #36]	; (8007f5c <USBH_MSC_BOT_Init+0x40>)
 8007f38:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	2201      	movs	r2, #1
 8007f3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	2201      	movs	r2, #1
 8007f46:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 8007f4a:	2300      	movs	r3, #0
}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	3714      	adds	r7, #20
 8007f50:	46bd      	mov	sp, r7
 8007f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f56:	4770      	bx	lr
 8007f58:	43425355 	.word	0x43425355
 8007f5c:	20304050 	.word	0x20304050

08007f60 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b088      	sub	sp, #32
 8007f64:	af02      	add	r7, sp, #8
 8007f66:	6078      	str	r0, [r7, #4]
 8007f68:	460b      	mov	r3, r1
 8007f6a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 8007f6c:	2301      	movs	r3, #1
 8007f6e:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 8007f70:	2301      	movs	r3, #1
 8007f72:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 8007f74:	2301      	movs	r3, #1
 8007f76:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007f78:	2300      	movs	r3, #0
 8007f7a:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007f82:	69db      	ldr	r3, [r3, #28]
 8007f84:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 8007f86:	2300      	movs	r3, #0
 8007f88:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 8007f8a:	693b      	ldr	r3, [r7, #16]
 8007f8c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007f90:	3b01      	subs	r3, #1
 8007f92:	2b0a      	cmp	r3, #10
 8007f94:	f200 819e 	bhi.w	80082d4 <USBH_MSC_BOT_Process+0x374>
 8007f98:	a201      	add	r2, pc, #4	; (adr r2, 8007fa0 <USBH_MSC_BOT_Process+0x40>)
 8007f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f9e:	bf00      	nop
 8007fa0:	08007fcd 	.word	0x08007fcd
 8007fa4:	08007ff5 	.word	0x08007ff5
 8007fa8:	0800805f 	.word	0x0800805f
 8007fac:	0800807d 	.word	0x0800807d
 8007fb0:	08008101 	.word	0x08008101
 8007fb4:	08008123 	.word	0x08008123
 8007fb8:	080081bb 	.word	0x080081bb
 8007fbc:	080081d7 	.word	0x080081d7
 8007fc0:	08008229 	.word	0x08008229
 8007fc4:	08008259 	.word	0x08008259
 8007fc8:	080082bb 	.word	0x080082bb
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 8007fcc:	693b      	ldr	r3, [r7, #16]
 8007fce:	78fa      	ldrb	r2, [r7, #3]
 8007fd0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 8007fd4:	693b      	ldr	r3, [r7, #16]
 8007fd6:	2202      	movs	r2, #2
 8007fd8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 8007fdc:	693b      	ldr	r3, [r7, #16]
 8007fde:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8007fe2:	693b      	ldr	r3, [r7, #16]
 8007fe4:	795b      	ldrb	r3, [r3, #5]
 8007fe6:	2201      	movs	r2, #1
 8007fe8:	9200      	str	r2, [sp, #0]
 8007fea:	221f      	movs	r2, #31
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	f001 ff2a 	bl	8009e46 <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 8007ff2:	e17e      	b.n	80082f2 <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8007ff4:	693b      	ldr	r3, [r7, #16]
 8007ff6:	795b      	ldrb	r3, [r3, #5]
 8007ff8:	4619      	mov	r1, r3
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	f007 fafe 	bl	800f5fc <USBH_LL_GetURBState>
 8008000:	4603      	mov	r3, r0
 8008002:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8008004:	7d3b      	ldrb	r3, [r7, #20]
 8008006:	2b01      	cmp	r3, #1
 8008008:	d118      	bne.n	800803c <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 800800a:	693b      	ldr	r3, [r7, #16]
 800800c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800800e:	2b00      	cmp	r3, #0
 8008010:	d00f      	beq.n	8008032 <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 8008012:	693b      	ldr	r3, [r7, #16]
 8008014:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8008018:	b25b      	sxtb	r3, r3
 800801a:	2b00      	cmp	r3, #0
 800801c:	da04      	bge.n	8008028 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 800801e:	693b      	ldr	r3, [r7, #16]
 8008020:	2203      	movs	r2, #3
 8008022:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008026:	e157      	b.n	80082d8 <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 8008028:	693b      	ldr	r3, [r7, #16]
 800802a:	2205      	movs	r2, #5
 800802c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008030:	e152      	b.n	80082d8 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8008032:	693b      	ldr	r3, [r7, #16]
 8008034:	2207      	movs	r2, #7
 8008036:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800803a:	e14d      	b.n	80082d8 <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 800803c:	7d3b      	ldrb	r3, [r7, #20]
 800803e:	2b02      	cmp	r3, #2
 8008040:	d104      	bne.n	800804c <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008042:	693b      	ldr	r3, [r7, #16]
 8008044:	2201      	movs	r2, #1
 8008046:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800804a:	e145      	b.n	80082d8 <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 800804c:	7d3b      	ldrb	r3, [r7, #20]
 800804e:	2b05      	cmp	r3, #5
 8008050:	f040 8142 	bne.w	80082d8 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8008054:	693b      	ldr	r3, [r7, #16]
 8008056:	220a      	movs	r2, #10
 8008058:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800805c:	e13c      	b.n	80082d8 <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800805e:	693b      	ldr	r3, [r7, #16]
 8008060:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8008064:	693b      	ldr	r3, [r7, #16]
 8008066:	895a      	ldrh	r2, [r3, #10]
 8008068:	693b      	ldr	r3, [r7, #16]
 800806a:	791b      	ldrb	r3, [r3, #4]
 800806c:	6878      	ldr	r0, [r7, #4]
 800806e:	f001 ff0f 	bl	8009e90 <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 8008072:	693b      	ldr	r3, [r7, #16]
 8008074:	2204      	movs	r2, #4
 8008076:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 800807a:	e13a      	b.n	80082f2 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800807c:	693b      	ldr	r3, [r7, #16]
 800807e:	791b      	ldrb	r3, [r3, #4]
 8008080:	4619      	mov	r1, r3
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f007 faba 	bl	800f5fc <USBH_LL_GetURBState>
 8008088:	4603      	mov	r3, r0
 800808a:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800808c:	7d3b      	ldrb	r3, [r7, #20]
 800808e:	2b01      	cmp	r3, #1
 8008090:	d12d      	bne.n	80080ee <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 8008092:	693b      	ldr	r3, [r7, #16]
 8008094:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008096:	693a      	ldr	r2, [r7, #16]
 8008098:	8952      	ldrh	r2, [r2, #10]
 800809a:	4293      	cmp	r3, r2
 800809c:	d910      	bls.n	80080c0 <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 800809e:	693b      	ldr	r3, [r7, #16]
 80080a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80080a4:	693a      	ldr	r2, [r7, #16]
 80080a6:	8952      	ldrh	r2, [r2, #10]
 80080a8:	441a      	add	r2, r3
 80080aa:	693b      	ldr	r3, [r7, #16]
 80080ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 80080b0:	693b      	ldr	r3, [r7, #16]
 80080b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080b4:	693a      	ldr	r2, [r7, #16]
 80080b6:	8952      	ldrh	r2, [r2, #10]
 80080b8:	1a9a      	subs	r2, r3, r2
 80080ba:	693b      	ldr	r3, [r7, #16]
 80080bc:	65da      	str	r2, [r3, #92]	; 0x5c
 80080be:	e002      	b.n	80080c6 <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 80080c0:	693b      	ldr	r3, [r7, #16]
 80080c2:	2200      	movs	r2, #0
 80080c4:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 80080c6:	693b      	ldr	r3, [r7, #16]
 80080c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d00a      	beq.n	80080e4 <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 80080ce:	693b      	ldr	r3, [r7, #16]
 80080d0:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80080d4:	693b      	ldr	r3, [r7, #16]
 80080d6:	895a      	ldrh	r2, [r3, #10]
 80080d8:	693b      	ldr	r3, [r7, #16]
 80080da:	791b      	ldrb	r3, [r3, #4]
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	f001 fed7 	bl	8009e90 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 80080e2:	e0fb      	b.n	80082dc <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 80080e4:	693b      	ldr	r3, [r7, #16]
 80080e6:	2207      	movs	r2, #7
 80080e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80080ec:	e0f6      	b.n	80082dc <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 80080ee:	7d3b      	ldrb	r3, [r7, #20]
 80080f0:	2b05      	cmp	r3, #5
 80080f2:	f040 80f3 	bne.w	80082dc <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 80080f6:	693b      	ldr	r3, [r7, #16]
 80080f8:	2209      	movs	r2, #9
 80080fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80080fe:	e0ed      	b.n	80082dc <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8008100:	693b      	ldr	r3, [r7, #16]
 8008102:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8008106:	693b      	ldr	r3, [r7, #16]
 8008108:	891a      	ldrh	r2, [r3, #8]
 800810a:	693b      	ldr	r3, [r7, #16]
 800810c:	795b      	ldrb	r3, [r3, #5]
 800810e:	2001      	movs	r0, #1
 8008110:	9000      	str	r0, [sp, #0]
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f001 fe97 	bl	8009e46 <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 8008118:	693b      	ldr	r3, [r7, #16]
 800811a:	2206      	movs	r2, #6
 800811c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008120:	e0e7      	b.n	80082f2 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8008122:	693b      	ldr	r3, [r7, #16]
 8008124:	795b      	ldrb	r3, [r3, #5]
 8008126:	4619      	mov	r1, r3
 8008128:	6878      	ldr	r0, [r7, #4]
 800812a:	f007 fa67 	bl	800f5fc <USBH_LL_GetURBState>
 800812e:	4603      	mov	r3, r0
 8008130:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8008132:	7d3b      	ldrb	r3, [r7, #20]
 8008134:	2b01      	cmp	r3, #1
 8008136:	d12f      	bne.n	8008198 <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8008138:	693b      	ldr	r3, [r7, #16]
 800813a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800813c:	693a      	ldr	r2, [r7, #16]
 800813e:	8912      	ldrh	r2, [r2, #8]
 8008140:	4293      	cmp	r3, r2
 8008142:	d910      	bls.n	8008166 <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8008144:	693b      	ldr	r3, [r7, #16]
 8008146:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800814a:	693a      	ldr	r2, [r7, #16]
 800814c:	8912      	ldrh	r2, [r2, #8]
 800814e:	441a      	add	r2, r3
 8008150:	693b      	ldr	r3, [r7, #16]
 8008152:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 8008156:	693b      	ldr	r3, [r7, #16]
 8008158:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800815a:	693a      	ldr	r2, [r7, #16]
 800815c:	8912      	ldrh	r2, [r2, #8]
 800815e:	1a9a      	subs	r2, r3, r2
 8008160:	693b      	ldr	r3, [r7, #16]
 8008162:	65da      	str	r2, [r3, #92]	; 0x5c
 8008164:	e002      	b.n	800816c <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8008166:	693b      	ldr	r3, [r7, #16]
 8008168:	2200      	movs	r2, #0
 800816a:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800816c:	693b      	ldr	r3, [r7, #16]
 800816e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008170:	2b00      	cmp	r3, #0
 8008172:	d00c      	beq.n	800818e <USBH_MSC_BOT_Process+0x22e>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8008174:	693b      	ldr	r3, [r7, #16]
 8008176:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800817a:	693b      	ldr	r3, [r7, #16]
 800817c:	891a      	ldrh	r2, [r3, #8]
 800817e:	693b      	ldr	r3, [r7, #16]
 8008180:	795b      	ldrb	r3, [r3, #5]
 8008182:	2001      	movs	r0, #1
 8008184:	9000      	str	r0, [sp, #0]
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	f001 fe5d 	bl	8009e46 <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 800818c:	e0a8      	b.n	80082e0 <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800818e:	693b      	ldr	r3, [r7, #16]
 8008190:	2207      	movs	r2, #7
 8008192:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008196:	e0a3      	b.n	80082e0 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008198:	7d3b      	ldrb	r3, [r7, #20]
 800819a:	2b02      	cmp	r3, #2
 800819c:	d104      	bne.n	80081a8 <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 800819e:	693b      	ldr	r3, [r7, #16]
 80081a0:	2205      	movs	r2, #5
 80081a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80081a6:	e09b      	b.n	80082e0 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 80081a8:	7d3b      	ldrb	r3, [r7, #20]
 80081aa:	2b05      	cmp	r3, #5
 80081ac:	f040 8098 	bne.w	80082e0 <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 80081b0:	693b      	ldr	r3, [r7, #16]
 80081b2:	220a      	movs	r2, #10
 80081b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80081b8:	e092      	b.n	80082e0 <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 80081ba:	693b      	ldr	r3, [r7, #16]
 80081bc:	f103 0178 	add.w	r1, r3, #120	; 0x78
 80081c0:	693b      	ldr	r3, [r7, #16]
 80081c2:	791b      	ldrb	r3, [r3, #4]
 80081c4:	220d      	movs	r2, #13
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f001 fe62 	bl	8009e90 <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 80081cc:	693b      	ldr	r3, [r7, #16]
 80081ce:	2208      	movs	r2, #8
 80081d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80081d4:	e08d      	b.n	80082f2 <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 80081d6:	693b      	ldr	r3, [r7, #16]
 80081d8:	791b      	ldrb	r3, [r3, #4]
 80081da:	4619      	mov	r1, r3
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f007 fa0d 	bl	800f5fc <USBH_LL_GetURBState>
 80081e2:	4603      	mov	r3, r0
 80081e4:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 80081e6:	7d3b      	ldrb	r3, [r7, #20]
 80081e8:	2b01      	cmp	r3, #1
 80081ea:	d115      	bne.n	8008218 <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 80081ec:	693b      	ldr	r3, [r7, #16]
 80081ee:	2201      	movs	r2, #1
 80081f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 80081f4:	693b      	ldr	r3, [r7, #16]
 80081f6:	2201      	movs	r2, #1
 80081f8:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 80081fc:	6878      	ldr	r0, [r7, #4]
 80081fe:	f000 f8a9 	bl	8008354 <USBH_MSC_DecodeCSW>
 8008202:	4603      	mov	r3, r0
 8008204:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 8008206:	7d7b      	ldrb	r3, [r7, #21]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d102      	bne.n	8008212 <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 800820c:	2300      	movs	r3, #0
 800820e:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 8008210:	e068      	b.n	80082e4 <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 8008212:	2302      	movs	r3, #2
 8008214:	75fb      	strb	r3, [r7, #23]
      break;
 8008216:	e065      	b.n	80082e4 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 8008218:	7d3b      	ldrb	r3, [r7, #20]
 800821a:	2b05      	cmp	r3, #5
 800821c:	d162      	bne.n	80082e4 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800821e:	693b      	ldr	r3, [r7, #16]
 8008220:	2209      	movs	r2, #9
 8008222:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008226:	e05d      	b.n	80082e4 <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 8008228:	78fb      	ldrb	r3, [r7, #3]
 800822a:	2200      	movs	r2, #0
 800822c:	4619      	mov	r1, r3
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f000 f864 	bl	80082fc <USBH_MSC_BOT_Abort>
 8008234:	4603      	mov	r3, r0
 8008236:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8008238:	7dbb      	ldrb	r3, [r7, #22]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d104      	bne.n	8008248 <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800823e:	693b      	ldr	r3, [r7, #16]
 8008240:	2207      	movs	r2, #7
 8008242:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 8008246:	e04f      	b.n	80082e8 <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 8008248:	7dbb      	ldrb	r3, [r7, #22]
 800824a:	2b04      	cmp	r3, #4
 800824c:	d14c      	bne.n	80082e8 <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800824e:	693b      	ldr	r3, [r7, #16]
 8008250:	220b      	movs	r2, #11
 8008252:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008256:	e047      	b.n	80082e8 <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 8008258:	78fb      	ldrb	r3, [r7, #3]
 800825a:	2201      	movs	r2, #1
 800825c:	4619      	mov	r1, r3
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f000 f84c 	bl	80082fc <USBH_MSC_BOT_Abort>
 8008264:	4603      	mov	r3, r0
 8008266:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8008268:	7dbb      	ldrb	r3, [r7, #22]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d11d      	bne.n	80082aa <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 800826e:	693b      	ldr	r3, [r7, #16]
 8008270:	795b      	ldrb	r3, [r3, #5]
 8008272:	4619      	mov	r1, r3
 8008274:	6878      	ldr	r0, [r7, #4]
 8008276:	f007 fa1b 	bl	800f6b0 <USBH_LL_GetToggle>
 800827a:	4603      	mov	r3, r0
 800827c:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 800827e:	693b      	ldr	r3, [r7, #16]
 8008280:	7959      	ldrb	r1, [r3, #5]
 8008282:	7bfb      	ldrb	r3, [r7, #15]
 8008284:	f1c3 0301 	rsb	r3, r3, #1
 8008288:	b2db      	uxtb	r3, r3
 800828a:	461a      	mov	r2, r3
 800828c:	6878      	ldr	r0, [r7, #4]
 800828e:	f007 f9df 	bl	800f650 <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8008292:	693b      	ldr	r3, [r7, #16]
 8008294:	791b      	ldrb	r3, [r3, #4]
 8008296:	2200      	movs	r2, #0
 8008298:	4619      	mov	r1, r3
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	f007 f9d8 	bl	800f650 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 80082a0:	693b      	ldr	r3, [r7, #16]
 80082a2:	2209      	movs	r2, #9
 80082a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 80082a8:	e020      	b.n	80082ec <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 80082aa:	7dbb      	ldrb	r3, [r7, #22]
 80082ac:	2b04      	cmp	r3, #4
 80082ae:	d11d      	bne.n	80082ec <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 80082b0:	693b      	ldr	r3, [r7, #16]
 80082b2:	220b      	movs	r2, #11
 80082b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80082b8:	e018      	b.n	80082ec <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f7ff fdf2 	bl	8007ea4 <USBH_MSC_BOT_REQ_Reset>
 80082c0:	4603      	mov	r3, r0
 80082c2:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 80082c4:	7dfb      	ldrb	r3, [r7, #23]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d112      	bne.n	80082f0 <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 80082ca:	693b      	ldr	r3, [r7, #16]
 80082cc:	2201      	movs	r2, #1
 80082ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 80082d2:	e00d      	b.n	80082f0 <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 80082d4:	bf00      	nop
 80082d6:	e00c      	b.n	80082f2 <USBH_MSC_BOT_Process+0x392>
      break;
 80082d8:	bf00      	nop
 80082da:	e00a      	b.n	80082f2 <USBH_MSC_BOT_Process+0x392>
      break;
 80082dc:	bf00      	nop
 80082de:	e008      	b.n	80082f2 <USBH_MSC_BOT_Process+0x392>
      break;
 80082e0:	bf00      	nop
 80082e2:	e006      	b.n	80082f2 <USBH_MSC_BOT_Process+0x392>
      break;
 80082e4:	bf00      	nop
 80082e6:	e004      	b.n	80082f2 <USBH_MSC_BOT_Process+0x392>
      break;
 80082e8:	bf00      	nop
 80082ea:	e002      	b.n	80082f2 <USBH_MSC_BOT_Process+0x392>
      break;
 80082ec:	bf00      	nop
 80082ee:	e000      	b.n	80082f2 <USBH_MSC_BOT_Process+0x392>
      break;
 80082f0:	bf00      	nop
  }
  return status;
 80082f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80082f4:	4618      	mov	r0, r3
 80082f6:	3718      	adds	r7, #24
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bd80      	pop	{r7, pc}

080082fc <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b084      	sub	sp, #16
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
 8008304:	460b      	mov	r3, r1
 8008306:	70fb      	strb	r3, [r7, #3]
 8008308:	4613      	mov	r3, r2
 800830a:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 800830c:	2302      	movs	r3, #2
 800830e:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008316:	69db      	ldr	r3, [r3, #28]
 8008318:	60bb      	str	r3, [r7, #8]

  switch (dir)
 800831a:	78bb      	ldrb	r3, [r7, #2]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d002      	beq.n	8008326 <USBH_MSC_BOT_Abort+0x2a>
 8008320:	2b01      	cmp	r3, #1
 8008322:	d009      	beq.n	8008338 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 8008324:	e011      	b.n	800834a <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 8008326:	68bb      	ldr	r3, [r7, #8]
 8008328:	79db      	ldrb	r3, [r3, #7]
 800832a:	4619      	mov	r1, r3
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	f001 f99c 	bl	800966a <USBH_ClrFeature>
 8008332:	4603      	mov	r3, r0
 8008334:	73fb      	strb	r3, [r7, #15]
      break;
 8008336:	e008      	b.n	800834a <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	799b      	ldrb	r3, [r3, #6]
 800833c:	4619      	mov	r1, r3
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	f001 f993 	bl	800966a <USBH_ClrFeature>
 8008344:	4603      	mov	r3, r0
 8008346:	73fb      	strb	r3, [r7, #15]
      break;
 8008348:	bf00      	nop
  }
  return status;
 800834a:	7bfb      	ldrb	r3, [r7, #15]
}
 800834c:	4618      	mov	r0, r3
 800834e:	3710      	adds	r7, #16
 8008350:	46bd      	mov	sp, r7
 8008352:	bd80      	pop	{r7, pc}

08008354 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b084      	sub	sp, #16
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008362:	69db      	ldr	r3, [r3, #28]
 8008364:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 8008366:	2301      	movs	r3, #1
 8008368:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 800836a:	68bb      	ldr	r3, [r7, #8]
 800836c:	791b      	ldrb	r3, [r3, #4]
 800836e:	4619      	mov	r1, r3
 8008370:	6878      	ldr	r0, [r7, #4]
 8008372:	f007 f8b1 	bl	800f4d8 <USBH_LL_GetLastXferSize>
 8008376:	4603      	mov	r3, r0
 8008378:	2b0d      	cmp	r3, #13
 800837a:	d002      	beq.n	8008382 <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 800837c:	2302      	movs	r3, #2
 800837e:	73fb      	strb	r3, [r7, #15]
 8008380:	e024      	b.n	80083cc <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 8008382:	68bb      	ldr	r3, [r7, #8]
 8008384:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008386:	4a14      	ldr	r2, [pc, #80]	; (80083d8 <USBH_MSC_DecodeCSW+0x84>)
 8008388:	4293      	cmp	r3, r2
 800838a:	d11d      	bne.n	80083c8 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008394:	429a      	cmp	r2, r3
 8008396:	d119      	bne.n	80083cc <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d102      	bne.n	80083a8 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 80083a2:	2300      	movs	r3, #0
 80083a4:	73fb      	strb	r3, [r7, #15]
 80083a6:	e011      	b.n	80083cc <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80083ae:	2b01      	cmp	r3, #1
 80083b0:	d102      	bne.n	80083b8 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 80083b2:	2301      	movs	r3, #1
 80083b4:	73fb      	strb	r3, [r7, #15]
 80083b6:	e009      	b.n	80083cc <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80083be:	2b02      	cmp	r3, #2
 80083c0:	d104      	bne.n	80083cc <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 80083c2:	2302      	movs	r3, #2
 80083c4:	73fb      	strb	r3, [r7, #15]
 80083c6:	e001      	b.n	80083cc <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 80083c8:	2302      	movs	r3, #2
 80083ca:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 80083cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80083ce:	4618      	mov	r0, r3
 80083d0:	3710      	adds	r7, #16
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bd80      	pop	{r7, pc}
 80083d6:	bf00      	nop
 80083d8:	53425355 	.word	0x53425355

080083dc <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b084      	sub	sp, #16
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
 80083e4:	460b      	mov	r3, r1
 80083e6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 80083e8:	2302      	movs	r3, #2
 80083ea:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80083f2:	69db      	ldr	r3, [r3, #28]
 80083f4:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 80083f6:	68bb      	ldr	r3, [r7, #8]
 80083f8:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80083fc:	2b01      	cmp	r3, #1
 80083fe:	d002      	beq.n	8008406 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 8008400:	2b02      	cmp	r3, #2
 8008402:	d021      	beq.n	8008448 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8008404:	e028      	b.n	8008458 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 8008406:	68bb      	ldr	r3, [r7, #8]
 8008408:	2200      	movs	r2, #0
 800840a:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	2200      	movs	r2, #0
 8008410:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	220a      	movs	r2, #10
 8008418:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800841c:	68bb      	ldr	r3, [r7, #8]
 800841e:	3363      	adds	r3, #99	; 0x63
 8008420:	2210      	movs	r2, #16
 8008422:	2100      	movs	r1, #0
 8008424:	4618      	mov	r0, r3
 8008426:	f007 fa0f 	bl	800f848 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	2200      	movs	r2, #0
 800842e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008432:	68bb      	ldr	r3, [r7, #8]
 8008434:	2201      	movs	r2, #1
 8008436:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	2202      	movs	r2, #2
 800843e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 8008442:	2301      	movs	r3, #1
 8008444:	73fb      	strb	r3, [r7, #15]
      break;
 8008446:	e007      	b.n	8008458 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 8008448:	78fb      	ldrb	r3, [r7, #3]
 800844a:	4619      	mov	r1, r3
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	f7ff fd87 	bl	8007f60 <USBH_MSC_BOT_Process>
 8008452:	4603      	mov	r3, r0
 8008454:	73fb      	strb	r3, [r7, #15]
      break;
 8008456:	bf00      	nop
  }

  return error;
 8008458:	7bfb      	ldrb	r3, [r7, #15]
}
 800845a:	4618      	mov	r0, r3
 800845c:	3710      	adds	r7, #16
 800845e:	46bd      	mov	sp, r7
 8008460:	bd80      	pop	{r7, pc}

08008462 <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 8008462:	b580      	push	{r7, lr}
 8008464:	b086      	sub	sp, #24
 8008466:	af00      	add	r7, sp, #0
 8008468:	60f8      	str	r0, [r7, #12]
 800846a:	460b      	mov	r3, r1
 800846c:	607a      	str	r2, [r7, #4]
 800846e:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 8008470:	2301      	movs	r3, #1
 8008472:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800847a:	69db      	ldr	r3, [r3, #28]
 800847c:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800847e:	693b      	ldr	r3, [r7, #16]
 8008480:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8008484:	2b01      	cmp	r3, #1
 8008486:	d002      	beq.n	800848e <USBH_MSC_SCSI_ReadCapacity+0x2c>
 8008488:	2b02      	cmp	r3, #2
 800848a:	d027      	beq.n	80084dc <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 800848c:	e05f      	b.n	800854e <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 800848e:	693b      	ldr	r3, [r7, #16]
 8008490:	2208      	movs	r2, #8
 8008492:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8008494:	693b      	ldr	r3, [r7, #16]
 8008496:	2280      	movs	r2, #128	; 0x80
 8008498:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800849c:	693b      	ldr	r3, [r7, #16]
 800849e:	220a      	movs	r2, #10
 80084a0:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80084a4:	693b      	ldr	r3, [r7, #16]
 80084a6:	3363      	adds	r3, #99	; 0x63
 80084a8:	2210      	movs	r2, #16
 80084aa:	2100      	movs	r1, #0
 80084ac:	4618      	mov	r0, r3
 80084ae:	f007 f9cb 	bl	800f848 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 80084b2:	693b      	ldr	r3, [r7, #16]
 80084b4:	2225      	movs	r2, #37	; 0x25
 80084b6:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80084ba:	693b      	ldr	r3, [r7, #16]
 80084bc:	2201      	movs	r2, #1
 80084be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80084c2:	693b      	ldr	r3, [r7, #16]
 80084c4:	2202      	movs	r2, #2
 80084c6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 80084ca:	693b      	ldr	r3, [r7, #16]
 80084cc:	f103 0210 	add.w	r2, r3, #16
 80084d0:	693b      	ldr	r3, [r7, #16]
 80084d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 80084d6:	2301      	movs	r3, #1
 80084d8:	75fb      	strb	r3, [r7, #23]
      break;
 80084da:	e038      	b.n	800854e <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 80084dc:	7afb      	ldrb	r3, [r7, #11]
 80084de:	4619      	mov	r1, r3
 80084e0:	68f8      	ldr	r0, [r7, #12]
 80084e2:	f7ff fd3d 	bl	8007f60 <USBH_MSC_BOT_Process>
 80084e6:	4603      	mov	r3, r0
 80084e8:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 80084ea:	7dfb      	ldrb	r3, [r7, #23]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d12d      	bne.n	800854c <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 80084f0:	693b      	ldr	r3, [r7, #16]
 80084f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80084f6:	3303      	adds	r3, #3
 80084f8:	781b      	ldrb	r3, [r3, #0]
 80084fa:	461a      	mov	r2, r3
 80084fc:	693b      	ldr	r3, [r7, #16]
 80084fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008502:	3302      	adds	r3, #2
 8008504:	781b      	ldrb	r3, [r3, #0]
 8008506:	021b      	lsls	r3, r3, #8
 8008508:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800850a:	693b      	ldr	r3, [r7, #16]
 800850c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008510:	3301      	adds	r3, #1
 8008512:	781b      	ldrb	r3, [r3, #0]
 8008514:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8008516:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8008518:	693b      	ldr	r3, [r7, #16]
 800851a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800851e:	781b      	ldrb	r3, [r3, #0]
 8008520:	061b      	lsls	r3, r3, #24
 8008522:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 8008528:	693b      	ldr	r3, [r7, #16]
 800852a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800852e:	3307      	adds	r3, #7
 8008530:	781b      	ldrb	r3, [r3, #0]
 8008532:	b29a      	uxth	r2, r3
 8008534:	693b      	ldr	r3, [r7, #16]
 8008536:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800853a:	3306      	adds	r3, #6
 800853c:	781b      	ldrb	r3, [r3, #0]
 800853e:	b29b      	uxth	r3, r3
 8008540:	021b      	lsls	r3, r3, #8
 8008542:	b29b      	uxth	r3, r3
 8008544:	4313      	orrs	r3, r2
 8008546:	b29a      	uxth	r2, r3
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	809a      	strh	r2, [r3, #4]
      break;
 800854c:	bf00      	nop
  }

  return error;
 800854e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008550:	4618      	mov	r0, r3
 8008552:	3718      	adds	r7, #24
 8008554:	46bd      	mov	sp, r7
 8008556:	bd80      	pop	{r7, pc}

08008558 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b086      	sub	sp, #24
 800855c:	af00      	add	r7, sp, #0
 800855e:	60f8      	str	r0, [r7, #12]
 8008560:	460b      	mov	r3, r1
 8008562:	607a      	str	r2, [r7, #4]
 8008564:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 8008566:	2302      	movs	r3, #2
 8008568:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008570:	69db      	ldr	r3, [r3, #28]
 8008572:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8008574:	693b      	ldr	r3, [r7, #16]
 8008576:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800857a:	2b01      	cmp	r3, #1
 800857c:	d002      	beq.n	8008584 <USBH_MSC_SCSI_Inquiry+0x2c>
 800857e:	2b02      	cmp	r3, #2
 8008580:	d03d      	beq.n	80085fe <USBH_MSC_SCSI_Inquiry+0xa6>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 8008582:	e089      	b.n	8008698 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 8008584:	693b      	ldr	r3, [r7, #16]
 8008586:	2224      	movs	r2, #36	; 0x24
 8008588:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800858a:	693b      	ldr	r3, [r7, #16]
 800858c:	2280      	movs	r2, #128	; 0x80
 800858e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8008592:	693b      	ldr	r3, [r7, #16]
 8008594:	220a      	movs	r2, #10
 8008596:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 800859a:	693b      	ldr	r3, [r7, #16]
 800859c:	3363      	adds	r3, #99	; 0x63
 800859e:	220a      	movs	r2, #10
 80085a0:	2100      	movs	r1, #0
 80085a2:	4618      	mov	r0, r3
 80085a4:	f007 f950 	bl	800f848 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 80085a8:	693b      	ldr	r3, [r7, #16]
 80085aa:	2212      	movs	r2, #18
 80085ac:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 80085b0:	7afb      	ldrb	r3, [r7, #11]
 80085b2:	015b      	lsls	r3, r3, #5
 80085b4:	b2da      	uxtb	r2, r3
 80085b6:	693b      	ldr	r3, [r7, #16]
 80085b8:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 80085bc:	693b      	ldr	r3, [r7, #16]
 80085be:	2200      	movs	r2, #0
 80085c0:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 80085c4:	693b      	ldr	r3, [r7, #16]
 80085c6:	2200      	movs	r2, #0
 80085c8:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 80085cc:	693b      	ldr	r3, [r7, #16]
 80085ce:	2224      	movs	r2, #36	; 0x24
 80085d0:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 80085d4:	693b      	ldr	r3, [r7, #16]
 80085d6:	2200      	movs	r2, #0
 80085d8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80085dc:	693b      	ldr	r3, [r7, #16]
 80085de:	2201      	movs	r2, #1
 80085e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80085e4:	693b      	ldr	r3, [r7, #16]
 80085e6:	2202      	movs	r2, #2
 80085e8:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 80085ec:	693b      	ldr	r3, [r7, #16]
 80085ee:	f103 0210 	add.w	r2, r3, #16
 80085f2:	693b      	ldr	r3, [r7, #16]
 80085f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 80085f8:	2301      	movs	r3, #1
 80085fa:	75fb      	strb	r3, [r7, #23]
      break;
 80085fc:	e04c      	b.n	8008698 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 80085fe:	7afb      	ldrb	r3, [r7, #11]
 8008600:	4619      	mov	r1, r3
 8008602:	68f8      	ldr	r0, [r7, #12]
 8008604:	f7ff fcac 	bl	8007f60 <USBH_MSC_BOT_Process>
 8008608:	4603      	mov	r3, r0
 800860a:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800860c:	7dfb      	ldrb	r3, [r7, #23]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d141      	bne.n	8008696 <USBH_MSC_SCSI_Inquiry+0x13e>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 8008612:	2222      	movs	r2, #34	; 0x22
 8008614:	2100      	movs	r1, #0
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f007 f916 	bl	800f848 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 800861c:	693b      	ldr	r3, [r7, #16]
 800861e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008622:	781b      	ldrb	r3, [r3, #0]
 8008624:	f003 031f 	and.w	r3, r3, #31
 8008628:	b2da      	uxtb	r2, r3
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 800862e:	693b      	ldr	r3, [r7, #16]
 8008630:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008634:	781b      	ldrb	r3, [r3, #0]
 8008636:	095b      	lsrs	r3, r3, #5
 8008638:	b2da      	uxtb	r2, r3
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 800863e:	693b      	ldr	r3, [r7, #16]
 8008640:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008644:	3301      	adds	r3, #1
 8008646:	781b      	ldrb	r3, [r3, #0]
 8008648:	b25b      	sxtb	r3, r3
 800864a:	2b00      	cmp	r3, #0
 800864c:	da03      	bge.n	8008656 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	2201      	movs	r2, #1
 8008652:	709a      	strb	r2, [r3, #2]
 8008654:	e002      	b.n	800865c <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	2200      	movs	r2, #0
 800865a:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	1cd8      	adds	r0, r3, #3
 8008660:	693b      	ldr	r3, [r7, #16]
 8008662:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008666:	3308      	adds	r3, #8
 8008668:	2208      	movs	r2, #8
 800866a:	4619      	mov	r1, r3
 800866c:	f007 f8de 	bl	800f82c <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	f103 000c 	add.w	r0, r3, #12
 8008676:	693b      	ldr	r3, [r7, #16]
 8008678:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800867c:	3310      	adds	r3, #16
 800867e:	2210      	movs	r2, #16
 8008680:	4619      	mov	r1, r3
 8008682:	f007 f8d3 	bl	800f82c <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	331d      	adds	r3, #29
 800868a:	693a      	ldr	r2, [r7, #16]
 800868c:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8008690:	3220      	adds	r2, #32
 8008692:	6812      	ldr	r2, [r2, #0]
 8008694:	601a      	str	r2, [r3, #0]
      break;
 8008696:	bf00      	nop
  }

  return error;
 8008698:	7dfb      	ldrb	r3, [r7, #23]
}
 800869a:	4618      	mov	r0, r3
 800869c:	3718      	adds	r7, #24
 800869e:	46bd      	mov	sp, r7
 80086a0:	bd80      	pop	{r7, pc}

080086a2 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 80086a2:	b580      	push	{r7, lr}
 80086a4:	b086      	sub	sp, #24
 80086a6:	af00      	add	r7, sp, #0
 80086a8:	60f8      	str	r0, [r7, #12]
 80086aa:	460b      	mov	r3, r1
 80086ac:	607a      	str	r2, [r7, #4]
 80086ae:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 80086b0:	2302      	movs	r3, #2
 80086b2:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80086ba:	69db      	ldr	r3, [r3, #28]
 80086bc:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80086be:	693b      	ldr	r3, [r7, #16]
 80086c0:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80086c4:	2b01      	cmp	r3, #1
 80086c6:	d002      	beq.n	80086ce <USBH_MSC_SCSI_RequestSense+0x2c>
 80086c8:	2b02      	cmp	r3, #2
 80086ca:	d03d      	beq.n	8008748 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 80086cc:	e05d      	b.n	800878a <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 80086ce:	693b      	ldr	r3, [r7, #16]
 80086d0:	220e      	movs	r2, #14
 80086d2:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80086d4:	693b      	ldr	r3, [r7, #16]
 80086d6:	2280      	movs	r2, #128	; 0x80
 80086d8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80086dc:	693b      	ldr	r3, [r7, #16]
 80086de:	220a      	movs	r2, #10
 80086e0:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80086e4:	693b      	ldr	r3, [r7, #16]
 80086e6:	3363      	adds	r3, #99	; 0x63
 80086e8:	2210      	movs	r2, #16
 80086ea:	2100      	movs	r1, #0
 80086ec:	4618      	mov	r0, r3
 80086ee:	f007 f8ab 	bl	800f848 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 80086f2:	693b      	ldr	r3, [r7, #16]
 80086f4:	2203      	movs	r2, #3
 80086f6:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 80086fa:	7afb      	ldrb	r3, [r7, #11]
 80086fc:	015b      	lsls	r3, r3, #5
 80086fe:	b2da      	uxtb	r2, r3
 8008700:	693b      	ldr	r3, [r7, #16]
 8008702:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8008706:	693b      	ldr	r3, [r7, #16]
 8008708:	2200      	movs	r2, #0
 800870a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800870e:	693b      	ldr	r3, [r7, #16]
 8008710:	2200      	movs	r2, #0
 8008712:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 8008716:	693b      	ldr	r3, [r7, #16]
 8008718:	220e      	movs	r2, #14
 800871a:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800871e:	693b      	ldr	r3, [r7, #16]
 8008720:	2200      	movs	r2, #0
 8008722:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008726:	693b      	ldr	r3, [r7, #16]
 8008728:	2201      	movs	r2, #1
 800872a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800872e:	693b      	ldr	r3, [r7, #16]
 8008730:	2202      	movs	r2, #2
 8008732:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8008736:	693b      	ldr	r3, [r7, #16]
 8008738:	f103 0210 	add.w	r2, r3, #16
 800873c:	693b      	ldr	r3, [r7, #16]
 800873e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8008742:	2301      	movs	r3, #1
 8008744:	75fb      	strb	r3, [r7, #23]
      break;
 8008746:	e020      	b.n	800878a <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 8008748:	7afb      	ldrb	r3, [r7, #11]
 800874a:	4619      	mov	r1, r3
 800874c:	68f8      	ldr	r0, [r7, #12]
 800874e:	f7ff fc07 	bl	8007f60 <USBH_MSC_BOT_Process>
 8008752:	4603      	mov	r3, r0
 8008754:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8008756:	7dfb      	ldrb	r3, [r7, #23]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d115      	bne.n	8008788 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800875c:	693b      	ldr	r3, [r7, #16]
 800875e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008762:	3302      	adds	r3, #2
 8008764:	781b      	ldrb	r3, [r3, #0]
 8008766:	f003 030f 	and.w	r3, r3, #15
 800876a:	b2da      	uxtb	r2, r3
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 8008770:	693b      	ldr	r3, [r7, #16]
 8008772:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008776:	7b1a      	ldrb	r2, [r3, #12]
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800877c:	693b      	ldr	r3, [r7, #16]
 800877e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008782:	7b5a      	ldrb	r2, [r3, #13]
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	709a      	strb	r2, [r3, #2]
      break;
 8008788:	bf00      	nop
  }

  return error;
 800878a:	7dfb      	ldrb	r3, [r7, #23]
}
 800878c:	4618      	mov	r0, r3
 800878e:	3718      	adds	r7, #24
 8008790:	46bd      	mov	sp, r7
 8008792:	bd80      	pop	{r7, pc}

08008794 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b086      	sub	sp, #24
 8008798:	af00      	add	r7, sp, #0
 800879a:	60f8      	str	r0, [r7, #12]
 800879c:	607a      	str	r2, [r7, #4]
 800879e:	603b      	str	r3, [r7, #0]
 80087a0:	460b      	mov	r3, r1
 80087a2:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 80087a4:	2302      	movs	r3, #2
 80087a6:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80087ae:	69db      	ldr	r3, [r3, #28]
 80087b0:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80087b2:	693b      	ldr	r3, [r7, #16]
 80087b4:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80087b8:	2b01      	cmp	r3, #1
 80087ba:	d002      	beq.n	80087c2 <USBH_MSC_SCSI_Write+0x2e>
 80087bc:	2b02      	cmp	r3, #2
 80087be:	d047      	beq.n	8008850 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 80087c0:	e04e      	b.n	8008860 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 80087c2:	693b      	ldr	r3, [r7, #16]
 80087c4:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 80087c8:	461a      	mov	r2, r3
 80087ca:	6a3b      	ldr	r3, [r7, #32]
 80087cc:	fb03 f202 	mul.w	r2, r3, r2
 80087d0:	693b      	ldr	r3, [r7, #16]
 80087d2:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 80087d4:	693b      	ldr	r3, [r7, #16]
 80087d6:	2200      	movs	r2, #0
 80087d8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80087dc:	693b      	ldr	r3, [r7, #16]
 80087de:	220a      	movs	r2, #10
 80087e0:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80087e4:	693b      	ldr	r3, [r7, #16]
 80087e6:	3363      	adds	r3, #99	; 0x63
 80087e8:	2210      	movs	r2, #16
 80087ea:	2100      	movs	r1, #0
 80087ec:	4618      	mov	r0, r3
 80087ee:	f007 f82b 	bl	800f848 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 80087f2:	693b      	ldr	r3, [r7, #16]
 80087f4:	222a      	movs	r2, #42	; 0x2a
 80087f6:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 80087fa:	79fa      	ldrb	r2, [r7, #7]
 80087fc:	693b      	ldr	r3, [r7, #16]
 80087fe:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8008802:	79ba      	ldrb	r2, [r7, #6]
 8008804:	693b      	ldr	r3, [r7, #16]
 8008806:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800880a:	797a      	ldrb	r2, [r7, #5]
 800880c:	693b      	ldr	r3, [r7, #16]
 800880e:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8008812:	1d3b      	adds	r3, r7, #4
 8008814:	781a      	ldrb	r2, [r3, #0]
 8008816:	693b      	ldr	r3, [r7, #16]
 8008818:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800881c:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8008820:	693b      	ldr	r3, [r7, #16]
 8008822:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8008826:	f107 0320 	add.w	r3, r7, #32
 800882a:	781a      	ldrb	r2, [r3, #0]
 800882c:	693b      	ldr	r3, [r7, #16]
 800882e:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008832:	693b      	ldr	r3, [r7, #16]
 8008834:	2201      	movs	r2, #1
 8008836:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800883a:	693b      	ldr	r3, [r7, #16]
 800883c:	2202      	movs	r2, #2
 800883e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8008842:	693b      	ldr	r3, [r7, #16]
 8008844:	683a      	ldr	r2, [r7, #0]
 8008846:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800884a:	2301      	movs	r3, #1
 800884c:	75fb      	strb	r3, [r7, #23]
      break;
 800884e:	e007      	b.n	8008860 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8008850:	7afb      	ldrb	r3, [r7, #11]
 8008852:	4619      	mov	r1, r3
 8008854:	68f8      	ldr	r0, [r7, #12]
 8008856:	f7ff fb83 	bl	8007f60 <USBH_MSC_BOT_Process>
 800885a:	4603      	mov	r3, r0
 800885c:	75fb      	strb	r3, [r7, #23]
      break;
 800885e:	bf00      	nop
  }

  return error;
 8008860:	7dfb      	ldrb	r3, [r7, #23]
}
 8008862:	4618      	mov	r0, r3
 8008864:	3718      	adds	r7, #24
 8008866:	46bd      	mov	sp, r7
 8008868:	bd80      	pop	{r7, pc}

0800886a <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 800886a:	b580      	push	{r7, lr}
 800886c:	b086      	sub	sp, #24
 800886e:	af00      	add	r7, sp, #0
 8008870:	60f8      	str	r0, [r7, #12]
 8008872:	607a      	str	r2, [r7, #4]
 8008874:	603b      	str	r3, [r7, #0]
 8008876:	460b      	mov	r3, r1
 8008878:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800887a:	2302      	movs	r3, #2
 800887c:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008884:	69db      	ldr	r3, [r3, #28]
 8008886:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8008888:	693b      	ldr	r3, [r7, #16]
 800888a:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800888e:	2b01      	cmp	r3, #1
 8008890:	d002      	beq.n	8008898 <USBH_MSC_SCSI_Read+0x2e>
 8008892:	2b02      	cmp	r3, #2
 8008894:	d047      	beq.n	8008926 <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8008896:	e04e      	b.n	8008936 <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8008898:	693b      	ldr	r3, [r7, #16]
 800889a:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800889e:	461a      	mov	r2, r3
 80088a0:	6a3b      	ldr	r3, [r7, #32]
 80088a2:	fb03 f202 	mul.w	r2, r3, r2
 80088a6:	693b      	ldr	r3, [r7, #16]
 80088a8:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80088aa:	693b      	ldr	r3, [r7, #16]
 80088ac:	2280      	movs	r2, #128	; 0x80
 80088ae:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80088b2:	693b      	ldr	r3, [r7, #16]
 80088b4:	220a      	movs	r2, #10
 80088b6:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80088ba:	693b      	ldr	r3, [r7, #16]
 80088bc:	3363      	adds	r3, #99	; 0x63
 80088be:	2210      	movs	r2, #16
 80088c0:	2100      	movs	r1, #0
 80088c2:	4618      	mov	r0, r3
 80088c4:	f006 ffc0 	bl	800f848 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 80088c8:	693b      	ldr	r3, [r7, #16]
 80088ca:	2228      	movs	r2, #40	; 0x28
 80088cc:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 80088d0:	79fa      	ldrb	r2, [r7, #7]
 80088d2:	693b      	ldr	r3, [r7, #16]
 80088d4:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 80088d8:	79ba      	ldrb	r2, [r7, #6]
 80088da:	693b      	ldr	r3, [r7, #16]
 80088dc:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 80088e0:	797a      	ldrb	r2, [r7, #5]
 80088e2:	693b      	ldr	r3, [r7, #16]
 80088e4:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 80088e8:	1d3b      	adds	r3, r7, #4
 80088ea:	781a      	ldrb	r2, [r3, #0]
 80088ec:	693b      	ldr	r3, [r7, #16]
 80088ee:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 80088f2:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80088f6:	693b      	ldr	r3, [r7, #16]
 80088f8:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 80088fc:	f107 0320 	add.w	r3, r7, #32
 8008900:	781a      	ldrb	r2, [r3, #0]
 8008902:	693b      	ldr	r3, [r7, #16]
 8008904:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008908:	693b      	ldr	r3, [r7, #16]
 800890a:	2201      	movs	r2, #1
 800890c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8008910:	693b      	ldr	r3, [r7, #16]
 8008912:	2202      	movs	r2, #2
 8008914:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8008918:	693b      	ldr	r3, [r7, #16]
 800891a:	683a      	ldr	r2, [r7, #0]
 800891c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8008920:	2301      	movs	r3, #1
 8008922:	75fb      	strb	r3, [r7, #23]
      break;
 8008924:	e007      	b.n	8008936 <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8008926:	7afb      	ldrb	r3, [r7, #11]
 8008928:	4619      	mov	r1, r3
 800892a:	68f8      	ldr	r0, [r7, #12]
 800892c:	f7ff fb18 	bl	8007f60 <USBH_MSC_BOT_Process>
 8008930:	4603      	mov	r3, r0
 8008932:	75fb      	strb	r3, [r7, #23]
      break;
 8008934:	bf00      	nop
  }

  return error;
 8008936:	7dfb      	ldrb	r3, [r7, #23]
}
 8008938:	4618      	mov	r0, r3
 800893a:	3718      	adds	r7, #24
 800893c:	46bd      	mov	sp, r7
 800893e:	bd80      	pop	{r7, pc}

08008940 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b084      	sub	sp, #16
 8008944:	af00      	add	r7, sp, #0
 8008946:	60f8      	str	r0, [r7, #12]
 8008948:	60b9      	str	r1, [r7, #8]
 800894a:	4613      	mov	r3, r2
 800894c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d101      	bne.n	8008958 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8008954:	2302      	movs	r3, #2
 8008956:	e029      	b.n	80089ac <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	79fa      	ldrb	r2, [r7, #7]
 800895c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	2200      	movs	r2, #0
 8008964:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	2200      	movs	r2, #0
 800896c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8008970:	68f8      	ldr	r0, [r7, #12]
 8008972:	f000 f81f 	bl	80089b4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	2200      	movs	r2, #0
 800897a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	2200      	movs	r2, #0
 8008982:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	2200      	movs	r2, #0
 800898a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	2200      	movs	r2, #0
 8008992:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8008996:	68bb      	ldr	r3, [r7, #8]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d003      	beq.n	80089a4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	68ba      	ldr	r2, [r7, #8]
 80089a0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 80089a4:	68f8      	ldr	r0, [r7, #12]
 80089a6:	f006 fce1 	bl	800f36c <USBH_LL_Init>

  return USBH_OK;
 80089aa:	2300      	movs	r3, #0
}
 80089ac:	4618      	mov	r0, r3
 80089ae:	3710      	adds	r7, #16
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bd80      	pop	{r7, pc}

080089b4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80089b4:	b480      	push	{r7}
 80089b6:	b085      	sub	sp, #20
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80089bc:	2300      	movs	r3, #0
 80089be:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80089c0:	2300      	movs	r3, #0
 80089c2:	60fb      	str	r3, [r7, #12]
 80089c4:	e009      	b.n	80089da <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80089c6:	687a      	ldr	r2, [r7, #4]
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	33e0      	adds	r3, #224	; 0xe0
 80089cc:	009b      	lsls	r3, r3, #2
 80089ce:	4413      	add	r3, r2
 80089d0:	2200      	movs	r2, #0
 80089d2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	3301      	adds	r3, #1
 80089d8:	60fb      	str	r3, [r7, #12]
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	2b0e      	cmp	r3, #14
 80089de:	d9f2      	bls.n	80089c6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80089e0:	2300      	movs	r3, #0
 80089e2:	60fb      	str	r3, [r7, #12]
 80089e4:	e009      	b.n	80089fa <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80089e6:	687a      	ldr	r2, [r7, #4]
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	4413      	add	r3, r2
 80089ec:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80089f0:	2200      	movs	r2, #0
 80089f2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	3301      	adds	r3, #1
 80089f8:	60fb      	str	r3, [r7, #12]
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a00:	d3f1      	bcc.n	80089e6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	2200      	movs	r2, #0
 8008a06:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2201      	movs	r2, #1
 8008a12:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2200      	movs	r2, #0
 8008a18:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2201      	movs	r2, #1
 8008a20:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2240      	movs	r2, #64	; 0x40
 8008a26:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2200      	movs	r2, #0
 8008a32:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	2201      	movs	r2, #1
 8008a3a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	2200      	movs	r2, #0
 8008a42:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	2200      	movs	r2, #0
 8008a4a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8008a4e:	2300      	movs	r3, #0
}
 8008a50:	4618      	mov	r0, r3
 8008a52:	3714      	adds	r7, #20
 8008a54:	46bd      	mov	sp, r7
 8008a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5a:	4770      	bx	lr

08008a5c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8008a5c:	b480      	push	{r7}
 8008a5e:	b085      	sub	sp, #20
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
 8008a64:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8008a66:	2300      	movs	r3, #0
 8008a68:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d016      	beq.n	8008a9e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d10e      	bne.n	8008a98 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008a80:	1c59      	adds	r1, r3, #1
 8008a82:	687a      	ldr	r2, [r7, #4]
 8008a84:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8008a88:	687a      	ldr	r2, [r7, #4]
 8008a8a:	33de      	adds	r3, #222	; 0xde
 8008a8c:	6839      	ldr	r1, [r7, #0]
 8008a8e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8008a92:	2300      	movs	r3, #0
 8008a94:	73fb      	strb	r3, [r7, #15]
 8008a96:	e004      	b.n	8008aa2 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8008a98:	2302      	movs	r3, #2
 8008a9a:	73fb      	strb	r3, [r7, #15]
 8008a9c:	e001      	b.n	8008aa2 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8008a9e:	2302      	movs	r3, #2
 8008aa0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008aa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	3714      	adds	r7, #20
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aae:	4770      	bx	lr

08008ab0 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8008ab0:	b480      	push	{r7}
 8008ab2:	b085      	sub	sp, #20
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
 8008ab8:	460b      	mov	r3, r1
 8008aba:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8008abc:	2300      	movs	r3, #0
 8008abe:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8008ac6:	78fa      	ldrb	r2, [r7, #3]
 8008ac8:	429a      	cmp	r2, r3
 8008aca:	d204      	bcs.n	8008ad6 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	78fa      	ldrb	r2, [r7, #3]
 8008ad0:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8008ad4:	e001      	b.n	8008ada <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8008ad6:	2302      	movs	r3, #2
 8008ad8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008ada:	7bfb      	ldrb	r3, [r7, #15]
}
 8008adc:	4618      	mov	r0, r3
 8008ade:	3714      	adds	r7, #20
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae6:	4770      	bx	lr

08008ae8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8008ae8:	b480      	push	{r7}
 8008aea:	b087      	sub	sp, #28
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
 8008af0:	4608      	mov	r0, r1
 8008af2:	4611      	mov	r1, r2
 8008af4:	461a      	mov	r2, r3
 8008af6:	4603      	mov	r3, r0
 8008af8:	70fb      	strb	r3, [r7, #3]
 8008afa:	460b      	mov	r3, r1
 8008afc:	70bb      	strb	r3, [r7, #2]
 8008afe:	4613      	mov	r3, r2
 8008b00:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8008b02:	2300      	movs	r3, #0
 8008b04:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8008b06:	2300      	movs	r3, #0
 8008b08:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008b10:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008b12:	e025      	b.n	8008b60 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8008b14:	7dfb      	ldrb	r3, [r7, #23]
 8008b16:	221a      	movs	r2, #26
 8008b18:	fb02 f303 	mul.w	r3, r2, r3
 8008b1c:	3308      	adds	r3, #8
 8008b1e:	68fa      	ldr	r2, [r7, #12]
 8008b20:	4413      	add	r3, r2
 8008b22:	3302      	adds	r3, #2
 8008b24:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008b26:	693b      	ldr	r3, [r7, #16]
 8008b28:	795b      	ldrb	r3, [r3, #5]
 8008b2a:	78fa      	ldrb	r2, [r7, #3]
 8008b2c:	429a      	cmp	r2, r3
 8008b2e:	d002      	beq.n	8008b36 <USBH_FindInterface+0x4e>
 8008b30:	78fb      	ldrb	r3, [r7, #3]
 8008b32:	2bff      	cmp	r3, #255	; 0xff
 8008b34:	d111      	bne.n	8008b5a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008b36:	693b      	ldr	r3, [r7, #16]
 8008b38:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008b3a:	78ba      	ldrb	r2, [r7, #2]
 8008b3c:	429a      	cmp	r2, r3
 8008b3e:	d002      	beq.n	8008b46 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008b40:	78bb      	ldrb	r3, [r7, #2]
 8008b42:	2bff      	cmp	r3, #255	; 0xff
 8008b44:	d109      	bne.n	8008b5a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008b46:	693b      	ldr	r3, [r7, #16]
 8008b48:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008b4a:	787a      	ldrb	r2, [r7, #1]
 8008b4c:	429a      	cmp	r2, r3
 8008b4e:	d002      	beq.n	8008b56 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008b50:	787b      	ldrb	r3, [r7, #1]
 8008b52:	2bff      	cmp	r3, #255	; 0xff
 8008b54:	d101      	bne.n	8008b5a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8008b56:	7dfb      	ldrb	r3, [r7, #23]
 8008b58:	e006      	b.n	8008b68 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8008b5a:	7dfb      	ldrb	r3, [r7, #23]
 8008b5c:	3301      	adds	r3, #1
 8008b5e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008b60:	7dfb      	ldrb	r3, [r7, #23]
 8008b62:	2b01      	cmp	r3, #1
 8008b64:	d9d6      	bls.n	8008b14 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8008b66:	23ff      	movs	r3, #255	; 0xff
}
 8008b68:	4618      	mov	r0, r3
 8008b6a:	371c      	adds	r7, #28
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b72:	4770      	bx	lr

08008b74 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b082      	sub	sp, #8
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8008b7c:	6878      	ldr	r0, [r7, #4]
 8008b7e:	f006 fc33 	bl	800f3e8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8008b82:	2101      	movs	r1, #1
 8008b84:	6878      	ldr	r0, [r7, #4]
 8008b86:	f006 fd4c 	bl	800f622 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8008b8a:	2300      	movs	r3, #0
}
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	3708      	adds	r7, #8
 8008b90:	46bd      	mov	sp, r7
 8008b92:	bd80      	pop	{r7, pc}

08008b94 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b088      	sub	sp, #32
 8008b98:	af04      	add	r7, sp, #16
 8008b9a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8008b9c:	2302      	movs	r3, #2
 8008b9e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8008baa:	b2db      	uxtb	r3, r3
 8008bac:	2b01      	cmp	r3, #1
 8008bae:	d102      	bne.n	8008bb6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2203      	movs	r2, #3
 8008bb4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	781b      	ldrb	r3, [r3, #0]
 8008bba:	b2db      	uxtb	r3, r3
 8008bbc:	2b0b      	cmp	r3, #11
 8008bbe:	f200 81b3 	bhi.w	8008f28 <USBH_Process+0x394>
 8008bc2:	a201      	add	r2, pc, #4	; (adr r2, 8008bc8 <USBH_Process+0x34>)
 8008bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bc8:	08008bf9 	.word	0x08008bf9
 8008bcc:	08008c2b 	.word	0x08008c2b
 8008bd0:	08008c93 	.word	0x08008c93
 8008bd4:	08008ec3 	.word	0x08008ec3
 8008bd8:	08008f29 	.word	0x08008f29
 8008bdc:	08008d37 	.word	0x08008d37
 8008be0:	08008e69 	.word	0x08008e69
 8008be4:	08008d6d 	.word	0x08008d6d
 8008be8:	08008d8d 	.word	0x08008d8d
 8008bec:	08008dad 	.word	0x08008dad
 8008bf0:	08008ddb 	.word	0x08008ddb
 8008bf4:	08008eab 	.word	0x08008eab
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8008bfe:	b2db      	uxtb	r3, r3
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	f000 8193 	beq.w	8008f2c <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2201      	movs	r2, #1
 8008c0a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8008c0c:	20c8      	movs	r0, #200	; 0xc8
 8008c0e:	f006 fd7f 	bl	800f710 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8008c12:	6878      	ldr	r0, [r7, #4]
 8008c14:	f006 fc45 	bl	800f4a2 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2200      	movs	r2, #0
 8008c24:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008c28:	e180      	b.n	8008f2c <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8008c30:	2b01      	cmp	r3, #1
 8008c32:	d107      	bne.n	8008c44 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2200      	movs	r2, #0
 8008c38:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2202      	movs	r2, #2
 8008c40:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008c42:	e182      	b.n	8008f4a <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008c4a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008c4e:	d914      	bls.n	8008c7a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8008c56:	3301      	adds	r3, #1
 8008c58:	b2da      	uxtb	r2, r3
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8008c66:	2b03      	cmp	r3, #3
 8008c68:	d903      	bls.n	8008c72 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	220d      	movs	r2, #13
 8008c6e:	701a      	strb	r2, [r3, #0]
      break;
 8008c70:	e16b      	b.n	8008f4a <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	2200      	movs	r2, #0
 8008c76:	701a      	strb	r2, [r3, #0]
      break;
 8008c78:	e167      	b.n	8008f4a <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008c80:	f103 020a 	add.w	r2, r3, #10
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8008c8a:	200a      	movs	r0, #10
 8008c8c:	f006 fd40 	bl	800f710 <USBH_Delay>
      break;
 8008c90:	e15b      	b.n	8008f4a <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d005      	beq.n	8008ca8 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008ca2:	2104      	movs	r1, #4
 8008ca4:	6878      	ldr	r0, [r7, #4]
 8008ca6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8008ca8:	2064      	movs	r0, #100	; 0x64
 8008caa:	f006 fd31 	bl	800f710 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8008cae:	6878      	ldr	r0, [r7, #4]
 8008cb0:	f006 fbd0 	bl	800f454 <USBH_LL_GetSpeed>
 8008cb4:	4603      	mov	r3, r0
 8008cb6:	461a      	mov	r2, r3
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	2205      	movs	r2, #5
 8008cc2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8008cc4:	2100      	movs	r1, #0
 8008cc6:	6878      	ldr	r0, [r7, #4]
 8008cc8:	f001 f92f 	bl	8009f2a <USBH_AllocPipe>
 8008ccc:	4603      	mov	r3, r0
 8008cce:	461a      	mov	r2, r3
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8008cd4:	2180      	movs	r1, #128	; 0x80
 8008cd6:	6878      	ldr	r0, [r7, #4]
 8008cd8:	f001 f927 	bl	8009f2a <USBH_AllocPipe>
 8008cdc:	4603      	mov	r3, r0
 8008cde:	461a      	mov	r2, r3
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	7919      	ldrb	r1, [r3, #4]
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008cf4:	687a      	ldr	r2, [r7, #4]
 8008cf6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008cf8:	b292      	uxth	r2, r2
 8008cfa:	9202      	str	r2, [sp, #8]
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	9201      	str	r2, [sp, #4]
 8008d00:	9300      	str	r3, [sp, #0]
 8008d02:	4603      	mov	r3, r0
 8008d04:	2280      	movs	r2, #128	; 0x80
 8008d06:	6878      	ldr	r0, [r7, #4]
 8008d08:	f001 f8e0 	bl	8009ecc <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	7959      	ldrb	r1, [r3, #5]
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008d1c:	687a      	ldr	r2, [r7, #4]
 8008d1e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008d20:	b292      	uxth	r2, r2
 8008d22:	9202      	str	r2, [sp, #8]
 8008d24:	2200      	movs	r2, #0
 8008d26:	9201      	str	r2, [sp, #4]
 8008d28:	9300      	str	r3, [sp, #0]
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	f001 f8cc 	bl	8009ecc <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008d34:	e109      	b.n	8008f4a <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8008d36:	6878      	ldr	r0, [r7, #4]
 8008d38:	f000 f90c 	bl	8008f54 <USBH_HandleEnum>
 8008d3c:	4603      	mov	r3, r0
 8008d3e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8008d40:	7bbb      	ldrb	r3, [r7, #14]
 8008d42:	b2db      	uxtb	r3, r3
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	f040 80f3 	bne.w	8008f30 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8008d58:	2b01      	cmp	r3, #1
 8008d5a:	d103      	bne.n	8008d64 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2208      	movs	r2, #8
 8008d60:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008d62:	e0e5      	b.n	8008f30 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2207      	movs	r2, #7
 8008d68:	701a      	strb	r2, [r3, #0]
      break;
 8008d6a:	e0e1      	b.n	8008f30 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	f000 80de 	beq.w	8008f34 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008d7e:	2101      	movs	r1, #1
 8008d80:	6878      	ldr	r0, [r7, #4]
 8008d82:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2208      	movs	r2, #8
 8008d88:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8008d8a:	e0d3      	b.n	8008f34 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8008d92:	b29b      	uxth	r3, r3
 8008d94:	4619      	mov	r1, r3
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f000 fc20 	bl	80095dc <USBH_SetCfg>
 8008d9c:	4603      	mov	r3, r0
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	f040 80ca 	bne.w	8008f38 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2209      	movs	r2, #9
 8008da8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008daa:	e0c5      	b.n	8008f38 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8008db2:	f003 0320 	and.w	r3, r3, #32
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d00b      	beq.n	8008dd2 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8008dba:	2101      	movs	r1, #1
 8008dbc:	6878      	ldr	r0, [r7, #4]
 8008dbe:	f000 fc30 	bl	8009622 <USBH_SetFeature>
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	f040 80b9 	bne.w	8008f3c <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	220a      	movs	r2, #10
 8008dce:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008dd0:	e0b4      	b.n	8008f3c <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	220a      	movs	r2, #10
 8008dd6:	701a      	strb	r2, [r3, #0]
      break;
 8008dd8:	e0b0      	b.n	8008f3c <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	f000 80ad 	beq.w	8008f40 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	2200      	movs	r2, #0
 8008dea:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008dee:	2300      	movs	r3, #0
 8008df0:	73fb      	strb	r3, [r7, #15]
 8008df2:	e016      	b.n	8008e22 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8008df4:	7bfa      	ldrb	r2, [r7, #15]
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	32de      	adds	r2, #222	; 0xde
 8008dfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dfe:	791a      	ldrb	r2, [r3, #4]
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8008e06:	429a      	cmp	r2, r3
 8008e08:	d108      	bne.n	8008e1c <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8008e0a:	7bfa      	ldrb	r2, [r7, #15]
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	32de      	adds	r2, #222	; 0xde
 8008e10:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8008e1a:	e005      	b.n	8008e28 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008e1c:	7bfb      	ldrb	r3, [r7, #15]
 8008e1e:	3301      	adds	r3, #1
 8008e20:	73fb      	strb	r3, [r7, #15]
 8008e22:	7bfb      	ldrb	r3, [r7, #15]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d0e5      	beq.n	8008df4 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d016      	beq.n	8008e60 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008e38:	689b      	ldr	r3, [r3, #8]
 8008e3a:	6878      	ldr	r0, [r7, #4]
 8008e3c:	4798      	blx	r3
 8008e3e:	4603      	mov	r3, r0
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d109      	bne.n	8008e58 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2206      	movs	r2, #6
 8008e48:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008e50:	2103      	movs	r1, #3
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008e56:	e073      	b.n	8008f40 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	220d      	movs	r2, #13
 8008e5c:	701a      	strb	r2, [r3, #0]
      break;
 8008e5e:	e06f      	b.n	8008f40 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	220d      	movs	r2, #13
 8008e64:	701a      	strb	r2, [r3, #0]
      break;
 8008e66:	e06b      	b.n	8008f40 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d017      	beq.n	8008ea2 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008e78:	691b      	ldr	r3, [r3, #16]
 8008e7a:	6878      	ldr	r0, [r7, #4]
 8008e7c:	4798      	blx	r3
 8008e7e:	4603      	mov	r3, r0
 8008e80:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008e82:	7bbb      	ldrb	r3, [r7, #14]
 8008e84:	b2db      	uxtb	r3, r3
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d103      	bne.n	8008e92 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	220b      	movs	r2, #11
 8008e8e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008e90:	e058      	b.n	8008f44 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8008e92:	7bbb      	ldrb	r3, [r7, #14]
 8008e94:	b2db      	uxtb	r3, r3
 8008e96:	2b02      	cmp	r3, #2
 8008e98:	d154      	bne.n	8008f44 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	220d      	movs	r2, #13
 8008e9e:	701a      	strb	r2, [r3, #0]
      break;
 8008ea0:	e050      	b.n	8008f44 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	220d      	movs	r2, #13
 8008ea6:	701a      	strb	r2, [r3, #0]
      break;
 8008ea8:	e04c      	b.n	8008f44 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d049      	beq.n	8008f48 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008eba:	695b      	ldr	r3, [r3, #20]
 8008ebc:	6878      	ldr	r0, [r7, #4]
 8008ebe:	4798      	blx	r3
      }
      break;
 8008ec0:	e042      	b.n	8008f48 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8008eca:	6878      	ldr	r0, [r7, #4]
 8008ecc:	f7ff fd72 	bl	80089b4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d009      	beq.n	8008eee <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008ee0:	68db      	ldr	r3, [r3, #12]
 8008ee2:	6878      	ldr	r0, [r7, #4]
 8008ee4:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	2200      	movs	r2, #0
 8008eea:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d005      	beq.n	8008f04 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008efe:	2105      	movs	r1, #5
 8008f00:	6878      	ldr	r0, [r7, #4]
 8008f02:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8008f0a:	b2db      	uxtb	r3, r3
 8008f0c:	2b01      	cmp	r3, #1
 8008f0e:	d107      	bne.n	8008f20 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2200      	movs	r2, #0
 8008f14:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8008f18:	6878      	ldr	r0, [r7, #4]
 8008f1a:	f7ff fe2b 	bl	8008b74 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008f1e:	e014      	b.n	8008f4a <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8008f20:	6878      	ldr	r0, [r7, #4]
 8008f22:	f006 fa61 	bl	800f3e8 <USBH_LL_Start>
      break;
 8008f26:	e010      	b.n	8008f4a <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8008f28:	bf00      	nop
 8008f2a:	e00e      	b.n	8008f4a <USBH_Process+0x3b6>
      break;
 8008f2c:	bf00      	nop
 8008f2e:	e00c      	b.n	8008f4a <USBH_Process+0x3b6>
      break;
 8008f30:	bf00      	nop
 8008f32:	e00a      	b.n	8008f4a <USBH_Process+0x3b6>
    break;
 8008f34:	bf00      	nop
 8008f36:	e008      	b.n	8008f4a <USBH_Process+0x3b6>
      break;
 8008f38:	bf00      	nop
 8008f3a:	e006      	b.n	8008f4a <USBH_Process+0x3b6>
      break;
 8008f3c:	bf00      	nop
 8008f3e:	e004      	b.n	8008f4a <USBH_Process+0x3b6>
      break;
 8008f40:	bf00      	nop
 8008f42:	e002      	b.n	8008f4a <USBH_Process+0x3b6>
      break;
 8008f44:	bf00      	nop
 8008f46:	e000      	b.n	8008f4a <USBH_Process+0x3b6>
      break;
 8008f48:	bf00      	nop
  }
  return USBH_OK;
 8008f4a:	2300      	movs	r3, #0
}
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	3710      	adds	r7, #16
 8008f50:	46bd      	mov	sp, r7
 8008f52:	bd80      	pop	{r7, pc}

08008f54 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b088      	sub	sp, #32
 8008f58:	af04      	add	r7, sp, #16
 8008f5a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008f5c:	2301      	movs	r3, #1
 8008f5e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8008f60:	2301      	movs	r3, #1
 8008f62:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	785b      	ldrb	r3, [r3, #1]
 8008f68:	2b07      	cmp	r3, #7
 8008f6a:	f200 81c1 	bhi.w	80092f0 <USBH_HandleEnum+0x39c>
 8008f6e:	a201      	add	r2, pc, #4	; (adr r2, 8008f74 <USBH_HandleEnum+0x20>)
 8008f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f74:	08008f95 	.word	0x08008f95
 8008f78:	08009053 	.word	0x08009053
 8008f7c:	080090bd 	.word	0x080090bd
 8008f80:	0800914b 	.word	0x0800914b
 8008f84:	080091b5 	.word	0x080091b5
 8008f88:	08009225 	.word	0x08009225
 8008f8c:	0800926b 	.word	0x0800926b
 8008f90:	080092b1 	.word	0x080092b1
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8008f94:	2108      	movs	r1, #8
 8008f96:	6878      	ldr	r0, [r7, #4]
 8008f98:	f000 fa50 	bl	800943c <USBH_Get_DevDesc>
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008fa0:	7bbb      	ldrb	r3, [r7, #14]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d130      	bne.n	8009008 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2201      	movs	r2, #1
 8008fb4:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	7919      	ldrb	r1, [r3, #4]
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8008fc6:	687a      	ldr	r2, [r7, #4]
 8008fc8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008fca:	b292      	uxth	r2, r2
 8008fcc:	9202      	str	r2, [sp, #8]
 8008fce:	2200      	movs	r2, #0
 8008fd0:	9201      	str	r2, [sp, #4]
 8008fd2:	9300      	str	r3, [sp, #0]
 8008fd4:	4603      	mov	r3, r0
 8008fd6:	2280      	movs	r2, #128	; 0x80
 8008fd8:	6878      	ldr	r0, [r7, #4]
 8008fda:	f000 ff77 	bl	8009ecc <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	7959      	ldrb	r1, [r3, #5]
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8008fee:	687a      	ldr	r2, [r7, #4]
 8008ff0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008ff2:	b292      	uxth	r2, r2
 8008ff4:	9202      	str	r2, [sp, #8]
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	9201      	str	r2, [sp, #4]
 8008ffa:	9300      	str	r3, [sp, #0]
 8008ffc:	4603      	mov	r3, r0
 8008ffe:	2200      	movs	r2, #0
 8009000:	6878      	ldr	r0, [r7, #4]
 8009002:	f000 ff63 	bl	8009ecc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009006:	e175      	b.n	80092f4 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009008:	7bbb      	ldrb	r3, [r7, #14]
 800900a:	2b03      	cmp	r3, #3
 800900c:	f040 8172 	bne.w	80092f4 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009016:	3301      	adds	r3, #1
 8009018:	b2da      	uxtb	r2, r3
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009026:	2b03      	cmp	r3, #3
 8009028:	d903      	bls.n	8009032 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	220d      	movs	r2, #13
 800902e:	701a      	strb	r2, [r3, #0]
      break;
 8009030:	e160      	b.n	80092f4 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	795b      	ldrb	r3, [r3, #5]
 8009036:	4619      	mov	r1, r3
 8009038:	6878      	ldr	r0, [r7, #4]
 800903a:	f000 ff97 	bl	8009f6c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	791b      	ldrb	r3, [r3, #4]
 8009042:	4619      	mov	r1, r3
 8009044:	6878      	ldr	r0, [r7, #4]
 8009046:	f000 ff91 	bl	8009f6c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	2200      	movs	r2, #0
 800904e:	701a      	strb	r2, [r3, #0]
      break;
 8009050:	e150      	b.n	80092f4 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8009052:	2112      	movs	r1, #18
 8009054:	6878      	ldr	r0, [r7, #4]
 8009056:	f000 f9f1 	bl	800943c <USBH_Get_DevDesc>
 800905a:	4603      	mov	r3, r0
 800905c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800905e:	7bbb      	ldrb	r3, [r7, #14]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d103      	bne.n	800906c <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2202      	movs	r2, #2
 8009068:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800906a:	e145      	b.n	80092f8 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800906c:	7bbb      	ldrb	r3, [r7, #14]
 800906e:	2b03      	cmp	r3, #3
 8009070:	f040 8142 	bne.w	80092f8 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800907a:	3301      	adds	r3, #1
 800907c:	b2da      	uxtb	r2, r3
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800908a:	2b03      	cmp	r3, #3
 800908c:	d903      	bls.n	8009096 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	220d      	movs	r2, #13
 8009092:	701a      	strb	r2, [r3, #0]
      break;
 8009094:	e130      	b.n	80092f8 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	795b      	ldrb	r3, [r3, #5]
 800909a:	4619      	mov	r1, r3
 800909c:	6878      	ldr	r0, [r7, #4]
 800909e:	f000 ff65 	bl	8009f6c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	791b      	ldrb	r3, [r3, #4]
 80090a6:	4619      	mov	r1, r3
 80090a8:	6878      	ldr	r0, [r7, #4]
 80090aa:	f000 ff5f 	bl	8009f6c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	2200      	movs	r2, #0
 80090b2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2200      	movs	r2, #0
 80090b8:	701a      	strb	r2, [r3, #0]
      break;
 80090ba:	e11d      	b.n	80092f8 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80090bc:	2101      	movs	r1, #1
 80090be:	6878      	ldr	r0, [r7, #4]
 80090c0:	f000 fa68 	bl	8009594 <USBH_SetAddress>
 80090c4:	4603      	mov	r3, r0
 80090c6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80090c8:	7bbb      	ldrb	r3, [r7, #14]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d132      	bne.n	8009134 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80090ce:	2002      	movs	r0, #2
 80090d0:	f006 fb1e 	bl	800f710 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2201      	movs	r2, #1
 80090d8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2203      	movs	r2, #3
 80090e0:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	7919      	ldrb	r1, [r3, #4]
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80090f2:	687a      	ldr	r2, [r7, #4]
 80090f4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80090f6:	b292      	uxth	r2, r2
 80090f8:	9202      	str	r2, [sp, #8]
 80090fa:	2200      	movs	r2, #0
 80090fc:	9201      	str	r2, [sp, #4]
 80090fe:	9300      	str	r3, [sp, #0]
 8009100:	4603      	mov	r3, r0
 8009102:	2280      	movs	r2, #128	; 0x80
 8009104:	6878      	ldr	r0, [r7, #4]
 8009106:	f000 fee1 	bl	8009ecc <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	7959      	ldrb	r1, [r3, #5]
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800911a:	687a      	ldr	r2, [r7, #4]
 800911c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800911e:	b292      	uxth	r2, r2
 8009120:	9202      	str	r2, [sp, #8]
 8009122:	2200      	movs	r2, #0
 8009124:	9201      	str	r2, [sp, #4]
 8009126:	9300      	str	r3, [sp, #0]
 8009128:	4603      	mov	r3, r0
 800912a:	2200      	movs	r2, #0
 800912c:	6878      	ldr	r0, [r7, #4]
 800912e:	f000 fecd 	bl	8009ecc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009132:	e0e3      	b.n	80092fc <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009134:	7bbb      	ldrb	r3, [r7, #14]
 8009136:	2b03      	cmp	r3, #3
 8009138:	f040 80e0 	bne.w	80092fc <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	220d      	movs	r2, #13
 8009140:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	2200      	movs	r2, #0
 8009146:	705a      	strb	r2, [r3, #1]
      break;
 8009148:	e0d8      	b.n	80092fc <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800914a:	2109      	movs	r1, #9
 800914c:	6878      	ldr	r0, [r7, #4]
 800914e:	f000 f99d 	bl	800948c <USBH_Get_CfgDesc>
 8009152:	4603      	mov	r3, r0
 8009154:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009156:	7bbb      	ldrb	r3, [r7, #14]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d103      	bne.n	8009164 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2204      	movs	r2, #4
 8009160:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009162:	e0cd      	b.n	8009300 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009164:	7bbb      	ldrb	r3, [r7, #14]
 8009166:	2b03      	cmp	r3, #3
 8009168:	f040 80ca 	bne.w	8009300 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009172:	3301      	adds	r3, #1
 8009174:	b2da      	uxtb	r2, r3
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009182:	2b03      	cmp	r3, #3
 8009184:	d903      	bls.n	800918e <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	220d      	movs	r2, #13
 800918a:	701a      	strb	r2, [r3, #0]
      break;
 800918c:	e0b8      	b.n	8009300 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	795b      	ldrb	r3, [r3, #5]
 8009192:	4619      	mov	r1, r3
 8009194:	6878      	ldr	r0, [r7, #4]
 8009196:	f000 fee9 	bl	8009f6c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	791b      	ldrb	r3, [r3, #4]
 800919e:	4619      	mov	r1, r3
 80091a0:	6878      	ldr	r0, [r7, #4]
 80091a2:	f000 fee3 	bl	8009f6c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2200      	movs	r2, #0
 80091aa:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2200      	movs	r2, #0
 80091b0:	701a      	strb	r2, [r3, #0]
      break;
 80091b2:	e0a5      	b.n	8009300 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80091ba:	4619      	mov	r1, r3
 80091bc:	6878      	ldr	r0, [r7, #4]
 80091be:	f000 f965 	bl	800948c <USBH_Get_CfgDesc>
 80091c2:	4603      	mov	r3, r0
 80091c4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80091c6:	7bbb      	ldrb	r3, [r7, #14]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d103      	bne.n	80091d4 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2205      	movs	r2, #5
 80091d0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80091d2:	e097      	b.n	8009304 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80091d4:	7bbb      	ldrb	r3, [r7, #14]
 80091d6:	2b03      	cmp	r3, #3
 80091d8:	f040 8094 	bne.w	8009304 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80091e2:	3301      	adds	r3, #1
 80091e4:	b2da      	uxtb	r2, r3
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80091f2:	2b03      	cmp	r3, #3
 80091f4:	d903      	bls.n	80091fe <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	220d      	movs	r2, #13
 80091fa:	701a      	strb	r2, [r3, #0]
      break;
 80091fc:	e082      	b.n	8009304 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	795b      	ldrb	r3, [r3, #5]
 8009202:	4619      	mov	r1, r3
 8009204:	6878      	ldr	r0, [r7, #4]
 8009206:	f000 feb1 	bl	8009f6c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	791b      	ldrb	r3, [r3, #4]
 800920e:	4619      	mov	r1, r3
 8009210:	6878      	ldr	r0, [r7, #4]
 8009212:	f000 feab 	bl	8009f6c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	2200      	movs	r2, #0
 800921a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2200      	movs	r2, #0
 8009220:	701a      	strb	r2, [r3, #0]
      break;
 8009222:	e06f      	b.n	8009304 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800922a:	2b00      	cmp	r3, #0
 800922c:	d019      	beq.n	8009262 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800923a:	23ff      	movs	r3, #255	; 0xff
 800923c:	6878      	ldr	r0, [r7, #4]
 800923e:	f000 f949 	bl	80094d4 <USBH_Get_StringDesc>
 8009242:	4603      	mov	r3, r0
 8009244:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009246:	7bbb      	ldrb	r3, [r7, #14]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d103      	bne.n	8009254 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2206      	movs	r2, #6
 8009250:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8009252:	e059      	b.n	8009308 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009254:	7bbb      	ldrb	r3, [r7, #14]
 8009256:	2b03      	cmp	r3, #3
 8009258:	d156      	bne.n	8009308 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2206      	movs	r2, #6
 800925e:	705a      	strb	r2, [r3, #1]
      break;
 8009260:	e052      	b.n	8009308 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	2206      	movs	r2, #6
 8009266:	705a      	strb	r2, [r3, #1]
      break;
 8009268:	e04e      	b.n	8009308 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8009270:	2b00      	cmp	r3, #0
 8009272:	d019      	beq.n	80092a8 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009280:	23ff      	movs	r3, #255	; 0xff
 8009282:	6878      	ldr	r0, [r7, #4]
 8009284:	f000 f926 	bl	80094d4 <USBH_Get_StringDesc>
 8009288:	4603      	mov	r3, r0
 800928a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800928c:	7bbb      	ldrb	r3, [r7, #14]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d103      	bne.n	800929a <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	2207      	movs	r2, #7
 8009296:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8009298:	e038      	b.n	800930c <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800929a:	7bbb      	ldrb	r3, [r7, #14]
 800929c:	2b03      	cmp	r3, #3
 800929e:	d135      	bne.n	800930c <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2207      	movs	r2, #7
 80092a4:	705a      	strb	r2, [r3, #1]
      break;
 80092a6:	e031      	b.n	800930c <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2207      	movs	r2, #7
 80092ac:	705a      	strb	r2, [r3, #1]
      break;
 80092ae:	e02d      	b.n	800930c <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d017      	beq.n	80092ea <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80092c6:	23ff      	movs	r3, #255	; 0xff
 80092c8:	6878      	ldr	r0, [r7, #4]
 80092ca:	f000 f903 	bl	80094d4 <USBH_Get_StringDesc>
 80092ce:	4603      	mov	r3, r0
 80092d0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80092d2:	7bbb      	ldrb	r3, [r7, #14]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d102      	bne.n	80092de <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80092d8:	2300      	movs	r3, #0
 80092da:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80092dc:	e018      	b.n	8009310 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80092de:	7bbb      	ldrb	r3, [r7, #14]
 80092e0:	2b03      	cmp	r3, #3
 80092e2:	d115      	bne.n	8009310 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 80092e4:	2300      	movs	r3, #0
 80092e6:	73fb      	strb	r3, [r7, #15]
      break;
 80092e8:	e012      	b.n	8009310 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 80092ea:	2300      	movs	r3, #0
 80092ec:	73fb      	strb	r3, [r7, #15]
      break;
 80092ee:	e00f      	b.n	8009310 <USBH_HandleEnum+0x3bc>

    default:
      break;
 80092f0:	bf00      	nop
 80092f2:	e00e      	b.n	8009312 <USBH_HandleEnum+0x3be>
      break;
 80092f4:	bf00      	nop
 80092f6:	e00c      	b.n	8009312 <USBH_HandleEnum+0x3be>
      break;
 80092f8:	bf00      	nop
 80092fa:	e00a      	b.n	8009312 <USBH_HandleEnum+0x3be>
      break;
 80092fc:	bf00      	nop
 80092fe:	e008      	b.n	8009312 <USBH_HandleEnum+0x3be>
      break;
 8009300:	bf00      	nop
 8009302:	e006      	b.n	8009312 <USBH_HandleEnum+0x3be>
      break;
 8009304:	bf00      	nop
 8009306:	e004      	b.n	8009312 <USBH_HandleEnum+0x3be>
      break;
 8009308:	bf00      	nop
 800930a:	e002      	b.n	8009312 <USBH_HandleEnum+0x3be>
      break;
 800930c:	bf00      	nop
 800930e:	e000      	b.n	8009312 <USBH_HandleEnum+0x3be>
      break;
 8009310:	bf00      	nop
  }
  return Status;
 8009312:	7bfb      	ldrb	r3, [r7, #15]
}
 8009314:	4618      	mov	r0, r3
 8009316:	3710      	adds	r7, #16
 8009318:	46bd      	mov	sp, r7
 800931a:	bd80      	pop	{r7, pc}

0800931c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800931c:	b480      	push	{r7}
 800931e:	b083      	sub	sp, #12
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
 8009324:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	683a      	ldr	r2, [r7, #0]
 800932a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800932e:	bf00      	nop
 8009330:	370c      	adds	r7, #12
 8009332:	46bd      	mov	sp, r7
 8009334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009338:	4770      	bx	lr

0800933a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800933a:	b580      	push	{r7, lr}
 800933c:	b082      	sub	sp, #8
 800933e:	af00      	add	r7, sp, #0
 8009340:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009348:	1c5a      	adds	r2, r3, #1
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8009350:	6878      	ldr	r0, [r7, #4]
 8009352:	f000 f804 	bl	800935e <USBH_HandleSof>
}
 8009356:	bf00      	nop
 8009358:	3708      	adds	r7, #8
 800935a:	46bd      	mov	sp, r7
 800935c:	bd80      	pop	{r7, pc}

0800935e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800935e:	b580      	push	{r7, lr}
 8009360:	b082      	sub	sp, #8
 8009362:	af00      	add	r7, sp, #0
 8009364:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	781b      	ldrb	r3, [r3, #0]
 800936a:	b2db      	uxtb	r3, r3
 800936c:	2b0b      	cmp	r3, #11
 800936e:	d10a      	bne.n	8009386 <USBH_HandleSof+0x28>
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009376:	2b00      	cmp	r3, #0
 8009378:	d005      	beq.n	8009386 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009380:	699b      	ldr	r3, [r3, #24]
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	4798      	blx	r3
  }
}
 8009386:	bf00      	nop
 8009388:	3708      	adds	r7, #8
 800938a:	46bd      	mov	sp, r7
 800938c:	bd80      	pop	{r7, pc}

0800938e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800938e:	b480      	push	{r7}
 8009390:	b083      	sub	sp, #12
 8009392:	af00      	add	r7, sp, #0
 8009394:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	2201      	movs	r2, #1
 800939a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800939e:	bf00      	nop
}
 80093a0:	370c      	adds	r7, #12
 80093a2:	46bd      	mov	sp, r7
 80093a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a8:	4770      	bx	lr

080093aa <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80093aa:	b480      	push	{r7}
 80093ac:	b083      	sub	sp, #12
 80093ae:	af00      	add	r7, sp, #0
 80093b0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	2200      	movs	r2, #0
 80093b6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80093ba:	bf00      	nop
}
 80093bc:	370c      	adds	r7, #12
 80093be:	46bd      	mov	sp, r7
 80093c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c4:	4770      	bx	lr

080093c6 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80093c6:	b480      	push	{r7}
 80093c8:	b083      	sub	sp, #12
 80093ca:	af00      	add	r7, sp, #0
 80093cc:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	2201      	movs	r2, #1
 80093d2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	2200      	movs	r2, #0
 80093da:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	2200      	movs	r2, #0
 80093e2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80093e6:	2300      	movs	r3, #0
}
 80093e8:	4618      	mov	r0, r3
 80093ea:	370c      	adds	r7, #12
 80093ec:	46bd      	mov	sp, r7
 80093ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f2:	4770      	bx	lr

080093f4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b082      	sub	sp, #8
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2201      	movs	r2, #1
 8009400:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2200      	movs	r2, #0
 8009408:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2200      	movs	r2, #0
 8009410:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8009414:	6878      	ldr	r0, [r7, #4]
 8009416:	f006 f802 	bl	800f41e <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	791b      	ldrb	r3, [r3, #4]
 800941e:	4619      	mov	r1, r3
 8009420:	6878      	ldr	r0, [r7, #4]
 8009422:	f000 fda3 	bl	8009f6c <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	795b      	ldrb	r3, [r3, #5]
 800942a:	4619      	mov	r1, r3
 800942c:	6878      	ldr	r0, [r7, #4]
 800942e:	f000 fd9d 	bl	8009f6c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8009432:	2300      	movs	r3, #0
}
 8009434:	4618      	mov	r0, r3
 8009436:	3708      	adds	r7, #8
 8009438:	46bd      	mov	sp, r7
 800943a:	bd80      	pop	{r7, pc}

0800943c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b086      	sub	sp, #24
 8009440:	af02      	add	r7, sp, #8
 8009442:	6078      	str	r0, [r7, #4]
 8009444:	460b      	mov	r3, r1
 8009446:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800944e:	78fb      	ldrb	r3, [r7, #3]
 8009450:	b29b      	uxth	r3, r3
 8009452:	9300      	str	r3, [sp, #0]
 8009454:	4613      	mov	r3, r2
 8009456:	f44f 7280 	mov.w	r2, #256	; 0x100
 800945a:	2100      	movs	r1, #0
 800945c:	6878      	ldr	r0, [r7, #4]
 800945e:	f000 f864 	bl	800952a <USBH_GetDescriptor>
 8009462:	4603      	mov	r3, r0
 8009464:	73fb      	strb	r3, [r7, #15]
 8009466:	7bfb      	ldrb	r3, [r7, #15]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d10a      	bne.n	8009482 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	f203 3026 	addw	r0, r3, #806	; 0x326
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009478:	78fa      	ldrb	r2, [r7, #3]
 800947a:	b292      	uxth	r2, r2
 800947c:	4619      	mov	r1, r3
 800947e:	f000 f918 	bl	80096b2 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8009482:	7bfb      	ldrb	r3, [r7, #15]
}
 8009484:	4618      	mov	r0, r3
 8009486:	3710      	adds	r7, #16
 8009488:	46bd      	mov	sp, r7
 800948a:	bd80      	pop	{r7, pc}

0800948c <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800948c:	b580      	push	{r7, lr}
 800948e:	b086      	sub	sp, #24
 8009490:	af02      	add	r7, sp, #8
 8009492:	6078      	str	r0, [r7, #4]
 8009494:	460b      	mov	r3, r1
 8009496:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	331c      	adds	r3, #28
 800949c:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800949e:	887b      	ldrh	r3, [r7, #2]
 80094a0:	9300      	str	r3, [sp, #0]
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80094a8:	2100      	movs	r1, #0
 80094aa:	6878      	ldr	r0, [r7, #4]
 80094ac:	f000 f83d 	bl	800952a <USBH_GetDescriptor>
 80094b0:	4603      	mov	r3, r0
 80094b2:	72fb      	strb	r3, [r7, #11]
 80094b4:	7afb      	ldrb	r3, [r7, #11]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d107      	bne.n	80094ca <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80094c0:	887a      	ldrh	r2, [r7, #2]
 80094c2:	68f9      	ldr	r1, [r7, #12]
 80094c4:	4618      	mov	r0, r3
 80094c6:	f000 f964 	bl	8009792 <USBH_ParseCfgDesc>
  }

  return status;
 80094ca:	7afb      	ldrb	r3, [r7, #11]
}
 80094cc:	4618      	mov	r0, r3
 80094ce:	3710      	adds	r7, #16
 80094d0:	46bd      	mov	sp, r7
 80094d2:	bd80      	pop	{r7, pc}

080094d4 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b088      	sub	sp, #32
 80094d8:	af02      	add	r7, sp, #8
 80094da:	60f8      	str	r0, [r7, #12]
 80094dc:	607a      	str	r2, [r7, #4]
 80094de:	461a      	mov	r2, r3
 80094e0:	460b      	mov	r3, r1
 80094e2:	72fb      	strb	r3, [r7, #11]
 80094e4:	4613      	mov	r3, r2
 80094e6:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 80094e8:	7afb      	ldrb	r3, [r7, #11]
 80094ea:	b29b      	uxth	r3, r3
 80094ec:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80094f0:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80094f8:	893b      	ldrh	r3, [r7, #8]
 80094fa:	9300      	str	r3, [sp, #0]
 80094fc:	460b      	mov	r3, r1
 80094fe:	2100      	movs	r1, #0
 8009500:	68f8      	ldr	r0, [r7, #12]
 8009502:	f000 f812 	bl	800952a <USBH_GetDescriptor>
 8009506:	4603      	mov	r3, r0
 8009508:	75fb      	strb	r3, [r7, #23]
 800950a:	7dfb      	ldrb	r3, [r7, #23]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d107      	bne.n	8009520 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009516:	893a      	ldrh	r2, [r7, #8]
 8009518:	6879      	ldr	r1, [r7, #4]
 800951a:	4618      	mov	r0, r3
 800951c:	f000 fa37 	bl	800998e <USBH_ParseStringDesc>
  }

  return status;
 8009520:	7dfb      	ldrb	r3, [r7, #23]
}
 8009522:	4618      	mov	r0, r3
 8009524:	3718      	adds	r7, #24
 8009526:	46bd      	mov	sp, r7
 8009528:	bd80      	pop	{r7, pc}

0800952a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800952a:	b580      	push	{r7, lr}
 800952c:	b084      	sub	sp, #16
 800952e:	af00      	add	r7, sp, #0
 8009530:	60f8      	str	r0, [r7, #12]
 8009532:	607b      	str	r3, [r7, #4]
 8009534:	460b      	mov	r3, r1
 8009536:	72fb      	strb	r3, [r7, #11]
 8009538:	4613      	mov	r3, r2
 800953a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	789b      	ldrb	r3, [r3, #2]
 8009540:	2b01      	cmp	r3, #1
 8009542:	d11c      	bne.n	800957e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009544:	7afb      	ldrb	r3, [r7, #11]
 8009546:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800954a:	b2da      	uxtb	r2, r3
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	2206      	movs	r2, #6
 8009554:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	893a      	ldrh	r2, [r7, #8]
 800955a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800955c:	893b      	ldrh	r3, [r7, #8]
 800955e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009562:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009566:	d104      	bne.n	8009572 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	f240 4209 	movw	r2, #1033	; 0x409
 800956e:	829a      	strh	r2, [r3, #20]
 8009570:	e002      	b.n	8009578 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	2200      	movs	r2, #0
 8009576:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	8b3a      	ldrh	r2, [r7, #24]
 800957c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800957e:	8b3b      	ldrh	r3, [r7, #24]
 8009580:	461a      	mov	r2, r3
 8009582:	6879      	ldr	r1, [r7, #4]
 8009584:	68f8      	ldr	r0, [r7, #12]
 8009586:	f000 fa50 	bl	8009a2a <USBH_CtlReq>
 800958a:	4603      	mov	r3, r0
}
 800958c:	4618      	mov	r0, r3
 800958e:	3710      	adds	r7, #16
 8009590:	46bd      	mov	sp, r7
 8009592:	bd80      	pop	{r7, pc}

08009594 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8009594:	b580      	push	{r7, lr}
 8009596:	b082      	sub	sp, #8
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
 800959c:	460b      	mov	r3, r1
 800959e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	789b      	ldrb	r3, [r3, #2]
 80095a4:	2b01      	cmp	r3, #1
 80095a6:	d10f      	bne.n	80095c8 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2200      	movs	r2, #0
 80095ac:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	2205      	movs	r2, #5
 80095b2:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80095b4:	78fb      	ldrb	r3, [r7, #3]
 80095b6:	b29a      	uxth	r2, r3
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	2200      	movs	r2, #0
 80095c0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	2200      	movs	r2, #0
 80095c6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80095c8:	2200      	movs	r2, #0
 80095ca:	2100      	movs	r1, #0
 80095cc:	6878      	ldr	r0, [r7, #4]
 80095ce:	f000 fa2c 	bl	8009a2a <USBH_CtlReq>
 80095d2:	4603      	mov	r3, r0
}
 80095d4:	4618      	mov	r0, r3
 80095d6:	3708      	adds	r7, #8
 80095d8:	46bd      	mov	sp, r7
 80095da:	bd80      	pop	{r7, pc}

080095dc <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b082      	sub	sp, #8
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
 80095e4:	460b      	mov	r3, r1
 80095e6:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	789b      	ldrb	r3, [r3, #2]
 80095ec:	2b01      	cmp	r3, #1
 80095ee:	d10e      	bne.n	800960e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	2200      	movs	r2, #0
 80095f4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	2209      	movs	r2, #9
 80095fa:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	887a      	ldrh	r2, [r7, #2]
 8009600:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	2200      	movs	r2, #0
 8009606:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2200      	movs	r2, #0
 800960c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800960e:	2200      	movs	r2, #0
 8009610:	2100      	movs	r1, #0
 8009612:	6878      	ldr	r0, [r7, #4]
 8009614:	f000 fa09 	bl	8009a2a <USBH_CtlReq>
 8009618:	4603      	mov	r3, r0
}
 800961a:	4618      	mov	r0, r3
 800961c:	3708      	adds	r7, #8
 800961e:	46bd      	mov	sp, r7
 8009620:	bd80      	pop	{r7, pc}

08009622 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8009622:	b580      	push	{r7, lr}
 8009624:	b082      	sub	sp, #8
 8009626:	af00      	add	r7, sp, #0
 8009628:	6078      	str	r0, [r7, #4]
 800962a:	460b      	mov	r3, r1
 800962c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	789b      	ldrb	r3, [r3, #2]
 8009632:	2b01      	cmp	r3, #1
 8009634:	d10f      	bne.n	8009656 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	2200      	movs	r2, #0
 800963a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2203      	movs	r2, #3
 8009640:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8009642:	78fb      	ldrb	r3, [r7, #3]
 8009644:	b29a      	uxth	r2, r3
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	2200      	movs	r2, #0
 800964e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2200      	movs	r2, #0
 8009654:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8009656:	2200      	movs	r2, #0
 8009658:	2100      	movs	r1, #0
 800965a:	6878      	ldr	r0, [r7, #4]
 800965c:	f000 f9e5 	bl	8009a2a <USBH_CtlReq>
 8009660:	4603      	mov	r3, r0
}
 8009662:	4618      	mov	r0, r3
 8009664:	3708      	adds	r7, #8
 8009666:	46bd      	mov	sp, r7
 8009668:	bd80      	pop	{r7, pc}

0800966a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800966a:	b580      	push	{r7, lr}
 800966c:	b082      	sub	sp, #8
 800966e:	af00      	add	r7, sp, #0
 8009670:	6078      	str	r0, [r7, #4]
 8009672:	460b      	mov	r3, r1
 8009674:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	789b      	ldrb	r3, [r3, #2]
 800967a:	2b01      	cmp	r3, #1
 800967c:	d10f      	bne.n	800969e <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	2202      	movs	r2, #2
 8009682:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2201      	movs	r2, #1
 8009688:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	2200      	movs	r2, #0
 800968e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8009690:	78fb      	ldrb	r3, [r7, #3]
 8009692:	b29a      	uxth	r2, r3
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	2200      	movs	r2, #0
 800969c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800969e:	2200      	movs	r2, #0
 80096a0:	2100      	movs	r1, #0
 80096a2:	6878      	ldr	r0, [r7, #4]
 80096a4:	f000 f9c1 	bl	8009a2a <USBH_CtlReq>
 80096a8:	4603      	mov	r3, r0
}
 80096aa:	4618      	mov	r0, r3
 80096ac:	3708      	adds	r7, #8
 80096ae:	46bd      	mov	sp, r7
 80096b0:	bd80      	pop	{r7, pc}

080096b2 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80096b2:	b480      	push	{r7}
 80096b4:	b085      	sub	sp, #20
 80096b6:	af00      	add	r7, sp, #0
 80096b8:	60f8      	str	r0, [r7, #12]
 80096ba:	60b9      	str	r1, [r7, #8]
 80096bc:	4613      	mov	r3, r2
 80096be:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80096c0:	68bb      	ldr	r3, [r7, #8]
 80096c2:	781a      	ldrb	r2, [r3, #0]
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80096c8:	68bb      	ldr	r3, [r7, #8]
 80096ca:	785a      	ldrb	r2, [r3, #1]
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80096d0:	68bb      	ldr	r3, [r7, #8]
 80096d2:	3302      	adds	r3, #2
 80096d4:	781b      	ldrb	r3, [r3, #0]
 80096d6:	b29a      	uxth	r2, r3
 80096d8:	68bb      	ldr	r3, [r7, #8]
 80096da:	3303      	adds	r3, #3
 80096dc:	781b      	ldrb	r3, [r3, #0]
 80096de:	b29b      	uxth	r3, r3
 80096e0:	021b      	lsls	r3, r3, #8
 80096e2:	b29b      	uxth	r3, r3
 80096e4:	4313      	orrs	r3, r2
 80096e6:	b29a      	uxth	r2, r3
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80096ec:	68bb      	ldr	r3, [r7, #8]
 80096ee:	791a      	ldrb	r2, [r3, #4]
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80096f4:	68bb      	ldr	r3, [r7, #8]
 80096f6:	795a      	ldrb	r2, [r3, #5]
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80096fc:	68bb      	ldr	r3, [r7, #8]
 80096fe:	799a      	ldrb	r2, [r3, #6]
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8009704:	68bb      	ldr	r3, [r7, #8]
 8009706:	79da      	ldrb	r2, [r3, #7]
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800970c:	88fb      	ldrh	r3, [r7, #6]
 800970e:	2b08      	cmp	r3, #8
 8009710:	d939      	bls.n	8009786 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8009712:	68bb      	ldr	r3, [r7, #8]
 8009714:	3308      	adds	r3, #8
 8009716:	781b      	ldrb	r3, [r3, #0]
 8009718:	b29a      	uxth	r2, r3
 800971a:	68bb      	ldr	r3, [r7, #8]
 800971c:	3309      	adds	r3, #9
 800971e:	781b      	ldrb	r3, [r3, #0]
 8009720:	b29b      	uxth	r3, r3
 8009722:	021b      	lsls	r3, r3, #8
 8009724:	b29b      	uxth	r3, r3
 8009726:	4313      	orrs	r3, r2
 8009728:	b29a      	uxth	r2, r3
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800972e:	68bb      	ldr	r3, [r7, #8]
 8009730:	330a      	adds	r3, #10
 8009732:	781b      	ldrb	r3, [r3, #0]
 8009734:	b29a      	uxth	r2, r3
 8009736:	68bb      	ldr	r3, [r7, #8]
 8009738:	330b      	adds	r3, #11
 800973a:	781b      	ldrb	r3, [r3, #0]
 800973c:	b29b      	uxth	r3, r3
 800973e:	021b      	lsls	r3, r3, #8
 8009740:	b29b      	uxth	r3, r3
 8009742:	4313      	orrs	r3, r2
 8009744:	b29a      	uxth	r2, r3
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800974a:	68bb      	ldr	r3, [r7, #8]
 800974c:	330c      	adds	r3, #12
 800974e:	781b      	ldrb	r3, [r3, #0]
 8009750:	b29a      	uxth	r2, r3
 8009752:	68bb      	ldr	r3, [r7, #8]
 8009754:	330d      	adds	r3, #13
 8009756:	781b      	ldrb	r3, [r3, #0]
 8009758:	b29b      	uxth	r3, r3
 800975a:	021b      	lsls	r3, r3, #8
 800975c:	b29b      	uxth	r3, r3
 800975e:	4313      	orrs	r3, r2
 8009760:	b29a      	uxth	r2, r3
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8009766:	68bb      	ldr	r3, [r7, #8]
 8009768:	7b9a      	ldrb	r2, [r3, #14]
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800976e:	68bb      	ldr	r3, [r7, #8]
 8009770:	7bda      	ldrb	r2, [r3, #15]
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8009776:	68bb      	ldr	r3, [r7, #8]
 8009778:	7c1a      	ldrb	r2, [r3, #16]
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800977e:	68bb      	ldr	r3, [r7, #8]
 8009780:	7c5a      	ldrb	r2, [r3, #17]
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	745a      	strb	r2, [r3, #17]
  }
}
 8009786:	bf00      	nop
 8009788:	3714      	adds	r7, #20
 800978a:	46bd      	mov	sp, r7
 800978c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009790:	4770      	bx	lr

08009792 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8009792:	b580      	push	{r7, lr}
 8009794:	b08a      	sub	sp, #40	; 0x28
 8009796:	af00      	add	r7, sp, #0
 8009798:	60f8      	str	r0, [r7, #12]
 800979a:	60b9      	str	r1, [r7, #8]
 800979c:	4613      	mov	r3, r2
 800979e:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80097a0:	68bb      	ldr	r3, [r7, #8]
 80097a2:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80097a4:	2300      	movs	r3, #0
 80097a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 80097aa:	2300      	movs	r3, #0
 80097ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80097b0:	68bb      	ldr	r3, [r7, #8]
 80097b2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80097b4:	68bb      	ldr	r3, [r7, #8]
 80097b6:	781a      	ldrb	r2, [r3, #0]
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80097bc:	68bb      	ldr	r3, [r7, #8]
 80097be:	785a      	ldrb	r2, [r3, #1]
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 80097c4:	68bb      	ldr	r3, [r7, #8]
 80097c6:	3302      	adds	r3, #2
 80097c8:	781b      	ldrb	r3, [r3, #0]
 80097ca:	b29a      	uxth	r2, r3
 80097cc:	68bb      	ldr	r3, [r7, #8]
 80097ce:	3303      	adds	r3, #3
 80097d0:	781b      	ldrb	r3, [r3, #0]
 80097d2:	b29b      	uxth	r3, r3
 80097d4:	021b      	lsls	r3, r3, #8
 80097d6:	b29b      	uxth	r3, r3
 80097d8:	4313      	orrs	r3, r2
 80097da:	b29a      	uxth	r2, r3
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80097e0:	68bb      	ldr	r3, [r7, #8]
 80097e2:	791a      	ldrb	r2, [r3, #4]
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80097e8:	68bb      	ldr	r3, [r7, #8]
 80097ea:	795a      	ldrb	r2, [r3, #5]
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80097f0:	68bb      	ldr	r3, [r7, #8]
 80097f2:	799a      	ldrb	r2, [r3, #6]
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80097f8:	68bb      	ldr	r3, [r7, #8]
 80097fa:	79da      	ldrb	r2, [r3, #7]
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8009800:	68bb      	ldr	r3, [r7, #8]
 8009802:	7a1a      	ldrb	r2, [r3, #8]
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8009808:	88fb      	ldrh	r3, [r7, #6]
 800980a:	2b09      	cmp	r3, #9
 800980c:	d95f      	bls.n	80098ce <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800980e:	2309      	movs	r3, #9
 8009810:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8009812:	2300      	movs	r3, #0
 8009814:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009816:	e051      	b.n	80098bc <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009818:	f107 0316 	add.w	r3, r7, #22
 800981c:	4619      	mov	r1, r3
 800981e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009820:	f000 f8e8 	bl	80099f4 <USBH_GetNextDesc>
 8009824:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8009826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009828:	785b      	ldrb	r3, [r3, #1]
 800982a:	2b04      	cmp	r3, #4
 800982c:	d146      	bne.n	80098bc <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800982e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009832:	221a      	movs	r2, #26
 8009834:	fb02 f303 	mul.w	r3, r2, r3
 8009838:	3308      	adds	r3, #8
 800983a:	68fa      	ldr	r2, [r7, #12]
 800983c:	4413      	add	r3, r2
 800983e:	3302      	adds	r3, #2
 8009840:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8009842:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009844:	69f8      	ldr	r0, [r7, #28]
 8009846:	f000 f846 	bl	80098d6 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800984a:	2300      	movs	r3, #0
 800984c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8009850:	2300      	movs	r3, #0
 8009852:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009854:	e022      	b.n	800989c <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009856:	f107 0316 	add.w	r3, r7, #22
 800985a:	4619      	mov	r1, r3
 800985c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800985e:	f000 f8c9 	bl	80099f4 <USBH_GetNextDesc>
 8009862:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8009864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009866:	785b      	ldrb	r3, [r3, #1]
 8009868:	2b05      	cmp	r3, #5
 800986a:	d117      	bne.n	800989c <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800986c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009870:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8009874:	3201      	adds	r2, #1
 8009876:	00d2      	lsls	r2, r2, #3
 8009878:	211a      	movs	r1, #26
 800987a:	fb01 f303 	mul.w	r3, r1, r3
 800987e:	4413      	add	r3, r2
 8009880:	3308      	adds	r3, #8
 8009882:	68fa      	ldr	r2, [r7, #12]
 8009884:	4413      	add	r3, r2
 8009886:	3304      	adds	r3, #4
 8009888:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800988a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800988c:	69b8      	ldr	r0, [r7, #24]
 800988e:	f000 f851 	bl	8009934 <USBH_ParseEPDesc>
            ep_ix++;
 8009892:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8009896:	3301      	adds	r3, #1
 8009898:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800989c:	69fb      	ldr	r3, [r7, #28]
 800989e:	791b      	ldrb	r3, [r3, #4]
 80098a0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80098a4:	429a      	cmp	r2, r3
 80098a6:	d204      	bcs.n	80098b2 <USBH_ParseCfgDesc+0x120>
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	885a      	ldrh	r2, [r3, #2]
 80098ac:	8afb      	ldrh	r3, [r7, #22]
 80098ae:	429a      	cmp	r2, r3
 80098b0:	d8d1      	bhi.n	8009856 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 80098b2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80098b6:	3301      	adds	r3, #1
 80098b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80098bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80098c0:	2b01      	cmp	r3, #1
 80098c2:	d804      	bhi.n	80098ce <USBH_ParseCfgDesc+0x13c>
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	885a      	ldrh	r2, [r3, #2]
 80098c8:	8afb      	ldrh	r3, [r7, #22]
 80098ca:	429a      	cmp	r2, r3
 80098cc:	d8a4      	bhi.n	8009818 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 80098ce:	bf00      	nop
 80098d0:	3728      	adds	r7, #40	; 0x28
 80098d2:	46bd      	mov	sp, r7
 80098d4:	bd80      	pop	{r7, pc}

080098d6 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 80098d6:	b480      	push	{r7}
 80098d8:	b083      	sub	sp, #12
 80098da:	af00      	add	r7, sp, #0
 80098dc:	6078      	str	r0, [r7, #4]
 80098de:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	781a      	ldrb	r2, [r3, #0]
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80098e8:	683b      	ldr	r3, [r7, #0]
 80098ea:	785a      	ldrb	r2, [r3, #1]
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	789a      	ldrb	r2, [r3, #2]
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	78da      	ldrb	r2, [r3, #3]
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	791a      	ldrb	r2, [r3, #4]
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8009908:	683b      	ldr	r3, [r7, #0]
 800990a:	795a      	ldrb	r2, [r3, #5]
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	799a      	ldrb	r2, [r3, #6]
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8009918:	683b      	ldr	r3, [r7, #0]
 800991a:	79da      	ldrb	r2, [r3, #7]
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8009920:	683b      	ldr	r3, [r7, #0]
 8009922:	7a1a      	ldrb	r2, [r3, #8]
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	721a      	strb	r2, [r3, #8]
}
 8009928:	bf00      	nop
 800992a:	370c      	adds	r7, #12
 800992c:	46bd      	mov	sp, r7
 800992e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009932:	4770      	bx	lr

08009934 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8009934:	b480      	push	{r7}
 8009936:	b083      	sub	sp, #12
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
 800993c:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	781a      	ldrb	r2, [r3, #0]
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8009946:	683b      	ldr	r3, [r7, #0]
 8009948:	785a      	ldrb	r2, [r3, #1]
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800994e:	683b      	ldr	r3, [r7, #0]
 8009950:	789a      	ldrb	r2, [r3, #2]
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8009956:	683b      	ldr	r3, [r7, #0]
 8009958:	78da      	ldrb	r2, [r3, #3]
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	3304      	adds	r3, #4
 8009962:	781b      	ldrb	r3, [r3, #0]
 8009964:	b29a      	uxth	r2, r3
 8009966:	683b      	ldr	r3, [r7, #0]
 8009968:	3305      	adds	r3, #5
 800996a:	781b      	ldrb	r3, [r3, #0]
 800996c:	b29b      	uxth	r3, r3
 800996e:	021b      	lsls	r3, r3, #8
 8009970:	b29b      	uxth	r3, r3
 8009972:	4313      	orrs	r3, r2
 8009974:	b29a      	uxth	r2, r3
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800997a:	683b      	ldr	r3, [r7, #0]
 800997c:	799a      	ldrb	r2, [r3, #6]
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	719a      	strb	r2, [r3, #6]
}
 8009982:	bf00      	nop
 8009984:	370c      	adds	r7, #12
 8009986:	46bd      	mov	sp, r7
 8009988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998c:	4770      	bx	lr

0800998e <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800998e:	b480      	push	{r7}
 8009990:	b087      	sub	sp, #28
 8009992:	af00      	add	r7, sp, #0
 8009994:	60f8      	str	r0, [r7, #12]
 8009996:	60b9      	str	r1, [r7, #8]
 8009998:	4613      	mov	r3, r2
 800999a:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	3301      	adds	r3, #1
 80099a0:	781b      	ldrb	r3, [r3, #0]
 80099a2:	2b03      	cmp	r3, #3
 80099a4:	d120      	bne.n	80099e8 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	781b      	ldrb	r3, [r3, #0]
 80099aa:	1e9a      	subs	r2, r3, #2
 80099ac:	88fb      	ldrh	r3, [r7, #6]
 80099ae:	4293      	cmp	r3, r2
 80099b0:	bf28      	it	cs
 80099b2:	4613      	movcs	r3, r2
 80099b4:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	3302      	adds	r3, #2
 80099ba:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80099bc:	2300      	movs	r3, #0
 80099be:	82fb      	strh	r3, [r7, #22]
 80099c0:	e00b      	b.n	80099da <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80099c2:	8afb      	ldrh	r3, [r7, #22]
 80099c4:	68fa      	ldr	r2, [r7, #12]
 80099c6:	4413      	add	r3, r2
 80099c8:	781a      	ldrb	r2, [r3, #0]
 80099ca:	68bb      	ldr	r3, [r7, #8]
 80099cc:	701a      	strb	r2, [r3, #0]
      pdest++;
 80099ce:	68bb      	ldr	r3, [r7, #8]
 80099d0:	3301      	adds	r3, #1
 80099d2:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80099d4:	8afb      	ldrh	r3, [r7, #22]
 80099d6:	3302      	adds	r3, #2
 80099d8:	82fb      	strh	r3, [r7, #22]
 80099da:	8afa      	ldrh	r2, [r7, #22]
 80099dc:	8abb      	ldrh	r3, [r7, #20]
 80099de:	429a      	cmp	r2, r3
 80099e0:	d3ef      	bcc.n	80099c2 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80099e2:	68bb      	ldr	r3, [r7, #8]
 80099e4:	2200      	movs	r2, #0
 80099e6:	701a      	strb	r2, [r3, #0]
  }
}
 80099e8:	bf00      	nop
 80099ea:	371c      	adds	r7, #28
 80099ec:	46bd      	mov	sp, r7
 80099ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f2:	4770      	bx	lr

080099f4 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 80099f4:	b480      	push	{r7}
 80099f6:	b085      	sub	sp, #20
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
 80099fc:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80099fe:	683b      	ldr	r3, [r7, #0]
 8009a00:	881a      	ldrh	r2, [r3, #0]
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	781b      	ldrb	r3, [r3, #0]
 8009a06:	b29b      	uxth	r3, r3
 8009a08:	4413      	add	r3, r2
 8009a0a:	b29a      	uxth	r2, r3
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	781b      	ldrb	r3, [r3, #0]
 8009a14:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	4413      	add	r3, r2
 8009a1a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009a1c:	68fb      	ldr	r3, [r7, #12]
}
 8009a1e:	4618      	mov	r0, r3
 8009a20:	3714      	adds	r7, #20
 8009a22:	46bd      	mov	sp, r7
 8009a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a28:	4770      	bx	lr

08009a2a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8009a2a:	b580      	push	{r7, lr}
 8009a2c:	b086      	sub	sp, #24
 8009a2e:	af00      	add	r7, sp, #0
 8009a30:	60f8      	str	r0, [r7, #12]
 8009a32:	60b9      	str	r1, [r7, #8]
 8009a34:	4613      	mov	r3, r2
 8009a36:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8009a38:	2301      	movs	r3, #1
 8009a3a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	789b      	ldrb	r3, [r3, #2]
 8009a40:	2b01      	cmp	r3, #1
 8009a42:	d002      	beq.n	8009a4a <USBH_CtlReq+0x20>
 8009a44:	2b02      	cmp	r3, #2
 8009a46:	d00f      	beq.n	8009a68 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8009a48:	e027      	b.n	8009a9a <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	68ba      	ldr	r2, [r7, #8]
 8009a4e:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	88fa      	ldrh	r2, [r7, #6]
 8009a54:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	2201      	movs	r2, #1
 8009a5a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	2202      	movs	r2, #2
 8009a60:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8009a62:	2301      	movs	r3, #1
 8009a64:	75fb      	strb	r3, [r7, #23]
      break;
 8009a66:	e018      	b.n	8009a9a <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8009a68:	68f8      	ldr	r0, [r7, #12]
 8009a6a:	f000 f81b 	bl	8009aa4 <USBH_HandleControl>
 8009a6e:	4603      	mov	r3, r0
 8009a70:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8009a72:	7dfb      	ldrb	r3, [r7, #23]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d002      	beq.n	8009a7e <USBH_CtlReq+0x54>
 8009a78:	7dfb      	ldrb	r3, [r7, #23]
 8009a7a:	2b03      	cmp	r3, #3
 8009a7c:	d106      	bne.n	8009a8c <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	2201      	movs	r2, #1
 8009a82:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	2200      	movs	r2, #0
 8009a88:	761a      	strb	r2, [r3, #24]
      break;
 8009a8a:	e005      	b.n	8009a98 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8009a8c:	7dfb      	ldrb	r3, [r7, #23]
 8009a8e:	2b02      	cmp	r3, #2
 8009a90:	d102      	bne.n	8009a98 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	2201      	movs	r2, #1
 8009a96:	709a      	strb	r2, [r3, #2]
      break;
 8009a98:	bf00      	nop
  }
  return status;
 8009a9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	3718      	adds	r7, #24
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	bd80      	pop	{r7, pc}

08009aa4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	b086      	sub	sp, #24
 8009aa8:	af02      	add	r7, sp, #8
 8009aaa:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8009aac:	2301      	movs	r3, #1
 8009aae:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	7e1b      	ldrb	r3, [r3, #24]
 8009ab8:	3b01      	subs	r3, #1
 8009aba:	2b0a      	cmp	r3, #10
 8009abc:	f200 8156 	bhi.w	8009d6c <USBH_HandleControl+0x2c8>
 8009ac0:	a201      	add	r2, pc, #4	; (adr r2, 8009ac8 <USBH_HandleControl+0x24>)
 8009ac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ac6:	bf00      	nop
 8009ac8:	08009af5 	.word	0x08009af5
 8009acc:	08009b0f 	.word	0x08009b0f
 8009ad0:	08009b79 	.word	0x08009b79
 8009ad4:	08009b9f 	.word	0x08009b9f
 8009ad8:	08009bd7 	.word	0x08009bd7
 8009adc:	08009c01 	.word	0x08009c01
 8009ae0:	08009c53 	.word	0x08009c53
 8009ae4:	08009c75 	.word	0x08009c75
 8009ae8:	08009cb1 	.word	0x08009cb1
 8009aec:	08009cd7 	.word	0x08009cd7
 8009af0:	08009d15 	.word	0x08009d15
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	f103 0110 	add.w	r1, r3, #16
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	795b      	ldrb	r3, [r3, #5]
 8009afe:	461a      	mov	r2, r3
 8009b00:	6878      	ldr	r0, [r7, #4]
 8009b02:	f000 f943 	bl	8009d8c <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	2202      	movs	r2, #2
 8009b0a:	761a      	strb	r2, [r3, #24]
      break;
 8009b0c:	e139      	b.n	8009d82 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	795b      	ldrb	r3, [r3, #5]
 8009b12:	4619      	mov	r1, r3
 8009b14:	6878      	ldr	r0, [r7, #4]
 8009b16:	f005 fd71 	bl	800f5fc <USBH_LL_GetURBState>
 8009b1a:	4603      	mov	r3, r0
 8009b1c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8009b1e:	7bbb      	ldrb	r3, [r7, #14]
 8009b20:	2b01      	cmp	r3, #1
 8009b22:	d11e      	bne.n	8009b62 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	7c1b      	ldrb	r3, [r3, #16]
 8009b28:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009b2c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	8adb      	ldrh	r3, [r3, #22]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d00a      	beq.n	8009b4c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8009b36:	7b7b      	ldrb	r3, [r7, #13]
 8009b38:	2b80      	cmp	r3, #128	; 0x80
 8009b3a:	d103      	bne.n	8009b44 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2203      	movs	r2, #3
 8009b40:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009b42:	e115      	b.n	8009d70 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	2205      	movs	r2, #5
 8009b48:	761a      	strb	r2, [r3, #24]
      break;
 8009b4a:	e111      	b.n	8009d70 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8009b4c:	7b7b      	ldrb	r3, [r7, #13]
 8009b4e:	2b80      	cmp	r3, #128	; 0x80
 8009b50:	d103      	bne.n	8009b5a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	2209      	movs	r2, #9
 8009b56:	761a      	strb	r2, [r3, #24]
      break;
 8009b58:	e10a      	b.n	8009d70 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	2207      	movs	r2, #7
 8009b5e:	761a      	strb	r2, [r3, #24]
      break;
 8009b60:	e106      	b.n	8009d70 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8009b62:	7bbb      	ldrb	r3, [r7, #14]
 8009b64:	2b04      	cmp	r3, #4
 8009b66:	d003      	beq.n	8009b70 <USBH_HandleControl+0xcc>
 8009b68:	7bbb      	ldrb	r3, [r7, #14]
 8009b6a:	2b02      	cmp	r3, #2
 8009b6c:	f040 8100 	bne.w	8009d70 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	220b      	movs	r2, #11
 8009b74:	761a      	strb	r2, [r3, #24]
      break;
 8009b76:	e0fb      	b.n	8009d70 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009b7e:	b29a      	uxth	r2, r3
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	6899      	ldr	r1, [r3, #8]
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	899a      	ldrh	r2, [r3, #12]
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	791b      	ldrb	r3, [r3, #4]
 8009b90:	6878      	ldr	r0, [r7, #4]
 8009b92:	f000 f93a 	bl	8009e0a <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	2204      	movs	r2, #4
 8009b9a:	761a      	strb	r2, [r3, #24]
      break;
 8009b9c:	e0f1      	b.n	8009d82 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	791b      	ldrb	r3, [r3, #4]
 8009ba2:	4619      	mov	r1, r3
 8009ba4:	6878      	ldr	r0, [r7, #4]
 8009ba6:	f005 fd29 	bl	800f5fc <USBH_LL_GetURBState>
 8009baa:	4603      	mov	r3, r0
 8009bac:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8009bae:	7bbb      	ldrb	r3, [r7, #14]
 8009bb0:	2b01      	cmp	r3, #1
 8009bb2:	d102      	bne.n	8009bba <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2209      	movs	r2, #9
 8009bb8:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8009bba:	7bbb      	ldrb	r3, [r7, #14]
 8009bbc:	2b05      	cmp	r3, #5
 8009bbe:	d102      	bne.n	8009bc6 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8009bc0:	2303      	movs	r3, #3
 8009bc2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009bc4:	e0d6      	b.n	8009d74 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8009bc6:	7bbb      	ldrb	r3, [r7, #14]
 8009bc8:	2b04      	cmp	r3, #4
 8009bca:	f040 80d3 	bne.w	8009d74 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	220b      	movs	r2, #11
 8009bd2:	761a      	strb	r2, [r3, #24]
      break;
 8009bd4:	e0ce      	b.n	8009d74 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	6899      	ldr	r1, [r3, #8]
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	899a      	ldrh	r2, [r3, #12]
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	795b      	ldrb	r3, [r3, #5]
 8009be2:	2001      	movs	r0, #1
 8009be4:	9000      	str	r0, [sp, #0]
 8009be6:	6878      	ldr	r0, [r7, #4]
 8009be8:	f000 f8ea 	bl	8009dc0 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009bf2:	b29a      	uxth	r2, r3
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	2206      	movs	r2, #6
 8009bfc:	761a      	strb	r2, [r3, #24]
      break;
 8009bfe:	e0c0      	b.n	8009d82 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	795b      	ldrb	r3, [r3, #5]
 8009c04:	4619      	mov	r1, r3
 8009c06:	6878      	ldr	r0, [r7, #4]
 8009c08:	f005 fcf8 	bl	800f5fc <USBH_LL_GetURBState>
 8009c0c:	4603      	mov	r3, r0
 8009c0e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009c10:	7bbb      	ldrb	r3, [r7, #14]
 8009c12:	2b01      	cmp	r3, #1
 8009c14:	d103      	bne.n	8009c1e <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	2207      	movs	r2, #7
 8009c1a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009c1c:	e0ac      	b.n	8009d78 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8009c1e:	7bbb      	ldrb	r3, [r7, #14]
 8009c20:	2b05      	cmp	r3, #5
 8009c22:	d105      	bne.n	8009c30 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	220c      	movs	r2, #12
 8009c28:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8009c2a:	2303      	movs	r3, #3
 8009c2c:	73fb      	strb	r3, [r7, #15]
      break;
 8009c2e:	e0a3      	b.n	8009d78 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009c30:	7bbb      	ldrb	r3, [r7, #14]
 8009c32:	2b02      	cmp	r3, #2
 8009c34:	d103      	bne.n	8009c3e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	2205      	movs	r2, #5
 8009c3a:	761a      	strb	r2, [r3, #24]
      break;
 8009c3c:	e09c      	b.n	8009d78 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8009c3e:	7bbb      	ldrb	r3, [r7, #14]
 8009c40:	2b04      	cmp	r3, #4
 8009c42:	f040 8099 	bne.w	8009d78 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	220b      	movs	r2, #11
 8009c4a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8009c4c:	2302      	movs	r3, #2
 8009c4e:	73fb      	strb	r3, [r7, #15]
      break;
 8009c50:	e092      	b.n	8009d78 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	791b      	ldrb	r3, [r3, #4]
 8009c56:	2200      	movs	r2, #0
 8009c58:	2100      	movs	r1, #0
 8009c5a:	6878      	ldr	r0, [r7, #4]
 8009c5c:	f000 f8d5 	bl	8009e0a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009c66:	b29a      	uxth	r2, r3
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	2208      	movs	r2, #8
 8009c70:	761a      	strb	r2, [r3, #24]

      break;
 8009c72:	e086      	b.n	8009d82 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	791b      	ldrb	r3, [r3, #4]
 8009c78:	4619      	mov	r1, r3
 8009c7a:	6878      	ldr	r0, [r7, #4]
 8009c7c:	f005 fcbe 	bl	800f5fc <USBH_LL_GetURBState>
 8009c80:	4603      	mov	r3, r0
 8009c82:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009c84:	7bbb      	ldrb	r3, [r7, #14]
 8009c86:	2b01      	cmp	r3, #1
 8009c88:	d105      	bne.n	8009c96 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	220d      	movs	r2, #13
 8009c8e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8009c90:	2300      	movs	r3, #0
 8009c92:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009c94:	e072      	b.n	8009d7c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8009c96:	7bbb      	ldrb	r3, [r7, #14]
 8009c98:	2b04      	cmp	r3, #4
 8009c9a:	d103      	bne.n	8009ca4 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	220b      	movs	r2, #11
 8009ca0:	761a      	strb	r2, [r3, #24]
      break;
 8009ca2:	e06b      	b.n	8009d7c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8009ca4:	7bbb      	ldrb	r3, [r7, #14]
 8009ca6:	2b05      	cmp	r3, #5
 8009ca8:	d168      	bne.n	8009d7c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8009caa:	2303      	movs	r3, #3
 8009cac:	73fb      	strb	r3, [r7, #15]
      break;
 8009cae:	e065      	b.n	8009d7c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	795b      	ldrb	r3, [r3, #5]
 8009cb4:	2201      	movs	r2, #1
 8009cb6:	9200      	str	r2, [sp, #0]
 8009cb8:	2200      	movs	r2, #0
 8009cba:	2100      	movs	r1, #0
 8009cbc:	6878      	ldr	r0, [r7, #4]
 8009cbe:	f000 f87f 	bl	8009dc0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009cc8:	b29a      	uxth	r2, r3
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	220a      	movs	r2, #10
 8009cd2:	761a      	strb	r2, [r3, #24]
      break;
 8009cd4:	e055      	b.n	8009d82 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	795b      	ldrb	r3, [r3, #5]
 8009cda:	4619      	mov	r1, r3
 8009cdc:	6878      	ldr	r0, [r7, #4]
 8009cde:	f005 fc8d 	bl	800f5fc <USBH_LL_GetURBState>
 8009ce2:	4603      	mov	r3, r0
 8009ce4:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8009ce6:	7bbb      	ldrb	r3, [r7, #14]
 8009ce8:	2b01      	cmp	r3, #1
 8009cea:	d105      	bne.n	8009cf8 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8009cec:	2300      	movs	r3, #0
 8009cee:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	220d      	movs	r2, #13
 8009cf4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009cf6:	e043      	b.n	8009d80 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009cf8:	7bbb      	ldrb	r3, [r7, #14]
 8009cfa:	2b02      	cmp	r3, #2
 8009cfc:	d103      	bne.n	8009d06 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	2209      	movs	r2, #9
 8009d02:	761a      	strb	r2, [r3, #24]
      break;
 8009d04:	e03c      	b.n	8009d80 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8009d06:	7bbb      	ldrb	r3, [r7, #14]
 8009d08:	2b04      	cmp	r3, #4
 8009d0a:	d139      	bne.n	8009d80 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	220b      	movs	r2, #11
 8009d10:	761a      	strb	r2, [r3, #24]
      break;
 8009d12:	e035      	b.n	8009d80 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	7e5b      	ldrb	r3, [r3, #25]
 8009d18:	3301      	adds	r3, #1
 8009d1a:	b2da      	uxtb	r2, r3
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	765a      	strb	r2, [r3, #25]
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	7e5b      	ldrb	r3, [r3, #25]
 8009d24:	2b02      	cmp	r3, #2
 8009d26:	d806      	bhi.n	8009d36 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	2201      	movs	r2, #1
 8009d2c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	2201      	movs	r2, #1
 8009d32:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8009d34:	e025      	b.n	8009d82 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009d3c:	2106      	movs	r1, #6
 8009d3e:	6878      	ldr	r0, [r7, #4]
 8009d40:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	2200      	movs	r2, #0
 8009d46:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	795b      	ldrb	r3, [r3, #5]
 8009d4c:	4619      	mov	r1, r3
 8009d4e:	6878      	ldr	r0, [r7, #4]
 8009d50:	f000 f90c 	bl	8009f6c <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	791b      	ldrb	r3, [r3, #4]
 8009d58:	4619      	mov	r1, r3
 8009d5a:	6878      	ldr	r0, [r7, #4]
 8009d5c:	f000 f906 	bl	8009f6c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	2200      	movs	r2, #0
 8009d64:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8009d66:	2302      	movs	r3, #2
 8009d68:	73fb      	strb	r3, [r7, #15]
      break;
 8009d6a:	e00a      	b.n	8009d82 <USBH_HandleControl+0x2de>

    default:
      break;
 8009d6c:	bf00      	nop
 8009d6e:	e008      	b.n	8009d82 <USBH_HandleControl+0x2de>
      break;
 8009d70:	bf00      	nop
 8009d72:	e006      	b.n	8009d82 <USBH_HandleControl+0x2de>
      break;
 8009d74:	bf00      	nop
 8009d76:	e004      	b.n	8009d82 <USBH_HandleControl+0x2de>
      break;
 8009d78:	bf00      	nop
 8009d7a:	e002      	b.n	8009d82 <USBH_HandleControl+0x2de>
      break;
 8009d7c:	bf00      	nop
 8009d7e:	e000      	b.n	8009d82 <USBH_HandleControl+0x2de>
      break;
 8009d80:	bf00      	nop
  }

  return status;
 8009d82:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d84:	4618      	mov	r0, r3
 8009d86:	3710      	adds	r7, #16
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	bd80      	pop	{r7, pc}

08009d8c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b088      	sub	sp, #32
 8009d90:	af04      	add	r7, sp, #16
 8009d92:	60f8      	str	r0, [r7, #12]
 8009d94:	60b9      	str	r1, [r7, #8]
 8009d96:	4613      	mov	r3, r2
 8009d98:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009d9a:	79f9      	ldrb	r1, [r7, #7]
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	9303      	str	r3, [sp, #12]
 8009da0:	2308      	movs	r3, #8
 8009da2:	9302      	str	r3, [sp, #8]
 8009da4:	68bb      	ldr	r3, [r7, #8]
 8009da6:	9301      	str	r3, [sp, #4]
 8009da8:	2300      	movs	r3, #0
 8009daa:	9300      	str	r3, [sp, #0]
 8009dac:	2300      	movs	r3, #0
 8009dae:	2200      	movs	r2, #0
 8009db0:	68f8      	ldr	r0, [r7, #12]
 8009db2:	f005 fbf2 	bl	800f59a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8009db6:	2300      	movs	r3, #0
}
 8009db8:	4618      	mov	r0, r3
 8009dba:	3710      	adds	r7, #16
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	bd80      	pop	{r7, pc}

08009dc0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b088      	sub	sp, #32
 8009dc4:	af04      	add	r7, sp, #16
 8009dc6:	60f8      	str	r0, [r7, #12]
 8009dc8:	60b9      	str	r1, [r7, #8]
 8009dca:	4611      	mov	r1, r2
 8009dcc:	461a      	mov	r2, r3
 8009dce:	460b      	mov	r3, r1
 8009dd0:	80fb      	strh	r3, [r7, #6]
 8009dd2:	4613      	mov	r3, r2
 8009dd4:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d001      	beq.n	8009de4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8009de0:	2300      	movs	r3, #0
 8009de2:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009de4:	7979      	ldrb	r1, [r7, #5]
 8009de6:	7e3b      	ldrb	r3, [r7, #24]
 8009de8:	9303      	str	r3, [sp, #12]
 8009dea:	88fb      	ldrh	r3, [r7, #6]
 8009dec:	9302      	str	r3, [sp, #8]
 8009dee:	68bb      	ldr	r3, [r7, #8]
 8009df0:	9301      	str	r3, [sp, #4]
 8009df2:	2301      	movs	r3, #1
 8009df4:	9300      	str	r3, [sp, #0]
 8009df6:	2300      	movs	r3, #0
 8009df8:	2200      	movs	r2, #0
 8009dfa:	68f8      	ldr	r0, [r7, #12]
 8009dfc:	f005 fbcd 	bl	800f59a <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009e00:	2300      	movs	r3, #0
}
 8009e02:	4618      	mov	r0, r3
 8009e04:	3710      	adds	r7, #16
 8009e06:	46bd      	mov	sp, r7
 8009e08:	bd80      	pop	{r7, pc}

08009e0a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8009e0a:	b580      	push	{r7, lr}
 8009e0c:	b088      	sub	sp, #32
 8009e0e:	af04      	add	r7, sp, #16
 8009e10:	60f8      	str	r0, [r7, #12]
 8009e12:	60b9      	str	r1, [r7, #8]
 8009e14:	4611      	mov	r1, r2
 8009e16:	461a      	mov	r2, r3
 8009e18:	460b      	mov	r3, r1
 8009e1a:	80fb      	strh	r3, [r7, #6]
 8009e1c:	4613      	mov	r3, r2
 8009e1e:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009e20:	7979      	ldrb	r1, [r7, #5]
 8009e22:	2300      	movs	r3, #0
 8009e24:	9303      	str	r3, [sp, #12]
 8009e26:	88fb      	ldrh	r3, [r7, #6]
 8009e28:	9302      	str	r3, [sp, #8]
 8009e2a:	68bb      	ldr	r3, [r7, #8]
 8009e2c:	9301      	str	r3, [sp, #4]
 8009e2e:	2301      	movs	r3, #1
 8009e30:	9300      	str	r3, [sp, #0]
 8009e32:	2300      	movs	r3, #0
 8009e34:	2201      	movs	r2, #1
 8009e36:	68f8      	ldr	r0, [r7, #12]
 8009e38:	f005 fbaf 	bl	800f59a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8009e3c:	2300      	movs	r3, #0

}
 8009e3e:	4618      	mov	r0, r3
 8009e40:	3710      	adds	r7, #16
 8009e42:	46bd      	mov	sp, r7
 8009e44:	bd80      	pop	{r7, pc}

08009e46 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8009e46:	b580      	push	{r7, lr}
 8009e48:	b088      	sub	sp, #32
 8009e4a:	af04      	add	r7, sp, #16
 8009e4c:	60f8      	str	r0, [r7, #12]
 8009e4e:	60b9      	str	r1, [r7, #8]
 8009e50:	4611      	mov	r1, r2
 8009e52:	461a      	mov	r2, r3
 8009e54:	460b      	mov	r3, r1
 8009e56:	80fb      	strh	r3, [r7, #6]
 8009e58:	4613      	mov	r3, r2
 8009e5a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d001      	beq.n	8009e6a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8009e66:	2300      	movs	r3, #0
 8009e68:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009e6a:	7979      	ldrb	r1, [r7, #5]
 8009e6c:	7e3b      	ldrb	r3, [r7, #24]
 8009e6e:	9303      	str	r3, [sp, #12]
 8009e70:	88fb      	ldrh	r3, [r7, #6]
 8009e72:	9302      	str	r3, [sp, #8]
 8009e74:	68bb      	ldr	r3, [r7, #8]
 8009e76:	9301      	str	r3, [sp, #4]
 8009e78:	2301      	movs	r3, #1
 8009e7a:	9300      	str	r3, [sp, #0]
 8009e7c:	2302      	movs	r3, #2
 8009e7e:	2200      	movs	r2, #0
 8009e80:	68f8      	ldr	r0, [r7, #12]
 8009e82:	f005 fb8a 	bl	800f59a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8009e86:	2300      	movs	r3, #0
}
 8009e88:	4618      	mov	r0, r3
 8009e8a:	3710      	adds	r7, #16
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	bd80      	pop	{r7, pc}

08009e90 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8009e90:	b580      	push	{r7, lr}
 8009e92:	b088      	sub	sp, #32
 8009e94:	af04      	add	r7, sp, #16
 8009e96:	60f8      	str	r0, [r7, #12]
 8009e98:	60b9      	str	r1, [r7, #8]
 8009e9a:	4611      	mov	r1, r2
 8009e9c:	461a      	mov	r2, r3
 8009e9e:	460b      	mov	r3, r1
 8009ea0:	80fb      	strh	r3, [r7, #6]
 8009ea2:	4613      	mov	r3, r2
 8009ea4:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009ea6:	7979      	ldrb	r1, [r7, #5]
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	9303      	str	r3, [sp, #12]
 8009eac:	88fb      	ldrh	r3, [r7, #6]
 8009eae:	9302      	str	r3, [sp, #8]
 8009eb0:	68bb      	ldr	r3, [r7, #8]
 8009eb2:	9301      	str	r3, [sp, #4]
 8009eb4:	2301      	movs	r3, #1
 8009eb6:	9300      	str	r3, [sp, #0]
 8009eb8:	2302      	movs	r3, #2
 8009eba:	2201      	movs	r2, #1
 8009ebc:	68f8      	ldr	r0, [r7, #12]
 8009ebe:	f005 fb6c 	bl	800f59a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8009ec2:	2300      	movs	r3, #0
}
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	3710      	adds	r7, #16
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	bd80      	pop	{r7, pc}

08009ecc <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009ecc:	b580      	push	{r7, lr}
 8009ece:	b086      	sub	sp, #24
 8009ed0:	af04      	add	r7, sp, #16
 8009ed2:	6078      	str	r0, [r7, #4]
 8009ed4:	4608      	mov	r0, r1
 8009ed6:	4611      	mov	r1, r2
 8009ed8:	461a      	mov	r2, r3
 8009eda:	4603      	mov	r3, r0
 8009edc:	70fb      	strb	r3, [r7, #3]
 8009ede:	460b      	mov	r3, r1
 8009ee0:	70bb      	strb	r3, [r7, #2]
 8009ee2:	4613      	mov	r3, r2
 8009ee4:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8009ee6:	7878      	ldrb	r0, [r7, #1]
 8009ee8:	78ba      	ldrb	r2, [r7, #2]
 8009eea:	78f9      	ldrb	r1, [r7, #3]
 8009eec:	8b3b      	ldrh	r3, [r7, #24]
 8009eee:	9302      	str	r3, [sp, #8]
 8009ef0:	7d3b      	ldrb	r3, [r7, #20]
 8009ef2:	9301      	str	r3, [sp, #4]
 8009ef4:	7c3b      	ldrb	r3, [r7, #16]
 8009ef6:	9300      	str	r3, [sp, #0]
 8009ef8:	4603      	mov	r3, r0
 8009efa:	6878      	ldr	r0, [r7, #4]
 8009efc:	f005 faff 	bl	800f4fe <USBH_LL_OpenPipe>

  return USBH_OK;
 8009f00:	2300      	movs	r3, #0
}
 8009f02:	4618      	mov	r0, r3
 8009f04:	3708      	adds	r7, #8
 8009f06:	46bd      	mov	sp, r7
 8009f08:	bd80      	pop	{r7, pc}

08009f0a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8009f0a:	b580      	push	{r7, lr}
 8009f0c:	b082      	sub	sp, #8
 8009f0e:	af00      	add	r7, sp, #0
 8009f10:	6078      	str	r0, [r7, #4]
 8009f12:	460b      	mov	r3, r1
 8009f14:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8009f16:	78fb      	ldrb	r3, [r7, #3]
 8009f18:	4619      	mov	r1, r3
 8009f1a:	6878      	ldr	r0, [r7, #4]
 8009f1c:	f005 fb1e 	bl	800f55c <USBH_LL_ClosePipe>

  return USBH_OK;
 8009f20:	2300      	movs	r3, #0
}
 8009f22:	4618      	mov	r0, r3
 8009f24:	3708      	adds	r7, #8
 8009f26:	46bd      	mov	sp, r7
 8009f28:	bd80      	pop	{r7, pc}

08009f2a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8009f2a:	b580      	push	{r7, lr}
 8009f2c:	b084      	sub	sp, #16
 8009f2e:	af00      	add	r7, sp, #0
 8009f30:	6078      	str	r0, [r7, #4]
 8009f32:	460b      	mov	r3, r1
 8009f34:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8009f36:	6878      	ldr	r0, [r7, #4]
 8009f38:	f000 f836 	bl	8009fa8 <USBH_GetFreePipe>
 8009f3c:	4603      	mov	r3, r0
 8009f3e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8009f40:	89fb      	ldrh	r3, [r7, #14]
 8009f42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009f46:	4293      	cmp	r3, r2
 8009f48:	d00a      	beq.n	8009f60 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8009f4a:	78fa      	ldrb	r2, [r7, #3]
 8009f4c:	89fb      	ldrh	r3, [r7, #14]
 8009f4e:	f003 030f 	and.w	r3, r3, #15
 8009f52:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009f56:	6879      	ldr	r1, [r7, #4]
 8009f58:	33e0      	adds	r3, #224	; 0xe0
 8009f5a:	009b      	lsls	r3, r3, #2
 8009f5c:	440b      	add	r3, r1
 8009f5e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8009f60:	89fb      	ldrh	r3, [r7, #14]
 8009f62:	b2db      	uxtb	r3, r3
}
 8009f64:	4618      	mov	r0, r3
 8009f66:	3710      	adds	r7, #16
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	bd80      	pop	{r7, pc}

08009f6c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009f6c:	b480      	push	{r7}
 8009f6e:	b083      	sub	sp, #12
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	6078      	str	r0, [r7, #4]
 8009f74:	460b      	mov	r3, r1
 8009f76:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8009f78:	78fb      	ldrb	r3, [r7, #3]
 8009f7a:	2b0a      	cmp	r3, #10
 8009f7c:	d80d      	bhi.n	8009f9a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8009f7e:	78fb      	ldrb	r3, [r7, #3]
 8009f80:	687a      	ldr	r2, [r7, #4]
 8009f82:	33e0      	adds	r3, #224	; 0xe0
 8009f84:	009b      	lsls	r3, r3, #2
 8009f86:	4413      	add	r3, r2
 8009f88:	685a      	ldr	r2, [r3, #4]
 8009f8a:	78fb      	ldrb	r3, [r7, #3]
 8009f8c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009f90:	6879      	ldr	r1, [r7, #4]
 8009f92:	33e0      	adds	r3, #224	; 0xe0
 8009f94:	009b      	lsls	r3, r3, #2
 8009f96:	440b      	add	r3, r1
 8009f98:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8009f9a:	2300      	movs	r3, #0
}
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	370c      	adds	r7, #12
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa6:	4770      	bx	lr

08009fa8 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009fa8:	b480      	push	{r7}
 8009faa:	b085      	sub	sp, #20
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	73fb      	strb	r3, [r7, #15]
 8009fb8:	e00f      	b.n	8009fda <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8009fba:	7bfb      	ldrb	r3, [r7, #15]
 8009fbc:	687a      	ldr	r2, [r7, #4]
 8009fbe:	33e0      	adds	r3, #224	; 0xe0
 8009fc0:	009b      	lsls	r3, r3, #2
 8009fc2:	4413      	add	r3, r2
 8009fc4:	685b      	ldr	r3, [r3, #4]
 8009fc6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d102      	bne.n	8009fd4 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8009fce:	7bfb      	ldrb	r3, [r7, #15]
 8009fd0:	b29b      	uxth	r3, r3
 8009fd2:	e007      	b.n	8009fe4 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8009fd4:	7bfb      	ldrb	r3, [r7, #15]
 8009fd6:	3301      	adds	r3, #1
 8009fd8:	73fb      	strb	r3, [r7, #15]
 8009fda:	7bfb      	ldrb	r3, [r7, #15]
 8009fdc:	2b0a      	cmp	r3, #10
 8009fde:	d9ec      	bls.n	8009fba <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009fe0:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	3714      	adds	r7, #20
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fee:	4770      	bx	lr

08009ff0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b084      	sub	sp, #16
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	4603      	mov	r3, r0
 8009ff8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8009ffa:	79fb      	ldrb	r3, [r7, #7]
 8009ffc:	4a08      	ldr	r2, [pc, #32]	; (800a020 <disk_status+0x30>)
 8009ffe:	009b      	lsls	r3, r3, #2
 800a000:	4413      	add	r3, r2
 800a002:	685b      	ldr	r3, [r3, #4]
 800a004:	685b      	ldr	r3, [r3, #4]
 800a006:	79fa      	ldrb	r2, [r7, #7]
 800a008:	4905      	ldr	r1, [pc, #20]	; (800a020 <disk_status+0x30>)
 800a00a:	440a      	add	r2, r1
 800a00c:	7a12      	ldrb	r2, [r2, #8]
 800a00e:	4610      	mov	r0, r2
 800a010:	4798      	blx	r3
 800a012:	4603      	mov	r3, r0
 800a014:	73fb      	strb	r3, [r7, #15]
  return stat;
 800a016:	7bfb      	ldrb	r3, [r7, #15]
}
 800a018:	4618      	mov	r0, r3
 800a01a:	3710      	adds	r7, #16
 800a01c:	46bd      	mov	sp, r7
 800a01e:	bd80      	pop	{r7, pc}
 800a020:	20002918 	.word	0x20002918

0800a024 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800a024:	b580      	push	{r7, lr}
 800a026:	b084      	sub	sp, #16
 800a028:	af00      	add	r7, sp, #0
 800a02a:	4603      	mov	r3, r0
 800a02c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800a02e:	2300      	movs	r3, #0
 800a030:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800a032:	79fb      	ldrb	r3, [r7, #7]
 800a034:	4a0d      	ldr	r2, [pc, #52]	; (800a06c <disk_initialize+0x48>)
 800a036:	5cd3      	ldrb	r3, [r2, r3]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d111      	bne.n	800a060 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800a03c:	79fb      	ldrb	r3, [r7, #7]
 800a03e:	4a0b      	ldr	r2, [pc, #44]	; (800a06c <disk_initialize+0x48>)
 800a040:	2101      	movs	r1, #1
 800a042:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800a044:	79fb      	ldrb	r3, [r7, #7]
 800a046:	4a09      	ldr	r2, [pc, #36]	; (800a06c <disk_initialize+0x48>)
 800a048:	009b      	lsls	r3, r3, #2
 800a04a:	4413      	add	r3, r2
 800a04c:	685b      	ldr	r3, [r3, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	79fa      	ldrb	r2, [r7, #7]
 800a052:	4906      	ldr	r1, [pc, #24]	; (800a06c <disk_initialize+0x48>)
 800a054:	440a      	add	r2, r1
 800a056:	7a12      	ldrb	r2, [r2, #8]
 800a058:	4610      	mov	r0, r2
 800a05a:	4798      	blx	r3
 800a05c:	4603      	mov	r3, r0
 800a05e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800a060:	7bfb      	ldrb	r3, [r7, #15]
}
 800a062:	4618      	mov	r0, r3
 800a064:	3710      	adds	r7, #16
 800a066:	46bd      	mov	sp, r7
 800a068:	bd80      	pop	{r7, pc}
 800a06a:	bf00      	nop
 800a06c:	20002918 	.word	0x20002918

0800a070 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800a070:	b590      	push	{r4, r7, lr}
 800a072:	b087      	sub	sp, #28
 800a074:	af00      	add	r7, sp, #0
 800a076:	60b9      	str	r1, [r7, #8]
 800a078:	607a      	str	r2, [r7, #4]
 800a07a:	603b      	str	r3, [r7, #0]
 800a07c:	4603      	mov	r3, r0
 800a07e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800a080:	7bfb      	ldrb	r3, [r7, #15]
 800a082:	4a0a      	ldr	r2, [pc, #40]	; (800a0ac <disk_read+0x3c>)
 800a084:	009b      	lsls	r3, r3, #2
 800a086:	4413      	add	r3, r2
 800a088:	685b      	ldr	r3, [r3, #4]
 800a08a:	689c      	ldr	r4, [r3, #8]
 800a08c:	7bfb      	ldrb	r3, [r7, #15]
 800a08e:	4a07      	ldr	r2, [pc, #28]	; (800a0ac <disk_read+0x3c>)
 800a090:	4413      	add	r3, r2
 800a092:	7a18      	ldrb	r0, [r3, #8]
 800a094:	683b      	ldr	r3, [r7, #0]
 800a096:	687a      	ldr	r2, [r7, #4]
 800a098:	68b9      	ldr	r1, [r7, #8]
 800a09a:	47a0      	blx	r4
 800a09c:	4603      	mov	r3, r0
 800a09e:	75fb      	strb	r3, [r7, #23]
  return res;
 800a0a0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	371c      	adds	r7, #28
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	bd90      	pop	{r4, r7, pc}
 800a0aa:	bf00      	nop
 800a0ac:	20002918 	.word	0x20002918

0800a0b0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800a0b0:	b590      	push	{r4, r7, lr}
 800a0b2:	b087      	sub	sp, #28
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	60b9      	str	r1, [r7, #8]
 800a0b8:	607a      	str	r2, [r7, #4]
 800a0ba:	603b      	str	r3, [r7, #0]
 800a0bc:	4603      	mov	r3, r0
 800a0be:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800a0c0:	7bfb      	ldrb	r3, [r7, #15]
 800a0c2:	4a0a      	ldr	r2, [pc, #40]	; (800a0ec <disk_write+0x3c>)
 800a0c4:	009b      	lsls	r3, r3, #2
 800a0c6:	4413      	add	r3, r2
 800a0c8:	685b      	ldr	r3, [r3, #4]
 800a0ca:	68dc      	ldr	r4, [r3, #12]
 800a0cc:	7bfb      	ldrb	r3, [r7, #15]
 800a0ce:	4a07      	ldr	r2, [pc, #28]	; (800a0ec <disk_write+0x3c>)
 800a0d0:	4413      	add	r3, r2
 800a0d2:	7a18      	ldrb	r0, [r3, #8]
 800a0d4:	683b      	ldr	r3, [r7, #0]
 800a0d6:	687a      	ldr	r2, [r7, #4]
 800a0d8:	68b9      	ldr	r1, [r7, #8]
 800a0da:	47a0      	blx	r4
 800a0dc:	4603      	mov	r3, r0
 800a0de:	75fb      	strb	r3, [r7, #23]
  return res;
 800a0e0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	371c      	adds	r7, #28
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	bd90      	pop	{r4, r7, pc}
 800a0ea:	bf00      	nop
 800a0ec:	20002918 	.word	0x20002918

0800a0f0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	b084      	sub	sp, #16
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	4603      	mov	r3, r0
 800a0f8:	603a      	str	r2, [r7, #0]
 800a0fa:	71fb      	strb	r3, [r7, #7]
 800a0fc:	460b      	mov	r3, r1
 800a0fe:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800a100:	79fb      	ldrb	r3, [r7, #7]
 800a102:	4a09      	ldr	r2, [pc, #36]	; (800a128 <disk_ioctl+0x38>)
 800a104:	009b      	lsls	r3, r3, #2
 800a106:	4413      	add	r3, r2
 800a108:	685b      	ldr	r3, [r3, #4]
 800a10a:	691b      	ldr	r3, [r3, #16]
 800a10c:	79fa      	ldrb	r2, [r7, #7]
 800a10e:	4906      	ldr	r1, [pc, #24]	; (800a128 <disk_ioctl+0x38>)
 800a110:	440a      	add	r2, r1
 800a112:	7a10      	ldrb	r0, [r2, #8]
 800a114:	79b9      	ldrb	r1, [r7, #6]
 800a116:	683a      	ldr	r2, [r7, #0]
 800a118:	4798      	blx	r3
 800a11a:	4603      	mov	r3, r0
 800a11c:	73fb      	strb	r3, [r7, #15]
  return res;
 800a11e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a120:	4618      	mov	r0, r3
 800a122:	3710      	adds	r7, #16
 800a124:	46bd      	mov	sp, r7
 800a126:	bd80      	pop	{r7, pc}
 800a128:	20002918 	.word	0x20002918

0800a12c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800a12c:	b480      	push	{r7}
 800a12e:	b085      	sub	sp, #20
 800a130:	af00      	add	r7, sp, #0
 800a132:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	3301      	adds	r3, #1
 800a138:	781b      	ldrb	r3, [r3, #0]
 800a13a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800a13c:	89fb      	ldrh	r3, [r7, #14]
 800a13e:	021b      	lsls	r3, r3, #8
 800a140:	b21a      	sxth	r2, r3
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	781b      	ldrb	r3, [r3, #0]
 800a146:	b21b      	sxth	r3, r3
 800a148:	4313      	orrs	r3, r2
 800a14a:	b21b      	sxth	r3, r3
 800a14c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800a14e:	89fb      	ldrh	r3, [r7, #14]
}
 800a150:	4618      	mov	r0, r3
 800a152:	3714      	adds	r7, #20
 800a154:	46bd      	mov	sp, r7
 800a156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15a:	4770      	bx	lr

0800a15c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800a15c:	b480      	push	{r7}
 800a15e:	b085      	sub	sp, #20
 800a160:	af00      	add	r7, sp, #0
 800a162:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	3303      	adds	r3, #3
 800a168:	781b      	ldrb	r3, [r3, #0]
 800a16a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	021b      	lsls	r3, r3, #8
 800a170:	687a      	ldr	r2, [r7, #4]
 800a172:	3202      	adds	r2, #2
 800a174:	7812      	ldrb	r2, [r2, #0]
 800a176:	4313      	orrs	r3, r2
 800a178:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	021b      	lsls	r3, r3, #8
 800a17e:	687a      	ldr	r2, [r7, #4]
 800a180:	3201      	adds	r2, #1
 800a182:	7812      	ldrb	r2, [r2, #0]
 800a184:	4313      	orrs	r3, r2
 800a186:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	021b      	lsls	r3, r3, #8
 800a18c:	687a      	ldr	r2, [r7, #4]
 800a18e:	7812      	ldrb	r2, [r2, #0]
 800a190:	4313      	orrs	r3, r2
 800a192:	60fb      	str	r3, [r7, #12]
	return rv;
 800a194:	68fb      	ldr	r3, [r7, #12]
}
 800a196:	4618      	mov	r0, r3
 800a198:	3714      	adds	r7, #20
 800a19a:	46bd      	mov	sp, r7
 800a19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a0:	4770      	bx	lr

0800a1a2 <ld_qword>:

#if _FS_EXFAT
static
QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 800a1a2:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800a1a6:	b09d      	sub	sp, #116	; 0x74
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6678      	str	r0, [r7, #100]	; 0x64
	QWORD rv;

	rv = ptr[7];
 800a1ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a1ae:	3307      	adds	r3, #7
 800a1b0:	781b      	ldrb	r3, [r3, #0]
 800a1b2:	b2db      	uxtb	r3, r3
 800a1b4:	2200      	movs	r2, #0
 800a1b6:	469a      	mov	sl, r3
 800a1b8:	4693      	mov	fp, r2
 800a1ba:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[6];
 800a1be:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800a1c2:	f04f 0000 	mov.w	r0, #0
 800a1c6:	f04f 0100 	mov.w	r1, #0
 800a1ca:	0219      	lsls	r1, r3, #8
 800a1cc:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800a1d0:	0210      	lsls	r0, r2, #8
 800a1d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a1d4:	3306      	adds	r3, #6
 800a1d6:	781b      	ldrb	r3, [r3, #0]
 800a1d8:	b2db      	uxtb	r3, r3
 800a1da:	2200      	movs	r2, #0
 800a1dc:	461c      	mov	r4, r3
 800a1de:	4615      	mov	r5, r2
 800a1e0:	ea40 0804 	orr.w	r8, r0, r4
 800a1e4:	ea41 0905 	orr.w	r9, r1, r5
 800a1e8:	e9c7 891a 	strd	r8, r9, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[5];
 800a1ec:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800a1f0:	f04f 0000 	mov.w	r0, #0
 800a1f4:	f04f 0100 	mov.w	r1, #0
 800a1f8:	0219      	lsls	r1, r3, #8
 800a1fa:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800a1fe:	0210      	lsls	r0, r2, #8
 800a200:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a202:	3305      	adds	r3, #5
 800a204:	781b      	ldrb	r3, [r3, #0]
 800a206:	b2db      	uxtb	r3, r3
 800a208:	2200      	movs	r2, #0
 800a20a:	65bb      	str	r3, [r7, #88]	; 0x58
 800a20c:	65fa      	str	r2, [r7, #92]	; 0x5c
 800a20e:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 800a212:	4623      	mov	r3, r4
 800a214:	4303      	orrs	r3, r0
 800a216:	62bb      	str	r3, [r7, #40]	; 0x28
 800a218:	462b      	mov	r3, r5
 800a21a:	430b      	orrs	r3, r1
 800a21c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a21e:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800a222:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[4];
 800a226:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800a22a:	f04f 0000 	mov.w	r0, #0
 800a22e:	f04f 0100 	mov.w	r1, #0
 800a232:	0219      	lsls	r1, r3, #8
 800a234:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800a238:	0210      	lsls	r0, r2, #8
 800a23a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a23c:	3304      	adds	r3, #4
 800a23e:	781b      	ldrb	r3, [r3, #0]
 800a240:	b2db      	uxtb	r3, r3
 800a242:	2200      	movs	r2, #0
 800a244:	653b      	str	r3, [r7, #80]	; 0x50
 800a246:	657a      	str	r2, [r7, #84]	; 0x54
 800a248:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 800a24c:	4623      	mov	r3, r4
 800a24e:	4303      	orrs	r3, r0
 800a250:	623b      	str	r3, [r7, #32]
 800a252:	462b      	mov	r3, r5
 800a254:	430b      	orrs	r3, r1
 800a256:	627b      	str	r3, [r7, #36]	; 0x24
 800a258:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800a25c:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[3];
 800a260:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800a264:	f04f 0000 	mov.w	r0, #0
 800a268:	f04f 0100 	mov.w	r1, #0
 800a26c:	0219      	lsls	r1, r3, #8
 800a26e:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800a272:	0210      	lsls	r0, r2, #8
 800a274:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a276:	3303      	adds	r3, #3
 800a278:	781b      	ldrb	r3, [r3, #0]
 800a27a:	b2db      	uxtb	r3, r3
 800a27c:	2200      	movs	r2, #0
 800a27e:	64bb      	str	r3, [r7, #72]	; 0x48
 800a280:	64fa      	str	r2, [r7, #76]	; 0x4c
 800a282:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800a286:	4623      	mov	r3, r4
 800a288:	4303      	orrs	r3, r0
 800a28a:	61bb      	str	r3, [r7, #24]
 800a28c:	462b      	mov	r3, r5
 800a28e:	430b      	orrs	r3, r1
 800a290:	61fb      	str	r3, [r7, #28]
 800a292:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800a296:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[2];
 800a29a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800a29e:	f04f 0000 	mov.w	r0, #0
 800a2a2:	f04f 0100 	mov.w	r1, #0
 800a2a6:	0219      	lsls	r1, r3, #8
 800a2a8:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800a2ac:	0210      	lsls	r0, r2, #8
 800a2ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a2b0:	3302      	adds	r3, #2
 800a2b2:	781b      	ldrb	r3, [r3, #0]
 800a2b4:	b2db      	uxtb	r3, r3
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	643b      	str	r3, [r7, #64]	; 0x40
 800a2ba:	647a      	str	r2, [r7, #68]	; 0x44
 800a2bc:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 800a2c0:	4623      	mov	r3, r4
 800a2c2:	4303      	orrs	r3, r0
 800a2c4:	613b      	str	r3, [r7, #16]
 800a2c6:	462b      	mov	r3, r5
 800a2c8:	430b      	orrs	r3, r1
 800a2ca:	617b      	str	r3, [r7, #20]
 800a2cc:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800a2d0:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[1];
 800a2d4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a2d8:	f04f 0200 	mov.w	r2, #0
 800a2dc:	f04f 0300 	mov.w	r3, #0
 800a2e0:	020b      	lsls	r3, r1, #8
 800a2e2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a2e6:	0202      	lsls	r2, r0, #8
 800a2e8:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800a2ea:	3101      	adds	r1, #1
 800a2ec:	7809      	ldrb	r1, [r1, #0]
 800a2ee:	b2c9      	uxtb	r1, r1
 800a2f0:	2000      	movs	r0, #0
 800a2f2:	63b9      	str	r1, [r7, #56]	; 0x38
 800a2f4:	63f8      	str	r0, [r7, #60]	; 0x3c
 800a2f6:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 800a2fa:	4621      	mov	r1, r4
 800a2fc:	4311      	orrs	r1, r2
 800a2fe:	60b9      	str	r1, [r7, #8]
 800a300:	4629      	mov	r1, r5
 800a302:	4319      	orrs	r1, r3
 800a304:	60f9      	str	r1, [r7, #12]
 800a306:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800a30a:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[0];
 800a30e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a312:	f04f 0200 	mov.w	r2, #0
 800a316:	f04f 0300 	mov.w	r3, #0
 800a31a:	020b      	lsls	r3, r1, #8
 800a31c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a320:	0202      	lsls	r2, r0, #8
 800a322:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800a324:	7809      	ldrb	r1, [r1, #0]
 800a326:	b2c9      	uxtb	r1, r1
 800a328:	2000      	movs	r0, #0
 800a32a:	6339      	str	r1, [r7, #48]	; 0x30
 800a32c:	6378      	str	r0, [r7, #52]	; 0x34
 800a32e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800a332:	4621      	mov	r1, r4
 800a334:	4311      	orrs	r1, r2
 800a336:	6039      	str	r1, [r7, #0]
 800a338:	4629      	mov	r1, r5
 800a33a:	4319      	orrs	r1, r3
 800a33c:	6079      	str	r1, [r7, #4]
 800a33e:	e9d7 3400 	ldrd	r3, r4, [r7]
 800a342:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	return rv;
 800a346:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
}
 800a34a:	4610      	mov	r0, r2
 800a34c:	4619      	mov	r1, r3
 800a34e:	3774      	adds	r7, #116	; 0x74
 800a350:	46bd      	mov	sp, r7
 800a352:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800a356:	4770      	bx	lr

0800a358 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800a358:	b480      	push	{r7}
 800a35a:	b083      	sub	sp, #12
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	6078      	str	r0, [r7, #4]
 800a360:	460b      	mov	r3, r1
 800a362:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	1c5a      	adds	r2, r3, #1
 800a368:	607a      	str	r2, [r7, #4]
 800a36a:	887a      	ldrh	r2, [r7, #2]
 800a36c:	b2d2      	uxtb	r2, r2
 800a36e:	701a      	strb	r2, [r3, #0]
 800a370:	887b      	ldrh	r3, [r7, #2]
 800a372:	0a1b      	lsrs	r3, r3, #8
 800a374:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	1c5a      	adds	r2, r3, #1
 800a37a:	607a      	str	r2, [r7, #4]
 800a37c:	887a      	ldrh	r2, [r7, #2]
 800a37e:	b2d2      	uxtb	r2, r2
 800a380:	701a      	strb	r2, [r3, #0]
}
 800a382:	bf00      	nop
 800a384:	370c      	adds	r7, #12
 800a386:	46bd      	mov	sp, r7
 800a388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38c:	4770      	bx	lr

0800a38e <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800a38e:	b480      	push	{r7}
 800a390:	b083      	sub	sp, #12
 800a392:	af00      	add	r7, sp, #0
 800a394:	6078      	str	r0, [r7, #4]
 800a396:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	1c5a      	adds	r2, r3, #1
 800a39c:	607a      	str	r2, [r7, #4]
 800a39e:	683a      	ldr	r2, [r7, #0]
 800a3a0:	b2d2      	uxtb	r2, r2
 800a3a2:	701a      	strb	r2, [r3, #0]
 800a3a4:	683b      	ldr	r3, [r7, #0]
 800a3a6:	0a1b      	lsrs	r3, r3, #8
 800a3a8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	1c5a      	adds	r2, r3, #1
 800a3ae:	607a      	str	r2, [r7, #4]
 800a3b0:	683a      	ldr	r2, [r7, #0]
 800a3b2:	b2d2      	uxtb	r2, r2
 800a3b4:	701a      	strb	r2, [r3, #0]
 800a3b6:	683b      	ldr	r3, [r7, #0]
 800a3b8:	0a1b      	lsrs	r3, r3, #8
 800a3ba:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	1c5a      	adds	r2, r3, #1
 800a3c0:	607a      	str	r2, [r7, #4]
 800a3c2:	683a      	ldr	r2, [r7, #0]
 800a3c4:	b2d2      	uxtb	r2, r2
 800a3c6:	701a      	strb	r2, [r3, #0]
 800a3c8:	683b      	ldr	r3, [r7, #0]
 800a3ca:	0a1b      	lsrs	r3, r3, #8
 800a3cc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	1c5a      	adds	r2, r3, #1
 800a3d2:	607a      	str	r2, [r7, #4]
 800a3d4:	683a      	ldr	r2, [r7, #0]
 800a3d6:	b2d2      	uxtb	r2, r2
 800a3d8:	701a      	strb	r2, [r3, #0]
}
 800a3da:	bf00      	nop
 800a3dc:	370c      	adds	r7, #12
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e4:	4770      	bx	lr

0800a3e6 <st_qword>:

#if _FS_EXFAT
static
void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
 800a3e6:	b480      	push	{r7}
 800a3e8:	b085      	sub	sp, #20
 800a3ea:	af00      	add	r7, sp, #0
 800a3ec:	60f8      	str	r0, [r7, #12]
 800a3ee:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	1c5a      	adds	r2, r3, #1
 800a3f6:	60fa      	str	r2, [r7, #12]
 800a3f8:	783a      	ldrb	r2, [r7, #0]
 800a3fa:	701a      	strb	r2, [r3, #0]
 800a3fc:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a400:	f04f 0200 	mov.w	r2, #0
 800a404:	f04f 0300 	mov.w	r3, #0
 800a408:	0a02      	lsrs	r2, r0, #8
 800a40a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800a40e:	0a0b      	lsrs	r3, r1, #8
 800a410:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	1c5a      	adds	r2, r3, #1
 800a418:	60fa      	str	r2, [r7, #12]
 800a41a:	783a      	ldrb	r2, [r7, #0]
 800a41c:	701a      	strb	r2, [r3, #0]
 800a41e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a422:	f04f 0200 	mov.w	r2, #0
 800a426:	f04f 0300 	mov.w	r3, #0
 800a42a:	0a02      	lsrs	r2, r0, #8
 800a42c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800a430:	0a0b      	lsrs	r3, r1, #8
 800a432:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	1c5a      	adds	r2, r3, #1
 800a43a:	60fa      	str	r2, [r7, #12]
 800a43c:	783a      	ldrb	r2, [r7, #0]
 800a43e:	701a      	strb	r2, [r3, #0]
 800a440:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a444:	f04f 0200 	mov.w	r2, #0
 800a448:	f04f 0300 	mov.w	r3, #0
 800a44c:	0a02      	lsrs	r2, r0, #8
 800a44e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800a452:	0a0b      	lsrs	r3, r1, #8
 800a454:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	1c5a      	adds	r2, r3, #1
 800a45c:	60fa      	str	r2, [r7, #12]
 800a45e:	783a      	ldrb	r2, [r7, #0]
 800a460:	701a      	strb	r2, [r3, #0]
 800a462:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a466:	f04f 0200 	mov.w	r2, #0
 800a46a:	f04f 0300 	mov.w	r3, #0
 800a46e:	0a02      	lsrs	r2, r0, #8
 800a470:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800a474:	0a0b      	lsrs	r3, r1, #8
 800a476:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	1c5a      	adds	r2, r3, #1
 800a47e:	60fa      	str	r2, [r7, #12]
 800a480:	783a      	ldrb	r2, [r7, #0]
 800a482:	701a      	strb	r2, [r3, #0]
 800a484:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a488:	f04f 0200 	mov.w	r2, #0
 800a48c:	f04f 0300 	mov.w	r3, #0
 800a490:	0a02      	lsrs	r2, r0, #8
 800a492:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800a496:	0a0b      	lsrs	r3, r1, #8
 800a498:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	1c5a      	adds	r2, r3, #1
 800a4a0:	60fa      	str	r2, [r7, #12]
 800a4a2:	783a      	ldrb	r2, [r7, #0]
 800a4a4:	701a      	strb	r2, [r3, #0]
 800a4a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a4aa:	f04f 0200 	mov.w	r2, #0
 800a4ae:	f04f 0300 	mov.w	r3, #0
 800a4b2:	0a02      	lsrs	r2, r0, #8
 800a4b4:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800a4b8:	0a0b      	lsrs	r3, r1, #8
 800a4ba:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	1c5a      	adds	r2, r3, #1
 800a4c2:	60fa      	str	r2, [r7, #12]
 800a4c4:	783a      	ldrb	r2, [r7, #0]
 800a4c6:	701a      	strb	r2, [r3, #0]
 800a4c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a4cc:	f04f 0200 	mov.w	r2, #0
 800a4d0:	f04f 0300 	mov.w	r3, #0
 800a4d4:	0a02      	lsrs	r2, r0, #8
 800a4d6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800a4da:	0a0b      	lsrs	r3, r1, #8
 800a4dc:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val;
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	1c5a      	adds	r2, r3, #1
 800a4e4:	60fa      	str	r2, [r7, #12]
 800a4e6:	783a      	ldrb	r2, [r7, #0]
 800a4e8:	701a      	strb	r2, [r3, #0]
}
 800a4ea:	bf00      	nop
 800a4ec:	3714      	adds	r7, #20
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f4:	4770      	bx	lr

0800a4f6 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800a4f6:	b480      	push	{r7}
 800a4f8:	b087      	sub	sp, #28
 800a4fa:	af00      	add	r7, sp, #0
 800a4fc:	60f8      	str	r0, [r7, #12]
 800a4fe:	60b9      	str	r1, [r7, #8]
 800a500:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800a506:	68bb      	ldr	r3, [r7, #8]
 800a508:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d00d      	beq.n	800a52c <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800a510:	693a      	ldr	r2, [r7, #16]
 800a512:	1c53      	adds	r3, r2, #1
 800a514:	613b      	str	r3, [r7, #16]
 800a516:	697b      	ldr	r3, [r7, #20]
 800a518:	1c59      	adds	r1, r3, #1
 800a51a:	6179      	str	r1, [r7, #20]
 800a51c:	7812      	ldrb	r2, [r2, #0]
 800a51e:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	3b01      	subs	r3, #1
 800a524:	607b      	str	r3, [r7, #4]
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d1f1      	bne.n	800a510 <mem_cpy+0x1a>
	}
}
 800a52c:	bf00      	nop
 800a52e:	371c      	adds	r7, #28
 800a530:	46bd      	mov	sp, r7
 800a532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a536:	4770      	bx	lr

0800a538 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800a538:	b480      	push	{r7}
 800a53a:	b087      	sub	sp, #28
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	60f8      	str	r0, [r7, #12]
 800a540:	60b9      	str	r1, [r7, #8]
 800a542:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800a548:	697b      	ldr	r3, [r7, #20]
 800a54a:	1c5a      	adds	r2, r3, #1
 800a54c:	617a      	str	r2, [r7, #20]
 800a54e:	68ba      	ldr	r2, [r7, #8]
 800a550:	b2d2      	uxtb	r2, r2
 800a552:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	3b01      	subs	r3, #1
 800a558:	607b      	str	r3, [r7, #4]
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d1f3      	bne.n	800a548 <mem_set+0x10>
}
 800a560:	bf00      	nop
 800a562:	bf00      	nop
 800a564:	371c      	adds	r7, #28
 800a566:	46bd      	mov	sp, r7
 800a568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56c:	4770      	bx	lr

0800a56e <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800a56e:	b480      	push	{r7}
 800a570:	b089      	sub	sp, #36	; 0x24
 800a572:	af00      	add	r7, sp, #0
 800a574:	60f8      	str	r0, [r7, #12]
 800a576:	60b9      	str	r1, [r7, #8]
 800a578:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	61fb      	str	r3, [r7, #28]
 800a57e:	68bb      	ldr	r3, [r7, #8]
 800a580:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800a582:	2300      	movs	r3, #0
 800a584:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800a586:	69fb      	ldr	r3, [r7, #28]
 800a588:	1c5a      	adds	r2, r3, #1
 800a58a:	61fa      	str	r2, [r7, #28]
 800a58c:	781b      	ldrb	r3, [r3, #0]
 800a58e:	4619      	mov	r1, r3
 800a590:	69bb      	ldr	r3, [r7, #24]
 800a592:	1c5a      	adds	r2, r3, #1
 800a594:	61ba      	str	r2, [r7, #24]
 800a596:	781b      	ldrb	r3, [r3, #0]
 800a598:	1acb      	subs	r3, r1, r3
 800a59a:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	3b01      	subs	r3, #1
 800a5a0:	607b      	str	r3, [r7, #4]
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d002      	beq.n	800a5ae <mem_cmp+0x40>
 800a5a8:	697b      	ldr	r3, [r7, #20]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d0eb      	beq.n	800a586 <mem_cmp+0x18>

	return r;
 800a5ae:	697b      	ldr	r3, [r7, #20]
}
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	3724      	adds	r7, #36	; 0x24
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ba:	4770      	bx	lr

0800a5bc <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800a5bc:	b480      	push	{r7}
 800a5be:	b083      	sub	sp, #12
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	6078      	str	r0, [r7, #4]
 800a5c4:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800a5c6:	e002      	b.n	800a5ce <chk_chr+0x12>
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	3301      	adds	r3, #1
 800a5cc:	607b      	str	r3, [r7, #4]
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	781b      	ldrb	r3, [r3, #0]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d005      	beq.n	800a5e2 <chk_chr+0x26>
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	781b      	ldrb	r3, [r3, #0]
 800a5da:	461a      	mov	r2, r3
 800a5dc:	683b      	ldr	r3, [r7, #0]
 800a5de:	4293      	cmp	r3, r2
 800a5e0:	d1f2      	bne.n	800a5c8 <chk_chr+0xc>
	return *str;
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	781b      	ldrb	r3, [r3, #0]
}
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	370c      	adds	r7, #12
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f0:	4770      	bx	lr
	...

0800a5f4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a5f4:	b480      	push	{r7}
 800a5f6:	b085      	sub	sp, #20
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
 800a5fc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a5fe:	2300      	movs	r3, #0
 800a600:	60bb      	str	r3, [r7, #8]
 800a602:	68bb      	ldr	r3, [r7, #8]
 800a604:	60fb      	str	r3, [r7, #12]
 800a606:	e029      	b.n	800a65c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800a608:	4a27      	ldr	r2, [pc, #156]	; (800a6a8 <chk_lock+0xb4>)
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	011b      	lsls	r3, r3, #4
 800a60e:	4413      	add	r3, r2
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d01d      	beq.n	800a652 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a616:	4a24      	ldr	r2, [pc, #144]	; (800a6a8 <chk_lock+0xb4>)
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	011b      	lsls	r3, r3, #4
 800a61c:	4413      	add	r3, r2
 800a61e:	681a      	ldr	r2, [r3, #0]
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	429a      	cmp	r2, r3
 800a626:	d116      	bne.n	800a656 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800a628:	4a1f      	ldr	r2, [pc, #124]	; (800a6a8 <chk_lock+0xb4>)
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	011b      	lsls	r3, r3, #4
 800a62e:	4413      	add	r3, r2
 800a630:	3304      	adds	r3, #4
 800a632:	681a      	ldr	r2, [r3, #0]
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a638:	429a      	cmp	r2, r3
 800a63a:	d10c      	bne.n	800a656 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a63c:	4a1a      	ldr	r2, [pc, #104]	; (800a6a8 <chk_lock+0xb4>)
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	011b      	lsls	r3, r3, #4
 800a642:	4413      	add	r3, r2
 800a644:	3308      	adds	r3, #8
 800a646:	681a      	ldr	r2, [r3, #0]
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
				Files[i].clu == dp->obj.sclust &&
 800a64c:	429a      	cmp	r2, r3
 800a64e:	d102      	bne.n	800a656 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a650:	e007      	b.n	800a662 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800a652:	2301      	movs	r3, #1
 800a654:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	3301      	adds	r3, #1
 800a65a:	60fb      	str	r3, [r7, #12]
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	2b01      	cmp	r3, #1
 800a660:	d9d2      	bls.n	800a608 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	2b02      	cmp	r3, #2
 800a666:	d109      	bne.n	800a67c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800a668:	68bb      	ldr	r3, [r7, #8]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d102      	bne.n	800a674 <chk_lock+0x80>
 800a66e:	683b      	ldr	r3, [r7, #0]
 800a670:	2b02      	cmp	r3, #2
 800a672:	d101      	bne.n	800a678 <chk_lock+0x84>
 800a674:	2300      	movs	r3, #0
 800a676:	e010      	b.n	800a69a <chk_lock+0xa6>
 800a678:	2312      	movs	r3, #18
 800a67a:	e00e      	b.n	800a69a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800a67c:	683b      	ldr	r3, [r7, #0]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d108      	bne.n	800a694 <chk_lock+0xa0>
 800a682:	4a09      	ldr	r2, [pc, #36]	; (800a6a8 <chk_lock+0xb4>)
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	011b      	lsls	r3, r3, #4
 800a688:	4413      	add	r3, r2
 800a68a:	330c      	adds	r3, #12
 800a68c:	881b      	ldrh	r3, [r3, #0]
 800a68e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a692:	d101      	bne.n	800a698 <chk_lock+0xa4>
 800a694:	2310      	movs	r3, #16
 800a696:	e000      	b.n	800a69a <chk_lock+0xa6>
 800a698:	2300      	movs	r3, #0
}
 800a69a:	4618      	mov	r0, r3
 800a69c:	3714      	adds	r7, #20
 800a69e:	46bd      	mov	sp, r7
 800a6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a4:	4770      	bx	lr
 800a6a6:	bf00      	nop
 800a6a8:	20002498 	.word	0x20002498

0800a6ac <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800a6ac:	b480      	push	{r7}
 800a6ae:	b083      	sub	sp, #12
 800a6b0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	607b      	str	r3, [r7, #4]
 800a6b6:	e002      	b.n	800a6be <enq_lock+0x12>
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	3301      	adds	r3, #1
 800a6bc:	607b      	str	r3, [r7, #4]
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	2b01      	cmp	r3, #1
 800a6c2:	d806      	bhi.n	800a6d2 <enq_lock+0x26>
 800a6c4:	4a09      	ldr	r2, [pc, #36]	; (800a6ec <enq_lock+0x40>)
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	011b      	lsls	r3, r3, #4
 800a6ca:	4413      	add	r3, r2
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d1f2      	bne.n	800a6b8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	2b02      	cmp	r3, #2
 800a6d6:	bf14      	ite	ne
 800a6d8:	2301      	movne	r3, #1
 800a6da:	2300      	moveq	r3, #0
 800a6dc:	b2db      	uxtb	r3, r3
}
 800a6de:	4618      	mov	r0, r3
 800a6e0:	370c      	adds	r7, #12
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e8:	4770      	bx	lr
 800a6ea:	bf00      	nop
 800a6ec:	20002498 	.word	0x20002498

0800a6f0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a6f0:	b480      	push	{r7}
 800a6f2:	b085      	sub	sp, #20
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
 800a6f8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	60fb      	str	r3, [r7, #12]
 800a6fe:	e01f      	b.n	800a740 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800a700:	4a41      	ldr	r2, [pc, #260]	; (800a808 <inc_lock+0x118>)
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	011b      	lsls	r3, r3, #4
 800a706:	4413      	add	r3, r2
 800a708:	681a      	ldr	r2, [r3, #0]
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	429a      	cmp	r2, r3
 800a710:	d113      	bne.n	800a73a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800a712:	4a3d      	ldr	r2, [pc, #244]	; (800a808 <inc_lock+0x118>)
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	011b      	lsls	r3, r3, #4
 800a718:	4413      	add	r3, r2
 800a71a:	3304      	adds	r3, #4
 800a71c:	681a      	ldr	r2, [r3, #0]
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800a722:	429a      	cmp	r2, r3
 800a724:	d109      	bne.n	800a73a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800a726:	4a38      	ldr	r2, [pc, #224]	; (800a808 <inc_lock+0x118>)
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	011b      	lsls	r3, r3, #4
 800a72c:	4413      	add	r3, r2
 800a72e:	3308      	adds	r3, #8
 800a730:	681a      	ldr	r2, [r3, #0]
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			Files[i].clu == dp->obj.sclust &&
 800a736:	429a      	cmp	r2, r3
 800a738:	d006      	beq.n	800a748 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	3301      	adds	r3, #1
 800a73e:	60fb      	str	r3, [r7, #12]
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	2b01      	cmp	r3, #1
 800a744:	d9dc      	bls.n	800a700 <inc_lock+0x10>
 800a746:	e000      	b.n	800a74a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800a748:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	2b02      	cmp	r3, #2
 800a74e:	d132      	bne.n	800a7b6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a750:	2300      	movs	r3, #0
 800a752:	60fb      	str	r3, [r7, #12]
 800a754:	e002      	b.n	800a75c <inc_lock+0x6c>
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	3301      	adds	r3, #1
 800a75a:	60fb      	str	r3, [r7, #12]
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	2b01      	cmp	r3, #1
 800a760:	d806      	bhi.n	800a770 <inc_lock+0x80>
 800a762:	4a29      	ldr	r2, [pc, #164]	; (800a808 <inc_lock+0x118>)
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	011b      	lsls	r3, r3, #4
 800a768:	4413      	add	r3, r2
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d1f2      	bne.n	800a756 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	2b02      	cmp	r3, #2
 800a774:	d101      	bne.n	800a77a <inc_lock+0x8a>
 800a776:	2300      	movs	r3, #0
 800a778:	e040      	b.n	800a7fc <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681a      	ldr	r2, [r3, #0]
 800a77e:	4922      	ldr	r1, [pc, #136]	; (800a808 <inc_lock+0x118>)
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	011b      	lsls	r3, r3, #4
 800a784:	440b      	add	r3, r1
 800a786:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	689a      	ldr	r2, [r3, #8]
 800a78c:	491e      	ldr	r1, [pc, #120]	; (800a808 <inc_lock+0x118>)
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	011b      	lsls	r3, r3, #4
 800a792:	440b      	add	r3, r1
 800a794:	3304      	adds	r3, #4
 800a796:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a79c:	491a      	ldr	r1, [pc, #104]	; (800a808 <inc_lock+0x118>)
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	011b      	lsls	r3, r3, #4
 800a7a2:	440b      	add	r3, r1
 800a7a4:	3308      	adds	r3, #8
 800a7a6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800a7a8:	4a17      	ldr	r2, [pc, #92]	; (800a808 <inc_lock+0x118>)
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	011b      	lsls	r3, r3, #4
 800a7ae:	4413      	add	r3, r2
 800a7b0:	330c      	adds	r3, #12
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800a7b6:	683b      	ldr	r3, [r7, #0]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d009      	beq.n	800a7d0 <inc_lock+0xe0>
 800a7bc:	4a12      	ldr	r2, [pc, #72]	; (800a808 <inc_lock+0x118>)
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	011b      	lsls	r3, r3, #4
 800a7c2:	4413      	add	r3, r2
 800a7c4:	330c      	adds	r3, #12
 800a7c6:	881b      	ldrh	r3, [r3, #0]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d001      	beq.n	800a7d0 <inc_lock+0xe0>
 800a7cc:	2300      	movs	r3, #0
 800a7ce:	e015      	b.n	800a7fc <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800a7d0:	683b      	ldr	r3, [r7, #0]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d108      	bne.n	800a7e8 <inc_lock+0xf8>
 800a7d6:	4a0c      	ldr	r2, [pc, #48]	; (800a808 <inc_lock+0x118>)
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	011b      	lsls	r3, r3, #4
 800a7dc:	4413      	add	r3, r2
 800a7de:	330c      	adds	r3, #12
 800a7e0:	881b      	ldrh	r3, [r3, #0]
 800a7e2:	3301      	adds	r3, #1
 800a7e4:	b29a      	uxth	r2, r3
 800a7e6:	e001      	b.n	800a7ec <inc_lock+0xfc>
 800a7e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a7ec:	4906      	ldr	r1, [pc, #24]	; (800a808 <inc_lock+0x118>)
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	011b      	lsls	r3, r3, #4
 800a7f2:	440b      	add	r3, r1
 800a7f4:	330c      	adds	r3, #12
 800a7f6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	3301      	adds	r3, #1
}
 800a7fc:	4618      	mov	r0, r3
 800a7fe:	3714      	adds	r7, #20
 800a800:	46bd      	mov	sp, r7
 800a802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a806:	4770      	bx	lr
 800a808:	20002498 	.word	0x20002498

0800a80c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800a80c:	b480      	push	{r7}
 800a80e:	b085      	sub	sp, #20
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	3b01      	subs	r3, #1
 800a818:	607b      	str	r3, [r7, #4]
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	2b01      	cmp	r3, #1
 800a81e:	d825      	bhi.n	800a86c <dec_lock+0x60>
		n = Files[i].ctr;
 800a820:	4a17      	ldr	r2, [pc, #92]	; (800a880 <dec_lock+0x74>)
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	011b      	lsls	r3, r3, #4
 800a826:	4413      	add	r3, r2
 800a828:	330c      	adds	r3, #12
 800a82a:	881b      	ldrh	r3, [r3, #0]
 800a82c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800a82e:	89fb      	ldrh	r3, [r7, #14]
 800a830:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a834:	d101      	bne.n	800a83a <dec_lock+0x2e>
 800a836:	2300      	movs	r3, #0
 800a838:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800a83a:	89fb      	ldrh	r3, [r7, #14]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d002      	beq.n	800a846 <dec_lock+0x3a>
 800a840:	89fb      	ldrh	r3, [r7, #14]
 800a842:	3b01      	subs	r3, #1
 800a844:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800a846:	4a0e      	ldr	r2, [pc, #56]	; (800a880 <dec_lock+0x74>)
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	011b      	lsls	r3, r3, #4
 800a84c:	4413      	add	r3, r2
 800a84e:	330c      	adds	r3, #12
 800a850:	89fa      	ldrh	r2, [r7, #14]
 800a852:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800a854:	89fb      	ldrh	r3, [r7, #14]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d105      	bne.n	800a866 <dec_lock+0x5a>
 800a85a:	4a09      	ldr	r2, [pc, #36]	; (800a880 <dec_lock+0x74>)
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	011b      	lsls	r3, r3, #4
 800a860:	4413      	add	r3, r2
 800a862:	2200      	movs	r2, #0
 800a864:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800a866:	2300      	movs	r3, #0
 800a868:	737b      	strb	r3, [r7, #13]
 800a86a:	e001      	b.n	800a870 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800a86c:	2302      	movs	r3, #2
 800a86e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800a870:	7b7b      	ldrb	r3, [r7, #13]
}
 800a872:	4618      	mov	r0, r3
 800a874:	3714      	adds	r7, #20
 800a876:	46bd      	mov	sp, r7
 800a878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87c:	4770      	bx	lr
 800a87e:	bf00      	nop
 800a880:	20002498 	.word	0x20002498

0800a884 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800a884:	b480      	push	{r7}
 800a886:	b085      	sub	sp, #20
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800a88c:	2300      	movs	r3, #0
 800a88e:	60fb      	str	r3, [r7, #12]
 800a890:	e010      	b.n	800a8b4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800a892:	4a0d      	ldr	r2, [pc, #52]	; (800a8c8 <clear_lock+0x44>)
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	011b      	lsls	r3, r3, #4
 800a898:	4413      	add	r3, r2
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	687a      	ldr	r2, [r7, #4]
 800a89e:	429a      	cmp	r2, r3
 800a8a0:	d105      	bne.n	800a8ae <clear_lock+0x2a>
 800a8a2:	4a09      	ldr	r2, [pc, #36]	; (800a8c8 <clear_lock+0x44>)
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	011b      	lsls	r3, r3, #4
 800a8a8:	4413      	add	r3, r2
 800a8aa:	2200      	movs	r2, #0
 800a8ac:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	3301      	adds	r3, #1
 800a8b2:	60fb      	str	r3, [r7, #12]
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	2b01      	cmp	r3, #1
 800a8b8:	d9eb      	bls.n	800a892 <clear_lock+0xe>
	}
}
 800a8ba:	bf00      	nop
 800a8bc:	bf00      	nop
 800a8be:	3714      	adds	r7, #20
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c6:	4770      	bx	lr
 800a8c8:	20002498 	.word	0x20002498

0800a8cc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	b086      	sub	sp, #24
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	78db      	ldrb	r3, [r3, #3]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d034      	beq.n	800a94a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8e4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	7858      	ldrb	r0, [r3, #1]
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800a8f0:	2301      	movs	r3, #1
 800a8f2:	697a      	ldr	r2, [r7, #20]
 800a8f4:	f7ff fbdc 	bl	800a0b0 <disk_write>
 800a8f8:	4603      	mov	r3, r0
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d002      	beq.n	800a904 <sync_window+0x38>
			res = FR_DISK_ERR;
 800a8fe:	2301      	movs	r3, #1
 800a900:	73fb      	strb	r3, [r7, #15]
 800a902:	e022      	b.n	800a94a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	2200      	movs	r2, #0
 800a908:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a90e:	697a      	ldr	r2, [r7, #20]
 800a910:	1ad2      	subs	r2, r2, r3
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a916:	429a      	cmp	r2, r3
 800a918:	d217      	bcs.n	800a94a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	789b      	ldrb	r3, [r3, #2]
 800a91e:	613b      	str	r3, [r7, #16]
 800a920:	e010      	b.n	800a944 <sync_window+0x78>
					wsect += fs->fsize;
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a926:	697a      	ldr	r2, [r7, #20]
 800a928:	4413      	add	r3, r2
 800a92a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	7858      	ldrb	r0, [r3, #1]
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800a936:	2301      	movs	r3, #1
 800a938:	697a      	ldr	r2, [r7, #20]
 800a93a:	f7ff fbb9 	bl	800a0b0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a93e:	693b      	ldr	r3, [r7, #16]
 800a940:	3b01      	subs	r3, #1
 800a942:	613b      	str	r3, [r7, #16]
 800a944:	693b      	ldr	r3, [r7, #16]
 800a946:	2b01      	cmp	r3, #1
 800a948:	d8eb      	bhi.n	800a922 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800a94a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a94c:	4618      	mov	r0, r3
 800a94e:	3718      	adds	r7, #24
 800a950:	46bd      	mov	sp, r7
 800a952:	bd80      	pop	{r7, pc}

0800a954 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800a954:	b580      	push	{r7, lr}
 800a956:	b084      	sub	sp, #16
 800a958:	af00      	add	r7, sp, #0
 800a95a:	6078      	str	r0, [r7, #4]
 800a95c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800a95e:	2300      	movs	r3, #0
 800a960:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a966:	683a      	ldr	r2, [r7, #0]
 800a968:	429a      	cmp	r2, r3
 800a96a:	d01b      	beq.n	800a9a4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800a96c:	6878      	ldr	r0, [r7, #4]
 800a96e:	f7ff ffad 	bl	800a8cc <sync_window>
 800a972:	4603      	mov	r3, r0
 800a974:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800a976:	7bfb      	ldrb	r3, [r7, #15]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d113      	bne.n	800a9a4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	7858      	ldrb	r0, [r3, #1]
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800a986:	2301      	movs	r3, #1
 800a988:	683a      	ldr	r2, [r7, #0]
 800a98a:	f7ff fb71 	bl	800a070 <disk_read>
 800a98e:	4603      	mov	r3, r0
 800a990:	2b00      	cmp	r3, #0
 800a992:	d004      	beq.n	800a99e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800a994:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a998:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800a99a:	2301      	movs	r3, #1
 800a99c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	683a      	ldr	r2, [r7, #0]
 800a9a2:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
	return res;
 800a9a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	3710      	adds	r7, #16
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	bd80      	pop	{r7, pc}
	...

0800a9b0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800a9b0:	b580      	push	{r7, lr}
 800a9b2:	b084      	sub	sp, #16
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800a9b8:	6878      	ldr	r0, [r7, #4]
 800a9ba:	f7ff ff87 	bl	800a8cc <sync_window>
 800a9be:	4603      	mov	r3, r0
 800a9c0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a9c2:	7bfb      	ldrb	r3, [r7, #15]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d159      	bne.n	800aa7c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	781b      	ldrb	r3, [r3, #0]
 800a9cc:	2b03      	cmp	r3, #3
 800a9ce:	d149      	bne.n	800aa64 <sync_fs+0xb4>
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	791b      	ldrb	r3, [r3, #4]
 800a9d4:	2b01      	cmp	r3, #1
 800a9d6:	d145      	bne.n	800aa64 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	899b      	ldrh	r3, [r3, #12]
 800a9e2:	461a      	mov	r2, r3
 800a9e4:	2100      	movs	r1, #0
 800a9e6:	f7ff fda7 	bl	800a538 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	333c      	adds	r3, #60	; 0x3c
 800a9ee:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a9f2:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	f7ff fcae 	bl	800a358 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	333c      	adds	r3, #60	; 0x3c
 800aa00:	4921      	ldr	r1, [pc, #132]	; (800aa88 <sync_fs+0xd8>)
 800aa02:	4618      	mov	r0, r3
 800aa04:	f7ff fcc3 	bl	800a38e <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	333c      	adds	r3, #60	; 0x3c
 800aa0c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800aa10:	491e      	ldr	r1, [pc, #120]	; (800aa8c <sync_fs+0xdc>)
 800aa12:	4618      	mov	r0, r3
 800aa14:	f7ff fcbb 	bl	800a38e <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	333c      	adds	r3, #60	; 0x3c
 800aa1c:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	69db      	ldr	r3, [r3, #28]
 800aa24:	4619      	mov	r1, r3
 800aa26:	4610      	mov	r0, r2
 800aa28:	f7ff fcb1 	bl	800a38e <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	333c      	adds	r3, #60	; 0x3c
 800aa30:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	699b      	ldr	r3, [r3, #24]
 800aa38:	4619      	mov	r1, r3
 800aa3a:	4610      	mov	r0, r2
 800aa3c:	f7ff fca7 	bl	800a38e <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa44:	1c5a      	adds	r2, r3, #1
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	639a      	str	r2, [r3, #56]	; 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	7858      	ldrb	r0, [r3, #1]
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aa58:	2301      	movs	r3, #1
 800aa5a:	f7ff fb29 	bl	800a0b0 <disk_write>
			fs->fsi_flag = 0;
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	2200      	movs	r2, #0
 800aa62:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	785b      	ldrb	r3, [r3, #1]
 800aa68:	2200      	movs	r2, #0
 800aa6a:	2100      	movs	r1, #0
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	f7ff fb3f 	bl	800a0f0 <disk_ioctl>
 800aa72:	4603      	mov	r3, r0
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d001      	beq.n	800aa7c <sync_fs+0xcc>
 800aa78:	2301      	movs	r3, #1
 800aa7a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800aa7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa7e:	4618      	mov	r0, r3
 800aa80:	3710      	adds	r7, #16
 800aa82:	46bd      	mov	sp, r7
 800aa84:	bd80      	pop	{r7, pc}
 800aa86:	bf00      	nop
 800aa88:	41615252 	.word	0x41615252
 800aa8c:	61417272 	.word	0x61417272

0800aa90 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800aa90:	b480      	push	{r7}
 800aa92:	b083      	sub	sp, #12
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
 800aa98:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800aa9a:	683b      	ldr	r3, [r7, #0]
 800aa9c:	3b02      	subs	r3, #2
 800aa9e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	6a1b      	ldr	r3, [r3, #32]
 800aaa4:	3b02      	subs	r3, #2
 800aaa6:	683a      	ldr	r2, [r7, #0]
 800aaa8:	429a      	cmp	r2, r3
 800aaaa:	d301      	bcc.n	800aab0 <clust2sect+0x20>
 800aaac:	2300      	movs	r3, #0
 800aaae:	e008      	b.n	800aac2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	895b      	ldrh	r3, [r3, #10]
 800aab4:	461a      	mov	r2, r3
 800aab6:	683b      	ldr	r3, [r7, #0]
 800aab8:	fb03 f202 	mul.w	r2, r3, r2
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aac0:	4413      	add	r3, r2
}
 800aac2:	4618      	mov	r0, r3
 800aac4:	370c      	adds	r7, #12
 800aac6:	46bd      	mov	sp, r7
 800aac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aacc:	4770      	bx	lr
	...

0800aad0 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800aad0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800aad4:	b088      	sub	sp, #32
 800aad6:	af00      	add	r7, sp, #0
 800aad8:	6078      	str	r0, [r7, #4]
 800aada:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	61bb      	str	r3, [r7, #24]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800aae2:	683b      	ldr	r3, [r7, #0]
 800aae4:	2b01      	cmp	r3, #1
 800aae6:	d904      	bls.n	800aaf2 <get_fat+0x22>
 800aae8:	69bb      	ldr	r3, [r7, #24]
 800aaea:	6a1b      	ldr	r3, [r3, #32]
 800aaec:	683a      	ldr	r2, [r7, #0]
 800aaee:	429a      	cmp	r2, r3
 800aaf0:	d302      	bcc.n	800aaf8 <get_fat+0x28>
		val = 1;	/* Internal error */
 800aaf2:	2301      	movs	r3, #1
 800aaf4:	61fb      	str	r3, [r7, #28]
 800aaf6:	e13a      	b.n	800ad6e <get_fat+0x29e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800aaf8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aafc:	61fb      	str	r3, [r7, #28]

		switch (fs->fs_type) {
 800aafe:	69bb      	ldr	r3, [r7, #24]
 800ab00:	781b      	ldrb	r3, [r3, #0]
 800ab02:	3b01      	subs	r3, #1
 800ab04:	2b03      	cmp	r3, #3
 800ab06:	f200 8126 	bhi.w	800ad56 <get_fat+0x286>
 800ab0a:	a201      	add	r2, pc, #4	; (adr r2, 800ab10 <get_fat+0x40>)
 800ab0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab10:	0800ab21 	.word	0x0800ab21
 800ab14:	0800abcf 	.word	0x0800abcf
 800ab18:	0800ac1b 	.word	0x0800ac1b
 800ab1c:	0800ac6b 	.word	0x0800ac6b
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800ab20:	683b      	ldr	r3, [r7, #0]
 800ab22:	60fb      	str	r3, [r7, #12]
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	085b      	lsrs	r3, r3, #1
 800ab28:	68fa      	ldr	r2, [r7, #12]
 800ab2a:	4413      	add	r3, r2
 800ab2c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ab2e:	69bb      	ldr	r3, [r7, #24]
 800ab30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab32:	69bb      	ldr	r3, [r7, #24]
 800ab34:	899b      	ldrh	r3, [r3, #12]
 800ab36:	4619      	mov	r1, r3
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	fbb3 f3f1 	udiv	r3, r3, r1
 800ab3e:	4413      	add	r3, r2
 800ab40:	4619      	mov	r1, r3
 800ab42:	69b8      	ldr	r0, [r7, #24]
 800ab44:	f7ff ff06 	bl	800a954 <move_window>
 800ab48:	4603      	mov	r3, r0
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	f040 8106 	bne.w	800ad5c <get_fat+0x28c>
			wc = fs->win[bc++ % SS(fs)];
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	1c5a      	adds	r2, r3, #1
 800ab54:	60fa      	str	r2, [r7, #12]
 800ab56:	69ba      	ldr	r2, [r7, #24]
 800ab58:	8992      	ldrh	r2, [r2, #12]
 800ab5a:	fbb3 f1f2 	udiv	r1, r3, r2
 800ab5e:	fb01 f202 	mul.w	r2, r1, r2
 800ab62:	1a9b      	subs	r3, r3, r2
 800ab64:	69ba      	ldr	r2, [r7, #24]
 800ab66:	4413      	add	r3, r2
 800ab68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ab6c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ab6e:	69bb      	ldr	r3, [r7, #24]
 800ab70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab72:	69bb      	ldr	r3, [r7, #24]
 800ab74:	899b      	ldrh	r3, [r3, #12]
 800ab76:	4619      	mov	r1, r3
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	fbb3 f3f1 	udiv	r3, r3, r1
 800ab7e:	4413      	add	r3, r2
 800ab80:	4619      	mov	r1, r3
 800ab82:	69b8      	ldr	r0, [r7, #24]
 800ab84:	f7ff fee6 	bl	800a954 <move_window>
 800ab88:	4603      	mov	r3, r0
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	f040 80e8 	bne.w	800ad60 <get_fat+0x290>
			wc |= fs->win[bc % SS(fs)] << 8;
 800ab90:	69bb      	ldr	r3, [r7, #24]
 800ab92:	899b      	ldrh	r3, [r3, #12]
 800ab94:	461a      	mov	r2, r3
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	fbb3 f1f2 	udiv	r1, r3, r2
 800ab9c:	fb01 f202 	mul.w	r2, r1, r2
 800aba0:	1a9b      	subs	r3, r3, r2
 800aba2:	69ba      	ldr	r2, [r7, #24]
 800aba4:	4413      	add	r3, r2
 800aba6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800abaa:	021b      	lsls	r3, r3, #8
 800abac:	461a      	mov	r2, r3
 800abae:	68bb      	ldr	r3, [r7, #8]
 800abb0:	4313      	orrs	r3, r2
 800abb2:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800abb4:	683b      	ldr	r3, [r7, #0]
 800abb6:	f003 0301 	and.w	r3, r3, #1
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d002      	beq.n	800abc4 <get_fat+0xf4>
 800abbe:	68bb      	ldr	r3, [r7, #8]
 800abc0:	091b      	lsrs	r3, r3, #4
 800abc2:	e002      	b.n	800abca <get_fat+0xfa>
 800abc4:	68bb      	ldr	r3, [r7, #8]
 800abc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800abca:	61fb      	str	r3, [r7, #28]
			break;
 800abcc:	e0cf      	b.n	800ad6e <get_fat+0x29e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800abce:	69bb      	ldr	r3, [r7, #24]
 800abd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abd2:	69bb      	ldr	r3, [r7, #24]
 800abd4:	899b      	ldrh	r3, [r3, #12]
 800abd6:	085b      	lsrs	r3, r3, #1
 800abd8:	b29b      	uxth	r3, r3
 800abda:	4619      	mov	r1, r3
 800abdc:	683b      	ldr	r3, [r7, #0]
 800abde:	fbb3 f3f1 	udiv	r3, r3, r1
 800abe2:	4413      	add	r3, r2
 800abe4:	4619      	mov	r1, r3
 800abe6:	69b8      	ldr	r0, [r7, #24]
 800abe8:	f7ff feb4 	bl	800a954 <move_window>
 800abec:	4603      	mov	r3, r0
 800abee:	2b00      	cmp	r3, #0
 800abf0:	f040 80b8 	bne.w	800ad64 <get_fat+0x294>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800abf4:	69bb      	ldr	r3, [r7, #24]
 800abf6:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800abfa:	683b      	ldr	r3, [r7, #0]
 800abfc:	005b      	lsls	r3, r3, #1
 800abfe:	69ba      	ldr	r2, [r7, #24]
 800ac00:	8992      	ldrh	r2, [r2, #12]
 800ac02:	fbb3 f0f2 	udiv	r0, r3, r2
 800ac06:	fb00 f202 	mul.w	r2, r0, r2
 800ac0a:	1a9b      	subs	r3, r3, r2
 800ac0c:	440b      	add	r3, r1
 800ac0e:	4618      	mov	r0, r3
 800ac10:	f7ff fa8c 	bl	800a12c <ld_word>
 800ac14:	4603      	mov	r3, r0
 800ac16:	61fb      	str	r3, [r7, #28]
			break;
 800ac18:	e0a9      	b.n	800ad6e <get_fat+0x29e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ac1a:	69bb      	ldr	r3, [r7, #24]
 800ac1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac1e:	69bb      	ldr	r3, [r7, #24]
 800ac20:	899b      	ldrh	r3, [r3, #12]
 800ac22:	089b      	lsrs	r3, r3, #2
 800ac24:	b29b      	uxth	r3, r3
 800ac26:	4619      	mov	r1, r3
 800ac28:	683b      	ldr	r3, [r7, #0]
 800ac2a:	fbb3 f3f1 	udiv	r3, r3, r1
 800ac2e:	4413      	add	r3, r2
 800ac30:	4619      	mov	r1, r3
 800ac32:	69b8      	ldr	r0, [r7, #24]
 800ac34:	f7ff fe8e 	bl	800a954 <move_window>
 800ac38:	4603      	mov	r3, r0
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	f040 8094 	bne.w	800ad68 <get_fat+0x298>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800ac40:	69bb      	ldr	r3, [r7, #24]
 800ac42:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800ac46:	683b      	ldr	r3, [r7, #0]
 800ac48:	009b      	lsls	r3, r3, #2
 800ac4a:	69ba      	ldr	r2, [r7, #24]
 800ac4c:	8992      	ldrh	r2, [r2, #12]
 800ac4e:	fbb3 f0f2 	udiv	r0, r3, r2
 800ac52:	fb00 f202 	mul.w	r2, r0, r2
 800ac56:	1a9b      	subs	r3, r3, r2
 800ac58:	440b      	add	r3, r1
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	f7ff fa7e 	bl	800a15c <ld_dword>
 800ac60:	4603      	mov	r3, r0
 800ac62:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800ac66:	61fb      	str	r3, [r7, #28]
			break;
 800ac68:	e081      	b.n	800ad6e <get_fat+0x29e>
#if _FS_EXFAT
		case FS_EXFAT :
			if (obj->objsize) {
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800ac70:	4313      	orrs	r3, r2
 800ac72:	d070      	beq.n	800ad56 <get_fat+0x286>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	689b      	ldr	r3, [r3, #8]
 800ac78:	683a      	ldr	r2, [r7, #0]
 800ac7a:	1ad3      	subs	r3, r2, r3
 800ac7c:	617b      	str	r3, [r7, #20]
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800ac84:	1e54      	subs	r4, r2, #1
 800ac86:	f143 35ff 	adc.w	r5, r3, #4294967295	; 0xffffffff
 800ac8a:	69bb      	ldr	r3, [r7, #24]
 800ac8c:	899b      	ldrh	r3, [r3, #12]
 800ac8e:	b29b      	uxth	r3, r3
 800ac90:	2200      	movs	r2, #0
 800ac92:	4698      	mov	r8, r3
 800ac94:	4691      	mov	r9, r2
 800ac96:	4642      	mov	r2, r8
 800ac98:	464b      	mov	r3, r9
 800ac9a:	4620      	mov	r0, r4
 800ac9c:	4629      	mov	r1, r5
 800ac9e:	f7f6 f81b 	bl	8000cd8 <__aeabi_uldivmod>
 800aca2:	4602      	mov	r2, r0
 800aca4:	460b      	mov	r3, r1
 800aca6:	69bb      	ldr	r3, [r7, #24]
 800aca8:	895b      	ldrh	r3, [r3, #10]
 800acaa:	fbb2 f3f3 	udiv	r3, r2, r3
 800acae:	613b      	str	r3, [r7, #16]

				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	79db      	ldrb	r3, [r3, #7]
 800acb4:	2b02      	cmp	r3, #2
 800acb6:	d10e      	bne.n	800acd6 <get_fat+0x206>
					if (cofs <= clen) {
 800acb8:	697a      	ldr	r2, [r7, #20]
 800acba:	693b      	ldr	r3, [r7, #16]
 800acbc:	429a      	cmp	r2, r3
 800acbe:	d80a      	bhi.n	800acd6 <get_fat+0x206>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 800acc0:	697a      	ldr	r2, [r7, #20]
 800acc2:	693b      	ldr	r3, [r7, #16]
 800acc4:	429a      	cmp	r2, r3
 800acc6:	d002      	beq.n	800acce <get_fat+0x1fe>
 800acc8:	683b      	ldr	r3, [r7, #0]
 800acca:	3301      	adds	r3, #1
 800accc:	e001      	b.n	800acd2 <get_fat+0x202>
 800acce:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800acd2:	61fb      	str	r3, [r7, #28]
						break;
 800acd4:	e04b      	b.n	800ad6e <get_fat+0x29e>
					}
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	79db      	ldrb	r3, [r3, #7]
 800acda:	2b03      	cmp	r3, #3
 800acdc:	d108      	bne.n	800acf0 <get_fat+0x220>
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	699b      	ldr	r3, [r3, #24]
 800ace2:	697a      	ldr	r2, [r7, #20]
 800ace4:	429a      	cmp	r2, r3
 800ace6:	d203      	bcs.n	800acf0 <get_fat+0x220>
					val = clst + 1; 	/* Generate the value */
 800ace8:	683b      	ldr	r3, [r7, #0]
 800acea:	3301      	adds	r3, #1
 800acec:	61fb      	str	r3, [r7, #28]
					break;
 800acee:	e03e      	b.n	800ad6e <get_fat+0x29e>
				}
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	79db      	ldrb	r3, [r3, #7]
 800acf4:	2b02      	cmp	r3, #2
 800acf6:	d02e      	beq.n	800ad56 <get_fat+0x286>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	69db      	ldr	r3, [r3, #28]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d003      	beq.n	800ad08 <get_fat+0x238>
						val = 0x7FFFFFFF;	/* Generate EOC */
 800ad00:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800ad04:	61fb      	str	r3, [r7, #28]
					} else {
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
					}
					break;
 800ad06:	e032      	b.n	800ad6e <get_fat+0x29e>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ad08:	69bb      	ldr	r3, [r7, #24]
 800ad0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad0c:	69bb      	ldr	r3, [r7, #24]
 800ad0e:	899b      	ldrh	r3, [r3, #12]
 800ad10:	089b      	lsrs	r3, r3, #2
 800ad12:	b29b      	uxth	r3, r3
 800ad14:	4619      	mov	r1, r3
 800ad16:	683b      	ldr	r3, [r7, #0]
 800ad18:	fbb3 f3f1 	udiv	r3, r3, r1
 800ad1c:	4413      	add	r3, r2
 800ad1e:	4619      	mov	r1, r3
 800ad20:	69b8      	ldr	r0, [r7, #24]
 800ad22:	f7ff fe17 	bl	800a954 <move_window>
 800ad26:	4603      	mov	r3, r0
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d11f      	bne.n	800ad6c <get_fat+0x29c>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 800ad2c:	69bb      	ldr	r3, [r7, #24]
 800ad2e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800ad32:	683b      	ldr	r3, [r7, #0]
 800ad34:	009b      	lsls	r3, r3, #2
 800ad36:	69ba      	ldr	r2, [r7, #24]
 800ad38:	8992      	ldrh	r2, [r2, #12]
 800ad3a:	fbb3 f0f2 	udiv	r0, r3, r2
 800ad3e:	fb00 f202 	mul.w	r2, r0, r2
 800ad42:	1a9b      	subs	r3, r3, r2
 800ad44:	440b      	add	r3, r1
 800ad46:	4618      	mov	r0, r3
 800ad48:	f7ff fa08 	bl	800a15c <ld_dword>
 800ad4c:	4603      	mov	r3, r0
 800ad4e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ad52:	61fb      	str	r3, [r7, #28]
					break;
 800ad54:	e00b      	b.n	800ad6e <get_fat+0x29e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800ad56:	2301      	movs	r3, #1
 800ad58:	61fb      	str	r3, [r7, #28]
 800ad5a:	e008      	b.n	800ad6e <get_fat+0x29e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ad5c:	bf00      	nop
 800ad5e:	e006      	b.n	800ad6e <get_fat+0x29e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ad60:	bf00      	nop
 800ad62:	e004      	b.n	800ad6e <get_fat+0x29e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ad64:	bf00      	nop
 800ad66:	e002      	b.n	800ad6e <get_fat+0x29e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ad68:	bf00      	nop
 800ad6a:	e000      	b.n	800ad6e <get_fat+0x29e>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ad6c:	bf00      	nop
		}
	}

	return val;
 800ad6e:	69fb      	ldr	r3, [r7, #28]
}
 800ad70:	4618      	mov	r0, r3
 800ad72:	3720      	adds	r7, #32
 800ad74:	46bd      	mov	sp, r7
 800ad76:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800ad7a:	bf00      	nop

0800ad7c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800ad7c:	b590      	push	{r4, r7, lr}
 800ad7e:	b089      	sub	sp, #36	; 0x24
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	60f8      	str	r0, [r7, #12]
 800ad84:	60b9      	str	r1, [r7, #8]
 800ad86:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800ad88:	2302      	movs	r3, #2
 800ad8a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800ad8c:	68bb      	ldr	r3, [r7, #8]
 800ad8e:	2b01      	cmp	r3, #1
 800ad90:	f240 8106 	bls.w	800afa0 <put_fat+0x224>
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	6a1b      	ldr	r3, [r3, #32]
 800ad98:	68ba      	ldr	r2, [r7, #8]
 800ad9a:	429a      	cmp	r2, r3
 800ad9c:	f080 8100 	bcs.w	800afa0 <put_fat+0x224>
		switch (fs->fs_type) {
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	781b      	ldrb	r3, [r3, #0]
 800ada4:	2b04      	cmp	r3, #4
 800ada6:	f300 8104 	bgt.w	800afb2 <put_fat+0x236>
 800adaa:	2b03      	cmp	r3, #3
 800adac:	f280 80b3 	bge.w	800af16 <put_fat+0x19a>
 800adb0:	2b01      	cmp	r3, #1
 800adb2:	d003      	beq.n	800adbc <put_fat+0x40>
 800adb4:	2b02      	cmp	r3, #2
 800adb6:	f000 8083 	beq.w	800aec0 <put_fat+0x144>
 800adba:	e0fa      	b.n	800afb2 <put_fat+0x236>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800adbc:	68bb      	ldr	r3, [r7, #8]
 800adbe:	61bb      	str	r3, [r7, #24]
 800adc0:	69bb      	ldr	r3, [r7, #24]
 800adc2:	085b      	lsrs	r3, r3, #1
 800adc4:	69ba      	ldr	r2, [r7, #24]
 800adc6:	4413      	add	r3, r2
 800adc8:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	899b      	ldrh	r3, [r3, #12]
 800add2:	4619      	mov	r1, r3
 800add4:	69bb      	ldr	r3, [r7, #24]
 800add6:	fbb3 f3f1 	udiv	r3, r3, r1
 800adda:	4413      	add	r3, r2
 800addc:	4619      	mov	r1, r3
 800adde:	68f8      	ldr	r0, [r7, #12]
 800ade0:	f7ff fdb8 	bl	800a954 <move_window>
 800ade4:	4603      	mov	r3, r0
 800ade6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ade8:	7ffb      	ldrb	r3, [r7, #31]
 800adea:	2b00      	cmp	r3, #0
 800adec:	f040 80da 	bne.w	800afa4 <put_fat+0x228>
			p = fs->win + bc++ % SS(fs);
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800adf6:	69bb      	ldr	r3, [r7, #24]
 800adf8:	1c5a      	adds	r2, r3, #1
 800adfa:	61ba      	str	r2, [r7, #24]
 800adfc:	68fa      	ldr	r2, [r7, #12]
 800adfe:	8992      	ldrh	r2, [r2, #12]
 800ae00:	fbb3 f0f2 	udiv	r0, r3, r2
 800ae04:	fb00 f202 	mul.w	r2, r0, r2
 800ae08:	1a9b      	subs	r3, r3, r2
 800ae0a:	440b      	add	r3, r1
 800ae0c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800ae0e:	68bb      	ldr	r3, [r7, #8]
 800ae10:	f003 0301 	and.w	r3, r3, #1
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d00d      	beq.n	800ae34 <put_fat+0xb8>
 800ae18:	697b      	ldr	r3, [r7, #20]
 800ae1a:	781b      	ldrb	r3, [r3, #0]
 800ae1c:	b25b      	sxtb	r3, r3
 800ae1e:	f003 030f 	and.w	r3, r3, #15
 800ae22:	b25a      	sxtb	r2, r3
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	b2db      	uxtb	r3, r3
 800ae28:	011b      	lsls	r3, r3, #4
 800ae2a:	b25b      	sxtb	r3, r3
 800ae2c:	4313      	orrs	r3, r2
 800ae2e:	b25b      	sxtb	r3, r3
 800ae30:	b2db      	uxtb	r3, r3
 800ae32:	e001      	b.n	800ae38 <put_fat+0xbc>
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	b2db      	uxtb	r3, r3
 800ae38:	697a      	ldr	r2, [r7, #20]
 800ae3a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	2201      	movs	r2, #1
 800ae40:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	899b      	ldrh	r3, [r3, #12]
 800ae4a:	4619      	mov	r1, r3
 800ae4c:	69bb      	ldr	r3, [r7, #24]
 800ae4e:	fbb3 f3f1 	udiv	r3, r3, r1
 800ae52:	4413      	add	r3, r2
 800ae54:	4619      	mov	r1, r3
 800ae56:	68f8      	ldr	r0, [r7, #12]
 800ae58:	f7ff fd7c 	bl	800a954 <move_window>
 800ae5c:	4603      	mov	r3, r0
 800ae5e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ae60:	7ffb      	ldrb	r3, [r7, #31]
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	f040 80a0 	bne.w	800afa8 <put_fat+0x22c>
			p = fs->win + bc % SS(fs);
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	899b      	ldrh	r3, [r3, #12]
 800ae72:	461a      	mov	r2, r3
 800ae74:	69bb      	ldr	r3, [r7, #24]
 800ae76:	fbb3 f0f2 	udiv	r0, r3, r2
 800ae7a:	fb00 f202 	mul.w	r2, r0, r2
 800ae7e:	1a9b      	subs	r3, r3, r2
 800ae80:	440b      	add	r3, r1
 800ae82:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800ae84:	68bb      	ldr	r3, [r7, #8]
 800ae86:	f003 0301 	and.w	r3, r3, #1
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d003      	beq.n	800ae96 <put_fat+0x11a>
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	091b      	lsrs	r3, r3, #4
 800ae92:	b2db      	uxtb	r3, r3
 800ae94:	e00e      	b.n	800aeb4 <put_fat+0x138>
 800ae96:	697b      	ldr	r3, [r7, #20]
 800ae98:	781b      	ldrb	r3, [r3, #0]
 800ae9a:	b25b      	sxtb	r3, r3
 800ae9c:	f023 030f 	bic.w	r3, r3, #15
 800aea0:	b25a      	sxtb	r2, r3
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	0a1b      	lsrs	r3, r3, #8
 800aea6:	b25b      	sxtb	r3, r3
 800aea8:	f003 030f 	and.w	r3, r3, #15
 800aeac:	b25b      	sxtb	r3, r3
 800aeae:	4313      	orrs	r3, r2
 800aeb0:	b25b      	sxtb	r3, r3
 800aeb2:	b2db      	uxtb	r3, r3
 800aeb4:	697a      	ldr	r2, [r7, #20]
 800aeb6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	2201      	movs	r2, #1
 800aebc:	70da      	strb	r2, [r3, #3]
			break;
 800aebe:	e078      	b.n	800afb2 <put_fat+0x236>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	899b      	ldrh	r3, [r3, #12]
 800aec8:	085b      	lsrs	r3, r3, #1
 800aeca:	b29b      	uxth	r3, r3
 800aecc:	4619      	mov	r1, r3
 800aece:	68bb      	ldr	r3, [r7, #8]
 800aed0:	fbb3 f3f1 	udiv	r3, r3, r1
 800aed4:	4413      	add	r3, r2
 800aed6:	4619      	mov	r1, r3
 800aed8:	68f8      	ldr	r0, [r7, #12]
 800aeda:	f7ff fd3b 	bl	800a954 <move_window>
 800aede:	4603      	mov	r3, r0
 800aee0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800aee2:	7ffb      	ldrb	r3, [r7, #31]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d161      	bne.n	800afac <put_fat+0x230>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800aeee:	68bb      	ldr	r3, [r7, #8]
 800aef0:	005b      	lsls	r3, r3, #1
 800aef2:	68fa      	ldr	r2, [r7, #12]
 800aef4:	8992      	ldrh	r2, [r2, #12]
 800aef6:	fbb3 f0f2 	udiv	r0, r3, r2
 800aefa:	fb00 f202 	mul.w	r2, r0, r2
 800aefe:	1a9b      	subs	r3, r3, r2
 800af00:	440b      	add	r3, r1
 800af02:	687a      	ldr	r2, [r7, #4]
 800af04:	b292      	uxth	r2, r2
 800af06:	4611      	mov	r1, r2
 800af08:	4618      	mov	r0, r3
 800af0a:	f7ff fa25 	bl	800a358 <st_word>
			fs->wflag = 1;
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	2201      	movs	r2, #1
 800af12:	70da      	strb	r2, [r3, #3]
			break;
 800af14:	e04d      	b.n	800afb2 <put_fat+0x236>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	899b      	ldrh	r3, [r3, #12]
 800af1e:	089b      	lsrs	r3, r3, #2
 800af20:	b29b      	uxth	r3, r3
 800af22:	4619      	mov	r1, r3
 800af24:	68bb      	ldr	r3, [r7, #8]
 800af26:	fbb3 f3f1 	udiv	r3, r3, r1
 800af2a:	4413      	add	r3, r2
 800af2c:	4619      	mov	r1, r3
 800af2e:	68f8      	ldr	r0, [r7, #12]
 800af30:	f7ff fd10 	bl	800a954 <move_window>
 800af34:	4603      	mov	r3, r0
 800af36:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800af38:	7ffb      	ldrb	r3, [r7, #31]
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d138      	bne.n	800afb0 <put_fat+0x234>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	781b      	ldrb	r3, [r3, #0]
 800af42:	2b04      	cmp	r3, #4
 800af44:	d017      	beq.n	800af76 <put_fat+0x1fa>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800af52:	68bb      	ldr	r3, [r7, #8]
 800af54:	009b      	lsls	r3, r3, #2
 800af56:	68fa      	ldr	r2, [r7, #12]
 800af58:	8992      	ldrh	r2, [r2, #12]
 800af5a:	fbb3 f0f2 	udiv	r0, r3, r2
 800af5e:	fb00 f202 	mul.w	r2, r0, r2
 800af62:	1a9b      	subs	r3, r3, r2
 800af64:	440b      	add	r3, r1
 800af66:	4618      	mov	r0, r3
 800af68:	f7ff f8f8 	bl	800a15c <ld_dword>
 800af6c:	4603      	mov	r3, r0
 800af6e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800af72:	4323      	orrs	r3, r4
 800af74:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800af7c:	68bb      	ldr	r3, [r7, #8]
 800af7e:	009b      	lsls	r3, r3, #2
 800af80:	68fa      	ldr	r2, [r7, #12]
 800af82:	8992      	ldrh	r2, [r2, #12]
 800af84:	fbb3 f0f2 	udiv	r0, r3, r2
 800af88:	fb00 f202 	mul.w	r2, r0, r2
 800af8c:	1a9b      	subs	r3, r3, r2
 800af8e:	440b      	add	r3, r1
 800af90:	6879      	ldr	r1, [r7, #4]
 800af92:	4618      	mov	r0, r3
 800af94:	f7ff f9fb 	bl	800a38e <st_dword>
			fs->wflag = 1;
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	2201      	movs	r2, #1
 800af9c:	70da      	strb	r2, [r3, #3]
			break;
 800af9e:	e008      	b.n	800afb2 <put_fat+0x236>
		}
	}
 800afa0:	bf00      	nop
 800afa2:	e006      	b.n	800afb2 <put_fat+0x236>
			if (res != FR_OK) break;
 800afa4:	bf00      	nop
 800afa6:	e004      	b.n	800afb2 <put_fat+0x236>
			if (res != FR_OK) break;
 800afa8:	bf00      	nop
 800afaa:	e002      	b.n	800afb2 <put_fat+0x236>
			if (res != FR_OK) break;
 800afac:	bf00      	nop
 800afae:	e000      	b.n	800afb2 <put_fat+0x236>
			if (res != FR_OK) break;
 800afb0:	bf00      	nop
	return res;
 800afb2:	7ffb      	ldrb	r3, [r7, #31]
}
 800afb4:	4618      	mov	r0, r3
 800afb6:	3724      	adds	r7, #36	; 0x24
 800afb8:	46bd      	mov	sp, r7
 800afba:	bd90      	pop	{r4, r7, pc}

0800afbc <find_bitmap>:
DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to scan from */
	DWORD ncl	/* Number of contiguous clusters to find (1..) */
)
{
 800afbc:	b580      	push	{r7, lr}
 800afbe:	b08a      	sub	sp, #40	; 0x28
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	60f8      	str	r0, [r7, #12]
 800afc4:	60b9      	str	r1, [r7, #8]
 800afc6:	607a      	str	r2, [r7, #4]
	BYTE bm, bv;
	UINT i;
	DWORD val, scl, ctr;


	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 800afc8:	68bb      	ldr	r3, [r7, #8]
 800afca:	3b02      	subs	r3, #2
 800afcc:	60bb      	str	r3, [r7, #8]
	if (clst >= fs->n_fatent - 2) clst = 0;
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	6a1b      	ldr	r3, [r3, #32]
 800afd2:	3b02      	subs	r3, #2
 800afd4:	68ba      	ldr	r2, [r7, #8]
 800afd6:	429a      	cmp	r2, r3
 800afd8:	d301      	bcc.n	800afde <find_bitmap+0x22>
 800afda:	2300      	movs	r3, #0
 800afdc:	60bb      	str	r3, [r7, #8]
	scl = val = clst; ctr = 0;
 800afde:	68bb      	ldr	r3, [r7, #8]
 800afe0:	61fb      	str	r3, [r7, #28]
 800afe2:	69fb      	ldr	r3, [r7, #28]
 800afe4:	61bb      	str	r3, [r7, #24]
 800afe6:	2300      	movs	r3, #0
 800afe8:	617b      	str	r3, [r7, #20]
	for (;;) {
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800afee:	69fb      	ldr	r3, [r7, #28]
 800aff0:	08db      	lsrs	r3, r3, #3
 800aff2:	68f9      	ldr	r1, [r7, #12]
 800aff4:	8989      	ldrh	r1, [r1, #12]
 800aff6:	fbb3 f3f1 	udiv	r3, r3, r1
 800affa:	4413      	add	r3, r2
 800affc:	4619      	mov	r1, r3
 800affe:	68f8      	ldr	r0, [r7, #12]
 800b000:	f7ff fca8 	bl	800a954 <move_window>
 800b004:	4603      	mov	r3, r0
 800b006:	2b00      	cmp	r3, #0
 800b008:	d002      	beq.n	800b010 <find_bitmap+0x54>
 800b00a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b00e:	e058      	b.n	800b0c2 <find_bitmap+0x106>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 800b010:	69fb      	ldr	r3, [r7, #28]
 800b012:	08db      	lsrs	r3, r3, #3
 800b014:	68fa      	ldr	r2, [r7, #12]
 800b016:	8992      	ldrh	r2, [r2, #12]
 800b018:	fbb3 f1f2 	udiv	r1, r3, r2
 800b01c:	fb01 f202 	mul.w	r2, r1, r2
 800b020:	1a9b      	subs	r3, r3, r2
 800b022:	623b      	str	r3, [r7, #32]
 800b024:	69fb      	ldr	r3, [r7, #28]
 800b026:	f003 0307 	and.w	r3, r3, #7
 800b02a:	2201      	movs	r2, #1
 800b02c:	fa02 f303 	lsl.w	r3, r2, r3
 800b030:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		do {
			do {
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 800b034:	68fa      	ldr	r2, [r7, #12]
 800b036:	6a3b      	ldr	r3, [r7, #32]
 800b038:	4413      	add	r3, r2
 800b03a:	333c      	adds	r3, #60	; 0x3c
 800b03c:	781a      	ldrb	r2, [r3, #0]
 800b03e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b042:	4013      	ands	r3, r2
 800b044:	74fb      	strb	r3, [r7, #19]
 800b046:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b04a:	005b      	lsls	r3, r3, #1
 800b04c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 800b050:	69fb      	ldr	r3, [r7, #28]
 800b052:	3301      	adds	r3, #1
 800b054:	61fb      	str	r3, [r7, #28]
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	6a1b      	ldr	r3, [r3, #32]
 800b05a:	3b02      	subs	r3, #2
 800b05c:	69fa      	ldr	r2, [r7, #28]
 800b05e:	429a      	cmp	r2, r3
 800b060:	d307      	bcc.n	800b072 <find_bitmap+0xb6>
					val = 0; bm = 0; i = SS(fs);
 800b062:	2300      	movs	r3, #0
 800b064:	61fb      	str	r3, [r7, #28]
 800b066:	2300      	movs	r3, #0
 800b068:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	899b      	ldrh	r3, [r3, #12]
 800b070:	623b      	str	r3, [r7, #32]
				}
				if (!bv) {	/* Is it a free cluster? */
 800b072:	7cfb      	ldrb	r3, [r7, #19]
 800b074:	2b00      	cmp	r3, #0
 800b076:	d109      	bne.n	800b08c <find_bitmap+0xd0>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 800b078:	697b      	ldr	r3, [r7, #20]
 800b07a:	3301      	adds	r3, #1
 800b07c:	617b      	str	r3, [r7, #20]
 800b07e:	697a      	ldr	r2, [r7, #20]
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	429a      	cmp	r2, r3
 800b084:	d106      	bne.n	800b094 <find_bitmap+0xd8>
 800b086:	69bb      	ldr	r3, [r7, #24]
 800b088:	3302      	adds	r3, #2
 800b08a:	e01a      	b.n	800b0c2 <find_bitmap+0x106>
				} else {
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 800b08c:	69fb      	ldr	r3, [r7, #28]
 800b08e:	61bb      	str	r3, [r7, #24]
 800b090:	2300      	movs	r3, #0
 800b092:	617b      	str	r3, [r7, #20]
				}
				if (val == clst) return 0;	/* All cluster scanned? */
 800b094:	69fa      	ldr	r2, [r7, #28]
 800b096:	68bb      	ldr	r3, [r7, #8]
 800b098:	429a      	cmp	r2, r3
 800b09a:	d101      	bne.n	800b0a0 <find_bitmap+0xe4>
 800b09c:	2300      	movs	r3, #0
 800b09e:	e010      	b.n	800b0c2 <find_bitmap+0x106>
			} while (bm);
 800b0a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d1c5      	bne.n	800b034 <find_bitmap+0x78>
			bm = 1;
 800b0a8:	2301      	movs	r3, #1
 800b0aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		} while (++i < SS(fs));
 800b0ae:	6a3b      	ldr	r3, [r7, #32]
 800b0b0:	3301      	adds	r3, #1
 800b0b2:	623b      	str	r3, [r7, #32]
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	899b      	ldrh	r3, [r3, #12]
 800b0b8:	461a      	mov	r2, r3
 800b0ba:	6a3b      	ldr	r3, [r7, #32]
 800b0bc:	4293      	cmp	r3, r2
 800b0be:	d3b9      	bcc.n	800b034 <find_bitmap+0x78>
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 800b0c0:	e793      	b.n	800afea <find_bitmap+0x2e>
	}
}
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	3728      	adds	r7, #40	; 0x28
 800b0c6:	46bd      	mov	sp, r7
 800b0c8:	bd80      	pop	{r7, pc}

0800b0ca <change_bitmap>:
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to change from */
	DWORD ncl,	/* Number of clusters to be changed */
	int bv		/* bit value to be set (0 or 1) */
)
{
 800b0ca:	b580      	push	{r7, lr}
 800b0cc:	b088      	sub	sp, #32
 800b0ce:	af00      	add	r7, sp, #0
 800b0d0:	60f8      	str	r0, [r7, #12]
 800b0d2:	60b9      	str	r1, [r7, #8]
 800b0d4:	607a      	str	r2, [r7, #4]
 800b0d6:	603b      	str	r3, [r7, #0]
	BYTE bm;
	UINT i;
	DWORD sect;

	clst -= 2;	/* The first bit corresponds to cluster #2 */
 800b0d8:	68bb      	ldr	r3, [r7, #8]
 800b0da:	3b02      	subs	r3, #2
 800b0dc:	60bb      	str	r3, [r7, #8]
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b0e2:	68bb      	ldr	r3, [r7, #8]
 800b0e4:	08db      	lsrs	r3, r3, #3
 800b0e6:	68f9      	ldr	r1, [r7, #12]
 800b0e8:	8989      	ldrh	r1, [r1, #12]
 800b0ea:	fbb3 f3f1 	udiv	r3, r3, r1
 800b0ee:	4413      	add	r3, r2
 800b0f0:	617b      	str	r3, [r7, #20]
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
 800b0f2:	68bb      	ldr	r3, [r7, #8]
 800b0f4:	08db      	lsrs	r3, r3, #3
 800b0f6:	68fa      	ldr	r2, [r7, #12]
 800b0f8:	8992      	ldrh	r2, [r2, #12]
 800b0fa:	fbb3 f1f2 	udiv	r1, r3, r2
 800b0fe:	fb01 f202 	mul.w	r2, r1, r2
 800b102:	1a9b      	subs	r3, r3, r2
 800b104:	61bb      	str	r3, [r7, #24]
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 800b106:	68bb      	ldr	r3, [r7, #8]
 800b108:	f003 0307 	and.w	r3, r3, #7
 800b10c:	2201      	movs	r2, #1
 800b10e:	fa02 f303 	lsl.w	r3, r2, r3
 800b112:	77fb      	strb	r3, [r7, #31]
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800b114:	697b      	ldr	r3, [r7, #20]
 800b116:	1c5a      	adds	r2, r3, #1
 800b118:	617a      	str	r2, [r7, #20]
 800b11a:	4619      	mov	r1, r3
 800b11c:	68f8      	ldr	r0, [r7, #12]
 800b11e:	f7ff fc19 	bl	800a954 <move_window>
 800b122:	4603      	mov	r3, r0
 800b124:	2b00      	cmp	r3, #0
 800b126:	d001      	beq.n	800b12c <change_bitmap+0x62>
 800b128:	2301      	movs	r3, #1
 800b12a:	e03f      	b.n	800b1ac <change_bitmap+0xe2>
		do {
			do {
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 800b12c:	68fa      	ldr	r2, [r7, #12]
 800b12e:	69bb      	ldr	r3, [r7, #24]
 800b130:	4413      	add	r3, r2
 800b132:	333c      	adds	r3, #60	; 0x3c
 800b134:	781a      	ldrb	r2, [r3, #0]
 800b136:	7ffb      	ldrb	r3, [r7, #31]
 800b138:	4013      	ands	r3, r2
 800b13a:	b2db      	uxtb	r3, r3
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	bf14      	ite	ne
 800b140:	2301      	movne	r3, #1
 800b142:	2300      	moveq	r3, #0
 800b144:	b2db      	uxtb	r3, r3
 800b146:	461a      	mov	r2, r3
 800b148:	683b      	ldr	r3, [r7, #0]
 800b14a:	4293      	cmp	r3, r2
 800b14c:	d101      	bne.n	800b152 <change_bitmap+0x88>
 800b14e:	2302      	movs	r3, #2
 800b150:	e02c      	b.n	800b1ac <change_bitmap+0xe2>
				fs->win[i] ^= bm;	/* Flip the bit */
 800b152:	68fa      	ldr	r2, [r7, #12]
 800b154:	69bb      	ldr	r3, [r7, #24]
 800b156:	4413      	add	r3, r2
 800b158:	333c      	adds	r3, #60	; 0x3c
 800b15a:	781a      	ldrb	r2, [r3, #0]
 800b15c:	7ffb      	ldrb	r3, [r7, #31]
 800b15e:	4053      	eors	r3, r2
 800b160:	b2d9      	uxtb	r1, r3
 800b162:	68fa      	ldr	r2, [r7, #12]
 800b164:	69bb      	ldr	r3, [r7, #24]
 800b166:	4413      	add	r3, r2
 800b168:	333c      	adds	r3, #60	; 0x3c
 800b16a:	460a      	mov	r2, r1
 800b16c:	701a      	strb	r2, [r3, #0]
				fs->wflag = 1;
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	2201      	movs	r2, #1
 800b172:	70da      	strb	r2, [r3, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	3b01      	subs	r3, #1
 800b178:	607b      	str	r3, [r7, #4]
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d101      	bne.n	800b184 <change_bitmap+0xba>
 800b180:	2300      	movs	r3, #0
 800b182:	e013      	b.n	800b1ac <change_bitmap+0xe2>
			} while (bm <<= 1);		/* Next bit */
 800b184:	7ffb      	ldrb	r3, [r7, #31]
 800b186:	005b      	lsls	r3, r3, #1
 800b188:	77fb      	strb	r3, [r7, #31]
 800b18a:	7ffb      	ldrb	r3, [r7, #31]
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d1cd      	bne.n	800b12c <change_bitmap+0x62>
			bm = 1;
 800b190:	2301      	movs	r3, #1
 800b192:	77fb      	strb	r3, [r7, #31]
		} while (++i < SS(fs));		/* Next byte */
 800b194:	69bb      	ldr	r3, [r7, #24]
 800b196:	3301      	adds	r3, #1
 800b198:	61bb      	str	r3, [r7, #24]
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	899b      	ldrh	r3, [r3, #12]
 800b19e:	461a      	mov	r2, r3
 800b1a0:	69bb      	ldr	r3, [r7, #24]
 800b1a2:	4293      	cmp	r3, r2
 800b1a4:	d3c2      	bcc.n	800b12c <change_bitmap+0x62>
		i = 0;
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	61bb      	str	r3, [r7, #24]
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800b1aa:	e7b3      	b.n	800b114 <change_bitmap+0x4a>
	}
}
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	3720      	adds	r7, #32
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	bd80      	pop	{r7, pc}

0800b1b4 <fill_first_frag>:

static
FRESULT fill_first_frag (
	_FDID* obj	/* Pointer to the corresponding object */
)
{
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b086      	sub	sp, #24
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD cl, n;

	if (obj->stat == 3) {	/* Has the object been changed 'fragmented'? */
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	79db      	ldrb	r3, [r3, #7]
 800b1c0:	2b03      	cmp	r3, #3
 800b1c2:	d121      	bne.n	800b208 <fill_first_frag+0x54>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	689b      	ldr	r3, [r3, #8]
 800b1c8:	617b      	str	r3, [r7, #20]
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	699b      	ldr	r3, [r3, #24]
 800b1ce:	613b      	str	r3, [r7, #16]
 800b1d0:	e014      	b.n	800b1fc <fill_first_frag+0x48>
			res = put_fat(obj->fs, cl, cl + 1);
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	6818      	ldr	r0, [r3, #0]
 800b1d6:	697b      	ldr	r3, [r7, #20]
 800b1d8:	3301      	adds	r3, #1
 800b1da:	461a      	mov	r2, r3
 800b1dc:	6979      	ldr	r1, [r7, #20]
 800b1de:	f7ff fdcd 	bl	800ad7c <put_fat>
 800b1e2:	4603      	mov	r3, r0
 800b1e4:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) return res;
 800b1e6:	7bfb      	ldrb	r3, [r7, #15]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d001      	beq.n	800b1f0 <fill_first_frag+0x3c>
 800b1ec:	7bfb      	ldrb	r3, [r7, #15]
 800b1ee:	e00c      	b.n	800b20a <fill_first_frag+0x56>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800b1f0:	697b      	ldr	r3, [r7, #20]
 800b1f2:	3301      	adds	r3, #1
 800b1f4:	617b      	str	r3, [r7, #20]
 800b1f6:	693b      	ldr	r3, [r7, #16]
 800b1f8:	3b01      	subs	r3, #1
 800b1fa:	613b      	str	r3, [r7, #16]
 800b1fc:	693b      	ldr	r3, [r7, #16]
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d1e7      	bne.n	800b1d2 <fill_first_frag+0x1e>
		}
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	2200      	movs	r2, #0
 800b206:	71da      	strb	r2, [r3, #7]
	}
	return FR_OK;
 800b208:	2300      	movs	r3, #0
}
 800b20a:	4618      	mov	r0, r3
 800b20c:	3718      	adds	r7, #24
 800b20e:	46bd      	mov	sp, r7
 800b210:	bd80      	pop	{r7, pc}

0800b212 <fill_last_frag>:
FRESULT fill_last_frag (
	_FDID* obj,	/* Pointer to the corresponding object */
	DWORD lcl,	/* Last cluster of the fragment */
	DWORD term	/* Value to set the last FAT entry */
)
{
 800b212:	b580      	push	{r7, lr}
 800b214:	b086      	sub	sp, #24
 800b216:	af00      	add	r7, sp, #0
 800b218:	60f8      	str	r0, [r7, #12]
 800b21a:	60b9      	str	r1, [r7, #8]
 800b21c:	607a      	str	r2, [r7, #4]
	FRESULT res;

	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 800b21e:	e020      	b.n	800b262 <fill_last_frag+0x50>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	6818      	ldr	r0, [r3, #0]
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	69db      	ldr	r3, [r3, #28]
 800b228:	68ba      	ldr	r2, [r7, #8]
 800b22a:	1ad3      	subs	r3, r2, r3
 800b22c:	1c59      	adds	r1, r3, #1
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	69db      	ldr	r3, [r3, #28]
 800b232:	2b01      	cmp	r3, #1
 800b234:	d905      	bls.n	800b242 <fill_last_frag+0x30>
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	69db      	ldr	r3, [r3, #28]
 800b23a:	68ba      	ldr	r2, [r7, #8]
 800b23c:	1ad3      	subs	r3, r2, r3
 800b23e:	3302      	adds	r3, #2
 800b240:	e000      	b.n	800b244 <fill_last_frag+0x32>
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	461a      	mov	r2, r3
 800b246:	f7ff fd99 	bl	800ad7c <put_fat>
 800b24a:	4603      	mov	r3, r0
 800b24c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 800b24e:	7dfb      	ldrb	r3, [r7, #23]
 800b250:	2b00      	cmp	r3, #0
 800b252:	d001      	beq.n	800b258 <fill_last_frag+0x46>
 800b254:	7dfb      	ldrb	r3, [r7, #23]
 800b256:	e009      	b.n	800b26c <fill_last_frag+0x5a>
		obj->n_frag--;
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	69db      	ldr	r3, [r3, #28]
 800b25c:	1e5a      	subs	r2, r3, #1
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	61da      	str	r2, [r3, #28]
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	69db      	ldr	r3, [r3, #28]
 800b266:	2b00      	cmp	r3, #0
 800b268:	d1da      	bne.n	800b220 <fill_last_frag+0xe>
	}
	return FR_OK;
 800b26a:	2300      	movs	r3, #0
}
 800b26c:	4618      	mov	r0, r3
 800b26e:	3718      	adds	r7, #24
 800b270:	46bd      	mov	sp, r7
 800b272:	bd80      	pop	{r7, pc}

0800b274 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800b274:	b580      	push	{r7, lr}
 800b276:	b08a      	sub	sp, #40	; 0x28
 800b278:	af00      	add	r7, sp, #0
 800b27a:	60f8      	str	r0, [r7, #12]
 800b27c:	60b9      	str	r1, [r7, #8]
 800b27e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800b280:	2300      	movs	r3, #0
 800b282:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	61bb      	str	r3, [r7, #24]
#if _FS_EXFAT || _USE_TRIM
	DWORD scl = clst, ecl = clst;
 800b28a:	68bb      	ldr	r3, [r7, #8]
 800b28c:	627b      	str	r3, [r7, #36]	; 0x24
 800b28e:	68bb      	ldr	r3, [r7, #8]
 800b290:	623b      	str	r3, [r7, #32]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800b292:	68bb      	ldr	r3, [r7, #8]
 800b294:	2b01      	cmp	r3, #1
 800b296:	d904      	bls.n	800b2a2 <remove_chain+0x2e>
 800b298:	69bb      	ldr	r3, [r7, #24]
 800b29a:	6a1b      	ldr	r3, [r3, #32]
 800b29c:	68ba      	ldr	r2, [r7, #8]
 800b29e:	429a      	cmp	r2, r3
 800b2a0:	d301      	bcc.n	800b2a6 <remove_chain+0x32>
 800b2a2:	2302      	movs	r3, #2
 800b2a4:	e096      	b.n	800b3d4 <remove_chain+0x160>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d014      	beq.n	800b2d6 <remove_chain+0x62>
 800b2ac:	69bb      	ldr	r3, [r7, #24]
 800b2ae:	781b      	ldrb	r3, [r3, #0]
 800b2b0:	2b04      	cmp	r3, #4
 800b2b2:	d103      	bne.n	800b2bc <remove_chain+0x48>
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	79db      	ldrb	r3, [r3, #7]
 800b2b8:	2b02      	cmp	r3, #2
 800b2ba:	d00c      	beq.n	800b2d6 <remove_chain+0x62>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800b2bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b2c0:	6879      	ldr	r1, [r7, #4]
 800b2c2:	69b8      	ldr	r0, [r7, #24]
 800b2c4:	f7ff fd5a 	bl	800ad7c <put_fat>
 800b2c8:	4603      	mov	r3, r0
 800b2ca:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800b2cc:	7ffb      	ldrb	r3, [r7, #31]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d001      	beq.n	800b2d6 <remove_chain+0x62>
 800b2d2:	7ffb      	ldrb	r3, [r7, #31]
 800b2d4:	e07e      	b.n	800b3d4 <remove_chain+0x160>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800b2d6:	68b9      	ldr	r1, [r7, #8]
 800b2d8:	68f8      	ldr	r0, [r7, #12]
 800b2da:	f7ff fbf9 	bl	800aad0 <get_fat>
 800b2de:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800b2e0:	697b      	ldr	r3, [r7, #20]
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d055      	beq.n	800b392 <remove_chain+0x11e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800b2e6:	697b      	ldr	r3, [r7, #20]
 800b2e8:	2b01      	cmp	r3, #1
 800b2ea:	d101      	bne.n	800b2f0 <remove_chain+0x7c>
 800b2ec:	2302      	movs	r3, #2
 800b2ee:	e071      	b.n	800b3d4 <remove_chain+0x160>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800b2f0:	697b      	ldr	r3, [r7, #20]
 800b2f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b2f6:	d101      	bne.n	800b2fc <remove_chain+0x88>
 800b2f8:	2301      	movs	r3, #1
 800b2fa:	e06b      	b.n	800b3d4 <remove_chain+0x160>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800b2fc:	69bb      	ldr	r3, [r7, #24]
 800b2fe:	781b      	ldrb	r3, [r3, #0]
 800b300:	2b04      	cmp	r3, #4
 800b302:	d00b      	beq.n	800b31c <remove_chain+0xa8>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800b304:	2200      	movs	r2, #0
 800b306:	68b9      	ldr	r1, [r7, #8]
 800b308:	69b8      	ldr	r0, [r7, #24]
 800b30a:	f7ff fd37 	bl	800ad7c <put_fat>
 800b30e:	4603      	mov	r3, r0
 800b310:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800b312:	7ffb      	ldrb	r3, [r7, #31]
 800b314:	2b00      	cmp	r3, #0
 800b316:	d001      	beq.n	800b31c <remove_chain+0xa8>
 800b318:	7ffb      	ldrb	r3, [r7, #31]
 800b31a:	e05b      	b.n	800b3d4 <remove_chain+0x160>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800b31c:	69bb      	ldr	r3, [r7, #24]
 800b31e:	69da      	ldr	r2, [r3, #28]
 800b320:	69bb      	ldr	r3, [r7, #24]
 800b322:	6a1b      	ldr	r3, [r3, #32]
 800b324:	3b02      	subs	r3, #2
 800b326:	429a      	cmp	r2, r3
 800b328:	d20b      	bcs.n	800b342 <remove_chain+0xce>
			fs->free_clst++;
 800b32a:	69bb      	ldr	r3, [r7, #24]
 800b32c:	69db      	ldr	r3, [r3, #28]
 800b32e:	1c5a      	adds	r2, r3, #1
 800b330:	69bb      	ldr	r3, [r7, #24]
 800b332:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;
 800b334:	69bb      	ldr	r3, [r7, #24]
 800b336:	791b      	ldrb	r3, [r3, #4]
 800b338:	f043 0301 	orr.w	r3, r3, #1
 800b33c:	b2da      	uxtb	r2, r3
 800b33e:	69bb      	ldr	r3, [r7, #24]
 800b340:	711a      	strb	r2, [r3, #4]
		}
#if _FS_EXFAT || _USE_TRIM
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 800b342:	6a3b      	ldr	r3, [r7, #32]
 800b344:	3301      	adds	r3, #1
 800b346:	697a      	ldr	r2, [r7, #20]
 800b348:	429a      	cmp	r2, r3
 800b34a:	d102      	bne.n	800b352 <remove_chain+0xde>
			ecl = nxt;
 800b34c:	697b      	ldr	r3, [r7, #20]
 800b34e:	623b      	str	r3, [r7, #32]
 800b350:	e017      	b.n	800b382 <remove_chain+0x10e>
		} else {				/* End of contiguous cluster block */
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800b352:	69bb      	ldr	r3, [r7, #24]
 800b354:	781b      	ldrb	r3, [r3, #0]
 800b356:	2b04      	cmp	r3, #4
 800b358:	d10f      	bne.n	800b37a <remove_chain+0x106>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 800b35a:	6a3a      	ldr	r2, [r7, #32]
 800b35c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b35e:	1ad3      	subs	r3, r2, r3
 800b360:	1c5a      	adds	r2, r3, #1
 800b362:	2300      	movs	r3, #0
 800b364:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b366:	69b8      	ldr	r0, [r7, #24]
 800b368:	f7ff feaf 	bl	800b0ca <change_bitmap>
 800b36c:	4603      	mov	r3, r0
 800b36e:	77fb      	strb	r3, [r7, #31]
				if (res != FR_OK) return res;
 800b370:	7ffb      	ldrb	r3, [r7, #31]
 800b372:	2b00      	cmp	r3, #0
 800b374:	d001      	beq.n	800b37a <remove_chain+0x106>
 800b376:	7ffb      	ldrb	r3, [r7, #31]
 800b378:	e02c      	b.n	800b3d4 <remove_chain+0x160>
#if _USE_TRIM
			rt[0] = clust2sect(fs, scl);					/* Start sector */
			rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
 800b37a:	697b      	ldr	r3, [r7, #20]
 800b37c:	623b      	str	r3, [r7, #32]
 800b37e:	6a3b      	ldr	r3, [r7, #32]
 800b380:	627b      	str	r3, [r7, #36]	; 0x24
		}
#endif
		clst = nxt;					/* Next cluster */
 800b382:	697b      	ldr	r3, [r7, #20]
 800b384:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800b386:	69bb      	ldr	r3, [r7, #24]
 800b388:	6a1b      	ldr	r3, [r3, #32]
 800b38a:	68ba      	ldr	r2, [r7, #8]
 800b38c:	429a      	cmp	r2, r3
 800b38e:	d3a2      	bcc.n	800b2d6 <remove_chain+0x62>
 800b390:	e000      	b.n	800b394 <remove_chain+0x120>
		if (nxt == 0) break;				/* Empty cluster? */
 800b392:	bf00      	nop

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {
 800b394:	69bb      	ldr	r3, [r7, #24]
 800b396:	781b      	ldrb	r3, [r3, #0]
 800b398:	2b04      	cmp	r3, #4
 800b39a:	d11a      	bne.n	800b3d2 <remove_chain+0x15e>
		if (pclst == 0) {	/* Does the object have no chain? */
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d103      	bne.n	800b3aa <remove_chain+0x136>
			obj->stat = 0;		/* Change the object status 'initial' */
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	2200      	movs	r2, #0
 800b3a6:	71da      	strb	r2, [r3, #7]
 800b3a8:	e013      	b.n	800b3d2 <remove_chain+0x15e>
		} else {
			if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Did the chain get contiguous? */
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	79db      	ldrb	r3, [r3, #7]
 800b3ae:	2b03      	cmp	r3, #3
 800b3b0:	d10f      	bne.n	800b3d2 <remove_chain+0x15e>
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	689b      	ldr	r3, [r3, #8]
 800b3b6:	687a      	ldr	r2, [r7, #4]
 800b3b8:	429a      	cmp	r2, r3
 800b3ba:	d30a      	bcc.n	800b3d2 <remove_chain+0x15e>
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	689a      	ldr	r2, [r3, #8]
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	699b      	ldr	r3, [r3, #24]
 800b3c4:	4413      	add	r3, r2
 800b3c6:	687a      	ldr	r2, [r7, #4]
 800b3c8:	429a      	cmp	r2, r3
 800b3ca:	d802      	bhi.n	800b3d2 <remove_chain+0x15e>
				obj->stat = 2;	/* Change the object status 'contiguous' */
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	2202      	movs	r2, #2
 800b3d0:	71da      	strb	r2, [r3, #7]
			}
		}
	}
#endif
	return FR_OK;
 800b3d2:	2300      	movs	r3, #0
}
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	3728      	adds	r7, #40	; 0x28
 800b3d8:	46bd      	mov	sp, r7
 800b3da:	bd80      	pop	{r7, pc}

0800b3dc <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800b3dc:	b580      	push	{r7, lr}
 800b3de:	b088      	sub	sp, #32
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	6078      	str	r0, [r7, #4]
 800b3e4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800b3ec:	683b      	ldr	r3, [r7, #0]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d10d      	bne.n	800b40e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800b3f2:	693b      	ldr	r3, [r7, #16]
 800b3f4:	699b      	ldr	r3, [r3, #24]
 800b3f6:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800b3f8:	69bb      	ldr	r3, [r7, #24]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d004      	beq.n	800b408 <create_chain+0x2c>
 800b3fe:	693b      	ldr	r3, [r7, #16]
 800b400:	6a1b      	ldr	r3, [r3, #32]
 800b402:	69ba      	ldr	r2, [r7, #24]
 800b404:	429a      	cmp	r2, r3
 800b406:	d31b      	bcc.n	800b440 <create_chain+0x64>
 800b408:	2301      	movs	r3, #1
 800b40a:	61bb      	str	r3, [r7, #24]
 800b40c:	e018      	b.n	800b440 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800b40e:	6839      	ldr	r1, [r7, #0]
 800b410:	6878      	ldr	r0, [r7, #4]
 800b412:	f7ff fb5d 	bl	800aad0 <get_fat>
 800b416:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	2b01      	cmp	r3, #1
 800b41c:	d801      	bhi.n	800b422 <create_chain+0x46>
 800b41e:	2301      	movs	r3, #1
 800b420:	e0d9      	b.n	800b5d6 <create_chain+0x1fa>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b428:	d101      	bne.n	800b42e <create_chain+0x52>
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	e0d3      	b.n	800b5d6 <create_chain+0x1fa>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800b42e:	693b      	ldr	r3, [r7, #16]
 800b430:	6a1b      	ldr	r3, [r3, #32]
 800b432:	68fa      	ldr	r2, [r7, #12]
 800b434:	429a      	cmp	r2, r3
 800b436:	d201      	bcs.n	800b43c <create_chain+0x60>
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	e0cc      	b.n	800b5d6 <create_chain+0x1fa>
		scl = clst;
 800b43c:	683b      	ldr	r3, [r7, #0]
 800b43e:	61bb      	str	r3, [r7, #24]
	}

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800b440:	693b      	ldr	r3, [r7, #16]
 800b442:	781b      	ldrb	r3, [r3, #0]
 800b444:	2b04      	cmp	r3, #4
 800b446:	d164      	bne.n	800b512 <create_chain+0x136>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 800b448:	2201      	movs	r2, #1
 800b44a:	69b9      	ldr	r1, [r7, #24]
 800b44c:	6938      	ldr	r0, [r7, #16]
 800b44e:	f7ff fdb5 	bl	800afbc <find_bitmap>
 800b452:	61f8      	str	r0, [r7, #28]
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 800b454:	69fb      	ldr	r3, [r7, #28]
 800b456:	2b00      	cmp	r3, #0
 800b458:	d003      	beq.n	800b462 <create_chain+0x86>
 800b45a:	69fb      	ldr	r3, [r7, #28]
 800b45c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b460:	d101      	bne.n	800b466 <create_chain+0x8a>
 800b462:	69fb      	ldr	r3, [r7, #28]
 800b464:	e0b7      	b.n	800b5d6 <create_chain+0x1fa>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 800b466:	2301      	movs	r3, #1
 800b468:	2201      	movs	r2, #1
 800b46a:	69f9      	ldr	r1, [r7, #28]
 800b46c:	6938      	ldr	r0, [r7, #16]
 800b46e:	f7ff fe2c 	bl	800b0ca <change_bitmap>
 800b472:	4603      	mov	r3, r0
 800b474:	75fb      	strb	r3, [r7, #23]
		if (res == FR_INT_ERR) return 1;
 800b476:	7dfb      	ldrb	r3, [r7, #23]
 800b478:	2b02      	cmp	r3, #2
 800b47a:	d101      	bne.n	800b480 <create_chain+0xa4>
 800b47c:	2301      	movs	r3, #1
 800b47e:	e0aa      	b.n	800b5d6 <create_chain+0x1fa>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 800b480:	7dfb      	ldrb	r3, [r7, #23]
 800b482:	2b01      	cmp	r3, #1
 800b484:	d102      	bne.n	800b48c <create_chain+0xb0>
 800b486:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b48a:	e0a4      	b.n	800b5d6 <create_chain+0x1fa>
		if (clst == 0) {							/* Is it a new chain? */
 800b48c:	683b      	ldr	r3, [r7, #0]
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d103      	bne.n	800b49a <create_chain+0xbe>
			obj->stat = 2;							/* Set status 'contiguous' */
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	2202      	movs	r2, #2
 800b496:	71da      	strb	r2, [r3, #7]
 800b498:	e011      	b.n	800b4be <create_chain+0xe2>
		} else {									/* It is a stretched chain */
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	79db      	ldrb	r3, [r3, #7]
 800b49e:	2b02      	cmp	r3, #2
 800b4a0:	d10d      	bne.n	800b4be <create_chain+0xe2>
 800b4a2:	69bb      	ldr	r3, [r7, #24]
 800b4a4:	3301      	adds	r3, #1
 800b4a6:	69fa      	ldr	r2, [r7, #28]
 800b4a8:	429a      	cmp	r2, r3
 800b4aa:	d008      	beq.n	800b4be <create_chain+0xe2>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	689b      	ldr	r3, [r3, #8]
 800b4b0:	69ba      	ldr	r2, [r7, #24]
 800b4b2:	1ad2      	subs	r2, r2, r3
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	619a      	str	r2, [r3, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	2203      	movs	r2, #3
 800b4bc:	71da      	strb	r2, [r3, #7]
			}
		}
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	79db      	ldrb	r3, [r3, #7]
 800b4c2:	2b02      	cmp	r3, #2
 800b4c4:	d064      	beq.n	800b590 <create_chain+0x1b4>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 800b4c6:	683b      	ldr	r3, [r7, #0]
 800b4c8:	3301      	adds	r3, #1
 800b4ca:	69fa      	ldr	r2, [r7, #28]
 800b4cc:	429a      	cmp	r2, r3
 800b4ce:	d10b      	bne.n	800b4e8 <create_chain+0x10c>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	69db      	ldr	r3, [r3, #28]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d003      	beq.n	800b4e0 <create_chain+0x104>
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	69db      	ldr	r3, [r3, #28]
 800b4dc:	3301      	adds	r3, #1
 800b4de:	e000      	b.n	800b4e2 <create_chain+0x106>
 800b4e0:	2302      	movs	r3, #2
 800b4e2:	687a      	ldr	r2, [r7, #4]
 800b4e4:	61d3      	str	r3, [r2, #28]
 800b4e6:	e053      	b.n	800b590 <create_chain+0x1b4>
			} else {				/* New fragment */
				if (obj->n_frag == 0) obj->n_frag = 1;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	69db      	ldr	r3, [r3, #28]
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d102      	bne.n	800b4f6 <create_chain+0x11a>
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	2201      	movs	r2, #1
 800b4f4:	61da      	str	r2, [r3, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 800b4f6:	69fa      	ldr	r2, [r7, #28]
 800b4f8:	6839      	ldr	r1, [r7, #0]
 800b4fa:	6878      	ldr	r0, [r7, #4]
 800b4fc:	f7ff fe89 	bl	800b212 <fill_last_frag>
 800b500:	4603      	mov	r3, r0
 800b502:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) obj->n_frag = 1;
 800b504:	7dfb      	ldrb	r3, [r7, #23]
 800b506:	2b00      	cmp	r3, #0
 800b508:	d142      	bne.n	800b590 <create_chain+0x1b4>
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	2201      	movs	r2, #1
 800b50e:	61da      	str	r2, [r3, #28]
 800b510:	e03e      	b.n	800b590 <create_chain+0x1b4>
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800b512:	69bb      	ldr	r3, [r7, #24]
 800b514:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800b516:	69fb      	ldr	r3, [r7, #28]
 800b518:	3301      	adds	r3, #1
 800b51a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800b51c:	693b      	ldr	r3, [r7, #16]
 800b51e:	6a1b      	ldr	r3, [r3, #32]
 800b520:	69fa      	ldr	r2, [r7, #28]
 800b522:	429a      	cmp	r2, r3
 800b524:	d307      	bcc.n	800b536 <create_chain+0x15a>
				ncl = 2;
 800b526:	2302      	movs	r3, #2
 800b528:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800b52a:	69fa      	ldr	r2, [r7, #28]
 800b52c:	69bb      	ldr	r3, [r7, #24]
 800b52e:	429a      	cmp	r2, r3
 800b530:	d901      	bls.n	800b536 <create_chain+0x15a>
 800b532:	2300      	movs	r3, #0
 800b534:	e04f      	b.n	800b5d6 <create_chain+0x1fa>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800b536:	69f9      	ldr	r1, [r7, #28]
 800b538:	6878      	ldr	r0, [r7, #4]
 800b53a:	f7ff fac9 	bl	800aad0 <get_fat>
 800b53e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	2b00      	cmp	r3, #0
 800b544:	d00e      	beq.n	800b564 <create_chain+0x188>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	2b01      	cmp	r3, #1
 800b54a:	d003      	beq.n	800b554 <create_chain+0x178>
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b552:	d101      	bne.n	800b558 <create_chain+0x17c>
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	e03e      	b.n	800b5d6 <create_chain+0x1fa>
			if (ncl == scl) return 0;		/* No free cluster */
 800b558:	69fa      	ldr	r2, [r7, #28]
 800b55a:	69bb      	ldr	r3, [r7, #24]
 800b55c:	429a      	cmp	r2, r3
 800b55e:	d1da      	bne.n	800b516 <create_chain+0x13a>
 800b560:	2300      	movs	r3, #0
 800b562:	e038      	b.n	800b5d6 <create_chain+0x1fa>
			if (cs == 0) break;				/* Found a free cluster */
 800b564:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800b566:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b56a:	69f9      	ldr	r1, [r7, #28]
 800b56c:	6938      	ldr	r0, [r7, #16]
 800b56e:	f7ff fc05 	bl	800ad7c <put_fat>
 800b572:	4603      	mov	r3, r0
 800b574:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800b576:	7dfb      	ldrb	r3, [r7, #23]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d109      	bne.n	800b590 <create_chain+0x1b4>
 800b57c:	683b      	ldr	r3, [r7, #0]
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d006      	beq.n	800b590 <create_chain+0x1b4>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800b582:	69fa      	ldr	r2, [r7, #28]
 800b584:	6839      	ldr	r1, [r7, #0]
 800b586:	6938      	ldr	r0, [r7, #16]
 800b588:	f7ff fbf8 	bl	800ad7c <put_fat>
 800b58c:	4603      	mov	r3, r0
 800b58e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800b590:	7dfb      	ldrb	r3, [r7, #23]
 800b592:	2b00      	cmp	r3, #0
 800b594:	d116      	bne.n	800b5c4 <create_chain+0x1e8>
		fs->last_clst = ncl;
 800b596:	693b      	ldr	r3, [r7, #16]
 800b598:	69fa      	ldr	r2, [r7, #28]
 800b59a:	619a      	str	r2, [r3, #24]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800b59c:	693b      	ldr	r3, [r7, #16]
 800b59e:	69da      	ldr	r2, [r3, #28]
 800b5a0:	693b      	ldr	r3, [r7, #16]
 800b5a2:	6a1b      	ldr	r3, [r3, #32]
 800b5a4:	3b02      	subs	r3, #2
 800b5a6:	429a      	cmp	r2, r3
 800b5a8:	d804      	bhi.n	800b5b4 <create_chain+0x1d8>
 800b5aa:	693b      	ldr	r3, [r7, #16]
 800b5ac:	69db      	ldr	r3, [r3, #28]
 800b5ae:	1e5a      	subs	r2, r3, #1
 800b5b0:	693b      	ldr	r3, [r7, #16]
 800b5b2:	61da      	str	r2, [r3, #28]
		fs->fsi_flag |= 1;
 800b5b4:	693b      	ldr	r3, [r7, #16]
 800b5b6:	791b      	ldrb	r3, [r3, #4]
 800b5b8:	f043 0301 	orr.w	r3, r3, #1
 800b5bc:	b2da      	uxtb	r2, r3
 800b5be:	693b      	ldr	r3, [r7, #16]
 800b5c0:	711a      	strb	r2, [r3, #4]
 800b5c2:	e007      	b.n	800b5d4 <create_chain+0x1f8>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800b5c4:	7dfb      	ldrb	r3, [r7, #23]
 800b5c6:	2b01      	cmp	r3, #1
 800b5c8:	d102      	bne.n	800b5d0 <create_chain+0x1f4>
 800b5ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b5ce:	e000      	b.n	800b5d2 <create_chain+0x1f6>
 800b5d0:	2301      	movs	r3, #1
 800b5d2:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800b5d4:	69fb      	ldr	r3, [r7, #28]
}
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	3720      	adds	r7, #32
 800b5da:	46bd      	mov	sp, r7
 800b5dc:	bd80      	pop	{r7, pc}

0800b5de <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800b5de:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800b5e2:	b088      	sub	sp, #32
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	60f8      	str	r0, [r7, #12]
 800b5e8:	e9c7 2300 	strd	r2, r3, [r7]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	617b      	str	r3, [r7, #20]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b5f6:	3304      	adds	r3, #4
 800b5f8:	61bb      	str	r3, [r7, #24]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800b5fa:	697b      	ldr	r3, [r7, #20]
 800b5fc:	899b      	ldrh	r3, [r3, #12]
 800b5fe:	b29b      	uxth	r3, r3
 800b600:	2200      	movs	r2, #0
 800b602:	4698      	mov	r8, r3
 800b604:	4691      	mov	r9, r2
 800b606:	4642      	mov	r2, r8
 800b608:	464b      	mov	r3, r9
 800b60a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b60e:	f7f5 fb63 	bl	8000cd8 <__aeabi_uldivmod>
 800b612:	4602      	mov	r2, r0
 800b614:	460b      	mov	r3, r1
 800b616:	4610      	mov	r0, r2
 800b618:	4619      	mov	r1, r3
 800b61a:	697b      	ldr	r3, [r7, #20]
 800b61c:	895b      	ldrh	r3, [r3, #10]
 800b61e:	b29b      	uxth	r3, r3
 800b620:	2200      	movs	r2, #0
 800b622:	461c      	mov	r4, r3
 800b624:	4615      	mov	r5, r2
 800b626:	4622      	mov	r2, r4
 800b628:	462b      	mov	r3, r5
 800b62a:	f7f5 fb55 	bl	8000cd8 <__aeabi_uldivmod>
 800b62e:	4602      	mov	r2, r0
 800b630:	460b      	mov	r3, r1
 800b632:	4613      	mov	r3, r2
 800b634:	61fb      	str	r3, [r7, #28]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b636:	69bb      	ldr	r3, [r7, #24]
 800b638:	1d1a      	adds	r2, r3, #4
 800b63a:	61ba      	str	r2, [r7, #24]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	613b      	str	r3, [r7, #16]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800b640:	693b      	ldr	r3, [r7, #16]
 800b642:	2b00      	cmp	r3, #0
 800b644:	d101      	bne.n	800b64a <clmt_clust+0x6c>
 800b646:	2300      	movs	r3, #0
 800b648:	e010      	b.n	800b66c <clmt_clust+0x8e>
		if (cl < ncl) break;	/* In this fragment? */
 800b64a:	69fa      	ldr	r2, [r7, #28]
 800b64c:	693b      	ldr	r3, [r7, #16]
 800b64e:	429a      	cmp	r2, r3
 800b650:	d307      	bcc.n	800b662 <clmt_clust+0x84>
		cl -= ncl; tbl++;		/* Next fragment */
 800b652:	69fa      	ldr	r2, [r7, #28]
 800b654:	693b      	ldr	r3, [r7, #16]
 800b656:	1ad3      	subs	r3, r2, r3
 800b658:	61fb      	str	r3, [r7, #28]
 800b65a:	69bb      	ldr	r3, [r7, #24]
 800b65c:	3304      	adds	r3, #4
 800b65e:	61bb      	str	r3, [r7, #24]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b660:	e7e9      	b.n	800b636 <clmt_clust+0x58>
		if (cl < ncl) break;	/* In this fragment? */
 800b662:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800b664:	69bb      	ldr	r3, [r7, #24]
 800b666:	681a      	ldr	r2, [r3, #0]
 800b668:	69fb      	ldr	r3, [r7, #28]
 800b66a:	4413      	add	r3, r2
}
 800b66c:	4618      	mov	r0, r3
 800b66e:	3720      	adds	r7, #32
 800b670:	46bd      	mov	sp, r7
 800b672:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800b676 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800b676:	b580      	push	{r7, lr}
 800b678:	b086      	sub	sp, #24
 800b67a:	af00      	add	r7, sp, #0
 800b67c:	6078      	str	r0, [r7, #4]
 800b67e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800b686:	693b      	ldr	r3, [r7, #16]
 800b688:	781b      	ldrb	r3, [r3, #0]
 800b68a:	2b04      	cmp	r3, #4
 800b68c:	d102      	bne.n	800b694 <dir_sdi+0x1e>
 800b68e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b692:	e001      	b.n	800b698 <dir_sdi+0x22>
 800b694:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800b698:	683b      	ldr	r3, [r7, #0]
 800b69a:	429a      	cmp	r2, r3
 800b69c:	d904      	bls.n	800b6a8 <dir_sdi+0x32>
 800b69e:	683b      	ldr	r3, [r7, #0]
 800b6a0:	f003 031f 	and.w	r3, r3, #31
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d001      	beq.n	800b6ac <dir_sdi+0x36>
		return FR_INT_ERR;
 800b6a8:	2302      	movs	r3, #2
 800b6aa:	e074      	b.n	800b796 <dir_sdi+0x120>
	}
	dp->dptr = ofs;				/* Set current offset */
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	683a      	ldr	r2, [r7, #0]
 800b6b0:	631a      	str	r2, [r3, #48]	; 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	689b      	ldr	r3, [r3, #8]
 800b6b6:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800b6b8:	697b      	ldr	r3, [r7, #20]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d109      	bne.n	800b6d2 <dir_sdi+0x5c>
 800b6be:	693b      	ldr	r3, [r7, #16]
 800b6c0:	781b      	ldrb	r3, [r3, #0]
 800b6c2:	2b02      	cmp	r3, #2
 800b6c4:	d905      	bls.n	800b6d2 <dir_sdi+0x5c>
		clst = fs->dirbase;
 800b6c6:	693b      	ldr	r3, [r7, #16]
 800b6c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6ca:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	2200      	movs	r2, #0
 800b6d0:	71da      	strb	r2, [r3, #7]
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800b6d2:	697b      	ldr	r3, [r7, #20]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d10c      	bne.n	800b6f2 <dir_sdi+0x7c>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800b6d8:	683b      	ldr	r3, [r7, #0]
 800b6da:	095b      	lsrs	r3, r3, #5
 800b6dc:	693a      	ldr	r2, [r7, #16]
 800b6de:	8912      	ldrh	r2, [r2, #8]
 800b6e0:	4293      	cmp	r3, r2
 800b6e2:	d301      	bcc.n	800b6e8 <dir_sdi+0x72>
 800b6e4:	2302      	movs	r3, #2
 800b6e6:	e056      	b.n	800b796 <dir_sdi+0x120>
		dp->sect = fs->dirbase;
 800b6e8:	693b      	ldr	r3, [r7, #16]
 800b6ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	639a      	str	r2, [r3, #56]	; 0x38
 800b6f0:	e02d      	b.n	800b74e <dir_sdi+0xd8>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800b6f2:	693b      	ldr	r3, [r7, #16]
 800b6f4:	895b      	ldrh	r3, [r3, #10]
 800b6f6:	461a      	mov	r2, r3
 800b6f8:	693b      	ldr	r3, [r7, #16]
 800b6fa:	899b      	ldrh	r3, [r3, #12]
 800b6fc:	fb02 f303 	mul.w	r3, r2, r3
 800b700:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b702:	e019      	b.n	800b738 <dir_sdi+0xc2>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	6979      	ldr	r1, [r7, #20]
 800b708:	4618      	mov	r0, r3
 800b70a:	f7ff f9e1 	bl	800aad0 <get_fat>
 800b70e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b710:	697b      	ldr	r3, [r7, #20]
 800b712:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b716:	d101      	bne.n	800b71c <dir_sdi+0xa6>
 800b718:	2301      	movs	r3, #1
 800b71a:	e03c      	b.n	800b796 <dir_sdi+0x120>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800b71c:	697b      	ldr	r3, [r7, #20]
 800b71e:	2b01      	cmp	r3, #1
 800b720:	d904      	bls.n	800b72c <dir_sdi+0xb6>
 800b722:	693b      	ldr	r3, [r7, #16]
 800b724:	6a1b      	ldr	r3, [r3, #32]
 800b726:	697a      	ldr	r2, [r7, #20]
 800b728:	429a      	cmp	r2, r3
 800b72a:	d301      	bcc.n	800b730 <dir_sdi+0xba>
 800b72c:	2302      	movs	r3, #2
 800b72e:	e032      	b.n	800b796 <dir_sdi+0x120>
			ofs -= csz;
 800b730:	683a      	ldr	r2, [r7, #0]
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	1ad3      	subs	r3, r2, r3
 800b736:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b738:	683a      	ldr	r2, [r7, #0]
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	429a      	cmp	r2, r3
 800b73e:	d2e1      	bcs.n	800b704 <dir_sdi+0x8e>
		}
		dp->sect = clust2sect(fs, clst);
 800b740:	6979      	ldr	r1, [r7, #20]
 800b742:	6938      	ldr	r0, [r7, #16]
 800b744:	f7ff f9a4 	bl	800aa90 <clust2sect>
 800b748:	4602      	mov	r2, r0
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	639a      	str	r2, [r3, #56]	; 0x38
	}
	dp->clust = clst;					/* Current cluster# */
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	697a      	ldr	r2, [r7, #20]
 800b752:	635a      	str	r2, [r3, #52]	; 0x34
	if (!dp->sect) return FR_INT_ERR;
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d101      	bne.n	800b760 <dir_sdi+0xea>
 800b75c:	2302      	movs	r3, #2
 800b75e:	e01a      	b.n	800b796 <dir_sdi+0x120>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b764:	693b      	ldr	r3, [r7, #16]
 800b766:	899b      	ldrh	r3, [r3, #12]
 800b768:	4619      	mov	r1, r3
 800b76a:	683b      	ldr	r3, [r7, #0]
 800b76c:	fbb3 f3f1 	udiv	r3, r3, r1
 800b770:	441a      	add	r2, r3
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	639a      	str	r2, [r3, #56]	; 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800b776:	693b      	ldr	r3, [r7, #16]
 800b778:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800b77c:	693b      	ldr	r3, [r7, #16]
 800b77e:	899b      	ldrh	r3, [r3, #12]
 800b780:	461a      	mov	r2, r3
 800b782:	683b      	ldr	r3, [r7, #0]
 800b784:	fbb3 f0f2 	udiv	r0, r3, r2
 800b788:	fb00 f202 	mul.w	r2, r0, r2
 800b78c:	1a9b      	subs	r3, r3, r2
 800b78e:	18ca      	adds	r2, r1, r3
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 800b794:	2300      	movs	r3, #0
}
 800b796:	4618      	mov	r0, r3
 800b798:	3718      	adds	r7, #24
 800b79a:	46bd      	mov	sp, r7
 800b79c:	bd80      	pop	{r7, pc}

0800b79e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800b79e:	b580      	push	{r7, lr}
 800b7a0:	b086      	sub	sp, #24
 800b7a2:	af00      	add	r7, sp, #0
 800b7a4:	6078      	str	r0, [r7, #4]
 800b7a6:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7b2:	3320      	adds	r3, #32
 800b7b4:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d00b      	beq.n	800b7d6 <dir_next+0x38>
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	781b      	ldrb	r3, [r3, #0]
 800b7c2:	2b04      	cmp	r3, #4
 800b7c4:	d102      	bne.n	800b7cc <dir_next+0x2e>
 800b7c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b7ca:	e001      	b.n	800b7d0 <dir_next+0x32>
 800b7cc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800b7d0:	68bb      	ldr	r3, [r7, #8]
 800b7d2:	429a      	cmp	r2, r3
 800b7d4:	d801      	bhi.n	800b7da <dir_next+0x3c>
 800b7d6:	2304      	movs	r3, #4
 800b7d8:	e0c3      	b.n	800b962 <dir_next+0x1c4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	899b      	ldrh	r3, [r3, #12]
 800b7de:	461a      	mov	r2, r3
 800b7e0:	68bb      	ldr	r3, [r7, #8]
 800b7e2:	fbb3 f1f2 	udiv	r1, r3, r2
 800b7e6:	fb01 f202 	mul.w	r2, r1, r2
 800b7ea:	1a9b      	subs	r3, r3, r2
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	f040 80a5 	bne.w	800b93c <dir_next+0x19e>
		dp->sect++;				/* Next sector */
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7f6:	1c5a      	adds	r2, r3, #1
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	639a      	str	r2, [r3, #56]	; 0x38

		if (!dp->clust) {		/* Static table */
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b800:	2b00      	cmp	r3, #0
 800b802:	d10b      	bne.n	800b81c <dir_next+0x7e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800b804:	68bb      	ldr	r3, [r7, #8]
 800b806:	095b      	lsrs	r3, r3, #5
 800b808:	68fa      	ldr	r2, [r7, #12]
 800b80a:	8912      	ldrh	r2, [r2, #8]
 800b80c:	4293      	cmp	r3, r2
 800b80e:	f0c0 8095 	bcc.w	800b93c <dir_next+0x19e>
				dp->sect = 0; return FR_NO_FILE;
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	2200      	movs	r2, #0
 800b816:	639a      	str	r2, [r3, #56]	; 0x38
 800b818:	2304      	movs	r3, #4
 800b81a:	e0a2      	b.n	800b962 <dir_next+0x1c4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	899b      	ldrh	r3, [r3, #12]
 800b820:	461a      	mov	r2, r3
 800b822:	68bb      	ldr	r3, [r7, #8]
 800b824:	fbb3 f3f2 	udiv	r3, r3, r2
 800b828:	68fa      	ldr	r2, [r7, #12]
 800b82a:	8952      	ldrh	r2, [r2, #10]
 800b82c:	3a01      	subs	r2, #1
 800b82e:	4013      	ands	r3, r2
 800b830:	2b00      	cmp	r3, #0
 800b832:	f040 8083 	bne.w	800b93c <dir_next+0x19e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800b836:	687a      	ldr	r2, [r7, #4]
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b83c:	4619      	mov	r1, r3
 800b83e:	4610      	mov	r0, r2
 800b840:	f7ff f946 	bl	800aad0 <get_fat>
 800b844:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800b846:	697b      	ldr	r3, [r7, #20]
 800b848:	2b01      	cmp	r3, #1
 800b84a:	d801      	bhi.n	800b850 <dir_next+0xb2>
 800b84c:	2302      	movs	r3, #2
 800b84e:	e088      	b.n	800b962 <dir_next+0x1c4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800b850:	697b      	ldr	r3, [r7, #20]
 800b852:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b856:	d101      	bne.n	800b85c <dir_next+0xbe>
 800b858:	2301      	movs	r3, #1
 800b85a:	e082      	b.n	800b962 <dir_next+0x1c4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	6a1b      	ldr	r3, [r3, #32]
 800b860:	697a      	ldr	r2, [r7, #20]
 800b862:	429a      	cmp	r2, r3
 800b864:	d360      	bcc.n	800b928 <dir_next+0x18a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800b866:	683b      	ldr	r3, [r7, #0]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d104      	bne.n	800b876 <dir_next+0xd8>
						dp->sect = 0; return FR_NO_FILE;
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	2200      	movs	r2, #0
 800b870:	639a      	str	r2, [r3, #56]	; 0x38
 800b872:	2304      	movs	r3, #4
 800b874:	e075      	b.n	800b962 <dir_next+0x1c4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800b876:	687a      	ldr	r2, [r7, #4]
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b87c:	4619      	mov	r1, r3
 800b87e:	4610      	mov	r0, r2
 800b880:	f7ff fdac 	bl	800b3dc <create_chain>
 800b884:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800b886:	697b      	ldr	r3, [r7, #20]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d101      	bne.n	800b890 <dir_next+0xf2>
 800b88c:	2307      	movs	r3, #7
 800b88e:	e068      	b.n	800b962 <dir_next+0x1c4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800b890:	697b      	ldr	r3, [r7, #20]
 800b892:	2b01      	cmp	r3, #1
 800b894:	d101      	bne.n	800b89a <dir_next+0xfc>
 800b896:	2302      	movs	r3, #2
 800b898:	e063      	b.n	800b962 <dir_next+0x1c4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b89a:	697b      	ldr	r3, [r7, #20]
 800b89c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b8a0:	d101      	bne.n	800b8a6 <dir_next+0x108>
 800b8a2:	2301      	movs	r3, #1
 800b8a4:	e05d      	b.n	800b962 <dir_next+0x1c4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	79db      	ldrb	r3, [r3, #7]
 800b8aa:	f043 0304 	orr.w	r3, r3, #4
 800b8ae:	b2da      	uxtb	r2, r3
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	71da      	strb	r2, [r3, #7]
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800b8b4:	68f8      	ldr	r0, [r7, #12]
 800b8b6:	f7ff f809 	bl	800a8cc <sync_window>
 800b8ba:	4603      	mov	r3, r0
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d001      	beq.n	800b8c4 <dir_next+0x126>
 800b8c0:	2301      	movs	r3, #1
 800b8c2:	e04e      	b.n	800b962 <dir_next+0x1c4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	899b      	ldrh	r3, [r3, #12]
 800b8ce:	461a      	mov	r2, r3
 800b8d0:	2100      	movs	r1, #0
 800b8d2:	f7fe fe31 	bl	800a538 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	613b      	str	r3, [r7, #16]
 800b8da:	6979      	ldr	r1, [r7, #20]
 800b8dc:	68f8      	ldr	r0, [r7, #12]
 800b8de:	f7ff f8d7 	bl	800aa90 <clust2sect>
 800b8e2:	4602      	mov	r2, r0
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	639a      	str	r2, [r3, #56]	; 0x38
 800b8e8:	e012      	b.n	800b910 <dir_next+0x172>
						fs->wflag = 1;
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	2201      	movs	r2, #1
 800b8ee:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800b8f0:	68f8      	ldr	r0, [r7, #12]
 800b8f2:	f7fe ffeb 	bl	800a8cc <sync_window>
 800b8f6:	4603      	mov	r3, r0
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d001      	beq.n	800b900 <dir_next+0x162>
 800b8fc:	2301      	movs	r3, #1
 800b8fe:	e030      	b.n	800b962 <dir_next+0x1c4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b900:	693b      	ldr	r3, [r7, #16]
 800b902:	3301      	adds	r3, #1
 800b904:	613b      	str	r3, [r7, #16]
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b90a:	1c5a      	adds	r2, r3, #1
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	639a      	str	r2, [r3, #56]	; 0x38
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	895b      	ldrh	r3, [r3, #10]
 800b914:	461a      	mov	r2, r3
 800b916:	693b      	ldr	r3, [r7, #16]
 800b918:	4293      	cmp	r3, r2
 800b91a:	d3e6      	bcc.n	800b8ea <dir_next+0x14c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b920:	693b      	ldr	r3, [r7, #16]
 800b922:	1ad2      	subs	r2, r2, r3
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	639a      	str	r2, [r3, #56]	; 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	697a      	ldr	r2, [r7, #20]
 800b92c:	635a      	str	r2, [r3, #52]	; 0x34
				dp->sect = clust2sect(fs, clst);
 800b92e:	6979      	ldr	r1, [r7, #20]
 800b930:	68f8      	ldr	r0, [r7, #12]
 800b932:	f7ff f8ad 	bl	800aa90 <clust2sect>
 800b936:	4602      	mov	r2, r0
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	639a      	str	r2, [r3, #56]	; 0x38
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	68ba      	ldr	r2, [r7, #8]
 800b940:	631a      	str	r2, [r3, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	899b      	ldrh	r3, [r3, #12]
 800b94c:	461a      	mov	r2, r3
 800b94e:	68bb      	ldr	r3, [r7, #8]
 800b950:	fbb3 f0f2 	udiv	r0, r3, r2
 800b954:	fb00 f202 	mul.w	r2, r0, r2
 800b958:	1a9b      	subs	r3, r3, r2
 800b95a:	18ca      	adds	r2, r1, r3
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 800b960:	2300      	movs	r3, #0
}
 800b962:	4618      	mov	r0, r3
 800b964:	3718      	adds	r7, #24
 800b966:	46bd      	mov	sp, r7
 800b968:	bd80      	pop	{r7, pc}

0800b96a <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800b96a:	b580      	push	{r7, lr}
 800b96c:	b086      	sub	sp, #24
 800b96e:	af00      	add	r7, sp, #0
 800b970:	6078      	str	r0, [r7, #4]
 800b972:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800b97a:	2100      	movs	r1, #0
 800b97c:	6878      	ldr	r0, [r7, #4]
 800b97e:	f7ff fe7a 	bl	800b676 <dir_sdi>
 800b982:	4603      	mov	r3, r0
 800b984:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b986:	7dfb      	ldrb	r3, [r7, #23]
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d140      	bne.n	800ba0e <dir_alloc+0xa4>
		n = 0;
 800b98c:	2300      	movs	r3, #0
 800b98e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b994:	4619      	mov	r1, r3
 800b996:	68f8      	ldr	r0, [r7, #12]
 800b998:	f7fe ffdc 	bl	800a954 <move_window>
 800b99c:	4603      	mov	r3, r0
 800b99e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b9a0:	7dfb      	ldrb	r3, [r7, #23]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d132      	bne.n	800ba0c <dir_alloc+0xa2>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	781b      	ldrb	r3, [r3, #0]
 800b9aa:	2b04      	cmp	r3, #4
 800b9ac:	d108      	bne.n	800b9c0 <dir_alloc+0x56>
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9b2:	781b      	ldrb	r3, [r3, #0]
 800b9b4:	b25b      	sxtb	r3, r3
 800b9b6:	43db      	mvns	r3, r3
 800b9b8:	b2db      	uxtb	r3, r3
 800b9ba:	09db      	lsrs	r3, r3, #7
 800b9bc:	b2db      	uxtb	r3, r3
 800b9be:	e00f      	b.n	800b9e0 <dir_alloc+0x76>
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9c4:	781b      	ldrb	r3, [r3, #0]
 800b9c6:	2be5      	cmp	r3, #229	; 0xe5
 800b9c8:	d004      	beq.n	800b9d4 <dir_alloc+0x6a>
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9ce:	781b      	ldrb	r3, [r3, #0]
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d101      	bne.n	800b9d8 <dir_alloc+0x6e>
 800b9d4:	2301      	movs	r3, #1
 800b9d6:	e000      	b.n	800b9da <dir_alloc+0x70>
 800b9d8:	2300      	movs	r3, #0
 800b9da:	f003 0301 	and.w	r3, r3, #1
 800b9de:	b2db      	uxtb	r3, r3
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d007      	beq.n	800b9f4 <dir_alloc+0x8a>
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800b9e4:	693b      	ldr	r3, [r7, #16]
 800b9e6:	3301      	adds	r3, #1
 800b9e8:	613b      	str	r3, [r7, #16]
 800b9ea:	693a      	ldr	r2, [r7, #16]
 800b9ec:	683b      	ldr	r3, [r7, #0]
 800b9ee:	429a      	cmp	r2, r3
 800b9f0:	d102      	bne.n	800b9f8 <dir_alloc+0x8e>
 800b9f2:	e00c      	b.n	800ba0e <dir_alloc+0xa4>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800b9f4:	2300      	movs	r3, #0
 800b9f6:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800b9f8:	2101      	movs	r1, #1
 800b9fa:	6878      	ldr	r0, [r7, #4]
 800b9fc:	f7ff fecf 	bl	800b79e <dir_next>
 800ba00:	4603      	mov	r3, r0
 800ba02:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800ba04:	7dfb      	ldrb	r3, [r7, #23]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d0c2      	beq.n	800b990 <dir_alloc+0x26>
 800ba0a:	e000      	b.n	800ba0e <dir_alloc+0xa4>
			if (res != FR_OK) break;
 800ba0c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800ba0e:	7dfb      	ldrb	r3, [r7, #23]
 800ba10:	2b04      	cmp	r3, #4
 800ba12:	d101      	bne.n	800ba18 <dir_alloc+0xae>
 800ba14:	2307      	movs	r3, #7
 800ba16:	75fb      	strb	r3, [r7, #23]
	return res;
 800ba18:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba1a:	4618      	mov	r0, r3
 800ba1c:	3718      	adds	r7, #24
 800ba1e:	46bd      	mov	sp, r7
 800ba20:	bd80      	pop	{r7, pc}

0800ba22 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800ba22:	b580      	push	{r7, lr}
 800ba24:	b084      	sub	sp, #16
 800ba26:	af00      	add	r7, sp, #0
 800ba28:	6078      	str	r0, [r7, #4]
 800ba2a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800ba2c:	683b      	ldr	r3, [r7, #0]
 800ba2e:	331a      	adds	r3, #26
 800ba30:	4618      	mov	r0, r3
 800ba32:	f7fe fb7b 	bl	800a12c <ld_word>
 800ba36:	4603      	mov	r3, r0
 800ba38:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	781b      	ldrb	r3, [r3, #0]
 800ba3e:	2b03      	cmp	r3, #3
 800ba40:	d109      	bne.n	800ba56 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800ba42:	683b      	ldr	r3, [r7, #0]
 800ba44:	3314      	adds	r3, #20
 800ba46:	4618      	mov	r0, r3
 800ba48:	f7fe fb70 	bl	800a12c <ld_word>
 800ba4c:	4603      	mov	r3, r0
 800ba4e:	041b      	lsls	r3, r3, #16
 800ba50:	68fa      	ldr	r2, [r7, #12]
 800ba52:	4313      	orrs	r3, r2
 800ba54:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800ba56:	68fb      	ldr	r3, [r7, #12]
}
 800ba58:	4618      	mov	r0, r3
 800ba5a:	3710      	adds	r7, #16
 800ba5c:	46bd      	mov	sp, r7
 800ba5e:	bd80      	pop	{r7, pc}

0800ba60 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800ba60:	b580      	push	{r7, lr}
 800ba62:	b084      	sub	sp, #16
 800ba64:	af00      	add	r7, sp, #0
 800ba66:	60f8      	str	r0, [r7, #12]
 800ba68:	60b9      	str	r1, [r7, #8]
 800ba6a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800ba6c:	68bb      	ldr	r3, [r7, #8]
 800ba6e:	331a      	adds	r3, #26
 800ba70:	687a      	ldr	r2, [r7, #4]
 800ba72:	b292      	uxth	r2, r2
 800ba74:	4611      	mov	r1, r2
 800ba76:	4618      	mov	r0, r3
 800ba78:	f7fe fc6e 	bl	800a358 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	781b      	ldrb	r3, [r3, #0]
 800ba80:	2b03      	cmp	r3, #3
 800ba82:	d109      	bne.n	800ba98 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800ba84:	68bb      	ldr	r3, [r7, #8]
 800ba86:	f103 0214 	add.w	r2, r3, #20
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	0c1b      	lsrs	r3, r3, #16
 800ba8e:	b29b      	uxth	r3, r3
 800ba90:	4619      	mov	r1, r3
 800ba92:	4610      	mov	r0, r2
 800ba94:	f7fe fc60 	bl	800a358 <st_word>
	}
}
 800ba98:	bf00      	nop
 800ba9a:	3710      	adds	r7, #16
 800ba9c:	46bd      	mov	sp, r7
 800ba9e:	bd80      	pop	{r7, pc}

0800baa0 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800baa0:	b590      	push	{r4, r7, lr}
 800baa2:	b087      	sub	sp, #28
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	6078      	str	r0, [r7, #4]
 800baa8:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800baaa:	683b      	ldr	r3, [r7, #0]
 800baac:	331a      	adds	r3, #26
 800baae:	4618      	mov	r0, r3
 800bab0:	f7fe fb3c 	bl	800a12c <ld_word>
 800bab4:	4603      	mov	r3, r0
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d001      	beq.n	800babe <cmp_lfn+0x1e>
 800baba:	2300      	movs	r3, #0
 800babc:	e059      	b.n	800bb72 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800babe:	683b      	ldr	r3, [r7, #0]
 800bac0:	781b      	ldrb	r3, [r3, #0]
 800bac2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bac6:	1e5a      	subs	r2, r3, #1
 800bac8:	4613      	mov	r3, r2
 800baca:	005b      	lsls	r3, r3, #1
 800bacc:	4413      	add	r3, r2
 800bace:	009b      	lsls	r3, r3, #2
 800bad0:	4413      	add	r3, r2
 800bad2:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800bad4:	2301      	movs	r3, #1
 800bad6:	81fb      	strh	r3, [r7, #14]
 800bad8:	2300      	movs	r3, #0
 800bada:	613b      	str	r3, [r7, #16]
 800badc:	e033      	b.n	800bb46 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800bade:	4a27      	ldr	r2, [pc, #156]	; (800bb7c <cmp_lfn+0xdc>)
 800bae0:	693b      	ldr	r3, [r7, #16]
 800bae2:	4413      	add	r3, r2
 800bae4:	781b      	ldrb	r3, [r3, #0]
 800bae6:	461a      	mov	r2, r3
 800bae8:	683b      	ldr	r3, [r7, #0]
 800baea:	4413      	add	r3, r2
 800baec:	4618      	mov	r0, r3
 800baee:	f7fe fb1d 	bl	800a12c <ld_word>
 800baf2:	4603      	mov	r3, r0
 800baf4:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800baf6:	89fb      	ldrh	r3, [r7, #14]
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d01a      	beq.n	800bb32 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800bafc:	697b      	ldr	r3, [r7, #20]
 800bafe:	2bfe      	cmp	r3, #254	; 0xfe
 800bb00:	d812      	bhi.n	800bb28 <cmp_lfn+0x88>
 800bb02:	89bb      	ldrh	r3, [r7, #12]
 800bb04:	4618      	mov	r0, r3
 800bb06:	f003 fa23 	bl	800ef50 <ff_wtoupper>
 800bb0a:	4603      	mov	r3, r0
 800bb0c:	461c      	mov	r4, r3
 800bb0e:	697b      	ldr	r3, [r7, #20]
 800bb10:	1c5a      	adds	r2, r3, #1
 800bb12:	617a      	str	r2, [r7, #20]
 800bb14:	005b      	lsls	r3, r3, #1
 800bb16:	687a      	ldr	r2, [r7, #4]
 800bb18:	4413      	add	r3, r2
 800bb1a:	881b      	ldrh	r3, [r3, #0]
 800bb1c:	4618      	mov	r0, r3
 800bb1e:	f003 fa17 	bl	800ef50 <ff_wtoupper>
 800bb22:	4603      	mov	r3, r0
 800bb24:	429c      	cmp	r4, r3
 800bb26:	d001      	beq.n	800bb2c <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800bb28:	2300      	movs	r3, #0
 800bb2a:	e022      	b.n	800bb72 <cmp_lfn+0xd2>
			}
			wc = uc;
 800bb2c:	89bb      	ldrh	r3, [r7, #12]
 800bb2e:	81fb      	strh	r3, [r7, #14]
 800bb30:	e006      	b.n	800bb40 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800bb32:	89bb      	ldrh	r3, [r7, #12]
 800bb34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bb38:	4293      	cmp	r3, r2
 800bb3a:	d001      	beq.n	800bb40 <cmp_lfn+0xa0>
 800bb3c:	2300      	movs	r3, #0
 800bb3e:	e018      	b.n	800bb72 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800bb40:	693b      	ldr	r3, [r7, #16]
 800bb42:	3301      	adds	r3, #1
 800bb44:	613b      	str	r3, [r7, #16]
 800bb46:	693b      	ldr	r3, [r7, #16]
 800bb48:	2b0c      	cmp	r3, #12
 800bb4a:	d9c8      	bls.n	800bade <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800bb4c:	683b      	ldr	r3, [r7, #0]
 800bb4e:	781b      	ldrb	r3, [r3, #0]
 800bb50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d00b      	beq.n	800bb70 <cmp_lfn+0xd0>
 800bb58:	89fb      	ldrh	r3, [r7, #14]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d008      	beq.n	800bb70 <cmp_lfn+0xd0>
 800bb5e:	697b      	ldr	r3, [r7, #20]
 800bb60:	005b      	lsls	r3, r3, #1
 800bb62:	687a      	ldr	r2, [r7, #4]
 800bb64:	4413      	add	r3, r2
 800bb66:	881b      	ldrh	r3, [r3, #0]
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d001      	beq.n	800bb70 <cmp_lfn+0xd0>
 800bb6c:	2300      	movs	r3, #0
 800bb6e:	e000      	b.n	800bb72 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800bb70:	2301      	movs	r3, #1
}
 800bb72:	4618      	mov	r0, r3
 800bb74:	371c      	adds	r7, #28
 800bb76:	46bd      	mov	sp, r7
 800bb78:	bd90      	pop	{r4, r7, pc}
 800bb7a:	bf00      	nop
 800bb7c:	08014874 	.word	0x08014874

0800bb80 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800bb80:	b580      	push	{r7, lr}
 800bb82:	b086      	sub	sp, #24
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	6078      	str	r0, [r7, #4]
 800bb88:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800bb8a:	683b      	ldr	r3, [r7, #0]
 800bb8c:	331a      	adds	r3, #26
 800bb8e:	4618      	mov	r0, r3
 800bb90:	f7fe facc 	bl	800a12c <ld_word>
 800bb94:	4603      	mov	r3, r0
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d001      	beq.n	800bb9e <pick_lfn+0x1e>
 800bb9a:	2300      	movs	r3, #0
 800bb9c:	e04d      	b.n	800bc3a <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800bb9e:	683b      	ldr	r3, [r7, #0]
 800bba0:	781b      	ldrb	r3, [r3, #0]
 800bba2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bba6:	1e5a      	subs	r2, r3, #1
 800bba8:	4613      	mov	r3, r2
 800bbaa:	005b      	lsls	r3, r3, #1
 800bbac:	4413      	add	r3, r2
 800bbae:	009b      	lsls	r3, r3, #2
 800bbb0:	4413      	add	r3, r2
 800bbb2:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800bbb4:	2301      	movs	r3, #1
 800bbb6:	81fb      	strh	r3, [r7, #14]
 800bbb8:	2300      	movs	r3, #0
 800bbba:	613b      	str	r3, [r7, #16]
 800bbbc:	e028      	b.n	800bc10 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800bbbe:	4a21      	ldr	r2, [pc, #132]	; (800bc44 <pick_lfn+0xc4>)
 800bbc0:	693b      	ldr	r3, [r7, #16]
 800bbc2:	4413      	add	r3, r2
 800bbc4:	781b      	ldrb	r3, [r3, #0]
 800bbc6:	461a      	mov	r2, r3
 800bbc8:	683b      	ldr	r3, [r7, #0]
 800bbca:	4413      	add	r3, r2
 800bbcc:	4618      	mov	r0, r3
 800bbce:	f7fe faad 	bl	800a12c <ld_word>
 800bbd2:	4603      	mov	r3, r0
 800bbd4:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800bbd6:	89fb      	ldrh	r3, [r7, #14]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d00f      	beq.n	800bbfc <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800bbdc:	697b      	ldr	r3, [r7, #20]
 800bbde:	2bfe      	cmp	r3, #254	; 0xfe
 800bbe0:	d901      	bls.n	800bbe6 <pick_lfn+0x66>
 800bbe2:	2300      	movs	r3, #0
 800bbe4:	e029      	b.n	800bc3a <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800bbe6:	89bb      	ldrh	r3, [r7, #12]
 800bbe8:	81fb      	strh	r3, [r7, #14]
 800bbea:	697b      	ldr	r3, [r7, #20]
 800bbec:	1c5a      	adds	r2, r3, #1
 800bbee:	617a      	str	r2, [r7, #20]
 800bbf0:	005b      	lsls	r3, r3, #1
 800bbf2:	687a      	ldr	r2, [r7, #4]
 800bbf4:	4413      	add	r3, r2
 800bbf6:	89fa      	ldrh	r2, [r7, #14]
 800bbf8:	801a      	strh	r2, [r3, #0]
 800bbfa:	e006      	b.n	800bc0a <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800bbfc:	89bb      	ldrh	r3, [r7, #12]
 800bbfe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bc02:	4293      	cmp	r3, r2
 800bc04:	d001      	beq.n	800bc0a <pick_lfn+0x8a>
 800bc06:	2300      	movs	r3, #0
 800bc08:	e017      	b.n	800bc3a <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800bc0a:	693b      	ldr	r3, [r7, #16]
 800bc0c:	3301      	adds	r3, #1
 800bc0e:	613b      	str	r3, [r7, #16]
 800bc10:	693b      	ldr	r3, [r7, #16]
 800bc12:	2b0c      	cmp	r3, #12
 800bc14:	d9d3      	bls.n	800bbbe <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800bc16:	683b      	ldr	r3, [r7, #0]
 800bc18:	781b      	ldrb	r3, [r3, #0]
 800bc1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d00a      	beq.n	800bc38 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800bc22:	697b      	ldr	r3, [r7, #20]
 800bc24:	2bfe      	cmp	r3, #254	; 0xfe
 800bc26:	d901      	bls.n	800bc2c <pick_lfn+0xac>
 800bc28:	2300      	movs	r3, #0
 800bc2a:	e006      	b.n	800bc3a <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800bc2c:	697b      	ldr	r3, [r7, #20]
 800bc2e:	005b      	lsls	r3, r3, #1
 800bc30:	687a      	ldr	r2, [r7, #4]
 800bc32:	4413      	add	r3, r2
 800bc34:	2200      	movs	r2, #0
 800bc36:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800bc38:	2301      	movs	r3, #1
}
 800bc3a:	4618      	mov	r0, r3
 800bc3c:	3718      	adds	r7, #24
 800bc3e:	46bd      	mov	sp, r7
 800bc40:	bd80      	pop	{r7, pc}
 800bc42:	bf00      	nop
 800bc44:	08014874 	.word	0x08014874

0800bc48 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800bc48:	b580      	push	{r7, lr}
 800bc4a:	b088      	sub	sp, #32
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	60f8      	str	r0, [r7, #12]
 800bc50:	60b9      	str	r1, [r7, #8]
 800bc52:	4611      	mov	r1, r2
 800bc54:	461a      	mov	r2, r3
 800bc56:	460b      	mov	r3, r1
 800bc58:	71fb      	strb	r3, [r7, #7]
 800bc5a:	4613      	mov	r3, r2
 800bc5c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800bc5e:	68bb      	ldr	r3, [r7, #8]
 800bc60:	330d      	adds	r3, #13
 800bc62:	79ba      	ldrb	r2, [r7, #6]
 800bc64:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800bc66:	68bb      	ldr	r3, [r7, #8]
 800bc68:	330b      	adds	r3, #11
 800bc6a:	220f      	movs	r2, #15
 800bc6c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800bc6e:	68bb      	ldr	r3, [r7, #8]
 800bc70:	330c      	adds	r3, #12
 800bc72:	2200      	movs	r2, #0
 800bc74:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800bc76:	68bb      	ldr	r3, [r7, #8]
 800bc78:	331a      	adds	r3, #26
 800bc7a:	2100      	movs	r1, #0
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	f7fe fb6b 	bl	800a358 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800bc82:	79fb      	ldrb	r3, [r7, #7]
 800bc84:	1e5a      	subs	r2, r3, #1
 800bc86:	4613      	mov	r3, r2
 800bc88:	005b      	lsls	r3, r3, #1
 800bc8a:	4413      	add	r3, r2
 800bc8c:	009b      	lsls	r3, r3, #2
 800bc8e:	4413      	add	r3, r2
 800bc90:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800bc92:	2300      	movs	r3, #0
 800bc94:	82fb      	strh	r3, [r7, #22]
 800bc96:	2300      	movs	r3, #0
 800bc98:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800bc9a:	8afb      	ldrh	r3, [r7, #22]
 800bc9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bca0:	4293      	cmp	r3, r2
 800bca2:	d007      	beq.n	800bcb4 <put_lfn+0x6c>
 800bca4:	69fb      	ldr	r3, [r7, #28]
 800bca6:	1c5a      	adds	r2, r3, #1
 800bca8:	61fa      	str	r2, [r7, #28]
 800bcaa:	005b      	lsls	r3, r3, #1
 800bcac:	68fa      	ldr	r2, [r7, #12]
 800bcae:	4413      	add	r3, r2
 800bcb0:	881b      	ldrh	r3, [r3, #0]
 800bcb2:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800bcb4:	4a17      	ldr	r2, [pc, #92]	; (800bd14 <put_lfn+0xcc>)
 800bcb6:	69bb      	ldr	r3, [r7, #24]
 800bcb8:	4413      	add	r3, r2
 800bcba:	781b      	ldrb	r3, [r3, #0]
 800bcbc:	461a      	mov	r2, r3
 800bcbe:	68bb      	ldr	r3, [r7, #8]
 800bcc0:	4413      	add	r3, r2
 800bcc2:	8afa      	ldrh	r2, [r7, #22]
 800bcc4:	4611      	mov	r1, r2
 800bcc6:	4618      	mov	r0, r3
 800bcc8:	f7fe fb46 	bl	800a358 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800bccc:	8afb      	ldrh	r3, [r7, #22]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d102      	bne.n	800bcd8 <put_lfn+0x90>
 800bcd2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bcd6:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800bcd8:	69bb      	ldr	r3, [r7, #24]
 800bcda:	3301      	adds	r3, #1
 800bcdc:	61bb      	str	r3, [r7, #24]
 800bcde:	69bb      	ldr	r3, [r7, #24]
 800bce0:	2b0c      	cmp	r3, #12
 800bce2:	d9da      	bls.n	800bc9a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800bce4:	8afb      	ldrh	r3, [r7, #22]
 800bce6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bcea:	4293      	cmp	r3, r2
 800bcec:	d006      	beq.n	800bcfc <put_lfn+0xb4>
 800bcee:	69fb      	ldr	r3, [r7, #28]
 800bcf0:	005b      	lsls	r3, r3, #1
 800bcf2:	68fa      	ldr	r2, [r7, #12]
 800bcf4:	4413      	add	r3, r2
 800bcf6:	881b      	ldrh	r3, [r3, #0]
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d103      	bne.n	800bd04 <put_lfn+0xbc>
 800bcfc:	79fb      	ldrb	r3, [r7, #7]
 800bcfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd02:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800bd04:	68bb      	ldr	r3, [r7, #8]
 800bd06:	79fa      	ldrb	r2, [r7, #7]
 800bd08:	701a      	strb	r2, [r3, #0]
}
 800bd0a:	bf00      	nop
 800bd0c:	3720      	adds	r7, #32
 800bd0e:	46bd      	mov	sp, r7
 800bd10:	bd80      	pop	{r7, pc}
 800bd12:	bf00      	nop
 800bd14:	08014874 	.word	0x08014874

0800bd18 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b08c      	sub	sp, #48	; 0x30
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	60f8      	str	r0, [r7, #12]
 800bd20:	60b9      	str	r1, [r7, #8]
 800bd22:	607a      	str	r2, [r7, #4]
 800bd24:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800bd26:	220b      	movs	r2, #11
 800bd28:	68b9      	ldr	r1, [r7, #8]
 800bd2a:	68f8      	ldr	r0, [r7, #12]
 800bd2c:	f7fe fbe3 	bl	800a4f6 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800bd30:	683b      	ldr	r3, [r7, #0]
 800bd32:	2b05      	cmp	r3, #5
 800bd34:	d92b      	bls.n	800bd8e <gen_numname+0x76>
		sr = seq;
 800bd36:	683b      	ldr	r3, [r7, #0]
 800bd38:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800bd3a:	e022      	b.n	800bd82 <gen_numname+0x6a>
			wc = *lfn++;
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	1c9a      	adds	r2, r3, #2
 800bd40:	607a      	str	r2, [r7, #4]
 800bd42:	881b      	ldrh	r3, [r3, #0]
 800bd44:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800bd46:	2300      	movs	r3, #0
 800bd48:	62bb      	str	r3, [r7, #40]	; 0x28
 800bd4a:	e017      	b.n	800bd7c <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800bd4c:	69fb      	ldr	r3, [r7, #28]
 800bd4e:	005a      	lsls	r2, r3, #1
 800bd50:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bd52:	f003 0301 	and.w	r3, r3, #1
 800bd56:	4413      	add	r3, r2
 800bd58:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800bd5a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bd5c:	085b      	lsrs	r3, r3, #1
 800bd5e:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800bd60:	69fb      	ldr	r3, [r7, #28]
 800bd62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d005      	beq.n	800bd76 <gen_numname+0x5e>
 800bd6a:	69fb      	ldr	r3, [r7, #28]
 800bd6c:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800bd70:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800bd74:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800bd76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd78:	3301      	adds	r3, #1
 800bd7a:	62bb      	str	r3, [r7, #40]	; 0x28
 800bd7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd7e:	2b0f      	cmp	r3, #15
 800bd80:	d9e4      	bls.n	800bd4c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	881b      	ldrh	r3, [r3, #0]
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d1d8      	bne.n	800bd3c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800bd8a:	69fb      	ldr	r3, [r7, #28]
 800bd8c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800bd8e:	2307      	movs	r3, #7
 800bd90:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800bd92:	683b      	ldr	r3, [r7, #0]
 800bd94:	b2db      	uxtb	r3, r3
 800bd96:	f003 030f 	and.w	r3, r3, #15
 800bd9a:	b2db      	uxtb	r3, r3
 800bd9c:	3330      	adds	r3, #48	; 0x30
 800bd9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800bda2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bda6:	2b39      	cmp	r3, #57	; 0x39
 800bda8:	d904      	bls.n	800bdb4 <gen_numname+0x9c>
 800bdaa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bdae:	3307      	adds	r3, #7
 800bdb0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800bdb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdb6:	1e5a      	subs	r2, r3, #1
 800bdb8:	62ba      	str	r2, [r7, #40]	; 0x28
 800bdba:	3330      	adds	r3, #48	; 0x30
 800bdbc:	443b      	add	r3, r7
 800bdbe:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800bdc2:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800bdc6:	683b      	ldr	r3, [r7, #0]
 800bdc8:	091b      	lsrs	r3, r3, #4
 800bdca:	603b      	str	r3, [r7, #0]
	} while (seq);
 800bdcc:	683b      	ldr	r3, [r7, #0]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d1df      	bne.n	800bd92 <gen_numname+0x7a>
	ns[i] = '~';
 800bdd2:	f107 0214 	add.w	r2, r7, #20
 800bdd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdd8:	4413      	add	r3, r2
 800bdda:	227e      	movs	r2, #126	; 0x7e
 800bddc:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800bdde:	2300      	movs	r3, #0
 800bde0:	627b      	str	r3, [r7, #36]	; 0x24
 800bde2:	e002      	b.n	800bdea <gen_numname+0xd2>
 800bde4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bde6:	3301      	adds	r3, #1
 800bde8:	627b      	str	r3, [r7, #36]	; 0x24
 800bdea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bdec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdee:	429a      	cmp	r2, r3
 800bdf0:	d205      	bcs.n	800bdfe <gen_numname+0xe6>
 800bdf2:	68fa      	ldr	r2, [r7, #12]
 800bdf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdf6:	4413      	add	r3, r2
 800bdf8:	781b      	ldrb	r3, [r3, #0]
 800bdfa:	2b20      	cmp	r3, #32
 800bdfc:	d1f2      	bne.n	800bde4 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800bdfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be00:	2b07      	cmp	r3, #7
 800be02:	d807      	bhi.n	800be14 <gen_numname+0xfc>
 800be04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be06:	1c5a      	adds	r2, r3, #1
 800be08:	62ba      	str	r2, [r7, #40]	; 0x28
 800be0a:	3330      	adds	r3, #48	; 0x30
 800be0c:	443b      	add	r3, r7
 800be0e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800be12:	e000      	b.n	800be16 <gen_numname+0xfe>
 800be14:	2120      	movs	r1, #32
 800be16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be18:	1c5a      	adds	r2, r3, #1
 800be1a:	627a      	str	r2, [r7, #36]	; 0x24
 800be1c:	68fa      	ldr	r2, [r7, #12]
 800be1e:	4413      	add	r3, r2
 800be20:	460a      	mov	r2, r1
 800be22:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800be24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be26:	2b07      	cmp	r3, #7
 800be28:	d9e9      	bls.n	800bdfe <gen_numname+0xe6>
}
 800be2a:	bf00      	nop
 800be2c:	bf00      	nop
 800be2e:	3730      	adds	r7, #48	; 0x30
 800be30:	46bd      	mov	sp, r7
 800be32:	bd80      	pop	{r7, pc}

0800be34 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800be34:	b480      	push	{r7}
 800be36:	b085      	sub	sp, #20
 800be38:	af00      	add	r7, sp, #0
 800be3a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800be3c:	2300      	movs	r3, #0
 800be3e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800be40:	230b      	movs	r3, #11
 800be42:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800be44:	7bfb      	ldrb	r3, [r7, #15]
 800be46:	b2da      	uxtb	r2, r3
 800be48:	0852      	lsrs	r2, r2, #1
 800be4a:	01db      	lsls	r3, r3, #7
 800be4c:	4313      	orrs	r3, r2
 800be4e:	b2da      	uxtb	r2, r3
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	1c59      	adds	r1, r3, #1
 800be54:	6079      	str	r1, [r7, #4]
 800be56:	781b      	ldrb	r3, [r3, #0]
 800be58:	4413      	add	r3, r2
 800be5a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800be5c:	68bb      	ldr	r3, [r7, #8]
 800be5e:	3b01      	subs	r3, #1
 800be60:	60bb      	str	r3, [r7, #8]
 800be62:	68bb      	ldr	r3, [r7, #8]
 800be64:	2b00      	cmp	r3, #0
 800be66:	d1ed      	bne.n	800be44 <sum_sfn+0x10>
	return sum;
 800be68:	7bfb      	ldrb	r3, [r7, #15]
}
 800be6a:	4618      	mov	r0, r3
 800be6c:	3714      	adds	r7, #20
 800be6e:	46bd      	mov	sp, r7
 800be70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be74:	4770      	bx	lr

0800be76 <xdir_sum>:

static
WORD xdir_sum (			/* Get checksum of the directoly block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 800be76:	b480      	push	{r7}
 800be78:	b087      	sub	sp, #28
 800be7a:	af00      	add	r7, sp, #0
 800be7c:	6078      	str	r0, [r7, #4]
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	3301      	adds	r3, #1
 800be82:	781b      	ldrb	r3, [r3, #0]
 800be84:	3301      	adds	r3, #1
 800be86:	015b      	lsls	r3, r3, #5
 800be88:	60fb      	str	r3, [r7, #12]
	for (i = sum = 0; i < szblk; i++) {
 800be8a:	2300      	movs	r3, #0
 800be8c:	827b      	strh	r3, [r7, #18]
 800be8e:	2300      	movs	r3, #0
 800be90:	617b      	str	r3, [r7, #20]
 800be92:	e018      	b.n	800bec6 <xdir_sum+0x50>
		if (i == XDIR_SetSum) {	/* Skip sum field */
 800be94:	697b      	ldr	r3, [r7, #20]
 800be96:	2b02      	cmp	r3, #2
 800be98:	d103      	bne.n	800bea2 <xdir_sum+0x2c>
			i++;
 800be9a:	697b      	ldr	r3, [r7, #20]
 800be9c:	3301      	adds	r3, #1
 800be9e:	617b      	str	r3, [r7, #20]
 800bea0:	e00e      	b.n	800bec0 <xdir_sum+0x4a>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 800bea2:	8a7b      	ldrh	r3, [r7, #18]
 800bea4:	03db      	lsls	r3, r3, #15
 800bea6:	b29a      	uxth	r2, r3
 800bea8:	8a7b      	ldrh	r3, [r7, #18]
 800beaa:	085b      	lsrs	r3, r3, #1
 800beac:	b29b      	uxth	r3, r3
 800beae:	4413      	add	r3, r2
 800beb0:	b29a      	uxth	r2, r3
 800beb2:	6879      	ldr	r1, [r7, #4]
 800beb4:	697b      	ldr	r3, [r7, #20]
 800beb6:	440b      	add	r3, r1
 800beb8:	781b      	ldrb	r3, [r3, #0]
 800beba:	b29b      	uxth	r3, r3
 800bebc:	4413      	add	r3, r2
 800bebe:	827b      	strh	r3, [r7, #18]
	for (i = sum = 0; i < szblk; i++) {
 800bec0:	697b      	ldr	r3, [r7, #20]
 800bec2:	3301      	adds	r3, #1
 800bec4:	617b      	str	r3, [r7, #20]
 800bec6:	697a      	ldr	r2, [r7, #20]
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	429a      	cmp	r2, r3
 800becc:	d3e2      	bcc.n	800be94 <xdir_sum+0x1e>
		}
	}
	return sum;
 800bece:	8a7b      	ldrh	r3, [r7, #18]
}
 800bed0:	4618      	mov	r0, r3
 800bed2:	371c      	adds	r7, #28
 800bed4:	46bd      	mov	sp, r7
 800bed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beda:	4770      	bx	lr

0800bedc <xname_sum>:

static
WORD xname_sum (		/* Get check sum (to be used as hash) of the name */
	const WCHAR* name	/* File name to be calculated */
)
{
 800bedc:	b580      	push	{r7, lr}
 800bede:	b084      	sub	sp, #16
 800bee0:	af00      	add	r7, sp, #0
 800bee2:	6078      	str	r0, [r7, #4]
	WCHAR chr;
	WORD sum = 0;
 800bee4:	2300      	movs	r3, #0
 800bee6:	81fb      	strh	r3, [r7, #14]


	while ((chr = *name++) != 0) {
 800bee8:	e01f      	b.n	800bf2a <xname_sum+0x4e>
		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
 800beea:	89bb      	ldrh	r3, [r7, #12]
 800beec:	4618      	mov	r0, r3
 800beee:	f003 f82f 	bl	800ef50 <ff_wtoupper>
 800bef2:	4603      	mov	r3, r0
 800bef4:	81bb      	strh	r3, [r7, #12]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 800bef6:	89fb      	ldrh	r3, [r7, #14]
 800bef8:	03db      	lsls	r3, r3, #15
 800befa:	b29a      	uxth	r2, r3
 800befc:	89fb      	ldrh	r3, [r7, #14]
 800befe:	085b      	lsrs	r3, r3, #1
 800bf00:	b29b      	uxth	r3, r3
 800bf02:	4413      	add	r3, r2
 800bf04:	b29a      	uxth	r2, r3
 800bf06:	89bb      	ldrh	r3, [r7, #12]
 800bf08:	b2db      	uxtb	r3, r3
 800bf0a:	b29b      	uxth	r3, r3
 800bf0c:	4413      	add	r3, r2
 800bf0e:	81fb      	strh	r3, [r7, #14]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 800bf10:	89fb      	ldrh	r3, [r7, #14]
 800bf12:	03db      	lsls	r3, r3, #15
 800bf14:	b29a      	uxth	r2, r3
 800bf16:	89fb      	ldrh	r3, [r7, #14]
 800bf18:	085b      	lsrs	r3, r3, #1
 800bf1a:	b29b      	uxth	r3, r3
 800bf1c:	4413      	add	r3, r2
 800bf1e:	b29a      	uxth	r2, r3
 800bf20:	89bb      	ldrh	r3, [r7, #12]
 800bf22:	0a1b      	lsrs	r3, r3, #8
 800bf24:	b29b      	uxth	r3, r3
 800bf26:	4413      	add	r3, r2
 800bf28:	81fb      	strh	r3, [r7, #14]
	while ((chr = *name++) != 0) {
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	1c9a      	adds	r2, r3, #2
 800bf2e:	607a      	str	r2, [r7, #4]
 800bf30:	881b      	ldrh	r3, [r3, #0]
 800bf32:	81bb      	strh	r3, [r7, #12]
 800bf34:	89bb      	ldrh	r3, [r7, #12]
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d1d7      	bne.n	800beea <xname_sum+0xe>
	}
	return sum;
 800bf3a:	89fb      	ldrh	r3, [r7, #14]
}
 800bf3c:	4618      	mov	r0, r3
 800bf3e:	3710      	adds	r7, #16
 800bf40:	46bd      	mov	sp, r7
 800bf42:	bd80      	pop	{r7, pc}

0800bf44 <get_xdir_info>:
static
void get_xdir_info (
	BYTE* dirb,			/* Pointer to the direcotry entry block 85+C0+C1s */
	FILINFO* fno		/* Buffer to store the extracted file information */
)
{
 800bf44:	b580      	push	{r7, lr}
 800bf46:	b086      	sub	sp, #24
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	6078      	str	r0, [r7, #4]
 800bf4c:	6039      	str	r1, [r7, #0]
#if !_LFN_UNICODE
	UINT nc;
#endif

	/* Get file name */
	di = 0;
 800bf4e:	2300      	movs	r3, #0
 800bf50:	617b      	str	r3, [r7, #20]
		w = ld_word(dirb + si);					/* Get a character */
		if (di >= _MAX_LFN) { di = 0; break; }	/* Buffer overflow --> inaccessible object name */
		fno->fname[di] = w;						/* Store it */
	}
#else
	for (si = SZDIRE * 2, nc = 0; nc < dirb[XDIR_NumName]; si += 2, nc++) {
 800bf52:	2340      	movs	r3, #64	; 0x40
 800bf54:	613b      	str	r3, [r7, #16]
 800bf56:	2300      	movs	r3, #0
 800bf58:	60fb      	str	r3, [r7, #12]
 800bf5a:	e02c      	b.n	800bfb6 <get_xdir_info+0x72>
		if ((si % SZDIRE) == 0) si += 2;		/* Skip entry type field */
 800bf5c:	693b      	ldr	r3, [r7, #16]
 800bf5e:	f003 031f 	and.w	r3, r3, #31
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d102      	bne.n	800bf6c <get_xdir_info+0x28>
 800bf66:	693b      	ldr	r3, [r7, #16]
 800bf68:	3302      	adds	r3, #2
 800bf6a:	613b      	str	r3, [r7, #16]
		w = ff_convert(ld_word(dirb + si), 0);	/* Get a character and Unicode -> OEM */
 800bf6c:	687a      	ldr	r2, [r7, #4]
 800bf6e:	693b      	ldr	r3, [r7, #16]
 800bf70:	4413      	add	r3, r2
 800bf72:	4618      	mov	r0, r3
 800bf74:	f7fe f8da 	bl	800a12c <ld_word>
 800bf78:	4603      	mov	r3, r0
 800bf7a:	2100      	movs	r1, #0
 800bf7c:	4618      	mov	r0, r3
 800bf7e:	f002 ffab 	bl	800eed8 <ff_convert>
 800bf82:	4603      	mov	r3, r0
 800bf84:	817b      	strh	r3, [r7, #10]
		if (_DF1S && w >= 0x100) {				/* Is it a double byte char? (always false at SBCS cfg) */
			fno->fname[di++] = (char)(w >> 8);	/* Put 1st byte of the DBC */
		}
		if (w == 0 || di >= _MAX_LFN) { di = 0; break; }	/* Invalid char or buffer overflow --> inaccessible object name */
 800bf86:	897b      	ldrh	r3, [r7, #10]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d002      	beq.n	800bf92 <get_xdir_info+0x4e>
 800bf8c:	697b      	ldr	r3, [r7, #20]
 800bf8e:	2bfe      	cmp	r3, #254	; 0xfe
 800bf90:	d902      	bls.n	800bf98 <get_xdir_info+0x54>
 800bf92:	2300      	movs	r3, #0
 800bf94:	617b      	str	r3, [r7, #20]
 800bf96:	e015      	b.n	800bfc4 <get_xdir_info+0x80>
		fno->fname[di++] = (char)w;
 800bf98:	697b      	ldr	r3, [r7, #20]
 800bf9a:	1c5a      	adds	r2, r3, #1
 800bf9c:	617a      	str	r2, [r7, #20]
 800bf9e:	897a      	ldrh	r2, [r7, #10]
 800bfa0:	b2d1      	uxtb	r1, r2
 800bfa2:	683a      	ldr	r2, [r7, #0]
 800bfa4:	4413      	add	r3, r2
 800bfa6:	460a      	mov	r2, r1
 800bfa8:	769a      	strb	r2, [r3, #26]
	for (si = SZDIRE * 2, nc = 0; nc < dirb[XDIR_NumName]; si += 2, nc++) {
 800bfaa:	693b      	ldr	r3, [r7, #16]
 800bfac:	3302      	adds	r3, #2
 800bfae:	613b      	str	r3, [r7, #16]
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	3301      	adds	r3, #1
 800bfb4:	60fb      	str	r3, [r7, #12]
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	3323      	adds	r3, #35	; 0x23
 800bfba:	781b      	ldrb	r3, [r3, #0]
 800bfbc:	461a      	mov	r2, r3
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	4293      	cmp	r3, r2
 800bfc2:	d3cb      	bcc.n	800bf5c <get_xdir_info+0x18>
	}
#endif
	if (di == 0) fno->fname[di++] = '?';	/* Inaccessible object name? */
 800bfc4:	697b      	ldr	r3, [r7, #20]
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d106      	bne.n	800bfd8 <get_xdir_info+0x94>
 800bfca:	697b      	ldr	r3, [r7, #20]
 800bfcc:	1c5a      	adds	r2, r3, #1
 800bfce:	617a      	str	r2, [r7, #20]
 800bfd0:	683a      	ldr	r2, [r7, #0]
 800bfd2:	4413      	add	r3, r2
 800bfd4:	223f      	movs	r2, #63	; 0x3f
 800bfd6:	769a      	strb	r2, [r3, #26]
	fno->fname[di] = 0;						/* Terminate file name */
 800bfd8:	683a      	ldr	r2, [r7, #0]
 800bfda:	697b      	ldr	r3, [r7, #20]
 800bfdc:	4413      	add	r3, r2
 800bfde:	331a      	adds	r3, #26
 800bfe0:	2200      	movs	r2, #0
 800bfe2:	701a      	strb	r2, [r3, #0]

	fno->altname[0] = 0;							/* No SFN */
 800bfe4:	683b      	ldr	r3, [r7, #0]
 800bfe6:	2200      	movs	r2, #0
 800bfe8:	735a      	strb	r2, [r3, #13]
	fno->fattrib = dirb[XDIR_Attr];					/* Attribute */
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	791a      	ldrb	r2, [r3, #4]
 800bfee:	683b      	ldr	r3, [r7, #0]
 800bff0:	731a      	strb	r2, [r3, #12]
	fno->fsize = (fno->fattrib & AM_DIR) ? 0 : ld_qword(dirb + XDIR_FileSize);	/* Size */
 800bff2:	683b      	ldr	r3, [r7, #0]
 800bff4:	7b1b      	ldrb	r3, [r3, #12]
 800bff6:	f003 0310 	and.w	r3, r3, #16
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d107      	bne.n	800c00e <get_xdir_info+0xca>
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	3338      	adds	r3, #56	; 0x38
 800c002:	4618      	mov	r0, r3
 800c004:	f7fe f8cd 	bl	800a1a2 <ld_qword>
 800c008:	4602      	mov	r2, r0
 800c00a:	460b      	mov	r3, r1
 800c00c:	e003      	b.n	800c016 <get_xdir_info+0xd2>
 800c00e:	f04f 0200 	mov.w	r2, #0
 800c012:	f04f 0300 	mov.w	r3, #0
 800c016:	6839      	ldr	r1, [r7, #0]
 800c018:	e9c1 2300 	strd	r2, r3, [r1]
	fno->ftime = ld_word(dirb + XDIR_ModTime + 0);	/* Time */
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	330c      	adds	r3, #12
 800c020:	4618      	mov	r0, r3
 800c022:	f7fe f883 	bl	800a12c <ld_word>
 800c026:	4603      	mov	r3, r0
 800c028:	461a      	mov	r2, r3
 800c02a:	683b      	ldr	r3, [r7, #0]
 800c02c:	815a      	strh	r2, [r3, #10]
	fno->fdate = ld_word(dirb + XDIR_ModTime + 2);	/* Date */
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	330e      	adds	r3, #14
 800c032:	4618      	mov	r0, r3
 800c034:	f7fe f87a 	bl	800a12c <ld_word>
 800c038:	4603      	mov	r3, r0
 800c03a:	461a      	mov	r2, r3
 800c03c:	683b      	ldr	r3, [r7, #0]
 800c03e:	811a      	strh	r2, [r3, #8]
}
 800c040:	bf00      	nop
 800c042:	3718      	adds	r7, #24
 800c044:	46bd      	mov	sp, r7
 800c046:	bd80      	pop	{r7, pc}

0800c048 <load_xdir>:

static
FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
	DIR* dp			/* Pointer to the reading direcotry object pointing the 85 entry */
)
{
 800c048:	b590      	push	{r4, r7, lr}
 800c04a:	b087      	sub	sp, #28
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT i, sz_ent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	695b      	ldr	r3, [r3, #20]
 800c056:	613b      	str	r3, [r7, #16]


	/* Load 85 entry */
	res = move_window(dp->obj.fs, dp->sect);
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	681a      	ldr	r2, [r3, #0]
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c060:	4619      	mov	r1, r3
 800c062:	4610      	mov	r0, r2
 800c064:	f7fe fc76 	bl	800a954 <move_window>
 800c068:	4603      	mov	r3, r0
 800c06a:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800c06c:	7bfb      	ldrb	r3, [r7, #15]
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d001      	beq.n	800c076 <load_xdir+0x2e>
 800c072:	7bfb      	ldrb	r3, [r7, #15]
 800c074:	e09f      	b.n	800c1b6 <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c07a:	781b      	ldrb	r3, [r3, #0]
 800c07c:	2b85      	cmp	r3, #133	; 0x85
 800c07e:	d001      	beq.n	800c084 <load_xdir+0x3c>
 800c080:	2302      	movs	r3, #2
 800c082:	e098      	b.n	800c1b6 <load_xdir+0x16e>
	mem_cpy(dirb + 0, dp->dir, SZDIRE);
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c088:	2220      	movs	r2, #32
 800c08a:	4619      	mov	r1, r3
 800c08c:	6938      	ldr	r0, [r7, #16]
 800c08e:	f7fe fa32 	bl	800a4f6 <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 800c092:	693b      	ldr	r3, [r7, #16]
 800c094:	3301      	adds	r3, #1
 800c096:	781b      	ldrb	r3, [r3, #0]
 800c098:	3301      	adds	r3, #1
 800c09a:	015b      	lsls	r3, r3, #5
 800c09c:	60bb      	str	r3, [r7, #8]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 800c09e:	68bb      	ldr	r3, [r7, #8]
 800c0a0:	2b5f      	cmp	r3, #95	; 0x5f
 800c0a2:	d903      	bls.n	800c0ac <load_xdir+0x64>
 800c0a4:	68bb      	ldr	r3, [r7, #8]
 800c0a6:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800c0aa:	d901      	bls.n	800c0b0 <load_xdir+0x68>
 800c0ac:	2302      	movs	r3, #2
 800c0ae:	e082      	b.n	800c1b6 <load_xdir+0x16e>

	/* Load C0 entry */
	res = dir_next(dp, 0);
 800c0b0:	2100      	movs	r1, #0
 800c0b2:	6878      	ldr	r0, [r7, #4]
 800c0b4:	f7ff fb73 	bl	800b79e <dir_next>
 800c0b8:	4603      	mov	r3, r0
 800c0ba:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800c0bc:	7bfb      	ldrb	r3, [r7, #15]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d001      	beq.n	800c0c6 <load_xdir+0x7e>
 800c0c2:	7bfb      	ldrb	r3, [r7, #15]
 800c0c4:	e077      	b.n	800c1b6 <load_xdir+0x16e>
	res = move_window(dp->obj.fs, dp->sect);
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	681a      	ldr	r2, [r3, #0]
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0ce:	4619      	mov	r1, r3
 800c0d0:	4610      	mov	r0, r2
 800c0d2:	f7fe fc3f 	bl	800a954 <move_window>
 800c0d6:	4603      	mov	r3, r0
 800c0d8:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800c0da:	7bfb      	ldrb	r3, [r7, #15]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d001      	beq.n	800c0e4 <load_xdir+0x9c>
 800c0e0:	7bfb      	ldrb	r3, [r7, #15]
 800c0e2:	e068      	b.n	800c1b6 <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0e8:	781b      	ldrb	r3, [r3, #0]
 800c0ea:	2bc0      	cmp	r3, #192	; 0xc0
 800c0ec:	d001      	beq.n	800c0f2 <load_xdir+0xaa>
 800c0ee:	2302      	movs	r3, #2
 800c0f0:	e061      	b.n	800c1b6 <load_xdir+0x16e>
	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
 800c0f2:	693b      	ldr	r3, [r7, #16]
 800c0f4:	f103 0020 	add.w	r0, r3, #32
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0fc:	2220      	movs	r2, #32
 800c0fe:	4619      	mov	r1, r3
 800c100:	f7fe f9f9 	bl	800a4f6 <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 800c104:	693b      	ldr	r3, [r7, #16]
 800c106:	3323      	adds	r3, #35	; 0x23
 800c108:	781b      	ldrb	r3, [r3, #0]
 800c10a:	332c      	adds	r3, #44	; 0x2c
 800c10c:	4a2c      	ldr	r2, [pc, #176]	; (800c1c0 <load_xdir+0x178>)
 800c10e:	fba2 2303 	umull	r2, r3, r2, r3
 800c112:	08db      	lsrs	r3, r3, #3
 800c114:	015b      	lsls	r3, r3, #5
 800c116:	68ba      	ldr	r2, [r7, #8]
 800c118:	429a      	cmp	r2, r3
 800c11a:	d201      	bcs.n	800c120 <load_xdir+0xd8>
 800c11c:	2302      	movs	r3, #2
 800c11e:	e04a      	b.n	800c1b6 <load_xdir+0x16e>

	/* Load C1 entries */
	i = SZDIRE * 2;	/* C1 offset */
 800c120:	2340      	movs	r3, #64	; 0x40
 800c122:	617b      	str	r3, [r7, #20]
	do {
		res = dir_next(dp, 0);
 800c124:	2100      	movs	r1, #0
 800c126:	6878      	ldr	r0, [r7, #4]
 800c128:	f7ff fb39 	bl	800b79e <dir_next>
 800c12c:	4603      	mov	r3, r0
 800c12e:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800c130:	7bfb      	ldrb	r3, [r7, #15]
 800c132:	2b00      	cmp	r3, #0
 800c134:	d001      	beq.n	800c13a <load_xdir+0xf2>
 800c136:	7bfb      	ldrb	r3, [r7, #15]
 800c138:	e03d      	b.n	800c1b6 <load_xdir+0x16e>
		res = move_window(dp->obj.fs, dp->sect);
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	681a      	ldr	r2, [r3, #0]
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c142:	4619      	mov	r1, r3
 800c144:	4610      	mov	r0, r2
 800c146:	f7fe fc05 	bl	800a954 <move_window>
 800c14a:	4603      	mov	r3, r0
 800c14c:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800c14e:	7bfb      	ldrb	r3, [r7, #15]
 800c150:	2b00      	cmp	r3, #0
 800c152:	d001      	beq.n	800c158 <load_xdir+0x110>
 800c154:	7bfb      	ldrb	r3, [r7, #15]
 800c156:	e02e      	b.n	800c1b6 <load_xdir+0x16e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c15c:	781b      	ldrb	r3, [r3, #0]
 800c15e:	2bc1      	cmp	r3, #193	; 0xc1
 800c160:	d001      	beq.n	800c166 <load_xdir+0x11e>
 800c162:	2302      	movs	r3, #2
 800c164:	e027      	b.n	800c1b6 <load_xdir+0x16e>
		if (i < MAXDIRB(_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 800c166:	697b      	ldr	r3, [r7, #20]
 800c168:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800c16c:	d208      	bcs.n	800c180 <load_xdir+0x138>
 800c16e:	693a      	ldr	r2, [r7, #16]
 800c170:	697b      	ldr	r3, [r7, #20]
 800c172:	18d0      	adds	r0, r2, r3
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c178:	2220      	movs	r2, #32
 800c17a:	4619      	mov	r1, r3
 800c17c:	f7fe f9bb 	bl	800a4f6 <mem_cpy>
	} while ((i += SZDIRE) < sz_ent);
 800c180:	697b      	ldr	r3, [r7, #20]
 800c182:	3320      	adds	r3, #32
 800c184:	617b      	str	r3, [r7, #20]
 800c186:	697a      	ldr	r2, [r7, #20]
 800c188:	68bb      	ldr	r3, [r7, #8]
 800c18a:	429a      	cmp	r2, r3
 800c18c:	d3ca      	bcc.n	800c124 <load_xdir+0xdc>

	/* Sanity check (do it when accessible object name) */
	if (i <= MAXDIRB(_MAX_LFN)) {
 800c18e:	697b      	ldr	r3, [r7, #20]
 800c190:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800c194:	d80e      	bhi.n	800c1b4 <load_xdir+0x16c>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 800c196:	6938      	ldr	r0, [r7, #16]
 800c198:	f7ff fe6d 	bl	800be76 <xdir_sum>
 800c19c:	4603      	mov	r3, r0
 800c19e:	461c      	mov	r4, r3
 800c1a0:	693b      	ldr	r3, [r7, #16]
 800c1a2:	3302      	adds	r3, #2
 800c1a4:	4618      	mov	r0, r3
 800c1a6:	f7fd ffc1 	bl	800a12c <ld_word>
 800c1aa:	4603      	mov	r3, r0
 800c1ac:	429c      	cmp	r4, r3
 800c1ae:	d001      	beq.n	800c1b4 <load_xdir+0x16c>
 800c1b0:	2302      	movs	r3, #2
 800c1b2:	e000      	b.n	800c1b6 <load_xdir+0x16e>
	}
	return FR_OK;
 800c1b4:	2300      	movs	r3, #0
}
 800c1b6:	4618      	mov	r0, r3
 800c1b8:	371c      	adds	r7, #28
 800c1ba:	46bd      	mov	sp, r7
 800c1bc:	bd90      	pop	{r4, r7, pc}
 800c1be:	bf00      	nop
 800c1c0:	88888889 	.word	0x88888889

0800c1c4 <load_obj_dir>:
static
FRESULT load_obj_dir (
	DIR* dp,			/* Blank directory object to be used to access containing direcotry */
	const _FDID* obj	/* Object with its containing directory information */
)
{
 800c1c4:	b5b0      	push	{r4, r5, r7, lr}
 800c1c6:	b084      	sub	sp, #16
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	6078      	str	r0, [r7, #4]
 800c1cc:	6039      	str	r1, [r7, #0]
	FRESULT res;

	/* Open object containing directory */
	dp->obj.fs = obj->fs;
 800c1ce:	6839      	ldr	r1, [r7, #0]
 800c1d0:	6808      	ldr	r0, [r1, #0]
 800c1d2:	6879      	ldr	r1, [r7, #4]
 800c1d4:	6008      	str	r0, [r1, #0]
	dp->obj.sclust = obj->c_scl;
 800c1d6:	6839      	ldr	r1, [r7, #0]
 800c1d8:	6a08      	ldr	r0, [r1, #32]
 800c1da:	6879      	ldr	r1, [r7, #4]
 800c1dc:	6088      	str	r0, [r1, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 800c1de:	6839      	ldr	r1, [r7, #0]
 800c1e0:	6a49      	ldr	r1, [r1, #36]	; 0x24
 800c1e2:	b2c8      	uxtb	r0, r1
 800c1e4:	6879      	ldr	r1, [r7, #4]
 800c1e6:	71c8      	strb	r0, [r1, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 800c1e8:	6839      	ldr	r1, [r7, #0]
 800c1ea:	6a49      	ldr	r1, [r1, #36]	; 0x24
 800c1ec:	2000      	movs	r0, #0
 800c1ee:	460c      	mov	r4, r1
 800c1f0:	4605      	mov	r5, r0
 800c1f2:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 800c1f6:	2300      	movs	r3, #0
 800c1f8:	6879      	ldr	r1, [r7, #4]
 800c1fa:	e9c1 2304 	strd	r2, r3, [r1, #16]
	dp->blk_ofs = obj->c_ofs;
 800c1fe:	683b      	ldr	r3, [r7, #0]
 800c200:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	64da      	str	r2, [r3, #76]	; 0x4c

	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c20a:	4619      	mov	r1, r3
 800c20c:	6878      	ldr	r0, [r7, #4]
 800c20e:	f7ff fa32 	bl	800b676 <dir_sdi>
 800c212:	4603      	mov	r3, r0
 800c214:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800c216:	7bfb      	ldrb	r3, [r7, #15]
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d104      	bne.n	800c226 <load_obj_dir+0x62>
		res = load_xdir(dp);		/* Load the object's entry block */
 800c21c:	6878      	ldr	r0, [r7, #4]
 800c21e:	f7ff ff13 	bl	800c048 <load_xdir>
 800c222:	4603      	mov	r3, r0
 800c224:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 800c226:	7bfb      	ldrb	r3, [r7, #15]
}
 800c228:	4618      	mov	r0, r3
 800c22a:	3710      	adds	r7, #16
 800c22c:	46bd      	mov	sp, r7
 800c22e:	bdb0      	pop	{r4, r5, r7, pc}

0800c230 <store_xdir>:
/*-----------------------------------------------*/
static
FRESULT store_xdir (
	DIR* dp				/* Pointer to the direcotry object */
)
{
 800c230:	b590      	push	{r4, r7, lr}
 800c232:	b087      	sub	sp, #28
 800c234:	af00      	add	r7, sp, #0
 800c236:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT nent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	695b      	ldr	r3, [r3, #20]
 800c23e:	60fb      	str	r3, [r7, #12]

	/* Create set sum */
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	1c9c      	adds	r4, r3, #2
 800c244:	68f8      	ldr	r0, [r7, #12]
 800c246:	f7ff fe16 	bl	800be76 <xdir_sum>
 800c24a:	4603      	mov	r3, r0
 800c24c:	4619      	mov	r1, r3
 800c24e:	4620      	mov	r0, r4
 800c250:	f7fe f882 	bl	800a358 <st_word>
	nent = dirb[XDIR_NumSec] + 1;
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	3301      	adds	r3, #1
 800c258:	781b      	ldrb	r3, [r3, #0]
 800c25a:	3301      	adds	r3, #1
 800c25c:	613b      	str	r3, [r7, #16]

	/* Store the set of directory to the volume */
	res = dir_sdi(dp, dp->blk_ofs);
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c262:	4619      	mov	r1, r3
 800c264:	6878      	ldr	r0, [r7, #4]
 800c266:	f7ff fa06 	bl	800b676 <dir_sdi>
 800c26a:	4603      	mov	r3, r0
 800c26c:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800c26e:	e026      	b.n	800c2be <store_xdir+0x8e>
		res = move_window(dp->obj.fs, dp->sect);
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	681a      	ldr	r2, [r3, #0]
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c278:	4619      	mov	r1, r3
 800c27a:	4610      	mov	r0, r2
 800c27c:	f7fe fb6a 	bl	800a954 <move_window>
 800c280:	4603      	mov	r3, r0
 800c282:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c284:	7dfb      	ldrb	r3, [r7, #23]
 800c286:	2b00      	cmp	r3, #0
 800c288:	d11d      	bne.n	800c2c6 <store_xdir+0x96>
		mem_cpy(dp->dir, dirb, SZDIRE);
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c28e:	2220      	movs	r2, #32
 800c290:	68f9      	ldr	r1, [r7, #12]
 800c292:	4618      	mov	r0, r3
 800c294:	f7fe f92f 	bl	800a4f6 <mem_cpy>
		dp->obj.fs->wflag = 1;
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	2201      	movs	r2, #1
 800c29e:	70da      	strb	r2, [r3, #3]
		if (--nent == 0) break;
 800c2a0:	693b      	ldr	r3, [r7, #16]
 800c2a2:	3b01      	subs	r3, #1
 800c2a4:	613b      	str	r3, [r7, #16]
 800c2a6:	693b      	ldr	r3, [r7, #16]
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d00e      	beq.n	800c2ca <store_xdir+0x9a>
		dirb += SZDIRE;
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	3320      	adds	r3, #32
 800c2b0:	60fb      	str	r3, [r7, #12]
		res = dir_next(dp, 0);
 800c2b2:	2100      	movs	r1, #0
 800c2b4:	6878      	ldr	r0, [r7, #4]
 800c2b6:	f7ff fa72 	bl	800b79e <dir_next>
 800c2ba:	4603      	mov	r3, r0
 800c2bc:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800c2be:	7dfb      	ldrb	r3, [r7, #23]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d0d5      	beq.n	800c270 <store_xdir+0x40>
 800c2c4:	e002      	b.n	800c2cc <store_xdir+0x9c>
		if (res != FR_OK) break;
 800c2c6:	bf00      	nop
 800c2c8:	e000      	b.n	800c2cc <store_xdir+0x9c>
		if (--nent == 0) break;
 800c2ca:	bf00      	nop
	}
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 800c2cc:	7dfb      	ldrb	r3, [r7, #23]
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d002      	beq.n	800c2d8 <store_xdir+0xa8>
 800c2d2:	7dfb      	ldrb	r3, [r7, #23]
 800c2d4:	2b01      	cmp	r3, #1
 800c2d6:	d101      	bne.n	800c2dc <store_xdir+0xac>
 800c2d8:	7dfb      	ldrb	r3, [r7, #23]
 800c2da:	e000      	b.n	800c2de <store_xdir+0xae>
 800c2dc:	2302      	movs	r3, #2
}
 800c2de:	4618      	mov	r0, r3
 800c2e0:	371c      	adds	r7, #28
 800c2e2:	46bd      	mov	sp, r7
 800c2e4:	bd90      	pop	{r4, r7, pc}

0800c2e6 <create_xdir>:
static
void create_xdir (
	BYTE* dirb,			/* Pointer to the direcotry entry block buffer */
	const WCHAR* lfn	/* Pointer to the nul terminated file name */
)
{
 800c2e6:	b590      	push	{r4, r7, lr}
 800c2e8:	b085      	sub	sp, #20
 800c2ea:	af00      	add	r7, sp, #0
 800c2ec:	6078      	str	r0, [r7, #4]
 800c2ee:	6039      	str	r1, [r7, #0]
	BYTE nb, nc;
	WCHAR chr;


	/* Create 85+C0 entry */
	mem_set(dirb, 0, 2 * SZDIRE);
 800c2f0:	2240      	movs	r2, #64	; 0x40
 800c2f2:	2100      	movs	r1, #0
 800c2f4:	6878      	ldr	r0, [r7, #4]
 800c2f6:	f7fe f91f 	bl	800a538 <mem_set>
	dirb[XDIR_Type] = 0x85;
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	2285      	movs	r2, #133	; 0x85
 800c2fe:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_Type + SZDIRE] = 0xC0;
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	3320      	adds	r3, #32
 800c304:	22c0      	movs	r2, #192	; 0xc0
 800c306:	701a      	strb	r2, [r3, #0]

	/* Create C1 entries */
	nc = 0; nb = 1; chr = 1; i = SZDIRE * 2;
 800c308:	2300      	movs	r3, #0
 800c30a:	72bb      	strb	r3, [r7, #10]
 800c30c:	2301      	movs	r3, #1
 800c30e:	72fb      	strb	r3, [r7, #11]
 800c310:	2301      	movs	r3, #1
 800c312:	813b      	strh	r3, [r7, #8]
 800c314:	2340      	movs	r3, #64	; 0x40
 800c316:	60fb      	str	r3, [r7, #12]
	do {
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	1c5a      	adds	r2, r3, #1
 800c31c:	60fa      	str	r2, [r7, #12]
 800c31e:	687a      	ldr	r2, [r7, #4]
 800c320:	4413      	add	r3, r2
 800c322:	22c1      	movs	r2, #193	; 0xc1
 800c324:	701a      	strb	r2, [r3, #0]
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	1c5a      	adds	r2, r3, #1
 800c32a:	60fa      	str	r2, [r7, #12]
 800c32c:	687a      	ldr	r2, [r7, #4]
 800c32e:	4413      	add	r3, r2
 800c330:	2200      	movs	r2, #0
 800c332:	701a      	strb	r2, [r3, #0]
		do {	/* Fill name field */
			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
 800c334:	893b      	ldrh	r3, [r7, #8]
 800c336:	2b00      	cmp	r3, #0
 800c338:	d00b      	beq.n	800c352 <create_xdir+0x6c>
 800c33a:	7abb      	ldrb	r3, [r7, #10]
 800c33c:	005b      	lsls	r3, r3, #1
 800c33e:	683a      	ldr	r2, [r7, #0]
 800c340:	4413      	add	r3, r2
 800c342:	881b      	ldrh	r3, [r3, #0]
 800c344:	813b      	strh	r3, [r7, #8]
 800c346:	893b      	ldrh	r3, [r7, #8]
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d002      	beq.n	800c352 <create_xdir+0x6c>
 800c34c:	7abb      	ldrb	r3, [r7, #10]
 800c34e:	3301      	adds	r3, #1
 800c350:	72bb      	strb	r3, [r7, #10]
			st_word(dirb + i, chr); 		/* Store it */
 800c352:	687a      	ldr	r2, [r7, #4]
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	4413      	add	r3, r2
 800c358:	893a      	ldrh	r2, [r7, #8]
 800c35a:	4611      	mov	r1, r2
 800c35c:	4618      	mov	r0, r3
 800c35e:	f7fd fffb 	bl	800a358 <st_word>
		} while ((i += 2) % SZDIRE != 0);
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	3302      	adds	r3, #2
 800c366:	60fb      	str	r3, [r7, #12]
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	f003 031f 	and.w	r3, r3, #31
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d1e0      	bne.n	800c334 <create_xdir+0x4e>
		nb++;
 800c372:	7afb      	ldrb	r3, [r7, #11]
 800c374:	3301      	adds	r3, #1
 800c376:	72fb      	strb	r3, [r7, #11]
	} while (lfn[nc]);	/* Fill next entry if any char follows */
 800c378:	7abb      	ldrb	r3, [r7, #10]
 800c37a:	005b      	lsls	r3, r3, #1
 800c37c:	683a      	ldr	r2, [r7, #0]
 800c37e:	4413      	add	r3, r2
 800c380:	881b      	ldrh	r3, [r3, #0]
 800c382:	2b00      	cmp	r3, #0
 800c384:	d1c8      	bne.n	800c318 <create_xdir+0x32>

	dirb[XDIR_NumName] = nc;	/* Set name length */
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	3323      	adds	r3, #35	; 0x23
 800c38a:	7aba      	ldrb	r2, [r7, #10]
 800c38c:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_NumSec] = nb;		/* Set block length */
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	3301      	adds	r3, #1
 800c392:	7afa      	ldrb	r2, [r7, #11]
 800c394:	701a      	strb	r2, [r3, #0]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	f103 0424 	add.w	r4, r3, #36	; 0x24
 800c39c:	6838      	ldr	r0, [r7, #0]
 800c39e:	f7ff fd9d 	bl	800bedc <xname_sum>
 800c3a2:	4603      	mov	r3, r0
 800c3a4:	4619      	mov	r1, r3
 800c3a6:	4620      	mov	r0, r4
 800c3a8:	f7fd ffd6 	bl	800a358 <st_word>
}
 800c3ac:	bf00      	nop
 800c3ae:	3714      	adds	r7, #20
 800c3b0:	46bd      	mov	sp, r7
 800c3b2:	bd90      	pop	{r4, r7, pc}

0800c3b4 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800c3b4:	b580      	push	{r7, lr}
 800c3b6:	b086      	sub	sp, #24
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	6078      	str	r0, [r7, #4]
 800c3bc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800c3be:	2304      	movs	r3, #4
 800c3c0:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800c3c8:	23ff      	movs	r3, #255	; 0xff
 800c3ca:	757b      	strb	r3, [r7, #21]
 800c3cc:	23ff      	movs	r3, #255	; 0xff
 800c3ce:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800c3d0:	e09f      	b.n	800c512 <dir_read+0x15e>
		res = move_window(fs, dp->sect);
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3d6:	4619      	mov	r1, r3
 800c3d8:	6938      	ldr	r0, [r7, #16]
 800c3da:	f7fe fabb 	bl	800a954 <move_window>
 800c3de:	4603      	mov	r3, r0
 800c3e0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c3e2:	7dfb      	ldrb	r3, [r7, #23]
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	f040 809a 	bne.w	800c51e <dir_read+0x16a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3ee:	781b      	ldrb	r3, [r3, #0]
 800c3f0:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800c3f2:	7dbb      	ldrb	r3, [r7, #22]
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d102      	bne.n	800c3fe <dir_read+0x4a>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800c3f8:	2304      	movs	r3, #4
 800c3fa:	75fb      	strb	r3, [r7, #23]
 800c3fc:	e096      	b.n	800c52c <dir_read+0x178>
		}
#if _FS_EXFAT
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800c3fe:	693b      	ldr	r3, [r7, #16]
 800c400:	781b      	ldrb	r3, [r3, #0]
 800c402:	2b04      	cmp	r3, #4
 800c404:	d118      	bne.n	800c438 <dir_read+0x84>
			if (_USE_LABEL && vol) {
				if (c == 0x83) break;	/* Volume label entry? */
			} else {
				if (c == 0x85) {		/* Start of the file entry block? */
 800c406:	7dbb      	ldrb	r3, [r7, #22]
 800c408:	2b85      	cmp	r3, #133	; 0x85
 800c40a:	d179      	bne.n	800c500 <dir_read+0x14c>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	64da      	str	r2, [r3, #76]	; 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 800c414:	6878      	ldr	r0, [r7, #4]
 800c416:	f7ff fe17 	bl	800c048 <load_xdir>
 800c41a:	4603      	mov	r3, r0
 800c41c:	75fb      	strb	r3, [r7, #23]
					if (res == FR_OK) {
 800c41e:	7dfb      	ldrb	r3, [r7, #23]
 800c420:	2b00      	cmp	r3, #0
 800c422:	d17e      	bne.n	800c522 <dir_read+0x16e>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 800c424:	693b      	ldr	r3, [r7, #16]
 800c426:	695b      	ldr	r3, [r3, #20]
 800c428:	3304      	adds	r3, #4
 800c42a:	781b      	ldrb	r3, [r3, #0]
 800c42c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c430:	b2da      	uxtb	r2, r3
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	719a      	strb	r2, [r3, #6]
					}
					break;
 800c436:	e074      	b.n	800c522 <dir_read+0x16e>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c43c:	330b      	adds	r3, #11
 800c43e:	781b      	ldrb	r3, [r3, #0]
 800c440:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c444:	73fb      	strb	r3, [r7, #15]
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	7bfa      	ldrb	r2, [r7, #15]
 800c44a:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800c44c:	7dbb      	ldrb	r3, [r7, #22]
 800c44e:	2be5      	cmp	r3, #229	; 0xe5
 800c450:	d00e      	beq.n	800c470 <dir_read+0xbc>
 800c452:	7dbb      	ldrb	r3, [r7, #22]
 800c454:	2b2e      	cmp	r3, #46	; 0x2e
 800c456:	d00b      	beq.n	800c470 <dir_read+0xbc>
 800c458:	7bfb      	ldrb	r3, [r7, #15]
 800c45a:	f023 0320 	bic.w	r3, r3, #32
 800c45e:	2b08      	cmp	r3, #8
 800c460:	bf0c      	ite	eq
 800c462:	2301      	moveq	r3, #1
 800c464:	2300      	movne	r3, #0
 800c466:	b2db      	uxtb	r3, r3
 800c468:	461a      	mov	r2, r3
 800c46a:	683b      	ldr	r3, [r7, #0]
 800c46c:	4293      	cmp	r3, r2
 800c46e:	d002      	beq.n	800c476 <dir_read+0xc2>
				ord = 0xFF;
 800c470:	23ff      	movs	r3, #255	; 0xff
 800c472:	757b      	strb	r3, [r7, #21]
 800c474:	e044      	b.n	800c500 <dir_read+0x14c>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800c476:	7bfb      	ldrb	r3, [r7, #15]
 800c478:	2b0f      	cmp	r3, #15
 800c47a:	d12f      	bne.n	800c4dc <dir_read+0x128>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800c47c:	7dbb      	ldrb	r3, [r7, #22]
 800c47e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c482:	2b00      	cmp	r3, #0
 800c484:	d00d      	beq.n	800c4a2 <dir_read+0xee>
						sum = dp->dir[LDIR_Chksum];
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c48a:	7b5b      	ldrb	r3, [r3, #13]
 800c48c:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800c48e:	7dbb      	ldrb	r3, [r7, #22]
 800c490:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c494:	75bb      	strb	r3, [r7, #22]
 800c496:	7dbb      	ldrb	r3, [r7, #22]
 800c498:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800c4a2:	7dba      	ldrb	r2, [r7, #22]
 800c4a4:	7d7b      	ldrb	r3, [r7, #21]
 800c4a6:	429a      	cmp	r2, r3
 800c4a8:	d115      	bne.n	800c4d6 <dir_read+0x122>
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4ae:	330d      	adds	r3, #13
 800c4b0:	781b      	ldrb	r3, [r3, #0]
 800c4b2:	7d3a      	ldrb	r2, [r7, #20]
 800c4b4:	429a      	cmp	r2, r3
 800c4b6:	d10e      	bne.n	800c4d6 <dir_read+0x122>
 800c4b8:	693b      	ldr	r3, [r7, #16]
 800c4ba:	691a      	ldr	r2, [r3, #16]
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4c0:	4619      	mov	r1, r3
 800c4c2:	4610      	mov	r0, r2
 800c4c4:	f7ff fb5c 	bl	800bb80 <pick_lfn>
 800c4c8:	4603      	mov	r3, r0
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d003      	beq.n	800c4d6 <dir_read+0x122>
 800c4ce:	7d7b      	ldrb	r3, [r7, #21]
 800c4d0:	3b01      	subs	r3, #1
 800c4d2:	b2db      	uxtb	r3, r3
 800c4d4:	e000      	b.n	800c4d8 <dir_read+0x124>
 800c4d6:	23ff      	movs	r3, #255	; 0xff
 800c4d8:	757b      	strb	r3, [r7, #21]
 800c4da:	e011      	b.n	800c500 <dir_read+0x14c>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800c4dc:	7d7b      	ldrb	r3, [r7, #21]
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d109      	bne.n	800c4f6 <dir_read+0x142>
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	f7ff fca4 	bl	800be34 <sum_sfn>
 800c4ec:	4603      	mov	r3, r0
 800c4ee:	461a      	mov	r2, r3
 800c4f0:	7d3b      	ldrb	r3, [r7, #20]
 800c4f2:	4293      	cmp	r3, r2
 800c4f4:	d017      	beq.n	800c526 <dir_read+0x172>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c4fc:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					break;
 800c4fe:	e012      	b.n	800c526 <dir_read+0x172>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800c500:	2100      	movs	r1, #0
 800c502:	6878      	ldr	r0, [r7, #4]
 800c504:	f7ff f94b 	bl	800b79e <dir_next>
 800c508:	4603      	mov	r3, r0
 800c50a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c50c:	7dfb      	ldrb	r3, [r7, #23]
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d10b      	bne.n	800c52a <dir_read+0x176>
	while (dp->sect) {
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c516:	2b00      	cmp	r3, #0
 800c518:	f47f af5b 	bne.w	800c3d2 <dir_read+0x1e>
 800c51c:	e006      	b.n	800c52c <dir_read+0x178>
		if (res != FR_OK) break;
 800c51e:	bf00      	nop
 800c520:	e004      	b.n	800c52c <dir_read+0x178>
					break;
 800c522:	bf00      	nop
 800c524:	e002      	b.n	800c52c <dir_read+0x178>
					break;
 800c526:	bf00      	nop
 800c528:	e000      	b.n	800c52c <dir_read+0x178>
		if (res != FR_OK) break;
 800c52a:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800c52c:	7dfb      	ldrb	r3, [r7, #23]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d002      	beq.n	800c538 <dir_read+0x184>
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	2200      	movs	r2, #0
 800c536:	639a      	str	r2, [r3, #56]	; 0x38
	return res;
 800c538:	7dfb      	ldrb	r3, [r7, #23]
}
 800c53a:	4618      	mov	r0, r3
 800c53c:	3718      	adds	r7, #24
 800c53e:	46bd      	mov	sp, r7
 800c540:	bd80      	pop	{r7, pc}

0800c542 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800c542:	b590      	push	{r4, r7, lr}
 800c544:	b089      	sub	sp, #36	; 0x24
 800c546:	af00      	add	r7, sp, #0
 800c548:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	60fb      	str	r3, [r7, #12]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800c550:	2100      	movs	r1, #0
 800c552:	6878      	ldr	r0, [r7, #4]
 800c554:	f7ff f88f 	bl	800b676 <dir_sdi>
 800c558:	4603      	mov	r3, r0
 800c55a:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 800c55c:	7ffb      	ldrb	r3, [r7, #31]
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d001      	beq.n	800c566 <dir_find+0x24>
 800c562:	7ffb      	ldrb	r3, [r7, #31]
 800c564:	e112      	b.n	800c78c <dir_find+0x24a>
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	781b      	ldrb	r3, [r3, #0]
 800c56a:	2b04      	cmp	r3, #4
 800c56c:	d164      	bne.n	800c638 <dir_find+0xf6>
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	691b      	ldr	r3, [r3, #16]
 800c572:	4618      	mov	r0, r3
 800c574:	f7ff fcb2 	bl	800bedc <xname_sum>
 800c578:	4603      	mov	r3, r0
 800c57a:	813b      	strh	r3, [r7, #8]

		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800c57c:	e04f      	b.n	800c61e <dir_find+0xdc>
#if _MAX_LFN < 255
			if (fs->dirbuf[XDIR_NumName] > _MAX_LFN) continue;			/* Skip comparison if inaccessible object name */
#endif
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	695b      	ldr	r3, [r3, #20]
 800c582:	3324      	adds	r3, #36	; 0x24
 800c584:	4618      	mov	r0, r3
 800c586:	f7fd fdd1 	bl	800a12c <ld_word>
 800c58a:	4603      	mov	r3, r0
 800c58c:	461a      	mov	r2, r3
 800c58e:	893b      	ldrh	r3, [r7, #8]
 800c590:	4293      	cmp	r3, r2
 800c592:	d000      	beq.n	800c596 <dir_find+0x54>
 800c594:	e043      	b.n	800c61e <dir_find+0xdc>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	695b      	ldr	r3, [r3, #20]
 800c59a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800c59e:	76fb      	strb	r3, [r7, #27]
 800c5a0:	2340      	movs	r3, #64	; 0x40
 800c5a2:	617b      	str	r3, [r7, #20]
 800c5a4:	2300      	movs	r3, #0
 800c5a6:	613b      	str	r3, [r7, #16]
 800c5a8:	e029      	b.n	800c5fe <dir_find+0xbc>
				if ((di % SZDIRE) == 0) di += 2;
 800c5aa:	697b      	ldr	r3, [r7, #20]
 800c5ac:	f003 031f 	and.w	r3, r3, #31
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d102      	bne.n	800c5ba <dir_find+0x78>
 800c5b4:	697b      	ldr	r3, [r7, #20]
 800c5b6:	3302      	adds	r3, #2
 800c5b8:	617b      	str	r3, [r7, #20]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	695a      	ldr	r2, [r3, #20]
 800c5be:	697b      	ldr	r3, [r7, #20]
 800c5c0:	4413      	add	r3, r2
 800c5c2:	4618      	mov	r0, r3
 800c5c4:	f7fd fdb2 	bl	800a12c <ld_word>
 800c5c8:	4603      	mov	r3, r0
 800c5ca:	4618      	mov	r0, r3
 800c5cc:	f002 fcc0 	bl	800ef50 <ff_wtoupper>
 800c5d0:	4603      	mov	r3, r0
 800c5d2:	461c      	mov	r4, r3
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	691a      	ldr	r2, [r3, #16]
 800c5d8:	693b      	ldr	r3, [r7, #16]
 800c5da:	005b      	lsls	r3, r3, #1
 800c5dc:	4413      	add	r3, r2
 800c5de:	881b      	ldrh	r3, [r3, #0]
 800c5e0:	4618      	mov	r0, r3
 800c5e2:	f002 fcb5 	bl	800ef50 <ff_wtoupper>
 800c5e6:	4603      	mov	r3, r0
 800c5e8:	429c      	cmp	r4, r3
 800c5ea:	d10c      	bne.n	800c606 <dir_find+0xc4>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800c5ec:	7efb      	ldrb	r3, [r7, #27]
 800c5ee:	3b01      	subs	r3, #1
 800c5f0:	76fb      	strb	r3, [r7, #27]
 800c5f2:	697b      	ldr	r3, [r7, #20]
 800c5f4:	3302      	adds	r3, #2
 800c5f6:	617b      	str	r3, [r7, #20]
 800c5f8:	693b      	ldr	r3, [r7, #16]
 800c5fa:	3301      	adds	r3, #1
 800c5fc:	613b      	str	r3, [r7, #16]
 800c5fe:	7efb      	ldrb	r3, [r7, #27]
 800c600:	2b00      	cmp	r3, #0
 800c602:	d1d2      	bne.n	800c5aa <dir_find+0x68>
 800c604:	e000      	b.n	800c608 <dir_find+0xc6>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800c606:	bf00      	nop
			}
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800c608:	7efb      	ldrb	r3, [r7, #27]
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d107      	bne.n	800c61e <dir_find+0xdc>
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	691a      	ldr	r2, [r3, #16]
 800c612:	693b      	ldr	r3, [r7, #16]
 800c614:	005b      	lsls	r3, r3, #1
 800c616:	4413      	add	r3, r2
 800c618:	881b      	ldrh	r3, [r3, #0]
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d009      	beq.n	800c632 <dir_find+0xf0>
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800c61e:	2100      	movs	r1, #0
 800c620:	6878      	ldr	r0, [r7, #4]
 800c622:	f7ff fec7 	bl	800c3b4 <dir_read>
 800c626:	4603      	mov	r3, r0
 800c628:	77fb      	strb	r3, [r7, #31]
 800c62a:	7ffb      	ldrb	r3, [r7, #31]
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d0a6      	beq.n	800c57e <dir_find+0x3c>
 800c630:	e000      	b.n	800c634 <dir_find+0xf2>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800c632:	bf00      	nop
		}
		return res;
 800c634:	7ffb      	ldrb	r3, [r7, #31]
 800c636:	e0a9      	b.n	800c78c <dir_find+0x24a>
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c638:	23ff      	movs	r3, #255	; 0xff
 800c63a:	773b      	strb	r3, [r7, #28]
 800c63c:	7f3b      	ldrb	r3, [r7, #28]
 800c63e:	777b      	strb	r3, [r7, #29]
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c646:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
	do {
		res = move_window(fs, dp->sect);
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c64c:	4619      	mov	r1, r3
 800c64e:	68f8      	ldr	r0, [r7, #12]
 800c650:	f7fe f980 	bl	800a954 <move_window>
 800c654:	4603      	mov	r3, r0
 800c656:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) break;
 800c658:	7ffb      	ldrb	r3, [r7, #31]
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	f040 8090 	bne.w	800c780 <dir_find+0x23e>
		c = dp->dir[DIR_Name];
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c664:	781b      	ldrb	r3, [r3, #0]
 800c666:	77bb      	strb	r3, [r7, #30]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800c668:	7fbb      	ldrb	r3, [r7, #30]
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d102      	bne.n	800c674 <dir_find+0x132>
 800c66e:	2304      	movs	r3, #4
 800c670:	77fb      	strb	r3, [r7, #31]
 800c672:	e08a      	b.n	800c78a <dir_find+0x248>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c678:	330b      	adds	r3, #11
 800c67a:	781b      	ldrb	r3, [r3, #0]
 800c67c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c680:	72fb      	strb	r3, [r7, #11]
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	7afa      	ldrb	r2, [r7, #11]
 800c686:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800c688:	7fbb      	ldrb	r3, [r7, #30]
 800c68a:	2be5      	cmp	r3, #229	; 0xe5
 800c68c:	d007      	beq.n	800c69e <dir_find+0x15c>
 800c68e:	7afb      	ldrb	r3, [r7, #11]
 800c690:	f003 0308 	and.w	r3, r3, #8
 800c694:	2b00      	cmp	r3, #0
 800c696:	d009      	beq.n	800c6ac <dir_find+0x16a>
 800c698:	7afb      	ldrb	r3, [r7, #11]
 800c69a:	2b0f      	cmp	r3, #15
 800c69c:	d006      	beq.n	800c6ac <dir_find+0x16a>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c69e:	23ff      	movs	r3, #255	; 0xff
 800c6a0:	777b      	strb	r3, [r7, #29]
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c6a8:	64da      	str	r2, [r3, #76]	; 0x4c
 800c6aa:	e05e      	b.n	800c76a <dir_find+0x228>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800c6ac:	7afb      	ldrb	r3, [r7, #11]
 800c6ae:	2b0f      	cmp	r3, #15
 800c6b0:	d136      	bne.n	800c720 <dir_find+0x1de>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800c6b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d154      	bne.n	800c76a <dir_find+0x228>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800c6c0:	7fbb      	ldrb	r3, [r7, #30]
 800c6c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d00d      	beq.n	800c6e6 <dir_find+0x1a4>
						sum = dp->dir[LDIR_Chksum];
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c6ce:	7b5b      	ldrb	r3, [r3, #13]
 800c6d0:	773b      	strb	r3, [r7, #28]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800c6d2:	7fbb      	ldrb	r3, [r7, #30]
 800c6d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c6d8:	77bb      	strb	r3, [r7, #30]
 800c6da:	7fbb      	ldrb	r3, [r7, #30]
 800c6dc:	777b      	strb	r3, [r7, #29]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800c6e6:	7fba      	ldrb	r2, [r7, #30]
 800c6e8:	7f7b      	ldrb	r3, [r7, #29]
 800c6ea:	429a      	cmp	r2, r3
 800c6ec:	d115      	bne.n	800c71a <dir_find+0x1d8>
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c6f2:	330d      	adds	r3, #13
 800c6f4:	781b      	ldrb	r3, [r3, #0]
 800c6f6:	7f3a      	ldrb	r2, [r7, #28]
 800c6f8:	429a      	cmp	r2, r3
 800c6fa:	d10e      	bne.n	800c71a <dir_find+0x1d8>
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	691a      	ldr	r2, [r3, #16]
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c704:	4619      	mov	r1, r3
 800c706:	4610      	mov	r0, r2
 800c708:	f7ff f9ca 	bl	800baa0 <cmp_lfn>
 800c70c:	4603      	mov	r3, r0
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d003      	beq.n	800c71a <dir_find+0x1d8>
 800c712:	7f7b      	ldrb	r3, [r7, #29]
 800c714:	3b01      	subs	r3, #1
 800c716:	b2db      	uxtb	r3, r3
 800c718:	e000      	b.n	800c71c <dir_find+0x1da>
 800c71a:	23ff      	movs	r3, #255	; 0xff
 800c71c:	777b      	strb	r3, [r7, #29]
 800c71e:	e024      	b.n	800c76a <dir_find+0x228>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800c720:	7f7b      	ldrb	r3, [r7, #29]
 800c722:	2b00      	cmp	r3, #0
 800c724:	d109      	bne.n	800c73a <dir_find+0x1f8>
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c72a:	4618      	mov	r0, r3
 800c72c:	f7ff fb82 	bl	800be34 <sum_sfn>
 800c730:	4603      	mov	r3, r0
 800c732:	461a      	mov	r2, r3
 800c734:	7f3b      	ldrb	r3, [r7, #28]
 800c736:	4293      	cmp	r3, r2
 800c738:	d024      	beq.n	800c784 <dir_find+0x242>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800c740:	f003 0301 	and.w	r3, r3, #1
 800c744:	2b00      	cmp	r3, #0
 800c746:	d10a      	bne.n	800c75e <dir_find+0x21c>
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	3340      	adds	r3, #64	; 0x40
 800c750:	220b      	movs	r2, #11
 800c752:	4619      	mov	r1, r3
 800c754:	f7fd ff0b 	bl	800a56e <mem_cmp>
 800c758:	4603      	mov	r3, r0
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d014      	beq.n	800c788 <dir_find+0x246>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c75e:	23ff      	movs	r3, #255	; 0xff
 800c760:	777b      	strb	r3, [r7, #29]
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c768:	64da      	str	r2, [r3, #76]	; 0x4c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800c76a:	2100      	movs	r1, #0
 800c76c:	6878      	ldr	r0, [r7, #4]
 800c76e:	f7ff f816 	bl	800b79e <dir_next>
 800c772:	4603      	mov	r3, r0
 800c774:	77fb      	strb	r3, [r7, #31]
	} while (res == FR_OK);
 800c776:	7ffb      	ldrb	r3, [r7, #31]
 800c778:	2b00      	cmp	r3, #0
 800c77a:	f43f af65 	beq.w	800c648 <dir_find+0x106>
 800c77e:	e004      	b.n	800c78a <dir_find+0x248>
		if (res != FR_OK) break;
 800c780:	bf00      	nop
 800c782:	e002      	b.n	800c78a <dir_find+0x248>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800c784:	bf00      	nop
 800c786:	e000      	b.n	800c78a <dir_find+0x248>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800c788:	bf00      	nop

	return res;
 800c78a:	7ffb      	ldrb	r3, [r7, #31]
}
 800c78c:	4618      	mov	r0, r3
 800c78e:	3724      	adds	r7, #36	; 0x24
 800c790:	46bd      	mov	sp, r7
 800c792:	bd90      	pop	{r4, r7, pc}

0800c794 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800c794:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800c798:	b0a0      	sub	sp, #128	; 0x80
 800c79a:	af00      	add	r7, sp, #0
 800c79c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	66fb      	str	r3, [r7, #108]	; 0x6c
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800c7aa:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d001      	beq.n	800c7b6 <dir_register+0x22>
 800c7b2:	2306      	movs	r3, #6
 800c7b4:	e192      	b.n	800cadc <dir_register+0x348>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800c7b6:	2300      	movs	r3, #0
 800c7b8:	677b      	str	r3, [r7, #116]	; 0x74
 800c7ba:	e002      	b.n	800c7c2 <dir_register+0x2e>
 800c7bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c7be:	3301      	adds	r3, #1
 800c7c0:	677b      	str	r3, [r7, #116]	; 0x74
 800c7c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c7c4:	691a      	ldr	r2, [r3, #16]
 800c7c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c7c8:	005b      	lsls	r3, r3, #1
 800c7ca:	4413      	add	r3, r2
 800c7cc:	881b      	ldrh	r3, [r3, #0]
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d1f4      	bne.n	800c7bc <dir_register+0x28>

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800c7d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c7d4:	781b      	ldrb	r3, [r3, #0]
 800c7d6:	2b04      	cmp	r3, #4
 800c7d8:	f040 80a3 	bne.w	800c922 <dir_register+0x18e>
		DIR dj;

		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 800c7dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c7de:	330e      	adds	r3, #14
 800c7e0:	4aa4      	ldr	r2, [pc, #656]	; (800ca74 <dir_register+0x2e0>)
 800c7e2:	fba2 2303 	umull	r2, r3, r2, r3
 800c7e6:	08db      	lsrs	r3, r3, #3
 800c7e8:	3302      	adds	r3, #2
 800c7ea:	673b      	str	r3, [r7, #112]	; 0x70
		res = dir_alloc(dp, nent);		/* Allocate entries */
 800c7ec:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800c7ee:	6878      	ldr	r0, [r7, #4]
 800c7f0:	f7ff f8bb 	bl	800b96a <dir_alloc>
 800c7f4:	4603      	mov	r3, r0
 800c7f6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res != FR_OK) return res;
 800c7fa:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d002      	beq.n	800c808 <dir_register+0x74>
 800c802:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800c806:	e169      	b.n	800cadc <dir_register+0x348>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c80c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c80e:	3b01      	subs	r3, #1
 800c810:	015b      	lsls	r3, r3, #5
 800c812:	1ad2      	subs	r2, r2, r3
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	64da      	str	r2, [r3, #76]	; 0x4c

		if (dp->obj.sclust != 0 && (dp->obj.stat & 4)) {	/* Has the sub-directory been stretched? */
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	689b      	ldr	r3, [r3, #8]
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d076      	beq.n	800c90e <dir_register+0x17a>
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	79db      	ldrb	r3, [r3, #7]
 800c824:	f003 0304 	and.w	r3, r3, #4
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d070      	beq.n	800c90e <dir_register+0x17a>
			dp->obj.objsize += (DWORD)fs->csize * SS(fs);	/* Increase the directory size by cluster size */
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800c832:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800c834:	8949      	ldrh	r1, [r1, #10]
 800c836:	4608      	mov	r0, r1
 800c838:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800c83a:	8989      	ldrh	r1, [r1, #12]
 800c83c:	fb00 f101 	mul.w	r1, r0, r1
 800c840:	2000      	movs	r0, #0
 800c842:	460c      	mov	r4, r1
 800c844:	4605      	mov	r5, r0
 800c846:	eb12 0804 	adds.w	r8, r2, r4
 800c84a:	eb43 0905 	adc.w	r9, r3, r5
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	e9c3 8904 	strd	r8, r9, [r3, #16]
			res = fill_first_frag(&dp->obj);				/* Fill first fragment on the FAT if needed */
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	4618      	mov	r0, r3
 800c858:	f7fe fcac 	bl	800b1b4 <fill_first_frag>
 800c85c:	4603      	mov	r3, r0
 800c85e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800c862:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800c866:	2b00      	cmp	r3, #0
 800c868:	d002      	beq.n	800c870 <dir_register+0xdc>
 800c86a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800c86e:	e135      	b.n	800cadc <dir_register+0x348>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800c870:	6878      	ldr	r0, [r7, #4]
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c876:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c87a:	4619      	mov	r1, r3
 800c87c:	f7fe fcc9 	bl	800b212 <fill_last_frag>
 800c880:	4603      	mov	r3, r0
 800c882:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800c886:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d002      	beq.n	800c894 <dir_register+0x100>
 800c88e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800c892:	e123      	b.n	800cadc <dir_register+0x348>
			res = load_obj_dir(&dj, &dp->obj);				/* Load the object status */
 800c894:	687a      	ldr	r2, [r7, #4]
 800c896:	f107 0308 	add.w	r3, r7, #8
 800c89a:	4611      	mov	r1, r2
 800c89c:	4618      	mov	r0, r3
 800c89e:	f7ff fc91 	bl	800c1c4 <load_obj_dir>
 800c8a2:	4603      	mov	r3, r0
 800c8a4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800c8a8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d002      	beq.n	800c8b6 <dir_register+0x122>
 800c8b0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800c8b4:	e112      	b.n	800cadc <dir_register+0x348>
			st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);		/* Update the allocation status */
 800c8b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c8b8:	695b      	ldr	r3, [r3, #20]
 800c8ba:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800c8c4:	4608      	mov	r0, r1
 800c8c6:	f7fd fd8e 	bl	800a3e6 <st_qword>
			st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 800c8ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c8cc:	695b      	ldr	r3, [r3, #20]
 800c8ce:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800c8d8:	4608      	mov	r0, r1
 800c8da:	f7fd fd84 	bl	800a3e6 <st_qword>
			fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	79da      	ldrb	r2, [r3, #7]
 800c8e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c8e4:	695b      	ldr	r3, [r3, #20]
 800c8e6:	3321      	adds	r3, #33	; 0x21
 800c8e8:	f042 0201 	orr.w	r2, r2, #1
 800c8ec:	b2d2      	uxtb	r2, r2
 800c8ee:	701a      	strb	r2, [r3, #0]
			res = store_xdir(&dj);							/* Store the object status */
 800c8f0:	f107 0308 	add.w	r3, r7, #8
 800c8f4:	4618      	mov	r0, r3
 800c8f6:	f7ff fc9b 	bl	800c230 <store_xdir>
 800c8fa:	4603      	mov	r3, r0
 800c8fc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800c900:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800c904:	2b00      	cmp	r3, #0
 800c906:	d002      	beq.n	800c90e <dir_register+0x17a>
 800c908:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800c90c:	e0e6      	b.n	800cadc <dir_register+0x348>
		}

		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 800c90e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c910:	695a      	ldr	r2, [r3, #20]
 800c912:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c914:	691b      	ldr	r3, [r3, #16]
 800c916:	4619      	mov	r1, r3
 800c918:	4610      	mov	r0, r2
 800c91a:	f7ff fce4 	bl	800c2e6 <create_xdir>
		return FR_OK;
 800c91e:	2300      	movs	r3, #0
 800c920:	e0dc      	b.n	800cadc <dir_register+0x348>
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800c928:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800c92c:	220c      	movs	r2, #12
 800c92e:	4618      	mov	r0, r3
 800c930:	f7fd fde1 	bl	800a4f6 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800c934:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c938:	f003 0301 	and.w	r3, r3, #1
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d033      	beq.n	800c9a8 <dir_register+0x214>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	2240      	movs	r2, #64	; 0x40
 800c944:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		for (n = 1; n < 100; n++) {
 800c948:	2301      	movs	r3, #1
 800c94a:	67bb      	str	r3, [r7, #120]	; 0x78
 800c94c:	e016      	b.n	800c97c <dir_register+0x1e8>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800c954:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c956:	691a      	ldr	r2, [r3, #16]
 800c958:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 800c95c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c95e:	f7ff f9db 	bl	800bd18 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800c962:	6878      	ldr	r0, [r7, #4]
 800c964:	f7ff fded 	bl	800c542 <dir_find>
 800c968:	4603      	mov	r3, r0
 800c96a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) break;
 800c96e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800c972:	2b00      	cmp	r3, #0
 800c974:	d106      	bne.n	800c984 <dir_register+0x1f0>
		for (n = 1; n < 100; n++) {
 800c976:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c978:	3301      	adds	r3, #1
 800c97a:	67bb      	str	r3, [r7, #120]	; 0x78
 800c97c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c97e:	2b63      	cmp	r3, #99	; 0x63
 800c980:	d9e5      	bls.n	800c94e <dir_register+0x1ba>
 800c982:	e000      	b.n	800c986 <dir_register+0x1f2>
			if (res != FR_OK) break;
 800c984:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800c986:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c988:	2b64      	cmp	r3, #100	; 0x64
 800c98a:	d101      	bne.n	800c990 <dir_register+0x1fc>
 800c98c:	2307      	movs	r3, #7
 800c98e:	e0a5      	b.n	800cadc <dir_register+0x348>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800c990:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800c994:	2b04      	cmp	r3, #4
 800c996:	d002      	beq.n	800c99e <dir_register+0x20a>
 800c998:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800c99c:	e09e      	b.n	800cadc <dir_register+0x348>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800c99e:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800c9a8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c9ac:	f003 0302 	and.w	r3, r3, #2
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d007      	beq.n	800c9c4 <dir_register+0x230>
 800c9b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c9b6:	330c      	adds	r3, #12
 800c9b8:	4a2f      	ldr	r2, [pc, #188]	; (800ca78 <dir_register+0x2e4>)
 800c9ba:	fba2 2303 	umull	r2, r3, r2, r3
 800c9be:	089b      	lsrs	r3, r3, #2
 800c9c0:	3301      	adds	r3, #1
 800c9c2:	e000      	b.n	800c9c6 <dir_register+0x232>
 800c9c4:	2301      	movs	r3, #1
 800c9c6:	673b      	str	r3, [r7, #112]	; 0x70
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800c9c8:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800c9ca:	6878      	ldr	r0, [r7, #4]
 800c9cc:	f7fe ffcd 	bl	800b96a <dir_alloc>
 800c9d0:	4603      	mov	r3, r0
 800c9d2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800c9d6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d14f      	bne.n	800ca7e <dir_register+0x2ea>
 800c9de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c9e0:	3b01      	subs	r3, #1
 800c9e2:	673b      	str	r3, [r7, #112]	; 0x70
 800c9e4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d049      	beq.n	800ca7e <dir_register+0x2ea>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c9ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c9f0:	015b      	lsls	r3, r3, #5
 800c9f2:	1ad3      	subs	r3, r2, r3
 800c9f4:	4619      	mov	r1, r3
 800c9f6:	6878      	ldr	r0, [r7, #4]
 800c9f8:	f7fe fe3d 	bl	800b676 <dir_sdi>
 800c9fc:	4603      	mov	r3, r0
 800c9fe:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 800ca02:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d139      	bne.n	800ca7e <dir_register+0x2ea>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	3340      	adds	r3, #64	; 0x40
 800ca0e:	4618      	mov	r0, r3
 800ca10:	f7ff fa10 	bl	800be34 <sum_sfn>
 800ca14:	4603      	mov	r3, r0
 800ca16:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca1e:	4619      	mov	r1, r3
 800ca20:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ca22:	f7fd ff97 	bl	800a954 <move_window>
 800ca26:	4603      	mov	r3, r0
 800ca28:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res != FR_OK) break;
 800ca2c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d123      	bne.n	800ca7c <dir_register+0x2e8>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800ca34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ca36:	6918      	ldr	r0, [r3, #16]
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800ca3c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ca3e:	b2da      	uxtb	r2, r3
 800ca40:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800ca44:	f7ff f900 	bl	800bc48 <put_lfn>
				fs->wflag = 1;
 800ca48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ca4a:	2201      	movs	r2, #1
 800ca4c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800ca4e:	2100      	movs	r1, #0
 800ca50:	6878      	ldr	r0, [r7, #4]
 800ca52:	f7fe fea4 	bl	800b79e <dir_next>
 800ca56:	4603      	mov	r3, r0
 800ca58:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			} while (res == FR_OK && --nent);
 800ca5c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d10c      	bne.n	800ca7e <dir_register+0x2ea>
 800ca64:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ca66:	3b01      	subs	r3, #1
 800ca68:	673b      	str	r3, [r7, #112]	; 0x70
 800ca6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d1d4      	bne.n	800ca1a <dir_register+0x286>
 800ca70:	e005      	b.n	800ca7e <dir_register+0x2ea>
 800ca72:	bf00      	nop
 800ca74:	88888889 	.word	0x88888889
 800ca78:	4ec4ec4f 	.word	0x4ec4ec4f
				if (res != FR_OK) break;
 800ca7c:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800ca7e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d128      	bne.n	800cad8 <dir_register+0x344>
		res = move_window(fs, dp->sect);
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca8a:	4619      	mov	r1, r3
 800ca8c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ca8e:	f7fd ff61 	bl	800a954 <move_window>
 800ca92:	4603      	mov	r3, r0
 800ca94:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 800ca98:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d11b      	bne.n	800cad8 <dir_register+0x344>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800caa4:	2220      	movs	r2, #32
 800caa6:	2100      	movs	r1, #0
 800caa8:	4618      	mov	r0, r3
 800caaa:	f7fd fd45 	bl	800a538 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	3340      	adds	r3, #64	; 0x40
 800cab6:	220b      	movs	r2, #11
 800cab8:	4619      	mov	r1, r3
 800caba:	f7fd fd1c 	bl	800a4f6 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cac8:	330c      	adds	r3, #12
 800caca:	f002 0218 	and.w	r2, r2, #24
 800cace:	b2d2      	uxtb	r2, r2
 800cad0:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800cad2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cad4:	2201      	movs	r2, #1
 800cad6:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800cad8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800cadc:	4618      	mov	r0, r3
 800cade:	3780      	adds	r7, #128	; 0x80
 800cae0:	46bd      	mov	sp, r7
 800cae2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800cae6:	bf00      	nop

0800cae8 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800cae8:	b5b0      	push	{r4, r5, r7, lr}
 800caea:	b088      	sub	sp, #32
 800caec:	af00      	add	r7, sp, #0
 800caee:	6078      	str	r0, [r7, #4]
 800caf0:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800caf8:	683b      	ldr	r3, [r7, #0]
 800cafa:	2200      	movs	r2, #0
 800cafc:	769a      	strb	r2, [r3, #26]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	f000 80d8 	beq.w	800ccb8 <get_fileinfo+0x1d0>

#if _USE_LFN != 0	/* LFN configuration */
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800cb08:	693b      	ldr	r3, [r7, #16]
 800cb0a:	781b      	ldrb	r3, [r3, #0]
 800cb0c:	2b04      	cmp	r3, #4
 800cb0e:	d106      	bne.n	800cb1e <get_fileinfo+0x36>
		get_xdir_info(fs->dirbuf, fno);
 800cb10:	693b      	ldr	r3, [r7, #16]
 800cb12:	695b      	ldr	r3, [r3, #20]
 800cb14:	6839      	ldr	r1, [r7, #0]
 800cb16:	4618      	mov	r0, r3
 800cb18:	f7ff fa14 	bl	800bf44 <get_xdir_info>
		return;
 800cb1c:	e0cd      	b.n	800ccba <get_fileinfo+0x1d2>
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cb22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cb26:	d032      	beq.n	800cb8e <get_fileinfo+0xa6>
			i = j = 0;
 800cb28:	2300      	movs	r3, #0
 800cb2a:	61bb      	str	r3, [r7, #24]
 800cb2c:	69bb      	ldr	r3, [r7, #24]
 800cb2e:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800cb30:	e01b      	b.n	800cb6a <get_fileinfo+0x82>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800cb32:	89fb      	ldrh	r3, [r7, #14]
 800cb34:	2100      	movs	r1, #0
 800cb36:	4618      	mov	r0, r3
 800cb38:	f002 f9ce 	bl	800eed8 <ff_convert>
 800cb3c:	4603      	mov	r3, r0
 800cb3e:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800cb40:	89fb      	ldrh	r3, [r7, #14]
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d102      	bne.n	800cb4c <get_fileinfo+0x64>
 800cb46:	2300      	movs	r3, #0
 800cb48:	61fb      	str	r3, [r7, #28]
 800cb4a:	e01a      	b.n	800cb82 <get_fileinfo+0x9a>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800cb4c:	69fb      	ldr	r3, [r7, #28]
 800cb4e:	2bfe      	cmp	r3, #254	; 0xfe
 800cb50:	d902      	bls.n	800cb58 <get_fileinfo+0x70>
 800cb52:	2300      	movs	r3, #0
 800cb54:	61fb      	str	r3, [r7, #28]
 800cb56:	e014      	b.n	800cb82 <get_fileinfo+0x9a>
				fno->fname[i++] = (TCHAR)w;
 800cb58:	69fb      	ldr	r3, [r7, #28]
 800cb5a:	1c5a      	adds	r2, r3, #1
 800cb5c:	61fa      	str	r2, [r7, #28]
 800cb5e:	89fa      	ldrh	r2, [r7, #14]
 800cb60:	b2d1      	uxtb	r1, r2
 800cb62:	683a      	ldr	r2, [r7, #0]
 800cb64:	4413      	add	r3, r2
 800cb66:	460a      	mov	r2, r1
 800cb68:	769a      	strb	r2, [r3, #26]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800cb6a:	693b      	ldr	r3, [r7, #16]
 800cb6c:	691a      	ldr	r2, [r3, #16]
 800cb6e:	69bb      	ldr	r3, [r7, #24]
 800cb70:	1c59      	adds	r1, r3, #1
 800cb72:	61b9      	str	r1, [r7, #24]
 800cb74:	005b      	lsls	r3, r3, #1
 800cb76:	4413      	add	r3, r2
 800cb78:	881b      	ldrh	r3, [r3, #0]
 800cb7a:	81fb      	strh	r3, [r7, #14]
 800cb7c:	89fb      	ldrh	r3, [r7, #14]
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d1d7      	bne.n	800cb32 <get_fileinfo+0x4a>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800cb82:	683a      	ldr	r2, [r7, #0]
 800cb84:	69fb      	ldr	r3, [r7, #28]
 800cb86:	4413      	add	r3, r2
 800cb88:	331a      	adds	r3, #26
 800cb8a:	2200      	movs	r2, #0
 800cb8c:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800cb8e:	2300      	movs	r3, #0
 800cb90:	61bb      	str	r3, [r7, #24]
 800cb92:	69bb      	ldr	r3, [r7, #24]
 800cb94:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800cb96:	683a      	ldr	r2, [r7, #0]
 800cb98:	69fb      	ldr	r3, [r7, #28]
 800cb9a:	4413      	add	r3, r2
 800cb9c:	331a      	adds	r3, #26
 800cb9e:	781b      	ldrb	r3, [r3, #0]
 800cba0:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800cba2:	e04c      	b.n	800cc3e <get_fileinfo+0x156>
		c = (TCHAR)dp->dir[i++];
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cba8:	69fb      	ldr	r3, [r7, #28]
 800cbaa:	1c59      	adds	r1, r3, #1
 800cbac:	61f9      	str	r1, [r7, #28]
 800cbae:	4413      	add	r3, r2
 800cbb0:	781b      	ldrb	r3, [r3, #0]
 800cbb2:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800cbb4:	7dfb      	ldrb	r3, [r7, #23]
 800cbb6:	2b20      	cmp	r3, #32
 800cbb8:	d100      	bne.n	800cbbc <get_fileinfo+0xd4>
 800cbba:	e040      	b.n	800cc3e <get_fileinfo+0x156>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800cbbc:	7dfb      	ldrb	r3, [r7, #23]
 800cbbe:	2b05      	cmp	r3, #5
 800cbc0:	d101      	bne.n	800cbc6 <get_fileinfo+0xde>
 800cbc2:	23e5      	movs	r3, #229	; 0xe5
 800cbc4:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800cbc6:	69fb      	ldr	r3, [r7, #28]
 800cbc8:	2b09      	cmp	r3, #9
 800cbca:	d10f      	bne.n	800cbec <get_fileinfo+0x104>
			if (!lfv) fno->fname[j] = '.';
 800cbcc:	89bb      	ldrh	r3, [r7, #12]
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d105      	bne.n	800cbde <get_fileinfo+0xf6>
 800cbd2:	683a      	ldr	r2, [r7, #0]
 800cbd4:	69bb      	ldr	r3, [r7, #24]
 800cbd6:	4413      	add	r3, r2
 800cbd8:	331a      	adds	r3, #26
 800cbda:	222e      	movs	r2, #46	; 0x2e
 800cbdc:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800cbde:	69bb      	ldr	r3, [r7, #24]
 800cbe0:	1c5a      	adds	r2, r3, #1
 800cbe2:	61ba      	str	r2, [r7, #24]
 800cbe4:	683a      	ldr	r2, [r7, #0]
 800cbe6:	4413      	add	r3, r2
 800cbe8:	222e      	movs	r2, #46	; 0x2e
 800cbea:	735a      	strb	r2, [r3, #13]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800cbec:	683a      	ldr	r2, [r7, #0]
 800cbee:	69bb      	ldr	r3, [r7, #24]
 800cbf0:	4413      	add	r3, r2
 800cbf2:	330d      	adds	r3, #13
 800cbf4:	7dfa      	ldrb	r2, [r7, #23]
 800cbf6:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800cbf8:	89bb      	ldrh	r3, [r7, #12]
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d11c      	bne.n	800cc38 <get_fileinfo+0x150>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800cbfe:	7dfb      	ldrb	r3, [r7, #23]
 800cc00:	2b40      	cmp	r3, #64	; 0x40
 800cc02:	d913      	bls.n	800cc2c <get_fileinfo+0x144>
 800cc04:	7dfb      	ldrb	r3, [r7, #23]
 800cc06:	2b5a      	cmp	r3, #90	; 0x5a
 800cc08:	d810      	bhi.n	800cc2c <get_fileinfo+0x144>
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc0e:	330c      	adds	r3, #12
 800cc10:	781b      	ldrb	r3, [r3, #0]
 800cc12:	461a      	mov	r2, r3
 800cc14:	69fb      	ldr	r3, [r7, #28]
 800cc16:	2b08      	cmp	r3, #8
 800cc18:	d901      	bls.n	800cc1e <get_fileinfo+0x136>
 800cc1a:	2310      	movs	r3, #16
 800cc1c:	e000      	b.n	800cc20 <get_fileinfo+0x138>
 800cc1e:	2308      	movs	r3, #8
 800cc20:	4013      	ands	r3, r2
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d002      	beq.n	800cc2c <get_fileinfo+0x144>
				c += 0x20;			/* To lower */
 800cc26:	7dfb      	ldrb	r3, [r7, #23]
 800cc28:	3320      	adds	r3, #32
 800cc2a:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800cc2c:	683a      	ldr	r2, [r7, #0]
 800cc2e:	69bb      	ldr	r3, [r7, #24]
 800cc30:	4413      	add	r3, r2
 800cc32:	331a      	adds	r3, #26
 800cc34:	7dfa      	ldrb	r2, [r7, #23]
 800cc36:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800cc38:	69bb      	ldr	r3, [r7, #24]
 800cc3a:	3301      	adds	r3, #1
 800cc3c:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 800cc3e:	69fb      	ldr	r3, [r7, #28]
 800cc40:	2b0a      	cmp	r3, #10
 800cc42:	d9af      	bls.n	800cba4 <get_fileinfo+0xbc>
	}
	if (!lfv) {
 800cc44:	89bb      	ldrh	r3, [r7, #12]
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d10d      	bne.n	800cc66 <get_fileinfo+0x17e>
		fno->fname[j] = 0;
 800cc4a:	683a      	ldr	r2, [r7, #0]
 800cc4c:	69bb      	ldr	r3, [r7, #24]
 800cc4e:	4413      	add	r3, r2
 800cc50:	331a      	adds	r3, #26
 800cc52:	2200      	movs	r2, #0
 800cc54:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc5a:	330c      	adds	r3, #12
 800cc5c:	781b      	ldrb	r3, [r3, #0]
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d101      	bne.n	800cc66 <get_fileinfo+0x17e>
 800cc62:	2300      	movs	r3, #0
 800cc64:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800cc66:	683a      	ldr	r2, [r7, #0]
 800cc68:	69bb      	ldr	r3, [r7, #24]
 800cc6a:	4413      	add	r3, r2
 800cc6c:	330d      	adds	r3, #13
 800cc6e:	2200      	movs	r2, #0
 800cc70:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc76:	7ada      	ldrb	r2, [r3, #11]
 800cc78:	683b      	ldr	r3, [r7, #0]
 800cc7a:	731a      	strb	r2, [r3, #12]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc80:	331c      	adds	r3, #28
 800cc82:	4618      	mov	r0, r3
 800cc84:	f7fd fa6a 	bl	800a15c <ld_dword>
 800cc88:	4603      	mov	r3, r0
 800cc8a:	2200      	movs	r2, #0
 800cc8c:	461c      	mov	r4, r3
 800cc8e:	4615      	mov	r5, r2
 800cc90:	683b      	ldr	r3, [r7, #0]
 800cc92:	e9c3 4500 	strd	r4, r5, [r3]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc9a:	3316      	adds	r3, #22
 800cc9c:	4618      	mov	r0, r3
 800cc9e:	f7fd fa5d 	bl	800a15c <ld_dword>
 800cca2:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800cca4:	68bb      	ldr	r3, [r7, #8]
 800cca6:	b29a      	uxth	r2, r3
 800cca8:	683b      	ldr	r3, [r7, #0]
 800ccaa:	815a      	strh	r2, [r3, #10]
 800ccac:	68bb      	ldr	r3, [r7, #8]
 800ccae:	0c1b      	lsrs	r3, r3, #16
 800ccb0:	b29a      	uxth	r2, r3
 800ccb2:	683b      	ldr	r3, [r7, #0]
 800ccb4:	811a      	strh	r2, [r3, #8]
 800ccb6:	e000      	b.n	800ccba <get_fileinfo+0x1d2>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800ccb8:	bf00      	nop
}
 800ccba:	3720      	adds	r7, #32
 800ccbc:	46bd      	mov	sp, r7
 800ccbe:	bdb0      	pop	{r4, r5, r7, pc}

0800ccc0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800ccc0:	b580      	push	{r7, lr}
 800ccc2:	b08a      	sub	sp, #40	; 0x28
 800ccc4:	af00      	add	r7, sp, #0
 800ccc6:	6078      	str	r0, [r7, #4]
 800ccc8:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800ccca:	683b      	ldr	r3, [r7, #0]
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	613b      	str	r3, [r7, #16]
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	691b      	ldr	r3, [r3, #16]
 800ccd6:	60fb      	str	r3, [r7, #12]
 800ccd8:	2300      	movs	r3, #0
 800ccda:	617b      	str	r3, [r7, #20]
 800ccdc:	697b      	ldr	r3, [r7, #20]
 800ccde:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800cce0:	69bb      	ldr	r3, [r7, #24]
 800cce2:	1c5a      	adds	r2, r3, #1
 800cce4:	61ba      	str	r2, [r7, #24]
 800cce6:	693a      	ldr	r2, [r7, #16]
 800cce8:	4413      	add	r3, r2
 800ccea:	781b      	ldrb	r3, [r3, #0]
 800ccec:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800ccee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ccf0:	2b1f      	cmp	r3, #31
 800ccf2:	d940      	bls.n	800cd76 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800ccf4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ccf6:	2b2f      	cmp	r3, #47	; 0x2f
 800ccf8:	d006      	beq.n	800cd08 <create_name+0x48>
 800ccfa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ccfc:	2b5c      	cmp	r3, #92	; 0x5c
 800ccfe:	d110      	bne.n	800cd22 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800cd00:	e002      	b.n	800cd08 <create_name+0x48>
 800cd02:	69bb      	ldr	r3, [r7, #24]
 800cd04:	3301      	adds	r3, #1
 800cd06:	61bb      	str	r3, [r7, #24]
 800cd08:	693a      	ldr	r2, [r7, #16]
 800cd0a:	69bb      	ldr	r3, [r7, #24]
 800cd0c:	4413      	add	r3, r2
 800cd0e:	781b      	ldrb	r3, [r3, #0]
 800cd10:	2b2f      	cmp	r3, #47	; 0x2f
 800cd12:	d0f6      	beq.n	800cd02 <create_name+0x42>
 800cd14:	693a      	ldr	r2, [r7, #16]
 800cd16:	69bb      	ldr	r3, [r7, #24]
 800cd18:	4413      	add	r3, r2
 800cd1a:	781b      	ldrb	r3, [r3, #0]
 800cd1c:	2b5c      	cmp	r3, #92	; 0x5c
 800cd1e:	d0f0      	beq.n	800cd02 <create_name+0x42>
			break;
 800cd20:	e02a      	b.n	800cd78 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800cd22:	697b      	ldr	r3, [r7, #20]
 800cd24:	2bfe      	cmp	r3, #254	; 0xfe
 800cd26:	d901      	bls.n	800cd2c <create_name+0x6c>
 800cd28:	2306      	movs	r3, #6
 800cd2a:	e17d      	b.n	800d028 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800cd2c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cd2e:	b2db      	uxtb	r3, r3
 800cd30:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800cd32:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cd34:	2101      	movs	r1, #1
 800cd36:	4618      	mov	r0, r3
 800cd38:	f002 f8ce 	bl	800eed8 <ff_convert>
 800cd3c:	4603      	mov	r3, r0
 800cd3e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800cd40:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d101      	bne.n	800cd4a <create_name+0x8a>
 800cd46:	2306      	movs	r3, #6
 800cd48:	e16e      	b.n	800d028 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800cd4a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cd4c:	2b7f      	cmp	r3, #127	; 0x7f
 800cd4e:	d809      	bhi.n	800cd64 <create_name+0xa4>
 800cd50:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cd52:	4619      	mov	r1, r3
 800cd54:	488d      	ldr	r0, [pc, #564]	; (800cf8c <create_name+0x2cc>)
 800cd56:	f7fd fc31 	bl	800a5bc <chk_chr>
 800cd5a:	4603      	mov	r3, r0
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d001      	beq.n	800cd64 <create_name+0xa4>
 800cd60:	2306      	movs	r3, #6
 800cd62:	e161      	b.n	800d028 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800cd64:	697b      	ldr	r3, [r7, #20]
 800cd66:	1c5a      	adds	r2, r3, #1
 800cd68:	617a      	str	r2, [r7, #20]
 800cd6a:	005b      	lsls	r3, r3, #1
 800cd6c:	68fa      	ldr	r2, [r7, #12]
 800cd6e:	4413      	add	r3, r2
 800cd70:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800cd72:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800cd74:	e7b4      	b.n	800cce0 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800cd76:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800cd78:	693a      	ldr	r2, [r7, #16]
 800cd7a:	69bb      	ldr	r3, [r7, #24]
 800cd7c:	441a      	add	r2, r3
 800cd7e:	683b      	ldr	r3, [r7, #0]
 800cd80:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800cd82:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cd84:	2b1f      	cmp	r3, #31
 800cd86:	d801      	bhi.n	800cd8c <create_name+0xcc>
 800cd88:	2304      	movs	r3, #4
 800cd8a:	e000      	b.n	800cd8e <create_name+0xce>
 800cd8c:	2300      	movs	r3, #0
 800cd8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800cd92:	e011      	b.n	800cdb8 <create_name+0xf8>
		w = lfn[di - 1];
 800cd94:	697b      	ldr	r3, [r7, #20]
 800cd96:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800cd9a:	3b01      	subs	r3, #1
 800cd9c:	005b      	lsls	r3, r3, #1
 800cd9e:	68fa      	ldr	r2, [r7, #12]
 800cda0:	4413      	add	r3, r2
 800cda2:	881b      	ldrh	r3, [r3, #0]
 800cda4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800cda6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cda8:	2b20      	cmp	r3, #32
 800cdaa:	d002      	beq.n	800cdb2 <create_name+0xf2>
 800cdac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cdae:	2b2e      	cmp	r3, #46	; 0x2e
 800cdb0:	d106      	bne.n	800cdc0 <create_name+0x100>
		di--;
 800cdb2:	697b      	ldr	r3, [r7, #20]
 800cdb4:	3b01      	subs	r3, #1
 800cdb6:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800cdb8:	697b      	ldr	r3, [r7, #20]
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d1ea      	bne.n	800cd94 <create_name+0xd4>
 800cdbe:	e000      	b.n	800cdc2 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800cdc0:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800cdc2:	697b      	ldr	r3, [r7, #20]
 800cdc4:	005b      	lsls	r3, r3, #1
 800cdc6:	68fa      	ldr	r2, [r7, #12]
 800cdc8:	4413      	add	r3, r2
 800cdca:	2200      	movs	r2, #0
 800cdcc:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800cdce:	697b      	ldr	r3, [r7, #20]
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d101      	bne.n	800cdd8 <create_name+0x118>
 800cdd4:	2306      	movs	r3, #6
 800cdd6:	e127      	b.n	800d028 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	3340      	adds	r3, #64	; 0x40
 800cddc:	220b      	movs	r2, #11
 800cdde:	2120      	movs	r1, #32
 800cde0:	4618      	mov	r0, r3
 800cde2:	f7fd fba9 	bl	800a538 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800cde6:	2300      	movs	r3, #0
 800cde8:	61bb      	str	r3, [r7, #24]
 800cdea:	e002      	b.n	800cdf2 <create_name+0x132>
 800cdec:	69bb      	ldr	r3, [r7, #24]
 800cdee:	3301      	adds	r3, #1
 800cdf0:	61bb      	str	r3, [r7, #24]
 800cdf2:	69bb      	ldr	r3, [r7, #24]
 800cdf4:	005b      	lsls	r3, r3, #1
 800cdf6:	68fa      	ldr	r2, [r7, #12]
 800cdf8:	4413      	add	r3, r2
 800cdfa:	881b      	ldrh	r3, [r3, #0]
 800cdfc:	2b20      	cmp	r3, #32
 800cdfe:	d0f5      	beq.n	800cdec <create_name+0x12c>
 800ce00:	69bb      	ldr	r3, [r7, #24]
 800ce02:	005b      	lsls	r3, r3, #1
 800ce04:	68fa      	ldr	r2, [r7, #12]
 800ce06:	4413      	add	r3, r2
 800ce08:	881b      	ldrh	r3, [r3, #0]
 800ce0a:	2b2e      	cmp	r3, #46	; 0x2e
 800ce0c:	d0ee      	beq.n	800cdec <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800ce0e:	69bb      	ldr	r3, [r7, #24]
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d009      	beq.n	800ce28 <create_name+0x168>
 800ce14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ce18:	f043 0303 	orr.w	r3, r3, #3
 800ce1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800ce20:	e002      	b.n	800ce28 <create_name+0x168>
 800ce22:	697b      	ldr	r3, [r7, #20]
 800ce24:	3b01      	subs	r3, #1
 800ce26:	617b      	str	r3, [r7, #20]
 800ce28:	697b      	ldr	r3, [r7, #20]
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d009      	beq.n	800ce42 <create_name+0x182>
 800ce2e:	697b      	ldr	r3, [r7, #20]
 800ce30:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ce34:	3b01      	subs	r3, #1
 800ce36:	005b      	lsls	r3, r3, #1
 800ce38:	68fa      	ldr	r2, [r7, #12]
 800ce3a:	4413      	add	r3, r2
 800ce3c:	881b      	ldrh	r3, [r3, #0]
 800ce3e:	2b2e      	cmp	r3, #46	; 0x2e
 800ce40:	d1ef      	bne.n	800ce22 <create_name+0x162>

	i = b = 0; ni = 8;
 800ce42:	2300      	movs	r3, #0
 800ce44:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ce48:	2300      	movs	r3, #0
 800ce4a:	623b      	str	r3, [r7, #32]
 800ce4c:	2308      	movs	r3, #8
 800ce4e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800ce50:	69bb      	ldr	r3, [r7, #24]
 800ce52:	1c5a      	adds	r2, r3, #1
 800ce54:	61ba      	str	r2, [r7, #24]
 800ce56:	005b      	lsls	r3, r3, #1
 800ce58:	68fa      	ldr	r2, [r7, #12]
 800ce5a:	4413      	add	r3, r2
 800ce5c:	881b      	ldrh	r3, [r3, #0]
 800ce5e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800ce60:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	f000 8090 	beq.w	800cf88 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800ce68:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ce6a:	2b20      	cmp	r3, #32
 800ce6c:	d006      	beq.n	800ce7c <create_name+0x1bc>
 800ce6e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ce70:	2b2e      	cmp	r3, #46	; 0x2e
 800ce72:	d10a      	bne.n	800ce8a <create_name+0x1ca>
 800ce74:	69ba      	ldr	r2, [r7, #24]
 800ce76:	697b      	ldr	r3, [r7, #20]
 800ce78:	429a      	cmp	r2, r3
 800ce7a:	d006      	beq.n	800ce8a <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800ce7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ce80:	f043 0303 	orr.w	r3, r3, #3
 800ce84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ce88:	e07d      	b.n	800cf86 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800ce8a:	6a3a      	ldr	r2, [r7, #32]
 800ce8c:	69fb      	ldr	r3, [r7, #28]
 800ce8e:	429a      	cmp	r2, r3
 800ce90:	d203      	bcs.n	800ce9a <create_name+0x1da>
 800ce92:	69ba      	ldr	r2, [r7, #24]
 800ce94:	697b      	ldr	r3, [r7, #20]
 800ce96:	429a      	cmp	r2, r3
 800ce98:	d123      	bne.n	800cee2 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800ce9a:	69fb      	ldr	r3, [r7, #28]
 800ce9c:	2b0b      	cmp	r3, #11
 800ce9e:	d106      	bne.n	800ceae <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800cea0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cea4:	f043 0303 	orr.w	r3, r3, #3
 800cea8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ceac:	e075      	b.n	800cf9a <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800ceae:	69ba      	ldr	r2, [r7, #24]
 800ceb0:	697b      	ldr	r3, [r7, #20]
 800ceb2:	429a      	cmp	r2, r3
 800ceb4:	d005      	beq.n	800cec2 <create_name+0x202>
 800ceb6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ceba:	f043 0303 	orr.w	r3, r3, #3
 800cebe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800cec2:	69ba      	ldr	r2, [r7, #24]
 800cec4:	697b      	ldr	r3, [r7, #20]
 800cec6:	429a      	cmp	r2, r3
 800cec8:	d866      	bhi.n	800cf98 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800ceca:	697b      	ldr	r3, [r7, #20]
 800cecc:	61bb      	str	r3, [r7, #24]
 800cece:	2308      	movs	r3, #8
 800ced0:	623b      	str	r3, [r7, #32]
 800ced2:	230b      	movs	r3, #11
 800ced4:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800ced6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ceda:	009b      	lsls	r3, r3, #2
 800cedc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800cee0:	e051      	b.n	800cf86 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800cee2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cee4:	2b7f      	cmp	r3, #127	; 0x7f
 800cee6:	d914      	bls.n	800cf12 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800cee8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ceea:	2100      	movs	r1, #0
 800ceec:	4618      	mov	r0, r3
 800ceee:	f001 fff3 	bl	800eed8 <ff_convert>
 800cef2:	4603      	mov	r3, r0
 800cef4:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800cef6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d004      	beq.n	800cf06 <create_name+0x246>
 800cefc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cefe:	3b80      	subs	r3, #128	; 0x80
 800cf00:	4a23      	ldr	r2, [pc, #140]	; (800cf90 <create_name+0x2d0>)
 800cf02:	5cd3      	ldrb	r3, [r2, r3]
 800cf04:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800cf06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cf0a:	f043 0302 	orr.w	r3, r3, #2
 800cf0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800cf12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d007      	beq.n	800cf28 <create_name+0x268>
 800cf18:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cf1a:	4619      	mov	r1, r3
 800cf1c:	481d      	ldr	r0, [pc, #116]	; (800cf94 <create_name+0x2d4>)
 800cf1e:	f7fd fb4d 	bl	800a5bc <chk_chr>
 800cf22:	4603      	mov	r3, r0
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d008      	beq.n	800cf3a <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800cf28:	235f      	movs	r3, #95	; 0x5f
 800cf2a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800cf2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cf30:	f043 0303 	orr.w	r3, r3, #3
 800cf34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cf38:	e01b      	b.n	800cf72 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800cf3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cf3c:	2b40      	cmp	r3, #64	; 0x40
 800cf3e:	d909      	bls.n	800cf54 <create_name+0x294>
 800cf40:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cf42:	2b5a      	cmp	r3, #90	; 0x5a
 800cf44:	d806      	bhi.n	800cf54 <create_name+0x294>
					b |= 2;
 800cf46:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cf4a:	f043 0302 	orr.w	r3, r3, #2
 800cf4e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800cf52:	e00e      	b.n	800cf72 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800cf54:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cf56:	2b60      	cmp	r3, #96	; 0x60
 800cf58:	d90b      	bls.n	800cf72 <create_name+0x2b2>
 800cf5a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cf5c:	2b7a      	cmp	r3, #122	; 0x7a
 800cf5e:	d808      	bhi.n	800cf72 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800cf60:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cf64:	f043 0301 	orr.w	r3, r3, #1
 800cf68:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800cf6c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cf6e:	3b20      	subs	r3, #32
 800cf70:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800cf72:	6a3b      	ldr	r3, [r7, #32]
 800cf74:	1c5a      	adds	r2, r3, #1
 800cf76:	623a      	str	r2, [r7, #32]
 800cf78:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800cf7a:	b2d1      	uxtb	r1, r2
 800cf7c:	687a      	ldr	r2, [r7, #4]
 800cf7e:	4413      	add	r3, r2
 800cf80:	460a      	mov	r2, r1
 800cf82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		w = lfn[si++];					/* Get an LFN character */
 800cf86:	e763      	b.n	800ce50 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800cf88:	bf00      	nop
 800cf8a:	e006      	b.n	800cf9a <create_name+0x2da>
 800cf8c:	080145d4 	.word	0x080145d4
 800cf90:	080147f4 	.word	0x080147f4
 800cf94:	080145e0 	.word	0x080145e0
			if (si > di) break;			/* No extension */
 800cf98:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cfa0:	2be5      	cmp	r3, #229	; 0xe5
 800cfa2:	d103      	bne.n	800cfac <create_name+0x2ec>
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	2205      	movs	r2, #5
 800cfa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	if (ni == 8) b <<= 2;
 800cfac:	69fb      	ldr	r3, [r7, #28]
 800cfae:	2b08      	cmp	r3, #8
 800cfb0:	d104      	bne.n	800cfbc <create_name+0x2fc>
 800cfb2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cfb6:	009b      	lsls	r3, r3, #2
 800cfb8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800cfbc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cfc0:	f003 030c 	and.w	r3, r3, #12
 800cfc4:	2b0c      	cmp	r3, #12
 800cfc6:	d005      	beq.n	800cfd4 <create_name+0x314>
 800cfc8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cfcc:	f003 0303 	and.w	r3, r3, #3
 800cfd0:	2b03      	cmp	r3, #3
 800cfd2:	d105      	bne.n	800cfe0 <create_name+0x320>
 800cfd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cfd8:	f043 0302 	orr.w	r3, r3, #2
 800cfdc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800cfe0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cfe4:	f003 0302 	and.w	r3, r3, #2
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d117      	bne.n	800d01c <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800cfec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cff0:	f003 0303 	and.w	r3, r3, #3
 800cff4:	2b01      	cmp	r3, #1
 800cff6:	d105      	bne.n	800d004 <create_name+0x344>
 800cff8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cffc:	f043 0310 	orr.w	r3, r3, #16
 800d000:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800d004:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d008:	f003 030c 	and.w	r3, r3, #12
 800d00c:	2b04      	cmp	r3, #4
 800d00e:	d105      	bne.n	800d01c <create_name+0x35c>
 800d010:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d014:	f043 0308 	orr.w	r3, r3, #8
 800d018:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800d022:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b

	return FR_OK;
 800d026:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800d028:	4618      	mov	r0, r3
 800d02a:	3728      	adds	r7, #40	; 0x28
 800d02c:	46bd      	mov	sp, r7
 800d02e:	bd80      	pop	{r7, pc}

0800d030 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800d030:	b580      	push	{r7, lr}
 800d032:	b086      	sub	sp, #24
 800d034:	af00      	add	r7, sp, #0
 800d036:	6078      	str	r0, [r7, #4]
 800d038:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800d03e:	693b      	ldr	r3, [r7, #16]
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800d044:	e002      	b.n	800d04c <follow_path+0x1c>
 800d046:	683b      	ldr	r3, [r7, #0]
 800d048:	3301      	adds	r3, #1
 800d04a:	603b      	str	r3, [r7, #0]
 800d04c:	683b      	ldr	r3, [r7, #0]
 800d04e:	781b      	ldrb	r3, [r3, #0]
 800d050:	2b2f      	cmp	r3, #47	; 0x2f
 800d052:	d0f8      	beq.n	800d046 <follow_path+0x16>
 800d054:	683b      	ldr	r3, [r7, #0]
 800d056:	781b      	ldrb	r3, [r3, #0]
 800d058:	2b5c      	cmp	r3, #92	; 0x5c
 800d05a:	d0f4      	beq.n	800d046 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800d05c:	693b      	ldr	r3, [r7, #16]
 800d05e:	2200      	movs	r2, #0
 800d060:	609a      	str	r2, [r3, #8]
	}
#if _FS_EXFAT
	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
 800d062:	693b      	ldr	r3, [r7, #16]
 800d064:	2200      	movs	r2, #0
 800d066:	61da      	str	r2, [r3, #28]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800d068:	683b      	ldr	r3, [r7, #0]
 800d06a:	781b      	ldrb	r3, [r3, #0]
 800d06c:	2b1f      	cmp	r3, #31
 800d06e:	d80a      	bhi.n	800d086 <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	2280      	movs	r2, #128	; 0x80
 800d074:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		res = dir_sdi(dp, 0);
 800d078:	2100      	movs	r1, #0
 800d07a:	6878      	ldr	r0, [r7, #4]
 800d07c:	f7fe fafb 	bl	800b676 <dir_sdi>
 800d080:	4603      	mov	r3, r0
 800d082:	75fb      	strb	r3, [r7, #23]
 800d084:	e07d      	b.n	800d182 <follow_path+0x152>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d086:	463b      	mov	r3, r7
 800d088:	4619      	mov	r1, r3
 800d08a:	6878      	ldr	r0, [r7, #4]
 800d08c:	f7ff fe18 	bl	800ccc0 <create_name>
 800d090:	4603      	mov	r3, r0
 800d092:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d094:	7dfb      	ldrb	r3, [r7, #23]
 800d096:	2b00      	cmp	r3, #0
 800d098:	d16e      	bne.n	800d178 <follow_path+0x148>
			res = dir_find(dp);				/* Find an object with the segment name */
 800d09a:	6878      	ldr	r0, [r7, #4]
 800d09c:	f7ff fa51 	bl	800c542 <dir_find>
 800d0a0:	4603      	mov	r3, r0
 800d0a2:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800d0aa:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800d0ac:	7dfb      	ldrb	r3, [r7, #23]
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d00a      	beq.n	800d0c8 <follow_path+0x98>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800d0b2:	7dfb      	ldrb	r3, [r7, #23]
 800d0b4:	2b04      	cmp	r3, #4
 800d0b6:	d161      	bne.n	800d17c <follow_path+0x14c>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800d0b8:	7afb      	ldrb	r3, [r7, #11]
 800d0ba:	f003 0304 	and.w	r3, r3, #4
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d15c      	bne.n	800d17c <follow_path+0x14c>
 800d0c2:	2305      	movs	r3, #5
 800d0c4:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800d0c6:	e059      	b.n	800d17c <follow_path+0x14c>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d0c8:	7afb      	ldrb	r3, [r7, #11]
 800d0ca:	f003 0304 	and.w	r3, r3, #4
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d156      	bne.n	800d180 <follow_path+0x150>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800d0d2:	693b      	ldr	r3, [r7, #16]
 800d0d4:	799b      	ldrb	r3, [r3, #6]
 800d0d6:	f003 0310 	and.w	r3, r3, #16
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d102      	bne.n	800d0e4 <follow_path+0xb4>
				res = FR_NO_PATH; break;
 800d0de:	2305      	movs	r3, #5
 800d0e0:	75fb      	strb	r3, [r7, #23]
 800d0e2:	e04e      	b.n	800d182 <follow_path+0x152>
			}
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	781b      	ldrb	r3, [r3, #0]
 800d0e8:	2b04      	cmp	r3, #4
 800d0ea:	d130      	bne.n	800d14e <follow_path+0x11e>
				obj->c_scl = obj->sclust;
 800d0ec:	693b      	ldr	r3, [r7, #16]
 800d0ee:	689a      	ldr	r2, [r3, #8]
 800d0f0:	693b      	ldr	r3, [r7, #16]
 800d0f2:	621a      	str	r2, [r3, #32]
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 800d0f4:	693b      	ldr	r3, [r7, #16]
 800d0f6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800d0fa:	4613      	mov	r3, r2
 800d0fc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d100:	693a      	ldr	r2, [r7, #16]
 800d102:	79d2      	ldrb	r2, [r2, #7]
 800d104:	431a      	orrs	r2, r3
 800d106:	693b      	ldr	r3, [r7, #16]
 800d108:	625a      	str	r2, [r3, #36]	; 0x24
				obj->c_ofs = dp->blk_ofs;
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d10e:	693b      	ldr	r3, [r7, #16]
 800d110:	629a      	str	r2, [r3, #40]	; 0x28
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	695b      	ldr	r3, [r3, #20]
 800d116:	3334      	adds	r3, #52	; 0x34
 800d118:	4618      	mov	r0, r3
 800d11a:	f7fd f81f 	bl	800a15c <ld_dword>
 800d11e:	4602      	mov	r2, r0
 800d120:	693b      	ldr	r3, [r7, #16]
 800d122:	609a      	str	r2, [r3, #8]
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	695b      	ldr	r3, [r3, #20]
 800d128:	3321      	adds	r3, #33	; 0x21
 800d12a:	781b      	ldrb	r3, [r3, #0]
 800d12c:	f003 0302 	and.w	r3, r3, #2
 800d130:	b2da      	uxtb	r2, r3
 800d132:	693b      	ldr	r3, [r7, #16]
 800d134:	71da      	strb	r2, [r3, #7]
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	695b      	ldr	r3, [r3, #20]
 800d13a:	3338      	adds	r3, #56	; 0x38
 800d13c:	4618      	mov	r0, r3
 800d13e:	f7fd f830 	bl	800a1a2 <ld_qword>
 800d142:	4602      	mov	r2, r0
 800d144:	460b      	mov	r3, r1
 800d146:	6939      	ldr	r1, [r7, #16]
 800d148:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800d14c:	e79b      	b.n	800d086 <follow_path+0x56>
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d158:	68fa      	ldr	r2, [r7, #12]
 800d15a:	8992      	ldrh	r2, [r2, #12]
 800d15c:	fbb3 f0f2 	udiv	r0, r3, r2
 800d160:	fb00 f202 	mul.w	r2, r0, r2
 800d164:	1a9b      	subs	r3, r3, r2
 800d166:	440b      	add	r3, r1
 800d168:	4619      	mov	r1, r3
 800d16a:	68f8      	ldr	r0, [r7, #12]
 800d16c:	f7fe fc59 	bl	800ba22 <ld_clust>
 800d170:	4602      	mov	r2, r0
 800d172:	693b      	ldr	r3, [r7, #16]
 800d174:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d176:	e786      	b.n	800d086 <follow_path+0x56>
			if (res != FR_OK) break;
 800d178:	bf00      	nop
 800d17a:	e002      	b.n	800d182 <follow_path+0x152>
				break;
 800d17c:	bf00      	nop
 800d17e:	e000      	b.n	800d182 <follow_path+0x152>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d180:	bf00      	nop
			}
		}
	}

	return res;
 800d182:	7dfb      	ldrb	r3, [r7, #23]
}
 800d184:	4618      	mov	r0, r3
 800d186:	3718      	adds	r7, #24
 800d188:	46bd      	mov	sp, r7
 800d18a:	bd80      	pop	{r7, pc}

0800d18c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800d18c:	b480      	push	{r7}
 800d18e:	b087      	sub	sp, #28
 800d190:	af00      	add	r7, sp, #0
 800d192:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800d194:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d198:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d031      	beq.n	800d206 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	617b      	str	r3, [r7, #20]
 800d1a8:	e002      	b.n	800d1b0 <get_ldnumber+0x24>
 800d1aa:	697b      	ldr	r3, [r7, #20]
 800d1ac:	3301      	adds	r3, #1
 800d1ae:	617b      	str	r3, [r7, #20]
 800d1b0:	697b      	ldr	r3, [r7, #20]
 800d1b2:	781b      	ldrb	r3, [r3, #0]
 800d1b4:	2b1f      	cmp	r3, #31
 800d1b6:	d903      	bls.n	800d1c0 <get_ldnumber+0x34>
 800d1b8:	697b      	ldr	r3, [r7, #20]
 800d1ba:	781b      	ldrb	r3, [r3, #0]
 800d1bc:	2b3a      	cmp	r3, #58	; 0x3a
 800d1be:	d1f4      	bne.n	800d1aa <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800d1c0:	697b      	ldr	r3, [r7, #20]
 800d1c2:	781b      	ldrb	r3, [r3, #0]
 800d1c4:	2b3a      	cmp	r3, #58	; 0x3a
 800d1c6:	d11c      	bne.n	800d202 <get_ldnumber+0x76>
			tp = *path;
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	1c5a      	adds	r2, r3, #1
 800d1d2:	60fa      	str	r2, [r7, #12]
 800d1d4:	781b      	ldrb	r3, [r3, #0]
 800d1d6:	3b30      	subs	r3, #48	; 0x30
 800d1d8:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800d1da:	68bb      	ldr	r3, [r7, #8]
 800d1dc:	2b09      	cmp	r3, #9
 800d1de:	d80e      	bhi.n	800d1fe <get_ldnumber+0x72>
 800d1e0:	68fa      	ldr	r2, [r7, #12]
 800d1e2:	697b      	ldr	r3, [r7, #20]
 800d1e4:	429a      	cmp	r2, r3
 800d1e6:	d10a      	bne.n	800d1fe <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800d1e8:	68bb      	ldr	r3, [r7, #8]
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d107      	bne.n	800d1fe <get_ldnumber+0x72>
					vol = (int)i;
 800d1ee:	68bb      	ldr	r3, [r7, #8]
 800d1f0:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800d1f2:	697b      	ldr	r3, [r7, #20]
 800d1f4:	3301      	adds	r3, #1
 800d1f6:	617b      	str	r3, [r7, #20]
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	697a      	ldr	r2, [r7, #20]
 800d1fc:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800d1fe:	693b      	ldr	r3, [r7, #16]
 800d200:	e002      	b.n	800d208 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800d202:	2300      	movs	r3, #0
 800d204:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800d206:	693b      	ldr	r3, [r7, #16]
}
 800d208:	4618      	mov	r0, r3
 800d20a:	371c      	adds	r7, #28
 800d20c:	46bd      	mov	sp, r7
 800d20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d212:	4770      	bx	lr

0800d214 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800d214:	b580      	push	{r7, lr}
 800d216:	b082      	sub	sp, #8
 800d218:	af00      	add	r7, sp, #0
 800d21a:	6078      	str	r0, [r7, #4]
 800d21c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	2200      	movs	r2, #0
 800d222:	70da      	strb	r2, [r3, #3]
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d22a:	639a      	str	r2, [r3, #56]	; 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800d22c:	6839      	ldr	r1, [r7, #0]
 800d22e:	6878      	ldr	r0, [r7, #4]
 800d230:	f7fd fb90 	bl	800a954 <move_window>
 800d234:	4603      	mov	r3, r0
 800d236:	2b00      	cmp	r3, #0
 800d238:	d001      	beq.n	800d23e <check_fs+0x2a>
 800d23a:	2304      	movs	r3, #4
 800d23c:	e044      	b.n	800d2c8 <check_fs+0xb4>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	333c      	adds	r3, #60	; 0x3c
 800d242:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d246:	4618      	mov	r0, r3
 800d248:	f7fc ff70 	bl	800a12c <ld_word>
 800d24c:	4603      	mov	r3, r0
 800d24e:	461a      	mov	r2, r3
 800d250:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d254:	429a      	cmp	r2, r3
 800d256:	d001      	beq.n	800d25c <check_fs+0x48>
 800d258:	2303      	movs	r3, #3
 800d25a:	e035      	b.n	800d2c8 <check_fs+0xb4>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d262:	2be9      	cmp	r3, #233	; 0xe9
 800d264:	d009      	beq.n	800d27a <check_fs+0x66>
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d26c:	2beb      	cmp	r3, #235	; 0xeb
 800d26e:	d11e      	bne.n	800d2ae <check_fs+0x9a>
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d276:	2b90      	cmp	r3, #144	; 0x90
 800d278:	d119      	bne.n	800d2ae <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	333c      	adds	r3, #60	; 0x3c
 800d27e:	3336      	adds	r3, #54	; 0x36
 800d280:	4618      	mov	r0, r3
 800d282:	f7fc ff6b 	bl	800a15c <ld_dword>
 800d286:	4603      	mov	r3, r0
 800d288:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800d28c:	4a10      	ldr	r2, [pc, #64]	; (800d2d0 <check_fs+0xbc>)
 800d28e:	4293      	cmp	r3, r2
 800d290:	d101      	bne.n	800d296 <check_fs+0x82>
 800d292:	2300      	movs	r3, #0
 800d294:	e018      	b.n	800d2c8 <check_fs+0xb4>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	333c      	adds	r3, #60	; 0x3c
 800d29a:	3352      	adds	r3, #82	; 0x52
 800d29c:	4618      	mov	r0, r3
 800d29e:	f7fc ff5d 	bl	800a15c <ld_dword>
 800d2a2:	4603      	mov	r3, r0
 800d2a4:	4a0b      	ldr	r2, [pc, #44]	; (800d2d4 <check_fs+0xc0>)
 800d2a6:	4293      	cmp	r3, r2
 800d2a8:	d101      	bne.n	800d2ae <check_fs+0x9a>
 800d2aa:	2300      	movs	r3, #0
 800d2ac:	e00c      	b.n	800d2c8 <check_fs+0xb4>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	333c      	adds	r3, #60	; 0x3c
 800d2b2:	220b      	movs	r2, #11
 800d2b4:	4908      	ldr	r1, [pc, #32]	; (800d2d8 <check_fs+0xc4>)
 800d2b6:	4618      	mov	r0, r3
 800d2b8:	f7fd f959 	bl	800a56e <mem_cmp>
 800d2bc:	4603      	mov	r3, r0
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d101      	bne.n	800d2c6 <check_fs+0xb2>
 800d2c2:	2301      	movs	r3, #1
 800d2c4:	e000      	b.n	800d2c8 <check_fs+0xb4>
#endif
	return 2;
 800d2c6:	2302      	movs	r3, #2
}
 800d2c8:	4618      	mov	r0, r3
 800d2ca:	3708      	adds	r7, #8
 800d2cc:	46bd      	mov	sp, r7
 800d2ce:	bd80      	pop	{r7, pc}
 800d2d0:	00544146 	.word	0x00544146
 800d2d4:	33544146 	.word	0x33544146
 800d2d8:	080145e8 	.word	0x080145e8

0800d2dc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800d2dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d2e0:	b09c      	sub	sp, #112	; 0x70
 800d2e2:	af00      	add	r7, sp, #0
 800d2e4:	61f8      	str	r0, [r7, #28]
 800d2e6:	61b9      	str	r1, [r7, #24]
 800d2e8:	4613      	mov	r3, r2
 800d2ea:	75fb      	strb	r3, [r7, #23]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800d2ec:	69bb      	ldr	r3, [r7, #24]
 800d2ee:	2200      	movs	r2, #0
 800d2f0:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800d2f2:	69f8      	ldr	r0, [r7, #28]
 800d2f4:	f7ff ff4a 	bl	800d18c <get_ldnumber>
 800d2f8:	6578      	str	r0, [r7, #84]	; 0x54
	if (vol < 0) return FR_INVALID_DRIVE;
 800d2fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	da01      	bge.n	800d304 <find_volume+0x28>
 800d300:	230b      	movs	r3, #11
 800d302:	e376      	b.n	800d9f2 <find_volume+0x716>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800d304:	4aa6      	ldr	r2, [pc, #664]	; (800d5a0 <find_volume+0x2c4>)
 800d306:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d308:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d30c:	653b      	str	r3, [r7, #80]	; 0x50
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800d30e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d310:	2b00      	cmp	r3, #0
 800d312:	d101      	bne.n	800d318 <find_volume+0x3c>
 800d314:	230c      	movs	r3, #12
 800d316:	e36c      	b.n	800d9f2 <find_volume+0x716>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800d318:	69bb      	ldr	r3, [r7, #24]
 800d31a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d31c:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800d31e:	7dfb      	ldrb	r3, [r7, #23]
 800d320:	f023 0301 	bic.w	r3, r3, #1
 800d324:	75fb      	strb	r3, [r7, #23]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800d326:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d328:	781b      	ldrb	r3, [r3, #0]
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d01a      	beq.n	800d364 <find_volume+0x88>
		stat = disk_status(fs->drv);
 800d32e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d330:	785b      	ldrb	r3, [r3, #1]
 800d332:	4618      	mov	r0, r3
 800d334:	f7fc fe5c 	bl	8009ff0 <disk_status>
 800d338:	4603      	mov	r3, r0
 800d33a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800d33e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d342:	f003 0301 	and.w	r3, r3, #1
 800d346:	2b00      	cmp	r3, #0
 800d348:	d10c      	bne.n	800d364 <find_volume+0x88>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800d34a:	7dfb      	ldrb	r3, [r7, #23]
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d007      	beq.n	800d360 <find_volume+0x84>
 800d350:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d354:	f003 0304 	and.w	r3, r3, #4
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d001      	beq.n	800d360 <find_volume+0x84>
				return FR_WRITE_PROTECTED;
 800d35c:	230a      	movs	r3, #10
 800d35e:	e348      	b.n	800d9f2 <find_volume+0x716>
			}
			return FR_OK;				/* The file system object is valid */
 800d360:	2300      	movs	r3, #0
 800d362:	e346      	b.n	800d9f2 <find_volume+0x716>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800d364:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d366:	2200      	movs	r2, #0
 800d368:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800d36a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d36c:	b2da      	uxtb	r2, r3
 800d36e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d370:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800d372:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d374:	785b      	ldrb	r3, [r3, #1]
 800d376:	4618      	mov	r0, r3
 800d378:	f7fc fe54 	bl	800a024 <disk_initialize>
 800d37c:	4603      	mov	r3, r0
 800d37e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800d382:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d386:	f003 0301 	and.w	r3, r3, #1
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d001      	beq.n	800d392 <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800d38e:	2303      	movs	r3, #3
 800d390:	e32f      	b.n	800d9f2 <find_volume+0x716>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800d392:	7dfb      	ldrb	r3, [r7, #23]
 800d394:	2b00      	cmp	r3, #0
 800d396:	d007      	beq.n	800d3a8 <find_volume+0xcc>
 800d398:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d39c:	f003 0304 	and.w	r3, r3, #4
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d001      	beq.n	800d3a8 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 800d3a4:	230a      	movs	r3, #10
 800d3a6:	e324      	b.n	800d9f2 <find_volume+0x716>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800d3a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d3aa:	7858      	ldrb	r0, [r3, #1]
 800d3ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d3ae:	330c      	adds	r3, #12
 800d3b0:	461a      	mov	r2, r3
 800d3b2:	2102      	movs	r1, #2
 800d3b4:	f7fc fe9c 	bl	800a0f0 <disk_ioctl>
 800d3b8:	4603      	mov	r3, r0
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d001      	beq.n	800d3c2 <find_volume+0xe6>
 800d3be:	2301      	movs	r3, #1
 800d3c0:	e317      	b.n	800d9f2 <find_volume+0x716>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800d3c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d3c4:	899b      	ldrh	r3, [r3, #12]
 800d3c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d3ca:	d80d      	bhi.n	800d3e8 <find_volume+0x10c>
 800d3cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d3ce:	899b      	ldrh	r3, [r3, #12]
 800d3d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d3d4:	d308      	bcc.n	800d3e8 <find_volume+0x10c>
 800d3d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d3d8:	899b      	ldrh	r3, [r3, #12]
 800d3da:	461a      	mov	r2, r3
 800d3dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d3de:	899b      	ldrh	r3, [r3, #12]
 800d3e0:	3b01      	subs	r3, #1
 800d3e2:	4013      	ands	r3, r2
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d001      	beq.n	800d3ec <find_volume+0x110>
 800d3e8:	2301      	movs	r3, #1
 800d3ea:	e302      	b.n	800d9f2 <find_volume+0x716>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800d3ec:	2300      	movs	r3, #0
 800d3ee:	66bb      	str	r3, [r7, #104]	; 0x68
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800d3f0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d3f2:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800d3f4:	f7ff ff0e 	bl	800d214 <check_fs>
 800d3f8:	4603      	mov	r3, r0
 800d3fa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800d3fe:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800d402:	2b02      	cmp	r3, #2
 800d404:	d14d      	bne.n	800d4a2 <find_volume+0x1c6>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d406:	2300      	movs	r3, #0
 800d408:	65bb      	str	r3, [r7, #88]	; 0x58
 800d40a:	e020      	b.n	800d44e <find_volume+0x172>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800d40c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d40e:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800d412:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d414:	011b      	lsls	r3, r3, #4
 800d416:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800d41a:	4413      	add	r3, r2
 800d41c:	64bb      	str	r3, [r7, #72]	; 0x48
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800d41e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d420:	3304      	adds	r3, #4
 800d422:	781b      	ldrb	r3, [r3, #0]
 800d424:	2b00      	cmp	r3, #0
 800d426:	d006      	beq.n	800d436 <find_volume+0x15a>
 800d428:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d42a:	3308      	adds	r3, #8
 800d42c:	4618      	mov	r0, r3
 800d42e:	f7fc fe95 	bl	800a15c <ld_dword>
 800d432:	4602      	mov	r2, r0
 800d434:	e000      	b.n	800d438 <find_volume+0x15c>
 800d436:	2200      	movs	r2, #0
 800d438:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d43a:	009b      	lsls	r3, r3, #2
 800d43c:	3360      	adds	r3, #96	; 0x60
 800d43e:	f107 0110 	add.w	r1, r7, #16
 800d442:	440b      	add	r3, r1
 800d444:	f843 2c50 	str.w	r2, [r3, #-80]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d448:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d44a:	3301      	adds	r3, #1
 800d44c:	65bb      	str	r3, [r7, #88]	; 0x58
 800d44e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d450:	2b03      	cmp	r3, #3
 800d452:	d9db      	bls.n	800d40c <find_volume+0x130>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800d454:	2300      	movs	r3, #0
 800d456:	65bb      	str	r3, [r7, #88]	; 0x58
		if (i) i--;
 800d458:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d002      	beq.n	800d464 <find_volume+0x188>
 800d45e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d460:	3b01      	subs	r3, #1
 800d462:	65bb      	str	r3, [r7, #88]	; 0x58
		do {							/* Find an FAT volume */
			bsect = br[i];
 800d464:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d466:	009b      	lsls	r3, r3, #2
 800d468:	3360      	adds	r3, #96	; 0x60
 800d46a:	f107 0210 	add.w	r2, r7, #16
 800d46e:	4413      	add	r3, r2
 800d470:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800d474:	66bb      	str	r3, [r7, #104]	; 0x68
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800d476:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d005      	beq.n	800d488 <find_volume+0x1ac>
 800d47c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d47e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800d480:	f7ff fec8 	bl	800d214 <check_fs>
 800d484:	4603      	mov	r3, r0
 800d486:	e000      	b.n	800d48a <find_volume+0x1ae>
 800d488:	2303      	movs	r3, #3
 800d48a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800d48e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800d492:	2b01      	cmp	r3, #1
 800d494:	d905      	bls.n	800d4a2 <find_volume+0x1c6>
 800d496:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d498:	3301      	adds	r3, #1
 800d49a:	65bb      	str	r3, [r7, #88]	; 0x58
 800d49c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d49e:	2b03      	cmp	r3, #3
 800d4a0:	d9e0      	bls.n	800d464 <find_volume+0x188>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800d4a2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800d4a6:	2b04      	cmp	r3, #4
 800d4a8:	d101      	bne.n	800d4ae <find_volume+0x1d2>
 800d4aa:	2301      	movs	r3, #1
 800d4ac:	e2a1      	b.n	800d9f2 <find_volume+0x716>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800d4ae:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800d4b2:	2b01      	cmp	r3, #1
 800d4b4:	d901      	bls.n	800d4ba <find_volume+0x1de>
 800d4b6:	230d      	movs	r3, #13
 800d4b8:	e29b      	b.n	800d9f2 <find_volume+0x716>

	/* An FAT volume is found (bsect). Following code initializes the file system object */

#if _FS_EXFAT
	if (fmt == 1) {
 800d4ba:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800d4be:	2b01      	cmp	r3, #1
 800d4c0:	f040 8101 	bne.w	800d6c6 <find_volume+0x3ea>
		QWORD maxlba;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 800d4c4:	230b      	movs	r3, #11
 800d4c6:	65bb      	str	r3, [r7, #88]	; 0x58
 800d4c8:	e002      	b.n	800d4d0 <find_volume+0x1f4>
 800d4ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d4cc:	3301      	adds	r3, #1
 800d4ce:	65bb      	str	r3, [r7, #88]	; 0x58
 800d4d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d4d2:	2b3f      	cmp	r3, #63	; 0x3f
 800d4d4:	d806      	bhi.n	800d4e4 <find_volume+0x208>
 800d4d6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d4d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d4da:	4413      	add	r3, r2
 800d4dc:	333c      	adds	r3, #60	; 0x3c
 800d4de:	781b      	ldrb	r3, [r3, #0]
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d0f2      	beq.n	800d4ca <find_volume+0x1ee>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 800d4e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d4e6:	2b3f      	cmp	r3, #63	; 0x3f
 800d4e8:	d801      	bhi.n	800d4ee <find_volume+0x212>
 800d4ea:	230d      	movs	r3, #13
 800d4ec:	e281      	b.n	800d9f2 <find_volume+0x716>

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 800d4ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d4f0:	333c      	adds	r3, #60	; 0x3c
 800d4f2:	3368      	adds	r3, #104	; 0x68
 800d4f4:	4618      	mov	r0, r3
 800d4f6:	f7fc fe19 	bl	800a12c <ld_word>
 800d4fa:	4603      	mov	r3, r0
 800d4fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d500:	d001      	beq.n	800d506 <find_volume+0x22a>
 800d502:	230d      	movs	r3, #13
 800d504:	e275      	b.n	800d9f2 <find_volume+0x716>

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 800d506:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d508:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 800d50c:	461a      	mov	r2, r3
 800d50e:	2301      	movs	r3, #1
 800d510:	4093      	lsls	r3, r2
 800d512:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d514:	8992      	ldrh	r2, [r2, #12]
 800d516:	4293      	cmp	r3, r2
 800d518:	d001      	beq.n	800d51e <find_volume+0x242>
			return FR_NO_FILESYSTEM;
 800d51a:	230d      	movs	r3, #13
 800d51c:	e269      	b.n	800d9f2 <find_volume+0x716>
		}

		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 800d51e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d520:	333c      	adds	r3, #60	; 0x3c
 800d522:	3348      	adds	r3, #72	; 0x48
 800d524:	4618      	mov	r0, r3
 800d526:	f7fc fe3c 	bl	800a1a2 <ld_qword>
 800d52a:	4602      	mov	r2, r0
 800d52c:	460b      	mov	r3, r1
 800d52e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d530:	2000      	movs	r0, #0
 800d532:	60b9      	str	r1, [r7, #8]
 800d534:	60f8      	str	r0, [r7, #12]
 800d536:	68b9      	ldr	r1, [r7, #8]
 800d538:	1851      	adds	r1, r2, r1
 800d53a:	6039      	str	r1, [r7, #0]
 800d53c:	68f9      	ldr	r1, [r7, #12]
 800d53e:	eb43 0101 	adc.w	r1, r3, r1
 800d542:	6079      	str	r1, [r7, #4]
 800d544:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d548:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 800d54c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800d550:	2b01      	cmp	r3, #1
 800d552:	d301      	bcc.n	800d558 <find_volume+0x27c>
 800d554:	230d      	movs	r3, #13
 800d556:	e24c      	b.n	800d9f2 <find_volume+0x716>

		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 800d558:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d55a:	333c      	adds	r3, #60	; 0x3c
 800d55c:	3354      	adds	r3, #84	; 0x54
 800d55e:	4618      	mov	r0, r3
 800d560:	f7fc fdfc 	bl	800a15c <ld_dword>
 800d564:	4602      	mov	r2, r0
 800d566:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d568:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 800d56a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d56c:	f893 20aa 	ldrb.w	r2, [r3, #170]	; 0xaa
 800d570:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d572:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 800d574:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d576:	789b      	ldrb	r3, [r3, #2]
 800d578:	2b01      	cmp	r3, #1
 800d57a:	d001      	beq.n	800d580 <find_volume+0x2a4>
 800d57c:	230d      	movs	r3, #13
 800d57e:	e238      	b.n	800d9f2 <find_volume+0x716>

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 800d580:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d582:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 800d586:	461a      	mov	r2, r3
 800d588:	2301      	movs	r3, #1
 800d58a:	4093      	lsls	r3, r2
 800d58c:	b29a      	uxth	r2, r3
 800d58e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d590:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 800d592:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d594:	895b      	ldrh	r3, [r3, #10]
 800d596:	2b00      	cmp	r3, #0
 800d598:	d104      	bne.n	800d5a4 <find_volume+0x2c8>
 800d59a:	230d      	movs	r3, #13
 800d59c:	e229      	b.n	800d9f2 <find_volume+0x716>
 800d59e:	bf00      	nop
 800d5a0:	20002490 	.word	0x20002490

		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 800d5a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d5a6:	333c      	adds	r3, #60	; 0x3c
 800d5a8:	335c      	adds	r3, #92	; 0x5c
 800d5aa:	4618      	mov	r0, r3
 800d5ac:	f7fc fdd6 	bl	800a15c <ld_dword>
 800d5b0:	63f8      	str	r0, [r7, #60]	; 0x3c
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 800d5b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5b4:	4a99      	ldr	r2, [pc, #612]	; (800d81c <find_volume+0x540>)
 800d5b6:	4293      	cmp	r3, r2
 800d5b8:	d901      	bls.n	800d5be <find_volume+0x2e2>
 800d5ba:	230d      	movs	r3, #13
 800d5bc:	e219      	b.n	800d9f2 <find_volume+0x716>
		fs->n_fatent = nclst + 2;
 800d5be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5c0:	1c9a      	adds	r2, r3, #2
 800d5c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d5c4:	621a      	str	r2, [r3, #32]

		/* Boundaries and Limits */
		fs->volbase = bsect;
 800d5c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d5c8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d5ca:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 800d5cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d5ce:	333c      	adds	r3, #60	; 0x3c
 800d5d0:	3358      	adds	r3, #88	; 0x58
 800d5d2:	4618      	mov	r0, r3
 800d5d4:	f7fc fdc2 	bl	800a15c <ld_dword>
 800d5d8:	4602      	mov	r2, r0
 800d5da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d5dc:	441a      	add	r2, r3
 800d5de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d5e0:	635a      	str	r2, [r3, #52]	; 0x34
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 800d5e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d5e4:	333c      	adds	r3, #60	; 0x3c
 800d5e6:	3350      	adds	r3, #80	; 0x50
 800d5e8:	4618      	mov	r0, r3
 800d5ea:	f7fc fdb7 	bl	800a15c <ld_dword>
 800d5ee:	4602      	mov	r2, r0
 800d5f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d5f2:	441a      	add	r2, r3
 800d5f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d5f6:	62da      	str	r2, [r3, #44]	; 0x2c
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 800d5f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d5fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5fc:	2200      	movs	r2, #0
 800d5fe:	469a      	mov	sl, r3
 800d600:	4693      	mov	fp, r2
 800d602:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d604:	895b      	ldrh	r3, [r3, #10]
 800d606:	461a      	mov	r2, r3
 800d608:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d60a:	fb02 f303 	mul.w	r3, r2, r3
 800d60e:	2200      	movs	r2, #0
 800d610:	4698      	mov	r8, r3
 800d612:	4691      	mov	r9, r2
 800d614:	eb1a 0408 	adds.w	r4, sl, r8
 800d618:	eb4b 0509 	adc.w	r5, fp, r9
 800d61c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800d620:	42a2      	cmp	r2, r4
 800d622:	41ab      	sbcs	r3, r5
 800d624:	d201      	bcs.n	800d62a <find_volume+0x34e>
 800d626:	230d      	movs	r3, #13
 800d628:	e1e3      	b.n	800d9f2 <find_volume+0x716>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 800d62a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d62c:	333c      	adds	r3, #60	; 0x3c
 800d62e:	3360      	adds	r3, #96	; 0x60
 800d630:	4618      	mov	r0, r3
 800d632:	f7fc fd93 	bl	800a15c <ld_dword>
 800d636:	4602      	mov	r2, r0
 800d638:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d63a:	631a      	str	r2, [r3, #48]	; 0x30

		/* Check if bitmap location is in assumption (at the first cluster) */
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 800d63c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d63e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d640:	4619      	mov	r1, r3
 800d642:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800d644:	f7fd fa24 	bl	800aa90 <clust2sect>
 800d648:	4603      	mov	r3, r0
 800d64a:	4619      	mov	r1, r3
 800d64c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800d64e:	f7fd f981 	bl	800a954 <move_window>
 800d652:	4603      	mov	r3, r0
 800d654:	2b00      	cmp	r3, #0
 800d656:	d001      	beq.n	800d65c <find_volume+0x380>
 800d658:	2301      	movs	r3, #1
 800d65a:	e1ca      	b.n	800d9f2 <find_volume+0x716>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800d65c:	2300      	movs	r3, #0
 800d65e:	65bb      	str	r3, [r7, #88]	; 0x58
 800d660:	e015      	b.n	800d68e <find_volume+0x3b2>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800d662:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d664:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d666:	4413      	add	r3, r2
 800d668:	333c      	adds	r3, #60	; 0x3c
 800d66a:	781b      	ldrb	r3, [r3, #0]
 800d66c:	2b81      	cmp	r3, #129	; 0x81
 800d66e:	d10b      	bne.n	800d688 <find_volume+0x3ac>
 800d670:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d672:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800d676:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d678:	3314      	adds	r3, #20
 800d67a:	4413      	add	r3, r2
 800d67c:	4618      	mov	r0, r3
 800d67e:	f7fc fd6d 	bl	800a15c <ld_dword>
 800d682:	4603      	mov	r3, r0
 800d684:	2b02      	cmp	r3, #2
 800d686:	d009      	beq.n	800d69c <find_volume+0x3c0>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800d688:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d68a:	3320      	adds	r3, #32
 800d68c:	65bb      	str	r3, [r7, #88]	; 0x58
 800d68e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d690:	899b      	ldrh	r3, [r3, #12]
 800d692:	461a      	mov	r2, r3
 800d694:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d696:	4293      	cmp	r3, r2
 800d698:	d3e3      	bcc.n	800d662 <find_volume+0x386>
 800d69a:	e000      	b.n	800d69e <find_volume+0x3c2>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800d69c:	bf00      	nop
		}
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 800d69e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d6a0:	899b      	ldrh	r3, [r3, #12]
 800d6a2:	461a      	mov	r2, r3
 800d6a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d6a6:	4293      	cmp	r3, r2
 800d6a8:	d101      	bne.n	800d6ae <find_volume+0x3d2>
 800d6aa:	230d      	movs	r3, #13
 800d6ac:	e1a1      	b.n	800d9f2 <find_volume+0x716>
#if !_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d6ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d6b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d6b4:	61da      	str	r2, [r3, #28]
 800d6b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d6b8:	69da      	ldr	r2, [r3, #28]
 800d6ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d6bc:	619a      	str	r2, [r3, #24]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
 800d6be:	2304      	movs	r3, #4
 800d6c0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800d6c4:	e17d      	b.n	800d9c2 <find_volume+0x6e6>
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800d6c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d6c8:	333c      	adds	r3, #60	; 0x3c
 800d6ca:	330b      	adds	r3, #11
 800d6cc:	4618      	mov	r0, r3
 800d6ce:	f7fc fd2d 	bl	800a12c <ld_word>
 800d6d2:	4603      	mov	r3, r0
 800d6d4:	461a      	mov	r2, r3
 800d6d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d6d8:	899b      	ldrh	r3, [r3, #12]
 800d6da:	429a      	cmp	r2, r3
 800d6dc:	d001      	beq.n	800d6e2 <find_volume+0x406>
 800d6de:	230d      	movs	r3, #13
 800d6e0:	e187      	b.n	800d9f2 <find_volume+0x716>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800d6e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d6e4:	333c      	adds	r3, #60	; 0x3c
 800d6e6:	3316      	adds	r3, #22
 800d6e8:	4618      	mov	r0, r3
 800d6ea:	f7fc fd1f 	bl	800a12c <ld_word>
 800d6ee:	4603      	mov	r3, r0
 800d6f0:	667b      	str	r3, [r7, #100]	; 0x64
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800d6f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d106      	bne.n	800d706 <find_volume+0x42a>
 800d6f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d6fa:	333c      	adds	r3, #60	; 0x3c
 800d6fc:	3324      	adds	r3, #36	; 0x24
 800d6fe:	4618      	mov	r0, r3
 800d700:	f7fc fd2c 	bl	800a15c <ld_dword>
 800d704:	6678      	str	r0, [r7, #100]	; 0x64
		fs->fsize = fasize;
 800d706:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d708:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d70a:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800d70c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d70e:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 800d712:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d714:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800d716:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d718:	789b      	ldrb	r3, [r3, #2]
 800d71a:	2b01      	cmp	r3, #1
 800d71c:	d005      	beq.n	800d72a <find_volume+0x44e>
 800d71e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d720:	789b      	ldrb	r3, [r3, #2]
 800d722:	2b02      	cmp	r3, #2
 800d724:	d001      	beq.n	800d72a <find_volume+0x44e>
 800d726:	230d      	movs	r3, #13
 800d728:	e163      	b.n	800d9f2 <find_volume+0x716>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800d72a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d72c:	789b      	ldrb	r3, [r3, #2]
 800d72e:	461a      	mov	r2, r3
 800d730:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d732:	fb02 f303 	mul.w	r3, r2, r3
 800d736:	667b      	str	r3, [r7, #100]	; 0x64

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800d738:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d73a:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800d73e:	b29a      	uxth	r2, r3
 800d740:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d742:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800d744:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d746:	895b      	ldrh	r3, [r3, #10]
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d008      	beq.n	800d75e <find_volume+0x482>
 800d74c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d74e:	895b      	ldrh	r3, [r3, #10]
 800d750:	461a      	mov	r2, r3
 800d752:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d754:	895b      	ldrh	r3, [r3, #10]
 800d756:	3b01      	subs	r3, #1
 800d758:	4013      	ands	r3, r2
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d001      	beq.n	800d762 <find_volume+0x486>
 800d75e:	230d      	movs	r3, #13
 800d760:	e147      	b.n	800d9f2 <find_volume+0x716>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800d762:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d764:	333c      	adds	r3, #60	; 0x3c
 800d766:	3311      	adds	r3, #17
 800d768:	4618      	mov	r0, r3
 800d76a:	f7fc fcdf 	bl	800a12c <ld_word>
 800d76e:	4603      	mov	r3, r0
 800d770:	461a      	mov	r2, r3
 800d772:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d774:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800d776:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d778:	891b      	ldrh	r3, [r3, #8]
 800d77a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d77c:	8992      	ldrh	r2, [r2, #12]
 800d77e:	0952      	lsrs	r2, r2, #5
 800d780:	b292      	uxth	r2, r2
 800d782:	fbb3 f1f2 	udiv	r1, r3, r2
 800d786:	fb01 f202 	mul.w	r2, r1, r2
 800d78a:	1a9b      	subs	r3, r3, r2
 800d78c:	b29b      	uxth	r3, r3
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d001      	beq.n	800d796 <find_volume+0x4ba>
 800d792:	230d      	movs	r3, #13
 800d794:	e12d      	b.n	800d9f2 <find_volume+0x716>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800d796:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d798:	333c      	adds	r3, #60	; 0x3c
 800d79a:	3313      	adds	r3, #19
 800d79c:	4618      	mov	r0, r3
 800d79e:	f7fc fcc5 	bl	800a12c <ld_word>
 800d7a2:	4603      	mov	r3, r0
 800d7a4:	663b      	str	r3, [r7, #96]	; 0x60
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800d7a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d106      	bne.n	800d7ba <find_volume+0x4de>
 800d7ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d7ae:	333c      	adds	r3, #60	; 0x3c
 800d7b0:	3320      	adds	r3, #32
 800d7b2:	4618      	mov	r0, r3
 800d7b4:	f7fc fcd2 	bl	800a15c <ld_dword>
 800d7b8:	6638      	str	r0, [r7, #96]	; 0x60

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800d7ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d7bc:	333c      	adds	r3, #60	; 0x3c
 800d7be:	330e      	adds	r3, #14
 800d7c0:	4618      	mov	r0, r3
 800d7c2:	f7fc fcb3 	bl	800a12c <ld_word>
 800d7c6:	4603      	mov	r3, r0
 800d7c8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800d7cc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d101      	bne.n	800d7d8 <find_volume+0x4fc>
 800d7d4:	230d      	movs	r3, #13
 800d7d6:	e10c      	b.n	800d9f2 <find_volume+0x716>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800d7d8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800d7dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d7de:	4413      	add	r3, r2
 800d7e0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d7e2:	8911      	ldrh	r1, [r2, #8]
 800d7e4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d7e6:	8992      	ldrh	r2, [r2, #12]
 800d7e8:	0952      	lsrs	r2, r2, #5
 800d7ea:	b292      	uxth	r2, r2
 800d7ec:	fbb1 f2f2 	udiv	r2, r1, r2
 800d7f0:	b292      	uxth	r2, r2
 800d7f2:	4413      	add	r3, r2
 800d7f4:	643b      	str	r3, [r7, #64]	; 0x40
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800d7f6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d7f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d7fa:	429a      	cmp	r2, r3
 800d7fc:	d201      	bcs.n	800d802 <find_volume+0x526>
 800d7fe:	230d      	movs	r3, #13
 800d800:	e0f7      	b.n	800d9f2 <find_volume+0x716>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800d802:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d804:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d806:	1ad3      	subs	r3, r2, r3
 800d808:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d80a:	8952      	ldrh	r2, [r2, #10]
 800d80c:	fbb3 f3f2 	udiv	r3, r3, r2
 800d810:	63fb      	str	r3, [r7, #60]	; 0x3c
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800d812:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d814:	2b00      	cmp	r3, #0
 800d816:	d103      	bne.n	800d820 <find_volume+0x544>
 800d818:	230d      	movs	r3, #13
 800d81a:	e0ea      	b.n	800d9f2 <find_volume+0x716>
 800d81c:	7ffffffd 	.word	0x7ffffffd
		fmt = FS_FAT32;
 800d820:	2303      	movs	r3, #3
 800d822:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800d826:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d828:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800d82c:	4293      	cmp	r3, r2
 800d82e:	d802      	bhi.n	800d836 <find_volume+0x55a>
 800d830:	2302      	movs	r3, #2
 800d832:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800d836:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d838:	f640 72f5 	movw	r2, #4085	; 0xff5
 800d83c:	4293      	cmp	r3, r2
 800d83e:	d802      	bhi.n	800d846 <find_volume+0x56a>
 800d840:	2301      	movs	r3, #1
 800d842:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d846:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d848:	1c9a      	adds	r2, r3, #2
 800d84a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d84c:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 800d84e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d850:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d852:	629a      	str	r2, [r3, #40]	; 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800d854:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800d858:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d85a:	441a      	add	r2, r3
 800d85c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d85e:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 800d860:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d862:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d864:	441a      	add	r2, r3
 800d866:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d868:	635a      	str	r2, [r3, #52]	; 0x34
		if (fmt == FS_FAT32) {
 800d86a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800d86e:	2b03      	cmp	r3, #3
 800d870:	d11e      	bne.n	800d8b0 <find_volume+0x5d4>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800d872:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d874:	333c      	adds	r3, #60	; 0x3c
 800d876:	332a      	adds	r3, #42	; 0x2a
 800d878:	4618      	mov	r0, r3
 800d87a:	f7fc fc57 	bl	800a12c <ld_word>
 800d87e:	4603      	mov	r3, r0
 800d880:	2b00      	cmp	r3, #0
 800d882:	d001      	beq.n	800d888 <find_volume+0x5ac>
 800d884:	230d      	movs	r3, #13
 800d886:	e0b4      	b.n	800d9f2 <find_volume+0x716>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800d888:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d88a:	891b      	ldrh	r3, [r3, #8]
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d001      	beq.n	800d894 <find_volume+0x5b8>
 800d890:	230d      	movs	r3, #13
 800d892:	e0ae      	b.n	800d9f2 <find_volume+0x716>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800d894:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d896:	333c      	adds	r3, #60	; 0x3c
 800d898:	332c      	adds	r3, #44	; 0x2c
 800d89a:	4618      	mov	r0, r3
 800d89c:	f7fc fc5e 	bl	800a15c <ld_dword>
 800d8a0:	4602      	mov	r2, r0
 800d8a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d8a4:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800d8a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d8a8:	6a1b      	ldr	r3, [r3, #32]
 800d8aa:	009b      	lsls	r3, r3, #2
 800d8ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d8ae:	e01f      	b.n	800d8f0 <find_volume+0x614>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800d8b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d8b2:	891b      	ldrh	r3, [r3, #8]
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d101      	bne.n	800d8bc <find_volume+0x5e0>
 800d8b8:	230d      	movs	r3, #13
 800d8ba:	e09a      	b.n	800d9f2 <find_volume+0x716>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800d8bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d8be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d8c2:	441a      	add	r2, r3
 800d8c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d8c6:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800d8c8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800d8cc:	2b02      	cmp	r3, #2
 800d8ce:	d103      	bne.n	800d8d8 <find_volume+0x5fc>
 800d8d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d8d2:	6a1b      	ldr	r3, [r3, #32]
 800d8d4:	005b      	lsls	r3, r3, #1
 800d8d6:	e00a      	b.n	800d8ee <find_volume+0x612>
 800d8d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d8da:	6a1a      	ldr	r2, [r3, #32]
 800d8dc:	4613      	mov	r3, r2
 800d8de:	005b      	lsls	r3, r3, #1
 800d8e0:	4413      	add	r3, r2
 800d8e2:	085a      	lsrs	r2, r3, #1
 800d8e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d8e6:	6a1b      	ldr	r3, [r3, #32]
 800d8e8:	f003 0301 	and.w	r3, r3, #1
 800d8ec:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800d8ee:	65fb      	str	r3, [r7, #92]	; 0x5c
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800d8f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d8f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d8f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d8f6:	899b      	ldrh	r3, [r3, #12]
 800d8f8:	4619      	mov	r1, r3
 800d8fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d8fc:	440b      	add	r3, r1
 800d8fe:	3b01      	subs	r3, #1
 800d900:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d902:	8989      	ldrh	r1, [r1, #12]
 800d904:	fbb3 f3f1 	udiv	r3, r3, r1
 800d908:	429a      	cmp	r2, r3
 800d90a:	d201      	bcs.n	800d910 <find_volume+0x634>
 800d90c:	230d      	movs	r3, #13
 800d90e:	e070      	b.n	800d9f2 <find_volume+0x716>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d910:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d912:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d916:	61da      	str	r2, [r3, #28]
 800d918:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d91a:	69da      	ldr	r2, [r3, #28]
 800d91c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d91e:	619a      	str	r2, [r3, #24]
		fs->fsi_flag = 0x80;
 800d920:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d922:	2280      	movs	r2, #128	; 0x80
 800d924:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800d926:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800d92a:	2b03      	cmp	r3, #3
 800d92c:	d149      	bne.n	800d9c2 <find_volume+0x6e6>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800d92e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d930:	333c      	adds	r3, #60	; 0x3c
 800d932:	3330      	adds	r3, #48	; 0x30
 800d934:	4618      	mov	r0, r3
 800d936:	f7fc fbf9 	bl	800a12c <ld_word>
 800d93a:	4603      	mov	r3, r0
 800d93c:	2b01      	cmp	r3, #1
 800d93e:	d140      	bne.n	800d9c2 <find_volume+0x6e6>
			&& move_window(fs, bsect + 1) == FR_OK)
 800d940:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d942:	3301      	adds	r3, #1
 800d944:	4619      	mov	r1, r3
 800d946:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800d948:	f7fd f804 	bl	800a954 <move_window>
 800d94c:	4603      	mov	r3, r0
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d137      	bne.n	800d9c2 <find_volume+0x6e6>
		{
			fs->fsi_flag = 0;
 800d952:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d954:	2200      	movs	r2, #0
 800d956:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800d958:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d95a:	333c      	adds	r3, #60	; 0x3c
 800d95c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d960:	4618      	mov	r0, r3
 800d962:	f7fc fbe3 	bl	800a12c <ld_word>
 800d966:	4603      	mov	r3, r0
 800d968:	461a      	mov	r2, r3
 800d96a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d96e:	429a      	cmp	r2, r3
 800d970:	d127      	bne.n	800d9c2 <find_volume+0x6e6>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800d972:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d974:	333c      	adds	r3, #60	; 0x3c
 800d976:	4618      	mov	r0, r3
 800d978:	f7fc fbf0 	bl	800a15c <ld_dword>
 800d97c:	4603      	mov	r3, r0
 800d97e:	4a1f      	ldr	r2, [pc, #124]	; (800d9fc <find_volume+0x720>)
 800d980:	4293      	cmp	r3, r2
 800d982:	d11e      	bne.n	800d9c2 <find_volume+0x6e6>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800d984:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d986:	333c      	adds	r3, #60	; 0x3c
 800d988:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800d98c:	4618      	mov	r0, r3
 800d98e:	f7fc fbe5 	bl	800a15c <ld_dword>
 800d992:	4603      	mov	r3, r0
 800d994:	4a1a      	ldr	r2, [pc, #104]	; (800da00 <find_volume+0x724>)
 800d996:	4293      	cmp	r3, r2
 800d998:	d113      	bne.n	800d9c2 <find_volume+0x6e6>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800d99a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d99c:	333c      	adds	r3, #60	; 0x3c
 800d99e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800d9a2:	4618      	mov	r0, r3
 800d9a4:	f7fc fbda 	bl	800a15c <ld_dword>
 800d9a8:	4602      	mov	r2, r0
 800d9aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d9ac:	61da      	str	r2, [r3, #28]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800d9ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d9b0:	333c      	adds	r3, #60	; 0x3c
 800d9b2:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800d9b6:	4618      	mov	r0, r3
 800d9b8:	f7fc fbd0 	bl	800a15c <ld_dword>
 800d9bc:	4602      	mov	r2, r0
 800d9be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d9c0:	619a      	str	r2, [r3, #24]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800d9c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d9c4:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 800d9c8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800d9ca:	4b0e      	ldr	r3, [pc, #56]	; (800da04 <find_volume+0x728>)
 800d9cc:	881b      	ldrh	r3, [r3, #0]
 800d9ce:	3301      	adds	r3, #1
 800d9d0:	b29a      	uxth	r2, r3
 800d9d2:	4b0c      	ldr	r3, [pc, #48]	; (800da04 <find_volume+0x728>)
 800d9d4:	801a      	strh	r2, [r3, #0]
 800d9d6:	4b0b      	ldr	r3, [pc, #44]	; (800da04 <find_volume+0x728>)
 800d9d8:	881a      	ldrh	r2, [r3, #0]
 800d9da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d9dc:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800d9de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d9e0:	4a09      	ldr	r2, [pc, #36]	; (800da08 <find_volume+0x72c>)
 800d9e2:	611a      	str	r2, [r3, #16]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
 800d9e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d9e6:	4a09      	ldr	r2, [pc, #36]	; (800da0c <find_volume+0x730>)
 800d9e8:	615a      	str	r2, [r3, #20]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800d9ea:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800d9ec:	f7fc ff4a 	bl	800a884 <clear_lock>
#endif
	return FR_OK;
 800d9f0:	2300      	movs	r3, #0
}
 800d9f2:	4618      	mov	r0, r3
 800d9f4:	3770      	adds	r7, #112	; 0x70
 800d9f6:	46bd      	mov	sp, r7
 800d9f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d9fc:	41615252 	.word	0x41615252
 800da00:	61417272 	.word	0x61417272
 800da04:	20002494 	.word	0x20002494
 800da08:	20002718 	.word	0x20002718
 800da0c:	200024b8 	.word	0x200024b8

0800da10 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800da10:	b580      	push	{r7, lr}
 800da12:	b084      	sub	sp, #16
 800da14:	af00      	add	r7, sp, #0
 800da16:	6078      	str	r0, [r7, #4]
 800da18:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800da1a:	2309      	movs	r3, #9
 800da1c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	2b00      	cmp	r3, #0
 800da22:	d01c      	beq.n	800da5e <validate+0x4e>
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d018      	beq.n	800da5e <validate+0x4e>
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	781b      	ldrb	r3, [r3, #0]
 800da32:	2b00      	cmp	r3, #0
 800da34:	d013      	beq.n	800da5e <validate+0x4e>
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	889a      	ldrh	r2, [r3, #4]
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	88db      	ldrh	r3, [r3, #6]
 800da40:	429a      	cmp	r2, r3
 800da42:	d10c      	bne.n	800da5e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	785b      	ldrb	r3, [r3, #1]
 800da4a:	4618      	mov	r0, r3
 800da4c:	f7fc fad0 	bl	8009ff0 <disk_status>
 800da50:	4603      	mov	r3, r0
 800da52:	f003 0301 	and.w	r3, r3, #1
 800da56:	2b00      	cmp	r3, #0
 800da58:	d101      	bne.n	800da5e <validate+0x4e>
			res = FR_OK;
 800da5a:	2300      	movs	r3, #0
 800da5c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800da5e:	7bfb      	ldrb	r3, [r7, #15]
 800da60:	2b00      	cmp	r3, #0
 800da62:	d102      	bne.n	800da6a <validate+0x5a>
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	e000      	b.n	800da6c <validate+0x5c>
 800da6a:	2300      	movs	r3, #0
 800da6c:	683a      	ldr	r2, [r7, #0]
 800da6e:	6013      	str	r3, [r2, #0]
	return res;
 800da70:	7bfb      	ldrb	r3, [r7, #15]
}
 800da72:	4618      	mov	r0, r3
 800da74:	3710      	adds	r7, #16
 800da76:	46bd      	mov	sp, r7
 800da78:	bd80      	pop	{r7, pc}
	...

0800da7c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800da7c:	b580      	push	{r7, lr}
 800da7e:	b088      	sub	sp, #32
 800da80:	af00      	add	r7, sp, #0
 800da82:	60f8      	str	r0, [r7, #12]
 800da84:	60b9      	str	r1, [r7, #8]
 800da86:	4613      	mov	r3, r2
 800da88:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800da8a:	68bb      	ldr	r3, [r7, #8]
 800da8c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800da8e:	f107 0310 	add.w	r3, r7, #16
 800da92:	4618      	mov	r0, r3
 800da94:	f7ff fb7a 	bl	800d18c <get_ldnumber>
 800da98:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800da9a:	69fb      	ldr	r3, [r7, #28]
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	da01      	bge.n	800daa4 <f_mount+0x28>
 800daa0:	230b      	movs	r3, #11
 800daa2:	e02b      	b.n	800dafc <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800daa4:	4a17      	ldr	r2, [pc, #92]	; (800db04 <f_mount+0x88>)
 800daa6:	69fb      	ldr	r3, [r7, #28]
 800daa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800daac:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800daae:	69bb      	ldr	r3, [r7, #24]
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d005      	beq.n	800dac0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800dab4:	69b8      	ldr	r0, [r7, #24]
 800dab6:	f7fc fee5 	bl	800a884 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800daba:	69bb      	ldr	r3, [r7, #24]
 800dabc:	2200      	movs	r2, #0
 800dabe:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d002      	beq.n	800dacc <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	2200      	movs	r2, #0
 800daca:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800dacc:	68fa      	ldr	r2, [r7, #12]
 800dace:	490d      	ldr	r1, [pc, #52]	; (800db04 <f_mount+0x88>)
 800dad0:	69fb      	ldr	r3, [r7, #28]
 800dad2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800dad6:	68fb      	ldr	r3, [r7, #12]
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d002      	beq.n	800dae2 <f_mount+0x66>
 800dadc:	79fb      	ldrb	r3, [r7, #7]
 800dade:	2b01      	cmp	r3, #1
 800dae0:	d001      	beq.n	800dae6 <f_mount+0x6a>
 800dae2:	2300      	movs	r3, #0
 800dae4:	e00a      	b.n	800dafc <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800dae6:	f107 010c 	add.w	r1, r7, #12
 800daea:	f107 0308 	add.w	r3, r7, #8
 800daee:	2200      	movs	r2, #0
 800daf0:	4618      	mov	r0, r3
 800daf2:	f7ff fbf3 	bl	800d2dc <find_volume>
 800daf6:	4603      	mov	r3, r0
 800daf8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800dafa:	7dfb      	ldrb	r3, [r7, #23]
}
 800dafc:	4618      	mov	r0, r3
 800dafe:	3720      	adds	r7, #32
 800db00:	46bd      	mov	sp, r7
 800db02:	bd80      	pop	{r7, pc}
 800db04:	20002490 	.word	0x20002490

0800db08 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800db08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800db0c:	b0a8      	sub	sp, #160	; 0xa0
 800db0e:	af00      	add	r7, sp, #0
 800db10:	6278      	str	r0, [r7, #36]	; 0x24
 800db12:	6239      	str	r1, [r7, #32]
 800db14:	4613      	mov	r3, r2
 800db16:	77fb      	strb	r3, [r7, #31]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800db18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d101      	bne.n	800db22 <f_open+0x1a>
 800db1e:	2309      	movs	r3, #9
 800db20:	e2c0      	b.n	800e0a4 <f_open+0x59c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800db22:	7ffb      	ldrb	r3, [r7, #31]
 800db24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800db28:	77fb      	strb	r3, [r7, #31]
	res = find_volume(&path, &fs, mode);
 800db2a:	7ffb      	ldrb	r3, [r7, #31]
 800db2c:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800db30:	f107 0020 	add.w	r0, r7, #32
 800db34:	461a      	mov	r2, r3
 800db36:	f7ff fbd1 	bl	800d2dc <find_volume>
 800db3a:	4603      	mov	r3, r0
 800db3c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	if (res == FR_OK) {
 800db40:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800db44:	2b00      	cmp	r3, #0
 800db46:	f040 82a4 	bne.w	800e092 <f_open+0x58a>
		dj.obj.fs = fs;
 800db4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db4c:	633b      	str	r3, [r7, #48]	; 0x30
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800db4e:	6a3b      	ldr	r3, [r7, #32]
 800db50:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800db54:	4619      	mov	r1, r3
 800db56:	4610      	mov	r0, r2
 800db58:	f7ff fa6a 	bl	800d030 <follow_path>
 800db5c:	4603      	mov	r3, r0
 800db5e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800db62:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800db66:	2b00      	cmp	r3, #0
 800db68:	d11a      	bne.n	800dba0 <f_open+0x98>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800db6a:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 800db6e:	b25b      	sxtb	r3, r3
 800db70:	2b00      	cmp	r3, #0
 800db72:	da03      	bge.n	800db7c <f_open+0x74>
				res = FR_INVALID_NAME;
 800db74:	2306      	movs	r3, #6
 800db76:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 800db7a:	e011      	b.n	800dba0 <f_open+0x98>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800db7c:	7ffb      	ldrb	r3, [r7, #31]
 800db7e:	f023 0301 	bic.w	r3, r3, #1
 800db82:	2b00      	cmp	r3, #0
 800db84:	bf14      	ite	ne
 800db86:	2301      	movne	r3, #1
 800db88:	2300      	moveq	r3, #0
 800db8a:	b2db      	uxtb	r3, r3
 800db8c:	461a      	mov	r2, r3
 800db8e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800db92:	4611      	mov	r1, r2
 800db94:	4618      	mov	r0, r3
 800db96:	f7fc fd2d 	bl	800a5f4 <chk_lock>
 800db9a:	4603      	mov	r3, r0
 800db9c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800dba0:	7ffb      	ldrb	r3, [r7, #31]
 800dba2:	f003 031c 	and.w	r3, r3, #28
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	f000 8117 	beq.w	800ddda <f_open+0x2d2>
			if (res != FR_OK) {					/* No file, create new */
 800dbac:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d017      	beq.n	800dbe4 <f_open+0xdc>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800dbb4:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800dbb8:	2b04      	cmp	r3, #4
 800dbba:	d10e      	bne.n	800dbda <f_open+0xd2>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800dbbc:	f7fc fd76 	bl	800a6ac <enq_lock>
 800dbc0:	4603      	mov	r3, r0
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d006      	beq.n	800dbd4 <f_open+0xcc>
 800dbc6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800dbca:	4618      	mov	r0, r3
 800dbcc:	f7fe fde2 	bl	800c794 <dir_register>
 800dbd0:	4603      	mov	r3, r0
 800dbd2:	e000      	b.n	800dbd6 <f_open+0xce>
 800dbd4:	2312      	movs	r3, #18
 800dbd6:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800dbda:	7ffb      	ldrb	r3, [r7, #31]
 800dbdc:	f043 0308 	orr.w	r3, r3, #8
 800dbe0:	77fb      	strb	r3, [r7, #31]
 800dbe2:	e011      	b.n	800dc08 <f_open+0x100>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800dbe4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800dbe8:	f003 0311 	and.w	r3, r3, #17
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d003      	beq.n	800dbf8 <f_open+0xf0>
					res = FR_DENIED;
 800dbf0:	2307      	movs	r3, #7
 800dbf2:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 800dbf6:	e007      	b.n	800dc08 <f_open+0x100>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800dbf8:	7ffb      	ldrb	r3, [r7, #31]
 800dbfa:	f003 0304 	and.w	r3, r3, #4
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d002      	beq.n	800dc08 <f_open+0x100>
 800dc02:	2308      	movs	r3, #8
 800dc04:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800dc08:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	f040 8100 	bne.w	800de12 <f_open+0x30a>
 800dc12:	7ffb      	ldrb	r3, [r7, #31]
 800dc14:	f003 0308 	and.w	r3, r3, #8
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	f000 80fa 	beq.w	800de12 <f_open+0x30a>
				dw = GET_FATTIME();
 800dc1e:	f7f9 f9eb 	bl	8006ff8 <get_fattime>
 800dc22:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 800dc26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc28:	781b      	ldrb	r3, [r3, #0]
 800dc2a:	2b04      	cmp	r3, #4
 800dc2c:	f040 8085 	bne.w	800dd3a <f_open+0x232>
					/* Get current allocation info */
					fp->obj.fs = fs;
 800dc30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dc32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc34:	601a      	str	r2, [r3, #0]
					fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);
 800dc36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc38:	695b      	ldr	r3, [r3, #20]
 800dc3a:	3334      	adds	r3, #52	; 0x34
 800dc3c:	4618      	mov	r0, r3
 800dc3e:	f7fc fa8d 	bl	800a15c <ld_dword>
 800dc42:	4602      	mov	r2, r0
 800dc44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc46:	609a      	str	r2, [r3, #8]
					fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800dc48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc4a:	695b      	ldr	r3, [r3, #20]
 800dc4c:	3338      	adds	r3, #56	; 0x38
 800dc4e:	4618      	mov	r0, r3
 800dc50:	f7fc faa7 	bl	800a1a2 <ld_qword>
 800dc54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc56:	e9c3 0104 	strd	r0, r1, [r3, #16]
					fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800dc5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc5c:	695b      	ldr	r3, [r3, #20]
 800dc5e:	3321      	adds	r3, #33	; 0x21
 800dc60:	781b      	ldrb	r3, [r3, #0]
 800dc62:	f003 0302 	and.w	r3, r3, #2
 800dc66:	b2db      	uxtb	r3, r3
 800dc68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dc6a:	71d3      	strb	r3, [r2, #7]
					fp->obj.n_frag = 0;
 800dc6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc6e:	2200      	movs	r2, #0
 800dc70:	61da      	str	r2, [r3, #28]
					/* Initialize directory entry block */
					st_dword(fs->dirbuf + XDIR_CrtTime, dw);	/* Set created time */
 800dc72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc74:	695b      	ldr	r3, [r3, #20]
 800dc76:	3308      	adds	r3, #8
 800dc78:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800dc7c:	4618      	mov	r0, r3
 800dc7e:	f7fc fb86 	bl	800a38e <st_dword>
					fs->dirbuf[XDIR_CrtTime10] = 0;
 800dc82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc84:	695b      	ldr	r3, [r3, #20]
 800dc86:	f103 0214 	add.w	r2, r3, #20
 800dc8a:	2300      	movs	r3, #0
 800dc8c:	7013      	strb	r3, [r2, #0]
					st_dword(fs->dirbuf + XDIR_ModTime, dw);	/* Set modified time */
 800dc8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc90:	695b      	ldr	r3, [r3, #20]
 800dc92:	330c      	adds	r3, #12
 800dc94:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800dc98:	4618      	mov	r0, r3
 800dc9a:	f7fc fb78 	bl	800a38e <st_dword>
					fs->dirbuf[XDIR_ModTime10] = 0;
 800dc9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dca0:	695b      	ldr	r3, [r3, #20]
 800dca2:	f103 0215 	add.w	r2, r3, #21
 800dca6:	2300      	movs	r3, #0
 800dca8:	7013      	strb	r3, [r2, #0]
					fs->dirbuf[XDIR_Attr] = AM_ARC;				/* Reset attribute */
 800dcaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcac:	695b      	ldr	r3, [r3, #20]
 800dcae:	1d1a      	adds	r2, r3, #4
 800dcb0:	2320      	movs	r3, #32
 800dcb2:	7013      	strb	r3, [r2, #0]
					st_dword(fs->dirbuf + XDIR_FstClus, 0);		/* Reset file allocation info */
 800dcb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcb6:	695b      	ldr	r3, [r3, #20]
 800dcb8:	3334      	adds	r3, #52	; 0x34
 800dcba:	2100      	movs	r1, #0
 800dcbc:	4618      	mov	r0, r3
 800dcbe:	f7fc fb66 	bl	800a38e <st_dword>
					st_qword(fs->dirbuf + XDIR_FileSize, 0);
 800dcc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcc4:	695b      	ldr	r3, [r3, #20]
 800dcc6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800dcca:	f04f 0200 	mov.w	r2, #0
 800dcce:	f04f 0300 	mov.w	r3, #0
 800dcd2:	4608      	mov	r0, r1
 800dcd4:	f7fc fb87 	bl	800a3e6 <st_qword>
					st_qword(fs->dirbuf + XDIR_ValidFileSize, 0);
 800dcd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcda:	695b      	ldr	r3, [r3, #20]
 800dcdc:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800dce0:	f04f 0200 	mov.w	r2, #0
 800dce4:	f04f 0300 	mov.w	r3, #0
 800dce8:	4608      	mov	r0, r1
 800dcea:	f7fc fb7c 	bl	800a3e6 <st_qword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 800dcee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcf0:	695b      	ldr	r3, [r3, #20]
 800dcf2:	f103 0221 	add.w	r2, r3, #33	; 0x21
 800dcf6:	2301      	movs	r3, #1
 800dcf8:	7013      	strb	r3, [r2, #0]
					res = store_xdir(&dj);
 800dcfa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800dcfe:	4618      	mov	r0, r3
 800dd00:	f7fe fa96 	bl	800c230 <store_xdir>
 800dd04:	4603      	mov	r3, r0
 800dd06:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
					if (res == FR_OK && fp->obj.sclust) {		/* Remove the cluster chain if exist */
 800dd0a:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d17f      	bne.n	800de12 <f_open+0x30a>
 800dd12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd14:	689b      	ldr	r3, [r3, #8]
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d07b      	beq.n	800de12 <f_open+0x30a>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 800dd1a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dd1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd1e:	689b      	ldr	r3, [r3, #8]
 800dd20:	2200      	movs	r2, #0
 800dd22:	4619      	mov	r1, r3
 800dd24:	f7fd faa6 	bl	800b274 <remove_chain>
 800dd28:	4603      	mov	r3, r0
 800dd2a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 800dd2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd30:	689b      	ldr	r3, [r3, #8]
 800dd32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dd34:	3b01      	subs	r3, #1
 800dd36:	6193      	str	r3, [r2, #24]
 800dd38:	e06b      	b.n	800de12 <f_open+0x30a>
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800dd3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dd3c:	330e      	adds	r3, #14
 800dd3e:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800dd42:	4618      	mov	r0, r3
 800dd44:	f7fc fb23 	bl	800a38e <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800dd48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dd4a:	3316      	adds	r3, #22
 800dd4c:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800dd50:	4618      	mov	r0, r3
 800dd52:	f7fc fb1c 	bl	800a38e <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800dd56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dd58:	f103 020b 	add.w	r2, r3, #11
 800dd5c:	2320      	movs	r3, #32
 800dd5e:	7013      	strb	r3, [r2, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800dd60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dd62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dd64:	4619      	mov	r1, r3
 800dd66:	4610      	mov	r0, r2
 800dd68:	f7fd fe5b 	bl	800ba22 <ld_clust>
 800dd6c:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800dd70:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dd72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dd74:	2200      	movs	r2, #0
 800dd76:	4619      	mov	r1, r3
 800dd78:	f7fd fe72 	bl	800ba60 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800dd7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dd7e:	331c      	adds	r3, #28
 800dd80:	2100      	movs	r1, #0
 800dd82:	4618      	mov	r0, r3
 800dd84:	f7fc fb03 	bl	800a38e <st_dword>
					fs->wflag = 1;
 800dd88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dd8a:	2301      	movs	r3, #1
 800dd8c:	70d3      	strb	r3, [r2, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800dd8e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d03d      	beq.n	800de12 <f_open+0x30a>
						dw = fs->winsect;
 800dd96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd9a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
						res = remove_chain(&dj.obj, cl, 0);
 800dd9e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800dda2:	2200      	movs	r2, #0
 800dda4:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800dda8:	4618      	mov	r0, r3
 800ddaa:	f7fd fa63 	bl	800b274 <remove_chain>
 800ddae:	4603      	mov	r3, r0
 800ddb0:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
						if (res == FR_OK) {
 800ddb4:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d12a      	bne.n	800de12 <f_open+0x30a>
							res = move_window(fs, dw);
 800ddbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddbe:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800ddc2:	4618      	mov	r0, r3
 800ddc4:	f7fc fdc6 	bl	800a954 <move_window>
 800ddc8:	4603      	mov	r3, r0
 800ddca:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800ddce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ddd0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ddd4:	3b01      	subs	r3, #1
 800ddd6:	6193      	str	r3, [r2, #24]
 800ddd8:	e01b      	b.n	800de12 <f_open+0x30a>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800ddda:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d117      	bne.n	800de12 <f_open+0x30a>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800dde2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800dde6:	f003 0310 	and.w	r3, r3, #16
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d003      	beq.n	800ddf6 <f_open+0x2ee>
					res = FR_NO_FILE;
 800ddee:	2304      	movs	r3, #4
 800ddf0:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 800ddf4:	e00d      	b.n	800de12 <f_open+0x30a>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800ddf6:	7ffb      	ldrb	r3, [r7, #31]
 800ddf8:	f003 0302 	and.w	r3, r3, #2
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d008      	beq.n	800de12 <f_open+0x30a>
 800de00:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800de04:	f003 0301 	and.w	r3, r3, #1
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d002      	beq.n	800de12 <f_open+0x30a>
						res = FR_DENIED;
 800de0c:	2307      	movs	r3, #7
 800de0e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
					}
				}
			}
		}
		if (res == FR_OK) {
 800de12:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800de16:	2b00      	cmp	r3, #0
 800de18:	d128      	bne.n	800de6c <f_open+0x364>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800de1a:	7ffb      	ldrb	r3, [r7, #31]
 800de1c:	f003 0308 	and.w	r3, r3, #8
 800de20:	2b00      	cmp	r3, #0
 800de22:	d003      	beq.n	800de2c <f_open+0x324>
				mode |= FA_MODIFIED;
 800de24:	7ffb      	ldrb	r3, [r7, #31]
 800de26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800de2a:	77fb      	strb	r3, [r7, #31]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800de2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800de30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de32:	649a      	str	r2, [r3, #72]	; 0x48
			fp->dir_ptr = dj.dir;
 800de34:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800de36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de38:	64da      	str	r2, [r3, #76]	; 0x4c
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800de3a:	7ffb      	ldrb	r3, [r7, #31]
 800de3c:	f023 0301 	bic.w	r3, r3, #1
 800de40:	2b00      	cmp	r3, #0
 800de42:	bf14      	ite	ne
 800de44:	2301      	movne	r3, #1
 800de46:	2300      	moveq	r3, #0
 800de48:	b2db      	uxtb	r3, r3
 800de4a:	461a      	mov	r2, r3
 800de4c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800de50:	4611      	mov	r1, r2
 800de52:	4618      	mov	r0, r3
 800de54:	f7fc fc4c 	bl	800a6f0 <inc_lock>
 800de58:	4602      	mov	r2, r0
 800de5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de5c:	62da      	str	r2, [r3, #44]	; 0x2c
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800de5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de62:	2b00      	cmp	r3, #0
 800de64:	d102      	bne.n	800de6c <f_open+0x364>
 800de66:	2302      	movs	r3, #2
 800de68:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800de6c:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800de70:	2b00      	cmp	r3, #0
 800de72:	f040 810e 	bne.w	800e092 <f_open+0x58a>
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800de76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de78:	781b      	ldrb	r3, [r3, #0]
 800de7a:	2b04      	cmp	r3, #4
 800de7c:	d12d      	bne.n	800deda <f_open+0x3d2>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 800de7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800de80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de82:	621a      	str	r2, [r3, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 800de84:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800de88:	4613      	mov	r3, r2
 800de8a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800de8e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800de92:	431a      	orrs	r2, r3
 800de94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de96:	625a      	str	r2, [r3, #36]	; 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 800de98:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800de9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de9c:	629a      	str	r2, [r3, #40]	; 0x28
				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 800de9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dea0:	695b      	ldr	r3, [r3, #20]
 800dea2:	3334      	adds	r3, #52	; 0x34
 800dea4:	4618      	mov	r0, r3
 800dea6:	f7fc f959 	bl	800a15c <ld_dword>
 800deaa:	4602      	mov	r2, r0
 800deac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deae:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800deb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800deb2:	695b      	ldr	r3, [r3, #20]
 800deb4:	3338      	adds	r3, #56	; 0x38
 800deb6:	4618      	mov	r0, r3
 800deb8:	f7fc f973 	bl	800a1a2 <ld_qword>
 800debc:	4602      	mov	r2, r0
 800debe:	460b      	mov	r3, r1
 800dec0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dec2:	e9c1 2304 	strd	r2, r3, [r1, #16]
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800dec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dec8:	695b      	ldr	r3, [r3, #20]
 800deca:	3321      	adds	r3, #33	; 0x21
 800decc:	781b      	ldrb	r3, [r3, #0]
 800dece:	f003 0302 	and.w	r3, r3, #2
 800ded2:	b2da      	uxtb	r2, r3
 800ded4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ded6:	71da      	strb	r2, [r3, #7]
 800ded8:	e016      	b.n	800df08 <f_open+0x400>
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800deda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dedc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dede:	4619      	mov	r1, r3
 800dee0:	4610      	mov	r0, r2
 800dee2:	f7fd fd9e 	bl	800ba22 <ld_clust>
 800dee6:	4602      	mov	r2, r0
 800dee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deea:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800deec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800deee:	331c      	adds	r3, #28
 800def0:	4618      	mov	r0, r3
 800def2:	f7fc f933 	bl	800a15c <ld_dword>
 800def6:	4603      	mov	r3, r0
 800def8:	2200      	movs	r2, #0
 800defa:	613b      	str	r3, [r7, #16]
 800defc:	617a      	str	r2, [r7, #20]
 800defe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df00:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800df04:	e9c3 1204 	strd	r1, r2, [r3, #16]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800df08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df0a:	2200      	movs	r2, #0
 800df0c:	651a      	str	r2, [r3, #80]	; 0x50
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800df0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800df10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df12:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800df14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df16:	88da      	ldrh	r2, [r3, #6]
 800df18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df1a:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800df1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df1e:	7ffa      	ldrb	r2, [r7, #31]
 800df20:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			fp->err = 0;			/* Clear error flag */
 800df24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df26:	2200      	movs	r2, #0
 800df28:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			fp->sect = 0;			/* Invalidate current data sector */
 800df2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df2e:	2200      	movs	r2, #0
 800df30:	645a      	str	r2, [r3, #68]	; 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
 800df32:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800df34:	f04f 0200 	mov.w	r2, #0
 800df38:	f04f 0300 	mov.w	r3, #0
 800df3c:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800df40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df42:	3354      	adds	r3, #84	; 0x54
 800df44:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800df48:	2100      	movs	r1, #0
 800df4a:	4618      	mov	r0, r3
 800df4c:	f7fc faf4 	bl	800a538 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800df50:	7ffb      	ldrb	r3, [r7, #31]
 800df52:	f003 0320 	and.w	r3, r3, #32
 800df56:	2b00      	cmp	r3, #0
 800df58:	f000 809b 	beq.w	800e092 <f_open+0x58a>
 800df5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df5e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800df62:	4313      	orrs	r3, r2
 800df64:	f000 8095 	beq.w	800e092 <f_open+0x58a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800df68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df6a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800df6e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800df70:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800df74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df76:	895b      	ldrh	r3, [r3, #10]
 800df78:	461a      	mov	r2, r3
 800df7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df7c:	899b      	ldrh	r3, [r3, #12]
 800df7e:	fb02 f303 	mul.w	r3, r2, r3
 800df82:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800df86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df88:	689b      	ldr	r3, [r3, #8]
 800df8a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800df8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df90:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800df94:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
 800df98:	e023      	b.n	800dfe2 <f_open+0x4da>
					clst = get_fat(&fp->obj, clst);
 800df9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df9c:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800dfa0:	4618      	mov	r0, r3
 800dfa2:	f7fc fd95 	bl	800aad0 <get_fat>
 800dfa6:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
					if (clst <= 1) res = FR_INT_ERR;
 800dfaa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800dfae:	2b01      	cmp	r3, #1
 800dfb0:	d802      	bhi.n	800dfb8 <f_open+0x4b0>
 800dfb2:	2302      	movs	r3, #2
 800dfb4:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800dfb8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800dfbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dfc0:	d102      	bne.n	800dfc8 <f_open+0x4c0>
 800dfc2:	2301      	movs	r3, #1
 800dfc4:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800dfc8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800dfcc:	2200      	movs	r2, #0
 800dfce:	4698      	mov	r8, r3
 800dfd0:	4691      	mov	r9, r2
 800dfd2:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 800dfd6:	ebb2 0a08 	subs.w	sl, r2, r8
 800dfda:	eb63 0b09 	sbc.w	fp, r3, r9
 800dfde:	e9c7 ab24 	strd	sl, fp, [r7, #144]	; 0x90
 800dfe2:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d10a      	bne.n	800e000 <f_open+0x4f8>
 800dfea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800dfee:	2200      	movs	r2, #0
 800dff0:	461c      	mov	r4, r3
 800dff2:	4615      	mov	r5, r2
 800dff4:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 800dff8:	4294      	cmp	r4, r2
 800dffa:	eb75 0303 	sbcs.w	r3, r5, r3
 800dffe:	d3cc      	bcc.n	800df9a <f_open+0x492>
				}
				fp->clust = clst;
 800e000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e002:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800e006:	641a      	str	r2, [r3, #64]	; 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800e008:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d140      	bne.n	800e092 <f_open+0x58a>
 800e010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e012:	899b      	ldrh	r3, [r3, #12]
 800e014:	b29b      	uxth	r3, r3
 800e016:	2200      	movs	r2, #0
 800e018:	60bb      	str	r3, [r7, #8]
 800e01a:	60fa      	str	r2, [r7, #12]
 800e01c:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800e020:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e024:	f7f2 fe58 	bl	8000cd8 <__aeabi_uldivmod>
 800e028:	4313      	orrs	r3, r2
 800e02a:	d032      	beq.n	800e092 <f_open+0x58a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800e02c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e02e:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800e032:	4618      	mov	r0, r3
 800e034:	f7fc fd2c 	bl	800aa90 <clust2sect>
 800e038:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
 800e03c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e040:	2b00      	cmp	r3, #0
 800e042:	d103      	bne.n	800e04c <f_open+0x544>
						res = FR_INT_ERR;
 800e044:	2302      	movs	r3, #2
 800e046:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 800e04a:	e022      	b.n	800e092 <f_open+0x58a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800e04c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e04e:	899b      	ldrh	r3, [r3, #12]
 800e050:	b29b      	uxth	r3, r3
 800e052:	2200      	movs	r2, #0
 800e054:	603b      	str	r3, [r7, #0]
 800e056:	607a      	str	r2, [r7, #4]
 800e058:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e05c:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800e060:	f7f2 fe3a 	bl	8000cd8 <__aeabi_uldivmod>
 800e064:	4602      	mov	r2, r0
 800e066:	460b      	mov	r3, r1
 800e068:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e06c:	441a      	add	r2, r3
 800e06e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e070:	645a      	str	r2, [r3, #68]	; 0x44
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800e072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e074:	7858      	ldrb	r0, [r3, #1]
 800e076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e078:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800e07c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e07e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e080:	2301      	movs	r3, #1
 800e082:	f7fb fff5 	bl	800a070 <disk_read>
 800e086:	4603      	mov	r3, r0
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d002      	beq.n	800e092 <f_open+0x58a>
 800e08c:	2301      	movs	r3, #1
 800e08e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800e092:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800e096:	2b00      	cmp	r3, #0
 800e098:	d002      	beq.n	800e0a0 <f_open+0x598>
 800e09a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e09c:	2200      	movs	r2, #0
 800e09e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800e0a0:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
}
 800e0a4:	4618      	mov	r0, r3
 800e0a6:	37a0      	adds	r7, #160	; 0xa0
 800e0a8:	46bd      	mov	sp, r7
 800e0aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800e0ae <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800e0ae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0b2:	b091      	sub	sp, #68	; 0x44
 800e0b4:	af00      	add	r7, sp, #0
 800e0b6:	61f8      	str	r0, [r7, #28]
 800e0b8:	61b9      	str	r1, [r7, #24]
 800e0ba:	617a      	str	r2, [r7, #20]
 800e0bc:	613b      	str	r3, [r7, #16]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800e0be:	69bb      	ldr	r3, [r7, #24]
 800e0c0:	62fb      	str	r3, [r7, #44]	; 0x2c


	*bw = 0;	/* Clear write byte counter */
 800e0c2:	693b      	ldr	r3, [r7, #16]
 800e0c4:	2200      	movs	r2, #0
 800e0c6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800e0c8:	69fb      	ldr	r3, [r7, #28]
 800e0ca:	f107 0220 	add.w	r2, r7, #32
 800e0ce:	4611      	mov	r1, r2
 800e0d0:	4618      	mov	r0, r3
 800e0d2:	f7ff fc9d 	bl	800da10 <validate>
 800e0d6:	4603      	mov	r3, r0
 800e0d8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800e0dc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d108      	bne.n	800e0f6 <f_write+0x48>
 800e0e4:	69fb      	ldr	r3, [r7, #28]
 800e0e6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e0ea:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800e0ee:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d002      	beq.n	800e0fc <f_write+0x4e>
 800e0f6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e0fa:	e1aa      	b.n	800e452 <f_write+0x3a4>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800e0fc:	69fb      	ldr	r3, [r7, #28]
 800e0fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e102:	f003 0302 	and.w	r3, r3, #2
 800e106:	2b00      	cmp	r3, #0
 800e108:	d101      	bne.n	800e10e <f_write+0x60>
 800e10a:	2307      	movs	r3, #7
 800e10c:	e1a1      	b.n	800e452 <f_write+0x3a4>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800e10e:	6a3b      	ldr	r3, [r7, #32]
 800e110:	781b      	ldrb	r3, [r3, #0]
 800e112:	2b04      	cmp	r3, #4
 800e114:	f000 818d 	beq.w	800e432 <f_write+0x384>
 800e118:	69fb      	ldr	r3, [r7, #28]
 800e11a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800e11e:	697b      	ldr	r3, [r7, #20]
 800e120:	18d1      	adds	r1, r2, r3
 800e122:	69fb      	ldr	r3, [r7, #28]
 800e124:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800e128:	4613      	mov	r3, r2
 800e12a:	4299      	cmp	r1, r3
 800e12c:	f080 8181 	bcs.w	800e432 <f_write+0x384>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800e130:	69fb      	ldr	r3, [r7, #28]
 800e132:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800e136:	4613      	mov	r3, r2
 800e138:	43db      	mvns	r3, r3
 800e13a:	617b      	str	r3, [r7, #20]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800e13c:	e179      	b.n	800e432 <f_write+0x384>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800e13e:	69fb      	ldr	r3, [r7, #28]
 800e140:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800e144:	6a3b      	ldr	r3, [r7, #32]
 800e146:	899b      	ldrh	r3, [r3, #12]
 800e148:	b29b      	uxth	r3, r3
 800e14a:	2200      	movs	r2, #0
 800e14c:	461d      	mov	r5, r3
 800e14e:	4616      	mov	r6, r2
 800e150:	462a      	mov	r2, r5
 800e152:	4633      	mov	r3, r6
 800e154:	f7f2 fdc0 	bl	8000cd8 <__aeabi_uldivmod>
 800e158:	4313      	orrs	r3, r2
 800e15a:	f040 810a 	bne.w	800e372 <f_write+0x2c4>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800e15e:	69fb      	ldr	r3, [r7, #28]
 800e160:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800e164:	6a3b      	ldr	r3, [r7, #32]
 800e166:	899b      	ldrh	r3, [r3, #12]
 800e168:	b29b      	uxth	r3, r3
 800e16a:	2200      	movs	r2, #0
 800e16c:	60bb      	str	r3, [r7, #8]
 800e16e:	60fa      	str	r2, [r7, #12]
 800e170:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e174:	f7f2 fdb0 	bl	8000cd8 <__aeabi_uldivmod>
 800e178:	4602      	mov	r2, r0
 800e17a:	460b      	mov	r3, r1
 800e17c:	6a3b      	ldr	r3, [r7, #32]
 800e17e:	895b      	ldrh	r3, [r3, #10]
 800e180:	3b01      	subs	r3, #1
 800e182:	4013      	ands	r3, r2
 800e184:	62bb      	str	r3, [r7, #40]	; 0x28
			if (csect == 0) {				/* On the cluster boundary? */
 800e186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d146      	bne.n	800e21a <f_write+0x16c>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800e18c:	69fb      	ldr	r3, [r7, #28]
 800e18e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800e192:	4313      	orrs	r3, r2
 800e194:	d10c      	bne.n	800e1b0 <f_write+0x102>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800e196:	69fb      	ldr	r3, [r7, #28]
 800e198:	689b      	ldr	r3, [r3, #8]
 800e19a:	63bb      	str	r3, [r7, #56]	; 0x38
					if (clst == 0) {		/* If no cluster is allocated, */
 800e19c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d11a      	bne.n	800e1d8 <f_write+0x12a>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800e1a2:	69fb      	ldr	r3, [r7, #28]
 800e1a4:	2100      	movs	r1, #0
 800e1a6:	4618      	mov	r0, r3
 800e1a8:	f7fd f918 	bl	800b3dc <create_chain>
 800e1ac:	63b8      	str	r0, [r7, #56]	; 0x38
 800e1ae:	e013      	b.n	800e1d8 <f_write+0x12a>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800e1b0:	69fb      	ldr	r3, [r7, #28]
 800e1b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d007      	beq.n	800e1c8 <f_write+0x11a>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800e1b8:	69fb      	ldr	r3, [r7, #28]
 800e1ba:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800e1be:	69f8      	ldr	r0, [r7, #28]
 800e1c0:	f7fd fa0d 	bl	800b5de <clmt_clust>
 800e1c4:	63b8      	str	r0, [r7, #56]	; 0x38
 800e1c6:	e007      	b.n	800e1d8 <f_write+0x12a>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800e1c8:	69fa      	ldr	r2, [r7, #28]
 800e1ca:	69fb      	ldr	r3, [r7, #28]
 800e1cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e1ce:	4619      	mov	r1, r3
 800e1d0:	4610      	mov	r0, r2
 800e1d2:	f7fd f903 	bl	800b3dc <create_chain>
 800e1d6:	63b8      	str	r0, [r7, #56]	; 0x38
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800e1d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	f000 812e 	beq.w	800e43c <f_write+0x38e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800e1e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1e2:	2b01      	cmp	r3, #1
 800e1e4:	d105      	bne.n	800e1f2 <f_write+0x144>
 800e1e6:	69fb      	ldr	r3, [r7, #28]
 800e1e8:	2202      	movs	r2, #2
 800e1ea:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800e1ee:	2302      	movs	r3, #2
 800e1f0:	e12f      	b.n	800e452 <f_write+0x3a4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e1f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e1f8:	d105      	bne.n	800e206 <f_write+0x158>
 800e1fa:	69fb      	ldr	r3, [r7, #28]
 800e1fc:	2201      	movs	r2, #1
 800e1fe:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800e202:	2301      	movs	r3, #1
 800e204:	e125      	b.n	800e452 <f_write+0x3a4>
				fp->clust = clst;			/* Update current cluster */
 800e206:	69fb      	ldr	r3, [r7, #28]
 800e208:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e20a:	641a      	str	r2, [r3, #64]	; 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800e20c:	69fb      	ldr	r3, [r7, #28]
 800e20e:	689b      	ldr	r3, [r3, #8]
 800e210:	2b00      	cmp	r3, #0
 800e212:	d102      	bne.n	800e21a <f_write+0x16c>
 800e214:	69fb      	ldr	r3, [r7, #28]
 800e216:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e218:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800e21a:	69fb      	ldr	r3, [r7, #28]
 800e21c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e220:	b25b      	sxtb	r3, r3
 800e222:	2b00      	cmp	r3, #0
 800e224:	da1b      	bge.n	800e25e <f_write+0x1b0>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e226:	6a3b      	ldr	r3, [r7, #32]
 800e228:	7858      	ldrb	r0, [r3, #1]
 800e22a:	69fb      	ldr	r3, [r7, #28]
 800e22c:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800e230:	69fb      	ldr	r3, [r7, #28]
 800e232:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e234:	2301      	movs	r3, #1
 800e236:	f7fb ff3b 	bl	800a0b0 <disk_write>
 800e23a:	4603      	mov	r3, r0
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d005      	beq.n	800e24c <f_write+0x19e>
 800e240:	69fb      	ldr	r3, [r7, #28]
 800e242:	2201      	movs	r2, #1
 800e244:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800e248:	2301      	movs	r3, #1
 800e24a:	e102      	b.n	800e452 <f_write+0x3a4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e24c:	69fb      	ldr	r3, [r7, #28]
 800e24e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e252:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e256:	b2da      	uxtb	r2, r3
 800e258:	69fb      	ldr	r3, [r7, #28]
 800e25a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800e25e:	6a3a      	ldr	r2, [r7, #32]
 800e260:	69fb      	ldr	r3, [r7, #28]
 800e262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e264:	4619      	mov	r1, r3
 800e266:	4610      	mov	r0, r2
 800e268:	f7fc fc12 	bl	800aa90 <clust2sect>
 800e26c:	6278      	str	r0, [r7, #36]	; 0x24
			if (!sect) ABORT(fs, FR_INT_ERR);
 800e26e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e270:	2b00      	cmp	r3, #0
 800e272:	d105      	bne.n	800e280 <f_write+0x1d2>
 800e274:	69fb      	ldr	r3, [r7, #28]
 800e276:	2202      	movs	r2, #2
 800e278:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800e27c:	2302      	movs	r3, #2
 800e27e:	e0e8      	b.n	800e452 <f_write+0x3a4>
			sect += csect;
 800e280:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e284:	4413      	add	r3, r2
 800e286:	627b      	str	r3, [r7, #36]	; 0x24
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800e288:	6a3b      	ldr	r3, [r7, #32]
 800e28a:	899b      	ldrh	r3, [r3, #12]
 800e28c:	461a      	mov	r2, r3
 800e28e:	697b      	ldr	r3, [r7, #20]
 800e290:	fbb3 f3f2 	udiv	r3, r3, r2
 800e294:	633b      	str	r3, [r7, #48]	; 0x30
			if (cc) {						/* Write maximum contiguous sectors directly */
 800e296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d046      	beq.n	800e32a <f_write+0x27c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800e29c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e29e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2a0:	4413      	add	r3, r2
 800e2a2:	6a3a      	ldr	r2, [r7, #32]
 800e2a4:	8952      	ldrh	r2, [r2, #10]
 800e2a6:	4293      	cmp	r3, r2
 800e2a8:	d905      	bls.n	800e2b6 <f_write+0x208>
					cc = fs->csize - csect;
 800e2aa:	6a3b      	ldr	r3, [r7, #32]
 800e2ac:	895b      	ldrh	r3, [r3, #10]
 800e2ae:	461a      	mov	r2, r3
 800e2b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2b2:	1ad3      	subs	r3, r2, r3
 800e2b4:	633b      	str	r3, [r7, #48]	; 0x30
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e2b6:	6a3b      	ldr	r3, [r7, #32]
 800e2b8:	7858      	ldrb	r0, [r3, #1]
 800e2ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e2be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e2c0:	f7fb fef6 	bl	800a0b0 <disk_write>
 800e2c4:	4603      	mov	r3, r0
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d005      	beq.n	800e2d6 <f_write+0x228>
 800e2ca:	69fb      	ldr	r3, [r7, #28]
 800e2cc:	2201      	movs	r2, #1
 800e2ce:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800e2d2:	2301      	movs	r3, #1
 800e2d4:	e0bd      	b.n	800e452 <f_write+0x3a4>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800e2d6:	69fb      	ldr	r3, [r7, #28]
 800e2d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e2da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2dc:	1ad3      	subs	r3, r2, r3
 800e2de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e2e0:	429a      	cmp	r2, r3
 800e2e2:	d91a      	bls.n	800e31a <f_write+0x26c>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800e2e4:	69fb      	ldr	r3, [r7, #28]
 800e2e6:	f103 0054 	add.w	r0, r3, #84	; 0x54
 800e2ea:	69fb      	ldr	r3, [r7, #28]
 800e2ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e2ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2f0:	1ad3      	subs	r3, r2, r3
 800e2f2:	6a3a      	ldr	r2, [r7, #32]
 800e2f4:	8992      	ldrh	r2, [r2, #12]
 800e2f6:	fb02 f303 	mul.w	r3, r2, r3
 800e2fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e2fc:	18d1      	adds	r1, r2, r3
 800e2fe:	6a3b      	ldr	r3, [r7, #32]
 800e300:	899b      	ldrh	r3, [r3, #12]
 800e302:	461a      	mov	r2, r3
 800e304:	f7fc f8f7 	bl	800a4f6 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800e308:	69fb      	ldr	r3, [r7, #28]
 800e30a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e30e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e312:	b2da      	uxtb	r2, r3
 800e314:	69fb      	ldr	r3, [r7, #28]
 800e316:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800e31a:	6a3b      	ldr	r3, [r7, #32]
 800e31c:	899b      	ldrh	r3, [r3, #12]
 800e31e:	461a      	mov	r2, r3
 800e320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e322:	fb02 f303 	mul.w	r3, r2, r3
 800e326:	637b      	str	r3, [r7, #52]	; 0x34
				continue;
 800e328:	e058      	b.n	800e3dc <f_write+0x32e>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800e32a:	69fb      	ldr	r3, [r7, #28]
 800e32c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e32e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e330:	429a      	cmp	r2, r3
 800e332:	d01b      	beq.n	800e36c <f_write+0x2be>
				fp->fptr < fp->obj.objsize &&
 800e334:	69fb      	ldr	r3, [r7, #28]
 800e336:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800e33a:	69fb      	ldr	r3, [r7, #28]
 800e33c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800e340:	4290      	cmp	r0, r2
 800e342:	eb71 0303 	sbcs.w	r3, r1, r3
 800e346:	d211      	bcs.n	800e36c <f_write+0x2be>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800e348:	6a3b      	ldr	r3, [r7, #32]
 800e34a:	7858      	ldrb	r0, [r3, #1]
 800e34c:	69fb      	ldr	r3, [r7, #28]
 800e34e:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800e352:	2301      	movs	r3, #1
 800e354:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e356:	f7fb fe8b 	bl	800a070 <disk_read>
 800e35a:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d005      	beq.n	800e36c <f_write+0x2be>
					ABORT(fs, FR_DISK_ERR);
 800e360:	69fb      	ldr	r3, [r7, #28]
 800e362:	2201      	movs	r2, #1
 800e364:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800e368:	2301      	movs	r3, #1
 800e36a:	e072      	b.n	800e452 <f_write+0x3a4>
			}
#endif
			fp->sect = sect;
 800e36c:	69fb      	ldr	r3, [r7, #28]
 800e36e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e370:	645a      	str	r2, [r3, #68]	; 0x44
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800e372:	6a3b      	ldr	r3, [r7, #32]
 800e374:	899b      	ldrh	r3, [r3, #12]
 800e376:	4618      	mov	r0, r3
 800e378:	69fb      	ldr	r3, [r7, #28]
 800e37a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800e37e:	6a3b      	ldr	r3, [r7, #32]
 800e380:	899b      	ldrh	r3, [r3, #12]
 800e382:	fbb2 f1f3 	udiv	r1, r2, r3
 800e386:	fb01 f303 	mul.w	r3, r1, r3
 800e38a:	1ad3      	subs	r3, r2, r3
 800e38c:	1ac3      	subs	r3, r0, r3
 800e38e:	637b      	str	r3, [r7, #52]	; 0x34
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800e390:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e392:	697b      	ldr	r3, [r7, #20]
 800e394:	429a      	cmp	r2, r3
 800e396:	d901      	bls.n	800e39c <f_write+0x2ee>
 800e398:	697b      	ldr	r3, [r7, #20]
 800e39a:	637b      	str	r3, [r7, #52]	; 0x34
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800e39c:	69fb      	ldr	r3, [r7, #28]
 800e39e:	f103 0454 	add.w	r4, r3, #84	; 0x54
 800e3a2:	69fb      	ldr	r3, [r7, #28]
 800e3a4:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800e3a8:	6a3b      	ldr	r3, [r7, #32]
 800e3aa:	899b      	ldrh	r3, [r3, #12]
 800e3ac:	b29b      	uxth	r3, r3
 800e3ae:	2200      	movs	r2, #0
 800e3b0:	603b      	str	r3, [r7, #0]
 800e3b2:	607a      	str	r2, [r7, #4]
 800e3b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e3b8:	f7f2 fc8e 	bl	8000cd8 <__aeabi_uldivmod>
 800e3bc:	4613      	mov	r3, r2
 800e3be:	4423      	add	r3, r4
 800e3c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e3c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e3c4:	4618      	mov	r0, r3
 800e3c6:	f7fc f896 	bl	800a4f6 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800e3ca:	69fb      	ldr	r3, [r7, #28]
 800e3cc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e3d0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e3d4:	b2da      	uxtb	r2, r3
 800e3d6:	69fb      	ldr	r3, [r7, #28]
 800e3d8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800e3dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e3de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3e0:	4413      	add	r3, r2
 800e3e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e3e4:	69fb      	ldr	r3, [r7, #28]
 800e3e6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800e3ea:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e3ec:	2000      	movs	r0, #0
 800e3ee:	4688      	mov	r8, r1
 800e3f0:	4681      	mov	r9, r0
 800e3f2:	eb12 0a08 	adds.w	sl, r2, r8
 800e3f6:	eb43 0b09 	adc.w	fp, r3, r9
 800e3fa:	69fb      	ldr	r3, [r7, #28]
 800e3fc:	e9c3 ab0e 	strd	sl, fp, [r3, #56]	; 0x38
 800e400:	69fb      	ldr	r3, [r7, #28]
 800e402:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800e406:	69fb      	ldr	r3, [r7, #28]
 800e408:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800e40c:	4290      	cmp	r0, r2
 800e40e:	eb71 0403 	sbcs.w	r4, r1, r3
 800e412:	d201      	bcs.n	800e418 <f_write+0x36a>
 800e414:	4610      	mov	r0, r2
 800e416:	4619      	mov	r1, r3
 800e418:	69fb      	ldr	r3, [r7, #28]
 800e41a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800e41e:	693b      	ldr	r3, [r7, #16]
 800e420:	681a      	ldr	r2, [r3, #0]
 800e422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e424:	441a      	add	r2, r3
 800e426:	693b      	ldr	r3, [r7, #16]
 800e428:	601a      	str	r2, [r3, #0]
 800e42a:	697a      	ldr	r2, [r7, #20]
 800e42c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e42e:	1ad3      	subs	r3, r2, r3
 800e430:	617b      	str	r3, [r7, #20]
	for ( ;  btw;							/* Repeat until all data written */
 800e432:	697b      	ldr	r3, [r7, #20]
 800e434:	2b00      	cmp	r3, #0
 800e436:	f47f ae82 	bne.w	800e13e <f_write+0x90>
 800e43a:	e000      	b.n	800e43e <f_write+0x390>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800e43c:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800e43e:	69fb      	ldr	r3, [r7, #28]
 800e440:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e444:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e448:	b2da      	uxtb	r2, r3
 800e44a:	69fb      	ldr	r3, [r7, #28]
 800e44c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	LEAVE_FF(fs, FR_OK);
 800e450:	2300      	movs	r3, #0
}
 800e452:	4618      	mov	r0, r3
 800e454:	3744      	adds	r7, #68	; 0x44
 800e456:	46bd      	mov	sp, r7
 800e458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e45c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800e45c:	b580      	push	{r7, lr}
 800e45e:	b09a      	sub	sp, #104	; 0x68
 800e460:	af00      	add	r7, sp, #0
 800e462:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800e46a:	4611      	mov	r1, r2
 800e46c:	4618      	mov	r0, r3
 800e46e:	f7ff facf 	bl	800da10 <validate>
 800e472:	4603      	mov	r3, r0
 800e474:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800e478:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	f040 8105 	bne.w	800e68c <f_sync+0x230>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e488:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	f000 80fd 	beq.w	800e68c <f_sync+0x230>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e498:	b25b      	sxtb	r3, r3
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	da17      	bge.n	800e4ce <f_sync+0x72>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800e49e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e4a0:	7858      	ldrb	r0, [r3, #1]
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e4ac:	2301      	movs	r3, #1
 800e4ae:	f7fb fdff 	bl	800a0b0 <disk_write>
 800e4b2:	4603      	mov	r3, r0
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d001      	beq.n	800e4bc <f_sync+0x60>
 800e4b8:	2301      	movs	r3, #1
 800e4ba:	e0e9      	b.n	800e690 <f_sync+0x234>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e4c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e4c6:	b2da      	uxtb	r2, r3
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800e4ce:	f7f8 fd93 	bl	8006ff8 <get_fattime>
 800e4d2:	6638      	str	r0, [r7, #96]	; 0x60
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800e4d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e4d6:	781b      	ldrb	r3, [r3, #0]
 800e4d8:	2b04      	cmp	r3, #4
 800e4da:	f040 808c 	bne.w	800e5f6 <f_sync+0x19a>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	4618      	mov	r0, r3
 800e4e2:	f7fc fe67 	bl	800b1b4 <fill_first_frag>
 800e4e6:	4603      	mov	r3, r0
 800e4e8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				if (res == FR_OK) {
 800e4ec:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d10a      	bne.n	800e50a <f_sync+0xae>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800e4f4:	6878      	ldr	r0, [r7, #4]
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e4fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e4fe:	4619      	mov	r1, r3
 800e500:	f7fc fe87 	bl	800b212 <fill_last_frag>
 800e504:	4603      	mov	r3, r0
 800e506:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
				if (res == FR_OK) {
 800e50a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e50e:	2b00      	cmp	r3, #0
 800e510:	f040 80bc 	bne.w	800e68c <f_sync+0x230>
					INIT_NAMBUF(fs);
					res = load_obj_dir(&dj, &fp->obj);	/* Load directory entry block */
 800e514:	687a      	ldr	r2, [r7, #4]
 800e516:	f107 0308 	add.w	r3, r7, #8
 800e51a:	4611      	mov	r1, r2
 800e51c:	4618      	mov	r0, r3
 800e51e:	f7fd fe51 	bl	800c1c4 <load_obj_dir>
 800e522:	4603      	mov	r3, r0
 800e524:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (res == FR_OK) {
 800e528:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	f040 80ad 	bne.w	800e68c <f_sync+0x230>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive bit */
 800e532:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e534:	695b      	ldr	r3, [r3, #20]
 800e536:	3304      	adds	r3, #4
 800e538:	781a      	ldrb	r2, [r3, #0]
 800e53a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e53c:	695b      	ldr	r3, [r3, #20]
 800e53e:	3304      	adds	r3, #4
 800e540:	f042 0220 	orr.w	r2, r2, #32
 800e544:	b2d2      	uxtb	r2, r2
 800e546:	701a      	strb	r2, [r3, #0]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation info */
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	79da      	ldrb	r2, [r3, #7]
 800e54c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e54e:	695b      	ldr	r3, [r3, #20]
 800e550:	3321      	adds	r3, #33	; 0x21
 800e552:	f042 0201 	orr.w	r2, r2, #1
 800e556:	b2d2      	uxtb	r2, r2
 800e558:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
 800e55a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e55c:	695b      	ldr	r3, [r3, #20]
 800e55e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	689b      	ldr	r3, [r3, #8]
 800e566:	4619      	mov	r1, r3
 800e568:	4610      	mov	r0, r2
 800e56a:	f7fb ff10 	bl	800a38e <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
 800e56e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e570:	695b      	ldr	r3, [r3, #20]
 800e572:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800e57c:	4608      	mov	r0, r1
 800e57e:	f7fb ff32 	bl	800a3e6 <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
 800e582:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e584:	695b      	ldr	r3, [r3, #20]
 800e586:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800e590:	4608      	mov	r0, r1
 800e592:	f7fb ff28 	bl	800a3e6 <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 800e596:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e598:	695b      	ldr	r3, [r3, #20]
 800e59a:	330c      	adds	r3, #12
 800e59c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e59e:	4618      	mov	r0, r3
 800e5a0:	f7fb fef5 	bl	800a38e <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
 800e5a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e5a6:	695b      	ldr	r3, [r3, #20]
 800e5a8:	3315      	adds	r3, #21
 800e5aa:	2200      	movs	r2, #0
 800e5ac:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 800e5ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e5b0:	695b      	ldr	r3, [r3, #20]
 800e5b2:	3310      	adds	r3, #16
 800e5b4:	2100      	movs	r1, #0
 800e5b6:	4618      	mov	r0, r3
 800e5b8:	f7fb fee9 	bl	800a38e <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
 800e5bc:	f107 0308 	add.w	r3, r7, #8
 800e5c0:	4618      	mov	r0, r3
 800e5c2:	f7fd fe35 	bl	800c230 <store_xdir>
 800e5c6:	4603      	mov	r3, r0
 800e5c8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800e5cc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d15b      	bne.n	800e68c <f_sync+0x230>
							res = sync_fs(fs);
 800e5d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e5d6:	4618      	mov	r0, r3
 800e5d8:	f7fc f9ea 	bl	800a9b0 <sync_fs>
 800e5dc:	4603      	mov	r3, r0
 800e5de:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fp->flag &= (BYTE)~FA_MODIFIED;
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e5e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e5ec:	b2da      	uxtb	r2, r3
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 800e5f4:	e04a      	b.n	800e68c <f_sync+0x230>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800e5f6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e5fc:	4619      	mov	r1, r3
 800e5fe:	4610      	mov	r0, r2
 800e600:	f7fc f9a8 	bl	800a954 <move_window>
 800e604:	4603      	mov	r3, r0
 800e606:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				if (res == FR_OK) {
 800e60a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d13c      	bne.n	800e68c <f_sync+0x230>
					dir = fp->dir_ptr;
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e616:	65fb      	str	r3, [r7, #92]	; 0x5c
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800e618:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e61a:	330b      	adds	r3, #11
 800e61c:	781a      	ldrb	r2, [r3, #0]
 800e61e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e620:	330b      	adds	r3, #11
 800e622:	f042 0220 	orr.w	r2, r2, #32
 800e626:	b2d2      	uxtb	r2, r2
 800e628:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	6818      	ldr	r0, [r3, #0]
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	689b      	ldr	r3, [r3, #8]
 800e632:	461a      	mov	r2, r3
 800e634:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800e636:	f7fd fa13 	bl	800ba60 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800e63a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e63c:	f103 001c 	add.w	r0, r3, #28
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800e646:	4613      	mov	r3, r2
 800e648:	4619      	mov	r1, r3
 800e64a:	f7fb fea0 	bl	800a38e <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800e64e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e650:	3316      	adds	r3, #22
 800e652:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e654:	4618      	mov	r0, r3
 800e656:	f7fb fe9a 	bl	800a38e <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800e65a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e65c:	3312      	adds	r3, #18
 800e65e:	2100      	movs	r1, #0
 800e660:	4618      	mov	r0, r3
 800e662:	f7fb fe79 	bl	800a358 <st_word>
					fs->wflag = 1;
 800e666:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e668:	2201      	movs	r2, #1
 800e66a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800e66c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e66e:	4618      	mov	r0, r3
 800e670:	f7fc f99e 	bl	800a9b0 <sync_fs>
 800e674:	4603      	mov	r3, r0
 800e676:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					fp->flag &= (BYTE)~FA_MODIFIED;
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e680:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e684:	b2da      	uxtb	r2, r3
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800e68c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800e690:	4618      	mov	r0, r3
 800e692:	3768      	adds	r7, #104	; 0x68
 800e694:	46bd      	mov	sp, r7
 800e696:	bd80      	pop	{r7, pc}

0800e698 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800e698:	b580      	push	{r7, lr}
 800e69a:	b084      	sub	sp, #16
 800e69c:	af00      	add	r7, sp, #0
 800e69e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800e6a0:	6878      	ldr	r0, [r7, #4]
 800e6a2:	f7ff fedb 	bl	800e45c <f_sync>
 800e6a6:	4603      	mov	r3, r0
 800e6a8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800e6aa:	7bfb      	ldrb	r3, [r7, #15]
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d118      	bne.n	800e6e2 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	f107 0208 	add.w	r2, r7, #8
 800e6b6:	4611      	mov	r1, r2
 800e6b8:	4618      	mov	r0, r3
 800e6ba:	f7ff f9a9 	bl	800da10 <validate>
 800e6be:	4603      	mov	r3, r0
 800e6c0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800e6c2:	7bfb      	ldrb	r3, [r7, #15]
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d10c      	bne.n	800e6e2 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6cc:	4618      	mov	r0, r3
 800e6ce:	f7fc f89d 	bl	800a80c <dec_lock>
 800e6d2:	4603      	mov	r3, r0
 800e6d4:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800e6d6:	7bfb      	ldrb	r3, [r7, #15]
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d102      	bne.n	800e6e2 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	2200      	movs	r2, #0
 800e6e0:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800e6e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6e4:	4618      	mov	r0, r3
 800e6e6:	3710      	adds	r7, #16
 800e6e8:	46bd      	mov	sp, r7
 800e6ea:	bd80      	pop	{r7, pc}

0800e6ec <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800e6ec:	b580      	push	{r7, lr}
 800e6ee:	b086      	sub	sp, #24
 800e6f0:	af00      	add	r7, sp, #0
 800e6f2:	6078      	str	r0, [r7, #4]
 800e6f4:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d101      	bne.n	800e700 <f_opendir+0x14>
 800e6fc:	2309      	movs	r3, #9
 800e6fe:	e09a      	b.n	800e836 <f_opendir+0x14a>

	/* Get logical drive */
	obj = &dp->obj;
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800e704:	f107 010c 	add.w	r1, r7, #12
 800e708:	463b      	mov	r3, r7
 800e70a:	2200      	movs	r2, #0
 800e70c:	4618      	mov	r0, r3
 800e70e:	f7fe fde5 	bl	800d2dc <find_volume>
 800e712:	4603      	mov	r3, r0
 800e714:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e716:	7dfb      	ldrb	r3, [r7, #23]
 800e718:	2b00      	cmp	r3, #0
 800e71a:	f040 8085 	bne.w	800e828 <f_opendir+0x13c>
		obj->fs = fs;
 800e71e:	68fa      	ldr	r2, [r7, #12]
 800e720:	693b      	ldr	r3, [r7, #16]
 800e722:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800e724:	683b      	ldr	r3, [r7, #0]
 800e726:	4619      	mov	r1, r3
 800e728:	6878      	ldr	r0, [r7, #4]
 800e72a:	f7fe fc81 	bl	800d030 <follow_path>
 800e72e:	4603      	mov	r3, r0
 800e730:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800e732:	7dfb      	ldrb	r3, [r7, #23]
 800e734:	2b00      	cmp	r3, #0
 800e736:	d172      	bne.n	800e81e <f_opendir+0x132>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800e73e:	b25b      	sxtb	r3, r3
 800e740:	2b00      	cmp	r3, #0
 800e742:	db47      	blt.n	800e7d4 <f_opendir+0xe8>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800e744:	693b      	ldr	r3, [r7, #16]
 800e746:	799b      	ldrb	r3, [r3, #6]
 800e748:	f003 0310 	and.w	r3, r3, #16
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d03f      	beq.n	800e7d0 <f_opendir+0xe4>
#if _FS_EXFAT
					if (fs->fs_type == FS_EXFAT) {
 800e750:	68fb      	ldr	r3, [r7, #12]
 800e752:	781b      	ldrb	r3, [r3, #0]
 800e754:	2b04      	cmp	r3, #4
 800e756:	d130      	bne.n	800e7ba <f_opendir+0xce>
						obj->c_scl = obj->sclust;							/* Get containing directory inforamation */
 800e758:	693b      	ldr	r3, [r7, #16]
 800e75a:	689a      	ldr	r2, [r3, #8]
 800e75c:	693b      	ldr	r3, [r7, #16]
 800e75e:	621a      	str	r2, [r3, #32]
						obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 800e760:	693b      	ldr	r3, [r7, #16]
 800e762:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800e766:	4613      	mov	r3, r2
 800e768:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800e76c:	693a      	ldr	r2, [r7, #16]
 800e76e:	79d2      	ldrb	r2, [r2, #7]
 800e770:	431a      	orrs	r2, r3
 800e772:	693b      	ldr	r3, [r7, #16]
 800e774:	625a      	str	r2, [r3, #36]	; 0x24
						obj->c_ofs = dp->blk_ofs;
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e77a:	693b      	ldr	r3, [r7, #16]
 800e77c:	629a      	str	r2, [r3, #40]	; 0x28
						obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	695b      	ldr	r3, [r3, #20]
 800e782:	3334      	adds	r3, #52	; 0x34
 800e784:	4618      	mov	r0, r3
 800e786:	f7fb fce9 	bl	800a15c <ld_dword>
 800e78a:	4602      	mov	r2, r0
 800e78c:	693b      	ldr	r3, [r7, #16]
 800e78e:	609a      	str	r2, [r3, #8]
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	695b      	ldr	r3, [r3, #20]
 800e794:	3338      	adds	r3, #56	; 0x38
 800e796:	4618      	mov	r0, r3
 800e798:	f7fb fd03 	bl	800a1a2 <ld_qword>
 800e79c:	4602      	mov	r2, r0
 800e79e:	460b      	mov	r3, r1
 800e7a0:	6939      	ldr	r1, [r7, #16]
 800e7a2:	e9c1 2304 	strd	r2, r3, [r1, #16]
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	695b      	ldr	r3, [r3, #20]
 800e7aa:	3321      	adds	r3, #33	; 0x21
 800e7ac:	781b      	ldrb	r3, [r3, #0]
 800e7ae:	f003 0302 	and.w	r3, r3, #2
 800e7b2:	b2da      	uxtb	r2, r3
 800e7b4:	693b      	ldr	r3, [r7, #16]
 800e7b6:	71da      	strb	r2, [r3, #7]
 800e7b8:	e00c      	b.n	800e7d4 <f_opendir+0xe8>
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800e7ba:	68fa      	ldr	r2, [r7, #12]
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e7c0:	4619      	mov	r1, r3
 800e7c2:	4610      	mov	r0, r2
 800e7c4:	f7fd f92d 	bl	800ba22 <ld_clust>
 800e7c8:	4602      	mov	r2, r0
 800e7ca:	693b      	ldr	r3, [r7, #16]
 800e7cc:	609a      	str	r2, [r3, #8]
 800e7ce:	e001      	b.n	800e7d4 <f_opendir+0xe8>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800e7d0:	2305      	movs	r3, #5
 800e7d2:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800e7d4:	7dfb      	ldrb	r3, [r7, #23]
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d121      	bne.n	800e81e <f_opendir+0x132>
				obj->id = fs->id;
 800e7da:	68fb      	ldr	r3, [r7, #12]
 800e7dc:	88da      	ldrh	r2, [r3, #6]
 800e7de:	693b      	ldr	r3, [r7, #16]
 800e7e0:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800e7e2:	2100      	movs	r1, #0
 800e7e4:	6878      	ldr	r0, [r7, #4]
 800e7e6:	f7fc ff46 	bl	800b676 <dir_sdi>
 800e7ea:	4603      	mov	r3, r0
 800e7ec:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800e7ee:	7dfb      	ldrb	r3, [r7, #23]
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d114      	bne.n	800e81e <f_opendir+0x132>
					if (obj->sclust) {
 800e7f4:	693b      	ldr	r3, [r7, #16]
 800e7f6:	689b      	ldr	r3, [r3, #8]
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d00d      	beq.n	800e818 <f_opendir+0x12c>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800e7fc:	2100      	movs	r1, #0
 800e7fe:	6878      	ldr	r0, [r7, #4]
 800e800:	f7fb ff76 	bl	800a6f0 <inc_lock>
 800e804:	4602      	mov	r2, r0
 800e806:	693b      	ldr	r3, [r7, #16]
 800e808:	62da      	str	r2, [r3, #44]	; 0x2c
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800e80a:	693b      	ldr	r3, [r7, #16]
 800e80c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d105      	bne.n	800e81e <f_opendir+0x132>
 800e812:	2312      	movs	r3, #18
 800e814:	75fb      	strb	r3, [r7, #23]
 800e816:	e002      	b.n	800e81e <f_opendir+0x132>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800e818:	693b      	ldr	r3, [r7, #16]
 800e81a:	2200      	movs	r2, #0
 800e81c:	62da      	str	r2, [r3, #44]	; 0x2c
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800e81e:	7dfb      	ldrb	r3, [r7, #23]
 800e820:	2b04      	cmp	r3, #4
 800e822:	d101      	bne.n	800e828 <f_opendir+0x13c>
 800e824:	2305      	movs	r3, #5
 800e826:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800e828:	7dfb      	ldrb	r3, [r7, #23]
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d002      	beq.n	800e834 <f_opendir+0x148>
 800e82e:	693b      	ldr	r3, [r7, #16]
 800e830:	2200      	movs	r2, #0
 800e832:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800e834:	7dfb      	ldrb	r3, [r7, #23]
}
 800e836:	4618      	mov	r0, r3
 800e838:	3718      	adds	r7, #24
 800e83a:	46bd      	mov	sp, r7
 800e83c:	bd80      	pop	{r7, pc}

0800e83e <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800e83e:	b580      	push	{r7, lr}
 800e840:	b084      	sub	sp, #16
 800e842:	af00      	add	r7, sp, #0
 800e844:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	f107 0208 	add.w	r2, r7, #8
 800e84c:	4611      	mov	r1, r2
 800e84e:	4618      	mov	r0, r3
 800e850:	f7ff f8de 	bl	800da10 <validate>
 800e854:	4603      	mov	r3, r0
 800e856:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800e858:	7bfb      	ldrb	r3, [r7, #15]
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d110      	bne.n	800e880 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e862:	2b00      	cmp	r3, #0
 800e864:	d006      	beq.n	800e874 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e86a:	4618      	mov	r0, r3
 800e86c:	f7fb ffce 	bl	800a80c <dec_lock>
 800e870:	4603      	mov	r3, r0
 800e872:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800e874:	7bfb      	ldrb	r3, [r7, #15]
 800e876:	2b00      	cmp	r3, #0
 800e878:	d102      	bne.n	800e880 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	2200      	movs	r2, #0
 800e87e:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800e880:	7bfb      	ldrb	r3, [r7, #15]
}
 800e882:	4618      	mov	r0, r3
 800e884:	3710      	adds	r7, #16
 800e886:	46bd      	mov	sp, r7
 800e888:	bd80      	pop	{r7, pc}

0800e88a <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800e88a:	b580      	push	{r7, lr}
 800e88c:	b084      	sub	sp, #16
 800e88e:	af00      	add	r7, sp, #0
 800e890:	6078      	str	r0, [r7, #4]
 800e892:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	f107 0208 	add.w	r2, r7, #8
 800e89a:	4611      	mov	r1, r2
 800e89c:	4618      	mov	r0, r3
 800e89e:	f7ff f8b7 	bl	800da10 <validate>
 800e8a2:	4603      	mov	r3, r0
 800e8a4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800e8a6:	7bfb      	ldrb	r3, [r7, #15]
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d126      	bne.n	800e8fa <f_readdir+0x70>
		if (!fno) {
 800e8ac:	683b      	ldr	r3, [r7, #0]
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d106      	bne.n	800e8c0 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800e8b2:	2100      	movs	r1, #0
 800e8b4:	6878      	ldr	r0, [r7, #4]
 800e8b6:	f7fc fede 	bl	800b676 <dir_sdi>
 800e8ba:	4603      	mov	r3, r0
 800e8bc:	73fb      	strb	r3, [r7, #15]
 800e8be:	e01c      	b.n	800e8fa <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800e8c0:	2100      	movs	r1, #0
 800e8c2:	6878      	ldr	r0, [r7, #4]
 800e8c4:	f7fd fd76 	bl	800c3b4 <dir_read>
 800e8c8:	4603      	mov	r3, r0
 800e8ca:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800e8cc:	7bfb      	ldrb	r3, [r7, #15]
 800e8ce:	2b04      	cmp	r3, #4
 800e8d0:	d101      	bne.n	800e8d6 <f_readdir+0x4c>
 800e8d2:	2300      	movs	r3, #0
 800e8d4:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800e8d6:	7bfb      	ldrb	r3, [r7, #15]
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d10e      	bne.n	800e8fa <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800e8dc:	6839      	ldr	r1, [r7, #0]
 800e8de:	6878      	ldr	r0, [r7, #4]
 800e8e0:	f7fe f902 	bl	800cae8 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800e8e4:	2100      	movs	r1, #0
 800e8e6:	6878      	ldr	r0, [r7, #4]
 800e8e8:	f7fc ff59 	bl	800b79e <dir_next>
 800e8ec:	4603      	mov	r3, r0
 800e8ee:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800e8f0:	7bfb      	ldrb	r3, [r7, #15]
 800e8f2:	2b04      	cmp	r3, #4
 800e8f4:	d101      	bne.n	800e8fa <f_readdir+0x70>
 800e8f6:	2300      	movs	r3, #0
 800e8f8:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800e8fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800e8fc:	4618      	mov	r0, r3
 800e8fe:	3710      	adds	r7, #16
 800e900:	46bd      	mov	sp, r7
 800e902:	bd80      	pop	{r7, pc}

0800e904 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800e904:	b580      	push	{r7, lr}
 800e906:	b098      	sub	sp, #96	; 0x60
 800e908:	af00      	add	r7, sp, #0
 800e90a:	6078      	str	r0, [r7, #4]
 800e90c:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800e90e:	f107 0108 	add.w	r1, r7, #8
 800e912:	1d3b      	adds	r3, r7, #4
 800e914:	2200      	movs	r2, #0
 800e916:	4618      	mov	r0, r3
 800e918:	f7fe fce0 	bl	800d2dc <find_volume>
 800e91c:	4603      	mov	r3, r0
 800e91e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800e922:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e926:	2b00      	cmp	r3, #0
 800e928:	d11f      	bne.n	800e96a <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800e92a:	687a      	ldr	r2, [r7, #4]
 800e92c:	f107 0308 	add.w	r3, r7, #8
 800e930:	4611      	mov	r1, r2
 800e932:	4618      	mov	r0, r3
 800e934:	f7fe fb7c 	bl	800d030 <follow_path>
 800e938:	4603      	mov	r3, r0
 800e93a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (res == FR_OK) {				/* Follow completed */
 800e93e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e942:	2b00      	cmp	r3, #0
 800e944:	d111      	bne.n	800e96a <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800e946:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800e94a:	b25b      	sxtb	r3, r3
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	da03      	bge.n	800e958 <f_stat+0x54>
				res = FR_INVALID_NAME;
 800e950:	2306      	movs	r3, #6
 800e952:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800e956:	e008      	b.n	800e96a <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800e958:	683b      	ldr	r3, [r7, #0]
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d005      	beq.n	800e96a <f_stat+0x66>
 800e95e:	f107 0308 	add.w	r3, r7, #8
 800e962:	6839      	ldr	r1, [r7, #0]
 800e964:	4618      	mov	r0, r3
 800e966:	f7fe f8bf 	bl	800cae8 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 800e96a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800e96e:	4618      	mov	r0, r3
 800e970:	3760      	adds	r7, #96	; 0x60
 800e972:	46bd      	mov	sp, r7
 800e974:	bd80      	pop	{r7, pc}

0800e976 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800e976:	b580      	push	{r7, lr}
 800e978:	b09a      	sub	sp, #104	; 0x68
 800e97a:	af00      	add	r7, sp, #0
 800e97c:	60f8      	str	r0, [r7, #12]
 800e97e:	60b9      	str	r1, [r7, #8]
 800e980:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800e982:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800e986:	f107 030c 	add.w	r3, r7, #12
 800e98a:	2200      	movs	r2, #0
 800e98c:	4618      	mov	r0, r3
 800e98e:	f7fe fca5 	bl	800d2dc <find_volume>
 800e992:	4603      	mov	r3, r0
 800e994:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800e998:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	f040 80eb 	bne.w	800eb78 <f_getfree+0x202>
		*fatfs = fs;				/* Return ptr to the fs object */
 800e9a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800e9a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e9aa:	69da      	ldr	r2, [r3, #28]
 800e9ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e9ae:	6a1b      	ldr	r3, [r3, #32]
 800e9b0:	3b02      	subs	r3, #2
 800e9b2:	429a      	cmp	r2, r3
 800e9b4:	d804      	bhi.n	800e9c0 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800e9b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e9b8:	69da      	ldr	r2, [r3, #28]
 800e9ba:	68bb      	ldr	r3, [r7, #8]
 800e9bc:	601a      	str	r2, [r3, #0]
 800e9be:	e0db      	b.n	800eb78 <f_getfree+0x202>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800e9c0:	2300      	movs	r3, #0
 800e9c2:	663b      	str	r3, [r7, #96]	; 0x60
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800e9c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e9c6:	781b      	ldrb	r3, [r3, #0]
 800e9c8:	2b01      	cmp	r3, #1
 800e9ca:	d128      	bne.n	800ea1e <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800e9cc:	2302      	movs	r3, #2
 800e9ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e9d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e9d2:	613b      	str	r3, [r7, #16]
				do {
					stat = get_fat(&obj, clst);
 800e9d4:	f107 0310 	add.w	r3, r7, #16
 800e9d8:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800e9da:	4618      	mov	r0, r3
 800e9dc:	f7fc f878 	bl	800aad0 <get_fat>
 800e9e0:	6478      	str	r0, [r7, #68]	; 0x44
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800e9e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e9e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e9e8:	d103      	bne.n	800e9f2 <f_getfree+0x7c>
 800e9ea:	2301      	movs	r3, #1
 800e9ec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800e9f0:	e0b5      	b.n	800eb5e <f_getfree+0x1e8>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800e9f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e9f4:	2b01      	cmp	r3, #1
 800e9f6:	d103      	bne.n	800ea00 <f_getfree+0x8a>
 800e9f8:	2302      	movs	r3, #2
 800e9fa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800e9fe:	e0ae      	b.n	800eb5e <f_getfree+0x1e8>
					if (stat == 0) nfree++;
 800ea00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d102      	bne.n	800ea0c <f_getfree+0x96>
 800ea06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ea08:	3301      	adds	r3, #1
 800ea0a:	663b      	str	r3, [r7, #96]	; 0x60
				} while (++clst < fs->n_fatent);
 800ea0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ea0e:	3301      	adds	r3, #1
 800ea10:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ea12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ea14:	6a1b      	ldr	r3, [r3, #32]
 800ea16:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ea18:	429a      	cmp	r2, r3
 800ea1a:	d3db      	bcc.n	800e9d4 <f_getfree+0x5e>
 800ea1c:	e09f      	b.n	800eb5e <f_getfree+0x1e8>
			} else {
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {	/* exFAT: Scan bitmap table */
 800ea1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ea20:	781b      	ldrb	r3, [r3, #0]
 800ea22:	2b04      	cmp	r3, #4
 800ea24:	d14b      	bne.n	800eabe <f_getfree+0x148>
					BYTE bm;
					UINT b;

					clst = fs->n_fatent - 2;
 800ea26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ea28:	6a1b      	ldr	r3, [r3, #32]
 800ea2a:	3b02      	subs	r3, #2
 800ea2c:	65fb      	str	r3, [r7, #92]	; 0x5c
					sect = fs->database;
 800ea2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ea30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea32:	65bb      	str	r3, [r7, #88]	; 0x58
					i = 0;
 800ea34:	2300      	movs	r3, #0
 800ea36:	657b      	str	r3, [r7, #84]	; 0x54
					do {
						if (i == 0 && (res = move_window(fs, sect++)) != FR_OK) break;
 800ea38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d10d      	bne.n	800ea5a <f_getfree+0xe4>
 800ea3e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800ea40:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ea42:	1c5a      	adds	r2, r3, #1
 800ea44:	65ba      	str	r2, [r7, #88]	; 0x58
 800ea46:	4619      	mov	r1, r3
 800ea48:	f7fb ff84 	bl	800a954 <move_window>
 800ea4c:	4603      	mov	r3, r0
 800ea4e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800ea52:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d17e      	bne.n	800eb58 <f_getfree+0x1e2>
						for (b = 8, bm = fs->win[i]; b && clst; b--, clst--) {
 800ea5a:	2308      	movs	r3, #8
 800ea5c:	64bb      	str	r3, [r7, #72]	; 0x48
 800ea5e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ea60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ea62:	4413      	add	r3, r2
 800ea64:	333c      	adds	r3, #60	; 0x3c
 800ea66:	781b      	ldrb	r3, [r3, #0]
 800ea68:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800ea6c:	e013      	b.n	800ea96 <f_getfree+0x120>
							if (!(bm & 1)) nfree++;
 800ea6e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ea72:	f003 0301 	and.w	r3, r3, #1
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d102      	bne.n	800ea80 <f_getfree+0x10a>
 800ea7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ea7c:	3301      	adds	r3, #1
 800ea7e:	663b      	str	r3, [r7, #96]	; 0x60
							bm >>= 1;
 800ea80:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ea84:	085b      	lsrs	r3, r3, #1
 800ea86:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
						for (b = 8, bm = fs->win[i]; b && clst; b--, clst--) {
 800ea8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ea8c:	3b01      	subs	r3, #1
 800ea8e:	64bb      	str	r3, [r7, #72]	; 0x48
 800ea90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ea92:	3b01      	subs	r3, #1
 800ea94:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ea96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d002      	beq.n	800eaa2 <f_getfree+0x12c>
 800ea9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d1e5      	bne.n	800ea6e <f_getfree+0xf8>
						}
						i = (i + 1) % SS(fs);
 800eaa2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eaa4:	3301      	adds	r3, #1
 800eaa6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800eaa8:	8992      	ldrh	r2, [r2, #12]
 800eaaa:	fbb3 f1f2 	udiv	r1, r3, r2
 800eaae:	fb01 f202 	mul.w	r2, r1, r2
 800eab2:	1a9b      	subs	r3, r3, r2
 800eab4:	657b      	str	r3, [r7, #84]	; 0x54
					} while (clst);
 800eab6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d1bd      	bne.n	800ea38 <f_getfree+0xc2>
 800eabc:	e04f      	b.n	800eb5e <f_getfree+0x1e8>
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800eabe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eac0:	6a1b      	ldr	r3, [r3, #32]
 800eac2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800eac4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eac8:	65bb      	str	r3, [r7, #88]	; 0x58
					i = 0; p = 0;
 800eaca:	2300      	movs	r3, #0
 800eacc:	657b      	str	r3, [r7, #84]	; 0x54
 800eace:	2300      	movs	r3, #0
 800ead0:	653b      	str	r3, [r7, #80]	; 0x50
					do {
						if (i == 0) {
 800ead2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d113      	bne.n	800eb00 <f_getfree+0x18a>
							res = move_window(fs, sect++);
 800ead8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800eada:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800eadc:	1c5a      	adds	r2, r3, #1
 800eade:	65ba      	str	r2, [r7, #88]	; 0x58
 800eae0:	4619      	mov	r1, r3
 800eae2:	f7fb ff37 	bl	800a954 <move_window>
 800eae6:	4603      	mov	r3, r0
 800eae8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							if (res != FR_OK) break;
 800eaec:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d133      	bne.n	800eb5c <f_getfree+0x1e6>
							p = fs->win;
 800eaf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eaf6:	333c      	adds	r3, #60	; 0x3c
 800eaf8:	653b      	str	r3, [r7, #80]	; 0x50
							i = SS(fs);
 800eafa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eafc:	899b      	ldrh	r3, [r3, #12]
 800eafe:	657b      	str	r3, [r7, #84]	; 0x54
						}
						if (fs->fs_type == FS_FAT16) {
 800eb00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eb02:	781b      	ldrb	r3, [r3, #0]
 800eb04:	2b02      	cmp	r3, #2
 800eb06:	d10f      	bne.n	800eb28 <f_getfree+0x1b2>
							if (ld_word(p) == 0) nfree++;
 800eb08:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800eb0a:	f7fb fb0f 	bl	800a12c <ld_word>
 800eb0e:	4603      	mov	r3, r0
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d102      	bne.n	800eb1a <f_getfree+0x1a4>
 800eb14:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800eb16:	3301      	adds	r3, #1
 800eb18:	663b      	str	r3, [r7, #96]	; 0x60
							p += 2; i -= 2;
 800eb1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eb1c:	3302      	adds	r3, #2
 800eb1e:	653b      	str	r3, [r7, #80]	; 0x50
 800eb20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eb22:	3b02      	subs	r3, #2
 800eb24:	657b      	str	r3, [r7, #84]	; 0x54
 800eb26:	e010      	b.n	800eb4a <f_getfree+0x1d4>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800eb28:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800eb2a:	f7fb fb17 	bl	800a15c <ld_dword>
 800eb2e:	4603      	mov	r3, r0
 800eb30:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d102      	bne.n	800eb3e <f_getfree+0x1c8>
 800eb38:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800eb3a:	3301      	adds	r3, #1
 800eb3c:	663b      	str	r3, [r7, #96]	; 0x60
							p += 4; i -= 4;
 800eb3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eb40:	3304      	adds	r3, #4
 800eb42:	653b      	str	r3, [r7, #80]	; 0x50
 800eb44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eb46:	3b04      	subs	r3, #4
 800eb48:	657b      	str	r3, [r7, #84]	; 0x54
						}
					} while (--clst);
 800eb4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800eb4c:	3b01      	subs	r3, #1
 800eb4e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800eb50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d1bd      	bne.n	800ead2 <f_getfree+0x15c>
 800eb56:	e002      	b.n	800eb5e <f_getfree+0x1e8>
						if (i == 0 && (res = move_window(fs, sect++)) != FR_OK) break;
 800eb58:	bf00      	nop
 800eb5a:	e000      	b.n	800eb5e <f_getfree+0x1e8>
							if (res != FR_OK) break;
 800eb5c:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800eb5e:	68bb      	ldr	r3, [r7, #8]
 800eb60:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800eb62:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800eb64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eb66:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800eb68:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800eb6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eb6c:	791a      	ldrb	r2, [r3, #4]
 800eb6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eb70:	f042 0201 	orr.w	r2, r2, #1
 800eb74:	b2d2      	uxtb	r2, r2
 800eb76:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800eb78:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800eb7c:	4618      	mov	r0, r3
 800eb7e:	3768      	adds	r7, #104	; 0x68
 800eb80:	46bd      	mov	sp, r7
 800eb82:	bd80      	pop	{r7, pc}

0800eb84 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 800eb84:	b5b0      	push	{r4, r5, r7, lr}
 800eb86:	b0a0      	sub	sp, #128	; 0x80
 800eb88:	af00      	add	r7, sp, #0
 800eb8a:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800eb8c:	f107 010c 	add.w	r1, r7, #12
 800eb90:	1d3b      	adds	r3, r7, #4
 800eb92:	2202      	movs	r2, #2
 800eb94:	4618      	mov	r0, r3
 800eb96:	f7fe fba1 	bl	800d2dc <find_volume>
 800eb9a:	4603      	mov	r3, r0
 800eb9c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	dj.obj.fs = fs;
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	613b      	str	r3, [r7, #16]
	if (res == FR_OK) {
 800eba4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	f040 8133 	bne.w	800ee14 <f_mkdir+0x290>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 800ebae:	687a      	ldr	r2, [r7, #4]
 800ebb0:	f107 0310 	add.w	r3, r7, #16
 800ebb4:	4611      	mov	r1, r2
 800ebb6:	4618      	mov	r0, r3
 800ebb8:	f7fe fa3a 	bl	800d030 <follow_path>
 800ebbc:	4603      	mov	r3, r0
 800ebbe:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 800ebc2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d102      	bne.n	800ebd0 <f_mkdir+0x4c>
 800ebca:	2308      	movs	r3, #8
 800ebcc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 800ebd0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ebd4:	2b04      	cmp	r3, #4
 800ebd6:	f040 811d 	bne.w	800ee14 <f_mkdir+0x290>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 800ebda:	f107 0310 	add.w	r3, r7, #16
 800ebde:	2100      	movs	r1, #0
 800ebe0:	4618      	mov	r0, r3
 800ebe2:	f7fc fbfb 	bl	800b3dc <create_chain>
 800ebe6:	66f8      	str	r0, [r7, #108]	; 0x6c
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	895b      	ldrh	r3, [r3, #10]
 800ebec:	461a      	mov	r2, r3
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	899b      	ldrh	r3, [r3, #12]
 800ebf2:	fb02 f303 	mul.w	r3, r2, r3
 800ebf6:	2200      	movs	r2, #0
 800ebf8:	461c      	mov	r4, r3
 800ebfa:	4615      	mov	r5, r2
 800ebfc:	e9c7 4508 	strd	r4, r5, [r7, #32]
			res = FR_OK;
 800ec00:	2300      	movs	r3, #0
 800ec02:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 800ec06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d102      	bne.n	800ec12 <f_mkdir+0x8e>
 800ec0c:	2307      	movs	r3, #7
 800ec0e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (dcl == 1) res = FR_INT_ERR;
 800ec12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ec14:	2b01      	cmp	r3, #1
 800ec16:	d102      	bne.n	800ec1e <f_mkdir+0x9a>
 800ec18:	2302      	movs	r3, #2
 800ec1a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 800ec1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ec20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ec24:	d102      	bne.n	800ec2c <f_mkdir+0xa8>
 800ec26:	2301      	movs	r3, #1
 800ec28:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 800ec2c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d106      	bne.n	800ec42 <f_mkdir+0xbe>
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	4618      	mov	r0, r3
 800ec38:	f7fb fe48 	bl	800a8cc <sync_window>
 800ec3c:	4603      	mov	r3, r0
 800ec3e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			tm = GET_FATTIME();
 800ec42:	f7f8 f9d9 	bl	8006ff8 <get_fattime>
 800ec46:	66b8      	str	r0, [r7, #104]	; 0x68
			if (res == FR_OK) {					/* Initialize the new directory table */
 800ec48:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d170      	bne.n	800ed32 <f_mkdir+0x1ae>
				dsc = clust2sect(fs, dcl);
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800ec54:	4618      	mov	r0, r3
 800ec56:	f7fb ff1b 	bl	800aa90 <clust2sect>
 800ec5a:	6778      	str	r0, [r7, #116]	; 0x74
				dir = fs->win;
 800ec5c:	68fb      	ldr	r3, [r7, #12]
 800ec5e:	333c      	adds	r3, #60	; 0x3c
 800ec60:	667b      	str	r3, [r7, #100]	; 0x64
				mem_set(dir, 0, SS(fs));
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	899b      	ldrh	r3, [r3, #12]
 800ec66:	461a      	mov	r2, r3
 800ec68:	2100      	movs	r1, #0
 800ec6a:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800ec6c:	f7fb fc64 	bl	800a538 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800ec70:	68fb      	ldr	r3, [r7, #12]
 800ec72:	781b      	ldrb	r3, [r3, #0]
 800ec74:	2b04      	cmp	r3, #4
 800ec76:	d036      	beq.n	800ece6 <f_mkdir+0x162>
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 800ec78:	220b      	movs	r2, #11
 800ec7a:	2120      	movs	r1, #32
 800ec7c:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800ec7e:	f7fb fc5b 	bl	800a538 <mem_set>
					dir[DIR_Name] = '.';
 800ec82:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ec84:	222e      	movs	r2, #46	; 0x2e
 800ec86:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 800ec88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ec8a:	330b      	adds	r3, #11
 800ec8c:	2210      	movs	r2, #16
 800ec8e:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 800ec90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ec92:	3316      	adds	r3, #22
 800ec94:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ec96:	4618      	mov	r0, r3
 800ec98:	f7fb fb79 	bl	800a38e <st_dword>
					st_clust(fs, dir, dcl);
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800eca0:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800eca2:	4618      	mov	r0, r3
 800eca4:	f7fc fedc 	bl	800ba60 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 800eca8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ecaa:	3320      	adds	r3, #32
 800ecac:	2220      	movs	r2, #32
 800ecae:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800ecb0:	4618      	mov	r0, r3
 800ecb2:	f7fb fc20 	bl	800a4f6 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 800ecb6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ecb8:	3321      	adds	r3, #33	; 0x21
 800ecba:	222e      	movs	r2, #46	; 0x2e
 800ecbc:	701a      	strb	r2, [r3, #0]
 800ecbe:	69bb      	ldr	r3, [r7, #24]
 800ecc0:	673b      	str	r3, [r7, #112]	; 0x70
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 800ecc2:	68fb      	ldr	r3, [r7, #12]
 800ecc4:	781b      	ldrb	r3, [r3, #0]
 800ecc6:	2b03      	cmp	r3, #3
 800ecc8:	d106      	bne.n	800ecd8 <f_mkdir+0x154>
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ecce:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800ecd0:	429a      	cmp	r2, r3
 800ecd2:	d101      	bne.n	800ecd8 <f_mkdir+0x154>
 800ecd4:	2300      	movs	r3, #0
 800ecd6:	673b      	str	r3, [r7, #112]	; 0x70
					st_clust(fs, dir + SZDIRE, pcl);
 800ecd8:	68f8      	ldr	r0, [r7, #12]
 800ecda:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ecdc:	3320      	adds	r3, #32
 800ecde:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800ece0:	4619      	mov	r1, r3
 800ece2:	f7fc febd 	bl	800ba60 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	895b      	ldrh	r3, [r3, #10]
 800ecea:	67bb      	str	r3, [r7, #120]	; 0x78
 800ecec:	e01c      	b.n	800ed28 <f_mkdir+0x1a4>
					fs->winsect = dsc++;
 800ecee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ecf0:	1c5a      	adds	r2, r3, #1
 800ecf2:	677a      	str	r2, [r7, #116]	; 0x74
 800ecf4:	68fa      	ldr	r2, [r7, #12]
 800ecf6:	6393      	str	r3, [r2, #56]	; 0x38
					fs->wflag = 1;
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	2201      	movs	r2, #1
 800ecfc:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 800ecfe:	68fb      	ldr	r3, [r7, #12]
 800ed00:	4618      	mov	r0, r3
 800ed02:	f7fb fde3 	bl	800a8cc <sync_window>
 800ed06:	4603      	mov	r3, r0
 800ed08:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
					if (res != FR_OK) break;
 800ed0c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d10d      	bne.n	800ed30 <f_mkdir+0x1ac>
					mem_set(dir, 0, SS(fs));
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	899b      	ldrh	r3, [r3, #12]
 800ed18:	461a      	mov	r2, r3
 800ed1a:	2100      	movs	r1, #0
 800ed1c:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800ed1e:	f7fb fc0b 	bl	800a538 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800ed22:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ed24:	3b01      	subs	r3, #1
 800ed26:	67bb      	str	r3, [r7, #120]	; 0x78
 800ed28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d1df      	bne.n	800ecee <f_mkdir+0x16a>
 800ed2e:	e000      	b.n	800ed32 <f_mkdir+0x1ae>
					if (res != FR_OK) break;
 800ed30:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 800ed32:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d107      	bne.n	800ed4a <f_mkdir+0x1c6>
				res = dir_register(&dj);	/* Register the object to the directoy */
 800ed3a:	f107 0310 	add.w	r3, r7, #16
 800ed3e:	4618      	mov	r0, r3
 800ed40:	f7fd fd28 	bl	800c794 <dir_register>
 800ed44:	4603      	mov	r3, r0
 800ed46:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			}
			if (res == FR_OK) {
 800ed4a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	d159      	bne.n	800ee06 <f_mkdir+0x282>
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {	/* Initialize directory entry block */
 800ed52:	68fb      	ldr	r3, [r7, #12]
 800ed54:	781b      	ldrb	r3, [r3, #0]
 800ed56:	2b04      	cmp	r3, #4
 800ed58:	d134      	bne.n	800edc4 <f_mkdir+0x240>
					st_dword(fs->dirbuf + XDIR_ModTime, tm);	/* Created time */
 800ed5a:	68fb      	ldr	r3, [r7, #12]
 800ed5c:	695b      	ldr	r3, [r3, #20]
 800ed5e:	330c      	adds	r3, #12
 800ed60:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ed62:	4618      	mov	r0, r3
 800ed64:	f7fb fb13 	bl	800a38e <st_dword>
					st_dword(fs->dirbuf + XDIR_FstClus, dcl);	/* Table start cluster */
 800ed68:	68fb      	ldr	r3, [r7, #12]
 800ed6a:	695b      	ldr	r3, [r3, #20]
 800ed6c:	3334      	adds	r3, #52	; 0x34
 800ed6e:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800ed70:	4618      	mov	r0, r3
 800ed72:	f7fb fb0c 	bl	800a38e <st_dword>
					st_dword(fs->dirbuf + XDIR_FileSize, (DWORD)dj.obj.objsize);	/* File size needs to be valid */
 800ed76:	68fb      	ldr	r3, [r7, #12]
 800ed78:	695b      	ldr	r3, [r3, #20]
 800ed7a:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800ed7e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ed82:	4613      	mov	r3, r2
 800ed84:	4619      	mov	r1, r3
 800ed86:	f7fb fb02 	bl	800a38e <st_dword>
					st_dword(fs->dirbuf + XDIR_ValidFileSize, (DWORD)dj.obj.objsize);
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	695b      	ldr	r3, [r3, #20]
 800ed8e:	f103 0028 	add.w	r0, r3, #40	; 0x28
 800ed92:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ed96:	4613      	mov	r3, r2
 800ed98:	4619      	mov	r1, r3
 800ed9a:	f7fb faf8 	bl	800a38e <st_dword>
					fs->dirbuf[XDIR_GenFlags] = 3;				/* Initialize the object flag (contiguous) */
 800ed9e:	68fb      	ldr	r3, [r7, #12]
 800eda0:	695b      	ldr	r3, [r3, #20]
 800eda2:	3321      	adds	r3, #33	; 0x21
 800eda4:	2203      	movs	r2, #3
 800eda6:	701a      	strb	r2, [r3, #0]
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
 800eda8:	68fb      	ldr	r3, [r7, #12]
 800edaa:	695b      	ldr	r3, [r3, #20]
 800edac:	3304      	adds	r3, #4
 800edae:	2210      	movs	r2, #16
 800edb0:	701a      	strb	r2, [r3, #0]
					res = store_xdir(&dj);
 800edb2:	f107 0310 	add.w	r3, r7, #16
 800edb6:	4618      	mov	r0, r3
 800edb8:	f7fd fa3a 	bl	800c230 <store_xdir>
 800edbc:	4603      	mov	r3, r0
 800edbe:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800edc2:	e014      	b.n	800edee <f_mkdir+0x26a>
				} else
#endif
				{
					dir = dj.dir;
 800edc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800edc6:	667b      	str	r3, [r7, #100]	; 0x64
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 800edc8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800edca:	3316      	adds	r3, #22
 800edcc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800edce:	4618      	mov	r0, r3
 800edd0:	f7fb fadd 	bl	800a38e <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 800edd4:	68fb      	ldr	r3, [r7, #12]
 800edd6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800edd8:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800edda:	4618      	mov	r0, r3
 800eddc:	f7fc fe40 	bl	800ba60 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 800ede0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ede2:	330b      	adds	r3, #11
 800ede4:	2210      	movs	r2, #16
 800ede6:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 800ede8:	68fb      	ldr	r3, [r7, #12]
 800edea:	2201      	movs	r2, #1
 800edec:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 800edee:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	d10e      	bne.n	800ee14 <f_mkdir+0x290>
					res = sync_fs(fs);
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	4618      	mov	r0, r3
 800edfa:	f7fb fdd9 	bl	800a9b0 <sync_fs>
 800edfe:	4603      	mov	r3, r0
 800ee00:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800ee04:	e006      	b.n	800ee14 <f_mkdir+0x290>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 800ee06:	f107 0310 	add.w	r3, r7, #16
 800ee0a:	2200      	movs	r2, #0
 800ee0c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800ee0e:	4618      	mov	r0, r3
 800ee10:	f7fc fa30 	bl	800b274 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800ee14:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800ee18:	4618      	mov	r0, r3
 800ee1a:	3780      	adds	r7, #128	; 0x80
 800ee1c:	46bd      	mov	sp, r7
 800ee1e:	bdb0      	pop	{r4, r5, r7, pc}

0800ee20 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ee20:	b480      	push	{r7}
 800ee22:	b087      	sub	sp, #28
 800ee24:	af00      	add	r7, sp, #0
 800ee26:	60f8      	str	r0, [r7, #12]
 800ee28:	60b9      	str	r1, [r7, #8]
 800ee2a:	4613      	mov	r3, r2
 800ee2c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ee2e:	2301      	movs	r3, #1
 800ee30:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ee32:	2300      	movs	r3, #0
 800ee34:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800ee36:	4b1f      	ldr	r3, [pc, #124]	; (800eeb4 <FATFS_LinkDriverEx+0x94>)
 800ee38:	7a5b      	ldrb	r3, [r3, #9]
 800ee3a:	b2db      	uxtb	r3, r3
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d131      	bne.n	800eea4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ee40:	4b1c      	ldr	r3, [pc, #112]	; (800eeb4 <FATFS_LinkDriverEx+0x94>)
 800ee42:	7a5b      	ldrb	r3, [r3, #9]
 800ee44:	b2db      	uxtb	r3, r3
 800ee46:	461a      	mov	r2, r3
 800ee48:	4b1a      	ldr	r3, [pc, #104]	; (800eeb4 <FATFS_LinkDriverEx+0x94>)
 800ee4a:	2100      	movs	r1, #0
 800ee4c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ee4e:	4b19      	ldr	r3, [pc, #100]	; (800eeb4 <FATFS_LinkDriverEx+0x94>)
 800ee50:	7a5b      	ldrb	r3, [r3, #9]
 800ee52:	b2db      	uxtb	r3, r3
 800ee54:	4a17      	ldr	r2, [pc, #92]	; (800eeb4 <FATFS_LinkDriverEx+0x94>)
 800ee56:	009b      	lsls	r3, r3, #2
 800ee58:	4413      	add	r3, r2
 800ee5a:	68fa      	ldr	r2, [r7, #12]
 800ee5c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ee5e:	4b15      	ldr	r3, [pc, #84]	; (800eeb4 <FATFS_LinkDriverEx+0x94>)
 800ee60:	7a5b      	ldrb	r3, [r3, #9]
 800ee62:	b2db      	uxtb	r3, r3
 800ee64:	461a      	mov	r2, r3
 800ee66:	4b13      	ldr	r3, [pc, #76]	; (800eeb4 <FATFS_LinkDriverEx+0x94>)
 800ee68:	4413      	add	r3, r2
 800ee6a:	79fa      	ldrb	r2, [r7, #7]
 800ee6c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ee6e:	4b11      	ldr	r3, [pc, #68]	; (800eeb4 <FATFS_LinkDriverEx+0x94>)
 800ee70:	7a5b      	ldrb	r3, [r3, #9]
 800ee72:	b2db      	uxtb	r3, r3
 800ee74:	1c5a      	adds	r2, r3, #1
 800ee76:	b2d1      	uxtb	r1, r2
 800ee78:	4a0e      	ldr	r2, [pc, #56]	; (800eeb4 <FATFS_LinkDriverEx+0x94>)
 800ee7a:	7251      	strb	r1, [r2, #9]
 800ee7c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ee7e:	7dbb      	ldrb	r3, [r7, #22]
 800ee80:	3330      	adds	r3, #48	; 0x30
 800ee82:	b2da      	uxtb	r2, r3
 800ee84:	68bb      	ldr	r3, [r7, #8]
 800ee86:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ee88:	68bb      	ldr	r3, [r7, #8]
 800ee8a:	3301      	adds	r3, #1
 800ee8c:	223a      	movs	r2, #58	; 0x3a
 800ee8e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ee90:	68bb      	ldr	r3, [r7, #8]
 800ee92:	3302      	adds	r3, #2
 800ee94:	222f      	movs	r2, #47	; 0x2f
 800ee96:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ee98:	68bb      	ldr	r3, [r7, #8]
 800ee9a:	3303      	adds	r3, #3
 800ee9c:	2200      	movs	r2, #0
 800ee9e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800eea0:	2300      	movs	r3, #0
 800eea2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800eea4:	7dfb      	ldrb	r3, [r7, #23]
}
 800eea6:	4618      	mov	r0, r3
 800eea8:	371c      	adds	r7, #28
 800eeaa:	46bd      	mov	sp, r7
 800eeac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeb0:	4770      	bx	lr
 800eeb2:	bf00      	nop
 800eeb4:	20002918 	.word	0x20002918

0800eeb8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800eeb8:	b580      	push	{r7, lr}
 800eeba:	b082      	sub	sp, #8
 800eebc:	af00      	add	r7, sp, #0
 800eebe:	6078      	str	r0, [r7, #4]
 800eec0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800eec2:	2200      	movs	r2, #0
 800eec4:	6839      	ldr	r1, [r7, #0]
 800eec6:	6878      	ldr	r0, [r7, #4]
 800eec8:	f7ff ffaa 	bl	800ee20 <FATFS_LinkDriverEx>
 800eecc:	4603      	mov	r3, r0
}
 800eece:	4618      	mov	r0, r3
 800eed0:	3708      	adds	r7, #8
 800eed2:	46bd      	mov	sp, r7
 800eed4:	bd80      	pop	{r7, pc}
	...

0800eed8 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800eed8:	b480      	push	{r7}
 800eeda:	b085      	sub	sp, #20
 800eedc:	af00      	add	r7, sp, #0
 800eede:	4603      	mov	r3, r0
 800eee0:	6039      	str	r1, [r7, #0]
 800eee2:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800eee4:	88fb      	ldrh	r3, [r7, #6]
 800eee6:	2b7f      	cmp	r3, #127	; 0x7f
 800eee8:	d802      	bhi.n	800eef0 <ff_convert+0x18>
		c = chr;
 800eeea:	88fb      	ldrh	r3, [r7, #6]
 800eeec:	81fb      	strh	r3, [r7, #14]
 800eeee:	e025      	b.n	800ef3c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800eef0:	683b      	ldr	r3, [r7, #0]
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d00b      	beq.n	800ef0e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800eef6:	88fb      	ldrh	r3, [r7, #6]
 800eef8:	2bff      	cmp	r3, #255	; 0xff
 800eefa:	d805      	bhi.n	800ef08 <ff_convert+0x30>
 800eefc:	88fb      	ldrh	r3, [r7, #6]
 800eefe:	3b80      	subs	r3, #128	; 0x80
 800ef00:	4a12      	ldr	r2, [pc, #72]	; (800ef4c <ff_convert+0x74>)
 800ef02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ef06:	e000      	b.n	800ef0a <ff_convert+0x32>
 800ef08:	2300      	movs	r3, #0
 800ef0a:	81fb      	strh	r3, [r7, #14]
 800ef0c:	e016      	b.n	800ef3c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800ef0e:	2300      	movs	r3, #0
 800ef10:	81fb      	strh	r3, [r7, #14]
 800ef12:	e009      	b.n	800ef28 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800ef14:	89fb      	ldrh	r3, [r7, #14]
 800ef16:	4a0d      	ldr	r2, [pc, #52]	; (800ef4c <ff_convert+0x74>)
 800ef18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ef1c:	88fa      	ldrh	r2, [r7, #6]
 800ef1e:	429a      	cmp	r2, r3
 800ef20:	d006      	beq.n	800ef30 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800ef22:	89fb      	ldrh	r3, [r7, #14]
 800ef24:	3301      	adds	r3, #1
 800ef26:	81fb      	strh	r3, [r7, #14]
 800ef28:	89fb      	ldrh	r3, [r7, #14]
 800ef2a:	2b7f      	cmp	r3, #127	; 0x7f
 800ef2c:	d9f2      	bls.n	800ef14 <ff_convert+0x3c>
 800ef2e:	e000      	b.n	800ef32 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800ef30:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800ef32:	89fb      	ldrh	r3, [r7, #14]
 800ef34:	3380      	adds	r3, #128	; 0x80
 800ef36:	b29b      	uxth	r3, r3
 800ef38:	b2db      	uxtb	r3, r3
 800ef3a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800ef3c:	89fb      	ldrh	r3, [r7, #14]
}
 800ef3e:	4618      	mov	r0, r3
 800ef40:	3714      	adds	r7, #20
 800ef42:	46bd      	mov	sp, r7
 800ef44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef48:	4770      	bx	lr
 800ef4a:	bf00      	nop
 800ef4c:	08014884 	.word	0x08014884

0800ef50 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800ef50:	b480      	push	{r7}
 800ef52:	b087      	sub	sp, #28
 800ef54:	af00      	add	r7, sp, #0
 800ef56:	4603      	mov	r3, r0
 800ef58:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800ef5a:	88fb      	ldrh	r3, [r7, #6]
 800ef5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ef60:	d201      	bcs.n	800ef66 <ff_wtoupper+0x16>
 800ef62:	4b3e      	ldr	r3, [pc, #248]	; (800f05c <ff_wtoupper+0x10c>)
 800ef64:	e000      	b.n	800ef68 <ff_wtoupper+0x18>
 800ef66:	4b3e      	ldr	r3, [pc, #248]	; (800f060 <ff_wtoupper+0x110>)
 800ef68:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800ef6a:	697b      	ldr	r3, [r7, #20]
 800ef6c:	1c9a      	adds	r2, r3, #2
 800ef6e:	617a      	str	r2, [r7, #20]
 800ef70:	881b      	ldrh	r3, [r3, #0]
 800ef72:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800ef74:	8a7b      	ldrh	r3, [r7, #18]
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d068      	beq.n	800f04c <ff_wtoupper+0xfc>
 800ef7a:	88fa      	ldrh	r2, [r7, #6]
 800ef7c:	8a7b      	ldrh	r3, [r7, #18]
 800ef7e:	429a      	cmp	r2, r3
 800ef80:	d364      	bcc.n	800f04c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800ef82:	697b      	ldr	r3, [r7, #20]
 800ef84:	1c9a      	adds	r2, r3, #2
 800ef86:	617a      	str	r2, [r7, #20]
 800ef88:	881b      	ldrh	r3, [r3, #0]
 800ef8a:	823b      	strh	r3, [r7, #16]
 800ef8c:	8a3b      	ldrh	r3, [r7, #16]
 800ef8e:	0a1b      	lsrs	r3, r3, #8
 800ef90:	81fb      	strh	r3, [r7, #14]
 800ef92:	8a3b      	ldrh	r3, [r7, #16]
 800ef94:	b2db      	uxtb	r3, r3
 800ef96:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800ef98:	88fa      	ldrh	r2, [r7, #6]
 800ef9a:	8a79      	ldrh	r1, [r7, #18]
 800ef9c:	8a3b      	ldrh	r3, [r7, #16]
 800ef9e:	440b      	add	r3, r1
 800efa0:	429a      	cmp	r2, r3
 800efa2:	da49      	bge.n	800f038 <ff_wtoupper+0xe8>
			switch (cmd) {
 800efa4:	89fb      	ldrh	r3, [r7, #14]
 800efa6:	2b08      	cmp	r3, #8
 800efa8:	d84f      	bhi.n	800f04a <ff_wtoupper+0xfa>
 800efaa:	a201      	add	r2, pc, #4	; (adr r2, 800efb0 <ff_wtoupper+0x60>)
 800efac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efb0:	0800efd5 	.word	0x0800efd5
 800efb4:	0800efe7 	.word	0x0800efe7
 800efb8:	0800effd 	.word	0x0800effd
 800efbc:	0800f005 	.word	0x0800f005
 800efc0:	0800f00d 	.word	0x0800f00d
 800efc4:	0800f015 	.word	0x0800f015
 800efc8:	0800f01d 	.word	0x0800f01d
 800efcc:	0800f025 	.word	0x0800f025
 800efd0:	0800f02d 	.word	0x0800f02d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800efd4:	88fa      	ldrh	r2, [r7, #6]
 800efd6:	8a7b      	ldrh	r3, [r7, #18]
 800efd8:	1ad3      	subs	r3, r2, r3
 800efda:	005b      	lsls	r3, r3, #1
 800efdc:	697a      	ldr	r2, [r7, #20]
 800efde:	4413      	add	r3, r2
 800efe0:	881b      	ldrh	r3, [r3, #0]
 800efe2:	80fb      	strh	r3, [r7, #6]
 800efe4:	e027      	b.n	800f036 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800efe6:	88fa      	ldrh	r2, [r7, #6]
 800efe8:	8a7b      	ldrh	r3, [r7, #18]
 800efea:	1ad3      	subs	r3, r2, r3
 800efec:	b29b      	uxth	r3, r3
 800efee:	f003 0301 	and.w	r3, r3, #1
 800eff2:	b29b      	uxth	r3, r3
 800eff4:	88fa      	ldrh	r2, [r7, #6]
 800eff6:	1ad3      	subs	r3, r2, r3
 800eff8:	80fb      	strh	r3, [r7, #6]
 800effa:	e01c      	b.n	800f036 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800effc:	88fb      	ldrh	r3, [r7, #6]
 800effe:	3b10      	subs	r3, #16
 800f000:	80fb      	strh	r3, [r7, #6]
 800f002:	e018      	b.n	800f036 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800f004:	88fb      	ldrh	r3, [r7, #6]
 800f006:	3b20      	subs	r3, #32
 800f008:	80fb      	strh	r3, [r7, #6]
 800f00a:	e014      	b.n	800f036 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800f00c:	88fb      	ldrh	r3, [r7, #6]
 800f00e:	3b30      	subs	r3, #48	; 0x30
 800f010:	80fb      	strh	r3, [r7, #6]
 800f012:	e010      	b.n	800f036 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800f014:	88fb      	ldrh	r3, [r7, #6]
 800f016:	3b1a      	subs	r3, #26
 800f018:	80fb      	strh	r3, [r7, #6]
 800f01a:	e00c      	b.n	800f036 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800f01c:	88fb      	ldrh	r3, [r7, #6]
 800f01e:	3308      	adds	r3, #8
 800f020:	80fb      	strh	r3, [r7, #6]
 800f022:	e008      	b.n	800f036 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800f024:	88fb      	ldrh	r3, [r7, #6]
 800f026:	3b50      	subs	r3, #80	; 0x50
 800f028:	80fb      	strh	r3, [r7, #6]
 800f02a:	e004      	b.n	800f036 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800f02c:	88fb      	ldrh	r3, [r7, #6]
 800f02e:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800f032:	80fb      	strh	r3, [r7, #6]
 800f034:	bf00      	nop
			}
			break;
 800f036:	e008      	b.n	800f04a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800f038:	89fb      	ldrh	r3, [r7, #14]
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d195      	bne.n	800ef6a <ff_wtoupper+0x1a>
 800f03e:	8a3b      	ldrh	r3, [r7, #16]
 800f040:	005b      	lsls	r3, r3, #1
 800f042:	697a      	ldr	r2, [r7, #20]
 800f044:	4413      	add	r3, r2
 800f046:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800f048:	e78f      	b.n	800ef6a <ff_wtoupper+0x1a>
			break;
 800f04a:	bf00      	nop
	}

	return chr;
 800f04c:	88fb      	ldrh	r3, [r7, #6]
}
 800f04e:	4618      	mov	r0, r3
 800f050:	371c      	adds	r7, #28
 800f052:	46bd      	mov	sp, r7
 800f054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f058:	4770      	bx	lr
 800f05a:	bf00      	nop
 800f05c:	08014984 	.word	0x08014984
 800f060:	08014b78 	.word	0x08014b78

0800f064 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800f064:	b580      	push	{r7, lr}
 800f066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800f068:	2201      	movs	r2, #1
 800f06a:	490e      	ldr	r1, [pc, #56]	; (800f0a4 <MX_USB_HOST_Init+0x40>)
 800f06c:	480e      	ldr	r0, [pc, #56]	; (800f0a8 <MX_USB_HOST_Init+0x44>)
 800f06e:	f7f9 fc67 	bl	8008940 <USBH_Init>
 800f072:	4603      	mov	r3, r0
 800f074:	2b00      	cmp	r3, #0
 800f076:	d001      	beq.n	800f07c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800f078:	f7f2 fcd8 	bl	8001a2c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800f07c:	490b      	ldr	r1, [pc, #44]	; (800f0ac <MX_USB_HOST_Init+0x48>)
 800f07e:	480a      	ldr	r0, [pc, #40]	; (800f0a8 <MX_USB_HOST_Init+0x44>)
 800f080:	f7f9 fcec 	bl	8008a5c <USBH_RegisterClass>
 800f084:	4603      	mov	r3, r0
 800f086:	2b00      	cmp	r3, #0
 800f088:	d001      	beq.n	800f08e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800f08a:	f7f2 fccf 	bl	8001a2c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800f08e:	4806      	ldr	r0, [pc, #24]	; (800f0a8 <MX_USB_HOST_Init+0x44>)
 800f090:	f7f9 fd70 	bl	8008b74 <USBH_Start>
 800f094:	4603      	mov	r3, r0
 800f096:	2b00      	cmp	r3, #0
 800f098:	d001      	beq.n	800f09e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800f09a:	f7f2 fcc7 	bl	8001a2c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800f09e:	bf00      	nop
 800f0a0:	bd80      	pop	{r7, pc}
 800f0a2:	bf00      	nop
 800f0a4:	0800f0c5 	.word	0x0800f0c5
 800f0a8:	20002924 	.word	0x20002924
 800f0ac:	2000000c 	.word	0x2000000c

0800f0b0 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800f0b0:	b580      	push	{r7, lr}
 800f0b2:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800f0b4:	4802      	ldr	r0, [pc, #8]	; (800f0c0 <MX_USB_HOST_Process+0x10>)
 800f0b6:	f7f9 fd6d 	bl	8008b94 <USBH_Process>
}
 800f0ba:	bf00      	nop
 800f0bc:	bd80      	pop	{r7, pc}
 800f0be:	bf00      	nop
 800f0c0:	20002924 	.word	0x20002924

0800f0c4 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800f0c4:	b580      	push	{r7, lr}
 800f0c6:	b082      	sub	sp, #8
 800f0c8:	af00      	add	r7, sp, #0
 800f0ca:	6078      	str	r0, [r7, #4]
 800f0cc:	460b      	mov	r3, r1
 800f0ce:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800f0d0:	78fb      	ldrb	r3, [r7, #3]
 800f0d2:	3b01      	subs	r3, #1
 800f0d4:	2b04      	cmp	r3, #4
 800f0d6:	d844      	bhi.n	800f162 <USBH_UserProcess+0x9e>
 800f0d8:	a201      	add	r2, pc, #4	; (adr r2, 800f0e0 <USBH_UserProcess+0x1c>)
 800f0da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0de:	bf00      	nop
 800f0e0:	0800f163 	.word	0x0800f163
 800f0e4:	0800f101 	.word	0x0800f101
 800f0e8:	0800f163 	.word	0x0800f163
 800f0ec:	0800f15b 	.word	0x0800f15b
 800f0f0:	0800f0f5 	.word	0x0800f0f5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800f0f4:	4b1d      	ldr	r3, [pc, #116]	; (800f16c <USBH_UserProcess+0xa8>)
 800f0f6:	2203      	movs	r2, #3
 800f0f8:	701a      	strb	r2, [r3, #0]
  Unmount_USB();
 800f0fa:	f7f1 ffdd 	bl	80010b8 <Unmount_USB>
  break;
 800f0fe:	e031      	b.n	800f164 <USBH_UserProcess+0xa0>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800f100:	4b1a      	ldr	r3, [pc, #104]	; (800f16c <USBH_UserProcess+0xa8>)
 800f102:	2202      	movs	r2, #2
 800f104:	701a      	strb	r2, [r3, #0]
  Mount_USB();
 800f106:	f7f1 ffb5 	bl	8001074 <Mount_USB>

    Check_USB_Details();   // check space details
 800f10a:	f7f2 fb13 	bl	8001734 <Check_USB_Details>

    Scan_USB("/");   // scan for files and directories
 800f10e:	4818      	ldr	r0, [pc, #96]	; (800f170 <USBH_UserProcess+0xac>)
 800f110:	f7f1 fff2 	bl	80010f8 <Scan_USB>

    Create_File("/ROOTFILE.txt");
 800f114:	4817      	ldr	r0, [pc, #92]	; (800f174 <USBH_UserProcess+0xb0>)
 800f116:	f7f2 f959 	bl	80013cc <Create_File>
    Write_File("/ROOTFILE.txt", "This data should be in root file\n");
 800f11a:	4917      	ldr	r1, [pc, #92]	; (800f178 <USBH_UserProcess+0xb4>)
 800f11c:	4815      	ldr	r0, [pc, #84]	; (800f174 <USBH_UserProcess+0xb0>)
 800f11e:	f7f2 f891 	bl	8001244 <Write_File>

    Create_Dir("/DIR1");
 800f122:	4816      	ldr	r0, [pc, #88]	; (800f17c <USBH_UserProcess+0xb8>)
 800f124:	f7f2 fac6 	bl	80016b4 <Create_Dir>
    Create_File("/DIR1/DIR1FILE.txt");
 800f128:	4815      	ldr	r0, [pc, #84]	; (800f180 <USBH_UserProcess+0xbc>)
 800f12a:	f7f2 f94f 	bl	80013cc <Create_File>
    Write_File("/DIR1/DIR1FILE.txt", "This data should be in DIR1 file\n");
 800f12e:	4915      	ldr	r1, [pc, #84]	; (800f184 <USBH_UserProcess+0xc0>)
 800f130:	4813      	ldr	r0, [pc, #76]	; (800f180 <USBH_UserProcess+0xbc>)
 800f132:	f7f2 f887 	bl	8001244 <Write_File>

    Create_Dir("/DIR2");
 800f136:	4814      	ldr	r0, [pc, #80]	; (800f188 <USBH_UserProcess+0xc4>)
 800f138:	f7f2 fabc 	bl	80016b4 <Create_Dir>
    Create_Dir("/DIR2/SUBDIR1");
 800f13c:	4813      	ldr	r0, [pc, #76]	; (800f18c <USBH_UserProcess+0xc8>)
 800f13e:	f7f2 fab9 	bl	80016b4 <Create_Dir>
    Create_File("/DIR2/SUBDIR1/DIR2FILE.txt");
 800f142:	4813      	ldr	r0, [pc, #76]	; (800f190 <USBH_UserProcess+0xcc>)
 800f144:	f7f2 f942 	bl	80013cc <Create_File>
    Write_File("/DIR2/SUBDIR1/DIR2FILE.txt", "This data should be in DIR2/SUBDIR1 file\n as i have nothing better to write/n so i just wrote this\n");
 800f148:	4912      	ldr	r1, [pc, #72]	; (800f194 <USBH_UserProcess+0xd0>)
 800f14a:	4811      	ldr	r0, [pc, #68]	; (800f190 <USBH_UserProcess+0xcc>)
 800f14c:	f7f2 f87a 	bl	8001244 <Write_File>

    Update_File("/ROOTFILE.txt", "This updated data must be in second line of Root File\n");
 800f150:	4911      	ldr	r1, [pc, #68]	; (800f198 <USBH_UserProcess+0xd4>)
 800f152:	4808      	ldr	r0, [pc, #32]	; (800f174 <USBH_UserProcess+0xb0>)
 800f154:	f7f2 f9d6 	bl	8001504 <Update_File>
  break;
 800f158:	e004      	b.n	800f164 <USBH_UserProcess+0xa0>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800f15a:	4b04      	ldr	r3, [pc, #16]	; (800f16c <USBH_UserProcess+0xa8>)
 800f15c:	2201      	movs	r2, #1
 800f15e:	701a      	strb	r2, [r3, #0]
  break;
 800f160:	e000      	b.n	800f164 <USBH_UserProcess+0xa0>

  default:
  break;
 800f162:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800f164:	bf00      	nop
 800f166:	3708      	adds	r7, #8
 800f168:	46bd      	mov	sp, r7
 800f16a:	bd80      	pop	{r7, pc}
 800f16c:	20002cfc 	.word	0x20002cfc
 800f170:	08014628 	.word	0x08014628
 800f174:	0801462c 	.word	0x0801462c
 800f178:	0801463c 	.word	0x0801463c
 800f17c:	08014660 	.word	0x08014660
 800f180:	08014668 	.word	0x08014668
 800f184:	0801467c 	.word	0x0801467c
 800f188:	080146a0 	.word	0x080146a0
 800f18c:	080146a8 	.word	0x080146a8
 800f190:	080146b8 	.word	0x080146b8
 800f194:	080146d4 	.word	0x080146d4
 800f198:	08014738 	.word	0x08014738

0800f19c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800f19c:	b580      	push	{r7, lr}
 800f19e:	b0b0      	sub	sp, #192	; 0xc0
 800f1a0:	af00      	add	r7, sp, #0
 800f1a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f1a4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800f1a8:	2200      	movs	r2, #0
 800f1aa:	601a      	str	r2, [r3, #0]
 800f1ac:	605a      	str	r2, [r3, #4]
 800f1ae:	609a      	str	r2, [r3, #8]
 800f1b0:	60da      	str	r2, [r3, #12]
 800f1b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800f1b4:	f107 0318 	add.w	r3, r7, #24
 800f1b8:	2294      	movs	r2, #148	; 0x94
 800f1ba:	2100      	movs	r1, #0
 800f1bc:	4618      	mov	r0, r3
 800f1be:	f000 fb43 	bl	800f848 <memset>
  if(hcdHandle->Instance==USB_OTG_FS)
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	681b      	ldr	r3, [r3, #0]
 800f1c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f1ca:	d174      	bne.n	800f2b6 <HAL_HCD_MspInit+0x11a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800f1cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f1d0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800f1d2:	2300      	movs	r3, #0
 800f1d4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800f1d8:	f107 0318 	add.w	r3, r7, #24
 800f1dc:	4618      	mov	r0, r3
 800f1de:	f7f5 fc73 	bl	8004ac8 <HAL_RCCEx_PeriphCLKConfig>
 800f1e2:	4603      	mov	r3, r0
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d001      	beq.n	800f1ec <HAL_HCD_MspInit+0x50>
    {
      Error_Handler();
 800f1e8:	f7f2 fc20 	bl	8001a2c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f1ec:	4b34      	ldr	r3, [pc, #208]	; (800f2c0 <HAL_HCD_MspInit+0x124>)
 800f1ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f1f0:	4a33      	ldr	r2, [pc, #204]	; (800f2c0 <HAL_HCD_MspInit+0x124>)
 800f1f2:	f043 0301 	orr.w	r3, r3, #1
 800f1f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 800f1f8:	4b31      	ldr	r3, [pc, #196]	; (800f2c0 <HAL_HCD_MspInit+0x124>)
 800f1fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f1fc:	f003 0301 	and.w	r3, r3, #1
 800f200:	617b      	str	r3, [r7, #20]
 800f202:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800f204:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f208:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800f20c:	2300      	movs	r3, #0
 800f20e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f212:	2300      	movs	r3, #0
 800f214:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f218:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800f21c:	4619      	mov	r1, r3
 800f21e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800f222:	f7f2 ff6d 	bl	8002100 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800f226:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800f22a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f22e:	2302      	movs	r3, #2
 800f230:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f234:	2300      	movs	r3, #0
 800f236:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f23a:	2303      	movs	r3, #3
 800f23c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800f240:	230a      	movs	r3, #10
 800f242:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f246:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800f24a:	4619      	mov	r1, r3
 800f24c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800f250:	f7f2 ff56 	bl	8002100 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f254:	4b1a      	ldr	r3, [pc, #104]	; (800f2c0 <HAL_HCD_MspInit+0x124>)
 800f256:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f258:	4a19      	ldr	r2, [pc, #100]	; (800f2c0 <HAL_HCD_MspInit+0x124>)
 800f25a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800f25e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800f260:	4b17      	ldr	r3, [pc, #92]	; (800f2c0 <HAL_HCD_MspInit+0x124>)
 800f262:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f264:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f268:	613b      	str	r3, [r7, #16]
 800f26a:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800f26c:	4b14      	ldr	r3, [pc, #80]	; (800f2c0 <HAL_HCD_MspInit+0x124>)
 800f26e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f270:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f274:	2b00      	cmp	r3, #0
 800f276:	d114      	bne.n	800f2a2 <HAL_HCD_MspInit+0x106>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800f278:	4b11      	ldr	r3, [pc, #68]	; (800f2c0 <HAL_HCD_MspInit+0x124>)
 800f27a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f27c:	4a10      	ldr	r2, [pc, #64]	; (800f2c0 <HAL_HCD_MspInit+0x124>)
 800f27e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f282:	6593      	str	r3, [r2, #88]	; 0x58
 800f284:	4b0e      	ldr	r3, [pc, #56]	; (800f2c0 <HAL_HCD_MspInit+0x124>)
 800f286:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f288:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f28c:	60fb      	str	r3, [r7, #12]
 800f28e:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 800f290:	f7f4 fd22 	bl	8003cd8 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800f294:	4b0a      	ldr	r3, [pc, #40]	; (800f2c0 <HAL_HCD_MspInit+0x124>)
 800f296:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f298:	4a09      	ldr	r2, [pc, #36]	; (800f2c0 <HAL_HCD_MspInit+0x124>)
 800f29a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f29e:	6593      	str	r3, [r2, #88]	; 0x58
 800f2a0:	e001      	b.n	800f2a6 <HAL_HCD_MspInit+0x10a>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800f2a2:	f7f4 fd19 	bl	8003cd8 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800f2a6:	2200      	movs	r2, #0
 800f2a8:	2100      	movs	r1, #0
 800f2aa:	2043      	movs	r0, #67	; 0x43
 800f2ac:	f7f2 fef1 	bl	8002092 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f2b0:	2043      	movs	r0, #67	; 0x43
 800f2b2:	f7f2 ff0a 	bl	80020ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f2b6:	bf00      	nop
 800f2b8:	37c0      	adds	r7, #192	; 0xc0
 800f2ba:	46bd      	mov	sp, r7
 800f2bc:	bd80      	pop	{r7, pc}
 800f2be:	bf00      	nop
 800f2c0:	40021000 	.word	0x40021000

0800f2c4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800f2c4:	b580      	push	{r7, lr}
 800f2c6:	b082      	sub	sp, #8
 800f2c8:	af00      	add	r7, sp, #0
 800f2ca:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800f2d2:	4618      	mov	r0, r3
 800f2d4:	f7fa f831 	bl	800933a <USBH_LL_IncTimer>
}
 800f2d8:	bf00      	nop
 800f2da:	3708      	adds	r7, #8
 800f2dc:	46bd      	mov	sp, r7
 800f2de:	bd80      	pop	{r7, pc}

0800f2e0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800f2e0:	b580      	push	{r7, lr}
 800f2e2:	b082      	sub	sp, #8
 800f2e4:	af00      	add	r7, sp, #0
 800f2e6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800f2ee:	4618      	mov	r0, r3
 800f2f0:	f7fa f869 	bl	80093c6 <USBH_LL_Connect>
}
 800f2f4:	bf00      	nop
 800f2f6:	3708      	adds	r7, #8
 800f2f8:	46bd      	mov	sp, r7
 800f2fa:	bd80      	pop	{r7, pc}

0800f2fc <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800f2fc:	b580      	push	{r7, lr}
 800f2fe:	b082      	sub	sp, #8
 800f300:	af00      	add	r7, sp, #0
 800f302:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800f30a:	4618      	mov	r0, r3
 800f30c:	f7fa f872 	bl	80093f4 <USBH_LL_Disconnect>
}
 800f310:	bf00      	nop
 800f312:	3708      	adds	r7, #8
 800f314:	46bd      	mov	sp, r7
 800f316:	bd80      	pop	{r7, pc}

0800f318 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800f318:	b480      	push	{r7}
 800f31a:	b083      	sub	sp, #12
 800f31c:	af00      	add	r7, sp, #0
 800f31e:	6078      	str	r0, [r7, #4]
 800f320:	460b      	mov	r3, r1
 800f322:	70fb      	strb	r3, [r7, #3]
 800f324:	4613      	mov	r3, r2
 800f326:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800f328:	bf00      	nop
 800f32a:	370c      	adds	r7, #12
 800f32c:	46bd      	mov	sp, r7
 800f32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f332:	4770      	bx	lr

0800f334 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800f334:	b580      	push	{r7, lr}
 800f336:	b082      	sub	sp, #8
 800f338:	af00      	add	r7, sp, #0
 800f33a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800f342:	4618      	mov	r0, r3
 800f344:	f7fa f823 	bl	800938e <USBH_LL_PortEnabled>
}
 800f348:	bf00      	nop
 800f34a:	3708      	adds	r7, #8
 800f34c:	46bd      	mov	sp, r7
 800f34e:	bd80      	pop	{r7, pc}

0800f350 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800f350:	b580      	push	{r7, lr}
 800f352:	b082      	sub	sp, #8
 800f354:	af00      	add	r7, sp, #0
 800f356:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800f35e:	4618      	mov	r0, r3
 800f360:	f7fa f823 	bl	80093aa <USBH_LL_PortDisabled>
}
 800f364:	bf00      	nop
 800f366:	3708      	adds	r7, #8
 800f368:	46bd      	mov	sp, r7
 800f36a:	bd80      	pop	{r7, pc}

0800f36c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800f36c:	b580      	push	{r7, lr}
 800f36e:	b082      	sub	sp, #8
 800f370:	af00      	add	r7, sp, #0
 800f372:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800f37a:	2b01      	cmp	r3, #1
 800f37c:	d12d      	bne.n	800f3da <USBH_LL_Init+0x6e>
  /* Enable USB power on Pwrctrl CR2 register */
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800f37e:	4a19      	ldr	r2, [pc, #100]	; (800f3e4 <USBH_LL_Init+0x78>)
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	4a16      	ldr	r2, [pc, #88]	; (800f3e4 <USBH_LL_Init+0x78>)
 800f38a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800f38e:	4b15      	ldr	r3, [pc, #84]	; (800f3e4 <USBH_LL_Init+0x78>)
 800f390:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800f394:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 12;
 800f396:	4b13      	ldr	r3, [pc, #76]	; (800f3e4 <USBH_LL_Init+0x78>)
 800f398:	220c      	movs	r2, #12
 800f39a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = USB_OTG_SPEED_FULL;
 800f39c:	4b11      	ldr	r3, [pc, #68]	; (800f3e4 <USBH_LL_Init+0x78>)
 800f39e:	2203      	movs	r2, #3
 800f3a0:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800f3a2:	4b10      	ldr	r3, [pc, #64]	; (800f3e4 <USBH_LL_Init+0x78>)
 800f3a4:	2200      	movs	r2, #0
 800f3a6:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800f3a8:	4b0e      	ldr	r3, [pc, #56]	; (800f3e4 <USBH_LL_Init+0x78>)
 800f3aa:	2202      	movs	r2, #2
 800f3ac:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800f3ae:	4b0d      	ldr	r3, [pc, #52]	; (800f3e4 <USBH_LL_Init+0x78>)
 800f3b0:	2200      	movs	r2, #0
 800f3b2:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800f3b4:	4b0b      	ldr	r3, [pc, #44]	; (800f3e4 <USBH_LL_Init+0x78>)
 800f3b6:	2200      	movs	r2, #0
 800f3b8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800f3ba:	480a      	ldr	r0, [pc, #40]	; (800f3e4 <USBH_LL_Init+0x78>)
 800f3bc:	f7f3 f84a 	bl	8002454 <HAL_HCD_Init>
 800f3c0:	4603      	mov	r3, r0
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d001      	beq.n	800f3ca <USBH_LL_Init+0x5e>
  {
    Error_Handler( );
 800f3c6:	f7f2 fb31 	bl	8001a2c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800f3ca:	4806      	ldr	r0, [pc, #24]	; (800f3e4 <USBH_LL_Init+0x78>)
 800f3cc:	f7f3 fc29 	bl	8002c22 <HAL_HCD_GetCurrentFrame>
 800f3d0:	4603      	mov	r3, r0
 800f3d2:	4619      	mov	r1, r3
 800f3d4:	6878      	ldr	r0, [r7, #4]
 800f3d6:	f7f9 ffa1 	bl	800931c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800f3da:	2300      	movs	r3, #0
}
 800f3dc:	4618      	mov	r0, r3
 800f3de:	3708      	adds	r7, #8
 800f3e0:	46bd      	mov	sp, r7
 800f3e2:	bd80      	pop	{r7, pc}
 800f3e4:	20002d00 	.word	0x20002d00

0800f3e8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800f3e8:	b580      	push	{r7, lr}
 800f3ea:	b084      	sub	sp, #16
 800f3ec:	af00      	add	r7, sp, #0
 800f3ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f3f0:	2300      	movs	r3, #0
 800f3f2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f3f4:	2300      	movs	r3, #0
 800f3f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f3fe:	4618      	mov	r0, r3
 800f400:	f7f3 fb99 	bl	8002b36 <HAL_HCD_Start>
 800f404:	4603      	mov	r3, r0
 800f406:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f408:	7bfb      	ldrb	r3, [r7, #15]
 800f40a:	4618      	mov	r0, r3
 800f40c:	f000 f98c 	bl	800f728 <USBH_Get_USB_Status>
 800f410:	4603      	mov	r3, r0
 800f412:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f414:	7bbb      	ldrb	r3, [r7, #14]
}
 800f416:	4618      	mov	r0, r3
 800f418:	3710      	adds	r7, #16
 800f41a:	46bd      	mov	sp, r7
 800f41c:	bd80      	pop	{r7, pc}

0800f41e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800f41e:	b580      	push	{r7, lr}
 800f420:	b084      	sub	sp, #16
 800f422:	af00      	add	r7, sp, #0
 800f424:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f426:	2300      	movs	r3, #0
 800f428:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f42a:	2300      	movs	r3, #0
 800f42c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f434:	4618      	mov	r0, r3
 800f436:	f7f3 fba1 	bl	8002b7c <HAL_HCD_Stop>
 800f43a:	4603      	mov	r3, r0
 800f43c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f43e:	7bfb      	ldrb	r3, [r7, #15]
 800f440:	4618      	mov	r0, r3
 800f442:	f000 f971 	bl	800f728 <USBH_Get_USB_Status>
 800f446:	4603      	mov	r3, r0
 800f448:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f44a:	7bbb      	ldrb	r3, [r7, #14]
}
 800f44c:	4618      	mov	r0, r3
 800f44e:	3710      	adds	r7, #16
 800f450:	46bd      	mov	sp, r7
 800f452:	bd80      	pop	{r7, pc}

0800f454 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800f454:	b580      	push	{r7, lr}
 800f456:	b084      	sub	sp, #16
 800f458:	af00      	add	r7, sp, #0
 800f45a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800f45c:	2301      	movs	r3, #1
 800f45e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f466:	4618      	mov	r0, r3
 800f468:	f7f3 fbe9 	bl	8002c3e <HAL_HCD_GetCurrentSpeed>
 800f46c:	4603      	mov	r3, r0
 800f46e:	2b02      	cmp	r3, #2
 800f470:	d00c      	beq.n	800f48c <USBH_LL_GetSpeed+0x38>
 800f472:	2b02      	cmp	r3, #2
 800f474:	d80d      	bhi.n	800f492 <USBH_LL_GetSpeed+0x3e>
 800f476:	2b00      	cmp	r3, #0
 800f478:	d002      	beq.n	800f480 <USBH_LL_GetSpeed+0x2c>
 800f47a:	2b01      	cmp	r3, #1
 800f47c:	d003      	beq.n	800f486 <USBH_LL_GetSpeed+0x32>
 800f47e:	e008      	b.n	800f492 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800f480:	2300      	movs	r3, #0
 800f482:	73fb      	strb	r3, [r7, #15]
    break;
 800f484:	e008      	b.n	800f498 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800f486:	2301      	movs	r3, #1
 800f488:	73fb      	strb	r3, [r7, #15]
    break;
 800f48a:	e005      	b.n	800f498 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800f48c:	2302      	movs	r3, #2
 800f48e:	73fb      	strb	r3, [r7, #15]
    break;
 800f490:	e002      	b.n	800f498 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800f492:	2301      	movs	r3, #1
 800f494:	73fb      	strb	r3, [r7, #15]
    break;
 800f496:	bf00      	nop
  }
  return  speed;
 800f498:	7bfb      	ldrb	r3, [r7, #15]
}
 800f49a:	4618      	mov	r0, r3
 800f49c:	3710      	adds	r7, #16
 800f49e:	46bd      	mov	sp, r7
 800f4a0:	bd80      	pop	{r7, pc}

0800f4a2 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800f4a2:	b580      	push	{r7, lr}
 800f4a4:	b084      	sub	sp, #16
 800f4a6:	af00      	add	r7, sp, #0
 800f4a8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f4aa:	2300      	movs	r3, #0
 800f4ac:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f4ae:	2300      	movs	r3, #0
 800f4b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f4b8:	4618      	mov	r0, r3
 800f4ba:	f7f3 fb7c 	bl	8002bb6 <HAL_HCD_ResetPort>
 800f4be:	4603      	mov	r3, r0
 800f4c0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f4c2:	7bfb      	ldrb	r3, [r7, #15]
 800f4c4:	4618      	mov	r0, r3
 800f4c6:	f000 f92f 	bl	800f728 <USBH_Get_USB_Status>
 800f4ca:	4603      	mov	r3, r0
 800f4cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f4ce:	7bbb      	ldrb	r3, [r7, #14]
}
 800f4d0:	4618      	mov	r0, r3
 800f4d2:	3710      	adds	r7, #16
 800f4d4:	46bd      	mov	sp, r7
 800f4d6:	bd80      	pop	{r7, pc}

0800f4d8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800f4d8:	b580      	push	{r7, lr}
 800f4da:	b082      	sub	sp, #8
 800f4dc:	af00      	add	r7, sp, #0
 800f4de:	6078      	str	r0, [r7, #4]
 800f4e0:	460b      	mov	r3, r1
 800f4e2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f4ea:	78fa      	ldrb	r2, [r7, #3]
 800f4ec:	4611      	mov	r1, r2
 800f4ee:	4618      	mov	r0, r3
 800f4f0:	f7f3 fb83 	bl	8002bfa <HAL_HCD_HC_GetXferCount>
 800f4f4:	4603      	mov	r3, r0
}
 800f4f6:	4618      	mov	r0, r3
 800f4f8:	3708      	adds	r7, #8
 800f4fa:	46bd      	mov	sp, r7
 800f4fc:	bd80      	pop	{r7, pc}

0800f4fe <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800f4fe:	b590      	push	{r4, r7, lr}
 800f500:	b089      	sub	sp, #36	; 0x24
 800f502:	af04      	add	r7, sp, #16
 800f504:	6078      	str	r0, [r7, #4]
 800f506:	4608      	mov	r0, r1
 800f508:	4611      	mov	r1, r2
 800f50a:	461a      	mov	r2, r3
 800f50c:	4603      	mov	r3, r0
 800f50e:	70fb      	strb	r3, [r7, #3]
 800f510:	460b      	mov	r3, r1
 800f512:	70bb      	strb	r3, [r7, #2]
 800f514:	4613      	mov	r3, r2
 800f516:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f518:	2300      	movs	r3, #0
 800f51a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f51c:	2300      	movs	r3, #0
 800f51e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800f526:	787c      	ldrb	r4, [r7, #1]
 800f528:	78ba      	ldrb	r2, [r7, #2]
 800f52a:	78f9      	ldrb	r1, [r7, #3]
 800f52c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f52e:	9302      	str	r3, [sp, #8]
 800f530:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f534:	9301      	str	r3, [sp, #4]
 800f536:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f53a:	9300      	str	r3, [sp, #0]
 800f53c:	4623      	mov	r3, r4
 800f53e:	f7f2 ffeb 	bl	8002518 <HAL_HCD_HC_Init>
 800f542:	4603      	mov	r3, r0
 800f544:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800f546:	7bfb      	ldrb	r3, [r7, #15]
 800f548:	4618      	mov	r0, r3
 800f54a:	f000 f8ed 	bl	800f728 <USBH_Get_USB_Status>
 800f54e:	4603      	mov	r3, r0
 800f550:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f552:	7bbb      	ldrb	r3, [r7, #14]
}
 800f554:	4618      	mov	r0, r3
 800f556:	3714      	adds	r7, #20
 800f558:	46bd      	mov	sp, r7
 800f55a:	bd90      	pop	{r4, r7, pc}

0800f55c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800f55c:	b580      	push	{r7, lr}
 800f55e:	b084      	sub	sp, #16
 800f560:	af00      	add	r7, sp, #0
 800f562:	6078      	str	r0, [r7, #4]
 800f564:	460b      	mov	r3, r1
 800f566:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f568:	2300      	movs	r3, #0
 800f56a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f56c:	2300      	movs	r3, #0
 800f56e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f576:	78fa      	ldrb	r2, [r7, #3]
 800f578:	4611      	mov	r1, r2
 800f57a:	4618      	mov	r0, r3
 800f57c:	f7f3 f85b 	bl	8002636 <HAL_HCD_HC_Halt>
 800f580:	4603      	mov	r3, r0
 800f582:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f584:	7bfb      	ldrb	r3, [r7, #15]
 800f586:	4618      	mov	r0, r3
 800f588:	f000 f8ce 	bl	800f728 <USBH_Get_USB_Status>
 800f58c:	4603      	mov	r3, r0
 800f58e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f590:	7bbb      	ldrb	r3, [r7, #14]
}
 800f592:	4618      	mov	r0, r3
 800f594:	3710      	adds	r7, #16
 800f596:	46bd      	mov	sp, r7
 800f598:	bd80      	pop	{r7, pc}

0800f59a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800f59a:	b590      	push	{r4, r7, lr}
 800f59c:	b089      	sub	sp, #36	; 0x24
 800f59e:	af04      	add	r7, sp, #16
 800f5a0:	6078      	str	r0, [r7, #4]
 800f5a2:	4608      	mov	r0, r1
 800f5a4:	4611      	mov	r1, r2
 800f5a6:	461a      	mov	r2, r3
 800f5a8:	4603      	mov	r3, r0
 800f5aa:	70fb      	strb	r3, [r7, #3]
 800f5ac:	460b      	mov	r3, r1
 800f5ae:	70bb      	strb	r3, [r7, #2]
 800f5b0:	4613      	mov	r3, r2
 800f5b2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f5b4:	2300      	movs	r3, #0
 800f5b6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f5b8:	2300      	movs	r3, #0
 800f5ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800f5c2:	787c      	ldrb	r4, [r7, #1]
 800f5c4:	78ba      	ldrb	r2, [r7, #2]
 800f5c6:	78f9      	ldrb	r1, [r7, #3]
 800f5c8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f5cc:	9303      	str	r3, [sp, #12]
 800f5ce:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f5d0:	9302      	str	r3, [sp, #8]
 800f5d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5d4:	9301      	str	r3, [sp, #4]
 800f5d6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f5da:	9300      	str	r3, [sp, #0]
 800f5dc:	4623      	mov	r3, r4
 800f5de:	f7f3 f84d 	bl	800267c <HAL_HCD_HC_SubmitRequest>
 800f5e2:	4603      	mov	r3, r0
 800f5e4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);

  usb_status = USBH_Get_USB_Status(hal_status);
 800f5e6:	7bfb      	ldrb	r3, [r7, #15]
 800f5e8:	4618      	mov	r0, r3
 800f5ea:	f000 f89d 	bl	800f728 <USBH_Get_USB_Status>
 800f5ee:	4603      	mov	r3, r0
 800f5f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f5f2:	7bbb      	ldrb	r3, [r7, #14]
}
 800f5f4:	4618      	mov	r0, r3
 800f5f6:	3714      	adds	r7, #20
 800f5f8:	46bd      	mov	sp, r7
 800f5fa:	bd90      	pop	{r4, r7, pc}

0800f5fc <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800f5fc:	b580      	push	{r7, lr}
 800f5fe:	b082      	sub	sp, #8
 800f600:	af00      	add	r7, sp, #0
 800f602:	6078      	str	r0, [r7, #4]
 800f604:	460b      	mov	r3, r1
 800f606:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f60e:	78fa      	ldrb	r2, [r7, #3]
 800f610:	4611      	mov	r1, r2
 800f612:	4618      	mov	r0, r3
 800f614:	f7f3 fadd 	bl	8002bd2 <HAL_HCD_HC_GetURBState>
 800f618:	4603      	mov	r3, r0
}
 800f61a:	4618      	mov	r0, r3
 800f61c:	3708      	adds	r7, #8
 800f61e:	46bd      	mov	sp, r7
 800f620:	bd80      	pop	{r7, pc}

0800f622 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800f622:	b580      	push	{r7, lr}
 800f624:	b082      	sub	sp, #8
 800f626:	af00      	add	r7, sp, #0
 800f628:	6078      	str	r0, [r7, #4]
 800f62a:	460b      	mov	r3, r1
 800f62c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800f634:	2b01      	cmp	r3, #1
 800f636:	d103      	bne.n	800f640 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800f638:	78fb      	ldrb	r3, [r7, #3]
 800f63a:	4618      	mov	r0, r3
 800f63c:	f000 f8a0 	bl	800f780 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800f640:	20c8      	movs	r0, #200	; 0xc8
 800f642:	f7f2 fc27 	bl	8001e94 <HAL_Delay>
  return USBH_OK;
 800f646:	2300      	movs	r3, #0
}
 800f648:	4618      	mov	r0, r3
 800f64a:	3708      	adds	r7, #8
 800f64c:	46bd      	mov	sp, r7
 800f64e:	bd80      	pop	{r7, pc}

0800f650 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800f650:	b480      	push	{r7}
 800f652:	b085      	sub	sp, #20
 800f654:	af00      	add	r7, sp, #0
 800f656:	6078      	str	r0, [r7, #4]
 800f658:	460b      	mov	r3, r1
 800f65a:	70fb      	strb	r3, [r7, #3]
 800f65c:	4613      	mov	r3, r2
 800f65e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f666:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800f668:	78fb      	ldrb	r3, [r7, #3]
 800f66a:	68fa      	ldr	r2, [r7, #12]
 800f66c:	212c      	movs	r1, #44	; 0x2c
 800f66e:	fb01 f303 	mul.w	r3, r1, r3
 800f672:	4413      	add	r3, r2
 800f674:	333b      	adds	r3, #59	; 0x3b
 800f676:	781b      	ldrb	r3, [r3, #0]
 800f678:	2b00      	cmp	r3, #0
 800f67a:	d009      	beq.n	800f690 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800f67c:	78fb      	ldrb	r3, [r7, #3]
 800f67e:	68fa      	ldr	r2, [r7, #12]
 800f680:	212c      	movs	r1, #44	; 0x2c
 800f682:	fb01 f303 	mul.w	r3, r1, r3
 800f686:	4413      	add	r3, r2
 800f688:	3354      	adds	r3, #84	; 0x54
 800f68a:	78ba      	ldrb	r2, [r7, #2]
 800f68c:	701a      	strb	r2, [r3, #0]
 800f68e:	e008      	b.n	800f6a2 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800f690:	78fb      	ldrb	r3, [r7, #3]
 800f692:	68fa      	ldr	r2, [r7, #12]
 800f694:	212c      	movs	r1, #44	; 0x2c
 800f696:	fb01 f303 	mul.w	r3, r1, r3
 800f69a:	4413      	add	r3, r2
 800f69c:	3355      	adds	r3, #85	; 0x55
 800f69e:	78ba      	ldrb	r2, [r7, #2]
 800f6a0:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800f6a2:	2300      	movs	r3, #0
}
 800f6a4:	4618      	mov	r0, r3
 800f6a6:	3714      	adds	r7, #20
 800f6a8:	46bd      	mov	sp, r7
 800f6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ae:	4770      	bx	lr

0800f6b0 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800f6b0:	b480      	push	{r7}
 800f6b2:	b085      	sub	sp, #20
 800f6b4:	af00      	add	r7, sp, #0
 800f6b6:	6078      	str	r0, [r7, #4]
 800f6b8:	460b      	mov	r3, r1
 800f6ba:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800f6bc:	2300      	movs	r3, #0
 800f6be:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f6c6:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800f6c8:	78fb      	ldrb	r3, [r7, #3]
 800f6ca:	68ba      	ldr	r2, [r7, #8]
 800f6cc:	212c      	movs	r1, #44	; 0x2c
 800f6ce:	fb01 f303 	mul.w	r3, r1, r3
 800f6d2:	4413      	add	r3, r2
 800f6d4:	333b      	adds	r3, #59	; 0x3b
 800f6d6:	781b      	ldrb	r3, [r3, #0]
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	d009      	beq.n	800f6f0 <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800f6dc:	78fb      	ldrb	r3, [r7, #3]
 800f6de:	68ba      	ldr	r2, [r7, #8]
 800f6e0:	212c      	movs	r1, #44	; 0x2c
 800f6e2:	fb01 f303 	mul.w	r3, r1, r3
 800f6e6:	4413      	add	r3, r2
 800f6e8:	3354      	adds	r3, #84	; 0x54
 800f6ea:	781b      	ldrb	r3, [r3, #0]
 800f6ec:	73fb      	strb	r3, [r7, #15]
 800f6ee:	e008      	b.n	800f702 <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800f6f0:	78fb      	ldrb	r3, [r7, #3]
 800f6f2:	68ba      	ldr	r2, [r7, #8]
 800f6f4:	212c      	movs	r1, #44	; 0x2c
 800f6f6:	fb01 f303 	mul.w	r3, r1, r3
 800f6fa:	4413      	add	r3, r2
 800f6fc:	3355      	adds	r3, #85	; 0x55
 800f6fe:	781b      	ldrb	r3, [r3, #0]
 800f700:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800f702:	7bfb      	ldrb	r3, [r7, #15]
}
 800f704:	4618      	mov	r0, r3
 800f706:	3714      	adds	r7, #20
 800f708:	46bd      	mov	sp, r7
 800f70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f70e:	4770      	bx	lr

0800f710 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800f710:	b580      	push	{r7, lr}
 800f712:	b082      	sub	sp, #8
 800f714:	af00      	add	r7, sp, #0
 800f716:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800f718:	6878      	ldr	r0, [r7, #4]
 800f71a:	f7f2 fbbb 	bl	8001e94 <HAL_Delay>
}
 800f71e:	bf00      	nop
 800f720:	3708      	adds	r7, #8
 800f722:	46bd      	mov	sp, r7
 800f724:	bd80      	pop	{r7, pc}
	...

0800f728 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f728:	b480      	push	{r7}
 800f72a:	b085      	sub	sp, #20
 800f72c:	af00      	add	r7, sp, #0
 800f72e:	4603      	mov	r3, r0
 800f730:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f732:	2300      	movs	r3, #0
 800f734:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f736:	79fb      	ldrb	r3, [r7, #7]
 800f738:	2b03      	cmp	r3, #3
 800f73a:	d817      	bhi.n	800f76c <USBH_Get_USB_Status+0x44>
 800f73c:	a201      	add	r2, pc, #4	; (adr r2, 800f744 <USBH_Get_USB_Status+0x1c>)
 800f73e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f742:	bf00      	nop
 800f744:	0800f755 	.word	0x0800f755
 800f748:	0800f75b 	.word	0x0800f75b
 800f74c:	0800f761 	.word	0x0800f761
 800f750:	0800f767 	.word	0x0800f767
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800f754:	2300      	movs	r3, #0
 800f756:	73fb      	strb	r3, [r7, #15]
    break;
 800f758:	e00b      	b.n	800f772 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800f75a:	2302      	movs	r3, #2
 800f75c:	73fb      	strb	r3, [r7, #15]
    break;
 800f75e:	e008      	b.n	800f772 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800f760:	2301      	movs	r3, #1
 800f762:	73fb      	strb	r3, [r7, #15]
    break;
 800f764:	e005      	b.n	800f772 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800f766:	2302      	movs	r3, #2
 800f768:	73fb      	strb	r3, [r7, #15]
    break;
 800f76a:	e002      	b.n	800f772 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800f76c:	2302      	movs	r3, #2
 800f76e:	73fb      	strb	r3, [r7, #15]
    break;
 800f770:	bf00      	nop
  }
  return usb_status;
 800f772:	7bfb      	ldrb	r3, [r7, #15]
}
 800f774:	4618      	mov	r0, r3
 800f776:	3714      	adds	r7, #20
 800f778:	46bd      	mov	sp, r7
 800f77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f77e:	4770      	bx	lr

0800f780 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800f780:	b580      	push	{r7, lr}
 800f782:	b084      	sub	sp, #16
 800f784:	af00      	add	r7, sp, #0
 800f786:	4603      	mov	r3, r0
 800f788:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800f78a:	79fb      	ldrb	r3, [r7, #7]
 800f78c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800f78e:	79fb      	ldrb	r3, [r7, #7]
 800f790:	2b00      	cmp	r3, #0
 800f792:	d102      	bne.n	800f79a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800f794:	2300      	movs	r3, #0
 800f796:	73fb      	strb	r3, [r7, #15]
 800f798:	e001      	b.n	800f79e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800f79a:	2301      	movs	r3, #1
 800f79c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800f79e:	7bfb      	ldrb	r3, [r7, #15]
 800f7a0:	461a      	mov	r2, r3
 800f7a2:	2101      	movs	r1, #1
 800f7a4:	4803      	ldr	r0, [pc, #12]	; (800f7b4 <MX_DriverVbusFS+0x34>)
 800f7a6:	f7f2 fe3d 	bl	8002424 <HAL_GPIO_WritePin>
}
 800f7aa:	bf00      	nop
 800f7ac:	3710      	adds	r7, #16
 800f7ae:	46bd      	mov	sp, r7
 800f7b0:	bd80      	pop	{r7, pc}
 800f7b2:	bf00      	nop
 800f7b4:	48000800 	.word	0x48000800

0800f7b8 <__errno>:
 800f7b8:	4b01      	ldr	r3, [pc, #4]	; (800f7c0 <__errno+0x8>)
 800f7ba:	6818      	ldr	r0, [r3, #0]
 800f7bc:	4770      	bx	lr
 800f7be:	bf00      	nop
 800f7c0:	2000002c 	.word	0x2000002c

0800f7c4 <__libc_init_array>:
 800f7c4:	b570      	push	{r4, r5, r6, lr}
 800f7c6:	4d0d      	ldr	r5, [pc, #52]	; (800f7fc <__libc_init_array+0x38>)
 800f7c8:	4c0d      	ldr	r4, [pc, #52]	; (800f800 <__libc_init_array+0x3c>)
 800f7ca:	1b64      	subs	r4, r4, r5
 800f7cc:	10a4      	asrs	r4, r4, #2
 800f7ce:	2600      	movs	r6, #0
 800f7d0:	42a6      	cmp	r6, r4
 800f7d2:	d109      	bne.n	800f7e8 <__libc_init_array+0x24>
 800f7d4:	4d0b      	ldr	r5, [pc, #44]	; (800f804 <__libc_init_array+0x40>)
 800f7d6:	4c0c      	ldr	r4, [pc, #48]	; (800f808 <__libc_init_array+0x44>)
 800f7d8:	f004 fc96 	bl	8014108 <_init>
 800f7dc:	1b64      	subs	r4, r4, r5
 800f7de:	10a4      	asrs	r4, r4, #2
 800f7e0:	2600      	movs	r6, #0
 800f7e2:	42a6      	cmp	r6, r4
 800f7e4:	d105      	bne.n	800f7f2 <__libc_init_array+0x2e>
 800f7e6:	bd70      	pop	{r4, r5, r6, pc}
 800f7e8:	f855 3b04 	ldr.w	r3, [r5], #4
 800f7ec:	4798      	blx	r3
 800f7ee:	3601      	adds	r6, #1
 800f7f0:	e7ee      	b.n	800f7d0 <__libc_init_array+0xc>
 800f7f2:	f855 3b04 	ldr.w	r3, [r5], #4
 800f7f6:	4798      	blx	r3
 800f7f8:	3601      	adds	r6, #1
 800f7fa:	e7f2      	b.n	800f7e2 <__libc_init_array+0x1e>
 800f7fc:	080150e4 	.word	0x080150e4
 800f800:	080150e4 	.word	0x080150e4
 800f804:	080150e4 	.word	0x080150e4
 800f808:	080150e8 	.word	0x080150e8

0800f80c <malloc>:
 800f80c:	4b02      	ldr	r3, [pc, #8]	; (800f818 <malloc+0xc>)
 800f80e:	4601      	mov	r1, r0
 800f810:	6818      	ldr	r0, [r3, #0]
 800f812:	f000 b88d 	b.w	800f930 <_malloc_r>
 800f816:	bf00      	nop
 800f818:	2000002c 	.word	0x2000002c

0800f81c <free>:
 800f81c:	4b02      	ldr	r3, [pc, #8]	; (800f828 <free+0xc>)
 800f81e:	4601      	mov	r1, r0
 800f820:	6818      	ldr	r0, [r3, #0]
 800f822:	f000 b819 	b.w	800f858 <_free_r>
 800f826:	bf00      	nop
 800f828:	2000002c 	.word	0x2000002c

0800f82c <memcpy>:
 800f82c:	440a      	add	r2, r1
 800f82e:	4291      	cmp	r1, r2
 800f830:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800f834:	d100      	bne.n	800f838 <memcpy+0xc>
 800f836:	4770      	bx	lr
 800f838:	b510      	push	{r4, lr}
 800f83a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f83e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f842:	4291      	cmp	r1, r2
 800f844:	d1f9      	bne.n	800f83a <memcpy+0xe>
 800f846:	bd10      	pop	{r4, pc}

0800f848 <memset>:
 800f848:	4402      	add	r2, r0
 800f84a:	4603      	mov	r3, r0
 800f84c:	4293      	cmp	r3, r2
 800f84e:	d100      	bne.n	800f852 <memset+0xa>
 800f850:	4770      	bx	lr
 800f852:	f803 1b01 	strb.w	r1, [r3], #1
 800f856:	e7f9      	b.n	800f84c <memset+0x4>

0800f858 <_free_r>:
 800f858:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f85a:	2900      	cmp	r1, #0
 800f85c:	d044      	beq.n	800f8e8 <_free_r+0x90>
 800f85e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f862:	9001      	str	r0, [sp, #4]
 800f864:	2b00      	cmp	r3, #0
 800f866:	f1a1 0404 	sub.w	r4, r1, #4
 800f86a:	bfb8      	it	lt
 800f86c:	18e4      	addlt	r4, r4, r3
 800f86e:	f003 f82f 	bl	80128d0 <__malloc_lock>
 800f872:	4a1e      	ldr	r2, [pc, #120]	; (800f8ec <_free_r+0x94>)
 800f874:	9801      	ldr	r0, [sp, #4]
 800f876:	6813      	ldr	r3, [r2, #0]
 800f878:	b933      	cbnz	r3, 800f888 <_free_r+0x30>
 800f87a:	6063      	str	r3, [r4, #4]
 800f87c:	6014      	str	r4, [r2, #0]
 800f87e:	b003      	add	sp, #12
 800f880:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f884:	f003 b82a 	b.w	80128dc <__malloc_unlock>
 800f888:	42a3      	cmp	r3, r4
 800f88a:	d908      	bls.n	800f89e <_free_r+0x46>
 800f88c:	6825      	ldr	r5, [r4, #0]
 800f88e:	1961      	adds	r1, r4, r5
 800f890:	428b      	cmp	r3, r1
 800f892:	bf01      	itttt	eq
 800f894:	6819      	ldreq	r1, [r3, #0]
 800f896:	685b      	ldreq	r3, [r3, #4]
 800f898:	1949      	addeq	r1, r1, r5
 800f89a:	6021      	streq	r1, [r4, #0]
 800f89c:	e7ed      	b.n	800f87a <_free_r+0x22>
 800f89e:	461a      	mov	r2, r3
 800f8a0:	685b      	ldr	r3, [r3, #4]
 800f8a2:	b10b      	cbz	r3, 800f8a8 <_free_r+0x50>
 800f8a4:	42a3      	cmp	r3, r4
 800f8a6:	d9fa      	bls.n	800f89e <_free_r+0x46>
 800f8a8:	6811      	ldr	r1, [r2, #0]
 800f8aa:	1855      	adds	r5, r2, r1
 800f8ac:	42a5      	cmp	r5, r4
 800f8ae:	d10b      	bne.n	800f8c8 <_free_r+0x70>
 800f8b0:	6824      	ldr	r4, [r4, #0]
 800f8b2:	4421      	add	r1, r4
 800f8b4:	1854      	adds	r4, r2, r1
 800f8b6:	42a3      	cmp	r3, r4
 800f8b8:	6011      	str	r1, [r2, #0]
 800f8ba:	d1e0      	bne.n	800f87e <_free_r+0x26>
 800f8bc:	681c      	ldr	r4, [r3, #0]
 800f8be:	685b      	ldr	r3, [r3, #4]
 800f8c0:	6053      	str	r3, [r2, #4]
 800f8c2:	4421      	add	r1, r4
 800f8c4:	6011      	str	r1, [r2, #0]
 800f8c6:	e7da      	b.n	800f87e <_free_r+0x26>
 800f8c8:	d902      	bls.n	800f8d0 <_free_r+0x78>
 800f8ca:	230c      	movs	r3, #12
 800f8cc:	6003      	str	r3, [r0, #0]
 800f8ce:	e7d6      	b.n	800f87e <_free_r+0x26>
 800f8d0:	6825      	ldr	r5, [r4, #0]
 800f8d2:	1961      	adds	r1, r4, r5
 800f8d4:	428b      	cmp	r3, r1
 800f8d6:	bf04      	itt	eq
 800f8d8:	6819      	ldreq	r1, [r3, #0]
 800f8da:	685b      	ldreq	r3, [r3, #4]
 800f8dc:	6063      	str	r3, [r4, #4]
 800f8de:	bf04      	itt	eq
 800f8e0:	1949      	addeq	r1, r1, r5
 800f8e2:	6021      	streq	r1, [r4, #0]
 800f8e4:	6054      	str	r4, [r2, #4]
 800f8e6:	e7ca      	b.n	800f87e <_free_r+0x26>
 800f8e8:	b003      	add	sp, #12
 800f8ea:	bd30      	pop	{r4, r5, pc}
 800f8ec:	20003004 	.word	0x20003004

0800f8f0 <sbrk_aligned>:
 800f8f0:	b570      	push	{r4, r5, r6, lr}
 800f8f2:	4e0e      	ldr	r6, [pc, #56]	; (800f92c <sbrk_aligned+0x3c>)
 800f8f4:	460c      	mov	r4, r1
 800f8f6:	6831      	ldr	r1, [r6, #0]
 800f8f8:	4605      	mov	r5, r0
 800f8fa:	b911      	cbnz	r1, 800f902 <sbrk_aligned+0x12>
 800f8fc:	f000 ff06 	bl	801070c <_sbrk_r>
 800f900:	6030      	str	r0, [r6, #0]
 800f902:	4621      	mov	r1, r4
 800f904:	4628      	mov	r0, r5
 800f906:	f000 ff01 	bl	801070c <_sbrk_r>
 800f90a:	1c43      	adds	r3, r0, #1
 800f90c:	d00a      	beq.n	800f924 <sbrk_aligned+0x34>
 800f90e:	1cc4      	adds	r4, r0, #3
 800f910:	f024 0403 	bic.w	r4, r4, #3
 800f914:	42a0      	cmp	r0, r4
 800f916:	d007      	beq.n	800f928 <sbrk_aligned+0x38>
 800f918:	1a21      	subs	r1, r4, r0
 800f91a:	4628      	mov	r0, r5
 800f91c:	f000 fef6 	bl	801070c <_sbrk_r>
 800f920:	3001      	adds	r0, #1
 800f922:	d101      	bne.n	800f928 <sbrk_aligned+0x38>
 800f924:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800f928:	4620      	mov	r0, r4
 800f92a:	bd70      	pop	{r4, r5, r6, pc}
 800f92c:	20003008 	.word	0x20003008

0800f930 <_malloc_r>:
 800f930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f934:	1ccd      	adds	r5, r1, #3
 800f936:	f025 0503 	bic.w	r5, r5, #3
 800f93a:	3508      	adds	r5, #8
 800f93c:	2d0c      	cmp	r5, #12
 800f93e:	bf38      	it	cc
 800f940:	250c      	movcc	r5, #12
 800f942:	2d00      	cmp	r5, #0
 800f944:	4607      	mov	r7, r0
 800f946:	db01      	blt.n	800f94c <_malloc_r+0x1c>
 800f948:	42a9      	cmp	r1, r5
 800f94a:	d905      	bls.n	800f958 <_malloc_r+0x28>
 800f94c:	230c      	movs	r3, #12
 800f94e:	603b      	str	r3, [r7, #0]
 800f950:	2600      	movs	r6, #0
 800f952:	4630      	mov	r0, r6
 800f954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f958:	4e2e      	ldr	r6, [pc, #184]	; (800fa14 <_malloc_r+0xe4>)
 800f95a:	f002 ffb9 	bl	80128d0 <__malloc_lock>
 800f95e:	6833      	ldr	r3, [r6, #0]
 800f960:	461c      	mov	r4, r3
 800f962:	bb34      	cbnz	r4, 800f9b2 <_malloc_r+0x82>
 800f964:	4629      	mov	r1, r5
 800f966:	4638      	mov	r0, r7
 800f968:	f7ff ffc2 	bl	800f8f0 <sbrk_aligned>
 800f96c:	1c43      	adds	r3, r0, #1
 800f96e:	4604      	mov	r4, r0
 800f970:	d14d      	bne.n	800fa0e <_malloc_r+0xde>
 800f972:	6834      	ldr	r4, [r6, #0]
 800f974:	4626      	mov	r6, r4
 800f976:	2e00      	cmp	r6, #0
 800f978:	d140      	bne.n	800f9fc <_malloc_r+0xcc>
 800f97a:	6823      	ldr	r3, [r4, #0]
 800f97c:	4631      	mov	r1, r6
 800f97e:	4638      	mov	r0, r7
 800f980:	eb04 0803 	add.w	r8, r4, r3
 800f984:	f000 fec2 	bl	801070c <_sbrk_r>
 800f988:	4580      	cmp	r8, r0
 800f98a:	d13a      	bne.n	800fa02 <_malloc_r+0xd2>
 800f98c:	6821      	ldr	r1, [r4, #0]
 800f98e:	3503      	adds	r5, #3
 800f990:	1a6d      	subs	r5, r5, r1
 800f992:	f025 0503 	bic.w	r5, r5, #3
 800f996:	3508      	adds	r5, #8
 800f998:	2d0c      	cmp	r5, #12
 800f99a:	bf38      	it	cc
 800f99c:	250c      	movcc	r5, #12
 800f99e:	4629      	mov	r1, r5
 800f9a0:	4638      	mov	r0, r7
 800f9a2:	f7ff ffa5 	bl	800f8f0 <sbrk_aligned>
 800f9a6:	3001      	adds	r0, #1
 800f9a8:	d02b      	beq.n	800fa02 <_malloc_r+0xd2>
 800f9aa:	6823      	ldr	r3, [r4, #0]
 800f9ac:	442b      	add	r3, r5
 800f9ae:	6023      	str	r3, [r4, #0]
 800f9b0:	e00e      	b.n	800f9d0 <_malloc_r+0xa0>
 800f9b2:	6822      	ldr	r2, [r4, #0]
 800f9b4:	1b52      	subs	r2, r2, r5
 800f9b6:	d41e      	bmi.n	800f9f6 <_malloc_r+0xc6>
 800f9b8:	2a0b      	cmp	r2, #11
 800f9ba:	d916      	bls.n	800f9ea <_malloc_r+0xba>
 800f9bc:	1961      	adds	r1, r4, r5
 800f9be:	42a3      	cmp	r3, r4
 800f9c0:	6025      	str	r5, [r4, #0]
 800f9c2:	bf18      	it	ne
 800f9c4:	6059      	strne	r1, [r3, #4]
 800f9c6:	6863      	ldr	r3, [r4, #4]
 800f9c8:	bf08      	it	eq
 800f9ca:	6031      	streq	r1, [r6, #0]
 800f9cc:	5162      	str	r2, [r4, r5]
 800f9ce:	604b      	str	r3, [r1, #4]
 800f9d0:	4638      	mov	r0, r7
 800f9d2:	f104 060b 	add.w	r6, r4, #11
 800f9d6:	f002 ff81 	bl	80128dc <__malloc_unlock>
 800f9da:	f026 0607 	bic.w	r6, r6, #7
 800f9de:	1d23      	adds	r3, r4, #4
 800f9e0:	1af2      	subs	r2, r6, r3
 800f9e2:	d0b6      	beq.n	800f952 <_malloc_r+0x22>
 800f9e4:	1b9b      	subs	r3, r3, r6
 800f9e6:	50a3      	str	r3, [r4, r2]
 800f9e8:	e7b3      	b.n	800f952 <_malloc_r+0x22>
 800f9ea:	6862      	ldr	r2, [r4, #4]
 800f9ec:	42a3      	cmp	r3, r4
 800f9ee:	bf0c      	ite	eq
 800f9f0:	6032      	streq	r2, [r6, #0]
 800f9f2:	605a      	strne	r2, [r3, #4]
 800f9f4:	e7ec      	b.n	800f9d0 <_malloc_r+0xa0>
 800f9f6:	4623      	mov	r3, r4
 800f9f8:	6864      	ldr	r4, [r4, #4]
 800f9fa:	e7b2      	b.n	800f962 <_malloc_r+0x32>
 800f9fc:	4634      	mov	r4, r6
 800f9fe:	6876      	ldr	r6, [r6, #4]
 800fa00:	e7b9      	b.n	800f976 <_malloc_r+0x46>
 800fa02:	230c      	movs	r3, #12
 800fa04:	603b      	str	r3, [r7, #0]
 800fa06:	4638      	mov	r0, r7
 800fa08:	f002 ff68 	bl	80128dc <__malloc_unlock>
 800fa0c:	e7a1      	b.n	800f952 <_malloc_r+0x22>
 800fa0e:	6025      	str	r5, [r4, #0]
 800fa10:	e7de      	b.n	800f9d0 <_malloc_r+0xa0>
 800fa12:	bf00      	nop
 800fa14:	20003004 	.word	0x20003004

0800fa18 <__cvt>:
 800fa18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fa1c:	ec55 4b10 	vmov	r4, r5, d0
 800fa20:	2d00      	cmp	r5, #0
 800fa22:	460e      	mov	r6, r1
 800fa24:	4619      	mov	r1, r3
 800fa26:	462b      	mov	r3, r5
 800fa28:	bfbb      	ittet	lt
 800fa2a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800fa2e:	461d      	movlt	r5, r3
 800fa30:	2300      	movge	r3, #0
 800fa32:	232d      	movlt	r3, #45	; 0x2d
 800fa34:	700b      	strb	r3, [r1, #0]
 800fa36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fa38:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800fa3c:	4691      	mov	r9, r2
 800fa3e:	f023 0820 	bic.w	r8, r3, #32
 800fa42:	bfbc      	itt	lt
 800fa44:	4622      	movlt	r2, r4
 800fa46:	4614      	movlt	r4, r2
 800fa48:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800fa4c:	d005      	beq.n	800fa5a <__cvt+0x42>
 800fa4e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800fa52:	d100      	bne.n	800fa56 <__cvt+0x3e>
 800fa54:	3601      	adds	r6, #1
 800fa56:	2102      	movs	r1, #2
 800fa58:	e000      	b.n	800fa5c <__cvt+0x44>
 800fa5a:	2103      	movs	r1, #3
 800fa5c:	ab03      	add	r3, sp, #12
 800fa5e:	9301      	str	r3, [sp, #4]
 800fa60:	ab02      	add	r3, sp, #8
 800fa62:	9300      	str	r3, [sp, #0]
 800fa64:	ec45 4b10 	vmov	d0, r4, r5
 800fa68:	4653      	mov	r3, sl
 800fa6a:	4632      	mov	r2, r6
 800fa6c:	f001 fdbc 	bl	80115e8 <_dtoa_r>
 800fa70:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800fa74:	4607      	mov	r7, r0
 800fa76:	d102      	bne.n	800fa7e <__cvt+0x66>
 800fa78:	f019 0f01 	tst.w	r9, #1
 800fa7c:	d022      	beq.n	800fac4 <__cvt+0xac>
 800fa7e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800fa82:	eb07 0906 	add.w	r9, r7, r6
 800fa86:	d110      	bne.n	800faaa <__cvt+0x92>
 800fa88:	783b      	ldrb	r3, [r7, #0]
 800fa8a:	2b30      	cmp	r3, #48	; 0x30
 800fa8c:	d10a      	bne.n	800faa4 <__cvt+0x8c>
 800fa8e:	2200      	movs	r2, #0
 800fa90:	2300      	movs	r3, #0
 800fa92:	4620      	mov	r0, r4
 800fa94:	4629      	mov	r1, r5
 800fa96:	f7f1 f83f 	bl	8000b18 <__aeabi_dcmpeq>
 800fa9a:	b918      	cbnz	r0, 800faa4 <__cvt+0x8c>
 800fa9c:	f1c6 0601 	rsb	r6, r6, #1
 800faa0:	f8ca 6000 	str.w	r6, [sl]
 800faa4:	f8da 3000 	ldr.w	r3, [sl]
 800faa8:	4499      	add	r9, r3
 800faaa:	2200      	movs	r2, #0
 800faac:	2300      	movs	r3, #0
 800faae:	4620      	mov	r0, r4
 800fab0:	4629      	mov	r1, r5
 800fab2:	f7f1 f831 	bl	8000b18 <__aeabi_dcmpeq>
 800fab6:	b108      	cbz	r0, 800fabc <__cvt+0xa4>
 800fab8:	f8cd 900c 	str.w	r9, [sp, #12]
 800fabc:	2230      	movs	r2, #48	; 0x30
 800fabe:	9b03      	ldr	r3, [sp, #12]
 800fac0:	454b      	cmp	r3, r9
 800fac2:	d307      	bcc.n	800fad4 <__cvt+0xbc>
 800fac4:	9b03      	ldr	r3, [sp, #12]
 800fac6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fac8:	1bdb      	subs	r3, r3, r7
 800faca:	4638      	mov	r0, r7
 800facc:	6013      	str	r3, [r2, #0]
 800face:	b004      	add	sp, #16
 800fad0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fad4:	1c59      	adds	r1, r3, #1
 800fad6:	9103      	str	r1, [sp, #12]
 800fad8:	701a      	strb	r2, [r3, #0]
 800fada:	e7f0      	b.n	800fabe <__cvt+0xa6>

0800fadc <__exponent>:
 800fadc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fade:	4603      	mov	r3, r0
 800fae0:	2900      	cmp	r1, #0
 800fae2:	bfb8      	it	lt
 800fae4:	4249      	neglt	r1, r1
 800fae6:	f803 2b02 	strb.w	r2, [r3], #2
 800faea:	bfb4      	ite	lt
 800faec:	222d      	movlt	r2, #45	; 0x2d
 800faee:	222b      	movge	r2, #43	; 0x2b
 800faf0:	2909      	cmp	r1, #9
 800faf2:	7042      	strb	r2, [r0, #1]
 800faf4:	dd2a      	ble.n	800fb4c <__exponent+0x70>
 800faf6:	f10d 0407 	add.w	r4, sp, #7
 800fafa:	46a4      	mov	ip, r4
 800fafc:	270a      	movs	r7, #10
 800fafe:	46a6      	mov	lr, r4
 800fb00:	460a      	mov	r2, r1
 800fb02:	fb91 f6f7 	sdiv	r6, r1, r7
 800fb06:	fb07 1516 	mls	r5, r7, r6, r1
 800fb0a:	3530      	adds	r5, #48	; 0x30
 800fb0c:	2a63      	cmp	r2, #99	; 0x63
 800fb0e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800fb12:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800fb16:	4631      	mov	r1, r6
 800fb18:	dcf1      	bgt.n	800fafe <__exponent+0x22>
 800fb1a:	3130      	adds	r1, #48	; 0x30
 800fb1c:	f1ae 0502 	sub.w	r5, lr, #2
 800fb20:	f804 1c01 	strb.w	r1, [r4, #-1]
 800fb24:	1c44      	adds	r4, r0, #1
 800fb26:	4629      	mov	r1, r5
 800fb28:	4561      	cmp	r1, ip
 800fb2a:	d30a      	bcc.n	800fb42 <__exponent+0x66>
 800fb2c:	f10d 0209 	add.w	r2, sp, #9
 800fb30:	eba2 020e 	sub.w	r2, r2, lr
 800fb34:	4565      	cmp	r5, ip
 800fb36:	bf88      	it	hi
 800fb38:	2200      	movhi	r2, #0
 800fb3a:	4413      	add	r3, r2
 800fb3c:	1a18      	subs	r0, r3, r0
 800fb3e:	b003      	add	sp, #12
 800fb40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fb42:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fb46:	f804 2f01 	strb.w	r2, [r4, #1]!
 800fb4a:	e7ed      	b.n	800fb28 <__exponent+0x4c>
 800fb4c:	2330      	movs	r3, #48	; 0x30
 800fb4e:	3130      	adds	r1, #48	; 0x30
 800fb50:	7083      	strb	r3, [r0, #2]
 800fb52:	70c1      	strb	r1, [r0, #3]
 800fb54:	1d03      	adds	r3, r0, #4
 800fb56:	e7f1      	b.n	800fb3c <__exponent+0x60>

0800fb58 <_printf_float>:
 800fb58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb5c:	ed2d 8b02 	vpush	{d8}
 800fb60:	b08d      	sub	sp, #52	; 0x34
 800fb62:	460c      	mov	r4, r1
 800fb64:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800fb68:	4616      	mov	r6, r2
 800fb6a:	461f      	mov	r7, r3
 800fb6c:	4605      	mov	r5, r0
 800fb6e:	f002 fe99 	bl	80128a4 <_localeconv_r>
 800fb72:	f8d0 a000 	ldr.w	sl, [r0]
 800fb76:	4650      	mov	r0, sl
 800fb78:	f7f0 fb4c 	bl	8000214 <strlen>
 800fb7c:	2300      	movs	r3, #0
 800fb7e:	930a      	str	r3, [sp, #40]	; 0x28
 800fb80:	6823      	ldr	r3, [r4, #0]
 800fb82:	9305      	str	r3, [sp, #20]
 800fb84:	f8d8 3000 	ldr.w	r3, [r8]
 800fb88:	f894 b018 	ldrb.w	fp, [r4, #24]
 800fb8c:	3307      	adds	r3, #7
 800fb8e:	f023 0307 	bic.w	r3, r3, #7
 800fb92:	f103 0208 	add.w	r2, r3, #8
 800fb96:	f8c8 2000 	str.w	r2, [r8]
 800fb9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb9e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800fba2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800fba6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800fbaa:	9307      	str	r3, [sp, #28]
 800fbac:	f8cd 8018 	str.w	r8, [sp, #24]
 800fbb0:	ee08 0a10 	vmov	s16, r0
 800fbb4:	4b9f      	ldr	r3, [pc, #636]	; (800fe34 <_printf_float+0x2dc>)
 800fbb6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fbba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fbbe:	f7f0 ffdd 	bl	8000b7c <__aeabi_dcmpun>
 800fbc2:	bb88      	cbnz	r0, 800fc28 <_printf_float+0xd0>
 800fbc4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fbc8:	4b9a      	ldr	r3, [pc, #616]	; (800fe34 <_printf_float+0x2dc>)
 800fbca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fbce:	f7f0 ffb7 	bl	8000b40 <__aeabi_dcmple>
 800fbd2:	bb48      	cbnz	r0, 800fc28 <_printf_float+0xd0>
 800fbd4:	2200      	movs	r2, #0
 800fbd6:	2300      	movs	r3, #0
 800fbd8:	4640      	mov	r0, r8
 800fbda:	4649      	mov	r1, r9
 800fbdc:	f7f0 ffa6 	bl	8000b2c <__aeabi_dcmplt>
 800fbe0:	b110      	cbz	r0, 800fbe8 <_printf_float+0x90>
 800fbe2:	232d      	movs	r3, #45	; 0x2d
 800fbe4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fbe8:	4b93      	ldr	r3, [pc, #588]	; (800fe38 <_printf_float+0x2e0>)
 800fbea:	4894      	ldr	r0, [pc, #592]	; (800fe3c <_printf_float+0x2e4>)
 800fbec:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800fbf0:	bf94      	ite	ls
 800fbf2:	4698      	movls	r8, r3
 800fbf4:	4680      	movhi	r8, r0
 800fbf6:	2303      	movs	r3, #3
 800fbf8:	6123      	str	r3, [r4, #16]
 800fbfa:	9b05      	ldr	r3, [sp, #20]
 800fbfc:	f023 0204 	bic.w	r2, r3, #4
 800fc00:	6022      	str	r2, [r4, #0]
 800fc02:	f04f 0900 	mov.w	r9, #0
 800fc06:	9700      	str	r7, [sp, #0]
 800fc08:	4633      	mov	r3, r6
 800fc0a:	aa0b      	add	r2, sp, #44	; 0x2c
 800fc0c:	4621      	mov	r1, r4
 800fc0e:	4628      	mov	r0, r5
 800fc10:	f000 f9d8 	bl	800ffc4 <_printf_common>
 800fc14:	3001      	adds	r0, #1
 800fc16:	f040 8090 	bne.w	800fd3a <_printf_float+0x1e2>
 800fc1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fc1e:	b00d      	add	sp, #52	; 0x34
 800fc20:	ecbd 8b02 	vpop	{d8}
 800fc24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc28:	4642      	mov	r2, r8
 800fc2a:	464b      	mov	r3, r9
 800fc2c:	4640      	mov	r0, r8
 800fc2e:	4649      	mov	r1, r9
 800fc30:	f7f0 ffa4 	bl	8000b7c <__aeabi_dcmpun>
 800fc34:	b140      	cbz	r0, 800fc48 <_printf_float+0xf0>
 800fc36:	464b      	mov	r3, r9
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	bfbc      	itt	lt
 800fc3c:	232d      	movlt	r3, #45	; 0x2d
 800fc3e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800fc42:	487f      	ldr	r0, [pc, #508]	; (800fe40 <_printf_float+0x2e8>)
 800fc44:	4b7f      	ldr	r3, [pc, #508]	; (800fe44 <_printf_float+0x2ec>)
 800fc46:	e7d1      	b.n	800fbec <_printf_float+0x94>
 800fc48:	6863      	ldr	r3, [r4, #4]
 800fc4a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800fc4e:	9206      	str	r2, [sp, #24]
 800fc50:	1c5a      	adds	r2, r3, #1
 800fc52:	d13f      	bne.n	800fcd4 <_printf_float+0x17c>
 800fc54:	2306      	movs	r3, #6
 800fc56:	6063      	str	r3, [r4, #4]
 800fc58:	9b05      	ldr	r3, [sp, #20]
 800fc5a:	6861      	ldr	r1, [r4, #4]
 800fc5c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800fc60:	2300      	movs	r3, #0
 800fc62:	9303      	str	r3, [sp, #12]
 800fc64:	ab0a      	add	r3, sp, #40	; 0x28
 800fc66:	e9cd b301 	strd	fp, r3, [sp, #4]
 800fc6a:	ab09      	add	r3, sp, #36	; 0x24
 800fc6c:	ec49 8b10 	vmov	d0, r8, r9
 800fc70:	9300      	str	r3, [sp, #0]
 800fc72:	6022      	str	r2, [r4, #0]
 800fc74:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800fc78:	4628      	mov	r0, r5
 800fc7a:	f7ff fecd 	bl	800fa18 <__cvt>
 800fc7e:	9b06      	ldr	r3, [sp, #24]
 800fc80:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fc82:	2b47      	cmp	r3, #71	; 0x47
 800fc84:	4680      	mov	r8, r0
 800fc86:	d108      	bne.n	800fc9a <_printf_float+0x142>
 800fc88:	1cc8      	adds	r0, r1, #3
 800fc8a:	db02      	blt.n	800fc92 <_printf_float+0x13a>
 800fc8c:	6863      	ldr	r3, [r4, #4]
 800fc8e:	4299      	cmp	r1, r3
 800fc90:	dd41      	ble.n	800fd16 <_printf_float+0x1be>
 800fc92:	f1ab 0b02 	sub.w	fp, fp, #2
 800fc96:	fa5f fb8b 	uxtb.w	fp, fp
 800fc9a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800fc9e:	d820      	bhi.n	800fce2 <_printf_float+0x18a>
 800fca0:	3901      	subs	r1, #1
 800fca2:	465a      	mov	r2, fp
 800fca4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800fca8:	9109      	str	r1, [sp, #36]	; 0x24
 800fcaa:	f7ff ff17 	bl	800fadc <__exponent>
 800fcae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fcb0:	1813      	adds	r3, r2, r0
 800fcb2:	2a01      	cmp	r2, #1
 800fcb4:	4681      	mov	r9, r0
 800fcb6:	6123      	str	r3, [r4, #16]
 800fcb8:	dc02      	bgt.n	800fcc0 <_printf_float+0x168>
 800fcba:	6822      	ldr	r2, [r4, #0]
 800fcbc:	07d2      	lsls	r2, r2, #31
 800fcbe:	d501      	bpl.n	800fcc4 <_printf_float+0x16c>
 800fcc0:	3301      	adds	r3, #1
 800fcc2:	6123      	str	r3, [r4, #16]
 800fcc4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	d09c      	beq.n	800fc06 <_printf_float+0xae>
 800fccc:	232d      	movs	r3, #45	; 0x2d
 800fcce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fcd2:	e798      	b.n	800fc06 <_printf_float+0xae>
 800fcd4:	9a06      	ldr	r2, [sp, #24]
 800fcd6:	2a47      	cmp	r2, #71	; 0x47
 800fcd8:	d1be      	bne.n	800fc58 <_printf_float+0x100>
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d1bc      	bne.n	800fc58 <_printf_float+0x100>
 800fcde:	2301      	movs	r3, #1
 800fce0:	e7b9      	b.n	800fc56 <_printf_float+0xfe>
 800fce2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800fce6:	d118      	bne.n	800fd1a <_printf_float+0x1c2>
 800fce8:	2900      	cmp	r1, #0
 800fcea:	6863      	ldr	r3, [r4, #4]
 800fcec:	dd0b      	ble.n	800fd06 <_printf_float+0x1ae>
 800fcee:	6121      	str	r1, [r4, #16]
 800fcf0:	b913      	cbnz	r3, 800fcf8 <_printf_float+0x1a0>
 800fcf2:	6822      	ldr	r2, [r4, #0]
 800fcf4:	07d0      	lsls	r0, r2, #31
 800fcf6:	d502      	bpl.n	800fcfe <_printf_float+0x1a6>
 800fcf8:	3301      	adds	r3, #1
 800fcfa:	440b      	add	r3, r1
 800fcfc:	6123      	str	r3, [r4, #16]
 800fcfe:	65a1      	str	r1, [r4, #88]	; 0x58
 800fd00:	f04f 0900 	mov.w	r9, #0
 800fd04:	e7de      	b.n	800fcc4 <_printf_float+0x16c>
 800fd06:	b913      	cbnz	r3, 800fd0e <_printf_float+0x1b6>
 800fd08:	6822      	ldr	r2, [r4, #0]
 800fd0a:	07d2      	lsls	r2, r2, #31
 800fd0c:	d501      	bpl.n	800fd12 <_printf_float+0x1ba>
 800fd0e:	3302      	adds	r3, #2
 800fd10:	e7f4      	b.n	800fcfc <_printf_float+0x1a4>
 800fd12:	2301      	movs	r3, #1
 800fd14:	e7f2      	b.n	800fcfc <_printf_float+0x1a4>
 800fd16:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800fd1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fd1c:	4299      	cmp	r1, r3
 800fd1e:	db05      	blt.n	800fd2c <_printf_float+0x1d4>
 800fd20:	6823      	ldr	r3, [r4, #0]
 800fd22:	6121      	str	r1, [r4, #16]
 800fd24:	07d8      	lsls	r0, r3, #31
 800fd26:	d5ea      	bpl.n	800fcfe <_printf_float+0x1a6>
 800fd28:	1c4b      	adds	r3, r1, #1
 800fd2a:	e7e7      	b.n	800fcfc <_printf_float+0x1a4>
 800fd2c:	2900      	cmp	r1, #0
 800fd2e:	bfd4      	ite	le
 800fd30:	f1c1 0202 	rsble	r2, r1, #2
 800fd34:	2201      	movgt	r2, #1
 800fd36:	4413      	add	r3, r2
 800fd38:	e7e0      	b.n	800fcfc <_printf_float+0x1a4>
 800fd3a:	6823      	ldr	r3, [r4, #0]
 800fd3c:	055a      	lsls	r2, r3, #21
 800fd3e:	d407      	bmi.n	800fd50 <_printf_float+0x1f8>
 800fd40:	6923      	ldr	r3, [r4, #16]
 800fd42:	4642      	mov	r2, r8
 800fd44:	4631      	mov	r1, r6
 800fd46:	4628      	mov	r0, r5
 800fd48:	47b8      	blx	r7
 800fd4a:	3001      	adds	r0, #1
 800fd4c:	d12c      	bne.n	800fda8 <_printf_float+0x250>
 800fd4e:	e764      	b.n	800fc1a <_printf_float+0xc2>
 800fd50:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800fd54:	f240 80e0 	bls.w	800ff18 <_printf_float+0x3c0>
 800fd58:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800fd5c:	2200      	movs	r2, #0
 800fd5e:	2300      	movs	r3, #0
 800fd60:	f7f0 feda 	bl	8000b18 <__aeabi_dcmpeq>
 800fd64:	2800      	cmp	r0, #0
 800fd66:	d034      	beq.n	800fdd2 <_printf_float+0x27a>
 800fd68:	4a37      	ldr	r2, [pc, #220]	; (800fe48 <_printf_float+0x2f0>)
 800fd6a:	2301      	movs	r3, #1
 800fd6c:	4631      	mov	r1, r6
 800fd6e:	4628      	mov	r0, r5
 800fd70:	47b8      	blx	r7
 800fd72:	3001      	adds	r0, #1
 800fd74:	f43f af51 	beq.w	800fc1a <_printf_float+0xc2>
 800fd78:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800fd7c:	429a      	cmp	r2, r3
 800fd7e:	db02      	blt.n	800fd86 <_printf_float+0x22e>
 800fd80:	6823      	ldr	r3, [r4, #0]
 800fd82:	07d8      	lsls	r0, r3, #31
 800fd84:	d510      	bpl.n	800fda8 <_printf_float+0x250>
 800fd86:	ee18 3a10 	vmov	r3, s16
 800fd8a:	4652      	mov	r2, sl
 800fd8c:	4631      	mov	r1, r6
 800fd8e:	4628      	mov	r0, r5
 800fd90:	47b8      	blx	r7
 800fd92:	3001      	adds	r0, #1
 800fd94:	f43f af41 	beq.w	800fc1a <_printf_float+0xc2>
 800fd98:	f04f 0800 	mov.w	r8, #0
 800fd9c:	f104 091a 	add.w	r9, r4, #26
 800fda0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fda2:	3b01      	subs	r3, #1
 800fda4:	4543      	cmp	r3, r8
 800fda6:	dc09      	bgt.n	800fdbc <_printf_float+0x264>
 800fda8:	6823      	ldr	r3, [r4, #0]
 800fdaa:	079b      	lsls	r3, r3, #30
 800fdac:	f100 8105 	bmi.w	800ffba <_printf_float+0x462>
 800fdb0:	68e0      	ldr	r0, [r4, #12]
 800fdb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fdb4:	4298      	cmp	r0, r3
 800fdb6:	bfb8      	it	lt
 800fdb8:	4618      	movlt	r0, r3
 800fdba:	e730      	b.n	800fc1e <_printf_float+0xc6>
 800fdbc:	2301      	movs	r3, #1
 800fdbe:	464a      	mov	r2, r9
 800fdc0:	4631      	mov	r1, r6
 800fdc2:	4628      	mov	r0, r5
 800fdc4:	47b8      	blx	r7
 800fdc6:	3001      	adds	r0, #1
 800fdc8:	f43f af27 	beq.w	800fc1a <_printf_float+0xc2>
 800fdcc:	f108 0801 	add.w	r8, r8, #1
 800fdd0:	e7e6      	b.n	800fda0 <_printf_float+0x248>
 800fdd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fdd4:	2b00      	cmp	r3, #0
 800fdd6:	dc39      	bgt.n	800fe4c <_printf_float+0x2f4>
 800fdd8:	4a1b      	ldr	r2, [pc, #108]	; (800fe48 <_printf_float+0x2f0>)
 800fdda:	2301      	movs	r3, #1
 800fddc:	4631      	mov	r1, r6
 800fdde:	4628      	mov	r0, r5
 800fde0:	47b8      	blx	r7
 800fde2:	3001      	adds	r0, #1
 800fde4:	f43f af19 	beq.w	800fc1a <_printf_float+0xc2>
 800fde8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800fdec:	4313      	orrs	r3, r2
 800fdee:	d102      	bne.n	800fdf6 <_printf_float+0x29e>
 800fdf0:	6823      	ldr	r3, [r4, #0]
 800fdf2:	07d9      	lsls	r1, r3, #31
 800fdf4:	d5d8      	bpl.n	800fda8 <_printf_float+0x250>
 800fdf6:	ee18 3a10 	vmov	r3, s16
 800fdfa:	4652      	mov	r2, sl
 800fdfc:	4631      	mov	r1, r6
 800fdfe:	4628      	mov	r0, r5
 800fe00:	47b8      	blx	r7
 800fe02:	3001      	adds	r0, #1
 800fe04:	f43f af09 	beq.w	800fc1a <_printf_float+0xc2>
 800fe08:	f04f 0900 	mov.w	r9, #0
 800fe0c:	f104 0a1a 	add.w	sl, r4, #26
 800fe10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fe12:	425b      	negs	r3, r3
 800fe14:	454b      	cmp	r3, r9
 800fe16:	dc01      	bgt.n	800fe1c <_printf_float+0x2c4>
 800fe18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fe1a:	e792      	b.n	800fd42 <_printf_float+0x1ea>
 800fe1c:	2301      	movs	r3, #1
 800fe1e:	4652      	mov	r2, sl
 800fe20:	4631      	mov	r1, r6
 800fe22:	4628      	mov	r0, r5
 800fe24:	47b8      	blx	r7
 800fe26:	3001      	adds	r0, #1
 800fe28:	f43f aef7 	beq.w	800fc1a <_printf_float+0xc2>
 800fe2c:	f109 0901 	add.w	r9, r9, #1
 800fe30:	e7ee      	b.n	800fe10 <_printf_float+0x2b8>
 800fe32:	bf00      	nop
 800fe34:	7fefffff 	.word	0x7fefffff
 800fe38:	08014c38 	.word	0x08014c38
 800fe3c:	08014c3c 	.word	0x08014c3c
 800fe40:	08014c44 	.word	0x08014c44
 800fe44:	08014c40 	.word	0x08014c40
 800fe48:	08014c48 	.word	0x08014c48
 800fe4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fe4e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800fe50:	429a      	cmp	r2, r3
 800fe52:	bfa8      	it	ge
 800fe54:	461a      	movge	r2, r3
 800fe56:	2a00      	cmp	r2, #0
 800fe58:	4691      	mov	r9, r2
 800fe5a:	dc37      	bgt.n	800fecc <_printf_float+0x374>
 800fe5c:	f04f 0b00 	mov.w	fp, #0
 800fe60:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fe64:	f104 021a 	add.w	r2, r4, #26
 800fe68:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800fe6a:	9305      	str	r3, [sp, #20]
 800fe6c:	eba3 0309 	sub.w	r3, r3, r9
 800fe70:	455b      	cmp	r3, fp
 800fe72:	dc33      	bgt.n	800fedc <_printf_float+0x384>
 800fe74:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800fe78:	429a      	cmp	r2, r3
 800fe7a:	db3b      	blt.n	800fef4 <_printf_float+0x39c>
 800fe7c:	6823      	ldr	r3, [r4, #0]
 800fe7e:	07da      	lsls	r2, r3, #31
 800fe80:	d438      	bmi.n	800fef4 <_printf_float+0x39c>
 800fe82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fe84:	9a05      	ldr	r2, [sp, #20]
 800fe86:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fe88:	1a9a      	subs	r2, r3, r2
 800fe8a:	eba3 0901 	sub.w	r9, r3, r1
 800fe8e:	4591      	cmp	r9, r2
 800fe90:	bfa8      	it	ge
 800fe92:	4691      	movge	r9, r2
 800fe94:	f1b9 0f00 	cmp.w	r9, #0
 800fe98:	dc35      	bgt.n	800ff06 <_printf_float+0x3ae>
 800fe9a:	f04f 0800 	mov.w	r8, #0
 800fe9e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800fea2:	f104 0a1a 	add.w	sl, r4, #26
 800fea6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800feaa:	1a9b      	subs	r3, r3, r2
 800feac:	eba3 0309 	sub.w	r3, r3, r9
 800feb0:	4543      	cmp	r3, r8
 800feb2:	f77f af79 	ble.w	800fda8 <_printf_float+0x250>
 800feb6:	2301      	movs	r3, #1
 800feb8:	4652      	mov	r2, sl
 800feba:	4631      	mov	r1, r6
 800febc:	4628      	mov	r0, r5
 800febe:	47b8      	blx	r7
 800fec0:	3001      	adds	r0, #1
 800fec2:	f43f aeaa 	beq.w	800fc1a <_printf_float+0xc2>
 800fec6:	f108 0801 	add.w	r8, r8, #1
 800feca:	e7ec      	b.n	800fea6 <_printf_float+0x34e>
 800fecc:	4613      	mov	r3, r2
 800fece:	4631      	mov	r1, r6
 800fed0:	4642      	mov	r2, r8
 800fed2:	4628      	mov	r0, r5
 800fed4:	47b8      	blx	r7
 800fed6:	3001      	adds	r0, #1
 800fed8:	d1c0      	bne.n	800fe5c <_printf_float+0x304>
 800feda:	e69e      	b.n	800fc1a <_printf_float+0xc2>
 800fedc:	2301      	movs	r3, #1
 800fede:	4631      	mov	r1, r6
 800fee0:	4628      	mov	r0, r5
 800fee2:	9205      	str	r2, [sp, #20]
 800fee4:	47b8      	blx	r7
 800fee6:	3001      	adds	r0, #1
 800fee8:	f43f ae97 	beq.w	800fc1a <_printf_float+0xc2>
 800feec:	9a05      	ldr	r2, [sp, #20]
 800feee:	f10b 0b01 	add.w	fp, fp, #1
 800fef2:	e7b9      	b.n	800fe68 <_printf_float+0x310>
 800fef4:	ee18 3a10 	vmov	r3, s16
 800fef8:	4652      	mov	r2, sl
 800fefa:	4631      	mov	r1, r6
 800fefc:	4628      	mov	r0, r5
 800fefe:	47b8      	blx	r7
 800ff00:	3001      	adds	r0, #1
 800ff02:	d1be      	bne.n	800fe82 <_printf_float+0x32a>
 800ff04:	e689      	b.n	800fc1a <_printf_float+0xc2>
 800ff06:	9a05      	ldr	r2, [sp, #20]
 800ff08:	464b      	mov	r3, r9
 800ff0a:	4442      	add	r2, r8
 800ff0c:	4631      	mov	r1, r6
 800ff0e:	4628      	mov	r0, r5
 800ff10:	47b8      	blx	r7
 800ff12:	3001      	adds	r0, #1
 800ff14:	d1c1      	bne.n	800fe9a <_printf_float+0x342>
 800ff16:	e680      	b.n	800fc1a <_printf_float+0xc2>
 800ff18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ff1a:	2a01      	cmp	r2, #1
 800ff1c:	dc01      	bgt.n	800ff22 <_printf_float+0x3ca>
 800ff1e:	07db      	lsls	r3, r3, #31
 800ff20:	d538      	bpl.n	800ff94 <_printf_float+0x43c>
 800ff22:	2301      	movs	r3, #1
 800ff24:	4642      	mov	r2, r8
 800ff26:	4631      	mov	r1, r6
 800ff28:	4628      	mov	r0, r5
 800ff2a:	47b8      	blx	r7
 800ff2c:	3001      	adds	r0, #1
 800ff2e:	f43f ae74 	beq.w	800fc1a <_printf_float+0xc2>
 800ff32:	ee18 3a10 	vmov	r3, s16
 800ff36:	4652      	mov	r2, sl
 800ff38:	4631      	mov	r1, r6
 800ff3a:	4628      	mov	r0, r5
 800ff3c:	47b8      	blx	r7
 800ff3e:	3001      	adds	r0, #1
 800ff40:	f43f ae6b 	beq.w	800fc1a <_printf_float+0xc2>
 800ff44:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ff48:	2200      	movs	r2, #0
 800ff4a:	2300      	movs	r3, #0
 800ff4c:	f7f0 fde4 	bl	8000b18 <__aeabi_dcmpeq>
 800ff50:	b9d8      	cbnz	r0, 800ff8a <_printf_float+0x432>
 800ff52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ff54:	f108 0201 	add.w	r2, r8, #1
 800ff58:	3b01      	subs	r3, #1
 800ff5a:	4631      	mov	r1, r6
 800ff5c:	4628      	mov	r0, r5
 800ff5e:	47b8      	blx	r7
 800ff60:	3001      	adds	r0, #1
 800ff62:	d10e      	bne.n	800ff82 <_printf_float+0x42a>
 800ff64:	e659      	b.n	800fc1a <_printf_float+0xc2>
 800ff66:	2301      	movs	r3, #1
 800ff68:	4652      	mov	r2, sl
 800ff6a:	4631      	mov	r1, r6
 800ff6c:	4628      	mov	r0, r5
 800ff6e:	47b8      	blx	r7
 800ff70:	3001      	adds	r0, #1
 800ff72:	f43f ae52 	beq.w	800fc1a <_printf_float+0xc2>
 800ff76:	f108 0801 	add.w	r8, r8, #1
 800ff7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ff7c:	3b01      	subs	r3, #1
 800ff7e:	4543      	cmp	r3, r8
 800ff80:	dcf1      	bgt.n	800ff66 <_printf_float+0x40e>
 800ff82:	464b      	mov	r3, r9
 800ff84:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ff88:	e6dc      	b.n	800fd44 <_printf_float+0x1ec>
 800ff8a:	f04f 0800 	mov.w	r8, #0
 800ff8e:	f104 0a1a 	add.w	sl, r4, #26
 800ff92:	e7f2      	b.n	800ff7a <_printf_float+0x422>
 800ff94:	2301      	movs	r3, #1
 800ff96:	4642      	mov	r2, r8
 800ff98:	e7df      	b.n	800ff5a <_printf_float+0x402>
 800ff9a:	2301      	movs	r3, #1
 800ff9c:	464a      	mov	r2, r9
 800ff9e:	4631      	mov	r1, r6
 800ffa0:	4628      	mov	r0, r5
 800ffa2:	47b8      	blx	r7
 800ffa4:	3001      	adds	r0, #1
 800ffa6:	f43f ae38 	beq.w	800fc1a <_printf_float+0xc2>
 800ffaa:	f108 0801 	add.w	r8, r8, #1
 800ffae:	68e3      	ldr	r3, [r4, #12]
 800ffb0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ffb2:	1a5b      	subs	r3, r3, r1
 800ffb4:	4543      	cmp	r3, r8
 800ffb6:	dcf0      	bgt.n	800ff9a <_printf_float+0x442>
 800ffb8:	e6fa      	b.n	800fdb0 <_printf_float+0x258>
 800ffba:	f04f 0800 	mov.w	r8, #0
 800ffbe:	f104 0919 	add.w	r9, r4, #25
 800ffc2:	e7f4      	b.n	800ffae <_printf_float+0x456>

0800ffc4 <_printf_common>:
 800ffc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ffc8:	4616      	mov	r6, r2
 800ffca:	4699      	mov	r9, r3
 800ffcc:	688a      	ldr	r2, [r1, #8]
 800ffce:	690b      	ldr	r3, [r1, #16]
 800ffd0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ffd4:	4293      	cmp	r3, r2
 800ffd6:	bfb8      	it	lt
 800ffd8:	4613      	movlt	r3, r2
 800ffda:	6033      	str	r3, [r6, #0]
 800ffdc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ffe0:	4607      	mov	r7, r0
 800ffe2:	460c      	mov	r4, r1
 800ffe4:	b10a      	cbz	r2, 800ffea <_printf_common+0x26>
 800ffe6:	3301      	adds	r3, #1
 800ffe8:	6033      	str	r3, [r6, #0]
 800ffea:	6823      	ldr	r3, [r4, #0]
 800ffec:	0699      	lsls	r1, r3, #26
 800ffee:	bf42      	ittt	mi
 800fff0:	6833      	ldrmi	r3, [r6, #0]
 800fff2:	3302      	addmi	r3, #2
 800fff4:	6033      	strmi	r3, [r6, #0]
 800fff6:	6825      	ldr	r5, [r4, #0]
 800fff8:	f015 0506 	ands.w	r5, r5, #6
 800fffc:	d106      	bne.n	801000c <_printf_common+0x48>
 800fffe:	f104 0a19 	add.w	sl, r4, #25
 8010002:	68e3      	ldr	r3, [r4, #12]
 8010004:	6832      	ldr	r2, [r6, #0]
 8010006:	1a9b      	subs	r3, r3, r2
 8010008:	42ab      	cmp	r3, r5
 801000a:	dc26      	bgt.n	801005a <_printf_common+0x96>
 801000c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010010:	1e13      	subs	r3, r2, #0
 8010012:	6822      	ldr	r2, [r4, #0]
 8010014:	bf18      	it	ne
 8010016:	2301      	movne	r3, #1
 8010018:	0692      	lsls	r2, r2, #26
 801001a:	d42b      	bmi.n	8010074 <_printf_common+0xb0>
 801001c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010020:	4649      	mov	r1, r9
 8010022:	4638      	mov	r0, r7
 8010024:	47c0      	blx	r8
 8010026:	3001      	adds	r0, #1
 8010028:	d01e      	beq.n	8010068 <_printf_common+0xa4>
 801002a:	6823      	ldr	r3, [r4, #0]
 801002c:	68e5      	ldr	r5, [r4, #12]
 801002e:	6832      	ldr	r2, [r6, #0]
 8010030:	f003 0306 	and.w	r3, r3, #6
 8010034:	2b04      	cmp	r3, #4
 8010036:	bf08      	it	eq
 8010038:	1aad      	subeq	r5, r5, r2
 801003a:	68a3      	ldr	r3, [r4, #8]
 801003c:	6922      	ldr	r2, [r4, #16]
 801003e:	bf0c      	ite	eq
 8010040:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010044:	2500      	movne	r5, #0
 8010046:	4293      	cmp	r3, r2
 8010048:	bfc4      	itt	gt
 801004a:	1a9b      	subgt	r3, r3, r2
 801004c:	18ed      	addgt	r5, r5, r3
 801004e:	2600      	movs	r6, #0
 8010050:	341a      	adds	r4, #26
 8010052:	42b5      	cmp	r5, r6
 8010054:	d11a      	bne.n	801008c <_printf_common+0xc8>
 8010056:	2000      	movs	r0, #0
 8010058:	e008      	b.n	801006c <_printf_common+0xa8>
 801005a:	2301      	movs	r3, #1
 801005c:	4652      	mov	r2, sl
 801005e:	4649      	mov	r1, r9
 8010060:	4638      	mov	r0, r7
 8010062:	47c0      	blx	r8
 8010064:	3001      	adds	r0, #1
 8010066:	d103      	bne.n	8010070 <_printf_common+0xac>
 8010068:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801006c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010070:	3501      	adds	r5, #1
 8010072:	e7c6      	b.n	8010002 <_printf_common+0x3e>
 8010074:	18e1      	adds	r1, r4, r3
 8010076:	1c5a      	adds	r2, r3, #1
 8010078:	2030      	movs	r0, #48	; 0x30
 801007a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801007e:	4422      	add	r2, r4
 8010080:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010084:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010088:	3302      	adds	r3, #2
 801008a:	e7c7      	b.n	801001c <_printf_common+0x58>
 801008c:	2301      	movs	r3, #1
 801008e:	4622      	mov	r2, r4
 8010090:	4649      	mov	r1, r9
 8010092:	4638      	mov	r0, r7
 8010094:	47c0      	blx	r8
 8010096:	3001      	adds	r0, #1
 8010098:	d0e6      	beq.n	8010068 <_printf_common+0xa4>
 801009a:	3601      	adds	r6, #1
 801009c:	e7d9      	b.n	8010052 <_printf_common+0x8e>
	...

080100a0 <_printf_i>:
 80100a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80100a4:	7e0f      	ldrb	r7, [r1, #24]
 80100a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80100a8:	2f78      	cmp	r7, #120	; 0x78
 80100aa:	4691      	mov	r9, r2
 80100ac:	4680      	mov	r8, r0
 80100ae:	460c      	mov	r4, r1
 80100b0:	469a      	mov	sl, r3
 80100b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80100b6:	d807      	bhi.n	80100c8 <_printf_i+0x28>
 80100b8:	2f62      	cmp	r7, #98	; 0x62
 80100ba:	d80a      	bhi.n	80100d2 <_printf_i+0x32>
 80100bc:	2f00      	cmp	r7, #0
 80100be:	f000 80d8 	beq.w	8010272 <_printf_i+0x1d2>
 80100c2:	2f58      	cmp	r7, #88	; 0x58
 80100c4:	f000 80a3 	beq.w	801020e <_printf_i+0x16e>
 80100c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80100cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80100d0:	e03a      	b.n	8010148 <_printf_i+0xa8>
 80100d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80100d6:	2b15      	cmp	r3, #21
 80100d8:	d8f6      	bhi.n	80100c8 <_printf_i+0x28>
 80100da:	a101      	add	r1, pc, #4	; (adr r1, 80100e0 <_printf_i+0x40>)
 80100dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80100e0:	08010139 	.word	0x08010139
 80100e4:	0801014d 	.word	0x0801014d
 80100e8:	080100c9 	.word	0x080100c9
 80100ec:	080100c9 	.word	0x080100c9
 80100f0:	080100c9 	.word	0x080100c9
 80100f4:	080100c9 	.word	0x080100c9
 80100f8:	0801014d 	.word	0x0801014d
 80100fc:	080100c9 	.word	0x080100c9
 8010100:	080100c9 	.word	0x080100c9
 8010104:	080100c9 	.word	0x080100c9
 8010108:	080100c9 	.word	0x080100c9
 801010c:	08010259 	.word	0x08010259
 8010110:	0801017d 	.word	0x0801017d
 8010114:	0801023b 	.word	0x0801023b
 8010118:	080100c9 	.word	0x080100c9
 801011c:	080100c9 	.word	0x080100c9
 8010120:	0801027b 	.word	0x0801027b
 8010124:	080100c9 	.word	0x080100c9
 8010128:	0801017d 	.word	0x0801017d
 801012c:	080100c9 	.word	0x080100c9
 8010130:	080100c9 	.word	0x080100c9
 8010134:	08010243 	.word	0x08010243
 8010138:	682b      	ldr	r3, [r5, #0]
 801013a:	1d1a      	adds	r2, r3, #4
 801013c:	681b      	ldr	r3, [r3, #0]
 801013e:	602a      	str	r2, [r5, #0]
 8010140:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010144:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010148:	2301      	movs	r3, #1
 801014a:	e0a3      	b.n	8010294 <_printf_i+0x1f4>
 801014c:	6820      	ldr	r0, [r4, #0]
 801014e:	6829      	ldr	r1, [r5, #0]
 8010150:	0606      	lsls	r6, r0, #24
 8010152:	f101 0304 	add.w	r3, r1, #4
 8010156:	d50a      	bpl.n	801016e <_printf_i+0xce>
 8010158:	680e      	ldr	r6, [r1, #0]
 801015a:	602b      	str	r3, [r5, #0]
 801015c:	2e00      	cmp	r6, #0
 801015e:	da03      	bge.n	8010168 <_printf_i+0xc8>
 8010160:	232d      	movs	r3, #45	; 0x2d
 8010162:	4276      	negs	r6, r6
 8010164:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010168:	485e      	ldr	r0, [pc, #376]	; (80102e4 <_printf_i+0x244>)
 801016a:	230a      	movs	r3, #10
 801016c:	e019      	b.n	80101a2 <_printf_i+0x102>
 801016e:	680e      	ldr	r6, [r1, #0]
 8010170:	602b      	str	r3, [r5, #0]
 8010172:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010176:	bf18      	it	ne
 8010178:	b236      	sxthne	r6, r6
 801017a:	e7ef      	b.n	801015c <_printf_i+0xbc>
 801017c:	682b      	ldr	r3, [r5, #0]
 801017e:	6820      	ldr	r0, [r4, #0]
 8010180:	1d19      	adds	r1, r3, #4
 8010182:	6029      	str	r1, [r5, #0]
 8010184:	0601      	lsls	r1, r0, #24
 8010186:	d501      	bpl.n	801018c <_printf_i+0xec>
 8010188:	681e      	ldr	r6, [r3, #0]
 801018a:	e002      	b.n	8010192 <_printf_i+0xf2>
 801018c:	0646      	lsls	r6, r0, #25
 801018e:	d5fb      	bpl.n	8010188 <_printf_i+0xe8>
 8010190:	881e      	ldrh	r6, [r3, #0]
 8010192:	4854      	ldr	r0, [pc, #336]	; (80102e4 <_printf_i+0x244>)
 8010194:	2f6f      	cmp	r7, #111	; 0x6f
 8010196:	bf0c      	ite	eq
 8010198:	2308      	moveq	r3, #8
 801019a:	230a      	movne	r3, #10
 801019c:	2100      	movs	r1, #0
 801019e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80101a2:	6865      	ldr	r5, [r4, #4]
 80101a4:	60a5      	str	r5, [r4, #8]
 80101a6:	2d00      	cmp	r5, #0
 80101a8:	bfa2      	ittt	ge
 80101aa:	6821      	ldrge	r1, [r4, #0]
 80101ac:	f021 0104 	bicge.w	r1, r1, #4
 80101b0:	6021      	strge	r1, [r4, #0]
 80101b2:	b90e      	cbnz	r6, 80101b8 <_printf_i+0x118>
 80101b4:	2d00      	cmp	r5, #0
 80101b6:	d04d      	beq.n	8010254 <_printf_i+0x1b4>
 80101b8:	4615      	mov	r5, r2
 80101ba:	fbb6 f1f3 	udiv	r1, r6, r3
 80101be:	fb03 6711 	mls	r7, r3, r1, r6
 80101c2:	5dc7      	ldrb	r7, [r0, r7]
 80101c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80101c8:	4637      	mov	r7, r6
 80101ca:	42bb      	cmp	r3, r7
 80101cc:	460e      	mov	r6, r1
 80101ce:	d9f4      	bls.n	80101ba <_printf_i+0x11a>
 80101d0:	2b08      	cmp	r3, #8
 80101d2:	d10b      	bne.n	80101ec <_printf_i+0x14c>
 80101d4:	6823      	ldr	r3, [r4, #0]
 80101d6:	07de      	lsls	r6, r3, #31
 80101d8:	d508      	bpl.n	80101ec <_printf_i+0x14c>
 80101da:	6923      	ldr	r3, [r4, #16]
 80101dc:	6861      	ldr	r1, [r4, #4]
 80101de:	4299      	cmp	r1, r3
 80101e0:	bfde      	ittt	le
 80101e2:	2330      	movle	r3, #48	; 0x30
 80101e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80101e8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80101ec:	1b52      	subs	r2, r2, r5
 80101ee:	6122      	str	r2, [r4, #16]
 80101f0:	f8cd a000 	str.w	sl, [sp]
 80101f4:	464b      	mov	r3, r9
 80101f6:	aa03      	add	r2, sp, #12
 80101f8:	4621      	mov	r1, r4
 80101fa:	4640      	mov	r0, r8
 80101fc:	f7ff fee2 	bl	800ffc4 <_printf_common>
 8010200:	3001      	adds	r0, #1
 8010202:	d14c      	bne.n	801029e <_printf_i+0x1fe>
 8010204:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010208:	b004      	add	sp, #16
 801020a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801020e:	4835      	ldr	r0, [pc, #212]	; (80102e4 <_printf_i+0x244>)
 8010210:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8010214:	6829      	ldr	r1, [r5, #0]
 8010216:	6823      	ldr	r3, [r4, #0]
 8010218:	f851 6b04 	ldr.w	r6, [r1], #4
 801021c:	6029      	str	r1, [r5, #0]
 801021e:	061d      	lsls	r5, r3, #24
 8010220:	d514      	bpl.n	801024c <_printf_i+0x1ac>
 8010222:	07df      	lsls	r7, r3, #31
 8010224:	bf44      	itt	mi
 8010226:	f043 0320 	orrmi.w	r3, r3, #32
 801022a:	6023      	strmi	r3, [r4, #0]
 801022c:	b91e      	cbnz	r6, 8010236 <_printf_i+0x196>
 801022e:	6823      	ldr	r3, [r4, #0]
 8010230:	f023 0320 	bic.w	r3, r3, #32
 8010234:	6023      	str	r3, [r4, #0]
 8010236:	2310      	movs	r3, #16
 8010238:	e7b0      	b.n	801019c <_printf_i+0xfc>
 801023a:	6823      	ldr	r3, [r4, #0]
 801023c:	f043 0320 	orr.w	r3, r3, #32
 8010240:	6023      	str	r3, [r4, #0]
 8010242:	2378      	movs	r3, #120	; 0x78
 8010244:	4828      	ldr	r0, [pc, #160]	; (80102e8 <_printf_i+0x248>)
 8010246:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801024a:	e7e3      	b.n	8010214 <_printf_i+0x174>
 801024c:	0659      	lsls	r1, r3, #25
 801024e:	bf48      	it	mi
 8010250:	b2b6      	uxthmi	r6, r6
 8010252:	e7e6      	b.n	8010222 <_printf_i+0x182>
 8010254:	4615      	mov	r5, r2
 8010256:	e7bb      	b.n	80101d0 <_printf_i+0x130>
 8010258:	682b      	ldr	r3, [r5, #0]
 801025a:	6826      	ldr	r6, [r4, #0]
 801025c:	6961      	ldr	r1, [r4, #20]
 801025e:	1d18      	adds	r0, r3, #4
 8010260:	6028      	str	r0, [r5, #0]
 8010262:	0635      	lsls	r5, r6, #24
 8010264:	681b      	ldr	r3, [r3, #0]
 8010266:	d501      	bpl.n	801026c <_printf_i+0x1cc>
 8010268:	6019      	str	r1, [r3, #0]
 801026a:	e002      	b.n	8010272 <_printf_i+0x1d2>
 801026c:	0670      	lsls	r0, r6, #25
 801026e:	d5fb      	bpl.n	8010268 <_printf_i+0x1c8>
 8010270:	8019      	strh	r1, [r3, #0]
 8010272:	2300      	movs	r3, #0
 8010274:	6123      	str	r3, [r4, #16]
 8010276:	4615      	mov	r5, r2
 8010278:	e7ba      	b.n	80101f0 <_printf_i+0x150>
 801027a:	682b      	ldr	r3, [r5, #0]
 801027c:	1d1a      	adds	r2, r3, #4
 801027e:	602a      	str	r2, [r5, #0]
 8010280:	681d      	ldr	r5, [r3, #0]
 8010282:	6862      	ldr	r2, [r4, #4]
 8010284:	2100      	movs	r1, #0
 8010286:	4628      	mov	r0, r5
 8010288:	f7ef ffd2 	bl	8000230 <memchr>
 801028c:	b108      	cbz	r0, 8010292 <_printf_i+0x1f2>
 801028e:	1b40      	subs	r0, r0, r5
 8010290:	6060      	str	r0, [r4, #4]
 8010292:	6863      	ldr	r3, [r4, #4]
 8010294:	6123      	str	r3, [r4, #16]
 8010296:	2300      	movs	r3, #0
 8010298:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801029c:	e7a8      	b.n	80101f0 <_printf_i+0x150>
 801029e:	6923      	ldr	r3, [r4, #16]
 80102a0:	462a      	mov	r2, r5
 80102a2:	4649      	mov	r1, r9
 80102a4:	4640      	mov	r0, r8
 80102a6:	47d0      	blx	sl
 80102a8:	3001      	adds	r0, #1
 80102aa:	d0ab      	beq.n	8010204 <_printf_i+0x164>
 80102ac:	6823      	ldr	r3, [r4, #0]
 80102ae:	079b      	lsls	r3, r3, #30
 80102b0:	d413      	bmi.n	80102da <_printf_i+0x23a>
 80102b2:	68e0      	ldr	r0, [r4, #12]
 80102b4:	9b03      	ldr	r3, [sp, #12]
 80102b6:	4298      	cmp	r0, r3
 80102b8:	bfb8      	it	lt
 80102ba:	4618      	movlt	r0, r3
 80102bc:	e7a4      	b.n	8010208 <_printf_i+0x168>
 80102be:	2301      	movs	r3, #1
 80102c0:	4632      	mov	r2, r6
 80102c2:	4649      	mov	r1, r9
 80102c4:	4640      	mov	r0, r8
 80102c6:	47d0      	blx	sl
 80102c8:	3001      	adds	r0, #1
 80102ca:	d09b      	beq.n	8010204 <_printf_i+0x164>
 80102cc:	3501      	adds	r5, #1
 80102ce:	68e3      	ldr	r3, [r4, #12]
 80102d0:	9903      	ldr	r1, [sp, #12]
 80102d2:	1a5b      	subs	r3, r3, r1
 80102d4:	42ab      	cmp	r3, r5
 80102d6:	dcf2      	bgt.n	80102be <_printf_i+0x21e>
 80102d8:	e7eb      	b.n	80102b2 <_printf_i+0x212>
 80102da:	2500      	movs	r5, #0
 80102dc:	f104 0619 	add.w	r6, r4, #25
 80102e0:	e7f5      	b.n	80102ce <_printf_i+0x22e>
 80102e2:	bf00      	nop
 80102e4:	08014c4a 	.word	0x08014c4a
 80102e8:	08014c5b 	.word	0x08014c5b

080102ec <_scanf_float>:
 80102ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102f0:	b087      	sub	sp, #28
 80102f2:	4617      	mov	r7, r2
 80102f4:	9303      	str	r3, [sp, #12]
 80102f6:	688b      	ldr	r3, [r1, #8]
 80102f8:	1e5a      	subs	r2, r3, #1
 80102fa:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80102fe:	bf83      	ittte	hi
 8010300:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8010304:	195b      	addhi	r3, r3, r5
 8010306:	9302      	strhi	r3, [sp, #8]
 8010308:	2300      	movls	r3, #0
 801030a:	bf86      	itte	hi
 801030c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8010310:	608b      	strhi	r3, [r1, #8]
 8010312:	9302      	strls	r3, [sp, #8]
 8010314:	680b      	ldr	r3, [r1, #0]
 8010316:	468b      	mov	fp, r1
 8010318:	2500      	movs	r5, #0
 801031a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801031e:	f84b 3b1c 	str.w	r3, [fp], #28
 8010322:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8010326:	4680      	mov	r8, r0
 8010328:	460c      	mov	r4, r1
 801032a:	465e      	mov	r6, fp
 801032c:	46aa      	mov	sl, r5
 801032e:	46a9      	mov	r9, r5
 8010330:	9501      	str	r5, [sp, #4]
 8010332:	68a2      	ldr	r2, [r4, #8]
 8010334:	b152      	cbz	r2, 801034c <_scanf_float+0x60>
 8010336:	683b      	ldr	r3, [r7, #0]
 8010338:	781b      	ldrb	r3, [r3, #0]
 801033a:	2b4e      	cmp	r3, #78	; 0x4e
 801033c:	d864      	bhi.n	8010408 <_scanf_float+0x11c>
 801033e:	2b40      	cmp	r3, #64	; 0x40
 8010340:	d83c      	bhi.n	80103bc <_scanf_float+0xd0>
 8010342:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8010346:	b2c8      	uxtb	r0, r1
 8010348:	280e      	cmp	r0, #14
 801034a:	d93a      	bls.n	80103c2 <_scanf_float+0xd6>
 801034c:	f1b9 0f00 	cmp.w	r9, #0
 8010350:	d003      	beq.n	801035a <_scanf_float+0x6e>
 8010352:	6823      	ldr	r3, [r4, #0]
 8010354:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010358:	6023      	str	r3, [r4, #0]
 801035a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801035e:	f1ba 0f01 	cmp.w	sl, #1
 8010362:	f200 8113 	bhi.w	801058c <_scanf_float+0x2a0>
 8010366:	455e      	cmp	r6, fp
 8010368:	f200 8105 	bhi.w	8010576 <_scanf_float+0x28a>
 801036c:	2501      	movs	r5, #1
 801036e:	4628      	mov	r0, r5
 8010370:	b007      	add	sp, #28
 8010372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010376:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801037a:	2a0d      	cmp	r2, #13
 801037c:	d8e6      	bhi.n	801034c <_scanf_float+0x60>
 801037e:	a101      	add	r1, pc, #4	; (adr r1, 8010384 <_scanf_float+0x98>)
 8010380:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8010384:	080104c3 	.word	0x080104c3
 8010388:	0801034d 	.word	0x0801034d
 801038c:	0801034d 	.word	0x0801034d
 8010390:	0801034d 	.word	0x0801034d
 8010394:	08010523 	.word	0x08010523
 8010398:	080104fb 	.word	0x080104fb
 801039c:	0801034d 	.word	0x0801034d
 80103a0:	0801034d 	.word	0x0801034d
 80103a4:	080104d1 	.word	0x080104d1
 80103a8:	0801034d 	.word	0x0801034d
 80103ac:	0801034d 	.word	0x0801034d
 80103b0:	0801034d 	.word	0x0801034d
 80103b4:	0801034d 	.word	0x0801034d
 80103b8:	08010489 	.word	0x08010489
 80103bc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80103c0:	e7db      	b.n	801037a <_scanf_float+0x8e>
 80103c2:	290e      	cmp	r1, #14
 80103c4:	d8c2      	bhi.n	801034c <_scanf_float+0x60>
 80103c6:	a001      	add	r0, pc, #4	; (adr r0, 80103cc <_scanf_float+0xe0>)
 80103c8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80103cc:	0801047b 	.word	0x0801047b
 80103d0:	0801034d 	.word	0x0801034d
 80103d4:	0801047b 	.word	0x0801047b
 80103d8:	0801050f 	.word	0x0801050f
 80103dc:	0801034d 	.word	0x0801034d
 80103e0:	08010429 	.word	0x08010429
 80103e4:	08010465 	.word	0x08010465
 80103e8:	08010465 	.word	0x08010465
 80103ec:	08010465 	.word	0x08010465
 80103f0:	08010465 	.word	0x08010465
 80103f4:	08010465 	.word	0x08010465
 80103f8:	08010465 	.word	0x08010465
 80103fc:	08010465 	.word	0x08010465
 8010400:	08010465 	.word	0x08010465
 8010404:	08010465 	.word	0x08010465
 8010408:	2b6e      	cmp	r3, #110	; 0x6e
 801040a:	d809      	bhi.n	8010420 <_scanf_float+0x134>
 801040c:	2b60      	cmp	r3, #96	; 0x60
 801040e:	d8b2      	bhi.n	8010376 <_scanf_float+0x8a>
 8010410:	2b54      	cmp	r3, #84	; 0x54
 8010412:	d077      	beq.n	8010504 <_scanf_float+0x218>
 8010414:	2b59      	cmp	r3, #89	; 0x59
 8010416:	d199      	bne.n	801034c <_scanf_float+0x60>
 8010418:	2d07      	cmp	r5, #7
 801041a:	d197      	bne.n	801034c <_scanf_float+0x60>
 801041c:	2508      	movs	r5, #8
 801041e:	e029      	b.n	8010474 <_scanf_float+0x188>
 8010420:	2b74      	cmp	r3, #116	; 0x74
 8010422:	d06f      	beq.n	8010504 <_scanf_float+0x218>
 8010424:	2b79      	cmp	r3, #121	; 0x79
 8010426:	e7f6      	b.n	8010416 <_scanf_float+0x12a>
 8010428:	6821      	ldr	r1, [r4, #0]
 801042a:	05c8      	lsls	r0, r1, #23
 801042c:	d51a      	bpl.n	8010464 <_scanf_float+0x178>
 801042e:	9b02      	ldr	r3, [sp, #8]
 8010430:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8010434:	6021      	str	r1, [r4, #0]
 8010436:	f109 0901 	add.w	r9, r9, #1
 801043a:	b11b      	cbz	r3, 8010444 <_scanf_float+0x158>
 801043c:	3b01      	subs	r3, #1
 801043e:	3201      	adds	r2, #1
 8010440:	9302      	str	r3, [sp, #8]
 8010442:	60a2      	str	r2, [r4, #8]
 8010444:	68a3      	ldr	r3, [r4, #8]
 8010446:	3b01      	subs	r3, #1
 8010448:	60a3      	str	r3, [r4, #8]
 801044a:	6923      	ldr	r3, [r4, #16]
 801044c:	3301      	adds	r3, #1
 801044e:	6123      	str	r3, [r4, #16]
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	3b01      	subs	r3, #1
 8010454:	2b00      	cmp	r3, #0
 8010456:	607b      	str	r3, [r7, #4]
 8010458:	f340 8084 	ble.w	8010564 <_scanf_float+0x278>
 801045c:	683b      	ldr	r3, [r7, #0]
 801045e:	3301      	adds	r3, #1
 8010460:	603b      	str	r3, [r7, #0]
 8010462:	e766      	b.n	8010332 <_scanf_float+0x46>
 8010464:	eb1a 0f05 	cmn.w	sl, r5
 8010468:	f47f af70 	bne.w	801034c <_scanf_float+0x60>
 801046c:	6822      	ldr	r2, [r4, #0]
 801046e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8010472:	6022      	str	r2, [r4, #0]
 8010474:	f806 3b01 	strb.w	r3, [r6], #1
 8010478:	e7e4      	b.n	8010444 <_scanf_float+0x158>
 801047a:	6822      	ldr	r2, [r4, #0]
 801047c:	0610      	lsls	r0, r2, #24
 801047e:	f57f af65 	bpl.w	801034c <_scanf_float+0x60>
 8010482:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010486:	e7f4      	b.n	8010472 <_scanf_float+0x186>
 8010488:	f1ba 0f00 	cmp.w	sl, #0
 801048c:	d10e      	bne.n	80104ac <_scanf_float+0x1c0>
 801048e:	f1b9 0f00 	cmp.w	r9, #0
 8010492:	d10e      	bne.n	80104b2 <_scanf_float+0x1c6>
 8010494:	6822      	ldr	r2, [r4, #0]
 8010496:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801049a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801049e:	d108      	bne.n	80104b2 <_scanf_float+0x1c6>
 80104a0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80104a4:	6022      	str	r2, [r4, #0]
 80104a6:	f04f 0a01 	mov.w	sl, #1
 80104aa:	e7e3      	b.n	8010474 <_scanf_float+0x188>
 80104ac:	f1ba 0f02 	cmp.w	sl, #2
 80104b0:	d055      	beq.n	801055e <_scanf_float+0x272>
 80104b2:	2d01      	cmp	r5, #1
 80104b4:	d002      	beq.n	80104bc <_scanf_float+0x1d0>
 80104b6:	2d04      	cmp	r5, #4
 80104b8:	f47f af48 	bne.w	801034c <_scanf_float+0x60>
 80104bc:	3501      	adds	r5, #1
 80104be:	b2ed      	uxtb	r5, r5
 80104c0:	e7d8      	b.n	8010474 <_scanf_float+0x188>
 80104c2:	f1ba 0f01 	cmp.w	sl, #1
 80104c6:	f47f af41 	bne.w	801034c <_scanf_float+0x60>
 80104ca:	f04f 0a02 	mov.w	sl, #2
 80104ce:	e7d1      	b.n	8010474 <_scanf_float+0x188>
 80104d0:	b97d      	cbnz	r5, 80104f2 <_scanf_float+0x206>
 80104d2:	f1b9 0f00 	cmp.w	r9, #0
 80104d6:	f47f af3c 	bne.w	8010352 <_scanf_float+0x66>
 80104da:	6822      	ldr	r2, [r4, #0]
 80104dc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80104e0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80104e4:	f47f af39 	bne.w	801035a <_scanf_float+0x6e>
 80104e8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80104ec:	6022      	str	r2, [r4, #0]
 80104ee:	2501      	movs	r5, #1
 80104f0:	e7c0      	b.n	8010474 <_scanf_float+0x188>
 80104f2:	2d03      	cmp	r5, #3
 80104f4:	d0e2      	beq.n	80104bc <_scanf_float+0x1d0>
 80104f6:	2d05      	cmp	r5, #5
 80104f8:	e7de      	b.n	80104b8 <_scanf_float+0x1cc>
 80104fa:	2d02      	cmp	r5, #2
 80104fc:	f47f af26 	bne.w	801034c <_scanf_float+0x60>
 8010500:	2503      	movs	r5, #3
 8010502:	e7b7      	b.n	8010474 <_scanf_float+0x188>
 8010504:	2d06      	cmp	r5, #6
 8010506:	f47f af21 	bne.w	801034c <_scanf_float+0x60>
 801050a:	2507      	movs	r5, #7
 801050c:	e7b2      	b.n	8010474 <_scanf_float+0x188>
 801050e:	6822      	ldr	r2, [r4, #0]
 8010510:	0591      	lsls	r1, r2, #22
 8010512:	f57f af1b 	bpl.w	801034c <_scanf_float+0x60>
 8010516:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801051a:	6022      	str	r2, [r4, #0]
 801051c:	f8cd 9004 	str.w	r9, [sp, #4]
 8010520:	e7a8      	b.n	8010474 <_scanf_float+0x188>
 8010522:	6822      	ldr	r2, [r4, #0]
 8010524:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8010528:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801052c:	d006      	beq.n	801053c <_scanf_float+0x250>
 801052e:	0550      	lsls	r0, r2, #21
 8010530:	f57f af0c 	bpl.w	801034c <_scanf_float+0x60>
 8010534:	f1b9 0f00 	cmp.w	r9, #0
 8010538:	f43f af0f 	beq.w	801035a <_scanf_float+0x6e>
 801053c:	0591      	lsls	r1, r2, #22
 801053e:	bf58      	it	pl
 8010540:	9901      	ldrpl	r1, [sp, #4]
 8010542:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8010546:	bf58      	it	pl
 8010548:	eba9 0101 	subpl.w	r1, r9, r1
 801054c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8010550:	bf58      	it	pl
 8010552:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8010556:	6022      	str	r2, [r4, #0]
 8010558:	f04f 0900 	mov.w	r9, #0
 801055c:	e78a      	b.n	8010474 <_scanf_float+0x188>
 801055e:	f04f 0a03 	mov.w	sl, #3
 8010562:	e787      	b.n	8010474 <_scanf_float+0x188>
 8010564:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8010568:	4639      	mov	r1, r7
 801056a:	4640      	mov	r0, r8
 801056c:	4798      	blx	r3
 801056e:	2800      	cmp	r0, #0
 8010570:	f43f aedf 	beq.w	8010332 <_scanf_float+0x46>
 8010574:	e6ea      	b.n	801034c <_scanf_float+0x60>
 8010576:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801057a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801057e:	463a      	mov	r2, r7
 8010580:	4640      	mov	r0, r8
 8010582:	4798      	blx	r3
 8010584:	6923      	ldr	r3, [r4, #16]
 8010586:	3b01      	subs	r3, #1
 8010588:	6123      	str	r3, [r4, #16]
 801058a:	e6ec      	b.n	8010366 <_scanf_float+0x7a>
 801058c:	1e6b      	subs	r3, r5, #1
 801058e:	2b06      	cmp	r3, #6
 8010590:	d825      	bhi.n	80105de <_scanf_float+0x2f2>
 8010592:	2d02      	cmp	r5, #2
 8010594:	d836      	bhi.n	8010604 <_scanf_float+0x318>
 8010596:	455e      	cmp	r6, fp
 8010598:	f67f aee8 	bls.w	801036c <_scanf_float+0x80>
 801059c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80105a0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80105a4:	463a      	mov	r2, r7
 80105a6:	4640      	mov	r0, r8
 80105a8:	4798      	blx	r3
 80105aa:	6923      	ldr	r3, [r4, #16]
 80105ac:	3b01      	subs	r3, #1
 80105ae:	6123      	str	r3, [r4, #16]
 80105b0:	e7f1      	b.n	8010596 <_scanf_float+0x2aa>
 80105b2:	9802      	ldr	r0, [sp, #8]
 80105b4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80105b8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80105bc:	9002      	str	r0, [sp, #8]
 80105be:	463a      	mov	r2, r7
 80105c0:	4640      	mov	r0, r8
 80105c2:	4798      	blx	r3
 80105c4:	6923      	ldr	r3, [r4, #16]
 80105c6:	3b01      	subs	r3, #1
 80105c8:	6123      	str	r3, [r4, #16]
 80105ca:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80105ce:	fa5f fa8a 	uxtb.w	sl, sl
 80105d2:	f1ba 0f02 	cmp.w	sl, #2
 80105d6:	d1ec      	bne.n	80105b2 <_scanf_float+0x2c6>
 80105d8:	3d03      	subs	r5, #3
 80105da:	b2ed      	uxtb	r5, r5
 80105dc:	1b76      	subs	r6, r6, r5
 80105de:	6823      	ldr	r3, [r4, #0]
 80105e0:	05da      	lsls	r2, r3, #23
 80105e2:	d52f      	bpl.n	8010644 <_scanf_float+0x358>
 80105e4:	055b      	lsls	r3, r3, #21
 80105e6:	d510      	bpl.n	801060a <_scanf_float+0x31e>
 80105e8:	455e      	cmp	r6, fp
 80105ea:	f67f aebf 	bls.w	801036c <_scanf_float+0x80>
 80105ee:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80105f2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80105f6:	463a      	mov	r2, r7
 80105f8:	4640      	mov	r0, r8
 80105fa:	4798      	blx	r3
 80105fc:	6923      	ldr	r3, [r4, #16]
 80105fe:	3b01      	subs	r3, #1
 8010600:	6123      	str	r3, [r4, #16]
 8010602:	e7f1      	b.n	80105e8 <_scanf_float+0x2fc>
 8010604:	46aa      	mov	sl, r5
 8010606:	9602      	str	r6, [sp, #8]
 8010608:	e7df      	b.n	80105ca <_scanf_float+0x2de>
 801060a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801060e:	6923      	ldr	r3, [r4, #16]
 8010610:	2965      	cmp	r1, #101	; 0x65
 8010612:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8010616:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 801061a:	6123      	str	r3, [r4, #16]
 801061c:	d00c      	beq.n	8010638 <_scanf_float+0x34c>
 801061e:	2945      	cmp	r1, #69	; 0x45
 8010620:	d00a      	beq.n	8010638 <_scanf_float+0x34c>
 8010622:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010626:	463a      	mov	r2, r7
 8010628:	4640      	mov	r0, r8
 801062a:	4798      	blx	r3
 801062c:	6923      	ldr	r3, [r4, #16]
 801062e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8010632:	3b01      	subs	r3, #1
 8010634:	1eb5      	subs	r5, r6, #2
 8010636:	6123      	str	r3, [r4, #16]
 8010638:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801063c:	463a      	mov	r2, r7
 801063e:	4640      	mov	r0, r8
 8010640:	4798      	blx	r3
 8010642:	462e      	mov	r6, r5
 8010644:	6825      	ldr	r5, [r4, #0]
 8010646:	f015 0510 	ands.w	r5, r5, #16
 801064a:	d159      	bne.n	8010700 <_scanf_float+0x414>
 801064c:	7035      	strb	r5, [r6, #0]
 801064e:	6823      	ldr	r3, [r4, #0]
 8010650:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8010654:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010658:	d11b      	bne.n	8010692 <_scanf_float+0x3a6>
 801065a:	9b01      	ldr	r3, [sp, #4]
 801065c:	454b      	cmp	r3, r9
 801065e:	eba3 0209 	sub.w	r2, r3, r9
 8010662:	d123      	bne.n	80106ac <_scanf_float+0x3c0>
 8010664:	2200      	movs	r2, #0
 8010666:	4659      	mov	r1, fp
 8010668:	4640      	mov	r0, r8
 801066a:	f000 fea7 	bl	80113bc <_strtod_r>
 801066e:	6822      	ldr	r2, [r4, #0]
 8010670:	9b03      	ldr	r3, [sp, #12]
 8010672:	f012 0f02 	tst.w	r2, #2
 8010676:	ec57 6b10 	vmov	r6, r7, d0
 801067a:	681b      	ldr	r3, [r3, #0]
 801067c:	d021      	beq.n	80106c2 <_scanf_float+0x3d6>
 801067e:	9903      	ldr	r1, [sp, #12]
 8010680:	1d1a      	adds	r2, r3, #4
 8010682:	600a      	str	r2, [r1, #0]
 8010684:	681b      	ldr	r3, [r3, #0]
 8010686:	e9c3 6700 	strd	r6, r7, [r3]
 801068a:	68e3      	ldr	r3, [r4, #12]
 801068c:	3301      	adds	r3, #1
 801068e:	60e3      	str	r3, [r4, #12]
 8010690:	e66d      	b.n	801036e <_scanf_float+0x82>
 8010692:	9b04      	ldr	r3, [sp, #16]
 8010694:	2b00      	cmp	r3, #0
 8010696:	d0e5      	beq.n	8010664 <_scanf_float+0x378>
 8010698:	9905      	ldr	r1, [sp, #20]
 801069a:	230a      	movs	r3, #10
 801069c:	462a      	mov	r2, r5
 801069e:	3101      	adds	r1, #1
 80106a0:	4640      	mov	r0, r8
 80106a2:	f000 ff13 	bl	80114cc <_strtol_r>
 80106a6:	9b04      	ldr	r3, [sp, #16]
 80106a8:	9e05      	ldr	r6, [sp, #20]
 80106aa:	1ac2      	subs	r2, r0, r3
 80106ac:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80106b0:	429e      	cmp	r6, r3
 80106b2:	bf28      	it	cs
 80106b4:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80106b8:	4912      	ldr	r1, [pc, #72]	; (8010704 <_scanf_float+0x418>)
 80106ba:	4630      	mov	r0, r6
 80106bc:	f000 f83c 	bl	8010738 <siprintf>
 80106c0:	e7d0      	b.n	8010664 <_scanf_float+0x378>
 80106c2:	9903      	ldr	r1, [sp, #12]
 80106c4:	f012 0f04 	tst.w	r2, #4
 80106c8:	f103 0204 	add.w	r2, r3, #4
 80106cc:	600a      	str	r2, [r1, #0]
 80106ce:	d1d9      	bne.n	8010684 <_scanf_float+0x398>
 80106d0:	f8d3 8000 	ldr.w	r8, [r3]
 80106d4:	ee10 2a10 	vmov	r2, s0
 80106d8:	ee10 0a10 	vmov	r0, s0
 80106dc:	463b      	mov	r3, r7
 80106de:	4639      	mov	r1, r7
 80106e0:	f7f0 fa4c 	bl	8000b7c <__aeabi_dcmpun>
 80106e4:	b128      	cbz	r0, 80106f2 <_scanf_float+0x406>
 80106e6:	4808      	ldr	r0, [pc, #32]	; (8010708 <_scanf_float+0x41c>)
 80106e8:	f000 f820 	bl	801072c <nanf>
 80106ec:	ed88 0a00 	vstr	s0, [r8]
 80106f0:	e7cb      	b.n	801068a <_scanf_float+0x39e>
 80106f2:	4630      	mov	r0, r6
 80106f4:	4639      	mov	r1, r7
 80106f6:	f7f0 fa9f 	bl	8000c38 <__aeabi_d2f>
 80106fa:	f8c8 0000 	str.w	r0, [r8]
 80106fe:	e7c4      	b.n	801068a <_scanf_float+0x39e>
 8010700:	2500      	movs	r5, #0
 8010702:	e634      	b.n	801036e <_scanf_float+0x82>
 8010704:	08014c6c 	.word	0x08014c6c
 8010708:	08015078 	.word	0x08015078

0801070c <_sbrk_r>:
 801070c:	b538      	push	{r3, r4, r5, lr}
 801070e:	4d06      	ldr	r5, [pc, #24]	; (8010728 <_sbrk_r+0x1c>)
 8010710:	2300      	movs	r3, #0
 8010712:	4604      	mov	r4, r0
 8010714:	4608      	mov	r0, r1
 8010716:	602b      	str	r3, [r5, #0]
 8010718:	f7f1 fad6 	bl	8001cc8 <_sbrk>
 801071c:	1c43      	adds	r3, r0, #1
 801071e:	d102      	bne.n	8010726 <_sbrk_r+0x1a>
 8010720:	682b      	ldr	r3, [r5, #0]
 8010722:	b103      	cbz	r3, 8010726 <_sbrk_r+0x1a>
 8010724:	6023      	str	r3, [r4, #0]
 8010726:	bd38      	pop	{r3, r4, r5, pc}
 8010728:	2000300c 	.word	0x2000300c

0801072c <nanf>:
 801072c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8010734 <nanf+0x8>
 8010730:	4770      	bx	lr
 8010732:	bf00      	nop
 8010734:	7fc00000 	.word	0x7fc00000

08010738 <siprintf>:
 8010738:	b40e      	push	{r1, r2, r3}
 801073a:	b500      	push	{lr}
 801073c:	b09c      	sub	sp, #112	; 0x70
 801073e:	ab1d      	add	r3, sp, #116	; 0x74
 8010740:	9002      	str	r0, [sp, #8]
 8010742:	9006      	str	r0, [sp, #24]
 8010744:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010748:	4809      	ldr	r0, [pc, #36]	; (8010770 <siprintf+0x38>)
 801074a:	9107      	str	r1, [sp, #28]
 801074c:	9104      	str	r1, [sp, #16]
 801074e:	4909      	ldr	r1, [pc, #36]	; (8010774 <siprintf+0x3c>)
 8010750:	f853 2b04 	ldr.w	r2, [r3], #4
 8010754:	9105      	str	r1, [sp, #20]
 8010756:	6800      	ldr	r0, [r0, #0]
 8010758:	9301      	str	r3, [sp, #4]
 801075a:	a902      	add	r1, sp, #8
 801075c:	f002 fdf6 	bl	801334c <_svfiprintf_r>
 8010760:	9b02      	ldr	r3, [sp, #8]
 8010762:	2200      	movs	r2, #0
 8010764:	701a      	strb	r2, [r3, #0]
 8010766:	b01c      	add	sp, #112	; 0x70
 8010768:	f85d eb04 	ldr.w	lr, [sp], #4
 801076c:	b003      	add	sp, #12
 801076e:	4770      	bx	lr
 8010770:	2000002c 	.word	0x2000002c
 8010774:	ffff0208 	.word	0xffff0208

08010778 <sulp>:
 8010778:	b570      	push	{r4, r5, r6, lr}
 801077a:	4604      	mov	r4, r0
 801077c:	460d      	mov	r5, r1
 801077e:	ec45 4b10 	vmov	d0, r4, r5
 8010782:	4616      	mov	r6, r2
 8010784:	f002 fc22 	bl	8012fcc <__ulp>
 8010788:	ec51 0b10 	vmov	r0, r1, d0
 801078c:	b17e      	cbz	r6, 80107ae <sulp+0x36>
 801078e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8010792:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8010796:	2b00      	cmp	r3, #0
 8010798:	dd09      	ble.n	80107ae <sulp+0x36>
 801079a:	051b      	lsls	r3, r3, #20
 801079c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80107a0:	2400      	movs	r4, #0
 80107a2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80107a6:	4622      	mov	r2, r4
 80107a8:	462b      	mov	r3, r5
 80107aa:	f7ef ff4d 	bl	8000648 <__aeabi_dmul>
 80107ae:	bd70      	pop	{r4, r5, r6, pc}

080107b0 <_strtod_l>:
 80107b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107b4:	ed2d 8b02 	vpush	{d8}
 80107b8:	b09d      	sub	sp, #116	; 0x74
 80107ba:	461f      	mov	r7, r3
 80107bc:	2300      	movs	r3, #0
 80107be:	9318      	str	r3, [sp, #96]	; 0x60
 80107c0:	4ba2      	ldr	r3, [pc, #648]	; (8010a4c <_strtod_l+0x29c>)
 80107c2:	9213      	str	r2, [sp, #76]	; 0x4c
 80107c4:	681b      	ldr	r3, [r3, #0]
 80107c6:	9305      	str	r3, [sp, #20]
 80107c8:	4604      	mov	r4, r0
 80107ca:	4618      	mov	r0, r3
 80107cc:	4688      	mov	r8, r1
 80107ce:	f7ef fd21 	bl	8000214 <strlen>
 80107d2:	f04f 0a00 	mov.w	sl, #0
 80107d6:	4605      	mov	r5, r0
 80107d8:	f04f 0b00 	mov.w	fp, #0
 80107dc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80107e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80107e2:	781a      	ldrb	r2, [r3, #0]
 80107e4:	2a2b      	cmp	r2, #43	; 0x2b
 80107e6:	d04e      	beq.n	8010886 <_strtod_l+0xd6>
 80107e8:	d83b      	bhi.n	8010862 <_strtod_l+0xb2>
 80107ea:	2a0d      	cmp	r2, #13
 80107ec:	d834      	bhi.n	8010858 <_strtod_l+0xa8>
 80107ee:	2a08      	cmp	r2, #8
 80107f0:	d834      	bhi.n	801085c <_strtod_l+0xac>
 80107f2:	2a00      	cmp	r2, #0
 80107f4:	d03e      	beq.n	8010874 <_strtod_l+0xc4>
 80107f6:	2300      	movs	r3, #0
 80107f8:	930a      	str	r3, [sp, #40]	; 0x28
 80107fa:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80107fc:	7833      	ldrb	r3, [r6, #0]
 80107fe:	2b30      	cmp	r3, #48	; 0x30
 8010800:	f040 80b0 	bne.w	8010964 <_strtod_l+0x1b4>
 8010804:	7873      	ldrb	r3, [r6, #1]
 8010806:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801080a:	2b58      	cmp	r3, #88	; 0x58
 801080c:	d168      	bne.n	80108e0 <_strtod_l+0x130>
 801080e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010810:	9301      	str	r3, [sp, #4]
 8010812:	ab18      	add	r3, sp, #96	; 0x60
 8010814:	9702      	str	r7, [sp, #8]
 8010816:	9300      	str	r3, [sp, #0]
 8010818:	4a8d      	ldr	r2, [pc, #564]	; (8010a50 <_strtod_l+0x2a0>)
 801081a:	ab19      	add	r3, sp, #100	; 0x64
 801081c:	a917      	add	r1, sp, #92	; 0x5c
 801081e:	4620      	mov	r0, r4
 8010820:	f001 fd38 	bl	8012294 <__gethex>
 8010824:	f010 0707 	ands.w	r7, r0, #7
 8010828:	4605      	mov	r5, r0
 801082a:	d005      	beq.n	8010838 <_strtod_l+0x88>
 801082c:	2f06      	cmp	r7, #6
 801082e:	d12c      	bne.n	801088a <_strtod_l+0xda>
 8010830:	3601      	adds	r6, #1
 8010832:	2300      	movs	r3, #0
 8010834:	9617      	str	r6, [sp, #92]	; 0x5c
 8010836:	930a      	str	r3, [sp, #40]	; 0x28
 8010838:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801083a:	2b00      	cmp	r3, #0
 801083c:	f040 8590 	bne.w	8011360 <_strtod_l+0xbb0>
 8010840:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010842:	b1eb      	cbz	r3, 8010880 <_strtod_l+0xd0>
 8010844:	4652      	mov	r2, sl
 8010846:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801084a:	ec43 2b10 	vmov	d0, r2, r3
 801084e:	b01d      	add	sp, #116	; 0x74
 8010850:	ecbd 8b02 	vpop	{d8}
 8010854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010858:	2a20      	cmp	r2, #32
 801085a:	d1cc      	bne.n	80107f6 <_strtod_l+0x46>
 801085c:	3301      	adds	r3, #1
 801085e:	9317      	str	r3, [sp, #92]	; 0x5c
 8010860:	e7be      	b.n	80107e0 <_strtod_l+0x30>
 8010862:	2a2d      	cmp	r2, #45	; 0x2d
 8010864:	d1c7      	bne.n	80107f6 <_strtod_l+0x46>
 8010866:	2201      	movs	r2, #1
 8010868:	920a      	str	r2, [sp, #40]	; 0x28
 801086a:	1c5a      	adds	r2, r3, #1
 801086c:	9217      	str	r2, [sp, #92]	; 0x5c
 801086e:	785b      	ldrb	r3, [r3, #1]
 8010870:	2b00      	cmp	r3, #0
 8010872:	d1c2      	bne.n	80107fa <_strtod_l+0x4a>
 8010874:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010876:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 801087a:	2b00      	cmp	r3, #0
 801087c:	f040 856e 	bne.w	801135c <_strtod_l+0xbac>
 8010880:	4652      	mov	r2, sl
 8010882:	465b      	mov	r3, fp
 8010884:	e7e1      	b.n	801084a <_strtod_l+0x9a>
 8010886:	2200      	movs	r2, #0
 8010888:	e7ee      	b.n	8010868 <_strtod_l+0xb8>
 801088a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801088c:	b13a      	cbz	r2, 801089e <_strtod_l+0xee>
 801088e:	2135      	movs	r1, #53	; 0x35
 8010890:	a81a      	add	r0, sp, #104	; 0x68
 8010892:	f002 fca6 	bl	80131e2 <__copybits>
 8010896:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010898:	4620      	mov	r0, r4
 801089a:	f002 f865 	bl	8012968 <_Bfree>
 801089e:	3f01      	subs	r7, #1
 80108a0:	2f04      	cmp	r7, #4
 80108a2:	d806      	bhi.n	80108b2 <_strtod_l+0x102>
 80108a4:	e8df f007 	tbb	[pc, r7]
 80108a8:	1714030a 	.word	0x1714030a
 80108ac:	0a          	.byte	0x0a
 80108ad:	00          	.byte	0x00
 80108ae:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80108b2:	0728      	lsls	r0, r5, #28
 80108b4:	d5c0      	bpl.n	8010838 <_strtod_l+0x88>
 80108b6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80108ba:	e7bd      	b.n	8010838 <_strtod_l+0x88>
 80108bc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80108c0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80108c2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80108c6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80108ca:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80108ce:	e7f0      	b.n	80108b2 <_strtod_l+0x102>
 80108d0:	f8df b180 	ldr.w	fp, [pc, #384]	; 8010a54 <_strtod_l+0x2a4>
 80108d4:	e7ed      	b.n	80108b2 <_strtod_l+0x102>
 80108d6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80108da:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80108de:	e7e8      	b.n	80108b2 <_strtod_l+0x102>
 80108e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80108e2:	1c5a      	adds	r2, r3, #1
 80108e4:	9217      	str	r2, [sp, #92]	; 0x5c
 80108e6:	785b      	ldrb	r3, [r3, #1]
 80108e8:	2b30      	cmp	r3, #48	; 0x30
 80108ea:	d0f9      	beq.n	80108e0 <_strtod_l+0x130>
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	d0a3      	beq.n	8010838 <_strtod_l+0x88>
 80108f0:	2301      	movs	r3, #1
 80108f2:	f04f 0900 	mov.w	r9, #0
 80108f6:	9304      	str	r3, [sp, #16]
 80108f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80108fa:	9308      	str	r3, [sp, #32]
 80108fc:	f8cd 901c 	str.w	r9, [sp, #28]
 8010900:	464f      	mov	r7, r9
 8010902:	220a      	movs	r2, #10
 8010904:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8010906:	7806      	ldrb	r6, [r0, #0]
 8010908:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801090c:	b2d9      	uxtb	r1, r3
 801090e:	2909      	cmp	r1, #9
 8010910:	d92a      	bls.n	8010968 <_strtod_l+0x1b8>
 8010912:	9905      	ldr	r1, [sp, #20]
 8010914:	462a      	mov	r2, r5
 8010916:	f002 fe23 	bl	8013560 <strncmp>
 801091a:	b398      	cbz	r0, 8010984 <_strtod_l+0x1d4>
 801091c:	2000      	movs	r0, #0
 801091e:	4632      	mov	r2, r6
 8010920:	463d      	mov	r5, r7
 8010922:	9005      	str	r0, [sp, #20]
 8010924:	4603      	mov	r3, r0
 8010926:	2a65      	cmp	r2, #101	; 0x65
 8010928:	d001      	beq.n	801092e <_strtod_l+0x17e>
 801092a:	2a45      	cmp	r2, #69	; 0x45
 801092c:	d118      	bne.n	8010960 <_strtod_l+0x1b0>
 801092e:	b91d      	cbnz	r5, 8010938 <_strtod_l+0x188>
 8010930:	9a04      	ldr	r2, [sp, #16]
 8010932:	4302      	orrs	r2, r0
 8010934:	d09e      	beq.n	8010874 <_strtod_l+0xc4>
 8010936:	2500      	movs	r5, #0
 8010938:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 801093c:	f108 0201 	add.w	r2, r8, #1
 8010940:	9217      	str	r2, [sp, #92]	; 0x5c
 8010942:	f898 2001 	ldrb.w	r2, [r8, #1]
 8010946:	2a2b      	cmp	r2, #43	; 0x2b
 8010948:	d075      	beq.n	8010a36 <_strtod_l+0x286>
 801094a:	2a2d      	cmp	r2, #45	; 0x2d
 801094c:	d07b      	beq.n	8010a46 <_strtod_l+0x296>
 801094e:	f04f 0c00 	mov.w	ip, #0
 8010952:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8010956:	2909      	cmp	r1, #9
 8010958:	f240 8082 	bls.w	8010a60 <_strtod_l+0x2b0>
 801095c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8010960:	2600      	movs	r6, #0
 8010962:	e09d      	b.n	8010aa0 <_strtod_l+0x2f0>
 8010964:	2300      	movs	r3, #0
 8010966:	e7c4      	b.n	80108f2 <_strtod_l+0x142>
 8010968:	2f08      	cmp	r7, #8
 801096a:	bfd8      	it	le
 801096c:	9907      	ldrle	r1, [sp, #28]
 801096e:	f100 0001 	add.w	r0, r0, #1
 8010972:	bfda      	itte	le
 8010974:	fb02 3301 	mlale	r3, r2, r1, r3
 8010978:	9307      	strle	r3, [sp, #28]
 801097a:	fb02 3909 	mlagt	r9, r2, r9, r3
 801097e:	3701      	adds	r7, #1
 8010980:	9017      	str	r0, [sp, #92]	; 0x5c
 8010982:	e7bf      	b.n	8010904 <_strtod_l+0x154>
 8010984:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010986:	195a      	adds	r2, r3, r5
 8010988:	9217      	str	r2, [sp, #92]	; 0x5c
 801098a:	5d5a      	ldrb	r2, [r3, r5]
 801098c:	2f00      	cmp	r7, #0
 801098e:	d037      	beq.n	8010a00 <_strtod_l+0x250>
 8010990:	9005      	str	r0, [sp, #20]
 8010992:	463d      	mov	r5, r7
 8010994:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8010998:	2b09      	cmp	r3, #9
 801099a:	d912      	bls.n	80109c2 <_strtod_l+0x212>
 801099c:	2301      	movs	r3, #1
 801099e:	e7c2      	b.n	8010926 <_strtod_l+0x176>
 80109a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80109a2:	1c5a      	adds	r2, r3, #1
 80109a4:	9217      	str	r2, [sp, #92]	; 0x5c
 80109a6:	785a      	ldrb	r2, [r3, #1]
 80109a8:	3001      	adds	r0, #1
 80109aa:	2a30      	cmp	r2, #48	; 0x30
 80109ac:	d0f8      	beq.n	80109a0 <_strtod_l+0x1f0>
 80109ae:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80109b2:	2b08      	cmp	r3, #8
 80109b4:	f200 84d9 	bhi.w	801136a <_strtod_l+0xbba>
 80109b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80109ba:	9005      	str	r0, [sp, #20]
 80109bc:	2000      	movs	r0, #0
 80109be:	9308      	str	r3, [sp, #32]
 80109c0:	4605      	mov	r5, r0
 80109c2:	3a30      	subs	r2, #48	; 0x30
 80109c4:	f100 0301 	add.w	r3, r0, #1
 80109c8:	d014      	beq.n	80109f4 <_strtod_l+0x244>
 80109ca:	9905      	ldr	r1, [sp, #20]
 80109cc:	4419      	add	r1, r3
 80109ce:	9105      	str	r1, [sp, #20]
 80109d0:	462b      	mov	r3, r5
 80109d2:	eb00 0e05 	add.w	lr, r0, r5
 80109d6:	210a      	movs	r1, #10
 80109d8:	4573      	cmp	r3, lr
 80109da:	d113      	bne.n	8010a04 <_strtod_l+0x254>
 80109dc:	182b      	adds	r3, r5, r0
 80109de:	2b08      	cmp	r3, #8
 80109e0:	f105 0501 	add.w	r5, r5, #1
 80109e4:	4405      	add	r5, r0
 80109e6:	dc1c      	bgt.n	8010a22 <_strtod_l+0x272>
 80109e8:	9907      	ldr	r1, [sp, #28]
 80109ea:	230a      	movs	r3, #10
 80109ec:	fb03 2301 	mla	r3, r3, r1, r2
 80109f0:	9307      	str	r3, [sp, #28]
 80109f2:	2300      	movs	r3, #0
 80109f4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80109f6:	1c51      	adds	r1, r2, #1
 80109f8:	9117      	str	r1, [sp, #92]	; 0x5c
 80109fa:	7852      	ldrb	r2, [r2, #1]
 80109fc:	4618      	mov	r0, r3
 80109fe:	e7c9      	b.n	8010994 <_strtod_l+0x1e4>
 8010a00:	4638      	mov	r0, r7
 8010a02:	e7d2      	b.n	80109aa <_strtod_l+0x1fa>
 8010a04:	2b08      	cmp	r3, #8
 8010a06:	dc04      	bgt.n	8010a12 <_strtod_l+0x262>
 8010a08:	9e07      	ldr	r6, [sp, #28]
 8010a0a:	434e      	muls	r6, r1
 8010a0c:	9607      	str	r6, [sp, #28]
 8010a0e:	3301      	adds	r3, #1
 8010a10:	e7e2      	b.n	80109d8 <_strtod_l+0x228>
 8010a12:	f103 0c01 	add.w	ip, r3, #1
 8010a16:	f1bc 0f10 	cmp.w	ip, #16
 8010a1a:	bfd8      	it	le
 8010a1c:	fb01 f909 	mulle.w	r9, r1, r9
 8010a20:	e7f5      	b.n	8010a0e <_strtod_l+0x25e>
 8010a22:	2d10      	cmp	r5, #16
 8010a24:	bfdc      	itt	le
 8010a26:	230a      	movle	r3, #10
 8010a28:	fb03 2909 	mlale	r9, r3, r9, r2
 8010a2c:	e7e1      	b.n	80109f2 <_strtod_l+0x242>
 8010a2e:	2300      	movs	r3, #0
 8010a30:	9305      	str	r3, [sp, #20]
 8010a32:	2301      	movs	r3, #1
 8010a34:	e77c      	b.n	8010930 <_strtod_l+0x180>
 8010a36:	f04f 0c00 	mov.w	ip, #0
 8010a3a:	f108 0202 	add.w	r2, r8, #2
 8010a3e:	9217      	str	r2, [sp, #92]	; 0x5c
 8010a40:	f898 2002 	ldrb.w	r2, [r8, #2]
 8010a44:	e785      	b.n	8010952 <_strtod_l+0x1a2>
 8010a46:	f04f 0c01 	mov.w	ip, #1
 8010a4a:	e7f6      	b.n	8010a3a <_strtod_l+0x28a>
 8010a4c:	08014ec0 	.word	0x08014ec0
 8010a50:	08014c74 	.word	0x08014c74
 8010a54:	7ff00000 	.word	0x7ff00000
 8010a58:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010a5a:	1c51      	adds	r1, r2, #1
 8010a5c:	9117      	str	r1, [sp, #92]	; 0x5c
 8010a5e:	7852      	ldrb	r2, [r2, #1]
 8010a60:	2a30      	cmp	r2, #48	; 0x30
 8010a62:	d0f9      	beq.n	8010a58 <_strtod_l+0x2a8>
 8010a64:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8010a68:	2908      	cmp	r1, #8
 8010a6a:	f63f af79 	bhi.w	8010960 <_strtod_l+0x1b0>
 8010a6e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8010a72:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010a74:	9206      	str	r2, [sp, #24]
 8010a76:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010a78:	1c51      	adds	r1, r2, #1
 8010a7a:	9117      	str	r1, [sp, #92]	; 0x5c
 8010a7c:	7852      	ldrb	r2, [r2, #1]
 8010a7e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8010a82:	2e09      	cmp	r6, #9
 8010a84:	d937      	bls.n	8010af6 <_strtod_l+0x346>
 8010a86:	9e06      	ldr	r6, [sp, #24]
 8010a88:	1b89      	subs	r1, r1, r6
 8010a8a:	2908      	cmp	r1, #8
 8010a8c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8010a90:	dc02      	bgt.n	8010a98 <_strtod_l+0x2e8>
 8010a92:	4576      	cmp	r6, lr
 8010a94:	bfa8      	it	ge
 8010a96:	4676      	movge	r6, lr
 8010a98:	f1bc 0f00 	cmp.w	ip, #0
 8010a9c:	d000      	beq.n	8010aa0 <_strtod_l+0x2f0>
 8010a9e:	4276      	negs	r6, r6
 8010aa0:	2d00      	cmp	r5, #0
 8010aa2:	d14d      	bne.n	8010b40 <_strtod_l+0x390>
 8010aa4:	9904      	ldr	r1, [sp, #16]
 8010aa6:	4301      	orrs	r1, r0
 8010aa8:	f47f aec6 	bne.w	8010838 <_strtod_l+0x88>
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	f47f aee1 	bne.w	8010874 <_strtod_l+0xc4>
 8010ab2:	2a69      	cmp	r2, #105	; 0x69
 8010ab4:	d027      	beq.n	8010b06 <_strtod_l+0x356>
 8010ab6:	dc24      	bgt.n	8010b02 <_strtod_l+0x352>
 8010ab8:	2a49      	cmp	r2, #73	; 0x49
 8010aba:	d024      	beq.n	8010b06 <_strtod_l+0x356>
 8010abc:	2a4e      	cmp	r2, #78	; 0x4e
 8010abe:	f47f aed9 	bne.w	8010874 <_strtod_l+0xc4>
 8010ac2:	499f      	ldr	r1, [pc, #636]	; (8010d40 <_strtod_l+0x590>)
 8010ac4:	a817      	add	r0, sp, #92	; 0x5c
 8010ac6:	f001 fe3d 	bl	8012744 <__match>
 8010aca:	2800      	cmp	r0, #0
 8010acc:	f43f aed2 	beq.w	8010874 <_strtod_l+0xc4>
 8010ad0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010ad2:	781b      	ldrb	r3, [r3, #0]
 8010ad4:	2b28      	cmp	r3, #40	; 0x28
 8010ad6:	d12d      	bne.n	8010b34 <_strtod_l+0x384>
 8010ad8:	499a      	ldr	r1, [pc, #616]	; (8010d44 <_strtod_l+0x594>)
 8010ada:	aa1a      	add	r2, sp, #104	; 0x68
 8010adc:	a817      	add	r0, sp, #92	; 0x5c
 8010ade:	f001 fe45 	bl	801276c <__hexnan>
 8010ae2:	2805      	cmp	r0, #5
 8010ae4:	d126      	bne.n	8010b34 <_strtod_l+0x384>
 8010ae6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010ae8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8010aec:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8010af0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8010af4:	e6a0      	b.n	8010838 <_strtod_l+0x88>
 8010af6:	210a      	movs	r1, #10
 8010af8:	fb01 2e0e 	mla	lr, r1, lr, r2
 8010afc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8010b00:	e7b9      	b.n	8010a76 <_strtod_l+0x2c6>
 8010b02:	2a6e      	cmp	r2, #110	; 0x6e
 8010b04:	e7db      	b.n	8010abe <_strtod_l+0x30e>
 8010b06:	4990      	ldr	r1, [pc, #576]	; (8010d48 <_strtod_l+0x598>)
 8010b08:	a817      	add	r0, sp, #92	; 0x5c
 8010b0a:	f001 fe1b 	bl	8012744 <__match>
 8010b0e:	2800      	cmp	r0, #0
 8010b10:	f43f aeb0 	beq.w	8010874 <_strtod_l+0xc4>
 8010b14:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010b16:	498d      	ldr	r1, [pc, #564]	; (8010d4c <_strtod_l+0x59c>)
 8010b18:	3b01      	subs	r3, #1
 8010b1a:	a817      	add	r0, sp, #92	; 0x5c
 8010b1c:	9317      	str	r3, [sp, #92]	; 0x5c
 8010b1e:	f001 fe11 	bl	8012744 <__match>
 8010b22:	b910      	cbnz	r0, 8010b2a <_strtod_l+0x37a>
 8010b24:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010b26:	3301      	adds	r3, #1
 8010b28:	9317      	str	r3, [sp, #92]	; 0x5c
 8010b2a:	f8df b230 	ldr.w	fp, [pc, #560]	; 8010d5c <_strtod_l+0x5ac>
 8010b2e:	f04f 0a00 	mov.w	sl, #0
 8010b32:	e681      	b.n	8010838 <_strtod_l+0x88>
 8010b34:	4886      	ldr	r0, [pc, #536]	; (8010d50 <_strtod_l+0x5a0>)
 8010b36:	f002 fd0b 	bl	8013550 <nan>
 8010b3a:	ec5b ab10 	vmov	sl, fp, d0
 8010b3e:	e67b      	b.n	8010838 <_strtod_l+0x88>
 8010b40:	9b05      	ldr	r3, [sp, #20]
 8010b42:	9807      	ldr	r0, [sp, #28]
 8010b44:	1af3      	subs	r3, r6, r3
 8010b46:	2f00      	cmp	r7, #0
 8010b48:	bf08      	it	eq
 8010b4a:	462f      	moveq	r7, r5
 8010b4c:	2d10      	cmp	r5, #16
 8010b4e:	9306      	str	r3, [sp, #24]
 8010b50:	46a8      	mov	r8, r5
 8010b52:	bfa8      	it	ge
 8010b54:	f04f 0810 	movge.w	r8, #16
 8010b58:	f7ef fcfc 	bl	8000554 <__aeabi_ui2d>
 8010b5c:	2d09      	cmp	r5, #9
 8010b5e:	4682      	mov	sl, r0
 8010b60:	468b      	mov	fp, r1
 8010b62:	dd13      	ble.n	8010b8c <_strtod_l+0x3dc>
 8010b64:	4b7b      	ldr	r3, [pc, #492]	; (8010d54 <_strtod_l+0x5a4>)
 8010b66:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8010b6a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8010b6e:	f7ef fd6b 	bl	8000648 <__aeabi_dmul>
 8010b72:	4682      	mov	sl, r0
 8010b74:	4648      	mov	r0, r9
 8010b76:	468b      	mov	fp, r1
 8010b78:	f7ef fcec 	bl	8000554 <__aeabi_ui2d>
 8010b7c:	4602      	mov	r2, r0
 8010b7e:	460b      	mov	r3, r1
 8010b80:	4650      	mov	r0, sl
 8010b82:	4659      	mov	r1, fp
 8010b84:	f7ef fbaa 	bl	80002dc <__adddf3>
 8010b88:	4682      	mov	sl, r0
 8010b8a:	468b      	mov	fp, r1
 8010b8c:	2d0f      	cmp	r5, #15
 8010b8e:	dc38      	bgt.n	8010c02 <_strtod_l+0x452>
 8010b90:	9b06      	ldr	r3, [sp, #24]
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	f43f ae50 	beq.w	8010838 <_strtod_l+0x88>
 8010b98:	dd24      	ble.n	8010be4 <_strtod_l+0x434>
 8010b9a:	2b16      	cmp	r3, #22
 8010b9c:	dc0b      	bgt.n	8010bb6 <_strtod_l+0x406>
 8010b9e:	496d      	ldr	r1, [pc, #436]	; (8010d54 <_strtod_l+0x5a4>)
 8010ba0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010ba4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010ba8:	4652      	mov	r2, sl
 8010baa:	465b      	mov	r3, fp
 8010bac:	f7ef fd4c 	bl	8000648 <__aeabi_dmul>
 8010bb0:	4682      	mov	sl, r0
 8010bb2:	468b      	mov	fp, r1
 8010bb4:	e640      	b.n	8010838 <_strtod_l+0x88>
 8010bb6:	9a06      	ldr	r2, [sp, #24]
 8010bb8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8010bbc:	4293      	cmp	r3, r2
 8010bbe:	db20      	blt.n	8010c02 <_strtod_l+0x452>
 8010bc0:	4c64      	ldr	r4, [pc, #400]	; (8010d54 <_strtod_l+0x5a4>)
 8010bc2:	f1c5 050f 	rsb	r5, r5, #15
 8010bc6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8010bca:	4652      	mov	r2, sl
 8010bcc:	465b      	mov	r3, fp
 8010bce:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010bd2:	f7ef fd39 	bl	8000648 <__aeabi_dmul>
 8010bd6:	9b06      	ldr	r3, [sp, #24]
 8010bd8:	1b5d      	subs	r5, r3, r5
 8010bda:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8010bde:	e9d4 2300 	ldrd	r2, r3, [r4]
 8010be2:	e7e3      	b.n	8010bac <_strtod_l+0x3fc>
 8010be4:	9b06      	ldr	r3, [sp, #24]
 8010be6:	3316      	adds	r3, #22
 8010be8:	db0b      	blt.n	8010c02 <_strtod_l+0x452>
 8010bea:	9b05      	ldr	r3, [sp, #20]
 8010bec:	1b9e      	subs	r6, r3, r6
 8010bee:	4b59      	ldr	r3, [pc, #356]	; (8010d54 <_strtod_l+0x5a4>)
 8010bf0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8010bf4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010bf8:	4650      	mov	r0, sl
 8010bfa:	4659      	mov	r1, fp
 8010bfc:	f7ef fe4e 	bl	800089c <__aeabi_ddiv>
 8010c00:	e7d6      	b.n	8010bb0 <_strtod_l+0x400>
 8010c02:	9b06      	ldr	r3, [sp, #24]
 8010c04:	eba5 0808 	sub.w	r8, r5, r8
 8010c08:	4498      	add	r8, r3
 8010c0a:	f1b8 0f00 	cmp.w	r8, #0
 8010c0e:	dd74      	ble.n	8010cfa <_strtod_l+0x54a>
 8010c10:	f018 030f 	ands.w	r3, r8, #15
 8010c14:	d00a      	beq.n	8010c2c <_strtod_l+0x47c>
 8010c16:	494f      	ldr	r1, [pc, #316]	; (8010d54 <_strtod_l+0x5a4>)
 8010c18:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010c1c:	4652      	mov	r2, sl
 8010c1e:	465b      	mov	r3, fp
 8010c20:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010c24:	f7ef fd10 	bl	8000648 <__aeabi_dmul>
 8010c28:	4682      	mov	sl, r0
 8010c2a:	468b      	mov	fp, r1
 8010c2c:	f038 080f 	bics.w	r8, r8, #15
 8010c30:	d04f      	beq.n	8010cd2 <_strtod_l+0x522>
 8010c32:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8010c36:	dd22      	ble.n	8010c7e <_strtod_l+0x4ce>
 8010c38:	2500      	movs	r5, #0
 8010c3a:	462e      	mov	r6, r5
 8010c3c:	9507      	str	r5, [sp, #28]
 8010c3e:	9505      	str	r5, [sp, #20]
 8010c40:	2322      	movs	r3, #34	; 0x22
 8010c42:	f8df b118 	ldr.w	fp, [pc, #280]	; 8010d5c <_strtod_l+0x5ac>
 8010c46:	6023      	str	r3, [r4, #0]
 8010c48:	f04f 0a00 	mov.w	sl, #0
 8010c4c:	9b07      	ldr	r3, [sp, #28]
 8010c4e:	2b00      	cmp	r3, #0
 8010c50:	f43f adf2 	beq.w	8010838 <_strtod_l+0x88>
 8010c54:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010c56:	4620      	mov	r0, r4
 8010c58:	f001 fe86 	bl	8012968 <_Bfree>
 8010c5c:	9905      	ldr	r1, [sp, #20]
 8010c5e:	4620      	mov	r0, r4
 8010c60:	f001 fe82 	bl	8012968 <_Bfree>
 8010c64:	4631      	mov	r1, r6
 8010c66:	4620      	mov	r0, r4
 8010c68:	f001 fe7e 	bl	8012968 <_Bfree>
 8010c6c:	9907      	ldr	r1, [sp, #28]
 8010c6e:	4620      	mov	r0, r4
 8010c70:	f001 fe7a 	bl	8012968 <_Bfree>
 8010c74:	4629      	mov	r1, r5
 8010c76:	4620      	mov	r0, r4
 8010c78:	f001 fe76 	bl	8012968 <_Bfree>
 8010c7c:	e5dc      	b.n	8010838 <_strtod_l+0x88>
 8010c7e:	4b36      	ldr	r3, [pc, #216]	; (8010d58 <_strtod_l+0x5a8>)
 8010c80:	9304      	str	r3, [sp, #16]
 8010c82:	2300      	movs	r3, #0
 8010c84:	ea4f 1828 	mov.w	r8, r8, asr #4
 8010c88:	4650      	mov	r0, sl
 8010c8a:	4659      	mov	r1, fp
 8010c8c:	4699      	mov	r9, r3
 8010c8e:	f1b8 0f01 	cmp.w	r8, #1
 8010c92:	dc21      	bgt.n	8010cd8 <_strtod_l+0x528>
 8010c94:	b10b      	cbz	r3, 8010c9a <_strtod_l+0x4ea>
 8010c96:	4682      	mov	sl, r0
 8010c98:	468b      	mov	fp, r1
 8010c9a:	4b2f      	ldr	r3, [pc, #188]	; (8010d58 <_strtod_l+0x5a8>)
 8010c9c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8010ca0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8010ca4:	4652      	mov	r2, sl
 8010ca6:	465b      	mov	r3, fp
 8010ca8:	e9d9 0100 	ldrd	r0, r1, [r9]
 8010cac:	f7ef fccc 	bl	8000648 <__aeabi_dmul>
 8010cb0:	4b2a      	ldr	r3, [pc, #168]	; (8010d5c <_strtod_l+0x5ac>)
 8010cb2:	460a      	mov	r2, r1
 8010cb4:	400b      	ands	r3, r1
 8010cb6:	492a      	ldr	r1, [pc, #168]	; (8010d60 <_strtod_l+0x5b0>)
 8010cb8:	428b      	cmp	r3, r1
 8010cba:	4682      	mov	sl, r0
 8010cbc:	d8bc      	bhi.n	8010c38 <_strtod_l+0x488>
 8010cbe:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8010cc2:	428b      	cmp	r3, r1
 8010cc4:	bf86      	itte	hi
 8010cc6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8010d64 <_strtod_l+0x5b4>
 8010cca:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 8010cce:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8010cd2:	2300      	movs	r3, #0
 8010cd4:	9304      	str	r3, [sp, #16]
 8010cd6:	e084      	b.n	8010de2 <_strtod_l+0x632>
 8010cd8:	f018 0f01 	tst.w	r8, #1
 8010cdc:	d005      	beq.n	8010cea <_strtod_l+0x53a>
 8010cde:	9b04      	ldr	r3, [sp, #16]
 8010ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ce4:	f7ef fcb0 	bl	8000648 <__aeabi_dmul>
 8010ce8:	2301      	movs	r3, #1
 8010cea:	9a04      	ldr	r2, [sp, #16]
 8010cec:	3208      	adds	r2, #8
 8010cee:	f109 0901 	add.w	r9, r9, #1
 8010cf2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8010cf6:	9204      	str	r2, [sp, #16]
 8010cf8:	e7c9      	b.n	8010c8e <_strtod_l+0x4de>
 8010cfa:	d0ea      	beq.n	8010cd2 <_strtod_l+0x522>
 8010cfc:	f1c8 0800 	rsb	r8, r8, #0
 8010d00:	f018 020f 	ands.w	r2, r8, #15
 8010d04:	d00a      	beq.n	8010d1c <_strtod_l+0x56c>
 8010d06:	4b13      	ldr	r3, [pc, #76]	; (8010d54 <_strtod_l+0x5a4>)
 8010d08:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010d0c:	4650      	mov	r0, sl
 8010d0e:	4659      	mov	r1, fp
 8010d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d14:	f7ef fdc2 	bl	800089c <__aeabi_ddiv>
 8010d18:	4682      	mov	sl, r0
 8010d1a:	468b      	mov	fp, r1
 8010d1c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8010d20:	d0d7      	beq.n	8010cd2 <_strtod_l+0x522>
 8010d22:	f1b8 0f1f 	cmp.w	r8, #31
 8010d26:	dd1f      	ble.n	8010d68 <_strtod_l+0x5b8>
 8010d28:	2500      	movs	r5, #0
 8010d2a:	462e      	mov	r6, r5
 8010d2c:	9507      	str	r5, [sp, #28]
 8010d2e:	9505      	str	r5, [sp, #20]
 8010d30:	2322      	movs	r3, #34	; 0x22
 8010d32:	f04f 0a00 	mov.w	sl, #0
 8010d36:	f04f 0b00 	mov.w	fp, #0
 8010d3a:	6023      	str	r3, [r4, #0]
 8010d3c:	e786      	b.n	8010c4c <_strtod_l+0x49c>
 8010d3e:	bf00      	nop
 8010d40:	08014c45 	.word	0x08014c45
 8010d44:	08014c88 	.word	0x08014c88
 8010d48:	08014c3d 	.word	0x08014c3d
 8010d4c:	08014dcc 	.word	0x08014dcc
 8010d50:	08015078 	.word	0x08015078
 8010d54:	08014f58 	.word	0x08014f58
 8010d58:	08014f30 	.word	0x08014f30
 8010d5c:	7ff00000 	.word	0x7ff00000
 8010d60:	7ca00000 	.word	0x7ca00000
 8010d64:	7fefffff 	.word	0x7fefffff
 8010d68:	f018 0310 	ands.w	r3, r8, #16
 8010d6c:	bf18      	it	ne
 8010d6e:	236a      	movne	r3, #106	; 0x6a
 8010d70:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8011120 <_strtod_l+0x970>
 8010d74:	9304      	str	r3, [sp, #16]
 8010d76:	4650      	mov	r0, sl
 8010d78:	4659      	mov	r1, fp
 8010d7a:	2300      	movs	r3, #0
 8010d7c:	f018 0f01 	tst.w	r8, #1
 8010d80:	d004      	beq.n	8010d8c <_strtod_l+0x5dc>
 8010d82:	e9d9 2300 	ldrd	r2, r3, [r9]
 8010d86:	f7ef fc5f 	bl	8000648 <__aeabi_dmul>
 8010d8a:	2301      	movs	r3, #1
 8010d8c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8010d90:	f109 0908 	add.w	r9, r9, #8
 8010d94:	d1f2      	bne.n	8010d7c <_strtod_l+0x5cc>
 8010d96:	b10b      	cbz	r3, 8010d9c <_strtod_l+0x5ec>
 8010d98:	4682      	mov	sl, r0
 8010d9a:	468b      	mov	fp, r1
 8010d9c:	9b04      	ldr	r3, [sp, #16]
 8010d9e:	b1c3      	cbz	r3, 8010dd2 <_strtod_l+0x622>
 8010da0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8010da4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8010da8:	2b00      	cmp	r3, #0
 8010daa:	4659      	mov	r1, fp
 8010dac:	dd11      	ble.n	8010dd2 <_strtod_l+0x622>
 8010dae:	2b1f      	cmp	r3, #31
 8010db0:	f340 8124 	ble.w	8010ffc <_strtod_l+0x84c>
 8010db4:	2b34      	cmp	r3, #52	; 0x34
 8010db6:	bfde      	ittt	le
 8010db8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8010dbc:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8010dc0:	fa03 f202 	lslle.w	r2, r3, r2
 8010dc4:	f04f 0a00 	mov.w	sl, #0
 8010dc8:	bfcc      	ite	gt
 8010dca:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8010dce:	ea02 0b01 	andle.w	fp, r2, r1
 8010dd2:	2200      	movs	r2, #0
 8010dd4:	2300      	movs	r3, #0
 8010dd6:	4650      	mov	r0, sl
 8010dd8:	4659      	mov	r1, fp
 8010dda:	f7ef fe9d 	bl	8000b18 <__aeabi_dcmpeq>
 8010dde:	2800      	cmp	r0, #0
 8010de0:	d1a2      	bne.n	8010d28 <_strtod_l+0x578>
 8010de2:	9b07      	ldr	r3, [sp, #28]
 8010de4:	9300      	str	r3, [sp, #0]
 8010de6:	9908      	ldr	r1, [sp, #32]
 8010de8:	462b      	mov	r3, r5
 8010dea:	463a      	mov	r2, r7
 8010dec:	4620      	mov	r0, r4
 8010dee:	f001 fe23 	bl	8012a38 <__s2b>
 8010df2:	9007      	str	r0, [sp, #28]
 8010df4:	2800      	cmp	r0, #0
 8010df6:	f43f af1f 	beq.w	8010c38 <_strtod_l+0x488>
 8010dfa:	9b05      	ldr	r3, [sp, #20]
 8010dfc:	1b9e      	subs	r6, r3, r6
 8010dfe:	9b06      	ldr	r3, [sp, #24]
 8010e00:	2b00      	cmp	r3, #0
 8010e02:	bfb4      	ite	lt
 8010e04:	4633      	movlt	r3, r6
 8010e06:	2300      	movge	r3, #0
 8010e08:	930c      	str	r3, [sp, #48]	; 0x30
 8010e0a:	9b06      	ldr	r3, [sp, #24]
 8010e0c:	2500      	movs	r5, #0
 8010e0e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8010e12:	9312      	str	r3, [sp, #72]	; 0x48
 8010e14:	462e      	mov	r6, r5
 8010e16:	9b07      	ldr	r3, [sp, #28]
 8010e18:	4620      	mov	r0, r4
 8010e1a:	6859      	ldr	r1, [r3, #4]
 8010e1c:	f001 fd64 	bl	80128e8 <_Balloc>
 8010e20:	9005      	str	r0, [sp, #20]
 8010e22:	2800      	cmp	r0, #0
 8010e24:	f43f af0c 	beq.w	8010c40 <_strtod_l+0x490>
 8010e28:	9b07      	ldr	r3, [sp, #28]
 8010e2a:	691a      	ldr	r2, [r3, #16]
 8010e2c:	3202      	adds	r2, #2
 8010e2e:	f103 010c 	add.w	r1, r3, #12
 8010e32:	0092      	lsls	r2, r2, #2
 8010e34:	300c      	adds	r0, #12
 8010e36:	f7fe fcf9 	bl	800f82c <memcpy>
 8010e3a:	ec4b ab10 	vmov	d0, sl, fp
 8010e3e:	aa1a      	add	r2, sp, #104	; 0x68
 8010e40:	a919      	add	r1, sp, #100	; 0x64
 8010e42:	4620      	mov	r0, r4
 8010e44:	f002 f93e 	bl	80130c4 <__d2b>
 8010e48:	ec4b ab18 	vmov	d8, sl, fp
 8010e4c:	9018      	str	r0, [sp, #96]	; 0x60
 8010e4e:	2800      	cmp	r0, #0
 8010e50:	f43f aef6 	beq.w	8010c40 <_strtod_l+0x490>
 8010e54:	2101      	movs	r1, #1
 8010e56:	4620      	mov	r0, r4
 8010e58:	f001 fe88 	bl	8012b6c <__i2b>
 8010e5c:	4606      	mov	r6, r0
 8010e5e:	2800      	cmp	r0, #0
 8010e60:	f43f aeee 	beq.w	8010c40 <_strtod_l+0x490>
 8010e64:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8010e66:	9904      	ldr	r1, [sp, #16]
 8010e68:	2b00      	cmp	r3, #0
 8010e6a:	bfab      	itete	ge
 8010e6c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8010e6e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8010e70:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8010e72:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8010e76:	bfac      	ite	ge
 8010e78:	eb03 0902 	addge.w	r9, r3, r2
 8010e7c:	1ad7      	sublt	r7, r2, r3
 8010e7e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8010e80:	eba3 0801 	sub.w	r8, r3, r1
 8010e84:	4490      	add	r8, r2
 8010e86:	4ba1      	ldr	r3, [pc, #644]	; (801110c <_strtod_l+0x95c>)
 8010e88:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8010e8c:	4598      	cmp	r8, r3
 8010e8e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8010e92:	f280 80c7 	bge.w	8011024 <_strtod_l+0x874>
 8010e96:	eba3 0308 	sub.w	r3, r3, r8
 8010e9a:	2b1f      	cmp	r3, #31
 8010e9c:	eba2 0203 	sub.w	r2, r2, r3
 8010ea0:	f04f 0101 	mov.w	r1, #1
 8010ea4:	f300 80b1 	bgt.w	801100a <_strtod_l+0x85a>
 8010ea8:	fa01 f303 	lsl.w	r3, r1, r3
 8010eac:	930d      	str	r3, [sp, #52]	; 0x34
 8010eae:	2300      	movs	r3, #0
 8010eb0:	9308      	str	r3, [sp, #32]
 8010eb2:	eb09 0802 	add.w	r8, r9, r2
 8010eb6:	9b04      	ldr	r3, [sp, #16]
 8010eb8:	45c1      	cmp	r9, r8
 8010eba:	4417      	add	r7, r2
 8010ebc:	441f      	add	r7, r3
 8010ebe:	464b      	mov	r3, r9
 8010ec0:	bfa8      	it	ge
 8010ec2:	4643      	movge	r3, r8
 8010ec4:	42bb      	cmp	r3, r7
 8010ec6:	bfa8      	it	ge
 8010ec8:	463b      	movge	r3, r7
 8010eca:	2b00      	cmp	r3, #0
 8010ecc:	bfc2      	ittt	gt
 8010ece:	eba8 0803 	subgt.w	r8, r8, r3
 8010ed2:	1aff      	subgt	r7, r7, r3
 8010ed4:	eba9 0903 	subgt.w	r9, r9, r3
 8010ed8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010eda:	2b00      	cmp	r3, #0
 8010edc:	dd17      	ble.n	8010f0e <_strtod_l+0x75e>
 8010ede:	4631      	mov	r1, r6
 8010ee0:	461a      	mov	r2, r3
 8010ee2:	4620      	mov	r0, r4
 8010ee4:	f001 ff02 	bl	8012cec <__pow5mult>
 8010ee8:	4606      	mov	r6, r0
 8010eea:	2800      	cmp	r0, #0
 8010eec:	f43f aea8 	beq.w	8010c40 <_strtod_l+0x490>
 8010ef0:	4601      	mov	r1, r0
 8010ef2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8010ef4:	4620      	mov	r0, r4
 8010ef6:	f001 fe4f 	bl	8012b98 <__multiply>
 8010efa:	900b      	str	r0, [sp, #44]	; 0x2c
 8010efc:	2800      	cmp	r0, #0
 8010efe:	f43f ae9f 	beq.w	8010c40 <_strtod_l+0x490>
 8010f02:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010f04:	4620      	mov	r0, r4
 8010f06:	f001 fd2f 	bl	8012968 <_Bfree>
 8010f0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010f0c:	9318      	str	r3, [sp, #96]	; 0x60
 8010f0e:	f1b8 0f00 	cmp.w	r8, #0
 8010f12:	f300 808c 	bgt.w	801102e <_strtod_l+0x87e>
 8010f16:	9b06      	ldr	r3, [sp, #24]
 8010f18:	2b00      	cmp	r3, #0
 8010f1a:	dd08      	ble.n	8010f2e <_strtod_l+0x77e>
 8010f1c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010f1e:	9905      	ldr	r1, [sp, #20]
 8010f20:	4620      	mov	r0, r4
 8010f22:	f001 fee3 	bl	8012cec <__pow5mult>
 8010f26:	9005      	str	r0, [sp, #20]
 8010f28:	2800      	cmp	r0, #0
 8010f2a:	f43f ae89 	beq.w	8010c40 <_strtod_l+0x490>
 8010f2e:	2f00      	cmp	r7, #0
 8010f30:	dd08      	ble.n	8010f44 <_strtod_l+0x794>
 8010f32:	9905      	ldr	r1, [sp, #20]
 8010f34:	463a      	mov	r2, r7
 8010f36:	4620      	mov	r0, r4
 8010f38:	f001 ff32 	bl	8012da0 <__lshift>
 8010f3c:	9005      	str	r0, [sp, #20]
 8010f3e:	2800      	cmp	r0, #0
 8010f40:	f43f ae7e 	beq.w	8010c40 <_strtod_l+0x490>
 8010f44:	f1b9 0f00 	cmp.w	r9, #0
 8010f48:	dd08      	ble.n	8010f5c <_strtod_l+0x7ac>
 8010f4a:	4631      	mov	r1, r6
 8010f4c:	464a      	mov	r2, r9
 8010f4e:	4620      	mov	r0, r4
 8010f50:	f001 ff26 	bl	8012da0 <__lshift>
 8010f54:	4606      	mov	r6, r0
 8010f56:	2800      	cmp	r0, #0
 8010f58:	f43f ae72 	beq.w	8010c40 <_strtod_l+0x490>
 8010f5c:	9a05      	ldr	r2, [sp, #20]
 8010f5e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010f60:	4620      	mov	r0, r4
 8010f62:	f001 ffa9 	bl	8012eb8 <__mdiff>
 8010f66:	4605      	mov	r5, r0
 8010f68:	2800      	cmp	r0, #0
 8010f6a:	f43f ae69 	beq.w	8010c40 <_strtod_l+0x490>
 8010f6e:	68c3      	ldr	r3, [r0, #12]
 8010f70:	930b      	str	r3, [sp, #44]	; 0x2c
 8010f72:	2300      	movs	r3, #0
 8010f74:	60c3      	str	r3, [r0, #12]
 8010f76:	4631      	mov	r1, r6
 8010f78:	f001 ff82 	bl	8012e80 <__mcmp>
 8010f7c:	2800      	cmp	r0, #0
 8010f7e:	da60      	bge.n	8011042 <_strtod_l+0x892>
 8010f80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010f82:	ea53 030a 	orrs.w	r3, r3, sl
 8010f86:	f040 8082 	bne.w	801108e <_strtod_l+0x8de>
 8010f8a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010f8e:	2b00      	cmp	r3, #0
 8010f90:	d17d      	bne.n	801108e <_strtod_l+0x8de>
 8010f92:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010f96:	0d1b      	lsrs	r3, r3, #20
 8010f98:	051b      	lsls	r3, r3, #20
 8010f9a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8010f9e:	d976      	bls.n	801108e <_strtod_l+0x8de>
 8010fa0:	696b      	ldr	r3, [r5, #20]
 8010fa2:	b913      	cbnz	r3, 8010faa <_strtod_l+0x7fa>
 8010fa4:	692b      	ldr	r3, [r5, #16]
 8010fa6:	2b01      	cmp	r3, #1
 8010fa8:	dd71      	ble.n	801108e <_strtod_l+0x8de>
 8010faa:	4629      	mov	r1, r5
 8010fac:	2201      	movs	r2, #1
 8010fae:	4620      	mov	r0, r4
 8010fb0:	f001 fef6 	bl	8012da0 <__lshift>
 8010fb4:	4631      	mov	r1, r6
 8010fb6:	4605      	mov	r5, r0
 8010fb8:	f001 ff62 	bl	8012e80 <__mcmp>
 8010fbc:	2800      	cmp	r0, #0
 8010fbe:	dd66      	ble.n	801108e <_strtod_l+0x8de>
 8010fc0:	9904      	ldr	r1, [sp, #16]
 8010fc2:	4a53      	ldr	r2, [pc, #332]	; (8011110 <_strtod_l+0x960>)
 8010fc4:	465b      	mov	r3, fp
 8010fc6:	2900      	cmp	r1, #0
 8010fc8:	f000 8081 	beq.w	80110ce <_strtod_l+0x91e>
 8010fcc:	ea02 010b 	and.w	r1, r2, fp
 8010fd0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8010fd4:	dc7b      	bgt.n	80110ce <_strtod_l+0x91e>
 8010fd6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8010fda:	f77f aea9 	ble.w	8010d30 <_strtod_l+0x580>
 8010fde:	4b4d      	ldr	r3, [pc, #308]	; (8011114 <_strtod_l+0x964>)
 8010fe0:	4650      	mov	r0, sl
 8010fe2:	4659      	mov	r1, fp
 8010fe4:	2200      	movs	r2, #0
 8010fe6:	f7ef fb2f 	bl	8000648 <__aeabi_dmul>
 8010fea:	460b      	mov	r3, r1
 8010fec:	4303      	orrs	r3, r0
 8010fee:	bf08      	it	eq
 8010ff0:	2322      	moveq	r3, #34	; 0x22
 8010ff2:	4682      	mov	sl, r0
 8010ff4:	468b      	mov	fp, r1
 8010ff6:	bf08      	it	eq
 8010ff8:	6023      	streq	r3, [r4, #0]
 8010ffa:	e62b      	b.n	8010c54 <_strtod_l+0x4a4>
 8010ffc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011000:	fa02 f303 	lsl.w	r3, r2, r3
 8011004:	ea03 0a0a 	and.w	sl, r3, sl
 8011008:	e6e3      	b.n	8010dd2 <_strtod_l+0x622>
 801100a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801100e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8011012:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8011016:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801101a:	fa01 f308 	lsl.w	r3, r1, r8
 801101e:	9308      	str	r3, [sp, #32]
 8011020:	910d      	str	r1, [sp, #52]	; 0x34
 8011022:	e746      	b.n	8010eb2 <_strtod_l+0x702>
 8011024:	2300      	movs	r3, #0
 8011026:	9308      	str	r3, [sp, #32]
 8011028:	2301      	movs	r3, #1
 801102a:	930d      	str	r3, [sp, #52]	; 0x34
 801102c:	e741      	b.n	8010eb2 <_strtod_l+0x702>
 801102e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011030:	4642      	mov	r2, r8
 8011032:	4620      	mov	r0, r4
 8011034:	f001 feb4 	bl	8012da0 <__lshift>
 8011038:	9018      	str	r0, [sp, #96]	; 0x60
 801103a:	2800      	cmp	r0, #0
 801103c:	f47f af6b 	bne.w	8010f16 <_strtod_l+0x766>
 8011040:	e5fe      	b.n	8010c40 <_strtod_l+0x490>
 8011042:	465f      	mov	r7, fp
 8011044:	d16e      	bne.n	8011124 <_strtod_l+0x974>
 8011046:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011048:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801104c:	b342      	cbz	r2, 80110a0 <_strtod_l+0x8f0>
 801104e:	4a32      	ldr	r2, [pc, #200]	; (8011118 <_strtod_l+0x968>)
 8011050:	4293      	cmp	r3, r2
 8011052:	d128      	bne.n	80110a6 <_strtod_l+0x8f6>
 8011054:	9b04      	ldr	r3, [sp, #16]
 8011056:	4651      	mov	r1, sl
 8011058:	b1eb      	cbz	r3, 8011096 <_strtod_l+0x8e6>
 801105a:	4b2d      	ldr	r3, [pc, #180]	; (8011110 <_strtod_l+0x960>)
 801105c:	403b      	ands	r3, r7
 801105e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8011062:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011066:	d819      	bhi.n	801109c <_strtod_l+0x8ec>
 8011068:	0d1b      	lsrs	r3, r3, #20
 801106a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801106e:	fa02 f303 	lsl.w	r3, r2, r3
 8011072:	4299      	cmp	r1, r3
 8011074:	d117      	bne.n	80110a6 <_strtod_l+0x8f6>
 8011076:	4b29      	ldr	r3, [pc, #164]	; (801111c <_strtod_l+0x96c>)
 8011078:	429f      	cmp	r7, r3
 801107a:	d102      	bne.n	8011082 <_strtod_l+0x8d2>
 801107c:	3101      	adds	r1, #1
 801107e:	f43f addf 	beq.w	8010c40 <_strtod_l+0x490>
 8011082:	4b23      	ldr	r3, [pc, #140]	; (8011110 <_strtod_l+0x960>)
 8011084:	403b      	ands	r3, r7
 8011086:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801108a:	f04f 0a00 	mov.w	sl, #0
 801108e:	9b04      	ldr	r3, [sp, #16]
 8011090:	2b00      	cmp	r3, #0
 8011092:	d1a4      	bne.n	8010fde <_strtod_l+0x82e>
 8011094:	e5de      	b.n	8010c54 <_strtod_l+0x4a4>
 8011096:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801109a:	e7ea      	b.n	8011072 <_strtod_l+0x8c2>
 801109c:	4613      	mov	r3, r2
 801109e:	e7e8      	b.n	8011072 <_strtod_l+0x8c2>
 80110a0:	ea53 030a 	orrs.w	r3, r3, sl
 80110a4:	d08c      	beq.n	8010fc0 <_strtod_l+0x810>
 80110a6:	9b08      	ldr	r3, [sp, #32]
 80110a8:	b1db      	cbz	r3, 80110e2 <_strtod_l+0x932>
 80110aa:	423b      	tst	r3, r7
 80110ac:	d0ef      	beq.n	801108e <_strtod_l+0x8de>
 80110ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80110b0:	9a04      	ldr	r2, [sp, #16]
 80110b2:	4650      	mov	r0, sl
 80110b4:	4659      	mov	r1, fp
 80110b6:	b1c3      	cbz	r3, 80110ea <_strtod_l+0x93a>
 80110b8:	f7ff fb5e 	bl	8010778 <sulp>
 80110bc:	4602      	mov	r2, r0
 80110be:	460b      	mov	r3, r1
 80110c0:	ec51 0b18 	vmov	r0, r1, d8
 80110c4:	f7ef f90a 	bl	80002dc <__adddf3>
 80110c8:	4682      	mov	sl, r0
 80110ca:	468b      	mov	fp, r1
 80110cc:	e7df      	b.n	801108e <_strtod_l+0x8de>
 80110ce:	4013      	ands	r3, r2
 80110d0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80110d4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80110d8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80110dc:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80110e0:	e7d5      	b.n	801108e <_strtod_l+0x8de>
 80110e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80110e4:	ea13 0f0a 	tst.w	r3, sl
 80110e8:	e7e0      	b.n	80110ac <_strtod_l+0x8fc>
 80110ea:	f7ff fb45 	bl	8010778 <sulp>
 80110ee:	4602      	mov	r2, r0
 80110f0:	460b      	mov	r3, r1
 80110f2:	ec51 0b18 	vmov	r0, r1, d8
 80110f6:	f7ef f8ef 	bl	80002d8 <__aeabi_dsub>
 80110fa:	2200      	movs	r2, #0
 80110fc:	2300      	movs	r3, #0
 80110fe:	4682      	mov	sl, r0
 8011100:	468b      	mov	fp, r1
 8011102:	f7ef fd09 	bl	8000b18 <__aeabi_dcmpeq>
 8011106:	2800      	cmp	r0, #0
 8011108:	d0c1      	beq.n	801108e <_strtod_l+0x8de>
 801110a:	e611      	b.n	8010d30 <_strtod_l+0x580>
 801110c:	fffffc02 	.word	0xfffffc02
 8011110:	7ff00000 	.word	0x7ff00000
 8011114:	39500000 	.word	0x39500000
 8011118:	000fffff 	.word	0x000fffff
 801111c:	7fefffff 	.word	0x7fefffff
 8011120:	08014ca0 	.word	0x08014ca0
 8011124:	4631      	mov	r1, r6
 8011126:	4628      	mov	r0, r5
 8011128:	f002 f828 	bl	801317c <__ratio>
 801112c:	ec59 8b10 	vmov	r8, r9, d0
 8011130:	ee10 0a10 	vmov	r0, s0
 8011134:	2200      	movs	r2, #0
 8011136:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801113a:	4649      	mov	r1, r9
 801113c:	f7ef fd00 	bl	8000b40 <__aeabi_dcmple>
 8011140:	2800      	cmp	r0, #0
 8011142:	d07a      	beq.n	801123a <_strtod_l+0xa8a>
 8011144:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011146:	2b00      	cmp	r3, #0
 8011148:	d04a      	beq.n	80111e0 <_strtod_l+0xa30>
 801114a:	4b95      	ldr	r3, [pc, #596]	; (80113a0 <_strtod_l+0xbf0>)
 801114c:	2200      	movs	r2, #0
 801114e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8011152:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80113a0 <_strtod_l+0xbf0>
 8011156:	f04f 0800 	mov.w	r8, #0
 801115a:	4b92      	ldr	r3, [pc, #584]	; (80113a4 <_strtod_l+0xbf4>)
 801115c:	403b      	ands	r3, r7
 801115e:	930d      	str	r3, [sp, #52]	; 0x34
 8011160:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011162:	4b91      	ldr	r3, [pc, #580]	; (80113a8 <_strtod_l+0xbf8>)
 8011164:	429a      	cmp	r2, r3
 8011166:	f040 80b0 	bne.w	80112ca <_strtod_l+0xb1a>
 801116a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801116e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8011172:	ec4b ab10 	vmov	d0, sl, fp
 8011176:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801117a:	f001 ff27 	bl	8012fcc <__ulp>
 801117e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8011182:	ec53 2b10 	vmov	r2, r3, d0
 8011186:	f7ef fa5f 	bl	8000648 <__aeabi_dmul>
 801118a:	4652      	mov	r2, sl
 801118c:	465b      	mov	r3, fp
 801118e:	f7ef f8a5 	bl	80002dc <__adddf3>
 8011192:	460b      	mov	r3, r1
 8011194:	4983      	ldr	r1, [pc, #524]	; (80113a4 <_strtod_l+0xbf4>)
 8011196:	4a85      	ldr	r2, [pc, #532]	; (80113ac <_strtod_l+0xbfc>)
 8011198:	4019      	ands	r1, r3
 801119a:	4291      	cmp	r1, r2
 801119c:	4682      	mov	sl, r0
 801119e:	d960      	bls.n	8011262 <_strtod_l+0xab2>
 80111a0:	ee18 3a90 	vmov	r3, s17
 80111a4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80111a8:	4293      	cmp	r3, r2
 80111aa:	d104      	bne.n	80111b6 <_strtod_l+0xa06>
 80111ac:	ee18 3a10 	vmov	r3, s16
 80111b0:	3301      	adds	r3, #1
 80111b2:	f43f ad45 	beq.w	8010c40 <_strtod_l+0x490>
 80111b6:	f8df b200 	ldr.w	fp, [pc, #512]	; 80113b8 <_strtod_l+0xc08>
 80111ba:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80111be:	9918      	ldr	r1, [sp, #96]	; 0x60
 80111c0:	4620      	mov	r0, r4
 80111c2:	f001 fbd1 	bl	8012968 <_Bfree>
 80111c6:	9905      	ldr	r1, [sp, #20]
 80111c8:	4620      	mov	r0, r4
 80111ca:	f001 fbcd 	bl	8012968 <_Bfree>
 80111ce:	4631      	mov	r1, r6
 80111d0:	4620      	mov	r0, r4
 80111d2:	f001 fbc9 	bl	8012968 <_Bfree>
 80111d6:	4629      	mov	r1, r5
 80111d8:	4620      	mov	r0, r4
 80111da:	f001 fbc5 	bl	8012968 <_Bfree>
 80111de:	e61a      	b.n	8010e16 <_strtod_l+0x666>
 80111e0:	f1ba 0f00 	cmp.w	sl, #0
 80111e4:	d11b      	bne.n	801121e <_strtod_l+0xa6e>
 80111e6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80111ea:	b9f3      	cbnz	r3, 801122a <_strtod_l+0xa7a>
 80111ec:	4b6c      	ldr	r3, [pc, #432]	; (80113a0 <_strtod_l+0xbf0>)
 80111ee:	2200      	movs	r2, #0
 80111f0:	4640      	mov	r0, r8
 80111f2:	4649      	mov	r1, r9
 80111f4:	f7ef fc9a 	bl	8000b2c <__aeabi_dcmplt>
 80111f8:	b9d0      	cbnz	r0, 8011230 <_strtod_l+0xa80>
 80111fa:	4640      	mov	r0, r8
 80111fc:	4649      	mov	r1, r9
 80111fe:	4b6c      	ldr	r3, [pc, #432]	; (80113b0 <_strtod_l+0xc00>)
 8011200:	2200      	movs	r2, #0
 8011202:	f7ef fa21 	bl	8000648 <__aeabi_dmul>
 8011206:	4680      	mov	r8, r0
 8011208:	4689      	mov	r9, r1
 801120a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801120e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8011212:	9315      	str	r3, [sp, #84]	; 0x54
 8011214:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8011218:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801121c:	e79d      	b.n	801115a <_strtod_l+0x9aa>
 801121e:	f1ba 0f01 	cmp.w	sl, #1
 8011222:	d102      	bne.n	801122a <_strtod_l+0xa7a>
 8011224:	2f00      	cmp	r7, #0
 8011226:	f43f ad83 	beq.w	8010d30 <_strtod_l+0x580>
 801122a:	4b62      	ldr	r3, [pc, #392]	; (80113b4 <_strtod_l+0xc04>)
 801122c:	2200      	movs	r2, #0
 801122e:	e78e      	b.n	801114e <_strtod_l+0x99e>
 8011230:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80113b0 <_strtod_l+0xc00>
 8011234:	f04f 0800 	mov.w	r8, #0
 8011238:	e7e7      	b.n	801120a <_strtod_l+0xa5a>
 801123a:	4b5d      	ldr	r3, [pc, #372]	; (80113b0 <_strtod_l+0xc00>)
 801123c:	4640      	mov	r0, r8
 801123e:	4649      	mov	r1, r9
 8011240:	2200      	movs	r2, #0
 8011242:	f7ef fa01 	bl	8000648 <__aeabi_dmul>
 8011246:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011248:	4680      	mov	r8, r0
 801124a:	4689      	mov	r9, r1
 801124c:	b933      	cbnz	r3, 801125c <_strtod_l+0xaac>
 801124e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011252:	900e      	str	r0, [sp, #56]	; 0x38
 8011254:	930f      	str	r3, [sp, #60]	; 0x3c
 8011256:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801125a:	e7dd      	b.n	8011218 <_strtod_l+0xa68>
 801125c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8011260:	e7f9      	b.n	8011256 <_strtod_l+0xaa6>
 8011262:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8011266:	9b04      	ldr	r3, [sp, #16]
 8011268:	2b00      	cmp	r3, #0
 801126a:	d1a8      	bne.n	80111be <_strtod_l+0xa0e>
 801126c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011270:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011272:	0d1b      	lsrs	r3, r3, #20
 8011274:	051b      	lsls	r3, r3, #20
 8011276:	429a      	cmp	r2, r3
 8011278:	d1a1      	bne.n	80111be <_strtod_l+0xa0e>
 801127a:	4640      	mov	r0, r8
 801127c:	4649      	mov	r1, r9
 801127e:	f7ef fd43 	bl	8000d08 <__aeabi_d2lz>
 8011282:	f7ef f9b3 	bl	80005ec <__aeabi_l2d>
 8011286:	4602      	mov	r2, r0
 8011288:	460b      	mov	r3, r1
 801128a:	4640      	mov	r0, r8
 801128c:	4649      	mov	r1, r9
 801128e:	f7ef f823 	bl	80002d8 <__aeabi_dsub>
 8011292:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011294:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011298:	ea43 030a 	orr.w	r3, r3, sl
 801129c:	4313      	orrs	r3, r2
 801129e:	4680      	mov	r8, r0
 80112a0:	4689      	mov	r9, r1
 80112a2:	d055      	beq.n	8011350 <_strtod_l+0xba0>
 80112a4:	a336      	add	r3, pc, #216	; (adr r3, 8011380 <_strtod_l+0xbd0>)
 80112a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112aa:	f7ef fc3f 	bl	8000b2c <__aeabi_dcmplt>
 80112ae:	2800      	cmp	r0, #0
 80112b0:	f47f acd0 	bne.w	8010c54 <_strtod_l+0x4a4>
 80112b4:	a334      	add	r3, pc, #208	; (adr r3, 8011388 <_strtod_l+0xbd8>)
 80112b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112ba:	4640      	mov	r0, r8
 80112bc:	4649      	mov	r1, r9
 80112be:	f7ef fc53 	bl	8000b68 <__aeabi_dcmpgt>
 80112c2:	2800      	cmp	r0, #0
 80112c4:	f43f af7b 	beq.w	80111be <_strtod_l+0xa0e>
 80112c8:	e4c4      	b.n	8010c54 <_strtod_l+0x4a4>
 80112ca:	9b04      	ldr	r3, [sp, #16]
 80112cc:	b333      	cbz	r3, 801131c <_strtod_l+0xb6c>
 80112ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80112d0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80112d4:	d822      	bhi.n	801131c <_strtod_l+0xb6c>
 80112d6:	a32e      	add	r3, pc, #184	; (adr r3, 8011390 <_strtod_l+0xbe0>)
 80112d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112dc:	4640      	mov	r0, r8
 80112de:	4649      	mov	r1, r9
 80112e0:	f7ef fc2e 	bl	8000b40 <__aeabi_dcmple>
 80112e4:	b1a0      	cbz	r0, 8011310 <_strtod_l+0xb60>
 80112e6:	4649      	mov	r1, r9
 80112e8:	4640      	mov	r0, r8
 80112ea:	f7ef fc85 	bl	8000bf8 <__aeabi_d2uiz>
 80112ee:	2801      	cmp	r0, #1
 80112f0:	bf38      	it	cc
 80112f2:	2001      	movcc	r0, #1
 80112f4:	f7ef f92e 	bl	8000554 <__aeabi_ui2d>
 80112f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80112fa:	4680      	mov	r8, r0
 80112fc:	4689      	mov	r9, r1
 80112fe:	bb23      	cbnz	r3, 801134a <_strtod_l+0xb9a>
 8011300:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011304:	9010      	str	r0, [sp, #64]	; 0x40
 8011306:	9311      	str	r3, [sp, #68]	; 0x44
 8011308:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801130c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8011310:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011312:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011314:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8011318:	1a9b      	subs	r3, r3, r2
 801131a:	9309      	str	r3, [sp, #36]	; 0x24
 801131c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8011320:	eeb0 0a48 	vmov.f32	s0, s16
 8011324:	eef0 0a68 	vmov.f32	s1, s17
 8011328:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801132c:	f001 fe4e 	bl	8012fcc <__ulp>
 8011330:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8011334:	ec53 2b10 	vmov	r2, r3, d0
 8011338:	f7ef f986 	bl	8000648 <__aeabi_dmul>
 801133c:	ec53 2b18 	vmov	r2, r3, d8
 8011340:	f7ee ffcc 	bl	80002dc <__adddf3>
 8011344:	4682      	mov	sl, r0
 8011346:	468b      	mov	fp, r1
 8011348:	e78d      	b.n	8011266 <_strtod_l+0xab6>
 801134a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 801134e:	e7db      	b.n	8011308 <_strtod_l+0xb58>
 8011350:	a311      	add	r3, pc, #68	; (adr r3, 8011398 <_strtod_l+0xbe8>)
 8011352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011356:	f7ef fbe9 	bl	8000b2c <__aeabi_dcmplt>
 801135a:	e7b2      	b.n	80112c2 <_strtod_l+0xb12>
 801135c:	2300      	movs	r3, #0
 801135e:	930a      	str	r3, [sp, #40]	; 0x28
 8011360:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8011362:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011364:	6013      	str	r3, [r2, #0]
 8011366:	f7ff ba6b 	b.w	8010840 <_strtod_l+0x90>
 801136a:	2a65      	cmp	r2, #101	; 0x65
 801136c:	f43f ab5f 	beq.w	8010a2e <_strtod_l+0x27e>
 8011370:	2a45      	cmp	r2, #69	; 0x45
 8011372:	f43f ab5c 	beq.w	8010a2e <_strtod_l+0x27e>
 8011376:	2301      	movs	r3, #1
 8011378:	f7ff bb94 	b.w	8010aa4 <_strtod_l+0x2f4>
 801137c:	f3af 8000 	nop.w
 8011380:	94a03595 	.word	0x94a03595
 8011384:	3fdfffff 	.word	0x3fdfffff
 8011388:	35afe535 	.word	0x35afe535
 801138c:	3fe00000 	.word	0x3fe00000
 8011390:	ffc00000 	.word	0xffc00000
 8011394:	41dfffff 	.word	0x41dfffff
 8011398:	94a03595 	.word	0x94a03595
 801139c:	3fcfffff 	.word	0x3fcfffff
 80113a0:	3ff00000 	.word	0x3ff00000
 80113a4:	7ff00000 	.word	0x7ff00000
 80113a8:	7fe00000 	.word	0x7fe00000
 80113ac:	7c9fffff 	.word	0x7c9fffff
 80113b0:	3fe00000 	.word	0x3fe00000
 80113b4:	bff00000 	.word	0xbff00000
 80113b8:	7fefffff 	.word	0x7fefffff

080113bc <_strtod_r>:
 80113bc:	4b01      	ldr	r3, [pc, #4]	; (80113c4 <_strtod_r+0x8>)
 80113be:	f7ff b9f7 	b.w	80107b0 <_strtod_l>
 80113c2:	bf00      	nop
 80113c4:	20000094 	.word	0x20000094

080113c8 <_strtol_l.constprop.0>:
 80113c8:	2b01      	cmp	r3, #1
 80113ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80113ce:	d001      	beq.n	80113d4 <_strtol_l.constprop.0+0xc>
 80113d0:	2b24      	cmp	r3, #36	; 0x24
 80113d2:	d906      	bls.n	80113e2 <_strtol_l.constprop.0+0x1a>
 80113d4:	f7fe f9f0 	bl	800f7b8 <__errno>
 80113d8:	2316      	movs	r3, #22
 80113da:	6003      	str	r3, [r0, #0]
 80113dc:	2000      	movs	r0, #0
 80113de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80113e2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80114c8 <_strtol_l.constprop.0+0x100>
 80113e6:	460d      	mov	r5, r1
 80113e8:	462e      	mov	r6, r5
 80113ea:	f815 4b01 	ldrb.w	r4, [r5], #1
 80113ee:	f814 700c 	ldrb.w	r7, [r4, ip]
 80113f2:	f017 0708 	ands.w	r7, r7, #8
 80113f6:	d1f7      	bne.n	80113e8 <_strtol_l.constprop.0+0x20>
 80113f8:	2c2d      	cmp	r4, #45	; 0x2d
 80113fa:	d132      	bne.n	8011462 <_strtol_l.constprop.0+0x9a>
 80113fc:	782c      	ldrb	r4, [r5, #0]
 80113fe:	2701      	movs	r7, #1
 8011400:	1cb5      	adds	r5, r6, #2
 8011402:	2b00      	cmp	r3, #0
 8011404:	d05b      	beq.n	80114be <_strtol_l.constprop.0+0xf6>
 8011406:	2b10      	cmp	r3, #16
 8011408:	d109      	bne.n	801141e <_strtol_l.constprop.0+0x56>
 801140a:	2c30      	cmp	r4, #48	; 0x30
 801140c:	d107      	bne.n	801141e <_strtol_l.constprop.0+0x56>
 801140e:	782c      	ldrb	r4, [r5, #0]
 8011410:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8011414:	2c58      	cmp	r4, #88	; 0x58
 8011416:	d14d      	bne.n	80114b4 <_strtol_l.constprop.0+0xec>
 8011418:	786c      	ldrb	r4, [r5, #1]
 801141a:	2310      	movs	r3, #16
 801141c:	3502      	adds	r5, #2
 801141e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8011422:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8011426:	f04f 0c00 	mov.w	ip, #0
 801142a:	fbb8 f9f3 	udiv	r9, r8, r3
 801142e:	4666      	mov	r6, ip
 8011430:	fb03 8a19 	mls	sl, r3, r9, r8
 8011434:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8011438:	f1be 0f09 	cmp.w	lr, #9
 801143c:	d816      	bhi.n	801146c <_strtol_l.constprop.0+0xa4>
 801143e:	4674      	mov	r4, lr
 8011440:	42a3      	cmp	r3, r4
 8011442:	dd24      	ble.n	801148e <_strtol_l.constprop.0+0xc6>
 8011444:	f1bc 0f00 	cmp.w	ip, #0
 8011448:	db1e      	blt.n	8011488 <_strtol_l.constprop.0+0xc0>
 801144a:	45b1      	cmp	r9, r6
 801144c:	d31c      	bcc.n	8011488 <_strtol_l.constprop.0+0xc0>
 801144e:	d101      	bne.n	8011454 <_strtol_l.constprop.0+0x8c>
 8011450:	45a2      	cmp	sl, r4
 8011452:	db19      	blt.n	8011488 <_strtol_l.constprop.0+0xc0>
 8011454:	fb06 4603 	mla	r6, r6, r3, r4
 8011458:	f04f 0c01 	mov.w	ip, #1
 801145c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011460:	e7e8      	b.n	8011434 <_strtol_l.constprop.0+0x6c>
 8011462:	2c2b      	cmp	r4, #43	; 0x2b
 8011464:	bf04      	itt	eq
 8011466:	782c      	ldrbeq	r4, [r5, #0]
 8011468:	1cb5      	addeq	r5, r6, #2
 801146a:	e7ca      	b.n	8011402 <_strtol_l.constprop.0+0x3a>
 801146c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8011470:	f1be 0f19 	cmp.w	lr, #25
 8011474:	d801      	bhi.n	801147a <_strtol_l.constprop.0+0xb2>
 8011476:	3c37      	subs	r4, #55	; 0x37
 8011478:	e7e2      	b.n	8011440 <_strtol_l.constprop.0+0x78>
 801147a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 801147e:	f1be 0f19 	cmp.w	lr, #25
 8011482:	d804      	bhi.n	801148e <_strtol_l.constprop.0+0xc6>
 8011484:	3c57      	subs	r4, #87	; 0x57
 8011486:	e7db      	b.n	8011440 <_strtol_l.constprop.0+0x78>
 8011488:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 801148c:	e7e6      	b.n	801145c <_strtol_l.constprop.0+0x94>
 801148e:	f1bc 0f00 	cmp.w	ip, #0
 8011492:	da05      	bge.n	80114a0 <_strtol_l.constprop.0+0xd8>
 8011494:	2322      	movs	r3, #34	; 0x22
 8011496:	6003      	str	r3, [r0, #0]
 8011498:	4646      	mov	r6, r8
 801149a:	b942      	cbnz	r2, 80114ae <_strtol_l.constprop.0+0xe6>
 801149c:	4630      	mov	r0, r6
 801149e:	e79e      	b.n	80113de <_strtol_l.constprop.0+0x16>
 80114a0:	b107      	cbz	r7, 80114a4 <_strtol_l.constprop.0+0xdc>
 80114a2:	4276      	negs	r6, r6
 80114a4:	2a00      	cmp	r2, #0
 80114a6:	d0f9      	beq.n	801149c <_strtol_l.constprop.0+0xd4>
 80114a8:	f1bc 0f00 	cmp.w	ip, #0
 80114ac:	d000      	beq.n	80114b0 <_strtol_l.constprop.0+0xe8>
 80114ae:	1e69      	subs	r1, r5, #1
 80114b0:	6011      	str	r1, [r2, #0]
 80114b2:	e7f3      	b.n	801149c <_strtol_l.constprop.0+0xd4>
 80114b4:	2430      	movs	r4, #48	; 0x30
 80114b6:	2b00      	cmp	r3, #0
 80114b8:	d1b1      	bne.n	801141e <_strtol_l.constprop.0+0x56>
 80114ba:	2308      	movs	r3, #8
 80114bc:	e7af      	b.n	801141e <_strtol_l.constprop.0+0x56>
 80114be:	2c30      	cmp	r4, #48	; 0x30
 80114c0:	d0a5      	beq.n	801140e <_strtol_l.constprop.0+0x46>
 80114c2:	230a      	movs	r3, #10
 80114c4:	e7ab      	b.n	801141e <_strtol_l.constprop.0+0x56>
 80114c6:	bf00      	nop
 80114c8:	08014cc9 	.word	0x08014cc9

080114cc <_strtol_r>:
 80114cc:	f7ff bf7c 	b.w	80113c8 <_strtol_l.constprop.0>

080114d0 <quorem>:
 80114d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114d4:	6903      	ldr	r3, [r0, #16]
 80114d6:	690c      	ldr	r4, [r1, #16]
 80114d8:	42a3      	cmp	r3, r4
 80114da:	4607      	mov	r7, r0
 80114dc:	f2c0 8081 	blt.w	80115e2 <quorem+0x112>
 80114e0:	3c01      	subs	r4, #1
 80114e2:	f101 0814 	add.w	r8, r1, #20
 80114e6:	f100 0514 	add.w	r5, r0, #20
 80114ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80114ee:	9301      	str	r3, [sp, #4]
 80114f0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80114f4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80114f8:	3301      	adds	r3, #1
 80114fa:	429a      	cmp	r2, r3
 80114fc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8011500:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011504:	fbb2 f6f3 	udiv	r6, r2, r3
 8011508:	d331      	bcc.n	801156e <quorem+0x9e>
 801150a:	f04f 0e00 	mov.w	lr, #0
 801150e:	4640      	mov	r0, r8
 8011510:	46ac      	mov	ip, r5
 8011512:	46f2      	mov	sl, lr
 8011514:	f850 2b04 	ldr.w	r2, [r0], #4
 8011518:	b293      	uxth	r3, r2
 801151a:	fb06 e303 	mla	r3, r6, r3, lr
 801151e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8011522:	b29b      	uxth	r3, r3
 8011524:	ebaa 0303 	sub.w	r3, sl, r3
 8011528:	f8dc a000 	ldr.w	sl, [ip]
 801152c:	0c12      	lsrs	r2, r2, #16
 801152e:	fa13 f38a 	uxtah	r3, r3, sl
 8011532:	fb06 e202 	mla	r2, r6, r2, lr
 8011536:	9300      	str	r3, [sp, #0]
 8011538:	9b00      	ldr	r3, [sp, #0]
 801153a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801153e:	b292      	uxth	r2, r2
 8011540:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8011544:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011548:	f8bd 3000 	ldrh.w	r3, [sp]
 801154c:	4581      	cmp	r9, r0
 801154e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011552:	f84c 3b04 	str.w	r3, [ip], #4
 8011556:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801155a:	d2db      	bcs.n	8011514 <quorem+0x44>
 801155c:	f855 300b 	ldr.w	r3, [r5, fp]
 8011560:	b92b      	cbnz	r3, 801156e <quorem+0x9e>
 8011562:	9b01      	ldr	r3, [sp, #4]
 8011564:	3b04      	subs	r3, #4
 8011566:	429d      	cmp	r5, r3
 8011568:	461a      	mov	r2, r3
 801156a:	d32e      	bcc.n	80115ca <quorem+0xfa>
 801156c:	613c      	str	r4, [r7, #16]
 801156e:	4638      	mov	r0, r7
 8011570:	f001 fc86 	bl	8012e80 <__mcmp>
 8011574:	2800      	cmp	r0, #0
 8011576:	db24      	blt.n	80115c2 <quorem+0xf2>
 8011578:	3601      	adds	r6, #1
 801157a:	4628      	mov	r0, r5
 801157c:	f04f 0c00 	mov.w	ip, #0
 8011580:	f858 2b04 	ldr.w	r2, [r8], #4
 8011584:	f8d0 e000 	ldr.w	lr, [r0]
 8011588:	b293      	uxth	r3, r2
 801158a:	ebac 0303 	sub.w	r3, ip, r3
 801158e:	0c12      	lsrs	r2, r2, #16
 8011590:	fa13 f38e 	uxtah	r3, r3, lr
 8011594:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8011598:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801159c:	b29b      	uxth	r3, r3
 801159e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80115a2:	45c1      	cmp	r9, r8
 80115a4:	f840 3b04 	str.w	r3, [r0], #4
 80115a8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80115ac:	d2e8      	bcs.n	8011580 <quorem+0xb0>
 80115ae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80115b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80115b6:	b922      	cbnz	r2, 80115c2 <quorem+0xf2>
 80115b8:	3b04      	subs	r3, #4
 80115ba:	429d      	cmp	r5, r3
 80115bc:	461a      	mov	r2, r3
 80115be:	d30a      	bcc.n	80115d6 <quorem+0x106>
 80115c0:	613c      	str	r4, [r7, #16]
 80115c2:	4630      	mov	r0, r6
 80115c4:	b003      	add	sp, #12
 80115c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80115ca:	6812      	ldr	r2, [r2, #0]
 80115cc:	3b04      	subs	r3, #4
 80115ce:	2a00      	cmp	r2, #0
 80115d0:	d1cc      	bne.n	801156c <quorem+0x9c>
 80115d2:	3c01      	subs	r4, #1
 80115d4:	e7c7      	b.n	8011566 <quorem+0x96>
 80115d6:	6812      	ldr	r2, [r2, #0]
 80115d8:	3b04      	subs	r3, #4
 80115da:	2a00      	cmp	r2, #0
 80115dc:	d1f0      	bne.n	80115c0 <quorem+0xf0>
 80115de:	3c01      	subs	r4, #1
 80115e0:	e7eb      	b.n	80115ba <quorem+0xea>
 80115e2:	2000      	movs	r0, #0
 80115e4:	e7ee      	b.n	80115c4 <quorem+0xf4>
	...

080115e8 <_dtoa_r>:
 80115e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115ec:	ed2d 8b04 	vpush	{d8-d9}
 80115f0:	ec57 6b10 	vmov	r6, r7, d0
 80115f4:	b093      	sub	sp, #76	; 0x4c
 80115f6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80115f8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80115fc:	9106      	str	r1, [sp, #24]
 80115fe:	ee10 aa10 	vmov	sl, s0
 8011602:	4604      	mov	r4, r0
 8011604:	9209      	str	r2, [sp, #36]	; 0x24
 8011606:	930c      	str	r3, [sp, #48]	; 0x30
 8011608:	46bb      	mov	fp, r7
 801160a:	b975      	cbnz	r5, 801162a <_dtoa_r+0x42>
 801160c:	2010      	movs	r0, #16
 801160e:	f7fe f8fd 	bl	800f80c <malloc>
 8011612:	4602      	mov	r2, r0
 8011614:	6260      	str	r0, [r4, #36]	; 0x24
 8011616:	b920      	cbnz	r0, 8011622 <_dtoa_r+0x3a>
 8011618:	4ba7      	ldr	r3, [pc, #668]	; (80118b8 <_dtoa_r+0x2d0>)
 801161a:	21ea      	movs	r1, #234	; 0xea
 801161c:	48a7      	ldr	r0, [pc, #668]	; (80118bc <_dtoa_r+0x2d4>)
 801161e:	f001 ffc1 	bl	80135a4 <__assert_func>
 8011622:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8011626:	6005      	str	r5, [r0, #0]
 8011628:	60c5      	str	r5, [r0, #12]
 801162a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801162c:	6819      	ldr	r1, [r3, #0]
 801162e:	b151      	cbz	r1, 8011646 <_dtoa_r+0x5e>
 8011630:	685a      	ldr	r2, [r3, #4]
 8011632:	604a      	str	r2, [r1, #4]
 8011634:	2301      	movs	r3, #1
 8011636:	4093      	lsls	r3, r2
 8011638:	608b      	str	r3, [r1, #8]
 801163a:	4620      	mov	r0, r4
 801163c:	f001 f994 	bl	8012968 <_Bfree>
 8011640:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011642:	2200      	movs	r2, #0
 8011644:	601a      	str	r2, [r3, #0]
 8011646:	1e3b      	subs	r3, r7, #0
 8011648:	bfaa      	itet	ge
 801164a:	2300      	movge	r3, #0
 801164c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8011650:	f8c8 3000 	strge.w	r3, [r8]
 8011654:	4b9a      	ldr	r3, [pc, #616]	; (80118c0 <_dtoa_r+0x2d8>)
 8011656:	bfbc      	itt	lt
 8011658:	2201      	movlt	r2, #1
 801165a:	f8c8 2000 	strlt.w	r2, [r8]
 801165e:	ea33 030b 	bics.w	r3, r3, fp
 8011662:	d11b      	bne.n	801169c <_dtoa_r+0xb4>
 8011664:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011666:	f242 730f 	movw	r3, #9999	; 0x270f
 801166a:	6013      	str	r3, [r2, #0]
 801166c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011670:	4333      	orrs	r3, r6
 8011672:	f000 8592 	beq.w	801219a <_dtoa_r+0xbb2>
 8011676:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011678:	b963      	cbnz	r3, 8011694 <_dtoa_r+0xac>
 801167a:	4b92      	ldr	r3, [pc, #584]	; (80118c4 <_dtoa_r+0x2dc>)
 801167c:	e022      	b.n	80116c4 <_dtoa_r+0xdc>
 801167e:	4b92      	ldr	r3, [pc, #584]	; (80118c8 <_dtoa_r+0x2e0>)
 8011680:	9301      	str	r3, [sp, #4]
 8011682:	3308      	adds	r3, #8
 8011684:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8011686:	6013      	str	r3, [r2, #0]
 8011688:	9801      	ldr	r0, [sp, #4]
 801168a:	b013      	add	sp, #76	; 0x4c
 801168c:	ecbd 8b04 	vpop	{d8-d9}
 8011690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011694:	4b8b      	ldr	r3, [pc, #556]	; (80118c4 <_dtoa_r+0x2dc>)
 8011696:	9301      	str	r3, [sp, #4]
 8011698:	3303      	adds	r3, #3
 801169a:	e7f3      	b.n	8011684 <_dtoa_r+0x9c>
 801169c:	2200      	movs	r2, #0
 801169e:	2300      	movs	r3, #0
 80116a0:	4650      	mov	r0, sl
 80116a2:	4659      	mov	r1, fp
 80116a4:	f7ef fa38 	bl	8000b18 <__aeabi_dcmpeq>
 80116a8:	ec4b ab19 	vmov	d9, sl, fp
 80116ac:	4680      	mov	r8, r0
 80116ae:	b158      	cbz	r0, 80116c8 <_dtoa_r+0xe0>
 80116b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80116b2:	2301      	movs	r3, #1
 80116b4:	6013      	str	r3, [r2, #0]
 80116b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80116b8:	2b00      	cmp	r3, #0
 80116ba:	f000 856b 	beq.w	8012194 <_dtoa_r+0xbac>
 80116be:	4883      	ldr	r0, [pc, #524]	; (80118cc <_dtoa_r+0x2e4>)
 80116c0:	6018      	str	r0, [r3, #0]
 80116c2:	1e43      	subs	r3, r0, #1
 80116c4:	9301      	str	r3, [sp, #4]
 80116c6:	e7df      	b.n	8011688 <_dtoa_r+0xa0>
 80116c8:	ec4b ab10 	vmov	d0, sl, fp
 80116cc:	aa10      	add	r2, sp, #64	; 0x40
 80116ce:	a911      	add	r1, sp, #68	; 0x44
 80116d0:	4620      	mov	r0, r4
 80116d2:	f001 fcf7 	bl	80130c4 <__d2b>
 80116d6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80116da:	ee08 0a10 	vmov	s16, r0
 80116de:	2d00      	cmp	r5, #0
 80116e0:	f000 8084 	beq.w	80117ec <_dtoa_r+0x204>
 80116e4:	ee19 3a90 	vmov	r3, s19
 80116e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80116ec:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80116f0:	4656      	mov	r6, sl
 80116f2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80116f6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80116fa:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80116fe:	4b74      	ldr	r3, [pc, #464]	; (80118d0 <_dtoa_r+0x2e8>)
 8011700:	2200      	movs	r2, #0
 8011702:	4630      	mov	r0, r6
 8011704:	4639      	mov	r1, r7
 8011706:	f7ee fde7 	bl	80002d8 <__aeabi_dsub>
 801170a:	a365      	add	r3, pc, #404	; (adr r3, 80118a0 <_dtoa_r+0x2b8>)
 801170c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011710:	f7ee ff9a 	bl	8000648 <__aeabi_dmul>
 8011714:	a364      	add	r3, pc, #400	; (adr r3, 80118a8 <_dtoa_r+0x2c0>)
 8011716:	e9d3 2300 	ldrd	r2, r3, [r3]
 801171a:	f7ee fddf 	bl	80002dc <__adddf3>
 801171e:	4606      	mov	r6, r0
 8011720:	4628      	mov	r0, r5
 8011722:	460f      	mov	r7, r1
 8011724:	f7ee ff26 	bl	8000574 <__aeabi_i2d>
 8011728:	a361      	add	r3, pc, #388	; (adr r3, 80118b0 <_dtoa_r+0x2c8>)
 801172a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801172e:	f7ee ff8b 	bl	8000648 <__aeabi_dmul>
 8011732:	4602      	mov	r2, r0
 8011734:	460b      	mov	r3, r1
 8011736:	4630      	mov	r0, r6
 8011738:	4639      	mov	r1, r7
 801173a:	f7ee fdcf 	bl	80002dc <__adddf3>
 801173e:	4606      	mov	r6, r0
 8011740:	460f      	mov	r7, r1
 8011742:	f7ef fa31 	bl	8000ba8 <__aeabi_d2iz>
 8011746:	2200      	movs	r2, #0
 8011748:	9000      	str	r0, [sp, #0]
 801174a:	2300      	movs	r3, #0
 801174c:	4630      	mov	r0, r6
 801174e:	4639      	mov	r1, r7
 8011750:	f7ef f9ec 	bl	8000b2c <__aeabi_dcmplt>
 8011754:	b150      	cbz	r0, 801176c <_dtoa_r+0x184>
 8011756:	9800      	ldr	r0, [sp, #0]
 8011758:	f7ee ff0c 	bl	8000574 <__aeabi_i2d>
 801175c:	4632      	mov	r2, r6
 801175e:	463b      	mov	r3, r7
 8011760:	f7ef f9da 	bl	8000b18 <__aeabi_dcmpeq>
 8011764:	b910      	cbnz	r0, 801176c <_dtoa_r+0x184>
 8011766:	9b00      	ldr	r3, [sp, #0]
 8011768:	3b01      	subs	r3, #1
 801176a:	9300      	str	r3, [sp, #0]
 801176c:	9b00      	ldr	r3, [sp, #0]
 801176e:	2b16      	cmp	r3, #22
 8011770:	d85a      	bhi.n	8011828 <_dtoa_r+0x240>
 8011772:	9a00      	ldr	r2, [sp, #0]
 8011774:	4b57      	ldr	r3, [pc, #348]	; (80118d4 <_dtoa_r+0x2ec>)
 8011776:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801177a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801177e:	ec51 0b19 	vmov	r0, r1, d9
 8011782:	f7ef f9d3 	bl	8000b2c <__aeabi_dcmplt>
 8011786:	2800      	cmp	r0, #0
 8011788:	d050      	beq.n	801182c <_dtoa_r+0x244>
 801178a:	9b00      	ldr	r3, [sp, #0]
 801178c:	3b01      	subs	r3, #1
 801178e:	9300      	str	r3, [sp, #0]
 8011790:	2300      	movs	r3, #0
 8011792:	930b      	str	r3, [sp, #44]	; 0x2c
 8011794:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011796:	1b5d      	subs	r5, r3, r5
 8011798:	1e6b      	subs	r3, r5, #1
 801179a:	9305      	str	r3, [sp, #20]
 801179c:	bf45      	ittet	mi
 801179e:	f1c5 0301 	rsbmi	r3, r5, #1
 80117a2:	9304      	strmi	r3, [sp, #16]
 80117a4:	2300      	movpl	r3, #0
 80117a6:	2300      	movmi	r3, #0
 80117a8:	bf4c      	ite	mi
 80117aa:	9305      	strmi	r3, [sp, #20]
 80117ac:	9304      	strpl	r3, [sp, #16]
 80117ae:	9b00      	ldr	r3, [sp, #0]
 80117b0:	2b00      	cmp	r3, #0
 80117b2:	db3d      	blt.n	8011830 <_dtoa_r+0x248>
 80117b4:	9b05      	ldr	r3, [sp, #20]
 80117b6:	9a00      	ldr	r2, [sp, #0]
 80117b8:	920a      	str	r2, [sp, #40]	; 0x28
 80117ba:	4413      	add	r3, r2
 80117bc:	9305      	str	r3, [sp, #20]
 80117be:	2300      	movs	r3, #0
 80117c0:	9307      	str	r3, [sp, #28]
 80117c2:	9b06      	ldr	r3, [sp, #24]
 80117c4:	2b09      	cmp	r3, #9
 80117c6:	f200 8089 	bhi.w	80118dc <_dtoa_r+0x2f4>
 80117ca:	2b05      	cmp	r3, #5
 80117cc:	bfc4      	itt	gt
 80117ce:	3b04      	subgt	r3, #4
 80117d0:	9306      	strgt	r3, [sp, #24]
 80117d2:	9b06      	ldr	r3, [sp, #24]
 80117d4:	f1a3 0302 	sub.w	r3, r3, #2
 80117d8:	bfcc      	ite	gt
 80117da:	2500      	movgt	r5, #0
 80117dc:	2501      	movle	r5, #1
 80117de:	2b03      	cmp	r3, #3
 80117e0:	f200 8087 	bhi.w	80118f2 <_dtoa_r+0x30a>
 80117e4:	e8df f003 	tbb	[pc, r3]
 80117e8:	59383a2d 	.word	0x59383a2d
 80117ec:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80117f0:	441d      	add	r5, r3
 80117f2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80117f6:	2b20      	cmp	r3, #32
 80117f8:	bfc1      	itttt	gt
 80117fa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80117fe:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8011802:	fa0b f303 	lslgt.w	r3, fp, r3
 8011806:	fa26 f000 	lsrgt.w	r0, r6, r0
 801180a:	bfda      	itte	le
 801180c:	f1c3 0320 	rsble	r3, r3, #32
 8011810:	fa06 f003 	lslle.w	r0, r6, r3
 8011814:	4318      	orrgt	r0, r3
 8011816:	f7ee fe9d 	bl	8000554 <__aeabi_ui2d>
 801181a:	2301      	movs	r3, #1
 801181c:	4606      	mov	r6, r0
 801181e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8011822:	3d01      	subs	r5, #1
 8011824:	930e      	str	r3, [sp, #56]	; 0x38
 8011826:	e76a      	b.n	80116fe <_dtoa_r+0x116>
 8011828:	2301      	movs	r3, #1
 801182a:	e7b2      	b.n	8011792 <_dtoa_r+0x1aa>
 801182c:	900b      	str	r0, [sp, #44]	; 0x2c
 801182e:	e7b1      	b.n	8011794 <_dtoa_r+0x1ac>
 8011830:	9b04      	ldr	r3, [sp, #16]
 8011832:	9a00      	ldr	r2, [sp, #0]
 8011834:	1a9b      	subs	r3, r3, r2
 8011836:	9304      	str	r3, [sp, #16]
 8011838:	4253      	negs	r3, r2
 801183a:	9307      	str	r3, [sp, #28]
 801183c:	2300      	movs	r3, #0
 801183e:	930a      	str	r3, [sp, #40]	; 0x28
 8011840:	e7bf      	b.n	80117c2 <_dtoa_r+0x1da>
 8011842:	2300      	movs	r3, #0
 8011844:	9308      	str	r3, [sp, #32]
 8011846:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011848:	2b00      	cmp	r3, #0
 801184a:	dc55      	bgt.n	80118f8 <_dtoa_r+0x310>
 801184c:	2301      	movs	r3, #1
 801184e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8011852:	461a      	mov	r2, r3
 8011854:	9209      	str	r2, [sp, #36]	; 0x24
 8011856:	e00c      	b.n	8011872 <_dtoa_r+0x28a>
 8011858:	2301      	movs	r3, #1
 801185a:	e7f3      	b.n	8011844 <_dtoa_r+0x25c>
 801185c:	2300      	movs	r3, #0
 801185e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011860:	9308      	str	r3, [sp, #32]
 8011862:	9b00      	ldr	r3, [sp, #0]
 8011864:	4413      	add	r3, r2
 8011866:	9302      	str	r3, [sp, #8]
 8011868:	3301      	adds	r3, #1
 801186a:	2b01      	cmp	r3, #1
 801186c:	9303      	str	r3, [sp, #12]
 801186e:	bfb8      	it	lt
 8011870:	2301      	movlt	r3, #1
 8011872:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8011874:	2200      	movs	r2, #0
 8011876:	6042      	str	r2, [r0, #4]
 8011878:	2204      	movs	r2, #4
 801187a:	f102 0614 	add.w	r6, r2, #20
 801187e:	429e      	cmp	r6, r3
 8011880:	6841      	ldr	r1, [r0, #4]
 8011882:	d93d      	bls.n	8011900 <_dtoa_r+0x318>
 8011884:	4620      	mov	r0, r4
 8011886:	f001 f82f 	bl	80128e8 <_Balloc>
 801188a:	9001      	str	r0, [sp, #4]
 801188c:	2800      	cmp	r0, #0
 801188e:	d13b      	bne.n	8011908 <_dtoa_r+0x320>
 8011890:	4b11      	ldr	r3, [pc, #68]	; (80118d8 <_dtoa_r+0x2f0>)
 8011892:	4602      	mov	r2, r0
 8011894:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8011898:	e6c0      	b.n	801161c <_dtoa_r+0x34>
 801189a:	2301      	movs	r3, #1
 801189c:	e7df      	b.n	801185e <_dtoa_r+0x276>
 801189e:	bf00      	nop
 80118a0:	636f4361 	.word	0x636f4361
 80118a4:	3fd287a7 	.word	0x3fd287a7
 80118a8:	8b60c8b3 	.word	0x8b60c8b3
 80118ac:	3fc68a28 	.word	0x3fc68a28
 80118b0:	509f79fb 	.word	0x509f79fb
 80118b4:	3fd34413 	.word	0x3fd34413
 80118b8:	08014dd6 	.word	0x08014dd6
 80118bc:	08014ded 	.word	0x08014ded
 80118c0:	7ff00000 	.word	0x7ff00000
 80118c4:	08014dd2 	.word	0x08014dd2
 80118c8:	08014dc9 	.word	0x08014dc9
 80118cc:	08014c49 	.word	0x08014c49
 80118d0:	3ff80000 	.word	0x3ff80000
 80118d4:	08014f58 	.word	0x08014f58
 80118d8:	08014e48 	.word	0x08014e48
 80118dc:	2501      	movs	r5, #1
 80118de:	2300      	movs	r3, #0
 80118e0:	9306      	str	r3, [sp, #24]
 80118e2:	9508      	str	r5, [sp, #32]
 80118e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80118e8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80118ec:	2200      	movs	r2, #0
 80118ee:	2312      	movs	r3, #18
 80118f0:	e7b0      	b.n	8011854 <_dtoa_r+0x26c>
 80118f2:	2301      	movs	r3, #1
 80118f4:	9308      	str	r3, [sp, #32]
 80118f6:	e7f5      	b.n	80118e4 <_dtoa_r+0x2fc>
 80118f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80118fa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80118fe:	e7b8      	b.n	8011872 <_dtoa_r+0x28a>
 8011900:	3101      	adds	r1, #1
 8011902:	6041      	str	r1, [r0, #4]
 8011904:	0052      	lsls	r2, r2, #1
 8011906:	e7b8      	b.n	801187a <_dtoa_r+0x292>
 8011908:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801190a:	9a01      	ldr	r2, [sp, #4]
 801190c:	601a      	str	r2, [r3, #0]
 801190e:	9b03      	ldr	r3, [sp, #12]
 8011910:	2b0e      	cmp	r3, #14
 8011912:	f200 809d 	bhi.w	8011a50 <_dtoa_r+0x468>
 8011916:	2d00      	cmp	r5, #0
 8011918:	f000 809a 	beq.w	8011a50 <_dtoa_r+0x468>
 801191c:	9b00      	ldr	r3, [sp, #0]
 801191e:	2b00      	cmp	r3, #0
 8011920:	dd32      	ble.n	8011988 <_dtoa_r+0x3a0>
 8011922:	4ab7      	ldr	r2, [pc, #732]	; (8011c00 <_dtoa_r+0x618>)
 8011924:	f003 030f 	and.w	r3, r3, #15
 8011928:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801192c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011930:	9b00      	ldr	r3, [sp, #0]
 8011932:	05d8      	lsls	r0, r3, #23
 8011934:	ea4f 1723 	mov.w	r7, r3, asr #4
 8011938:	d516      	bpl.n	8011968 <_dtoa_r+0x380>
 801193a:	4bb2      	ldr	r3, [pc, #712]	; (8011c04 <_dtoa_r+0x61c>)
 801193c:	ec51 0b19 	vmov	r0, r1, d9
 8011940:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8011944:	f7ee ffaa 	bl	800089c <__aeabi_ddiv>
 8011948:	f007 070f 	and.w	r7, r7, #15
 801194c:	4682      	mov	sl, r0
 801194e:	468b      	mov	fp, r1
 8011950:	2503      	movs	r5, #3
 8011952:	4eac      	ldr	r6, [pc, #688]	; (8011c04 <_dtoa_r+0x61c>)
 8011954:	b957      	cbnz	r7, 801196c <_dtoa_r+0x384>
 8011956:	4642      	mov	r2, r8
 8011958:	464b      	mov	r3, r9
 801195a:	4650      	mov	r0, sl
 801195c:	4659      	mov	r1, fp
 801195e:	f7ee ff9d 	bl	800089c <__aeabi_ddiv>
 8011962:	4682      	mov	sl, r0
 8011964:	468b      	mov	fp, r1
 8011966:	e028      	b.n	80119ba <_dtoa_r+0x3d2>
 8011968:	2502      	movs	r5, #2
 801196a:	e7f2      	b.n	8011952 <_dtoa_r+0x36a>
 801196c:	07f9      	lsls	r1, r7, #31
 801196e:	d508      	bpl.n	8011982 <_dtoa_r+0x39a>
 8011970:	4640      	mov	r0, r8
 8011972:	4649      	mov	r1, r9
 8011974:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011978:	f7ee fe66 	bl	8000648 <__aeabi_dmul>
 801197c:	3501      	adds	r5, #1
 801197e:	4680      	mov	r8, r0
 8011980:	4689      	mov	r9, r1
 8011982:	107f      	asrs	r7, r7, #1
 8011984:	3608      	adds	r6, #8
 8011986:	e7e5      	b.n	8011954 <_dtoa_r+0x36c>
 8011988:	f000 809b 	beq.w	8011ac2 <_dtoa_r+0x4da>
 801198c:	9b00      	ldr	r3, [sp, #0]
 801198e:	4f9d      	ldr	r7, [pc, #628]	; (8011c04 <_dtoa_r+0x61c>)
 8011990:	425e      	negs	r6, r3
 8011992:	4b9b      	ldr	r3, [pc, #620]	; (8011c00 <_dtoa_r+0x618>)
 8011994:	f006 020f 	and.w	r2, r6, #15
 8011998:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801199c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119a0:	ec51 0b19 	vmov	r0, r1, d9
 80119a4:	f7ee fe50 	bl	8000648 <__aeabi_dmul>
 80119a8:	1136      	asrs	r6, r6, #4
 80119aa:	4682      	mov	sl, r0
 80119ac:	468b      	mov	fp, r1
 80119ae:	2300      	movs	r3, #0
 80119b0:	2502      	movs	r5, #2
 80119b2:	2e00      	cmp	r6, #0
 80119b4:	d17a      	bne.n	8011aac <_dtoa_r+0x4c4>
 80119b6:	2b00      	cmp	r3, #0
 80119b8:	d1d3      	bne.n	8011962 <_dtoa_r+0x37a>
 80119ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80119bc:	2b00      	cmp	r3, #0
 80119be:	f000 8082 	beq.w	8011ac6 <_dtoa_r+0x4de>
 80119c2:	4b91      	ldr	r3, [pc, #580]	; (8011c08 <_dtoa_r+0x620>)
 80119c4:	2200      	movs	r2, #0
 80119c6:	4650      	mov	r0, sl
 80119c8:	4659      	mov	r1, fp
 80119ca:	f7ef f8af 	bl	8000b2c <__aeabi_dcmplt>
 80119ce:	2800      	cmp	r0, #0
 80119d0:	d079      	beq.n	8011ac6 <_dtoa_r+0x4de>
 80119d2:	9b03      	ldr	r3, [sp, #12]
 80119d4:	2b00      	cmp	r3, #0
 80119d6:	d076      	beq.n	8011ac6 <_dtoa_r+0x4de>
 80119d8:	9b02      	ldr	r3, [sp, #8]
 80119da:	2b00      	cmp	r3, #0
 80119dc:	dd36      	ble.n	8011a4c <_dtoa_r+0x464>
 80119de:	9b00      	ldr	r3, [sp, #0]
 80119e0:	4650      	mov	r0, sl
 80119e2:	4659      	mov	r1, fp
 80119e4:	1e5f      	subs	r7, r3, #1
 80119e6:	2200      	movs	r2, #0
 80119e8:	4b88      	ldr	r3, [pc, #544]	; (8011c0c <_dtoa_r+0x624>)
 80119ea:	f7ee fe2d 	bl	8000648 <__aeabi_dmul>
 80119ee:	9e02      	ldr	r6, [sp, #8]
 80119f0:	4682      	mov	sl, r0
 80119f2:	468b      	mov	fp, r1
 80119f4:	3501      	adds	r5, #1
 80119f6:	4628      	mov	r0, r5
 80119f8:	f7ee fdbc 	bl	8000574 <__aeabi_i2d>
 80119fc:	4652      	mov	r2, sl
 80119fe:	465b      	mov	r3, fp
 8011a00:	f7ee fe22 	bl	8000648 <__aeabi_dmul>
 8011a04:	4b82      	ldr	r3, [pc, #520]	; (8011c10 <_dtoa_r+0x628>)
 8011a06:	2200      	movs	r2, #0
 8011a08:	f7ee fc68 	bl	80002dc <__adddf3>
 8011a0c:	46d0      	mov	r8, sl
 8011a0e:	46d9      	mov	r9, fp
 8011a10:	4682      	mov	sl, r0
 8011a12:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8011a16:	2e00      	cmp	r6, #0
 8011a18:	d158      	bne.n	8011acc <_dtoa_r+0x4e4>
 8011a1a:	4b7e      	ldr	r3, [pc, #504]	; (8011c14 <_dtoa_r+0x62c>)
 8011a1c:	2200      	movs	r2, #0
 8011a1e:	4640      	mov	r0, r8
 8011a20:	4649      	mov	r1, r9
 8011a22:	f7ee fc59 	bl	80002d8 <__aeabi_dsub>
 8011a26:	4652      	mov	r2, sl
 8011a28:	465b      	mov	r3, fp
 8011a2a:	4680      	mov	r8, r0
 8011a2c:	4689      	mov	r9, r1
 8011a2e:	f7ef f89b 	bl	8000b68 <__aeabi_dcmpgt>
 8011a32:	2800      	cmp	r0, #0
 8011a34:	f040 8295 	bne.w	8011f62 <_dtoa_r+0x97a>
 8011a38:	4652      	mov	r2, sl
 8011a3a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8011a3e:	4640      	mov	r0, r8
 8011a40:	4649      	mov	r1, r9
 8011a42:	f7ef f873 	bl	8000b2c <__aeabi_dcmplt>
 8011a46:	2800      	cmp	r0, #0
 8011a48:	f040 8289 	bne.w	8011f5e <_dtoa_r+0x976>
 8011a4c:	ec5b ab19 	vmov	sl, fp, d9
 8011a50:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	f2c0 8148 	blt.w	8011ce8 <_dtoa_r+0x700>
 8011a58:	9a00      	ldr	r2, [sp, #0]
 8011a5a:	2a0e      	cmp	r2, #14
 8011a5c:	f300 8144 	bgt.w	8011ce8 <_dtoa_r+0x700>
 8011a60:	4b67      	ldr	r3, [pc, #412]	; (8011c00 <_dtoa_r+0x618>)
 8011a62:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011a66:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011a6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011a6c:	2b00      	cmp	r3, #0
 8011a6e:	f280 80d5 	bge.w	8011c1c <_dtoa_r+0x634>
 8011a72:	9b03      	ldr	r3, [sp, #12]
 8011a74:	2b00      	cmp	r3, #0
 8011a76:	f300 80d1 	bgt.w	8011c1c <_dtoa_r+0x634>
 8011a7a:	f040 826f 	bne.w	8011f5c <_dtoa_r+0x974>
 8011a7e:	4b65      	ldr	r3, [pc, #404]	; (8011c14 <_dtoa_r+0x62c>)
 8011a80:	2200      	movs	r2, #0
 8011a82:	4640      	mov	r0, r8
 8011a84:	4649      	mov	r1, r9
 8011a86:	f7ee fddf 	bl	8000648 <__aeabi_dmul>
 8011a8a:	4652      	mov	r2, sl
 8011a8c:	465b      	mov	r3, fp
 8011a8e:	f7ef f861 	bl	8000b54 <__aeabi_dcmpge>
 8011a92:	9e03      	ldr	r6, [sp, #12]
 8011a94:	4637      	mov	r7, r6
 8011a96:	2800      	cmp	r0, #0
 8011a98:	f040 8245 	bne.w	8011f26 <_dtoa_r+0x93e>
 8011a9c:	9d01      	ldr	r5, [sp, #4]
 8011a9e:	2331      	movs	r3, #49	; 0x31
 8011aa0:	f805 3b01 	strb.w	r3, [r5], #1
 8011aa4:	9b00      	ldr	r3, [sp, #0]
 8011aa6:	3301      	adds	r3, #1
 8011aa8:	9300      	str	r3, [sp, #0]
 8011aaa:	e240      	b.n	8011f2e <_dtoa_r+0x946>
 8011aac:	07f2      	lsls	r2, r6, #31
 8011aae:	d505      	bpl.n	8011abc <_dtoa_r+0x4d4>
 8011ab0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011ab4:	f7ee fdc8 	bl	8000648 <__aeabi_dmul>
 8011ab8:	3501      	adds	r5, #1
 8011aba:	2301      	movs	r3, #1
 8011abc:	1076      	asrs	r6, r6, #1
 8011abe:	3708      	adds	r7, #8
 8011ac0:	e777      	b.n	80119b2 <_dtoa_r+0x3ca>
 8011ac2:	2502      	movs	r5, #2
 8011ac4:	e779      	b.n	80119ba <_dtoa_r+0x3d2>
 8011ac6:	9f00      	ldr	r7, [sp, #0]
 8011ac8:	9e03      	ldr	r6, [sp, #12]
 8011aca:	e794      	b.n	80119f6 <_dtoa_r+0x40e>
 8011acc:	9901      	ldr	r1, [sp, #4]
 8011ace:	4b4c      	ldr	r3, [pc, #304]	; (8011c00 <_dtoa_r+0x618>)
 8011ad0:	4431      	add	r1, r6
 8011ad2:	910d      	str	r1, [sp, #52]	; 0x34
 8011ad4:	9908      	ldr	r1, [sp, #32]
 8011ad6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8011ada:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8011ade:	2900      	cmp	r1, #0
 8011ae0:	d043      	beq.n	8011b6a <_dtoa_r+0x582>
 8011ae2:	494d      	ldr	r1, [pc, #308]	; (8011c18 <_dtoa_r+0x630>)
 8011ae4:	2000      	movs	r0, #0
 8011ae6:	f7ee fed9 	bl	800089c <__aeabi_ddiv>
 8011aea:	4652      	mov	r2, sl
 8011aec:	465b      	mov	r3, fp
 8011aee:	f7ee fbf3 	bl	80002d8 <__aeabi_dsub>
 8011af2:	9d01      	ldr	r5, [sp, #4]
 8011af4:	4682      	mov	sl, r0
 8011af6:	468b      	mov	fp, r1
 8011af8:	4649      	mov	r1, r9
 8011afa:	4640      	mov	r0, r8
 8011afc:	f7ef f854 	bl	8000ba8 <__aeabi_d2iz>
 8011b00:	4606      	mov	r6, r0
 8011b02:	f7ee fd37 	bl	8000574 <__aeabi_i2d>
 8011b06:	4602      	mov	r2, r0
 8011b08:	460b      	mov	r3, r1
 8011b0a:	4640      	mov	r0, r8
 8011b0c:	4649      	mov	r1, r9
 8011b0e:	f7ee fbe3 	bl	80002d8 <__aeabi_dsub>
 8011b12:	3630      	adds	r6, #48	; 0x30
 8011b14:	f805 6b01 	strb.w	r6, [r5], #1
 8011b18:	4652      	mov	r2, sl
 8011b1a:	465b      	mov	r3, fp
 8011b1c:	4680      	mov	r8, r0
 8011b1e:	4689      	mov	r9, r1
 8011b20:	f7ef f804 	bl	8000b2c <__aeabi_dcmplt>
 8011b24:	2800      	cmp	r0, #0
 8011b26:	d163      	bne.n	8011bf0 <_dtoa_r+0x608>
 8011b28:	4642      	mov	r2, r8
 8011b2a:	464b      	mov	r3, r9
 8011b2c:	4936      	ldr	r1, [pc, #216]	; (8011c08 <_dtoa_r+0x620>)
 8011b2e:	2000      	movs	r0, #0
 8011b30:	f7ee fbd2 	bl	80002d8 <__aeabi_dsub>
 8011b34:	4652      	mov	r2, sl
 8011b36:	465b      	mov	r3, fp
 8011b38:	f7ee fff8 	bl	8000b2c <__aeabi_dcmplt>
 8011b3c:	2800      	cmp	r0, #0
 8011b3e:	f040 80b5 	bne.w	8011cac <_dtoa_r+0x6c4>
 8011b42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011b44:	429d      	cmp	r5, r3
 8011b46:	d081      	beq.n	8011a4c <_dtoa_r+0x464>
 8011b48:	4b30      	ldr	r3, [pc, #192]	; (8011c0c <_dtoa_r+0x624>)
 8011b4a:	2200      	movs	r2, #0
 8011b4c:	4650      	mov	r0, sl
 8011b4e:	4659      	mov	r1, fp
 8011b50:	f7ee fd7a 	bl	8000648 <__aeabi_dmul>
 8011b54:	4b2d      	ldr	r3, [pc, #180]	; (8011c0c <_dtoa_r+0x624>)
 8011b56:	4682      	mov	sl, r0
 8011b58:	468b      	mov	fp, r1
 8011b5a:	4640      	mov	r0, r8
 8011b5c:	4649      	mov	r1, r9
 8011b5e:	2200      	movs	r2, #0
 8011b60:	f7ee fd72 	bl	8000648 <__aeabi_dmul>
 8011b64:	4680      	mov	r8, r0
 8011b66:	4689      	mov	r9, r1
 8011b68:	e7c6      	b.n	8011af8 <_dtoa_r+0x510>
 8011b6a:	4650      	mov	r0, sl
 8011b6c:	4659      	mov	r1, fp
 8011b6e:	f7ee fd6b 	bl	8000648 <__aeabi_dmul>
 8011b72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011b74:	9d01      	ldr	r5, [sp, #4]
 8011b76:	930f      	str	r3, [sp, #60]	; 0x3c
 8011b78:	4682      	mov	sl, r0
 8011b7a:	468b      	mov	fp, r1
 8011b7c:	4649      	mov	r1, r9
 8011b7e:	4640      	mov	r0, r8
 8011b80:	f7ef f812 	bl	8000ba8 <__aeabi_d2iz>
 8011b84:	4606      	mov	r6, r0
 8011b86:	f7ee fcf5 	bl	8000574 <__aeabi_i2d>
 8011b8a:	3630      	adds	r6, #48	; 0x30
 8011b8c:	4602      	mov	r2, r0
 8011b8e:	460b      	mov	r3, r1
 8011b90:	4640      	mov	r0, r8
 8011b92:	4649      	mov	r1, r9
 8011b94:	f7ee fba0 	bl	80002d8 <__aeabi_dsub>
 8011b98:	f805 6b01 	strb.w	r6, [r5], #1
 8011b9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011b9e:	429d      	cmp	r5, r3
 8011ba0:	4680      	mov	r8, r0
 8011ba2:	4689      	mov	r9, r1
 8011ba4:	f04f 0200 	mov.w	r2, #0
 8011ba8:	d124      	bne.n	8011bf4 <_dtoa_r+0x60c>
 8011baa:	4b1b      	ldr	r3, [pc, #108]	; (8011c18 <_dtoa_r+0x630>)
 8011bac:	4650      	mov	r0, sl
 8011bae:	4659      	mov	r1, fp
 8011bb0:	f7ee fb94 	bl	80002dc <__adddf3>
 8011bb4:	4602      	mov	r2, r0
 8011bb6:	460b      	mov	r3, r1
 8011bb8:	4640      	mov	r0, r8
 8011bba:	4649      	mov	r1, r9
 8011bbc:	f7ee ffd4 	bl	8000b68 <__aeabi_dcmpgt>
 8011bc0:	2800      	cmp	r0, #0
 8011bc2:	d173      	bne.n	8011cac <_dtoa_r+0x6c4>
 8011bc4:	4652      	mov	r2, sl
 8011bc6:	465b      	mov	r3, fp
 8011bc8:	4913      	ldr	r1, [pc, #76]	; (8011c18 <_dtoa_r+0x630>)
 8011bca:	2000      	movs	r0, #0
 8011bcc:	f7ee fb84 	bl	80002d8 <__aeabi_dsub>
 8011bd0:	4602      	mov	r2, r0
 8011bd2:	460b      	mov	r3, r1
 8011bd4:	4640      	mov	r0, r8
 8011bd6:	4649      	mov	r1, r9
 8011bd8:	f7ee ffa8 	bl	8000b2c <__aeabi_dcmplt>
 8011bdc:	2800      	cmp	r0, #0
 8011bde:	f43f af35 	beq.w	8011a4c <_dtoa_r+0x464>
 8011be2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8011be4:	1e6b      	subs	r3, r5, #1
 8011be6:	930f      	str	r3, [sp, #60]	; 0x3c
 8011be8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8011bec:	2b30      	cmp	r3, #48	; 0x30
 8011bee:	d0f8      	beq.n	8011be2 <_dtoa_r+0x5fa>
 8011bf0:	9700      	str	r7, [sp, #0]
 8011bf2:	e049      	b.n	8011c88 <_dtoa_r+0x6a0>
 8011bf4:	4b05      	ldr	r3, [pc, #20]	; (8011c0c <_dtoa_r+0x624>)
 8011bf6:	f7ee fd27 	bl	8000648 <__aeabi_dmul>
 8011bfa:	4680      	mov	r8, r0
 8011bfc:	4689      	mov	r9, r1
 8011bfe:	e7bd      	b.n	8011b7c <_dtoa_r+0x594>
 8011c00:	08014f58 	.word	0x08014f58
 8011c04:	08014f30 	.word	0x08014f30
 8011c08:	3ff00000 	.word	0x3ff00000
 8011c0c:	40240000 	.word	0x40240000
 8011c10:	401c0000 	.word	0x401c0000
 8011c14:	40140000 	.word	0x40140000
 8011c18:	3fe00000 	.word	0x3fe00000
 8011c1c:	9d01      	ldr	r5, [sp, #4]
 8011c1e:	4656      	mov	r6, sl
 8011c20:	465f      	mov	r7, fp
 8011c22:	4642      	mov	r2, r8
 8011c24:	464b      	mov	r3, r9
 8011c26:	4630      	mov	r0, r6
 8011c28:	4639      	mov	r1, r7
 8011c2a:	f7ee fe37 	bl	800089c <__aeabi_ddiv>
 8011c2e:	f7ee ffbb 	bl	8000ba8 <__aeabi_d2iz>
 8011c32:	4682      	mov	sl, r0
 8011c34:	f7ee fc9e 	bl	8000574 <__aeabi_i2d>
 8011c38:	4642      	mov	r2, r8
 8011c3a:	464b      	mov	r3, r9
 8011c3c:	f7ee fd04 	bl	8000648 <__aeabi_dmul>
 8011c40:	4602      	mov	r2, r0
 8011c42:	460b      	mov	r3, r1
 8011c44:	4630      	mov	r0, r6
 8011c46:	4639      	mov	r1, r7
 8011c48:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8011c4c:	f7ee fb44 	bl	80002d8 <__aeabi_dsub>
 8011c50:	f805 6b01 	strb.w	r6, [r5], #1
 8011c54:	9e01      	ldr	r6, [sp, #4]
 8011c56:	9f03      	ldr	r7, [sp, #12]
 8011c58:	1bae      	subs	r6, r5, r6
 8011c5a:	42b7      	cmp	r7, r6
 8011c5c:	4602      	mov	r2, r0
 8011c5e:	460b      	mov	r3, r1
 8011c60:	d135      	bne.n	8011cce <_dtoa_r+0x6e6>
 8011c62:	f7ee fb3b 	bl	80002dc <__adddf3>
 8011c66:	4642      	mov	r2, r8
 8011c68:	464b      	mov	r3, r9
 8011c6a:	4606      	mov	r6, r0
 8011c6c:	460f      	mov	r7, r1
 8011c6e:	f7ee ff7b 	bl	8000b68 <__aeabi_dcmpgt>
 8011c72:	b9d0      	cbnz	r0, 8011caa <_dtoa_r+0x6c2>
 8011c74:	4642      	mov	r2, r8
 8011c76:	464b      	mov	r3, r9
 8011c78:	4630      	mov	r0, r6
 8011c7a:	4639      	mov	r1, r7
 8011c7c:	f7ee ff4c 	bl	8000b18 <__aeabi_dcmpeq>
 8011c80:	b110      	cbz	r0, 8011c88 <_dtoa_r+0x6a0>
 8011c82:	f01a 0f01 	tst.w	sl, #1
 8011c86:	d110      	bne.n	8011caa <_dtoa_r+0x6c2>
 8011c88:	4620      	mov	r0, r4
 8011c8a:	ee18 1a10 	vmov	r1, s16
 8011c8e:	f000 fe6b 	bl	8012968 <_Bfree>
 8011c92:	2300      	movs	r3, #0
 8011c94:	9800      	ldr	r0, [sp, #0]
 8011c96:	702b      	strb	r3, [r5, #0]
 8011c98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011c9a:	3001      	adds	r0, #1
 8011c9c:	6018      	str	r0, [r3, #0]
 8011c9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011ca0:	2b00      	cmp	r3, #0
 8011ca2:	f43f acf1 	beq.w	8011688 <_dtoa_r+0xa0>
 8011ca6:	601d      	str	r5, [r3, #0]
 8011ca8:	e4ee      	b.n	8011688 <_dtoa_r+0xa0>
 8011caa:	9f00      	ldr	r7, [sp, #0]
 8011cac:	462b      	mov	r3, r5
 8011cae:	461d      	mov	r5, r3
 8011cb0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011cb4:	2a39      	cmp	r2, #57	; 0x39
 8011cb6:	d106      	bne.n	8011cc6 <_dtoa_r+0x6de>
 8011cb8:	9a01      	ldr	r2, [sp, #4]
 8011cba:	429a      	cmp	r2, r3
 8011cbc:	d1f7      	bne.n	8011cae <_dtoa_r+0x6c6>
 8011cbe:	9901      	ldr	r1, [sp, #4]
 8011cc0:	2230      	movs	r2, #48	; 0x30
 8011cc2:	3701      	adds	r7, #1
 8011cc4:	700a      	strb	r2, [r1, #0]
 8011cc6:	781a      	ldrb	r2, [r3, #0]
 8011cc8:	3201      	adds	r2, #1
 8011cca:	701a      	strb	r2, [r3, #0]
 8011ccc:	e790      	b.n	8011bf0 <_dtoa_r+0x608>
 8011cce:	4ba6      	ldr	r3, [pc, #664]	; (8011f68 <_dtoa_r+0x980>)
 8011cd0:	2200      	movs	r2, #0
 8011cd2:	f7ee fcb9 	bl	8000648 <__aeabi_dmul>
 8011cd6:	2200      	movs	r2, #0
 8011cd8:	2300      	movs	r3, #0
 8011cda:	4606      	mov	r6, r0
 8011cdc:	460f      	mov	r7, r1
 8011cde:	f7ee ff1b 	bl	8000b18 <__aeabi_dcmpeq>
 8011ce2:	2800      	cmp	r0, #0
 8011ce4:	d09d      	beq.n	8011c22 <_dtoa_r+0x63a>
 8011ce6:	e7cf      	b.n	8011c88 <_dtoa_r+0x6a0>
 8011ce8:	9a08      	ldr	r2, [sp, #32]
 8011cea:	2a00      	cmp	r2, #0
 8011cec:	f000 80d7 	beq.w	8011e9e <_dtoa_r+0x8b6>
 8011cf0:	9a06      	ldr	r2, [sp, #24]
 8011cf2:	2a01      	cmp	r2, #1
 8011cf4:	f300 80ba 	bgt.w	8011e6c <_dtoa_r+0x884>
 8011cf8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011cfa:	2a00      	cmp	r2, #0
 8011cfc:	f000 80b2 	beq.w	8011e64 <_dtoa_r+0x87c>
 8011d00:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8011d04:	9e07      	ldr	r6, [sp, #28]
 8011d06:	9d04      	ldr	r5, [sp, #16]
 8011d08:	9a04      	ldr	r2, [sp, #16]
 8011d0a:	441a      	add	r2, r3
 8011d0c:	9204      	str	r2, [sp, #16]
 8011d0e:	9a05      	ldr	r2, [sp, #20]
 8011d10:	2101      	movs	r1, #1
 8011d12:	441a      	add	r2, r3
 8011d14:	4620      	mov	r0, r4
 8011d16:	9205      	str	r2, [sp, #20]
 8011d18:	f000 ff28 	bl	8012b6c <__i2b>
 8011d1c:	4607      	mov	r7, r0
 8011d1e:	2d00      	cmp	r5, #0
 8011d20:	dd0c      	ble.n	8011d3c <_dtoa_r+0x754>
 8011d22:	9b05      	ldr	r3, [sp, #20]
 8011d24:	2b00      	cmp	r3, #0
 8011d26:	dd09      	ble.n	8011d3c <_dtoa_r+0x754>
 8011d28:	42ab      	cmp	r3, r5
 8011d2a:	9a04      	ldr	r2, [sp, #16]
 8011d2c:	bfa8      	it	ge
 8011d2e:	462b      	movge	r3, r5
 8011d30:	1ad2      	subs	r2, r2, r3
 8011d32:	9204      	str	r2, [sp, #16]
 8011d34:	9a05      	ldr	r2, [sp, #20]
 8011d36:	1aed      	subs	r5, r5, r3
 8011d38:	1ad3      	subs	r3, r2, r3
 8011d3a:	9305      	str	r3, [sp, #20]
 8011d3c:	9b07      	ldr	r3, [sp, #28]
 8011d3e:	b31b      	cbz	r3, 8011d88 <_dtoa_r+0x7a0>
 8011d40:	9b08      	ldr	r3, [sp, #32]
 8011d42:	2b00      	cmp	r3, #0
 8011d44:	f000 80af 	beq.w	8011ea6 <_dtoa_r+0x8be>
 8011d48:	2e00      	cmp	r6, #0
 8011d4a:	dd13      	ble.n	8011d74 <_dtoa_r+0x78c>
 8011d4c:	4639      	mov	r1, r7
 8011d4e:	4632      	mov	r2, r6
 8011d50:	4620      	mov	r0, r4
 8011d52:	f000 ffcb 	bl	8012cec <__pow5mult>
 8011d56:	ee18 2a10 	vmov	r2, s16
 8011d5a:	4601      	mov	r1, r0
 8011d5c:	4607      	mov	r7, r0
 8011d5e:	4620      	mov	r0, r4
 8011d60:	f000 ff1a 	bl	8012b98 <__multiply>
 8011d64:	ee18 1a10 	vmov	r1, s16
 8011d68:	4680      	mov	r8, r0
 8011d6a:	4620      	mov	r0, r4
 8011d6c:	f000 fdfc 	bl	8012968 <_Bfree>
 8011d70:	ee08 8a10 	vmov	s16, r8
 8011d74:	9b07      	ldr	r3, [sp, #28]
 8011d76:	1b9a      	subs	r2, r3, r6
 8011d78:	d006      	beq.n	8011d88 <_dtoa_r+0x7a0>
 8011d7a:	ee18 1a10 	vmov	r1, s16
 8011d7e:	4620      	mov	r0, r4
 8011d80:	f000 ffb4 	bl	8012cec <__pow5mult>
 8011d84:	ee08 0a10 	vmov	s16, r0
 8011d88:	2101      	movs	r1, #1
 8011d8a:	4620      	mov	r0, r4
 8011d8c:	f000 feee 	bl	8012b6c <__i2b>
 8011d90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011d92:	2b00      	cmp	r3, #0
 8011d94:	4606      	mov	r6, r0
 8011d96:	f340 8088 	ble.w	8011eaa <_dtoa_r+0x8c2>
 8011d9a:	461a      	mov	r2, r3
 8011d9c:	4601      	mov	r1, r0
 8011d9e:	4620      	mov	r0, r4
 8011da0:	f000 ffa4 	bl	8012cec <__pow5mult>
 8011da4:	9b06      	ldr	r3, [sp, #24]
 8011da6:	2b01      	cmp	r3, #1
 8011da8:	4606      	mov	r6, r0
 8011daa:	f340 8081 	ble.w	8011eb0 <_dtoa_r+0x8c8>
 8011dae:	f04f 0800 	mov.w	r8, #0
 8011db2:	6933      	ldr	r3, [r6, #16]
 8011db4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8011db8:	6918      	ldr	r0, [r3, #16]
 8011dba:	f000 fe87 	bl	8012acc <__hi0bits>
 8011dbe:	f1c0 0020 	rsb	r0, r0, #32
 8011dc2:	9b05      	ldr	r3, [sp, #20]
 8011dc4:	4418      	add	r0, r3
 8011dc6:	f010 001f 	ands.w	r0, r0, #31
 8011dca:	f000 8092 	beq.w	8011ef2 <_dtoa_r+0x90a>
 8011dce:	f1c0 0320 	rsb	r3, r0, #32
 8011dd2:	2b04      	cmp	r3, #4
 8011dd4:	f340 808a 	ble.w	8011eec <_dtoa_r+0x904>
 8011dd8:	f1c0 001c 	rsb	r0, r0, #28
 8011ddc:	9b04      	ldr	r3, [sp, #16]
 8011dde:	4403      	add	r3, r0
 8011de0:	9304      	str	r3, [sp, #16]
 8011de2:	9b05      	ldr	r3, [sp, #20]
 8011de4:	4403      	add	r3, r0
 8011de6:	4405      	add	r5, r0
 8011de8:	9305      	str	r3, [sp, #20]
 8011dea:	9b04      	ldr	r3, [sp, #16]
 8011dec:	2b00      	cmp	r3, #0
 8011dee:	dd07      	ble.n	8011e00 <_dtoa_r+0x818>
 8011df0:	ee18 1a10 	vmov	r1, s16
 8011df4:	461a      	mov	r2, r3
 8011df6:	4620      	mov	r0, r4
 8011df8:	f000 ffd2 	bl	8012da0 <__lshift>
 8011dfc:	ee08 0a10 	vmov	s16, r0
 8011e00:	9b05      	ldr	r3, [sp, #20]
 8011e02:	2b00      	cmp	r3, #0
 8011e04:	dd05      	ble.n	8011e12 <_dtoa_r+0x82a>
 8011e06:	4631      	mov	r1, r6
 8011e08:	461a      	mov	r2, r3
 8011e0a:	4620      	mov	r0, r4
 8011e0c:	f000 ffc8 	bl	8012da0 <__lshift>
 8011e10:	4606      	mov	r6, r0
 8011e12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011e14:	2b00      	cmp	r3, #0
 8011e16:	d06e      	beq.n	8011ef6 <_dtoa_r+0x90e>
 8011e18:	ee18 0a10 	vmov	r0, s16
 8011e1c:	4631      	mov	r1, r6
 8011e1e:	f001 f82f 	bl	8012e80 <__mcmp>
 8011e22:	2800      	cmp	r0, #0
 8011e24:	da67      	bge.n	8011ef6 <_dtoa_r+0x90e>
 8011e26:	9b00      	ldr	r3, [sp, #0]
 8011e28:	3b01      	subs	r3, #1
 8011e2a:	ee18 1a10 	vmov	r1, s16
 8011e2e:	9300      	str	r3, [sp, #0]
 8011e30:	220a      	movs	r2, #10
 8011e32:	2300      	movs	r3, #0
 8011e34:	4620      	mov	r0, r4
 8011e36:	f000 fdb9 	bl	80129ac <__multadd>
 8011e3a:	9b08      	ldr	r3, [sp, #32]
 8011e3c:	ee08 0a10 	vmov	s16, r0
 8011e40:	2b00      	cmp	r3, #0
 8011e42:	f000 81b1 	beq.w	80121a8 <_dtoa_r+0xbc0>
 8011e46:	2300      	movs	r3, #0
 8011e48:	4639      	mov	r1, r7
 8011e4a:	220a      	movs	r2, #10
 8011e4c:	4620      	mov	r0, r4
 8011e4e:	f000 fdad 	bl	80129ac <__multadd>
 8011e52:	9b02      	ldr	r3, [sp, #8]
 8011e54:	2b00      	cmp	r3, #0
 8011e56:	4607      	mov	r7, r0
 8011e58:	f300 808e 	bgt.w	8011f78 <_dtoa_r+0x990>
 8011e5c:	9b06      	ldr	r3, [sp, #24]
 8011e5e:	2b02      	cmp	r3, #2
 8011e60:	dc51      	bgt.n	8011f06 <_dtoa_r+0x91e>
 8011e62:	e089      	b.n	8011f78 <_dtoa_r+0x990>
 8011e64:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011e66:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8011e6a:	e74b      	b.n	8011d04 <_dtoa_r+0x71c>
 8011e6c:	9b03      	ldr	r3, [sp, #12]
 8011e6e:	1e5e      	subs	r6, r3, #1
 8011e70:	9b07      	ldr	r3, [sp, #28]
 8011e72:	42b3      	cmp	r3, r6
 8011e74:	bfbf      	itttt	lt
 8011e76:	9b07      	ldrlt	r3, [sp, #28]
 8011e78:	9607      	strlt	r6, [sp, #28]
 8011e7a:	1af2      	sublt	r2, r6, r3
 8011e7c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8011e7e:	bfb6      	itet	lt
 8011e80:	189b      	addlt	r3, r3, r2
 8011e82:	1b9e      	subge	r6, r3, r6
 8011e84:	930a      	strlt	r3, [sp, #40]	; 0x28
 8011e86:	9b03      	ldr	r3, [sp, #12]
 8011e88:	bfb8      	it	lt
 8011e8a:	2600      	movlt	r6, #0
 8011e8c:	2b00      	cmp	r3, #0
 8011e8e:	bfb7      	itett	lt
 8011e90:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8011e94:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8011e98:	1a9d      	sublt	r5, r3, r2
 8011e9a:	2300      	movlt	r3, #0
 8011e9c:	e734      	b.n	8011d08 <_dtoa_r+0x720>
 8011e9e:	9e07      	ldr	r6, [sp, #28]
 8011ea0:	9d04      	ldr	r5, [sp, #16]
 8011ea2:	9f08      	ldr	r7, [sp, #32]
 8011ea4:	e73b      	b.n	8011d1e <_dtoa_r+0x736>
 8011ea6:	9a07      	ldr	r2, [sp, #28]
 8011ea8:	e767      	b.n	8011d7a <_dtoa_r+0x792>
 8011eaa:	9b06      	ldr	r3, [sp, #24]
 8011eac:	2b01      	cmp	r3, #1
 8011eae:	dc18      	bgt.n	8011ee2 <_dtoa_r+0x8fa>
 8011eb0:	f1ba 0f00 	cmp.w	sl, #0
 8011eb4:	d115      	bne.n	8011ee2 <_dtoa_r+0x8fa>
 8011eb6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011eba:	b993      	cbnz	r3, 8011ee2 <_dtoa_r+0x8fa>
 8011ebc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011ec0:	0d1b      	lsrs	r3, r3, #20
 8011ec2:	051b      	lsls	r3, r3, #20
 8011ec4:	b183      	cbz	r3, 8011ee8 <_dtoa_r+0x900>
 8011ec6:	9b04      	ldr	r3, [sp, #16]
 8011ec8:	3301      	adds	r3, #1
 8011eca:	9304      	str	r3, [sp, #16]
 8011ecc:	9b05      	ldr	r3, [sp, #20]
 8011ece:	3301      	adds	r3, #1
 8011ed0:	9305      	str	r3, [sp, #20]
 8011ed2:	f04f 0801 	mov.w	r8, #1
 8011ed6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011ed8:	2b00      	cmp	r3, #0
 8011eda:	f47f af6a 	bne.w	8011db2 <_dtoa_r+0x7ca>
 8011ede:	2001      	movs	r0, #1
 8011ee0:	e76f      	b.n	8011dc2 <_dtoa_r+0x7da>
 8011ee2:	f04f 0800 	mov.w	r8, #0
 8011ee6:	e7f6      	b.n	8011ed6 <_dtoa_r+0x8ee>
 8011ee8:	4698      	mov	r8, r3
 8011eea:	e7f4      	b.n	8011ed6 <_dtoa_r+0x8ee>
 8011eec:	f43f af7d 	beq.w	8011dea <_dtoa_r+0x802>
 8011ef0:	4618      	mov	r0, r3
 8011ef2:	301c      	adds	r0, #28
 8011ef4:	e772      	b.n	8011ddc <_dtoa_r+0x7f4>
 8011ef6:	9b03      	ldr	r3, [sp, #12]
 8011ef8:	2b00      	cmp	r3, #0
 8011efa:	dc37      	bgt.n	8011f6c <_dtoa_r+0x984>
 8011efc:	9b06      	ldr	r3, [sp, #24]
 8011efe:	2b02      	cmp	r3, #2
 8011f00:	dd34      	ble.n	8011f6c <_dtoa_r+0x984>
 8011f02:	9b03      	ldr	r3, [sp, #12]
 8011f04:	9302      	str	r3, [sp, #8]
 8011f06:	9b02      	ldr	r3, [sp, #8]
 8011f08:	b96b      	cbnz	r3, 8011f26 <_dtoa_r+0x93e>
 8011f0a:	4631      	mov	r1, r6
 8011f0c:	2205      	movs	r2, #5
 8011f0e:	4620      	mov	r0, r4
 8011f10:	f000 fd4c 	bl	80129ac <__multadd>
 8011f14:	4601      	mov	r1, r0
 8011f16:	4606      	mov	r6, r0
 8011f18:	ee18 0a10 	vmov	r0, s16
 8011f1c:	f000 ffb0 	bl	8012e80 <__mcmp>
 8011f20:	2800      	cmp	r0, #0
 8011f22:	f73f adbb 	bgt.w	8011a9c <_dtoa_r+0x4b4>
 8011f26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011f28:	9d01      	ldr	r5, [sp, #4]
 8011f2a:	43db      	mvns	r3, r3
 8011f2c:	9300      	str	r3, [sp, #0]
 8011f2e:	f04f 0800 	mov.w	r8, #0
 8011f32:	4631      	mov	r1, r6
 8011f34:	4620      	mov	r0, r4
 8011f36:	f000 fd17 	bl	8012968 <_Bfree>
 8011f3a:	2f00      	cmp	r7, #0
 8011f3c:	f43f aea4 	beq.w	8011c88 <_dtoa_r+0x6a0>
 8011f40:	f1b8 0f00 	cmp.w	r8, #0
 8011f44:	d005      	beq.n	8011f52 <_dtoa_r+0x96a>
 8011f46:	45b8      	cmp	r8, r7
 8011f48:	d003      	beq.n	8011f52 <_dtoa_r+0x96a>
 8011f4a:	4641      	mov	r1, r8
 8011f4c:	4620      	mov	r0, r4
 8011f4e:	f000 fd0b 	bl	8012968 <_Bfree>
 8011f52:	4639      	mov	r1, r7
 8011f54:	4620      	mov	r0, r4
 8011f56:	f000 fd07 	bl	8012968 <_Bfree>
 8011f5a:	e695      	b.n	8011c88 <_dtoa_r+0x6a0>
 8011f5c:	2600      	movs	r6, #0
 8011f5e:	4637      	mov	r7, r6
 8011f60:	e7e1      	b.n	8011f26 <_dtoa_r+0x93e>
 8011f62:	9700      	str	r7, [sp, #0]
 8011f64:	4637      	mov	r7, r6
 8011f66:	e599      	b.n	8011a9c <_dtoa_r+0x4b4>
 8011f68:	40240000 	.word	0x40240000
 8011f6c:	9b08      	ldr	r3, [sp, #32]
 8011f6e:	2b00      	cmp	r3, #0
 8011f70:	f000 80ca 	beq.w	8012108 <_dtoa_r+0xb20>
 8011f74:	9b03      	ldr	r3, [sp, #12]
 8011f76:	9302      	str	r3, [sp, #8]
 8011f78:	2d00      	cmp	r5, #0
 8011f7a:	dd05      	ble.n	8011f88 <_dtoa_r+0x9a0>
 8011f7c:	4639      	mov	r1, r7
 8011f7e:	462a      	mov	r2, r5
 8011f80:	4620      	mov	r0, r4
 8011f82:	f000 ff0d 	bl	8012da0 <__lshift>
 8011f86:	4607      	mov	r7, r0
 8011f88:	f1b8 0f00 	cmp.w	r8, #0
 8011f8c:	d05b      	beq.n	8012046 <_dtoa_r+0xa5e>
 8011f8e:	6879      	ldr	r1, [r7, #4]
 8011f90:	4620      	mov	r0, r4
 8011f92:	f000 fca9 	bl	80128e8 <_Balloc>
 8011f96:	4605      	mov	r5, r0
 8011f98:	b928      	cbnz	r0, 8011fa6 <_dtoa_r+0x9be>
 8011f9a:	4b87      	ldr	r3, [pc, #540]	; (80121b8 <_dtoa_r+0xbd0>)
 8011f9c:	4602      	mov	r2, r0
 8011f9e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8011fa2:	f7ff bb3b 	b.w	801161c <_dtoa_r+0x34>
 8011fa6:	693a      	ldr	r2, [r7, #16]
 8011fa8:	3202      	adds	r2, #2
 8011faa:	0092      	lsls	r2, r2, #2
 8011fac:	f107 010c 	add.w	r1, r7, #12
 8011fb0:	300c      	adds	r0, #12
 8011fb2:	f7fd fc3b 	bl	800f82c <memcpy>
 8011fb6:	2201      	movs	r2, #1
 8011fb8:	4629      	mov	r1, r5
 8011fba:	4620      	mov	r0, r4
 8011fbc:	f000 fef0 	bl	8012da0 <__lshift>
 8011fc0:	9b01      	ldr	r3, [sp, #4]
 8011fc2:	f103 0901 	add.w	r9, r3, #1
 8011fc6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8011fca:	4413      	add	r3, r2
 8011fcc:	9305      	str	r3, [sp, #20]
 8011fce:	f00a 0301 	and.w	r3, sl, #1
 8011fd2:	46b8      	mov	r8, r7
 8011fd4:	9304      	str	r3, [sp, #16]
 8011fd6:	4607      	mov	r7, r0
 8011fd8:	4631      	mov	r1, r6
 8011fda:	ee18 0a10 	vmov	r0, s16
 8011fde:	f7ff fa77 	bl	80114d0 <quorem>
 8011fe2:	4641      	mov	r1, r8
 8011fe4:	9002      	str	r0, [sp, #8]
 8011fe6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8011fea:	ee18 0a10 	vmov	r0, s16
 8011fee:	f000 ff47 	bl	8012e80 <__mcmp>
 8011ff2:	463a      	mov	r2, r7
 8011ff4:	9003      	str	r0, [sp, #12]
 8011ff6:	4631      	mov	r1, r6
 8011ff8:	4620      	mov	r0, r4
 8011ffa:	f000 ff5d 	bl	8012eb8 <__mdiff>
 8011ffe:	68c2      	ldr	r2, [r0, #12]
 8012000:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8012004:	4605      	mov	r5, r0
 8012006:	bb02      	cbnz	r2, 801204a <_dtoa_r+0xa62>
 8012008:	4601      	mov	r1, r0
 801200a:	ee18 0a10 	vmov	r0, s16
 801200e:	f000 ff37 	bl	8012e80 <__mcmp>
 8012012:	4602      	mov	r2, r0
 8012014:	4629      	mov	r1, r5
 8012016:	4620      	mov	r0, r4
 8012018:	9207      	str	r2, [sp, #28]
 801201a:	f000 fca5 	bl	8012968 <_Bfree>
 801201e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8012022:	ea43 0102 	orr.w	r1, r3, r2
 8012026:	9b04      	ldr	r3, [sp, #16]
 8012028:	430b      	orrs	r3, r1
 801202a:	464d      	mov	r5, r9
 801202c:	d10f      	bne.n	801204e <_dtoa_r+0xa66>
 801202e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8012032:	d02a      	beq.n	801208a <_dtoa_r+0xaa2>
 8012034:	9b03      	ldr	r3, [sp, #12]
 8012036:	2b00      	cmp	r3, #0
 8012038:	dd02      	ble.n	8012040 <_dtoa_r+0xa58>
 801203a:	9b02      	ldr	r3, [sp, #8]
 801203c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8012040:	f88b a000 	strb.w	sl, [fp]
 8012044:	e775      	b.n	8011f32 <_dtoa_r+0x94a>
 8012046:	4638      	mov	r0, r7
 8012048:	e7ba      	b.n	8011fc0 <_dtoa_r+0x9d8>
 801204a:	2201      	movs	r2, #1
 801204c:	e7e2      	b.n	8012014 <_dtoa_r+0xa2c>
 801204e:	9b03      	ldr	r3, [sp, #12]
 8012050:	2b00      	cmp	r3, #0
 8012052:	db04      	blt.n	801205e <_dtoa_r+0xa76>
 8012054:	9906      	ldr	r1, [sp, #24]
 8012056:	430b      	orrs	r3, r1
 8012058:	9904      	ldr	r1, [sp, #16]
 801205a:	430b      	orrs	r3, r1
 801205c:	d122      	bne.n	80120a4 <_dtoa_r+0xabc>
 801205e:	2a00      	cmp	r2, #0
 8012060:	ddee      	ble.n	8012040 <_dtoa_r+0xa58>
 8012062:	ee18 1a10 	vmov	r1, s16
 8012066:	2201      	movs	r2, #1
 8012068:	4620      	mov	r0, r4
 801206a:	f000 fe99 	bl	8012da0 <__lshift>
 801206e:	4631      	mov	r1, r6
 8012070:	ee08 0a10 	vmov	s16, r0
 8012074:	f000 ff04 	bl	8012e80 <__mcmp>
 8012078:	2800      	cmp	r0, #0
 801207a:	dc03      	bgt.n	8012084 <_dtoa_r+0xa9c>
 801207c:	d1e0      	bne.n	8012040 <_dtoa_r+0xa58>
 801207e:	f01a 0f01 	tst.w	sl, #1
 8012082:	d0dd      	beq.n	8012040 <_dtoa_r+0xa58>
 8012084:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8012088:	d1d7      	bne.n	801203a <_dtoa_r+0xa52>
 801208a:	2339      	movs	r3, #57	; 0x39
 801208c:	f88b 3000 	strb.w	r3, [fp]
 8012090:	462b      	mov	r3, r5
 8012092:	461d      	mov	r5, r3
 8012094:	3b01      	subs	r3, #1
 8012096:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801209a:	2a39      	cmp	r2, #57	; 0x39
 801209c:	d071      	beq.n	8012182 <_dtoa_r+0xb9a>
 801209e:	3201      	adds	r2, #1
 80120a0:	701a      	strb	r2, [r3, #0]
 80120a2:	e746      	b.n	8011f32 <_dtoa_r+0x94a>
 80120a4:	2a00      	cmp	r2, #0
 80120a6:	dd07      	ble.n	80120b8 <_dtoa_r+0xad0>
 80120a8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80120ac:	d0ed      	beq.n	801208a <_dtoa_r+0xaa2>
 80120ae:	f10a 0301 	add.w	r3, sl, #1
 80120b2:	f88b 3000 	strb.w	r3, [fp]
 80120b6:	e73c      	b.n	8011f32 <_dtoa_r+0x94a>
 80120b8:	9b05      	ldr	r3, [sp, #20]
 80120ba:	f809 ac01 	strb.w	sl, [r9, #-1]
 80120be:	4599      	cmp	r9, r3
 80120c0:	d047      	beq.n	8012152 <_dtoa_r+0xb6a>
 80120c2:	ee18 1a10 	vmov	r1, s16
 80120c6:	2300      	movs	r3, #0
 80120c8:	220a      	movs	r2, #10
 80120ca:	4620      	mov	r0, r4
 80120cc:	f000 fc6e 	bl	80129ac <__multadd>
 80120d0:	45b8      	cmp	r8, r7
 80120d2:	ee08 0a10 	vmov	s16, r0
 80120d6:	f04f 0300 	mov.w	r3, #0
 80120da:	f04f 020a 	mov.w	r2, #10
 80120de:	4641      	mov	r1, r8
 80120e0:	4620      	mov	r0, r4
 80120e2:	d106      	bne.n	80120f2 <_dtoa_r+0xb0a>
 80120e4:	f000 fc62 	bl	80129ac <__multadd>
 80120e8:	4680      	mov	r8, r0
 80120ea:	4607      	mov	r7, r0
 80120ec:	f109 0901 	add.w	r9, r9, #1
 80120f0:	e772      	b.n	8011fd8 <_dtoa_r+0x9f0>
 80120f2:	f000 fc5b 	bl	80129ac <__multadd>
 80120f6:	4639      	mov	r1, r7
 80120f8:	4680      	mov	r8, r0
 80120fa:	2300      	movs	r3, #0
 80120fc:	220a      	movs	r2, #10
 80120fe:	4620      	mov	r0, r4
 8012100:	f000 fc54 	bl	80129ac <__multadd>
 8012104:	4607      	mov	r7, r0
 8012106:	e7f1      	b.n	80120ec <_dtoa_r+0xb04>
 8012108:	9b03      	ldr	r3, [sp, #12]
 801210a:	9302      	str	r3, [sp, #8]
 801210c:	9d01      	ldr	r5, [sp, #4]
 801210e:	ee18 0a10 	vmov	r0, s16
 8012112:	4631      	mov	r1, r6
 8012114:	f7ff f9dc 	bl	80114d0 <quorem>
 8012118:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801211c:	9b01      	ldr	r3, [sp, #4]
 801211e:	f805 ab01 	strb.w	sl, [r5], #1
 8012122:	1aea      	subs	r2, r5, r3
 8012124:	9b02      	ldr	r3, [sp, #8]
 8012126:	4293      	cmp	r3, r2
 8012128:	dd09      	ble.n	801213e <_dtoa_r+0xb56>
 801212a:	ee18 1a10 	vmov	r1, s16
 801212e:	2300      	movs	r3, #0
 8012130:	220a      	movs	r2, #10
 8012132:	4620      	mov	r0, r4
 8012134:	f000 fc3a 	bl	80129ac <__multadd>
 8012138:	ee08 0a10 	vmov	s16, r0
 801213c:	e7e7      	b.n	801210e <_dtoa_r+0xb26>
 801213e:	9b02      	ldr	r3, [sp, #8]
 8012140:	2b00      	cmp	r3, #0
 8012142:	bfc8      	it	gt
 8012144:	461d      	movgt	r5, r3
 8012146:	9b01      	ldr	r3, [sp, #4]
 8012148:	bfd8      	it	le
 801214a:	2501      	movle	r5, #1
 801214c:	441d      	add	r5, r3
 801214e:	f04f 0800 	mov.w	r8, #0
 8012152:	ee18 1a10 	vmov	r1, s16
 8012156:	2201      	movs	r2, #1
 8012158:	4620      	mov	r0, r4
 801215a:	f000 fe21 	bl	8012da0 <__lshift>
 801215e:	4631      	mov	r1, r6
 8012160:	ee08 0a10 	vmov	s16, r0
 8012164:	f000 fe8c 	bl	8012e80 <__mcmp>
 8012168:	2800      	cmp	r0, #0
 801216a:	dc91      	bgt.n	8012090 <_dtoa_r+0xaa8>
 801216c:	d102      	bne.n	8012174 <_dtoa_r+0xb8c>
 801216e:	f01a 0f01 	tst.w	sl, #1
 8012172:	d18d      	bne.n	8012090 <_dtoa_r+0xaa8>
 8012174:	462b      	mov	r3, r5
 8012176:	461d      	mov	r5, r3
 8012178:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801217c:	2a30      	cmp	r2, #48	; 0x30
 801217e:	d0fa      	beq.n	8012176 <_dtoa_r+0xb8e>
 8012180:	e6d7      	b.n	8011f32 <_dtoa_r+0x94a>
 8012182:	9a01      	ldr	r2, [sp, #4]
 8012184:	429a      	cmp	r2, r3
 8012186:	d184      	bne.n	8012092 <_dtoa_r+0xaaa>
 8012188:	9b00      	ldr	r3, [sp, #0]
 801218a:	3301      	adds	r3, #1
 801218c:	9300      	str	r3, [sp, #0]
 801218e:	2331      	movs	r3, #49	; 0x31
 8012190:	7013      	strb	r3, [r2, #0]
 8012192:	e6ce      	b.n	8011f32 <_dtoa_r+0x94a>
 8012194:	4b09      	ldr	r3, [pc, #36]	; (80121bc <_dtoa_r+0xbd4>)
 8012196:	f7ff ba95 	b.w	80116c4 <_dtoa_r+0xdc>
 801219a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801219c:	2b00      	cmp	r3, #0
 801219e:	f47f aa6e 	bne.w	801167e <_dtoa_r+0x96>
 80121a2:	4b07      	ldr	r3, [pc, #28]	; (80121c0 <_dtoa_r+0xbd8>)
 80121a4:	f7ff ba8e 	b.w	80116c4 <_dtoa_r+0xdc>
 80121a8:	9b02      	ldr	r3, [sp, #8]
 80121aa:	2b00      	cmp	r3, #0
 80121ac:	dcae      	bgt.n	801210c <_dtoa_r+0xb24>
 80121ae:	9b06      	ldr	r3, [sp, #24]
 80121b0:	2b02      	cmp	r3, #2
 80121b2:	f73f aea8 	bgt.w	8011f06 <_dtoa_r+0x91e>
 80121b6:	e7a9      	b.n	801210c <_dtoa_r+0xb24>
 80121b8:	08014e48 	.word	0x08014e48
 80121bc:	08014c48 	.word	0x08014c48
 80121c0:	08014dc9 	.word	0x08014dc9

080121c4 <rshift>:
 80121c4:	6903      	ldr	r3, [r0, #16]
 80121c6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80121ca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80121ce:	ea4f 1261 	mov.w	r2, r1, asr #5
 80121d2:	f100 0414 	add.w	r4, r0, #20
 80121d6:	dd45      	ble.n	8012264 <rshift+0xa0>
 80121d8:	f011 011f 	ands.w	r1, r1, #31
 80121dc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80121e0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80121e4:	d10c      	bne.n	8012200 <rshift+0x3c>
 80121e6:	f100 0710 	add.w	r7, r0, #16
 80121ea:	4629      	mov	r1, r5
 80121ec:	42b1      	cmp	r1, r6
 80121ee:	d334      	bcc.n	801225a <rshift+0x96>
 80121f0:	1a9b      	subs	r3, r3, r2
 80121f2:	009b      	lsls	r3, r3, #2
 80121f4:	1eea      	subs	r2, r5, #3
 80121f6:	4296      	cmp	r6, r2
 80121f8:	bf38      	it	cc
 80121fa:	2300      	movcc	r3, #0
 80121fc:	4423      	add	r3, r4
 80121fe:	e015      	b.n	801222c <rshift+0x68>
 8012200:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8012204:	f1c1 0820 	rsb	r8, r1, #32
 8012208:	40cf      	lsrs	r7, r1
 801220a:	f105 0e04 	add.w	lr, r5, #4
 801220e:	46a1      	mov	r9, r4
 8012210:	4576      	cmp	r6, lr
 8012212:	46f4      	mov	ip, lr
 8012214:	d815      	bhi.n	8012242 <rshift+0x7e>
 8012216:	1a9a      	subs	r2, r3, r2
 8012218:	0092      	lsls	r2, r2, #2
 801221a:	3a04      	subs	r2, #4
 801221c:	3501      	adds	r5, #1
 801221e:	42ae      	cmp	r6, r5
 8012220:	bf38      	it	cc
 8012222:	2200      	movcc	r2, #0
 8012224:	18a3      	adds	r3, r4, r2
 8012226:	50a7      	str	r7, [r4, r2]
 8012228:	b107      	cbz	r7, 801222c <rshift+0x68>
 801222a:	3304      	adds	r3, #4
 801222c:	1b1a      	subs	r2, r3, r4
 801222e:	42a3      	cmp	r3, r4
 8012230:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8012234:	bf08      	it	eq
 8012236:	2300      	moveq	r3, #0
 8012238:	6102      	str	r2, [r0, #16]
 801223a:	bf08      	it	eq
 801223c:	6143      	streq	r3, [r0, #20]
 801223e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012242:	f8dc c000 	ldr.w	ip, [ip]
 8012246:	fa0c fc08 	lsl.w	ip, ip, r8
 801224a:	ea4c 0707 	orr.w	r7, ip, r7
 801224e:	f849 7b04 	str.w	r7, [r9], #4
 8012252:	f85e 7b04 	ldr.w	r7, [lr], #4
 8012256:	40cf      	lsrs	r7, r1
 8012258:	e7da      	b.n	8012210 <rshift+0x4c>
 801225a:	f851 cb04 	ldr.w	ip, [r1], #4
 801225e:	f847 cf04 	str.w	ip, [r7, #4]!
 8012262:	e7c3      	b.n	80121ec <rshift+0x28>
 8012264:	4623      	mov	r3, r4
 8012266:	e7e1      	b.n	801222c <rshift+0x68>

08012268 <__hexdig_fun>:
 8012268:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801226c:	2b09      	cmp	r3, #9
 801226e:	d802      	bhi.n	8012276 <__hexdig_fun+0xe>
 8012270:	3820      	subs	r0, #32
 8012272:	b2c0      	uxtb	r0, r0
 8012274:	4770      	bx	lr
 8012276:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801227a:	2b05      	cmp	r3, #5
 801227c:	d801      	bhi.n	8012282 <__hexdig_fun+0x1a>
 801227e:	3847      	subs	r0, #71	; 0x47
 8012280:	e7f7      	b.n	8012272 <__hexdig_fun+0xa>
 8012282:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8012286:	2b05      	cmp	r3, #5
 8012288:	d801      	bhi.n	801228e <__hexdig_fun+0x26>
 801228a:	3827      	subs	r0, #39	; 0x27
 801228c:	e7f1      	b.n	8012272 <__hexdig_fun+0xa>
 801228e:	2000      	movs	r0, #0
 8012290:	4770      	bx	lr
	...

08012294 <__gethex>:
 8012294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012298:	ed2d 8b02 	vpush	{d8}
 801229c:	b089      	sub	sp, #36	; 0x24
 801229e:	ee08 0a10 	vmov	s16, r0
 80122a2:	9304      	str	r3, [sp, #16]
 80122a4:	4bb4      	ldr	r3, [pc, #720]	; (8012578 <__gethex+0x2e4>)
 80122a6:	681b      	ldr	r3, [r3, #0]
 80122a8:	9301      	str	r3, [sp, #4]
 80122aa:	4618      	mov	r0, r3
 80122ac:	468b      	mov	fp, r1
 80122ae:	4690      	mov	r8, r2
 80122b0:	f7ed ffb0 	bl	8000214 <strlen>
 80122b4:	9b01      	ldr	r3, [sp, #4]
 80122b6:	f8db 2000 	ldr.w	r2, [fp]
 80122ba:	4403      	add	r3, r0
 80122bc:	4682      	mov	sl, r0
 80122be:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80122c2:	9305      	str	r3, [sp, #20]
 80122c4:	1c93      	adds	r3, r2, #2
 80122c6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80122ca:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80122ce:	32fe      	adds	r2, #254	; 0xfe
 80122d0:	18d1      	adds	r1, r2, r3
 80122d2:	461f      	mov	r7, r3
 80122d4:	f813 0b01 	ldrb.w	r0, [r3], #1
 80122d8:	9100      	str	r1, [sp, #0]
 80122da:	2830      	cmp	r0, #48	; 0x30
 80122dc:	d0f8      	beq.n	80122d0 <__gethex+0x3c>
 80122de:	f7ff ffc3 	bl	8012268 <__hexdig_fun>
 80122e2:	4604      	mov	r4, r0
 80122e4:	2800      	cmp	r0, #0
 80122e6:	d13a      	bne.n	801235e <__gethex+0xca>
 80122e8:	9901      	ldr	r1, [sp, #4]
 80122ea:	4652      	mov	r2, sl
 80122ec:	4638      	mov	r0, r7
 80122ee:	f001 f937 	bl	8013560 <strncmp>
 80122f2:	4605      	mov	r5, r0
 80122f4:	2800      	cmp	r0, #0
 80122f6:	d168      	bne.n	80123ca <__gethex+0x136>
 80122f8:	f817 000a 	ldrb.w	r0, [r7, sl]
 80122fc:	eb07 060a 	add.w	r6, r7, sl
 8012300:	f7ff ffb2 	bl	8012268 <__hexdig_fun>
 8012304:	2800      	cmp	r0, #0
 8012306:	d062      	beq.n	80123ce <__gethex+0x13a>
 8012308:	4633      	mov	r3, r6
 801230a:	7818      	ldrb	r0, [r3, #0]
 801230c:	2830      	cmp	r0, #48	; 0x30
 801230e:	461f      	mov	r7, r3
 8012310:	f103 0301 	add.w	r3, r3, #1
 8012314:	d0f9      	beq.n	801230a <__gethex+0x76>
 8012316:	f7ff ffa7 	bl	8012268 <__hexdig_fun>
 801231a:	2301      	movs	r3, #1
 801231c:	fab0 f480 	clz	r4, r0
 8012320:	0964      	lsrs	r4, r4, #5
 8012322:	4635      	mov	r5, r6
 8012324:	9300      	str	r3, [sp, #0]
 8012326:	463a      	mov	r2, r7
 8012328:	4616      	mov	r6, r2
 801232a:	3201      	adds	r2, #1
 801232c:	7830      	ldrb	r0, [r6, #0]
 801232e:	f7ff ff9b 	bl	8012268 <__hexdig_fun>
 8012332:	2800      	cmp	r0, #0
 8012334:	d1f8      	bne.n	8012328 <__gethex+0x94>
 8012336:	9901      	ldr	r1, [sp, #4]
 8012338:	4652      	mov	r2, sl
 801233a:	4630      	mov	r0, r6
 801233c:	f001 f910 	bl	8013560 <strncmp>
 8012340:	b980      	cbnz	r0, 8012364 <__gethex+0xd0>
 8012342:	b94d      	cbnz	r5, 8012358 <__gethex+0xc4>
 8012344:	eb06 050a 	add.w	r5, r6, sl
 8012348:	462a      	mov	r2, r5
 801234a:	4616      	mov	r6, r2
 801234c:	3201      	adds	r2, #1
 801234e:	7830      	ldrb	r0, [r6, #0]
 8012350:	f7ff ff8a 	bl	8012268 <__hexdig_fun>
 8012354:	2800      	cmp	r0, #0
 8012356:	d1f8      	bne.n	801234a <__gethex+0xb6>
 8012358:	1bad      	subs	r5, r5, r6
 801235a:	00ad      	lsls	r5, r5, #2
 801235c:	e004      	b.n	8012368 <__gethex+0xd4>
 801235e:	2400      	movs	r4, #0
 8012360:	4625      	mov	r5, r4
 8012362:	e7e0      	b.n	8012326 <__gethex+0x92>
 8012364:	2d00      	cmp	r5, #0
 8012366:	d1f7      	bne.n	8012358 <__gethex+0xc4>
 8012368:	7833      	ldrb	r3, [r6, #0]
 801236a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801236e:	2b50      	cmp	r3, #80	; 0x50
 8012370:	d13b      	bne.n	80123ea <__gethex+0x156>
 8012372:	7873      	ldrb	r3, [r6, #1]
 8012374:	2b2b      	cmp	r3, #43	; 0x2b
 8012376:	d02c      	beq.n	80123d2 <__gethex+0x13e>
 8012378:	2b2d      	cmp	r3, #45	; 0x2d
 801237a:	d02e      	beq.n	80123da <__gethex+0x146>
 801237c:	1c71      	adds	r1, r6, #1
 801237e:	f04f 0900 	mov.w	r9, #0
 8012382:	7808      	ldrb	r0, [r1, #0]
 8012384:	f7ff ff70 	bl	8012268 <__hexdig_fun>
 8012388:	1e43      	subs	r3, r0, #1
 801238a:	b2db      	uxtb	r3, r3
 801238c:	2b18      	cmp	r3, #24
 801238e:	d82c      	bhi.n	80123ea <__gethex+0x156>
 8012390:	f1a0 0210 	sub.w	r2, r0, #16
 8012394:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8012398:	f7ff ff66 	bl	8012268 <__hexdig_fun>
 801239c:	1e43      	subs	r3, r0, #1
 801239e:	b2db      	uxtb	r3, r3
 80123a0:	2b18      	cmp	r3, #24
 80123a2:	d91d      	bls.n	80123e0 <__gethex+0x14c>
 80123a4:	f1b9 0f00 	cmp.w	r9, #0
 80123a8:	d000      	beq.n	80123ac <__gethex+0x118>
 80123aa:	4252      	negs	r2, r2
 80123ac:	4415      	add	r5, r2
 80123ae:	f8cb 1000 	str.w	r1, [fp]
 80123b2:	b1e4      	cbz	r4, 80123ee <__gethex+0x15a>
 80123b4:	9b00      	ldr	r3, [sp, #0]
 80123b6:	2b00      	cmp	r3, #0
 80123b8:	bf14      	ite	ne
 80123ba:	2700      	movne	r7, #0
 80123bc:	2706      	moveq	r7, #6
 80123be:	4638      	mov	r0, r7
 80123c0:	b009      	add	sp, #36	; 0x24
 80123c2:	ecbd 8b02 	vpop	{d8}
 80123c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123ca:	463e      	mov	r6, r7
 80123cc:	4625      	mov	r5, r4
 80123ce:	2401      	movs	r4, #1
 80123d0:	e7ca      	b.n	8012368 <__gethex+0xd4>
 80123d2:	f04f 0900 	mov.w	r9, #0
 80123d6:	1cb1      	adds	r1, r6, #2
 80123d8:	e7d3      	b.n	8012382 <__gethex+0xee>
 80123da:	f04f 0901 	mov.w	r9, #1
 80123de:	e7fa      	b.n	80123d6 <__gethex+0x142>
 80123e0:	230a      	movs	r3, #10
 80123e2:	fb03 0202 	mla	r2, r3, r2, r0
 80123e6:	3a10      	subs	r2, #16
 80123e8:	e7d4      	b.n	8012394 <__gethex+0x100>
 80123ea:	4631      	mov	r1, r6
 80123ec:	e7df      	b.n	80123ae <__gethex+0x11a>
 80123ee:	1bf3      	subs	r3, r6, r7
 80123f0:	3b01      	subs	r3, #1
 80123f2:	4621      	mov	r1, r4
 80123f4:	2b07      	cmp	r3, #7
 80123f6:	dc0b      	bgt.n	8012410 <__gethex+0x17c>
 80123f8:	ee18 0a10 	vmov	r0, s16
 80123fc:	f000 fa74 	bl	80128e8 <_Balloc>
 8012400:	4604      	mov	r4, r0
 8012402:	b940      	cbnz	r0, 8012416 <__gethex+0x182>
 8012404:	4b5d      	ldr	r3, [pc, #372]	; (801257c <__gethex+0x2e8>)
 8012406:	4602      	mov	r2, r0
 8012408:	21de      	movs	r1, #222	; 0xde
 801240a:	485d      	ldr	r0, [pc, #372]	; (8012580 <__gethex+0x2ec>)
 801240c:	f001 f8ca 	bl	80135a4 <__assert_func>
 8012410:	3101      	adds	r1, #1
 8012412:	105b      	asrs	r3, r3, #1
 8012414:	e7ee      	b.n	80123f4 <__gethex+0x160>
 8012416:	f100 0914 	add.w	r9, r0, #20
 801241a:	f04f 0b00 	mov.w	fp, #0
 801241e:	f1ca 0301 	rsb	r3, sl, #1
 8012422:	f8cd 9008 	str.w	r9, [sp, #8]
 8012426:	f8cd b000 	str.w	fp, [sp]
 801242a:	9306      	str	r3, [sp, #24]
 801242c:	42b7      	cmp	r7, r6
 801242e:	d340      	bcc.n	80124b2 <__gethex+0x21e>
 8012430:	9802      	ldr	r0, [sp, #8]
 8012432:	9b00      	ldr	r3, [sp, #0]
 8012434:	f840 3b04 	str.w	r3, [r0], #4
 8012438:	eba0 0009 	sub.w	r0, r0, r9
 801243c:	1080      	asrs	r0, r0, #2
 801243e:	0146      	lsls	r6, r0, #5
 8012440:	6120      	str	r0, [r4, #16]
 8012442:	4618      	mov	r0, r3
 8012444:	f000 fb42 	bl	8012acc <__hi0bits>
 8012448:	1a30      	subs	r0, r6, r0
 801244a:	f8d8 6000 	ldr.w	r6, [r8]
 801244e:	42b0      	cmp	r0, r6
 8012450:	dd63      	ble.n	801251a <__gethex+0x286>
 8012452:	1b87      	subs	r7, r0, r6
 8012454:	4639      	mov	r1, r7
 8012456:	4620      	mov	r0, r4
 8012458:	f000 fee6 	bl	8013228 <__any_on>
 801245c:	4682      	mov	sl, r0
 801245e:	b1a8      	cbz	r0, 801248c <__gethex+0x1f8>
 8012460:	1e7b      	subs	r3, r7, #1
 8012462:	1159      	asrs	r1, r3, #5
 8012464:	f003 021f 	and.w	r2, r3, #31
 8012468:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801246c:	f04f 0a01 	mov.w	sl, #1
 8012470:	fa0a f202 	lsl.w	r2, sl, r2
 8012474:	420a      	tst	r2, r1
 8012476:	d009      	beq.n	801248c <__gethex+0x1f8>
 8012478:	4553      	cmp	r3, sl
 801247a:	dd05      	ble.n	8012488 <__gethex+0x1f4>
 801247c:	1eb9      	subs	r1, r7, #2
 801247e:	4620      	mov	r0, r4
 8012480:	f000 fed2 	bl	8013228 <__any_on>
 8012484:	2800      	cmp	r0, #0
 8012486:	d145      	bne.n	8012514 <__gethex+0x280>
 8012488:	f04f 0a02 	mov.w	sl, #2
 801248c:	4639      	mov	r1, r7
 801248e:	4620      	mov	r0, r4
 8012490:	f7ff fe98 	bl	80121c4 <rshift>
 8012494:	443d      	add	r5, r7
 8012496:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801249a:	42ab      	cmp	r3, r5
 801249c:	da4c      	bge.n	8012538 <__gethex+0x2a4>
 801249e:	ee18 0a10 	vmov	r0, s16
 80124a2:	4621      	mov	r1, r4
 80124a4:	f000 fa60 	bl	8012968 <_Bfree>
 80124a8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80124aa:	2300      	movs	r3, #0
 80124ac:	6013      	str	r3, [r2, #0]
 80124ae:	27a3      	movs	r7, #163	; 0xa3
 80124b0:	e785      	b.n	80123be <__gethex+0x12a>
 80124b2:	1e73      	subs	r3, r6, #1
 80124b4:	9a05      	ldr	r2, [sp, #20]
 80124b6:	9303      	str	r3, [sp, #12]
 80124b8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80124bc:	4293      	cmp	r3, r2
 80124be:	d019      	beq.n	80124f4 <__gethex+0x260>
 80124c0:	f1bb 0f20 	cmp.w	fp, #32
 80124c4:	d107      	bne.n	80124d6 <__gethex+0x242>
 80124c6:	9b02      	ldr	r3, [sp, #8]
 80124c8:	9a00      	ldr	r2, [sp, #0]
 80124ca:	f843 2b04 	str.w	r2, [r3], #4
 80124ce:	9302      	str	r3, [sp, #8]
 80124d0:	2300      	movs	r3, #0
 80124d2:	9300      	str	r3, [sp, #0]
 80124d4:	469b      	mov	fp, r3
 80124d6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80124da:	f7ff fec5 	bl	8012268 <__hexdig_fun>
 80124de:	9b00      	ldr	r3, [sp, #0]
 80124e0:	f000 000f 	and.w	r0, r0, #15
 80124e4:	fa00 f00b 	lsl.w	r0, r0, fp
 80124e8:	4303      	orrs	r3, r0
 80124ea:	9300      	str	r3, [sp, #0]
 80124ec:	f10b 0b04 	add.w	fp, fp, #4
 80124f0:	9b03      	ldr	r3, [sp, #12]
 80124f2:	e00d      	b.n	8012510 <__gethex+0x27c>
 80124f4:	9b03      	ldr	r3, [sp, #12]
 80124f6:	9a06      	ldr	r2, [sp, #24]
 80124f8:	4413      	add	r3, r2
 80124fa:	42bb      	cmp	r3, r7
 80124fc:	d3e0      	bcc.n	80124c0 <__gethex+0x22c>
 80124fe:	4618      	mov	r0, r3
 8012500:	9901      	ldr	r1, [sp, #4]
 8012502:	9307      	str	r3, [sp, #28]
 8012504:	4652      	mov	r2, sl
 8012506:	f001 f82b 	bl	8013560 <strncmp>
 801250a:	9b07      	ldr	r3, [sp, #28]
 801250c:	2800      	cmp	r0, #0
 801250e:	d1d7      	bne.n	80124c0 <__gethex+0x22c>
 8012510:	461e      	mov	r6, r3
 8012512:	e78b      	b.n	801242c <__gethex+0x198>
 8012514:	f04f 0a03 	mov.w	sl, #3
 8012518:	e7b8      	b.n	801248c <__gethex+0x1f8>
 801251a:	da0a      	bge.n	8012532 <__gethex+0x29e>
 801251c:	1a37      	subs	r7, r6, r0
 801251e:	4621      	mov	r1, r4
 8012520:	ee18 0a10 	vmov	r0, s16
 8012524:	463a      	mov	r2, r7
 8012526:	f000 fc3b 	bl	8012da0 <__lshift>
 801252a:	1bed      	subs	r5, r5, r7
 801252c:	4604      	mov	r4, r0
 801252e:	f100 0914 	add.w	r9, r0, #20
 8012532:	f04f 0a00 	mov.w	sl, #0
 8012536:	e7ae      	b.n	8012496 <__gethex+0x202>
 8012538:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801253c:	42a8      	cmp	r0, r5
 801253e:	dd72      	ble.n	8012626 <__gethex+0x392>
 8012540:	1b45      	subs	r5, r0, r5
 8012542:	42ae      	cmp	r6, r5
 8012544:	dc36      	bgt.n	80125b4 <__gethex+0x320>
 8012546:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801254a:	2b02      	cmp	r3, #2
 801254c:	d02a      	beq.n	80125a4 <__gethex+0x310>
 801254e:	2b03      	cmp	r3, #3
 8012550:	d02c      	beq.n	80125ac <__gethex+0x318>
 8012552:	2b01      	cmp	r3, #1
 8012554:	d11c      	bne.n	8012590 <__gethex+0x2fc>
 8012556:	42ae      	cmp	r6, r5
 8012558:	d11a      	bne.n	8012590 <__gethex+0x2fc>
 801255a:	2e01      	cmp	r6, #1
 801255c:	d112      	bne.n	8012584 <__gethex+0x2f0>
 801255e:	9a04      	ldr	r2, [sp, #16]
 8012560:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012564:	6013      	str	r3, [r2, #0]
 8012566:	2301      	movs	r3, #1
 8012568:	6123      	str	r3, [r4, #16]
 801256a:	f8c9 3000 	str.w	r3, [r9]
 801256e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012570:	2762      	movs	r7, #98	; 0x62
 8012572:	601c      	str	r4, [r3, #0]
 8012574:	e723      	b.n	80123be <__gethex+0x12a>
 8012576:	bf00      	nop
 8012578:	08014ec0 	.word	0x08014ec0
 801257c:	08014e48 	.word	0x08014e48
 8012580:	08014e59 	.word	0x08014e59
 8012584:	1e71      	subs	r1, r6, #1
 8012586:	4620      	mov	r0, r4
 8012588:	f000 fe4e 	bl	8013228 <__any_on>
 801258c:	2800      	cmp	r0, #0
 801258e:	d1e6      	bne.n	801255e <__gethex+0x2ca>
 8012590:	ee18 0a10 	vmov	r0, s16
 8012594:	4621      	mov	r1, r4
 8012596:	f000 f9e7 	bl	8012968 <_Bfree>
 801259a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801259c:	2300      	movs	r3, #0
 801259e:	6013      	str	r3, [r2, #0]
 80125a0:	2750      	movs	r7, #80	; 0x50
 80125a2:	e70c      	b.n	80123be <__gethex+0x12a>
 80125a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80125a6:	2b00      	cmp	r3, #0
 80125a8:	d1f2      	bne.n	8012590 <__gethex+0x2fc>
 80125aa:	e7d8      	b.n	801255e <__gethex+0x2ca>
 80125ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80125ae:	2b00      	cmp	r3, #0
 80125b0:	d1d5      	bne.n	801255e <__gethex+0x2ca>
 80125b2:	e7ed      	b.n	8012590 <__gethex+0x2fc>
 80125b4:	1e6f      	subs	r7, r5, #1
 80125b6:	f1ba 0f00 	cmp.w	sl, #0
 80125ba:	d131      	bne.n	8012620 <__gethex+0x38c>
 80125bc:	b127      	cbz	r7, 80125c8 <__gethex+0x334>
 80125be:	4639      	mov	r1, r7
 80125c0:	4620      	mov	r0, r4
 80125c2:	f000 fe31 	bl	8013228 <__any_on>
 80125c6:	4682      	mov	sl, r0
 80125c8:	117b      	asrs	r3, r7, #5
 80125ca:	2101      	movs	r1, #1
 80125cc:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80125d0:	f007 071f 	and.w	r7, r7, #31
 80125d4:	fa01 f707 	lsl.w	r7, r1, r7
 80125d8:	421f      	tst	r7, r3
 80125da:	4629      	mov	r1, r5
 80125dc:	4620      	mov	r0, r4
 80125de:	bf18      	it	ne
 80125e0:	f04a 0a02 	orrne.w	sl, sl, #2
 80125e4:	1b76      	subs	r6, r6, r5
 80125e6:	f7ff fded 	bl	80121c4 <rshift>
 80125ea:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80125ee:	2702      	movs	r7, #2
 80125f0:	f1ba 0f00 	cmp.w	sl, #0
 80125f4:	d048      	beq.n	8012688 <__gethex+0x3f4>
 80125f6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80125fa:	2b02      	cmp	r3, #2
 80125fc:	d015      	beq.n	801262a <__gethex+0x396>
 80125fe:	2b03      	cmp	r3, #3
 8012600:	d017      	beq.n	8012632 <__gethex+0x39e>
 8012602:	2b01      	cmp	r3, #1
 8012604:	d109      	bne.n	801261a <__gethex+0x386>
 8012606:	f01a 0f02 	tst.w	sl, #2
 801260a:	d006      	beq.n	801261a <__gethex+0x386>
 801260c:	f8d9 0000 	ldr.w	r0, [r9]
 8012610:	ea4a 0a00 	orr.w	sl, sl, r0
 8012614:	f01a 0f01 	tst.w	sl, #1
 8012618:	d10e      	bne.n	8012638 <__gethex+0x3a4>
 801261a:	f047 0710 	orr.w	r7, r7, #16
 801261e:	e033      	b.n	8012688 <__gethex+0x3f4>
 8012620:	f04f 0a01 	mov.w	sl, #1
 8012624:	e7d0      	b.n	80125c8 <__gethex+0x334>
 8012626:	2701      	movs	r7, #1
 8012628:	e7e2      	b.n	80125f0 <__gethex+0x35c>
 801262a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801262c:	f1c3 0301 	rsb	r3, r3, #1
 8012630:	9315      	str	r3, [sp, #84]	; 0x54
 8012632:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012634:	2b00      	cmp	r3, #0
 8012636:	d0f0      	beq.n	801261a <__gethex+0x386>
 8012638:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801263c:	f104 0314 	add.w	r3, r4, #20
 8012640:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8012644:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8012648:	f04f 0c00 	mov.w	ip, #0
 801264c:	4618      	mov	r0, r3
 801264e:	f853 2b04 	ldr.w	r2, [r3], #4
 8012652:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8012656:	d01c      	beq.n	8012692 <__gethex+0x3fe>
 8012658:	3201      	adds	r2, #1
 801265a:	6002      	str	r2, [r0, #0]
 801265c:	2f02      	cmp	r7, #2
 801265e:	f104 0314 	add.w	r3, r4, #20
 8012662:	d13f      	bne.n	80126e4 <__gethex+0x450>
 8012664:	f8d8 2000 	ldr.w	r2, [r8]
 8012668:	3a01      	subs	r2, #1
 801266a:	42b2      	cmp	r2, r6
 801266c:	d10a      	bne.n	8012684 <__gethex+0x3f0>
 801266e:	1171      	asrs	r1, r6, #5
 8012670:	2201      	movs	r2, #1
 8012672:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012676:	f006 061f 	and.w	r6, r6, #31
 801267a:	fa02 f606 	lsl.w	r6, r2, r6
 801267e:	421e      	tst	r6, r3
 8012680:	bf18      	it	ne
 8012682:	4617      	movne	r7, r2
 8012684:	f047 0720 	orr.w	r7, r7, #32
 8012688:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801268a:	601c      	str	r4, [r3, #0]
 801268c:	9b04      	ldr	r3, [sp, #16]
 801268e:	601d      	str	r5, [r3, #0]
 8012690:	e695      	b.n	80123be <__gethex+0x12a>
 8012692:	4299      	cmp	r1, r3
 8012694:	f843 cc04 	str.w	ip, [r3, #-4]
 8012698:	d8d8      	bhi.n	801264c <__gethex+0x3b8>
 801269a:	68a3      	ldr	r3, [r4, #8]
 801269c:	459b      	cmp	fp, r3
 801269e:	db19      	blt.n	80126d4 <__gethex+0x440>
 80126a0:	6861      	ldr	r1, [r4, #4]
 80126a2:	ee18 0a10 	vmov	r0, s16
 80126a6:	3101      	adds	r1, #1
 80126a8:	f000 f91e 	bl	80128e8 <_Balloc>
 80126ac:	4681      	mov	r9, r0
 80126ae:	b918      	cbnz	r0, 80126b8 <__gethex+0x424>
 80126b0:	4b1a      	ldr	r3, [pc, #104]	; (801271c <__gethex+0x488>)
 80126b2:	4602      	mov	r2, r0
 80126b4:	2184      	movs	r1, #132	; 0x84
 80126b6:	e6a8      	b.n	801240a <__gethex+0x176>
 80126b8:	6922      	ldr	r2, [r4, #16]
 80126ba:	3202      	adds	r2, #2
 80126bc:	f104 010c 	add.w	r1, r4, #12
 80126c0:	0092      	lsls	r2, r2, #2
 80126c2:	300c      	adds	r0, #12
 80126c4:	f7fd f8b2 	bl	800f82c <memcpy>
 80126c8:	4621      	mov	r1, r4
 80126ca:	ee18 0a10 	vmov	r0, s16
 80126ce:	f000 f94b 	bl	8012968 <_Bfree>
 80126d2:	464c      	mov	r4, r9
 80126d4:	6923      	ldr	r3, [r4, #16]
 80126d6:	1c5a      	adds	r2, r3, #1
 80126d8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80126dc:	6122      	str	r2, [r4, #16]
 80126de:	2201      	movs	r2, #1
 80126e0:	615a      	str	r2, [r3, #20]
 80126e2:	e7bb      	b.n	801265c <__gethex+0x3c8>
 80126e4:	6922      	ldr	r2, [r4, #16]
 80126e6:	455a      	cmp	r2, fp
 80126e8:	dd0b      	ble.n	8012702 <__gethex+0x46e>
 80126ea:	2101      	movs	r1, #1
 80126ec:	4620      	mov	r0, r4
 80126ee:	f7ff fd69 	bl	80121c4 <rshift>
 80126f2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80126f6:	3501      	adds	r5, #1
 80126f8:	42ab      	cmp	r3, r5
 80126fa:	f6ff aed0 	blt.w	801249e <__gethex+0x20a>
 80126fe:	2701      	movs	r7, #1
 8012700:	e7c0      	b.n	8012684 <__gethex+0x3f0>
 8012702:	f016 061f 	ands.w	r6, r6, #31
 8012706:	d0fa      	beq.n	80126fe <__gethex+0x46a>
 8012708:	4453      	add	r3, sl
 801270a:	f1c6 0620 	rsb	r6, r6, #32
 801270e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8012712:	f000 f9db 	bl	8012acc <__hi0bits>
 8012716:	42b0      	cmp	r0, r6
 8012718:	dbe7      	blt.n	80126ea <__gethex+0x456>
 801271a:	e7f0      	b.n	80126fe <__gethex+0x46a>
 801271c:	08014e48 	.word	0x08014e48

08012720 <L_shift>:
 8012720:	f1c2 0208 	rsb	r2, r2, #8
 8012724:	0092      	lsls	r2, r2, #2
 8012726:	b570      	push	{r4, r5, r6, lr}
 8012728:	f1c2 0620 	rsb	r6, r2, #32
 801272c:	6843      	ldr	r3, [r0, #4]
 801272e:	6804      	ldr	r4, [r0, #0]
 8012730:	fa03 f506 	lsl.w	r5, r3, r6
 8012734:	432c      	orrs	r4, r5
 8012736:	40d3      	lsrs	r3, r2
 8012738:	6004      	str	r4, [r0, #0]
 801273a:	f840 3f04 	str.w	r3, [r0, #4]!
 801273e:	4288      	cmp	r0, r1
 8012740:	d3f4      	bcc.n	801272c <L_shift+0xc>
 8012742:	bd70      	pop	{r4, r5, r6, pc}

08012744 <__match>:
 8012744:	b530      	push	{r4, r5, lr}
 8012746:	6803      	ldr	r3, [r0, #0]
 8012748:	3301      	adds	r3, #1
 801274a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801274e:	b914      	cbnz	r4, 8012756 <__match+0x12>
 8012750:	6003      	str	r3, [r0, #0]
 8012752:	2001      	movs	r0, #1
 8012754:	bd30      	pop	{r4, r5, pc}
 8012756:	f813 2b01 	ldrb.w	r2, [r3], #1
 801275a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801275e:	2d19      	cmp	r5, #25
 8012760:	bf98      	it	ls
 8012762:	3220      	addls	r2, #32
 8012764:	42a2      	cmp	r2, r4
 8012766:	d0f0      	beq.n	801274a <__match+0x6>
 8012768:	2000      	movs	r0, #0
 801276a:	e7f3      	b.n	8012754 <__match+0x10>

0801276c <__hexnan>:
 801276c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012770:	680b      	ldr	r3, [r1, #0]
 8012772:	115e      	asrs	r6, r3, #5
 8012774:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8012778:	f013 031f 	ands.w	r3, r3, #31
 801277c:	b087      	sub	sp, #28
 801277e:	bf18      	it	ne
 8012780:	3604      	addne	r6, #4
 8012782:	2500      	movs	r5, #0
 8012784:	1f37      	subs	r7, r6, #4
 8012786:	4690      	mov	r8, r2
 8012788:	6802      	ldr	r2, [r0, #0]
 801278a:	9301      	str	r3, [sp, #4]
 801278c:	4682      	mov	sl, r0
 801278e:	f846 5c04 	str.w	r5, [r6, #-4]
 8012792:	46b9      	mov	r9, r7
 8012794:	463c      	mov	r4, r7
 8012796:	9502      	str	r5, [sp, #8]
 8012798:	46ab      	mov	fp, r5
 801279a:	7851      	ldrb	r1, [r2, #1]
 801279c:	1c53      	adds	r3, r2, #1
 801279e:	9303      	str	r3, [sp, #12]
 80127a0:	b341      	cbz	r1, 80127f4 <__hexnan+0x88>
 80127a2:	4608      	mov	r0, r1
 80127a4:	9205      	str	r2, [sp, #20]
 80127a6:	9104      	str	r1, [sp, #16]
 80127a8:	f7ff fd5e 	bl	8012268 <__hexdig_fun>
 80127ac:	2800      	cmp	r0, #0
 80127ae:	d14f      	bne.n	8012850 <__hexnan+0xe4>
 80127b0:	9904      	ldr	r1, [sp, #16]
 80127b2:	9a05      	ldr	r2, [sp, #20]
 80127b4:	2920      	cmp	r1, #32
 80127b6:	d818      	bhi.n	80127ea <__hexnan+0x7e>
 80127b8:	9b02      	ldr	r3, [sp, #8]
 80127ba:	459b      	cmp	fp, r3
 80127bc:	dd13      	ble.n	80127e6 <__hexnan+0x7a>
 80127be:	454c      	cmp	r4, r9
 80127c0:	d206      	bcs.n	80127d0 <__hexnan+0x64>
 80127c2:	2d07      	cmp	r5, #7
 80127c4:	dc04      	bgt.n	80127d0 <__hexnan+0x64>
 80127c6:	462a      	mov	r2, r5
 80127c8:	4649      	mov	r1, r9
 80127ca:	4620      	mov	r0, r4
 80127cc:	f7ff ffa8 	bl	8012720 <L_shift>
 80127d0:	4544      	cmp	r4, r8
 80127d2:	d950      	bls.n	8012876 <__hexnan+0x10a>
 80127d4:	2300      	movs	r3, #0
 80127d6:	f1a4 0904 	sub.w	r9, r4, #4
 80127da:	f844 3c04 	str.w	r3, [r4, #-4]
 80127de:	f8cd b008 	str.w	fp, [sp, #8]
 80127e2:	464c      	mov	r4, r9
 80127e4:	461d      	mov	r5, r3
 80127e6:	9a03      	ldr	r2, [sp, #12]
 80127e8:	e7d7      	b.n	801279a <__hexnan+0x2e>
 80127ea:	2929      	cmp	r1, #41	; 0x29
 80127ec:	d156      	bne.n	801289c <__hexnan+0x130>
 80127ee:	3202      	adds	r2, #2
 80127f0:	f8ca 2000 	str.w	r2, [sl]
 80127f4:	f1bb 0f00 	cmp.w	fp, #0
 80127f8:	d050      	beq.n	801289c <__hexnan+0x130>
 80127fa:	454c      	cmp	r4, r9
 80127fc:	d206      	bcs.n	801280c <__hexnan+0xa0>
 80127fe:	2d07      	cmp	r5, #7
 8012800:	dc04      	bgt.n	801280c <__hexnan+0xa0>
 8012802:	462a      	mov	r2, r5
 8012804:	4649      	mov	r1, r9
 8012806:	4620      	mov	r0, r4
 8012808:	f7ff ff8a 	bl	8012720 <L_shift>
 801280c:	4544      	cmp	r4, r8
 801280e:	d934      	bls.n	801287a <__hexnan+0x10e>
 8012810:	f1a8 0204 	sub.w	r2, r8, #4
 8012814:	4623      	mov	r3, r4
 8012816:	f853 1b04 	ldr.w	r1, [r3], #4
 801281a:	f842 1f04 	str.w	r1, [r2, #4]!
 801281e:	429f      	cmp	r7, r3
 8012820:	d2f9      	bcs.n	8012816 <__hexnan+0xaa>
 8012822:	1b3b      	subs	r3, r7, r4
 8012824:	f023 0303 	bic.w	r3, r3, #3
 8012828:	3304      	adds	r3, #4
 801282a:	3401      	adds	r4, #1
 801282c:	3e03      	subs	r6, #3
 801282e:	42b4      	cmp	r4, r6
 8012830:	bf88      	it	hi
 8012832:	2304      	movhi	r3, #4
 8012834:	4443      	add	r3, r8
 8012836:	2200      	movs	r2, #0
 8012838:	f843 2b04 	str.w	r2, [r3], #4
 801283c:	429f      	cmp	r7, r3
 801283e:	d2fb      	bcs.n	8012838 <__hexnan+0xcc>
 8012840:	683b      	ldr	r3, [r7, #0]
 8012842:	b91b      	cbnz	r3, 801284c <__hexnan+0xe0>
 8012844:	4547      	cmp	r7, r8
 8012846:	d127      	bne.n	8012898 <__hexnan+0x12c>
 8012848:	2301      	movs	r3, #1
 801284a:	603b      	str	r3, [r7, #0]
 801284c:	2005      	movs	r0, #5
 801284e:	e026      	b.n	801289e <__hexnan+0x132>
 8012850:	3501      	adds	r5, #1
 8012852:	2d08      	cmp	r5, #8
 8012854:	f10b 0b01 	add.w	fp, fp, #1
 8012858:	dd06      	ble.n	8012868 <__hexnan+0xfc>
 801285a:	4544      	cmp	r4, r8
 801285c:	d9c3      	bls.n	80127e6 <__hexnan+0x7a>
 801285e:	2300      	movs	r3, #0
 8012860:	f844 3c04 	str.w	r3, [r4, #-4]
 8012864:	2501      	movs	r5, #1
 8012866:	3c04      	subs	r4, #4
 8012868:	6822      	ldr	r2, [r4, #0]
 801286a:	f000 000f 	and.w	r0, r0, #15
 801286e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8012872:	6022      	str	r2, [r4, #0]
 8012874:	e7b7      	b.n	80127e6 <__hexnan+0x7a>
 8012876:	2508      	movs	r5, #8
 8012878:	e7b5      	b.n	80127e6 <__hexnan+0x7a>
 801287a:	9b01      	ldr	r3, [sp, #4]
 801287c:	2b00      	cmp	r3, #0
 801287e:	d0df      	beq.n	8012840 <__hexnan+0xd4>
 8012880:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012884:	f1c3 0320 	rsb	r3, r3, #32
 8012888:	fa22 f303 	lsr.w	r3, r2, r3
 801288c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8012890:	401a      	ands	r2, r3
 8012892:	f846 2c04 	str.w	r2, [r6, #-4]
 8012896:	e7d3      	b.n	8012840 <__hexnan+0xd4>
 8012898:	3f04      	subs	r7, #4
 801289a:	e7d1      	b.n	8012840 <__hexnan+0xd4>
 801289c:	2004      	movs	r0, #4
 801289e:	b007      	add	sp, #28
 80128a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080128a4 <_localeconv_r>:
 80128a4:	4800      	ldr	r0, [pc, #0]	; (80128a8 <_localeconv_r+0x4>)
 80128a6:	4770      	bx	lr
 80128a8:	20000184 	.word	0x20000184

080128ac <__ascii_mbtowc>:
 80128ac:	b082      	sub	sp, #8
 80128ae:	b901      	cbnz	r1, 80128b2 <__ascii_mbtowc+0x6>
 80128b0:	a901      	add	r1, sp, #4
 80128b2:	b142      	cbz	r2, 80128c6 <__ascii_mbtowc+0x1a>
 80128b4:	b14b      	cbz	r3, 80128ca <__ascii_mbtowc+0x1e>
 80128b6:	7813      	ldrb	r3, [r2, #0]
 80128b8:	600b      	str	r3, [r1, #0]
 80128ba:	7812      	ldrb	r2, [r2, #0]
 80128bc:	1e10      	subs	r0, r2, #0
 80128be:	bf18      	it	ne
 80128c0:	2001      	movne	r0, #1
 80128c2:	b002      	add	sp, #8
 80128c4:	4770      	bx	lr
 80128c6:	4610      	mov	r0, r2
 80128c8:	e7fb      	b.n	80128c2 <__ascii_mbtowc+0x16>
 80128ca:	f06f 0001 	mvn.w	r0, #1
 80128ce:	e7f8      	b.n	80128c2 <__ascii_mbtowc+0x16>

080128d0 <__malloc_lock>:
 80128d0:	4801      	ldr	r0, [pc, #4]	; (80128d8 <__malloc_lock+0x8>)
 80128d2:	f000 be98 	b.w	8013606 <__retarget_lock_acquire_recursive>
 80128d6:	bf00      	nop
 80128d8:	20003010 	.word	0x20003010

080128dc <__malloc_unlock>:
 80128dc:	4801      	ldr	r0, [pc, #4]	; (80128e4 <__malloc_unlock+0x8>)
 80128de:	f000 be93 	b.w	8013608 <__retarget_lock_release_recursive>
 80128e2:	bf00      	nop
 80128e4:	20003010 	.word	0x20003010

080128e8 <_Balloc>:
 80128e8:	b570      	push	{r4, r5, r6, lr}
 80128ea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80128ec:	4604      	mov	r4, r0
 80128ee:	460d      	mov	r5, r1
 80128f0:	b976      	cbnz	r6, 8012910 <_Balloc+0x28>
 80128f2:	2010      	movs	r0, #16
 80128f4:	f7fc ff8a 	bl	800f80c <malloc>
 80128f8:	4602      	mov	r2, r0
 80128fa:	6260      	str	r0, [r4, #36]	; 0x24
 80128fc:	b920      	cbnz	r0, 8012908 <_Balloc+0x20>
 80128fe:	4b18      	ldr	r3, [pc, #96]	; (8012960 <_Balloc+0x78>)
 8012900:	4818      	ldr	r0, [pc, #96]	; (8012964 <_Balloc+0x7c>)
 8012902:	2166      	movs	r1, #102	; 0x66
 8012904:	f000 fe4e 	bl	80135a4 <__assert_func>
 8012908:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801290c:	6006      	str	r6, [r0, #0]
 801290e:	60c6      	str	r6, [r0, #12]
 8012910:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8012912:	68f3      	ldr	r3, [r6, #12]
 8012914:	b183      	cbz	r3, 8012938 <_Balloc+0x50>
 8012916:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012918:	68db      	ldr	r3, [r3, #12]
 801291a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801291e:	b9b8      	cbnz	r0, 8012950 <_Balloc+0x68>
 8012920:	2101      	movs	r1, #1
 8012922:	fa01 f605 	lsl.w	r6, r1, r5
 8012926:	1d72      	adds	r2, r6, #5
 8012928:	0092      	lsls	r2, r2, #2
 801292a:	4620      	mov	r0, r4
 801292c:	f000 fc9d 	bl	801326a <_calloc_r>
 8012930:	b160      	cbz	r0, 801294c <_Balloc+0x64>
 8012932:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012936:	e00e      	b.n	8012956 <_Balloc+0x6e>
 8012938:	2221      	movs	r2, #33	; 0x21
 801293a:	2104      	movs	r1, #4
 801293c:	4620      	mov	r0, r4
 801293e:	f000 fc94 	bl	801326a <_calloc_r>
 8012942:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012944:	60f0      	str	r0, [r6, #12]
 8012946:	68db      	ldr	r3, [r3, #12]
 8012948:	2b00      	cmp	r3, #0
 801294a:	d1e4      	bne.n	8012916 <_Balloc+0x2e>
 801294c:	2000      	movs	r0, #0
 801294e:	bd70      	pop	{r4, r5, r6, pc}
 8012950:	6802      	ldr	r2, [r0, #0]
 8012952:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012956:	2300      	movs	r3, #0
 8012958:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801295c:	e7f7      	b.n	801294e <_Balloc+0x66>
 801295e:	bf00      	nop
 8012960:	08014dd6 	.word	0x08014dd6
 8012964:	08014ed4 	.word	0x08014ed4

08012968 <_Bfree>:
 8012968:	b570      	push	{r4, r5, r6, lr}
 801296a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801296c:	4605      	mov	r5, r0
 801296e:	460c      	mov	r4, r1
 8012970:	b976      	cbnz	r6, 8012990 <_Bfree+0x28>
 8012972:	2010      	movs	r0, #16
 8012974:	f7fc ff4a 	bl	800f80c <malloc>
 8012978:	4602      	mov	r2, r0
 801297a:	6268      	str	r0, [r5, #36]	; 0x24
 801297c:	b920      	cbnz	r0, 8012988 <_Bfree+0x20>
 801297e:	4b09      	ldr	r3, [pc, #36]	; (80129a4 <_Bfree+0x3c>)
 8012980:	4809      	ldr	r0, [pc, #36]	; (80129a8 <_Bfree+0x40>)
 8012982:	218a      	movs	r1, #138	; 0x8a
 8012984:	f000 fe0e 	bl	80135a4 <__assert_func>
 8012988:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801298c:	6006      	str	r6, [r0, #0]
 801298e:	60c6      	str	r6, [r0, #12]
 8012990:	b13c      	cbz	r4, 80129a2 <_Bfree+0x3a>
 8012992:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8012994:	6862      	ldr	r2, [r4, #4]
 8012996:	68db      	ldr	r3, [r3, #12]
 8012998:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801299c:	6021      	str	r1, [r4, #0]
 801299e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80129a2:	bd70      	pop	{r4, r5, r6, pc}
 80129a4:	08014dd6 	.word	0x08014dd6
 80129a8:	08014ed4 	.word	0x08014ed4

080129ac <__multadd>:
 80129ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80129b0:	690d      	ldr	r5, [r1, #16]
 80129b2:	4607      	mov	r7, r0
 80129b4:	460c      	mov	r4, r1
 80129b6:	461e      	mov	r6, r3
 80129b8:	f101 0c14 	add.w	ip, r1, #20
 80129bc:	2000      	movs	r0, #0
 80129be:	f8dc 3000 	ldr.w	r3, [ip]
 80129c2:	b299      	uxth	r1, r3
 80129c4:	fb02 6101 	mla	r1, r2, r1, r6
 80129c8:	0c1e      	lsrs	r6, r3, #16
 80129ca:	0c0b      	lsrs	r3, r1, #16
 80129cc:	fb02 3306 	mla	r3, r2, r6, r3
 80129d0:	b289      	uxth	r1, r1
 80129d2:	3001      	adds	r0, #1
 80129d4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80129d8:	4285      	cmp	r5, r0
 80129da:	f84c 1b04 	str.w	r1, [ip], #4
 80129de:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80129e2:	dcec      	bgt.n	80129be <__multadd+0x12>
 80129e4:	b30e      	cbz	r6, 8012a2a <__multadd+0x7e>
 80129e6:	68a3      	ldr	r3, [r4, #8]
 80129e8:	42ab      	cmp	r3, r5
 80129ea:	dc19      	bgt.n	8012a20 <__multadd+0x74>
 80129ec:	6861      	ldr	r1, [r4, #4]
 80129ee:	4638      	mov	r0, r7
 80129f0:	3101      	adds	r1, #1
 80129f2:	f7ff ff79 	bl	80128e8 <_Balloc>
 80129f6:	4680      	mov	r8, r0
 80129f8:	b928      	cbnz	r0, 8012a06 <__multadd+0x5a>
 80129fa:	4602      	mov	r2, r0
 80129fc:	4b0c      	ldr	r3, [pc, #48]	; (8012a30 <__multadd+0x84>)
 80129fe:	480d      	ldr	r0, [pc, #52]	; (8012a34 <__multadd+0x88>)
 8012a00:	21b5      	movs	r1, #181	; 0xb5
 8012a02:	f000 fdcf 	bl	80135a4 <__assert_func>
 8012a06:	6922      	ldr	r2, [r4, #16]
 8012a08:	3202      	adds	r2, #2
 8012a0a:	f104 010c 	add.w	r1, r4, #12
 8012a0e:	0092      	lsls	r2, r2, #2
 8012a10:	300c      	adds	r0, #12
 8012a12:	f7fc ff0b 	bl	800f82c <memcpy>
 8012a16:	4621      	mov	r1, r4
 8012a18:	4638      	mov	r0, r7
 8012a1a:	f7ff ffa5 	bl	8012968 <_Bfree>
 8012a1e:	4644      	mov	r4, r8
 8012a20:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012a24:	3501      	adds	r5, #1
 8012a26:	615e      	str	r6, [r3, #20]
 8012a28:	6125      	str	r5, [r4, #16]
 8012a2a:	4620      	mov	r0, r4
 8012a2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a30:	08014e48 	.word	0x08014e48
 8012a34:	08014ed4 	.word	0x08014ed4

08012a38 <__s2b>:
 8012a38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012a3c:	460c      	mov	r4, r1
 8012a3e:	4615      	mov	r5, r2
 8012a40:	461f      	mov	r7, r3
 8012a42:	2209      	movs	r2, #9
 8012a44:	3308      	adds	r3, #8
 8012a46:	4606      	mov	r6, r0
 8012a48:	fb93 f3f2 	sdiv	r3, r3, r2
 8012a4c:	2100      	movs	r1, #0
 8012a4e:	2201      	movs	r2, #1
 8012a50:	429a      	cmp	r2, r3
 8012a52:	db09      	blt.n	8012a68 <__s2b+0x30>
 8012a54:	4630      	mov	r0, r6
 8012a56:	f7ff ff47 	bl	80128e8 <_Balloc>
 8012a5a:	b940      	cbnz	r0, 8012a6e <__s2b+0x36>
 8012a5c:	4602      	mov	r2, r0
 8012a5e:	4b19      	ldr	r3, [pc, #100]	; (8012ac4 <__s2b+0x8c>)
 8012a60:	4819      	ldr	r0, [pc, #100]	; (8012ac8 <__s2b+0x90>)
 8012a62:	21ce      	movs	r1, #206	; 0xce
 8012a64:	f000 fd9e 	bl	80135a4 <__assert_func>
 8012a68:	0052      	lsls	r2, r2, #1
 8012a6a:	3101      	adds	r1, #1
 8012a6c:	e7f0      	b.n	8012a50 <__s2b+0x18>
 8012a6e:	9b08      	ldr	r3, [sp, #32]
 8012a70:	6143      	str	r3, [r0, #20]
 8012a72:	2d09      	cmp	r5, #9
 8012a74:	f04f 0301 	mov.w	r3, #1
 8012a78:	6103      	str	r3, [r0, #16]
 8012a7a:	dd16      	ble.n	8012aaa <__s2b+0x72>
 8012a7c:	f104 0909 	add.w	r9, r4, #9
 8012a80:	46c8      	mov	r8, r9
 8012a82:	442c      	add	r4, r5
 8012a84:	f818 3b01 	ldrb.w	r3, [r8], #1
 8012a88:	4601      	mov	r1, r0
 8012a8a:	3b30      	subs	r3, #48	; 0x30
 8012a8c:	220a      	movs	r2, #10
 8012a8e:	4630      	mov	r0, r6
 8012a90:	f7ff ff8c 	bl	80129ac <__multadd>
 8012a94:	45a0      	cmp	r8, r4
 8012a96:	d1f5      	bne.n	8012a84 <__s2b+0x4c>
 8012a98:	f1a5 0408 	sub.w	r4, r5, #8
 8012a9c:	444c      	add	r4, r9
 8012a9e:	1b2d      	subs	r5, r5, r4
 8012aa0:	1963      	adds	r3, r4, r5
 8012aa2:	42bb      	cmp	r3, r7
 8012aa4:	db04      	blt.n	8012ab0 <__s2b+0x78>
 8012aa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012aaa:	340a      	adds	r4, #10
 8012aac:	2509      	movs	r5, #9
 8012aae:	e7f6      	b.n	8012a9e <__s2b+0x66>
 8012ab0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8012ab4:	4601      	mov	r1, r0
 8012ab6:	3b30      	subs	r3, #48	; 0x30
 8012ab8:	220a      	movs	r2, #10
 8012aba:	4630      	mov	r0, r6
 8012abc:	f7ff ff76 	bl	80129ac <__multadd>
 8012ac0:	e7ee      	b.n	8012aa0 <__s2b+0x68>
 8012ac2:	bf00      	nop
 8012ac4:	08014e48 	.word	0x08014e48
 8012ac8:	08014ed4 	.word	0x08014ed4

08012acc <__hi0bits>:
 8012acc:	0c03      	lsrs	r3, r0, #16
 8012ace:	041b      	lsls	r3, r3, #16
 8012ad0:	b9d3      	cbnz	r3, 8012b08 <__hi0bits+0x3c>
 8012ad2:	0400      	lsls	r0, r0, #16
 8012ad4:	2310      	movs	r3, #16
 8012ad6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8012ada:	bf04      	itt	eq
 8012adc:	0200      	lsleq	r0, r0, #8
 8012ade:	3308      	addeq	r3, #8
 8012ae0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8012ae4:	bf04      	itt	eq
 8012ae6:	0100      	lsleq	r0, r0, #4
 8012ae8:	3304      	addeq	r3, #4
 8012aea:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8012aee:	bf04      	itt	eq
 8012af0:	0080      	lsleq	r0, r0, #2
 8012af2:	3302      	addeq	r3, #2
 8012af4:	2800      	cmp	r0, #0
 8012af6:	db05      	blt.n	8012b04 <__hi0bits+0x38>
 8012af8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8012afc:	f103 0301 	add.w	r3, r3, #1
 8012b00:	bf08      	it	eq
 8012b02:	2320      	moveq	r3, #32
 8012b04:	4618      	mov	r0, r3
 8012b06:	4770      	bx	lr
 8012b08:	2300      	movs	r3, #0
 8012b0a:	e7e4      	b.n	8012ad6 <__hi0bits+0xa>

08012b0c <__lo0bits>:
 8012b0c:	6803      	ldr	r3, [r0, #0]
 8012b0e:	f013 0207 	ands.w	r2, r3, #7
 8012b12:	4601      	mov	r1, r0
 8012b14:	d00b      	beq.n	8012b2e <__lo0bits+0x22>
 8012b16:	07da      	lsls	r2, r3, #31
 8012b18:	d423      	bmi.n	8012b62 <__lo0bits+0x56>
 8012b1a:	0798      	lsls	r0, r3, #30
 8012b1c:	bf49      	itett	mi
 8012b1e:	085b      	lsrmi	r3, r3, #1
 8012b20:	089b      	lsrpl	r3, r3, #2
 8012b22:	2001      	movmi	r0, #1
 8012b24:	600b      	strmi	r3, [r1, #0]
 8012b26:	bf5c      	itt	pl
 8012b28:	600b      	strpl	r3, [r1, #0]
 8012b2a:	2002      	movpl	r0, #2
 8012b2c:	4770      	bx	lr
 8012b2e:	b298      	uxth	r0, r3
 8012b30:	b9a8      	cbnz	r0, 8012b5e <__lo0bits+0x52>
 8012b32:	0c1b      	lsrs	r3, r3, #16
 8012b34:	2010      	movs	r0, #16
 8012b36:	b2da      	uxtb	r2, r3
 8012b38:	b90a      	cbnz	r2, 8012b3e <__lo0bits+0x32>
 8012b3a:	3008      	adds	r0, #8
 8012b3c:	0a1b      	lsrs	r3, r3, #8
 8012b3e:	071a      	lsls	r2, r3, #28
 8012b40:	bf04      	itt	eq
 8012b42:	091b      	lsreq	r3, r3, #4
 8012b44:	3004      	addeq	r0, #4
 8012b46:	079a      	lsls	r2, r3, #30
 8012b48:	bf04      	itt	eq
 8012b4a:	089b      	lsreq	r3, r3, #2
 8012b4c:	3002      	addeq	r0, #2
 8012b4e:	07da      	lsls	r2, r3, #31
 8012b50:	d403      	bmi.n	8012b5a <__lo0bits+0x4e>
 8012b52:	085b      	lsrs	r3, r3, #1
 8012b54:	f100 0001 	add.w	r0, r0, #1
 8012b58:	d005      	beq.n	8012b66 <__lo0bits+0x5a>
 8012b5a:	600b      	str	r3, [r1, #0]
 8012b5c:	4770      	bx	lr
 8012b5e:	4610      	mov	r0, r2
 8012b60:	e7e9      	b.n	8012b36 <__lo0bits+0x2a>
 8012b62:	2000      	movs	r0, #0
 8012b64:	4770      	bx	lr
 8012b66:	2020      	movs	r0, #32
 8012b68:	4770      	bx	lr
	...

08012b6c <__i2b>:
 8012b6c:	b510      	push	{r4, lr}
 8012b6e:	460c      	mov	r4, r1
 8012b70:	2101      	movs	r1, #1
 8012b72:	f7ff feb9 	bl	80128e8 <_Balloc>
 8012b76:	4602      	mov	r2, r0
 8012b78:	b928      	cbnz	r0, 8012b86 <__i2b+0x1a>
 8012b7a:	4b05      	ldr	r3, [pc, #20]	; (8012b90 <__i2b+0x24>)
 8012b7c:	4805      	ldr	r0, [pc, #20]	; (8012b94 <__i2b+0x28>)
 8012b7e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8012b82:	f000 fd0f 	bl	80135a4 <__assert_func>
 8012b86:	2301      	movs	r3, #1
 8012b88:	6144      	str	r4, [r0, #20]
 8012b8a:	6103      	str	r3, [r0, #16]
 8012b8c:	bd10      	pop	{r4, pc}
 8012b8e:	bf00      	nop
 8012b90:	08014e48 	.word	0x08014e48
 8012b94:	08014ed4 	.word	0x08014ed4

08012b98 <__multiply>:
 8012b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b9c:	4691      	mov	r9, r2
 8012b9e:	690a      	ldr	r2, [r1, #16]
 8012ba0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012ba4:	429a      	cmp	r2, r3
 8012ba6:	bfb8      	it	lt
 8012ba8:	460b      	movlt	r3, r1
 8012baa:	460c      	mov	r4, r1
 8012bac:	bfbc      	itt	lt
 8012bae:	464c      	movlt	r4, r9
 8012bb0:	4699      	movlt	r9, r3
 8012bb2:	6927      	ldr	r7, [r4, #16]
 8012bb4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8012bb8:	68a3      	ldr	r3, [r4, #8]
 8012bba:	6861      	ldr	r1, [r4, #4]
 8012bbc:	eb07 060a 	add.w	r6, r7, sl
 8012bc0:	42b3      	cmp	r3, r6
 8012bc2:	b085      	sub	sp, #20
 8012bc4:	bfb8      	it	lt
 8012bc6:	3101      	addlt	r1, #1
 8012bc8:	f7ff fe8e 	bl	80128e8 <_Balloc>
 8012bcc:	b930      	cbnz	r0, 8012bdc <__multiply+0x44>
 8012bce:	4602      	mov	r2, r0
 8012bd0:	4b44      	ldr	r3, [pc, #272]	; (8012ce4 <__multiply+0x14c>)
 8012bd2:	4845      	ldr	r0, [pc, #276]	; (8012ce8 <__multiply+0x150>)
 8012bd4:	f240 115d 	movw	r1, #349	; 0x15d
 8012bd8:	f000 fce4 	bl	80135a4 <__assert_func>
 8012bdc:	f100 0514 	add.w	r5, r0, #20
 8012be0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012be4:	462b      	mov	r3, r5
 8012be6:	2200      	movs	r2, #0
 8012be8:	4543      	cmp	r3, r8
 8012bea:	d321      	bcc.n	8012c30 <__multiply+0x98>
 8012bec:	f104 0314 	add.w	r3, r4, #20
 8012bf0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8012bf4:	f109 0314 	add.w	r3, r9, #20
 8012bf8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8012bfc:	9202      	str	r2, [sp, #8]
 8012bfe:	1b3a      	subs	r2, r7, r4
 8012c00:	3a15      	subs	r2, #21
 8012c02:	f022 0203 	bic.w	r2, r2, #3
 8012c06:	3204      	adds	r2, #4
 8012c08:	f104 0115 	add.w	r1, r4, #21
 8012c0c:	428f      	cmp	r7, r1
 8012c0e:	bf38      	it	cc
 8012c10:	2204      	movcc	r2, #4
 8012c12:	9201      	str	r2, [sp, #4]
 8012c14:	9a02      	ldr	r2, [sp, #8]
 8012c16:	9303      	str	r3, [sp, #12]
 8012c18:	429a      	cmp	r2, r3
 8012c1a:	d80c      	bhi.n	8012c36 <__multiply+0x9e>
 8012c1c:	2e00      	cmp	r6, #0
 8012c1e:	dd03      	ble.n	8012c28 <__multiply+0x90>
 8012c20:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012c24:	2b00      	cmp	r3, #0
 8012c26:	d05a      	beq.n	8012cde <__multiply+0x146>
 8012c28:	6106      	str	r6, [r0, #16]
 8012c2a:	b005      	add	sp, #20
 8012c2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c30:	f843 2b04 	str.w	r2, [r3], #4
 8012c34:	e7d8      	b.n	8012be8 <__multiply+0x50>
 8012c36:	f8b3 a000 	ldrh.w	sl, [r3]
 8012c3a:	f1ba 0f00 	cmp.w	sl, #0
 8012c3e:	d024      	beq.n	8012c8a <__multiply+0xf2>
 8012c40:	f104 0e14 	add.w	lr, r4, #20
 8012c44:	46a9      	mov	r9, r5
 8012c46:	f04f 0c00 	mov.w	ip, #0
 8012c4a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8012c4e:	f8d9 1000 	ldr.w	r1, [r9]
 8012c52:	fa1f fb82 	uxth.w	fp, r2
 8012c56:	b289      	uxth	r1, r1
 8012c58:	fb0a 110b 	mla	r1, sl, fp, r1
 8012c5c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8012c60:	f8d9 2000 	ldr.w	r2, [r9]
 8012c64:	4461      	add	r1, ip
 8012c66:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8012c6a:	fb0a c20b 	mla	r2, sl, fp, ip
 8012c6e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8012c72:	b289      	uxth	r1, r1
 8012c74:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8012c78:	4577      	cmp	r7, lr
 8012c7a:	f849 1b04 	str.w	r1, [r9], #4
 8012c7e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8012c82:	d8e2      	bhi.n	8012c4a <__multiply+0xb2>
 8012c84:	9a01      	ldr	r2, [sp, #4]
 8012c86:	f845 c002 	str.w	ip, [r5, r2]
 8012c8a:	9a03      	ldr	r2, [sp, #12]
 8012c8c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8012c90:	3304      	adds	r3, #4
 8012c92:	f1b9 0f00 	cmp.w	r9, #0
 8012c96:	d020      	beq.n	8012cda <__multiply+0x142>
 8012c98:	6829      	ldr	r1, [r5, #0]
 8012c9a:	f104 0c14 	add.w	ip, r4, #20
 8012c9e:	46ae      	mov	lr, r5
 8012ca0:	f04f 0a00 	mov.w	sl, #0
 8012ca4:	f8bc b000 	ldrh.w	fp, [ip]
 8012ca8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8012cac:	fb09 220b 	mla	r2, r9, fp, r2
 8012cb0:	4492      	add	sl, r2
 8012cb2:	b289      	uxth	r1, r1
 8012cb4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8012cb8:	f84e 1b04 	str.w	r1, [lr], #4
 8012cbc:	f85c 2b04 	ldr.w	r2, [ip], #4
 8012cc0:	f8be 1000 	ldrh.w	r1, [lr]
 8012cc4:	0c12      	lsrs	r2, r2, #16
 8012cc6:	fb09 1102 	mla	r1, r9, r2, r1
 8012cca:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8012cce:	4567      	cmp	r7, ip
 8012cd0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8012cd4:	d8e6      	bhi.n	8012ca4 <__multiply+0x10c>
 8012cd6:	9a01      	ldr	r2, [sp, #4]
 8012cd8:	50a9      	str	r1, [r5, r2]
 8012cda:	3504      	adds	r5, #4
 8012cdc:	e79a      	b.n	8012c14 <__multiply+0x7c>
 8012cde:	3e01      	subs	r6, #1
 8012ce0:	e79c      	b.n	8012c1c <__multiply+0x84>
 8012ce2:	bf00      	nop
 8012ce4:	08014e48 	.word	0x08014e48
 8012ce8:	08014ed4 	.word	0x08014ed4

08012cec <__pow5mult>:
 8012cec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012cf0:	4615      	mov	r5, r2
 8012cf2:	f012 0203 	ands.w	r2, r2, #3
 8012cf6:	4606      	mov	r6, r0
 8012cf8:	460f      	mov	r7, r1
 8012cfa:	d007      	beq.n	8012d0c <__pow5mult+0x20>
 8012cfc:	4c25      	ldr	r4, [pc, #148]	; (8012d94 <__pow5mult+0xa8>)
 8012cfe:	3a01      	subs	r2, #1
 8012d00:	2300      	movs	r3, #0
 8012d02:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012d06:	f7ff fe51 	bl	80129ac <__multadd>
 8012d0a:	4607      	mov	r7, r0
 8012d0c:	10ad      	asrs	r5, r5, #2
 8012d0e:	d03d      	beq.n	8012d8c <__pow5mult+0xa0>
 8012d10:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8012d12:	b97c      	cbnz	r4, 8012d34 <__pow5mult+0x48>
 8012d14:	2010      	movs	r0, #16
 8012d16:	f7fc fd79 	bl	800f80c <malloc>
 8012d1a:	4602      	mov	r2, r0
 8012d1c:	6270      	str	r0, [r6, #36]	; 0x24
 8012d1e:	b928      	cbnz	r0, 8012d2c <__pow5mult+0x40>
 8012d20:	4b1d      	ldr	r3, [pc, #116]	; (8012d98 <__pow5mult+0xac>)
 8012d22:	481e      	ldr	r0, [pc, #120]	; (8012d9c <__pow5mult+0xb0>)
 8012d24:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8012d28:	f000 fc3c 	bl	80135a4 <__assert_func>
 8012d2c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012d30:	6004      	str	r4, [r0, #0]
 8012d32:	60c4      	str	r4, [r0, #12]
 8012d34:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8012d38:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012d3c:	b94c      	cbnz	r4, 8012d52 <__pow5mult+0x66>
 8012d3e:	f240 2171 	movw	r1, #625	; 0x271
 8012d42:	4630      	mov	r0, r6
 8012d44:	f7ff ff12 	bl	8012b6c <__i2b>
 8012d48:	2300      	movs	r3, #0
 8012d4a:	f8c8 0008 	str.w	r0, [r8, #8]
 8012d4e:	4604      	mov	r4, r0
 8012d50:	6003      	str	r3, [r0, #0]
 8012d52:	f04f 0900 	mov.w	r9, #0
 8012d56:	07eb      	lsls	r3, r5, #31
 8012d58:	d50a      	bpl.n	8012d70 <__pow5mult+0x84>
 8012d5a:	4639      	mov	r1, r7
 8012d5c:	4622      	mov	r2, r4
 8012d5e:	4630      	mov	r0, r6
 8012d60:	f7ff ff1a 	bl	8012b98 <__multiply>
 8012d64:	4639      	mov	r1, r7
 8012d66:	4680      	mov	r8, r0
 8012d68:	4630      	mov	r0, r6
 8012d6a:	f7ff fdfd 	bl	8012968 <_Bfree>
 8012d6e:	4647      	mov	r7, r8
 8012d70:	106d      	asrs	r5, r5, #1
 8012d72:	d00b      	beq.n	8012d8c <__pow5mult+0xa0>
 8012d74:	6820      	ldr	r0, [r4, #0]
 8012d76:	b938      	cbnz	r0, 8012d88 <__pow5mult+0x9c>
 8012d78:	4622      	mov	r2, r4
 8012d7a:	4621      	mov	r1, r4
 8012d7c:	4630      	mov	r0, r6
 8012d7e:	f7ff ff0b 	bl	8012b98 <__multiply>
 8012d82:	6020      	str	r0, [r4, #0]
 8012d84:	f8c0 9000 	str.w	r9, [r0]
 8012d88:	4604      	mov	r4, r0
 8012d8a:	e7e4      	b.n	8012d56 <__pow5mult+0x6a>
 8012d8c:	4638      	mov	r0, r7
 8012d8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012d92:	bf00      	nop
 8012d94:	08015020 	.word	0x08015020
 8012d98:	08014dd6 	.word	0x08014dd6
 8012d9c:	08014ed4 	.word	0x08014ed4

08012da0 <__lshift>:
 8012da0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012da4:	460c      	mov	r4, r1
 8012da6:	6849      	ldr	r1, [r1, #4]
 8012da8:	6923      	ldr	r3, [r4, #16]
 8012daa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012dae:	68a3      	ldr	r3, [r4, #8]
 8012db0:	4607      	mov	r7, r0
 8012db2:	4691      	mov	r9, r2
 8012db4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012db8:	f108 0601 	add.w	r6, r8, #1
 8012dbc:	42b3      	cmp	r3, r6
 8012dbe:	db0b      	blt.n	8012dd8 <__lshift+0x38>
 8012dc0:	4638      	mov	r0, r7
 8012dc2:	f7ff fd91 	bl	80128e8 <_Balloc>
 8012dc6:	4605      	mov	r5, r0
 8012dc8:	b948      	cbnz	r0, 8012dde <__lshift+0x3e>
 8012dca:	4602      	mov	r2, r0
 8012dcc:	4b2a      	ldr	r3, [pc, #168]	; (8012e78 <__lshift+0xd8>)
 8012dce:	482b      	ldr	r0, [pc, #172]	; (8012e7c <__lshift+0xdc>)
 8012dd0:	f240 11d9 	movw	r1, #473	; 0x1d9
 8012dd4:	f000 fbe6 	bl	80135a4 <__assert_func>
 8012dd8:	3101      	adds	r1, #1
 8012dda:	005b      	lsls	r3, r3, #1
 8012ddc:	e7ee      	b.n	8012dbc <__lshift+0x1c>
 8012dde:	2300      	movs	r3, #0
 8012de0:	f100 0114 	add.w	r1, r0, #20
 8012de4:	f100 0210 	add.w	r2, r0, #16
 8012de8:	4618      	mov	r0, r3
 8012dea:	4553      	cmp	r3, sl
 8012dec:	db37      	blt.n	8012e5e <__lshift+0xbe>
 8012dee:	6920      	ldr	r0, [r4, #16]
 8012df0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012df4:	f104 0314 	add.w	r3, r4, #20
 8012df8:	f019 091f 	ands.w	r9, r9, #31
 8012dfc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012e00:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8012e04:	d02f      	beq.n	8012e66 <__lshift+0xc6>
 8012e06:	f1c9 0e20 	rsb	lr, r9, #32
 8012e0a:	468a      	mov	sl, r1
 8012e0c:	f04f 0c00 	mov.w	ip, #0
 8012e10:	681a      	ldr	r2, [r3, #0]
 8012e12:	fa02 f209 	lsl.w	r2, r2, r9
 8012e16:	ea42 020c 	orr.w	r2, r2, ip
 8012e1a:	f84a 2b04 	str.w	r2, [sl], #4
 8012e1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8012e22:	4298      	cmp	r0, r3
 8012e24:	fa22 fc0e 	lsr.w	ip, r2, lr
 8012e28:	d8f2      	bhi.n	8012e10 <__lshift+0x70>
 8012e2a:	1b03      	subs	r3, r0, r4
 8012e2c:	3b15      	subs	r3, #21
 8012e2e:	f023 0303 	bic.w	r3, r3, #3
 8012e32:	3304      	adds	r3, #4
 8012e34:	f104 0215 	add.w	r2, r4, #21
 8012e38:	4290      	cmp	r0, r2
 8012e3a:	bf38      	it	cc
 8012e3c:	2304      	movcc	r3, #4
 8012e3e:	f841 c003 	str.w	ip, [r1, r3]
 8012e42:	f1bc 0f00 	cmp.w	ip, #0
 8012e46:	d001      	beq.n	8012e4c <__lshift+0xac>
 8012e48:	f108 0602 	add.w	r6, r8, #2
 8012e4c:	3e01      	subs	r6, #1
 8012e4e:	4638      	mov	r0, r7
 8012e50:	612e      	str	r6, [r5, #16]
 8012e52:	4621      	mov	r1, r4
 8012e54:	f7ff fd88 	bl	8012968 <_Bfree>
 8012e58:	4628      	mov	r0, r5
 8012e5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012e5e:	f842 0f04 	str.w	r0, [r2, #4]!
 8012e62:	3301      	adds	r3, #1
 8012e64:	e7c1      	b.n	8012dea <__lshift+0x4a>
 8012e66:	3904      	subs	r1, #4
 8012e68:	f853 2b04 	ldr.w	r2, [r3], #4
 8012e6c:	f841 2f04 	str.w	r2, [r1, #4]!
 8012e70:	4298      	cmp	r0, r3
 8012e72:	d8f9      	bhi.n	8012e68 <__lshift+0xc8>
 8012e74:	e7ea      	b.n	8012e4c <__lshift+0xac>
 8012e76:	bf00      	nop
 8012e78:	08014e48 	.word	0x08014e48
 8012e7c:	08014ed4 	.word	0x08014ed4

08012e80 <__mcmp>:
 8012e80:	b530      	push	{r4, r5, lr}
 8012e82:	6902      	ldr	r2, [r0, #16]
 8012e84:	690c      	ldr	r4, [r1, #16]
 8012e86:	1b12      	subs	r2, r2, r4
 8012e88:	d10e      	bne.n	8012ea8 <__mcmp+0x28>
 8012e8a:	f100 0314 	add.w	r3, r0, #20
 8012e8e:	3114      	adds	r1, #20
 8012e90:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8012e94:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8012e98:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8012e9c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8012ea0:	42a5      	cmp	r5, r4
 8012ea2:	d003      	beq.n	8012eac <__mcmp+0x2c>
 8012ea4:	d305      	bcc.n	8012eb2 <__mcmp+0x32>
 8012ea6:	2201      	movs	r2, #1
 8012ea8:	4610      	mov	r0, r2
 8012eaa:	bd30      	pop	{r4, r5, pc}
 8012eac:	4283      	cmp	r3, r0
 8012eae:	d3f3      	bcc.n	8012e98 <__mcmp+0x18>
 8012eb0:	e7fa      	b.n	8012ea8 <__mcmp+0x28>
 8012eb2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012eb6:	e7f7      	b.n	8012ea8 <__mcmp+0x28>

08012eb8 <__mdiff>:
 8012eb8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ebc:	460c      	mov	r4, r1
 8012ebe:	4606      	mov	r6, r0
 8012ec0:	4611      	mov	r1, r2
 8012ec2:	4620      	mov	r0, r4
 8012ec4:	4690      	mov	r8, r2
 8012ec6:	f7ff ffdb 	bl	8012e80 <__mcmp>
 8012eca:	1e05      	subs	r5, r0, #0
 8012ecc:	d110      	bne.n	8012ef0 <__mdiff+0x38>
 8012ece:	4629      	mov	r1, r5
 8012ed0:	4630      	mov	r0, r6
 8012ed2:	f7ff fd09 	bl	80128e8 <_Balloc>
 8012ed6:	b930      	cbnz	r0, 8012ee6 <__mdiff+0x2e>
 8012ed8:	4b3a      	ldr	r3, [pc, #232]	; (8012fc4 <__mdiff+0x10c>)
 8012eda:	4602      	mov	r2, r0
 8012edc:	f240 2132 	movw	r1, #562	; 0x232
 8012ee0:	4839      	ldr	r0, [pc, #228]	; (8012fc8 <__mdiff+0x110>)
 8012ee2:	f000 fb5f 	bl	80135a4 <__assert_func>
 8012ee6:	2301      	movs	r3, #1
 8012ee8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012eec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ef0:	bfa4      	itt	ge
 8012ef2:	4643      	movge	r3, r8
 8012ef4:	46a0      	movge	r8, r4
 8012ef6:	4630      	mov	r0, r6
 8012ef8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8012efc:	bfa6      	itte	ge
 8012efe:	461c      	movge	r4, r3
 8012f00:	2500      	movge	r5, #0
 8012f02:	2501      	movlt	r5, #1
 8012f04:	f7ff fcf0 	bl	80128e8 <_Balloc>
 8012f08:	b920      	cbnz	r0, 8012f14 <__mdiff+0x5c>
 8012f0a:	4b2e      	ldr	r3, [pc, #184]	; (8012fc4 <__mdiff+0x10c>)
 8012f0c:	4602      	mov	r2, r0
 8012f0e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8012f12:	e7e5      	b.n	8012ee0 <__mdiff+0x28>
 8012f14:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8012f18:	6926      	ldr	r6, [r4, #16]
 8012f1a:	60c5      	str	r5, [r0, #12]
 8012f1c:	f104 0914 	add.w	r9, r4, #20
 8012f20:	f108 0514 	add.w	r5, r8, #20
 8012f24:	f100 0e14 	add.w	lr, r0, #20
 8012f28:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8012f2c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8012f30:	f108 0210 	add.w	r2, r8, #16
 8012f34:	46f2      	mov	sl, lr
 8012f36:	2100      	movs	r1, #0
 8012f38:	f859 3b04 	ldr.w	r3, [r9], #4
 8012f3c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8012f40:	fa1f f883 	uxth.w	r8, r3
 8012f44:	fa11 f18b 	uxtah	r1, r1, fp
 8012f48:	0c1b      	lsrs	r3, r3, #16
 8012f4a:	eba1 0808 	sub.w	r8, r1, r8
 8012f4e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8012f52:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8012f56:	fa1f f888 	uxth.w	r8, r8
 8012f5a:	1419      	asrs	r1, r3, #16
 8012f5c:	454e      	cmp	r6, r9
 8012f5e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8012f62:	f84a 3b04 	str.w	r3, [sl], #4
 8012f66:	d8e7      	bhi.n	8012f38 <__mdiff+0x80>
 8012f68:	1b33      	subs	r3, r6, r4
 8012f6a:	3b15      	subs	r3, #21
 8012f6c:	f023 0303 	bic.w	r3, r3, #3
 8012f70:	3304      	adds	r3, #4
 8012f72:	3415      	adds	r4, #21
 8012f74:	42a6      	cmp	r6, r4
 8012f76:	bf38      	it	cc
 8012f78:	2304      	movcc	r3, #4
 8012f7a:	441d      	add	r5, r3
 8012f7c:	4473      	add	r3, lr
 8012f7e:	469e      	mov	lr, r3
 8012f80:	462e      	mov	r6, r5
 8012f82:	4566      	cmp	r6, ip
 8012f84:	d30e      	bcc.n	8012fa4 <__mdiff+0xec>
 8012f86:	f10c 0203 	add.w	r2, ip, #3
 8012f8a:	1b52      	subs	r2, r2, r5
 8012f8c:	f022 0203 	bic.w	r2, r2, #3
 8012f90:	3d03      	subs	r5, #3
 8012f92:	45ac      	cmp	ip, r5
 8012f94:	bf38      	it	cc
 8012f96:	2200      	movcc	r2, #0
 8012f98:	441a      	add	r2, r3
 8012f9a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8012f9e:	b17b      	cbz	r3, 8012fc0 <__mdiff+0x108>
 8012fa0:	6107      	str	r7, [r0, #16]
 8012fa2:	e7a3      	b.n	8012eec <__mdiff+0x34>
 8012fa4:	f856 8b04 	ldr.w	r8, [r6], #4
 8012fa8:	fa11 f288 	uxtah	r2, r1, r8
 8012fac:	1414      	asrs	r4, r2, #16
 8012fae:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8012fb2:	b292      	uxth	r2, r2
 8012fb4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8012fb8:	f84e 2b04 	str.w	r2, [lr], #4
 8012fbc:	1421      	asrs	r1, r4, #16
 8012fbe:	e7e0      	b.n	8012f82 <__mdiff+0xca>
 8012fc0:	3f01      	subs	r7, #1
 8012fc2:	e7ea      	b.n	8012f9a <__mdiff+0xe2>
 8012fc4:	08014e48 	.word	0x08014e48
 8012fc8:	08014ed4 	.word	0x08014ed4

08012fcc <__ulp>:
 8012fcc:	b082      	sub	sp, #8
 8012fce:	ed8d 0b00 	vstr	d0, [sp]
 8012fd2:	9b01      	ldr	r3, [sp, #4]
 8012fd4:	4912      	ldr	r1, [pc, #72]	; (8013020 <__ulp+0x54>)
 8012fd6:	4019      	ands	r1, r3
 8012fd8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8012fdc:	2900      	cmp	r1, #0
 8012fde:	dd05      	ble.n	8012fec <__ulp+0x20>
 8012fe0:	2200      	movs	r2, #0
 8012fe2:	460b      	mov	r3, r1
 8012fe4:	ec43 2b10 	vmov	d0, r2, r3
 8012fe8:	b002      	add	sp, #8
 8012fea:	4770      	bx	lr
 8012fec:	4249      	negs	r1, r1
 8012fee:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8012ff2:	ea4f 5021 	mov.w	r0, r1, asr #20
 8012ff6:	f04f 0200 	mov.w	r2, #0
 8012ffa:	f04f 0300 	mov.w	r3, #0
 8012ffe:	da04      	bge.n	801300a <__ulp+0x3e>
 8013000:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8013004:	fa41 f300 	asr.w	r3, r1, r0
 8013008:	e7ec      	b.n	8012fe4 <__ulp+0x18>
 801300a:	f1a0 0114 	sub.w	r1, r0, #20
 801300e:	291e      	cmp	r1, #30
 8013010:	bfda      	itte	le
 8013012:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8013016:	fa20 f101 	lsrle.w	r1, r0, r1
 801301a:	2101      	movgt	r1, #1
 801301c:	460a      	mov	r2, r1
 801301e:	e7e1      	b.n	8012fe4 <__ulp+0x18>
 8013020:	7ff00000 	.word	0x7ff00000

08013024 <__b2d>:
 8013024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013026:	6905      	ldr	r5, [r0, #16]
 8013028:	f100 0714 	add.w	r7, r0, #20
 801302c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8013030:	1f2e      	subs	r6, r5, #4
 8013032:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8013036:	4620      	mov	r0, r4
 8013038:	f7ff fd48 	bl	8012acc <__hi0bits>
 801303c:	f1c0 0320 	rsb	r3, r0, #32
 8013040:	280a      	cmp	r0, #10
 8013042:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80130c0 <__b2d+0x9c>
 8013046:	600b      	str	r3, [r1, #0]
 8013048:	dc14      	bgt.n	8013074 <__b2d+0x50>
 801304a:	f1c0 0e0b 	rsb	lr, r0, #11
 801304e:	fa24 f10e 	lsr.w	r1, r4, lr
 8013052:	42b7      	cmp	r7, r6
 8013054:	ea41 030c 	orr.w	r3, r1, ip
 8013058:	bf34      	ite	cc
 801305a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801305e:	2100      	movcs	r1, #0
 8013060:	3015      	adds	r0, #21
 8013062:	fa04 f000 	lsl.w	r0, r4, r0
 8013066:	fa21 f10e 	lsr.w	r1, r1, lr
 801306a:	ea40 0201 	orr.w	r2, r0, r1
 801306e:	ec43 2b10 	vmov	d0, r2, r3
 8013072:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013074:	42b7      	cmp	r7, r6
 8013076:	bf3a      	itte	cc
 8013078:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801307c:	f1a5 0608 	subcc.w	r6, r5, #8
 8013080:	2100      	movcs	r1, #0
 8013082:	380b      	subs	r0, #11
 8013084:	d017      	beq.n	80130b6 <__b2d+0x92>
 8013086:	f1c0 0c20 	rsb	ip, r0, #32
 801308a:	fa04 f500 	lsl.w	r5, r4, r0
 801308e:	42be      	cmp	r6, r7
 8013090:	fa21 f40c 	lsr.w	r4, r1, ip
 8013094:	ea45 0504 	orr.w	r5, r5, r4
 8013098:	bf8c      	ite	hi
 801309a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801309e:	2400      	movls	r4, #0
 80130a0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80130a4:	fa01 f000 	lsl.w	r0, r1, r0
 80130a8:	fa24 f40c 	lsr.w	r4, r4, ip
 80130ac:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80130b0:	ea40 0204 	orr.w	r2, r0, r4
 80130b4:	e7db      	b.n	801306e <__b2d+0x4a>
 80130b6:	ea44 030c 	orr.w	r3, r4, ip
 80130ba:	460a      	mov	r2, r1
 80130bc:	e7d7      	b.n	801306e <__b2d+0x4a>
 80130be:	bf00      	nop
 80130c0:	3ff00000 	.word	0x3ff00000

080130c4 <__d2b>:
 80130c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80130c8:	4689      	mov	r9, r1
 80130ca:	2101      	movs	r1, #1
 80130cc:	ec57 6b10 	vmov	r6, r7, d0
 80130d0:	4690      	mov	r8, r2
 80130d2:	f7ff fc09 	bl	80128e8 <_Balloc>
 80130d6:	4604      	mov	r4, r0
 80130d8:	b930      	cbnz	r0, 80130e8 <__d2b+0x24>
 80130da:	4602      	mov	r2, r0
 80130dc:	4b25      	ldr	r3, [pc, #148]	; (8013174 <__d2b+0xb0>)
 80130de:	4826      	ldr	r0, [pc, #152]	; (8013178 <__d2b+0xb4>)
 80130e0:	f240 310a 	movw	r1, #778	; 0x30a
 80130e4:	f000 fa5e 	bl	80135a4 <__assert_func>
 80130e8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80130ec:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80130f0:	bb35      	cbnz	r5, 8013140 <__d2b+0x7c>
 80130f2:	2e00      	cmp	r6, #0
 80130f4:	9301      	str	r3, [sp, #4]
 80130f6:	d028      	beq.n	801314a <__d2b+0x86>
 80130f8:	4668      	mov	r0, sp
 80130fa:	9600      	str	r6, [sp, #0]
 80130fc:	f7ff fd06 	bl	8012b0c <__lo0bits>
 8013100:	9900      	ldr	r1, [sp, #0]
 8013102:	b300      	cbz	r0, 8013146 <__d2b+0x82>
 8013104:	9a01      	ldr	r2, [sp, #4]
 8013106:	f1c0 0320 	rsb	r3, r0, #32
 801310a:	fa02 f303 	lsl.w	r3, r2, r3
 801310e:	430b      	orrs	r3, r1
 8013110:	40c2      	lsrs	r2, r0
 8013112:	6163      	str	r3, [r4, #20]
 8013114:	9201      	str	r2, [sp, #4]
 8013116:	9b01      	ldr	r3, [sp, #4]
 8013118:	61a3      	str	r3, [r4, #24]
 801311a:	2b00      	cmp	r3, #0
 801311c:	bf14      	ite	ne
 801311e:	2202      	movne	r2, #2
 8013120:	2201      	moveq	r2, #1
 8013122:	6122      	str	r2, [r4, #16]
 8013124:	b1d5      	cbz	r5, 801315c <__d2b+0x98>
 8013126:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801312a:	4405      	add	r5, r0
 801312c:	f8c9 5000 	str.w	r5, [r9]
 8013130:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8013134:	f8c8 0000 	str.w	r0, [r8]
 8013138:	4620      	mov	r0, r4
 801313a:	b003      	add	sp, #12
 801313c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013140:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013144:	e7d5      	b.n	80130f2 <__d2b+0x2e>
 8013146:	6161      	str	r1, [r4, #20]
 8013148:	e7e5      	b.n	8013116 <__d2b+0x52>
 801314a:	a801      	add	r0, sp, #4
 801314c:	f7ff fcde 	bl	8012b0c <__lo0bits>
 8013150:	9b01      	ldr	r3, [sp, #4]
 8013152:	6163      	str	r3, [r4, #20]
 8013154:	2201      	movs	r2, #1
 8013156:	6122      	str	r2, [r4, #16]
 8013158:	3020      	adds	r0, #32
 801315a:	e7e3      	b.n	8013124 <__d2b+0x60>
 801315c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013160:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8013164:	f8c9 0000 	str.w	r0, [r9]
 8013168:	6918      	ldr	r0, [r3, #16]
 801316a:	f7ff fcaf 	bl	8012acc <__hi0bits>
 801316e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013172:	e7df      	b.n	8013134 <__d2b+0x70>
 8013174:	08014e48 	.word	0x08014e48
 8013178:	08014ed4 	.word	0x08014ed4

0801317c <__ratio>:
 801317c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013180:	4688      	mov	r8, r1
 8013182:	4669      	mov	r1, sp
 8013184:	4681      	mov	r9, r0
 8013186:	f7ff ff4d 	bl	8013024 <__b2d>
 801318a:	a901      	add	r1, sp, #4
 801318c:	4640      	mov	r0, r8
 801318e:	ec55 4b10 	vmov	r4, r5, d0
 8013192:	f7ff ff47 	bl	8013024 <__b2d>
 8013196:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801319a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801319e:	eba3 0c02 	sub.w	ip, r3, r2
 80131a2:	e9dd 3200 	ldrd	r3, r2, [sp]
 80131a6:	1a9b      	subs	r3, r3, r2
 80131a8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80131ac:	ec51 0b10 	vmov	r0, r1, d0
 80131b0:	2b00      	cmp	r3, #0
 80131b2:	bfd6      	itet	le
 80131b4:	460a      	movle	r2, r1
 80131b6:	462a      	movgt	r2, r5
 80131b8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80131bc:	468b      	mov	fp, r1
 80131be:	462f      	mov	r7, r5
 80131c0:	bfd4      	ite	le
 80131c2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80131c6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80131ca:	4620      	mov	r0, r4
 80131cc:	ee10 2a10 	vmov	r2, s0
 80131d0:	465b      	mov	r3, fp
 80131d2:	4639      	mov	r1, r7
 80131d4:	f7ed fb62 	bl	800089c <__aeabi_ddiv>
 80131d8:	ec41 0b10 	vmov	d0, r0, r1
 80131dc:	b003      	add	sp, #12
 80131de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080131e2 <__copybits>:
 80131e2:	3901      	subs	r1, #1
 80131e4:	b570      	push	{r4, r5, r6, lr}
 80131e6:	1149      	asrs	r1, r1, #5
 80131e8:	6914      	ldr	r4, [r2, #16]
 80131ea:	3101      	adds	r1, #1
 80131ec:	f102 0314 	add.w	r3, r2, #20
 80131f0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80131f4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80131f8:	1f05      	subs	r5, r0, #4
 80131fa:	42a3      	cmp	r3, r4
 80131fc:	d30c      	bcc.n	8013218 <__copybits+0x36>
 80131fe:	1aa3      	subs	r3, r4, r2
 8013200:	3b11      	subs	r3, #17
 8013202:	f023 0303 	bic.w	r3, r3, #3
 8013206:	3211      	adds	r2, #17
 8013208:	42a2      	cmp	r2, r4
 801320a:	bf88      	it	hi
 801320c:	2300      	movhi	r3, #0
 801320e:	4418      	add	r0, r3
 8013210:	2300      	movs	r3, #0
 8013212:	4288      	cmp	r0, r1
 8013214:	d305      	bcc.n	8013222 <__copybits+0x40>
 8013216:	bd70      	pop	{r4, r5, r6, pc}
 8013218:	f853 6b04 	ldr.w	r6, [r3], #4
 801321c:	f845 6f04 	str.w	r6, [r5, #4]!
 8013220:	e7eb      	b.n	80131fa <__copybits+0x18>
 8013222:	f840 3b04 	str.w	r3, [r0], #4
 8013226:	e7f4      	b.n	8013212 <__copybits+0x30>

08013228 <__any_on>:
 8013228:	f100 0214 	add.w	r2, r0, #20
 801322c:	6900      	ldr	r0, [r0, #16]
 801322e:	114b      	asrs	r3, r1, #5
 8013230:	4298      	cmp	r0, r3
 8013232:	b510      	push	{r4, lr}
 8013234:	db11      	blt.n	801325a <__any_on+0x32>
 8013236:	dd0a      	ble.n	801324e <__any_on+0x26>
 8013238:	f011 011f 	ands.w	r1, r1, #31
 801323c:	d007      	beq.n	801324e <__any_on+0x26>
 801323e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8013242:	fa24 f001 	lsr.w	r0, r4, r1
 8013246:	fa00 f101 	lsl.w	r1, r0, r1
 801324a:	428c      	cmp	r4, r1
 801324c:	d10b      	bne.n	8013266 <__any_on+0x3e>
 801324e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013252:	4293      	cmp	r3, r2
 8013254:	d803      	bhi.n	801325e <__any_on+0x36>
 8013256:	2000      	movs	r0, #0
 8013258:	bd10      	pop	{r4, pc}
 801325a:	4603      	mov	r3, r0
 801325c:	e7f7      	b.n	801324e <__any_on+0x26>
 801325e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8013262:	2900      	cmp	r1, #0
 8013264:	d0f5      	beq.n	8013252 <__any_on+0x2a>
 8013266:	2001      	movs	r0, #1
 8013268:	e7f6      	b.n	8013258 <__any_on+0x30>

0801326a <_calloc_r>:
 801326a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801326c:	fba1 2402 	umull	r2, r4, r1, r2
 8013270:	b94c      	cbnz	r4, 8013286 <_calloc_r+0x1c>
 8013272:	4611      	mov	r1, r2
 8013274:	9201      	str	r2, [sp, #4]
 8013276:	f7fc fb5b 	bl	800f930 <_malloc_r>
 801327a:	9a01      	ldr	r2, [sp, #4]
 801327c:	4605      	mov	r5, r0
 801327e:	b930      	cbnz	r0, 801328e <_calloc_r+0x24>
 8013280:	4628      	mov	r0, r5
 8013282:	b003      	add	sp, #12
 8013284:	bd30      	pop	{r4, r5, pc}
 8013286:	220c      	movs	r2, #12
 8013288:	6002      	str	r2, [r0, #0]
 801328a:	2500      	movs	r5, #0
 801328c:	e7f8      	b.n	8013280 <_calloc_r+0x16>
 801328e:	4621      	mov	r1, r4
 8013290:	f7fc fada 	bl	800f848 <memset>
 8013294:	e7f4      	b.n	8013280 <_calloc_r+0x16>

08013296 <__ssputs_r>:
 8013296:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801329a:	688e      	ldr	r6, [r1, #8]
 801329c:	429e      	cmp	r6, r3
 801329e:	4682      	mov	sl, r0
 80132a0:	460c      	mov	r4, r1
 80132a2:	4690      	mov	r8, r2
 80132a4:	461f      	mov	r7, r3
 80132a6:	d838      	bhi.n	801331a <__ssputs_r+0x84>
 80132a8:	898a      	ldrh	r2, [r1, #12]
 80132aa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80132ae:	d032      	beq.n	8013316 <__ssputs_r+0x80>
 80132b0:	6825      	ldr	r5, [r4, #0]
 80132b2:	6909      	ldr	r1, [r1, #16]
 80132b4:	eba5 0901 	sub.w	r9, r5, r1
 80132b8:	6965      	ldr	r5, [r4, #20]
 80132ba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80132be:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80132c2:	3301      	adds	r3, #1
 80132c4:	444b      	add	r3, r9
 80132c6:	106d      	asrs	r5, r5, #1
 80132c8:	429d      	cmp	r5, r3
 80132ca:	bf38      	it	cc
 80132cc:	461d      	movcc	r5, r3
 80132ce:	0553      	lsls	r3, r2, #21
 80132d0:	d531      	bpl.n	8013336 <__ssputs_r+0xa0>
 80132d2:	4629      	mov	r1, r5
 80132d4:	f7fc fb2c 	bl	800f930 <_malloc_r>
 80132d8:	4606      	mov	r6, r0
 80132da:	b950      	cbnz	r0, 80132f2 <__ssputs_r+0x5c>
 80132dc:	230c      	movs	r3, #12
 80132de:	f8ca 3000 	str.w	r3, [sl]
 80132e2:	89a3      	ldrh	r3, [r4, #12]
 80132e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80132e8:	81a3      	strh	r3, [r4, #12]
 80132ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80132ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80132f2:	6921      	ldr	r1, [r4, #16]
 80132f4:	464a      	mov	r2, r9
 80132f6:	f7fc fa99 	bl	800f82c <memcpy>
 80132fa:	89a3      	ldrh	r3, [r4, #12]
 80132fc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013300:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013304:	81a3      	strh	r3, [r4, #12]
 8013306:	6126      	str	r6, [r4, #16]
 8013308:	6165      	str	r5, [r4, #20]
 801330a:	444e      	add	r6, r9
 801330c:	eba5 0509 	sub.w	r5, r5, r9
 8013310:	6026      	str	r6, [r4, #0]
 8013312:	60a5      	str	r5, [r4, #8]
 8013314:	463e      	mov	r6, r7
 8013316:	42be      	cmp	r6, r7
 8013318:	d900      	bls.n	801331c <__ssputs_r+0x86>
 801331a:	463e      	mov	r6, r7
 801331c:	6820      	ldr	r0, [r4, #0]
 801331e:	4632      	mov	r2, r6
 8013320:	4641      	mov	r1, r8
 8013322:	f000 f972 	bl	801360a <memmove>
 8013326:	68a3      	ldr	r3, [r4, #8]
 8013328:	1b9b      	subs	r3, r3, r6
 801332a:	60a3      	str	r3, [r4, #8]
 801332c:	6823      	ldr	r3, [r4, #0]
 801332e:	4433      	add	r3, r6
 8013330:	6023      	str	r3, [r4, #0]
 8013332:	2000      	movs	r0, #0
 8013334:	e7db      	b.n	80132ee <__ssputs_r+0x58>
 8013336:	462a      	mov	r2, r5
 8013338:	f000 f981 	bl	801363e <_realloc_r>
 801333c:	4606      	mov	r6, r0
 801333e:	2800      	cmp	r0, #0
 8013340:	d1e1      	bne.n	8013306 <__ssputs_r+0x70>
 8013342:	6921      	ldr	r1, [r4, #16]
 8013344:	4650      	mov	r0, sl
 8013346:	f7fc fa87 	bl	800f858 <_free_r>
 801334a:	e7c7      	b.n	80132dc <__ssputs_r+0x46>

0801334c <_svfiprintf_r>:
 801334c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013350:	4698      	mov	r8, r3
 8013352:	898b      	ldrh	r3, [r1, #12]
 8013354:	061b      	lsls	r3, r3, #24
 8013356:	b09d      	sub	sp, #116	; 0x74
 8013358:	4607      	mov	r7, r0
 801335a:	460d      	mov	r5, r1
 801335c:	4614      	mov	r4, r2
 801335e:	d50e      	bpl.n	801337e <_svfiprintf_r+0x32>
 8013360:	690b      	ldr	r3, [r1, #16]
 8013362:	b963      	cbnz	r3, 801337e <_svfiprintf_r+0x32>
 8013364:	2140      	movs	r1, #64	; 0x40
 8013366:	f7fc fae3 	bl	800f930 <_malloc_r>
 801336a:	6028      	str	r0, [r5, #0]
 801336c:	6128      	str	r0, [r5, #16]
 801336e:	b920      	cbnz	r0, 801337a <_svfiprintf_r+0x2e>
 8013370:	230c      	movs	r3, #12
 8013372:	603b      	str	r3, [r7, #0]
 8013374:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013378:	e0d1      	b.n	801351e <_svfiprintf_r+0x1d2>
 801337a:	2340      	movs	r3, #64	; 0x40
 801337c:	616b      	str	r3, [r5, #20]
 801337e:	2300      	movs	r3, #0
 8013380:	9309      	str	r3, [sp, #36]	; 0x24
 8013382:	2320      	movs	r3, #32
 8013384:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013388:	f8cd 800c 	str.w	r8, [sp, #12]
 801338c:	2330      	movs	r3, #48	; 0x30
 801338e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8013538 <_svfiprintf_r+0x1ec>
 8013392:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013396:	f04f 0901 	mov.w	r9, #1
 801339a:	4623      	mov	r3, r4
 801339c:	469a      	mov	sl, r3
 801339e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80133a2:	b10a      	cbz	r2, 80133a8 <_svfiprintf_r+0x5c>
 80133a4:	2a25      	cmp	r2, #37	; 0x25
 80133a6:	d1f9      	bne.n	801339c <_svfiprintf_r+0x50>
 80133a8:	ebba 0b04 	subs.w	fp, sl, r4
 80133ac:	d00b      	beq.n	80133c6 <_svfiprintf_r+0x7a>
 80133ae:	465b      	mov	r3, fp
 80133b0:	4622      	mov	r2, r4
 80133b2:	4629      	mov	r1, r5
 80133b4:	4638      	mov	r0, r7
 80133b6:	f7ff ff6e 	bl	8013296 <__ssputs_r>
 80133ba:	3001      	adds	r0, #1
 80133bc:	f000 80aa 	beq.w	8013514 <_svfiprintf_r+0x1c8>
 80133c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80133c2:	445a      	add	r2, fp
 80133c4:	9209      	str	r2, [sp, #36]	; 0x24
 80133c6:	f89a 3000 	ldrb.w	r3, [sl]
 80133ca:	2b00      	cmp	r3, #0
 80133cc:	f000 80a2 	beq.w	8013514 <_svfiprintf_r+0x1c8>
 80133d0:	2300      	movs	r3, #0
 80133d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80133d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80133da:	f10a 0a01 	add.w	sl, sl, #1
 80133de:	9304      	str	r3, [sp, #16]
 80133e0:	9307      	str	r3, [sp, #28]
 80133e2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80133e6:	931a      	str	r3, [sp, #104]	; 0x68
 80133e8:	4654      	mov	r4, sl
 80133ea:	2205      	movs	r2, #5
 80133ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80133f0:	4851      	ldr	r0, [pc, #324]	; (8013538 <_svfiprintf_r+0x1ec>)
 80133f2:	f7ec ff1d 	bl	8000230 <memchr>
 80133f6:	9a04      	ldr	r2, [sp, #16]
 80133f8:	b9d8      	cbnz	r0, 8013432 <_svfiprintf_r+0xe6>
 80133fa:	06d0      	lsls	r0, r2, #27
 80133fc:	bf44      	itt	mi
 80133fe:	2320      	movmi	r3, #32
 8013400:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013404:	0711      	lsls	r1, r2, #28
 8013406:	bf44      	itt	mi
 8013408:	232b      	movmi	r3, #43	; 0x2b
 801340a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801340e:	f89a 3000 	ldrb.w	r3, [sl]
 8013412:	2b2a      	cmp	r3, #42	; 0x2a
 8013414:	d015      	beq.n	8013442 <_svfiprintf_r+0xf6>
 8013416:	9a07      	ldr	r2, [sp, #28]
 8013418:	4654      	mov	r4, sl
 801341a:	2000      	movs	r0, #0
 801341c:	f04f 0c0a 	mov.w	ip, #10
 8013420:	4621      	mov	r1, r4
 8013422:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013426:	3b30      	subs	r3, #48	; 0x30
 8013428:	2b09      	cmp	r3, #9
 801342a:	d94e      	bls.n	80134ca <_svfiprintf_r+0x17e>
 801342c:	b1b0      	cbz	r0, 801345c <_svfiprintf_r+0x110>
 801342e:	9207      	str	r2, [sp, #28]
 8013430:	e014      	b.n	801345c <_svfiprintf_r+0x110>
 8013432:	eba0 0308 	sub.w	r3, r0, r8
 8013436:	fa09 f303 	lsl.w	r3, r9, r3
 801343a:	4313      	orrs	r3, r2
 801343c:	9304      	str	r3, [sp, #16]
 801343e:	46a2      	mov	sl, r4
 8013440:	e7d2      	b.n	80133e8 <_svfiprintf_r+0x9c>
 8013442:	9b03      	ldr	r3, [sp, #12]
 8013444:	1d19      	adds	r1, r3, #4
 8013446:	681b      	ldr	r3, [r3, #0]
 8013448:	9103      	str	r1, [sp, #12]
 801344a:	2b00      	cmp	r3, #0
 801344c:	bfbb      	ittet	lt
 801344e:	425b      	neglt	r3, r3
 8013450:	f042 0202 	orrlt.w	r2, r2, #2
 8013454:	9307      	strge	r3, [sp, #28]
 8013456:	9307      	strlt	r3, [sp, #28]
 8013458:	bfb8      	it	lt
 801345a:	9204      	strlt	r2, [sp, #16]
 801345c:	7823      	ldrb	r3, [r4, #0]
 801345e:	2b2e      	cmp	r3, #46	; 0x2e
 8013460:	d10c      	bne.n	801347c <_svfiprintf_r+0x130>
 8013462:	7863      	ldrb	r3, [r4, #1]
 8013464:	2b2a      	cmp	r3, #42	; 0x2a
 8013466:	d135      	bne.n	80134d4 <_svfiprintf_r+0x188>
 8013468:	9b03      	ldr	r3, [sp, #12]
 801346a:	1d1a      	adds	r2, r3, #4
 801346c:	681b      	ldr	r3, [r3, #0]
 801346e:	9203      	str	r2, [sp, #12]
 8013470:	2b00      	cmp	r3, #0
 8013472:	bfb8      	it	lt
 8013474:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8013478:	3402      	adds	r4, #2
 801347a:	9305      	str	r3, [sp, #20]
 801347c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8013548 <_svfiprintf_r+0x1fc>
 8013480:	7821      	ldrb	r1, [r4, #0]
 8013482:	2203      	movs	r2, #3
 8013484:	4650      	mov	r0, sl
 8013486:	f7ec fed3 	bl	8000230 <memchr>
 801348a:	b140      	cbz	r0, 801349e <_svfiprintf_r+0x152>
 801348c:	2340      	movs	r3, #64	; 0x40
 801348e:	eba0 000a 	sub.w	r0, r0, sl
 8013492:	fa03 f000 	lsl.w	r0, r3, r0
 8013496:	9b04      	ldr	r3, [sp, #16]
 8013498:	4303      	orrs	r3, r0
 801349a:	3401      	adds	r4, #1
 801349c:	9304      	str	r3, [sp, #16]
 801349e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80134a2:	4826      	ldr	r0, [pc, #152]	; (801353c <_svfiprintf_r+0x1f0>)
 80134a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80134a8:	2206      	movs	r2, #6
 80134aa:	f7ec fec1 	bl	8000230 <memchr>
 80134ae:	2800      	cmp	r0, #0
 80134b0:	d038      	beq.n	8013524 <_svfiprintf_r+0x1d8>
 80134b2:	4b23      	ldr	r3, [pc, #140]	; (8013540 <_svfiprintf_r+0x1f4>)
 80134b4:	bb1b      	cbnz	r3, 80134fe <_svfiprintf_r+0x1b2>
 80134b6:	9b03      	ldr	r3, [sp, #12]
 80134b8:	3307      	adds	r3, #7
 80134ba:	f023 0307 	bic.w	r3, r3, #7
 80134be:	3308      	adds	r3, #8
 80134c0:	9303      	str	r3, [sp, #12]
 80134c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80134c4:	4433      	add	r3, r6
 80134c6:	9309      	str	r3, [sp, #36]	; 0x24
 80134c8:	e767      	b.n	801339a <_svfiprintf_r+0x4e>
 80134ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80134ce:	460c      	mov	r4, r1
 80134d0:	2001      	movs	r0, #1
 80134d2:	e7a5      	b.n	8013420 <_svfiprintf_r+0xd4>
 80134d4:	2300      	movs	r3, #0
 80134d6:	3401      	adds	r4, #1
 80134d8:	9305      	str	r3, [sp, #20]
 80134da:	4619      	mov	r1, r3
 80134dc:	f04f 0c0a 	mov.w	ip, #10
 80134e0:	4620      	mov	r0, r4
 80134e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80134e6:	3a30      	subs	r2, #48	; 0x30
 80134e8:	2a09      	cmp	r2, #9
 80134ea:	d903      	bls.n	80134f4 <_svfiprintf_r+0x1a8>
 80134ec:	2b00      	cmp	r3, #0
 80134ee:	d0c5      	beq.n	801347c <_svfiprintf_r+0x130>
 80134f0:	9105      	str	r1, [sp, #20]
 80134f2:	e7c3      	b.n	801347c <_svfiprintf_r+0x130>
 80134f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80134f8:	4604      	mov	r4, r0
 80134fa:	2301      	movs	r3, #1
 80134fc:	e7f0      	b.n	80134e0 <_svfiprintf_r+0x194>
 80134fe:	ab03      	add	r3, sp, #12
 8013500:	9300      	str	r3, [sp, #0]
 8013502:	462a      	mov	r2, r5
 8013504:	4b0f      	ldr	r3, [pc, #60]	; (8013544 <_svfiprintf_r+0x1f8>)
 8013506:	a904      	add	r1, sp, #16
 8013508:	4638      	mov	r0, r7
 801350a:	f7fc fb25 	bl	800fb58 <_printf_float>
 801350e:	1c42      	adds	r2, r0, #1
 8013510:	4606      	mov	r6, r0
 8013512:	d1d6      	bne.n	80134c2 <_svfiprintf_r+0x176>
 8013514:	89ab      	ldrh	r3, [r5, #12]
 8013516:	065b      	lsls	r3, r3, #25
 8013518:	f53f af2c 	bmi.w	8013374 <_svfiprintf_r+0x28>
 801351c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801351e:	b01d      	add	sp, #116	; 0x74
 8013520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013524:	ab03      	add	r3, sp, #12
 8013526:	9300      	str	r3, [sp, #0]
 8013528:	462a      	mov	r2, r5
 801352a:	4b06      	ldr	r3, [pc, #24]	; (8013544 <_svfiprintf_r+0x1f8>)
 801352c:	a904      	add	r1, sp, #16
 801352e:	4638      	mov	r0, r7
 8013530:	f7fc fdb6 	bl	80100a0 <_printf_i>
 8013534:	e7eb      	b.n	801350e <_svfiprintf_r+0x1c2>
 8013536:	bf00      	nop
 8013538:	0801502c 	.word	0x0801502c
 801353c:	08015036 	.word	0x08015036
 8013540:	0800fb59 	.word	0x0800fb59
 8013544:	08013297 	.word	0x08013297
 8013548:	08015032 	.word	0x08015032
 801354c:	00000000 	.word	0x00000000

08013550 <nan>:
 8013550:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8013558 <nan+0x8>
 8013554:	4770      	bx	lr
 8013556:	bf00      	nop
 8013558:	00000000 	.word	0x00000000
 801355c:	7ff80000 	.word	0x7ff80000

08013560 <strncmp>:
 8013560:	b510      	push	{r4, lr}
 8013562:	b17a      	cbz	r2, 8013584 <strncmp+0x24>
 8013564:	4603      	mov	r3, r0
 8013566:	3901      	subs	r1, #1
 8013568:	1884      	adds	r4, r0, r2
 801356a:	f813 0b01 	ldrb.w	r0, [r3], #1
 801356e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8013572:	4290      	cmp	r0, r2
 8013574:	d101      	bne.n	801357a <strncmp+0x1a>
 8013576:	42a3      	cmp	r3, r4
 8013578:	d101      	bne.n	801357e <strncmp+0x1e>
 801357a:	1a80      	subs	r0, r0, r2
 801357c:	bd10      	pop	{r4, pc}
 801357e:	2800      	cmp	r0, #0
 8013580:	d1f3      	bne.n	801356a <strncmp+0xa>
 8013582:	e7fa      	b.n	801357a <strncmp+0x1a>
 8013584:	4610      	mov	r0, r2
 8013586:	e7f9      	b.n	801357c <strncmp+0x1c>

08013588 <__ascii_wctomb>:
 8013588:	b149      	cbz	r1, 801359e <__ascii_wctomb+0x16>
 801358a:	2aff      	cmp	r2, #255	; 0xff
 801358c:	bf85      	ittet	hi
 801358e:	238a      	movhi	r3, #138	; 0x8a
 8013590:	6003      	strhi	r3, [r0, #0]
 8013592:	700a      	strbls	r2, [r1, #0]
 8013594:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8013598:	bf98      	it	ls
 801359a:	2001      	movls	r0, #1
 801359c:	4770      	bx	lr
 801359e:	4608      	mov	r0, r1
 80135a0:	4770      	bx	lr
	...

080135a4 <__assert_func>:
 80135a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80135a6:	4614      	mov	r4, r2
 80135a8:	461a      	mov	r2, r3
 80135aa:	4b09      	ldr	r3, [pc, #36]	; (80135d0 <__assert_func+0x2c>)
 80135ac:	681b      	ldr	r3, [r3, #0]
 80135ae:	4605      	mov	r5, r0
 80135b0:	68d8      	ldr	r0, [r3, #12]
 80135b2:	b14c      	cbz	r4, 80135c8 <__assert_func+0x24>
 80135b4:	4b07      	ldr	r3, [pc, #28]	; (80135d4 <__assert_func+0x30>)
 80135b6:	9100      	str	r1, [sp, #0]
 80135b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80135bc:	4906      	ldr	r1, [pc, #24]	; (80135d8 <__assert_func+0x34>)
 80135be:	462b      	mov	r3, r5
 80135c0:	f000 f80e 	bl	80135e0 <fiprintf>
 80135c4:	f000 fa84 	bl	8013ad0 <abort>
 80135c8:	4b04      	ldr	r3, [pc, #16]	; (80135dc <__assert_func+0x38>)
 80135ca:	461c      	mov	r4, r3
 80135cc:	e7f3      	b.n	80135b6 <__assert_func+0x12>
 80135ce:	bf00      	nop
 80135d0:	2000002c 	.word	0x2000002c
 80135d4:	0801503d 	.word	0x0801503d
 80135d8:	0801504a 	.word	0x0801504a
 80135dc:	08015078 	.word	0x08015078

080135e0 <fiprintf>:
 80135e0:	b40e      	push	{r1, r2, r3}
 80135e2:	b503      	push	{r0, r1, lr}
 80135e4:	4601      	mov	r1, r0
 80135e6:	ab03      	add	r3, sp, #12
 80135e8:	4805      	ldr	r0, [pc, #20]	; (8013600 <fiprintf+0x20>)
 80135ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80135ee:	6800      	ldr	r0, [r0, #0]
 80135f0:	9301      	str	r3, [sp, #4]
 80135f2:	f000 f87d 	bl	80136f0 <_vfiprintf_r>
 80135f6:	b002      	add	sp, #8
 80135f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80135fc:	b003      	add	sp, #12
 80135fe:	4770      	bx	lr
 8013600:	2000002c 	.word	0x2000002c

08013604 <__retarget_lock_init_recursive>:
 8013604:	4770      	bx	lr

08013606 <__retarget_lock_acquire_recursive>:
 8013606:	4770      	bx	lr

08013608 <__retarget_lock_release_recursive>:
 8013608:	4770      	bx	lr

0801360a <memmove>:
 801360a:	4288      	cmp	r0, r1
 801360c:	b510      	push	{r4, lr}
 801360e:	eb01 0402 	add.w	r4, r1, r2
 8013612:	d902      	bls.n	801361a <memmove+0x10>
 8013614:	4284      	cmp	r4, r0
 8013616:	4623      	mov	r3, r4
 8013618:	d807      	bhi.n	801362a <memmove+0x20>
 801361a:	1e43      	subs	r3, r0, #1
 801361c:	42a1      	cmp	r1, r4
 801361e:	d008      	beq.n	8013632 <memmove+0x28>
 8013620:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013624:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013628:	e7f8      	b.n	801361c <memmove+0x12>
 801362a:	4402      	add	r2, r0
 801362c:	4601      	mov	r1, r0
 801362e:	428a      	cmp	r2, r1
 8013630:	d100      	bne.n	8013634 <memmove+0x2a>
 8013632:	bd10      	pop	{r4, pc}
 8013634:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013638:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801363c:	e7f7      	b.n	801362e <memmove+0x24>

0801363e <_realloc_r>:
 801363e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013642:	4680      	mov	r8, r0
 8013644:	4614      	mov	r4, r2
 8013646:	460e      	mov	r6, r1
 8013648:	b921      	cbnz	r1, 8013654 <_realloc_r+0x16>
 801364a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801364e:	4611      	mov	r1, r2
 8013650:	f7fc b96e 	b.w	800f930 <_malloc_r>
 8013654:	b92a      	cbnz	r2, 8013662 <_realloc_r+0x24>
 8013656:	f7fc f8ff 	bl	800f858 <_free_r>
 801365a:	4625      	mov	r5, r4
 801365c:	4628      	mov	r0, r5
 801365e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013662:	f000 fc59 	bl	8013f18 <_malloc_usable_size_r>
 8013666:	4284      	cmp	r4, r0
 8013668:	4607      	mov	r7, r0
 801366a:	d802      	bhi.n	8013672 <_realloc_r+0x34>
 801366c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8013670:	d812      	bhi.n	8013698 <_realloc_r+0x5a>
 8013672:	4621      	mov	r1, r4
 8013674:	4640      	mov	r0, r8
 8013676:	f7fc f95b 	bl	800f930 <_malloc_r>
 801367a:	4605      	mov	r5, r0
 801367c:	2800      	cmp	r0, #0
 801367e:	d0ed      	beq.n	801365c <_realloc_r+0x1e>
 8013680:	42bc      	cmp	r4, r7
 8013682:	4622      	mov	r2, r4
 8013684:	4631      	mov	r1, r6
 8013686:	bf28      	it	cs
 8013688:	463a      	movcs	r2, r7
 801368a:	f7fc f8cf 	bl	800f82c <memcpy>
 801368e:	4631      	mov	r1, r6
 8013690:	4640      	mov	r0, r8
 8013692:	f7fc f8e1 	bl	800f858 <_free_r>
 8013696:	e7e1      	b.n	801365c <_realloc_r+0x1e>
 8013698:	4635      	mov	r5, r6
 801369a:	e7df      	b.n	801365c <_realloc_r+0x1e>

0801369c <__sfputc_r>:
 801369c:	6893      	ldr	r3, [r2, #8]
 801369e:	3b01      	subs	r3, #1
 80136a0:	2b00      	cmp	r3, #0
 80136a2:	b410      	push	{r4}
 80136a4:	6093      	str	r3, [r2, #8]
 80136a6:	da08      	bge.n	80136ba <__sfputc_r+0x1e>
 80136a8:	6994      	ldr	r4, [r2, #24]
 80136aa:	42a3      	cmp	r3, r4
 80136ac:	db01      	blt.n	80136b2 <__sfputc_r+0x16>
 80136ae:	290a      	cmp	r1, #10
 80136b0:	d103      	bne.n	80136ba <__sfputc_r+0x1e>
 80136b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80136b6:	f000 b94b 	b.w	8013950 <__swbuf_r>
 80136ba:	6813      	ldr	r3, [r2, #0]
 80136bc:	1c58      	adds	r0, r3, #1
 80136be:	6010      	str	r0, [r2, #0]
 80136c0:	7019      	strb	r1, [r3, #0]
 80136c2:	4608      	mov	r0, r1
 80136c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80136c8:	4770      	bx	lr

080136ca <__sfputs_r>:
 80136ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80136cc:	4606      	mov	r6, r0
 80136ce:	460f      	mov	r7, r1
 80136d0:	4614      	mov	r4, r2
 80136d2:	18d5      	adds	r5, r2, r3
 80136d4:	42ac      	cmp	r4, r5
 80136d6:	d101      	bne.n	80136dc <__sfputs_r+0x12>
 80136d8:	2000      	movs	r0, #0
 80136da:	e007      	b.n	80136ec <__sfputs_r+0x22>
 80136dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80136e0:	463a      	mov	r2, r7
 80136e2:	4630      	mov	r0, r6
 80136e4:	f7ff ffda 	bl	801369c <__sfputc_r>
 80136e8:	1c43      	adds	r3, r0, #1
 80136ea:	d1f3      	bne.n	80136d4 <__sfputs_r+0xa>
 80136ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080136f0 <_vfiprintf_r>:
 80136f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80136f4:	460d      	mov	r5, r1
 80136f6:	b09d      	sub	sp, #116	; 0x74
 80136f8:	4614      	mov	r4, r2
 80136fa:	4698      	mov	r8, r3
 80136fc:	4606      	mov	r6, r0
 80136fe:	b118      	cbz	r0, 8013708 <_vfiprintf_r+0x18>
 8013700:	6983      	ldr	r3, [r0, #24]
 8013702:	b90b      	cbnz	r3, 8013708 <_vfiprintf_r+0x18>
 8013704:	f000 fb06 	bl	8013d14 <__sinit>
 8013708:	4b89      	ldr	r3, [pc, #548]	; (8013930 <_vfiprintf_r+0x240>)
 801370a:	429d      	cmp	r5, r3
 801370c:	d11b      	bne.n	8013746 <_vfiprintf_r+0x56>
 801370e:	6875      	ldr	r5, [r6, #4]
 8013710:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013712:	07d9      	lsls	r1, r3, #31
 8013714:	d405      	bmi.n	8013722 <_vfiprintf_r+0x32>
 8013716:	89ab      	ldrh	r3, [r5, #12]
 8013718:	059a      	lsls	r2, r3, #22
 801371a:	d402      	bmi.n	8013722 <_vfiprintf_r+0x32>
 801371c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801371e:	f7ff ff72 	bl	8013606 <__retarget_lock_acquire_recursive>
 8013722:	89ab      	ldrh	r3, [r5, #12]
 8013724:	071b      	lsls	r3, r3, #28
 8013726:	d501      	bpl.n	801372c <_vfiprintf_r+0x3c>
 8013728:	692b      	ldr	r3, [r5, #16]
 801372a:	b9eb      	cbnz	r3, 8013768 <_vfiprintf_r+0x78>
 801372c:	4629      	mov	r1, r5
 801372e:	4630      	mov	r0, r6
 8013730:	f000 f960 	bl	80139f4 <__swsetup_r>
 8013734:	b1c0      	cbz	r0, 8013768 <_vfiprintf_r+0x78>
 8013736:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013738:	07dc      	lsls	r4, r3, #31
 801373a:	d50e      	bpl.n	801375a <_vfiprintf_r+0x6a>
 801373c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013740:	b01d      	add	sp, #116	; 0x74
 8013742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013746:	4b7b      	ldr	r3, [pc, #492]	; (8013934 <_vfiprintf_r+0x244>)
 8013748:	429d      	cmp	r5, r3
 801374a:	d101      	bne.n	8013750 <_vfiprintf_r+0x60>
 801374c:	68b5      	ldr	r5, [r6, #8]
 801374e:	e7df      	b.n	8013710 <_vfiprintf_r+0x20>
 8013750:	4b79      	ldr	r3, [pc, #484]	; (8013938 <_vfiprintf_r+0x248>)
 8013752:	429d      	cmp	r5, r3
 8013754:	bf08      	it	eq
 8013756:	68f5      	ldreq	r5, [r6, #12]
 8013758:	e7da      	b.n	8013710 <_vfiprintf_r+0x20>
 801375a:	89ab      	ldrh	r3, [r5, #12]
 801375c:	0598      	lsls	r0, r3, #22
 801375e:	d4ed      	bmi.n	801373c <_vfiprintf_r+0x4c>
 8013760:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013762:	f7ff ff51 	bl	8013608 <__retarget_lock_release_recursive>
 8013766:	e7e9      	b.n	801373c <_vfiprintf_r+0x4c>
 8013768:	2300      	movs	r3, #0
 801376a:	9309      	str	r3, [sp, #36]	; 0x24
 801376c:	2320      	movs	r3, #32
 801376e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013772:	f8cd 800c 	str.w	r8, [sp, #12]
 8013776:	2330      	movs	r3, #48	; 0x30
 8013778:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801393c <_vfiprintf_r+0x24c>
 801377c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013780:	f04f 0901 	mov.w	r9, #1
 8013784:	4623      	mov	r3, r4
 8013786:	469a      	mov	sl, r3
 8013788:	f813 2b01 	ldrb.w	r2, [r3], #1
 801378c:	b10a      	cbz	r2, 8013792 <_vfiprintf_r+0xa2>
 801378e:	2a25      	cmp	r2, #37	; 0x25
 8013790:	d1f9      	bne.n	8013786 <_vfiprintf_r+0x96>
 8013792:	ebba 0b04 	subs.w	fp, sl, r4
 8013796:	d00b      	beq.n	80137b0 <_vfiprintf_r+0xc0>
 8013798:	465b      	mov	r3, fp
 801379a:	4622      	mov	r2, r4
 801379c:	4629      	mov	r1, r5
 801379e:	4630      	mov	r0, r6
 80137a0:	f7ff ff93 	bl	80136ca <__sfputs_r>
 80137a4:	3001      	adds	r0, #1
 80137a6:	f000 80aa 	beq.w	80138fe <_vfiprintf_r+0x20e>
 80137aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80137ac:	445a      	add	r2, fp
 80137ae:	9209      	str	r2, [sp, #36]	; 0x24
 80137b0:	f89a 3000 	ldrb.w	r3, [sl]
 80137b4:	2b00      	cmp	r3, #0
 80137b6:	f000 80a2 	beq.w	80138fe <_vfiprintf_r+0x20e>
 80137ba:	2300      	movs	r3, #0
 80137bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80137c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80137c4:	f10a 0a01 	add.w	sl, sl, #1
 80137c8:	9304      	str	r3, [sp, #16]
 80137ca:	9307      	str	r3, [sp, #28]
 80137cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80137d0:	931a      	str	r3, [sp, #104]	; 0x68
 80137d2:	4654      	mov	r4, sl
 80137d4:	2205      	movs	r2, #5
 80137d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80137da:	4858      	ldr	r0, [pc, #352]	; (801393c <_vfiprintf_r+0x24c>)
 80137dc:	f7ec fd28 	bl	8000230 <memchr>
 80137e0:	9a04      	ldr	r2, [sp, #16]
 80137e2:	b9d8      	cbnz	r0, 801381c <_vfiprintf_r+0x12c>
 80137e4:	06d1      	lsls	r1, r2, #27
 80137e6:	bf44      	itt	mi
 80137e8:	2320      	movmi	r3, #32
 80137ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80137ee:	0713      	lsls	r3, r2, #28
 80137f0:	bf44      	itt	mi
 80137f2:	232b      	movmi	r3, #43	; 0x2b
 80137f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80137f8:	f89a 3000 	ldrb.w	r3, [sl]
 80137fc:	2b2a      	cmp	r3, #42	; 0x2a
 80137fe:	d015      	beq.n	801382c <_vfiprintf_r+0x13c>
 8013800:	9a07      	ldr	r2, [sp, #28]
 8013802:	4654      	mov	r4, sl
 8013804:	2000      	movs	r0, #0
 8013806:	f04f 0c0a 	mov.w	ip, #10
 801380a:	4621      	mov	r1, r4
 801380c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013810:	3b30      	subs	r3, #48	; 0x30
 8013812:	2b09      	cmp	r3, #9
 8013814:	d94e      	bls.n	80138b4 <_vfiprintf_r+0x1c4>
 8013816:	b1b0      	cbz	r0, 8013846 <_vfiprintf_r+0x156>
 8013818:	9207      	str	r2, [sp, #28]
 801381a:	e014      	b.n	8013846 <_vfiprintf_r+0x156>
 801381c:	eba0 0308 	sub.w	r3, r0, r8
 8013820:	fa09 f303 	lsl.w	r3, r9, r3
 8013824:	4313      	orrs	r3, r2
 8013826:	9304      	str	r3, [sp, #16]
 8013828:	46a2      	mov	sl, r4
 801382a:	e7d2      	b.n	80137d2 <_vfiprintf_r+0xe2>
 801382c:	9b03      	ldr	r3, [sp, #12]
 801382e:	1d19      	adds	r1, r3, #4
 8013830:	681b      	ldr	r3, [r3, #0]
 8013832:	9103      	str	r1, [sp, #12]
 8013834:	2b00      	cmp	r3, #0
 8013836:	bfbb      	ittet	lt
 8013838:	425b      	neglt	r3, r3
 801383a:	f042 0202 	orrlt.w	r2, r2, #2
 801383e:	9307      	strge	r3, [sp, #28]
 8013840:	9307      	strlt	r3, [sp, #28]
 8013842:	bfb8      	it	lt
 8013844:	9204      	strlt	r2, [sp, #16]
 8013846:	7823      	ldrb	r3, [r4, #0]
 8013848:	2b2e      	cmp	r3, #46	; 0x2e
 801384a:	d10c      	bne.n	8013866 <_vfiprintf_r+0x176>
 801384c:	7863      	ldrb	r3, [r4, #1]
 801384e:	2b2a      	cmp	r3, #42	; 0x2a
 8013850:	d135      	bne.n	80138be <_vfiprintf_r+0x1ce>
 8013852:	9b03      	ldr	r3, [sp, #12]
 8013854:	1d1a      	adds	r2, r3, #4
 8013856:	681b      	ldr	r3, [r3, #0]
 8013858:	9203      	str	r2, [sp, #12]
 801385a:	2b00      	cmp	r3, #0
 801385c:	bfb8      	it	lt
 801385e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8013862:	3402      	adds	r4, #2
 8013864:	9305      	str	r3, [sp, #20]
 8013866:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801394c <_vfiprintf_r+0x25c>
 801386a:	7821      	ldrb	r1, [r4, #0]
 801386c:	2203      	movs	r2, #3
 801386e:	4650      	mov	r0, sl
 8013870:	f7ec fcde 	bl	8000230 <memchr>
 8013874:	b140      	cbz	r0, 8013888 <_vfiprintf_r+0x198>
 8013876:	2340      	movs	r3, #64	; 0x40
 8013878:	eba0 000a 	sub.w	r0, r0, sl
 801387c:	fa03 f000 	lsl.w	r0, r3, r0
 8013880:	9b04      	ldr	r3, [sp, #16]
 8013882:	4303      	orrs	r3, r0
 8013884:	3401      	adds	r4, #1
 8013886:	9304      	str	r3, [sp, #16]
 8013888:	f814 1b01 	ldrb.w	r1, [r4], #1
 801388c:	482c      	ldr	r0, [pc, #176]	; (8013940 <_vfiprintf_r+0x250>)
 801388e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013892:	2206      	movs	r2, #6
 8013894:	f7ec fccc 	bl	8000230 <memchr>
 8013898:	2800      	cmp	r0, #0
 801389a:	d03f      	beq.n	801391c <_vfiprintf_r+0x22c>
 801389c:	4b29      	ldr	r3, [pc, #164]	; (8013944 <_vfiprintf_r+0x254>)
 801389e:	bb1b      	cbnz	r3, 80138e8 <_vfiprintf_r+0x1f8>
 80138a0:	9b03      	ldr	r3, [sp, #12]
 80138a2:	3307      	adds	r3, #7
 80138a4:	f023 0307 	bic.w	r3, r3, #7
 80138a8:	3308      	adds	r3, #8
 80138aa:	9303      	str	r3, [sp, #12]
 80138ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80138ae:	443b      	add	r3, r7
 80138b0:	9309      	str	r3, [sp, #36]	; 0x24
 80138b2:	e767      	b.n	8013784 <_vfiprintf_r+0x94>
 80138b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80138b8:	460c      	mov	r4, r1
 80138ba:	2001      	movs	r0, #1
 80138bc:	e7a5      	b.n	801380a <_vfiprintf_r+0x11a>
 80138be:	2300      	movs	r3, #0
 80138c0:	3401      	adds	r4, #1
 80138c2:	9305      	str	r3, [sp, #20]
 80138c4:	4619      	mov	r1, r3
 80138c6:	f04f 0c0a 	mov.w	ip, #10
 80138ca:	4620      	mov	r0, r4
 80138cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80138d0:	3a30      	subs	r2, #48	; 0x30
 80138d2:	2a09      	cmp	r2, #9
 80138d4:	d903      	bls.n	80138de <_vfiprintf_r+0x1ee>
 80138d6:	2b00      	cmp	r3, #0
 80138d8:	d0c5      	beq.n	8013866 <_vfiprintf_r+0x176>
 80138da:	9105      	str	r1, [sp, #20]
 80138dc:	e7c3      	b.n	8013866 <_vfiprintf_r+0x176>
 80138de:	fb0c 2101 	mla	r1, ip, r1, r2
 80138e2:	4604      	mov	r4, r0
 80138e4:	2301      	movs	r3, #1
 80138e6:	e7f0      	b.n	80138ca <_vfiprintf_r+0x1da>
 80138e8:	ab03      	add	r3, sp, #12
 80138ea:	9300      	str	r3, [sp, #0]
 80138ec:	462a      	mov	r2, r5
 80138ee:	4b16      	ldr	r3, [pc, #88]	; (8013948 <_vfiprintf_r+0x258>)
 80138f0:	a904      	add	r1, sp, #16
 80138f2:	4630      	mov	r0, r6
 80138f4:	f7fc f930 	bl	800fb58 <_printf_float>
 80138f8:	4607      	mov	r7, r0
 80138fa:	1c78      	adds	r0, r7, #1
 80138fc:	d1d6      	bne.n	80138ac <_vfiprintf_r+0x1bc>
 80138fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013900:	07d9      	lsls	r1, r3, #31
 8013902:	d405      	bmi.n	8013910 <_vfiprintf_r+0x220>
 8013904:	89ab      	ldrh	r3, [r5, #12]
 8013906:	059a      	lsls	r2, r3, #22
 8013908:	d402      	bmi.n	8013910 <_vfiprintf_r+0x220>
 801390a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801390c:	f7ff fe7c 	bl	8013608 <__retarget_lock_release_recursive>
 8013910:	89ab      	ldrh	r3, [r5, #12]
 8013912:	065b      	lsls	r3, r3, #25
 8013914:	f53f af12 	bmi.w	801373c <_vfiprintf_r+0x4c>
 8013918:	9809      	ldr	r0, [sp, #36]	; 0x24
 801391a:	e711      	b.n	8013740 <_vfiprintf_r+0x50>
 801391c:	ab03      	add	r3, sp, #12
 801391e:	9300      	str	r3, [sp, #0]
 8013920:	462a      	mov	r2, r5
 8013922:	4b09      	ldr	r3, [pc, #36]	; (8013948 <_vfiprintf_r+0x258>)
 8013924:	a904      	add	r1, sp, #16
 8013926:	4630      	mov	r0, r6
 8013928:	f7fc fbba 	bl	80100a0 <_printf_i>
 801392c:	e7e4      	b.n	80138f8 <_vfiprintf_r+0x208>
 801392e:	bf00      	nop
 8013930:	0801509c 	.word	0x0801509c
 8013934:	080150bc 	.word	0x080150bc
 8013938:	0801507c 	.word	0x0801507c
 801393c:	0801502c 	.word	0x0801502c
 8013940:	08015036 	.word	0x08015036
 8013944:	0800fb59 	.word	0x0800fb59
 8013948:	080136cb 	.word	0x080136cb
 801394c:	08015032 	.word	0x08015032

08013950 <__swbuf_r>:
 8013950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013952:	460e      	mov	r6, r1
 8013954:	4614      	mov	r4, r2
 8013956:	4605      	mov	r5, r0
 8013958:	b118      	cbz	r0, 8013962 <__swbuf_r+0x12>
 801395a:	6983      	ldr	r3, [r0, #24]
 801395c:	b90b      	cbnz	r3, 8013962 <__swbuf_r+0x12>
 801395e:	f000 f9d9 	bl	8013d14 <__sinit>
 8013962:	4b21      	ldr	r3, [pc, #132]	; (80139e8 <__swbuf_r+0x98>)
 8013964:	429c      	cmp	r4, r3
 8013966:	d12b      	bne.n	80139c0 <__swbuf_r+0x70>
 8013968:	686c      	ldr	r4, [r5, #4]
 801396a:	69a3      	ldr	r3, [r4, #24]
 801396c:	60a3      	str	r3, [r4, #8]
 801396e:	89a3      	ldrh	r3, [r4, #12]
 8013970:	071a      	lsls	r2, r3, #28
 8013972:	d52f      	bpl.n	80139d4 <__swbuf_r+0x84>
 8013974:	6923      	ldr	r3, [r4, #16]
 8013976:	b36b      	cbz	r3, 80139d4 <__swbuf_r+0x84>
 8013978:	6923      	ldr	r3, [r4, #16]
 801397a:	6820      	ldr	r0, [r4, #0]
 801397c:	1ac0      	subs	r0, r0, r3
 801397e:	6963      	ldr	r3, [r4, #20]
 8013980:	b2f6      	uxtb	r6, r6
 8013982:	4283      	cmp	r3, r0
 8013984:	4637      	mov	r7, r6
 8013986:	dc04      	bgt.n	8013992 <__swbuf_r+0x42>
 8013988:	4621      	mov	r1, r4
 801398a:	4628      	mov	r0, r5
 801398c:	f000 f92e 	bl	8013bec <_fflush_r>
 8013990:	bb30      	cbnz	r0, 80139e0 <__swbuf_r+0x90>
 8013992:	68a3      	ldr	r3, [r4, #8]
 8013994:	3b01      	subs	r3, #1
 8013996:	60a3      	str	r3, [r4, #8]
 8013998:	6823      	ldr	r3, [r4, #0]
 801399a:	1c5a      	adds	r2, r3, #1
 801399c:	6022      	str	r2, [r4, #0]
 801399e:	701e      	strb	r6, [r3, #0]
 80139a0:	6963      	ldr	r3, [r4, #20]
 80139a2:	3001      	adds	r0, #1
 80139a4:	4283      	cmp	r3, r0
 80139a6:	d004      	beq.n	80139b2 <__swbuf_r+0x62>
 80139a8:	89a3      	ldrh	r3, [r4, #12]
 80139aa:	07db      	lsls	r3, r3, #31
 80139ac:	d506      	bpl.n	80139bc <__swbuf_r+0x6c>
 80139ae:	2e0a      	cmp	r6, #10
 80139b0:	d104      	bne.n	80139bc <__swbuf_r+0x6c>
 80139b2:	4621      	mov	r1, r4
 80139b4:	4628      	mov	r0, r5
 80139b6:	f000 f919 	bl	8013bec <_fflush_r>
 80139ba:	b988      	cbnz	r0, 80139e0 <__swbuf_r+0x90>
 80139bc:	4638      	mov	r0, r7
 80139be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80139c0:	4b0a      	ldr	r3, [pc, #40]	; (80139ec <__swbuf_r+0x9c>)
 80139c2:	429c      	cmp	r4, r3
 80139c4:	d101      	bne.n	80139ca <__swbuf_r+0x7a>
 80139c6:	68ac      	ldr	r4, [r5, #8]
 80139c8:	e7cf      	b.n	801396a <__swbuf_r+0x1a>
 80139ca:	4b09      	ldr	r3, [pc, #36]	; (80139f0 <__swbuf_r+0xa0>)
 80139cc:	429c      	cmp	r4, r3
 80139ce:	bf08      	it	eq
 80139d0:	68ec      	ldreq	r4, [r5, #12]
 80139d2:	e7ca      	b.n	801396a <__swbuf_r+0x1a>
 80139d4:	4621      	mov	r1, r4
 80139d6:	4628      	mov	r0, r5
 80139d8:	f000 f80c 	bl	80139f4 <__swsetup_r>
 80139dc:	2800      	cmp	r0, #0
 80139de:	d0cb      	beq.n	8013978 <__swbuf_r+0x28>
 80139e0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80139e4:	e7ea      	b.n	80139bc <__swbuf_r+0x6c>
 80139e6:	bf00      	nop
 80139e8:	0801509c 	.word	0x0801509c
 80139ec:	080150bc 	.word	0x080150bc
 80139f0:	0801507c 	.word	0x0801507c

080139f4 <__swsetup_r>:
 80139f4:	4b32      	ldr	r3, [pc, #200]	; (8013ac0 <__swsetup_r+0xcc>)
 80139f6:	b570      	push	{r4, r5, r6, lr}
 80139f8:	681d      	ldr	r5, [r3, #0]
 80139fa:	4606      	mov	r6, r0
 80139fc:	460c      	mov	r4, r1
 80139fe:	b125      	cbz	r5, 8013a0a <__swsetup_r+0x16>
 8013a00:	69ab      	ldr	r3, [r5, #24]
 8013a02:	b913      	cbnz	r3, 8013a0a <__swsetup_r+0x16>
 8013a04:	4628      	mov	r0, r5
 8013a06:	f000 f985 	bl	8013d14 <__sinit>
 8013a0a:	4b2e      	ldr	r3, [pc, #184]	; (8013ac4 <__swsetup_r+0xd0>)
 8013a0c:	429c      	cmp	r4, r3
 8013a0e:	d10f      	bne.n	8013a30 <__swsetup_r+0x3c>
 8013a10:	686c      	ldr	r4, [r5, #4]
 8013a12:	89a3      	ldrh	r3, [r4, #12]
 8013a14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013a18:	0719      	lsls	r1, r3, #28
 8013a1a:	d42c      	bmi.n	8013a76 <__swsetup_r+0x82>
 8013a1c:	06dd      	lsls	r5, r3, #27
 8013a1e:	d411      	bmi.n	8013a44 <__swsetup_r+0x50>
 8013a20:	2309      	movs	r3, #9
 8013a22:	6033      	str	r3, [r6, #0]
 8013a24:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013a28:	81a3      	strh	r3, [r4, #12]
 8013a2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013a2e:	e03e      	b.n	8013aae <__swsetup_r+0xba>
 8013a30:	4b25      	ldr	r3, [pc, #148]	; (8013ac8 <__swsetup_r+0xd4>)
 8013a32:	429c      	cmp	r4, r3
 8013a34:	d101      	bne.n	8013a3a <__swsetup_r+0x46>
 8013a36:	68ac      	ldr	r4, [r5, #8]
 8013a38:	e7eb      	b.n	8013a12 <__swsetup_r+0x1e>
 8013a3a:	4b24      	ldr	r3, [pc, #144]	; (8013acc <__swsetup_r+0xd8>)
 8013a3c:	429c      	cmp	r4, r3
 8013a3e:	bf08      	it	eq
 8013a40:	68ec      	ldreq	r4, [r5, #12]
 8013a42:	e7e6      	b.n	8013a12 <__swsetup_r+0x1e>
 8013a44:	0758      	lsls	r0, r3, #29
 8013a46:	d512      	bpl.n	8013a6e <__swsetup_r+0x7a>
 8013a48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013a4a:	b141      	cbz	r1, 8013a5e <__swsetup_r+0x6a>
 8013a4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013a50:	4299      	cmp	r1, r3
 8013a52:	d002      	beq.n	8013a5a <__swsetup_r+0x66>
 8013a54:	4630      	mov	r0, r6
 8013a56:	f7fb feff 	bl	800f858 <_free_r>
 8013a5a:	2300      	movs	r3, #0
 8013a5c:	6363      	str	r3, [r4, #52]	; 0x34
 8013a5e:	89a3      	ldrh	r3, [r4, #12]
 8013a60:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013a64:	81a3      	strh	r3, [r4, #12]
 8013a66:	2300      	movs	r3, #0
 8013a68:	6063      	str	r3, [r4, #4]
 8013a6a:	6923      	ldr	r3, [r4, #16]
 8013a6c:	6023      	str	r3, [r4, #0]
 8013a6e:	89a3      	ldrh	r3, [r4, #12]
 8013a70:	f043 0308 	orr.w	r3, r3, #8
 8013a74:	81a3      	strh	r3, [r4, #12]
 8013a76:	6923      	ldr	r3, [r4, #16]
 8013a78:	b94b      	cbnz	r3, 8013a8e <__swsetup_r+0x9a>
 8013a7a:	89a3      	ldrh	r3, [r4, #12]
 8013a7c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013a80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013a84:	d003      	beq.n	8013a8e <__swsetup_r+0x9a>
 8013a86:	4621      	mov	r1, r4
 8013a88:	4630      	mov	r0, r6
 8013a8a:	f000 fa05 	bl	8013e98 <__smakebuf_r>
 8013a8e:	89a0      	ldrh	r0, [r4, #12]
 8013a90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013a94:	f010 0301 	ands.w	r3, r0, #1
 8013a98:	d00a      	beq.n	8013ab0 <__swsetup_r+0xbc>
 8013a9a:	2300      	movs	r3, #0
 8013a9c:	60a3      	str	r3, [r4, #8]
 8013a9e:	6963      	ldr	r3, [r4, #20]
 8013aa0:	425b      	negs	r3, r3
 8013aa2:	61a3      	str	r3, [r4, #24]
 8013aa4:	6923      	ldr	r3, [r4, #16]
 8013aa6:	b943      	cbnz	r3, 8013aba <__swsetup_r+0xc6>
 8013aa8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013aac:	d1ba      	bne.n	8013a24 <__swsetup_r+0x30>
 8013aae:	bd70      	pop	{r4, r5, r6, pc}
 8013ab0:	0781      	lsls	r1, r0, #30
 8013ab2:	bf58      	it	pl
 8013ab4:	6963      	ldrpl	r3, [r4, #20]
 8013ab6:	60a3      	str	r3, [r4, #8]
 8013ab8:	e7f4      	b.n	8013aa4 <__swsetup_r+0xb0>
 8013aba:	2000      	movs	r0, #0
 8013abc:	e7f7      	b.n	8013aae <__swsetup_r+0xba>
 8013abe:	bf00      	nop
 8013ac0:	2000002c 	.word	0x2000002c
 8013ac4:	0801509c 	.word	0x0801509c
 8013ac8:	080150bc 	.word	0x080150bc
 8013acc:	0801507c 	.word	0x0801507c

08013ad0 <abort>:
 8013ad0:	b508      	push	{r3, lr}
 8013ad2:	2006      	movs	r0, #6
 8013ad4:	f000 fa50 	bl	8013f78 <raise>
 8013ad8:	2001      	movs	r0, #1
 8013ada:	f7ee f87d 	bl	8001bd8 <_exit>
	...

08013ae0 <__sflush_r>:
 8013ae0:	898a      	ldrh	r2, [r1, #12]
 8013ae2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013ae6:	4605      	mov	r5, r0
 8013ae8:	0710      	lsls	r0, r2, #28
 8013aea:	460c      	mov	r4, r1
 8013aec:	d458      	bmi.n	8013ba0 <__sflush_r+0xc0>
 8013aee:	684b      	ldr	r3, [r1, #4]
 8013af0:	2b00      	cmp	r3, #0
 8013af2:	dc05      	bgt.n	8013b00 <__sflush_r+0x20>
 8013af4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013af6:	2b00      	cmp	r3, #0
 8013af8:	dc02      	bgt.n	8013b00 <__sflush_r+0x20>
 8013afa:	2000      	movs	r0, #0
 8013afc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013b00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013b02:	2e00      	cmp	r6, #0
 8013b04:	d0f9      	beq.n	8013afa <__sflush_r+0x1a>
 8013b06:	2300      	movs	r3, #0
 8013b08:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013b0c:	682f      	ldr	r7, [r5, #0]
 8013b0e:	602b      	str	r3, [r5, #0]
 8013b10:	d032      	beq.n	8013b78 <__sflush_r+0x98>
 8013b12:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013b14:	89a3      	ldrh	r3, [r4, #12]
 8013b16:	075a      	lsls	r2, r3, #29
 8013b18:	d505      	bpl.n	8013b26 <__sflush_r+0x46>
 8013b1a:	6863      	ldr	r3, [r4, #4]
 8013b1c:	1ac0      	subs	r0, r0, r3
 8013b1e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013b20:	b10b      	cbz	r3, 8013b26 <__sflush_r+0x46>
 8013b22:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013b24:	1ac0      	subs	r0, r0, r3
 8013b26:	2300      	movs	r3, #0
 8013b28:	4602      	mov	r2, r0
 8013b2a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013b2c:	6a21      	ldr	r1, [r4, #32]
 8013b2e:	4628      	mov	r0, r5
 8013b30:	47b0      	blx	r6
 8013b32:	1c43      	adds	r3, r0, #1
 8013b34:	89a3      	ldrh	r3, [r4, #12]
 8013b36:	d106      	bne.n	8013b46 <__sflush_r+0x66>
 8013b38:	6829      	ldr	r1, [r5, #0]
 8013b3a:	291d      	cmp	r1, #29
 8013b3c:	d82c      	bhi.n	8013b98 <__sflush_r+0xb8>
 8013b3e:	4a2a      	ldr	r2, [pc, #168]	; (8013be8 <__sflush_r+0x108>)
 8013b40:	40ca      	lsrs	r2, r1
 8013b42:	07d6      	lsls	r6, r2, #31
 8013b44:	d528      	bpl.n	8013b98 <__sflush_r+0xb8>
 8013b46:	2200      	movs	r2, #0
 8013b48:	6062      	str	r2, [r4, #4]
 8013b4a:	04d9      	lsls	r1, r3, #19
 8013b4c:	6922      	ldr	r2, [r4, #16]
 8013b4e:	6022      	str	r2, [r4, #0]
 8013b50:	d504      	bpl.n	8013b5c <__sflush_r+0x7c>
 8013b52:	1c42      	adds	r2, r0, #1
 8013b54:	d101      	bne.n	8013b5a <__sflush_r+0x7a>
 8013b56:	682b      	ldr	r3, [r5, #0]
 8013b58:	b903      	cbnz	r3, 8013b5c <__sflush_r+0x7c>
 8013b5a:	6560      	str	r0, [r4, #84]	; 0x54
 8013b5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013b5e:	602f      	str	r7, [r5, #0]
 8013b60:	2900      	cmp	r1, #0
 8013b62:	d0ca      	beq.n	8013afa <__sflush_r+0x1a>
 8013b64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013b68:	4299      	cmp	r1, r3
 8013b6a:	d002      	beq.n	8013b72 <__sflush_r+0x92>
 8013b6c:	4628      	mov	r0, r5
 8013b6e:	f7fb fe73 	bl	800f858 <_free_r>
 8013b72:	2000      	movs	r0, #0
 8013b74:	6360      	str	r0, [r4, #52]	; 0x34
 8013b76:	e7c1      	b.n	8013afc <__sflush_r+0x1c>
 8013b78:	6a21      	ldr	r1, [r4, #32]
 8013b7a:	2301      	movs	r3, #1
 8013b7c:	4628      	mov	r0, r5
 8013b7e:	47b0      	blx	r6
 8013b80:	1c41      	adds	r1, r0, #1
 8013b82:	d1c7      	bne.n	8013b14 <__sflush_r+0x34>
 8013b84:	682b      	ldr	r3, [r5, #0]
 8013b86:	2b00      	cmp	r3, #0
 8013b88:	d0c4      	beq.n	8013b14 <__sflush_r+0x34>
 8013b8a:	2b1d      	cmp	r3, #29
 8013b8c:	d001      	beq.n	8013b92 <__sflush_r+0xb2>
 8013b8e:	2b16      	cmp	r3, #22
 8013b90:	d101      	bne.n	8013b96 <__sflush_r+0xb6>
 8013b92:	602f      	str	r7, [r5, #0]
 8013b94:	e7b1      	b.n	8013afa <__sflush_r+0x1a>
 8013b96:	89a3      	ldrh	r3, [r4, #12]
 8013b98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013b9c:	81a3      	strh	r3, [r4, #12]
 8013b9e:	e7ad      	b.n	8013afc <__sflush_r+0x1c>
 8013ba0:	690f      	ldr	r7, [r1, #16]
 8013ba2:	2f00      	cmp	r7, #0
 8013ba4:	d0a9      	beq.n	8013afa <__sflush_r+0x1a>
 8013ba6:	0793      	lsls	r3, r2, #30
 8013ba8:	680e      	ldr	r6, [r1, #0]
 8013baa:	bf08      	it	eq
 8013bac:	694b      	ldreq	r3, [r1, #20]
 8013bae:	600f      	str	r7, [r1, #0]
 8013bb0:	bf18      	it	ne
 8013bb2:	2300      	movne	r3, #0
 8013bb4:	eba6 0807 	sub.w	r8, r6, r7
 8013bb8:	608b      	str	r3, [r1, #8]
 8013bba:	f1b8 0f00 	cmp.w	r8, #0
 8013bbe:	dd9c      	ble.n	8013afa <__sflush_r+0x1a>
 8013bc0:	6a21      	ldr	r1, [r4, #32]
 8013bc2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013bc4:	4643      	mov	r3, r8
 8013bc6:	463a      	mov	r2, r7
 8013bc8:	4628      	mov	r0, r5
 8013bca:	47b0      	blx	r6
 8013bcc:	2800      	cmp	r0, #0
 8013bce:	dc06      	bgt.n	8013bde <__sflush_r+0xfe>
 8013bd0:	89a3      	ldrh	r3, [r4, #12]
 8013bd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013bd6:	81a3      	strh	r3, [r4, #12]
 8013bd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013bdc:	e78e      	b.n	8013afc <__sflush_r+0x1c>
 8013bde:	4407      	add	r7, r0
 8013be0:	eba8 0800 	sub.w	r8, r8, r0
 8013be4:	e7e9      	b.n	8013bba <__sflush_r+0xda>
 8013be6:	bf00      	nop
 8013be8:	20400001 	.word	0x20400001

08013bec <_fflush_r>:
 8013bec:	b538      	push	{r3, r4, r5, lr}
 8013bee:	690b      	ldr	r3, [r1, #16]
 8013bf0:	4605      	mov	r5, r0
 8013bf2:	460c      	mov	r4, r1
 8013bf4:	b913      	cbnz	r3, 8013bfc <_fflush_r+0x10>
 8013bf6:	2500      	movs	r5, #0
 8013bf8:	4628      	mov	r0, r5
 8013bfa:	bd38      	pop	{r3, r4, r5, pc}
 8013bfc:	b118      	cbz	r0, 8013c06 <_fflush_r+0x1a>
 8013bfe:	6983      	ldr	r3, [r0, #24]
 8013c00:	b90b      	cbnz	r3, 8013c06 <_fflush_r+0x1a>
 8013c02:	f000 f887 	bl	8013d14 <__sinit>
 8013c06:	4b14      	ldr	r3, [pc, #80]	; (8013c58 <_fflush_r+0x6c>)
 8013c08:	429c      	cmp	r4, r3
 8013c0a:	d11b      	bne.n	8013c44 <_fflush_r+0x58>
 8013c0c:	686c      	ldr	r4, [r5, #4]
 8013c0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013c12:	2b00      	cmp	r3, #0
 8013c14:	d0ef      	beq.n	8013bf6 <_fflush_r+0xa>
 8013c16:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013c18:	07d0      	lsls	r0, r2, #31
 8013c1a:	d404      	bmi.n	8013c26 <_fflush_r+0x3a>
 8013c1c:	0599      	lsls	r1, r3, #22
 8013c1e:	d402      	bmi.n	8013c26 <_fflush_r+0x3a>
 8013c20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013c22:	f7ff fcf0 	bl	8013606 <__retarget_lock_acquire_recursive>
 8013c26:	4628      	mov	r0, r5
 8013c28:	4621      	mov	r1, r4
 8013c2a:	f7ff ff59 	bl	8013ae0 <__sflush_r>
 8013c2e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013c30:	07da      	lsls	r2, r3, #31
 8013c32:	4605      	mov	r5, r0
 8013c34:	d4e0      	bmi.n	8013bf8 <_fflush_r+0xc>
 8013c36:	89a3      	ldrh	r3, [r4, #12]
 8013c38:	059b      	lsls	r3, r3, #22
 8013c3a:	d4dd      	bmi.n	8013bf8 <_fflush_r+0xc>
 8013c3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013c3e:	f7ff fce3 	bl	8013608 <__retarget_lock_release_recursive>
 8013c42:	e7d9      	b.n	8013bf8 <_fflush_r+0xc>
 8013c44:	4b05      	ldr	r3, [pc, #20]	; (8013c5c <_fflush_r+0x70>)
 8013c46:	429c      	cmp	r4, r3
 8013c48:	d101      	bne.n	8013c4e <_fflush_r+0x62>
 8013c4a:	68ac      	ldr	r4, [r5, #8]
 8013c4c:	e7df      	b.n	8013c0e <_fflush_r+0x22>
 8013c4e:	4b04      	ldr	r3, [pc, #16]	; (8013c60 <_fflush_r+0x74>)
 8013c50:	429c      	cmp	r4, r3
 8013c52:	bf08      	it	eq
 8013c54:	68ec      	ldreq	r4, [r5, #12]
 8013c56:	e7da      	b.n	8013c0e <_fflush_r+0x22>
 8013c58:	0801509c 	.word	0x0801509c
 8013c5c:	080150bc 	.word	0x080150bc
 8013c60:	0801507c 	.word	0x0801507c

08013c64 <std>:
 8013c64:	2300      	movs	r3, #0
 8013c66:	b510      	push	{r4, lr}
 8013c68:	4604      	mov	r4, r0
 8013c6a:	e9c0 3300 	strd	r3, r3, [r0]
 8013c6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013c72:	6083      	str	r3, [r0, #8]
 8013c74:	8181      	strh	r1, [r0, #12]
 8013c76:	6643      	str	r3, [r0, #100]	; 0x64
 8013c78:	81c2      	strh	r2, [r0, #14]
 8013c7a:	6183      	str	r3, [r0, #24]
 8013c7c:	4619      	mov	r1, r3
 8013c7e:	2208      	movs	r2, #8
 8013c80:	305c      	adds	r0, #92	; 0x5c
 8013c82:	f7fb fde1 	bl	800f848 <memset>
 8013c86:	4b05      	ldr	r3, [pc, #20]	; (8013c9c <std+0x38>)
 8013c88:	6263      	str	r3, [r4, #36]	; 0x24
 8013c8a:	4b05      	ldr	r3, [pc, #20]	; (8013ca0 <std+0x3c>)
 8013c8c:	62a3      	str	r3, [r4, #40]	; 0x28
 8013c8e:	4b05      	ldr	r3, [pc, #20]	; (8013ca4 <std+0x40>)
 8013c90:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013c92:	4b05      	ldr	r3, [pc, #20]	; (8013ca8 <std+0x44>)
 8013c94:	6224      	str	r4, [r4, #32]
 8013c96:	6323      	str	r3, [r4, #48]	; 0x30
 8013c98:	bd10      	pop	{r4, pc}
 8013c9a:	bf00      	nop
 8013c9c:	08013fb1 	.word	0x08013fb1
 8013ca0:	08013fd3 	.word	0x08013fd3
 8013ca4:	0801400b 	.word	0x0801400b
 8013ca8:	0801402f 	.word	0x0801402f

08013cac <_cleanup_r>:
 8013cac:	4901      	ldr	r1, [pc, #4]	; (8013cb4 <_cleanup_r+0x8>)
 8013cae:	f000 b8af 	b.w	8013e10 <_fwalk_reent>
 8013cb2:	bf00      	nop
 8013cb4:	08013bed 	.word	0x08013bed

08013cb8 <__sfmoreglue>:
 8013cb8:	b570      	push	{r4, r5, r6, lr}
 8013cba:	2268      	movs	r2, #104	; 0x68
 8013cbc:	1e4d      	subs	r5, r1, #1
 8013cbe:	4355      	muls	r5, r2
 8013cc0:	460e      	mov	r6, r1
 8013cc2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013cc6:	f7fb fe33 	bl	800f930 <_malloc_r>
 8013cca:	4604      	mov	r4, r0
 8013ccc:	b140      	cbz	r0, 8013ce0 <__sfmoreglue+0x28>
 8013cce:	2100      	movs	r1, #0
 8013cd0:	e9c0 1600 	strd	r1, r6, [r0]
 8013cd4:	300c      	adds	r0, #12
 8013cd6:	60a0      	str	r0, [r4, #8]
 8013cd8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013cdc:	f7fb fdb4 	bl	800f848 <memset>
 8013ce0:	4620      	mov	r0, r4
 8013ce2:	bd70      	pop	{r4, r5, r6, pc}

08013ce4 <__sfp_lock_acquire>:
 8013ce4:	4801      	ldr	r0, [pc, #4]	; (8013cec <__sfp_lock_acquire+0x8>)
 8013ce6:	f7ff bc8e 	b.w	8013606 <__retarget_lock_acquire_recursive>
 8013cea:	bf00      	nop
 8013cec:	20003011 	.word	0x20003011

08013cf0 <__sfp_lock_release>:
 8013cf0:	4801      	ldr	r0, [pc, #4]	; (8013cf8 <__sfp_lock_release+0x8>)
 8013cf2:	f7ff bc89 	b.w	8013608 <__retarget_lock_release_recursive>
 8013cf6:	bf00      	nop
 8013cf8:	20003011 	.word	0x20003011

08013cfc <__sinit_lock_acquire>:
 8013cfc:	4801      	ldr	r0, [pc, #4]	; (8013d04 <__sinit_lock_acquire+0x8>)
 8013cfe:	f7ff bc82 	b.w	8013606 <__retarget_lock_acquire_recursive>
 8013d02:	bf00      	nop
 8013d04:	20003012 	.word	0x20003012

08013d08 <__sinit_lock_release>:
 8013d08:	4801      	ldr	r0, [pc, #4]	; (8013d10 <__sinit_lock_release+0x8>)
 8013d0a:	f7ff bc7d 	b.w	8013608 <__retarget_lock_release_recursive>
 8013d0e:	bf00      	nop
 8013d10:	20003012 	.word	0x20003012

08013d14 <__sinit>:
 8013d14:	b510      	push	{r4, lr}
 8013d16:	4604      	mov	r4, r0
 8013d18:	f7ff fff0 	bl	8013cfc <__sinit_lock_acquire>
 8013d1c:	69a3      	ldr	r3, [r4, #24]
 8013d1e:	b11b      	cbz	r3, 8013d28 <__sinit+0x14>
 8013d20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013d24:	f7ff bff0 	b.w	8013d08 <__sinit_lock_release>
 8013d28:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8013d2c:	6523      	str	r3, [r4, #80]	; 0x50
 8013d2e:	4b13      	ldr	r3, [pc, #76]	; (8013d7c <__sinit+0x68>)
 8013d30:	4a13      	ldr	r2, [pc, #76]	; (8013d80 <__sinit+0x6c>)
 8013d32:	681b      	ldr	r3, [r3, #0]
 8013d34:	62a2      	str	r2, [r4, #40]	; 0x28
 8013d36:	42a3      	cmp	r3, r4
 8013d38:	bf04      	itt	eq
 8013d3a:	2301      	moveq	r3, #1
 8013d3c:	61a3      	streq	r3, [r4, #24]
 8013d3e:	4620      	mov	r0, r4
 8013d40:	f000 f820 	bl	8013d84 <__sfp>
 8013d44:	6060      	str	r0, [r4, #4]
 8013d46:	4620      	mov	r0, r4
 8013d48:	f000 f81c 	bl	8013d84 <__sfp>
 8013d4c:	60a0      	str	r0, [r4, #8]
 8013d4e:	4620      	mov	r0, r4
 8013d50:	f000 f818 	bl	8013d84 <__sfp>
 8013d54:	2200      	movs	r2, #0
 8013d56:	60e0      	str	r0, [r4, #12]
 8013d58:	2104      	movs	r1, #4
 8013d5a:	6860      	ldr	r0, [r4, #4]
 8013d5c:	f7ff ff82 	bl	8013c64 <std>
 8013d60:	68a0      	ldr	r0, [r4, #8]
 8013d62:	2201      	movs	r2, #1
 8013d64:	2109      	movs	r1, #9
 8013d66:	f7ff ff7d 	bl	8013c64 <std>
 8013d6a:	68e0      	ldr	r0, [r4, #12]
 8013d6c:	2202      	movs	r2, #2
 8013d6e:	2112      	movs	r1, #18
 8013d70:	f7ff ff78 	bl	8013c64 <std>
 8013d74:	2301      	movs	r3, #1
 8013d76:	61a3      	str	r3, [r4, #24]
 8013d78:	e7d2      	b.n	8013d20 <__sinit+0xc>
 8013d7a:	bf00      	nop
 8013d7c:	08014c34 	.word	0x08014c34
 8013d80:	08013cad 	.word	0x08013cad

08013d84 <__sfp>:
 8013d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d86:	4607      	mov	r7, r0
 8013d88:	f7ff ffac 	bl	8013ce4 <__sfp_lock_acquire>
 8013d8c:	4b1e      	ldr	r3, [pc, #120]	; (8013e08 <__sfp+0x84>)
 8013d8e:	681e      	ldr	r6, [r3, #0]
 8013d90:	69b3      	ldr	r3, [r6, #24]
 8013d92:	b913      	cbnz	r3, 8013d9a <__sfp+0x16>
 8013d94:	4630      	mov	r0, r6
 8013d96:	f7ff ffbd 	bl	8013d14 <__sinit>
 8013d9a:	3648      	adds	r6, #72	; 0x48
 8013d9c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013da0:	3b01      	subs	r3, #1
 8013da2:	d503      	bpl.n	8013dac <__sfp+0x28>
 8013da4:	6833      	ldr	r3, [r6, #0]
 8013da6:	b30b      	cbz	r3, 8013dec <__sfp+0x68>
 8013da8:	6836      	ldr	r6, [r6, #0]
 8013daa:	e7f7      	b.n	8013d9c <__sfp+0x18>
 8013dac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013db0:	b9d5      	cbnz	r5, 8013de8 <__sfp+0x64>
 8013db2:	4b16      	ldr	r3, [pc, #88]	; (8013e0c <__sfp+0x88>)
 8013db4:	60e3      	str	r3, [r4, #12]
 8013db6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8013dba:	6665      	str	r5, [r4, #100]	; 0x64
 8013dbc:	f7ff fc22 	bl	8013604 <__retarget_lock_init_recursive>
 8013dc0:	f7ff ff96 	bl	8013cf0 <__sfp_lock_release>
 8013dc4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8013dc8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8013dcc:	6025      	str	r5, [r4, #0]
 8013dce:	61a5      	str	r5, [r4, #24]
 8013dd0:	2208      	movs	r2, #8
 8013dd2:	4629      	mov	r1, r5
 8013dd4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013dd8:	f7fb fd36 	bl	800f848 <memset>
 8013ddc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013de0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013de4:	4620      	mov	r0, r4
 8013de6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013de8:	3468      	adds	r4, #104	; 0x68
 8013dea:	e7d9      	b.n	8013da0 <__sfp+0x1c>
 8013dec:	2104      	movs	r1, #4
 8013dee:	4638      	mov	r0, r7
 8013df0:	f7ff ff62 	bl	8013cb8 <__sfmoreglue>
 8013df4:	4604      	mov	r4, r0
 8013df6:	6030      	str	r0, [r6, #0]
 8013df8:	2800      	cmp	r0, #0
 8013dfa:	d1d5      	bne.n	8013da8 <__sfp+0x24>
 8013dfc:	f7ff ff78 	bl	8013cf0 <__sfp_lock_release>
 8013e00:	230c      	movs	r3, #12
 8013e02:	603b      	str	r3, [r7, #0]
 8013e04:	e7ee      	b.n	8013de4 <__sfp+0x60>
 8013e06:	bf00      	nop
 8013e08:	08014c34 	.word	0x08014c34
 8013e0c:	ffff0001 	.word	0xffff0001

08013e10 <_fwalk_reent>:
 8013e10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013e14:	4606      	mov	r6, r0
 8013e16:	4688      	mov	r8, r1
 8013e18:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013e1c:	2700      	movs	r7, #0
 8013e1e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013e22:	f1b9 0901 	subs.w	r9, r9, #1
 8013e26:	d505      	bpl.n	8013e34 <_fwalk_reent+0x24>
 8013e28:	6824      	ldr	r4, [r4, #0]
 8013e2a:	2c00      	cmp	r4, #0
 8013e2c:	d1f7      	bne.n	8013e1e <_fwalk_reent+0xe>
 8013e2e:	4638      	mov	r0, r7
 8013e30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013e34:	89ab      	ldrh	r3, [r5, #12]
 8013e36:	2b01      	cmp	r3, #1
 8013e38:	d907      	bls.n	8013e4a <_fwalk_reent+0x3a>
 8013e3a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013e3e:	3301      	adds	r3, #1
 8013e40:	d003      	beq.n	8013e4a <_fwalk_reent+0x3a>
 8013e42:	4629      	mov	r1, r5
 8013e44:	4630      	mov	r0, r6
 8013e46:	47c0      	blx	r8
 8013e48:	4307      	orrs	r7, r0
 8013e4a:	3568      	adds	r5, #104	; 0x68
 8013e4c:	e7e9      	b.n	8013e22 <_fwalk_reent+0x12>

08013e4e <__swhatbuf_r>:
 8013e4e:	b570      	push	{r4, r5, r6, lr}
 8013e50:	460e      	mov	r6, r1
 8013e52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013e56:	2900      	cmp	r1, #0
 8013e58:	b096      	sub	sp, #88	; 0x58
 8013e5a:	4614      	mov	r4, r2
 8013e5c:	461d      	mov	r5, r3
 8013e5e:	da08      	bge.n	8013e72 <__swhatbuf_r+0x24>
 8013e60:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8013e64:	2200      	movs	r2, #0
 8013e66:	602a      	str	r2, [r5, #0]
 8013e68:	061a      	lsls	r2, r3, #24
 8013e6a:	d410      	bmi.n	8013e8e <__swhatbuf_r+0x40>
 8013e6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013e70:	e00e      	b.n	8013e90 <__swhatbuf_r+0x42>
 8013e72:	466a      	mov	r2, sp
 8013e74:	f000 f902 	bl	801407c <_fstat_r>
 8013e78:	2800      	cmp	r0, #0
 8013e7a:	dbf1      	blt.n	8013e60 <__swhatbuf_r+0x12>
 8013e7c:	9a01      	ldr	r2, [sp, #4]
 8013e7e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013e82:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013e86:	425a      	negs	r2, r3
 8013e88:	415a      	adcs	r2, r3
 8013e8a:	602a      	str	r2, [r5, #0]
 8013e8c:	e7ee      	b.n	8013e6c <__swhatbuf_r+0x1e>
 8013e8e:	2340      	movs	r3, #64	; 0x40
 8013e90:	2000      	movs	r0, #0
 8013e92:	6023      	str	r3, [r4, #0]
 8013e94:	b016      	add	sp, #88	; 0x58
 8013e96:	bd70      	pop	{r4, r5, r6, pc}

08013e98 <__smakebuf_r>:
 8013e98:	898b      	ldrh	r3, [r1, #12]
 8013e9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013e9c:	079d      	lsls	r5, r3, #30
 8013e9e:	4606      	mov	r6, r0
 8013ea0:	460c      	mov	r4, r1
 8013ea2:	d507      	bpl.n	8013eb4 <__smakebuf_r+0x1c>
 8013ea4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013ea8:	6023      	str	r3, [r4, #0]
 8013eaa:	6123      	str	r3, [r4, #16]
 8013eac:	2301      	movs	r3, #1
 8013eae:	6163      	str	r3, [r4, #20]
 8013eb0:	b002      	add	sp, #8
 8013eb2:	bd70      	pop	{r4, r5, r6, pc}
 8013eb4:	ab01      	add	r3, sp, #4
 8013eb6:	466a      	mov	r2, sp
 8013eb8:	f7ff ffc9 	bl	8013e4e <__swhatbuf_r>
 8013ebc:	9900      	ldr	r1, [sp, #0]
 8013ebe:	4605      	mov	r5, r0
 8013ec0:	4630      	mov	r0, r6
 8013ec2:	f7fb fd35 	bl	800f930 <_malloc_r>
 8013ec6:	b948      	cbnz	r0, 8013edc <__smakebuf_r+0x44>
 8013ec8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013ecc:	059a      	lsls	r2, r3, #22
 8013ece:	d4ef      	bmi.n	8013eb0 <__smakebuf_r+0x18>
 8013ed0:	f023 0303 	bic.w	r3, r3, #3
 8013ed4:	f043 0302 	orr.w	r3, r3, #2
 8013ed8:	81a3      	strh	r3, [r4, #12]
 8013eda:	e7e3      	b.n	8013ea4 <__smakebuf_r+0xc>
 8013edc:	4b0d      	ldr	r3, [pc, #52]	; (8013f14 <__smakebuf_r+0x7c>)
 8013ede:	62b3      	str	r3, [r6, #40]	; 0x28
 8013ee0:	89a3      	ldrh	r3, [r4, #12]
 8013ee2:	6020      	str	r0, [r4, #0]
 8013ee4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013ee8:	81a3      	strh	r3, [r4, #12]
 8013eea:	9b00      	ldr	r3, [sp, #0]
 8013eec:	6163      	str	r3, [r4, #20]
 8013eee:	9b01      	ldr	r3, [sp, #4]
 8013ef0:	6120      	str	r0, [r4, #16]
 8013ef2:	b15b      	cbz	r3, 8013f0c <__smakebuf_r+0x74>
 8013ef4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013ef8:	4630      	mov	r0, r6
 8013efa:	f000 f8d1 	bl	80140a0 <_isatty_r>
 8013efe:	b128      	cbz	r0, 8013f0c <__smakebuf_r+0x74>
 8013f00:	89a3      	ldrh	r3, [r4, #12]
 8013f02:	f023 0303 	bic.w	r3, r3, #3
 8013f06:	f043 0301 	orr.w	r3, r3, #1
 8013f0a:	81a3      	strh	r3, [r4, #12]
 8013f0c:	89a0      	ldrh	r0, [r4, #12]
 8013f0e:	4305      	orrs	r5, r0
 8013f10:	81a5      	strh	r5, [r4, #12]
 8013f12:	e7cd      	b.n	8013eb0 <__smakebuf_r+0x18>
 8013f14:	08013cad 	.word	0x08013cad

08013f18 <_malloc_usable_size_r>:
 8013f18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013f1c:	1f18      	subs	r0, r3, #4
 8013f1e:	2b00      	cmp	r3, #0
 8013f20:	bfbc      	itt	lt
 8013f22:	580b      	ldrlt	r3, [r1, r0]
 8013f24:	18c0      	addlt	r0, r0, r3
 8013f26:	4770      	bx	lr

08013f28 <_raise_r>:
 8013f28:	291f      	cmp	r1, #31
 8013f2a:	b538      	push	{r3, r4, r5, lr}
 8013f2c:	4604      	mov	r4, r0
 8013f2e:	460d      	mov	r5, r1
 8013f30:	d904      	bls.n	8013f3c <_raise_r+0x14>
 8013f32:	2316      	movs	r3, #22
 8013f34:	6003      	str	r3, [r0, #0]
 8013f36:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013f3a:	bd38      	pop	{r3, r4, r5, pc}
 8013f3c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8013f3e:	b112      	cbz	r2, 8013f46 <_raise_r+0x1e>
 8013f40:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013f44:	b94b      	cbnz	r3, 8013f5a <_raise_r+0x32>
 8013f46:	4620      	mov	r0, r4
 8013f48:	f000 f830 	bl	8013fac <_getpid_r>
 8013f4c:	462a      	mov	r2, r5
 8013f4e:	4601      	mov	r1, r0
 8013f50:	4620      	mov	r0, r4
 8013f52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013f56:	f000 b817 	b.w	8013f88 <_kill_r>
 8013f5a:	2b01      	cmp	r3, #1
 8013f5c:	d00a      	beq.n	8013f74 <_raise_r+0x4c>
 8013f5e:	1c59      	adds	r1, r3, #1
 8013f60:	d103      	bne.n	8013f6a <_raise_r+0x42>
 8013f62:	2316      	movs	r3, #22
 8013f64:	6003      	str	r3, [r0, #0]
 8013f66:	2001      	movs	r0, #1
 8013f68:	e7e7      	b.n	8013f3a <_raise_r+0x12>
 8013f6a:	2400      	movs	r4, #0
 8013f6c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013f70:	4628      	mov	r0, r5
 8013f72:	4798      	blx	r3
 8013f74:	2000      	movs	r0, #0
 8013f76:	e7e0      	b.n	8013f3a <_raise_r+0x12>

08013f78 <raise>:
 8013f78:	4b02      	ldr	r3, [pc, #8]	; (8013f84 <raise+0xc>)
 8013f7a:	4601      	mov	r1, r0
 8013f7c:	6818      	ldr	r0, [r3, #0]
 8013f7e:	f7ff bfd3 	b.w	8013f28 <_raise_r>
 8013f82:	bf00      	nop
 8013f84:	2000002c 	.word	0x2000002c

08013f88 <_kill_r>:
 8013f88:	b538      	push	{r3, r4, r5, lr}
 8013f8a:	4d07      	ldr	r5, [pc, #28]	; (8013fa8 <_kill_r+0x20>)
 8013f8c:	2300      	movs	r3, #0
 8013f8e:	4604      	mov	r4, r0
 8013f90:	4608      	mov	r0, r1
 8013f92:	4611      	mov	r1, r2
 8013f94:	602b      	str	r3, [r5, #0]
 8013f96:	f7ed fe0f 	bl	8001bb8 <_kill>
 8013f9a:	1c43      	adds	r3, r0, #1
 8013f9c:	d102      	bne.n	8013fa4 <_kill_r+0x1c>
 8013f9e:	682b      	ldr	r3, [r5, #0]
 8013fa0:	b103      	cbz	r3, 8013fa4 <_kill_r+0x1c>
 8013fa2:	6023      	str	r3, [r4, #0]
 8013fa4:	bd38      	pop	{r3, r4, r5, pc}
 8013fa6:	bf00      	nop
 8013fa8:	2000300c 	.word	0x2000300c

08013fac <_getpid_r>:
 8013fac:	f7ed bdfc 	b.w	8001ba8 <_getpid>

08013fb0 <__sread>:
 8013fb0:	b510      	push	{r4, lr}
 8013fb2:	460c      	mov	r4, r1
 8013fb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013fb8:	f000 f894 	bl	80140e4 <_read_r>
 8013fbc:	2800      	cmp	r0, #0
 8013fbe:	bfab      	itete	ge
 8013fc0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013fc2:	89a3      	ldrhlt	r3, [r4, #12]
 8013fc4:	181b      	addge	r3, r3, r0
 8013fc6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013fca:	bfac      	ite	ge
 8013fcc:	6563      	strge	r3, [r4, #84]	; 0x54
 8013fce:	81a3      	strhlt	r3, [r4, #12]
 8013fd0:	bd10      	pop	{r4, pc}

08013fd2 <__swrite>:
 8013fd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013fd6:	461f      	mov	r7, r3
 8013fd8:	898b      	ldrh	r3, [r1, #12]
 8013fda:	05db      	lsls	r3, r3, #23
 8013fdc:	4605      	mov	r5, r0
 8013fde:	460c      	mov	r4, r1
 8013fe0:	4616      	mov	r6, r2
 8013fe2:	d505      	bpl.n	8013ff0 <__swrite+0x1e>
 8013fe4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013fe8:	2302      	movs	r3, #2
 8013fea:	2200      	movs	r2, #0
 8013fec:	f000 f868 	bl	80140c0 <_lseek_r>
 8013ff0:	89a3      	ldrh	r3, [r4, #12]
 8013ff2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013ff6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013ffa:	81a3      	strh	r3, [r4, #12]
 8013ffc:	4632      	mov	r2, r6
 8013ffe:	463b      	mov	r3, r7
 8014000:	4628      	mov	r0, r5
 8014002:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014006:	f000 b817 	b.w	8014038 <_write_r>

0801400a <__sseek>:
 801400a:	b510      	push	{r4, lr}
 801400c:	460c      	mov	r4, r1
 801400e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014012:	f000 f855 	bl	80140c0 <_lseek_r>
 8014016:	1c43      	adds	r3, r0, #1
 8014018:	89a3      	ldrh	r3, [r4, #12]
 801401a:	bf15      	itete	ne
 801401c:	6560      	strne	r0, [r4, #84]	; 0x54
 801401e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014022:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014026:	81a3      	strheq	r3, [r4, #12]
 8014028:	bf18      	it	ne
 801402a:	81a3      	strhne	r3, [r4, #12]
 801402c:	bd10      	pop	{r4, pc}

0801402e <__sclose>:
 801402e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014032:	f000 b813 	b.w	801405c <_close_r>
	...

08014038 <_write_r>:
 8014038:	b538      	push	{r3, r4, r5, lr}
 801403a:	4d07      	ldr	r5, [pc, #28]	; (8014058 <_write_r+0x20>)
 801403c:	4604      	mov	r4, r0
 801403e:	4608      	mov	r0, r1
 8014040:	4611      	mov	r1, r2
 8014042:	2200      	movs	r2, #0
 8014044:	602a      	str	r2, [r5, #0]
 8014046:	461a      	mov	r2, r3
 8014048:	f7ed fded 	bl	8001c26 <_write>
 801404c:	1c43      	adds	r3, r0, #1
 801404e:	d102      	bne.n	8014056 <_write_r+0x1e>
 8014050:	682b      	ldr	r3, [r5, #0]
 8014052:	b103      	cbz	r3, 8014056 <_write_r+0x1e>
 8014054:	6023      	str	r3, [r4, #0]
 8014056:	bd38      	pop	{r3, r4, r5, pc}
 8014058:	2000300c 	.word	0x2000300c

0801405c <_close_r>:
 801405c:	b538      	push	{r3, r4, r5, lr}
 801405e:	4d06      	ldr	r5, [pc, #24]	; (8014078 <_close_r+0x1c>)
 8014060:	2300      	movs	r3, #0
 8014062:	4604      	mov	r4, r0
 8014064:	4608      	mov	r0, r1
 8014066:	602b      	str	r3, [r5, #0]
 8014068:	f7ed fdf9 	bl	8001c5e <_close>
 801406c:	1c43      	adds	r3, r0, #1
 801406e:	d102      	bne.n	8014076 <_close_r+0x1a>
 8014070:	682b      	ldr	r3, [r5, #0]
 8014072:	b103      	cbz	r3, 8014076 <_close_r+0x1a>
 8014074:	6023      	str	r3, [r4, #0]
 8014076:	bd38      	pop	{r3, r4, r5, pc}
 8014078:	2000300c 	.word	0x2000300c

0801407c <_fstat_r>:
 801407c:	b538      	push	{r3, r4, r5, lr}
 801407e:	4d07      	ldr	r5, [pc, #28]	; (801409c <_fstat_r+0x20>)
 8014080:	2300      	movs	r3, #0
 8014082:	4604      	mov	r4, r0
 8014084:	4608      	mov	r0, r1
 8014086:	4611      	mov	r1, r2
 8014088:	602b      	str	r3, [r5, #0]
 801408a:	f7ed fdf4 	bl	8001c76 <_fstat>
 801408e:	1c43      	adds	r3, r0, #1
 8014090:	d102      	bne.n	8014098 <_fstat_r+0x1c>
 8014092:	682b      	ldr	r3, [r5, #0]
 8014094:	b103      	cbz	r3, 8014098 <_fstat_r+0x1c>
 8014096:	6023      	str	r3, [r4, #0]
 8014098:	bd38      	pop	{r3, r4, r5, pc}
 801409a:	bf00      	nop
 801409c:	2000300c 	.word	0x2000300c

080140a0 <_isatty_r>:
 80140a0:	b538      	push	{r3, r4, r5, lr}
 80140a2:	4d06      	ldr	r5, [pc, #24]	; (80140bc <_isatty_r+0x1c>)
 80140a4:	2300      	movs	r3, #0
 80140a6:	4604      	mov	r4, r0
 80140a8:	4608      	mov	r0, r1
 80140aa:	602b      	str	r3, [r5, #0]
 80140ac:	f7ed fdf3 	bl	8001c96 <_isatty>
 80140b0:	1c43      	adds	r3, r0, #1
 80140b2:	d102      	bne.n	80140ba <_isatty_r+0x1a>
 80140b4:	682b      	ldr	r3, [r5, #0]
 80140b6:	b103      	cbz	r3, 80140ba <_isatty_r+0x1a>
 80140b8:	6023      	str	r3, [r4, #0]
 80140ba:	bd38      	pop	{r3, r4, r5, pc}
 80140bc:	2000300c 	.word	0x2000300c

080140c0 <_lseek_r>:
 80140c0:	b538      	push	{r3, r4, r5, lr}
 80140c2:	4d07      	ldr	r5, [pc, #28]	; (80140e0 <_lseek_r+0x20>)
 80140c4:	4604      	mov	r4, r0
 80140c6:	4608      	mov	r0, r1
 80140c8:	4611      	mov	r1, r2
 80140ca:	2200      	movs	r2, #0
 80140cc:	602a      	str	r2, [r5, #0]
 80140ce:	461a      	mov	r2, r3
 80140d0:	f7ed fdec 	bl	8001cac <_lseek>
 80140d4:	1c43      	adds	r3, r0, #1
 80140d6:	d102      	bne.n	80140de <_lseek_r+0x1e>
 80140d8:	682b      	ldr	r3, [r5, #0]
 80140da:	b103      	cbz	r3, 80140de <_lseek_r+0x1e>
 80140dc:	6023      	str	r3, [r4, #0]
 80140de:	bd38      	pop	{r3, r4, r5, pc}
 80140e0:	2000300c 	.word	0x2000300c

080140e4 <_read_r>:
 80140e4:	b538      	push	{r3, r4, r5, lr}
 80140e6:	4d07      	ldr	r5, [pc, #28]	; (8014104 <_read_r+0x20>)
 80140e8:	4604      	mov	r4, r0
 80140ea:	4608      	mov	r0, r1
 80140ec:	4611      	mov	r1, r2
 80140ee:	2200      	movs	r2, #0
 80140f0:	602a      	str	r2, [r5, #0]
 80140f2:	461a      	mov	r2, r3
 80140f4:	f7ed fd7a 	bl	8001bec <_read>
 80140f8:	1c43      	adds	r3, r0, #1
 80140fa:	d102      	bne.n	8014102 <_read_r+0x1e>
 80140fc:	682b      	ldr	r3, [r5, #0]
 80140fe:	b103      	cbz	r3, 8014102 <_read_r+0x1e>
 8014100:	6023      	str	r3, [r4, #0]
 8014102:	bd38      	pop	{r3, r4, r5, pc}
 8014104:	2000300c 	.word	0x2000300c

08014108 <_init>:
 8014108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801410a:	bf00      	nop
 801410c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801410e:	bc08      	pop	{r3}
 8014110:	469e      	mov	lr, r3
 8014112:	4770      	bx	lr

08014114 <_fini>:
 8014114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014116:	bf00      	nop
 8014118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801411a:	bc08      	pop	{r3}
 801411c:	469e      	mov	lr, r3
 801411e:	4770      	bx	lr
