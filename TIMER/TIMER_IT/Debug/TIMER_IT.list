
TIMER_IT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003908  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003ab4  08003ab4  00013ab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003afc  08003afc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003afc  08003afc  00013afc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003b04  08003b04  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b04  08003b04  00013b04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b08  08003b08  00013b08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003b0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f0  2000000c  08003b18  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000fc  08003b18  000200fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000100e0  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d0e  00000000  00000000  0003011c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e58  00000000  00000000  00031e30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000db0  00000000  00000000  00032c88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028363  00000000  00000000  00033a38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fd1a  00000000  00000000  0005bd9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fc94d  00000000  00000000  0006bab5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00168402  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003cb8  00000000  00000000  00168454  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08003a9c 	.word	0x08003a9c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	08003a9c 	.word	0x08003a9c

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f4:	f000 fa77 	bl	80009e6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f8:	f000 f80c 	bl	8000514 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004fc:	f000 f8d8 	bl	80006b0 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000500:	f000 f888 	bl	8000614 <MX_TIM2_Init>
  MX_LPUART1_UART_Init();
 8000504:	f000 f85a 	bl	80005bc <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */
HAL_TIM_Base_Start_IT(&htim2);
 8000508:	4801      	ldr	r0, [pc, #4]	; (8000510 <main+0x20>)
 800050a:	f002 f98b 	bl	8002824 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800050e:	e7fe      	b.n	800050e <main+0x1e>
 8000510:	200000ac 	.word	0x200000ac

08000514 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b096      	sub	sp, #88	; 0x58
 8000518:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800051a:	f107 0314 	add.w	r3, r7, #20
 800051e:	2244      	movs	r2, #68	; 0x44
 8000520:	2100      	movs	r1, #0
 8000522:	4618      	mov	r0, r3
 8000524:	f003 fab2 	bl	8003a8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000528:	463b      	mov	r3, r7
 800052a:	2200      	movs	r2, #0
 800052c:	601a      	str	r2, [r3, #0]
 800052e:	605a      	str	r2, [r3, #4]
 8000530:	609a      	str	r2, [r3, #8]
 8000532:	60da      	str	r2, [r3, #12]
 8000534:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000536:	f44f 7000 	mov.w	r0, #512	; 0x200
 800053a:	f000 fdad 	bl	8001098 <HAL_PWREx_ControlVoltageScaling>
 800053e:	4603      	mov	r3, r0
 8000540:	2b00      	cmp	r3, #0
 8000542:	d001      	beq.n	8000548 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000544:	f000 f932 	bl	80007ac <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000548:	2310      	movs	r3, #16
 800054a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800054c:	2301      	movs	r3, #1
 800054e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000550:	2300      	movs	r3, #0
 8000552:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000554:	2360      	movs	r3, #96	; 0x60
 8000556:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000558:	2302      	movs	r3, #2
 800055a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800055c:	2301      	movs	r3, #1
 800055e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000560:	2301      	movs	r3, #1
 8000562:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000564:	2310      	movs	r3, #16
 8000566:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000568:	2302      	movs	r3, #2
 800056a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800056c:	2302      	movs	r3, #2
 800056e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000570:	2302      	movs	r3, #2
 8000572:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000574:	f107 0314 	add.w	r3, r7, #20
 8000578:	4618      	mov	r0, r3
 800057a:	f000 fdf3 	bl	8001164 <HAL_RCC_OscConfig>
 800057e:	4603      	mov	r3, r0
 8000580:	2b00      	cmp	r3, #0
 8000582:	d001      	beq.n	8000588 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000584:	f000 f912 	bl	80007ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000588:	230f      	movs	r3, #15
 800058a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800058c:	2303      	movs	r3, #3
 800058e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000590:	2300      	movs	r3, #0
 8000592:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000594:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000598:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800059a:	2300      	movs	r3, #0
 800059c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800059e:	463b      	mov	r3, r7
 80005a0:	2101      	movs	r1, #1
 80005a2:	4618      	mov	r0, r3
 80005a4:	f001 f9f8 	bl	8001998 <HAL_RCC_ClockConfig>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80005ae:	f000 f8fd 	bl	80007ac <Error_Handler>
  }
}
 80005b2:	bf00      	nop
 80005b4:	3758      	adds	r7, #88	; 0x58
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
	...

080005bc <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80005c0:	4b12      	ldr	r3, [pc, #72]	; (800060c <MX_LPUART1_UART_Init+0x50>)
 80005c2:	4a13      	ldr	r2, [pc, #76]	; (8000610 <MX_LPUART1_UART_Init+0x54>)
 80005c4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80005c6:	4b11      	ldr	r3, [pc, #68]	; (800060c <MX_LPUART1_UART_Init+0x50>)
 80005c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005cc:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005ce:	4b0f      	ldr	r3, [pc, #60]	; (800060c <MX_LPUART1_UART_Init+0x50>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80005d4:	4b0d      	ldr	r3, [pc, #52]	; (800060c <MX_LPUART1_UART_Init+0x50>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80005da:	4b0c      	ldr	r3, [pc, #48]	; (800060c <MX_LPUART1_UART_Init+0x50>)
 80005dc:	2200      	movs	r2, #0
 80005de:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80005e0:	4b0a      	ldr	r3, [pc, #40]	; (800060c <MX_LPUART1_UART_Init+0x50>)
 80005e2:	220c      	movs	r2, #12
 80005e4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005e6:	4b09      	ldr	r3, [pc, #36]	; (800060c <MX_LPUART1_UART_Init+0x50>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005ec:	4b07      	ldr	r3, [pc, #28]	; (800060c <MX_LPUART1_UART_Init+0x50>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005f2:	4b06      	ldr	r3, [pc, #24]	; (800060c <MX_LPUART1_UART_Init+0x50>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80005f8:	4804      	ldr	r0, [pc, #16]	; (800060c <MX_LPUART1_UART_Init+0x50>)
 80005fa:	f002 fd6d 	bl	80030d8 <HAL_UART_Init>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8000604:	f000 f8d2 	bl	80007ac <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000608:	bf00      	nop
 800060a:	bd80      	pop	{r7, pc}
 800060c:	20000028 	.word	0x20000028
 8000610:	40008000 	.word	0x40008000

08000614 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b088      	sub	sp, #32
 8000618:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800061a:	f107 0310 	add.w	r3, r7, #16
 800061e:	2200      	movs	r2, #0
 8000620:	601a      	str	r2, [r3, #0]
 8000622:	605a      	str	r2, [r3, #4]
 8000624:	609a      	str	r2, [r3, #8]
 8000626:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000628:	1d3b      	adds	r3, r7, #4
 800062a:	2200      	movs	r2, #0
 800062c:	601a      	str	r2, [r3, #0]
 800062e:	605a      	str	r2, [r3, #4]
 8000630:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000632:	4b1e      	ldr	r3, [pc, #120]	; (80006ac <MX_TIM2_Init+0x98>)
 8000634:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000638:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32000;
 800063a:	4b1c      	ldr	r3, [pc, #112]	; (80006ac <MX_TIM2_Init+0x98>)
 800063c:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8000640:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000642:	4b1a      	ldr	r3, [pc, #104]	; (80006ac <MX_TIM2_Init+0x98>)
 8000644:	2200      	movs	r2, #0
 8000646:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8000648:	4b18      	ldr	r3, [pc, #96]	; (80006ac <MX_TIM2_Init+0x98>)
 800064a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800064e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000650:	4b16      	ldr	r3, [pc, #88]	; (80006ac <MX_TIM2_Init+0x98>)
 8000652:	2200      	movs	r2, #0
 8000654:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000656:	4b15      	ldr	r3, [pc, #84]	; (80006ac <MX_TIM2_Init+0x98>)
 8000658:	2200      	movs	r2, #0
 800065a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800065c:	4813      	ldr	r0, [pc, #76]	; (80006ac <MX_TIM2_Init+0x98>)
 800065e:	f002 f889 	bl	8002774 <HAL_TIM_Base_Init>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000668:	f000 f8a0 	bl	80007ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800066c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000670:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000672:	f107 0310 	add.w	r3, r7, #16
 8000676:	4619      	mov	r1, r3
 8000678:	480c      	ldr	r0, [pc, #48]	; (80006ac <MX_TIM2_Init+0x98>)
 800067a:	f002 fa62 	bl	8002b42 <HAL_TIM_ConfigClockSource>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000684:	f000 f892 	bl	80007ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000688:	2300      	movs	r3, #0
 800068a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800068c:	2300      	movs	r3, #0
 800068e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000690:	1d3b      	adds	r3, r7, #4
 8000692:	4619      	mov	r1, r3
 8000694:	4805      	ldr	r0, [pc, #20]	; (80006ac <MX_TIM2_Init+0x98>)
 8000696:	f002 fc79 	bl	8002f8c <HAL_TIMEx_MasterConfigSynchronization>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80006a0:	f000 f884 	bl	80007ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80006a4:	bf00      	nop
 80006a6:	3720      	adds	r7, #32
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	200000ac 	.word	0x200000ac

080006b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b088      	sub	sp, #32
 80006b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b6:	f107 030c 	add.w	r3, r7, #12
 80006ba:	2200      	movs	r2, #0
 80006bc:	601a      	str	r2, [r3, #0]
 80006be:	605a      	str	r2, [r3, #4]
 80006c0:	609a      	str	r2, [r3, #8]
 80006c2:	60da      	str	r2, [r3, #12]
 80006c4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006c6:	4b29      	ldr	r3, [pc, #164]	; (800076c <MX_GPIO_Init+0xbc>)
 80006c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ca:	4a28      	ldr	r2, [pc, #160]	; (800076c <MX_GPIO_Init+0xbc>)
 80006cc:	f043 0302 	orr.w	r3, r3, #2
 80006d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006d2:	4b26      	ldr	r3, [pc, #152]	; (800076c <MX_GPIO_Init+0xbc>)
 80006d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006d6:	f003 0302 	and.w	r3, r3, #2
 80006da:	60bb      	str	r3, [r7, #8]
 80006dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006de:	4b23      	ldr	r3, [pc, #140]	; (800076c <MX_GPIO_Init+0xbc>)
 80006e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006e2:	4a22      	ldr	r2, [pc, #136]	; (800076c <MX_GPIO_Init+0xbc>)
 80006e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006ea:	4b20      	ldr	r3, [pc, #128]	; (800076c <MX_GPIO_Init+0xbc>)
 80006ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006f2:	607b      	str	r3, [r7, #4]
 80006f4:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 80006f6:	f000 fd25 	bl	8001144 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006fa:	4b1c      	ldr	r3, [pc, #112]	; (800076c <MX_GPIO_Init+0xbc>)
 80006fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006fe:	4a1b      	ldr	r2, [pc, #108]	; (800076c <MX_GPIO_Init+0xbc>)
 8000700:	f043 0304 	orr.w	r3, r3, #4
 8000704:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000706:	4b19      	ldr	r3, [pc, #100]	; (800076c <MX_GPIO_Init+0xbc>)
 8000708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800070a:	f003 0304 	and.w	r3, r3, #4
 800070e:	603b      	str	r3, [r7, #0]
 8000710:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BSP_RED_Pin|BSP_BLUE_LED_Pin, GPIO_PIN_RESET);
 8000712:	2200      	movs	r2, #0
 8000714:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000718:	4815      	ldr	r0, [pc, #84]	; (8000770 <MX_GPIO_Init+0xc0>)
 800071a:	f000 fc7d 	bl	8001018 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BSP_GREEN_GPIO_Port, BSP_GREEN_Pin, GPIO_PIN_RESET);
 800071e:	2200      	movs	r2, #0
 8000720:	2180      	movs	r1, #128	; 0x80
 8000722:	4814      	ldr	r0, [pc, #80]	; (8000774 <MX_GPIO_Init+0xc4>)
 8000724:	f000 fc78 	bl	8001018 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BSP_RED_Pin BSP_BLUE_LED_Pin */
  GPIO_InitStruct.Pin = BSP_RED_Pin|BSP_BLUE_LED_Pin;
 8000728:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 800072c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800072e:	2301      	movs	r3, #1
 8000730:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000732:	2300      	movs	r3, #0
 8000734:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000736:	2300      	movs	r3, #0
 8000738:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800073a:	f107 030c 	add.w	r3, r7, #12
 800073e:	4619      	mov	r1, r3
 8000740:	480b      	ldr	r0, [pc, #44]	; (8000770 <MX_GPIO_Init+0xc0>)
 8000742:	f000 fad7 	bl	8000cf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BSP_GREEN_Pin */
  GPIO_InitStruct.Pin = BSP_GREEN_Pin;
 8000746:	2380      	movs	r3, #128	; 0x80
 8000748:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800074a:	2301      	movs	r3, #1
 800074c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074e:	2300      	movs	r3, #0
 8000750:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000752:	2300      	movs	r3, #0
 8000754:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BSP_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000756:	f107 030c 	add.w	r3, r7, #12
 800075a:	4619      	mov	r1, r3
 800075c:	4805      	ldr	r0, [pc, #20]	; (8000774 <MX_GPIO_Init+0xc4>)
 800075e:	f000 fac9 	bl	8000cf4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000762:	bf00      	nop
 8000764:	3720      	adds	r7, #32
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	40021000 	.word	0x40021000
 8000770:	48000400 	.word	0x48000400
 8000774:	48000800 	.word	0x48000800

08000778 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
		HAL_GPIO_TogglePin(BSP_BLUE_LED_GPIO_Port,BSP_BLUE_LED_Pin);
 8000780:	2180      	movs	r1, #128	; 0x80
 8000782:	4808      	ldr	r0, [pc, #32]	; (80007a4 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000784:	f000 fc60 	bl	8001048 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(BSP_GREEN_GPIO_Port,BSP_GREEN_Pin);
 8000788:	2180      	movs	r1, #128	; 0x80
 800078a:	4807      	ldr	r0, [pc, #28]	; (80007a8 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800078c:	f000 fc5c 	bl	8001048 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(BSP_RED_GPIO_Port,BSP_RED_Pin);
 8000790:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000794:	4803      	ldr	r0, [pc, #12]	; (80007a4 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000796:	f000 fc57 	bl	8001048 <HAL_GPIO_TogglePin>
}
 800079a:	bf00      	nop
 800079c:	3708      	adds	r7, #8
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	48000400 	.word	0x48000400
 80007a8:	48000800 	.word	0x48000800

080007ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007b0:	b672      	cpsid	i
}
 80007b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007b4:	e7fe      	b.n	80007b4 <Error_Handler+0x8>
	...

080007b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007be:	4b0f      	ldr	r3, [pc, #60]	; (80007fc <HAL_MspInit+0x44>)
 80007c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007c2:	4a0e      	ldr	r2, [pc, #56]	; (80007fc <HAL_MspInit+0x44>)
 80007c4:	f043 0301 	orr.w	r3, r3, #1
 80007c8:	6613      	str	r3, [r2, #96]	; 0x60
 80007ca:	4b0c      	ldr	r3, [pc, #48]	; (80007fc <HAL_MspInit+0x44>)
 80007cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	607b      	str	r3, [r7, #4]
 80007d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d6:	4b09      	ldr	r3, [pc, #36]	; (80007fc <HAL_MspInit+0x44>)
 80007d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007da:	4a08      	ldr	r2, [pc, #32]	; (80007fc <HAL_MspInit+0x44>)
 80007dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007e0:	6593      	str	r3, [r2, #88]	; 0x58
 80007e2:	4b06      	ldr	r3, [pc, #24]	; (80007fc <HAL_MspInit+0x44>)
 80007e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ea:	603b      	str	r3, [r7, #0]
 80007ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ee:	bf00      	nop
 80007f0:	370c      	adds	r7, #12
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	40021000 	.word	0x40021000

08000800 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b0ac      	sub	sp, #176	; 0xb0
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000808:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	605a      	str	r2, [r3, #4]
 8000812:	609a      	str	r2, [r3, #8]
 8000814:	60da      	str	r2, [r3, #12]
 8000816:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000818:	f107 0310 	add.w	r3, r7, #16
 800081c:	228c      	movs	r2, #140	; 0x8c
 800081e:	2100      	movs	r1, #0
 8000820:	4618      	mov	r0, r3
 8000822:	f003 f933 	bl	8003a8c <memset>
  if(huart->Instance==LPUART1)
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	4a22      	ldr	r2, [pc, #136]	; (80008b4 <HAL_UART_MspInit+0xb4>)
 800082c:	4293      	cmp	r3, r2
 800082e:	d13d      	bne.n	80008ac <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000830:	2320      	movs	r3, #32
 8000832:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000834:	2300      	movs	r3, #0
 8000836:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000838:	f107 0310 	add.w	r3, r7, #16
 800083c:	4618      	mov	r0, r3
 800083e:	f001 facf 	bl	8001de0 <HAL_RCCEx_PeriphCLKConfig>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000848:	f7ff ffb0 	bl	80007ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800084c:	4b1a      	ldr	r3, [pc, #104]	; (80008b8 <HAL_UART_MspInit+0xb8>)
 800084e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000850:	4a19      	ldr	r2, [pc, #100]	; (80008b8 <HAL_UART_MspInit+0xb8>)
 8000852:	f043 0301 	orr.w	r3, r3, #1
 8000856:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000858:	4b17      	ldr	r3, [pc, #92]	; (80008b8 <HAL_UART_MspInit+0xb8>)
 800085a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800085c:	f003 0301 	and.w	r3, r3, #1
 8000860:	60fb      	str	r3, [r7, #12]
 8000862:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000864:	4b14      	ldr	r3, [pc, #80]	; (80008b8 <HAL_UART_MspInit+0xb8>)
 8000866:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000868:	4a13      	ldr	r2, [pc, #76]	; (80008b8 <HAL_UART_MspInit+0xb8>)
 800086a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800086e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000870:	4b11      	ldr	r3, [pc, #68]	; (80008b8 <HAL_UART_MspInit+0xb8>)
 8000872:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000874:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000878:	60bb      	str	r3, [r7, #8]
 800087a:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 800087c:	f000 fc62 	bl	8001144 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000880:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000884:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000888:	2302      	movs	r3, #2
 800088a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000894:	2303      	movs	r3, #3
 8000896:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800089a:	2308      	movs	r3, #8
 800089c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008a0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80008a4:	4619      	mov	r1, r3
 80008a6:	4805      	ldr	r0, [pc, #20]	; (80008bc <HAL_UART_MspInit+0xbc>)
 80008a8:	f000 fa24 	bl	8000cf4 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80008ac:	bf00      	nop
 80008ae:	37b0      	adds	r7, #176	; 0xb0
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	40008000 	.word	0x40008000
 80008b8:	40021000 	.word	0x40021000
 80008bc:	48001800 	.word	0x48001800

080008c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b084      	sub	sp, #16
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80008d0:	d113      	bne.n	80008fa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80008d2:	4b0c      	ldr	r3, [pc, #48]	; (8000904 <HAL_TIM_Base_MspInit+0x44>)
 80008d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008d6:	4a0b      	ldr	r2, [pc, #44]	; (8000904 <HAL_TIM_Base_MspInit+0x44>)
 80008d8:	f043 0301 	orr.w	r3, r3, #1
 80008dc:	6593      	str	r3, [r2, #88]	; 0x58
 80008de:	4b09      	ldr	r3, [pc, #36]	; (8000904 <HAL_TIM_Base_MspInit+0x44>)
 80008e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008e2:	f003 0301 	and.w	r3, r3, #1
 80008e6:	60fb      	str	r3, [r7, #12]
 80008e8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80008ea:	2200      	movs	r2, #0
 80008ec:	2100      	movs	r1, #0
 80008ee:	201c      	movs	r0, #28
 80008f0:	f000 f9c9 	bl	8000c86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80008f4:	201c      	movs	r0, #28
 80008f6:	f000 f9e2 	bl	8000cbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80008fa:	bf00      	nop
 80008fc:	3710      	adds	r7, #16
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	40021000 	.word	0x40021000

08000908 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800090c:	e7fe      	b.n	800090c <NMI_Handler+0x4>

0800090e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800090e:	b480      	push	{r7}
 8000910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000912:	e7fe      	b.n	8000912 <HardFault_Handler+0x4>

08000914 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000918:	e7fe      	b.n	8000918 <MemManage_Handler+0x4>

0800091a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800091a:	b480      	push	{r7}
 800091c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800091e:	e7fe      	b.n	800091e <BusFault_Handler+0x4>

08000920 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000924:	e7fe      	b.n	8000924 <UsageFault_Handler+0x4>

08000926 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000926:	b480      	push	{r7}
 8000928:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800092a:	bf00      	nop
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr

08000934 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000938:	bf00      	nop
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr

08000942 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000942:	b480      	push	{r7}
 8000944:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000946:	bf00      	nop
 8000948:	46bd      	mov	sp, r7
 800094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094e:	4770      	bx	lr

08000950 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000954:	f000 f89c 	bl	8000a90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000958:	bf00      	nop
 800095a:	bd80      	pop	{r7, pc}

0800095c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000960:	4802      	ldr	r0, [pc, #8]	; (800096c <TIM2_IRQHandler+0x10>)
 8000962:	f001 ffcf 	bl	8002904 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000966:	bf00      	nop
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	200000ac 	.word	0x200000ac

08000970 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000974:	4b06      	ldr	r3, [pc, #24]	; (8000990 <SystemInit+0x20>)
 8000976:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800097a:	4a05      	ldr	r2, [pc, #20]	; (8000990 <SystemInit+0x20>)
 800097c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000980:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000984:	bf00      	nop
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	e000ed00 	.word	0xe000ed00

08000994 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000994:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009cc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000998:	f7ff ffea 	bl	8000970 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800099c:	480c      	ldr	r0, [pc, #48]	; (80009d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800099e:	490d      	ldr	r1, [pc, #52]	; (80009d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009a0:	4a0d      	ldr	r2, [pc, #52]	; (80009d8 <LoopForever+0xe>)
  movs r3, #0
 80009a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009a4:	e002      	b.n	80009ac <LoopCopyDataInit>

080009a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009aa:	3304      	adds	r3, #4

080009ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009b0:	d3f9      	bcc.n	80009a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009b2:	4a0a      	ldr	r2, [pc, #40]	; (80009dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80009b4:	4c0a      	ldr	r4, [pc, #40]	; (80009e0 <LoopForever+0x16>)
  movs r3, #0
 80009b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009b8:	e001      	b.n	80009be <LoopFillZerobss>

080009ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009bc:	3204      	adds	r2, #4

080009be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009c0:	d3fb      	bcc.n	80009ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009c2:	f003 f83f 	bl	8003a44 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009c6:	f7ff fd93 	bl	80004f0 <main>

080009ca <LoopForever>:

LoopForever:
    b LoopForever
 80009ca:	e7fe      	b.n	80009ca <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80009cc:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80009d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009d4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009d8:	08003b0c 	.word	0x08003b0c
  ldr r2, =_sbss
 80009dc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009e0:	200000fc 	.word	0x200000fc

080009e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009e4:	e7fe      	b.n	80009e4 <ADC1_2_IRQHandler>

080009e6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009e6:	b580      	push	{r7, lr}
 80009e8:	b082      	sub	sp, #8
 80009ea:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009ec:	2300      	movs	r3, #0
 80009ee:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009f0:	2003      	movs	r0, #3
 80009f2:	f000 f93d 	bl	8000c70 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009f6:	2000      	movs	r0, #0
 80009f8:	f000 f80e 	bl	8000a18 <HAL_InitTick>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d002      	beq.n	8000a08 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a02:	2301      	movs	r3, #1
 8000a04:	71fb      	strb	r3, [r7, #7]
 8000a06:	e001      	b.n	8000a0c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a08:	f7ff fed6 	bl	80007b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a0c:	79fb      	ldrb	r3, [r7, #7]
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	3708      	adds	r7, #8
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
	...

08000a18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b084      	sub	sp, #16
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a20:	2300      	movs	r3, #0
 8000a22:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000a24:	4b17      	ldr	r3, [pc, #92]	; (8000a84 <HAL_InitTick+0x6c>)
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d023      	beq.n	8000a74 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000a2c:	4b16      	ldr	r3, [pc, #88]	; (8000a88 <HAL_InitTick+0x70>)
 8000a2e:	681a      	ldr	r2, [r3, #0]
 8000a30:	4b14      	ldr	r3, [pc, #80]	; (8000a84 <HAL_InitTick+0x6c>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	4619      	mov	r1, r3
 8000a36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a42:	4618      	mov	r0, r3
 8000a44:	f000 f949 	bl	8000cda <HAL_SYSTICK_Config>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d10f      	bne.n	8000a6e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	2b0f      	cmp	r3, #15
 8000a52:	d809      	bhi.n	8000a68 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a54:	2200      	movs	r2, #0
 8000a56:	6879      	ldr	r1, [r7, #4]
 8000a58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a5c:	f000 f913 	bl	8000c86 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a60:	4a0a      	ldr	r2, [pc, #40]	; (8000a8c <HAL_InitTick+0x74>)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	6013      	str	r3, [r2, #0]
 8000a66:	e007      	b.n	8000a78 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	73fb      	strb	r3, [r7, #15]
 8000a6c:	e004      	b.n	8000a78 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	73fb      	strb	r3, [r7, #15]
 8000a72:	e001      	b.n	8000a78 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a74:	2301      	movs	r3, #1
 8000a76:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	3710      	adds	r7, #16
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	20000008 	.word	0x20000008
 8000a88:	20000000 	.word	0x20000000
 8000a8c:	20000004 	.word	0x20000004

08000a90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a94:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <HAL_IncTick+0x20>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	461a      	mov	r2, r3
 8000a9a:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <HAL_IncTick+0x24>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	4413      	add	r3, r2
 8000aa0:	4a04      	ldr	r2, [pc, #16]	; (8000ab4 <HAL_IncTick+0x24>)
 8000aa2:	6013      	str	r3, [r2, #0]
}
 8000aa4:	bf00      	nop
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	20000008 	.word	0x20000008
 8000ab4:	200000f8 	.word	0x200000f8

08000ab8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  return uwTick;
 8000abc:	4b03      	ldr	r3, [pc, #12]	; (8000acc <HAL_GetTick+0x14>)
 8000abe:	681b      	ldr	r3, [r3, #0]
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	200000f8 	.word	0x200000f8

08000ad0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b085      	sub	sp, #20
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	f003 0307 	and.w	r3, r3, #7
 8000ade:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ae0:	4b0c      	ldr	r3, [pc, #48]	; (8000b14 <__NVIC_SetPriorityGrouping+0x44>)
 8000ae2:	68db      	ldr	r3, [r3, #12]
 8000ae4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ae6:	68ba      	ldr	r2, [r7, #8]
 8000ae8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000aec:	4013      	ands	r3, r2
 8000aee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000af4:	68bb      	ldr	r3, [r7, #8]
 8000af6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000af8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000afc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b02:	4a04      	ldr	r2, [pc, #16]	; (8000b14 <__NVIC_SetPriorityGrouping+0x44>)
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	60d3      	str	r3, [r2, #12]
}
 8000b08:	bf00      	nop
 8000b0a:	3714      	adds	r7, #20
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr
 8000b14:	e000ed00 	.word	0xe000ed00

08000b18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b1c:	4b04      	ldr	r3, [pc, #16]	; (8000b30 <__NVIC_GetPriorityGrouping+0x18>)
 8000b1e:	68db      	ldr	r3, [r3, #12]
 8000b20:	0a1b      	lsrs	r3, r3, #8
 8000b22:	f003 0307 	and.w	r3, r3, #7
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr
 8000b30:	e000ed00 	.word	0xe000ed00

08000b34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	db0b      	blt.n	8000b5e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b46:	79fb      	ldrb	r3, [r7, #7]
 8000b48:	f003 021f 	and.w	r2, r3, #31
 8000b4c:	4907      	ldr	r1, [pc, #28]	; (8000b6c <__NVIC_EnableIRQ+0x38>)
 8000b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b52:	095b      	lsrs	r3, r3, #5
 8000b54:	2001      	movs	r0, #1
 8000b56:	fa00 f202 	lsl.w	r2, r0, r2
 8000b5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b5e:	bf00      	nop
 8000b60:	370c      	adds	r7, #12
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	e000e100 	.word	0xe000e100

08000b70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	4603      	mov	r3, r0
 8000b78:	6039      	str	r1, [r7, #0]
 8000b7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	db0a      	blt.n	8000b9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	b2da      	uxtb	r2, r3
 8000b88:	490c      	ldr	r1, [pc, #48]	; (8000bbc <__NVIC_SetPriority+0x4c>)
 8000b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8e:	0112      	lsls	r2, r2, #4
 8000b90:	b2d2      	uxtb	r2, r2
 8000b92:	440b      	add	r3, r1
 8000b94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b98:	e00a      	b.n	8000bb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	b2da      	uxtb	r2, r3
 8000b9e:	4908      	ldr	r1, [pc, #32]	; (8000bc0 <__NVIC_SetPriority+0x50>)
 8000ba0:	79fb      	ldrb	r3, [r7, #7]
 8000ba2:	f003 030f 	and.w	r3, r3, #15
 8000ba6:	3b04      	subs	r3, #4
 8000ba8:	0112      	lsls	r2, r2, #4
 8000baa:	b2d2      	uxtb	r2, r2
 8000bac:	440b      	add	r3, r1
 8000bae:	761a      	strb	r2, [r3, #24]
}
 8000bb0:	bf00      	nop
 8000bb2:	370c      	adds	r7, #12
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr
 8000bbc:	e000e100 	.word	0xe000e100
 8000bc0:	e000ed00 	.word	0xe000ed00

08000bc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b089      	sub	sp, #36	; 0x24
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	60f8      	str	r0, [r7, #12]
 8000bcc:	60b9      	str	r1, [r7, #8]
 8000bce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	f003 0307 	and.w	r3, r3, #7
 8000bd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bd8:	69fb      	ldr	r3, [r7, #28]
 8000bda:	f1c3 0307 	rsb	r3, r3, #7
 8000bde:	2b04      	cmp	r3, #4
 8000be0:	bf28      	it	cs
 8000be2:	2304      	movcs	r3, #4
 8000be4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000be6:	69fb      	ldr	r3, [r7, #28]
 8000be8:	3304      	adds	r3, #4
 8000bea:	2b06      	cmp	r3, #6
 8000bec:	d902      	bls.n	8000bf4 <NVIC_EncodePriority+0x30>
 8000bee:	69fb      	ldr	r3, [r7, #28]
 8000bf0:	3b03      	subs	r3, #3
 8000bf2:	e000      	b.n	8000bf6 <NVIC_EncodePriority+0x32>
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bf8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000bfc:	69bb      	ldr	r3, [r7, #24]
 8000bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000c02:	43da      	mvns	r2, r3
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	401a      	ands	r2, r3
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c0c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	fa01 f303 	lsl.w	r3, r1, r3
 8000c16:	43d9      	mvns	r1, r3
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c1c:	4313      	orrs	r3, r2
         );
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3724      	adds	r7, #36	; 0x24
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
	...

08000c2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	3b01      	subs	r3, #1
 8000c38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c3c:	d301      	bcc.n	8000c42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c3e:	2301      	movs	r3, #1
 8000c40:	e00f      	b.n	8000c62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c42:	4a0a      	ldr	r2, [pc, #40]	; (8000c6c <SysTick_Config+0x40>)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	3b01      	subs	r3, #1
 8000c48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c4a:	210f      	movs	r1, #15
 8000c4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c50:	f7ff ff8e 	bl	8000b70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c54:	4b05      	ldr	r3, [pc, #20]	; (8000c6c <SysTick_Config+0x40>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c5a:	4b04      	ldr	r3, [pc, #16]	; (8000c6c <SysTick_Config+0x40>)
 8000c5c:	2207      	movs	r2, #7
 8000c5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c60:	2300      	movs	r3, #0
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	e000e010 	.word	0xe000e010

08000c70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c78:	6878      	ldr	r0, [r7, #4]
 8000c7a:	f7ff ff29 	bl	8000ad0 <__NVIC_SetPriorityGrouping>
}
 8000c7e:	bf00      	nop
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}

08000c86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c86:	b580      	push	{r7, lr}
 8000c88:	b086      	sub	sp, #24
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	60b9      	str	r1, [r7, #8]
 8000c90:	607a      	str	r2, [r7, #4]
 8000c92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c94:	2300      	movs	r3, #0
 8000c96:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c98:	f7ff ff3e 	bl	8000b18 <__NVIC_GetPriorityGrouping>
 8000c9c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c9e:	687a      	ldr	r2, [r7, #4]
 8000ca0:	68b9      	ldr	r1, [r7, #8]
 8000ca2:	6978      	ldr	r0, [r7, #20]
 8000ca4:	f7ff ff8e 	bl	8000bc4 <NVIC_EncodePriority>
 8000ca8:	4602      	mov	r2, r0
 8000caa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cae:	4611      	mov	r1, r2
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f7ff ff5d 	bl	8000b70 <__NVIC_SetPriority>
}
 8000cb6:	bf00      	nop
 8000cb8:	3718      	adds	r7, #24
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}

08000cbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	b082      	sub	sp, #8
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f7ff ff31 	bl	8000b34 <__NVIC_EnableIRQ>
}
 8000cd2:	bf00      	nop
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}

08000cda <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cda:	b580      	push	{r7, lr}
 8000cdc:	b082      	sub	sp, #8
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ce2:	6878      	ldr	r0, [r7, #4]
 8000ce4:	f7ff ffa2 	bl	8000c2c <SysTick_Config>
 8000ce8:	4603      	mov	r3, r0
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
	...

08000cf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b087      	sub	sp, #28
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
 8000cfc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d02:	e166      	b.n	8000fd2 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	681a      	ldr	r2, [r3, #0]
 8000d08:	2101      	movs	r1, #1
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d10:	4013      	ands	r3, r2
 8000d12:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	f000 8158 	beq.w	8000fcc <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	f003 0303 	and.w	r3, r3, #3
 8000d24:	2b01      	cmp	r3, #1
 8000d26:	d005      	beq.n	8000d34 <HAL_GPIO_Init+0x40>
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	f003 0303 	and.w	r3, r3, #3
 8000d30:	2b02      	cmp	r3, #2
 8000d32:	d130      	bne.n	8000d96 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	689b      	ldr	r3, [r3, #8]
 8000d38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d3a:	697b      	ldr	r3, [r7, #20]
 8000d3c:	005b      	lsls	r3, r3, #1
 8000d3e:	2203      	movs	r2, #3
 8000d40:	fa02 f303 	lsl.w	r3, r2, r3
 8000d44:	43db      	mvns	r3, r3
 8000d46:	693a      	ldr	r2, [r7, #16]
 8000d48:	4013      	ands	r3, r2
 8000d4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	68da      	ldr	r2, [r3, #12]
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	005b      	lsls	r3, r3, #1
 8000d54:	fa02 f303 	lsl.w	r3, r2, r3
 8000d58:	693a      	ldr	r2, [r7, #16]
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	693a      	ldr	r2, [r7, #16]
 8000d62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d72:	43db      	mvns	r3, r3
 8000d74:	693a      	ldr	r2, [r7, #16]
 8000d76:	4013      	ands	r3, r2
 8000d78:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	091b      	lsrs	r3, r3, #4
 8000d80:	f003 0201 	and.w	r2, r3, #1
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8a:	693a      	ldr	r2, [r7, #16]
 8000d8c:	4313      	orrs	r3, r2
 8000d8e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	693a      	ldr	r2, [r7, #16]
 8000d94:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	f003 0303 	and.w	r3, r3, #3
 8000d9e:	2b03      	cmp	r3, #3
 8000da0:	d017      	beq.n	8000dd2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	68db      	ldr	r3, [r3, #12]
 8000da6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	005b      	lsls	r3, r3, #1
 8000dac:	2203      	movs	r2, #3
 8000dae:	fa02 f303 	lsl.w	r3, r2, r3
 8000db2:	43db      	mvns	r3, r3
 8000db4:	693a      	ldr	r2, [r7, #16]
 8000db6:	4013      	ands	r3, r2
 8000db8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	689a      	ldr	r2, [r3, #8]
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	005b      	lsls	r3, r3, #1
 8000dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc6:	693a      	ldr	r2, [r7, #16]
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	693a      	ldr	r2, [r7, #16]
 8000dd0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	f003 0303 	and.w	r3, r3, #3
 8000dda:	2b02      	cmp	r3, #2
 8000ddc:	d123      	bne.n	8000e26 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	08da      	lsrs	r2, r3, #3
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	3208      	adds	r2, #8
 8000de6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	f003 0307 	and.w	r3, r3, #7
 8000df2:	009b      	lsls	r3, r3, #2
 8000df4:	220f      	movs	r2, #15
 8000df6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfa:	43db      	mvns	r3, r3
 8000dfc:	693a      	ldr	r2, [r7, #16]
 8000dfe:	4013      	ands	r3, r2
 8000e00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	691a      	ldr	r2, [r3, #16]
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	f003 0307 	and.w	r3, r3, #7
 8000e0c:	009b      	lsls	r3, r3, #2
 8000e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e12:	693a      	ldr	r2, [r7, #16]
 8000e14:	4313      	orrs	r3, r2
 8000e16:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	08da      	lsrs	r2, r3, #3
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	3208      	adds	r2, #8
 8000e20:	6939      	ldr	r1, [r7, #16]
 8000e22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	005b      	lsls	r3, r3, #1
 8000e30:	2203      	movs	r2, #3
 8000e32:	fa02 f303 	lsl.w	r3, r2, r3
 8000e36:	43db      	mvns	r3, r3
 8000e38:	693a      	ldr	r2, [r7, #16]
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	f003 0203 	and.w	r2, r3, #3
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	005b      	lsls	r3, r3, #1
 8000e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4e:	693a      	ldr	r2, [r7, #16]
 8000e50:	4313      	orrs	r3, r2
 8000e52:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	693a      	ldr	r2, [r7, #16]
 8000e58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	f000 80b2 	beq.w	8000fcc <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e68:	4b61      	ldr	r3, [pc, #388]	; (8000ff0 <HAL_GPIO_Init+0x2fc>)
 8000e6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e6c:	4a60      	ldr	r2, [pc, #384]	; (8000ff0 <HAL_GPIO_Init+0x2fc>)
 8000e6e:	f043 0301 	orr.w	r3, r3, #1
 8000e72:	6613      	str	r3, [r2, #96]	; 0x60
 8000e74:	4b5e      	ldr	r3, [pc, #376]	; (8000ff0 <HAL_GPIO_Init+0x2fc>)
 8000e76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e78:	f003 0301 	and.w	r3, r3, #1
 8000e7c:	60bb      	str	r3, [r7, #8]
 8000e7e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e80:	4a5c      	ldr	r2, [pc, #368]	; (8000ff4 <HAL_GPIO_Init+0x300>)
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	089b      	lsrs	r3, r3, #2
 8000e86:	3302      	adds	r3, #2
 8000e88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e8c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	f003 0303 	and.w	r3, r3, #3
 8000e94:	009b      	lsls	r3, r3, #2
 8000e96:	220f      	movs	r2, #15
 8000e98:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9c:	43db      	mvns	r3, r3
 8000e9e:	693a      	ldr	r2, [r7, #16]
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000eaa:	d02b      	beq.n	8000f04 <HAL_GPIO_Init+0x210>
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	4a52      	ldr	r2, [pc, #328]	; (8000ff8 <HAL_GPIO_Init+0x304>)
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	d025      	beq.n	8000f00 <HAL_GPIO_Init+0x20c>
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	4a51      	ldr	r2, [pc, #324]	; (8000ffc <HAL_GPIO_Init+0x308>)
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d01f      	beq.n	8000efc <HAL_GPIO_Init+0x208>
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	4a50      	ldr	r2, [pc, #320]	; (8001000 <HAL_GPIO_Init+0x30c>)
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d019      	beq.n	8000ef8 <HAL_GPIO_Init+0x204>
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	4a4f      	ldr	r2, [pc, #316]	; (8001004 <HAL_GPIO_Init+0x310>)
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d013      	beq.n	8000ef4 <HAL_GPIO_Init+0x200>
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	4a4e      	ldr	r2, [pc, #312]	; (8001008 <HAL_GPIO_Init+0x314>)
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	d00d      	beq.n	8000ef0 <HAL_GPIO_Init+0x1fc>
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	4a4d      	ldr	r2, [pc, #308]	; (800100c <HAL_GPIO_Init+0x318>)
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d007      	beq.n	8000eec <HAL_GPIO_Init+0x1f8>
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	4a4c      	ldr	r2, [pc, #304]	; (8001010 <HAL_GPIO_Init+0x31c>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d101      	bne.n	8000ee8 <HAL_GPIO_Init+0x1f4>
 8000ee4:	2307      	movs	r3, #7
 8000ee6:	e00e      	b.n	8000f06 <HAL_GPIO_Init+0x212>
 8000ee8:	2308      	movs	r3, #8
 8000eea:	e00c      	b.n	8000f06 <HAL_GPIO_Init+0x212>
 8000eec:	2306      	movs	r3, #6
 8000eee:	e00a      	b.n	8000f06 <HAL_GPIO_Init+0x212>
 8000ef0:	2305      	movs	r3, #5
 8000ef2:	e008      	b.n	8000f06 <HAL_GPIO_Init+0x212>
 8000ef4:	2304      	movs	r3, #4
 8000ef6:	e006      	b.n	8000f06 <HAL_GPIO_Init+0x212>
 8000ef8:	2303      	movs	r3, #3
 8000efa:	e004      	b.n	8000f06 <HAL_GPIO_Init+0x212>
 8000efc:	2302      	movs	r3, #2
 8000efe:	e002      	b.n	8000f06 <HAL_GPIO_Init+0x212>
 8000f00:	2301      	movs	r3, #1
 8000f02:	e000      	b.n	8000f06 <HAL_GPIO_Init+0x212>
 8000f04:	2300      	movs	r3, #0
 8000f06:	697a      	ldr	r2, [r7, #20]
 8000f08:	f002 0203 	and.w	r2, r2, #3
 8000f0c:	0092      	lsls	r2, r2, #2
 8000f0e:	4093      	lsls	r3, r2
 8000f10:	693a      	ldr	r2, [r7, #16]
 8000f12:	4313      	orrs	r3, r2
 8000f14:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f16:	4937      	ldr	r1, [pc, #220]	; (8000ff4 <HAL_GPIO_Init+0x300>)
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	089b      	lsrs	r3, r3, #2
 8000f1c:	3302      	adds	r3, #2
 8000f1e:	693a      	ldr	r2, [r7, #16]
 8000f20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f24:	4b3b      	ldr	r3, [pc, #236]	; (8001014 <HAL_GPIO_Init+0x320>)
 8000f26:	689b      	ldr	r3, [r3, #8]
 8000f28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	43db      	mvns	r3, r3
 8000f2e:	693a      	ldr	r2, [r7, #16]
 8000f30:	4013      	ands	r3, r2
 8000f32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d003      	beq.n	8000f48 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8000f40:	693a      	ldr	r2, [r7, #16]
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	4313      	orrs	r3, r2
 8000f46:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f48:	4a32      	ldr	r2, [pc, #200]	; (8001014 <HAL_GPIO_Init+0x320>)
 8000f4a:	693b      	ldr	r3, [r7, #16]
 8000f4c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000f4e:	4b31      	ldr	r3, [pc, #196]	; (8001014 <HAL_GPIO_Init+0x320>)
 8000f50:	68db      	ldr	r3, [r3, #12]
 8000f52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	43db      	mvns	r3, r3
 8000f58:	693a      	ldr	r2, [r7, #16]
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d003      	beq.n	8000f72 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8000f6a:	693a      	ldr	r2, [r7, #16]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f72:	4a28      	ldr	r2, [pc, #160]	; (8001014 <HAL_GPIO_Init+0x320>)
 8000f74:	693b      	ldr	r3, [r7, #16]
 8000f76:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000f78:	4b26      	ldr	r3, [pc, #152]	; (8001014 <HAL_GPIO_Init+0x320>)
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	43db      	mvns	r3, r3
 8000f82:	693a      	ldr	r2, [r7, #16]
 8000f84:	4013      	ands	r3, r2
 8000f86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d003      	beq.n	8000f9c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8000f94:	693a      	ldr	r2, [r7, #16]
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000f9c:	4a1d      	ldr	r2, [pc, #116]	; (8001014 <HAL_GPIO_Init+0x320>)
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000fa2:	4b1c      	ldr	r3, [pc, #112]	; (8001014 <HAL_GPIO_Init+0x320>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	43db      	mvns	r3, r3
 8000fac:	693a      	ldr	r2, [r7, #16]
 8000fae:	4013      	ands	r3, r2
 8000fb0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d003      	beq.n	8000fc6 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8000fbe:	693a      	ldr	r2, [r7, #16]
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000fc6:	4a13      	ldr	r2, [pc, #76]	; (8001014 <HAL_GPIO_Init+0x320>)
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	3301      	adds	r3, #1
 8000fd0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	681a      	ldr	r2, [r3, #0]
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	fa22 f303 	lsr.w	r3, r2, r3
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	f47f ae91 	bne.w	8000d04 <HAL_GPIO_Init+0x10>
  }
}
 8000fe2:	bf00      	nop
 8000fe4:	bf00      	nop
 8000fe6:	371c      	adds	r7, #28
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	40021000 	.word	0x40021000
 8000ff4:	40010000 	.word	0x40010000
 8000ff8:	48000400 	.word	0x48000400
 8000ffc:	48000800 	.word	0x48000800
 8001000:	48000c00 	.word	0x48000c00
 8001004:	48001000 	.word	0x48001000
 8001008:	48001400 	.word	0x48001400
 800100c:	48001800 	.word	0x48001800
 8001010:	48001c00 	.word	0x48001c00
 8001014:	40010400 	.word	0x40010400

08001018 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	460b      	mov	r3, r1
 8001022:	807b      	strh	r3, [r7, #2]
 8001024:	4613      	mov	r3, r2
 8001026:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001028:	787b      	ldrb	r3, [r7, #1]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d003      	beq.n	8001036 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800102e:	887a      	ldrh	r2, [r7, #2]
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001034:	e002      	b.n	800103c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001036:	887a      	ldrh	r2, [r7, #2]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800103c:	bf00      	nop
 800103e:	370c      	adds	r7, #12
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr

08001048 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001048:	b480      	push	{r7}
 800104a:	b085      	sub	sp, #20
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	460b      	mov	r3, r1
 8001052:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	695b      	ldr	r3, [r3, #20]
 8001058:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800105a:	887a      	ldrh	r2, [r7, #2]
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	4013      	ands	r3, r2
 8001060:	041a      	lsls	r2, r3, #16
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	43d9      	mvns	r1, r3
 8001066:	887b      	ldrh	r3, [r7, #2]
 8001068:	400b      	ands	r3, r1
 800106a:	431a      	orrs	r2, r3
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	619a      	str	r2, [r3, #24]
}
 8001070:	bf00      	nop
 8001072:	3714      	adds	r7, #20
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr

0800107c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001080:	4b04      	ldr	r3, [pc, #16]	; (8001094 <HAL_PWREx_GetVoltageRange+0x18>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001088:	4618      	mov	r0, r3
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	40007000 	.word	0x40007000

08001098 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001098:	b480      	push	{r7}
 800109a:	b085      	sub	sp, #20
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80010a6:	d130      	bne.n	800110a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80010a8:	4b23      	ldr	r3, [pc, #140]	; (8001138 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80010b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80010b4:	d038      	beq.n	8001128 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80010b6:	4b20      	ldr	r3, [pc, #128]	; (8001138 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80010be:	4a1e      	ldr	r2, [pc, #120]	; (8001138 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010c4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80010c6:	4b1d      	ldr	r3, [pc, #116]	; (800113c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	2232      	movs	r2, #50	; 0x32
 80010cc:	fb02 f303 	mul.w	r3, r2, r3
 80010d0:	4a1b      	ldr	r2, [pc, #108]	; (8001140 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80010d2:	fba2 2303 	umull	r2, r3, r2, r3
 80010d6:	0c9b      	lsrs	r3, r3, #18
 80010d8:	3301      	adds	r3, #1
 80010da:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010dc:	e002      	b.n	80010e4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	3b01      	subs	r3, #1
 80010e2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010e4:	4b14      	ldr	r3, [pc, #80]	; (8001138 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010e6:	695b      	ldr	r3, [r3, #20]
 80010e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010f0:	d102      	bne.n	80010f8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d1f2      	bne.n	80010de <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80010f8:	4b0f      	ldr	r3, [pc, #60]	; (8001138 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010fa:	695b      	ldr	r3, [r3, #20]
 80010fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001100:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001104:	d110      	bne.n	8001128 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001106:	2303      	movs	r3, #3
 8001108:	e00f      	b.n	800112a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800110a:	4b0b      	ldr	r3, [pc, #44]	; (8001138 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001112:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001116:	d007      	beq.n	8001128 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001118:	4b07      	ldr	r3, [pc, #28]	; (8001138 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001120:	4a05      	ldr	r2, [pc, #20]	; (8001138 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001122:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001126:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001128:	2300      	movs	r3, #0
}
 800112a:	4618      	mov	r0, r3
 800112c:	3714      	adds	r7, #20
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	40007000 	.word	0x40007000
 800113c:	20000000 	.word	0x20000000
 8001140:	431bde83 	.word	0x431bde83

08001144 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001148:	4b05      	ldr	r3, [pc, #20]	; (8001160 <HAL_PWREx_EnableVddIO2+0x1c>)
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	4a04      	ldr	r2, [pc, #16]	; (8001160 <HAL_PWREx_EnableVddIO2+0x1c>)
 800114e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001152:	6053      	str	r3, [r2, #4]
}
 8001154:	bf00      	nop
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	40007000 	.word	0x40007000

08001164 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b088      	sub	sp, #32
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d102      	bne.n	8001178 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001172:	2301      	movs	r3, #1
 8001174:	f000 bc08 	b.w	8001988 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001178:	4b96      	ldr	r3, [pc, #600]	; (80013d4 <HAL_RCC_OscConfig+0x270>)
 800117a:	689b      	ldr	r3, [r3, #8]
 800117c:	f003 030c 	and.w	r3, r3, #12
 8001180:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001182:	4b94      	ldr	r3, [pc, #592]	; (80013d4 <HAL_RCC_OscConfig+0x270>)
 8001184:	68db      	ldr	r3, [r3, #12]
 8001186:	f003 0303 	and.w	r3, r3, #3
 800118a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f003 0310 	and.w	r3, r3, #16
 8001194:	2b00      	cmp	r3, #0
 8001196:	f000 80e4 	beq.w	8001362 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800119a:	69bb      	ldr	r3, [r7, #24]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d007      	beq.n	80011b0 <HAL_RCC_OscConfig+0x4c>
 80011a0:	69bb      	ldr	r3, [r7, #24]
 80011a2:	2b0c      	cmp	r3, #12
 80011a4:	f040 808b 	bne.w	80012be <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	2b01      	cmp	r3, #1
 80011ac:	f040 8087 	bne.w	80012be <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80011b0:	4b88      	ldr	r3, [pc, #544]	; (80013d4 <HAL_RCC_OscConfig+0x270>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f003 0302 	and.w	r3, r3, #2
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d005      	beq.n	80011c8 <HAL_RCC_OscConfig+0x64>
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	699b      	ldr	r3, [r3, #24]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d101      	bne.n	80011c8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80011c4:	2301      	movs	r3, #1
 80011c6:	e3df      	b.n	8001988 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6a1a      	ldr	r2, [r3, #32]
 80011cc:	4b81      	ldr	r3, [pc, #516]	; (80013d4 <HAL_RCC_OscConfig+0x270>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f003 0308 	and.w	r3, r3, #8
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d004      	beq.n	80011e2 <HAL_RCC_OscConfig+0x7e>
 80011d8:	4b7e      	ldr	r3, [pc, #504]	; (80013d4 <HAL_RCC_OscConfig+0x270>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80011e0:	e005      	b.n	80011ee <HAL_RCC_OscConfig+0x8a>
 80011e2:	4b7c      	ldr	r3, [pc, #496]	; (80013d4 <HAL_RCC_OscConfig+0x270>)
 80011e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011e8:	091b      	lsrs	r3, r3, #4
 80011ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d223      	bcs.n	800123a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6a1b      	ldr	r3, [r3, #32]
 80011f6:	4618      	mov	r0, r3
 80011f8:	f000 fd92 	bl	8001d20 <RCC_SetFlashLatencyFromMSIRange>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001202:	2301      	movs	r3, #1
 8001204:	e3c0      	b.n	8001988 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001206:	4b73      	ldr	r3, [pc, #460]	; (80013d4 <HAL_RCC_OscConfig+0x270>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a72      	ldr	r2, [pc, #456]	; (80013d4 <HAL_RCC_OscConfig+0x270>)
 800120c:	f043 0308 	orr.w	r3, r3, #8
 8001210:	6013      	str	r3, [r2, #0]
 8001212:	4b70      	ldr	r3, [pc, #448]	; (80013d4 <HAL_RCC_OscConfig+0x270>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6a1b      	ldr	r3, [r3, #32]
 800121e:	496d      	ldr	r1, [pc, #436]	; (80013d4 <HAL_RCC_OscConfig+0x270>)
 8001220:	4313      	orrs	r3, r2
 8001222:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001224:	4b6b      	ldr	r3, [pc, #428]	; (80013d4 <HAL_RCC_OscConfig+0x270>)
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	69db      	ldr	r3, [r3, #28]
 8001230:	021b      	lsls	r3, r3, #8
 8001232:	4968      	ldr	r1, [pc, #416]	; (80013d4 <HAL_RCC_OscConfig+0x270>)
 8001234:	4313      	orrs	r3, r2
 8001236:	604b      	str	r3, [r1, #4]
 8001238:	e025      	b.n	8001286 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800123a:	4b66      	ldr	r3, [pc, #408]	; (80013d4 <HAL_RCC_OscConfig+0x270>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a65      	ldr	r2, [pc, #404]	; (80013d4 <HAL_RCC_OscConfig+0x270>)
 8001240:	f043 0308 	orr.w	r3, r3, #8
 8001244:	6013      	str	r3, [r2, #0]
 8001246:	4b63      	ldr	r3, [pc, #396]	; (80013d4 <HAL_RCC_OscConfig+0x270>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6a1b      	ldr	r3, [r3, #32]
 8001252:	4960      	ldr	r1, [pc, #384]	; (80013d4 <HAL_RCC_OscConfig+0x270>)
 8001254:	4313      	orrs	r3, r2
 8001256:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001258:	4b5e      	ldr	r3, [pc, #376]	; (80013d4 <HAL_RCC_OscConfig+0x270>)
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	69db      	ldr	r3, [r3, #28]
 8001264:	021b      	lsls	r3, r3, #8
 8001266:	495b      	ldr	r1, [pc, #364]	; (80013d4 <HAL_RCC_OscConfig+0x270>)
 8001268:	4313      	orrs	r3, r2
 800126a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800126c:	69bb      	ldr	r3, [r7, #24]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d109      	bne.n	8001286 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6a1b      	ldr	r3, [r3, #32]
 8001276:	4618      	mov	r0, r3
 8001278:	f000 fd52 	bl	8001d20 <RCC_SetFlashLatencyFromMSIRange>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
 8001284:	e380      	b.n	8001988 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001286:	f000 fc87 	bl	8001b98 <HAL_RCC_GetSysClockFreq>
 800128a:	4602      	mov	r2, r0
 800128c:	4b51      	ldr	r3, [pc, #324]	; (80013d4 <HAL_RCC_OscConfig+0x270>)
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	091b      	lsrs	r3, r3, #4
 8001292:	f003 030f 	and.w	r3, r3, #15
 8001296:	4950      	ldr	r1, [pc, #320]	; (80013d8 <HAL_RCC_OscConfig+0x274>)
 8001298:	5ccb      	ldrb	r3, [r1, r3]
 800129a:	f003 031f 	and.w	r3, r3, #31
 800129e:	fa22 f303 	lsr.w	r3, r2, r3
 80012a2:	4a4e      	ldr	r2, [pc, #312]	; (80013dc <HAL_RCC_OscConfig+0x278>)
 80012a4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80012a6:	4b4e      	ldr	r3, [pc, #312]	; (80013e0 <HAL_RCC_OscConfig+0x27c>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff fbb4 	bl	8000a18 <HAL_InitTick>
 80012b0:	4603      	mov	r3, r0
 80012b2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80012b4:	7bfb      	ldrb	r3, [r7, #15]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d052      	beq.n	8001360 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80012ba:	7bfb      	ldrb	r3, [r7, #15]
 80012bc:	e364      	b.n	8001988 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	699b      	ldr	r3, [r3, #24]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d032      	beq.n	800132c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80012c6:	4b43      	ldr	r3, [pc, #268]	; (80013d4 <HAL_RCC_OscConfig+0x270>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a42      	ldr	r2, [pc, #264]	; (80013d4 <HAL_RCC_OscConfig+0x270>)
 80012cc:	f043 0301 	orr.w	r3, r3, #1
 80012d0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80012d2:	f7ff fbf1 	bl	8000ab8 <HAL_GetTick>
 80012d6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80012d8:	e008      	b.n	80012ec <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80012da:	f7ff fbed 	bl	8000ab8 <HAL_GetTick>
 80012de:	4602      	mov	r2, r0
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	1ad3      	subs	r3, r2, r3
 80012e4:	2b02      	cmp	r3, #2
 80012e6:	d901      	bls.n	80012ec <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80012e8:	2303      	movs	r3, #3
 80012ea:	e34d      	b.n	8001988 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80012ec:	4b39      	ldr	r3, [pc, #228]	; (80013d4 <HAL_RCC_OscConfig+0x270>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f003 0302 	and.w	r3, r3, #2
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d0f0      	beq.n	80012da <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012f8:	4b36      	ldr	r3, [pc, #216]	; (80013d4 <HAL_RCC_OscConfig+0x270>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a35      	ldr	r2, [pc, #212]	; (80013d4 <HAL_RCC_OscConfig+0x270>)
 80012fe:	f043 0308 	orr.w	r3, r3, #8
 8001302:	6013      	str	r3, [r2, #0]
 8001304:	4b33      	ldr	r3, [pc, #204]	; (80013d4 <HAL_RCC_OscConfig+0x270>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6a1b      	ldr	r3, [r3, #32]
 8001310:	4930      	ldr	r1, [pc, #192]	; (80013d4 <HAL_RCC_OscConfig+0x270>)
 8001312:	4313      	orrs	r3, r2
 8001314:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001316:	4b2f      	ldr	r3, [pc, #188]	; (80013d4 <HAL_RCC_OscConfig+0x270>)
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	69db      	ldr	r3, [r3, #28]
 8001322:	021b      	lsls	r3, r3, #8
 8001324:	492b      	ldr	r1, [pc, #172]	; (80013d4 <HAL_RCC_OscConfig+0x270>)
 8001326:	4313      	orrs	r3, r2
 8001328:	604b      	str	r3, [r1, #4]
 800132a:	e01a      	b.n	8001362 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800132c:	4b29      	ldr	r3, [pc, #164]	; (80013d4 <HAL_RCC_OscConfig+0x270>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a28      	ldr	r2, [pc, #160]	; (80013d4 <HAL_RCC_OscConfig+0x270>)
 8001332:	f023 0301 	bic.w	r3, r3, #1
 8001336:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001338:	f7ff fbbe 	bl	8000ab8 <HAL_GetTick>
 800133c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800133e:	e008      	b.n	8001352 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001340:	f7ff fbba 	bl	8000ab8 <HAL_GetTick>
 8001344:	4602      	mov	r2, r0
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	2b02      	cmp	r3, #2
 800134c:	d901      	bls.n	8001352 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800134e:	2303      	movs	r3, #3
 8001350:	e31a      	b.n	8001988 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001352:	4b20      	ldr	r3, [pc, #128]	; (80013d4 <HAL_RCC_OscConfig+0x270>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f003 0302 	and.w	r3, r3, #2
 800135a:	2b00      	cmp	r3, #0
 800135c:	d1f0      	bne.n	8001340 <HAL_RCC_OscConfig+0x1dc>
 800135e:	e000      	b.n	8001362 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001360:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f003 0301 	and.w	r3, r3, #1
 800136a:	2b00      	cmp	r3, #0
 800136c:	d073      	beq.n	8001456 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800136e:	69bb      	ldr	r3, [r7, #24]
 8001370:	2b08      	cmp	r3, #8
 8001372:	d005      	beq.n	8001380 <HAL_RCC_OscConfig+0x21c>
 8001374:	69bb      	ldr	r3, [r7, #24]
 8001376:	2b0c      	cmp	r3, #12
 8001378:	d10e      	bne.n	8001398 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	2b03      	cmp	r3, #3
 800137e:	d10b      	bne.n	8001398 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001380:	4b14      	ldr	r3, [pc, #80]	; (80013d4 <HAL_RCC_OscConfig+0x270>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001388:	2b00      	cmp	r3, #0
 800138a:	d063      	beq.n	8001454 <HAL_RCC_OscConfig+0x2f0>
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d15f      	bne.n	8001454 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001394:	2301      	movs	r3, #1
 8001396:	e2f7      	b.n	8001988 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013a0:	d106      	bne.n	80013b0 <HAL_RCC_OscConfig+0x24c>
 80013a2:	4b0c      	ldr	r3, [pc, #48]	; (80013d4 <HAL_RCC_OscConfig+0x270>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a0b      	ldr	r2, [pc, #44]	; (80013d4 <HAL_RCC_OscConfig+0x270>)
 80013a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013ac:	6013      	str	r3, [r2, #0]
 80013ae:	e025      	b.n	80013fc <HAL_RCC_OscConfig+0x298>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013b8:	d114      	bne.n	80013e4 <HAL_RCC_OscConfig+0x280>
 80013ba:	4b06      	ldr	r3, [pc, #24]	; (80013d4 <HAL_RCC_OscConfig+0x270>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a05      	ldr	r2, [pc, #20]	; (80013d4 <HAL_RCC_OscConfig+0x270>)
 80013c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013c4:	6013      	str	r3, [r2, #0]
 80013c6:	4b03      	ldr	r3, [pc, #12]	; (80013d4 <HAL_RCC_OscConfig+0x270>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a02      	ldr	r2, [pc, #8]	; (80013d4 <HAL_RCC_OscConfig+0x270>)
 80013cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013d0:	6013      	str	r3, [r2, #0]
 80013d2:	e013      	b.n	80013fc <HAL_RCC_OscConfig+0x298>
 80013d4:	40021000 	.word	0x40021000
 80013d8:	08003ab4 	.word	0x08003ab4
 80013dc:	20000000 	.word	0x20000000
 80013e0:	20000004 	.word	0x20000004
 80013e4:	4ba0      	ldr	r3, [pc, #640]	; (8001668 <HAL_RCC_OscConfig+0x504>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a9f      	ldr	r2, [pc, #636]	; (8001668 <HAL_RCC_OscConfig+0x504>)
 80013ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013ee:	6013      	str	r3, [r2, #0]
 80013f0:	4b9d      	ldr	r3, [pc, #628]	; (8001668 <HAL_RCC_OscConfig+0x504>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a9c      	ldr	r2, [pc, #624]	; (8001668 <HAL_RCC_OscConfig+0x504>)
 80013f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d013      	beq.n	800142c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001404:	f7ff fb58 	bl	8000ab8 <HAL_GetTick>
 8001408:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800140a:	e008      	b.n	800141e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800140c:	f7ff fb54 	bl	8000ab8 <HAL_GetTick>
 8001410:	4602      	mov	r2, r0
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	2b64      	cmp	r3, #100	; 0x64
 8001418:	d901      	bls.n	800141e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800141a:	2303      	movs	r3, #3
 800141c:	e2b4      	b.n	8001988 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800141e:	4b92      	ldr	r3, [pc, #584]	; (8001668 <HAL_RCC_OscConfig+0x504>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001426:	2b00      	cmp	r3, #0
 8001428:	d0f0      	beq.n	800140c <HAL_RCC_OscConfig+0x2a8>
 800142a:	e014      	b.n	8001456 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800142c:	f7ff fb44 	bl	8000ab8 <HAL_GetTick>
 8001430:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001432:	e008      	b.n	8001446 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001434:	f7ff fb40 	bl	8000ab8 <HAL_GetTick>
 8001438:	4602      	mov	r2, r0
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	2b64      	cmp	r3, #100	; 0x64
 8001440:	d901      	bls.n	8001446 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001442:	2303      	movs	r3, #3
 8001444:	e2a0      	b.n	8001988 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001446:	4b88      	ldr	r3, [pc, #544]	; (8001668 <HAL_RCC_OscConfig+0x504>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d1f0      	bne.n	8001434 <HAL_RCC_OscConfig+0x2d0>
 8001452:	e000      	b.n	8001456 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001454:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f003 0302 	and.w	r3, r3, #2
 800145e:	2b00      	cmp	r3, #0
 8001460:	d060      	beq.n	8001524 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001462:	69bb      	ldr	r3, [r7, #24]
 8001464:	2b04      	cmp	r3, #4
 8001466:	d005      	beq.n	8001474 <HAL_RCC_OscConfig+0x310>
 8001468:	69bb      	ldr	r3, [r7, #24]
 800146a:	2b0c      	cmp	r3, #12
 800146c:	d119      	bne.n	80014a2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	2b02      	cmp	r3, #2
 8001472:	d116      	bne.n	80014a2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001474:	4b7c      	ldr	r3, [pc, #496]	; (8001668 <HAL_RCC_OscConfig+0x504>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800147c:	2b00      	cmp	r3, #0
 800147e:	d005      	beq.n	800148c <HAL_RCC_OscConfig+0x328>
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d101      	bne.n	800148c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001488:	2301      	movs	r3, #1
 800148a:	e27d      	b.n	8001988 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800148c:	4b76      	ldr	r3, [pc, #472]	; (8001668 <HAL_RCC_OscConfig+0x504>)
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	691b      	ldr	r3, [r3, #16]
 8001498:	061b      	lsls	r3, r3, #24
 800149a:	4973      	ldr	r1, [pc, #460]	; (8001668 <HAL_RCC_OscConfig+0x504>)
 800149c:	4313      	orrs	r3, r2
 800149e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014a0:	e040      	b.n	8001524 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	68db      	ldr	r3, [r3, #12]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d023      	beq.n	80014f2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014aa:	4b6f      	ldr	r3, [pc, #444]	; (8001668 <HAL_RCC_OscConfig+0x504>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a6e      	ldr	r2, [pc, #440]	; (8001668 <HAL_RCC_OscConfig+0x504>)
 80014b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014b6:	f7ff faff 	bl	8000ab8 <HAL_GetTick>
 80014ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014bc:	e008      	b.n	80014d0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014be:	f7ff fafb 	bl	8000ab8 <HAL_GetTick>
 80014c2:	4602      	mov	r2, r0
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	2b02      	cmp	r3, #2
 80014ca:	d901      	bls.n	80014d0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80014cc:	2303      	movs	r3, #3
 80014ce:	e25b      	b.n	8001988 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014d0:	4b65      	ldr	r3, [pc, #404]	; (8001668 <HAL_RCC_OscConfig+0x504>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d0f0      	beq.n	80014be <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014dc:	4b62      	ldr	r3, [pc, #392]	; (8001668 <HAL_RCC_OscConfig+0x504>)
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	691b      	ldr	r3, [r3, #16]
 80014e8:	061b      	lsls	r3, r3, #24
 80014ea:	495f      	ldr	r1, [pc, #380]	; (8001668 <HAL_RCC_OscConfig+0x504>)
 80014ec:	4313      	orrs	r3, r2
 80014ee:	604b      	str	r3, [r1, #4]
 80014f0:	e018      	b.n	8001524 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014f2:	4b5d      	ldr	r3, [pc, #372]	; (8001668 <HAL_RCC_OscConfig+0x504>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a5c      	ldr	r2, [pc, #368]	; (8001668 <HAL_RCC_OscConfig+0x504>)
 80014f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80014fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014fe:	f7ff fadb 	bl	8000ab8 <HAL_GetTick>
 8001502:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001504:	e008      	b.n	8001518 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001506:	f7ff fad7 	bl	8000ab8 <HAL_GetTick>
 800150a:	4602      	mov	r2, r0
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	2b02      	cmp	r3, #2
 8001512:	d901      	bls.n	8001518 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001514:	2303      	movs	r3, #3
 8001516:	e237      	b.n	8001988 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001518:	4b53      	ldr	r3, [pc, #332]	; (8001668 <HAL_RCC_OscConfig+0x504>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001520:	2b00      	cmp	r3, #0
 8001522:	d1f0      	bne.n	8001506 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f003 0308 	and.w	r3, r3, #8
 800152c:	2b00      	cmp	r3, #0
 800152e:	d03c      	beq.n	80015aa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	695b      	ldr	r3, [r3, #20]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d01c      	beq.n	8001572 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001538:	4b4b      	ldr	r3, [pc, #300]	; (8001668 <HAL_RCC_OscConfig+0x504>)
 800153a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800153e:	4a4a      	ldr	r2, [pc, #296]	; (8001668 <HAL_RCC_OscConfig+0x504>)
 8001540:	f043 0301 	orr.w	r3, r3, #1
 8001544:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001548:	f7ff fab6 	bl	8000ab8 <HAL_GetTick>
 800154c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800154e:	e008      	b.n	8001562 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001550:	f7ff fab2 	bl	8000ab8 <HAL_GetTick>
 8001554:	4602      	mov	r2, r0
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	2b02      	cmp	r3, #2
 800155c:	d901      	bls.n	8001562 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800155e:	2303      	movs	r3, #3
 8001560:	e212      	b.n	8001988 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001562:	4b41      	ldr	r3, [pc, #260]	; (8001668 <HAL_RCC_OscConfig+0x504>)
 8001564:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001568:	f003 0302 	and.w	r3, r3, #2
 800156c:	2b00      	cmp	r3, #0
 800156e:	d0ef      	beq.n	8001550 <HAL_RCC_OscConfig+0x3ec>
 8001570:	e01b      	b.n	80015aa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001572:	4b3d      	ldr	r3, [pc, #244]	; (8001668 <HAL_RCC_OscConfig+0x504>)
 8001574:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001578:	4a3b      	ldr	r2, [pc, #236]	; (8001668 <HAL_RCC_OscConfig+0x504>)
 800157a:	f023 0301 	bic.w	r3, r3, #1
 800157e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001582:	f7ff fa99 	bl	8000ab8 <HAL_GetTick>
 8001586:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001588:	e008      	b.n	800159c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800158a:	f7ff fa95 	bl	8000ab8 <HAL_GetTick>
 800158e:	4602      	mov	r2, r0
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	2b02      	cmp	r3, #2
 8001596:	d901      	bls.n	800159c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001598:	2303      	movs	r3, #3
 800159a:	e1f5      	b.n	8001988 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800159c:	4b32      	ldr	r3, [pc, #200]	; (8001668 <HAL_RCC_OscConfig+0x504>)
 800159e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015a2:	f003 0302 	and.w	r3, r3, #2
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d1ef      	bne.n	800158a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 0304 	and.w	r3, r3, #4
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	f000 80a6 	beq.w	8001704 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015b8:	2300      	movs	r3, #0
 80015ba:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80015bc:	4b2a      	ldr	r3, [pc, #168]	; (8001668 <HAL_RCC_OscConfig+0x504>)
 80015be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d10d      	bne.n	80015e4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015c8:	4b27      	ldr	r3, [pc, #156]	; (8001668 <HAL_RCC_OscConfig+0x504>)
 80015ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015cc:	4a26      	ldr	r2, [pc, #152]	; (8001668 <HAL_RCC_OscConfig+0x504>)
 80015ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015d2:	6593      	str	r3, [r2, #88]	; 0x58
 80015d4:	4b24      	ldr	r3, [pc, #144]	; (8001668 <HAL_RCC_OscConfig+0x504>)
 80015d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015dc:	60bb      	str	r3, [r7, #8]
 80015de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015e0:	2301      	movs	r3, #1
 80015e2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015e4:	4b21      	ldr	r3, [pc, #132]	; (800166c <HAL_RCC_OscConfig+0x508>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d118      	bne.n	8001622 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80015f0:	4b1e      	ldr	r3, [pc, #120]	; (800166c <HAL_RCC_OscConfig+0x508>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a1d      	ldr	r2, [pc, #116]	; (800166c <HAL_RCC_OscConfig+0x508>)
 80015f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015fa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015fc:	f7ff fa5c 	bl	8000ab8 <HAL_GetTick>
 8001600:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001602:	e008      	b.n	8001616 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001604:	f7ff fa58 	bl	8000ab8 <HAL_GetTick>
 8001608:	4602      	mov	r2, r0
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	2b02      	cmp	r3, #2
 8001610:	d901      	bls.n	8001616 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001612:	2303      	movs	r3, #3
 8001614:	e1b8      	b.n	8001988 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001616:	4b15      	ldr	r3, [pc, #84]	; (800166c <HAL_RCC_OscConfig+0x508>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800161e:	2b00      	cmp	r3, #0
 8001620:	d0f0      	beq.n	8001604 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	2b01      	cmp	r3, #1
 8001628:	d108      	bne.n	800163c <HAL_RCC_OscConfig+0x4d8>
 800162a:	4b0f      	ldr	r3, [pc, #60]	; (8001668 <HAL_RCC_OscConfig+0x504>)
 800162c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001630:	4a0d      	ldr	r2, [pc, #52]	; (8001668 <HAL_RCC_OscConfig+0x504>)
 8001632:	f043 0301 	orr.w	r3, r3, #1
 8001636:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800163a:	e029      	b.n	8001690 <HAL_RCC_OscConfig+0x52c>
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	2b05      	cmp	r3, #5
 8001642:	d115      	bne.n	8001670 <HAL_RCC_OscConfig+0x50c>
 8001644:	4b08      	ldr	r3, [pc, #32]	; (8001668 <HAL_RCC_OscConfig+0x504>)
 8001646:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800164a:	4a07      	ldr	r2, [pc, #28]	; (8001668 <HAL_RCC_OscConfig+0x504>)
 800164c:	f043 0304 	orr.w	r3, r3, #4
 8001650:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001654:	4b04      	ldr	r3, [pc, #16]	; (8001668 <HAL_RCC_OscConfig+0x504>)
 8001656:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800165a:	4a03      	ldr	r2, [pc, #12]	; (8001668 <HAL_RCC_OscConfig+0x504>)
 800165c:	f043 0301 	orr.w	r3, r3, #1
 8001660:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001664:	e014      	b.n	8001690 <HAL_RCC_OscConfig+0x52c>
 8001666:	bf00      	nop
 8001668:	40021000 	.word	0x40021000
 800166c:	40007000 	.word	0x40007000
 8001670:	4b9d      	ldr	r3, [pc, #628]	; (80018e8 <HAL_RCC_OscConfig+0x784>)
 8001672:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001676:	4a9c      	ldr	r2, [pc, #624]	; (80018e8 <HAL_RCC_OscConfig+0x784>)
 8001678:	f023 0301 	bic.w	r3, r3, #1
 800167c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001680:	4b99      	ldr	r3, [pc, #612]	; (80018e8 <HAL_RCC_OscConfig+0x784>)
 8001682:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001686:	4a98      	ldr	r2, [pc, #608]	; (80018e8 <HAL_RCC_OscConfig+0x784>)
 8001688:	f023 0304 	bic.w	r3, r3, #4
 800168c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d016      	beq.n	80016c6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001698:	f7ff fa0e 	bl	8000ab8 <HAL_GetTick>
 800169c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800169e:	e00a      	b.n	80016b6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016a0:	f7ff fa0a 	bl	8000ab8 <HAL_GetTick>
 80016a4:	4602      	mov	r2, r0
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d901      	bls.n	80016b6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80016b2:	2303      	movs	r3, #3
 80016b4:	e168      	b.n	8001988 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016b6:	4b8c      	ldr	r3, [pc, #560]	; (80018e8 <HAL_RCC_OscConfig+0x784>)
 80016b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016bc:	f003 0302 	and.w	r3, r3, #2
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d0ed      	beq.n	80016a0 <HAL_RCC_OscConfig+0x53c>
 80016c4:	e015      	b.n	80016f2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016c6:	f7ff f9f7 	bl	8000ab8 <HAL_GetTick>
 80016ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016cc:	e00a      	b.n	80016e4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016ce:	f7ff f9f3 	bl	8000ab8 <HAL_GetTick>
 80016d2:	4602      	mov	r2, r0
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80016dc:	4293      	cmp	r3, r2
 80016de:	d901      	bls.n	80016e4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80016e0:	2303      	movs	r3, #3
 80016e2:	e151      	b.n	8001988 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016e4:	4b80      	ldr	r3, [pc, #512]	; (80018e8 <HAL_RCC_OscConfig+0x784>)
 80016e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016ea:	f003 0302 	and.w	r3, r3, #2
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d1ed      	bne.n	80016ce <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80016f2:	7ffb      	ldrb	r3, [r7, #31]
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d105      	bne.n	8001704 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016f8:	4b7b      	ldr	r3, [pc, #492]	; (80018e8 <HAL_RCC_OscConfig+0x784>)
 80016fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016fc:	4a7a      	ldr	r2, [pc, #488]	; (80018e8 <HAL_RCC_OscConfig+0x784>)
 80016fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001702:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f003 0320 	and.w	r3, r3, #32
 800170c:	2b00      	cmp	r3, #0
 800170e:	d03c      	beq.n	800178a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001714:	2b00      	cmp	r3, #0
 8001716:	d01c      	beq.n	8001752 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001718:	4b73      	ldr	r3, [pc, #460]	; (80018e8 <HAL_RCC_OscConfig+0x784>)
 800171a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800171e:	4a72      	ldr	r2, [pc, #456]	; (80018e8 <HAL_RCC_OscConfig+0x784>)
 8001720:	f043 0301 	orr.w	r3, r3, #1
 8001724:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001728:	f7ff f9c6 	bl	8000ab8 <HAL_GetTick>
 800172c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800172e:	e008      	b.n	8001742 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001730:	f7ff f9c2 	bl	8000ab8 <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	2b02      	cmp	r3, #2
 800173c:	d901      	bls.n	8001742 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800173e:	2303      	movs	r3, #3
 8001740:	e122      	b.n	8001988 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001742:	4b69      	ldr	r3, [pc, #420]	; (80018e8 <HAL_RCC_OscConfig+0x784>)
 8001744:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001748:	f003 0302 	and.w	r3, r3, #2
 800174c:	2b00      	cmp	r3, #0
 800174e:	d0ef      	beq.n	8001730 <HAL_RCC_OscConfig+0x5cc>
 8001750:	e01b      	b.n	800178a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001752:	4b65      	ldr	r3, [pc, #404]	; (80018e8 <HAL_RCC_OscConfig+0x784>)
 8001754:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001758:	4a63      	ldr	r2, [pc, #396]	; (80018e8 <HAL_RCC_OscConfig+0x784>)
 800175a:	f023 0301 	bic.w	r3, r3, #1
 800175e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001762:	f7ff f9a9 	bl	8000ab8 <HAL_GetTick>
 8001766:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001768:	e008      	b.n	800177c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800176a:	f7ff f9a5 	bl	8000ab8 <HAL_GetTick>
 800176e:	4602      	mov	r2, r0
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	1ad3      	subs	r3, r2, r3
 8001774:	2b02      	cmp	r3, #2
 8001776:	d901      	bls.n	800177c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001778:	2303      	movs	r3, #3
 800177a:	e105      	b.n	8001988 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800177c:	4b5a      	ldr	r3, [pc, #360]	; (80018e8 <HAL_RCC_OscConfig+0x784>)
 800177e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001782:	f003 0302 	and.w	r3, r3, #2
 8001786:	2b00      	cmp	r3, #0
 8001788:	d1ef      	bne.n	800176a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800178e:	2b00      	cmp	r3, #0
 8001790:	f000 80f9 	beq.w	8001986 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001798:	2b02      	cmp	r3, #2
 800179a:	f040 80cf 	bne.w	800193c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800179e:	4b52      	ldr	r3, [pc, #328]	; (80018e8 <HAL_RCC_OscConfig+0x784>)
 80017a0:	68db      	ldr	r3, [r3, #12]
 80017a2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	f003 0203 	and.w	r2, r3, #3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ae:	429a      	cmp	r2, r3
 80017b0:	d12c      	bne.n	800180c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017bc:	3b01      	subs	r3, #1
 80017be:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d123      	bne.n	800180c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017ce:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d11b      	bne.n	800180c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017de:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d113      	bne.n	800180c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017ee:	085b      	lsrs	r3, r3, #1
 80017f0:	3b01      	subs	r3, #1
 80017f2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d109      	bne.n	800180c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001802:	085b      	lsrs	r3, r3, #1
 8001804:	3b01      	subs	r3, #1
 8001806:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001808:	429a      	cmp	r2, r3
 800180a:	d071      	beq.n	80018f0 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800180c:	69bb      	ldr	r3, [r7, #24]
 800180e:	2b0c      	cmp	r3, #12
 8001810:	d068      	beq.n	80018e4 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001812:	4b35      	ldr	r3, [pc, #212]	; (80018e8 <HAL_RCC_OscConfig+0x784>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d105      	bne.n	800182a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800181e:	4b32      	ldr	r3, [pc, #200]	; (80018e8 <HAL_RCC_OscConfig+0x784>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e0ac      	b.n	8001988 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800182e:	4b2e      	ldr	r3, [pc, #184]	; (80018e8 <HAL_RCC_OscConfig+0x784>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a2d      	ldr	r2, [pc, #180]	; (80018e8 <HAL_RCC_OscConfig+0x784>)
 8001834:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001838:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800183a:	f7ff f93d 	bl	8000ab8 <HAL_GetTick>
 800183e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001840:	e008      	b.n	8001854 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001842:	f7ff f939 	bl	8000ab8 <HAL_GetTick>
 8001846:	4602      	mov	r2, r0
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	1ad3      	subs	r3, r2, r3
 800184c:	2b02      	cmp	r3, #2
 800184e:	d901      	bls.n	8001854 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001850:	2303      	movs	r3, #3
 8001852:	e099      	b.n	8001988 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001854:	4b24      	ldr	r3, [pc, #144]	; (80018e8 <HAL_RCC_OscConfig+0x784>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800185c:	2b00      	cmp	r3, #0
 800185e:	d1f0      	bne.n	8001842 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001860:	4b21      	ldr	r3, [pc, #132]	; (80018e8 <HAL_RCC_OscConfig+0x784>)
 8001862:	68da      	ldr	r2, [r3, #12]
 8001864:	4b21      	ldr	r3, [pc, #132]	; (80018ec <HAL_RCC_OscConfig+0x788>)
 8001866:	4013      	ands	r3, r2
 8001868:	687a      	ldr	r2, [r7, #4]
 800186a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800186c:	687a      	ldr	r2, [r7, #4]
 800186e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001870:	3a01      	subs	r2, #1
 8001872:	0112      	lsls	r2, r2, #4
 8001874:	4311      	orrs	r1, r2
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800187a:	0212      	lsls	r2, r2, #8
 800187c:	4311      	orrs	r1, r2
 800187e:	687a      	ldr	r2, [r7, #4]
 8001880:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001882:	0852      	lsrs	r2, r2, #1
 8001884:	3a01      	subs	r2, #1
 8001886:	0552      	lsls	r2, r2, #21
 8001888:	4311      	orrs	r1, r2
 800188a:	687a      	ldr	r2, [r7, #4]
 800188c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800188e:	0852      	lsrs	r2, r2, #1
 8001890:	3a01      	subs	r2, #1
 8001892:	0652      	lsls	r2, r2, #25
 8001894:	4311      	orrs	r1, r2
 8001896:	687a      	ldr	r2, [r7, #4]
 8001898:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800189a:	06d2      	lsls	r2, r2, #27
 800189c:	430a      	orrs	r2, r1
 800189e:	4912      	ldr	r1, [pc, #72]	; (80018e8 <HAL_RCC_OscConfig+0x784>)
 80018a0:	4313      	orrs	r3, r2
 80018a2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80018a4:	4b10      	ldr	r3, [pc, #64]	; (80018e8 <HAL_RCC_OscConfig+0x784>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a0f      	ldr	r2, [pc, #60]	; (80018e8 <HAL_RCC_OscConfig+0x784>)
 80018aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018ae:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80018b0:	4b0d      	ldr	r3, [pc, #52]	; (80018e8 <HAL_RCC_OscConfig+0x784>)
 80018b2:	68db      	ldr	r3, [r3, #12]
 80018b4:	4a0c      	ldr	r2, [pc, #48]	; (80018e8 <HAL_RCC_OscConfig+0x784>)
 80018b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018ba:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80018bc:	f7ff f8fc 	bl	8000ab8 <HAL_GetTick>
 80018c0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018c2:	e008      	b.n	80018d6 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018c4:	f7ff f8f8 	bl	8000ab8 <HAL_GetTick>
 80018c8:	4602      	mov	r2, r0
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d901      	bls.n	80018d6 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80018d2:	2303      	movs	r3, #3
 80018d4:	e058      	b.n	8001988 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018d6:	4b04      	ldr	r3, [pc, #16]	; (80018e8 <HAL_RCC_OscConfig+0x784>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d0f0      	beq.n	80018c4 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018e2:	e050      	b.n	8001986 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80018e4:	2301      	movs	r3, #1
 80018e6:	e04f      	b.n	8001988 <HAL_RCC_OscConfig+0x824>
 80018e8:	40021000 	.word	0x40021000
 80018ec:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018f0:	4b27      	ldr	r3, [pc, #156]	; (8001990 <HAL_RCC_OscConfig+0x82c>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d144      	bne.n	8001986 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80018fc:	4b24      	ldr	r3, [pc, #144]	; (8001990 <HAL_RCC_OscConfig+0x82c>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a23      	ldr	r2, [pc, #140]	; (8001990 <HAL_RCC_OscConfig+0x82c>)
 8001902:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001906:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001908:	4b21      	ldr	r3, [pc, #132]	; (8001990 <HAL_RCC_OscConfig+0x82c>)
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	4a20      	ldr	r2, [pc, #128]	; (8001990 <HAL_RCC_OscConfig+0x82c>)
 800190e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001912:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001914:	f7ff f8d0 	bl	8000ab8 <HAL_GetTick>
 8001918:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800191a:	e008      	b.n	800192e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800191c:	f7ff f8cc 	bl	8000ab8 <HAL_GetTick>
 8001920:	4602      	mov	r2, r0
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	2b02      	cmp	r3, #2
 8001928:	d901      	bls.n	800192e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800192a:	2303      	movs	r3, #3
 800192c:	e02c      	b.n	8001988 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800192e:	4b18      	ldr	r3, [pc, #96]	; (8001990 <HAL_RCC_OscConfig+0x82c>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001936:	2b00      	cmp	r3, #0
 8001938:	d0f0      	beq.n	800191c <HAL_RCC_OscConfig+0x7b8>
 800193a:	e024      	b.n	8001986 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800193c:	69bb      	ldr	r3, [r7, #24]
 800193e:	2b0c      	cmp	r3, #12
 8001940:	d01f      	beq.n	8001982 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001942:	4b13      	ldr	r3, [pc, #76]	; (8001990 <HAL_RCC_OscConfig+0x82c>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a12      	ldr	r2, [pc, #72]	; (8001990 <HAL_RCC_OscConfig+0x82c>)
 8001948:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800194c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800194e:	f7ff f8b3 	bl	8000ab8 <HAL_GetTick>
 8001952:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001954:	e008      	b.n	8001968 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001956:	f7ff f8af 	bl	8000ab8 <HAL_GetTick>
 800195a:	4602      	mov	r2, r0
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	1ad3      	subs	r3, r2, r3
 8001960:	2b02      	cmp	r3, #2
 8001962:	d901      	bls.n	8001968 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001964:	2303      	movs	r3, #3
 8001966:	e00f      	b.n	8001988 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001968:	4b09      	ldr	r3, [pc, #36]	; (8001990 <HAL_RCC_OscConfig+0x82c>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001970:	2b00      	cmp	r3, #0
 8001972:	d1f0      	bne.n	8001956 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001974:	4b06      	ldr	r3, [pc, #24]	; (8001990 <HAL_RCC_OscConfig+0x82c>)
 8001976:	68da      	ldr	r2, [r3, #12]
 8001978:	4905      	ldr	r1, [pc, #20]	; (8001990 <HAL_RCC_OscConfig+0x82c>)
 800197a:	4b06      	ldr	r3, [pc, #24]	; (8001994 <HAL_RCC_OscConfig+0x830>)
 800197c:	4013      	ands	r3, r2
 800197e:	60cb      	str	r3, [r1, #12]
 8001980:	e001      	b.n	8001986 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e000      	b.n	8001988 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8001986:	2300      	movs	r3, #0
}
 8001988:	4618      	mov	r0, r3
 800198a:	3720      	adds	r7, #32
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	40021000 	.word	0x40021000
 8001994:	feeefffc 	.word	0xfeeefffc

08001998 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d101      	bne.n	80019ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e0e7      	b.n	8001b7c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019ac:	4b75      	ldr	r3, [pc, #468]	; (8001b84 <HAL_RCC_ClockConfig+0x1ec>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 0307 	and.w	r3, r3, #7
 80019b4:	683a      	ldr	r2, [r7, #0]
 80019b6:	429a      	cmp	r2, r3
 80019b8:	d910      	bls.n	80019dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ba:	4b72      	ldr	r3, [pc, #456]	; (8001b84 <HAL_RCC_ClockConfig+0x1ec>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f023 0207 	bic.w	r2, r3, #7
 80019c2:	4970      	ldr	r1, [pc, #448]	; (8001b84 <HAL_RCC_ClockConfig+0x1ec>)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	4313      	orrs	r3, r2
 80019c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019ca:	4b6e      	ldr	r3, [pc, #440]	; (8001b84 <HAL_RCC_ClockConfig+0x1ec>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 0307 	and.w	r3, r3, #7
 80019d2:	683a      	ldr	r2, [r7, #0]
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d001      	beq.n	80019dc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	e0cf      	b.n	8001b7c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 0302 	and.w	r3, r3, #2
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d010      	beq.n	8001a0a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	689a      	ldr	r2, [r3, #8]
 80019ec:	4b66      	ldr	r3, [pc, #408]	; (8001b88 <HAL_RCC_ClockConfig+0x1f0>)
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d908      	bls.n	8001a0a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019f8:	4b63      	ldr	r3, [pc, #396]	; (8001b88 <HAL_RCC_ClockConfig+0x1f0>)
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	4960      	ldr	r1, [pc, #384]	; (8001b88 <HAL_RCC_ClockConfig+0x1f0>)
 8001a06:	4313      	orrs	r3, r2
 8001a08:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 0301 	and.w	r3, r3, #1
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d04c      	beq.n	8001ab0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	2b03      	cmp	r3, #3
 8001a1c:	d107      	bne.n	8001a2e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a1e:	4b5a      	ldr	r3, [pc, #360]	; (8001b88 <HAL_RCC_ClockConfig+0x1f0>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d121      	bne.n	8001a6e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e0a6      	b.n	8001b7c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	d107      	bne.n	8001a46 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a36:	4b54      	ldr	r3, [pc, #336]	; (8001b88 <HAL_RCC_ClockConfig+0x1f0>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d115      	bne.n	8001a6e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e09a      	b.n	8001b7c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d107      	bne.n	8001a5e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a4e:	4b4e      	ldr	r3, [pc, #312]	; (8001b88 <HAL_RCC_ClockConfig+0x1f0>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 0302 	and.w	r3, r3, #2
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d109      	bne.n	8001a6e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e08e      	b.n	8001b7c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a5e:	4b4a      	ldr	r3, [pc, #296]	; (8001b88 <HAL_RCC_ClockConfig+0x1f0>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d101      	bne.n	8001a6e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e086      	b.n	8001b7c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a6e:	4b46      	ldr	r3, [pc, #280]	; (8001b88 <HAL_RCC_ClockConfig+0x1f0>)
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	f023 0203 	bic.w	r2, r3, #3
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	4943      	ldr	r1, [pc, #268]	; (8001b88 <HAL_RCC_ClockConfig+0x1f0>)
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a80:	f7ff f81a 	bl	8000ab8 <HAL_GetTick>
 8001a84:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a86:	e00a      	b.n	8001a9e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a88:	f7ff f816 	bl	8000ab8 <HAL_GetTick>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d901      	bls.n	8001a9e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	e06e      	b.n	8001b7c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a9e:	4b3a      	ldr	r3, [pc, #232]	; (8001b88 <HAL_RCC_ClockConfig+0x1f0>)
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	f003 020c 	and.w	r2, r3, #12
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d1eb      	bne.n	8001a88 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0302 	and.w	r3, r3, #2
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d010      	beq.n	8001ade <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	689a      	ldr	r2, [r3, #8]
 8001ac0:	4b31      	ldr	r3, [pc, #196]	; (8001b88 <HAL_RCC_ClockConfig+0x1f0>)
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d208      	bcs.n	8001ade <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001acc:	4b2e      	ldr	r3, [pc, #184]	; (8001b88 <HAL_RCC_ClockConfig+0x1f0>)
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	492b      	ldr	r1, [pc, #172]	; (8001b88 <HAL_RCC_ClockConfig+0x1f0>)
 8001ada:	4313      	orrs	r3, r2
 8001adc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ade:	4b29      	ldr	r3, [pc, #164]	; (8001b84 <HAL_RCC_ClockConfig+0x1ec>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0307 	and.w	r3, r3, #7
 8001ae6:	683a      	ldr	r2, [r7, #0]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d210      	bcs.n	8001b0e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aec:	4b25      	ldr	r3, [pc, #148]	; (8001b84 <HAL_RCC_ClockConfig+0x1ec>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f023 0207 	bic.w	r2, r3, #7
 8001af4:	4923      	ldr	r1, [pc, #140]	; (8001b84 <HAL_RCC_ClockConfig+0x1ec>)
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	4313      	orrs	r3, r2
 8001afa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001afc:	4b21      	ldr	r3, [pc, #132]	; (8001b84 <HAL_RCC_ClockConfig+0x1ec>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 0307 	and.w	r3, r3, #7
 8001b04:	683a      	ldr	r2, [r7, #0]
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d001      	beq.n	8001b0e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e036      	b.n	8001b7c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0304 	and.w	r3, r3, #4
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d008      	beq.n	8001b2c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b1a:	4b1b      	ldr	r3, [pc, #108]	; (8001b88 <HAL_RCC_ClockConfig+0x1f0>)
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	68db      	ldr	r3, [r3, #12]
 8001b26:	4918      	ldr	r1, [pc, #96]	; (8001b88 <HAL_RCC_ClockConfig+0x1f0>)
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 0308 	and.w	r3, r3, #8
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d009      	beq.n	8001b4c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b38:	4b13      	ldr	r3, [pc, #76]	; (8001b88 <HAL_RCC_ClockConfig+0x1f0>)
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	691b      	ldr	r3, [r3, #16]
 8001b44:	00db      	lsls	r3, r3, #3
 8001b46:	4910      	ldr	r1, [pc, #64]	; (8001b88 <HAL_RCC_ClockConfig+0x1f0>)
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b4c:	f000 f824 	bl	8001b98 <HAL_RCC_GetSysClockFreq>
 8001b50:	4602      	mov	r2, r0
 8001b52:	4b0d      	ldr	r3, [pc, #52]	; (8001b88 <HAL_RCC_ClockConfig+0x1f0>)
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	091b      	lsrs	r3, r3, #4
 8001b58:	f003 030f 	and.w	r3, r3, #15
 8001b5c:	490b      	ldr	r1, [pc, #44]	; (8001b8c <HAL_RCC_ClockConfig+0x1f4>)
 8001b5e:	5ccb      	ldrb	r3, [r1, r3]
 8001b60:	f003 031f 	and.w	r3, r3, #31
 8001b64:	fa22 f303 	lsr.w	r3, r2, r3
 8001b68:	4a09      	ldr	r2, [pc, #36]	; (8001b90 <HAL_RCC_ClockConfig+0x1f8>)
 8001b6a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001b6c:	4b09      	ldr	r3, [pc, #36]	; (8001b94 <HAL_RCC_ClockConfig+0x1fc>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4618      	mov	r0, r3
 8001b72:	f7fe ff51 	bl	8000a18 <HAL_InitTick>
 8001b76:	4603      	mov	r3, r0
 8001b78:	72fb      	strb	r3, [r7, #11]

  return status;
 8001b7a:	7afb      	ldrb	r3, [r7, #11]
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3710      	adds	r7, #16
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	40022000 	.word	0x40022000
 8001b88:	40021000 	.word	0x40021000
 8001b8c:	08003ab4 	.word	0x08003ab4
 8001b90:	20000000 	.word	0x20000000
 8001b94:	20000004 	.word	0x20000004

08001b98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b089      	sub	sp, #36	; 0x24
 8001b9c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	61fb      	str	r3, [r7, #28]
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ba6:	4b3e      	ldr	r3, [pc, #248]	; (8001ca0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	f003 030c 	and.w	r3, r3, #12
 8001bae:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001bb0:	4b3b      	ldr	r3, [pc, #236]	; (8001ca0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	f003 0303 	and.w	r3, r3, #3
 8001bb8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d005      	beq.n	8001bcc <HAL_RCC_GetSysClockFreq+0x34>
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	2b0c      	cmp	r3, #12
 8001bc4:	d121      	bne.n	8001c0a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d11e      	bne.n	8001c0a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001bcc:	4b34      	ldr	r3, [pc, #208]	; (8001ca0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 0308 	and.w	r3, r3, #8
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d107      	bne.n	8001be8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001bd8:	4b31      	ldr	r3, [pc, #196]	; (8001ca0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bde:	0a1b      	lsrs	r3, r3, #8
 8001be0:	f003 030f 	and.w	r3, r3, #15
 8001be4:	61fb      	str	r3, [r7, #28]
 8001be6:	e005      	b.n	8001bf4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001be8:	4b2d      	ldr	r3, [pc, #180]	; (8001ca0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	091b      	lsrs	r3, r3, #4
 8001bee:	f003 030f 	and.w	r3, r3, #15
 8001bf2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001bf4:	4a2b      	ldr	r2, [pc, #172]	; (8001ca4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bfc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d10d      	bne.n	8001c20 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c08:	e00a      	b.n	8001c20 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	2b04      	cmp	r3, #4
 8001c0e:	d102      	bne.n	8001c16 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001c10:	4b25      	ldr	r3, [pc, #148]	; (8001ca8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001c12:	61bb      	str	r3, [r7, #24]
 8001c14:	e004      	b.n	8001c20 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	2b08      	cmp	r3, #8
 8001c1a:	d101      	bne.n	8001c20 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001c1c:	4b23      	ldr	r3, [pc, #140]	; (8001cac <HAL_RCC_GetSysClockFreq+0x114>)
 8001c1e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	2b0c      	cmp	r3, #12
 8001c24:	d134      	bne.n	8001c90 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c26:	4b1e      	ldr	r3, [pc, #120]	; (8001ca0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c28:	68db      	ldr	r3, [r3, #12]
 8001c2a:	f003 0303 	and.w	r3, r3, #3
 8001c2e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d003      	beq.n	8001c3e <HAL_RCC_GetSysClockFreq+0xa6>
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	2b03      	cmp	r3, #3
 8001c3a:	d003      	beq.n	8001c44 <HAL_RCC_GetSysClockFreq+0xac>
 8001c3c:	e005      	b.n	8001c4a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001c3e:	4b1a      	ldr	r3, [pc, #104]	; (8001ca8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001c40:	617b      	str	r3, [r7, #20]
      break;
 8001c42:	e005      	b.n	8001c50 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001c44:	4b19      	ldr	r3, [pc, #100]	; (8001cac <HAL_RCC_GetSysClockFreq+0x114>)
 8001c46:	617b      	str	r3, [r7, #20]
      break;
 8001c48:	e002      	b.n	8001c50 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	617b      	str	r3, [r7, #20]
      break;
 8001c4e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c50:	4b13      	ldr	r3, [pc, #76]	; (8001ca0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	091b      	lsrs	r3, r3, #4
 8001c56:	f003 0307 	and.w	r3, r3, #7
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001c5e:	4b10      	ldr	r3, [pc, #64]	; (8001ca0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c60:	68db      	ldr	r3, [r3, #12]
 8001c62:	0a1b      	lsrs	r3, r3, #8
 8001c64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c68:	697a      	ldr	r2, [r7, #20]
 8001c6a:	fb03 f202 	mul.w	r2, r3, r2
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c74:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c76:	4b0a      	ldr	r3, [pc, #40]	; (8001ca0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c78:	68db      	ldr	r3, [r3, #12]
 8001c7a:	0e5b      	lsrs	r3, r3, #25
 8001c7c:	f003 0303 	and.w	r3, r3, #3
 8001c80:	3301      	adds	r3, #1
 8001c82:	005b      	lsls	r3, r3, #1
 8001c84:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001c86:	697a      	ldr	r2, [r7, #20]
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c8e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001c90:	69bb      	ldr	r3, [r7, #24]
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3724      	adds	r7, #36	; 0x24
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	40021000 	.word	0x40021000
 8001ca4:	08003acc 	.word	0x08003acc
 8001ca8:	00f42400 	.word	0x00f42400
 8001cac:	007a1200 	.word	0x007a1200

08001cb0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cb4:	4b03      	ldr	r3, [pc, #12]	; (8001cc4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	20000000 	.word	0x20000000

08001cc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001ccc:	f7ff fff0 	bl	8001cb0 <HAL_RCC_GetHCLKFreq>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	4b06      	ldr	r3, [pc, #24]	; (8001cec <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	0a1b      	lsrs	r3, r3, #8
 8001cd8:	f003 0307 	and.w	r3, r3, #7
 8001cdc:	4904      	ldr	r1, [pc, #16]	; (8001cf0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001cde:	5ccb      	ldrb	r3, [r1, r3]
 8001ce0:	f003 031f 	and.w	r3, r3, #31
 8001ce4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	40021000 	.word	0x40021000
 8001cf0:	08003ac4 	.word	0x08003ac4

08001cf4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001cf8:	f7ff ffda 	bl	8001cb0 <HAL_RCC_GetHCLKFreq>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	4b06      	ldr	r3, [pc, #24]	; (8001d18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	0adb      	lsrs	r3, r3, #11
 8001d04:	f003 0307 	and.w	r3, r3, #7
 8001d08:	4904      	ldr	r1, [pc, #16]	; (8001d1c <HAL_RCC_GetPCLK2Freq+0x28>)
 8001d0a:	5ccb      	ldrb	r3, [r1, r3]
 8001d0c:	f003 031f 	and.w	r3, r3, #31
 8001d10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	40021000 	.word	0x40021000
 8001d1c:	08003ac4 	.word	0x08003ac4

08001d20 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b086      	sub	sp, #24
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001d28:	2300      	movs	r3, #0
 8001d2a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001d2c:	4b2a      	ldr	r3, [pc, #168]	; (8001dd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d003      	beq.n	8001d40 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001d38:	f7ff f9a0 	bl	800107c <HAL_PWREx_GetVoltageRange>
 8001d3c:	6178      	str	r0, [r7, #20]
 8001d3e:	e014      	b.n	8001d6a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d40:	4b25      	ldr	r3, [pc, #148]	; (8001dd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d44:	4a24      	ldr	r2, [pc, #144]	; (8001dd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d4a:	6593      	str	r3, [r2, #88]	; 0x58
 8001d4c:	4b22      	ldr	r3, [pc, #136]	; (8001dd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d54:	60fb      	str	r3, [r7, #12]
 8001d56:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001d58:	f7ff f990 	bl	800107c <HAL_PWREx_GetVoltageRange>
 8001d5c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001d5e:	4b1e      	ldr	r3, [pc, #120]	; (8001dd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d62:	4a1d      	ldr	r2, [pc, #116]	; (8001dd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d68:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d70:	d10b      	bne.n	8001d8a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2b80      	cmp	r3, #128	; 0x80
 8001d76:	d919      	bls.n	8001dac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2ba0      	cmp	r3, #160	; 0xa0
 8001d7c:	d902      	bls.n	8001d84 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d7e:	2302      	movs	r3, #2
 8001d80:	613b      	str	r3, [r7, #16]
 8001d82:	e013      	b.n	8001dac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d84:	2301      	movs	r3, #1
 8001d86:	613b      	str	r3, [r7, #16]
 8001d88:	e010      	b.n	8001dac <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2b80      	cmp	r3, #128	; 0x80
 8001d8e:	d902      	bls.n	8001d96 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001d90:	2303      	movs	r3, #3
 8001d92:	613b      	str	r3, [r7, #16]
 8001d94:	e00a      	b.n	8001dac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2b80      	cmp	r3, #128	; 0x80
 8001d9a:	d102      	bne.n	8001da2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	613b      	str	r3, [r7, #16]
 8001da0:	e004      	b.n	8001dac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2b70      	cmp	r3, #112	; 0x70
 8001da6:	d101      	bne.n	8001dac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001da8:	2301      	movs	r3, #1
 8001daa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001dac:	4b0b      	ldr	r3, [pc, #44]	; (8001ddc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f023 0207 	bic.w	r2, r3, #7
 8001db4:	4909      	ldr	r1, [pc, #36]	; (8001ddc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001dbc:	4b07      	ldr	r3, [pc, #28]	; (8001ddc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 0307 	and.w	r3, r3, #7
 8001dc4:	693a      	ldr	r2, [r7, #16]
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d001      	beq.n	8001dce <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e000      	b.n	8001dd0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001dce:	2300      	movs	r3, #0
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3718      	adds	r7, #24
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	40021000 	.word	0x40021000
 8001ddc:	40022000 	.word	0x40022000

08001de0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b086      	sub	sp, #24
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001de8:	2300      	movs	r3, #0
 8001dea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001dec:	2300      	movs	r3, #0
 8001dee:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d041      	beq.n	8001e80 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001e00:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001e04:	d02a      	beq.n	8001e5c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001e06:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001e0a:	d824      	bhi.n	8001e56 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001e0c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001e10:	d008      	beq.n	8001e24 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001e12:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001e16:	d81e      	bhi.n	8001e56 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d00a      	beq.n	8001e32 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001e1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e20:	d010      	beq.n	8001e44 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001e22:	e018      	b.n	8001e56 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001e24:	4b86      	ldr	r3, [pc, #536]	; (8002040 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	4a85      	ldr	r2, [pc, #532]	; (8002040 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e2e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e30:	e015      	b.n	8001e5e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	3304      	adds	r3, #4
 8001e36:	2100      	movs	r1, #0
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f000 facd 	bl	80023d8 <RCCEx_PLLSAI1_Config>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e42:	e00c      	b.n	8001e5e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	3320      	adds	r3, #32
 8001e48:	2100      	movs	r1, #0
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f000 fbb6 	bl	80025bc <RCCEx_PLLSAI2_Config>
 8001e50:	4603      	mov	r3, r0
 8001e52:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e54:	e003      	b.n	8001e5e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	74fb      	strb	r3, [r7, #19]
      break;
 8001e5a:	e000      	b.n	8001e5e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001e5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001e5e:	7cfb      	ldrb	r3, [r7, #19]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d10b      	bne.n	8001e7c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001e64:	4b76      	ldr	r3, [pc, #472]	; (8002040 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e6a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001e72:	4973      	ldr	r1, [pc, #460]	; (8002040 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e74:	4313      	orrs	r3, r2
 8001e76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001e7a:	e001      	b.n	8001e80 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e7c:	7cfb      	ldrb	r3, [r7, #19]
 8001e7e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d041      	beq.n	8001f10 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e90:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001e94:	d02a      	beq.n	8001eec <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001e96:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001e9a:	d824      	bhi.n	8001ee6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001e9c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001ea0:	d008      	beq.n	8001eb4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001ea2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001ea6:	d81e      	bhi.n	8001ee6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d00a      	beq.n	8001ec2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001eac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001eb0:	d010      	beq.n	8001ed4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001eb2:	e018      	b.n	8001ee6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001eb4:	4b62      	ldr	r3, [pc, #392]	; (8002040 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	4a61      	ldr	r2, [pc, #388]	; (8002040 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001eba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ebe:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001ec0:	e015      	b.n	8001eee <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	3304      	adds	r3, #4
 8001ec6:	2100      	movs	r1, #0
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f000 fa85 	bl	80023d8 <RCCEx_PLLSAI1_Config>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001ed2:	e00c      	b.n	8001eee <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	3320      	adds	r3, #32
 8001ed8:	2100      	movs	r1, #0
 8001eda:	4618      	mov	r0, r3
 8001edc:	f000 fb6e 	bl	80025bc <RCCEx_PLLSAI2_Config>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001ee4:	e003      	b.n	8001eee <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	74fb      	strb	r3, [r7, #19]
      break;
 8001eea:	e000      	b.n	8001eee <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001eec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001eee:	7cfb      	ldrb	r3, [r7, #19]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d10b      	bne.n	8001f0c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001ef4:	4b52      	ldr	r3, [pc, #328]	; (8002040 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001efa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f02:	494f      	ldr	r1, [pc, #316]	; (8002040 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f04:	4313      	orrs	r3, r2
 8001f06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001f0a:	e001      	b.n	8001f10 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f0c:	7cfb      	ldrb	r3, [r7, #19]
 8001f0e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	f000 80a0 	beq.w	800205e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001f22:	4b47      	ldr	r3, [pc, #284]	; (8002040 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d101      	bne.n	8001f32 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e000      	b.n	8001f34 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001f32:	2300      	movs	r3, #0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d00d      	beq.n	8001f54 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f38:	4b41      	ldr	r3, [pc, #260]	; (8002040 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f3c:	4a40      	ldr	r2, [pc, #256]	; (8002040 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f42:	6593      	str	r3, [r2, #88]	; 0x58
 8001f44:	4b3e      	ldr	r3, [pc, #248]	; (8002040 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f4c:	60bb      	str	r3, [r7, #8]
 8001f4e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f50:	2301      	movs	r3, #1
 8001f52:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f54:	4b3b      	ldr	r3, [pc, #236]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a3a      	ldr	r2, [pc, #232]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f5e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001f60:	f7fe fdaa 	bl	8000ab8 <HAL_GetTick>
 8001f64:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f66:	e009      	b.n	8001f7c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f68:	f7fe fda6 	bl	8000ab8 <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d902      	bls.n	8001f7c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	74fb      	strb	r3, [r7, #19]
        break;
 8001f7a:	e005      	b.n	8001f88 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f7c:	4b31      	ldr	r3, [pc, #196]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d0ef      	beq.n	8001f68 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8001f88:	7cfb      	ldrb	r3, [r7, #19]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d15c      	bne.n	8002048 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001f8e:	4b2c      	ldr	r3, [pc, #176]	; (8002040 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f98:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d01f      	beq.n	8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fa6:	697a      	ldr	r2, [r7, #20]
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d019      	beq.n	8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001fac:	4b24      	ldr	r3, [pc, #144]	; (8002040 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fb6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001fb8:	4b21      	ldr	r3, [pc, #132]	; (8002040 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fbe:	4a20      	ldr	r2, [pc, #128]	; (8002040 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001fc8:	4b1d      	ldr	r3, [pc, #116]	; (8002040 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fce:	4a1c      	ldr	r2, [pc, #112]	; (8002040 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001fd8:	4a19      	ldr	r2, [pc, #100]	; (8002040 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	f003 0301 	and.w	r3, r3, #1
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d016      	beq.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fea:	f7fe fd65 	bl	8000ab8 <HAL_GetTick>
 8001fee:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ff0:	e00b      	b.n	800200a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ff2:	f7fe fd61 	bl	8000ab8 <HAL_GetTick>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002000:	4293      	cmp	r3, r2
 8002002:	d902      	bls.n	800200a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002004:	2303      	movs	r3, #3
 8002006:	74fb      	strb	r3, [r7, #19]
            break;
 8002008:	e006      	b.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800200a:	4b0d      	ldr	r3, [pc, #52]	; (8002040 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800200c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002010:	f003 0302 	and.w	r3, r3, #2
 8002014:	2b00      	cmp	r3, #0
 8002016:	d0ec      	beq.n	8001ff2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002018:	7cfb      	ldrb	r3, [r7, #19]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d10c      	bne.n	8002038 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800201e:	4b08      	ldr	r3, [pc, #32]	; (8002040 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002020:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002024:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800202e:	4904      	ldr	r1, [pc, #16]	; (8002040 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002030:	4313      	orrs	r3, r2
 8002032:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002036:	e009      	b.n	800204c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002038:	7cfb      	ldrb	r3, [r7, #19]
 800203a:	74bb      	strb	r3, [r7, #18]
 800203c:	e006      	b.n	800204c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800203e:	bf00      	nop
 8002040:	40021000 	.word	0x40021000
 8002044:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002048:	7cfb      	ldrb	r3, [r7, #19]
 800204a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800204c:	7c7b      	ldrb	r3, [r7, #17]
 800204e:	2b01      	cmp	r3, #1
 8002050:	d105      	bne.n	800205e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002052:	4ba6      	ldr	r3, [pc, #664]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002056:	4aa5      	ldr	r2, [pc, #660]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002058:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800205c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0301 	and.w	r3, r3, #1
 8002066:	2b00      	cmp	r3, #0
 8002068:	d00a      	beq.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800206a:	4ba0      	ldr	r3, [pc, #640]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800206c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002070:	f023 0203 	bic.w	r2, r3, #3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002078:	499c      	ldr	r1, [pc, #624]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800207a:	4313      	orrs	r3, r2
 800207c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0302 	and.w	r3, r3, #2
 8002088:	2b00      	cmp	r3, #0
 800208a:	d00a      	beq.n	80020a2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800208c:	4b97      	ldr	r3, [pc, #604]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800208e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002092:	f023 020c 	bic.w	r2, r3, #12
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800209a:	4994      	ldr	r1, [pc, #592]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800209c:	4313      	orrs	r3, r2
 800209e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0304 	and.w	r3, r3, #4
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d00a      	beq.n	80020c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80020ae:	4b8f      	ldr	r3, [pc, #572]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80020b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020b4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020bc:	498b      	ldr	r1, [pc, #556]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80020be:	4313      	orrs	r3, r2
 80020c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0308 	and.w	r3, r3, #8
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d00a      	beq.n	80020e6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80020d0:	4b86      	ldr	r3, [pc, #536]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80020d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020d6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020de:	4983      	ldr	r1, [pc, #524]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80020e0:	4313      	orrs	r3, r2
 80020e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0310 	and.w	r3, r3, #16
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d00a      	beq.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80020f2:	4b7e      	ldr	r3, [pc, #504]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80020f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002100:	497a      	ldr	r1, [pc, #488]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002102:	4313      	orrs	r3, r2
 8002104:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0320 	and.w	r3, r3, #32
 8002110:	2b00      	cmp	r3, #0
 8002112:	d00a      	beq.n	800212a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002114:	4b75      	ldr	r3, [pc, #468]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002116:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800211a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002122:	4972      	ldr	r1, [pc, #456]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002124:	4313      	orrs	r3, r2
 8002126:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002132:	2b00      	cmp	r3, #0
 8002134:	d00a      	beq.n	800214c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002136:	4b6d      	ldr	r3, [pc, #436]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002138:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800213c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002144:	4969      	ldr	r1, [pc, #420]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002146:	4313      	orrs	r3, r2
 8002148:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002154:	2b00      	cmp	r3, #0
 8002156:	d00a      	beq.n	800216e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002158:	4b64      	ldr	r3, [pc, #400]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800215a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800215e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002166:	4961      	ldr	r1, [pc, #388]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002168:	4313      	orrs	r3, r2
 800216a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002176:	2b00      	cmp	r3, #0
 8002178:	d00a      	beq.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800217a:	4b5c      	ldr	r3, [pc, #368]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800217c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002180:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002188:	4958      	ldr	r1, [pc, #352]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800218a:	4313      	orrs	r3, r2
 800218c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002198:	2b00      	cmp	r3, #0
 800219a:	d00a      	beq.n	80021b2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800219c:	4b53      	ldr	r3, [pc, #332]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800219e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021a2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021aa:	4950      	ldr	r1, [pc, #320]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80021ac:	4313      	orrs	r3, r2
 80021ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d00a      	beq.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80021be:	4b4b      	ldr	r3, [pc, #300]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80021c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021cc:	4947      	ldr	r1, [pc, #284]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80021ce:	4313      	orrs	r3, r2
 80021d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d00a      	beq.n	80021f6 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80021e0:	4b42      	ldr	r3, [pc, #264]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80021e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80021e6:	f023 0203 	bic.w	r2, r3, #3
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ee:	493f      	ldr	r1, [pc, #252]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80021f0:	4313      	orrs	r3, r2
 80021f2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d028      	beq.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002202:	4b3a      	ldr	r3, [pc, #232]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002204:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002208:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002210:	4936      	ldr	r1, [pc, #216]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002212:	4313      	orrs	r3, r2
 8002214:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800221c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002220:	d106      	bne.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002222:	4b32      	ldr	r3, [pc, #200]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002224:	68db      	ldr	r3, [r3, #12]
 8002226:	4a31      	ldr	r2, [pc, #196]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002228:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800222c:	60d3      	str	r3, [r2, #12]
 800222e:	e011      	b.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002234:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002238:	d10c      	bne.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	3304      	adds	r3, #4
 800223e:	2101      	movs	r1, #1
 8002240:	4618      	mov	r0, r3
 8002242:	f000 f8c9 	bl	80023d8 <RCCEx_PLLSAI1_Config>
 8002246:	4603      	mov	r3, r0
 8002248:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800224a:	7cfb      	ldrb	r3, [r7, #19]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d001      	beq.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8002250:	7cfb      	ldrb	r3, [r7, #19]
 8002252:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800225c:	2b00      	cmp	r3, #0
 800225e:	d028      	beq.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002260:	4b22      	ldr	r3, [pc, #136]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002266:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800226e:	491f      	ldr	r1, [pc, #124]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002270:	4313      	orrs	r3, r2
 8002272:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800227a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800227e:	d106      	bne.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002280:	4b1a      	ldr	r3, [pc, #104]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	4a19      	ldr	r2, [pc, #100]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002286:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800228a:	60d3      	str	r3, [r2, #12]
 800228c:	e011      	b.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002292:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002296:	d10c      	bne.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	3304      	adds	r3, #4
 800229c:	2101      	movs	r1, #1
 800229e:	4618      	mov	r0, r3
 80022a0:	f000 f89a 	bl	80023d8 <RCCEx_PLLSAI1_Config>
 80022a4:	4603      	mov	r3, r0
 80022a6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80022a8:	7cfb      	ldrb	r3, [r7, #19]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d001      	beq.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 80022ae:	7cfb      	ldrb	r3, [r7, #19]
 80022b0:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d02a      	beq.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80022be:	4b0b      	ldr	r3, [pc, #44]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022c4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80022cc:	4907      	ldr	r1, [pc, #28]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022ce:	4313      	orrs	r3, r2
 80022d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80022d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80022dc:	d108      	bne.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022de:	4b03      	ldr	r3, [pc, #12]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022e0:	68db      	ldr	r3, [r3, #12]
 80022e2:	4a02      	ldr	r2, [pc, #8]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80022e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022e8:	60d3      	str	r3, [r2, #12]
 80022ea:	e013      	b.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x534>
 80022ec:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80022f4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80022f8:	d10c      	bne.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	3304      	adds	r3, #4
 80022fe:	2101      	movs	r1, #1
 8002300:	4618      	mov	r0, r3
 8002302:	f000 f869 	bl	80023d8 <RCCEx_PLLSAI1_Config>
 8002306:	4603      	mov	r3, r0
 8002308:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800230a:	7cfb      	ldrb	r3, [r7, #19]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d001      	beq.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8002310:	7cfb      	ldrb	r3, [r7, #19]
 8002312:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800231c:	2b00      	cmp	r3, #0
 800231e:	d02f      	beq.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002320:	4b2c      	ldr	r3, [pc, #176]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002322:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002326:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800232e:	4929      	ldr	r1, [pc, #164]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8002330:	4313      	orrs	r3, r2
 8002332:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800233a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800233e:	d10d      	bne.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	3304      	adds	r3, #4
 8002344:	2102      	movs	r1, #2
 8002346:	4618      	mov	r0, r3
 8002348:	f000 f846 	bl	80023d8 <RCCEx_PLLSAI1_Config>
 800234c:	4603      	mov	r3, r0
 800234e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002350:	7cfb      	ldrb	r3, [r7, #19]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d014      	beq.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8002356:	7cfb      	ldrb	r3, [r7, #19]
 8002358:	74bb      	strb	r3, [r7, #18]
 800235a:	e011      	b.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002360:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002364:	d10c      	bne.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	3320      	adds	r3, #32
 800236a:	2102      	movs	r1, #2
 800236c:	4618      	mov	r0, r3
 800236e:	f000 f925 	bl	80025bc <RCCEx_PLLSAI2_Config>
 8002372:	4603      	mov	r3, r0
 8002374:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002376:	7cfb      	ldrb	r3, [r7, #19]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d001      	beq.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 800237c:	7cfb      	ldrb	r3, [r7, #19]
 800237e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d00b      	beq.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800238c:	4b11      	ldr	r3, [pc, #68]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800238e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002392:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800239c:	490d      	ldr	r1, [pc, #52]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800239e:	4313      	orrs	r3, r2
 80023a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d00b      	beq.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80023b0:	4b08      	ldr	r3, [pc, #32]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80023b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023b6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023c0:	4904      	ldr	r1, [pc, #16]	; (80023d4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80023c2:	4313      	orrs	r3, r2
 80023c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80023c8:	7cbb      	ldrb	r3, [r7, #18]
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3718      	adds	r7, #24
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	40021000 	.word	0x40021000

080023d8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b084      	sub	sp, #16
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80023e2:	2300      	movs	r3, #0
 80023e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80023e6:	4b74      	ldr	r3, [pc, #464]	; (80025b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	f003 0303 	and.w	r3, r3, #3
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d018      	beq.n	8002424 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80023f2:	4b71      	ldr	r3, [pc, #452]	; (80025b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	f003 0203 	and.w	r2, r3, #3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	429a      	cmp	r2, r3
 8002400:	d10d      	bne.n	800241e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
       ||
 8002406:	2b00      	cmp	r3, #0
 8002408:	d009      	beq.n	800241e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800240a:	4b6b      	ldr	r3, [pc, #428]	; (80025b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800240c:	68db      	ldr	r3, [r3, #12]
 800240e:	091b      	lsrs	r3, r3, #4
 8002410:	f003 0307 	and.w	r3, r3, #7
 8002414:	1c5a      	adds	r2, r3, #1
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	685b      	ldr	r3, [r3, #4]
       ||
 800241a:	429a      	cmp	r2, r3
 800241c:	d047      	beq.n	80024ae <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	73fb      	strb	r3, [r7, #15]
 8002422:	e044      	b.n	80024ae <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	2b03      	cmp	r3, #3
 800242a:	d018      	beq.n	800245e <RCCEx_PLLSAI1_Config+0x86>
 800242c:	2b03      	cmp	r3, #3
 800242e:	d825      	bhi.n	800247c <RCCEx_PLLSAI1_Config+0xa4>
 8002430:	2b01      	cmp	r3, #1
 8002432:	d002      	beq.n	800243a <RCCEx_PLLSAI1_Config+0x62>
 8002434:	2b02      	cmp	r3, #2
 8002436:	d009      	beq.n	800244c <RCCEx_PLLSAI1_Config+0x74>
 8002438:	e020      	b.n	800247c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800243a:	4b5f      	ldr	r3, [pc, #380]	; (80025b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0302 	and.w	r3, r3, #2
 8002442:	2b00      	cmp	r3, #0
 8002444:	d11d      	bne.n	8002482 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800244a:	e01a      	b.n	8002482 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800244c:	4b5a      	ldr	r3, [pc, #360]	; (80025b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002454:	2b00      	cmp	r3, #0
 8002456:	d116      	bne.n	8002486 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800245c:	e013      	b.n	8002486 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800245e:	4b56      	ldr	r3, [pc, #344]	; (80025b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d10f      	bne.n	800248a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800246a:	4b53      	ldr	r3, [pc, #332]	; (80025b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d109      	bne.n	800248a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800247a:	e006      	b.n	800248a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	73fb      	strb	r3, [r7, #15]
      break;
 8002480:	e004      	b.n	800248c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002482:	bf00      	nop
 8002484:	e002      	b.n	800248c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002486:	bf00      	nop
 8002488:	e000      	b.n	800248c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800248a:	bf00      	nop
    }

    if(status == HAL_OK)
 800248c:	7bfb      	ldrb	r3, [r7, #15]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d10d      	bne.n	80024ae <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002492:	4b49      	ldr	r3, [pc, #292]	; (80025b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002494:	68db      	ldr	r3, [r3, #12]
 8002496:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6819      	ldr	r1, [r3, #0]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	3b01      	subs	r3, #1
 80024a4:	011b      	lsls	r3, r3, #4
 80024a6:	430b      	orrs	r3, r1
 80024a8:	4943      	ldr	r1, [pc, #268]	; (80025b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024aa:	4313      	orrs	r3, r2
 80024ac:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80024ae:	7bfb      	ldrb	r3, [r7, #15]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d17c      	bne.n	80025ae <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80024b4:	4b40      	ldr	r3, [pc, #256]	; (80025b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a3f      	ldr	r2, [pc, #252]	; (80025b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024ba:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80024be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024c0:	f7fe fafa 	bl	8000ab8 <HAL_GetTick>
 80024c4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80024c6:	e009      	b.n	80024dc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80024c8:	f7fe faf6 	bl	8000ab8 <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d902      	bls.n	80024dc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	73fb      	strb	r3, [r7, #15]
        break;
 80024da:	e005      	b.n	80024e8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80024dc:	4b36      	ldr	r3, [pc, #216]	; (80025b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d1ef      	bne.n	80024c8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80024e8:	7bfb      	ldrb	r3, [r7, #15]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d15f      	bne.n	80025ae <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d110      	bne.n	8002516 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80024f4:	4b30      	ldr	r3, [pc, #192]	; (80025b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024f6:	691b      	ldr	r3, [r3, #16]
 80024f8:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80024fc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002500:	687a      	ldr	r2, [r7, #4]
 8002502:	6892      	ldr	r2, [r2, #8]
 8002504:	0211      	lsls	r1, r2, #8
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	68d2      	ldr	r2, [r2, #12]
 800250a:	06d2      	lsls	r2, r2, #27
 800250c:	430a      	orrs	r2, r1
 800250e:	492a      	ldr	r1, [pc, #168]	; (80025b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002510:	4313      	orrs	r3, r2
 8002512:	610b      	str	r3, [r1, #16]
 8002514:	e027      	b.n	8002566 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	2b01      	cmp	r3, #1
 800251a:	d112      	bne.n	8002542 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800251c:	4b26      	ldr	r3, [pc, #152]	; (80025b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800251e:	691b      	ldr	r3, [r3, #16]
 8002520:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002524:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002528:	687a      	ldr	r2, [r7, #4]
 800252a:	6892      	ldr	r2, [r2, #8]
 800252c:	0211      	lsls	r1, r2, #8
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	6912      	ldr	r2, [r2, #16]
 8002532:	0852      	lsrs	r2, r2, #1
 8002534:	3a01      	subs	r2, #1
 8002536:	0552      	lsls	r2, r2, #21
 8002538:	430a      	orrs	r2, r1
 800253a:	491f      	ldr	r1, [pc, #124]	; (80025b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800253c:	4313      	orrs	r3, r2
 800253e:	610b      	str	r3, [r1, #16]
 8002540:	e011      	b.n	8002566 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002542:	4b1d      	ldr	r3, [pc, #116]	; (80025b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002544:	691b      	ldr	r3, [r3, #16]
 8002546:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800254a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	6892      	ldr	r2, [r2, #8]
 8002552:	0211      	lsls	r1, r2, #8
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	6952      	ldr	r2, [r2, #20]
 8002558:	0852      	lsrs	r2, r2, #1
 800255a:	3a01      	subs	r2, #1
 800255c:	0652      	lsls	r2, r2, #25
 800255e:	430a      	orrs	r2, r1
 8002560:	4915      	ldr	r1, [pc, #84]	; (80025b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002562:	4313      	orrs	r3, r2
 8002564:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002566:	4b14      	ldr	r3, [pc, #80]	; (80025b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a13      	ldr	r2, [pc, #76]	; (80025b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800256c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002570:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002572:	f7fe faa1 	bl	8000ab8 <HAL_GetTick>
 8002576:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002578:	e009      	b.n	800258e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800257a:	f7fe fa9d 	bl	8000ab8 <HAL_GetTick>
 800257e:	4602      	mov	r2, r0
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	2b02      	cmp	r3, #2
 8002586:	d902      	bls.n	800258e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002588:	2303      	movs	r3, #3
 800258a:	73fb      	strb	r3, [r7, #15]
          break;
 800258c:	e005      	b.n	800259a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800258e:	4b0a      	ldr	r3, [pc, #40]	; (80025b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d0ef      	beq.n	800257a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800259a:	7bfb      	ldrb	r3, [r7, #15]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d106      	bne.n	80025ae <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80025a0:	4b05      	ldr	r3, [pc, #20]	; (80025b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025a2:	691a      	ldr	r2, [r3, #16]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	699b      	ldr	r3, [r3, #24]
 80025a8:	4903      	ldr	r1, [pc, #12]	; (80025b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025aa:	4313      	orrs	r3, r2
 80025ac:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80025ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3710      	adds	r7, #16
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	40021000 	.word	0x40021000

080025bc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80025c6:	2300      	movs	r3, #0
 80025c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80025ca:	4b69      	ldr	r3, [pc, #420]	; (8002770 <RCCEx_PLLSAI2_Config+0x1b4>)
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	f003 0303 	and.w	r3, r3, #3
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d018      	beq.n	8002608 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80025d6:	4b66      	ldr	r3, [pc, #408]	; (8002770 <RCCEx_PLLSAI2_Config+0x1b4>)
 80025d8:	68db      	ldr	r3, [r3, #12]
 80025da:	f003 0203 	and.w	r2, r3, #3
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d10d      	bne.n	8002602 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
       ||
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d009      	beq.n	8002602 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80025ee:	4b60      	ldr	r3, [pc, #384]	; (8002770 <RCCEx_PLLSAI2_Config+0x1b4>)
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	091b      	lsrs	r3, r3, #4
 80025f4:	f003 0307 	and.w	r3, r3, #7
 80025f8:	1c5a      	adds	r2, r3, #1
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
       ||
 80025fe:	429a      	cmp	r2, r3
 8002600:	d047      	beq.n	8002692 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	73fb      	strb	r3, [r7, #15]
 8002606:	e044      	b.n	8002692 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	2b03      	cmp	r3, #3
 800260e:	d018      	beq.n	8002642 <RCCEx_PLLSAI2_Config+0x86>
 8002610:	2b03      	cmp	r3, #3
 8002612:	d825      	bhi.n	8002660 <RCCEx_PLLSAI2_Config+0xa4>
 8002614:	2b01      	cmp	r3, #1
 8002616:	d002      	beq.n	800261e <RCCEx_PLLSAI2_Config+0x62>
 8002618:	2b02      	cmp	r3, #2
 800261a:	d009      	beq.n	8002630 <RCCEx_PLLSAI2_Config+0x74>
 800261c:	e020      	b.n	8002660 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800261e:	4b54      	ldr	r3, [pc, #336]	; (8002770 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0302 	and.w	r3, r3, #2
 8002626:	2b00      	cmp	r3, #0
 8002628:	d11d      	bne.n	8002666 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800262e:	e01a      	b.n	8002666 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002630:	4b4f      	ldr	r3, [pc, #316]	; (8002770 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002638:	2b00      	cmp	r3, #0
 800263a:	d116      	bne.n	800266a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002640:	e013      	b.n	800266a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002642:	4b4b      	ldr	r3, [pc, #300]	; (8002770 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d10f      	bne.n	800266e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800264e:	4b48      	ldr	r3, [pc, #288]	; (8002770 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d109      	bne.n	800266e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800265e:	e006      	b.n	800266e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	73fb      	strb	r3, [r7, #15]
      break;
 8002664:	e004      	b.n	8002670 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002666:	bf00      	nop
 8002668:	e002      	b.n	8002670 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800266a:	bf00      	nop
 800266c:	e000      	b.n	8002670 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800266e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002670:	7bfb      	ldrb	r3, [r7, #15]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d10d      	bne.n	8002692 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002676:	4b3e      	ldr	r3, [pc, #248]	; (8002770 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002678:	68db      	ldr	r3, [r3, #12]
 800267a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6819      	ldr	r1, [r3, #0]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	3b01      	subs	r3, #1
 8002688:	011b      	lsls	r3, r3, #4
 800268a:	430b      	orrs	r3, r1
 800268c:	4938      	ldr	r1, [pc, #224]	; (8002770 <RCCEx_PLLSAI2_Config+0x1b4>)
 800268e:	4313      	orrs	r3, r2
 8002690:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002692:	7bfb      	ldrb	r3, [r7, #15]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d166      	bne.n	8002766 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002698:	4b35      	ldr	r3, [pc, #212]	; (8002770 <RCCEx_PLLSAI2_Config+0x1b4>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a34      	ldr	r2, [pc, #208]	; (8002770 <RCCEx_PLLSAI2_Config+0x1b4>)
 800269e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026a4:	f7fe fa08 	bl	8000ab8 <HAL_GetTick>
 80026a8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80026aa:	e009      	b.n	80026c0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80026ac:	f7fe fa04 	bl	8000ab8 <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d902      	bls.n	80026c0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	73fb      	strb	r3, [r7, #15]
        break;
 80026be:	e005      	b.n	80026cc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80026c0:	4b2b      	ldr	r3, [pc, #172]	; (8002770 <RCCEx_PLLSAI2_Config+0x1b4>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d1ef      	bne.n	80026ac <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80026cc:	7bfb      	ldrb	r3, [r7, #15]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d149      	bne.n	8002766 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d110      	bne.n	80026fa <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80026d8:	4b25      	ldr	r3, [pc, #148]	; (8002770 <RCCEx_PLLSAI2_Config+0x1b4>)
 80026da:	695b      	ldr	r3, [r3, #20]
 80026dc:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80026e0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80026e4:	687a      	ldr	r2, [r7, #4]
 80026e6:	6892      	ldr	r2, [r2, #8]
 80026e8:	0211      	lsls	r1, r2, #8
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	68d2      	ldr	r2, [r2, #12]
 80026ee:	06d2      	lsls	r2, r2, #27
 80026f0:	430a      	orrs	r2, r1
 80026f2:	491f      	ldr	r1, [pc, #124]	; (8002770 <RCCEx_PLLSAI2_Config+0x1b4>)
 80026f4:	4313      	orrs	r3, r2
 80026f6:	614b      	str	r3, [r1, #20]
 80026f8:	e011      	b.n	800271e <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80026fa:	4b1d      	ldr	r3, [pc, #116]	; (8002770 <RCCEx_PLLSAI2_Config+0x1b4>)
 80026fc:	695b      	ldr	r3, [r3, #20]
 80026fe:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002702:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	6892      	ldr	r2, [r2, #8]
 800270a:	0211      	lsls	r1, r2, #8
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	6912      	ldr	r2, [r2, #16]
 8002710:	0852      	lsrs	r2, r2, #1
 8002712:	3a01      	subs	r2, #1
 8002714:	0652      	lsls	r2, r2, #25
 8002716:	430a      	orrs	r2, r1
 8002718:	4915      	ldr	r1, [pc, #84]	; (8002770 <RCCEx_PLLSAI2_Config+0x1b4>)
 800271a:	4313      	orrs	r3, r2
 800271c:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800271e:	4b14      	ldr	r3, [pc, #80]	; (8002770 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a13      	ldr	r2, [pc, #76]	; (8002770 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002724:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002728:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800272a:	f7fe f9c5 	bl	8000ab8 <HAL_GetTick>
 800272e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002730:	e009      	b.n	8002746 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002732:	f7fe f9c1 	bl	8000ab8 <HAL_GetTick>
 8002736:	4602      	mov	r2, r0
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	2b02      	cmp	r3, #2
 800273e:	d902      	bls.n	8002746 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8002740:	2303      	movs	r3, #3
 8002742:	73fb      	strb	r3, [r7, #15]
          break;
 8002744:	e005      	b.n	8002752 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002746:	4b0a      	ldr	r3, [pc, #40]	; (8002770 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d0ef      	beq.n	8002732 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8002752:	7bfb      	ldrb	r3, [r7, #15]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d106      	bne.n	8002766 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002758:	4b05      	ldr	r3, [pc, #20]	; (8002770 <RCCEx_PLLSAI2_Config+0x1b4>)
 800275a:	695a      	ldr	r2, [r3, #20]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	695b      	ldr	r3, [r3, #20]
 8002760:	4903      	ldr	r1, [pc, #12]	; (8002770 <RCCEx_PLLSAI2_Config+0x1b4>)
 8002762:	4313      	orrs	r3, r2
 8002764:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002766:	7bfb      	ldrb	r3, [r7, #15]
}
 8002768:	4618      	mov	r0, r3
 800276a:	3710      	adds	r7, #16
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}
 8002770:	40021000 	.word	0x40021000

08002774 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d101      	bne.n	8002786 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e049      	b.n	800281a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800278c:	b2db      	uxtb	r3, r3
 800278e:	2b00      	cmp	r3, #0
 8002790:	d106      	bne.n	80027a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f7fe f890 	bl	80008c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2202      	movs	r2, #2
 80027a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	3304      	adds	r3, #4
 80027b0:	4619      	mov	r1, r3
 80027b2:	4610      	mov	r0, r2
 80027b4:	f000 fab6 	bl	8002d24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2201      	movs	r2, #1
 80027bc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2201      	movs	r2, #1
 80027c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2201      	movs	r2, #1
 80027cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2201      	movs	r2, #1
 80027d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2201      	movs	r2, #1
 80027dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2201      	movs	r2, #1
 80027e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2201      	movs	r2, #1
 80027ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2201      	movs	r2, #1
 80027f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2201      	movs	r2, #1
 80027fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2201      	movs	r2, #1
 8002804:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2201      	movs	r2, #1
 800280c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2201      	movs	r2, #1
 8002814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002818:	2300      	movs	r3, #0
}
 800281a:	4618      	mov	r0, r3
 800281c:	3708      	adds	r7, #8
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
	...

08002824 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002824:	b480      	push	{r7}
 8002826:	b085      	sub	sp, #20
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002832:	b2db      	uxtb	r3, r3
 8002834:	2b01      	cmp	r3, #1
 8002836:	d001      	beq.n	800283c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e04f      	b.n	80028dc <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2202      	movs	r2, #2
 8002840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	68da      	ldr	r2, [r3, #12]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f042 0201 	orr.w	r2, r2, #1
 8002852:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a23      	ldr	r2, [pc, #140]	; (80028e8 <HAL_TIM_Base_Start_IT+0xc4>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d01d      	beq.n	800289a <HAL_TIM_Base_Start_IT+0x76>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002866:	d018      	beq.n	800289a <HAL_TIM_Base_Start_IT+0x76>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a1f      	ldr	r2, [pc, #124]	; (80028ec <HAL_TIM_Base_Start_IT+0xc8>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d013      	beq.n	800289a <HAL_TIM_Base_Start_IT+0x76>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a1e      	ldr	r2, [pc, #120]	; (80028f0 <HAL_TIM_Base_Start_IT+0xcc>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d00e      	beq.n	800289a <HAL_TIM_Base_Start_IT+0x76>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a1c      	ldr	r2, [pc, #112]	; (80028f4 <HAL_TIM_Base_Start_IT+0xd0>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d009      	beq.n	800289a <HAL_TIM_Base_Start_IT+0x76>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a1b      	ldr	r2, [pc, #108]	; (80028f8 <HAL_TIM_Base_Start_IT+0xd4>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d004      	beq.n	800289a <HAL_TIM_Base_Start_IT+0x76>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a19      	ldr	r2, [pc, #100]	; (80028fc <HAL_TIM_Base_Start_IT+0xd8>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d115      	bne.n	80028c6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	689a      	ldr	r2, [r3, #8]
 80028a0:	4b17      	ldr	r3, [pc, #92]	; (8002900 <HAL_TIM_Base_Start_IT+0xdc>)
 80028a2:	4013      	ands	r3, r2
 80028a4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2b06      	cmp	r3, #6
 80028aa:	d015      	beq.n	80028d8 <HAL_TIM_Base_Start_IT+0xb4>
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028b2:	d011      	beq.n	80028d8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f042 0201 	orr.w	r2, r2, #1
 80028c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028c4:	e008      	b.n	80028d8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f042 0201 	orr.w	r2, r2, #1
 80028d4:	601a      	str	r2, [r3, #0]
 80028d6:	e000      	b.n	80028da <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028d8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80028da:	2300      	movs	r3, #0
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3714      	adds	r7, #20
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr
 80028e8:	40012c00 	.word	0x40012c00
 80028ec:	40000400 	.word	0x40000400
 80028f0:	40000800 	.word	0x40000800
 80028f4:	40000c00 	.word	0x40000c00
 80028f8:	40013400 	.word	0x40013400
 80028fc:	40014000 	.word	0x40014000
 8002900:	00010007 	.word	0x00010007

08002904 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	691b      	ldr	r3, [r3, #16]
 8002912:	f003 0302 	and.w	r3, r3, #2
 8002916:	2b02      	cmp	r3, #2
 8002918:	d122      	bne.n	8002960 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	f003 0302 	and.w	r3, r3, #2
 8002924:	2b02      	cmp	r3, #2
 8002926:	d11b      	bne.n	8002960 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f06f 0202 	mvn.w	r2, #2
 8002930:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2201      	movs	r2, #1
 8002936:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	699b      	ldr	r3, [r3, #24]
 800293e:	f003 0303 	and.w	r3, r3, #3
 8002942:	2b00      	cmp	r3, #0
 8002944:	d003      	beq.n	800294e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f000 f9ce 	bl	8002ce8 <HAL_TIM_IC_CaptureCallback>
 800294c:	e005      	b.n	800295a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f000 f9c0 	bl	8002cd4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002954:	6878      	ldr	r0, [r7, #4]
 8002956:	f000 f9d1 	bl	8002cfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	691b      	ldr	r3, [r3, #16]
 8002966:	f003 0304 	and.w	r3, r3, #4
 800296a:	2b04      	cmp	r3, #4
 800296c:	d122      	bne.n	80029b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	f003 0304 	and.w	r3, r3, #4
 8002978:	2b04      	cmp	r3, #4
 800297a:	d11b      	bne.n	80029b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f06f 0204 	mvn.w	r2, #4
 8002984:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2202      	movs	r2, #2
 800298a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	699b      	ldr	r3, [r3, #24]
 8002992:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002996:	2b00      	cmp	r3, #0
 8002998:	d003      	beq.n	80029a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f000 f9a4 	bl	8002ce8 <HAL_TIM_IC_CaptureCallback>
 80029a0:	e005      	b.n	80029ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f000 f996 	bl	8002cd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	f000 f9a7 	bl	8002cfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2200      	movs	r2, #0
 80029b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	691b      	ldr	r3, [r3, #16]
 80029ba:	f003 0308 	and.w	r3, r3, #8
 80029be:	2b08      	cmp	r3, #8
 80029c0:	d122      	bne.n	8002a08 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	f003 0308 	and.w	r3, r3, #8
 80029cc:	2b08      	cmp	r3, #8
 80029ce:	d11b      	bne.n	8002a08 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f06f 0208 	mvn.w	r2, #8
 80029d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2204      	movs	r2, #4
 80029de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	69db      	ldr	r3, [r3, #28]
 80029e6:	f003 0303 	and.w	r3, r3, #3
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d003      	beq.n	80029f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f000 f97a 	bl	8002ce8 <HAL_TIM_IC_CaptureCallback>
 80029f4:	e005      	b.n	8002a02 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f000 f96c 	bl	8002cd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	f000 f97d 	bl	8002cfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	691b      	ldr	r3, [r3, #16]
 8002a0e:	f003 0310 	and.w	r3, r3, #16
 8002a12:	2b10      	cmp	r3, #16
 8002a14:	d122      	bne.n	8002a5c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	f003 0310 	and.w	r3, r3, #16
 8002a20:	2b10      	cmp	r3, #16
 8002a22:	d11b      	bne.n	8002a5c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f06f 0210 	mvn.w	r2, #16
 8002a2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2208      	movs	r2, #8
 8002a32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	69db      	ldr	r3, [r3, #28]
 8002a3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d003      	beq.n	8002a4a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f000 f950 	bl	8002ce8 <HAL_TIM_IC_CaptureCallback>
 8002a48:	e005      	b.n	8002a56 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f000 f942 	bl	8002cd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f000 f953 	bl	8002cfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	691b      	ldr	r3, [r3, #16]
 8002a62:	f003 0301 	and.w	r3, r3, #1
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d10e      	bne.n	8002a88 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	f003 0301 	and.w	r3, r3, #1
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d107      	bne.n	8002a88 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f06f 0201 	mvn.w	r2, #1
 8002a80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f7fd fe78 	bl	8000778 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	691b      	ldr	r3, [r3, #16]
 8002a8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a92:	2b80      	cmp	r3, #128	; 0x80
 8002a94:	d10e      	bne.n	8002ab4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aa0:	2b80      	cmp	r3, #128	; 0x80
 8002aa2:	d107      	bne.n	8002ab4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002aac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f000 fafe 	bl	80030b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	691b      	ldr	r3, [r3, #16]
 8002aba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002abe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ac2:	d10e      	bne.n	8002ae2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ace:	2b80      	cmp	r3, #128	; 0x80
 8002ad0:	d107      	bne.n	8002ae2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002ada:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f000 faf1 	bl	80030c4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	691b      	ldr	r3, [r3, #16]
 8002ae8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aec:	2b40      	cmp	r3, #64	; 0x40
 8002aee:	d10e      	bne.n	8002b0e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	68db      	ldr	r3, [r3, #12]
 8002af6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002afa:	2b40      	cmp	r3, #64	; 0x40
 8002afc:	d107      	bne.n	8002b0e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	f000 f901 	bl	8002d10 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	691b      	ldr	r3, [r3, #16]
 8002b14:	f003 0320 	and.w	r3, r3, #32
 8002b18:	2b20      	cmp	r3, #32
 8002b1a:	d10e      	bne.n	8002b3a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	f003 0320 	and.w	r3, r3, #32
 8002b26:	2b20      	cmp	r3, #32
 8002b28:	d107      	bne.n	8002b3a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f06f 0220 	mvn.w	r2, #32
 8002b32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f000 fab1 	bl	800309c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b3a:	bf00      	nop
 8002b3c:	3708      	adds	r7, #8
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}

08002b42 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b42:	b580      	push	{r7, lr}
 8002b44:	b084      	sub	sp, #16
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	6078      	str	r0, [r7, #4]
 8002b4a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d101      	bne.n	8002b5e <HAL_TIM_ConfigClockSource+0x1c>
 8002b5a:	2302      	movs	r3, #2
 8002b5c:	e0b6      	b.n	8002ccc <HAL_TIM_ConfigClockSource+0x18a>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2201      	movs	r2, #1
 8002b62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2202      	movs	r2, #2
 8002b6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b7c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002b80:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b88:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	68ba      	ldr	r2, [r7, #8]
 8002b90:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b9a:	d03e      	beq.n	8002c1a <HAL_TIM_ConfigClockSource+0xd8>
 8002b9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ba0:	f200 8087 	bhi.w	8002cb2 <HAL_TIM_ConfigClockSource+0x170>
 8002ba4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ba8:	f000 8086 	beq.w	8002cb8 <HAL_TIM_ConfigClockSource+0x176>
 8002bac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bb0:	d87f      	bhi.n	8002cb2 <HAL_TIM_ConfigClockSource+0x170>
 8002bb2:	2b70      	cmp	r3, #112	; 0x70
 8002bb4:	d01a      	beq.n	8002bec <HAL_TIM_ConfigClockSource+0xaa>
 8002bb6:	2b70      	cmp	r3, #112	; 0x70
 8002bb8:	d87b      	bhi.n	8002cb2 <HAL_TIM_ConfigClockSource+0x170>
 8002bba:	2b60      	cmp	r3, #96	; 0x60
 8002bbc:	d050      	beq.n	8002c60 <HAL_TIM_ConfigClockSource+0x11e>
 8002bbe:	2b60      	cmp	r3, #96	; 0x60
 8002bc0:	d877      	bhi.n	8002cb2 <HAL_TIM_ConfigClockSource+0x170>
 8002bc2:	2b50      	cmp	r3, #80	; 0x50
 8002bc4:	d03c      	beq.n	8002c40 <HAL_TIM_ConfigClockSource+0xfe>
 8002bc6:	2b50      	cmp	r3, #80	; 0x50
 8002bc8:	d873      	bhi.n	8002cb2 <HAL_TIM_ConfigClockSource+0x170>
 8002bca:	2b40      	cmp	r3, #64	; 0x40
 8002bcc:	d058      	beq.n	8002c80 <HAL_TIM_ConfigClockSource+0x13e>
 8002bce:	2b40      	cmp	r3, #64	; 0x40
 8002bd0:	d86f      	bhi.n	8002cb2 <HAL_TIM_ConfigClockSource+0x170>
 8002bd2:	2b30      	cmp	r3, #48	; 0x30
 8002bd4:	d064      	beq.n	8002ca0 <HAL_TIM_ConfigClockSource+0x15e>
 8002bd6:	2b30      	cmp	r3, #48	; 0x30
 8002bd8:	d86b      	bhi.n	8002cb2 <HAL_TIM_ConfigClockSource+0x170>
 8002bda:	2b20      	cmp	r3, #32
 8002bdc:	d060      	beq.n	8002ca0 <HAL_TIM_ConfigClockSource+0x15e>
 8002bde:	2b20      	cmp	r3, #32
 8002be0:	d867      	bhi.n	8002cb2 <HAL_TIM_ConfigClockSource+0x170>
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d05c      	beq.n	8002ca0 <HAL_TIM_ConfigClockSource+0x15e>
 8002be6:	2b10      	cmp	r3, #16
 8002be8:	d05a      	beq.n	8002ca0 <HAL_TIM_ConfigClockSource+0x15e>
 8002bea:	e062      	b.n	8002cb2 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6818      	ldr	r0, [r3, #0]
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	6899      	ldr	r1, [r3, #8]
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	685a      	ldr	r2, [r3, #4]
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	f000 f9a6 	bl	8002f4c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002c0e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	68ba      	ldr	r2, [r7, #8]
 8002c16:	609a      	str	r2, [r3, #8]
      break;
 8002c18:	e04f      	b.n	8002cba <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6818      	ldr	r0, [r3, #0]
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	6899      	ldr	r1, [r3, #8]
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	685a      	ldr	r2, [r3, #4]
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	68db      	ldr	r3, [r3, #12]
 8002c2a:	f000 f98f 	bl	8002f4c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	689a      	ldr	r2, [r3, #8]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c3c:	609a      	str	r2, [r3, #8]
      break;
 8002c3e:	e03c      	b.n	8002cba <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6818      	ldr	r0, [r3, #0]
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	6859      	ldr	r1, [r3, #4]
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	f000 f903 	bl	8002e58 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	2150      	movs	r1, #80	; 0x50
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f000 f95c 	bl	8002f16 <TIM_ITRx_SetConfig>
      break;
 8002c5e:	e02c      	b.n	8002cba <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6818      	ldr	r0, [r3, #0]
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	6859      	ldr	r1, [r3, #4]
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	f000 f922 	bl	8002eb6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	2160      	movs	r1, #96	; 0x60
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f000 f94c 	bl	8002f16 <TIM_ITRx_SetConfig>
      break;
 8002c7e:	e01c      	b.n	8002cba <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6818      	ldr	r0, [r3, #0]
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	6859      	ldr	r1, [r3, #4]
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	f000 f8e3 	bl	8002e58 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	2140      	movs	r1, #64	; 0x40
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f000 f93c 	bl	8002f16 <TIM_ITRx_SetConfig>
      break;
 8002c9e:	e00c      	b.n	8002cba <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4619      	mov	r1, r3
 8002caa:	4610      	mov	r0, r2
 8002cac:	f000 f933 	bl	8002f16 <TIM_ITRx_SetConfig>
      break;
 8002cb0:	e003      	b.n	8002cba <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	73fb      	strb	r3, [r7, #15]
      break;
 8002cb6:	e000      	b.n	8002cba <HAL_TIM_ConfigClockSource+0x178>
      break;
 8002cb8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002cca:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3710      	adds	r7, #16
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}

08002cd4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002cdc:	bf00      	nop
 8002cde:	370c      	adds	r7, #12
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr

08002ce8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002cf0:	bf00      	nop
 8002cf2:	370c      	adds	r7, #12
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr

08002cfc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b083      	sub	sp, #12
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d04:	bf00      	nop
 8002d06:	370c      	adds	r7, #12
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr

08002d10 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d18:	bf00      	nop
 8002d1a:	370c      	adds	r7, #12
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr

08002d24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b085      	sub	sp, #20
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	4a40      	ldr	r2, [pc, #256]	; (8002e38 <TIM_Base_SetConfig+0x114>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d013      	beq.n	8002d64 <TIM_Base_SetConfig+0x40>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d42:	d00f      	beq.n	8002d64 <TIM_Base_SetConfig+0x40>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	4a3d      	ldr	r2, [pc, #244]	; (8002e3c <TIM_Base_SetConfig+0x118>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d00b      	beq.n	8002d64 <TIM_Base_SetConfig+0x40>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	4a3c      	ldr	r2, [pc, #240]	; (8002e40 <TIM_Base_SetConfig+0x11c>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d007      	beq.n	8002d64 <TIM_Base_SetConfig+0x40>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	4a3b      	ldr	r2, [pc, #236]	; (8002e44 <TIM_Base_SetConfig+0x120>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d003      	beq.n	8002d64 <TIM_Base_SetConfig+0x40>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	4a3a      	ldr	r2, [pc, #232]	; (8002e48 <TIM_Base_SetConfig+0x124>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d108      	bne.n	8002d76 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	68fa      	ldr	r2, [r7, #12]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a2f      	ldr	r2, [pc, #188]	; (8002e38 <TIM_Base_SetConfig+0x114>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d01f      	beq.n	8002dbe <TIM_Base_SetConfig+0x9a>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d84:	d01b      	beq.n	8002dbe <TIM_Base_SetConfig+0x9a>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4a2c      	ldr	r2, [pc, #176]	; (8002e3c <TIM_Base_SetConfig+0x118>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d017      	beq.n	8002dbe <TIM_Base_SetConfig+0x9a>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a2b      	ldr	r2, [pc, #172]	; (8002e40 <TIM_Base_SetConfig+0x11c>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d013      	beq.n	8002dbe <TIM_Base_SetConfig+0x9a>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a2a      	ldr	r2, [pc, #168]	; (8002e44 <TIM_Base_SetConfig+0x120>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d00f      	beq.n	8002dbe <TIM_Base_SetConfig+0x9a>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a29      	ldr	r2, [pc, #164]	; (8002e48 <TIM_Base_SetConfig+0x124>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d00b      	beq.n	8002dbe <TIM_Base_SetConfig+0x9a>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a28      	ldr	r2, [pc, #160]	; (8002e4c <TIM_Base_SetConfig+0x128>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d007      	beq.n	8002dbe <TIM_Base_SetConfig+0x9a>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4a27      	ldr	r2, [pc, #156]	; (8002e50 <TIM_Base_SetConfig+0x12c>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d003      	beq.n	8002dbe <TIM_Base_SetConfig+0x9a>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4a26      	ldr	r2, [pc, #152]	; (8002e54 <TIM_Base_SetConfig+0x130>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d108      	bne.n	8002dd0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	68fa      	ldr	r2, [r7, #12]
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	695b      	ldr	r3, [r3, #20]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	68fa      	ldr	r2, [r7, #12]
 8002de2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	689a      	ldr	r2, [r3, #8]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	4a10      	ldr	r2, [pc, #64]	; (8002e38 <TIM_Base_SetConfig+0x114>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d00f      	beq.n	8002e1c <TIM_Base_SetConfig+0xf8>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	4a12      	ldr	r2, [pc, #72]	; (8002e48 <TIM_Base_SetConfig+0x124>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d00b      	beq.n	8002e1c <TIM_Base_SetConfig+0xf8>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	4a11      	ldr	r2, [pc, #68]	; (8002e4c <TIM_Base_SetConfig+0x128>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d007      	beq.n	8002e1c <TIM_Base_SetConfig+0xf8>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	4a10      	ldr	r2, [pc, #64]	; (8002e50 <TIM_Base_SetConfig+0x12c>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d003      	beq.n	8002e1c <TIM_Base_SetConfig+0xf8>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	4a0f      	ldr	r2, [pc, #60]	; (8002e54 <TIM_Base_SetConfig+0x130>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d103      	bne.n	8002e24 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	691a      	ldr	r2, [r3, #16]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2201      	movs	r2, #1
 8002e28:	615a      	str	r2, [r3, #20]
}
 8002e2a:	bf00      	nop
 8002e2c:	3714      	adds	r7, #20
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr
 8002e36:	bf00      	nop
 8002e38:	40012c00 	.word	0x40012c00
 8002e3c:	40000400 	.word	0x40000400
 8002e40:	40000800 	.word	0x40000800
 8002e44:	40000c00 	.word	0x40000c00
 8002e48:	40013400 	.word	0x40013400
 8002e4c:	40014000 	.word	0x40014000
 8002e50:	40014400 	.word	0x40014400
 8002e54:	40014800 	.word	0x40014800

08002e58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b087      	sub	sp, #28
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	60f8      	str	r0, [r7, #12]
 8002e60:	60b9      	str	r1, [r7, #8]
 8002e62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	6a1b      	ldr	r3, [r3, #32]
 8002e68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	6a1b      	ldr	r3, [r3, #32]
 8002e6e:	f023 0201 	bic.w	r2, r3, #1
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	699b      	ldr	r3, [r3, #24]
 8002e7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	011b      	lsls	r3, r3, #4
 8002e88:	693a      	ldr	r2, [r7, #16]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	f023 030a 	bic.w	r3, r3, #10
 8002e94:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e96:	697a      	ldr	r2, [r7, #20]
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	693a      	ldr	r2, [r7, #16]
 8002ea2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	697a      	ldr	r2, [r7, #20]
 8002ea8:	621a      	str	r2, [r3, #32]
}
 8002eaa:	bf00      	nop
 8002eac:	371c      	adds	r7, #28
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr

08002eb6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002eb6:	b480      	push	{r7}
 8002eb8:	b087      	sub	sp, #28
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	60f8      	str	r0, [r7, #12]
 8002ebe:	60b9      	str	r1, [r7, #8]
 8002ec0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	6a1b      	ldr	r3, [r3, #32]
 8002ec6:	f023 0210 	bic.w	r2, r3, #16
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	699b      	ldr	r3, [r3, #24]
 8002ed2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6a1b      	ldr	r3, [r3, #32]
 8002ed8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002ee0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	031b      	lsls	r3, r3, #12
 8002ee6:	697a      	ldr	r2, [r7, #20]
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002ef2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	011b      	lsls	r3, r3, #4
 8002ef8:	693a      	ldr	r2, [r7, #16]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	697a      	ldr	r2, [r7, #20]
 8002f02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	693a      	ldr	r2, [r7, #16]
 8002f08:	621a      	str	r2, [r3, #32]
}
 8002f0a:	bf00      	nop
 8002f0c:	371c      	adds	r7, #28
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr

08002f16 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002f16:	b480      	push	{r7}
 8002f18:	b085      	sub	sp, #20
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	6078      	str	r0, [r7, #4]
 8002f1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f2c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f2e:	683a      	ldr	r2, [r7, #0]
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	4313      	orrs	r3, r2
 8002f34:	f043 0307 	orr.w	r3, r3, #7
 8002f38:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	68fa      	ldr	r2, [r7, #12]
 8002f3e:	609a      	str	r2, [r3, #8]
}
 8002f40:	bf00      	nop
 8002f42:	3714      	adds	r7, #20
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr

08002f4c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b087      	sub	sp, #28
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	60f8      	str	r0, [r7, #12]
 8002f54:	60b9      	str	r1, [r7, #8]
 8002f56:	607a      	str	r2, [r7, #4]
 8002f58:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f66:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	021a      	lsls	r2, r3, #8
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	431a      	orrs	r2, r3
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	697a      	ldr	r2, [r7, #20]
 8002f76:	4313      	orrs	r3, r2
 8002f78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	697a      	ldr	r2, [r7, #20]
 8002f7e:	609a      	str	r2, [r3, #8]
}
 8002f80:	bf00      	nop
 8002f82:	371c      	adds	r7, #28
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr

08002f8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b085      	sub	sp, #20
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
 8002f94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d101      	bne.n	8002fa4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002fa0:	2302      	movs	r3, #2
 8002fa2:	e068      	b.n	8003076 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2202      	movs	r2, #2
 8002fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a2e      	ldr	r2, [pc, #184]	; (8003084 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d004      	beq.n	8002fd8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a2d      	ldr	r2, [pc, #180]	; (8003088 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d108      	bne.n	8002fea <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002fde:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	68fa      	ldr	r2, [r7, #12]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ff0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	68fa      	ldr	r2, [r7, #12]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	68fa      	ldr	r2, [r7, #12]
 8003002:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a1e      	ldr	r2, [pc, #120]	; (8003084 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d01d      	beq.n	800304a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003016:	d018      	beq.n	800304a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a1b      	ldr	r2, [pc, #108]	; (800308c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d013      	beq.n	800304a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a1a      	ldr	r2, [pc, #104]	; (8003090 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d00e      	beq.n	800304a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a18      	ldr	r2, [pc, #96]	; (8003094 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d009      	beq.n	800304a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a13      	ldr	r2, [pc, #76]	; (8003088 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d004      	beq.n	800304a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a14      	ldr	r2, [pc, #80]	; (8003098 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d10c      	bne.n	8003064 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003050:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	68ba      	ldr	r2, [r7, #8]
 8003058:	4313      	orrs	r3, r2
 800305a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	68ba      	ldr	r2, [r7, #8]
 8003062:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2200      	movs	r2, #0
 8003070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003074:	2300      	movs	r3, #0
}
 8003076:	4618      	mov	r0, r3
 8003078:	3714      	adds	r7, #20
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr
 8003082:	bf00      	nop
 8003084:	40012c00 	.word	0x40012c00
 8003088:	40013400 	.word	0x40013400
 800308c:	40000400 	.word	0x40000400
 8003090:	40000800 	.word	0x40000800
 8003094:	40000c00 	.word	0x40000c00
 8003098:	40014000 	.word	0x40014000

0800309c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80030a4:	bf00      	nop
 80030a6:	370c      	adds	r7, #12
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr

080030b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b083      	sub	sp, #12
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80030b8:	bf00      	nop
 80030ba:	370c      	adds	r7, #12
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr

080030c4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b083      	sub	sp, #12
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80030cc:	bf00      	nop
 80030ce:	370c      	adds	r7, #12
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr

080030d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b082      	sub	sp, #8
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d101      	bne.n	80030ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e040      	b.n	800316c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d106      	bne.n	8003100 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f7fd fb80 	bl	8000800 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2224      	movs	r2, #36	; 0x24
 8003104:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f022 0201 	bic.w	r2, r2, #1
 8003114:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f000 f82c 	bl	8003174 <UART_SetConfig>
 800311c:	4603      	mov	r3, r0
 800311e:	2b01      	cmp	r3, #1
 8003120:	d101      	bne.n	8003126 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e022      	b.n	800316c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312a:	2b00      	cmp	r3, #0
 800312c:	d002      	beq.n	8003134 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f000 fad8 	bl	80036e4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	685a      	ldr	r2, [r3, #4]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003142:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	689a      	ldr	r2, [r3, #8]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003152:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f042 0201 	orr.w	r2, r2, #1
 8003162:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f000 fb5f 	bl	8003828 <UART_CheckIdleState>
 800316a:	4603      	mov	r3, r0
}
 800316c:	4618      	mov	r0, r3
 800316e:	3708      	adds	r7, #8
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}

08003174 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003174:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003178:	b08a      	sub	sp, #40	; 0x28
 800317a:	af00      	add	r7, sp, #0
 800317c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800317e:	2300      	movs	r3, #0
 8003180:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	689a      	ldr	r2, [r3, #8]
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	691b      	ldr	r3, [r3, #16]
 800318c:	431a      	orrs	r2, r3
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	695b      	ldr	r3, [r3, #20]
 8003192:	431a      	orrs	r2, r3
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	69db      	ldr	r3, [r3, #28]
 8003198:	4313      	orrs	r3, r2
 800319a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	4ba4      	ldr	r3, [pc, #656]	; (8003434 <UART_SetConfig+0x2c0>)
 80031a4:	4013      	ands	r3, r2
 80031a6:	68fa      	ldr	r2, [r7, #12]
 80031a8:	6812      	ldr	r2, [r2, #0]
 80031aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031ac:	430b      	orrs	r3, r1
 80031ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	68da      	ldr	r2, [r3, #12]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	430a      	orrs	r2, r1
 80031c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	699b      	ldr	r3, [r3, #24]
 80031ca:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a99      	ldr	r2, [pc, #612]	; (8003438 <UART_SetConfig+0x2c4>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d004      	beq.n	80031e0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	6a1b      	ldr	r3, [r3, #32]
 80031da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031dc:	4313      	orrs	r3, r2
 80031de:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031f0:	430a      	orrs	r2, r1
 80031f2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a90      	ldr	r2, [pc, #576]	; (800343c <UART_SetConfig+0x2c8>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d126      	bne.n	800324c <UART_SetConfig+0xd8>
 80031fe:	4b90      	ldr	r3, [pc, #576]	; (8003440 <UART_SetConfig+0x2cc>)
 8003200:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003204:	f003 0303 	and.w	r3, r3, #3
 8003208:	2b03      	cmp	r3, #3
 800320a:	d81b      	bhi.n	8003244 <UART_SetConfig+0xd0>
 800320c:	a201      	add	r2, pc, #4	; (adr r2, 8003214 <UART_SetConfig+0xa0>)
 800320e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003212:	bf00      	nop
 8003214:	08003225 	.word	0x08003225
 8003218:	08003235 	.word	0x08003235
 800321c:	0800322d 	.word	0x0800322d
 8003220:	0800323d 	.word	0x0800323d
 8003224:	2301      	movs	r3, #1
 8003226:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800322a:	e116      	b.n	800345a <UART_SetConfig+0x2e6>
 800322c:	2302      	movs	r3, #2
 800322e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003232:	e112      	b.n	800345a <UART_SetConfig+0x2e6>
 8003234:	2304      	movs	r3, #4
 8003236:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800323a:	e10e      	b.n	800345a <UART_SetConfig+0x2e6>
 800323c:	2308      	movs	r3, #8
 800323e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003242:	e10a      	b.n	800345a <UART_SetConfig+0x2e6>
 8003244:	2310      	movs	r3, #16
 8003246:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800324a:	e106      	b.n	800345a <UART_SetConfig+0x2e6>
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a7c      	ldr	r2, [pc, #496]	; (8003444 <UART_SetConfig+0x2d0>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d138      	bne.n	80032c8 <UART_SetConfig+0x154>
 8003256:	4b7a      	ldr	r3, [pc, #488]	; (8003440 <UART_SetConfig+0x2cc>)
 8003258:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800325c:	f003 030c 	and.w	r3, r3, #12
 8003260:	2b0c      	cmp	r3, #12
 8003262:	d82d      	bhi.n	80032c0 <UART_SetConfig+0x14c>
 8003264:	a201      	add	r2, pc, #4	; (adr r2, 800326c <UART_SetConfig+0xf8>)
 8003266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800326a:	bf00      	nop
 800326c:	080032a1 	.word	0x080032a1
 8003270:	080032c1 	.word	0x080032c1
 8003274:	080032c1 	.word	0x080032c1
 8003278:	080032c1 	.word	0x080032c1
 800327c:	080032b1 	.word	0x080032b1
 8003280:	080032c1 	.word	0x080032c1
 8003284:	080032c1 	.word	0x080032c1
 8003288:	080032c1 	.word	0x080032c1
 800328c:	080032a9 	.word	0x080032a9
 8003290:	080032c1 	.word	0x080032c1
 8003294:	080032c1 	.word	0x080032c1
 8003298:	080032c1 	.word	0x080032c1
 800329c:	080032b9 	.word	0x080032b9
 80032a0:	2300      	movs	r3, #0
 80032a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032a6:	e0d8      	b.n	800345a <UART_SetConfig+0x2e6>
 80032a8:	2302      	movs	r3, #2
 80032aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032ae:	e0d4      	b.n	800345a <UART_SetConfig+0x2e6>
 80032b0:	2304      	movs	r3, #4
 80032b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032b6:	e0d0      	b.n	800345a <UART_SetConfig+0x2e6>
 80032b8:	2308      	movs	r3, #8
 80032ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032be:	e0cc      	b.n	800345a <UART_SetConfig+0x2e6>
 80032c0:	2310      	movs	r3, #16
 80032c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032c6:	e0c8      	b.n	800345a <UART_SetConfig+0x2e6>
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a5e      	ldr	r2, [pc, #376]	; (8003448 <UART_SetConfig+0x2d4>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d125      	bne.n	800331e <UART_SetConfig+0x1aa>
 80032d2:	4b5b      	ldr	r3, [pc, #364]	; (8003440 <UART_SetConfig+0x2cc>)
 80032d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032d8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80032dc:	2b30      	cmp	r3, #48	; 0x30
 80032de:	d016      	beq.n	800330e <UART_SetConfig+0x19a>
 80032e0:	2b30      	cmp	r3, #48	; 0x30
 80032e2:	d818      	bhi.n	8003316 <UART_SetConfig+0x1a2>
 80032e4:	2b20      	cmp	r3, #32
 80032e6:	d00a      	beq.n	80032fe <UART_SetConfig+0x18a>
 80032e8:	2b20      	cmp	r3, #32
 80032ea:	d814      	bhi.n	8003316 <UART_SetConfig+0x1a2>
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d002      	beq.n	80032f6 <UART_SetConfig+0x182>
 80032f0:	2b10      	cmp	r3, #16
 80032f2:	d008      	beq.n	8003306 <UART_SetConfig+0x192>
 80032f4:	e00f      	b.n	8003316 <UART_SetConfig+0x1a2>
 80032f6:	2300      	movs	r3, #0
 80032f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032fc:	e0ad      	b.n	800345a <UART_SetConfig+0x2e6>
 80032fe:	2302      	movs	r3, #2
 8003300:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003304:	e0a9      	b.n	800345a <UART_SetConfig+0x2e6>
 8003306:	2304      	movs	r3, #4
 8003308:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800330c:	e0a5      	b.n	800345a <UART_SetConfig+0x2e6>
 800330e:	2308      	movs	r3, #8
 8003310:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003314:	e0a1      	b.n	800345a <UART_SetConfig+0x2e6>
 8003316:	2310      	movs	r3, #16
 8003318:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800331c:	e09d      	b.n	800345a <UART_SetConfig+0x2e6>
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a4a      	ldr	r2, [pc, #296]	; (800344c <UART_SetConfig+0x2d8>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d125      	bne.n	8003374 <UART_SetConfig+0x200>
 8003328:	4b45      	ldr	r3, [pc, #276]	; (8003440 <UART_SetConfig+0x2cc>)
 800332a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800332e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003332:	2bc0      	cmp	r3, #192	; 0xc0
 8003334:	d016      	beq.n	8003364 <UART_SetConfig+0x1f0>
 8003336:	2bc0      	cmp	r3, #192	; 0xc0
 8003338:	d818      	bhi.n	800336c <UART_SetConfig+0x1f8>
 800333a:	2b80      	cmp	r3, #128	; 0x80
 800333c:	d00a      	beq.n	8003354 <UART_SetConfig+0x1e0>
 800333e:	2b80      	cmp	r3, #128	; 0x80
 8003340:	d814      	bhi.n	800336c <UART_SetConfig+0x1f8>
 8003342:	2b00      	cmp	r3, #0
 8003344:	d002      	beq.n	800334c <UART_SetConfig+0x1d8>
 8003346:	2b40      	cmp	r3, #64	; 0x40
 8003348:	d008      	beq.n	800335c <UART_SetConfig+0x1e8>
 800334a:	e00f      	b.n	800336c <UART_SetConfig+0x1f8>
 800334c:	2300      	movs	r3, #0
 800334e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003352:	e082      	b.n	800345a <UART_SetConfig+0x2e6>
 8003354:	2302      	movs	r3, #2
 8003356:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800335a:	e07e      	b.n	800345a <UART_SetConfig+0x2e6>
 800335c:	2304      	movs	r3, #4
 800335e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003362:	e07a      	b.n	800345a <UART_SetConfig+0x2e6>
 8003364:	2308      	movs	r3, #8
 8003366:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800336a:	e076      	b.n	800345a <UART_SetConfig+0x2e6>
 800336c:	2310      	movs	r3, #16
 800336e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003372:	e072      	b.n	800345a <UART_SetConfig+0x2e6>
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a35      	ldr	r2, [pc, #212]	; (8003450 <UART_SetConfig+0x2dc>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d12a      	bne.n	80033d4 <UART_SetConfig+0x260>
 800337e:	4b30      	ldr	r3, [pc, #192]	; (8003440 <UART_SetConfig+0x2cc>)
 8003380:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003384:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003388:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800338c:	d01a      	beq.n	80033c4 <UART_SetConfig+0x250>
 800338e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003392:	d81b      	bhi.n	80033cc <UART_SetConfig+0x258>
 8003394:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003398:	d00c      	beq.n	80033b4 <UART_SetConfig+0x240>
 800339a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800339e:	d815      	bhi.n	80033cc <UART_SetConfig+0x258>
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d003      	beq.n	80033ac <UART_SetConfig+0x238>
 80033a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033a8:	d008      	beq.n	80033bc <UART_SetConfig+0x248>
 80033aa:	e00f      	b.n	80033cc <UART_SetConfig+0x258>
 80033ac:	2300      	movs	r3, #0
 80033ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033b2:	e052      	b.n	800345a <UART_SetConfig+0x2e6>
 80033b4:	2302      	movs	r3, #2
 80033b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033ba:	e04e      	b.n	800345a <UART_SetConfig+0x2e6>
 80033bc:	2304      	movs	r3, #4
 80033be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033c2:	e04a      	b.n	800345a <UART_SetConfig+0x2e6>
 80033c4:	2308      	movs	r3, #8
 80033c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033ca:	e046      	b.n	800345a <UART_SetConfig+0x2e6>
 80033cc:	2310      	movs	r3, #16
 80033ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033d2:	e042      	b.n	800345a <UART_SetConfig+0x2e6>
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a17      	ldr	r2, [pc, #92]	; (8003438 <UART_SetConfig+0x2c4>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d13a      	bne.n	8003454 <UART_SetConfig+0x2e0>
 80033de:	4b18      	ldr	r3, [pc, #96]	; (8003440 <UART_SetConfig+0x2cc>)
 80033e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033e4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80033e8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80033ec:	d01a      	beq.n	8003424 <UART_SetConfig+0x2b0>
 80033ee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80033f2:	d81b      	bhi.n	800342c <UART_SetConfig+0x2b8>
 80033f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033f8:	d00c      	beq.n	8003414 <UART_SetConfig+0x2a0>
 80033fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033fe:	d815      	bhi.n	800342c <UART_SetConfig+0x2b8>
 8003400:	2b00      	cmp	r3, #0
 8003402:	d003      	beq.n	800340c <UART_SetConfig+0x298>
 8003404:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003408:	d008      	beq.n	800341c <UART_SetConfig+0x2a8>
 800340a:	e00f      	b.n	800342c <UART_SetConfig+0x2b8>
 800340c:	2300      	movs	r3, #0
 800340e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003412:	e022      	b.n	800345a <UART_SetConfig+0x2e6>
 8003414:	2302      	movs	r3, #2
 8003416:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800341a:	e01e      	b.n	800345a <UART_SetConfig+0x2e6>
 800341c:	2304      	movs	r3, #4
 800341e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003422:	e01a      	b.n	800345a <UART_SetConfig+0x2e6>
 8003424:	2308      	movs	r3, #8
 8003426:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800342a:	e016      	b.n	800345a <UART_SetConfig+0x2e6>
 800342c:	2310      	movs	r3, #16
 800342e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003432:	e012      	b.n	800345a <UART_SetConfig+0x2e6>
 8003434:	efff69f3 	.word	0xefff69f3
 8003438:	40008000 	.word	0x40008000
 800343c:	40013800 	.word	0x40013800
 8003440:	40021000 	.word	0x40021000
 8003444:	40004400 	.word	0x40004400
 8003448:	40004800 	.word	0x40004800
 800344c:	40004c00 	.word	0x40004c00
 8003450:	40005000 	.word	0x40005000
 8003454:	2310      	movs	r3, #16
 8003456:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a9f      	ldr	r2, [pc, #636]	; (80036dc <UART_SetConfig+0x568>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d17a      	bne.n	800355a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003464:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003468:	2b08      	cmp	r3, #8
 800346a:	d824      	bhi.n	80034b6 <UART_SetConfig+0x342>
 800346c:	a201      	add	r2, pc, #4	; (adr r2, 8003474 <UART_SetConfig+0x300>)
 800346e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003472:	bf00      	nop
 8003474:	08003499 	.word	0x08003499
 8003478:	080034b7 	.word	0x080034b7
 800347c:	080034a1 	.word	0x080034a1
 8003480:	080034b7 	.word	0x080034b7
 8003484:	080034a7 	.word	0x080034a7
 8003488:	080034b7 	.word	0x080034b7
 800348c:	080034b7 	.word	0x080034b7
 8003490:	080034b7 	.word	0x080034b7
 8003494:	080034af 	.word	0x080034af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003498:	f7fe fc16 	bl	8001cc8 <HAL_RCC_GetPCLK1Freq>
 800349c:	61f8      	str	r0, [r7, #28]
        break;
 800349e:	e010      	b.n	80034c2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034a0:	4b8f      	ldr	r3, [pc, #572]	; (80036e0 <UART_SetConfig+0x56c>)
 80034a2:	61fb      	str	r3, [r7, #28]
        break;
 80034a4:	e00d      	b.n	80034c2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034a6:	f7fe fb77 	bl	8001b98 <HAL_RCC_GetSysClockFreq>
 80034aa:	61f8      	str	r0, [r7, #28]
        break;
 80034ac:	e009      	b.n	80034c2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034b2:	61fb      	str	r3, [r7, #28]
        break;
 80034b4:	e005      	b.n	80034c2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80034b6:	2300      	movs	r3, #0
 80034b8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80034c0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80034c2:	69fb      	ldr	r3, [r7, #28]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	f000 80fb 	beq.w	80036c0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	685a      	ldr	r2, [r3, #4]
 80034ce:	4613      	mov	r3, r2
 80034d0:	005b      	lsls	r3, r3, #1
 80034d2:	4413      	add	r3, r2
 80034d4:	69fa      	ldr	r2, [r7, #28]
 80034d6:	429a      	cmp	r2, r3
 80034d8:	d305      	bcc.n	80034e6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80034e0:	69fa      	ldr	r2, [r7, #28]
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d903      	bls.n	80034ee <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80034ec:	e0e8      	b.n	80036c0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	2200      	movs	r2, #0
 80034f2:	461c      	mov	r4, r3
 80034f4:	4615      	mov	r5, r2
 80034f6:	f04f 0200 	mov.w	r2, #0
 80034fa:	f04f 0300 	mov.w	r3, #0
 80034fe:	022b      	lsls	r3, r5, #8
 8003500:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003504:	0222      	lsls	r2, r4, #8
 8003506:	68f9      	ldr	r1, [r7, #12]
 8003508:	6849      	ldr	r1, [r1, #4]
 800350a:	0849      	lsrs	r1, r1, #1
 800350c:	2000      	movs	r0, #0
 800350e:	4688      	mov	r8, r1
 8003510:	4681      	mov	r9, r0
 8003512:	eb12 0a08 	adds.w	sl, r2, r8
 8003516:	eb43 0b09 	adc.w	fp, r3, r9
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	603b      	str	r3, [r7, #0]
 8003522:	607a      	str	r2, [r7, #4]
 8003524:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003528:	4650      	mov	r0, sl
 800352a:	4659      	mov	r1, fp
 800352c:	f7fc fe5e 	bl	80001ec <__aeabi_uldivmod>
 8003530:	4602      	mov	r2, r0
 8003532:	460b      	mov	r3, r1
 8003534:	4613      	mov	r3, r2
 8003536:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003538:	69bb      	ldr	r3, [r7, #24]
 800353a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800353e:	d308      	bcc.n	8003552 <UART_SetConfig+0x3de>
 8003540:	69bb      	ldr	r3, [r7, #24]
 8003542:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003546:	d204      	bcs.n	8003552 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	69ba      	ldr	r2, [r7, #24]
 800354e:	60da      	str	r2, [r3, #12]
 8003550:	e0b6      	b.n	80036c0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003558:	e0b2      	b.n	80036c0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	69db      	ldr	r3, [r3, #28]
 800355e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003562:	d15e      	bne.n	8003622 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003564:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003568:	2b08      	cmp	r3, #8
 800356a:	d828      	bhi.n	80035be <UART_SetConfig+0x44a>
 800356c:	a201      	add	r2, pc, #4	; (adr r2, 8003574 <UART_SetConfig+0x400>)
 800356e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003572:	bf00      	nop
 8003574:	08003599 	.word	0x08003599
 8003578:	080035a1 	.word	0x080035a1
 800357c:	080035a9 	.word	0x080035a9
 8003580:	080035bf 	.word	0x080035bf
 8003584:	080035af 	.word	0x080035af
 8003588:	080035bf 	.word	0x080035bf
 800358c:	080035bf 	.word	0x080035bf
 8003590:	080035bf 	.word	0x080035bf
 8003594:	080035b7 	.word	0x080035b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003598:	f7fe fb96 	bl	8001cc8 <HAL_RCC_GetPCLK1Freq>
 800359c:	61f8      	str	r0, [r7, #28]
        break;
 800359e:	e014      	b.n	80035ca <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80035a0:	f7fe fba8 	bl	8001cf4 <HAL_RCC_GetPCLK2Freq>
 80035a4:	61f8      	str	r0, [r7, #28]
        break;
 80035a6:	e010      	b.n	80035ca <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035a8:	4b4d      	ldr	r3, [pc, #308]	; (80036e0 <UART_SetConfig+0x56c>)
 80035aa:	61fb      	str	r3, [r7, #28]
        break;
 80035ac:	e00d      	b.n	80035ca <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035ae:	f7fe faf3 	bl	8001b98 <HAL_RCC_GetSysClockFreq>
 80035b2:	61f8      	str	r0, [r7, #28]
        break;
 80035b4:	e009      	b.n	80035ca <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035ba:	61fb      	str	r3, [r7, #28]
        break;
 80035bc:	e005      	b.n	80035ca <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80035be:	2300      	movs	r3, #0
 80035c0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80035c8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d077      	beq.n	80036c0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	005a      	lsls	r2, r3, #1
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	085b      	lsrs	r3, r3, #1
 80035da:	441a      	add	r2, r3
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80035e4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035e6:	69bb      	ldr	r3, [r7, #24]
 80035e8:	2b0f      	cmp	r3, #15
 80035ea:	d916      	bls.n	800361a <UART_SetConfig+0x4a6>
 80035ec:	69bb      	ldr	r3, [r7, #24]
 80035ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035f2:	d212      	bcs.n	800361a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80035f4:	69bb      	ldr	r3, [r7, #24]
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	f023 030f 	bic.w	r3, r3, #15
 80035fc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80035fe:	69bb      	ldr	r3, [r7, #24]
 8003600:	085b      	lsrs	r3, r3, #1
 8003602:	b29b      	uxth	r3, r3
 8003604:	f003 0307 	and.w	r3, r3, #7
 8003608:	b29a      	uxth	r2, r3
 800360a:	8afb      	ldrh	r3, [r7, #22]
 800360c:	4313      	orrs	r3, r2
 800360e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	8afa      	ldrh	r2, [r7, #22]
 8003616:	60da      	str	r2, [r3, #12]
 8003618:	e052      	b.n	80036c0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003620:	e04e      	b.n	80036c0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003622:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003626:	2b08      	cmp	r3, #8
 8003628:	d827      	bhi.n	800367a <UART_SetConfig+0x506>
 800362a:	a201      	add	r2, pc, #4	; (adr r2, 8003630 <UART_SetConfig+0x4bc>)
 800362c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003630:	08003655 	.word	0x08003655
 8003634:	0800365d 	.word	0x0800365d
 8003638:	08003665 	.word	0x08003665
 800363c:	0800367b 	.word	0x0800367b
 8003640:	0800366b 	.word	0x0800366b
 8003644:	0800367b 	.word	0x0800367b
 8003648:	0800367b 	.word	0x0800367b
 800364c:	0800367b 	.word	0x0800367b
 8003650:	08003673 	.word	0x08003673
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003654:	f7fe fb38 	bl	8001cc8 <HAL_RCC_GetPCLK1Freq>
 8003658:	61f8      	str	r0, [r7, #28]
        break;
 800365a:	e014      	b.n	8003686 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800365c:	f7fe fb4a 	bl	8001cf4 <HAL_RCC_GetPCLK2Freq>
 8003660:	61f8      	str	r0, [r7, #28]
        break;
 8003662:	e010      	b.n	8003686 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003664:	4b1e      	ldr	r3, [pc, #120]	; (80036e0 <UART_SetConfig+0x56c>)
 8003666:	61fb      	str	r3, [r7, #28]
        break;
 8003668:	e00d      	b.n	8003686 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800366a:	f7fe fa95 	bl	8001b98 <HAL_RCC_GetSysClockFreq>
 800366e:	61f8      	str	r0, [r7, #28]
        break;
 8003670:	e009      	b.n	8003686 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003672:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003676:	61fb      	str	r3, [r7, #28]
        break;
 8003678:	e005      	b.n	8003686 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800367a:	2300      	movs	r3, #0
 800367c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003684:	bf00      	nop
    }

    if (pclk != 0U)
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d019      	beq.n	80036c0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	085a      	lsrs	r2, r3, #1
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	441a      	add	r2, r3
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	fbb2 f3f3 	udiv	r3, r2, r3
 800369e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036a0:	69bb      	ldr	r3, [r7, #24]
 80036a2:	2b0f      	cmp	r3, #15
 80036a4:	d909      	bls.n	80036ba <UART_SetConfig+0x546>
 80036a6:	69bb      	ldr	r3, [r7, #24]
 80036a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036ac:	d205      	bcs.n	80036ba <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80036ae:	69bb      	ldr	r3, [r7, #24]
 80036b0:	b29a      	uxth	r2, r3
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	60da      	str	r2, [r3, #12]
 80036b8:	e002      	b.n	80036c0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2200      	movs	r2, #0
 80036c4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2200      	movs	r2, #0
 80036ca:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80036cc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3728      	adds	r7, #40	; 0x28
 80036d4:	46bd      	mov	sp, r7
 80036d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036da:	bf00      	nop
 80036dc:	40008000 	.word	0x40008000
 80036e0:	00f42400 	.word	0x00f42400

080036e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f0:	f003 0301 	and.w	r3, r3, #1
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d00a      	beq.n	800370e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	430a      	orrs	r2, r1
 800370c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003712:	f003 0302 	and.w	r3, r3, #2
 8003716:	2b00      	cmp	r3, #0
 8003718:	d00a      	beq.n	8003730 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	430a      	orrs	r2, r1
 800372e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003734:	f003 0304 	and.w	r3, r3, #4
 8003738:	2b00      	cmp	r3, #0
 800373a:	d00a      	beq.n	8003752 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	430a      	orrs	r2, r1
 8003750:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003756:	f003 0308 	and.w	r3, r3, #8
 800375a:	2b00      	cmp	r3, #0
 800375c:	d00a      	beq.n	8003774 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	430a      	orrs	r2, r1
 8003772:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003778:	f003 0310 	and.w	r3, r3, #16
 800377c:	2b00      	cmp	r3, #0
 800377e:	d00a      	beq.n	8003796 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	430a      	orrs	r2, r1
 8003794:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379a:	f003 0320 	and.w	r3, r3, #32
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d00a      	beq.n	80037b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	430a      	orrs	r2, r1
 80037b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d01a      	beq.n	80037fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	430a      	orrs	r2, r1
 80037d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037e2:	d10a      	bne.n	80037fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	430a      	orrs	r2, r1
 80037f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003802:	2b00      	cmp	r3, #0
 8003804:	d00a      	beq.n	800381c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	430a      	orrs	r2, r1
 800381a:	605a      	str	r2, [r3, #4]
  }
}
 800381c:	bf00      	nop
 800381e:	370c      	adds	r7, #12
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr

08003828 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b086      	sub	sp, #24
 800382c:	af02      	add	r7, sp, #8
 800382e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003838:	f7fd f93e 	bl	8000ab8 <HAL_GetTick>
 800383c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 0308 	and.w	r3, r3, #8
 8003848:	2b08      	cmp	r3, #8
 800384a:	d10e      	bne.n	800386a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800384c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003850:	9300      	str	r3, [sp, #0]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2200      	movs	r2, #0
 8003856:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f000 f82d 	bl	80038ba <UART_WaitOnFlagUntilTimeout>
 8003860:	4603      	mov	r3, r0
 8003862:	2b00      	cmp	r3, #0
 8003864:	d001      	beq.n	800386a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003866:	2303      	movs	r3, #3
 8003868:	e023      	b.n	80038b2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0304 	and.w	r3, r3, #4
 8003874:	2b04      	cmp	r3, #4
 8003876:	d10e      	bne.n	8003896 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003878:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800387c:	9300      	str	r3, [sp, #0]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2200      	movs	r2, #0
 8003882:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f000 f817 	bl	80038ba <UART_WaitOnFlagUntilTimeout>
 800388c:	4603      	mov	r3, r0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d001      	beq.n	8003896 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003892:	2303      	movs	r3, #3
 8003894:	e00d      	b.n	80038b2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2220      	movs	r2, #32
 800389a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2220      	movs	r2, #32
 80038a0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2200      	movs	r2, #0
 80038ac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80038b0:	2300      	movs	r3, #0
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3710      	adds	r7, #16
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}

080038ba <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80038ba:	b580      	push	{r7, lr}
 80038bc:	b09c      	sub	sp, #112	; 0x70
 80038be:	af00      	add	r7, sp, #0
 80038c0:	60f8      	str	r0, [r7, #12]
 80038c2:	60b9      	str	r1, [r7, #8]
 80038c4:	603b      	str	r3, [r7, #0]
 80038c6:	4613      	mov	r3, r2
 80038c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038ca:	e0a5      	b.n	8003a18 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80038ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80038d2:	f000 80a1 	beq.w	8003a18 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038d6:	f7fd f8ef 	bl	8000ab8 <HAL_GetTick>
 80038da:	4602      	mov	r2, r0
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d302      	bcc.n	80038ec <UART_WaitOnFlagUntilTimeout+0x32>
 80038e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d13e      	bne.n	800396a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038f4:	e853 3f00 	ldrex	r3, [r3]
 80038f8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80038fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038fc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003900:	667b      	str	r3, [r7, #100]	; 0x64
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	461a      	mov	r2, r3
 8003908:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800390a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800390c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800390e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003910:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003912:	e841 2300 	strex	r3, r2, [r1]
 8003916:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003918:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800391a:	2b00      	cmp	r3, #0
 800391c:	d1e6      	bne.n	80038ec <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	3308      	adds	r3, #8
 8003924:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003926:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003928:	e853 3f00 	ldrex	r3, [r3]
 800392c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800392e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003930:	f023 0301 	bic.w	r3, r3, #1
 8003934:	663b      	str	r3, [r7, #96]	; 0x60
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	3308      	adds	r3, #8
 800393c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800393e:	64ba      	str	r2, [r7, #72]	; 0x48
 8003940:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003942:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003944:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003946:	e841 2300 	strex	r3, r2, [r1]
 800394a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800394c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800394e:	2b00      	cmp	r3, #0
 8003950:	d1e5      	bne.n	800391e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2220      	movs	r2, #32
 8003956:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2220      	movs	r2, #32
 800395c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2200      	movs	r2, #0
 8003962:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003966:	2303      	movs	r3, #3
 8003968:	e067      	b.n	8003a3a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 0304 	and.w	r3, r3, #4
 8003974:	2b00      	cmp	r3, #0
 8003976:	d04f      	beq.n	8003a18 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	69db      	ldr	r3, [r3, #28]
 800397e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003982:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003986:	d147      	bne.n	8003a18 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003990:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800399a:	e853 3f00 	ldrex	r3, [r3]
 800399e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80039a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80039a6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	461a      	mov	r2, r3
 80039ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039b0:	637b      	str	r3, [r7, #52]	; 0x34
 80039b2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80039b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80039b8:	e841 2300 	strex	r3, r2, [r1]
 80039bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80039be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d1e6      	bne.n	8003992 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	3308      	adds	r3, #8
 80039ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	e853 3f00 	ldrex	r3, [r3]
 80039d2:	613b      	str	r3, [r7, #16]
   return(result);
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	f023 0301 	bic.w	r3, r3, #1
 80039da:	66bb      	str	r3, [r7, #104]	; 0x68
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	3308      	adds	r3, #8
 80039e2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80039e4:	623a      	str	r2, [r7, #32]
 80039e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039e8:	69f9      	ldr	r1, [r7, #28]
 80039ea:	6a3a      	ldr	r2, [r7, #32]
 80039ec:	e841 2300 	strex	r3, r2, [r1]
 80039f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80039f2:	69bb      	ldr	r3, [r7, #24]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d1e5      	bne.n	80039c4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2220      	movs	r2, #32
 80039fc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2220      	movs	r2, #32
 8003a02:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2220      	movs	r2, #32
 8003a08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003a14:	2303      	movs	r3, #3
 8003a16:	e010      	b.n	8003a3a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	69da      	ldr	r2, [r3, #28]
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	4013      	ands	r3, r2
 8003a22:	68ba      	ldr	r2, [r7, #8]
 8003a24:	429a      	cmp	r2, r3
 8003a26:	bf0c      	ite	eq
 8003a28:	2301      	moveq	r3, #1
 8003a2a:	2300      	movne	r3, #0
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	461a      	mov	r2, r3
 8003a30:	79fb      	ldrb	r3, [r7, #7]
 8003a32:	429a      	cmp	r2, r3
 8003a34:	f43f af4a 	beq.w	80038cc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a38:	2300      	movs	r3, #0
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3770      	adds	r7, #112	; 0x70
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
	...

08003a44 <__libc_init_array>:
 8003a44:	b570      	push	{r4, r5, r6, lr}
 8003a46:	4d0d      	ldr	r5, [pc, #52]	; (8003a7c <__libc_init_array+0x38>)
 8003a48:	4c0d      	ldr	r4, [pc, #52]	; (8003a80 <__libc_init_array+0x3c>)
 8003a4a:	1b64      	subs	r4, r4, r5
 8003a4c:	10a4      	asrs	r4, r4, #2
 8003a4e:	2600      	movs	r6, #0
 8003a50:	42a6      	cmp	r6, r4
 8003a52:	d109      	bne.n	8003a68 <__libc_init_array+0x24>
 8003a54:	4d0b      	ldr	r5, [pc, #44]	; (8003a84 <__libc_init_array+0x40>)
 8003a56:	4c0c      	ldr	r4, [pc, #48]	; (8003a88 <__libc_init_array+0x44>)
 8003a58:	f000 f820 	bl	8003a9c <_init>
 8003a5c:	1b64      	subs	r4, r4, r5
 8003a5e:	10a4      	asrs	r4, r4, #2
 8003a60:	2600      	movs	r6, #0
 8003a62:	42a6      	cmp	r6, r4
 8003a64:	d105      	bne.n	8003a72 <__libc_init_array+0x2e>
 8003a66:	bd70      	pop	{r4, r5, r6, pc}
 8003a68:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a6c:	4798      	blx	r3
 8003a6e:	3601      	adds	r6, #1
 8003a70:	e7ee      	b.n	8003a50 <__libc_init_array+0xc>
 8003a72:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a76:	4798      	blx	r3
 8003a78:	3601      	adds	r6, #1
 8003a7a:	e7f2      	b.n	8003a62 <__libc_init_array+0x1e>
 8003a7c:	08003b04 	.word	0x08003b04
 8003a80:	08003b04 	.word	0x08003b04
 8003a84:	08003b04 	.word	0x08003b04
 8003a88:	08003b08 	.word	0x08003b08

08003a8c <memset>:
 8003a8c:	4402      	add	r2, r0
 8003a8e:	4603      	mov	r3, r0
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d100      	bne.n	8003a96 <memset+0xa>
 8003a94:	4770      	bx	lr
 8003a96:	f803 1b01 	strb.w	r1, [r3], #1
 8003a9a:	e7f9      	b.n	8003a90 <memset+0x4>

08003a9c <_init>:
 8003a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a9e:	bf00      	nop
 8003aa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003aa2:	bc08      	pop	{r3}
 8003aa4:	469e      	mov	lr, r3
 8003aa6:	4770      	bx	lr

08003aa8 <_fini>:
 8003aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aaa:	bf00      	nop
 8003aac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003aae:	bc08      	pop	{r3}
 8003ab0:	469e      	mov	lr, r3
 8003ab2:	4770      	bx	lr
