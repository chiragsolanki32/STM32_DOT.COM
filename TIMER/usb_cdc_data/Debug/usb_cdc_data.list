
usb_cdc_data.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000073c0  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  0800757c  0800757c  0001757c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007604  08007604  000201a0  2**0
                  CONTENTS
  4 .ARM          00000000  08007604  08007604  000201a0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007604  08007604  000201a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007604  08007604  00017604  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007608  08007608  00017608  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a0  20000000  0800760c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c60  200001a0  080077ac  000201a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001e00  080077ac  00021e00  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000105b8  00000000  00000000  000201d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e20  00000000  00000000  00030788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e10  00000000  00000000  000335a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cb8  00000000  00000000  000343b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b6dd  00000000  00000000  00035070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001105f  00000000  00000000  0006074d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fa727  00000000  00000000  000717ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016bed3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037e8  00000000  00000000  0016bf24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	200001a0 	.word	0x200001a0
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08007564 	.word	0x08007564

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	200001a4 	.word	0x200001a4
 80001f8:	08007564 	.word	0x08007564

080001fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000200:	f000 f953 	bl	80004aa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000204:	f000 f81a 	bl	800023c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000208:	f000 f86c 	bl	80002e4 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800020c:	f006 fb0a 	bl	8006824 <MX_USB_DEVICE_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  CDC_Transmit_FS(data, sizeof(data) - 1);
 8000210:	210f      	movs	r1, #15
 8000212:	4808      	ldr	r0, [pc, #32]	; (8000234 <main+0x38>)
 8000214:	f006 fbe0 	bl	80069d8 <CDC_Transmit_FS>
	 		  HAL_Delay (1000);
 8000218:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800021c:	f000 f9ba 	bl	8000594 <HAL_Delay>
HAL_GPIO_TogglePin(bsp_led_GPIO_Port, bsp_led_Pin);
 8000220:	2180      	movs	r1, #128	; 0x80
 8000222:	4805      	ldr	r0, [pc, #20]	; (8000238 <main+0x3c>)
 8000224:	f000 fc96 	bl	8000b54 <HAL_GPIO_TogglePin>
HAL_Delay (300);
 8000228:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800022c:	f000 f9b2 	bl	8000594 <HAL_Delay>
	  CDC_Transmit_FS(data, sizeof(data) - 1);
 8000230:	e7ee      	b.n	8000210 <main+0x14>
 8000232:	bf00      	nop
 8000234:	20000000 	.word	0x20000000
 8000238:	48000400 	.word	0x48000400

0800023c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b096      	sub	sp, #88	; 0x58
 8000240:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000242:	f107 0314 	add.w	r3, r7, #20
 8000246:	2244      	movs	r2, #68	; 0x44
 8000248:	2100      	movs	r1, #0
 800024a:	4618      	mov	r0, r3
 800024c:	f007 f982 	bl	8007554 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000250:	463b      	mov	r3, r7
 8000252:	2200      	movs	r2, #0
 8000254:	601a      	str	r2, [r3, #0]
 8000256:	605a      	str	r2, [r3, #4]
 8000258:	609a      	str	r2, [r3, #8]
 800025a:	60da      	str	r2, [r3, #12]
 800025c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800025e:	2000      	movs	r0, #0
 8000260:	f001 fe72 	bl	8001f48 <HAL_PWREx_ControlVoltageScaling>
 8000264:	4603      	mov	r3, r0
 8000266:	2b00      	cmp	r3, #0
 8000268:	d001      	beq.n	800026e <SystemClock_Config+0x32>
  {
    Error_Handler();
 800026a:	f000 f885 	bl	8000378 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 800026e:	2322      	movs	r3, #34	; 0x22
 8000270:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000272:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000276:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000278:	2301      	movs	r3, #1
 800027a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800027c:	2340      	movs	r3, #64	; 0x40
 800027e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000280:	2302      	movs	r3, #2
 8000282:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000284:	2302      	movs	r3, #2
 8000286:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000288:	2302      	movs	r3, #2
 800028a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 800028c:	231e      	movs	r3, #30
 800028e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000290:	2302      	movs	r3, #2
 8000292:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000294:	2302      	movs	r3, #2
 8000296:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000298:	2302      	movs	r3, #2
 800029a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800029c:	f107 0314 	add.w	r3, r7, #20
 80002a0:	4618      	mov	r0, r3
 80002a2:	f001 ff05 	bl	80020b0 <HAL_RCC_OscConfig>
 80002a6:	4603      	mov	r3, r0
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d001      	beq.n	80002b0 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80002ac:	f000 f864 	bl	8000378 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002b0:	230f      	movs	r3, #15
 80002b2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002b4:	2303      	movs	r3, #3
 80002b6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002b8:	2300      	movs	r3, #0
 80002ba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002c2:	2300      	movs	r3, #0
 80002c4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80002c6:	463b      	mov	r3, r7
 80002c8:	2105      	movs	r1, #5
 80002ca:	4618      	mov	r0, r3
 80002cc:	f002 fb0a 	bl	80028e4 <HAL_RCC_ClockConfig>
 80002d0:	4603      	mov	r3, r0
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d001      	beq.n	80002da <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80002d6:	f000 f84f 	bl	8000378 <Error_Handler>
  }
}
 80002da:	bf00      	nop
 80002dc:	3758      	adds	r7, #88	; 0x58
 80002de:	46bd      	mov	sp, r7
 80002e0:	bd80      	pop	{r7, pc}
	...

080002e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b088      	sub	sp, #32
 80002e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002ea:	f107 030c 	add.w	r3, r7, #12
 80002ee:	2200      	movs	r2, #0
 80002f0:	601a      	str	r2, [r3, #0]
 80002f2:	605a      	str	r2, [r3, #4]
 80002f4:	609a      	str	r2, [r3, #8]
 80002f6:	60da      	str	r2, [r3, #12]
 80002f8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80002fa:	4b1d      	ldr	r3, [pc, #116]	; (8000370 <MX_GPIO_Init+0x8c>)
 80002fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002fe:	4a1c      	ldr	r2, [pc, #112]	; (8000370 <MX_GPIO_Init+0x8c>)
 8000300:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000304:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000306:	4b1a      	ldr	r3, [pc, #104]	; (8000370 <MX_GPIO_Init+0x8c>)
 8000308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800030a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800030e:	60bb      	str	r3, [r7, #8]
 8000310:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000312:	4b17      	ldr	r3, [pc, #92]	; (8000370 <MX_GPIO_Init+0x8c>)
 8000314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000316:	4a16      	ldr	r2, [pc, #88]	; (8000370 <MX_GPIO_Init+0x8c>)
 8000318:	f043 0301 	orr.w	r3, r3, #1
 800031c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800031e:	4b14      	ldr	r3, [pc, #80]	; (8000370 <MX_GPIO_Init+0x8c>)
 8000320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000322:	f003 0301 	and.w	r3, r3, #1
 8000326:	607b      	str	r3, [r7, #4]
 8000328:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800032a:	4b11      	ldr	r3, [pc, #68]	; (8000370 <MX_GPIO_Init+0x8c>)
 800032c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800032e:	4a10      	ldr	r2, [pc, #64]	; (8000370 <MX_GPIO_Init+0x8c>)
 8000330:	f043 0302 	orr.w	r3, r3, #2
 8000334:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000336:	4b0e      	ldr	r3, [pc, #56]	; (8000370 <MX_GPIO_Init+0x8c>)
 8000338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800033a:	f003 0302 	and.w	r3, r3, #2
 800033e:	603b      	str	r3, [r7, #0]
 8000340:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(bsp_led_GPIO_Port, bsp_led_Pin, GPIO_PIN_RESET);
 8000342:	2200      	movs	r2, #0
 8000344:	2180      	movs	r1, #128	; 0x80
 8000346:	480b      	ldr	r0, [pc, #44]	; (8000374 <MX_GPIO_Init+0x90>)
 8000348:	f000 fbec 	bl	8000b24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : bsp_led_Pin */
  GPIO_InitStruct.Pin = bsp_led_Pin;
 800034c:	2380      	movs	r3, #128	; 0x80
 800034e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000350:	2301      	movs	r3, #1
 8000352:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000354:	2300      	movs	r3, #0
 8000356:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000358:	2300      	movs	r3, #0
 800035a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(bsp_led_GPIO_Port, &GPIO_InitStruct);
 800035c:	f107 030c 	add.w	r3, r7, #12
 8000360:	4619      	mov	r1, r3
 8000362:	4804      	ldr	r0, [pc, #16]	; (8000374 <MX_GPIO_Init+0x90>)
 8000364:	f000 fa4c 	bl	8000800 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000368:	bf00      	nop
 800036a:	3720      	adds	r7, #32
 800036c:	46bd      	mov	sp, r7
 800036e:	bd80      	pop	{r7, pc}
 8000370:	40021000 	.word	0x40021000
 8000374:	48000400 	.word	0x48000400

08000378 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000378:	b480      	push	{r7}
 800037a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800037c:	b672      	cpsid	i
}
 800037e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000380:	e7fe      	b.n	8000380 <Error_Handler+0x8>
	...

08000384 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000384:	b480      	push	{r7}
 8000386:	b083      	sub	sp, #12
 8000388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800038a:	4b0f      	ldr	r3, [pc, #60]	; (80003c8 <HAL_MspInit+0x44>)
 800038c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800038e:	4a0e      	ldr	r2, [pc, #56]	; (80003c8 <HAL_MspInit+0x44>)
 8000390:	f043 0301 	orr.w	r3, r3, #1
 8000394:	6613      	str	r3, [r2, #96]	; 0x60
 8000396:	4b0c      	ldr	r3, [pc, #48]	; (80003c8 <HAL_MspInit+0x44>)
 8000398:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800039a:	f003 0301 	and.w	r3, r3, #1
 800039e:	607b      	str	r3, [r7, #4]
 80003a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003a2:	4b09      	ldr	r3, [pc, #36]	; (80003c8 <HAL_MspInit+0x44>)
 80003a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80003a6:	4a08      	ldr	r2, [pc, #32]	; (80003c8 <HAL_MspInit+0x44>)
 80003a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003ac:	6593      	str	r3, [r2, #88]	; 0x58
 80003ae:	4b06      	ldr	r3, [pc, #24]	; (80003c8 <HAL_MspInit+0x44>)
 80003b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80003b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003b6:	603b      	str	r3, [r7, #0]
 80003b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003ba:	bf00      	nop
 80003bc:	370c      	adds	r7, #12
 80003be:	46bd      	mov	sp, r7
 80003c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c4:	4770      	bx	lr
 80003c6:	bf00      	nop
 80003c8:	40021000 	.word	0x40021000

080003cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003cc:	b480      	push	{r7}
 80003ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80003d0:	e7fe      	b.n	80003d0 <NMI_Handler+0x4>

080003d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003d2:	b480      	push	{r7}
 80003d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003d6:	e7fe      	b.n	80003d6 <HardFault_Handler+0x4>

080003d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003d8:	b480      	push	{r7}
 80003da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003dc:	e7fe      	b.n	80003dc <MemManage_Handler+0x4>

080003de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003de:	b480      	push	{r7}
 80003e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003e2:	e7fe      	b.n	80003e2 <BusFault_Handler+0x4>

080003e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003e4:	b480      	push	{r7}
 80003e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003e8:	e7fe      	b.n	80003e8 <UsageFault_Handler+0x4>

080003ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003ea:	b480      	push	{r7}
 80003ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003ee:	bf00      	nop
 80003f0:	46bd      	mov	sp, r7
 80003f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f6:	4770      	bx	lr

080003f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003f8:	b480      	push	{r7}
 80003fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003fc:	bf00      	nop
 80003fe:	46bd      	mov	sp, r7
 8000400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000404:	4770      	bx	lr

08000406 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000406:	b480      	push	{r7}
 8000408:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800040a:	bf00      	nop
 800040c:	46bd      	mov	sp, r7
 800040e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000412:	4770      	bx	lr

08000414 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000418:	f000 f89c 	bl	8000554 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800041c:	bf00      	nop
 800041e:	bd80      	pop	{r7, pc}

08000420 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000424:	4802      	ldr	r0, [pc, #8]	; (8000430 <OTG_FS_IRQHandler+0x10>)
 8000426:	f000 fd02 	bl	8000e2e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800042a:	bf00      	nop
 800042c:	bd80      	pop	{r7, pc}
 800042e:	bf00      	nop
 8000430:	200016d4 	.word	0x200016d4

08000434 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000434:	b480      	push	{r7}
 8000436:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000438:	4b06      	ldr	r3, [pc, #24]	; (8000454 <SystemInit+0x20>)
 800043a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800043e:	4a05      	ldr	r2, [pc, #20]	; (8000454 <SystemInit+0x20>)
 8000440:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000444:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000448:	bf00      	nop
 800044a:	46bd      	mov	sp, r7
 800044c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000450:	4770      	bx	lr
 8000452:	bf00      	nop
 8000454:	e000ed00 	.word	0xe000ed00

08000458 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000458:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000490 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800045c:	f7ff ffea 	bl	8000434 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000460:	480c      	ldr	r0, [pc, #48]	; (8000494 <LoopForever+0x6>)
  ldr r1, =_edata
 8000462:	490d      	ldr	r1, [pc, #52]	; (8000498 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000464:	4a0d      	ldr	r2, [pc, #52]	; (800049c <LoopForever+0xe>)
  movs r3, #0
 8000466:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000468:	e002      	b.n	8000470 <LoopCopyDataInit>

0800046a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800046a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800046c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800046e:	3304      	adds	r3, #4

08000470 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000470:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000472:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000474:	d3f9      	bcc.n	800046a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000476:	4a0a      	ldr	r2, [pc, #40]	; (80004a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000478:	4c0a      	ldr	r4, [pc, #40]	; (80004a4 <LoopForever+0x16>)
  movs r3, #0
 800047a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800047c:	e001      	b.n	8000482 <LoopFillZerobss>

0800047e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800047e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000480:	3204      	adds	r2, #4

08000482 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000482:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000484:	d3fb      	bcc.n	800047e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000486:	f007 f833 	bl	80074f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800048a:	f7ff feb7 	bl	80001fc <main>

0800048e <LoopForever>:

LoopForever:
    b LoopForever
 800048e:	e7fe      	b.n	800048e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000490:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000494:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000498:	200001a0 	.word	0x200001a0
  ldr r2, =_sidata
 800049c:	0800760c 	.word	0x0800760c
  ldr r2, =_sbss
 80004a0:	200001a0 	.word	0x200001a0
  ldr r4, =_ebss
 80004a4:	20001e00 	.word	0x20001e00

080004a8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80004a8:	e7fe      	b.n	80004a8 <ADC1_IRQHandler>

080004aa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004aa:	b580      	push	{r7, lr}
 80004ac:	b082      	sub	sp, #8
 80004ae:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80004b0:	2300      	movs	r3, #0
 80004b2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004b4:	2003      	movs	r0, #3
 80004b6:	f000 f961 	bl	800077c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80004ba:	2000      	movs	r0, #0
 80004bc:	f000 f80e 	bl	80004dc <HAL_InitTick>
 80004c0:	4603      	mov	r3, r0
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d002      	beq.n	80004cc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80004c6:	2301      	movs	r3, #1
 80004c8:	71fb      	strb	r3, [r7, #7]
 80004ca:	e001      	b.n	80004d0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80004cc:	f7ff ff5a 	bl	8000384 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80004d0:	79fb      	ldrb	r3, [r7, #7]
}
 80004d2:	4618      	mov	r0, r3
 80004d4:	3708      	adds	r7, #8
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bd80      	pop	{r7, pc}
	...

080004dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b084      	sub	sp, #16
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80004e4:	2300      	movs	r3, #0
 80004e6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80004e8:	4b17      	ldr	r3, [pc, #92]	; (8000548 <HAL_InitTick+0x6c>)
 80004ea:	781b      	ldrb	r3, [r3, #0]
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d023      	beq.n	8000538 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80004f0:	4b16      	ldr	r3, [pc, #88]	; (800054c <HAL_InitTick+0x70>)
 80004f2:	681a      	ldr	r2, [r3, #0]
 80004f4:	4b14      	ldr	r3, [pc, #80]	; (8000548 <HAL_InitTick+0x6c>)
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	4619      	mov	r1, r3
 80004fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000502:	fbb2 f3f3 	udiv	r3, r2, r3
 8000506:	4618      	mov	r0, r3
 8000508:	f000 f96d 	bl	80007e6 <HAL_SYSTICK_Config>
 800050c:	4603      	mov	r3, r0
 800050e:	2b00      	cmp	r3, #0
 8000510:	d10f      	bne.n	8000532 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	2b0f      	cmp	r3, #15
 8000516:	d809      	bhi.n	800052c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000518:	2200      	movs	r2, #0
 800051a:	6879      	ldr	r1, [r7, #4]
 800051c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000520:	f000 f937 	bl	8000792 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000524:	4a0a      	ldr	r2, [pc, #40]	; (8000550 <HAL_InitTick+0x74>)
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	6013      	str	r3, [r2, #0]
 800052a:	e007      	b.n	800053c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800052c:	2301      	movs	r3, #1
 800052e:	73fb      	strb	r3, [r7, #15]
 8000530:	e004      	b.n	800053c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000532:	2301      	movs	r3, #1
 8000534:	73fb      	strb	r3, [r7, #15]
 8000536:	e001      	b.n	800053c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000538:	2301      	movs	r3, #1
 800053a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800053c:	7bfb      	ldrb	r3, [r7, #15]
}
 800053e:	4618      	mov	r0, r3
 8000540:	3710      	adds	r7, #16
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	20000018 	.word	0x20000018
 800054c:	20000010 	.word	0x20000010
 8000550:	20000014 	.word	0x20000014

08000554 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000558:	4b06      	ldr	r3, [pc, #24]	; (8000574 <HAL_IncTick+0x20>)
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	461a      	mov	r2, r3
 800055e:	4b06      	ldr	r3, [pc, #24]	; (8000578 <HAL_IncTick+0x24>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	4413      	add	r3, r2
 8000564:	4a04      	ldr	r2, [pc, #16]	; (8000578 <HAL_IncTick+0x24>)
 8000566:	6013      	str	r3, [r2, #0]
}
 8000568:	bf00      	nop
 800056a:	46bd      	mov	sp, r7
 800056c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop
 8000574:	20000018 	.word	0x20000018
 8000578:	200001fc 	.word	0x200001fc

0800057c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  return uwTick;
 8000580:	4b03      	ldr	r3, [pc, #12]	; (8000590 <HAL_GetTick+0x14>)
 8000582:	681b      	ldr	r3, [r3, #0]
}
 8000584:	4618      	mov	r0, r3
 8000586:	46bd      	mov	sp, r7
 8000588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop
 8000590:	200001fc 	.word	0x200001fc

08000594 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800059c:	f7ff ffee 	bl	800057c <HAL_GetTick>
 80005a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80005ac:	d005      	beq.n	80005ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80005ae:	4b0a      	ldr	r3, [pc, #40]	; (80005d8 <HAL_Delay+0x44>)
 80005b0:	781b      	ldrb	r3, [r3, #0]
 80005b2:	461a      	mov	r2, r3
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	4413      	add	r3, r2
 80005b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80005ba:	bf00      	nop
 80005bc:	f7ff ffde 	bl	800057c <HAL_GetTick>
 80005c0:	4602      	mov	r2, r0
 80005c2:	68bb      	ldr	r3, [r7, #8]
 80005c4:	1ad3      	subs	r3, r2, r3
 80005c6:	68fa      	ldr	r2, [r7, #12]
 80005c8:	429a      	cmp	r2, r3
 80005ca:	d8f7      	bhi.n	80005bc <HAL_Delay+0x28>
  {
  }
}
 80005cc:	bf00      	nop
 80005ce:	bf00      	nop
 80005d0:	3710      	adds	r7, #16
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	20000018 	.word	0x20000018

080005dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005dc:	b480      	push	{r7}
 80005de:	b085      	sub	sp, #20
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	f003 0307 	and.w	r3, r3, #7
 80005ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005ec:	4b0c      	ldr	r3, [pc, #48]	; (8000620 <__NVIC_SetPriorityGrouping+0x44>)
 80005ee:	68db      	ldr	r3, [r3, #12]
 80005f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005f2:	68ba      	ldr	r2, [r7, #8]
 80005f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005f8:	4013      	ands	r3, r2
 80005fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000600:	68bb      	ldr	r3, [r7, #8]
 8000602:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000604:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000608:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800060c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800060e:	4a04      	ldr	r2, [pc, #16]	; (8000620 <__NVIC_SetPriorityGrouping+0x44>)
 8000610:	68bb      	ldr	r3, [r7, #8]
 8000612:	60d3      	str	r3, [r2, #12]
}
 8000614:	bf00      	nop
 8000616:	3714      	adds	r7, #20
 8000618:	46bd      	mov	sp, r7
 800061a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061e:	4770      	bx	lr
 8000620:	e000ed00 	.word	0xe000ed00

08000624 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000628:	4b04      	ldr	r3, [pc, #16]	; (800063c <__NVIC_GetPriorityGrouping+0x18>)
 800062a:	68db      	ldr	r3, [r3, #12]
 800062c:	0a1b      	lsrs	r3, r3, #8
 800062e:	f003 0307 	and.w	r3, r3, #7
}
 8000632:	4618      	mov	r0, r3
 8000634:	46bd      	mov	sp, r7
 8000636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063a:	4770      	bx	lr
 800063c:	e000ed00 	.word	0xe000ed00

08000640 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000640:	b480      	push	{r7}
 8000642:	b083      	sub	sp, #12
 8000644:	af00      	add	r7, sp, #0
 8000646:	4603      	mov	r3, r0
 8000648:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800064a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800064e:	2b00      	cmp	r3, #0
 8000650:	db0b      	blt.n	800066a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000652:	79fb      	ldrb	r3, [r7, #7]
 8000654:	f003 021f 	and.w	r2, r3, #31
 8000658:	4907      	ldr	r1, [pc, #28]	; (8000678 <__NVIC_EnableIRQ+0x38>)
 800065a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800065e:	095b      	lsrs	r3, r3, #5
 8000660:	2001      	movs	r0, #1
 8000662:	fa00 f202 	lsl.w	r2, r0, r2
 8000666:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800066a:	bf00      	nop
 800066c:	370c      	adds	r7, #12
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop
 8000678:	e000e100 	.word	0xe000e100

0800067c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800067c:	b480      	push	{r7}
 800067e:	b083      	sub	sp, #12
 8000680:	af00      	add	r7, sp, #0
 8000682:	4603      	mov	r3, r0
 8000684:	6039      	str	r1, [r7, #0]
 8000686:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000688:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800068c:	2b00      	cmp	r3, #0
 800068e:	db0a      	blt.n	80006a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000690:	683b      	ldr	r3, [r7, #0]
 8000692:	b2da      	uxtb	r2, r3
 8000694:	490c      	ldr	r1, [pc, #48]	; (80006c8 <__NVIC_SetPriority+0x4c>)
 8000696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800069a:	0112      	lsls	r2, r2, #4
 800069c:	b2d2      	uxtb	r2, r2
 800069e:	440b      	add	r3, r1
 80006a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006a4:	e00a      	b.n	80006bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a6:	683b      	ldr	r3, [r7, #0]
 80006a8:	b2da      	uxtb	r2, r3
 80006aa:	4908      	ldr	r1, [pc, #32]	; (80006cc <__NVIC_SetPriority+0x50>)
 80006ac:	79fb      	ldrb	r3, [r7, #7]
 80006ae:	f003 030f 	and.w	r3, r3, #15
 80006b2:	3b04      	subs	r3, #4
 80006b4:	0112      	lsls	r2, r2, #4
 80006b6:	b2d2      	uxtb	r2, r2
 80006b8:	440b      	add	r3, r1
 80006ba:	761a      	strb	r2, [r3, #24]
}
 80006bc:	bf00      	nop
 80006be:	370c      	adds	r7, #12
 80006c0:	46bd      	mov	sp, r7
 80006c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c6:	4770      	bx	lr
 80006c8:	e000e100 	.word	0xe000e100
 80006cc:	e000ed00 	.word	0xe000ed00

080006d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b089      	sub	sp, #36	; 0x24
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	60f8      	str	r0, [r7, #12]
 80006d8:	60b9      	str	r1, [r7, #8]
 80006da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	f003 0307 	and.w	r3, r3, #7
 80006e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006e4:	69fb      	ldr	r3, [r7, #28]
 80006e6:	f1c3 0307 	rsb	r3, r3, #7
 80006ea:	2b04      	cmp	r3, #4
 80006ec:	bf28      	it	cs
 80006ee:	2304      	movcs	r3, #4
 80006f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006f2:	69fb      	ldr	r3, [r7, #28]
 80006f4:	3304      	adds	r3, #4
 80006f6:	2b06      	cmp	r3, #6
 80006f8:	d902      	bls.n	8000700 <NVIC_EncodePriority+0x30>
 80006fa:	69fb      	ldr	r3, [r7, #28]
 80006fc:	3b03      	subs	r3, #3
 80006fe:	e000      	b.n	8000702 <NVIC_EncodePriority+0x32>
 8000700:	2300      	movs	r3, #0
 8000702:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000704:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000708:	69bb      	ldr	r3, [r7, #24]
 800070a:	fa02 f303 	lsl.w	r3, r2, r3
 800070e:	43da      	mvns	r2, r3
 8000710:	68bb      	ldr	r3, [r7, #8]
 8000712:	401a      	ands	r2, r3
 8000714:	697b      	ldr	r3, [r7, #20]
 8000716:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000718:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800071c:	697b      	ldr	r3, [r7, #20]
 800071e:	fa01 f303 	lsl.w	r3, r1, r3
 8000722:	43d9      	mvns	r1, r3
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000728:	4313      	orrs	r3, r2
         );
}
 800072a:	4618      	mov	r0, r3
 800072c:	3724      	adds	r7, #36	; 0x24
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr
	...

08000738 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	3b01      	subs	r3, #1
 8000744:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000748:	d301      	bcc.n	800074e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800074a:	2301      	movs	r3, #1
 800074c:	e00f      	b.n	800076e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800074e:	4a0a      	ldr	r2, [pc, #40]	; (8000778 <SysTick_Config+0x40>)
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	3b01      	subs	r3, #1
 8000754:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000756:	210f      	movs	r1, #15
 8000758:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800075c:	f7ff ff8e 	bl	800067c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000760:	4b05      	ldr	r3, [pc, #20]	; (8000778 <SysTick_Config+0x40>)
 8000762:	2200      	movs	r2, #0
 8000764:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000766:	4b04      	ldr	r3, [pc, #16]	; (8000778 <SysTick_Config+0x40>)
 8000768:	2207      	movs	r2, #7
 800076a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800076c:	2300      	movs	r3, #0
}
 800076e:	4618      	mov	r0, r3
 8000770:	3708      	adds	r7, #8
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	e000e010 	.word	0xe000e010

0800077c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000784:	6878      	ldr	r0, [r7, #4]
 8000786:	f7ff ff29 	bl	80005dc <__NVIC_SetPriorityGrouping>
}
 800078a:	bf00      	nop
 800078c:	3708      	adds	r7, #8
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}

08000792 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000792:	b580      	push	{r7, lr}
 8000794:	b086      	sub	sp, #24
 8000796:	af00      	add	r7, sp, #0
 8000798:	4603      	mov	r3, r0
 800079a:	60b9      	str	r1, [r7, #8]
 800079c:	607a      	str	r2, [r7, #4]
 800079e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80007a0:	2300      	movs	r3, #0
 80007a2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80007a4:	f7ff ff3e 	bl	8000624 <__NVIC_GetPriorityGrouping>
 80007a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007aa:	687a      	ldr	r2, [r7, #4]
 80007ac:	68b9      	ldr	r1, [r7, #8]
 80007ae:	6978      	ldr	r0, [r7, #20]
 80007b0:	f7ff ff8e 	bl	80006d0 <NVIC_EncodePriority>
 80007b4:	4602      	mov	r2, r0
 80007b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007ba:	4611      	mov	r1, r2
 80007bc:	4618      	mov	r0, r3
 80007be:	f7ff ff5d 	bl	800067c <__NVIC_SetPriority>
}
 80007c2:	bf00      	nop
 80007c4:	3718      	adds	r7, #24
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}

080007ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007ca:	b580      	push	{r7, lr}
 80007cc:	b082      	sub	sp, #8
 80007ce:	af00      	add	r7, sp, #0
 80007d0:	4603      	mov	r3, r0
 80007d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007d8:	4618      	mov	r0, r3
 80007da:	f7ff ff31 	bl	8000640 <__NVIC_EnableIRQ>
}
 80007de:	bf00      	nop
 80007e0:	3708      	adds	r7, #8
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}

080007e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007e6:	b580      	push	{r7, lr}
 80007e8:	b082      	sub	sp, #8
 80007ea:	af00      	add	r7, sp, #0
 80007ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007ee:	6878      	ldr	r0, [r7, #4]
 80007f0:	f7ff ffa2 	bl	8000738 <SysTick_Config>
 80007f4:	4603      	mov	r3, r0
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	3708      	adds	r7, #8
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
	...

08000800 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000800:	b480      	push	{r7}
 8000802:	b087      	sub	sp, #28
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
 8000808:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800080a:	2300      	movs	r3, #0
 800080c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800080e:	e166      	b.n	8000ade <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000810:	683b      	ldr	r3, [r7, #0]
 8000812:	681a      	ldr	r2, [r3, #0]
 8000814:	2101      	movs	r1, #1
 8000816:	697b      	ldr	r3, [r7, #20]
 8000818:	fa01 f303 	lsl.w	r3, r1, r3
 800081c:	4013      	ands	r3, r2
 800081e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	2b00      	cmp	r3, #0
 8000824:	f000 8158 	beq.w	8000ad8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	685b      	ldr	r3, [r3, #4]
 800082c:	f003 0303 	and.w	r3, r3, #3
 8000830:	2b01      	cmp	r3, #1
 8000832:	d005      	beq.n	8000840 <HAL_GPIO_Init+0x40>
 8000834:	683b      	ldr	r3, [r7, #0]
 8000836:	685b      	ldr	r3, [r3, #4]
 8000838:	f003 0303 	and.w	r3, r3, #3
 800083c:	2b02      	cmp	r3, #2
 800083e:	d130      	bne.n	80008a2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	689b      	ldr	r3, [r3, #8]
 8000844:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000846:	697b      	ldr	r3, [r7, #20]
 8000848:	005b      	lsls	r3, r3, #1
 800084a:	2203      	movs	r2, #3
 800084c:	fa02 f303 	lsl.w	r3, r2, r3
 8000850:	43db      	mvns	r3, r3
 8000852:	693a      	ldr	r2, [r7, #16]
 8000854:	4013      	ands	r3, r2
 8000856:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000858:	683b      	ldr	r3, [r7, #0]
 800085a:	68da      	ldr	r2, [r3, #12]
 800085c:	697b      	ldr	r3, [r7, #20]
 800085e:	005b      	lsls	r3, r3, #1
 8000860:	fa02 f303 	lsl.w	r3, r2, r3
 8000864:	693a      	ldr	r2, [r7, #16]
 8000866:	4313      	orrs	r3, r2
 8000868:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	693a      	ldr	r2, [r7, #16]
 800086e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	685b      	ldr	r3, [r3, #4]
 8000874:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000876:	2201      	movs	r2, #1
 8000878:	697b      	ldr	r3, [r7, #20]
 800087a:	fa02 f303 	lsl.w	r3, r2, r3
 800087e:	43db      	mvns	r3, r3
 8000880:	693a      	ldr	r2, [r7, #16]
 8000882:	4013      	ands	r3, r2
 8000884:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000886:	683b      	ldr	r3, [r7, #0]
 8000888:	685b      	ldr	r3, [r3, #4]
 800088a:	091b      	lsrs	r3, r3, #4
 800088c:	f003 0201 	and.w	r2, r3, #1
 8000890:	697b      	ldr	r3, [r7, #20]
 8000892:	fa02 f303 	lsl.w	r3, r2, r3
 8000896:	693a      	ldr	r2, [r7, #16]
 8000898:	4313      	orrs	r3, r2
 800089a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	693a      	ldr	r2, [r7, #16]
 80008a0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	685b      	ldr	r3, [r3, #4]
 80008a6:	f003 0303 	and.w	r3, r3, #3
 80008aa:	2b03      	cmp	r3, #3
 80008ac:	d017      	beq.n	80008de <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	68db      	ldr	r3, [r3, #12]
 80008b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80008b4:	697b      	ldr	r3, [r7, #20]
 80008b6:	005b      	lsls	r3, r3, #1
 80008b8:	2203      	movs	r2, #3
 80008ba:	fa02 f303 	lsl.w	r3, r2, r3
 80008be:	43db      	mvns	r3, r3
 80008c0:	693a      	ldr	r2, [r7, #16]
 80008c2:	4013      	ands	r3, r2
 80008c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	689a      	ldr	r2, [r3, #8]
 80008ca:	697b      	ldr	r3, [r7, #20]
 80008cc:	005b      	lsls	r3, r3, #1
 80008ce:	fa02 f303 	lsl.w	r3, r2, r3
 80008d2:	693a      	ldr	r2, [r7, #16]
 80008d4:	4313      	orrs	r3, r2
 80008d6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	693a      	ldr	r2, [r7, #16]
 80008dc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	685b      	ldr	r3, [r3, #4]
 80008e2:	f003 0303 	and.w	r3, r3, #3
 80008e6:	2b02      	cmp	r3, #2
 80008e8:	d123      	bne.n	8000932 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80008ea:	697b      	ldr	r3, [r7, #20]
 80008ec:	08da      	lsrs	r2, r3, #3
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	3208      	adds	r2, #8
 80008f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80008f8:	697b      	ldr	r3, [r7, #20]
 80008fa:	f003 0307 	and.w	r3, r3, #7
 80008fe:	009b      	lsls	r3, r3, #2
 8000900:	220f      	movs	r2, #15
 8000902:	fa02 f303 	lsl.w	r3, r2, r3
 8000906:	43db      	mvns	r3, r3
 8000908:	693a      	ldr	r2, [r7, #16]
 800090a:	4013      	ands	r3, r2
 800090c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	691a      	ldr	r2, [r3, #16]
 8000912:	697b      	ldr	r3, [r7, #20]
 8000914:	f003 0307 	and.w	r3, r3, #7
 8000918:	009b      	lsls	r3, r3, #2
 800091a:	fa02 f303 	lsl.w	r3, r2, r3
 800091e:	693a      	ldr	r2, [r7, #16]
 8000920:	4313      	orrs	r3, r2
 8000922:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000924:	697b      	ldr	r3, [r7, #20]
 8000926:	08da      	lsrs	r2, r3, #3
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	3208      	adds	r2, #8
 800092c:	6939      	ldr	r1, [r7, #16]
 800092e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000938:	697b      	ldr	r3, [r7, #20]
 800093a:	005b      	lsls	r3, r3, #1
 800093c:	2203      	movs	r2, #3
 800093e:	fa02 f303 	lsl.w	r3, r2, r3
 8000942:	43db      	mvns	r3, r3
 8000944:	693a      	ldr	r2, [r7, #16]
 8000946:	4013      	ands	r3, r2
 8000948:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	685b      	ldr	r3, [r3, #4]
 800094e:	f003 0203 	and.w	r2, r3, #3
 8000952:	697b      	ldr	r3, [r7, #20]
 8000954:	005b      	lsls	r3, r3, #1
 8000956:	fa02 f303 	lsl.w	r3, r2, r3
 800095a:	693a      	ldr	r2, [r7, #16]
 800095c:	4313      	orrs	r3, r2
 800095e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	693a      	ldr	r2, [r7, #16]
 8000964:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	685b      	ldr	r3, [r3, #4]
 800096a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800096e:	2b00      	cmp	r3, #0
 8000970:	f000 80b2 	beq.w	8000ad8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000974:	4b61      	ldr	r3, [pc, #388]	; (8000afc <HAL_GPIO_Init+0x2fc>)
 8000976:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000978:	4a60      	ldr	r2, [pc, #384]	; (8000afc <HAL_GPIO_Init+0x2fc>)
 800097a:	f043 0301 	orr.w	r3, r3, #1
 800097e:	6613      	str	r3, [r2, #96]	; 0x60
 8000980:	4b5e      	ldr	r3, [pc, #376]	; (8000afc <HAL_GPIO_Init+0x2fc>)
 8000982:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000984:	f003 0301 	and.w	r3, r3, #1
 8000988:	60bb      	str	r3, [r7, #8]
 800098a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800098c:	4a5c      	ldr	r2, [pc, #368]	; (8000b00 <HAL_GPIO_Init+0x300>)
 800098e:	697b      	ldr	r3, [r7, #20]
 8000990:	089b      	lsrs	r3, r3, #2
 8000992:	3302      	adds	r3, #2
 8000994:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000998:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800099a:	697b      	ldr	r3, [r7, #20]
 800099c:	f003 0303 	and.w	r3, r3, #3
 80009a0:	009b      	lsls	r3, r3, #2
 80009a2:	220f      	movs	r2, #15
 80009a4:	fa02 f303 	lsl.w	r3, r2, r3
 80009a8:	43db      	mvns	r3, r3
 80009aa:	693a      	ldr	r2, [r7, #16]
 80009ac:	4013      	ands	r3, r2
 80009ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80009b6:	d02b      	beq.n	8000a10 <HAL_GPIO_Init+0x210>
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	4a52      	ldr	r2, [pc, #328]	; (8000b04 <HAL_GPIO_Init+0x304>)
 80009bc:	4293      	cmp	r3, r2
 80009be:	d025      	beq.n	8000a0c <HAL_GPIO_Init+0x20c>
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	4a51      	ldr	r2, [pc, #324]	; (8000b08 <HAL_GPIO_Init+0x308>)
 80009c4:	4293      	cmp	r3, r2
 80009c6:	d01f      	beq.n	8000a08 <HAL_GPIO_Init+0x208>
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	4a50      	ldr	r2, [pc, #320]	; (8000b0c <HAL_GPIO_Init+0x30c>)
 80009cc:	4293      	cmp	r3, r2
 80009ce:	d019      	beq.n	8000a04 <HAL_GPIO_Init+0x204>
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	4a4f      	ldr	r2, [pc, #316]	; (8000b10 <HAL_GPIO_Init+0x310>)
 80009d4:	4293      	cmp	r3, r2
 80009d6:	d013      	beq.n	8000a00 <HAL_GPIO_Init+0x200>
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	4a4e      	ldr	r2, [pc, #312]	; (8000b14 <HAL_GPIO_Init+0x314>)
 80009dc:	4293      	cmp	r3, r2
 80009de:	d00d      	beq.n	80009fc <HAL_GPIO_Init+0x1fc>
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	4a4d      	ldr	r2, [pc, #308]	; (8000b18 <HAL_GPIO_Init+0x318>)
 80009e4:	4293      	cmp	r3, r2
 80009e6:	d007      	beq.n	80009f8 <HAL_GPIO_Init+0x1f8>
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	4a4c      	ldr	r2, [pc, #304]	; (8000b1c <HAL_GPIO_Init+0x31c>)
 80009ec:	4293      	cmp	r3, r2
 80009ee:	d101      	bne.n	80009f4 <HAL_GPIO_Init+0x1f4>
 80009f0:	2307      	movs	r3, #7
 80009f2:	e00e      	b.n	8000a12 <HAL_GPIO_Init+0x212>
 80009f4:	2308      	movs	r3, #8
 80009f6:	e00c      	b.n	8000a12 <HAL_GPIO_Init+0x212>
 80009f8:	2306      	movs	r3, #6
 80009fa:	e00a      	b.n	8000a12 <HAL_GPIO_Init+0x212>
 80009fc:	2305      	movs	r3, #5
 80009fe:	e008      	b.n	8000a12 <HAL_GPIO_Init+0x212>
 8000a00:	2304      	movs	r3, #4
 8000a02:	e006      	b.n	8000a12 <HAL_GPIO_Init+0x212>
 8000a04:	2303      	movs	r3, #3
 8000a06:	e004      	b.n	8000a12 <HAL_GPIO_Init+0x212>
 8000a08:	2302      	movs	r3, #2
 8000a0a:	e002      	b.n	8000a12 <HAL_GPIO_Init+0x212>
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	e000      	b.n	8000a12 <HAL_GPIO_Init+0x212>
 8000a10:	2300      	movs	r3, #0
 8000a12:	697a      	ldr	r2, [r7, #20]
 8000a14:	f002 0203 	and.w	r2, r2, #3
 8000a18:	0092      	lsls	r2, r2, #2
 8000a1a:	4093      	lsls	r3, r2
 8000a1c:	693a      	ldr	r2, [r7, #16]
 8000a1e:	4313      	orrs	r3, r2
 8000a20:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000a22:	4937      	ldr	r1, [pc, #220]	; (8000b00 <HAL_GPIO_Init+0x300>)
 8000a24:	697b      	ldr	r3, [r7, #20]
 8000a26:	089b      	lsrs	r3, r3, #2
 8000a28:	3302      	adds	r3, #2
 8000a2a:	693a      	ldr	r2, [r7, #16]
 8000a2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000a30:	4b3b      	ldr	r3, [pc, #236]	; (8000b20 <HAL_GPIO_Init+0x320>)
 8000a32:	689b      	ldr	r3, [r3, #8]
 8000a34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	43db      	mvns	r3, r3
 8000a3a:	693a      	ldr	r2, [r7, #16]
 8000a3c:	4013      	ands	r3, r2
 8000a3e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	685b      	ldr	r3, [r3, #4]
 8000a44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d003      	beq.n	8000a54 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8000a4c:	693a      	ldr	r2, [r7, #16]
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	4313      	orrs	r3, r2
 8000a52:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000a54:	4a32      	ldr	r2, [pc, #200]	; (8000b20 <HAL_GPIO_Init+0x320>)
 8000a56:	693b      	ldr	r3, [r7, #16]
 8000a58:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000a5a:	4b31      	ldr	r3, [pc, #196]	; (8000b20 <HAL_GPIO_Init+0x320>)
 8000a5c:	68db      	ldr	r3, [r3, #12]
 8000a5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	43db      	mvns	r3, r3
 8000a64:	693a      	ldr	r2, [r7, #16]
 8000a66:	4013      	ands	r3, r2
 8000a68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	685b      	ldr	r3, [r3, #4]
 8000a6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d003      	beq.n	8000a7e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8000a76:	693a      	ldr	r2, [r7, #16]
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	4313      	orrs	r3, r2
 8000a7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000a7e:	4a28      	ldr	r2, [pc, #160]	; (8000b20 <HAL_GPIO_Init+0x320>)
 8000a80:	693b      	ldr	r3, [r7, #16]
 8000a82:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000a84:	4b26      	ldr	r3, [pc, #152]	; (8000b20 <HAL_GPIO_Init+0x320>)
 8000a86:	685b      	ldr	r3, [r3, #4]
 8000a88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	43db      	mvns	r3, r3
 8000a8e:	693a      	ldr	r2, [r7, #16]
 8000a90:	4013      	ands	r3, r2
 8000a92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	685b      	ldr	r3, [r3, #4]
 8000a98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d003      	beq.n	8000aa8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8000aa0:	693a      	ldr	r2, [r7, #16]
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	4313      	orrs	r3, r2
 8000aa6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000aa8:	4a1d      	ldr	r2, [pc, #116]	; (8000b20 <HAL_GPIO_Init+0x320>)
 8000aaa:	693b      	ldr	r3, [r7, #16]
 8000aac:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000aae:	4b1c      	ldr	r3, [pc, #112]	; (8000b20 <HAL_GPIO_Init+0x320>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	43db      	mvns	r3, r3
 8000ab8:	693a      	ldr	r2, [r7, #16]
 8000aba:	4013      	ands	r3, r2
 8000abc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	685b      	ldr	r3, [r3, #4]
 8000ac2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d003      	beq.n	8000ad2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8000aca:	693a      	ldr	r2, [r7, #16]
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	4313      	orrs	r3, r2
 8000ad0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000ad2:	4a13      	ldr	r2, [pc, #76]	; (8000b20 <HAL_GPIO_Init+0x320>)
 8000ad4:	693b      	ldr	r3, [r7, #16]
 8000ad6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	3301      	adds	r3, #1
 8000adc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	681a      	ldr	r2, [r3, #0]
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	fa22 f303 	lsr.w	r3, r2, r3
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	f47f ae91 	bne.w	8000810 <HAL_GPIO_Init+0x10>
  }
}
 8000aee:	bf00      	nop
 8000af0:	bf00      	nop
 8000af2:	371c      	adds	r7, #28
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr
 8000afc:	40021000 	.word	0x40021000
 8000b00:	40010000 	.word	0x40010000
 8000b04:	48000400 	.word	0x48000400
 8000b08:	48000800 	.word	0x48000800
 8000b0c:	48000c00 	.word	0x48000c00
 8000b10:	48001000 	.word	0x48001000
 8000b14:	48001400 	.word	0x48001400
 8000b18:	48001800 	.word	0x48001800
 8000b1c:	48001c00 	.word	0x48001c00
 8000b20:	40010400 	.word	0x40010400

08000b24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
 8000b2c:	460b      	mov	r3, r1
 8000b2e:	807b      	strh	r3, [r7, #2]
 8000b30:	4613      	mov	r3, r2
 8000b32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b34:	787b      	ldrb	r3, [r7, #1]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d003      	beq.n	8000b42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000b3a:	887a      	ldrh	r2, [r7, #2]
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000b40:	e002      	b.n	8000b48 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000b42:	887a      	ldrh	r2, [r7, #2]
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000b48:	bf00      	nop
 8000b4a:	370c      	adds	r7, #12
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr

08000b54 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b085      	sub	sp, #20
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
 8000b5c:	460b      	mov	r3, r1
 8000b5e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	695b      	ldr	r3, [r3, #20]
 8000b64:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000b66:	887a      	ldrh	r2, [r7, #2]
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	4013      	ands	r3, r2
 8000b6c:	041a      	lsls	r2, r3, #16
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	43d9      	mvns	r1, r3
 8000b72:	887b      	ldrh	r3, [r7, #2]
 8000b74:	400b      	ands	r3, r1
 8000b76:	431a      	orrs	r2, r3
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	619a      	str	r2, [r3, #24]
}
 8000b7c:	bf00      	nop
 8000b7e:	3714      	adds	r7, #20
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr

08000b88 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000b88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b8a:	b08f      	sub	sp, #60	; 0x3c
 8000b8c:	af0a      	add	r7, sp, #40	; 0x28
 8000b8e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d101      	bne.n	8000b9a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000b96:	2301      	movs	r3, #1
 8000b98:	e116      	b.n	8000dc8 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8000ba6:	b2db      	uxtb	r3, r3
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d106      	bne.n	8000bba <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	2200      	movs	r2, #0
 8000bb0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000bb4:	6878      	ldr	r0, [r7, #4]
 8000bb6:	f006 f869 	bl	8006c8c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	2203      	movs	r2, #3
 8000bbe:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000bc2:	68bb      	ldr	r3, [r7, #8]
 8000bc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d102      	bne.n	8000bd4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f002 ff06 	bl	80039ea <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	603b      	str	r3, [r7, #0]
 8000be4:	687e      	ldr	r6, [r7, #4]
 8000be6:	466d      	mov	r5, sp
 8000be8:	f106 0410 	add.w	r4, r6, #16
 8000bec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000bf0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bf2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000bf4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000bf8:	e885 0003 	stmia.w	r5, {r0, r1}
 8000bfc:	1d33      	adds	r3, r6, #4
 8000bfe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c00:	6838      	ldr	r0, [r7, #0]
 8000c02:	f002 fe19 	bl	8003838 <USB_CoreInit>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d005      	beq.n	8000c18 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	2202      	movs	r2, #2
 8000c10:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8000c14:	2301      	movs	r3, #1
 8000c16:	e0d7      	b.n	8000dc8 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f002 fef4 	bl	8003a0c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c24:	2300      	movs	r3, #0
 8000c26:	73fb      	strb	r3, [r7, #15]
 8000c28:	e04a      	b.n	8000cc0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000c2a:	7bfa      	ldrb	r2, [r7, #15]
 8000c2c:	6879      	ldr	r1, [r7, #4]
 8000c2e:	4613      	mov	r3, r2
 8000c30:	00db      	lsls	r3, r3, #3
 8000c32:	4413      	add	r3, r2
 8000c34:	009b      	lsls	r3, r3, #2
 8000c36:	440b      	add	r3, r1
 8000c38:	333d      	adds	r3, #61	; 0x3d
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000c3e:	7bfa      	ldrb	r2, [r7, #15]
 8000c40:	6879      	ldr	r1, [r7, #4]
 8000c42:	4613      	mov	r3, r2
 8000c44:	00db      	lsls	r3, r3, #3
 8000c46:	4413      	add	r3, r2
 8000c48:	009b      	lsls	r3, r3, #2
 8000c4a:	440b      	add	r3, r1
 8000c4c:	333c      	adds	r3, #60	; 0x3c
 8000c4e:	7bfa      	ldrb	r2, [r7, #15]
 8000c50:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000c52:	7bfa      	ldrb	r2, [r7, #15]
 8000c54:	7bfb      	ldrb	r3, [r7, #15]
 8000c56:	b298      	uxth	r0, r3
 8000c58:	6879      	ldr	r1, [r7, #4]
 8000c5a:	4613      	mov	r3, r2
 8000c5c:	00db      	lsls	r3, r3, #3
 8000c5e:	4413      	add	r3, r2
 8000c60:	009b      	lsls	r3, r3, #2
 8000c62:	440b      	add	r3, r1
 8000c64:	3344      	adds	r3, #68	; 0x44
 8000c66:	4602      	mov	r2, r0
 8000c68:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000c6a:	7bfa      	ldrb	r2, [r7, #15]
 8000c6c:	6879      	ldr	r1, [r7, #4]
 8000c6e:	4613      	mov	r3, r2
 8000c70:	00db      	lsls	r3, r3, #3
 8000c72:	4413      	add	r3, r2
 8000c74:	009b      	lsls	r3, r3, #2
 8000c76:	440b      	add	r3, r1
 8000c78:	3340      	adds	r3, #64	; 0x40
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000c7e:	7bfa      	ldrb	r2, [r7, #15]
 8000c80:	6879      	ldr	r1, [r7, #4]
 8000c82:	4613      	mov	r3, r2
 8000c84:	00db      	lsls	r3, r3, #3
 8000c86:	4413      	add	r3, r2
 8000c88:	009b      	lsls	r3, r3, #2
 8000c8a:	440b      	add	r3, r1
 8000c8c:	3348      	adds	r3, #72	; 0x48
 8000c8e:	2200      	movs	r2, #0
 8000c90:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000c92:	7bfa      	ldrb	r2, [r7, #15]
 8000c94:	6879      	ldr	r1, [r7, #4]
 8000c96:	4613      	mov	r3, r2
 8000c98:	00db      	lsls	r3, r3, #3
 8000c9a:	4413      	add	r3, r2
 8000c9c:	009b      	lsls	r3, r3, #2
 8000c9e:	440b      	add	r3, r1
 8000ca0:	334c      	adds	r3, #76	; 0x4c
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000ca6:	7bfa      	ldrb	r2, [r7, #15]
 8000ca8:	6879      	ldr	r1, [r7, #4]
 8000caa:	4613      	mov	r3, r2
 8000cac:	00db      	lsls	r3, r3, #3
 8000cae:	4413      	add	r3, r2
 8000cb0:	009b      	lsls	r3, r3, #2
 8000cb2:	440b      	add	r3, r1
 8000cb4:	3354      	adds	r3, #84	; 0x54
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000cba:	7bfb      	ldrb	r3, [r7, #15]
 8000cbc:	3301      	adds	r3, #1
 8000cbe:	73fb      	strb	r3, [r7, #15]
 8000cc0:	7bfa      	ldrb	r2, [r7, #15]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	685b      	ldr	r3, [r3, #4]
 8000cc6:	429a      	cmp	r2, r3
 8000cc8:	d3af      	bcc.n	8000c2a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000cca:	2300      	movs	r3, #0
 8000ccc:	73fb      	strb	r3, [r7, #15]
 8000cce:	e044      	b.n	8000d5a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000cd0:	7bfa      	ldrb	r2, [r7, #15]
 8000cd2:	6879      	ldr	r1, [r7, #4]
 8000cd4:	4613      	mov	r3, r2
 8000cd6:	00db      	lsls	r3, r3, #3
 8000cd8:	4413      	add	r3, r2
 8000cda:	009b      	lsls	r3, r3, #2
 8000cdc:	440b      	add	r3, r1
 8000cde:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000ce6:	7bfa      	ldrb	r2, [r7, #15]
 8000ce8:	6879      	ldr	r1, [r7, #4]
 8000cea:	4613      	mov	r3, r2
 8000cec:	00db      	lsls	r3, r3, #3
 8000cee:	4413      	add	r3, r2
 8000cf0:	009b      	lsls	r3, r3, #2
 8000cf2:	440b      	add	r3, r1
 8000cf4:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8000cf8:	7bfa      	ldrb	r2, [r7, #15]
 8000cfa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000cfc:	7bfa      	ldrb	r2, [r7, #15]
 8000cfe:	6879      	ldr	r1, [r7, #4]
 8000d00:	4613      	mov	r3, r2
 8000d02:	00db      	lsls	r3, r3, #3
 8000d04:	4413      	add	r3, r2
 8000d06:	009b      	lsls	r3, r3, #2
 8000d08:	440b      	add	r3, r1
 8000d0a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8000d0e:	2200      	movs	r2, #0
 8000d10:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000d12:	7bfa      	ldrb	r2, [r7, #15]
 8000d14:	6879      	ldr	r1, [r7, #4]
 8000d16:	4613      	mov	r3, r2
 8000d18:	00db      	lsls	r3, r3, #3
 8000d1a:	4413      	add	r3, r2
 8000d1c:	009b      	lsls	r3, r3, #2
 8000d1e:	440b      	add	r3, r1
 8000d20:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8000d24:	2200      	movs	r2, #0
 8000d26:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000d28:	7bfa      	ldrb	r2, [r7, #15]
 8000d2a:	6879      	ldr	r1, [r7, #4]
 8000d2c:	4613      	mov	r3, r2
 8000d2e:	00db      	lsls	r3, r3, #3
 8000d30:	4413      	add	r3, r2
 8000d32:	009b      	lsls	r3, r3, #2
 8000d34:	440b      	add	r3, r1
 8000d36:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000d3e:	7bfa      	ldrb	r2, [r7, #15]
 8000d40:	6879      	ldr	r1, [r7, #4]
 8000d42:	4613      	mov	r3, r2
 8000d44:	00db      	lsls	r3, r3, #3
 8000d46:	4413      	add	r3, r2
 8000d48:	009b      	lsls	r3, r3, #2
 8000d4a:	440b      	add	r3, r1
 8000d4c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d54:	7bfb      	ldrb	r3, [r7, #15]
 8000d56:	3301      	adds	r3, #1
 8000d58:	73fb      	strb	r3, [r7, #15]
 8000d5a:	7bfa      	ldrb	r2, [r7, #15]
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	429a      	cmp	r2, r3
 8000d62:	d3b5      	bcc.n	8000cd0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	603b      	str	r3, [r7, #0]
 8000d6a:	687e      	ldr	r6, [r7, #4]
 8000d6c:	466d      	mov	r5, sp
 8000d6e:	f106 0410 	add.w	r4, r6, #16
 8000d72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d7a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000d7e:	e885 0003 	stmia.w	r5, {r0, r1}
 8000d82:	1d33      	adds	r3, r6, #4
 8000d84:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d86:	6838      	ldr	r0, [r7, #0]
 8000d88:	f002 fe8c 	bl	8003aa4 <USB_DevInit>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d005      	beq.n	8000d9e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	2202      	movs	r2, #2
 8000d96:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	e014      	b.n	8000dc8 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	2200      	movs	r2, #0
 8000da2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	2201      	movs	r2, #1
 8000daa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000db2:	2b01      	cmp	r3, #1
 8000db4:	d102      	bne.n	8000dbc <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000db6:	6878      	ldr	r0, [r7, #4]
 8000db8:	f001 f882 	bl	8001ec0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f003 ff14 	bl	8004bee <USB_DevDisconnect>

  return HAL_OK;
 8000dc6:	2300      	movs	r3, #0
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3714      	adds	r7, #20
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000dd0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b084      	sub	sp, #16
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8000de4:	2b01      	cmp	r3, #1
 8000de6:	d101      	bne.n	8000dec <HAL_PCD_Start+0x1c>
 8000de8:	2302      	movs	r3, #2
 8000dea:	e01c      	b.n	8000e26 <HAL_PCD_Start+0x56>
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	2201      	movs	r2, #1
 8000df0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000df8:	2b01      	cmp	r3, #1
 8000dfa:	d105      	bne.n	8000e08 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e00:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f002 fddb 	bl	80039c8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4618      	mov	r0, r3
 8000e18:	f003 fec8 	bl	8004bac <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	2200      	movs	r2, #0
 8000e20:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8000e24:	2300      	movs	r3, #0
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3710      	adds	r7, #16
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}

08000e2e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000e2e:	b590      	push	{r4, r7, lr}
 8000e30:	b08d      	sub	sp, #52	; 0x34
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8000e3c:	6a3b      	ldr	r3, [r7, #32]
 8000e3e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4618      	mov	r0, r3
 8000e46:	f003 ff86 	bl	8004d56 <USB_GetMode>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	f040 847e 	bne.w	800174e <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4618      	mov	r0, r3
 8000e58:	f003 feea 	bl	8004c30 <USB_ReadInterrupts>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	f000 8474 	beq.w	800174c <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8000e64:	69fb      	ldr	r3, [r7, #28]
 8000e66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000e6a:	689b      	ldr	r3, [r3, #8]
 8000e6c:	0a1b      	lsrs	r3, r3, #8
 8000e6e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f003 fed7 	bl	8004c30 <USB_ReadInterrupts>
 8000e82:	4603      	mov	r3, r0
 8000e84:	f003 0302 	and.w	r3, r3, #2
 8000e88:	2b02      	cmp	r3, #2
 8000e8a:	d107      	bne.n	8000e9c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	695a      	ldr	r2, [r3, #20]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f002 0202 	and.w	r2, r2, #2
 8000e9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f003 fec5 	bl	8004c30 <USB_ReadInterrupts>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	f003 0310 	and.w	r3, r3, #16
 8000eac:	2b10      	cmp	r3, #16
 8000eae:	d161      	bne.n	8000f74 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	699a      	ldr	r2, [r3, #24]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f022 0210 	bic.w	r2, r2, #16
 8000ebe:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8000ec0:	6a3b      	ldr	r3, [r7, #32]
 8000ec2:	6a1b      	ldr	r3, [r3, #32]
 8000ec4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8000ec6:	69bb      	ldr	r3, [r7, #24]
 8000ec8:	f003 020f 	and.w	r2, r3, #15
 8000ecc:	4613      	mov	r3, r2
 8000ece:	00db      	lsls	r3, r3, #3
 8000ed0:	4413      	add	r3, r2
 8000ed2:	009b      	lsls	r3, r3, #2
 8000ed4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8000ed8:	687a      	ldr	r2, [r7, #4]
 8000eda:	4413      	add	r3, r2
 8000edc:	3304      	adds	r3, #4
 8000ede:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8000ee0:	69bb      	ldr	r3, [r7, #24]
 8000ee2:	0c5b      	lsrs	r3, r3, #17
 8000ee4:	f003 030f 	and.w	r3, r3, #15
 8000ee8:	2b02      	cmp	r3, #2
 8000eea:	d124      	bne.n	8000f36 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d035      	beq.n	8000f64 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8000efc:	69bb      	ldr	r3, [r7, #24]
 8000efe:	091b      	lsrs	r3, r3, #4
 8000f00:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8000f02:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000f06:	b29b      	uxth	r3, r3
 8000f08:	461a      	mov	r2, r3
 8000f0a:	6a38      	ldr	r0, [r7, #32]
 8000f0c:	f003 fcfc 	bl	8004908 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	691a      	ldr	r2, [r3, #16]
 8000f14:	69bb      	ldr	r3, [r7, #24]
 8000f16:	091b      	lsrs	r3, r3, #4
 8000f18:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000f1c:	441a      	add	r2, r3
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	6a1a      	ldr	r2, [r3, #32]
 8000f26:	69bb      	ldr	r3, [r7, #24]
 8000f28:	091b      	lsrs	r3, r3, #4
 8000f2a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000f2e:	441a      	add	r2, r3
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	621a      	str	r2, [r3, #32]
 8000f34:	e016      	b.n	8000f64 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8000f36:	69bb      	ldr	r3, [r7, #24]
 8000f38:	0c5b      	lsrs	r3, r3, #17
 8000f3a:	f003 030f 	and.w	r3, r3, #15
 8000f3e:	2b06      	cmp	r3, #6
 8000f40:	d110      	bne.n	8000f64 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8000f48:	2208      	movs	r2, #8
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	6a38      	ldr	r0, [r7, #32]
 8000f4e:	f003 fcdb 	bl	8004908 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	6a1a      	ldr	r2, [r3, #32]
 8000f56:	69bb      	ldr	r3, [r7, #24]
 8000f58:	091b      	lsrs	r3, r3, #4
 8000f5a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000f5e:	441a      	add	r2, r3
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	699a      	ldr	r2, [r3, #24]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f042 0210 	orr.w	r2, r2, #16
 8000f72:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f003 fe59 	bl	8004c30 <USB_ReadInterrupts>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000f84:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8000f88:	f040 80a7 	bne.w	80010da <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4618      	mov	r0, r3
 8000f96:	f003 fe5e 	bl	8004c56 <USB_ReadDevAllOutEpInterrupt>
 8000f9a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8000f9c:	e099      	b.n	80010d2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8000f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fa0:	f003 0301 	and.w	r3, r3, #1
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	f000 808e 	beq.w	80010c6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fb0:	b2d2      	uxtb	r2, r2
 8000fb2:	4611      	mov	r1, r2
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f003 fe82 	bl	8004cbe <USB_ReadDevOutEPInterrupt>
 8000fba:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	f003 0301 	and.w	r3, r3, #1
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d00c      	beq.n	8000fe0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8000fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc8:	015a      	lsls	r2, r3, #5
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	4413      	add	r3, r2
 8000fce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8000fd8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000fda:	6878      	ldr	r0, [r7, #4]
 8000fdc:	f000 fe96 	bl	8001d0c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	f003 0308 	and.w	r3, r3, #8
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d00c      	beq.n	8001004 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8000fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fec:	015a      	lsls	r2, r3, #5
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	4413      	add	r3, r2
 8000ff2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	2308      	movs	r3, #8
 8000ffa:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8000ffc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000ffe:	6878      	ldr	r0, [r7, #4]
 8001000:	f000 fed2 	bl	8001da8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	f003 0310 	and.w	r3, r3, #16
 800100a:	2b00      	cmp	r3, #0
 800100c:	d008      	beq.n	8001020 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800100e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001010:	015a      	lsls	r2, r3, #5
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	4413      	add	r3, r2
 8001016:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800101a:	461a      	mov	r2, r3
 800101c:	2310      	movs	r3, #16
 800101e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	f003 0302 	and.w	r3, r3, #2
 8001026:	2b00      	cmp	r3, #0
 8001028:	d030      	beq.n	800108c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800102a:	6a3b      	ldr	r3, [r7, #32]
 800102c:	695b      	ldr	r3, [r3, #20]
 800102e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001032:	2b80      	cmp	r3, #128	; 0x80
 8001034:	d109      	bne.n	800104a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	69fa      	ldr	r2, [r7, #28]
 8001040:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001044:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001048:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800104a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800104c:	4613      	mov	r3, r2
 800104e:	00db      	lsls	r3, r3, #3
 8001050:	4413      	add	r3, r2
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001058:	687a      	ldr	r2, [r7, #4]
 800105a:	4413      	add	r3, r2
 800105c:	3304      	adds	r3, #4
 800105e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	78db      	ldrb	r3, [r3, #3]
 8001064:	2b01      	cmp	r3, #1
 8001066:	d108      	bne.n	800107a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	2200      	movs	r2, #0
 800106c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800106e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001070:	b2db      	uxtb	r3, r3
 8001072:	4619      	mov	r1, r3
 8001074:	6878      	ldr	r0, [r7, #4]
 8001076:	f005 ff4d 	bl	8006f14 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800107a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800107c:	015a      	lsls	r2, r3, #5
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	4413      	add	r3, r2
 8001082:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001086:	461a      	mov	r2, r3
 8001088:	2302      	movs	r3, #2
 800108a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800108c:	693b      	ldr	r3, [r7, #16]
 800108e:	f003 0320 	and.w	r3, r3, #32
 8001092:	2b00      	cmp	r3, #0
 8001094:	d008      	beq.n	80010a8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001098:	015a      	lsls	r2, r3, #5
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	4413      	add	r3, r2
 800109e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80010a2:	461a      	mov	r2, r3
 80010a4:	2320      	movs	r3, #32
 80010a6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d009      	beq.n	80010c6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80010b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b4:	015a      	lsls	r2, r3, #5
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	4413      	add	r3, r2
 80010ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80010be:	461a      	mov	r2, r3
 80010c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010c4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80010c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c8:	3301      	adds	r3, #1
 80010ca:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80010cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010ce:	085b      	lsrs	r3, r3, #1
 80010d0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80010d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	f47f af62 	bne.w	8000f9e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4618      	mov	r0, r3
 80010e0:	f003 fda6 	bl	8004c30 <USB_ReadInterrupts>
 80010e4:	4603      	mov	r3, r0
 80010e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010ea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80010ee:	f040 80a4 	bne.w	800123a <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4618      	mov	r0, r3
 80010f8:	f003 fdc7 	bl	8004c8a <USB_ReadDevAllInEpInterrupt>
 80010fc:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80010fe:	2300      	movs	r3, #0
 8001100:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001102:	e096      	b.n	8001232 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001106:	f003 0301 	and.w	r3, r3, #1
 800110a:	2b00      	cmp	r3, #0
 800110c:	f000 808b 	beq.w	8001226 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001116:	b2d2      	uxtb	r2, r2
 8001118:	4611      	mov	r1, r2
 800111a:	4618      	mov	r0, r3
 800111c:	f003 fded 	bl	8004cfa <USB_ReadDevInEPInterrupt>
 8001120:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	f003 0301 	and.w	r3, r3, #1
 8001128:	2b00      	cmp	r3, #0
 800112a:	d020      	beq.n	800116e <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800112c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800112e:	f003 030f 	and.w	r3, r3, #15
 8001132:	2201      	movs	r2, #1
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001140:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	43db      	mvns	r3, r3
 8001146:	69f9      	ldr	r1, [r7, #28]
 8001148:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800114c:	4013      	ands	r3, r2
 800114e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001152:	015a      	lsls	r2, r3, #5
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	4413      	add	r3, r2
 8001158:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800115c:	461a      	mov	r2, r3
 800115e:	2301      	movs	r3, #1
 8001160:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001164:	b2db      	uxtb	r3, r3
 8001166:	4619      	mov	r1, r3
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f005 fe3e 	bl	8006dea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	f003 0308 	and.w	r3, r3, #8
 8001174:	2b00      	cmp	r3, #0
 8001176:	d008      	beq.n	800118a <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800117a:	015a      	lsls	r2, r3, #5
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	4413      	add	r3, r2
 8001180:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001184:	461a      	mov	r2, r3
 8001186:	2308      	movs	r3, #8
 8001188:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	f003 0310 	and.w	r3, r3, #16
 8001190:	2b00      	cmp	r3, #0
 8001192:	d008      	beq.n	80011a6 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001196:	015a      	lsls	r2, r3, #5
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	4413      	add	r3, r2
 800119c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80011a0:	461a      	mov	r2, r3
 80011a2:	2310      	movs	r3, #16
 80011a4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d008      	beq.n	80011c2 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80011b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b2:	015a      	lsls	r2, r3, #5
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	4413      	add	r3, r2
 80011b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80011bc:	461a      	mov	r2, r3
 80011be:	2340      	movs	r3, #64	; 0x40
 80011c0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	f003 0302 	and.w	r3, r3, #2
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d023      	beq.n	8001214 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80011cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80011ce:	6a38      	ldr	r0, [r7, #32]
 80011d0:	f002 fdb4 	bl	8003d3c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80011d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011d6:	4613      	mov	r3, r2
 80011d8:	00db      	lsls	r3, r3, #3
 80011da:	4413      	add	r3, r2
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	3338      	adds	r3, #56	; 0x38
 80011e0:	687a      	ldr	r2, [r7, #4]
 80011e2:	4413      	add	r3, r2
 80011e4:	3304      	adds	r3, #4
 80011e6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	78db      	ldrb	r3, [r3, #3]
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d108      	bne.n	8001202 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	2200      	movs	r2, #0
 80011f4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80011f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	4619      	mov	r1, r3
 80011fc:	6878      	ldr	r0, [r7, #4]
 80011fe:	f005 fe9b 	bl	8006f38 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001204:	015a      	lsls	r2, r3, #5
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	4413      	add	r3, r2
 800120a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800120e:	461a      	mov	r2, r3
 8001210:	2302      	movs	r3, #2
 8001212:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800121a:	2b00      	cmp	r3, #0
 800121c:	d003      	beq.n	8001226 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800121e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f000 fcea 	bl	8001bfa <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001228:	3301      	adds	r3, #1
 800122a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800122c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800122e:	085b      	lsrs	r3, r3, #1
 8001230:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001234:	2b00      	cmp	r3, #0
 8001236:	f47f af65 	bne.w	8001104 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4618      	mov	r0, r3
 8001240:	f003 fcf6 	bl	8004c30 <USB_ReadInterrupts>
 8001244:	4603      	mov	r3, r0
 8001246:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800124a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800124e:	d122      	bne.n	8001296 <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001250:	69fb      	ldr	r3, [r7, #28]
 8001252:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	69fa      	ldr	r2, [r7, #28]
 800125a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800125e:	f023 0301 	bic.w	r3, r3, #1
 8001262:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800126a:	2b01      	cmp	r3, #1
 800126c:	d108      	bne.n	8001280 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2200      	movs	r2, #0
 8001272:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001276:	2100      	movs	r1, #0
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f006 f8cd 	bl	8007418 <HAL_PCDEx_LPM_Callback>
 800127e:	e002      	b.n	8001286 <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001280:	6878      	ldr	r0, [r7, #4]
 8001282:	f005 fe1f 	bl	8006ec4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	695a      	ldr	r2, [r3, #20]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001294:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4618      	mov	r0, r3
 800129c:	f003 fcc8 	bl	8004c30 <USB_ReadInterrupts>
 80012a0:	4603      	mov	r3, r0
 80012a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80012a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80012aa:	d112      	bne.n	80012d2 <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80012b2:	689b      	ldr	r3, [r3, #8]
 80012b4:	f003 0301 	and.w	r3, r3, #1
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	d102      	bne.n	80012c2 <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f005 fddb 	bl	8006e78 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	695a      	ldr	r2, [r3, #20]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80012d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4618      	mov	r0, r3
 80012d8:	f003 fcaa 	bl	8004c30 <USB_ReadInterrupts>
 80012dc:	4603      	mov	r3, r0
 80012de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80012e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80012e6:	d121      	bne.n	800132c <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	695a      	ldr	r2, [r3, #20]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80012f6:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d111      	bne.n	8001326 <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2201      	movs	r2, #1
 8001306:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001310:	089b      	lsrs	r3, r3, #2
 8001312:	f003 020f 	and.w	r2, r3, #15
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800131c:	2101      	movs	r1, #1
 800131e:	6878      	ldr	r0, [r7, #4]
 8001320:	f006 f87a 	bl	8007418 <HAL_PCDEx_LPM_Callback>
 8001324:	e002      	b.n	800132c <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	f005 fda6 	bl	8006e78 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4618      	mov	r0, r3
 8001332:	f003 fc7d 	bl	8004c30 <USB_ReadInterrupts>
 8001336:	4603      	mov	r3, r0
 8001338:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800133c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001340:	f040 80b5 	bne.w	80014ae <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	69fa      	ldr	r2, [r7, #28]
 800134e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001352:	f023 0301 	bic.w	r3, r3, #1
 8001356:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	2110      	movs	r1, #16
 800135e:	4618      	mov	r0, r3
 8001360:	f002 fcec 	bl	8003d3c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001364:	2300      	movs	r3, #0
 8001366:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001368:	e046      	b.n	80013f8 <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800136a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800136c:	015a      	lsls	r2, r3, #5
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	4413      	add	r3, r2
 8001372:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001376:	461a      	mov	r2, r3
 8001378:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800137c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800137e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001380:	015a      	lsls	r2, r3, #5
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	4413      	add	r3, r2
 8001386:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800138e:	0151      	lsls	r1, r2, #5
 8001390:	69fa      	ldr	r2, [r7, #28]
 8001392:	440a      	add	r2, r1
 8001394:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001398:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800139c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800139e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013a0:	015a      	lsls	r2, r3, #5
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	4413      	add	r3, r2
 80013a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80013aa:	461a      	mov	r2, r3
 80013ac:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80013b0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80013b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013b4:	015a      	lsls	r2, r3, #5
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	4413      	add	r3, r2
 80013ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80013c2:	0151      	lsls	r1, r2, #5
 80013c4:	69fa      	ldr	r2, [r7, #28]
 80013c6:	440a      	add	r2, r1
 80013c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80013cc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80013d0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80013d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013d4:	015a      	lsls	r2, r3, #5
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	4413      	add	r3, r2
 80013da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80013e2:	0151      	lsls	r1, r2, #5
 80013e4:	69fa      	ldr	r2, [r7, #28]
 80013e6:	440a      	add	r2, r1
 80013e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80013ec:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80013f0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013f4:	3301      	adds	r3, #1
 80013f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80013fe:	429a      	cmp	r2, r3
 8001400:	d3b3      	bcc.n	800136a <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001408:	69db      	ldr	r3, [r3, #28]
 800140a:	69fa      	ldr	r2, [r7, #28]
 800140c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001410:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001414:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141a:	2b00      	cmp	r3, #0
 800141c:	d016      	beq.n	800144c <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001424:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001428:	69fa      	ldr	r2, [r7, #28]
 800142a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800142e:	f043 030b 	orr.w	r3, r3, #11
 8001432:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800143c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143e:	69fa      	ldr	r2, [r7, #28]
 8001440:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001444:	f043 030b 	orr.w	r3, r3, #11
 8001448:	6453      	str	r3, [r2, #68]	; 0x44
 800144a:	e015      	b.n	8001478 <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001452:	695b      	ldr	r3, [r3, #20]
 8001454:	69fa      	ldr	r2, [r7, #28]
 8001456:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800145a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800145e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001462:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800146a:	691b      	ldr	r3, [r3, #16]
 800146c:	69fa      	ldr	r2, [r7, #28]
 800146e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001472:	f043 030b 	orr.w	r3, r3, #11
 8001476:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	69fa      	ldr	r2, [r7, #28]
 8001482:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001486:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800148a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001496:	4619      	mov	r1, r3
 8001498:	4610      	mov	r0, r2
 800149a:	f003 fc8d 	bl	8004db8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	695a      	ldr	r2, [r3, #20]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80014ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4618      	mov	r0, r3
 80014b4:	f003 fbbc 	bl	8004c30 <USB_ReadInterrupts>
 80014b8:	4603      	mov	r3, r0
 80014ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80014c2:	d124      	bne.n	800150e <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4618      	mov	r0, r3
 80014ca:	f003 fc52 	bl	8004d72 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4618      	mov	r0, r3
 80014d4:	f002 fcaf 	bl	8003e36 <USB_GetDevSpeed>
 80014d8:	4603      	mov	r3, r0
 80014da:	461a      	mov	r2, r3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681c      	ldr	r4, [r3, #0]
 80014e4:	f001 fbc4 	bl	8002c70 <HAL_RCC_GetHCLKFreq>
 80014e8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	461a      	mov	r2, r3
 80014f2:	4620      	mov	r0, r4
 80014f4:	f002 f9cc 	bl	8003890 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	f005 fc9e 	bl	8006e3a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	695a      	ldr	r2, [r3, #20]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800150c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4618      	mov	r0, r3
 8001514:	f003 fb8c 	bl	8004c30 <USB_ReadInterrupts>
 8001518:	4603      	mov	r3, r0
 800151a:	f003 0308 	and.w	r3, r3, #8
 800151e:	2b08      	cmp	r3, #8
 8001520:	d10a      	bne.n	8001538 <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f005 fc7b 	bl	8006e1e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	695a      	ldr	r2, [r3, #20]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f002 0208 	and.w	r2, r2, #8
 8001536:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4618      	mov	r0, r3
 800153e:	f003 fb77 	bl	8004c30 <USB_ReadInterrupts>
 8001542:	4603      	mov	r3, r0
 8001544:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001548:	2b80      	cmp	r3, #128	; 0x80
 800154a:	d122      	bne.n	8001592 <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800154c:	6a3b      	ldr	r3, [r7, #32]
 800154e:	699b      	ldr	r3, [r3, #24]
 8001550:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001554:	6a3b      	ldr	r3, [r7, #32]
 8001556:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001558:	2301      	movs	r3, #1
 800155a:	627b      	str	r3, [r7, #36]	; 0x24
 800155c:	e014      	b.n	8001588 <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800155e:	6879      	ldr	r1, [r7, #4]
 8001560:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001562:	4613      	mov	r3, r2
 8001564:	00db      	lsls	r3, r3, #3
 8001566:	4413      	add	r3, r2
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	440b      	add	r3, r1
 800156c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	2b01      	cmp	r3, #1
 8001574:	d105      	bne.n	8001582 <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001578:	b2db      	uxtb	r3, r3
 800157a:	4619      	mov	r1, r3
 800157c:	6878      	ldr	r0, [r7, #4]
 800157e:	f000 fb0b 	bl	8001b98 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001584:	3301      	adds	r3, #1
 8001586:	627b      	str	r3, [r7, #36]	; 0x24
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800158e:	429a      	cmp	r2, r3
 8001590:	d3e5      	bcc.n	800155e <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4618      	mov	r0, r3
 8001598:	f003 fb4a 	bl	8004c30 <USB_ReadInterrupts>
 800159c:	4603      	mov	r3, r0
 800159e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80015a6:	d13b      	bne.n	8001620 <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80015a8:	2301      	movs	r3, #1
 80015aa:	627b      	str	r3, [r7, #36]	; 0x24
 80015ac:	e02b      	b.n	8001606 <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80015ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b0:	015a      	lsls	r2, r3, #5
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	4413      	add	r3, r2
 80015b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80015be:	6879      	ldr	r1, [r7, #4]
 80015c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015c2:	4613      	mov	r3, r2
 80015c4:	00db      	lsls	r3, r3, #3
 80015c6:	4413      	add	r3, r2
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	440b      	add	r3, r1
 80015cc:	3340      	adds	r3, #64	; 0x40
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d115      	bne.n	8001600 <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80015d4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	da12      	bge.n	8001600 <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80015da:	6879      	ldr	r1, [r7, #4]
 80015dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015de:	4613      	mov	r3, r2
 80015e0:	00db      	lsls	r3, r3, #3
 80015e2:	4413      	add	r3, r2
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	440b      	add	r3, r1
 80015e8:	333f      	adds	r3, #63	; 0x3f
 80015ea:	2201      	movs	r2, #1
 80015ec:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80015ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	4619      	mov	r1, r3
 80015fa:	6878      	ldr	r0, [r7, #4]
 80015fc:	f000 facc 	bl	8001b98 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001602:	3301      	adds	r3, #1
 8001604:	627b      	str	r3, [r7, #36]	; 0x24
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800160c:	429a      	cmp	r2, r3
 800160e:	d3ce      	bcc.n	80015ae <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	695a      	ldr	r2, [r3, #20]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800161e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4618      	mov	r0, r3
 8001626:	f003 fb03 	bl	8004c30 <USB_ReadInterrupts>
 800162a:	4603      	mov	r3, r0
 800162c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001630:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001634:	d155      	bne.n	80016e2 <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001636:	2301      	movs	r3, #1
 8001638:	627b      	str	r3, [r7, #36]	; 0x24
 800163a:	e045      	b.n	80016c8 <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800163c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163e:	015a      	lsls	r2, r3, #5
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	4413      	add	r3, r2
 8001644:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800164c:	6879      	ldr	r1, [r7, #4]
 800164e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001650:	4613      	mov	r3, r2
 8001652:	00db      	lsls	r3, r3, #3
 8001654:	4413      	add	r3, r2
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	440b      	add	r3, r1
 800165a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	2b01      	cmp	r3, #1
 8001662:	d12e      	bne.n	80016c2 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001664:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001666:	2b00      	cmp	r3, #0
 8001668:	da2b      	bge.n	80016c2 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800166a:	69bb      	ldr	r3, [r7, #24]
 800166c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001676:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800167a:	429a      	cmp	r2, r3
 800167c:	d121      	bne.n	80016c2 <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800167e:	6879      	ldr	r1, [r7, #4]
 8001680:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001682:	4613      	mov	r3, r2
 8001684:	00db      	lsls	r3, r3, #3
 8001686:	4413      	add	r3, r2
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	440b      	add	r3, r1
 800168c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001690:	2201      	movs	r2, #1
 8001692:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001694:	6a3b      	ldr	r3, [r7, #32]
 8001696:	699b      	ldr	r3, [r3, #24]
 8001698:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800169c:	6a3b      	ldr	r3, [r7, #32]
 800169e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80016a0:	6a3b      	ldr	r3, [r7, #32]
 80016a2:	695b      	ldr	r3, [r3, #20]
 80016a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d10a      	bne.n	80016c2 <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	69fa      	ldr	r2, [r7, #28]
 80016b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016be:	6053      	str	r3, [r2, #4]
            break;
 80016c0:	e007      	b.n	80016d2 <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80016c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c4:	3301      	adds	r3, #1
 80016c6:	627b      	str	r3, [r7, #36]	; 0x24
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016ce:	429a      	cmp	r2, r3
 80016d0:	d3b4      	bcc.n	800163c <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	695a      	ldr	r2, [r3, #20]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80016e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4618      	mov	r0, r3
 80016e8:	f003 faa2 	bl	8004c30 <USB_ReadInterrupts>
 80016ec:	4603      	mov	r3, r0
 80016ee:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80016f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016f6:	d10a      	bne.n	800170e <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	f005 fc2f 	bl	8006f5c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	695a      	ldr	r2, [r3, #20]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800170c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4618      	mov	r0, r3
 8001714:	f003 fa8c 	bl	8004c30 <USB_ReadInterrupts>
 8001718:	4603      	mov	r3, r0
 800171a:	f003 0304 	and.w	r3, r3, #4
 800171e:	2b04      	cmp	r3, #4
 8001720:	d115      	bne.n	800174e <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800172a:	69bb      	ldr	r3, [r7, #24]
 800172c:	f003 0304 	and.w	r3, r3, #4
 8001730:	2b00      	cmp	r3, #0
 8001732:	d002      	beq.n	800173a <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001734:	6878      	ldr	r0, [r7, #4]
 8001736:	f005 fc1f 	bl	8006f78 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	6859      	ldr	r1, [r3, #4]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	69ba      	ldr	r2, [r7, #24]
 8001746:	430a      	orrs	r2, r1
 8001748:	605a      	str	r2, [r3, #4]
 800174a:	e000      	b.n	800174e <HAL_PCD_IRQHandler+0x920>
      return;
 800174c:	bf00      	nop
    }
  }
}
 800174e:	3734      	adds	r7, #52	; 0x34
 8001750:	46bd      	mov	sp, r7
 8001752:	bd90      	pop	{r4, r7, pc}

08001754 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
 800175c:	460b      	mov	r3, r1
 800175e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001766:	2b01      	cmp	r3, #1
 8001768:	d101      	bne.n	800176e <HAL_PCD_SetAddress+0x1a>
 800176a:	2302      	movs	r3, #2
 800176c:	e013      	b.n	8001796 <HAL_PCD_SetAddress+0x42>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2201      	movs	r2, #1
 8001772:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	78fa      	ldrb	r2, [r7, #3]
 800177a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	78fa      	ldrb	r2, [r7, #3]
 8001784:	4611      	mov	r1, r2
 8001786:	4618      	mov	r0, r3
 8001788:	f003 f9ea 	bl	8004b60 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2200      	movs	r2, #0
 8001790:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001794:	2300      	movs	r3, #0
}
 8001796:	4618      	mov	r0, r3
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}

0800179e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800179e:	b580      	push	{r7, lr}
 80017a0:	b084      	sub	sp, #16
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	6078      	str	r0, [r7, #4]
 80017a6:	4608      	mov	r0, r1
 80017a8:	4611      	mov	r1, r2
 80017aa:	461a      	mov	r2, r3
 80017ac:	4603      	mov	r3, r0
 80017ae:	70fb      	strb	r3, [r7, #3]
 80017b0:	460b      	mov	r3, r1
 80017b2:	803b      	strh	r3, [r7, #0]
 80017b4:	4613      	mov	r3, r2
 80017b6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80017b8:	2300      	movs	r3, #0
 80017ba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80017bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	da0f      	bge.n	80017e4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80017c4:	78fb      	ldrb	r3, [r7, #3]
 80017c6:	f003 020f 	and.w	r2, r3, #15
 80017ca:	4613      	mov	r3, r2
 80017cc:	00db      	lsls	r3, r3, #3
 80017ce:	4413      	add	r3, r2
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	3338      	adds	r3, #56	; 0x38
 80017d4:	687a      	ldr	r2, [r7, #4]
 80017d6:	4413      	add	r3, r2
 80017d8:	3304      	adds	r3, #4
 80017da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	2201      	movs	r2, #1
 80017e0:	705a      	strb	r2, [r3, #1]
 80017e2:	e00f      	b.n	8001804 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80017e4:	78fb      	ldrb	r3, [r7, #3]
 80017e6:	f003 020f 	and.w	r2, r3, #15
 80017ea:	4613      	mov	r3, r2
 80017ec:	00db      	lsls	r3, r3, #3
 80017ee:	4413      	add	r3, r2
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80017f6:	687a      	ldr	r2, [r7, #4]
 80017f8:	4413      	add	r3, r2
 80017fa:	3304      	adds	r3, #4
 80017fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	2200      	movs	r2, #0
 8001802:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001804:	78fb      	ldrb	r3, [r7, #3]
 8001806:	f003 030f 	and.w	r3, r3, #15
 800180a:	b2da      	uxtb	r2, r3
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001810:	883a      	ldrh	r2, [r7, #0]
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	78ba      	ldrb	r2, [r7, #2]
 800181a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	785b      	ldrb	r3, [r3, #1]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d004      	beq.n	800182e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	b29a      	uxth	r2, r3
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800182e:	78bb      	ldrb	r3, [r7, #2]
 8001830:	2b02      	cmp	r3, #2
 8001832:	d102      	bne.n	800183a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	2200      	movs	r2, #0
 8001838:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001840:	2b01      	cmp	r3, #1
 8001842:	d101      	bne.n	8001848 <HAL_PCD_EP_Open+0xaa>
 8001844:	2302      	movs	r3, #2
 8001846:	e00e      	b.n	8001866 <HAL_PCD_EP_Open+0xc8>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2201      	movs	r2, #1
 800184c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	68f9      	ldr	r1, [r7, #12]
 8001856:	4618      	mov	r0, r3
 8001858:	f002 fb0c 	bl	8003e74 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2200      	movs	r2, #0
 8001860:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8001864:	7afb      	ldrb	r3, [r7, #11]
}
 8001866:	4618      	mov	r0, r3
 8001868:	3710      	adds	r7, #16
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}

0800186e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800186e:	b580      	push	{r7, lr}
 8001870:	b084      	sub	sp, #16
 8001872:	af00      	add	r7, sp, #0
 8001874:	6078      	str	r0, [r7, #4]
 8001876:	460b      	mov	r3, r1
 8001878:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800187a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800187e:	2b00      	cmp	r3, #0
 8001880:	da0f      	bge.n	80018a2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001882:	78fb      	ldrb	r3, [r7, #3]
 8001884:	f003 020f 	and.w	r2, r3, #15
 8001888:	4613      	mov	r3, r2
 800188a:	00db      	lsls	r3, r3, #3
 800188c:	4413      	add	r3, r2
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	3338      	adds	r3, #56	; 0x38
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	4413      	add	r3, r2
 8001896:	3304      	adds	r3, #4
 8001898:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	2201      	movs	r2, #1
 800189e:	705a      	strb	r2, [r3, #1]
 80018a0:	e00f      	b.n	80018c2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80018a2:	78fb      	ldrb	r3, [r7, #3]
 80018a4:	f003 020f 	and.w	r2, r3, #15
 80018a8:	4613      	mov	r3, r2
 80018aa:	00db      	lsls	r3, r3, #3
 80018ac:	4413      	add	r3, r2
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80018b4:	687a      	ldr	r2, [r7, #4]
 80018b6:	4413      	add	r3, r2
 80018b8:	3304      	adds	r3, #4
 80018ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	2200      	movs	r2, #0
 80018c0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80018c2:	78fb      	ldrb	r3, [r7, #3]
 80018c4:	f003 030f 	and.w	r3, r3, #15
 80018c8:	b2da      	uxtb	r2, r3
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d101      	bne.n	80018dc <HAL_PCD_EP_Close+0x6e>
 80018d8:	2302      	movs	r3, #2
 80018da:	e00e      	b.n	80018fa <HAL_PCD_EP_Close+0x8c>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2201      	movs	r2, #1
 80018e0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	68f9      	ldr	r1, [r7, #12]
 80018ea:	4618      	mov	r0, r3
 80018ec:	f002 fb4a 	bl	8003f84 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2200      	movs	r2, #0
 80018f4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80018f8:	2300      	movs	r3, #0
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3710      	adds	r7, #16
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}

08001902 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001902:	b580      	push	{r7, lr}
 8001904:	b086      	sub	sp, #24
 8001906:	af00      	add	r7, sp, #0
 8001908:	60f8      	str	r0, [r7, #12]
 800190a:	607a      	str	r2, [r7, #4]
 800190c:	603b      	str	r3, [r7, #0]
 800190e:	460b      	mov	r3, r1
 8001910:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001912:	7afb      	ldrb	r3, [r7, #11]
 8001914:	f003 020f 	and.w	r2, r3, #15
 8001918:	4613      	mov	r3, r2
 800191a:	00db      	lsls	r3, r3, #3
 800191c:	4413      	add	r3, r2
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001924:	68fa      	ldr	r2, [r7, #12]
 8001926:	4413      	add	r3, r2
 8001928:	3304      	adds	r3, #4
 800192a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	683a      	ldr	r2, [r7, #0]
 8001936:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	2200      	movs	r2, #0
 800193c:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	2200      	movs	r2, #0
 8001942:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001944:	7afb      	ldrb	r3, [r7, #11]
 8001946:	f003 030f 	and.w	r3, r3, #15
 800194a:	b2da      	uxtb	r2, r3
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001950:	7afb      	ldrb	r3, [r7, #11]
 8001952:	f003 030f 	and.w	r3, r3, #15
 8001956:	2b00      	cmp	r3, #0
 8001958:	d106      	bne.n	8001968 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	6979      	ldr	r1, [r7, #20]
 8001960:	4618      	mov	r0, r3
 8001962:	f002 fdcb 	bl	80044fc <USB_EP0StartXfer>
 8001966:	e005      	b.n	8001974 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	6979      	ldr	r1, [r7, #20]
 800196e:	4618      	mov	r0, r3
 8001970:	f002 fbe4 	bl	800413c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001974:	2300      	movs	r3, #0
}
 8001976:	4618      	mov	r0, r3
 8001978:	3718      	adds	r7, #24
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}

0800197e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800197e:	b480      	push	{r7}
 8001980:	b083      	sub	sp, #12
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
 8001986:	460b      	mov	r3, r1
 8001988:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800198a:	78fb      	ldrb	r3, [r7, #3]
 800198c:	f003 020f 	and.w	r2, r3, #15
 8001990:	6879      	ldr	r1, [r7, #4]
 8001992:	4613      	mov	r3, r2
 8001994:	00db      	lsls	r3, r3, #3
 8001996:	4413      	add	r3, r2
 8001998:	009b      	lsls	r3, r3, #2
 800199a:	440b      	add	r3, r1
 800199c:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80019a0:	681b      	ldr	r3, [r3, #0]
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	370c      	adds	r7, #12
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr

080019ae <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80019ae:	b580      	push	{r7, lr}
 80019b0:	b086      	sub	sp, #24
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	60f8      	str	r0, [r7, #12]
 80019b6:	607a      	str	r2, [r7, #4]
 80019b8:	603b      	str	r3, [r7, #0]
 80019ba:	460b      	mov	r3, r1
 80019bc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80019be:	7afb      	ldrb	r3, [r7, #11]
 80019c0:	f003 020f 	and.w	r2, r3, #15
 80019c4:	4613      	mov	r3, r2
 80019c6:	00db      	lsls	r3, r3, #3
 80019c8:	4413      	add	r3, r2
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	3338      	adds	r3, #56	; 0x38
 80019ce:	68fa      	ldr	r2, [r7, #12]
 80019d0:	4413      	add	r3, r2
 80019d2:	3304      	adds	r3, #4
 80019d4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	687a      	ldr	r2, [r7, #4]
 80019da:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	683a      	ldr	r2, [r7, #0]
 80019e0:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	2200      	movs	r2, #0
 80019e6:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	2201      	movs	r2, #1
 80019ec:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80019ee:	7afb      	ldrb	r3, [r7, #11]
 80019f0:	f003 030f 	and.w	r3, r3, #15
 80019f4:	b2da      	uxtb	r2, r3
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80019fa:	7afb      	ldrb	r3, [r7, #11]
 80019fc:	f003 030f 	and.w	r3, r3, #15
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d106      	bne.n	8001a12 <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	6979      	ldr	r1, [r7, #20]
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f002 fd76 	bl	80044fc <USB_EP0StartXfer>
 8001a10:	e005      	b.n	8001a1e <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	6979      	ldr	r1, [r7, #20]
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f002 fb8f 	bl	800413c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001a1e:	2300      	movs	r3, #0
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3718      	adds	r7, #24
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}

08001a28 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	460b      	mov	r3, r1
 8001a32:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001a34:	78fb      	ldrb	r3, [r7, #3]
 8001a36:	f003 020f 	and.w	r2, r3, #15
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d901      	bls.n	8001a46 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e04e      	b.n	8001ae4 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001a46:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	da0f      	bge.n	8001a6e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a4e:	78fb      	ldrb	r3, [r7, #3]
 8001a50:	f003 020f 	and.w	r2, r3, #15
 8001a54:	4613      	mov	r3, r2
 8001a56:	00db      	lsls	r3, r3, #3
 8001a58:	4413      	add	r3, r2
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	3338      	adds	r3, #56	; 0x38
 8001a5e:	687a      	ldr	r2, [r7, #4]
 8001a60:	4413      	add	r3, r2
 8001a62:	3304      	adds	r3, #4
 8001a64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	2201      	movs	r2, #1
 8001a6a:	705a      	strb	r2, [r3, #1]
 8001a6c:	e00d      	b.n	8001a8a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001a6e:	78fa      	ldrb	r2, [r7, #3]
 8001a70:	4613      	mov	r3, r2
 8001a72:	00db      	lsls	r3, r3, #3
 8001a74:	4413      	add	r3, r2
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001a7c:	687a      	ldr	r2, [r7, #4]
 8001a7e:	4413      	add	r3, r2
 8001a80:	3304      	adds	r3, #4
 8001a82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	2200      	movs	r2, #0
 8001a88:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a90:	78fb      	ldrb	r3, [r7, #3]
 8001a92:	f003 030f 	and.w	r3, r3, #15
 8001a96:	b2da      	uxtb	r2, r3
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d101      	bne.n	8001aaa <HAL_PCD_EP_SetStall+0x82>
 8001aa6:	2302      	movs	r3, #2
 8001aa8:	e01c      	b.n	8001ae4 <HAL_PCD_EP_SetStall+0xbc>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2201      	movs	r2, #1
 8001aae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	68f9      	ldr	r1, [r7, #12]
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f002 ff7d 	bl	80049b8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001abe:	78fb      	ldrb	r3, [r7, #3]
 8001ac0:	f003 030f 	and.w	r3, r3, #15
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d108      	bne.n	8001ada <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	4610      	mov	r0, r2
 8001ad6:	f003 f96f 	bl	8004db8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2200      	movs	r2, #0
 8001ade:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001ae2:	2300      	movs	r3, #0
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3710      	adds	r7, #16
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}

08001aec <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	460b      	mov	r3, r1
 8001af6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001af8:	78fb      	ldrb	r3, [r7, #3]
 8001afa:	f003 020f 	and.w	r2, r3, #15
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d901      	bls.n	8001b0a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e042      	b.n	8001b90 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001b0a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	da0f      	bge.n	8001b32 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b12:	78fb      	ldrb	r3, [r7, #3]
 8001b14:	f003 020f 	and.w	r2, r3, #15
 8001b18:	4613      	mov	r3, r2
 8001b1a:	00db      	lsls	r3, r3, #3
 8001b1c:	4413      	add	r3, r2
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	3338      	adds	r3, #56	; 0x38
 8001b22:	687a      	ldr	r2, [r7, #4]
 8001b24:	4413      	add	r3, r2
 8001b26:	3304      	adds	r3, #4
 8001b28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	705a      	strb	r2, [r3, #1]
 8001b30:	e00f      	b.n	8001b52 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b32:	78fb      	ldrb	r3, [r7, #3]
 8001b34:	f003 020f 	and.w	r2, r3, #15
 8001b38:	4613      	mov	r3, r2
 8001b3a:	00db      	lsls	r3, r3, #3
 8001b3c:	4413      	add	r3, r2
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001b44:	687a      	ldr	r2, [r7, #4]
 8001b46:	4413      	add	r3, r2
 8001b48:	3304      	adds	r3, #4
 8001b4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	2200      	movs	r2, #0
 8001b56:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b58:	78fb      	ldrb	r3, [r7, #3]
 8001b5a:	f003 030f 	and.w	r3, r3, #15
 8001b5e:	b2da      	uxtb	r2, r3
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d101      	bne.n	8001b72 <HAL_PCD_EP_ClrStall+0x86>
 8001b6e:	2302      	movs	r3, #2
 8001b70:	e00e      	b.n	8001b90 <HAL_PCD_EP_ClrStall+0xa4>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2201      	movs	r2, #1
 8001b76:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	68f9      	ldr	r1, [r7, #12]
 8001b80:	4618      	mov	r0, r3
 8001b82:	f002 ff87 	bl	8004a94 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001b8e:	2300      	movs	r3, #0
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3710      	adds	r7, #16
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}

08001b98 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8001ba4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	da0c      	bge.n	8001bc6 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bac:	78fb      	ldrb	r3, [r7, #3]
 8001bae:	f003 020f 	and.w	r2, r3, #15
 8001bb2:	4613      	mov	r3, r2
 8001bb4:	00db      	lsls	r3, r3, #3
 8001bb6:	4413      	add	r3, r2
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	3338      	adds	r3, #56	; 0x38
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	4413      	add	r3, r2
 8001bc0:	3304      	adds	r3, #4
 8001bc2:	60fb      	str	r3, [r7, #12]
 8001bc4:	e00c      	b.n	8001be0 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001bc6:	78fb      	ldrb	r3, [r7, #3]
 8001bc8:	f003 020f 	and.w	r2, r3, #15
 8001bcc:	4613      	mov	r3, r2
 8001bce:	00db      	lsls	r3, r3, #3
 8001bd0:	4413      	add	r3, r2
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001bd8:	687a      	ldr	r2, [r7, #4]
 8001bda:	4413      	add	r3, r2
 8001bdc:	3304      	adds	r3, #4
 8001bde:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	68f9      	ldr	r1, [r7, #12]
 8001be6:	4618      	mov	r0, r3
 8001be8:	f002 fdaa 	bl	8004740 <USB_EPStopXfer>
 8001bec:	4603      	mov	r3, r0
 8001bee:	72fb      	strb	r3, [r7, #11]

  return ret;
 8001bf0:	7afb      	ldrb	r3, [r7, #11]
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3710      	adds	r7, #16
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}

08001bfa <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001bfa:	b580      	push	{r7, lr}
 8001bfc:	b088      	sub	sp, #32
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	6078      	str	r0, [r7, #4]
 8001c02:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001c0e:	683a      	ldr	r2, [r7, #0]
 8001c10:	4613      	mov	r3, r2
 8001c12:	00db      	lsls	r3, r3, #3
 8001c14:	4413      	add	r3, r2
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	3338      	adds	r3, #56	; 0x38
 8001c1a:	687a      	ldr	r2, [r7, #4]
 8001c1c:	4413      	add	r3, r2
 8001c1e:	3304      	adds	r3, #4
 8001c20:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	6a1a      	ldr	r2, [r3, #32]
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	699b      	ldr	r3, [r3, #24]
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d901      	bls.n	8001c32 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e067      	b.n	8001d02 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	699a      	ldr	r2, [r3, #24]
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	6a1b      	ldr	r3, [r3, #32]
 8001c3a:	1ad3      	subs	r3, r2, r3
 8001c3c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	68db      	ldr	r3, [r3, #12]
 8001c42:	69fa      	ldr	r2, [r7, #28]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d902      	bls.n	8001c4e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	3303      	adds	r3, #3
 8001c52:	089b      	lsrs	r3, r3, #2
 8001c54:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001c56:	e026      	b.n	8001ca6 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	699a      	ldr	r2, [r3, #24]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	6a1b      	ldr	r3, [r3, #32]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	69fa      	ldr	r2, [r7, #28]
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d902      	bls.n	8001c74 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	68db      	ldr	r3, [r3, #12]
 8001c72:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	3303      	adds	r3, #3
 8001c78:	089b      	lsrs	r3, r3, #2
 8001c7a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	6919      	ldr	r1, [r3, #16]
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	b2da      	uxtb	r2, r3
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	b29b      	uxth	r3, r3
 8001c88:	6978      	ldr	r0, [r7, #20]
 8001c8a:	f002 fe03 	bl	8004894 <USB_WritePacket>

    ep->xfer_buff  += len;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	691a      	ldr	r2, [r3, #16]
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	441a      	add	r2, r3
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	6a1a      	ldr	r2, [r3, #32]
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	441a      	add	r2, r3
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	015a      	lsls	r2, r3, #5
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	4413      	add	r3, r2
 8001cae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001cb2:	699b      	ldr	r3, [r3, #24]
 8001cb4:	b29b      	uxth	r3, r3
 8001cb6:	69ba      	ldr	r2, [r7, #24]
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d809      	bhi.n	8001cd0 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	6a1a      	ldr	r2, [r3, #32]
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d203      	bcs.n	8001cd0 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	699b      	ldr	r3, [r3, #24]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d1c3      	bne.n	8001c58 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	699a      	ldr	r2, [r3, #24]
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	6a1b      	ldr	r3, [r3, #32]
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d811      	bhi.n	8001d00 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	f003 030f 	and.w	r3, r3, #15
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cf0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	43db      	mvns	r3, r3
 8001cf6:	6939      	ldr	r1, [r7, #16]
 8001cf8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8001d00:	2300      	movs	r3, #0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3720      	adds	r7, #32
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
	...

08001d0c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b086      	sub	sp, #24
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	333c      	adds	r3, #60	; 0x3c
 8001d24:	3304      	adds	r3, #4
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	015a      	lsls	r2, r3, #5
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	4413      	add	r3, r2
 8001d32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	4a19      	ldr	r2, [pc, #100]	; (8001da4 <PCD_EP_OutXfrComplete_int+0x98>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d124      	bne.n	8001d8c <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d00a      	beq.n	8001d62 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	015a      	lsls	r2, r3, #5
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	4413      	add	r3, r2
 8001d54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d58:	461a      	mov	r2, r3
 8001d5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d5e:	6093      	str	r3, [r2, #8]
 8001d60:	e01a      	b.n	8001d98 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	f003 0320 	and.w	r3, r3, #32
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d008      	beq.n	8001d7e <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	015a      	lsls	r2, r3, #5
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	4413      	add	r3, r2
 8001d74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d78:	461a      	mov	r2, r3
 8001d7a:	2320      	movs	r3, #32
 8001d7c:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	4619      	mov	r1, r3
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f005 f815 	bl	8006db4 <HAL_PCD_DataOutStageCallback>
 8001d8a:	e005      	b.n	8001d98 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	4619      	mov	r1, r3
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f005 f80e 	bl	8006db4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8001d98:	2300      	movs	r3, #0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3718      	adds	r7, #24
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	4f54310a 	.word	0x4f54310a

08001da8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b086      	sub	sp, #24
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	333c      	adds	r3, #60	; 0x3c
 8001dc0:	3304      	adds	r3, #4
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	015a      	lsls	r2, r3, #5
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	4413      	add	r3, r2
 8001dce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	4a0c      	ldr	r2, [pc, #48]	; (8001e0c <PCD_EP_OutSetupPacket_int+0x64>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d90e      	bls.n	8001dfc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d009      	beq.n	8001dfc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	015a      	lsls	r2, r3, #5
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	4413      	add	r3, r2
 8001df0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001df4:	461a      	mov	r2, r3
 8001df6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001dfa:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f004 ffc7 	bl	8006d90 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8001e02:	2300      	movs	r3, #0
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3718      	adds	r7, #24
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	4f54300a 	.word	0x4f54300a

08001e10 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b085      	sub	sp, #20
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	460b      	mov	r3, r1
 8001e1a:	70fb      	strb	r3, [r7, #3]
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e26:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8001e28:	78fb      	ldrb	r3, [r7, #3]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d107      	bne.n	8001e3e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8001e2e:	883b      	ldrh	r3, [r7, #0]
 8001e30:	0419      	lsls	r1, r3, #16
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	68ba      	ldr	r2, [r7, #8]
 8001e38:	430a      	orrs	r2, r1
 8001e3a:	629a      	str	r2, [r3, #40]	; 0x28
 8001e3c:	e028      	b.n	8001e90 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e44:	0c1b      	lsrs	r3, r3, #16
 8001e46:	68ba      	ldr	r2, [r7, #8]
 8001e48:	4413      	add	r3, r2
 8001e4a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	73fb      	strb	r3, [r7, #15]
 8001e50:	e00d      	b.n	8001e6e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	7bfb      	ldrb	r3, [r7, #15]
 8001e58:	3340      	adds	r3, #64	; 0x40
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	4413      	add	r3, r2
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	0c1b      	lsrs	r3, r3, #16
 8001e62:	68ba      	ldr	r2, [r7, #8]
 8001e64:	4413      	add	r3, r2
 8001e66:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8001e68:	7bfb      	ldrb	r3, [r7, #15]
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	73fb      	strb	r3, [r7, #15]
 8001e6e:	7bfa      	ldrb	r2, [r7, #15]
 8001e70:	78fb      	ldrb	r3, [r7, #3]
 8001e72:	3b01      	subs	r3, #1
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d3ec      	bcc.n	8001e52 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8001e78:	883b      	ldrh	r3, [r7, #0]
 8001e7a:	0418      	lsls	r0, r3, #16
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6819      	ldr	r1, [r3, #0]
 8001e80:	78fb      	ldrb	r3, [r7, #3]
 8001e82:	3b01      	subs	r3, #1
 8001e84:	68ba      	ldr	r2, [r7, #8]
 8001e86:	4302      	orrs	r2, r0
 8001e88:	3340      	adds	r3, #64	; 0x40
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	440b      	add	r3, r1
 8001e8e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8001e90:	2300      	movs	r3, #0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3714      	adds	r7, #20
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr

08001e9e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8001e9e:	b480      	push	{r7}
 8001ea0:	b083      	sub	sp, #12
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	6078      	str	r0, [r7, #4]
 8001ea6:	460b      	mov	r3, r1
 8001ea8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	887a      	ldrh	r2, [r7, #2]
 8001eb0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001eb2:	2300      	movs	r3, #0
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b085      	sub	sp, #20
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	699b      	ldr	r3, [r3, #24]
 8001ee2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ef2:	f043 0303 	orr.w	r3, r3, #3
 8001ef6:	68fa      	ldr	r2, [r7, #12]
 8001ef8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001efa:	2300      	movs	r3, #0
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3714      	adds	r7, #20
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr

08001f08 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f0c:	4b0d      	ldr	r3, [pc, #52]	; (8001f44 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001f14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f18:	d102      	bne.n	8001f20 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8001f1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f1e:	e00b      	b.n	8001f38 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001f20:	4b08      	ldr	r3, [pc, #32]	; (8001f44 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001f22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f2e:	d102      	bne.n	8001f36 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001f30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f34:	e000      	b.n	8001f38 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8001f36:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	40007000 	.word	0x40007000

08001f48 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b085      	sub	sp, #20
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d141      	bne.n	8001fda <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f56:	4b4b      	ldr	r3, [pc, #300]	; (8002084 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001f5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f62:	d131      	bne.n	8001fc8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f64:	4b47      	ldr	r3, [pc, #284]	; (8002084 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f6a:	4a46      	ldr	r2, [pc, #280]	; (8002084 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f70:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f74:	4b43      	ldr	r3, [pc, #268]	; (8002084 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001f7c:	4a41      	ldr	r2, [pc, #260]	; (8002084 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f82:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001f84:	4b40      	ldr	r3, [pc, #256]	; (8002088 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	2232      	movs	r2, #50	; 0x32
 8001f8a:	fb02 f303 	mul.w	r3, r2, r3
 8001f8e:	4a3f      	ldr	r2, [pc, #252]	; (800208c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001f90:	fba2 2303 	umull	r2, r3, r2, r3
 8001f94:	0c9b      	lsrs	r3, r3, #18
 8001f96:	3301      	adds	r3, #1
 8001f98:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f9a:	e002      	b.n	8001fa2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	3b01      	subs	r3, #1
 8001fa0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fa2:	4b38      	ldr	r3, [pc, #224]	; (8002084 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fa4:	695b      	ldr	r3, [r3, #20]
 8001fa6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001faa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fae:	d102      	bne.n	8001fb6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d1f2      	bne.n	8001f9c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001fb6:	4b33      	ldr	r3, [pc, #204]	; (8002084 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fb8:	695b      	ldr	r3, [r3, #20]
 8001fba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fc2:	d158      	bne.n	8002076 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	e057      	b.n	8002078 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001fc8:	4b2e      	ldr	r3, [pc, #184]	; (8002084 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001fce:	4a2d      	ldr	r2, [pc, #180]	; (8002084 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001fd4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001fd8:	e04d      	b.n	8002076 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fe0:	d141      	bne.n	8002066 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001fe2:	4b28      	ldr	r3, [pc, #160]	; (8002084 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001fea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fee:	d131      	bne.n	8002054 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ff0:	4b24      	ldr	r3, [pc, #144]	; (8002084 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ff2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ff6:	4a23      	ldr	r2, [pc, #140]	; (8002084 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ff8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ffc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002000:	4b20      	ldr	r3, [pc, #128]	; (8002084 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002008:	4a1e      	ldr	r2, [pc, #120]	; (8002084 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800200a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800200e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002010:	4b1d      	ldr	r3, [pc, #116]	; (8002088 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	2232      	movs	r2, #50	; 0x32
 8002016:	fb02 f303 	mul.w	r3, r2, r3
 800201a:	4a1c      	ldr	r2, [pc, #112]	; (800208c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800201c:	fba2 2303 	umull	r2, r3, r2, r3
 8002020:	0c9b      	lsrs	r3, r3, #18
 8002022:	3301      	adds	r3, #1
 8002024:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002026:	e002      	b.n	800202e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	3b01      	subs	r3, #1
 800202c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800202e:	4b15      	ldr	r3, [pc, #84]	; (8002084 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002030:	695b      	ldr	r3, [r3, #20]
 8002032:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002036:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800203a:	d102      	bne.n	8002042 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d1f2      	bne.n	8002028 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002042:	4b10      	ldr	r3, [pc, #64]	; (8002084 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002044:	695b      	ldr	r3, [r3, #20]
 8002046:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800204a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800204e:	d112      	bne.n	8002076 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002050:	2303      	movs	r3, #3
 8002052:	e011      	b.n	8002078 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002054:	4b0b      	ldr	r3, [pc, #44]	; (8002084 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002056:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800205a:	4a0a      	ldr	r2, [pc, #40]	; (8002084 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800205c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002060:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002064:	e007      	b.n	8002076 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002066:	4b07      	ldr	r3, [pc, #28]	; (8002084 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800206e:	4a05      	ldr	r2, [pc, #20]	; (8002084 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002070:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002074:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002076:	2300      	movs	r3, #0
}
 8002078:	4618      	mov	r0, r3
 800207a:	3714      	adds	r7, #20
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr
 8002084:	40007000 	.word	0x40007000
 8002088:	20000010 	.word	0x20000010
 800208c:	431bde83 	.word	0x431bde83

08002090 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002094:	4b05      	ldr	r3, [pc, #20]	; (80020ac <HAL_PWREx_EnableVddUSB+0x1c>)
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	4a04      	ldr	r2, [pc, #16]	; (80020ac <HAL_PWREx_EnableVddUSB+0x1c>)
 800209a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800209e:	6053      	str	r3, [r2, #4]
}
 80020a0:	bf00      	nop
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop
 80020ac:	40007000 	.word	0x40007000

080020b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b088      	sub	sp, #32
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d102      	bne.n	80020c4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	f000 bc08 	b.w	80028d4 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020c4:	4b96      	ldr	r3, [pc, #600]	; (8002320 <HAL_RCC_OscConfig+0x270>)
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	f003 030c 	and.w	r3, r3, #12
 80020cc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020ce:	4b94      	ldr	r3, [pc, #592]	; (8002320 <HAL_RCC_OscConfig+0x270>)
 80020d0:	68db      	ldr	r3, [r3, #12]
 80020d2:	f003 0303 	and.w	r3, r3, #3
 80020d6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0310 	and.w	r3, r3, #16
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	f000 80e4 	beq.w	80022ae <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80020e6:	69bb      	ldr	r3, [r7, #24]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d007      	beq.n	80020fc <HAL_RCC_OscConfig+0x4c>
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	2b0c      	cmp	r3, #12
 80020f0:	f040 808b 	bne.w	800220a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	f040 8087 	bne.w	800220a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80020fc:	4b88      	ldr	r3, [pc, #544]	; (8002320 <HAL_RCC_OscConfig+0x270>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0302 	and.w	r3, r3, #2
 8002104:	2b00      	cmp	r3, #0
 8002106:	d005      	beq.n	8002114 <HAL_RCC_OscConfig+0x64>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	699b      	ldr	r3, [r3, #24]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d101      	bne.n	8002114 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e3df      	b.n	80028d4 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6a1a      	ldr	r2, [r3, #32]
 8002118:	4b81      	ldr	r3, [pc, #516]	; (8002320 <HAL_RCC_OscConfig+0x270>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0308 	and.w	r3, r3, #8
 8002120:	2b00      	cmp	r3, #0
 8002122:	d004      	beq.n	800212e <HAL_RCC_OscConfig+0x7e>
 8002124:	4b7e      	ldr	r3, [pc, #504]	; (8002320 <HAL_RCC_OscConfig+0x270>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800212c:	e005      	b.n	800213a <HAL_RCC_OscConfig+0x8a>
 800212e:	4b7c      	ldr	r3, [pc, #496]	; (8002320 <HAL_RCC_OscConfig+0x270>)
 8002130:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002134:	091b      	lsrs	r3, r3, #4
 8002136:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800213a:	4293      	cmp	r3, r2
 800213c:	d223      	bcs.n	8002186 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6a1b      	ldr	r3, [r3, #32]
 8002142:	4618      	mov	r0, r3
 8002144:	f000 fda0 	bl	8002c88 <RCC_SetFlashLatencyFromMSIRange>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d001      	beq.n	8002152 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e3c0      	b.n	80028d4 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002152:	4b73      	ldr	r3, [pc, #460]	; (8002320 <HAL_RCC_OscConfig+0x270>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a72      	ldr	r2, [pc, #456]	; (8002320 <HAL_RCC_OscConfig+0x270>)
 8002158:	f043 0308 	orr.w	r3, r3, #8
 800215c:	6013      	str	r3, [r2, #0]
 800215e:	4b70      	ldr	r3, [pc, #448]	; (8002320 <HAL_RCC_OscConfig+0x270>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6a1b      	ldr	r3, [r3, #32]
 800216a:	496d      	ldr	r1, [pc, #436]	; (8002320 <HAL_RCC_OscConfig+0x270>)
 800216c:	4313      	orrs	r3, r2
 800216e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002170:	4b6b      	ldr	r3, [pc, #428]	; (8002320 <HAL_RCC_OscConfig+0x270>)
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	69db      	ldr	r3, [r3, #28]
 800217c:	021b      	lsls	r3, r3, #8
 800217e:	4968      	ldr	r1, [pc, #416]	; (8002320 <HAL_RCC_OscConfig+0x270>)
 8002180:	4313      	orrs	r3, r2
 8002182:	604b      	str	r3, [r1, #4]
 8002184:	e025      	b.n	80021d2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002186:	4b66      	ldr	r3, [pc, #408]	; (8002320 <HAL_RCC_OscConfig+0x270>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a65      	ldr	r2, [pc, #404]	; (8002320 <HAL_RCC_OscConfig+0x270>)
 800218c:	f043 0308 	orr.w	r3, r3, #8
 8002190:	6013      	str	r3, [r2, #0]
 8002192:	4b63      	ldr	r3, [pc, #396]	; (8002320 <HAL_RCC_OscConfig+0x270>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6a1b      	ldr	r3, [r3, #32]
 800219e:	4960      	ldr	r1, [pc, #384]	; (8002320 <HAL_RCC_OscConfig+0x270>)
 80021a0:	4313      	orrs	r3, r2
 80021a2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021a4:	4b5e      	ldr	r3, [pc, #376]	; (8002320 <HAL_RCC_OscConfig+0x270>)
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	69db      	ldr	r3, [r3, #28]
 80021b0:	021b      	lsls	r3, r3, #8
 80021b2:	495b      	ldr	r1, [pc, #364]	; (8002320 <HAL_RCC_OscConfig+0x270>)
 80021b4:	4313      	orrs	r3, r2
 80021b6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021b8:	69bb      	ldr	r3, [r7, #24]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d109      	bne.n	80021d2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6a1b      	ldr	r3, [r3, #32]
 80021c2:	4618      	mov	r0, r3
 80021c4:	f000 fd60 	bl	8002c88 <RCC_SetFlashLatencyFromMSIRange>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d001      	beq.n	80021d2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e380      	b.n	80028d4 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80021d2:	f000 fcc1 	bl	8002b58 <HAL_RCC_GetSysClockFreq>
 80021d6:	4602      	mov	r2, r0
 80021d8:	4b51      	ldr	r3, [pc, #324]	; (8002320 <HAL_RCC_OscConfig+0x270>)
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	091b      	lsrs	r3, r3, #4
 80021de:	f003 030f 	and.w	r3, r3, #15
 80021e2:	4950      	ldr	r1, [pc, #320]	; (8002324 <HAL_RCC_OscConfig+0x274>)
 80021e4:	5ccb      	ldrb	r3, [r1, r3]
 80021e6:	f003 031f 	and.w	r3, r3, #31
 80021ea:	fa22 f303 	lsr.w	r3, r2, r3
 80021ee:	4a4e      	ldr	r2, [pc, #312]	; (8002328 <HAL_RCC_OscConfig+0x278>)
 80021f0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80021f2:	4b4e      	ldr	r3, [pc, #312]	; (800232c <HAL_RCC_OscConfig+0x27c>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4618      	mov	r0, r3
 80021f8:	f7fe f970 	bl	80004dc <HAL_InitTick>
 80021fc:	4603      	mov	r3, r0
 80021fe:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002200:	7bfb      	ldrb	r3, [r7, #15]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d052      	beq.n	80022ac <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002206:	7bfb      	ldrb	r3, [r7, #15]
 8002208:	e364      	b.n	80028d4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	699b      	ldr	r3, [r3, #24]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d032      	beq.n	8002278 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002212:	4b43      	ldr	r3, [pc, #268]	; (8002320 <HAL_RCC_OscConfig+0x270>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a42      	ldr	r2, [pc, #264]	; (8002320 <HAL_RCC_OscConfig+0x270>)
 8002218:	f043 0301 	orr.w	r3, r3, #1
 800221c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800221e:	f7fe f9ad 	bl	800057c <HAL_GetTick>
 8002222:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002224:	e008      	b.n	8002238 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002226:	f7fe f9a9 	bl	800057c <HAL_GetTick>
 800222a:	4602      	mov	r2, r0
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	2b02      	cmp	r3, #2
 8002232:	d901      	bls.n	8002238 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002234:	2303      	movs	r3, #3
 8002236:	e34d      	b.n	80028d4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002238:	4b39      	ldr	r3, [pc, #228]	; (8002320 <HAL_RCC_OscConfig+0x270>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0302 	and.w	r3, r3, #2
 8002240:	2b00      	cmp	r3, #0
 8002242:	d0f0      	beq.n	8002226 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002244:	4b36      	ldr	r3, [pc, #216]	; (8002320 <HAL_RCC_OscConfig+0x270>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a35      	ldr	r2, [pc, #212]	; (8002320 <HAL_RCC_OscConfig+0x270>)
 800224a:	f043 0308 	orr.w	r3, r3, #8
 800224e:	6013      	str	r3, [r2, #0]
 8002250:	4b33      	ldr	r3, [pc, #204]	; (8002320 <HAL_RCC_OscConfig+0x270>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6a1b      	ldr	r3, [r3, #32]
 800225c:	4930      	ldr	r1, [pc, #192]	; (8002320 <HAL_RCC_OscConfig+0x270>)
 800225e:	4313      	orrs	r3, r2
 8002260:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002262:	4b2f      	ldr	r3, [pc, #188]	; (8002320 <HAL_RCC_OscConfig+0x270>)
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	69db      	ldr	r3, [r3, #28]
 800226e:	021b      	lsls	r3, r3, #8
 8002270:	492b      	ldr	r1, [pc, #172]	; (8002320 <HAL_RCC_OscConfig+0x270>)
 8002272:	4313      	orrs	r3, r2
 8002274:	604b      	str	r3, [r1, #4]
 8002276:	e01a      	b.n	80022ae <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002278:	4b29      	ldr	r3, [pc, #164]	; (8002320 <HAL_RCC_OscConfig+0x270>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a28      	ldr	r2, [pc, #160]	; (8002320 <HAL_RCC_OscConfig+0x270>)
 800227e:	f023 0301 	bic.w	r3, r3, #1
 8002282:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002284:	f7fe f97a 	bl	800057c <HAL_GetTick>
 8002288:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800228a:	e008      	b.n	800229e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800228c:	f7fe f976 	bl	800057c <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	2b02      	cmp	r3, #2
 8002298:	d901      	bls.n	800229e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	e31a      	b.n	80028d4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800229e:	4b20      	ldr	r3, [pc, #128]	; (8002320 <HAL_RCC_OscConfig+0x270>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0302 	and.w	r3, r3, #2
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d1f0      	bne.n	800228c <HAL_RCC_OscConfig+0x1dc>
 80022aa:	e000      	b.n	80022ae <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80022ac:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0301 	and.w	r3, r3, #1
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d073      	beq.n	80023a2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80022ba:	69bb      	ldr	r3, [r7, #24]
 80022bc:	2b08      	cmp	r3, #8
 80022be:	d005      	beq.n	80022cc <HAL_RCC_OscConfig+0x21c>
 80022c0:	69bb      	ldr	r3, [r7, #24]
 80022c2:	2b0c      	cmp	r3, #12
 80022c4:	d10e      	bne.n	80022e4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	2b03      	cmp	r3, #3
 80022ca:	d10b      	bne.n	80022e4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022cc:	4b14      	ldr	r3, [pc, #80]	; (8002320 <HAL_RCC_OscConfig+0x270>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d063      	beq.n	80023a0 <HAL_RCC_OscConfig+0x2f0>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d15f      	bne.n	80023a0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e2f7      	b.n	80028d4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022ec:	d106      	bne.n	80022fc <HAL_RCC_OscConfig+0x24c>
 80022ee:	4b0c      	ldr	r3, [pc, #48]	; (8002320 <HAL_RCC_OscConfig+0x270>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a0b      	ldr	r2, [pc, #44]	; (8002320 <HAL_RCC_OscConfig+0x270>)
 80022f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022f8:	6013      	str	r3, [r2, #0]
 80022fa:	e025      	b.n	8002348 <HAL_RCC_OscConfig+0x298>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002304:	d114      	bne.n	8002330 <HAL_RCC_OscConfig+0x280>
 8002306:	4b06      	ldr	r3, [pc, #24]	; (8002320 <HAL_RCC_OscConfig+0x270>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a05      	ldr	r2, [pc, #20]	; (8002320 <HAL_RCC_OscConfig+0x270>)
 800230c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002310:	6013      	str	r3, [r2, #0]
 8002312:	4b03      	ldr	r3, [pc, #12]	; (8002320 <HAL_RCC_OscConfig+0x270>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a02      	ldr	r2, [pc, #8]	; (8002320 <HAL_RCC_OscConfig+0x270>)
 8002318:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800231c:	6013      	str	r3, [r2, #0]
 800231e:	e013      	b.n	8002348 <HAL_RCC_OscConfig+0x298>
 8002320:	40021000 	.word	0x40021000
 8002324:	080075c4 	.word	0x080075c4
 8002328:	20000010 	.word	0x20000010
 800232c:	20000014 	.word	0x20000014
 8002330:	4ba0      	ldr	r3, [pc, #640]	; (80025b4 <HAL_RCC_OscConfig+0x504>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a9f      	ldr	r2, [pc, #636]	; (80025b4 <HAL_RCC_OscConfig+0x504>)
 8002336:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800233a:	6013      	str	r3, [r2, #0]
 800233c:	4b9d      	ldr	r3, [pc, #628]	; (80025b4 <HAL_RCC_OscConfig+0x504>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a9c      	ldr	r2, [pc, #624]	; (80025b4 <HAL_RCC_OscConfig+0x504>)
 8002342:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002346:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d013      	beq.n	8002378 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002350:	f7fe f914 	bl	800057c <HAL_GetTick>
 8002354:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002356:	e008      	b.n	800236a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002358:	f7fe f910 	bl	800057c <HAL_GetTick>
 800235c:	4602      	mov	r2, r0
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	2b64      	cmp	r3, #100	; 0x64
 8002364:	d901      	bls.n	800236a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e2b4      	b.n	80028d4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800236a:	4b92      	ldr	r3, [pc, #584]	; (80025b4 <HAL_RCC_OscConfig+0x504>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d0f0      	beq.n	8002358 <HAL_RCC_OscConfig+0x2a8>
 8002376:	e014      	b.n	80023a2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002378:	f7fe f900 	bl	800057c <HAL_GetTick>
 800237c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800237e:	e008      	b.n	8002392 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002380:	f7fe f8fc 	bl	800057c <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	2b64      	cmp	r3, #100	; 0x64
 800238c:	d901      	bls.n	8002392 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e2a0      	b.n	80028d4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002392:	4b88      	ldr	r3, [pc, #544]	; (80025b4 <HAL_RCC_OscConfig+0x504>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d1f0      	bne.n	8002380 <HAL_RCC_OscConfig+0x2d0>
 800239e:	e000      	b.n	80023a2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0302 	and.w	r3, r3, #2
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d060      	beq.n	8002470 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80023ae:	69bb      	ldr	r3, [r7, #24]
 80023b0:	2b04      	cmp	r3, #4
 80023b2:	d005      	beq.n	80023c0 <HAL_RCC_OscConfig+0x310>
 80023b4:	69bb      	ldr	r3, [r7, #24]
 80023b6:	2b0c      	cmp	r3, #12
 80023b8:	d119      	bne.n	80023ee <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d116      	bne.n	80023ee <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023c0:	4b7c      	ldr	r3, [pc, #496]	; (80025b4 <HAL_RCC_OscConfig+0x504>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d005      	beq.n	80023d8 <HAL_RCC_OscConfig+0x328>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d101      	bne.n	80023d8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e27d      	b.n	80028d4 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023d8:	4b76      	ldr	r3, [pc, #472]	; (80025b4 <HAL_RCC_OscConfig+0x504>)
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	691b      	ldr	r3, [r3, #16]
 80023e4:	061b      	lsls	r3, r3, #24
 80023e6:	4973      	ldr	r1, [pc, #460]	; (80025b4 <HAL_RCC_OscConfig+0x504>)
 80023e8:	4313      	orrs	r3, r2
 80023ea:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023ec:	e040      	b.n	8002470 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d023      	beq.n	800243e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023f6:	4b6f      	ldr	r3, [pc, #444]	; (80025b4 <HAL_RCC_OscConfig+0x504>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a6e      	ldr	r2, [pc, #440]	; (80025b4 <HAL_RCC_OscConfig+0x504>)
 80023fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002400:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002402:	f7fe f8bb 	bl	800057c <HAL_GetTick>
 8002406:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002408:	e008      	b.n	800241c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800240a:	f7fe f8b7 	bl	800057c <HAL_GetTick>
 800240e:	4602      	mov	r2, r0
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	1ad3      	subs	r3, r2, r3
 8002414:	2b02      	cmp	r3, #2
 8002416:	d901      	bls.n	800241c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002418:	2303      	movs	r3, #3
 800241a:	e25b      	b.n	80028d4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800241c:	4b65      	ldr	r3, [pc, #404]	; (80025b4 <HAL_RCC_OscConfig+0x504>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002424:	2b00      	cmp	r3, #0
 8002426:	d0f0      	beq.n	800240a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002428:	4b62      	ldr	r3, [pc, #392]	; (80025b4 <HAL_RCC_OscConfig+0x504>)
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	691b      	ldr	r3, [r3, #16]
 8002434:	061b      	lsls	r3, r3, #24
 8002436:	495f      	ldr	r1, [pc, #380]	; (80025b4 <HAL_RCC_OscConfig+0x504>)
 8002438:	4313      	orrs	r3, r2
 800243a:	604b      	str	r3, [r1, #4]
 800243c:	e018      	b.n	8002470 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800243e:	4b5d      	ldr	r3, [pc, #372]	; (80025b4 <HAL_RCC_OscConfig+0x504>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a5c      	ldr	r2, [pc, #368]	; (80025b4 <HAL_RCC_OscConfig+0x504>)
 8002444:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002448:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800244a:	f7fe f897 	bl	800057c <HAL_GetTick>
 800244e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002450:	e008      	b.n	8002464 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002452:	f7fe f893 	bl	800057c <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	2b02      	cmp	r3, #2
 800245e:	d901      	bls.n	8002464 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	e237      	b.n	80028d4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002464:	4b53      	ldr	r3, [pc, #332]	; (80025b4 <HAL_RCC_OscConfig+0x504>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800246c:	2b00      	cmp	r3, #0
 800246e:	d1f0      	bne.n	8002452 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0308 	and.w	r3, r3, #8
 8002478:	2b00      	cmp	r3, #0
 800247a:	d03c      	beq.n	80024f6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	695b      	ldr	r3, [r3, #20]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d01c      	beq.n	80024be <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002484:	4b4b      	ldr	r3, [pc, #300]	; (80025b4 <HAL_RCC_OscConfig+0x504>)
 8002486:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800248a:	4a4a      	ldr	r2, [pc, #296]	; (80025b4 <HAL_RCC_OscConfig+0x504>)
 800248c:	f043 0301 	orr.w	r3, r3, #1
 8002490:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002494:	f7fe f872 	bl	800057c <HAL_GetTick>
 8002498:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800249a:	e008      	b.n	80024ae <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800249c:	f7fe f86e 	bl	800057c <HAL_GetTick>
 80024a0:	4602      	mov	r2, r0
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d901      	bls.n	80024ae <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80024aa:	2303      	movs	r3, #3
 80024ac:	e212      	b.n	80028d4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024ae:	4b41      	ldr	r3, [pc, #260]	; (80025b4 <HAL_RCC_OscConfig+0x504>)
 80024b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024b4:	f003 0302 	and.w	r3, r3, #2
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d0ef      	beq.n	800249c <HAL_RCC_OscConfig+0x3ec>
 80024bc:	e01b      	b.n	80024f6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024be:	4b3d      	ldr	r3, [pc, #244]	; (80025b4 <HAL_RCC_OscConfig+0x504>)
 80024c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024c4:	4a3b      	ldr	r2, [pc, #236]	; (80025b4 <HAL_RCC_OscConfig+0x504>)
 80024c6:	f023 0301 	bic.w	r3, r3, #1
 80024ca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024ce:	f7fe f855 	bl	800057c <HAL_GetTick>
 80024d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024d4:	e008      	b.n	80024e8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024d6:	f7fe f851 	bl	800057c <HAL_GetTick>
 80024da:	4602      	mov	r2, r0
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	d901      	bls.n	80024e8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80024e4:	2303      	movs	r3, #3
 80024e6:	e1f5      	b.n	80028d4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024e8:	4b32      	ldr	r3, [pc, #200]	; (80025b4 <HAL_RCC_OscConfig+0x504>)
 80024ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024ee:	f003 0302 	and.w	r3, r3, #2
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d1ef      	bne.n	80024d6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0304 	and.w	r3, r3, #4
 80024fe:	2b00      	cmp	r3, #0
 8002500:	f000 80a6 	beq.w	8002650 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002504:	2300      	movs	r3, #0
 8002506:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002508:	4b2a      	ldr	r3, [pc, #168]	; (80025b4 <HAL_RCC_OscConfig+0x504>)
 800250a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800250c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002510:	2b00      	cmp	r3, #0
 8002512:	d10d      	bne.n	8002530 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002514:	4b27      	ldr	r3, [pc, #156]	; (80025b4 <HAL_RCC_OscConfig+0x504>)
 8002516:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002518:	4a26      	ldr	r2, [pc, #152]	; (80025b4 <HAL_RCC_OscConfig+0x504>)
 800251a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800251e:	6593      	str	r3, [r2, #88]	; 0x58
 8002520:	4b24      	ldr	r3, [pc, #144]	; (80025b4 <HAL_RCC_OscConfig+0x504>)
 8002522:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002524:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002528:	60bb      	str	r3, [r7, #8]
 800252a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800252c:	2301      	movs	r3, #1
 800252e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002530:	4b21      	ldr	r3, [pc, #132]	; (80025b8 <HAL_RCC_OscConfig+0x508>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002538:	2b00      	cmp	r3, #0
 800253a:	d118      	bne.n	800256e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800253c:	4b1e      	ldr	r3, [pc, #120]	; (80025b8 <HAL_RCC_OscConfig+0x508>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a1d      	ldr	r2, [pc, #116]	; (80025b8 <HAL_RCC_OscConfig+0x508>)
 8002542:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002546:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002548:	f7fe f818 	bl	800057c <HAL_GetTick>
 800254c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800254e:	e008      	b.n	8002562 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002550:	f7fe f814 	bl	800057c <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	2b02      	cmp	r3, #2
 800255c:	d901      	bls.n	8002562 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	e1b8      	b.n	80028d4 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002562:	4b15      	ldr	r3, [pc, #84]	; (80025b8 <HAL_RCC_OscConfig+0x508>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800256a:	2b00      	cmp	r3, #0
 800256c:	d0f0      	beq.n	8002550 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	2b01      	cmp	r3, #1
 8002574:	d108      	bne.n	8002588 <HAL_RCC_OscConfig+0x4d8>
 8002576:	4b0f      	ldr	r3, [pc, #60]	; (80025b4 <HAL_RCC_OscConfig+0x504>)
 8002578:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800257c:	4a0d      	ldr	r2, [pc, #52]	; (80025b4 <HAL_RCC_OscConfig+0x504>)
 800257e:	f043 0301 	orr.w	r3, r3, #1
 8002582:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002586:	e029      	b.n	80025dc <HAL_RCC_OscConfig+0x52c>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	2b05      	cmp	r3, #5
 800258e:	d115      	bne.n	80025bc <HAL_RCC_OscConfig+0x50c>
 8002590:	4b08      	ldr	r3, [pc, #32]	; (80025b4 <HAL_RCC_OscConfig+0x504>)
 8002592:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002596:	4a07      	ldr	r2, [pc, #28]	; (80025b4 <HAL_RCC_OscConfig+0x504>)
 8002598:	f043 0304 	orr.w	r3, r3, #4
 800259c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80025a0:	4b04      	ldr	r3, [pc, #16]	; (80025b4 <HAL_RCC_OscConfig+0x504>)
 80025a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025a6:	4a03      	ldr	r2, [pc, #12]	; (80025b4 <HAL_RCC_OscConfig+0x504>)
 80025a8:	f043 0301 	orr.w	r3, r3, #1
 80025ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80025b0:	e014      	b.n	80025dc <HAL_RCC_OscConfig+0x52c>
 80025b2:	bf00      	nop
 80025b4:	40021000 	.word	0x40021000
 80025b8:	40007000 	.word	0x40007000
 80025bc:	4b9d      	ldr	r3, [pc, #628]	; (8002834 <HAL_RCC_OscConfig+0x784>)
 80025be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025c2:	4a9c      	ldr	r2, [pc, #624]	; (8002834 <HAL_RCC_OscConfig+0x784>)
 80025c4:	f023 0301 	bic.w	r3, r3, #1
 80025c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80025cc:	4b99      	ldr	r3, [pc, #612]	; (8002834 <HAL_RCC_OscConfig+0x784>)
 80025ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025d2:	4a98      	ldr	r2, [pc, #608]	; (8002834 <HAL_RCC_OscConfig+0x784>)
 80025d4:	f023 0304 	bic.w	r3, r3, #4
 80025d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d016      	beq.n	8002612 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025e4:	f7fd ffca 	bl	800057c <HAL_GetTick>
 80025e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025ea:	e00a      	b.n	8002602 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025ec:	f7fd ffc6 	bl	800057c <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d901      	bls.n	8002602 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e168      	b.n	80028d4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002602:	4b8c      	ldr	r3, [pc, #560]	; (8002834 <HAL_RCC_OscConfig+0x784>)
 8002604:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002608:	f003 0302 	and.w	r3, r3, #2
 800260c:	2b00      	cmp	r3, #0
 800260e:	d0ed      	beq.n	80025ec <HAL_RCC_OscConfig+0x53c>
 8002610:	e015      	b.n	800263e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002612:	f7fd ffb3 	bl	800057c <HAL_GetTick>
 8002616:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002618:	e00a      	b.n	8002630 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800261a:	f7fd ffaf 	bl	800057c <HAL_GetTick>
 800261e:	4602      	mov	r2, r0
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	f241 3288 	movw	r2, #5000	; 0x1388
 8002628:	4293      	cmp	r3, r2
 800262a:	d901      	bls.n	8002630 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800262c:	2303      	movs	r3, #3
 800262e:	e151      	b.n	80028d4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002630:	4b80      	ldr	r3, [pc, #512]	; (8002834 <HAL_RCC_OscConfig+0x784>)
 8002632:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002636:	f003 0302 	and.w	r3, r3, #2
 800263a:	2b00      	cmp	r3, #0
 800263c:	d1ed      	bne.n	800261a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800263e:	7ffb      	ldrb	r3, [r7, #31]
 8002640:	2b01      	cmp	r3, #1
 8002642:	d105      	bne.n	8002650 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002644:	4b7b      	ldr	r3, [pc, #492]	; (8002834 <HAL_RCC_OscConfig+0x784>)
 8002646:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002648:	4a7a      	ldr	r2, [pc, #488]	; (8002834 <HAL_RCC_OscConfig+0x784>)
 800264a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800264e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0320 	and.w	r3, r3, #32
 8002658:	2b00      	cmp	r3, #0
 800265a:	d03c      	beq.n	80026d6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002660:	2b00      	cmp	r3, #0
 8002662:	d01c      	beq.n	800269e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002664:	4b73      	ldr	r3, [pc, #460]	; (8002834 <HAL_RCC_OscConfig+0x784>)
 8002666:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800266a:	4a72      	ldr	r2, [pc, #456]	; (8002834 <HAL_RCC_OscConfig+0x784>)
 800266c:	f043 0301 	orr.w	r3, r3, #1
 8002670:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002674:	f7fd ff82 	bl	800057c <HAL_GetTick>
 8002678:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800267a:	e008      	b.n	800268e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800267c:	f7fd ff7e 	bl	800057c <HAL_GetTick>
 8002680:	4602      	mov	r2, r0
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	2b02      	cmp	r3, #2
 8002688:	d901      	bls.n	800268e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800268a:	2303      	movs	r3, #3
 800268c:	e122      	b.n	80028d4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800268e:	4b69      	ldr	r3, [pc, #420]	; (8002834 <HAL_RCC_OscConfig+0x784>)
 8002690:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002694:	f003 0302 	and.w	r3, r3, #2
 8002698:	2b00      	cmp	r3, #0
 800269a:	d0ef      	beq.n	800267c <HAL_RCC_OscConfig+0x5cc>
 800269c:	e01b      	b.n	80026d6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800269e:	4b65      	ldr	r3, [pc, #404]	; (8002834 <HAL_RCC_OscConfig+0x784>)
 80026a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80026a4:	4a63      	ldr	r2, [pc, #396]	; (8002834 <HAL_RCC_OscConfig+0x784>)
 80026a6:	f023 0301 	bic.w	r3, r3, #1
 80026aa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ae:	f7fd ff65 	bl	800057c <HAL_GetTick>
 80026b2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80026b4:	e008      	b.n	80026c8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80026b6:	f7fd ff61 	bl	800057c <HAL_GetTick>
 80026ba:	4602      	mov	r2, r0
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	2b02      	cmp	r3, #2
 80026c2:	d901      	bls.n	80026c8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80026c4:	2303      	movs	r3, #3
 80026c6:	e105      	b.n	80028d4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80026c8:	4b5a      	ldr	r3, [pc, #360]	; (8002834 <HAL_RCC_OscConfig+0x784>)
 80026ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80026ce:	f003 0302 	and.w	r3, r3, #2
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d1ef      	bne.n	80026b6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026da:	2b00      	cmp	r3, #0
 80026dc:	f000 80f9 	beq.w	80028d2 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e4:	2b02      	cmp	r3, #2
 80026e6:	f040 80cf 	bne.w	8002888 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80026ea:	4b52      	ldr	r3, [pc, #328]	; (8002834 <HAL_RCC_OscConfig+0x784>)
 80026ec:	68db      	ldr	r3, [r3, #12]
 80026ee:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	f003 0203 	and.w	r2, r3, #3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d12c      	bne.n	8002758 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002708:	3b01      	subs	r3, #1
 800270a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800270c:	429a      	cmp	r2, r3
 800270e:	d123      	bne.n	8002758 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800271a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800271c:	429a      	cmp	r2, r3
 800271e:	d11b      	bne.n	8002758 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800272a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800272c:	429a      	cmp	r2, r3
 800272e:	d113      	bne.n	8002758 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800273a:	085b      	lsrs	r3, r3, #1
 800273c:	3b01      	subs	r3, #1
 800273e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002740:	429a      	cmp	r2, r3
 8002742:	d109      	bne.n	8002758 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274e:	085b      	lsrs	r3, r3, #1
 8002750:	3b01      	subs	r3, #1
 8002752:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002754:	429a      	cmp	r2, r3
 8002756:	d071      	beq.n	800283c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002758:	69bb      	ldr	r3, [r7, #24]
 800275a:	2b0c      	cmp	r3, #12
 800275c:	d068      	beq.n	8002830 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800275e:	4b35      	ldr	r3, [pc, #212]	; (8002834 <HAL_RCC_OscConfig+0x784>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d105      	bne.n	8002776 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800276a:	4b32      	ldr	r3, [pc, #200]	; (8002834 <HAL_RCC_OscConfig+0x784>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d001      	beq.n	800277a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e0ac      	b.n	80028d4 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800277a:	4b2e      	ldr	r3, [pc, #184]	; (8002834 <HAL_RCC_OscConfig+0x784>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a2d      	ldr	r2, [pc, #180]	; (8002834 <HAL_RCC_OscConfig+0x784>)
 8002780:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002784:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002786:	f7fd fef9 	bl	800057c <HAL_GetTick>
 800278a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800278c:	e008      	b.n	80027a0 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800278e:	f7fd fef5 	bl	800057c <HAL_GetTick>
 8002792:	4602      	mov	r2, r0
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	2b02      	cmp	r3, #2
 800279a:	d901      	bls.n	80027a0 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800279c:	2303      	movs	r3, #3
 800279e:	e099      	b.n	80028d4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027a0:	4b24      	ldr	r3, [pc, #144]	; (8002834 <HAL_RCC_OscConfig+0x784>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d1f0      	bne.n	800278e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027ac:	4b21      	ldr	r3, [pc, #132]	; (8002834 <HAL_RCC_OscConfig+0x784>)
 80027ae:	68da      	ldr	r2, [r3, #12]
 80027b0:	4b21      	ldr	r3, [pc, #132]	; (8002838 <HAL_RCC_OscConfig+0x788>)
 80027b2:	4013      	ands	r3, r2
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80027b8:	687a      	ldr	r2, [r7, #4]
 80027ba:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80027bc:	3a01      	subs	r2, #1
 80027be:	0112      	lsls	r2, r2, #4
 80027c0:	4311      	orrs	r1, r2
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80027c6:	0212      	lsls	r2, r2, #8
 80027c8:	4311      	orrs	r1, r2
 80027ca:	687a      	ldr	r2, [r7, #4]
 80027cc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80027ce:	0852      	lsrs	r2, r2, #1
 80027d0:	3a01      	subs	r2, #1
 80027d2:	0552      	lsls	r2, r2, #21
 80027d4:	4311      	orrs	r1, r2
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80027da:	0852      	lsrs	r2, r2, #1
 80027dc:	3a01      	subs	r2, #1
 80027de:	0652      	lsls	r2, r2, #25
 80027e0:	4311      	orrs	r1, r2
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80027e6:	06d2      	lsls	r2, r2, #27
 80027e8:	430a      	orrs	r2, r1
 80027ea:	4912      	ldr	r1, [pc, #72]	; (8002834 <HAL_RCC_OscConfig+0x784>)
 80027ec:	4313      	orrs	r3, r2
 80027ee:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80027f0:	4b10      	ldr	r3, [pc, #64]	; (8002834 <HAL_RCC_OscConfig+0x784>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a0f      	ldr	r2, [pc, #60]	; (8002834 <HAL_RCC_OscConfig+0x784>)
 80027f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027fa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80027fc:	4b0d      	ldr	r3, [pc, #52]	; (8002834 <HAL_RCC_OscConfig+0x784>)
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	4a0c      	ldr	r2, [pc, #48]	; (8002834 <HAL_RCC_OscConfig+0x784>)
 8002802:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002806:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002808:	f7fd feb8 	bl	800057c <HAL_GetTick>
 800280c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800280e:	e008      	b.n	8002822 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002810:	f7fd feb4 	bl	800057c <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	2b02      	cmp	r3, #2
 800281c:	d901      	bls.n	8002822 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	e058      	b.n	80028d4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002822:	4b04      	ldr	r3, [pc, #16]	; (8002834 <HAL_RCC_OscConfig+0x784>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d0f0      	beq.n	8002810 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800282e:	e050      	b.n	80028d2 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	e04f      	b.n	80028d4 <HAL_RCC_OscConfig+0x824>
 8002834:	40021000 	.word	0x40021000
 8002838:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800283c:	4b27      	ldr	r3, [pc, #156]	; (80028dc <HAL_RCC_OscConfig+0x82c>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d144      	bne.n	80028d2 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002848:	4b24      	ldr	r3, [pc, #144]	; (80028dc <HAL_RCC_OscConfig+0x82c>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a23      	ldr	r2, [pc, #140]	; (80028dc <HAL_RCC_OscConfig+0x82c>)
 800284e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002852:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002854:	4b21      	ldr	r3, [pc, #132]	; (80028dc <HAL_RCC_OscConfig+0x82c>)
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	4a20      	ldr	r2, [pc, #128]	; (80028dc <HAL_RCC_OscConfig+0x82c>)
 800285a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800285e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002860:	f7fd fe8c 	bl	800057c <HAL_GetTick>
 8002864:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002866:	e008      	b.n	800287a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002868:	f7fd fe88 	bl	800057c <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	2b02      	cmp	r3, #2
 8002874:	d901      	bls.n	800287a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e02c      	b.n	80028d4 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800287a:	4b18      	ldr	r3, [pc, #96]	; (80028dc <HAL_RCC_OscConfig+0x82c>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d0f0      	beq.n	8002868 <HAL_RCC_OscConfig+0x7b8>
 8002886:	e024      	b.n	80028d2 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	2b0c      	cmp	r3, #12
 800288c:	d01f      	beq.n	80028ce <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800288e:	4b13      	ldr	r3, [pc, #76]	; (80028dc <HAL_RCC_OscConfig+0x82c>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a12      	ldr	r2, [pc, #72]	; (80028dc <HAL_RCC_OscConfig+0x82c>)
 8002894:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002898:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800289a:	f7fd fe6f 	bl	800057c <HAL_GetTick>
 800289e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028a0:	e008      	b.n	80028b4 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028a2:	f7fd fe6b 	bl	800057c <HAL_GetTick>
 80028a6:	4602      	mov	r2, r0
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	2b02      	cmp	r3, #2
 80028ae:	d901      	bls.n	80028b4 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80028b0:	2303      	movs	r3, #3
 80028b2:	e00f      	b.n	80028d4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028b4:	4b09      	ldr	r3, [pc, #36]	; (80028dc <HAL_RCC_OscConfig+0x82c>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d1f0      	bne.n	80028a2 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80028c0:	4b06      	ldr	r3, [pc, #24]	; (80028dc <HAL_RCC_OscConfig+0x82c>)
 80028c2:	68da      	ldr	r2, [r3, #12]
 80028c4:	4905      	ldr	r1, [pc, #20]	; (80028dc <HAL_RCC_OscConfig+0x82c>)
 80028c6:	4b06      	ldr	r3, [pc, #24]	; (80028e0 <HAL_RCC_OscConfig+0x830>)
 80028c8:	4013      	ands	r3, r2
 80028ca:	60cb      	str	r3, [r1, #12]
 80028cc:	e001      	b.n	80028d2 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e000      	b.n	80028d4 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80028d2:	2300      	movs	r3, #0
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3720      	adds	r7, #32
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	40021000 	.word	0x40021000
 80028e0:	feeefffc 	.word	0xfeeefffc

080028e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b086      	sub	sp, #24
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80028ee:	2300      	movs	r3, #0
 80028f0:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d101      	bne.n	80028fc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e11d      	b.n	8002b38 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028fc:	4b90      	ldr	r3, [pc, #576]	; (8002b40 <HAL_RCC_ClockConfig+0x25c>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 030f 	and.w	r3, r3, #15
 8002904:	683a      	ldr	r2, [r7, #0]
 8002906:	429a      	cmp	r2, r3
 8002908:	d910      	bls.n	800292c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800290a:	4b8d      	ldr	r3, [pc, #564]	; (8002b40 <HAL_RCC_ClockConfig+0x25c>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f023 020f 	bic.w	r2, r3, #15
 8002912:	498b      	ldr	r1, [pc, #556]	; (8002b40 <HAL_RCC_ClockConfig+0x25c>)
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	4313      	orrs	r3, r2
 8002918:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800291a:	4b89      	ldr	r3, [pc, #548]	; (8002b40 <HAL_RCC_ClockConfig+0x25c>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 030f 	and.w	r3, r3, #15
 8002922:	683a      	ldr	r2, [r7, #0]
 8002924:	429a      	cmp	r2, r3
 8002926:	d001      	beq.n	800292c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e105      	b.n	8002b38 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0302 	and.w	r3, r3, #2
 8002934:	2b00      	cmp	r3, #0
 8002936:	d010      	beq.n	800295a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	689a      	ldr	r2, [r3, #8]
 800293c:	4b81      	ldr	r3, [pc, #516]	; (8002b44 <HAL_RCC_ClockConfig+0x260>)
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002944:	429a      	cmp	r2, r3
 8002946:	d908      	bls.n	800295a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002948:	4b7e      	ldr	r3, [pc, #504]	; (8002b44 <HAL_RCC_ClockConfig+0x260>)
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	497b      	ldr	r1, [pc, #492]	; (8002b44 <HAL_RCC_ClockConfig+0x260>)
 8002956:	4313      	orrs	r3, r2
 8002958:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0301 	and.w	r3, r3, #1
 8002962:	2b00      	cmp	r3, #0
 8002964:	d079      	beq.n	8002a5a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	2b03      	cmp	r3, #3
 800296c:	d11e      	bne.n	80029ac <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800296e:	4b75      	ldr	r3, [pc, #468]	; (8002b44 <HAL_RCC_ClockConfig+0x260>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d101      	bne.n	800297e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e0dc      	b.n	8002b38 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800297e:	f000 f9dd 	bl	8002d3c <RCC_GetSysClockFreqFromPLLSource>
 8002982:	4603      	mov	r3, r0
 8002984:	4a70      	ldr	r2, [pc, #448]	; (8002b48 <HAL_RCC_ClockConfig+0x264>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d946      	bls.n	8002a18 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800298a:	4b6e      	ldr	r3, [pc, #440]	; (8002b44 <HAL_RCC_ClockConfig+0x260>)
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d140      	bne.n	8002a18 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002996:	4b6b      	ldr	r3, [pc, #428]	; (8002b44 <HAL_RCC_ClockConfig+0x260>)
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800299e:	4a69      	ldr	r2, [pc, #420]	; (8002b44 <HAL_RCC_ClockConfig+0x260>)
 80029a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029a4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80029a6:	2380      	movs	r3, #128	; 0x80
 80029a8:	617b      	str	r3, [r7, #20]
 80029aa:	e035      	b.n	8002a18 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	2b02      	cmp	r3, #2
 80029b2:	d107      	bne.n	80029c4 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029b4:	4b63      	ldr	r3, [pc, #396]	; (8002b44 <HAL_RCC_ClockConfig+0x260>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d115      	bne.n	80029ec <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e0b9      	b.n	8002b38 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d107      	bne.n	80029dc <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80029cc:	4b5d      	ldr	r3, [pc, #372]	; (8002b44 <HAL_RCC_ClockConfig+0x260>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0302 	and.w	r3, r3, #2
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d109      	bne.n	80029ec <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e0ad      	b.n	8002b38 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029dc:	4b59      	ldr	r3, [pc, #356]	; (8002b44 <HAL_RCC_ClockConfig+0x260>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d101      	bne.n	80029ec <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e0a5      	b.n	8002b38 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80029ec:	f000 f8b4 	bl	8002b58 <HAL_RCC_GetSysClockFreq>
 80029f0:	4603      	mov	r3, r0
 80029f2:	4a55      	ldr	r2, [pc, #340]	; (8002b48 <HAL_RCC_ClockConfig+0x264>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d90f      	bls.n	8002a18 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80029f8:	4b52      	ldr	r3, [pc, #328]	; (8002b44 <HAL_RCC_ClockConfig+0x260>)
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d109      	bne.n	8002a18 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002a04:	4b4f      	ldr	r3, [pc, #316]	; (8002b44 <HAL_RCC_ClockConfig+0x260>)
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a0c:	4a4d      	ldr	r2, [pc, #308]	; (8002b44 <HAL_RCC_ClockConfig+0x260>)
 8002a0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a12:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002a14:	2380      	movs	r3, #128	; 0x80
 8002a16:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002a18:	4b4a      	ldr	r3, [pc, #296]	; (8002b44 <HAL_RCC_ClockConfig+0x260>)
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	f023 0203 	bic.w	r2, r3, #3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	4947      	ldr	r1, [pc, #284]	; (8002b44 <HAL_RCC_ClockConfig+0x260>)
 8002a26:	4313      	orrs	r3, r2
 8002a28:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a2a:	f7fd fda7 	bl	800057c <HAL_GetTick>
 8002a2e:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a30:	e00a      	b.n	8002a48 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a32:	f7fd fda3 	bl	800057c <HAL_GetTick>
 8002a36:	4602      	mov	r2, r0
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d901      	bls.n	8002a48 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8002a44:	2303      	movs	r3, #3
 8002a46:	e077      	b.n	8002b38 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a48:	4b3e      	ldr	r3, [pc, #248]	; (8002b44 <HAL_RCC_ClockConfig+0x260>)
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	f003 020c 	and.w	r2, r3, #12
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d1eb      	bne.n	8002a32 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	2b80      	cmp	r3, #128	; 0x80
 8002a5e:	d105      	bne.n	8002a6c <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002a60:	4b38      	ldr	r3, [pc, #224]	; (8002b44 <HAL_RCC_ClockConfig+0x260>)
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	4a37      	ldr	r2, [pc, #220]	; (8002b44 <HAL_RCC_ClockConfig+0x260>)
 8002a66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a6a:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0302 	and.w	r3, r3, #2
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d010      	beq.n	8002a9a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	689a      	ldr	r2, [r3, #8]
 8002a7c:	4b31      	ldr	r3, [pc, #196]	; (8002b44 <HAL_RCC_ClockConfig+0x260>)
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d208      	bcs.n	8002a9a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a88:	4b2e      	ldr	r3, [pc, #184]	; (8002b44 <HAL_RCC_ClockConfig+0x260>)
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	492b      	ldr	r1, [pc, #172]	; (8002b44 <HAL_RCC_ClockConfig+0x260>)
 8002a96:	4313      	orrs	r3, r2
 8002a98:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a9a:	4b29      	ldr	r3, [pc, #164]	; (8002b40 <HAL_RCC_ClockConfig+0x25c>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 030f 	and.w	r3, r3, #15
 8002aa2:	683a      	ldr	r2, [r7, #0]
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d210      	bcs.n	8002aca <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aa8:	4b25      	ldr	r3, [pc, #148]	; (8002b40 <HAL_RCC_ClockConfig+0x25c>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f023 020f 	bic.w	r2, r3, #15
 8002ab0:	4923      	ldr	r1, [pc, #140]	; (8002b40 <HAL_RCC_ClockConfig+0x25c>)
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ab8:	4b21      	ldr	r3, [pc, #132]	; (8002b40 <HAL_RCC_ClockConfig+0x25c>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 030f 	and.w	r3, r3, #15
 8002ac0:	683a      	ldr	r2, [r7, #0]
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d001      	beq.n	8002aca <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e036      	b.n	8002b38 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0304 	and.w	r3, r3, #4
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d008      	beq.n	8002ae8 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ad6:	4b1b      	ldr	r3, [pc, #108]	; (8002b44 <HAL_RCC_ClockConfig+0x260>)
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	4918      	ldr	r1, [pc, #96]	; (8002b44 <HAL_RCC_ClockConfig+0x260>)
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 0308 	and.w	r3, r3, #8
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d009      	beq.n	8002b08 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002af4:	4b13      	ldr	r3, [pc, #76]	; (8002b44 <HAL_RCC_ClockConfig+0x260>)
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	691b      	ldr	r3, [r3, #16]
 8002b00:	00db      	lsls	r3, r3, #3
 8002b02:	4910      	ldr	r1, [pc, #64]	; (8002b44 <HAL_RCC_ClockConfig+0x260>)
 8002b04:	4313      	orrs	r3, r2
 8002b06:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b08:	f000 f826 	bl	8002b58 <HAL_RCC_GetSysClockFreq>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	4b0d      	ldr	r3, [pc, #52]	; (8002b44 <HAL_RCC_ClockConfig+0x260>)
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	091b      	lsrs	r3, r3, #4
 8002b14:	f003 030f 	and.w	r3, r3, #15
 8002b18:	490c      	ldr	r1, [pc, #48]	; (8002b4c <HAL_RCC_ClockConfig+0x268>)
 8002b1a:	5ccb      	ldrb	r3, [r1, r3]
 8002b1c:	f003 031f 	and.w	r3, r3, #31
 8002b20:	fa22 f303 	lsr.w	r3, r2, r3
 8002b24:	4a0a      	ldr	r2, [pc, #40]	; (8002b50 <HAL_RCC_ClockConfig+0x26c>)
 8002b26:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002b28:	4b0a      	ldr	r3, [pc, #40]	; (8002b54 <HAL_RCC_ClockConfig+0x270>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f7fd fcd5 	bl	80004dc <HAL_InitTick>
 8002b32:	4603      	mov	r3, r0
 8002b34:	73fb      	strb	r3, [r7, #15]

  return status;
 8002b36:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3718      	adds	r7, #24
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	40022000 	.word	0x40022000
 8002b44:	40021000 	.word	0x40021000
 8002b48:	04c4b400 	.word	0x04c4b400
 8002b4c:	080075c4 	.word	0x080075c4
 8002b50:	20000010 	.word	0x20000010
 8002b54:	20000014 	.word	0x20000014

08002b58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b089      	sub	sp, #36	; 0x24
 8002b5c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	61fb      	str	r3, [r7, #28]
 8002b62:	2300      	movs	r3, #0
 8002b64:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b66:	4b3e      	ldr	r3, [pc, #248]	; (8002c60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	f003 030c 	and.w	r3, r3, #12
 8002b6e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b70:	4b3b      	ldr	r3, [pc, #236]	; (8002c60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	f003 0303 	and.w	r3, r3, #3
 8002b78:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d005      	beq.n	8002b8c <HAL_RCC_GetSysClockFreq+0x34>
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	2b0c      	cmp	r3, #12
 8002b84:	d121      	bne.n	8002bca <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d11e      	bne.n	8002bca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002b8c:	4b34      	ldr	r3, [pc, #208]	; (8002c60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0308 	and.w	r3, r3, #8
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d107      	bne.n	8002ba8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002b98:	4b31      	ldr	r3, [pc, #196]	; (8002c60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b9e:	0a1b      	lsrs	r3, r3, #8
 8002ba0:	f003 030f 	and.w	r3, r3, #15
 8002ba4:	61fb      	str	r3, [r7, #28]
 8002ba6:	e005      	b.n	8002bb4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002ba8:	4b2d      	ldr	r3, [pc, #180]	; (8002c60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	091b      	lsrs	r3, r3, #4
 8002bae:	f003 030f 	and.w	r3, r3, #15
 8002bb2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002bb4:	4a2b      	ldr	r2, [pc, #172]	; (8002c64 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bbc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d10d      	bne.n	8002be0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002bc8:	e00a      	b.n	8002be0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	2b04      	cmp	r3, #4
 8002bce:	d102      	bne.n	8002bd6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002bd0:	4b25      	ldr	r3, [pc, #148]	; (8002c68 <HAL_RCC_GetSysClockFreq+0x110>)
 8002bd2:	61bb      	str	r3, [r7, #24]
 8002bd4:	e004      	b.n	8002be0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	2b08      	cmp	r3, #8
 8002bda:	d101      	bne.n	8002be0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002bdc:	4b23      	ldr	r3, [pc, #140]	; (8002c6c <HAL_RCC_GetSysClockFreq+0x114>)
 8002bde:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	2b0c      	cmp	r3, #12
 8002be4:	d134      	bne.n	8002c50 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002be6:	4b1e      	ldr	r3, [pc, #120]	; (8002c60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002be8:	68db      	ldr	r3, [r3, #12]
 8002bea:	f003 0303 	and.w	r3, r3, #3
 8002bee:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d003      	beq.n	8002bfe <HAL_RCC_GetSysClockFreq+0xa6>
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	2b03      	cmp	r3, #3
 8002bfa:	d003      	beq.n	8002c04 <HAL_RCC_GetSysClockFreq+0xac>
 8002bfc:	e005      	b.n	8002c0a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002bfe:	4b1a      	ldr	r3, [pc, #104]	; (8002c68 <HAL_RCC_GetSysClockFreq+0x110>)
 8002c00:	617b      	str	r3, [r7, #20]
      break;
 8002c02:	e005      	b.n	8002c10 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002c04:	4b19      	ldr	r3, [pc, #100]	; (8002c6c <HAL_RCC_GetSysClockFreq+0x114>)
 8002c06:	617b      	str	r3, [r7, #20]
      break;
 8002c08:	e002      	b.n	8002c10 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	617b      	str	r3, [r7, #20]
      break;
 8002c0e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c10:	4b13      	ldr	r3, [pc, #76]	; (8002c60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	091b      	lsrs	r3, r3, #4
 8002c16:	f003 030f 	and.w	r3, r3, #15
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002c1e:	4b10      	ldr	r3, [pc, #64]	; (8002c60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c20:	68db      	ldr	r3, [r3, #12]
 8002c22:	0a1b      	lsrs	r3, r3, #8
 8002c24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c28:	697a      	ldr	r2, [r7, #20]
 8002c2a:	fb03 f202 	mul.w	r2, r3, r2
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c34:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002c36:	4b0a      	ldr	r3, [pc, #40]	; (8002c60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c38:	68db      	ldr	r3, [r3, #12]
 8002c3a:	0e5b      	lsrs	r3, r3, #25
 8002c3c:	f003 0303 	and.w	r3, r3, #3
 8002c40:	3301      	adds	r3, #1
 8002c42:	005b      	lsls	r3, r3, #1
 8002c44:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002c46:	697a      	ldr	r2, [r7, #20]
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c4e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002c50:	69bb      	ldr	r3, [r7, #24]
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3724      	adds	r7, #36	; 0x24
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr
 8002c5e:	bf00      	nop
 8002c60:	40021000 	.word	0x40021000
 8002c64:	080075d4 	.word	0x080075d4
 8002c68:	00f42400 	.word	0x00f42400
 8002c6c:	007a1200 	.word	0x007a1200

08002c70 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c70:	b480      	push	{r7}
 8002c72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c74:	4b03      	ldr	r3, [pc, #12]	; (8002c84 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c76:	681b      	ldr	r3, [r3, #0]
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr
 8002c82:	bf00      	nop
 8002c84:	20000010 	.word	0x20000010

08002c88 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b086      	sub	sp, #24
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002c90:	2300      	movs	r3, #0
 8002c92:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002c94:	4b27      	ldr	r3, [pc, #156]	; (8002d34 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002c96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d003      	beq.n	8002ca8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002ca0:	f7ff f932 	bl	8001f08 <HAL_PWREx_GetVoltageRange>
 8002ca4:	6178      	str	r0, [r7, #20]
 8002ca6:	e014      	b.n	8002cd2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ca8:	4b22      	ldr	r3, [pc, #136]	; (8002d34 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002caa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cac:	4a21      	ldr	r2, [pc, #132]	; (8002d34 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002cae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cb2:	6593      	str	r3, [r2, #88]	; 0x58
 8002cb4:	4b1f      	ldr	r3, [pc, #124]	; (8002d34 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002cb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cbc:	60fb      	str	r3, [r7, #12]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002cc0:	f7ff f922 	bl	8001f08 <HAL_PWREx_GetVoltageRange>
 8002cc4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002cc6:	4b1b      	ldr	r3, [pc, #108]	; (8002d34 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002cc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cca:	4a1a      	ldr	r2, [pc, #104]	; (8002d34 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002ccc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cd0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cd8:	d10b      	bne.n	8002cf2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2b80      	cmp	r3, #128	; 0x80
 8002cde:	d913      	bls.n	8002d08 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2ba0      	cmp	r3, #160	; 0xa0
 8002ce4:	d902      	bls.n	8002cec <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002ce6:	2302      	movs	r3, #2
 8002ce8:	613b      	str	r3, [r7, #16]
 8002cea:	e00d      	b.n	8002d08 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002cec:	2301      	movs	r3, #1
 8002cee:	613b      	str	r3, [r7, #16]
 8002cf0:	e00a      	b.n	8002d08 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2b7f      	cmp	r3, #127	; 0x7f
 8002cf6:	d902      	bls.n	8002cfe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002cf8:	2302      	movs	r3, #2
 8002cfa:	613b      	str	r3, [r7, #16]
 8002cfc:	e004      	b.n	8002d08 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2b70      	cmp	r3, #112	; 0x70
 8002d02:	d101      	bne.n	8002d08 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d04:	2301      	movs	r3, #1
 8002d06:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002d08:	4b0b      	ldr	r3, [pc, #44]	; (8002d38 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f023 020f 	bic.w	r2, r3, #15
 8002d10:	4909      	ldr	r1, [pc, #36]	; (8002d38 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002d18:	4b07      	ldr	r3, [pc, #28]	; (8002d38 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 030f 	and.w	r3, r3, #15
 8002d20:	693a      	ldr	r2, [r7, #16]
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d001      	beq.n	8002d2a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e000      	b.n	8002d2c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002d2a:	2300      	movs	r3, #0
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3718      	adds	r7, #24
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	40021000 	.word	0x40021000
 8002d38:	40022000 	.word	0x40022000

08002d3c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b087      	sub	sp, #28
 8002d40:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002d42:	4b2d      	ldr	r3, [pc, #180]	; (8002df8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002d44:	68db      	ldr	r3, [r3, #12]
 8002d46:	f003 0303 	and.w	r3, r3, #3
 8002d4a:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2b03      	cmp	r3, #3
 8002d50:	d00b      	beq.n	8002d6a <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2b03      	cmp	r3, #3
 8002d56:	d825      	bhi.n	8002da4 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d008      	beq.n	8002d70 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	d11f      	bne.n	8002da4 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002d64:	4b25      	ldr	r3, [pc, #148]	; (8002dfc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002d66:	613b      	str	r3, [r7, #16]
    break;
 8002d68:	e01f      	b.n	8002daa <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8002d6a:	4b25      	ldr	r3, [pc, #148]	; (8002e00 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002d6c:	613b      	str	r3, [r7, #16]
    break;
 8002d6e:	e01c      	b.n	8002daa <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002d70:	4b21      	ldr	r3, [pc, #132]	; (8002df8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0308 	and.w	r3, r3, #8
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d107      	bne.n	8002d8c <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002d7c:	4b1e      	ldr	r3, [pc, #120]	; (8002df8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002d7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d82:	0a1b      	lsrs	r3, r3, #8
 8002d84:	f003 030f 	and.w	r3, r3, #15
 8002d88:	617b      	str	r3, [r7, #20]
 8002d8a:	e005      	b.n	8002d98 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002d8c:	4b1a      	ldr	r3, [pc, #104]	; (8002df8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	091b      	lsrs	r3, r3, #4
 8002d92:	f003 030f 	and.w	r3, r3, #15
 8002d96:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8002d98:	4a1a      	ldr	r2, [pc, #104]	; (8002e04 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002da0:	613b      	str	r3, [r7, #16]
    break;
 8002da2:	e002      	b.n	8002daa <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8002da4:	2300      	movs	r3, #0
 8002da6:	613b      	str	r3, [r7, #16]
    break;
 8002da8:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002daa:	4b13      	ldr	r3, [pc, #76]	; (8002df8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002dac:	68db      	ldr	r3, [r3, #12]
 8002dae:	091b      	lsrs	r3, r3, #4
 8002db0:	f003 030f 	and.w	r3, r3, #15
 8002db4:	3301      	adds	r3, #1
 8002db6:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002db8:	4b0f      	ldr	r3, [pc, #60]	; (8002df8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	0a1b      	lsrs	r3, r3, #8
 8002dbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002dc2:	693a      	ldr	r2, [r7, #16]
 8002dc4:	fb03 f202 	mul.w	r2, r3, r2
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dce:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002dd0:	4b09      	ldr	r3, [pc, #36]	; (8002df8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	0e5b      	lsrs	r3, r3, #25
 8002dd6:	f003 0303 	and.w	r3, r3, #3
 8002dda:	3301      	adds	r3, #1
 8002ddc:	005b      	lsls	r3, r3, #1
 8002dde:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002de0:	693a      	ldr	r2, [r7, #16]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002de8:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002dea:	683b      	ldr	r3, [r7, #0]
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	371c      	adds	r7, #28
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr
 8002df8:	40021000 	.word	0x40021000
 8002dfc:	00f42400 	.word	0x00f42400
 8002e00:	007a1200 	.word	0x007a1200
 8002e04:	080075d4 	.word	0x080075d4

08002e08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b086      	sub	sp, #24
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002e10:	2300      	movs	r3, #0
 8002e12:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002e14:	2300      	movs	r3, #0
 8002e16:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d040      	beq.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e28:	2b80      	cmp	r3, #128	; 0x80
 8002e2a:	d02a      	beq.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002e2c:	2b80      	cmp	r3, #128	; 0x80
 8002e2e:	d825      	bhi.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002e30:	2b60      	cmp	r3, #96	; 0x60
 8002e32:	d026      	beq.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002e34:	2b60      	cmp	r3, #96	; 0x60
 8002e36:	d821      	bhi.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002e38:	2b40      	cmp	r3, #64	; 0x40
 8002e3a:	d006      	beq.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x42>
 8002e3c:	2b40      	cmp	r3, #64	; 0x40
 8002e3e:	d81d      	bhi.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d009      	beq.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8002e44:	2b20      	cmp	r3, #32
 8002e46:	d010      	beq.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x62>
 8002e48:	e018      	b.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002e4a:	4b89      	ldr	r3, [pc, #548]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002e4c:	68db      	ldr	r3, [r3, #12]
 8002e4e:	4a88      	ldr	r2, [pc, #544]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002e50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e54:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e56:	e015      	b.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	3304      	adds	r3, #4
 8002e5c:	2100      	movs	r1, #0
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f000 fb02 	bl	8003468 <RCCEx_PLLSAI1_Config>
 8002e64:	4603      	mov	r3, r0
 8002e66:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e68:	e00c      	b.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	3320      	adds	r3, #32
 8002e6e:	2100      	movs	r1, #0
 8002e70:	4618      	mov	r0, r3
 8002e72:	f000 fbed 	bl	8003650 <RCCEx_PLLSAI2_Config>
 8002e76:	4603      	mov	r3, r0
 8002e78:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e7a:	e003      	b.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	74fb      	strb	r3, [r7, #19]
      break;
 8002e80:	e000      	b.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8002e82:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e84:	7cfb      	ldrb	r3, [r7, #19]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d10b      	bne.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e8a:	4b79      	ldr	r3, [pc, #484]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002e8c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002e90:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e98:	4975      	ldr	r1, [pc, #468]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002ea0:	e001      	b.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ea2:	7cfb      	ldrb	r3, [r7, #19]
 8002ea4:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d047      	beq.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002eba:	d030      	beq.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002ebc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ec0:	d82a      	bhi.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002ec2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ec6:	d02a      	beq.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002ec8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ecc:	d824      	bhi.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002ece:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ed2:	d008      	beq.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8002ed4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ed8:	d81e      	bhi.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d00a      	beq.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002ede:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ee2:	d010      	beq.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002ee4:	e018      	b.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002ee6:	4b62      	ldr	r3, [pc, #392]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ee8:	68db      	ldr	r3, [r3, #12]
 8002eea:	4a61      	ldr	r2, [pc, #388]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002eec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ef0:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002ef2:	e015      	b.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	3304      	adds	r3, #4
 8002ef8:	2100      	movs	r1, #0
 8002efa:	4618      	mov	r0, r3
 8002efc:	f000 fab4 	bl	8003468 <RCCEx_PLLSAI1_Config>
 8002f00:	4603      	mov	r3, r0
 8002f02:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f04:	e00c      	b.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	3320      	adds	r3, #32
 8002f0a:	2100      	movs	r1, #0
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f000 fb9f 	bl	8003650 <RCCEx_PLLSAI2_Config>
 8002f12:	4603      	mov	r3, r0
 8002f14:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f16:	e003      	b.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	74fb      	strb	r3, [r7, #19]
      break;
 8002f1c:	e000      	b.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8002f1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f20:	7cfb      	ldrb	r3, [r7, #19]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d10b      	bne.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002f26:	4b52      	ldr	r3, [pc, #328]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f28:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002f2c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f34:	494e      	ldr	r1, [pc, #312]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f36:	4313      	orrs	r3, r2
 8002f38:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002f3c:	e001      	b.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f3e:	7cfb      	ldrb	r3, [r7, #19]
 8002f40:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	f000 809f 	beq.w	800308e <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f50:	2300      	movs	r3, #0
 8002f52:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002f54:	4b46      	ldr	r3, [pc, #280]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d101      	bne.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8002f60:	2301      	movs	r3, #1
 8002f62:	e000      	b.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002f64:	2300      	movs	r3, #0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d00d      	beq.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f6a:	4b41      	ldr	r3, [pc, #260]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f6e:	4a40      	ldr	r2, [pc, #256]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f74:	6593      	str	r3, [r2, #88]	; 0x58
 8002f76:	4b3e      	ldr	r3, [pc, #248]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f7e:	60bb      	str	r3, [r7, #8]
 8002f80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f82:	2301      	movs	r3, #1
 8002f84:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f86:	4b3b      	ldr	r3, [pc, #236]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a3a      	ldr	r2, [pc, #232]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002f8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f90:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f92:	f7fd faf3 	bl	800057c <HAL_GetTick>
 8002f96:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002f98:	e009      	b.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f9a:	f7fd faef 	bl	800057c <HAL_GetTick>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	d902      	bls.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	74fb      	strb	r3, [r7, #19]
        break;
 8002fac:	e005      	b.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002fae:	4b31      	ldr	r3, [pc, #196]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d0ef      	beq.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8002fba:	7cfb      	ldrb	r3, [r7, #19]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d15b      	bne.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002fc0:	4b2b      	ldr	r3, [pc, #172]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002fc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fca:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d01f      	beq.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fd8:	697a      	ldr	r2, [r7, #20]
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d019      	beq.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002fde:	4b24      	ldr	r3, [pc, #144]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002fe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fe4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fe8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002fea:	4b21      	ldr	r3, [pc, #132]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002fec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ff0:	4a1f      	ldr	r2, [pc, #124]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ff2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ff6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ffa:	4b1d      	ldr	r3, [pc, #116]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ffc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003000:	4a1b      	ldr	r2, [pc, #108]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003002:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003006:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800300a:	4a19      	ldr	r2, [pc, #100]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	f003 0301 	and.w	r3, r3, #1
 8003018:	2b00      	cmp	r3, #0
 800301a:	d016      	beq.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800301c:	f7fd faae 	bl	800057c <HAL_GetTick>
 8003020:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003022:	e00b      	b.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003024:	f7fd faaa 	bl	800057c <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003032:	4293      	cmp	r3, r2
 8003034:	d902      	bls.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8003036:	2303      	movs	r3, #3
 8003038:	74fb      	strb	r3, [r7, #19]
            break;
 800303a:	e006      	b.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800303c:	4b0c      	ldr	r3, [pc, #48]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800303e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003042:	f003 0302 	and.w	r3, r3, #2
 8003046:	2b00      	cmp	r3, #0
 8003048:	d0ec      	beq.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800304a:	7cfb      	ldrb	r3, [r7, #19]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d10c      	bne.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003050:	4b07      	ldr	r3, [pc, #28]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003052:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003056:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003060:	4903      	ldr	r1, [pc, #12]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003062:	4313      	orrs	r3, r2
 8003064:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003068:	e008      	b.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800306a:	7cfb      	ldrb	r3, [r7, #19]
 800306c:	74bb      	strb	r3, [r7, #18]
 800306e:	e005      	b.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x274>
 8003070:	40021000 	.word	0x40021000
 8003074:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003078:	7cfb      	ldrb	r3, [r7, #19]
 800307a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800307c:	7c7b      	ldrb	r3, [r7, #17]
 800307e:	2b01      	cmp	r3, #1
 8003080:	d105      	bne.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003082:	4ba0      	ldr	r3, [pc, #640]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003086:	4a9f      	ldr	r2, [pc, #636]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003088:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800308c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0301 	and.w	r3, r3, #1
 8003096:	2b00      	cmp	r3, #0
 8003098:	d00a      	beq.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800309a:	4b9a      	ldr	r3, [pc, #616]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800309c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030a0:	f023 0203 	bic.w	r2, r3, #3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030a8:	4996      	ldr	r1, [pc, #600]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80030aa:	4313      	orrs	r3, r2
 80030ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 0302 	and.w	r3, r3, #2
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d00a      	beq.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80030bc:	4b91      	ldr	r3, [pc, #580]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80030be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030c2:	f023 020c 	bic.w	r2, r3, #12
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ca:	498e      	ldr	r1, [pc, #568]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80030cc:	4313      	orrs	r3, r2
 80030ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0304 	and.w	r3, r3, #4
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d00a      	beq.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80030de:	4b89      	ldr	r3, [pc, #548]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80030e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030e4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ec:	4985      	ldr	r1, [pc, #532]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80030ee:	4313      	orrs	r3, r2
 80030f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0308 	and.w	r3, r3, #8
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d00a      	beq.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003100:	4b80      	ldr	r3, [pc, #512]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003106:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800310e:	497d      	ldr	r1, [pc, #500]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003110:	4313      	orrs	r3, r2
 8003112:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0310 	and.w	r3, r3, #16
 800311e:	2b00      	cmp	r3, #0
 8003120:	d00a      	beq.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003122:	4b78      	ldr	r3, [pc, #480]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003124:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003128:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003130:	4974      	ldr	r1, [pc, #464]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003132:	4313      	orrs	r3, r2
 8003134:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 0320 	and.w	r3, r3, #32
 8003140:	2b00      	cmp	r3, #0
 8003142:	d00a      	beq.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003144:	4b6f      	ldr	r3, [pc, #444]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800314a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003152:	496c      	ldr	r1, [pc, #432]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003154:	4313      	orrs	r3, r2
 8003156:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003162:	2b00      	cmp	r3, #0
 8003164:	d00a      	beq.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003166:	4b67      	ldr	r3, [pc, #412]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003168:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800316c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003174:	4963      	ldr	r1, [pc, #396]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003176:	4313      	orrs	r3, r2
 8003178:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003184:	2b00      	cmp	r3, #0
 8003186:	d00a      	beq.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003188:	4b5e      	ldr	r3, [pc, #376]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800318a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800318e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003196:	495b      	ldr	r1, [pc, #364]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003198:	4313      	orrs	r3, r2
 800319a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d00a      	beq.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80031aa:	4b56      	ldr	r3, [pc, #344]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031b0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031b8:	4952      	ldr	r1, [pc, #328]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031ba:	4313      	orrs	r3, r2
 80031bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d00a      	beq.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80031cc:	4b4d      	ldr	r3, [pc, #308]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031d2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031da:	494a      	ldr	r1, [pc, #296]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031dc:	4313      	orrs	r3, r2
 80031de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d00a      	beq.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80031ee:	4b45      	ldr	r3, [pc, #276]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031fc:	4941      	ldr	r1, [pc, #260]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031fe:	4313      	orrs	r3, r2
 8003200:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800320c:	2b00      	cmp	r3, #0
 800320e:	d00a      	beq.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003210:	4b3c      	ldr	r3, [pc, #240]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003212:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003216:	f023 0203 	bic.w	r2, r3, #3
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800321e:	4939      	ldr	r1, [pc, #228]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003220:	4313      	orrs	r3, r2
 8003222:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d028      	beq.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003232:	4b34      	ldr	r3, [pc, #208]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003234:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003238:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003240:	4930      	ldr	r1, [pc, #192]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003242:	4313      	orrs	r3, r2
 8003244:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800324c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003250:	d106      	bne.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003252:	4b2c      	ldr	r3, [pc, #176]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003254:	68db      	ldr	r3, [r3, #12]
 8003256:	4a2b      	ldr	r2, [pc, #172]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003258:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800325c:	60d3      	str	r3, [r2, #12]
 800325e:	e011      	b.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003264:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003268:	d10c      	bne.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	3304      	adds	r3, #4
 800326e:	2101      	movs	r1, #1
 8003270:	4618      	mov	r0, r3
 8003272:	f000 f8f9 	bl	8003468 <RCCEx_PLLSAI1_Config>
 8003276:	4603      	mov	r3, r0
 8003278:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800327a:	7cfb      	ldrb	r3, [r7, #19]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d001      	beq.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8003280:	7cfb      	ldrb	r3, [r7, #19]
 8003282:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800328c:	2b00      	cmp	r3, #0
 800328e:	d04d      	beq.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003294:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003298:	d108      	bne.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800329a:	4b1a      	ldr	r3, [pc, #104]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800329c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80032a0:	4a18      	ldr	r2, [pc, #96]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032a6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80032aa:	e012      	b.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80032ac:	4b15      	ldr	r3, [pc, #84]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80032b2:	4a14      	ldr	r2, [pc, #80]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80032b8:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80032bc:	4b11      	ldr	r3, [pc, #68]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032c2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80032ca:	490e      	ldr	r1, [pc, #56]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032cc:	4313      	orrs	r3, r2
 80032ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80032d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032da:	d106      	bne.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032dc:	4b09      	ldr	r3, [pc, #36]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	4a08      	ldr	r2, [pc, #32]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80032e6:	60d3      	str	r3, [r2, #12]
 80032e8:	e020      	b.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80032ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80032f2:	d109      	bne.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80032f4:	4b03      	ldr	r3, [pc, #12]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	4a02      	ldr	r2, [pc, #8]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032fe:	60d3      	str	r3, [r2, #12]
 8003300:	e014      	b.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003302:	bf00      	nop
 8003304:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800330c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003310:	d10c      	bne.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	3304      	adds	r3, #4
 8003316:	2101      	movs	r1, #1
 8003318:	4618      	mov	r0, r3
 800331a:	f000 f8a5 	bl	8003468 <RCCEx_PLLSAI1_Config>
 800331e:	4603      	mov	r3, r0
 8003320:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003322:	7cfb      	ldrb	r3, [r7, #19]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d001      	beq.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8003328:	7cfb      	ldrb	r3, [r7, #19]
 800332a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003334:	2b00      	cmp	r3, #0
 8003336:	d028      	beq.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003338:	4b4a      	ldr	r3, [pc, #296]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800333a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800333e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003346:	4947      	ldr	r1, [pc, #284]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003348:	4313      	orrs	r3, r2
 800334a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003352:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003356:	d106      	bne.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003358:	4b42      	ldr	r3, [pc, #264]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	4a41      	ldr	r2, [pc, #260]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800335e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003362:	60d3      	str	r3, [r2, #12]
 8003364:	e011      	b.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800336a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800336e:	d10c      	bne.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	3304      	adds	r3, #4
 8003374:	2101      	movs	r1, #1
 8003376:	4618      	mov	r0, r3
 8003378:	f000 f876 	bl	8003468 <RCCEx_PLLSAI1_Config>
 800337c:	4603      	mov	r3, r0
 800337e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003380:	7cfb      	ldrb	r3, [r7, #19]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d001      	beq.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8003386:	7cfb      	ldrb	r3, [r7, #19]
 8003388:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d01e      	beq.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003396:	4b33      	ldr	r3, [pc, #204]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003398:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800339c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033a6:	492f      	ldr	r1, [pc, #188]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033a8:	4313      	orrs	r3, r2
 80033aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80033b8:	d10c      	bne.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	3304      	adds	r3, #4
 80033be:	2102      	movs	r1, #2
 80033c0:	4618      	mov	r0, r3
 80033c2:	f000 f851 	bl	8003468 <RCCEx_PLLSAI1_Config>
 80033c6:	4603      	mov	r3, r0
 80033c8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80033ca:	7cfb      	ldrb	r3, [r7, #19]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d001      	beq.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80033d0:	7cfb      	ldrb	r3, [r7, #19]
 80033d2:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d00b      	beq.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80033e0:	4b20      	ldr	r3, [pc, #128]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80033e6:	f023 0204 	bic.w	r2, r3, #4
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033f0:	491c      	ldr	r1, [pc, #112]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033f2:	4313      	orrs	r3, r2
 80033f4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003400:	2b00      	cmp	r3, #0
 8003402:	d00b      	beq.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003404:	4b17      	ldr	r3, [pc, #92]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003406:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800340a:	f023 0218 	bic.w	r2, r3, #24
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003414:	4913      	ldr	r1, [pc, #76]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003416:	4313      	orrs	r3, r2
 8003418:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003424:	2b00      	cmp	r3, #0
 8003426:	d017      	beq.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003428:	4b0e      	ldr	r3, [pc, #56]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800342a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800342e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003438:	490a      	ldr	r1, [pc, #40]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800343a:	4313      	orrs	r3, r2
 800343c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003446:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800344a:	d105      	bne.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800344c:	4b05      	ldr	r3, [pc, #20]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	4a04      	ldr	r2, [pc, #16]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003452:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003456:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003458:	7cbb      	ldrb	r3, [r7, #18]
}
 800345a:	4618      	mov	r0, r3
 800345c:	3718      	adds	r7, #24
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	40021000 	.word	0x40021000

08003468 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003472:	2300      	movs	r3, #0
 8003474:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003476:	4b72      	ldr	r3, [pc, #456]	; (8003640 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003478:	68db      	ldr	r3, [r3, #12]
 800347a:	f003 0303 	and.w	r3, r3, #3
 800347e:	2b00      	cmp	r3, #0
 8003480:	d00e      	beq.n	80034a0 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003482:	4b6f      	ldr	r3, [pc, #444]	; (8003640 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003484:	68db      	ldr	r3, [r3, #12]
 8003486:	f003 0203 	and.w	r2, r3, #3
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	429a      	cmp	r2, r3
 8003490:	d103      	bne.n	800349a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
       ||
 8003496:	2b00      	cmp	r3, #0
 8003498:	d142      	bne.n	8003520 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	73fb      	strb	r3, [r7, #15]
 800349e:	e03f      	b.n	8003520 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	2b03      	cmp	r3, #3
 80034a6:	d018      	beq.n	80034da <RCCEx_PLLSAI1_Config+0x72>
 80034a8:	2b03      	cmp	r3, #3
 80034aa:	d825      	bhi.n	80034f8 <RCCEx_PLLSAI1_Config+0x90>
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d002      	beq.n	80034b6 <RCCEx_PLLSAI1_Config+0x4e>
 80034b0:	2b02      	cmp	r3, #2
 80034b2:	d009      	beq.n	80034c8 <RCCEx_PLLSAI1_Config+0x60>
 80034b4:	e020      	b.n	80034f8 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80034b6:	4b62      	ldr	r3, [pc, #392]	; (8003640 <RCCEx_PLLSAI1_Config+0x1d8>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 0302 	and.w	r3, r3, #2
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d11d      	bne.n	80034fe <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034c6:	e01a      	b.n	80034fe <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80034c8:	4b5d      	ldr	r3, [pc, #372]	; (8003640 <RCCEx_PLLSAI1_Config+0x1d8>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d116      	bne.n	8003502 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034d8:	e013      	b.n	8003502 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80034da:	4b59      	ldr	r3, [pc, #356]	; (8003640 <RCCEx_PLLSAI1_Config+0x1d8>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d10f      	bne.n	8003506 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80034e6:	4b56      	ldr	r3, [pc, #344]	; (8003640 <RCCEx_PLLSAI1_Config+0x1d8>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d109      	bne.n	8003506 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80034f6:	e006      	b.n	8003506 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	73fb      	strb	r3, [r7, #15]
      break;
 80034fc:	e004      	b.n	8003508 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80034fe:	bf00      	nop
 8003500:	e002      	b.n	8003508 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003502:	bf00      	nop
 8003504:	e000      	b.n	8003508 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003506:	bf00      	nop
    }

    if(status == HAL_OK)
 8003508:	7bfb      	ldrb	r3, [r7, #15]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d108      	bne.n	8003520 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800350e:	4b4c      	ldr	r3, [pc, #304]	; (8003640 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003510:	68db      	ldr	r3, [r3, #12]
 8003512:	f023 0203 	bic.w	r2, r3, #3
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4949      	ldr	r1, [pc, #292]	; (8003640 <RCCEx_PLLSAI1_Config+0x1d8>)
 800351c:	4313      	orrs	r3, r2
 800351e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003520:	7bfb      	ldrb	r3, [r7, #15]
 8003522:	2b00      	cmp	r3, #0
 8003524:	f040 8086 	bne.w	8003634 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003528:	4b45      	ldr	r3, [pc, #276]	; (8003640 <RCCEx_PLLSAI1_Config+0x1d8>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a44      	ldr	r2, [pc, #272]	; (8003640 <RCCEx_PLLSAI1_Config+0x1d8>)
 800352e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003532:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003534:	f7fd f822 	bl	800057c <HAL_GetTick>
 8003538:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800353a:	e009      	b.n	8003550 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800353c:	f7fd f81e 	bl	800057c <HAL_GetTick>
 8003540:	4602      	mov	r2, r0
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	2b02      	cmp	r3, #2
 8003548:	d902      	bls.n	8003550 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800354a:	2303      	movs	r3, #3
 800354c:	73fb      	strb	r3, [r7, #15]
        break;
 800354e:	e005      	b.n	800355c <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003550:	4b3b      	ldr	r3, [pc, #236]	; (8003640 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003558:	2b00      	cmp	r3, #0
 800355a:	d1ef      	bne.n	800353c <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800355c:	7bfb      	ldrb	r3, [r7, #15]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d168      	bne.n	8003634 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d113      	bne.n	8003590 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003568:	4b35      	ldr	r3, [pc, #212]	; (8003640 <RCCEx_PLLSAI1_Config+0x1d8>)
 800356a:	691a      	ldr	r2, [r3, #16]
 800356c:	4b35      	ldr	r3, [pc, #212]	; (8003644 <RCCEx_PLLSAI1_Config+0x1dc>)
 800356e:	4013      	ands	r3, r2
 8003570:	687a      	ldr	r2, [r7, #4]
 8003572:	6892      	ldr	r2, [r2, #8]
 8003574:	0211      	lsls	r1, r2, #8
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	68d2      	ldr	r2, [r2, #12]
 800357a:	06d2      	lsls	r2, r2, #27
 800357c:	4311      	orrs	r1, r2
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	6852      	ldr	r2, [r2, #4]
 8003582:	3a01      	subs	r2, #1
 8003584:	0112      	lsls	r2, r2, #4
 8003586:	430a      	orrs	r2, r1
 8003588:	492d      	ldr	r1, [pc, #180]	; (8003640 <RCCEx_PLLSAI1_Config+0x1d8>)
 800358a:	4313      	orrs	r3, r2
 800358c:	610b      	str	r3, [r1, #16]
 800358e:	e02d      	b.n	80035ec <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	2b01      	cmp	r3, #1
 8003594:	d115      	bne.n	80035c2 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003596:	4b2a      	ldr	r3, [pc, #168]	; (8003640 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003598:	691a      	ldr	r2, [r3, #16]
 800359a:	4b2b      	ldr	r3, [pc, #172]	; (8003648 <RCCEx_PLLSAI1_Config+0x1e0>)
 800359c:	4013      	ands	r3, r2
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	6892      	ldr	r2, [r2, #8]
 80035a2:	0211      	lsls	r1, r2, #8
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	6912      	ldr	r2, [r2, #16]
 80035a8:	0852      	lsrs	r2, r2, #1
 80035aa:	3a01      	subs	r2, #1
 80035ac:	0552      	lsls	r2, r2, #21
 80035ae:	4311      	orrs	r1, r2
 80035b0:	687a      	ldr	r2, [r7, #4]
 80035b2:	6852      	ldr	r2, [r2, #4]
 80035b4:	3a01      	subs	r2, #1
 80035b6:	0112      	lsls	r2, r2, #4
 80035b8:	430a      	orrs	r2, r1
 80035ba:	4921      	ldr	r1, [pc, #132]	; (8003640 <RCCEx_PLLSAI1_Config+0x1d8>)
 80035bc:	4313      	orrs	r3, r2
 80035be:	610b      	str	r3, [r1, #16]
 80035c0:	e014      	b.n	80035ec <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80035c2:	4b1f      	ldr	r3, [pc, #124]	; (8003640 <RCCEx_PLLSAI1_Config+0x1d8>)
 80035c4:	691a      	ldr	r2, [r3, #16]
 80035c6:	4b21      	ldr	r3, [pc, #132]	; (800364c <RCCEx_PLLSAI1_Config+0x1e4>)
 80035c8:	4013      	ands	r3, r2
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	6892      	ldr	r2, [r2, #8]
 80035ce:	0211      	lsls	r1, r2, #8
 80035d0:	687a      	ldr	r2, [r7, #4]
 80035d2:	6952      	ldr	r2, [r2, #20]
 80035d4:	0852      	lsrs	r2, r2, #1
 80035d6:	3a01      	subs	r2, #1
 80035d8:	0652      	lsls	r2, r2, #25
 80035da:	4311      	orrs	r1, r2
 80035dc:	687a      	ldr	r2, [r7, #4]
 80035de:	6852      	ldr	r2, [r2, #4]
 80035e0:	3a01      	subs	r2, #1
 80035e2:	0112      	lsls	r2, r2, #4
 80035e4:	430a      	orrs	r2, r1
 80035e6:	4916      	ldr	r1, [pc, #88]	; (8003640 <RCCEx_PLLSAI1_Config+0x1d8>)
 80035e8:	4313      	orrs	r3, r2
 80035ea:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80035ec:	4b14      	ldr	r3, [pc, #80]	; (8003640 <RCCEx_PLLSAI1_Config+0x1d8>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a13      	ldr	r2, [pc, #76]	; (8003640 <RCCEx_PLLSAI1_Config+0x1d8>)
 80035f2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80035f6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035f8:	f7fc ffc0 	bl	800057c <HAL_GetTick>
 80035fc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80035fe:	e009      	b.n	8003614 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003600:	f7fc ffbc 	bl	800057c <HAL_GetTick>
 8003604:	4602      	mov	r2, r0
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	2b02      	cmp	r3, #2
 800360c:	d902      	bls.n	8003614 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	73fb      	strb	r3, [r7, #15]
          break;
 8003612:	e005      	b.n	8003620 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003614:	4b0a      	ldr	r3, [pc, #40]	; (8003640 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800361c:	2b00      	cmp	r3, #0
 800361e:	d0ef      	beq.n	8003600 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003620:	7bfb      	ldrb	r3, [r7, #15]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d106      	bne.n	8003634 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003626:	4b06      	ldr	r3, [pc, #24]	; (8003640 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003628:	691a      	ldr	r2, [r3, #16]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	699b      	ldr	r3, [r3, #24]
 800362e:	4904      	ldr	r1, [pc, #16]	; (8003640 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003630:	4313      	orrs	r3, r2
 8003632:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003634:	7bfb      	ldrb	r3, [r7, #15]
}
 8003636:	4618      	mov	r0, r3
 8003638:	3710      	adds	r7, #16
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}
 800363e:	bf00      	nop
 8003640:	40021000 	.word	0x40021000
 8003644:	07ff800f 	.word	0x07ff800f
 8003648:	ff9f800f 	.word	0xff9f800f
 800364c:	f9ff800f 	.word	0xf9ff800f

08003650 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b084      	sub	sp, #16
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
 8003658:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800365a:	2300      	movs	r3, #0
 800365c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800365e:	4b72      	ldr	r3, [pc, #456]	; (8003828 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003660:	68db      	ldr	r3, [r3, #12]
 8003662:	f003 0303 	and.w	r3, r3, #3
 8003666:	2b00      	cmp	r3, #0
 8003668:	d00e      	beq.n	8003688 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800366a:	4b6f      	ldr	r3, [pc, #444]	; (8003828 <RCCEx_PLLSAI2_Config+0x1d8>)
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	f003 0203 	and.w	r2, r3, #3
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	429a      	cmp	r2, r3
 8003678:	d103      	bne.n	8003682 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
       ||
 800367e:	2b00      	cmp	r3, #0
 8003680:	d142      	bne.n	8003708 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	73fb      	strb	r3, [r7, #15]
 8003686:	e03f      	b.n	8003708 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	2b03      	cmp	r3, #3
 800368e:	d018      	beq.n	80036c2 <RCCEx_PLLSAI2_Config+0x72>
 8003690:	2b03      	cmp	r3, #3
 8003692:	d825      	bhi.n	80036e0 <RCCEx_PLLSAI2_Config+0x90>
 8003694:	2b01      	cmp	r3, #1
 8003696:	d002      	beq.n	800369e <RCCEx_PLLSAI2_Config+0x4e>
 8003698:	2b02      	cmp	r3, #2
 800369a:	d009      	beq.n	80036b0 <RCCEx_PLLSAI2_Config+0x60>
 800369c:	e020      	b.n	80036e0 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800369e:	4b62      	ldr	r3, [pc, #392]	; (8003828 <RCCEx_PLLSAI2_Config+0x1d8>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0302 	and.w	r3, r3, #2
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d11d      	bne.n	80036e6 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036ae:	e01a      	b.n	80036e6 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80036b0:	4b5d      	ldr	r3, [pc, #372]	; (8003828 <RCCEx_PLLSAI2_Config+0x1d8>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d116      	bne.n	80036ea <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036c0:	e013      	b.n	80036ea <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80036c2:	4b59      	ldr	r3, [pc, #356]	; (8003828 <RCCEx_PLLSAI2_Config+0x1d8>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d10f      	bne.n	80036ee <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80036ce:	4b56      	ldr	r3, [pc, #344]	; (8003828 <RCCEx_PLLSAI2_Config+0x1d8>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d109      	bne.n	80036ee <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80036de:	e006      	b.n	80036ee <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	73fb      	strb	r3, [r7, #15]
      break;
 80036e4:	e004      	b.n	80036f0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80036e6:	bf00      	nop
 80036e8:	e002      	b.n	80036f0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80036ea:	bf00      	nop
 80036ec:	e000      	b.n	80036f0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80036ee:	bf00      	nop
    }

    if(status == HAL_OK)
 80036f0:	7bfb      	ldrb	r3, [r7, #15]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d108      	bne.n	8003708 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80036f6:	4b4c      	ldr	r3, [pc, #304]	; (8003828 <RCCEx_PLLSAI2_Config+0x1d8>)
 80036f8:	68db      	ldr	r3, [r3, #12]
 80036fa:	f023 0203 	bic.w	r2, r3, #3
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4949      	ldr	r1, [pc, #292]	; (8003828 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003704:	4313      	orrs	r3, r2
 8003706:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003708:	7bfb      	ldrb	r3, [r7, #15]
 800370a:	2b00      	cmp	r3, #0
 800370c:	f040 8086 	bne.w	800381c <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003710:	4b45      	ldr	r3, [pc, #276]	; (8003828 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a44      	ldr	r2, [pc, #272]	; (8003828 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003716:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800371a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800371c:	f7fc ff2e 	bl	800057c <HAL_GetTick>
 8003720:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003722:	e009      	b.n	8003738 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003724:	f7fc ff2a 	bl	800057c <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	2b02      	cmp	r3, #2
 8003730:	d902      	bls.n	8003738 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	73fb      	strb	r3, [r7, #15]
        break;
 8003736:	e005      	b.n	8003744 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003738:	4b3b      	ldr	r3, [pc, #236]	; (8003828 <RCCEx_PLLSAI2_Config+0x1d8>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003740:	2b00      	cmp	r3, #0
 8003742:	d1ef      	bne.n	8003724 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003744:	7bfb      	ldrb	r3, [r7, #15]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d168      	bne.n	800381c <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d113      	bne.n	8003778 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003750:	4b35      	ldr	r3, [pc, #212]	; (8003828 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003752:	695a      	ldr	r2, [r3, #20]
 8003754:	4b35      	ldr	r3, [pc, #212]	; (800382c <RCCEx_PLLSAI2_Config+0x1dc>)
 8003756:	4013      	ands	r3, r2
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	6892      	ldr	r2, [r2, #8]
 800375c:	0211      	lsls	r1, r2, #8
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	68d2      	ldr	r2, [r2, #12]
 8003762:	06d2      	lsls	r2, r2, #27
 8003764:	4311      	orrs	r1, r2
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	6852      	ldr	r2, [r2, #4]
 800376a:	3a01      	subs	r2, #1
 800376c:	0112      	lsls	r2, r2, #4
 800376e:	430a      	orrs	r2, r1
 8003770:	492d      	ldr	r1, [pc, #180]	; (8003828 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003772:	4313      	orrs	r3, r2
 8003774:	614b      	str	r3, [r1, #20]
 8003776:	e02d      	b.n	80037d4 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	2b01      	cmp	r3, #1
 800377c:	d115      	bne.n	80037aa <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800377e:	4b2a      	ldr	r3, [pc, #168]	; (8003828 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003780:	695a      	ldr	r2, [r3, #20]
 8003782:	4b2b      	ldr	r3, [pc, #172]	; (8003830 <RCCEx_PLLSAI2_Config+0x1e0>)
 8003784:	4013      	ands	r3, r2
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	6892      	ldr	r2, [r2, #8]
 800378a:	0211      	lsls	r1, r2, #8
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	6912      	ldr	r2, [r2, #16]
 8003790:	0852      	lsrs	r2, r2, #1
 8003792:	3a01      	subs	r2, #1
 8003794:	0552      	lsls	r2, r2, #21
 8003796:	4311      	orrs	r1, r2
 8003798:	687a      	ldr	r2, [r7, #4]
 800379a:	6852      	ldr	r2, [r2, #4]
 800379c:	3a01      	subs	r2, #1
 800379e:	0112      	lsls	r2, r2, #4
 80037a0:	430a      	orrs	r2, r1
 80037a2:	4921      	ldr	r1, [pc, #132]	; (8003828 <RCCEx_PLLSAI2_Config+0x1d8>)
 80037a4:	4313      	orrs	r3, r2
 80037a6:	614b      	str	r3, [r1, #20]
 80037a8:	e014      	b.n	80037d4 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80037aa:	4b1f      	ldr	r3, [pc, #124]	; (8003828 <RCCEx_PLLSAI2_Config+0x1d8>)
 80037ac:	695a      	ldr	r2, [r3, #20]
 80037ae:	4b21      	ldr	r3, [pc, #132]	; (8003834 <RCCEx_PLLSAI2_Config+0x1e4>)
 80037b0:	4013      	ands	r3, r2
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	6892      	ldr	r2, [r2, #8]
 80037b6:	0211      	lsls	r1, r2, #8
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	6952      	ldr	r2, [r2, #20]
 80037bc:	0852      	lsrs	r2, r2, #1
 80037be:	3a01      	subs	r2, #1
 80037c0:	0652      	lsls	r2, r2, #25
 80037c2:	4311      	orrs	r1, r2
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	6852      	ldr	r2, [r2, #4]
 80037c8:	3a01      	subs	r2, #1
 80037ca:	0112      	lsls	r2, r2, #4
 80037cc:	430a      	orrs	r2, r1
 80037ce:	4916      	ldr	r1, [pc, #88]	; (8003828 <RCCEx_PLLSAI2_Config+0x1d8>)
 80037d0:	4313      	orrs	r3, r2
 80037d2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80037d4:	4b14      	ldr	r3, [pc, #80]	; (8003828 <RCCEx_PLLSAI2_Config+0x1d8>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a13      	ldr	r2, [pc, #76]	; (8003828 <RCCEx_PLLSAI2_Config+0x1d8>)
 80037da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037de:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037e0:	f7fc fecc 	bl	800057c <HAL_GetTick>
 80037e4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80037e6:	e009      	b.n	80037fc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80037e8:	f7fc fec8 	bl	800057c <HAL_GetTick>
 80037ec:	4602      	mov	r2, r0
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	2b02      	cmp	r3, #2
 80037f4:	d902      	bls.n	80037fc <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80037f6:	2303      	movs	r3, #3
 80037f8:	73fb      	strb	r3, [r7, #15]
          break;
 80037fa:	e005      	b.n	8003808 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80037fc:	4b0a      	ldr	r3, [pc, #40]	; (8003828 <RCCEx_PLLSAI2_Config+0x1d8>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003804:	2b00      	cmp	r3, #0
 8003806:	d0ef      	beq.n	80037e8 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003808:	7bfb      	ldrb	r3, [r7, #15]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d106      	bne.n	800381c <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800380e:	4b06      	ldr	r3, [pc, #24]	; (8003828 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003810:	695a      	ldr	r2, [r3, #20]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	699b      	ldr	r3, [r3, #24]
 8003816:	4904      	ldr	r1, [pc, #16]	; (8003828 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003818:	4313      	orrs	r3, r2
 800381a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800381c:	7bfb      	ldrb	r3, [r7, #15]
}
 800381e:	4618      	mov	r0, r3
 8003820:	3710      	adds	r7, #16
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	40021000 	.word	0x40021000
 800382c:	07ff800f 	.word	0x07ff800f
 8003830:	ff9f800f 	.word	0xff9f800f
 8003834:	f9ff800f 	.word	0xf9ff800f

08003838 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003838:	b084      	sub	sp, #16
 800383a:	b580      	push	{r7, lr}
 800383c:	b084      	sub	sp, #16
 800383e:	af00      	add	r7, sp, #0
 8003840:	6078      	str	r0, [r7, #4]
 8003842:	f107 001c 	add.w	r0, r7, #28
 8003846:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f001 faf6 	bl	8004e48 <USB_CoreReset>
 800385c:	4603      	mov	r3, r0
 800385e:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8003860:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003862:	2b00      	cmp	r3, #0
 8003864:	d106      	bne.n	8003874 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800386a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	639a      	str	r2, [r3, #56]	; 0x38
 8003872:	e005      	b.n	8003880 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003878:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8003880:	7bfb      	ldrb	r3, [r7, #15]
}
 8003882:	4618      	mov	r0, r3
 8003884:	3710      	adds	r7, #16
 8003886:	46bd      	mov	sp, r7
 8003888:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800388c:	b004      	add	sp, #16
 800388e:	4770      	bx	lr

08003890 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003890:	b480      	push	{r7}
 8003892:	b087      	sub	sp, #28
 8003894:	af00      	add	r7, sp, #0
 8003896:	60f8      	str	r0, [r7, #12]
 8003898:	60b9      	str	r1, [r7, #8]
 800389a:	4613      	mov	r3, r2
 800389c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800389e:	79fb      	ldrb	r3, [r7, #7]
 80038a0:	2b02      	cmp	r3, #2
 80038a2:	d165      	bne.n	8003970 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	4a3e      	ldr	r2, [pc, #248]	; (80039a0 <USB_SetTurnaroundTime+0x110>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d906      	bls.n	80038ba <USB_SetTurnaroundTime+0x2a>
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	4a3d      	ldr	r2, [pc, #244]	; (80039a4 <USB_SetTurnaroundTime+0x114>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d202      	bcs.n	80038ba <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80038b4:	230f      	movs	r3, #15
 80038b6:	617b      	str	r3, [r7, #20]
 80038b8:	e05c      	b.n	8003974 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	4a39      	ldr	r2, [pc, #228]	; (80039a4 <USB_SetTurnaroundTime+0x114>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d306      	bcc.n	80038d0 <USB_SetTurnaroundTime+0x40>
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	4a38      	ldr	r2, [pc, #224]	; (80039a8 <USB_SetTurnaroundTime+0x118>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d202      	bcs.n	80038d0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80038ca:	230e      	movs	r3, #14
 80038cc:	617b      	str	r3, [r7, #20]
 80038ce:	e051      	b.n	8003974 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	4a35      	ldr	r2, [pc, #212]	; (80039a8 <USB_SetTurnaroundTime+0x118>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d306      	bcc.n	80038e6 <USB_SetTurnaroundTime+0x56>
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	4a34      	ldr	r2, [pc, #208]	; (80039ac <USB_SetTurnaroundTime+0x11c>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d202      	bcs.n	80038e6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80038e0:	230d      	movs	r3, #13
 80038e2:	617b      	str	r3, [r7, #20]
 80038e4:	e046      	b.n	8003974 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	4a30      	ldr	r2, [pc, #192]	; (80039ac <USB_SetTurnaroundTime+0x11c>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d306      	bcc.n	80038fc <USB_SetTurnaroundTime+0x6c>
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	4a2f      	ldr	r2, [pc, #188]	; (80039b0 <USB_SetTurnaroundTime+0x120>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d802      	bhi.n	80038fc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80038f6:	230c      	movs	r3, #12
 80038f8:	617b      	str	r3, [r7, #20]
 80038fa:	e03b      	b.n	8003974 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	4a2c      	ldr	r2, [pc, #176]	; (80039b0 <USB_SetTurnaroundTime+0x120>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d906      	bls.n	8003912 <USB_SetTurnaroundTime+0x82>
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	4a2b      	ldr	r2, [pc, #172]	; (80039b4 <USB_SetTurnaroundTime+0x124>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d802      	bhi.n	8003912 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800390c:	230b      	movs	r3, #11
 800390e:	617b      	str	r3, [r7, #20]
 8003910:	e030      	b.n	8003974 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	4a27      	ldr	r2, [pc, #156]	; (80039b4 <USB_SetTurnaroundTime+0x124>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d906      	bls.n	8003928 <USB_SetTurnaroundTime+0x98>
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	4a26      	ldr	r2, [pc, #152]	; (80039b8 <USB_SetTurnaroundTime+0x128>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d802      	bhi.n	8003928 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003922:	230a      	movs	r3, #10
 8003924:	617b      	str	r3, [r7, #20]
 8003926:	e025      	b.n	8003974 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	4a23      	ldr	r2, [pc, #140]	; (80039b8 <USB_SetTurnaroundTime+0x128>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d906      	bls.n	800393e <USB_SetTurnaroundTime+0xae>
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	4a22      	ldr	r2, [pc, #136]	; (80039bc <USB_SetTurnaroundTime+0x12c>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d202      	bcs.n	800393e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003938:	2309      	movs	r3, #9
 800393a:	617b      	str	r3, [r7, #20]
 800393c:	e01a      	b.n	8003974 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	4a1e      	ldr	r2, [pc, #120]	; (80039bc <USB_SetTurnaroundTime+0x12c>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d306      	bcc.n	8003954 <USB_SetTurnaroundTime+0xc4>
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	4a1d      	ldr	r2, [pc, #116]	; (80039c0 <USB_SetTurnaroundTime+0x130>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d802      	bhi.n	8003954 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800394e:	2308      	movs	r3, #8
 8003950:	617b      	str	r3, [r7, #20]
 8003952:	e00f      	b.n	8003974 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	4a1a      	ldr	r2, [pc, #104]	; (80039c0 <USB_SetTurnaroundTime+0x130>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d906      	bls.n	800396a <USB_SetTurnaroundTime+0xda>
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	4a19      	ldr	r2, [pc, #100]	; (80039c4 <USB_SetTurnaroundTime+0x134>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d202      	bcs.n	800396a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003964:	2307      	movs	r3, #7
 8003966:	617b      	str	r3, [r7, #20]
 8003968:	e004      	b.n	8003974 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800396a:	2306      	movs	r3, #6
 800396c:	617b      	str	r3, [r7, #20]
 800396e:	e001      	b.n	8003974 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003970:	2309      	movs	r3, #9
 8003972:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	68da      	ldr	r2, [r3, #12]
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	029b      	lsls	r3, r3, #10
 8003988:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800398c:	431a      	orrs	r2, r3
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003992:	2300      	movs	r3, #0
}
 8003994:	4618      	mov	r0, r3
 8003996:	371c      	adds	r7, #28
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr
 80039a0:	00d8acbf 	.word	0x00d8acbf
 80039a4:	00e4e1c0 	.word	0x00e4e1c0
 80039a8:	00f42400 	.word	0x00f42400
 80039ac:	01067380 	.word	0x01067380
 80039b0:	011a499f 	.word	0x011a499f
 80039b4:	01312cff 	.word	0x01312cff
 80039b8:	014ca43f 	.word	0x014ca43f
 80039bc:	016e3600 	.word	0x016e3600
 80039c0:	01a6ab1f 	.word	0x01a6ab1f
 80039c4:	01e84800 	.word	0x01e84800

080039c8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b083      	sub	sp, #12
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	f043 0201 	orr.w	r2, r3, #1
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80039dc:	2300      	movs	r3, #0
}
 80039de:	4618      	mov	r0, r3
 80039e0:	370c      	adds	r7, #12
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr

080039ea <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80039ea:	b480      	push	{r7}
 80039ec:	b083      	sub	sp, #12
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	f023 0201 	bic.w	r2, r3, #1
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80039fe:	2300      	movs	r3, #0
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	370c      	adds	r7, #12
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr

08003a0c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b084      	sub	sp, #16
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	460b      	mov	r3, r1
 8003a16:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003a28:	78fb      	ldrb	r3, [r7, #3]
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d115      	bne.n	8003a5a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	68db      	ldr	r3, [r3, #12]
 8003a32:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003a3a:	2001      	movs	r0, #1
 8003a3c:	f7fc fdaa 	bl	8000594 <HAL_Delay>
      ms++;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	3301      	adds	r3, #1
 8003a44:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f001 f985 	bl	8004d56 <USB_GetMode>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d01e      	beq.n	8003a90 <USB_SetCurrentMode+0x84>
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2b31      	cmp	r3, #49	; 0x31
 8003a56:	d9f0      	bls.n	8003a3a <USB_SetCurrentMode+0x2e>
 8003a58:	e01a      	b.n	8003a90 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003a5a:	78fb      	ldrb	r3, [r7, #3]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d115      	bne.n	8003a8c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003a6c:	2001      	movs	r0, #1
 8003a6e:	f7fc fd91 	bl	8000594 <HAL_Delay>
      ms++;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	3301      	adds	r3, #1
 8003a76:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	f001 f96c 	bl	8004d56 <USB_GetMode>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d005      	beq.n	8003a90 <USB_SetCurrentMode+0x84>
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2b31      	cmp	r3, #49	; 0x31
 8003a88:	d9f0      	bls.n	8003a6c <USB_SetCurrentMode+0x60>
 8003a8a:	e001      	b.n	8003a90 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e005      	b.n	8003a9c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2b32      	cmp	r3, #50	; 0x32
 8003a94:	d101      	bne.n	8003a9a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e000      	b.n	8003a9c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003a9a:	2300      	movs	r3, #0
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3710      	adds	r7, #16
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}

08003aa4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003aa4:	b084      	sub	sp, #16
 8003aa6:	b580      	push	{r7, lr}
 8003aa8:	b086      	sub	sp, #24
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	6078      	str	r0, [r7, #4]
 8003aae:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003ab2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003abe:	2300      	movs	r3, #0
 8003ac0:	613b      	str	r3, [r7, #16]
 8003ac2:	e009      	b.n	8003ad8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	3340      	adds	r3, #64	; 0x40
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	4413      	add	r3, r2
 8003ace:	2200      	movs	r2, #0
 8003ad0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	3301      	adds	r3, #1
 8003ad6:	613b      	str	r3, [r7, #16]
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	2b0e      	cmp	r3, #14
 8003adc:	d9f2      	bls.n	8003ac4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003ade:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d11c      	bne.n	8003b1e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	68fa      	ldr	r2, [r7, #12]
 8003aee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003af2:	f043 0302 	orr.w	r3, r3, #2
 8003af6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003afc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	601a      	str	r2, [r3, #0]
 8003b1c:	e005      	b.n	8003b2a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b22:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003b30:	461a      	mov	r2, r3
 8003b32:	2300      	movs	r3, #0
 8003b34:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b3c:	4619      	mov	r1, r3
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b44:	461a      	mov	r2, r3
 8003b46:	680b      	ldr	r3, [r1, #0]
 8003b48:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003b4a:	2103      	movs	r1, #3
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	f000 f959 	bl	8003e04 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003b52:	2110      	movs	r1, #16
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f000 f8f1 	bl	8003d3c <USB_FlushTxFifo>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d001      	beq.n	8003b64 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f000 f91d 	bl	8003da4 <USB_FlushRxFifo>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d001      	beq.n	8003b74 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b86:	461a      	mov	r2, r3
 8003b88:	2300      	movs	r3, #0
 8003b8a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b92:	461a      	mov	r2, r3
 8003b94:	2300      	movs	r3, #0
 8003b96:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b98:	2300      	movs	r3, #0
 8003b9a:	613b      	str	r3, [r7, #16]
 8003b9c:	e043      	b.n	8003c26 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	015a      	lsls	r2, r3, #5
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	4413      	add	r3, r2
 8003ba6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003bb0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003bb4:	d118      	bne.n	8003be8 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d10a      	bne.n	8003bd2 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	015a      	lsls	r2, r3, #5
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	4413      	add	r3, r2
 8003bc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bc8:	461a      	mov	r2, r3
 8003bca:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003bce:	6013      	str	r3, [r2, #0]
 8003bd0:	e013      	b.n	8003bfa <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	015a      	lsls	r2, r3, #5
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	4413      	add	r3, r2
 8003bda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bde:	461a      	mov	r2, r3
 8003be0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003be4:	6013      	str	r3, [r2, #0]
 8003be6:	e008      	b.n	8003bfa <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	015a      	lsls	r2, r3, #5
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	4413      	add	r3, r2
 8003bf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	015a      	lsls	r2, r3, #5
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	4413      	add	r3, r2
 8003c02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c06:	461a      	mov	r2, r3
 8003c08:	2300      	movs	r3, #0
 8003c0a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	015a      	lsls	r2, r3, #5
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	4413      	add	r3, r2
 8003c14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c18:	461a      	mov	r2, r3
 8003c1a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003c1e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	3301      	adds	r3, #1
 8003c24:	613b      	str	r3, [r7, #16]
 8003c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c28:	693a      	ldr	r2, [r7, #16]
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d3b7      	bcc.n	8003b9e <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c2e:	2300      	movs	r3, #0
 8003c30:	613b      	str	r3, [r7, #16]
 8003c32:	e043      	b.n	8003cbc <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	015a      	lsls	r2, r3, #5
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	4413      	add	r3, r2
 8003c3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c46:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c4a:	d118      	bne.n	8003c7e <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d10a      	bne.n	8003c68 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	015a      	lsls	r2, r3, #5
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	4413      	add	r3, r2
 8003c5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c5e:	461a      	mov	r2, r3
 8003c60:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003c64:	6013      	str	r3, [r2, #0]
 8003c66:	e013      	b.n	8003c90 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	015a      	lsls	r2, r3, #5
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	4413      	add	r3, r2
 8003c70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c74:	461a      	mov	r2, r3
 8003c76:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003c7a:	6013      	str	r3, [r2, #0]
 8003c7c:	e008      	b.n	8003c90 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	015a      	lsls	r2, r3, #5
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	4413      	add	r3, r2
 8003c86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c8a:	461a      	mov	r2, r3
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	015a      	lsls	r2, r3, #5
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	4413      	add	r3, r2
 8003c98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	015a      	lsls	r2, r3, #5
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	4413      	add	r3, r2
 8003caa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cae:	461a      	mov	r2, r3
 8003cb0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003cb4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	3301      	adds	r3, #1
 8003cba:	613b      	str	r3, [r7, #16]
 8003cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cbe:	693a      	ldr	r2, [r7, #16]
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d3b7      	bcc.n	8003c34 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cca:	691b      	ldr	r3, [r3, #16]
 8003ccc:	68fa      	ldr	r2, [r7, #12]
 8003cce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cd2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003cd6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003ce4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	699b      	ldr	r3, [r3, #24]
 8003cea:	f043 0210 	orr.w	r2, r3, #16
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	699a      	ldr	r2, [r3, #24]
 8003cf6:	4b10      	ldr	r3, [pc, #64]	; (8003d38 <USB_DevInit+0x294>)
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	687a      	ldr	r2, [r7, #4]
 8003cfc:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003cfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d005      	beq.n	8003d10 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	699b      	ldr	r3, [r3, #24]
 8003d08:	f043 0208 	orr.w	r2, r3, #8
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003d10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d107      	bne.n	8003d26 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	699b      	ldr	r3, [r3, #24]
 8003d1a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003d1e:	f043 0304 	orr.w	r3, r3, #4
 8003d22:	687a      	ldr	r2, [r7, #4]
 8003d24:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003d26:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3718      	adds	r7, #24
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003d32:	b004      	add	sp, #16
 8003d34:	4770      	bx	lr
 8003d36:	bf00      	nop
 8003d38:	803c3800 	.word	0x803c3800

08003d3c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b085      	sub	sp, #20
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003d46:	2300      	movs	r3, #0
 8003d48:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	3301      	adds	r3, #1
 8003d4e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	4a13      	ldr	r2, [pc, #76]	; (8003da0 <USB_FlushTxFifo+0x64>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d901      	bls.n	8003d5c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003d58:	2303      	movs	r3, #3
 8003d5a:	e01b      	b.n	8003d94 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	691b      	ldr	r3, [r3, #16]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	daf2      	bge.n	8003d4a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003d64:	2300      	movs	r3, #0
 8003d66:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	019b      	lsls	r3, r3, #6
 8003d6c:	f043 0220 	orr.w	r2, r3, #32
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	3301      	adds	r3, #1
 8003d78:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	4a08      	ldr	r2, [pc, #32]	; (8003da0 <USB_FlushTxFifo+0x64>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d901      	bls.n	8003d86 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003d82:	2303      	movs	r3, #3
 8003d84:	e006      	b.n	8003d94 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	691b      	ldr	r3, [r3, #16]
 8003d8a:	f003 0320 	and.w	r3, r3, #32
 8003d8e:	2b20      	cmp	r3, #32
 8003d90:	d0f0      	beq.n	8003d74 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003d92:	2300      	movs	r3, #0
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	3714      	adds	r7, #20
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9e:	4770      	bx	lr
 8003da0:	00030d40 	.word	0x00030d40

08003da4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b085      	sub	sp, #20
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003dac:	2300      	movs	r3, #0
 8003dae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	3301      	adds	r3, #1
 8003db4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	4a11      	ldr	r2, [pc, #68]	; (8003e00 <USB_FlushRxFifo+0x5c>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d901      	bls.n	8003dc2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003dbe:	2303      	movs	r3, #3
 8003dc0:	e018      	b.n	8003df4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	691b      	ldr	r3, [r3, #16]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	daf2      	bge.n	8003db0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2210      	movs	r2, #16
 8003dd2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	3301      	adds	r3, #1
 8003dd8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	4a08      	ldr	r2, [pc, #32]	; (8003e00 <USB_FlushRxFifo+0x5c>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d901      	bls.n	8003de6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003de2:	2303      	movs	r3, #3
 8003de4:	e006      	b.n	8003df4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	691b      	ldr	r3, [r3, #16]
 8003dea:	f003 0310 	and.w	r3, r3, #16
 8003dee:	2b10      	cmp	r3, #16
 8003df0:	d0f0      	beq.n	8003dd4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003df2:	2300      	movs	r3, #0
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3714      	adds	r7, #20
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr
 8003e00:	00030d40 	.word	0x00030d40

08003e04 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b085      	sub	sp, #20
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
 8003e0c:	460b      	mov	r3, r1
 8003e0e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	78fb      	ldrb	r3, [r7, #3]
 8003e1e:	68f9      	ldr	r1, [r7, #12]
 8003e20:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e24:	4313      	orrs	r3, r2
 8003e26:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003e28:	2300      	movs	r3, #0
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3714      	adds	r7, #20
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr

08003e36 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003e36:	b480      	push	{r7}
 8003e38:	b087      	sub	sp, #28
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	f003 0306 	and.w	r3, r3, #6
 8003e4e:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2b02      	cmp	r3, #2
 8003e54:	d002      	beq.n	8003e5c <USB_GetDevSpeed+0x26>
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2b06      	cmp	r3, #6
 8003e5a:	d102      	bne.n	8003e62 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003e5c:	2302      	movs	r3, #2
 8003e5e:	75fb      	strb	r3, [r7, #23]
 8003e60:	e001      	b.n	8003e66 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8003e62:	230f      	movs	r3, #15
 8003e64:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003e66:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	371c      	adds	r7, #28
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr

08003e74 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b085      	sub	sp, #20
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	781b      	ldrb	r3, [r3, #0]
 8003e86:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	785b      	ldrb	r3, [r3, #1]
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d13a      	bne.n	8003f06 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e96:	69da      	ldr	r2, [r3, #28]
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	781b      	ldrb	r3, [r3, #0]
 8003e9c:	f003 030f 	and.w	r3, r3, #15
 8003ea0:	2101      	movs	r1, #1
 8003ea2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	68f9      	ldr	r1, [r7, #12]
 8003eaa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	015a      	lsls	r2, r3, #5
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	4413      	add	r3, r2
 8003eba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d155      	bne.n	8003f74 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	015a      	lsls	r2, r3, #5
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	4413      	add	r3, r2
 8003ed0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	68db      	ldr	r3, [r3, #12]
 8003eda:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	791b      	ldrb	r3, [r3, #4]
 8003ee2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003ee4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	059b      	lsls	r3, r3, #22
 8003eea:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003eec:	4313      	orrs	r3, r2
 8003eee:	68ba      	ldr	r2, [r7, #8]
 8003ef0:	0151      	lsls	r1, r2, #5
 8003ef2:	68fa      	ldr	r2, [r7, #12]
 8003ef4:	440a      	add	r2, r1
 8003ef6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003efa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003efe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f02:	6013      	str	r3, [r2, #0]
 8003f04:	e036      	b.n	8003f74 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f0c:	69da      	ldr	r2, [r3, #28]
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	781b      	ldrb	r3, [r3, #0]
 8003f12:	f003 030f 	and.w	r3, r3, #15
 8003f16:	2101      	movs	r1, #1
 8003f18:	fa01 f303 	lsl.w	r3, r1, r3
 8003f1c:	041b      	lsls	r3, r3, #16
 8003f1e:	68f9      	ldr	r1, [r7, #12]
 8003f20:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f24:	4313      	orrs	r3, r2
 8003f26:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	015a      	lsls	r2, r3, #5
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	4413      	add	r3, r2
 8003f30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d11a      	bne.n	8003f74 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	015a      	lsls	r2, r3, #5
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	4413      	add	r3, r2
 8003f46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	791b      	ldrb	r3, [r3, #4]
 8003f58:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003f5a:	430b      	orrs	r3, r1
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	68ba      	ldr	r2, [r7, #8]
 8003f60:	0151      	lsls	r1, r2, #5
 8003f62:	68fa      	ldr	r2, [r7, #12]
 8003f64:	440a      	add	r2, r1
 8003f66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f72:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003f74:	2300      	movs	r3, #0
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3714      	adds	r7, #20
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr
	...

08003f84 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b085      	sub	sp, #20
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	781b      	ldrb	r3, [r3, #0]
 8003f96:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	785b      	ldrb	r3, [r3, #1]
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d161      	bne.n	8004064 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	015a      	lsls	r2, r3, #5
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	4413      	add	r3, r2
 8003fa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003fb2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003fb6:	d11f      	bne.n	8003ff8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	015a      	lsls	r2, r3, #5
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	4413      	add	r3, r2
 8003fc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	68ba      	ldr	r2, [r7, #8]
 8003fc8:	0151      	lsls	r1, r2, #5
 8003fca:	68fa      	ldr	r2, [r7, #12]
 8003fcc:	440a      	add	r2, r1
 8003fce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fd2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003fd6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	015a      	lsls	r2, r3, #5
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	4413      	add	r3, r2
 8003fe0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	68ba      	ldr	r2, [r7, #8]
 8003fe8:	0151      	lsls	r1, r2, #5
 8003fea:	68fa      	ldr	r2, [r7, #12]
 8003fec:	440a      	add	r2, r1
 8003fee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ff2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003ff6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ffe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	781b      	ldrb	r3, [r3, #0]
 8004004:	f003 030f 	and.w	r3, r3, #15
 8004008:	2101      	movs	r1, #1
 800400a:	fa01 f303 	lsl.w	r3, r1, r3
 800400e:	b29b      	uxth	r3, r3
 8004010:	43db      	mvns	r3, r3
 8004012:	68f9      	ldr	r1, [r7, #12]
 8004014:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004018:	4013      	ands	r3, r2
 800401a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004022:	69da      	ldr	r2, [r3, #28]
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	781b      	ldrb	r3, [r3, #0]
 8004028:	f003 030f 	and.w	r3, r3, #15
 800402c:	2101      	movs	r1, #1
 800402e:	fa01 f303 	lsl.w	r3, r1, r3
 8004032:	b29b      	uxth	r3, r3
 8004034:	43db      	mvns	r3, r3
 8004036:	68f9      	ldr	r1, [r7, #12]
 8004038:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800403c:	4013      	ands	r3, r2
 800403e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	015a      	lsls	r2, r3, #5
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	4413      	add	r3, r2
 8004048:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	0159      	lsls	r1, r3, #5
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	440b      	add	r3, r1
 8004056:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800405a:	4619      	mov	r1, r3
 800405c:	4b35      	ldr	r3, [pc, #212]	; (8004134 <USB_DeactivateEndpoint+0x1b0>)
 800405e:	4013      	ands	r3, r2
 8004060:	600b      	str	r3, [r1, #0]
 8004062:	e060      	b.n	8004126 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	015a      	lsls	r2, r3, #5
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	4413      	add	r3, r2
 800406c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004076:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800407a:	d11f      	bne.n	80040bc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	015a      	lsls	r2, r3, #5
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	4413      	add	r3, r2
 8004084:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	68ba      	ldr	r2, [r7, #8]
 800408c:	0151      	lsls	r1, r2, #5
 800408e:	68fa      	ldr	r2, [r7, #12]
 8004090:	440a      	add	r2, r1
 8004092:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004096:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800409a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	015a      	lsls	r2, r3, #5
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	4413      	add	r3, r2
 80040a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	68ba      	ldr	r2, [r7, #8]
 80040ac:	0151      	lsls	r1, r2, #5
 80040ae:	68fa      	ldr	r2, [r7, #12]
 80040b0:	440a      	add	r2, r1
 80040b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040b6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80040ba:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	781b      	ldrb	r3, [r3, #0]
 80040c8:	f003 030f 	and.w	r3, r3, #15
 80040cc:	2101      	movs	r1, #1
 80040ce:	fa01 f303 	lsl.w	r3, r1, r3
 80040d2:	041b      	lsls	r3, r3, #16
 80040d4:	43db      	mvns	r3, r3
 80040d6:	68f9      	ldr	r1, [r7, #12]
 80040d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80040dc:	4013      	ands	r3, r2
 80040de:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040e6:	69da      	ldr	r2, [r3, #28]
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	f003 030f 	and.w	r3, r3, #15
 80040f0:	2101      	movs	r1, #1
 80040f2:	fa01 f303 	lsl.w	r3, r1, r3
 80040f6:	041b      	lsls	r3, r3, #16
 80040f8:	43db      	mvns	r3, r3
 80040fa:	68f9      	ldr	r1, [r7, #12]
 80040fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004100:	4013      	ands	r3, r2
 8004102:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	015a      	lsls	r2, r3, #5
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	4413      	add	r3, r2
 800410c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	0159      	lsls	r1, r3, #5
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	440b      	add	r3, r1
 800411a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800411e:	4619      	mov	r1, r3
 8004120:	4b05      	ldr	r3, [pc, #20]	; (8004138 <USB_DeactivateEndpoint+0x1b4>)
 8004122:	4013      	ands	r3, r2
 8004124:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004126:	2300      	movs	r3, #0
}
 8004128:	4618      	mov	r0, r3
 800412a:	3714      	adds	r7, #20
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr
 8004134:	ec337800 	.word	0xec337800
 8004138:	eff37800 	.word	0xeff37800

0800413c <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b086      	sub	sp, #24
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	781b      	ldrb	r3, [r3, #0]
 800414e:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	785b      	ldrb	r3, [r3, #1]
 8004154:	2b01      	cmp	r3, #1
 8004156:	f040 810a 	bne.w	800436e <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	699b      	ldr	r3, [r3, #24]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d132      	bne.n	80041c8 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	015a      	lsls	r2, r3, #5
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	4413      	add	r3, r2
 800416a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800416e:	691b      	ldr	r3, [r3, #16]
 8004170:	693a      	ldr	r2, [r7, #16]
 8004172:	0151      	lsls	r1, r2, #5
 8004174:	697a      	ldr	r2, [r7, #20]
 8004176:	440a      	add	r2, r1
 8004178:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800417c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004180:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004184:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	015a      	lsls	r2, r3, #5
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	4413      	add	r3, r2
 800418e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004192:	691b      	ldr	r3, [r3, #16]
 8004194:	693a      	ldr	r2, [r7, #16]
 8004196:	0151      	lsls	r1, r2, #5
 8004198:	697a      	ldr	r2, [r7, #20]
 800419a:	440a      	add	r2, r1
 800419c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041a0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80041a4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	015a      	lsls	r2, r3, #5
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	4413      	add	r3, r2
 80041ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041b2:	691b      	ldr	r3, [r3, #16]
 80041b4:	693a      	ldr	r2, [r7, #16]
 80041b6:	0151      	lsls	r1, r2, #5
 80041b8:	697a      	ldr	r2, [r7, #20]
 80041ba:	440a      	add	r2, r1
 80041bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041c0:	0cdb      	lsrs	r3, r3, #19
 80041c2:	04db      	lsls	r3, r3, #19
 80041c4:	6113      	str	r3, [r2, #16]
 80041c6:	e074      	b.n	80042b2 <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	015a      	lsls	r2, r3, #5
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	4413      	add	r3, r2
 80041d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041d4:	691b      	ldr	r3, [r3, #16]
 80041d6:	693a      	ldr	r2, [r7, #16]
 80041d8:	0151      	lsls	r1, r2, #5
 80041da:	697a      	ldr	r2, [r7, #20]
 80041dc:	440a      	add	r2, r1
 80041de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041e2:	0cdb      	lsrs	r3, r3, #19
 80041e4:	04db      	lsls	r3, r3, #19
 80041e6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	015a      	lsls	r2, r3, #5
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	4413      	add	r3, r2
 80041f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041f4:	691b      	ldr	r3, [r3, #16]
 80041f6:	693a      	ldr	r2, [r7, #16]
 80041f8:	0151      	lsls	r1, r2, #5
 80041fa:	697a      	ldr	r2, [r7, #20]
 80041fc:	440a      	add	r2, r1
 80041fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004202:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004206:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800420a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	015a      	lsls	r2, r3, #5
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	4413      	add	r3, r2
 8004214:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004218:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	6999      	ldr	r1, [r3, #24]
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	440b      	add	r3, r1
 8004224:	1e59      	subs	r1, r3, #1
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	68db      	ldr	r3, [r3, #12]
 800422a:	fbb1 f3f3 	udiv	r3, r1, r3
 800422e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004230:	4b9e      	ldr	r3, [pc, #632]	; (80044ac <USB_EPStartXfer+0x370>)
 8004232:	400b      	ands	r3, r1
 8004234:	6939      	ldr	r1, [r7, #16]
 8004236:	0148      	lsls	r0, r1, #5
 8004238:	6979      	ldr	r1, [r7, #20]
 800423a:	4401      	add	r1, r0
 800423c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004240:	4313      	orrs	r3, r2
 8004242:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	015a      	lsls	r2, r3, #5
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	4413      	add	r3, r2
 800424c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004250:	691a      	ldr	r2, [r3, #16]
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	699b      	ldr	r3, [r3, #24]
 8004256:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800425a:	6939      	ldr	r1, [r7, #16]
 800425c:	0148      	lsls	r0, r1, #5
 800425e:	6979      	ldr	r1, [r7, #20]
 8004260:	4401      	add	r1, r0
 8004262:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004266:	4313      	orrs	r3, r2
 8004268:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	791b      	ldrb	r3, [r3, #4]
 800426e:	2b01      	cmp	r3, #1
 8004270:	d11f      	bne.n	80042b2 <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	015a      	lsls	r2, r3, #5
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	4413      	add	r3, r2
 800427a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800427e:	691b      	ldr	r3, [r3, #16]
 8004280:	693a      	ldr	r2, [r7, #16]
 8004282:	0151      	lsls	r1, r2, #5
 8004284:	697a      	ldr	r2, [r7, #20]
 8004286:	440a      	add	r2, r1
 8004288:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800428c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004290:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	015a      	lsls	r2, r3, #5
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	4413      	add	r3, r2
 800429a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800429e:	691b      	ldr	r3, [r3, #16]
 80042a0:	693a      	ldr	r2, [r7, #16]
 80042a2:	0151      	lsls	r1, r2, #5
 80042a4:	697a      	ldr	r2, [r7, #20]
 80042a6:	440a      	add	r2, r1
 80042a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042ac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80042b0:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	015a      	lsls	r2, r3, #5
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	4413      	add	r3, r2
 80042ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	693a      	ldr	r2, [r7, #16]
 80042c2:	0151      	lsls	r1, r2, #5
 80042c4:	697a      	ldr	r2, [r7, #20]
 80042c6:	440a      	add	r2, r1
 80042c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042cc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80042d0:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	791b      	ldrb	r3, [r3, #4]
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d015      	beq.n	8004306 <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	699b      	ldr	r3, [r3, #24]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	f000 8106 	beq.w	80044f0 <USB_EPStartXfer+0x3b4>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	781b      	ldrb	r3, [r3, #0]
 80042f0:	f003 030f 	and.w	r3, r3, #15
 80042f4:	2101      	movs	r1, #1
 80042f6:	fa01 f303 	lsl.w	r3, r1, r3
 80042fa:	6979      	ldr	r1, [r7, #20]
 80042fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004300:	4313      	orrs	r3, r2
 8004302:	634b      	str	r3, [r1, #52]	; 0x34
 8004304:	e0f4      	b.n	80044f0 <USB_EPStartXfer+0x3b4>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004312:	2b00      	cmp	r3, #0
 8004314:	d110      	bne.n	8004338 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	015a      	lsls	r2, r3, #5
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	4413      	add	r3, r2
 800431e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	693a      	ldr	r2, [r7, #16]
 8004326:	0151      	lsls	r1, r2, #5
 8004328:	697a      	ldr	r2, [r7, #20]
 800432a:	440a      	add	r2, r1
 800432c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004330:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004334:	6013      	str	r3, [r2, #0]
 8004336:	e00f      	b.n	8004358 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	015a      	lsls	r2, r3, #5
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	4413      	add	r3, r2
 8004340:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	693a      	ldr	r2, [r7, #16]
 8004348:	0151      	lsls	r1, r2, #5
 800434a:	697a      	ldr	r2, [r7, #20]
 800434c:	440a      	add	r2, r1
 800434e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004352:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004356:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	6919      	ldr	r1, [r3, #16]
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	781a      	ldrb	r2, [r3, #0]
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	699b      	ldr	r3, [r3, #24]
 8004364:	b29b      	uxth	r3, r3
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f000 fa94 	bl	8004894 <USB_WritePacket>
 800436c:	e0c0      	b.n	80044f0 <USB_EPStartXfer+0x3b4>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	015a      	lsls	r2, r3, #5
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	4413      	add	r3, r2
 8004376:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800437a:	691b      	ldr	r3, [r3, #16]
 800437c:	693a      	ldr	r2, [r7, #16]
 800437e:	0151      	lsls	r1, r2, #5
 8004380:	697a      	ldr	r2, [r7, #20]
 8004382:	440a      	add	r2, r1
 8004384:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004388:	0cdb      	lsrs	r3, r3, #19
 800438a:	04db      	lsls	r3, r3, #19
 800438c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	015a      	lsls	r2, r3, #5
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	4413      	add	r3, r2
 8004396:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800439a:	691b      	ldr	r3, [r3, #16]
 800439c:	693a      	ldr	r2, [r7, #16]
 800439e:	0151      	lsls	r1, r2, #5
 80043a0:	697a      	ldr	r2, [r7, #20]
 80043a2:	440a      	add	r2, r1
 80043a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043a8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80043ac:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80043b0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	699b      	ldr	r3, [r3, #24]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d123      	bne.n	8004402 <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	015a      	lsls	r2, r3, #5
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	4413      	add	r3, r2
 80043c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043c6:	691a      	ldr	r2, [r3, #16]
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043d0:	6939      	ldr	r1, [r7, #16]
 80043d2:	0148      	lsls	r0, r1, #5
 80043d4:	6979      	ldr	r1, [r7, #20]
 80043d6:	4401      	add	r1, r0
 80043d8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80043dc:	4313      	orrs	r3, r2
 80043de:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	015a      	lsls	r2, r3, #5
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	4413      	add	r3, r2
 80043e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043ec:	691b      	ldr	r3, [r3, #16]
 80043ee:	693a      	ldr	r2, [r7, #16]
 80043f0:	0151      	lsls	r1, r2, #5
 80043f2:	697a      	ldr	r2, [r7, #20]
 80043f4:	440a      	add	r2, r1
 80043f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80043fe:	6113      	str	r3, [r2, #16]
 8004400:	e037      	b.n	8004472 <USB_EPStartXfer+0x336>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	699a      	ldr	r2, [r3, #24]
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	68db      	ldr	r3, [r3, #12]
 800440a:	4413      	add	r3, r2
 800440c:	1e5a      	subs	r2, r3, #1
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	fbb2 f3f3 	udiv	r3, r2, r3
 8004416:	81fb      	strh	r3, [r7, #14]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	89fa      	ldrh	r2, [r7, #14]
 800441e:	fb03 f202 	mul.w	r2, r3, r2
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	015a      	lsls	r2, r3, #5
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	4413      	add	r3, r2
 800442e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004432:	691a      	ldr	r2, [r3, #16]
 8004434:	89fb      	ldrh	r3, [r7, #14]
 8004436:	04d9      	lsls	r1, r3, #19
 8004438:	4b1c      	ldr	r3, [pc, #112]	; (80044ac <USB_EPStartXfer+0x370>)
 800443a:	400b      	ands	r3, r1
 800443c:	6939      	ldr	r1, [r7, #16]
 800443e:	0148      	lsls	r0, r1, #5
 8004440:	6979      	ldr	r1, [r7, #20]
 8004442:	4401      	add	r1, r0
 8004444:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004448:	4313      	orrs	r3, r2
 800444a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	015a      	lsls	r2, r3, #5
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	4413      	add	r3, r2
 8004454:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004458:	691a      	ldr	r2, [r3, #16]
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	69db      	ldr	r3, [r3, #28]
 800445e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004462:	6939      	ldr	r1, [r7, #16]
 8004464:	0148      	lsls	r0, r1, #5
 8004466:	6979      	ldr	r1, [r7, #20]
 8004468:	4401      	add	r1, r0
 800446a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800446e:	4313      	orrs	r3, r2
 8004470:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	791b      	ldrb	r3, [r3, #4]
 8004476:	2b01      	cmp	r3, #1
 8004478:	d12a      	bne.n	80044d0 <USB_EPStartXfer+0x394>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004486:	2b00      	cmp	r3, #0
 8004488:	d112      	bne.n	80044b0 <USB_EPStartXfer+0x374>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	015a      	lsls	r2, r3, #5
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	4413      	add	r3, r2
 8004492:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	693a      	ldr	r2, [r7, #16]
 800449a:	0151      	lsls	r1, r2, #5
 800449c:	697a      	ldr	r2, [r7, #20]
 800449e:	440a      	add	r2, r1
 80044a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044a4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80044a8:	6013      	str	r3, [r2, #0]
 80044aa:	e011      	b.n	80044d0 <USB_EPStartXfer+0x394>
 80044ac:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	015a      	lsls	r2, r3, #5
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	4413      	add	r3, r2
 80044b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	693a      	ldr	r2, [r7, #16]
 80044c0:	0151      	lsls	r1, r2, #5
 80044c2:	697a      	ldr	r2, [r7, #20]
 80044c4:	440a      	add	r2, r1
 80044c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044ce:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	015a      	lsls	r2, r3, #5
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	4413      	add	r3, r2
 80044d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	693a      	ldr	r2, [r7, #16]
 80044e0:	0151      	lsls	r1, r2, #5
 80044e2:	697a      	ldr	r2, [r7, #20]
 80044e4:	440a      	add	r2, r1
 80044e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044ea:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80044ee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80044f0:	2300      	movs	r3, #0
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3718      	adds	r7, #24
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	bf00      	nop

080044fc <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b085      	sub	sp, #20
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	781b      	ldrb	r3, [r3, #0]
 800450e:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	785b      	ldrb	r3, [r3, #1]
 8004514:	2b01      	cmp	r3, #1
 8004516:	f040 80ab 	bne.w	8004670 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	699b      	ldr	r3, [r3, #24]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d132      	bne.n	8004588 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	015a      	lsls	r2, r3, #5
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	4413      	add	r3, r2
 800452a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800452e:	691b      	ldr	r3, [r3, #16]
 8004530:	68ba      	ldr	r2, [r7, #8]
 8004532:	0151      	lsls	r1, r2, #5
 8004534:	68fa      	ldr	r2, [r7, #12]
 8004536:	440a      	add	r2, r1
 8004538:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800453c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004540:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004544:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	015a      	lsls	r2, r3, #5
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	4413      	add	r3, r2
 800454e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004552:	691b      	ldr	r3, [r3, #16]
 8004554:	68ba      	ldr	r2, [r7, #8]
 8004556:	0151      	lsls	r1, r2, #5
 8004558:	68fa      	ldr	r2, [r7, #12]
 800455a:	440a      	add	r2, r1
 800455c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004560:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004564:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	015a      	lsls	r2, r3, #5
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	4413      	add	r3, r2
 800456e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004572:	691b      	ldr	r3, [r3, #16]
 8004574:	68ba      	ldr	r2, [r7, #8]
 8004576:	0151      	lsls	r1, r2, #5
 8004578:	68fa      	ldr	r2, [r7, #12]
 800457a:	440a      	add	r2, r1
 800457c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004580:	0cdb      	lsrs	r3, r3, #19
 8004582:	04db      	lsls	r3, r3, #19
 8004584:	6113      	str	r3, [r2, #16]
 8004586:	e04e      	b.n	8004626 <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	015a      	lsls	r2, r3, #5
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	4413      	add	r3, r2
 8004590:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004594:	691b      	ldr	r3, [r3, #16]
 8004596:	68ba      	ldr	r2, [r7, #8]
 8004598:	0151      	lsls	r1, r2, #5
 800459a:	68fa      	ldr	r2, [r7, #12]
 800459c:	440a      	add	r2, r1
 800459e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045a2:	0cdb      	lsrs	r3, r3, #19
 80045a4:	04db      	lsls	r3, r3, #19
 80045a6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	015a      	lsls	r2, r3, #5
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	4413      	add	r3, r2
 80045b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045b4:	691b      	ldr	r3, [r3, #16]
 80045b6:	68ba      	ldr	r2, [r7, #8]
 80045b8:	0151      	lsls	r1, r2, #5
 80045ba:	68fa      	ldr	r2, [r7, #12]
 80045bc:	440a      	add	r2, r1
 80045be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045c2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80045c6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80045ca:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	699a      	ldr	r2, [r3, #24]
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	68db      	ldr	r3, [r3, #12]
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d903      	bls.n	80045e0 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	68da      	ldr	r2, [r3, #12]
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	015a      	lsls	r2, r3, #5
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	4413      	add	r3, r2
 80045e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045ec:	691b      	ldr	r3, [r3, #16]
 80045ee:	68ba      	ldr	r2, [r7, #8]
 80045f0:	0151      	lsls	r1, r2, #5
 80045f2:	68fa      	ldr	r2, [r7, #12]
 80045f4:	440a      	add	r2, r1
 80045f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80045fe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	015a      	lsls	r2, r3, #5
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	4413      	add	r3, r2
 8004608:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800460c:	691a      	ldr	r2, [r3, #16]
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	699b      	ldr	r3, [r3, #24]
 8004612:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004616:	68b9      	ldr	r1, [r7, #8]
 8004618:	0148      	lsls	r0, r1, #5
 800461a:	68f9      	ldr	r1, [r7, #12]
 800461c:	4401      	add	r1, r0
 800461e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004622:	4313      	orrs	r3, r2
 8004624:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	015a      	lsls	r2, r3, #5
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	4413      	add	r3, r2
 800462e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	68ba      	ldr	r2, [r7, #8]
 8004636:	0151      	lsls	r1, r2, #5
 8004638:	68fa      	ldr	r2, [r7, #12]
 800463a:	440a      	add	r2, r1
 800463c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004640:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004644:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	699b      	ldr	r3, [r3, #24]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d071      	beq.n	8004732 <USB_EP0StartXfer+0x236>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004654:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	781b      	ldrb	r3, [r3, #0]
 800465a:	f003 030f 	and.w	r3, r3, #15
 800465e:	2101      	movs	r1, #1
 8004660:	fa01 f303 	lsl.w	r3, r1, r3
 8004664:	68f9      	ldr	r1, [r7, #12]
 8004666:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800466a:	4313      	orrs	r3, r2
 800466c:	634b      	str	r3, [r1, #52]	; 0x34
 800466e:	e060      	b.n	8004732 <USB_EP0StartXfer+0x236>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	015a      	lsls	r2, r3, #5
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	4413      	add	r3, r2
 8004678:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800467c:	691b      	ldr	r3, [r3, #16]
 800467e:	68ba      	ldr	r2, [r7, #8]
 8004680:	0151      	lsls	r1, r2, #5
 8004682:	68fa      	ldr	r2, [r7, #12]
 8004684:	440a      	add	r2, r1
 8004686:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800468a:	0cdb      	lsrs	r3, r3, #19
 800468c:	04db      	lsls	r3, r3, #19
 800468e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	015a      	lsls	r2, r3, #5
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	4413      	add	r3, r2
 8004698:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800469c:	691b      	ldr	r3, [r3, #16]
 800469e:	68ba      	ldr	r2, [r7, #8]
 80046a0:	0151      	lsls	r1, r2, #5
 80046a2:	68fa      	ldr	r2, [r7, #12]
 80046a4:	440a      	add	r2, r1
 80046a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046aa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80046ae:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80046b2:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	699b      	ldr	r3, [r3, #24]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d003      	beq.n	80046c4 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	68da      	ldr	r2, [r3, #12]
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	68da      	ldr	r2, [r3, #12]
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	015a      	lsls	r2, r3, #5
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	4413      	add	r3, r2
 80046d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046d8:	691b      	ldr	r3, [r3, #16]
 80046da:	68ba      	ldr	r2, [r7, #8]
 80046dc:	0151      	lsls	r1, r2, #5
 80046de:	68fa      	ldr	r2, [r7, #12]
 80046e0:	440a      	add	r2, r1
 80046e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046e6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80046ea:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	015a      	lsls	r2, r3, #5
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	4413      	add	r3, r2
 80046f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046f8:	691a      	ldr	r2, [r3, #16]
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	69db      	ldr	r3, [r3, #28]
 80046fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004702:	68b9      	ldr	r1, [r7, #8]
 8004704:	0148      	lsls	r0, r1, #5
 8004706:	68f9      	ldr	r1, [r7, #12]
 8004708:	4401      	add	r1, r0
 800470a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800470e:	4313      	orrs	r3, r2
 8004710:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	015a      	lsls	r2, r3, #5
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	4413      	add	r3, r2
 800471a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	68ba      	ldr	r2, [r7, #8]
 8004722:	0151      	lsls	r1, r2, #5
 8004724:	68fa      	ldr	r2, [r7, #12]
 8004726:	440a      	add	r2, r1
 8004728:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800472c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004730:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004732:	2300      	movs	r3, #0
}
 8004734:	4618      	mov	r0, r3
 8004736:	3714      	adds	r7, #20
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr

08004740 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004740:	b480      	push	{r7}
 8004742:	b087      	sub	sp, #28
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
 8004748:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800474a:	2300      	movs	r3, #0
 800474c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800474e:	2300      	movs	r3, #0
 8004750:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	785b      	ldrb	r3, [r3, #1]
 800475a:	2b01      	cmp	r3, #1
 800475c:	d14a      	bne.n	80047f4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	781b      	ldrb	r3, [r3, #0]
 8004762:	015a      	lsls	r2, r3, #5
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	4413      	add	r3, r2
 8004768:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004772:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004776:	f040 8086 	bne.w	8004886 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	781b      	ldrb	r3, [r3, #0]
 800477e:	015a      	lsls	r2, r3, #5
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	4413      	add	r3, r2
 8004784:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	683a      	ldr	r2, [r7, #0]
 800478c:	7812      	ldrb	r2, [r2, #0]
 800478e:	0151      	lsls	r1, r2, #5
 8004790:	693a      	ldr	r2, [r7, #16]
 8004792:	440a      	add	r2, r1
 8004794:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004798:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800479c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	781b      	ldrb	r3, [r3, #0]
 80047a2:	015a      	lsls	r2, r3, #5
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	4413      	add	r3, r2
 80047a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	683a      	ldr	r2, [r7, #0]
 80047b0:	7812      	ldrb	r2, [r2, #0]
 80047b2:	0151      	lsls	r1, r2, #5
 80047b4:	693a      	ldr	r2, [r7, #16]
 80047b6:	440a      	add	r2, r1
 80047b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047bc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80047c0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	3301      	adds	r3, #1
 80047c6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f242 7210 	movw	r2, #10000	; 0x2710
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d902      	bls.n	80047d8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	75fb      	strb	r3, [r7, #23]
          break;
 80047d6:	e056      	b.n	8004886 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	781b      	ldrb	r3, [r3, #0]
 80047dc:	015a      	lsls	r2, r3, #5
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	4413      	add	r3, r2
 80047e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80047ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80047f0:	d0e7      	beq.n	80047c2 <USB_EPStopXfer+0x82>
 80047f2:	e048      	b.n	8004886 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	781b      	ldrb	r3, [r3, #0]
 80047f8:	015a      	lsls	r2, r3, #5
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	4413      	add	r3, r2
 80047fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004808:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800480c:	d13b      	bne.n	8004886 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	781b      	ldrb	r3, [r3, #0]
 8004812:	015a      	lsls	r2, r3, #5
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	4413      	add	r3, r2
 8004818:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	683a      	ldr	r2, [r7, #0]
 8004820:	7812      	ldrb	r2, [r2, #0]
 8004822:	0151      	lsls	r1, r2, #5
 8004824:	693a      	ldr	r2, [r7, #16]
 8004826:	440a      	add	r2, r1
 8004828:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800482c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004830:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	781b      	ldrb	r3, [r3, #0]
 8004836:	015a      	lsls	r2, r3, #5
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	4413      	add	r3, r2
 800483c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	683a      	ldr	r2, [r7, #0]
 8004844:	7812      	ldrb	r2, [r2, #0]
 8004846:	0151      	lsls	r1, r2, #5
 8004848:	693a      	ldr	r2, [r7, #16]
 800484a:	440a      	add	r2, r1
 800484c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004850:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004854:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	3301      	adds	r3, #1
 800485a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f242 7210 	movw	r2, #10000	; 0x2710
 8004862:	4293      	cmp	r3, r2
 8004864:	d902      	bls.n	800486c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	75fb      	strb	r3, [r7, #23]
          break;
 800486a:	e00c      	b.n	8004886 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	781b      	ldrb	r3, [r3, #0]
 8004870:	015a      	lsls	r2, r3, #5
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	4413      	add	r3, r2
 8004876:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004880:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004884:	d0e7      	beq.n	8004856 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004886:	7dfb      	ldrb	r3, [r7, #23]
}
 8004888:	4618      	mov	r0, r3
 800488a:	371c      	adds	r7, #28
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr

08004894 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8004894:	b480      	push	{r7}
 8004896:	b089      	sub	sp, #36	; 0x24
 8004898:	af00      	add	r7, sp, #0
 800489a:	60f8      	str	r0, [r7, #12]
 800489c:	60b9      	str	r1, [r7, #8]
 800489e:	4611      	mov	r1, r2
 80048a0:	461a      	mov	r2, r3
 80048a2:	460b      	mov	r3, r1
 80048a4:	71fb      	strb	r3, [r7, #7]
 80048a6:	4613      	mov	r3, r2
 80048a8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 80048b2:	88bb      	ldrh	r3, [r7, #4]
 80048b4:	3303      	adds	r3, #3
 80048b6:	089b      	lsrs	r3, r3, #2
 80048b8:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 80048ba:	2300      	movs	r3, #0
 80048bc:	61bb      	str	r3, [r7, #24]
 80048be:	e018      	b.n	80048f2 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80048c0:	79fb      	ldrb	r3, [r7, #7]
 80048c2:	031a      	lsls	r2, r3, #12
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	4413      	add	r3, r2
 80048c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048cc:	461a      	mov	r2, r3
 80048ce:	69fb      	ldr	r3, [r7, #28]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	6013      	str	r3, [r2, #0]
    pSrc++;
 80048d4:	69fb      	ldr	r3, [r7, #28]
 80048d6:	3301      	adds	r3, #1
 80048d8:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80048da:	69fb      	ldr	r3, [r7, #28]
 80048dc:	3301      	adds	r3, #1
 80048de:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80048e0:	69fb      	ldr	r3, [r7, #28]
 80048e2:	3301      	adds	r3, #1
 80048e4:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80048e6:	69fb      	ldr	r3, [r7, #28]
 80048e8:	3301      	adds	r3, #1
 80048ea:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80048ec:	69bb      	ldr	r3, [r7, #24]
 80048ee:	3301      	adds	r3, #1
 80048f0:	61bb      	str	r3, [r7, #24]
 80048f2:	69ba      	ldr	r2, [r7, #24]
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	429a      	cmp	r2, r3
 80048f8:	d3e2      	bcc.n	80048c0 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 80048fa:	2300      	movs	r3, #0
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	3724      	adds	r7, #36	; 0x24
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr

08004908 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004908:	b480      	push	{r7}
 800490a:	b08b      	sub	sp, #44	; 0x2c
 800490c:	af00      	add	r7, sp, #0
 800490e:	60f8      	str	r0, [r7, #12]
 8004910:	60b9      	str	r1, [r7, #8]
 8004912:	4613      	mov	r3, r2
 8004914:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800491e:	88fb      	ldrh	r3, [r7, #6]
 8004920:	089b      	lsrs	r3, r3, #2
 8004922:	b29b      	uxth	r3, r3
 8004924:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004926:	88fb      	ldrh	r3, [r7, #6]
 8004928:	f003 0303 	and.w	r3, r3, #3
 800492c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800492e:	2300      	movs	r3, #0
 8004930:	623b      	str	r3, [r7, #32]
 8004932:	e014      	b.n	800495e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004934:	69bb      	ldr	r3, [r7, #24]
 8004936:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800493e:	601a      	str	r2, [r3, #0]
    pDest++;
 8004940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004942:	3301      	adds	r3, #1
 8004944:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004948:	3301      	adds	r3, #1
 800494a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800494c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494e:	3301      	adds	r3, #1
 8004950:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004954:	3301      	adds	r3, #1
 8004956:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004958:	6a3b      	ldr	r3, [r7, #32]
 800495a:	3301      	adds	r3, #1
 800495c:	623b      	str	r3, [r7, #32]
 800495e:	6a3a      	ldr	r2, [r7, #32]
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	429a      	cmp	r2, r3
 8004964:	d3e6      	bcc.n	8004934 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004966:	8bfb      	ldrh	r3, [r7, #30]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d01e      	beq.n	80049aa <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800496c:	2300      	movs	r3, #0
 800496e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004970:	69bb      	ldr	r3, [r7, #24]
 8004972:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004976:	461a      	mov	r2, r3
 8004978:	f107 0310 	add.w	r3, r7, #16
 800497c:	6812      	ldr	r2, [r2, #0]
 800497e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004980:	693a      	ldr	r2, [r7, #16]
 8004982:	6a3b      	ldr	r3, [r7, #32]
 8004984:	b2db      	uxtb	r3, r3
 8004986:	00db      	lsls	r3, r3, #3
 8004988:	fa22 f303 	lsr.w	r3, r2, r3
 800498c:	b2da      	uxtb	r2, r3
 800498e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004990:	701a      	strb	r2, [r3, #0]
      i++;
 8004992:	6a3b      	ldr	r3, [r7, #32]
 8004994:	3301      	adds	r3, #1
 8004996:	623b      	str	r3, [r7, #32]
      pDest++;
 8004998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499a:	3301      	adds	r3, #1
 800499c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800499e:	8bfb      	ldrh	r3, [r7, #30]
 80049a0:	3b01      	subs	r3, #1
 80049a2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80049a4:	8bfb      	ldrh	r3, [r7, #30]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d1ea      	bne.n	8004980 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80049aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	372c      	adds	r7, #44	; 0x2c
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr

080049b8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b085      	sub	sp, #20
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
 80049c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	781b      	ldrb	r3, [r3, #0]
 80049ca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	785b      	ldrb	r3, [r3, #1]
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d12c      	bne.n	8004a2e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	015a      	lsls	r2, r3, #5
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	4413      	add	r3, r2
 80049dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	db12      	blt.n	8004a0c <USB_EPSetStall+0x54>
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d00f      	beq.n	8004a0c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	015a      	lsls	r2, r3, #5
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	4413      	add	r3, r2
 80049f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	68ba      	ldr	r2, [r7, #8]
 80049fc:	0151      	lsls	r1, r2, #5
 80049fe:	68fa      	ldr	r2, [r7, #12]
 8004a00:	440a      	add	r2, r1
 8004a02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a06:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004a0a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	015a      	lsls	r2, r3, #5
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	4413      	add	r3, r2
 8004a14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	68ba      	ldr	r2, [r7, #8]
 8004a1c:	0151      	lsls	r1, r2, #5
 8004a1e:	68fa      	ldr	r2, [r7, #12]
 8004a20:	440a      	add	r2, r1
 8004a22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a26:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004a2a:	6013      	str	r3, [r2, #0]
 8004a2c:	e02b      	b.n	8004a86 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	015a      	lsls	r2, r3, #5
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	4413      	add	r3, r2
 8004a36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	db12      	blt.n	8004a66 <USB_EPSetStall+0xae>
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d00f      	beq.n	8004a66 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	015a      	lsls	r2, r3, #5
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	4413      	add	r3, r2
 8004a4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	68ba      	ldr	r2, [r7, #8]
 8004a56:	0151      	lsls	r1, r2, #5
 8004a58:	68fa      	ldr	r2, [r7, #12]
 8004a5a:	440a      	add	r2, r1
 8004a5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a60:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004a64:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	015a      	lsls	r2, r3, #5
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	4413      	add	r3, r2
 8004a6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	68ba      	ldr	r2, [r7, #8]
 8004a76:	0151      	lsls	r1, r2, #5
 8004a78:	68fa      	ldr	r2, [r7, #12]
 8004a7a:	440a      	add	r2, r1
 8004a7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a80:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004a84:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004a86:	2300      	movs	r3, #0
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	3714      	adds	r7, #20
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a92:	4770      	bx	lr

08004a94 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b085      	sub	sp, #20
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	781b      	ldrb	r3, [r3, #0]
 8004aa6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	785b      	ldrb	r3, [r3, #1]
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d128      	bne.n	8004b02 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	015a      	lsls	r2, r3, #5
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	4413      	add	r3, r2
 8004ab8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	68ba      	ldr	r2, [r7, #8]
 8004ac0:	0151      	lsls	r1, r2, #5
 8004ac2:	68fa      	ldr	r2, [r7, #12]
 8004ac4:	440a      	add	r2, r1
 8004ac6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004aca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004ace:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	791b      	ldrb	r3, [r3, #4]
 8004ad4:	2b03      	cmp	r3, #3
 8004ad6:	d003      	beq.n	8004ae0 <USB_EPClearStall+0x4c>
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	791b      	ldrb	r3, [r3, #4]
 8004adc:	2b02      	cmp	r3, #2
 8004ade:	d138      	bne.n	8004b52 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	015a      	lsls	r2, r3, #5
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	4413      	add	r3, r2
 8004ae8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	68ba      	ldr	r2, [r7, #8]
 8004af0:	0151      	lsls	r1, r2, #5
 8004af2:	68fa      	ldr	r2, [r7, #12]
 8004af4:	440a      	add	r2, r1
 8004af6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004afa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004afe:	6013      	str	r3, [r2, #0]
 8004b00:	e027      	b.n	8004b52 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	015a      	lsls	r2, r3, #5
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	4413      	add	r3, r2
 8004b0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	68ba      	ldr	r2, [r7, #8]
 8004b12:	0151      	lsls	r1, r2, #5
 8004b14:	68fa      	ldr	r2, [r7, #12]
 8004b16:	440a      	add	r2, r1
 8004b18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b1c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004b20:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	791b      	ldrb	r3, [r3, #4]
 8004b26:	2b03      	cmp	r3, #3
 8004b28:	d003      	beq.n	8004b32 <USB_EPClearStall+0x9e>
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	791b      	ldrb	r3, [r3, #4]
 8004b2e:	2b02      	cmp	r3, #2
 8004b30:	d10f      	bne.n	8004b52 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	015a      	lsls	r2, r3, #5
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	4413      	add	r3, r2
 8004b3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	68ba      	ldr	r2, [r7, #8]
 8004b42:	0151      	lsls	r1, r2, #5
 8004b44:	68fa      	ldr	r2, [r7, #12]
 8004b46:	440a      	add	r2, r1
 8004b48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b50:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004b52:	2300      	movs	r3, #0
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3714      	adds	r7, #20
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5e:	4770      	bx	lr

08004b60 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b085      	sub	sp, #20
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	460b      	mov	r3, r1
 8004b6a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	68fa      	ldr	r2, [r7, #12]
 8004b7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b7e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004b82:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	78fb      	ldrb	r3, [r7, #3]
 8004b8e:	011b      	lsls	r3, r3, #4
 8004b90:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004b94:	68f9      	ldr	r1, [r7, #12]
 8004b96:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004b9e:	2300      	movs	r3, #0
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3714      	adds	r7, #20
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr

08004bac <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b085      	sub	sp, #20
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	68fa      	ldr	r2, [r7, #12]
 8004bc2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004bc6:	f023 0303 	bic.w	r3, r3, #3
 8004bca:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	68fa      	ldr	r2, [r7, #12]
 8004bd6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004bda:	f023 0302 	bic.w	r3, r3, #2
 8004bde:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004be0:	2300      	movs	r3, #0
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3714      	adds	r7, #20
 8004be6:	46bd      	mov	sp, r7
 8004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bec:	4770      	bx	lr

08004bee <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004bee:	b480      	push	{r7}
 8004bf0:	b085      	sub	sp, #20
 8004bf2:	af00      	add	r7, sp, #0
 8004bf4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	68fa      	ldr	r2, [r7, #12]
 8004c04:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004c08:	f023 0303 	bic.w	r3, r3, #3
 8004c0c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	68fa      	ldr	r2, [r7, #12]
 8004c18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c1c:	f043 0302 	orr.w	r3, r3, #2
 8004c20:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004c22:	2300      	movs	r3, #0
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	3714      	adds	r7, #20
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2e:	4770      	bx	lr

08004c30 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b085      	sub	sp, #20
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	695b      	ldr	r3, [r3, #20]
 8004c3c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	699b      	ldr	r3, [r3, #24]
 8004c42:	68fa      	ldr	r2, [r7, #12]
 8004c44:	4013      	ands	r3, r2
 8004c46:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004c48:	68fb      	ldr	r3, [r7, #12]
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3714      	adds	r7, #20
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr

08004c56 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004c56:	b480      	push	{r7}
 8004c58:	b085      	sub	sp, #20
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c68:	699b      	ldr	r3, [r3, #24]
 8004c6a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c72:	69db      	ldr	r3, [r3, #28]
 8004c74:	68ba      	ldr	r2, [r7, #8]
 8004c76:	4013      	ands	r3, r2
 8004c78:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	0c1b      	lsrs	r3, r3, #16
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3714      	adds	r7, #20
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr

08004c8a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004c8a:	b480      	push	{r7}
 8004c8c:	b085      	sub	sp, #20
 8004c8e:	af00      	add	r7, sp, #0
 8004c90:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c9c:	699b      	ldr	r3, [r3, #24]
 8004c9e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ca6:	69db      	ldr	r3, [r3, #28]
 8004ca8:	68ba      	ldr	r2, [r7, #8]
 8004caa:	4013      	ands	r3, r2
 8004cac:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	b29b      	uxth	r3, r3
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3714      	adds	r7, #20
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbc:	4770      	bx	lr

08004cbe <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004cbe:	b480      	push	{r7}
 8004cc0:	b085      	sub	sp, #20
 8004cc2:	af00      	add	r7, sp, #0
 8004cc4:	6078      	str	r0, [r7, #4]
 8004cc6:	460b      	mov	r3, r1
 8004cc8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004cce:	78fb      	ldrb	r3, [r7, #3]
 8004cd0:	015a      	lsls	r2, r3, #5
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	4413      	add	r3, r2
 8004cd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ce4:	695b      	ldr	r3, [r3, #20]
 8004ce6:	68ba      	ldr	r2, [r7, #8]
 8004ce8:	4013      	ands	r3, r2
 8004cea:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004cec:	68bb      	ldr	r3, [r7, #8]
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3714      	adds	r7, #20
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf8:	4770      	bx	lr

08004cfa <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004cfa:	b480      	push	{r7}
 8004cfc:	b087      	sub	sp, #28
 8004cfe:	af00      	add	r7, sp, #0
 8004d00:	6078      	str	r0, [r7, #4]
 8004d02:	460b      	mov	r3, r1
 8004d04:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d10:	691b      	ldr	r3, [r3, #16]
 8004d12:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d1c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004d1e:	78fb      	ldrb	r3, [r7, #3]
 8004d20:	f003 030f 	and.w	r3, r3, #15
 8004d24:	68fa      	ldr	r2, [r7, #12]
 8004d26:	fa22 f303 	lsr.w	r3, r2, r3
 8004d2a:	01db      	lsls	r3, r3, #7
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	693a      	ldr	r2, [r7, #16]
 8004d30:	4313      	orrs	r3, r2
 8004d32:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004d34:	78fb      	ldrb	r3, [r7, #3]
 8004d36:	015a      	lsls	r2, r3, #5
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	4413      	add	r3, r2
 8004d3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	693a      	ldr	r2, [r7, #16]
 8004d44:	4013      	ands	r3, r2
 8004d46:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004d48:	68bb      	ldr	r3, [r7, #8]
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	371c      	adds	r7, #28
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d54:	4770      	bx	lr

08004d56 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004d56:	b480      	push	{r7}
 8004d58:	b083      	sub	sp, #12
 8004d5a:	af00      	add	r7, sp, #0
 8004d5c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	695b      	ldr	r3, [r3, #20]
 8004d62:	f003 0301 	and.w	r3, r3, #1
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	370c      	adds	r7, #12
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr

08004d72 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004d72:	b480      	push	{r7}
 8004d74:	b085      	sub	sp, #20
 8004d76:	af00      	add	r7, sp, #0
 8004d78:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	68fa      	ldr	r2, [r7, #12]
 8004d88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d8c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004d90:	f023 0307 	bic.w	r3, r3, #7
 8004d94:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	68fa      	ldr	r2, [r7, #12]
 8004da0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004da4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004da8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004daa:	2300      	movs	r3, #0
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	3714      	adds	r7, #20
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr

08004db8 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b085      	sub	sp, #20
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
 8004dc0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	333c      	adds	r3, #60	; 0x3c
 8004dca:	3304      	adds	r3, #4
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	4a1c      	ldr	r2, [pc, #112]	; (8004e44 <USB_EP0_OutStart+0x8c>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d90a      	bls.n	8004dee <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004de4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004de8:	d101      	bne.n	8004dee <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8004dea:	2300      	movs	r3, #0
 8004dec:	e024      	b.n	8004e38 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004df4:	461a      	mov	r2, r3
 8004df6:	2300      	movs	r3, #0
 8004df8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e00:	691b      	ldr	r3, [r3, #16]
 8004e02:	68fa      	ldr	r2, [r7, #12]
 8004e04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e08:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e0c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e14:	691b      	ldr	r3, [r3, #16]
 8004e16:	68fa      	ldr	r2, [r7, #12]
 8004e18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e1c:	f043 0318 	orr.w	r3, r3, #24
 8004e20:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e28:	691b      	ldr	r3, [r3, #16]
 8004e2a:	68fa      	ldr	r2, [r7, #12]
 8004e2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e30:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004e34:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8004e36:	2300      	movs	r3, #0
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3714      	adds	r7, #20
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr
 8004e44:	4f54300a 	.word	0x4f54300a

08004e48 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b085      	sub	sp, #20
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004e50:	2300      	movs	r3, #0
 8004e52:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	3301      	adds	r3, #1
 8004e58:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	4a13      	ldr	r2, [pc, #76]	; (8004eac <USB_CoreReset+0x64>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d901      	bls.n	8004e66 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004e62:	2303      	movs	r3, #3
 8004e64:	e01b      	b.n	8004e9e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	691b      	ldr	r3, [r3, #16]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	daf2      	bge.n	8004e54 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	691b      	ldr	r3, [r3, #16]
 8004e76:	f043 0201 	orr.w	r2, r3, #1
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	3301      	adds	r3, #1
 8004e82:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	4a09      	ldr	r2, [pc, #36]	; (8004eac <USB_CoreReset+0x64>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d901      	bls.n	8004e90 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004e8c:	2303      	movs	r3, #3
 8004e8e:	e006      	b.n	8004e9e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	691b      	ldr	r3, [r3, #16]
 8004e94:	f003 0301 	and.w	r3, r3, #1
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d0f0      	beq.n	8004e7e <USB_CoreReset+0x36>

  return HAL_OK;
 8004e9c:	2300      	movs	r3, #0
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3714      	adds	r7, #20
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea8:	4770      	bx	lr
 8004eaa:	bf00      	nop
 8004eac:	00030d40 	.word	0x00030d40

08004eb0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b084      	sub	sp, #16
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
 8004eb8:	460b      	mov	r3, r1
 8004eba:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004ebc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004ec0:	f002 faf8 	bl	80074b4 <USBD_static_malloc>
 8004ec4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d105      	bne.n	8004ed8 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8004ed4:	2302      	movs	r3, #2
 8004ed6:	e066      	b.n	8004fa6 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	68fa      	ldr	r2, [r7, #12]
 8004edc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	7c1b      	ldrb	r3, [r3, #16]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d119      	bne.n	8004f1c <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004ee8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004eec:	2202      	movs	r2, #2
 8004eee:	2181      	movs	r1, #129	; 0x81
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	f002 f8cb 	bl	800708c <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2201      	movs	r2, #1
 8004efa:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004efc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f00:	2202      	movs	r2, #2
 8004f02:	2101      	movs	r1, #1
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	f002 f8c1 	bl	800708c <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2210      	movs	r2, #16
 8004f16:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8004f1a:	e016      	b.n	8004f4a <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004f1c:	2340      	movs	r3, #64	; 0x40
 8004f1e:	2202      	movs	r2, #2
 8004f20:	2181      	movs	r1, #129	; 0x81
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f002 f8b2 	bl	800708c <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004f2e:	2340      	movs	r3, #64	; 0x40
 8004f30:	2202      	movs	r2, #2
 8004f32:	2101      	movs	r1, #1
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f002 f8a9 	bl	800708c <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2210      	movs	r2, #16
 8004f46:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004f4a:	2308      	movs	r3, #8
 8004f4c:	2203      	movs	r2, #3
 8004f4e:	2182      	movs	r1, #130	; 0x82
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	f002 f89b 	bl	800708c <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2201      	movs	r2, #1
 8004f5a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2200      	movs	r2, #0
 8004f74:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	7c1b      	ldrb	r3, [r3, #16]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d109      	bne.n	8004f94 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004f86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f8a:	2101      	movs	r1, #1
 8004f8c:	6878      	ldr	r0, [r7, #4]
 8004f8e:	f002 f9f7 	bl	8007380 <USBD_LL_PrepareReceive>
 8004f92:	e007      	b.n	8004fa4 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004f9a:	2340      	movs	r3, #64	; 0x40
 8004f9c:	2101      	movs	r1, #1
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f002 f9ee 	bl	8007380 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004fa4:	2300      	movs	r3, #0
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3710      	adds	r7, #16
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}

08004fae <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004fae:	b580      	push	{r7, lr}
 8004fb0:	b082      	sub	sp, #8
 8004fb2:	af00      	add	r7, sp, #0
 8004fb4:	6078      	str	r0, [r7, #4]
 8004fb6:	460b      	mov	r3, r1
 8004fb8:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8004fba:	2181      	movs	r1, #129	; 0x81
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	f002 f8a3 	bl	8007108 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004fc8:	2101      	movs	r1, #1
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f002 f89c 	bl	8007108 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8004fd8:	2182      	movs	r1, #130	; 0x82
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f002 f894 	bl	8007108 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2200      	movs	r2, #0
 8004fec:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d00e      	beq.n	8005018 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800500a:	4618      	mov	r0, r3
 800500c:	f002 fa60 	bl	80074d0 <USBD_static_free>
    pdev->pClassData = NULL;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2200      	movs	r2, #0
 8005014:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005018:	2300      	movs	r3, #0
}
 800501a:	4618      	mov	r0, r3
 800501c:	3708      	adds	r7, #8
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}
	...

08005024 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b086      	sub	sp, #24
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005034:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005036:	2300      	movs	r3, #0
 8005038:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800503a:	2300      	movs	r3, #0
 800503c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800503e:	2300      	movs	r3, #0
 8005040:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d101      	bne.n	800504c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8005048:	2303      	movs	r3, #3
 800504a:	e0af      	b.n	80051ac <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	781b      	ldrb	r3, [r3, #0]
 8005050:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005054:	2b00      	cmp	r3, #0
 8005056:	d03f      	beq.n	80050d8 <USBD_CDC_Setup+0xb4>
 8005058:	2b20      	cmp	r3, #32
 800505a:	f040 809f 	bne.w	800519c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	88db      	ldrh	r3, [r3, #6]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d02e      	beq.n	80050c4 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	781b      	ldrb	r3, [r3, #0]
 800506a:	b25b      	sxtb	r3, r3
 800506c:	2b00      	cmp	r3, #0
 800506e:	da16      	bge.n	800509e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	683a      	ldr	r2, [r7, #0]
 800507a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800507c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800507e:	683a      	ldr	r2, [r7, #0]
 8005080:	88d2      	ldrh	r2, [r2, #6]
 8005082:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	88db      	ldrh	r3, [r3, #6]
 8005088:	2b07      	cmp	r3, #7
 800508a:	bf28      	it	cs
 800508c:	2307      	movcs	r3, #7
 800508e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	89fa      	ldrh	r2, [r7, #14]
 8005094:	4619      	mov	r1, r3
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f001 fb43 	bl	8006722 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800509c:	e085      	b.n	80051aa <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	785a      	ldrb	r2, [r3, #1]
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	88db      	ldrh	r3, [r3, #6]
 80050ac:	b2da      	uxtb	r2, r3
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80050b4:	6939      	ldr	r1, [r7, #16]
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	88db      	ldrh	r3, [r3, #6]
 80050ba:	461a      	mov	r2, r3
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	f001 fb5c 	bl	800677a <USBD_CtlPrepareRx>
      break;
 80050c2:	e072      	b.n	80051aa <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	683a      	ldr	r2, [r7, #0]
 80050ce:	7850      	ldrb	r0, [r2, #1]
 80050d0:	2200      	movs	r2, #0
 80050d2:	6839      	ldr	r1, [r7, #0]
 80050d4:	4798      	blx	r3
      break;
 80050d6:	e068      	b.n	80051aa <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	785b      	ldrb	r3, [r3, #1]
 80050dc:	2b0b      	cmp	r3, #11
 80050de:	d852      	bhi.n	8005186 <USBD_CDC_Setup+0x162>
 80050e0:	a201      	add	r2, pc, #4	; (adr r2, 80050e8 <USBD_CDC_Setup+0xc4>)
 80050e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050e6:	bf00      	nop
 80050e8:	08005119 	.word	0x08005119
 80050ec:	08005195 	.word	0x08005195
 80050f0:	08005187 	.word	0x08005187
 80050f4:	08005187 	.word	0x08005187
 80050f8:	08005187 	.word	0x08005187
 80050fc:	08005187 	.word	0x08005187
 8005100:	08005187 	.word	0x08005187
 8005104:	08005187 	.word	0x08005187
 8005108:	08005187 	.word	0x08005187
 800510c:	08005187 	.word	0x08005187
 8005110:	08005143 	.word	0x08005143
 8005114:	0800516d 	.word	0x0800516d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800511e:	b2db      	uxtb	r3, r3
 8005120:	2b03      	cmp	r3, #3
 8005122:	d107      	bne.n	8005134 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005124:	f107 030a 	add.w	r3, r7, #10
 8005128:	2202      	movs	r2, #2
 800512a:	4619      	mov	r1, r3
 800512c:	6878      	ldr	r0, [r7, #4]
 800512e:	f001 faf8 	bl	8006722 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005132:	e032      	b.n	800519a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8005134:	6839      	ldr	r1, [r7, #0]
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f001 fa82 	bl	8006640 <USBD_CtlError>
            ret = USBD_FAIL;
 800513c:	2303      	movs	r3, #3
 800513e:	75fb      	strb	r3, [r7, #23]
          break;
 8005140:	e02b      	b.n	800519a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005148:	b2db      	uxtb	r3, r3
 800514a:	2b03      	cmp	r3, #3
 800514c:	d107      	bne.n	800515e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800514e:	f107 030d 	add.w	r3, r7, #13
 8005152:	2201      	movs	r2, #1
 8005154:	4619      	mov	r1, r3
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f001 fae3 	bl	8006722 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800515c:	e01d      	b.n	800519a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800515e:	6839      	ldr	r1, [r7, #0]
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f001 fa6d 	bl	8006640 <USBD_CtlError>
            ret = USBD_FAIL;
 8005166:	2303      	movs	r3, #3
 8005168:	75fb      	strb	r3, [r7, #23]
          break;
 800516a:	e016      	b.n	800519a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005172:	b2db      	uxtb	r3, r3
 8005174:	2b03      	cmp	r3, #3
 8005176:	d00f      	beq.n	8005198 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8005178:	6839      	ldr	r1, [r7, #0]
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f001 fa60 	bl	8006640 <USBD_CtlError>
            ret = USBD_FAIL;
 8005180:	2303      	movs	r3, #3
 8005182:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005184:	e008      	b.n	8005198 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005186:	6839      	ldr	r1, [r7, #0]
 8005188:	6878      	ldr	r0, [r7, #4]
 800518a:	f001 fa59 	bl	8006640 <USBD_CtlError>
          ret = USBD_FAIL;
 800518e:	2303      	movs	r3, #3
 8005190:	75fb      	strb	r3, [r7, #23]
          break;
 8005192:	e002      	b.n	800519a <USBD_CDC_Setup+0x176>
          break;
 8005194:	bf00      	nop
 8005196:	e008      	b.n	80051aa <USBD_CDC_Setup+0x186>
          break;
 8005198:	bf00      	nop
      }
      break;
 800519a:	e006      	b.n	80051aa <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800519c:	6839      	ldr	r1, [r7, #0]
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f001 fa4e 	bl	8006640 <USBD_CtlError>
      ret = USBD_FAIL;
 80051a4:	2303      	movs	r3, #3
 80051a6:	75fb      	strb	r3, [r7, #23]
      break;
 80051a8:	bf00      	nop
  }

  return (uint8_t)ret;
 80051aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3718      	adds	r7, #24
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}

080051b4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b084      	sub	sp, #16
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	460b      	mov	r3, r1
 80051be:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80051c6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d101      	bne.n	80051d6 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80051d2:	2303      	movs	r3, #3
 80051d4:	e04f      	b.n	8005276 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80051dc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80051de:	78fa      	ldrb	r2, [r7, #3]
 80051e0:	6879      	ldr	r1, [r7, #4]
 80051e2:	4613      	mov	r3, r2
 80051e4:	009b      	lsls	r3, r3, #2
 80051e6:	4413      	add	r3, r2
 80051e8:	009b      	lsls	r3, r3, #2
 80051ea:	440b      	add	r3, r1
 80051ec:	3318      	adds	r3, #24
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d029      	beq.n	8005248 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80051f4:	78fa      	ldrb	r2, [r7, #3]
 80051f6:	6879      	ldr	r1, [r7, #4]
 80051f8:	4613      	mov	r3, r2
 80051fa:	009b      	lsls	r3, r3, #2
 80051fc:	4413      	add	r3, r2
 80051fe:	009b      	lsls	r3, r3, #2
 8005200:	440b      	add	r3, r1
 8005202:	3318      	adds	r3, #24
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	78f9      	ldrb	r1, [r7, #3]
 8005208:	68f8      	ldr	r0, [r7, #12]
 800520a:	460b      	mov	r3, r1
 800520c:	00db      	lsls	r3, r3, #3
 800520e:	440b      	add	r3, r1
 8005210:	009b      	lsls	r3, r3, #2
 8005212:	4403      	add	r3, r0
 8005214:	3348      	adds	r3, #72	; 0x48
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	fbb2 f1f3 	udiv	r1, r2, r3
 800521c:	fb01 f303 	mul.w	r3, r1, r3
 8005220:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005222:	2b00      	cmp	r3, #0
 8005224:	d110      	bne.n	8005248 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8005226:	78fa      	ldrb	r2, [r7, #3]
 8005228:	6879      	ldr	r1, [r7, #4]
 800522a:	4613      	mov	r3, r2
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	4413      	add	r3, r2
 8005230:	009b      	lsls	r3, r3, #2
 8005232:	440b      	add	r3, r1
 8005234:	3318      	adds	r3, #24
 8005236:	2200      	movs	r2, #0
 8005238:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800523a:	78f9      	ldrb	r1, [r7, #3]
 800523c:	2300      	movs	r3, #0
 800523e:	2200      	movs	r2, #0
 8005240:	6878      	ldr	r0, [r7, #4]
 8005242:	f002 f865 	bl	8007310 <USBD_LL_Transmit>
 8005246:	e015      	b.n	8005274 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	2200      	movs	r2, #0
 800524c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005256:	691b      	ldr	r3, [r3, #16]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d00b      	beq.n	8005274 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005262:	691b      	ldr	r3, [r3, #16]
 8005264:	68ba      	ldr	r2, [r7, #8]
 8005266:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800526a:	68ba      	ldr	r2, [r7, #8]
 800526c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005270:	78fa      	ldrb	r2, [r7, #3]
 8005272:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005274:	2300      	movs	r3, #0
}
 8005276:	4618      	mov	r0, r3
 8005278:	3710      	adds	r7, #16
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}

0800527e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800527e:	b580      	push	{r7, lr}
 8005280:	b084      	sub	sp, #16
 8005282:	af00      	add	r7, sp, #0
 8005284:	6078      	str	r0, [r7, #4]
 8005286:	460b      	mov	r3, r1
 8005288:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005290:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005298:	2b00      	cmp	r3, #0
 800529a:	d101      	bne.n	80052a0 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800529c:	2303      	movs	r3, #3
 800529e:	e015      	b.n	80052cc <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80052a0:	78fb      	ldrb	r3, [r7, #3]
 80052a2:	4619      	mov	r1, r3
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	f002 f8a3 	bl	80073f0 <USBD_LL_GetRxDataSize>
 80052aa:	4602      	mov	r2, r0
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80052b8:	68db      	ldr	r3, [r3, #12]
 80052ba:	68fa      	ldr	r2, [r7, #12]
 80052bc:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80052c0:	68fa      	ldr	r2, [r7, #12]
 80052c2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80052c6:	4611      	mov	r1, r2
 80052c8:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80052ca:	2300      	movs	r3, #0
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	3710      	adds	r7, #16
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}

080052d4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b084      	sub	sp, #16
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80052e2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d101      	bne.n	80052ee <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80052ea:	2303      	movs	r3, #3
 80052ec:	e01b      	b.n	8005326 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d015      	beq.n	8005324 <USBD_CDC_EP0_RxReady+0x50>
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80052fe:	2bff      	cmp	r3, #255	; 0xff
 8005300:	d010      	beq.n	8005324 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	68fa      	ldr	r2, [r7, #12]
 800530c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8005310:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005312:	68fa      	ldr	r2, [r7, #12]
 8005314:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005318:	b292      	uxth	r2, r2
 800531a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	22ff      	movs	r2, #255	; 0xff
 8005320:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005324:	2300      	movs	r3, #0
}
 8005326:	4618      	mov	r0, r3
 8005328:	3710      	adds	r7, #16
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}
	...

08005330 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005330:	b480      	push	{r7}
 8005332:	b083      	sub	sp, #12
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2243      	movs	r2, #67	; 0x43
 800533c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800533e:	4b03      	ldr	r3, [pc, #12]	; (800534c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005340:	4618      	mov	r0, r3
 8005342:	370c      	adds	r7, #12
 8005344:	46bd      	mov	sp, r7
 8005346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534a:	4770      	bx	lr
 800534c:	200000a4 	.word	0x200000a4

08005350 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005350:	b480      	push	{r7}
 8005352:	b083      	sub	sp, #12
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2243      	movs	r2, #67	; 0x43
 800535c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800535e:	4b03      	ldr	r3, [pc, #12]	; (800536c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005360:	4618      	mov	r0, r3
 8005362:	370c      	adds	r7, #12
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr
 800536c:	20000060 	.word	0x20000060

08005370 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005370:	b480      	push	{r7}
 8005372:	b083      	sub	sp, #12
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2243      	movs	r2, #67	; 0x43
 800537c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800537e:	4b03      	ldr	r3, [pc, #12]	; (800538c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005380:	4618      	mov	r0, r3
 8005382:	370c      	adds	r7, #12
 8005384:	46bd      	mov	sp, r7
 8005386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538a:	4770      	bx	lr
 800538c:	200000e8 	.word	0x200000e8

08005390 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005390:	b480      	push	{r7}
 8005392:	b083      	sub	sp, #12
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	220a      	movs	r2, #10
 800539c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800539e:	4b03      	ldr	r3, [pc, #12]	; (80053ac <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	370c      	adds	r7, #12
 80053a4:	46bd      	mov	sp, r7
 80053a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053aa:	4770      	bx	lr
 80053ac:	2000001c 	.word	0x2000001c

080053b0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b083      	sub	sp, #12
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
 80053b8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d101      	bne.n	80053c4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80053c0:	2303      	movs	r3, #3
 80053c2:	e004      	b.n	80053ce <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	683a      	ldr	r2, [r7, #0]
 80053c8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80053cc:	2300      	movs	r3, #0
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	370c      	adds	r7, #12
 80053d2:	46bd      	mov	sp, r7
 80053d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d8:	4770      	bx	lr

080053da <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80053da:	b480      	push	{r7}
 80053dc:	b087      	sub	sp, #28
 80053de:	af00      	add	r7, sp, #0
 80053e0:	60f8      	str	r0, [r7, #12]
 80053e2:	60b9      	str	r1, [r7, #8]
 80053e4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80053ec:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d101      	bne.n	80053f8 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80053f4:	2303      	movs	r3, #3
 80053f6:	e008      	b.n	800540a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	68ba      	ldr	r2, [r7, #8]
 80053fc:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	687a      	ldr	r2, [r7, #4]
 8005404:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005408:	2300      	movs	r3, #0
}
 800540a:	4618      	mov	r0, r3
 800540c:	371c      	adds	r7, #28
 800540e:	46bd      	mov	sp, r7
 8005410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005414:	4770      	bx	lr

08005416 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005416:	b480      	push	{r7}
 8005418:	b085      	sub	sp, #20
 800541a:	af00      	add	r7, sp, #0
 800541c:	6078      	str	r0, [r7, #4]
 800541e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005426:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d101      	bne.n	8005432 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800542e:	2303      	movs	r3, #3
 8005430:	e004      	b.n	800543c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	683a      	ldr	r2, [r7, #0]
 8005436:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800543a:	2300      	movs	r3, #0
}
 800543c:	4618      	mov	r0, r3
 800543e:	3714      	adds	r7, #20
 8005440:	46bd      	mov	sp, r7
 8005442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005446:	4770      	bx	lr

08005448 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b084      	sub	sp, #16
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005456:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005458:	2301      	movs	r3, #1
 800545a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005462:	2b00      	cmp	r3, #0
 8005464:	d101      	bne.n	800546a <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005466:	2303      	movs	r3, #3
 8005468:	e01a      	b.n	80054a0 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005470:	2b00      	cmp	r3, #0
 8005472:	d114      	bne.n	800549e <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	2201      	movs	r2, #1
 8005478:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005492:	2181      	movs	r1, #129	; 0x81
 8005494:	6878      	ldr	r0, [r7, #4]
 8005496:	f001 ff3b 	bl	8007310 <USBD_LL_Transmit>

    ret = USBD_OK;
 800549a:	2300      	movs	r3, #0
 800549c:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800549e:	7bfb      	ldrb	r3, [r7, #15]
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	3710      	adds	r7, #16
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}

080054a8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b084      	sub	sp, #16
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80054b6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d101      	bne.n	80054c6 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80054c2:	2303      	movs	r3, #3
 80054c4:	e016      	b.n	80054f4 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	7c1b      	ldrb	r3, [r3, #16]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d109      	bne.n	80054e2 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80054d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80054d8:	2101      	movs	r1, #1
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f001 ff50 	bl	8007380 <USBD_LL_PrepareReceive>
 80054e0:	e007      	b.n	80054f2 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80054e8:	2340      	movs	r3, #64	; 0x40
 80054ea:	2101      	movs	r1, #1
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f001 ff47 	bl	8007380 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80054f2:	2300      	movs	r3, #0
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	3710      	adds	r7, #16
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}

080054fc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b086      	sub	sp, #24
 8005500:	af00      	add	r7, sp, #0
 8005502:	60f8      	str	r0, [r7, #12]
 8005504:	60b9      	str	r1, [r7, #8]
 8005506:	4613      	mov	r3, r2
 8005508:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d101      	bne.n	8005514 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005510:	2303      	movs	r3, #3
 8005512:	e01f      	b.n	8005554 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2200      	movs	r2, #0
 8005518:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2200      	movs	r2, #0
 8005520:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2200      	movs	r2, #0
 8005528:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d003      	beq.n	800553a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	68ba      	ldr	r2, [r7, #8]
 8005536:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2201      	movs	r2, #1
 800553e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	79fa      	ldrb	r2, [r7, #7]
 8005546:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005548:	68f8      	ldr	r0, [r7, #12]
 800554a:	f001 fd23 	bl	8006f94 <USBD_LL_Init>
 800554e:	4603      	mov	r3, r0
 8005550:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005552:	7dfb      	ldrb	r3, [r7, #23]
}
 8005554:	4618      	mov	r0, r3
 8005556:	3718      	adds	r7, #24
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}

0800555c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b084      	sub	sp, #16
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
 8005564:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005566:	2300      	movs	r3, #0
 8005568:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d101      	bne.n	8005574 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8005570:	2303      	movs	r3, #3
 8005572:	e016      	b.n	80055a2 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	683a      	ldr	r2, [r7, #0]
 8005578:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005584:	2b00      	cmp	r3, #0
 8005586:	d00b      	beq.n	80055a0 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800558e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005590:	f107 020e 	add.w	r2, r7, #14
 8005594:	4610      	mov	r0, r2
 8005596:	4798      	blx	r3
 8005598:	4602      	mov	r2, r0
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80055a0:	2300      	movs	r3, #0
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	3710      	adds	r7, #16
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}

080055aa <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80055aa:	b580      	push	{r7, lr}
 80055ac:	b082      	sub	sp, #8
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f001 fd38 	bl	8007028 <USBD_LL_Start>
 80055b8:	4603      	mov	r3, r0
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3708      	adds	r7, #8
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}

080055c2 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80055c2:	b480      	push	{r7}
 80055c4:	b083      	sub	sp, #12
 80055c6:	af00      	add	r7, sp, #0
 80055c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80055ca:	2300      	movs	r3, #0
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	370c      	adds	r7, #12
 80055d0:	46bd      	mov	sp, r7
 80055d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d6:	4770      	bx	lr

080055d8 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b084      	sub	sp, #16
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
 80055e0:	460b      	mov	r3, r1
 80055e2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80055e4:	2303      	movs	r3, #3
 80055e6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d009      	beq.n	8005606 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	78fa      	ldrb	r2, [r7, #3]
 80055fc:	4611      	mov	r1, r2
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	4798      	blx	r3
 8005602:	4603      	mov	r3, r0
 8005604:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005606:	7bfb      	ldrb	r3, [r7, #15]
}
 8005608:	4618      	mov	r0, r3
 800560a:	3710      	adds	r7, #16
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}

08005610 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b082      	sub	sp, #8
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
 8005618:	460b      	mov	r3, r1
 800561a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005622:	2b00      	cmp	r3, #0
 8005624:	d007      	beq.n	8005636 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	78fa      	ldrb	r2, [r7, #3]
 8005630:	4611      	mov	r1, r2
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	4798      	blx	r3
  }

  return USBD_OK;
 8005636:	2300      	movs	r3, #0
}
 8005638:	4618      	mov	r0, r3
 800563a:	3708      	adds	r7, #8
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}

08005640 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b084      	sub	sp, #16
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
 8005648:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005650:	6839      	ldr	r1, [r7, #0]
 8005652:	4618      	mov	r0, r3
 8005654:	f000 ffba 	bl	80065cc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2201      	movs	r2, #1
 800565c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005666:	461a      	mov	r2, r3
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005674:	f003 031f 	and.w	r3, r3, #31
 8005678:	2b02      	cmp	r3, #2
 800567a:	d01a      	beq.n	80056b2 <USBD_LL_SetupStage+0x72>
 800567c:	2b02      	cmp	r3, #2
 800567e:	d822      	bhi.n	80056c6 <USBD_LL_SetupStage+0x86>
 8005680:	2b00      	cmp	r3, #0
 8005682:	d002      	beq.n	800568a <USBD_LL_SetupStage+0x4a>
 8005684:	2b01      	cmp	r3, #1
 8005686:	d00a      	beq.n	800569e <USBD_LL_SetupStage+0x5e>
 8005688:	e01d      	b.n	80056c6 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005690:	4619      	mov	r1, r3
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f000 fa62 	bl	8005b5c <USBD_StdDevReq>
 8005698:	4603      	mov	r3, r0
 800569a:	73fb      	strb	r3, [r7, #15]
      break;
 800569c:	e020      	b.n	80056e0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80056a4:	4619      	mov	r1, r3
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f000 fac6 	bl	8005c38 <USBD_StdItfReq>
 80056ac:	4603      	mov	r3, r0
 80056ae:	73fb      	strb	r3, [r7, #15]
      break;
 80056b0:	e016      	b.n	80056e0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80056b8:	4619      	mov	r1, r3
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f000 fb05 	bl	8005cca <USBD_StdEPReq>
 80056c0:	4603      	mov	r3, r0
 80056c2:	73fb      	strb	r3, [r7, #15]
      break;
 80056c4:	e00c      	b.n	80056e0 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80056cc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80056d0:	b2db      	uxtb	r3, r3
 80056d2:	4619      	mov	r1, r3
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	f001 fd4d 	bl	8007174 <USBD_LL_StallEP>
 80056da:	4603      	mov	r3, r0
 80056dc:	73fb      	strb	r3, [r7, #15]
      break;
 80056de:	bf00      	nop
  }

  return ret;
 80056e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	3710      	adds	r7, #16
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}

080056ea <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80056ea:	b580      	push	{r7, lr}
 80056ec:	b086      	sub	sp, #24
 80056ee:	af00      	add	r7, sp, #0
 80056f0:	60f8      	str	r0, [r7, #12]
 80056f2:	460b      	mov	r3, r1
 80056f4:	607a      	str	r2, [r7, #4]
 80056f6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80056f8:	7afb      	ldrb	r3, [r7, #11]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d138      	bne.n	8005770 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005704:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800570c:	2b03      	cmp	r3, #3
 800570e:	d14a      	bne.n	80057a6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	689a      	ldr	r2, [r3, #8]
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	68db      	ldr	r3, [r3, #12]
 8005718:	429a      	cmp	r2, r3
 800571a:	d913      	bls.n	8005744 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	689a      	ldr	r2, [r3, #8]
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	68db      	ldr	r3, [r3, #12]
 8005724:	1ad2      	subs	r2, r2, r3
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	68da      	ldr	r2, [r3, #12]
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	4293      	cmp	r3, r2
 8005734:	bf28      	it	cs
 8005736:	4613      	movcs	r3, r2
 8005738:	461a      	mov	r2, r3
 800573a:	6879      	ldr	r1, [r7, #4]
 800573c:	68f8      	ldr	r0, [r7, #12]
 800573e:	f001 f839 	bl	80067b4 <USBD_CtlContinueRx>
 8005742:	e030      	b.n	80057a6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800574a:	b2db      	uxtb	r3, r3
 800574c:	2b03      	cmp	r3, #3
 800574e:	d10b      	bne.n	8005768 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005756:	691b      	ldr	r3, [r3, #16]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d005      	beq.n	8005768 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005762:	691b      	ldr	r3, [r3, #16]
 8005764:	68f8      	ldr	r0, [r7, #12]
 8005766:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005768:	68f8      	ldr	r0, [r7, #12]
 800576a:	f001 f834 	bl	80067d6 <USBD_CtlSendStatus>
 800576e:	e01a      	b.n	80057a6 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005776:	b2db      	uxtb	r3, r3
 8005778:	2b03      	cmp	r3, #3
 800577a:	d114      	bne.n	80057a6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005782:	699b      	ldr	r3, [r3, #24]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d00e      	beq.n	80057a6 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800578e:	699b      	ldr	r3, [r3, #24]
 8005790:	7afa      	ldrb	r2, [r7, #11]
 8005792:	4611      	mov	r1, r2
 8005794:	68f8      	ldr	r0, [r7, #12]
 8005796:	4798      	blx	r3
 8005798:	4603      	mov	r3, r0
 800579a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800579c:	7dfb      	ldrb	r3, [r7, #23]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d001      	beq.n	80057a6 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80057a2:	7dfb      	ldrb	r3, [r7, #23]
 80057a4:	e000      	b.n	80057a8 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80057a6:	2300      	movs	r3, #0
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3718      	adds	r7, #24
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}

080057b0 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b086      	sub	sp, #24
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	60f8      	str	r0, [r7, #12]
 80057b8:	460b      	mov	r3, r1
 80057ba:	607a      	str	r2, [r7, #4]
 80057bc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80057be:	7afb      	ldrb	r3, [r7, #11]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d16b      	bne.n	800589c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	3314      	adds	r3, #20
 80057c8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80057d0:	2b02      	cmp	r3, #2
 80057d2:	d156      	bne.n	8005882 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	689a      	ldr	r2, [r3, #8]
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	68db      	ldr	r3, [r3, #12]
 80057dc:	429a      	cmp	r2, r3
 80057de:	d914      	bls.n	800580a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	689a      	ldr	r2, [r3, #8]
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	68db      	ldr	r3, [r3, #12]
 80057e8:	1ad2      	subs	r2, r2, r3
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	461a      	mov	r2, r3
 80057f4:	6879      	ldr	r1, [r7, #4]
 80057f6:	68f8      	ldr	r0, [r7, #12]
 80057f8:	f000 ffae 	bl	8006758 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80057fc:	2300      	movs	r3, #0
 80057fe:	2200      	movs	r2, #0
 8005800:	2100      	movs	r1, #0
 8005802:	68f8      	ldr	r0, [r7, #12]
 8005804:	f001 fdbc 	bl	8007380 <USBD_LL_PrepareReceive>
 8005808:	e03b      	b.n	8005882 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	68da      	ldr	r2, [r3, #12]
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	429a      	cmp	r2, r3
 8005814:	d11c      	bne.n	8005850 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	685a      	ldr	r2, [r3, #4]
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800581e:	429a      	cmp	r2, r3
 8005820:	d316      	bcc.n	8005850 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	685a      	ldr	r2, [r3, #4]
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800582c:	429a      	cmp	r2, r3
 800582e:	d20f      	bcs.n	8005850 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005830:	2200      	movs	r2, #0
 8005832:	2100      	movs	r1, #0
 8005834:	68f8      	ldr	r0, [r7, #12]
 8005836:	f000 ff8f 	bl	8006758 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2200      	movs	r2, #0
 800583e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005842:	2300      	movs	r3, #0
 8005844:	2200      	movs	r2, #0
 8005846:	2100      	movs	r1, #0
 8005848:	68f8      	ldr	r0, [r7, #12]
 800584a:	f001 fd99 	bl	8007380 <USBD_LL_PrepareReceive>
 800584e:	e018      	b.n	8005882 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005856:	b2db      	uxtb	r3, r3
 8005858:	2b03      	cmp	r3, #3
 800585a:	d10b      	bne.n	8005874 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005862:	68db      	ldr	r3, [r3, #12]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d005      	beq.n	8005874 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800586e:	68db      	ldr	r3, [r3, #12]
 8005870:	68f8      	ldr	r0, [r7, #12]
 8005872:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005874:	2180      	movs	r1, #128	; 0x80
 8005876:	68f8      	ldr	r0, [r7, #12]
 8005878:	f001 fc7c 	bl	8007174 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800587c:	68f8      	ldr	r0, [r7, #12]
 800587e:	f000 ffbd 	bl	80067fc <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005888:	2b01      	cmp	r3, #1
 800588a:	d122      	bne.n	80058d2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800588c:	68f8      	ldr	r0, [r7, #12]
 800588e:	f7ff fe98 	bl	80055c2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2200      	movs	r2, #0
 8005896:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800589a:	e01a      	b.n	80058d2 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058a2:	b2db      	uxtb	r3, r3
 80058a4:	2b03      	cmp	r3, #3
 80058a6:	d114      	bne.n	80058d2 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058ae:	695b      	ldr	r3, [r3, #20]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d00e      	beq.n	80058d2 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058ba:	695b      	ldr	r3, [r3, #20]
 80058bc:	7afa      	ldrb	r2, [r7, #11]
 80058be:	4611      	mov	r1, r2
 80058c0:	68f8      	ldr	r0, [r7, #12]
 80058c2:	4798      	blx	r3
 80058c4:	4603      	mov	r3, r0
 80058c6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80058c8:	7dfb      	ldrb	r3, [r7, #23]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d001      	beq.n	80058d2 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80058ce:	7dfb      	ldrb	r3, [r7, #23]
 80058d0:	e000      	b.n	80058d4 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80058d2:	2300      	movs	r3, #0
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	3718      	adds	r7, #24
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}

080058dc <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b082      	sub	sp, #8
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2201      	movs	r2, #1
 80058e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2200      	movs	r2, #0
 80058f0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2200      	movs	r2, #0
 80058f8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2200      	movs	r2, #0
 80058fe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005908:	2b00      	cmp	r3, #0
 800590a:	d101      	bne.n	8005910 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800590c:	2303      	movs	r3, #3
 800590e:	e02f      	b.n	8005970 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005916:	2b00      	cmp	r3, #0
 8005918:	d00f      	beq.n	800593a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d009      	beq.n	800593a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	687a      	ldr	r2, [r7, #4]
 8005930:	6852      	ldr	r2, [r2, #4]
 8005932:	b2d2      	uxtb	r2, r2
 8005934:	4611      	mov	r1, r2
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800593a:	2340      	movs	r3, #64	; 0x40
 800593c:	2200      	movs	r2, #0
 800593e:	2100      	movs	r1, #0
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f001 fba3 	bl	800708c <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2201      	movs	r2, #1
 800594a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2240      	movs	r2, #64	; 0x40
 8005952:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005956:	2340      	movs	r3, #64	; 0x40
 8005958:	2200      	movs	r2, #0
 800595a:	2180      	movs	r1, #128	; 0x80
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f001 fb95 	bl	800708c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2201      	movs	r2, #1
 8005966:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2240      	movs	r2, #64	; 0x40
 800596c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800596e:	2300      	movs	r3, #0
}
 8005970:	4618      	mov	r0, r3
 8005972:	3708      	adds	r7, #8
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}

08005978 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005978:	b480      	push	{r7}
 800597a:	b083      	sub	sp, #12
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	460b      	mov	r3, r1
 8005982:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	78fa      	ldrb	r2, [r7, #3]
 8005988:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800598a:	2300      	movs	r3, #0
}
 800598c:	4618      	mov	r0, r3
 800598e:	370c      	adds	r7, #12
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr

08005998 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005998:	b480      	push	{r7}
 800599a:	b083      	sub	sp, #12
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059a6:	b2da      	uxtb	r2, r3
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2204      	movs	r2, #4
 80059b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80059b6:	2300      	movs	r3, #0
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	370c      	adds	r7, #12
 80059bc:	46bd      	mov	sp, r7
 80059be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c2:	4770      	bx	lr

080059c4 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b083      	sub	sp, #12
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059d2:	b2db      	uxtb	r3, r3
 80059d4:	2b04      	cmp	r3, #4
 80059d6:	d106      	bne.n	80059e6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80059de:	b2da      	uxtb	r2, r3
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80059e6:	2300      	movs	r3, #0
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	370c      	adds	r7, #12
 80059ec:	46bd      	mov	sp, r7
 80059ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f2:	4770      	bx	lr

080059f4 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b082      	sub	sp, #8
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d101      	bne.n	8005a0a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8005a06:	2303      	movs	r3, #3
 8005a08:	e012      	b.n	8005a30 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a10:	b2db      	uxtb	r3, r3
 8005a12:	2b03      	cmp	r3, #3
 8005a14:	d10b      	bne.n	8005a2e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a1c:	69db      	ldr	r3, [r3, #28]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d005      	beq.n	8005a2e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a28:	69db      	ldr	r3, [r3, #28]
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005a2e:	2300      	movs	r3, #0
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	3708      	adds	r7, #8
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd80      	pop	{r7, pc}

08005a38 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b082      	sub	sp, #8
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
 8005a40:	460b      	mov	r3, r1
 8005a42:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d101      	bne.n	8005a52 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8005a4e:	2303      	movs	r3, #3
 8005a50:	e014      	b.n	8005a7c <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a58:	b2db      	uxtb	r3, r3
 8005a5a:	2b03      	cmp	r3, #3
 8005a5c:	d10d      	bne.n	8005a7a <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a64:	6a1b      	ldr	r3, [r3, #32]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d007      	beq.n	8005a7a <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a70:	6a1b      	ldr	r3, [r3, #32]
 8005a72:	78fa      	ldrb	r2, [r7, #3]
 8005a74:	4611      	mov	r1, r2
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005a7a:	2300      	movs	r3, #0
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	3708      	adds	r7, #8
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}

08005a84 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b082      	sub	sp, #8
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
 8005a8c:	460b      	mov	r3, r1
 8005a8e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d101      	bne.n	8005a9e <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8005a9a:	2303      	movs	r3, #3
 8005a9c:	e014      	b.n	8005ac8 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005aa4:	b2db      	uxtb	r3, r3
 8005aa6:	2b03      	cmp	r3, #3
 8005aa8:	d10d      	bne.n	8005ac6 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d007      	beq.n	8005ac6 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005abe:	78fa      	ldrb	r2, [r7, #3]
 8005ac0:	4611      	mov	r1, r2
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005ac6:	2300      	movs	r3, #0
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	3708      	adds	r7, #8
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}

08005ad0 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b083      	sub	sp, #12
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005ad8:	2300      	movs	r3, #0
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	370c      	adds	r7, #12
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae4:	4770      	bx	lr

08005ae6 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005ae6:	b580      	push	{r7, lr}
 8005ae8:	b082      	sub	sp, #8
 8005aea:	af00      	add	r7, sp, #0
 8005aec:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2201      	movs	r2, #1
 8005af2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d009      	beq.n	8005b14 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	687a      	ldr	r2, [r7, #4]
 8005b0a:	6852      	ldr	r2, [r2, #4]
 8005b0c:	b2d2      	uxtb	r2, r2
 8005b0e:	4611      	mov	r1, r2
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	4798      	blx	r3
  }

  return USBD_OK;
 8005b14:	2300      	movs	r3, #0
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	3708      	adds	r7, #8
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}

08005b1e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005b1e:	b480      	push	{r7}
 8005b20:	b087      	sub	sp, #28
 8005b22:	af00      	add	r7, sp, #0
 8005b24:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	781b      	ldrb	r3, [r3, #0]
 8005b2e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	3301      	adds	r3, #1
 8005b34:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	781b      	ldrb	r3, [r3, #0]
 8005b3a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005b3c:	8a3b      	ldrh	r3, [r7, #16]
 8005b3e:	021b      	lsls	r3, r3, #8
 8005b40:	b21a      	sxth	r2, r3
 8005b42:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005b46:	4313      	orrs	r3, r2
 8005b48:	b21b      	sxth	r3, r3
 8005b4a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005b4c:	89fb      	ldrh	r3, [r7, #14]
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	371c      	adds	r7, #28
 8005b52:	46bd      	mov	sp, r7
 8005b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b58:	4770      	bx	lr
	...

08005b5c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b084      	sub	sp, #16
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
 8005b64:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005b66:	2300      	movs	r3, #0
 8005b68:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	781b      	ldrb	r3, [r3, #0]
 8005b6e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005b72:	2b40      	cmp	r3, #64	; 0x40
 8005b74:	d005      	beq.n	8005b82 <USBD_StdDevReq+0x26>
 8005b76:	2b40      	cmp	r3, #64	; 0x40
 8005b78:	d853      	bhi.n	8005c22 <USBD_StdDevReq+0xc6>
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d00b      	beq.n	8005b96 <USBD_StdDevReq+0x3a>
 8005b7e:	2b20      	cmp	r3, #32
 8005b80:	d14f      	bne.n	8005c22 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	6839      	ldr	r1, [r7, #0]
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	4798      	blx	r3
 8005b90:	4603      	mov	r3, r0
 8005b92:	73fb      	strb	r3, [r7, #15]
      break;
 8005b94:	e04a      	b.n	8005c2c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	785b      	ldrb	r3, [r3, #1]
 8005b9a:	2b09      	cmp	r3, #9
 8005b9c:	d83b      	bhi.n	8005c16 <USBD_StdDevReq+0xba>
 8005b9e:	a201      	add	r2, pc, #4	; (adr r2, 8005ba4 <USBD_StdDevReq+0x48>)
 8005ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ba4:	08005bf9 	.word	0x08005bf9
 8005ba8:	08005c0d 	.word	0x08005c0d
 8005bac:	08005c17 	.word	0x08005c17
 8005bb0:	08005c03 	.word	0x08005c03
 8005bb4:	08005c17 	.word	0x08005c17
 8005bb8:	08005bd7 	.word	0x08005bd7
 8005bbc:	08005bcd 	.word	0x08005bcd
 8005bc0:	08005c17 	.word	0x08005c17
 8005bc4:	08005bef 	.word	0x08005bef
 8005bc8:	08005be1 	.word	0x08005be1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005bcc:	6839      	ldr	r1, [r7, #0]
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f000 f9de 	bl	8005f90 <USBD_GetDescriptor>
          break;
 8005bd4:	e024      	b.n	8005c20 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005bd6:	6839      	ldr	r1, [r7, #0]
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	f000 fb6d 	bl	80062b8 <USBD_SetAddress>
          break;
 8005bde:	e01f      	b.n	8005c20 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005be0:	6839      	ldr	r1, [r7, #0]
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f000 fbac 	bl	8006340 <USBD_SetConfig>
 8005be8:	4603      	mov	r3, r0
 8005bea:	73fb      	strb	r3, [r7, #15]
          break;
 8005bec:	e018      	b.n	8005c20 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005bee:	6839      	ldr	r1, [r7, #0]
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	f000 fc4b 	bl	800648c <USBD_GetConfig>
          break;
 8005bf6:	e013      	b.n	8005c20 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005bf8:	6839      	ldr	r1, [r7, #0]
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f000 fc7c 	bl	80064f8 <USBD_GetStatus>
          break;
 8005c00:	e00e      	b.n	8005c20 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005c02:	6839      	ldr	r1, [r7, #0]
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f000 fcab 	bl	8006560 <USBD_SetFeature>
          break;
 8005c0a:	e009      	b.n	8005c20 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005c0c:	6839      	ldr	r1, [r7, #0]
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f000 fcba 	bl	8006588 <USBD_ClrFeature>
          break;
 8005c14:	e004      	b.n	8005c20 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8005c16:	6839      	ldr	r1, [r7, #0]
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	f000 fd11 	bl	8006640 <USBD_CtlError>
          break;
 8005c1e:	bf00      	nop
      }
      break;
 8005c20:	e004      	b.n	8005c2c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8005c22:	6839      	ldr	r1, [r7, #0]
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	f000 fd0b 	bl	8006640 <USBD_CtlError>
      break;
 8005c2a:	bf00      	nop
  }

  return ret;
 8005c2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	3710      	adds	r7, #16
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}
 8005c36:	bf00      	nop

08005c38 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b084      	sub	sp, #16
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
 8005c40:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005c42:	2300      	movs	r3, #0
 8005c44:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	781b      	ldrb	r3, [r3, #0]
 8005c4a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005c4e:	2b40      	cmp	r3, #64	; 0x40
 8005c50:	d005      	beq.n	8005c5e <USBD_StdItfReq+0x26>
 8005c52:	2b40      	cmp	r3, #64	; 0x40
 8005c54:	d82f      	bhi.n	8005cb6 <USBD_StdItfReq+0x7e>
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d001      	beq.n	8005c5e <USBD_StdItfReq+0x26>
 8005c5a:	2b20      	cmp	r3, #32
 8005c5c:	d12b      	bne.n	8005cb6 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c64:	b2db      	uxtb	r3, r3
 8005c66:	3b01      	subs	r3, #1
 8005c68:	2b02      	cmp	r3, #2
 8005c6a:	d81d      	bhi.n	8005ca8 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	889b      	ldrh	r3, [r3, #4]
 8005c70:	b2db      	uxtb	r3, r3
 8005c72:	2b01      	cmp	r3, #1
 8005c74:	d813      	bhi.n	8005c9e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	6839      	ldr	r1, [r7, #0]
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	4798      	blx	r3
 8005c84:	4603      	mov	r3, r0
 8005c86:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	88db      	ldrh	r3, [r3, #6]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d110      	bne.n	8005cb2 <USBD_StdItfReq+0x7a>
 8005c90:	7bfb      	ldrb	r3, [r7, #15]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d10d      	bne.n	8005cb2 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f000 fd9d 	bl	80067d6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005c9c:	e009      	b.n	8005cb2 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8005c9e:	6839      	ldr	r1, [r7, #0]
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f000 fccd 	bl	8006640 <USBD_CtlError>
          break;
 8005ca6:	e004      	b.n	8005cb2 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8005ca8:	6839      	ldr	r1, [r7, #0]
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f000 fcc8 	bl	8006640 <USBD_CtlError>
          break;
 8005cb0:	e000      	b.n	8005cb4 <USBD_StdItfReq+0x7c>
          break;
 8005cb2:	bf00      	nop
      }
      break;
 8005cb4:	e004      	b.n	8005cc0 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8005cb6:	6839      	ldr	r1, [r7, #0]
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f000 fcc1 	bl	8006640 <USBD_CtlError>
      break;
 8005cbe:	bf00      	nop
  }

  return ret;
 8005cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3710      	adds	r7, #16
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}

08005cca <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005cca:	b580      	push	{r7, lr}
 8005ccc:	b084      	sub	sp, #16
 8005cce:	af00      	add	r7, sp, #0
 8005cd0:	6078      	str	r0, [r7, #4]
 8005cd2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	889b      	ldrh	r3, [r3, #4]
 8005cdc:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	781b      	ldrb	r3, [r3, #0]
 8005ce2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005ce6:	2b40      	cmp	r3, #64	; 0x40
 8005ce8:	d007      	beq.n	8005cfa <USBD_StdEPReq+0x30>
 8005cea:	2b40      	cmp	r3, #64	; 0x40
 8005cec:	f200 8145 	bhi.w	8005f7a <USBD_StdEPReq+0x2b0>
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d00c      	beq.n	8005d0e <USBD_StdEPReq+0x44>
 8005cf4:	2b20      	cmp	r3, #32
 8005cf6:	f040 8140 	bne.w	8005f7a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d00:	689b      	ldr	r3, [r3, #8]
 8005d02:	6839      	ldr	r1, [r7, #0]
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	4798      	blx	r3
 8005d08:	4603      	mov	r3, r0
 8005d0a:	73fb      	strb	r3, [r7, #15]
      break;
 8005d0c:	e13a      	b.n	8005f84 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	785b      	ldrb	r3, [r3, #1]
 8005d12:	2b03      	cmp	r3, #3
 8005d14:	d007      	beq.n	8005d26 <USBD_StdEPReq+0x5c>
 8005d16:	2b03      	cmp	r3, #3
 8005d18:	f300 8129 	bgt.w	8005f6e <USBD_StdEPReq+0x2a4>
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d07f      	beq.n	8005e20 <USBD_StdEPReq+0x156>
 8005d20:	2b01      	cmp	r3, #1
 8005d22:	d03c      	beq.n	8005d9e <USBD_StdEPReq+0xd4>
 8005d24:	e123      	b.n	8005f6e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d2c:	b2db      	uxtb	r3, r3
 8005d2e:	2b02      	cmp	r3, #2
 8005d30:	d002      	beq.n	8005d38 <USBD_StdEPReq+0x6e>
 8005d32:	2b03      	cmp	r3, #3
 8005d34:	d016      	beq.n	8005d64 <USBD_StdEPReq+0x9a>
 8005d36:	e02c      	b.n	8005d92 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005d38:	7bbb      	ldrb	r3, [r7, #14]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d00d      	beq.n	8005d5a <USBD_StdEPReq+0x90>
 8005d3e:	7bbb      	ldrb	r3, [r7, #14]
 8005d40:	2b80      	cmp	r3, #128	; 0x80
 8005d42:	d00a      	beq.n	8005d5a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005d44:	7bbb      	ldrb	r3, [r7, #14]
 8005d46:	4619      	mov	r1, r3
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f001 fa13 	bl	8007174 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005d4e:	2180      	movs	r1, #128	; 0x80
 8005d50:	6878      	ldr	r0, [r7, #4]
 8005d52:	f001 fa0f 	bl	8007174 <USBD_LL_StallEP>
 8005d56:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005d58:	e020      	b.n	8005d9c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8005d5a:	6839      	ldr	r1, [r7, #0]
 8005d5c:	6878      	ldr	r0, [r7, #4]
 8005d5e:	f000 fc6f 	bl	8006640 <USBD_CtlError>
              break;
 8005d62:	e01b      	b.n	8005d9c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	885b      	ldrh	r3, [r3, #2]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d10e      	bne.n	8005d8a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005d6c:	7bbb      	ldrb	r3, [r7, #14]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d00b      	beq.n	8005d8a <USBD_StdEPReq+0xc0>
 8005d72:	7bbb      	ldrb	r3, [r7, #14]
 8005d74:	2b80      	cmp	r3, #128	; 0x80
 8005d76:	d008      	beq.n	8005d8a <USBD_StdEPReq+0xc0>
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	88db      	ldrh	r3, [r3, #6]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d104      	bne.n	8005d8a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005d80:	7bbb      	ldrb	r3, [r7, #14]
 8005d82:	4619      	mov	r1, r3
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f001 f9f5 	bl	8007174 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f000 fd23 	bl	80067d6 <USBD_CtlSendStatus>

              break;
 8005d90:	e004      	b.n	8005d9c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8005d92:	6839      	ldr	r1, [r7, #0]
 8005d94:	6878      	ldr	r0, [r7, #4]
 8005d96:	f000 fc53 	bl	8006640 <USBD_CtlError>
              break;
 8005d9a:	bf00      	nop
          }
          break;
 8005d9c:	e0ec      	b.n	8005f78 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005da4:	b2db      	uxtb	r3, r3
 8005da6:	2b02      	cmp	r3, #2
 8005da8:	d002      	beq.n	8005db0 <USBD_StdEPReq+0xe6>
 8005daa:	2b03      	cmp	r3, #3
 8005dac:	d016      	beq.n	8005ddc <USBD_StdEPReq+0x112>
 8005dae:	e030      	b.n	8005e12 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005db0:	7bbb      	ldrb	r3, [r7, #14]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d00d      	beq.n	8005dd2 <USBD_StdEPReq+0x108>
 8005db6:	7bbb      	ldrb	r3, [r7, #14]
 8005db8:	2b80      	cmp	r3, #128	; 0x80
 8005dba:	d00a      	beq.n	8005dd2 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005dbc:	7bbb      	ldrb	r3, [r7, #14]
 8005dbe:	4619      	mov	r1, r3
 8005dc0:	6878      	ldr	r0, [r7, #4]
 8005dc2:	f001 f9d7 	bl	8007174 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005dc6:	2180      	movs	r1, #128	; 0x80
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	f001 f9d3 	bl	8007174 <USBD_LL_StallEP>
 8005dce:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005dd0:	e025      	b.n	8005e1e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8005dd2:	6839      	ldr	r1, [r7, #0]
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	f000 fc33 	bl	8006640 <USBD_CtlError>
              break;
 8005dda:	e020      	b.n	8005e1e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	885b      	ldrh	r3, [r3, #2]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d11b      	bne.n	8005e1c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005de4:	7bbb      	ldrb	r3, [r7, #14]
 8005de6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d004      	beq.n	8005df8 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005dee:	7bbb      	ldrb	r3, [r7, #14]
 8005df0:	4619      	mov	r1, r3
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f001 f9f4 	bl	80071e0 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005df8:	6878      	ldr	r0, [r7, #4]
 8005dfa:	f000 fcec 	bl	80067d6 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e04:	689b      	ldr	r3, [r3, #8]
 8005e06:	6839      	ldr	r1, [r7, #0]
 8005e08:	6878      	ldr	r0, [r7, #4]
 8005e0a:	4798      	blx	r3
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8005e10:	e004      	b.n	8005e1c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8005e12:	6839      	ldr	r1, [r7, #0]
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f000 fc13 	bl	8006640 <USBD_CtlError>
              break;
 8005e1a:	e000      	b.n	8005e1e <USBD_StdEPReq+0x154>
              break;
 8005e1c:	bf00      	nop
          }
          break;
 8005e1e:	e0ab      	b.n	8005f78 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e26:	b2db      	uxtb	r3, r3
 8005e28:	2b02      	cmp	r3, #2
 8005e2a:	d002      	beq.n	8005e32 <USBD_StdEPReq+0x168>
 8005e2c:	2b03      	cmp	r3, #3
 8005e2e:	d032      	beq.n	8005e96 <USBD_StdEPReq+0x1cc>
 8005e30:	e097      	b.n	8005f62 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005e32:	7bbb      	ldrb	r3, [r7, #14]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d007      	beq.n	8005e48 <USBD_StdEPReq+0x17e>
 8005e38:	7bbb      	ldrb	r3, [r7, #14]
 8005e3a:	2b80      	cmp	r3, #128	; 0x80
 8005e3c:	d004      	beq.n	8005e48 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8005e3e:	6839      	ldr	r1, [r7, #0]
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	f000 fbfd 	bl	8006640 <USBD_CtlError>
                break;
 8005e46:	e091      	b.n	8005f6c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005e48:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	da0b      	bge.n	8005e68 <USBD_StdEPReq+0x19e>
 8005e50:	7bbb      	ldrb	r3, [r7, #14]
 8005e52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005e56:	4613      	mov	r3, r2
 8005e58:	009b      	lsls	r3, r3, #2
 8005e5a:	4413      	add	r3, r2
 8005e5c:	009b      	lsls	r3, r3, #2
 8005e5e:	3310      	adds	r3, #16
 8005e60:	687a      	ldr	r2, [r7, #4]
 8005e62:	4413      	add	r3, r2
 8005e64:	3304      	adds	r3, #4
 8005e66:	e00b      	b.n	8005e80 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005e68:	7bbb      	ldrb	r3, [r7, #14]
 8005e6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005e6e:	4613      	mov	r3, r2
 8005e70:	009b      	lsls	r3, r3, #2
 8005e72:	4413      	add	r3, r2
 8005e74:	009b      	lsls	r3, r3, #2
 8005e76:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005e7a:	687a      	ldr	r2, [r7, #4]
 8005e7c:	4413      	add	r3, r2
 8005e7e:	3304      	adds	r3, #4
 8005e80:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	2200      	movs	r2, #0
 8005e86:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	2202      	movs	r2, #2
 8005e8c:	4619      	mov	r1, r3
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f000 fc47 	bl	8006722 <USBD_CtlSendData>
              break;
 8005e94:	e06a      	b.n	8005f6c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005e96:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	da11      	bge.n	8005ec2 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005e9e:	7bbb      	ldrb	r3, [r7, #14]
 8005ea0:	f003 020f 	and.w	r2, r3, #15
 8005ea4:	6879      	ldr	r1, [r7, #4]
 8005ea6:	4613      	mov	r3, r2
 8005ea8:	009b      	lsls	r3, r3, #2
 8005eaa:	4413      	add	r3, r2
 8005eac:	009b      	lsls	r3, r3, #2
 8005eae:	440b      	add	r3, r1
 8005eb0:	3324      	adds	r3, #36	; 0x24
 8005eb2:	881b      	ldrh	r3, [r3, #0]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d117      	bne.n	8005ee8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8005eb8:	6839      	ldr	r1, [r7, #0]
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f000 fbc0 	bl	8006640 <USBD_CtlError>
                  break;
 8005ec0:	e054      	b.n	8005f6c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005ec2:	7bbb      	ldrb	r3, [r7, #14]
 8005ec4:	f003 020f 	and.w	r2, r3, #15
 8005ec8:	6879      	ldr	r1, [r7, #4]
 8005eca:	4613      	mov	r3, r2
 8005ecc:	009b      	lsls	r3, r3, #2
 8005ece:	4413      	add	r3, r2
 8005ed0:	009b      	lsls	r3, r3, #2
 8005ed2:	440b      	add	r3, r1
 8005ed4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005ed8:	881b      	ldrh	r3, [r3, #0]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d104      	bne.n	8005ee8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8005ede:	6839      	ldr	r1, [r7, #0]
 8005ee0:	6878      	ldr	r0, [r7, #4]
 8005ee2:	f000 fbad 	bl	8006640 <USBD_CtlError>
                  break;
 8005ee6:	e041      	b.n	8005f6c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005ee8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	da0b      	bge.n	8005f08 <USBD_StdEPReq+0x23e>
 8005ef0:	7bbb      	ldrb	r3, [r7, #14]
 8005ef2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005ef6:	4613      	mov	r3, r2
 8005ef8:	009b      	lsls	r3, r3, #2
 8005efa:	4413      	add	r3, r2
 8005efc:	009b      	lsls	r3, r3, #2
 8005efe:	3310      	adds	r3, #16
 8005f00:	687a      	ldr	r2, [r7, #4]
 8005f02:	4413      	add	r3, r2
 8005f04:	3304      	adds	r3, #4
 8005f06:	e00b      	b.n	8005f20 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005f08:	7bbb      	ldrb	r3, [r7, #14]
 8005f0a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005f0e:	4613      	mov	r3, r2
 8005f10:	009b      	lsls	r3, r3, #2
 8005f12:	4413      	add	r3, r2
 8005f14:	009b      	lsls	r3, r3, #2
 8005f16:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005f1a:	687a      	ldr	r2, [r7, #4]
 8005f1c:	4413      	add	r3, r2
 8005f1e:	3304      	adds	r3, #4
 8005f20:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005f22:	7bbb      	ldrb	r3, [r7, #14]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d002      	beq.n	8005f2e <USBD_StdEPReq+0x264>
 8005f28:	7bbb      	ldrb	r3, [r7, #14]
 8005f2a:	2b80      	cmp	r3, #128	; 0x80
 8005f2c:	d103      	bne.n	8005f36 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	2200      	movs	r2, #0
 8005f32:	601a      	str	r2, [r3, #0]
 8005f34:	e00e      	b.n	8005f54 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005f36:	7bbb      	ldrb	r3, [r7, #14]
 8005f38:	4619      	mov	r1, r3
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f001 f986 	bl	800724c <USBD_LL_IsStallEP>
 8005f40:	4603      	mov	r3, r0
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d003      	beq.n	8005f4e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	2201      	movs	r2, #1
 8005f4a:	601a      	str	r2, [r3, #0]
 8005f4c:	e002      	b.n	8005f54 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	2200      	movs	r2, #0
 8005f52:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	2202      	movs	r2, #2
 8005f58:	4619      	mov	r1, r3
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f000 fbe1 	bl	8006722 <USBD_CtlSendData>
              break;
 8005f60:	e004      	b.n	8005f6c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8005f62:	6839      	ldr	r1, [r7, #0]
 8005f64:	6878      	ldr	r0, [r7, #4]
 8005f66:	f000 fb6b 	bl	8006640 <USBD_CtlError>
              break;
 8005f6a:	bf00      	nop
          }
          break;
 8005f6c:	e004      	b.n	8005f78 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8005f6e:	6839      	ldr	r1, [r7, #0]
 8005f70:	6878      	ldr	r0, [r7, #4]
 8005f72:	f000 fb65 	bl	8006640 <USBD_CtlError>
          break;
 8005f76:	bf00      	nop
      }
      break;
 8005f78:	e004      	b.n	8005f84 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8005f7a:	6839      	ldr	r1, [r7, #0]
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f000 fb5f 	bl	8006640 <USBD_CtlError>
      break;
 8005f82:	bf00      	nop
  }

  return ret;
 8005f84:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3710      	adds	r7, #16
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}
	...

08005f90 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b084      	sub	sp, #16
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
 8005f98:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	885b      	ldrh	r3, [r3, #2]
 8005faa:	0a1b      	lsrs	r3, r3, #8
 8005fac:	b29b      	uxth	r3, r3
 8005fae:	3b01      	subs	r3, #1
 8005fb0:	2b0e      	cmp	r3, #14
 8005fb2:	f200 8152 	bhi.w	800625a <USBD_GetDescriptor+0x2ca>
 8005fb6:	a201      	add	r2, pc, #4	; (adr r2, 8005fbc <USBD_GetDescriptor+0x2c>)
 8005fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fbc:	0800602d 	.word	0x0800602d
 8005fc0:	08006045 	.word	0x08006045
 8005fc4:	08006085 	.word	0x08006085
 8005fc8:	0800625b 	.word	0x0800625b
 8005fcc:	0800625b 	.word	0x0800625b
 8005fd0:	080061fb 	.word	0x080061fb
 8005fd4:	08006227 	.word	0x08006227
 8005fd8:	0800625b 	.word	0x0800625b
 8005fdc:	0800625b 	.word	0x0800625b
 8005fe0:	0800625b 	.word	0x0800625b
 8005fe4:	0800625b 	.word	0x0800625b
 8005fe8:	0800625b 	.word	0x0800625b
 8005fec:	0800625b 	.word	0x0800625b
 8005ff0:	0800625b 	.word	0x0800625b
 8005ff4:	08005ff9 	.word	0x08005ff9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ffe:	69db      	ldr	r3, [r3, #28]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d00b      	beq.n	800601c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800600a:	69db      	ldr	r3, [r3, #28]
 800600c:	687a      	ldr	r2, [r7, #4]
 800600e:	7c12      	ldrb	r2, [r2, #16]
 8006010:	f107 0108 	add.w	r1, r7, #8
 8006014:	4610      	mov	r0, r2
 8006016:	4798      	blx	r3
 8006018:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800601a:	e126      	b.n	800626a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800601c:	6839      	ldr	r1, [r7, #0]
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f000 fb0e 	bl	8006640 <USBD_CtlError>
        err++;
 8006024:	7afb      	ldrb	r3, [r7, #11]
 8006026:	3301      	adds	r3, #1
 8006028:	72fb      	strb	r3, [r7, #11]
      break;
 800602a:	e11e      	b.n	800626a <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	687a      	ldr	r2, [r7, #4]
 8006036:	7c12      	ldrb	r2, [r2, #16]
 8006038:	f107 0108 	add.w	r1, r7, #8
 800603c:	4610      	mov	r0, r2
 800603e:	4798      	blx	r3
 8006040:	60f8      	str	r0, [r7, #12]
      break;
 8006042:	e112      	b.n	800626a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	7c1b      	ldrb	r3, [r3, #16]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d10d      	bne.n	8006068 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006054:	f107 0208 	add.w	r2, r7, #8
 8006058:	4610      	mov	r0, r2
 800605a:	4798      	blx	r3
 800605c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	3301      	adds	r3, #1
 8006062:	2202      	movs	r2, #2
 8006064:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006066:	e100      	b.n	800626a <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800606e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006070:	f107 0208 	add.w	r2, r7, #8
 8006074:	4610      	mov	r0, r2
 8006076:	4798      	blx	r3
 8006078:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	3301      	adds	r3, #1
 800607e:	2202      	movs	r2, #2
 8006080:	701a      	strb	r2, [r3, #0]
      break;
 8006082:	e0f2      	b.n	800626a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	885b      	ldrh	r3, [r3, #2]
 8006088:	b2db      	uxtb	r3, r3
 800608a:	2b05      	cmp	r3, #5
 800608c:	f200 80ac 	bhi.w	80061e8 <USBD_GetDescriptor+0x258>
 8006090:	a201      	add	r2, pc, #4	; (adr r2, 8006098 <USBD_GetDescriptor+0x108>)
 8006092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006096:	bf00      	nop
 8006098:	080060b1 	.word	0x080060b1
 800609c:	080060e5 	.word	0x080060e5
 80060a0:	08006119 	.word	0x08006119
 80060a4:	0800614d 	.word	0x0800614d
 80060a8:	08006181 	.word	0x08006181
 80060ac:	080061b5 	.word	0x080061b5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d00b      	beq.n	80060d4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	687a      	ldr	r2, [r7, #4]
 80060c6:	7c12      	ldrb	r2, [r2, #16]
 80060c8:	f107 0108 	add.w	r1, r7, #8
 80060cc:	4610      	mov	r0, r2
 80060ce:	4798      	blx	r3
 80060d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80060d2:	e091      	b.n	80061f8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80060d4:	6839      	ldr	r1, [r7, #0]
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f000 fab2 	bl	8006640 <USBD_CtlError>
            err++;
 80060dc:	7afb      	ldrb	r3, [r7, #11]
 80060de:	3301      	adds	r3, #1
 80060e0:	72fb      	strb	r3, [r7, #11]
          break;
 80060e2:	e089      	b.n	80061f8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80060ea:	689b      	ldr	r3, [r3, #8]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d00b      	beq.n	8006108 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80060f6:	689b      	ldr	r3, [r3, #8]
 80060f8:	687a      	ldr	r2, [r7, #4]
 80060fa:	7c12      	ldrb	r2, [r2, #16]
 80060fc:	f107 0108 	add.w	r1, r7, #8
 8006100:	4610      	mov	r0, r2
 8006102:	4798      	blx	r3
 8006104:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006106:	e077      	b.n	80061f8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006108:	6839      	ldr	r1, [r7, #0]
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f000 fa98 	bl	8006640 <USBD_CtlError>
            err++;
 8006110:	7afb      	ldrb	r3, [r7, #11]
 8006112:	3301      	adds	r3, #1
 8006114:	72fb      	strb	r3, [r7, #11]
          break;
 8006116:	e06f      	b.n	80061f8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800611e:	68db      	ldr	r3, [r3, #12]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d00b      	beq.n	800613c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800612a:	68db      	ldr	r3, [r3, #12]
 800612c:	687a      	ldr	r2, [r7, #4]
 800612e:	7c12      	ldrb	r2, [r2, #16]
 8006130:	f107 0108 	add.w	r1, r7, #8
 8006134:	4610      	mov	r0, r2
 8006136:	4798      	blx	r3
 8006138:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800613a:	e05d      	b.n	80061f8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800613c:	6839      	ldr	r1, [r7, #0]
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f000 fa7e 	bl	8006640 <USBD_CtlError>
            err++;
 8006144:	7afb      	ldrb	r3, [r7, #11]
 8006146:	3301      	adds	r3, #1
 8006148:	72fb      	strb	r3, [r7, #11]
          break;
 800614a:	e055      	b.n	80061f8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006152:	691b      	ldr	r3, [r3, #16]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d00b      	beq.n	8006170 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800615e:	691b      	ldr	r3, [r3, #16]
 8006160:	687a      	ldr	r2, [r7, #4]
 8006162:	7c12      	ldrb	r2, [r2, #16]
 8006164:	f107 0108 	add.w	r1, r7, #8
 8006168:	4610      	mov	r0, r2
 800616a:	4798      	blx	r3
 800616c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800616e:	e043      	b.n	80061f8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006170:	6839      	ldr	r1, [r7, #0]
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f000 fa64 	bl	8006640 <USBD_CtlError>
            err++;
 8006178:	7afb      	ldrb	r3, [r7, #11]
 800617a:	3301      	adds	r3, #1
 800617c:	72fb      	strb	r3, [r7, #11]
          break;
 800617e:	e03b      	b.n	80061f8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006186:	695b      	ldr	r3, [r3, #20]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d00b      	beq.n	80061a4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006192:	695b      	ldr	r3, [r3, #20]
 8006194:	687a      	ldr	r2, [r7, #4]
 8006196:	7c12      	ldrb	r2, [r2, #16]
 8006198:	f107 0108 	add.w	r1, r7, #8
 800619c:	4610      	mov	r0, r2
 800619e:	4798      	blx	r3
 80061a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80061a2:	e029      	b.n	80061f8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80061a4:	6839      	ldr	r1, [r7, #0]
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f000 fa4a 	bl	8006640 <USBD_CtlError>
            err++;
 80061ac:	7afb      	ldrb	r3, [r7, #11]
 80061ae:	3301      	adds	r3, #1
 80061b0:	72fb      	strb	r3, [r7, #11]
          break;
 80061b2:	e021      	b.n	80061f8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061ba:	699b      	ldr	r3, [r3, #24]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d00b      	beq.n	80061d8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061c6:	699b      	ldr	r3, [r3, #24]
 80061c8:	687a      	ldr	r2, [r7, #4]
 80061ca:	7c12      	ldrb	r2, [r2, #16]
 80061cc:	f107 0108 	add.w	r1, r7, #8
 80061d0:	4610      	mov	r0, r2
 80061d2:	4798      	blx	r3
 80061d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80061d6:	e00f      	b.n	80061f8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80061d8:	6839      	ldr	r1, [r7, #0]
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f000 fa30 	bl	8006640 <USBD_CtlError>
            err++;
 80061e0:	7afb      	ldrb	r3, [r7, #11]
 80061e2:	3301      	adds	r3, #1
 80061e4:	72fb      	strb	r3, [r7, #11]
          break;
 80061e6:	e007      	b.n	80061f8 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80061e8:	6839      	ldr	r1, [r7, #0]
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f000 fa28 	bl	8006640 <USBD_CtlError>
          err++;
 80061f0:	7afb      	ldrb	r3, [r7, #11]
 80061f2:	3301      	adds	r3, #1
 80061f4:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80061f6:	bf00      	nop
      }
      break;
 80061f8:	e037      	b.n	800626a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	7c1b      	ldrb	r3, [r3, #16]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d109      	bne.n	8006216 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006208:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800620a:	f107 0208 	add.w	r2, r7, #8
 800620e:	4610      	mov	r0, r2
 8006210:	4798      	blx	r3
 8006212:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006214:	e029      	b.n	800626a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006216:	6839      	ldr	r1, [r7, #0]
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f000 fa11 	bl	8006640 <USBD_CtlError>
        err++;
 800621e:	7afb      	ldrb	r3, [r7, #11]
 8006220:	3301      	adds	r3, #1
 8006222:	72fb      	strb	r3, [r7, #11]
      break;
 8006224:	e021      	b.n	800626a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	7c1b      	ldrb	r3, [r3, #16]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d10d      	bne.n	800624a <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006236:	f107 0208 	add.w	r2, r7, #8
 800623a:	4610      	mov	r0, r2
 800623c:	4798      	blx	r3
 800623e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	3301      	adds	r3, #1
 8006244:	2207      	movs	r2, #7
 8006246:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006248:	e00f      	b.n	800626a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800624a:	6839      	ldr	r1, [r7, #0]
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f000 f9f7 	bl	8006640 <USBD_CtlError>
        err++;
 8006252:	7afb      	ldrb	r3, [r7, #11]
 8006254:	3301      	adds	r3, #1
 8006256:	72fb      	strb	r3, [r7, #11]
      break;
 8006258:	e007      	b.n	800626a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800625a:	6839      	ldr	r1, [r7, #0]
 800625c:	6878      	ldr	r0, [r7, #4]
 800625e:	f000 f9ef 	bl	8006640 <USBD_CtlError>
      err++;
 8006262:	7afb      	ldrb	r3, [r7, #11]
 8006264:	3301      	adds	r3, #1
 8006266:	72fb      	strb	r3, [r7, #11]
      break;
 8006268:	bf00      	nop
  }

  if (err != 0U)
 800626a:	7afb      	ldrb	r3, [r7, #11]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d11e      	bne.n	80062ae <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	88db      	ldrh	r3, [r3, #6]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d016      	beq.n	80062a6 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8006278:	893b      	ldrh	r3, [r7, #8]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d00e      	beq.n	800629c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	88da      	ldrh	r2, [r3, #6]
 8006282:	893b      	ldrh	r3, [r7, #8]
 8006284:	4293      	cmp	r3, r2
 8006286:	bf28      	it	cs
 8006288:	4613      	movcs	r3, r2
 800628a:	b29b      	uxth	r3, r3
 800628c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800628e:	893b      	ldrh	r3, [r7, #8]
 8006290:	461a      	mov	r2, r3
 8006292:	68f9      	ldr	r1, [r7, #12]
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f000 fa44 	bl	8006722 <USBD_CtlSendData>
 800629a:	e009      	b.n	80062b0 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800629c:	6839      	ldr	r1, [r7, #0]
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f000 f9ce 	bl	8006640 <USBD_CtlError>
 80062a4:	e004      	b.n	80062b0 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f000 fa95 	bl	80067d6 <USBD_CtlSendStatus>
 80062ac:	e000      	b.n	80062b0 <USBD_GetDescriptor+0x320>
    return;
 80062ae:	bf00      	nop
  }
}
 80062b0:	3710      	adds	r7, #16
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}
 80062b6:	bf00      	nop

080062b8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b084      	sub	sp, #16
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
 80062c0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	889b      	ldrh	r3, [r3, #4]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d131      	bne.n	800632e <USBD_SetAddress+0x76>
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	88db      	ldrh	r3, [r3, #6]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d12d      	bne.n	800632e <USBD_SetAddress+0x76>
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	885b      	ldrh	r3, [r3, #2]
 80062d6:	2b7f      	cmp	r3, #127	; 0x7f
 80062d8:	d829      	bhi.n	800632e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	885b      	ldrh	r3, [r3, #2]
 80062de:	b2db      	uxtb	r3, r3
 80062e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062e4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062ec:	b2db      	uxtb	r3, r3
 80062ee:	2b03      	cmp	r3, #3
 80062f0:	d104      	bne.n	80062fc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80062f2:	6839      	ldr	r1, [r7, #0]
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	f000 f9a3 	bl	8006640 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062fa:	e01d      	b.n	8006338 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	7bfa      	ldrb	r2, [r7, #15]
 8006300:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006304:	7bfb      	ldrb	r3, [r7, #15]
 8006306:	4619      	mov	r1, r3
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f000 ffcb 	bl	80072a4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	f000 fa61 	bl	80067d6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006314:	7bfb      	ldrb	r3, [r7, #15]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d004      	beq.n	8006324 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2202      	movs	r2, #2
 800631e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006322:	e009      	b.n	8006338 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2201      	movs	r2, #1
 8006328:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800632c:	e004      	b.n	8006338 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800632e:	6839      	ldr	r1, [r7, #0]
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f000 f985 	bl	8006640 <USBD_CtlError>
  }
}
 8006336:	bf00      	nop
 8006338:	bf00      	nop
 800633a:	3710      	adds	r7, #16
 800633c:	46bd      	mov	sp, r7
 800633e:	bd80      	pop	{r7, pc}

08006340 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b084      	sub	sp, #16
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
 8006348:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800634a:	2300      	movs	r3, #0
 800634c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	885b      	ldrh	r3, [r3, #2]
 8006352:	b2da      	uxtb	r2, r3
 8006354:	4b4c      	ldr	r3, [pc, #304]	; (8006488 <USBD_SetConfig+0x148>)
 8006356:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006358:	4b4b      	ldr	r3, [pc, #300]	; (8006488 <USBD_SetConfig+0x148>)
 800635a:	781b      	ldrb	r3, [r3, #0]
 800635c:	2b01      	cmp	r3, #1
 800635e:	d905      	bls.n	800636c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006360:	6839      	ldr	r1, [r7, #0]
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f000 f96c 	bl	8006640 <USBD_CtlError>
    return USBD_FAIL;
 8006368:	2303      	movs	r3, #3
 800636a:	e088      	b.n	800647e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006372:	b2db      	uxtb	r3, r3
 8006374:	2b02      	cmp	r3, #2
 8006376:	d002      	beq.n	800637e <USBD_SetConfig+0x3e>
 8006378:	2b03      	cmp	r3, #3
 800637a:	d025      	beq.n	80063c8 <USBD_SetConfig+0x88>
 800637c:	e071      	b.n	8006462 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800637e:	4b42      	ldr	r3, [pc, #264]	; (8006488 <USBD_SetConfig+0x148>)
 8006380:	781b      	ldrb	r3, [r3, #0]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d01c      	beq.n	80063c0 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8006386:	4b40      	ldr	r3, [pc, #256]	; (8006488 <USBD_SetConfig+0x148>)
 8006388:	781b      	ldrb	r3, [r3, #0]
 800638a:	461a      	mov	r2, r3
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006390:	4b3d      	ldr	r3, [pc, #244]	; (8006488 <USBD_SetConfig+0x148>)
 8006392:	781b      	ldrb	r3, [r3, #0]
 8006394:	4619      	mov	r1, r3
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f7ff f91e 	bl	80055d8 <USBD_SetClassConfig>
 800639c:	4603      	mov	r3, r0
 800639e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80063a0:	7bfb      	ldrb	r3, [r7, #15]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d004      	beq.n	80063b0 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80063a6:	6839      	ldr	r1, [r7, #0]
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f000 f949 	bl	8006640 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80063ae:	e065      	b.n	800647c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	f000 fa10 	bl	80067d6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2203      	movs	r2, #3
 80063ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80063be:	e05d      	b.n	800647c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f000 fa08 	bl	80067d6 <USBD_CtlSendStatus>
      break;
 80063c6:	e059      	b.n	800647c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80063c8:	4b2f      	ldr	r3, [pc, #188]	; (8006488 <USBD_SetConfig+0x148>)
 80063ca:	781b      	ldrb	r3, [r3, #0]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d112      	bne.n	80063f6 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2202      	movs	r2, #2
 80063d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80063d8:	4b2b      	ldr	r3, [pc, #172]	; (8006488 <USBD_SetConfig+0x148>)
 80063da:	781b      	ldrb	r3, [r3, #0]
 80063dc:	461a      	mov	r2, r3
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80063e2:	4b29      	ldr	r3, [pc, #164]	; (8006488 <USBD_SetConfig+0x148>)
 80063e4:	781b      	ldrb	r3, [r3, #0]
 80063e6:	4619      	mov	r1, r3
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	f7ff f911 	bl	8005610 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f000 f9f1 	bl	80067d6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80063f4:	e042      	b.n	800647c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80063f6:	4b24      	ldr	r3, [pc, #144]	; (8006488 <USBD_SetConfig+0x148>)
 80063f8:	781b      	ldrb	r3, [r3, #0]
 80063fa:	461a      	mov	r2, r3
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	685b      	ldr	r3, [r3, #4]
 8006400:	429a      	cmp	r2, r3
 8006402:	d02a      	beq.n	800645a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	685b      	ldr	r3, [r3, #4]
 8006408:	b2db      	uxtb	r3, r3
 800640a:	4619      	mov	r1, r3
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	f7ff f8ff 	bl	8005610 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006412:	4b1d      	ldr	r3, [pc, #116]	; (8006488 <USBD_SetConfig+0x148>)
 8006414:	781b      	ldrb	r3, [r3, #0]
 8006416:	461a      	mov	r2, r3
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800641c:	4b1a      	ldr	r3, [pc, #104]	; (8006488 <USBD_SetConfig+0x148>)
 800641e:	781b      	ldrb	r3, [r3, #0]
 8006420:	4619      	mov	r1, r3
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	f7ff f8d8 	bl	80055d8 <USBD_SetClassConfig>
 8006428:	4603      	mov	r3, r0
 800642a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800642c:	7bfb      	ldrb	r3, [r7, #15]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d00f      	beq.n	8006452 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8006432:	6839      	ldr	r1, [r7, #0]
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	f000 f903 	bl	8006640 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	b2db      	uxtb	r3, r3
 8006440:	4619      	mov	r1, r3
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f7ff f8e4 	bl	8005610 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2202      	movs	r2, #2
 800644c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006450:	e014      	b.n	800647c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f000 f9bf 	bl	80067d6 <USBD_CtlSendStatus>
      break;
 8006458:	e010      	b.n	800647c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f000 f9bb 	bl	80067d6 <USBD_CtlSendStatus>
      break;
 8006460:	e00c      	b.n	800647c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006462:	6839      	ldr	r1, [r7, #0]
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f000 f8eb 	bl	8006640 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800646a:	4b07      	ldr	r3, [pc, #28]	; (8006488 <USBD_SetConfig+0x148>)
 800646c:	781b      	ldrb	r3, [r3, #0]
 800646e:	4619      	mov	r1, r3
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f7ff f8cd 	bl	8005610 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006476:	2303      	movs	r3, #3
 8006478:	73fb      	strb	r3, [r7, #15]
      break;
 800647a:	bf00      	nop
  }

  return ret;
 800647c:	7bfb      	ldrb	r3, [r7, #15]
}
 800647e:	4618      	mov	r0, r3
 8006480:	3710      	adds	r7, #16
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}
 8006486:	bf00      	nop
 8006488:	20000200 	.word	0x20000200

0800648c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b082      	sub	sp, #8
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
 8006494:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	88db      	ldrh	r3, [r3, #6]
 800649a:	2b01      	cmp	r3, #1
 800649c:	d004      	beq.n	80064a8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800649e:	6839      	ldr	r1, [r7, #0]
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	f000 f8cd 	bl	8006640 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80064a6:	e023      	b.n	80064f0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064ae:	b2db      	uxtb	r3, r3
 80064b0:	2b02      	cmp	r3, #2
 80064b2:	dc02      	bgt.n	80064ba <USBD_GetConfig+0x2e>
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	dc03      	bgt.n	80064c0 <USBD_GetConfig+0x34>
 80064b8:	e015      	b.n	80064e6 <USBD_GetConfig+0x5a>
 80064ba:	2b03      	cmp	r3, #3
 80064bc:	d00b      	beq.n	80064d6 <USBD_GetConfig+0x4a>
 80064be:	e012      	b.n	80064e6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2200      	movs	r2, #0
 80064c4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	3308      	adds	r3, #8
 80064ca:	2201      	movs	r2, #1
 80064cc:	4619      	mov	r1, r3
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f000 f927 	bl	8006722 <USBD_CtlSendData>
        break;
 80064d4:	e00c      	b.n	80064f0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	3304      	adds	r3, #4
 80064da:	2201      	movs	r2, #1
 80064dc:	4619      	mov	r1, r3
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f000 f91f 	bl	8006722 <USBD_CtlSendData>
        break;
 80064e4:	e004      	b.n	80064f0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80064e6:	6839      	ldr	r1, [r7, #0]
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	f000 f8a9 	bl	8006640 <USBD_CtlError>
        break;
 80064ee:	bf00      	nop
}
 80064f0:	bf00      	nop
 80064f2:	3708      	adds	r7, #8
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}

080064f8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b082      	sub	sp, #8
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
 8006500:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006508:	b2db      	uxtb	r3, r3
 800650a:	3b01      	subs	r3, #1
 800650c:	2b02      	cmp	r3, #2
 800650e:	d81e      	bhi.n	800654e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	88db      	ldrh	r3, [r3, #6]
 8006514:	2b02      	cmp	r3, #2
 8006516:	d004      	beq.n	8006522 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006518:	6839      	ldr	r1, [r7, #0]
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f000 f890 	bl	8006640 <USBD_CtlError>
        break;
 8006520:	e01a      	b.n	8006558 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2201      	movs	r2, #1
 8006526:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800652e:	2b00      	cmp	r3, #0
 8006530:	d005      	beq.n	800653e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	68db      	ldr	r3, [r3, #12]
 8006536:	f043 0202 	orr.w	r2, r3, #2
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	330c      	adds	r3, #12
 8006542:	2202      	movs	r2, #2
 8006544:	4619      	mov	r1, r3
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f000 f8eb 	bl	8006722 <USBD_CtlSendData>
      break;
 800654c:	e004      	b.n	8006558 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800654e:	6839      	ldr	r1, [r7, #0]
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f000 f875 	bl	8006640 <USBD_CtlError>
      break;
 8006556:	bf00      	nop
  }
}
 8006558:	bf00      	nop
 800655a:	3708      	adds	r7, #8
 800655c:	46bd      	mov	sp, r7
 800655e:	bd80      	pop	{r7, pc}

08006560 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b082      	sub	sp, #8
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
 8006568:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	885b      	ldrh	r3, [r3, #2]
 800656e:	2b01      	cmp	r3, #1
 8006570:	d106      	bne.n	8006580 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2201      	movs	r2, #1
 8006576:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	f000 f92b 	bl	80067d6 <USBD_CtlSendStatus>
  }
}
 8006580:	bf00      	nop
 8006582:	3708      	adds	r7, #8
 8006584:	46bd      	mov	sp, r7
 8006586:	bd80      	pop	{r7, pc}

08006588 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b082      	sub	sp, #8
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
 8006590:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006598:	b2db      	uxtb	r3, r3
 800659a:	3b01      	subs	r3, #1
 800659c:	2b02      	cmp	r3, #2
 800659e:	d80b      	bhi.n	80065b8 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	885b      	ldrh	r3, [r3, #2]
 80065a4:	2b01      	cmp	r3, #1
 80065a6:	d10c      	bne.n	80065c2 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2200      	movs	r2, #0
 80065ac:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f000 f910 	bl	80067d6 <USBD_CtlSendStatus>
      }
      break;
 80065b6:	e004      	b.n	80065c2 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80065b8:	6839      	ldr	r1, [r7, #0]
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f000 f840 	bl	8006640 <USBD_CtlError>
      break;
 80065c0:	e000      	b.n	80065c4 <USBD_ClrFeature+0x3c>
      break;
 80065c2:	bf00      	nop
  }
}
 80065c4:	bf00      	nop
 80065c6:	3708      	adds	r7, #8
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}

080065cc <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b084      	sub	sp, #16
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
 80065d4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	781a      	ldrb	r2, [r3, #0]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	3301      	adds	r3, #1
 80065e6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	781a      	ldrb	r2, [r3, #0]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	3301      	adds	r3, #1
 80065f4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80065f6:	68f8      	ldr	r0, [r7, #12]
 80065f8:	f7ff fa91 	bl	8005b1e <SWAPBYTE>
 80065fc:	4603      	mov	r3, r0
 80065fe:	461a      	mov	r2, r3
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	3301      	adds	r3, #1
 8006608:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	3301      	adds	r3, #1
 800660e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006610:	68f8      	ldr	r0, [r7, #12]
 8006612:	f7ff fa84 	bl	8005b1e <SWAPBYTE>
 8006616:	4603      	mov	r3, r0
 8006618:	461a      	mov	r2, r3
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	3301      	adds	r3, #1
 8006622:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	3301      	adds	r3, #1
 8006628:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800662a:	68f8      	ldr	r0, [r7, #12]
 800662c:	f7ff fa77 	bl	8005b1e <SWAPBYTE>
 8006630:	4603      	mov	r3, r0
 8006632:	461a      	mov	r2, r3
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	80da      	strh	r2, [r3, #6]
}
 8006638:	bf00      	nop
 800663a:	3710      	adds	r7, #16
 800663c:	46bd      	mov	sp, r7
 800663e:	bd80      	pop	{r7, pc}

08006640 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b082      	sub	sp, #8
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
 8006648:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800664a:	2180      	movs	r1, #128	; 0x80
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f000 fd91 	bl	8007174 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006652:	2100      	movs	r1, #0
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f000 fd8d 	bl	8007174 <USBD_LL_StallEP>
}
 800665a:	bf00      	nop
 800665c:	3708      	adds	r7, #8
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}

08006662 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006662:	b580      	push	{r7, lr}
 8006664:	b086      	sub	sp, #24
 8006666:	af00      	add	r7, sp, #0
 8006668:	60f8      	str	r0, [r7, #12]
 800666a:	60b9      	str	r1, [r7, #8]
 800666c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800666e:	2300      	movs	r3, #0
 8006670:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d036      	beq.n	80066e6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800667c:	6938      	ldr	r0, [r7, #16]
 800667e:	f000 f836 	bl	80066ee <USBD_GetLen>
 8006682:	4603      	mov	r3, r0
 8006684:	3301      	adds	r3, #1
 8006686:	b29b      	uxth	r3, r3
 8006688:	005b      	lsls	r3, r3, #1
 800668a:	b29a      	uxth	r2, r3
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006690:	7dfb      	ldrb	r3, [r7, #23]
 8006692:	68ba      	ldr	r2, [r7, #8]
 8006694:	4413      	add	r3, r2
 8006696:	687a      	ldr	r2, [r7, #4]
 8006698:	7812      	ldrb	r2, [r2, #0]
 800669a:	701a      	strb	r2, [r3, #0]
  idx++;
 800669c:	7dfb      	ldrb	r3, [r7, #23]
 800669e:	3301      	adds	r3, #1
 80066a0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80066a2:	7dfb      	ldrb	r3, [r7, #23]
 80066a4:	68ba      	ldr	r2, [r7, #8]
 80066a6:	4413      	add	r3, r2
 80066a8:	2203      	movs	r2, #3
 80066aa:	701a      	strb	r2, [r3, #0]
  idx++;
 80066ac:	7dfb      	ldrb	r3, [r7, #23]
 80066ae:	3301      	adds	r3, #1
 80066b0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80066b2:	e013      	b.n	80066dc <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80066b4:	7dfb      	ldrb	r3, [r7, #23]
 80066b6:	68ba      	ldr	r2, [r7, #8]
 80066b8:	4413      	add	r3, r2
 80066ba:	693a      	ldr	r2, [r7, #16]
 80066bc:	7812      	ldrb	r2, [r2, #0]
 80066be:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	3301      	adds	r3, #1
 80066c4:	613b      	str	r3, [r7, #16]
    idx++;
 80066c6:	7dfb      	ldrb	r3, [r7, #23]
 80066c8:	3301      	adds	r3, #1
 80066ca:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80066cc:	7dfb      	ldrb	r3, [r7, #23]
 80066ce:	68ba      	ldr	r2, [r7, #8]
 80066d0:	4413      	add	r3, r2
 80066d2:	2200      	movs	r2, #0
 80066d4:	701a      	strb	r2, [r3, #0]
    idx++;
 80066d6:	7dfb      	ldrb	r3, [r7, #23]
 80066d8:	3301      	adds	r3, #1
 80066da:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	781b      	ldrb	r3, [r3, #0]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d1e7      	bne.n	80066b4 <USBD_GetString+0x52>
 80066e4:	e000      	b.n	80066e8 <USBD_GetString+0x86>
    return;
 80066e6:	bf00      	nop
  }
}
 80066e8:	3718      	adds	r7, #24
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}

080066ee <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80066ee:	b480      	push	{r7}
 80066f0:	b085      	sub	sp, #20
 80066f2:	af00      	add	r7, sp, #0
 80066f4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80066f6:	2300      	movs	r3, #0
 80066f8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80066fe:	e005      	b.n	800670c <USBD_GetLen+0x1e>
  {
    len++;
 8006700:	7bfb      	ldrb	r3, [r7, #15]
 8006702:	3301      	adds	r3, #1
 8006704:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	3301      	adds	r3, #1
 800670a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	781b      	ldrb	r3, [r3, #0]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d1f5      	bne.n	8006700 <USBD_GetLen+0x12>
  }

  return len;
 8006714:	7bfb      	ldrb	r3, [r7, #15]
}
 8006716:	4618      	mov	r0, r3
 8006718:	3714      	adds	r7, #20
 800671a:	46bd      	mov	sp, r7
 800671c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006720:	4770      	bx	lr

08006722 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006722:	b580      	push	{r7, lr}
 8006724:	b084      	sub	sp, #16
 8006726:	af00      	add	r7, sp, #0
 8006728:	60f8      	str	r0, [r7, #12]
 800672a:	60b9      	str	r1, [r7, #8]
 800672c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	2202      	movs	r2, #2
 8006732:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	687a      	ldr	r2, [r7, #4]
 800673a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	687a      	ldr	r2, [r7, #4]
 8006740:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	68ba      	ldr	r2, [r7, #8]
 8006746:	2100      	movs	r1, #0
 8006748:	68f8      	ldr	r0, [r7, #12]
 800674a:	f000 fde1 	bl	8007310 <USBD_LL_Transmit>

  return USBD_OK;
 800674e:	2300      	movs	r3, #0
}
 8006750:	4618      	mov	r0, r3
 8006752:	3710      	adds	r7, #16
 8006754:	46bd      	mov	sp, r7
 8006756:	bd80      	pop	{r7, pc}

08006758 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b084      	sub	sp, #16
 800675c:	af00      	add	r7, sp, #0
 800675e:	60f8      	str	r0, [r7, #12]
 8006760:	60b9      	str	r1, [r7, #8]
 8006762:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	68ba      	ldr	r2, [r7, #8]
 8006768:	2100      	movs	r1, #0
 800676a:	68f8      	ldr	r0, [r7, #12]
 800676c:	f000 fdd0 	bl	8007310 <USBD_LL_Transmit>

  return USBD_OK;
 8006770:	2300      	movs	r3, #0
}
 8006772:	4618      	mov	r0, r3
 8006774:	3710      	adds	r7, #16
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}

0800677a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800677a:	b580      	push	{r7, lr}
 800677c:	b084      	sub	sp, #16
 800677e:	af00      	add	r7, sp, #0
 8006780:	60f8      	str	r0, [r7, #12]
 8006782:	60b9      	str	r1, [r7, #8]
 8006784:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	2203      	movs	r2, #3
 800678a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	687a      	ldr	r2, [r7, #4]
 8006792:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	687a      	ldr	r2, [r7, #4]
 800679a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	68ba      	ldr	r2, [r7, #8]
 80067a2:	2100      	movs	r1, #0
 80067a4:	68f8      	ldr	r0, [r7, #12]
 80067a6:	f000 fdeb 	bl	8007380 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80067aa:	2300      	movs	r3, #0
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	3710      	adds	r7, #16
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}

080067b4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b084      	sub	sp, #16
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	60f8      	str	r0, [r7, #12]
 80067bc:	60b9      	str	r1, [r7, #8]
 80067be:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	68ba      	ldr	r2, [r7, #8]
 80067c4:	2100      	movs	r1, #0
 80067c6:	68f8      	ldr	r0, [r7, #12]
 80067c8:	f000 fdda 	bl	8007380 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80067cc:	2300      	movs	r3, #0
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	3710      	adds	r7, #16
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}

080067d6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80067d6:	b580      	push	{r7, lr}
 80067d8:	b082      	sub	sp, #8
 80067da:	af00      	add	r7, sp, #0
 80067dc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2204      	movs	r2, #4
 80067e2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80067e6:	2300      	movs	r3, #0
 80067e8:	2200      	movs	r2, #0
 80067ea:	2100      	movs	r1, #0
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	f000 fd8f 	bl	8007310 <USBD_LL_Transmit>

  return USBD_OK;
 80067f2:	2300      	movs	r3, #0
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	3708      	adds	r7, #8
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd80      	pop	{r7, pc}

080067fc <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b082      	sub	sp, #8
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2205      	movs	r2, #5
 8006808:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800680c:	2300      	movs	r3, #0
 800680e:	2200      	movs	r2, #0
 8006810:	2100      	movs	r1, #0
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f000 fdb4 	bl	8007380 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006818:	2300      	movs	r3, #0
}
 800681a:	4618      	mov	r0, r3
 800681c:	3708      	adds	r7, #8
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}
	...

08006824 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006828:	2200      	movs	r2, #0
 800682a:	4912      	ldr	r1, [pc, #72]	; (8006874 <MX_USB_DEVICE_Init+0x50>)
 800682c:	4812      	ldr	r0, [pc, #72]	; (8006878 <MX_USB_DEVICE_Init+0x54>)
 800682e:	f7fe fe65 	bl	80054fc <USBD_Init>
 8006832:	4603      	mov	r3, r0
 8006834:	2b00      	cmp	r3, #0
 8006836:	d001      	beq.n	800683c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006838:	f7f9 fd9e 	bl	8000378 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800683c:	490f      	ldr	r1, [pc, #60]	; (800687c <MX_USB_DEVICE_Init+0x58>)
 800683e:	480e      	ldr	r0, [pc, #56]	; (8006878 <MX_USB_DEVICE_Init+0x54>)
 8006840:	f7fe fe8c 	bl	800555c <USBD_RegisterClass>
 8006844:	4603      	mov	r3, r0
 8006846:	2b00      	cmp	r3, #0
 8006848:	d001      	beq.n	800684e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800684a:	f7f9 fd95 	bl	8000378 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800684e:	490c      	ldr	r1, [pc, #48]	; (8006880 <MX_USB_DEVICE_Init+0x5c>)
 8006850:	4809      	ldr	r0, [pc, #36]	; (8006878 <MX_USB_DEVICE_Init+0x54>)
 8006852:	f7fe fdad 	bl	80053b0 <USBD_CDC_RegisterInterface>
 8006856:	4603      	mov	r3, r0
 8006858:	2b00      	cmp	r3, #0
 800685a:	d001      	beq.n	8006860 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800685c:	f7f9 fd8c 	bl	8000378 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006860:	4805      	ldr	r0, [pc, #20]	; (8006878 <MX_USB_DEVICE_Init+0x54>)
 8006862:	f7fe fea2 	bl	80055aa <USBD_Start>
 8006866:	4603      	mov	r3, r0
 8006868:	2b00      	cmp	r3, #0
 800686a:	d001      	beq.n	8006870 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800686c:	f7f9 fd84 	bl	8000378 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006870:	bf00      	nop
 8006872:	bd80      	pop	{r7, pc}
 8006874:	20000140 	.word	0x20000140
 8006878:	20000204 	.word	0x20000204
 800687c:	20000028 	.word	0x20000028
 8006880:	2000012c 	.word	0x2000012c

08006884 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006888:	2200      	movs	r2, #0
 800688a:	4905      	ldr	r1, [pc, #20]	; (80068a0 <CDC_Init_FS+0x1c>)
 800688c:	4805      	ldr	r0, [pc, #20]	; (80068a4 <CDC_Init_FS+0x20>)
 800688e:	f7fe fda4 	bl	80053da <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006892:	4905      	ldr	r1, [pc, #20]	; (80068a8 <CDC_Init_FS+0x24>)
 8006894:	4803      	ldr	r0, [pc, #12]	; (80068a4 <CDC_Init_FS+0x20>)
 8006896:	f7fe fdbe 	bl	8005416 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800689a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800689c:	4618      	mov	r0, r3
 800689e:	bd80      	pop	{r7, pc}
 80068a0:	20000cd4 	.word	0x20000cd4
 80068a4:	20000204 	.word	0x20000204
 80068a8:	200004d4 	.word	0x200004d4

080068ac <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80068ac:	b480      	push	{r7}
 80068ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80068b0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	46bd      	mov	sp, r7
 80068b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ba:	4770      	bx	lr

080068bc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80068bc:	b480      	push	{r7}
 80068be:	b083      	sub	sp, #12
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	4603      	mov	r3, r0
 80068c4:	6039      	str	r1, [r7, #0]
 80068c6:	71fb      	strb	r3, [r7, #7]
 80068c8:	4613      	mov	r3, r2
 80068ca:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80068cc:	79fb      	ldrb	r3, [r7, #7]
 80068ce:	2b23      	cmp	r3, #35	; 0x23
 80068d0:	d84a      	bhi.n	8006968 <CDC_Control_FS+0xac>
 80068d2:	a201      	add	r2, pc, #4	; (adr r2, 80068d8 <CDC_Control_FS+0x1c>)
 80068d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068d8:	08006969 	.word	0x08006969
 80068dc:	08006969 	.word	0x08006969
 80068e0:	08006969 	.word	0x08006969
 80068e4:	08006969 	.word	0x08006969
 80068e8:	08006969 	.word	0x08006969
 80068ec:	08006969 	.word	0x08006969
 80068f0:	08006969 	.word	0x08006969
 80068f4:	08006969 	.word	0x08006969
 80068f8:	08006969 	.word	0x08006969
 80068fc:	08006969 	.word	0x08006969
 8006900:	08006969 	.word	0x08006969
 8006904:	08006969 	.word	0x08006969
 8006908:	08006969 	.word	0x08006969
 800690c:	08006969 	.word	0x08006969
 8006910:	08006969 	.word	0x08006969
 8006914:	08006969 	.word	0x08006969
 8006918:	08006969 	.word	0x08006969
 800691c:	08006969 	.word	0x08006969
 8006920:	08006969 	.word	0x08006969
 8006924:	08006969 	.word	0x08006969
 8006928:	08006969 	.word	0x08006969
 800692c:	08006969 	.word	0x08006969
 8006930:	08006969 	.word	0x08006969
 8006934:	08006969 	.word	0x08006969
 8006938:	08006969 	.word	0x08006969
 800693c:	08006969 	.word	0x08006969
 8006940:	08006969 	.word	0x08006969
 8006944:	08006969 	.word	0x08006969
 8006948:	08006969 	.word	0x08006969
 800694c:	08006969 	.word	0x08006969
 8006950:	08006969 	.word	0x08006969
 8006954:	08006969 	.word	0x08006969
 8006958:	08006969 	.word	0x08006969
 800695c:	08006969 	.word	0x08006969
 8006960:	08006969 	.word	0x08006969
 8006964:	08006969 	.word	0x08006969
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006968:	bf00      	nop
  }

  return (USBD_OK);
 800696a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800696c:	4618      	mov	r0, r3
 800696e:	370c      	adds	r7, #12
 8006970:	46bd      	mov	sp, r7
 8006972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006976:	4770      	bx	lr

08006978 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b084      	sub	sp, #16
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
 8006980:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006982:	6879      	ldr	r1, [r7, #4]
 8006984:	4812      	ldr	r0, [pc, #72]	; (80069d0 <CDC_Receive_FS+0x58>)
 8006986:	f7fe fd46 	bl	8005416 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800698a:	4811      	ldr	r0, [pc, #68]	; (80069d0 <CDC_Receive_FS+0x58>)
 800698c:	f7fe fd8c 	bl	80054a8 <USBD_CDC_ReceivePacket>

 CDC_Transmit_FS(buffer,*Len);
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	b29b      	uxth	r3, r3
 8006996:	4619      	mov	r1, r3
 8006998:	480e      	ldr	r0, [pc, #56]	; (80069d4 <CDC_Receive_FS+0x5c>)
 800699a:	f000 f81d 	bl	80069d8 <CDC_Transmit_FS>

 memset (buffer, '\0', 64);  // clear the buffer
 800699e:	2240      	movs	r2, #64	; 0x40
 80069a0:	2100      	movs	r1, #0
 80069a2:	480c      	ldr	r0, [pc, #48]	; (80069d4 <CDC_Receive_FS+0x5c>)
 80069a4:	f000 fdd6 	bl	8007554 <memset>
   uint8_t len = (uint8_t)*Len;
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	73fb      	strb	r3, [r7, #15]
   memcpy(buffer, Buf, len);  // copy the data to the buffer
 80069ae:	7bfb      	ldrb	r3, [r7, #15]
 80069b0:	461a      	mov	r2, r3
 80069b2:	6879      	ldr	r1, [r7, #4]
 80069b4:	4807      	ldr	r0, [pc, #28]	; (80069d4 <CDC_Receive_FS+0x5c>)
 80069b6:	f000 fdbf 	bl	8007538 <memcpy>
   memset(Buf, '\0', len);   // clear the Buf also
 80069ba:	7bfb      	ldrb	r3, [r7, #15]
 80069bc:	461a      	mov	r2, r3
 80069be:	2100      	movs	r1, #0
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f000 fdc7 	bl	8007554 <memset>

  return (USBD_OK);
 80069c6:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80069c8:	4618      	mov	r0, r3
 80069ca:	3710      	adds	r7, #16
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bd80      	pop	{r7, pc}
 80069d0:	20000204 	.word	0x20000204
 80069d4:	200001bc 	.word	0x200001bc

080069d8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b084      	sub	sp, #16
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
 80069e0:	460b      	mov	r3, r1
 80069e2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80069e4:	2300      	movs	r3, #0
 80069e6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80069e8:	4b0d      	ldr	r3, [pc, #52]	; (8006a20 <CDC_Transmit_FS+0x48>)
 80069ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80069ee:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d001      	beq.n	80069fe <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80069fa:	2301      	movs	r3, #1
 80069fc:	e00b      	b.n	8006a16 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80069fe:	887b      	ldrh	r3, [r7, #2]
 8006a00:	461a      	mov	r2, r3
 8006a02:	6879      	ldr	r1, [r7, #4]
 8006a04:	4806      	ldr	r0, [pc, #24]	; (8006a20 <CDC_Transmit_FS+0x48>)
 8006a06:	f7fe fce8 	bl	80053da <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006a0a:	4805      	ldr	r0, [pc, #20]	; (8006a20 <CDC_Transmit_FS+0x48>)
 8006a0c:	f7fe fd1c 	bl	8005448 <USBD_CDC_TransmitPacket>
 8006a10:	4603      	mov	r3, r0
 8006a12:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006a14:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a16:	4618      	mov	r0, r3
 8006a18:	3710      	adds	r7, #16
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bd80      	pop	{r7, pc}
 8006a1e:	bf00      	nop
 8006a20:	20000204 	.word	0x20000204

08006a24 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006a24:	b480      	push	{r7}
 8006a26:	b087      	sub	sp, #28
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	60f8      	str	r0, [r7, #12]
 8006a2c:	60b9      	str	r1, [r7, #8]
 8006a2e:	4613      	mov	r3, r2
 8006a30:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8006a32:	2300      	movs	r3, #0
 8006a34:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8006a36:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	371c      	adds	r7, #28
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a44:	4770      	bx	lr
	...

08006a48 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b083      	sub	sp, #12
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	4603      	mov	r3, r0
 8006a50:	6039      	str	r1, [r7, #0]
 8006a52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	2212      	movs	r2, #18
 8006a58:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006a5a:	4b03      	ldr	r3, [pc, #12]	; (8006a68 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	370c      	adds	r7, #12
 8006a60:	46bd      	mov	sp, r7
 8006a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a66:	4770      	bx	lr
 8006a68:	20000160 	.word	0x20000160

08006a6c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b083      	sub	sp, #12
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	4603      	mov	r3, r0
 8006a74:	6039      	str	r1, [r7, #0]
 8006a76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	2204      	movs	r2, #4
 8006a7c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006a7e:	4b03      	ldr	r3, [pc, #12]	; (8006a8c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006a80:	4618      	mov	r0, r3
 8006a82:	370c      	adds	r7, #12
 8006a84:	46bd      	mov	sp, r7
 8006a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8a:	4770      	bx	lr
 8006a8c:	20000180 	.word	0x20000180

08006a90 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b082      	sub	sp, #8
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	4603      	mov	r3, r0
 8006a98:	6039      	str	r1, [r7, #0]
 8006a9a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006a9c:	79fb      	ldrb	r3, [r7, #7]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d105      	bne.n	8006aae <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006aa2:	683a      	ldr	r2, [r7, #0]
 8006aa4:	4907      	ldr	r1, [pc, #28]	; (8006ac4 <USBD_FS_ProductStrDescriptor+0x34>)
 8006aa6:	4808      	ldr	r0, [pc, #32]	; (8006ac8 <USBD_FS_ProductStrDescriptor+0x38>)
 8006aa8:	f7ff fddb 	bl	8006662 <USBD_GetString>
 8006aac:	e004      	b.n	8006ab8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006aae:	683a      	ldr	r2, [r7, #0]
 8006ab0:	4904      	ldr	r1, [pc, #16]	; (8006ac4 <USBD_FS_ProductStrDescriptor+0x34>)
 8006ab2:	4805      	ldr	r0, [pc, #20]	; (8006ac8 <USBD_FS_ProductStrDescriptor+0x38>)
 8006ab4:	f7ff fdd5 	bl	8006662 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006ab8:	4b02      	ldr	r3, [pc, #8]	; (8006ac4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006aba:	4618      	mov	r0, r3
 8006abc:	3708      	adds	r7, #8
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bd80      	pop	{r7, pc}
 8006ac2:	bf00      	nop
 8006ac4:	200014d4 	.word	0x200014d4
 8006ac8:	0800757c 	.word	0x0800757c

08006acc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b082      	sub	sp, #8
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	6039      	str	r1, [r7, #0]
 8006ad6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006ad8:	683a      	ldr	r2, [r7, #0]
 8006ada:	4904      	ldr	r1, [pc, #16]	; (8006aec <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006adc:	4804      	ldr	r0, [pc, #16]	; (8006af0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006ade:	f7ff fdc0 	bl	8006662 <USBD_GetString>
  return USBD_StrDesc;
 8006ae2:	4b02      	ldr	r3, [pc, #8]	; (8006aec <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	3708      	adds	r7, #8
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}
 8006aec:	200014d4 	.word	0x200014d4
 8006af0:	08007594 	.word	0x08007594

08006af4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b082      	sub	sp, #8
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	4603      	mov	r3, r0
 8006afc:	6039      	str	r1, [r7, #0]
 8006afe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	221a      	movs	r2, #26
 8006b04:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006b06:	f000 f855 	bl	8006bb4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006b0a:	4b02      	ldr	r3, [pc, #8]	; (8006b14 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	3708      	adds	r7, #8
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}
 8006b14:	20000184 	.word	0x20000184

08006b18 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b082      	sub	sp, #8
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	4603      	mov	r3, r0
 8006b20:	6039      	str	r1, [r7, #0]
 8006b22:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006b24:	79fb      	ldrb	r3, [r7, #7]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d105      	bne.n	8006b36 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006b2a:	683a      	ldr	r2, [r7, #0]
 8006b2c:	4907      	ldr	r1, [pc, #28]	; (8006b4c <USBD_FS_ConfigStrDescriptor+0x34>)
 8006b2e:	4808      	ldr	r0, [pc, #32]	; (8006b50 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006b30:	f7ff fd97 	bl	8006662 <USBD_GetString>
 8006b34:	e004      	b.n	8006b40 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006b36:	683a      	ldr	r2, [r7, #0]
 8006b38:	4904      	ldr	r1, [pc, #16]	; (8006b4c <USBD_FS_ConfigStrDescriptor+0x34>)
 8006b3a:	4805      	ldr	r0, [pc, #20]	; (8006b50 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006b3c:	f7ff fd91 	bl	8006662 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006b40:	4b02      	ldr	r3, [pc, #8]	; (8006b4c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	3708      	adds	r7, #8
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}
 8006b4a:	bf00      	nop
 8006b4c:	200014d4 	.word	0x200014d4
 8006b50:	080075a8 	.word	0x080075a8

08006b54 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b082      	sub	sp, #8
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	6039      	str	r1, [r7, #0]
 8006b5e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006b60:	79fb      	ldrb	r3, [r7, #7]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d105      	bne.n	8006b72 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006b66:	683a      	ldr	r2, [r7, #0]
 8006b68:	4907      	ldr	r1, [pc, #28]	; (8006b88 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006b6a:	4808      	ldr	r0, [pc, #32]	; (8006b8c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006b6c:	f7ff fd79 	bl	8006662 <USBD_GetString>
 8006b70:	e004      	b.n	8006b7c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006b72:	683a      	ldr	r2, [r7, #0]
 8006b74:	4904      	ldr	r1, [pc, #16]	; (8006b88 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006b76:	4805      	ldr	r0, [pc, #20]	; (8006b8c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006b78:	f7ff fd73 	bl	8006662 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006b7c:	4b02      	ldr	r3, [pc, #8]	; (8006b88 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	3708      	adds	r7, #8
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}
 8006b86:	bf00      	nop
 8006b88:	200014d4 	.word	0x200014d4
 8006b8c:	080075b4 	.word	0x080075b4

08006b90 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006b90:	b480      	push	{r7}
 8006b92:	b083      	sub	sp, #12
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	4603      	mov	r3, r0
 8006b98:	6039      	str	r1, [r7, #0]
 8006b9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	220c      	movs	r2, #12
 8006ba0:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8006ba2:	4b03      	ldr	r3, [pc, #12]	; (8006bb0 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	370c      	adds	r7, #12
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bae:	4770      	bx	lr
 8006bb0:	20000174 	.word	0x20000174

08006bb4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b084      	sub	sp, #16
 8006bb8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006bba:	4b0f      	ldr	r3, [pc, #60]	; (8006bf8 <Get_SerialNum+0x44>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006bc0:	4b0e      	ldr	r3, [pc, #56]	; (8006bfc <Get_SerialNum+0x48>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006bc6:	4b0e      	ldr	r3, [pc, #56]	; (8006c00 <Get_SerialNum+0x4c>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006bcc:	68fa      	ldr	r2, [r7, #12]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	4413      	add	r3, r2
 8006bd2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d009      	beq.n	8006bee <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006bda:	2208      	movs	r2, #8
 8006bdc:	4909      	ldr	r1, [pc, #36]	; (8006c04 <Get_SerialNum+0x50>)
 8006bde:	68f8      	ldr	r0, [r7, #12]
 8006be0:	f000 f814 	bl	8006c0c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006be4:	2204      	movs	r2, #4
 8006be6:	4908      	ldr	r1, [pc, #32]	; (8006c08 <Get_SerialNum+0x54>)
 8006be8:	68b8      	ldr	r0, [r7, #8]
 8006bea:	f000 f80f 	bl	8006c0c <IntToUnicode>
  }
}
 8006bee:	bf00      	nop
 8006bf0:	3710      	adds	r7, #16
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	bd80      	pop	{r7, pc}
 8006bf6:	bf00      	nop
 8006bf8:	1fff7590 	.word	0x1fff7590
 8006bfc:	1fff7594 	.word	0x1fff7594
 8006c00:	1fff7598 	.word	0x1fff7598
 8006c04:	20000186 	.word	0x20000186
 8006c08:	20000196 	.word	0x20000196

08006c0c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b087      	sub	sp, #28
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	60f8      	str	r0, [r7, #12]
 8006c14:	60b9      	str	r1, [r7, #8]
 8006c16:	4613      	mov	r3, r2
 8006c18:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006c1e:	2300      	movs	r3, #0
 8006c20:	75fb      	strb	r3, [r7, #23]
 8006c22:	e027      	b.n	8006c74 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	0f1b      	lsrs	r3, r3, #28
 8006c28:	2b09      	cmp	r3, #9
 8006c2a:	d80b      	bhi.n	8006c44 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	0f1b      	lsrs	r3, r3, #28
 8006c30:	b2da      	uxtb	r2, r3
 8006c32:	7dfb      	ldrb	r3, [r7, #23]
 8006c34:	005b      	lsls	r3, r3, #1
 8006c36:	4619      	mov	r1, r3
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	440b      	add	r3, r1
 8006c3c:	3230      	adds	r2, #48	; 0x30
 8006c3e:	b2d2      	uxtb	r2, r2
 8006c40:	701a      	strb	r2, [r3, #0]
 8006c42:	e00a      	b.n	8006c5a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	0f1b      	lsrs	r3, r3, #28
 8006c48:	b2da      	uxtb	r2, r3
 8006c4a:	7dfb      	ldrb	r3, [r7, #23]
 8006c4c:	005b      	lsls	r3, r3, #1
 8006c4e:	4619      	mov	r1, r3
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	440b      	add	r3, r1
 8006c54:	3237      	adds	r2, #55	; 0x37
 8006c56:	b2d2      	uxtb	r2, r2
 8006c58:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	011b      	lsls	r3, r3, #4
 8006c5e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006c60:	7dfb      	ldrb	r3, [r7, #23]
 8006c62:	005b      	lsls	r3, r3, #1
 8006c64:	3301      	adds	r3, #1
 8006c66:	68ba      	ldr	r2, [r7, #8]
 8006c68:	4413      	add	r3, r2
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006c6e:	7dfb      	ldrb	r3, [r7, #23]
 8006c70:	3301      	adds	r3, #1
 8006c72:	75fb      	strb	r3, [r7, #23]
 8006c74:	7dfa      	ldrb	r2, [r7, #23]
 8006c76:	79fb      	ldrb	r3, [r7, #7]
 8006c78:	429a      	cmp	r2, r3
 8006c7a:	d3d3      	bcc.n	8006c24 <IntToUnicode+0x18>
  }
}
 8006c7c:	bf00      	nop
 8006c7e:	bf00      	nop
 8006c80:	371c      	adds	r7, #28
 8006c82:	46bd      	mov	sp, r7
 8006c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c88:	4770      	bx	lr
	...

08006c8c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b0b0      	sub	sp, #192	; 0xc0
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c94:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8006c98:	2200      	movs	r2, #0
 8006c9a:	601a      	str	r2, [r3, #0]
 8006c9c:	605a      	str	r2, [r3, #4]
 8006c9e:	609a      	str	r2, [r3, #8]
 8006ca0:	60da      	str	r2, [r3, #12]
 8006ca2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006ca4:	f107 0318 	add.w	r3, r7, #24
 8006ca8:	2294      	movs	r2, #148	; 0x94
 8006caa:	2100      	movs	r1, #0
 8006cac:	4618      	mov	r0, r3
 8006cae:	f000 fc51 	bl	8007554 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006cba:	d163      	bne.n	8006d84 <HAL_PCD_MspInit+0xf8>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8006cbc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006cc0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006cc8:	f107 0318 	add.w	r3, r7, #24
 8006ccc:	4618      	mov	r0, r3
 8006cce:	f7fc f89b 	bl	8002e08 <HAL_RCCEx_PeriphCLKConfig>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d001      	beq.n	8006cdc <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8006cd8:	f7f9 fb4e 	bl	8000378 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006cdc:	4b2b      	ldr	r3, [pc, #172]	; (8006d8c <HAL_PCD_MspInit+0x100>)
 8006cde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ce0:	4a2a      	ldr	r2, [pc, #168]	; (8006d8c <HAL_PCD_MspInit+0x100>)
 8006ce2:	f043 0301 	orr.w	r3, r3, #1
 8006ce6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006ce8:	4b28      	ldr	r3, [pc, #160]	; (8006d8c <HAL_PCD_MspInit+0x100>)
 8006cea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cec:	f003 0301 	and.w	r3, r3, #1
 8006cf0:	617b      	str	r3, [r7, #20]
 8006cf2:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006cf4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006cf8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006cfc:	2302      	movs	r3, #2
 8006cfe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d02:	2300      	movs	r3, #0
 8006d04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006d08:	2303      	movs	r3, #3
 8006d0a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006d0e:	230a      	movs	r3, #10
 8006d10:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d14:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8006d18:	4619      	mov	r1, r3
 8006d1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006d1e:	f7f9 fd6f 	bl	8000800 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006d22:	4b1a      	ldr	r3, [pc, #104]	; (8006d8c <HAL_PCD_MspInit+0x100>)
 8006d24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d26:	4a19      	ldr	r2, [pc, #100]	; (8006d8c <HAL_PCD_MspInit+0x100>)
 8006d28:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006d2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006d2e:	4b17      	ldr	r3, [pc, #92]	; (8006d8c <HAL_PCD_MspInit+0x100>)
 8006d30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006d36:	613b      	str	r3, [r7, #16]
 8006d38:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006d3a:	4b14      	ldr	r3, [pc, #80]	; (8006d8c <HAL_PCD_MspInit+0x100>)
 8006d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d114      	bne.n	8006d70 <HAL_PCD_MspInit+0xe4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d46:	4b11      	ldr	r3, [pc, #68]	; (8006d8c <HAL_PCD_MspInit+0x100>)
 8006d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d4a:	4a10      	ldr	r2, [pc, #64]	; (8006d8c <HAL_PCD_MspInit+0x100>)
 8006d4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d50:	6593      	str	r3, [r2, #88]	; 0x58
 8006d52:	4b0e      	ldr	r3, [pc, #56]	; (8006d8c <HAL_PCD_MspInit+0x100>)
 8006d54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d5a:	60fb      	str	r3, [r7, #12]
 8006d5c:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8006d5e:	f7fb f997 	bl	8002090 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d62:	4b0a      	ldr	r3, [pc, #40]	; (8006d8c <HAL_PCD_MspInit+0x100>)
 8006d64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d66:	4a09      	ldr	r2, [pc, #36]	; (8006d8c <HAL_PCD_MspInit+0x100>)
 8006d68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d6c:	6593      	str	r3, [r2, #88]	; 0x58
 8006d6e:	e001      	b.n	8006d74 <HAL_PCD_MspInit+0xe8>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8006d70:	f7fb f98e 	bl	8002090 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006d74:	2200      	movs	r2, #0
 8006d76:	2100      	movs	r1, #0
 8006d78:	2043      	movs	r0, #67	; 0x43
 8006d7a:	f7f9 fd0a 	bl	8000792 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006d7e:	2043      	movs	r0, #67	; 0x43
 8006d80:	f7f9 fd23 	bl	80007ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006d84:	bf00      	nop
 8006d86:	37c0      	adds	r7, #192	; 0xc0
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bd80      	pop	{r7, pc}
 8006d8c:	40021000 	.word	0x40021000

08006d90 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b082      	sub	sp, #8
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006da4:	4619      	mov	r1, r3
 8006da6:	4610      	mov	r0, r2
 8006da8:	f7fe fc4a 	bl	8005640 <USBD_LL_SetupStage>
}
 8006dac:	bf00      	nop
 8006dae:	3708      	adds	r7, #8
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bd80      	pop	{r7, pc}

08006db4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b082      	sub	sp, #8
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
 8006dbc:	460b      	mov	r3, r1
 8006dbe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8006dc6:	78fa      	ldrb	r2, [r7, #3]
 8006dc8:	6879      	ldr	r1, [r7, #4]
 8006dca:	4613      	mov	r3, r2
 8006dcc:	00db      	lsls	r3, r3, #3
 8006dce:	4413      	add	r3, r2
 8006dd0:	009b      	lsls	r3, r3, #2
 8006dd2:	440b      	add	r3, r1
 8006dd4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8006dd8:	681a      	ldr	r2, [r3, #0]
 8006dda:	78fb      	ldrb	r3, [r7, #3]
 8006ddc:	4619      	mov	r1, r3
 8006dde:	f7fe fc84 	bl	80056ea <USBD_LL_DataOutStage>
}
 8006de2:	bf00      	nop
 8006de4:	3708      	adds	r7, #8
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}

08006dea <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006dea:	b580      	push	{r7, lr}
 8006dec:	b082      	sub	sp, #8
 8006dee:	af00      	add	r7, sp, #0
 8006df0:	6078      	str	r0, [r7, #4]
 8006df2:	460b      	mov	r3, r1
 8006df4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8006dfc:	78fa      	ldrb	r2, [r7, #3]
 8006dfe:	6879      	ldr	r1, [r7, #4]
 8006e00:	4613      	mov	r3, r2
 8006e02:	00db      	lsls	r3, r3, #3
 8006e04:	4413      	add	r3, r2
 8006e06:	009b      	lsls	r3, r3, #2
 8006e08:	440b      	add	r3, r1
 8006e0a:	334c      	adds	r3, #76	; 0x4c
 8006e0c:	681a      	ldr	r2, [r3, #0]
 8006e0e:	78fb      	ldrb	r3, [r7, #3]
 8006e10:	4619      	mov	r1, r3
 8006e12:	f7fe fccd 	bl	80057b0 <USBD_LL_DataInStage>
}
 8006e16:	bf00      	nop
 8006e18:	3708      	adds	r7, #8
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}

08006e1e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e1e:	b580      	push	{r7, lr}
 8006e20:	b082      	sub	sp, #8
 8006e22:	af00      	add	r7, sp, #0
 8006e24:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	f7fe fde1 	bl	80059f4 <USBD_LL_SOF>
}
 8006e32:	bf00      	nop
 8006e34:	3708      	adds	r7, #8
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd80      	pop	{r7, pc}

08006e3a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e3a:	b580      	push	{r7, lr}
 8006e3c:	b084      	sub	sp, #16
 8006e3e:	af00      	add	r7, sp, #0
 8006e40:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006e42:	2301      	movs	r3, #1
 8006e44:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	68db      	ldr	r3, [r3, #12]
 8006e4a:	2b02      	cmp	r3, #2
 8006e4c:	d001      	beq.n	8006e52 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8006e4e:	f7f9 fa93 	bl	8000378 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006e58:	7bfa      	ldrb	r2, [r7, #15]
 8006e5a:	4611      	mov	r1, r2
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	f7fe fd8b 	bl	8005978 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006e68:	4618      	mov	r0, r3
 8006e6a:	f7fe fd37 	bl	80058dc <USBD_LL_Reset>
}
 8006e6e:	bf00      	nop
 8006e70:	3710      	adds	r7, #16
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}
	...

08006e78 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b082      	sub	sp, #8
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	687a      	ldr	r2, [r7, #4]
 8006e8c:	6812      	ldr	r2, [r2, #0]
 8006e8e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006e92:	f043 0301 	orr.w	r3, r3, #1
 8006e96:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	f7fe fd7a 	bl	8005998 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6a1b      	ldr	r3, [r3, #32]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d005      	beq.n	8006eb8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006eac:	4b04      	ldr	r3, [pc, #16]	; (8006ec0 <HAL_PCD_SuspendCallback+0x48>)
 8006eae:	691b      	ldr	r3, [r3, #16]
 8006eb0:	4a03      	ldr	r2, [pc, #12]	; (8006ec0 <HAL_PCD_SuspendCallback+0x48>)
 8006eb2:	f043 0306 	orr.w	r3, r3, #6
 8006eb6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006eb8:	bf00      	nop
 8006eba:	3708      	adds	r7, #8
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}
 8006ec0:	e000ed00 	.word	0xe000ed00

08006ec4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b082      	sub	sp, #8
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	687a      	ldr	r2, [r7, #4]
 8006ed8:	6812      	ldr	r2, [r2, #0]
 8006eda:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006ede:	f023 0301 	bic.w	r3, r3, #1
 8006ee2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6a1b      	ldr	r3, [r3, #32]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d007      	beq.n	8006efc <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006eec:	4b08      	ldr	r3, [pc, #32]	; (8006f10 <HAL_PCD_ResumeCallback+0x4c>)
 8006eee:	691b      	ldr	r3, [r3, #16]
 8006ef0:	4a07      	ldr	r2, [pc, #28]	; (8006f10 <HAL_PCD_ResumeCallback+0x4c>)
 8006ef2:	f023 0306 	bic.w	r3, r3, #6
 8006ef6:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8006ef8:	f000 faf4 	bl	80074e4 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006f02:	4618      	mov	r0, r3
 8006f04:	f7fe fd5e 	bl	80059c4 <USBD_LL_Resume>
}
 8006f08:	bf00      	nop
 8006f0a:	3708      	adds	r7, #8
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bd80      	pop	{r7, pc}
 8006f10:	e000ed00 	.word	0xe000ed00

08006f14 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b082      	sub	sp, #8
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
 8006f1c:	460b      	mov	r3, r1
 8006f1e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006f26:	78fa      	ldrb	r2, [r7, #3]
 8006f28:	4611      	mov	r1, r2
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	f7fe fdaa 	bl	8005a84 <USBD_LL_IsoOUTIncomplete>
}
 8006f30:	bf00      	nop
 8006f32:	3708      	adds	r7, #8
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bd80      	pop	{r7, pc}

08006f38 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b082      	sub	sp, #8
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
 8006f40:	460b      	mov	r3, r1
 8006f42:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006f4a:	78fa      	ldrb	r2, [r7, #3]
 8006f4c:	4611      	mov	r1, r2
 8006f4e:	4618      	mov	r0, r3
 8006f50:	f7fe fd72 	bl	8005a38 <USBD_LL_IsoINIncomplete>
}
 8006f54:	bf00      	nop
 8006f56:	3708      	adds	r7, #8
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bd80      	pop	{r7, pc}

08006f5c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b082      	sub	sp, #8
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f7fe fdb0 	bl	8005ad0 <USBD_LL_DevConnected>
}
 8006f70:	bf00      	nop
 8006f72:	3708      	adds	r7, #8
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bd80      	pop	{r7, pc}

08006f78 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b082      	sub	sp, #8
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006f86:	4618      	mov	r0, r3
 8006f88:	f7fe fdad 	bl	8005ae6 <USBD_LL_DevDisconnected>
}
 8006f8c:	bf00      	nop
 8006f8e:	3708      	adds	r7, #8
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}

08006f94 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b082      	sub	sp, #8
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	781b      	ldrb	r3, [r3, #0]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d139      	bne.n	8007018 <USBD_LL_Init+0x84>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006fa4:	4a1f      	ldr	r2, [pc, #124]	; (8007024 <USBD_LL_Init+0x90>)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	4a1d      	ldr	r2, [pc, #116]	; (8007024 <USBD_LL_Init+0x90>)
 8006fb0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006fb4:	4b1b      	ldr	r3, [pc, #108]	; (8007024 <USBD_LL_Init+0x90>)
 8006fb6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006fba:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8006fbc:	4b19      	ldr	r3, [pc, #100]	; (8007024 <USBD_LL_Init+0x90>)
 8006fbe:	2206      	movs	r2, #6
 8006fc0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006fc2:	4b18      	ldr	r3, [pc, #96]	; (8007024 <USBD_LL_Init+0x90>)
 8006fc4:	2202      	movs	r2, #2
 8006fc6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006fc8:	4b16      	ldr	r3, [pc, #88]	; (8007024 <USBD_LL_Init+0x90>)
 8006fca:	2200      	movs	r2, #0
 8006fcc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006fce:	4b15      	ldr	r3, [pc, #84]	; (8007024 <USBD_LL_Init+0x90>)
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006fd4:	4b13      	ldr	r3, [pc, #76]	; (8007024 <USBD_LL_Init+0x90>)
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8006fda:	4b12      	ldr	r3, [pc, #72]	; (8007024 <USBD_LL_Init+0x90>)
 8006fdc:	2200      	movs	r2, #0
 8006fde:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006fe0:	4b10      	ldr	r3, [pc, #64]	; (8007024 <USBD_LL_Init+0x90>)
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8006fe6:	4b0f      	ldr	r3, [pc, #60]	; (8007024 <USBD_LL_Init+0x90>)
 8006fe8:	2200      	movs	r2, #0
 8006fea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006fec:	480d      	ldr	r0, [pc, #52]	; (8007024 <USBD_LL_Init+0x90>)
 8006fee:	f7f9 fdcb 	bl	8000b88 <HAL_PCD_Init>
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d001      	beq.n	8006ffc <USBD_LL_Init+0x68>
  {
    Error_Handler( );
 8006ff8:	f7f9 f9be 	bl	8000378 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006ffc:	2180      	movs	r1, #128	; 0x80
 8006ffe:	4809      	ldr	r0, [pc, #36]	; (8007024 <USBD_LL_Init+0x90>)
 8007000:	f7fa ff4d 	bl	8001e9e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007004:	2240      	movs	r2, #64	; 0x40
 8007006:	2100      	movs	r1, #0
 8007008:	4806      	ldr	r0, [pc, #24]	; (8007024 <USBD_LL_Init+0x90>)
 800700a:	f7fa ff01 	bl	8001e10 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800700e:	2280      	movs	r2, #128	; 0x80
 8007010:	2101      	movs	r1, #1
 8007012:	4804      	ldr	r0, [pc, #16]	; (8007024 <USBD_LL_Init+0x90>)
 8007014:	f7fa fefc 	bl	8001e10 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007018:	2300      	movs	r3, #0
}
 800701a:	4618      	mov	r0, r3
 800701c:	3708      	adds	r7, #8
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}
 8007022:	bf00      	nop
 8007024:	200016d4 	.word	0x200016d4

08007028 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b084      	sub	sp, #16
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007030:	2300      	movs	r3, #0
 8007032:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007034:	2300      	movs	r3, #0
 8007036:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800703e:	4618      	mov	r0, r3
 8007040:	f7f9 fec6 	bl	8000dd0 <HAL_PCD_Start>
 8007044:	4603      	mov	r3, r0
 8007046:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007048:	7bbb      	ldrb	r3, [r7, #14]
 800704a:	2b03      	cmp	r3, #3
 800704c:	d816      	bhi.n	800707c <USBD_LL_Start+0x54>
 800704e:	a201      	add	r2, pc, #4	; (adr r2, 8007054 <USBD_LL_Start+0x2c>)
 8007050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007054:	08007065 	.word	0x08007065
 8007058:	0800706b 	.word	0x0800706b
 800705c:	08007071 	.word	0x08007071
 8007060:	08007077 	.word	0x08007077
    case HAL_OK :
      usb_status = USBD_OK;
 8007064:	2300      	movs	r3, #0
 8007066:	73fb      	strb	r3, [r7, #15]
    break;
 8007068:	e00b      	b.n	8007082 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800706a:	2303      	movs	r3, #3
 800706c:	73fb      	strb	r3, [r7, #15]
    break;
 800706e:	e008      	b.n	8007082 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007070:	2301      	movs	r3, #1
 8007072:	73fb      	strb	r3, [r7, #15]
    break;
 8007074:	e005      	b.n	8007082 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007076:	2303      	movs	r3, #3
 8007078:	73fb      	strb	r3, [r7, #15]
    break;
 800707a:	e002      	b.n	8007082 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800707c:	2303      	movs	r3, #3
 800707e:	73fb      	strb	r3, [r7, #15]
    break;
 8007080:	bf00      	nop
  }
  return usb_status;
 8007082:	7bfb      	ldrb	r3, [r7, #15]
}
 8007084:	4618      	mov	r0, r3
 8007086:	3710      	adds	r7, #16
 8007088:	46bd      	mov	sp, r7
 800708a:	bd80      	pop	{r7, pc}

0800708c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b084      	sub	sp, #16
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
 8007094:	4608      	mov	r0, r1
 8007096:	4611      	mov	r1, r2
 8007098:	461a      	mov	r2, r3
 800709a:	4603      	mov	r3, r0
 800709c:	70fb      	strb	r3, [r7, #3]
 800709e:	460b      	mov	r3, r1
 80070a0:	70bb      	strb	r3, [r7, #2]
 80070a2:	4613      	mov	r3, r2
 80070a4:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80070a6:	2300      	movs	r3, #0
 80070a8:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80070aa:	2300      	movs	r3, #0
 80070ac:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80070b4:	78bb      	ldrb	r3, [r7, #2]
 80070b6:	883a      	ldrh	r2, [r7, #0]
 80070b8:	78f9      	ldrb	r1, [r7, #3]
 80070ba:	f7fa fb70 	bl	800179e <HAL_PCD_EP_Open>
 80070be:	4603      	mov	r3, r0
 80070c0:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80070c2:	7bbb      	ldrb	r3, [r7, #14]
 80070c4:	2b03      	cmp	r3, #3
 80070c6:	d817      	bhi.n	80070f8 <USBD_LL_OpenEP+0x6c>
 80070c8:	a201      	add	r2, pc, #4	; (adr r2, 80070d0 <USBD_LL_OpenEP+0x44>)
 80070ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070ce:	bf00      	nop
 80070d0:	080070e1 	.word	0x080070e1
 80070d4:	080070e7 	.word	0x080070e7
 80070d8:	080070ed 	.word	0x080070ed
 80070dc:	080070f3 	.word	0x080070f3
    case HAL_OK :
      usb_status = USBD_OK;
 80070e0:	2300      	movs	r3, #0
 80070e2:	73fb      	strb	r3, [r7, #15]
    break;
 80070e4:	e00b      	b.n	80070fe <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80070e6:	2303      	movs	r3, #3
 80070e8:	73fb      	strb	r3, [r7, #15]
    break;
 80070ea:	e008      	b.n	80070fe <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80070ec:	2301      	movs	r3, #1
 80070ee:	73fb      	strb	r3, [r7, #15]
    break;
 80070f0:	e005      	b.n	80070fe <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80070f2:	2303      	movs	r3, #3
 80070f4:	73fb      	strb	r3, [r7, #15]
    break;
 80070f6:	e002      	b.n	80070fe <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 80070f8:	2303      	movs	r3, #3
 80070fa:	73fb      	strb	r3, [r7, #15]
    break;
 80070fc:	bf00      	nop
  }
  return usb_status;
 80070fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007100:	4618      	mov	r0, r3
 8007102:	3710      	adds	r7, #16
 8007104:	46bd      	mov	sp, r7
 8007106:	bd80      	pop	{r7, pc}

08007108 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b084      	sub	sp, #16
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
 8007110:	460b      	mov	r3, r1
 8007112:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007114:	2300      	movs	r3, #0
 8007116:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007118:	2300      	movs	r3, #0
 800711a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007122:	78fa      	ldrb	r2, [r7, #3]
 8007124:	4611      	mov	r1, r2
 8007126:	4618      	mov	r0, r3
 8007128:	f7fa fba1 	bl	800186e <HAL_PCD_EP_Close>
 800712c:	4603      	mov	r3, r0
 800712e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007130:	7bbb      	ldrb	r3, [r7, #14]
 8007132:	2b03      	cmp	r3, #3
 8007134:	d816      	bhi.n	8007164 <USBD_LL_CloseEP+0x5c>
 8007136:	a201      	add	r2, pc, #4	; (adr r2, 800713c <USBD_LL_CloseEP+0x34>)
 8007138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800713c:	0800714d 	.word	0x0800714d
 8007140:	08007153 	.word	0x08007153
 8007144:	08007159 	.word	0x08007159
 8007148:	0800715f 	.word	0x0800715f
    case HAL_OK :
      usb_status = USBD_OK;
 800714c:	2300      	movs	r3, #0
 800714e:	73fb      	strb	r3, [r7, #15]
    break;
 8007150:	e00b      	b.n	800716a <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007152:	2303      	movs	r3, #3
 8007154:	73fb      	strb	r3, [r7, #15]
    break;
 8007156:	e008      	b.n	800716a <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007158:	2301      	movs	r3, #1
 800715a:	73fb      	strb	r3, [r7, #15]
    break;
 800715c:	e005      	b.n	800716a <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800715e:	2303      	movs	r3, #3
 8007160:	73fb      	strb	r3, [r7, #15]
    break;
 8007162:	e002      	b.n	800716a <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8007164:	2303      	movs	r3, #3
 8007166:	73fb      	strb	r3, [r7, #15]
    break;
 8007168:	bf00      	nop
  }
  return usb_status;
 800716a:	7bfb      	ldrb	r3, [r7, #15]
}
 800716c:	4618      	mov	r0, r3
 800716e:	3710      	adds	r7, #16
 8007170:	46bd      	mov	sp, r7
 8007172:	bd80      	pop	{r7, pc}

08007174 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b084      	sub	sp, #16
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
 800717c:	460b      	mov	r3, r1
 800717e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007180:	2300      	movs	r3, #0
 8007182:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007184:	2300      	movs	r3, #0
 8007186:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800718e:	78fa      	ldrb	r2, [r7, #3]
 8007190:	4611      	mov	r1, r2
 8007192:	4618      	mov	r0, r3
 8007194:	f7fa fc48 	bl	8001a28 <HAL_PCD_EP_SetStall>
 8007198:	4603      	mov	r3, r0
 800719a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800719c:	7bbb      	ldrb	r3, [r7, #14]
 800719e:	2b03      	cmp	r3, #3
 80071a0:	d816      	bhi.n	80071d0 <USBD_LL_StallEP+0x5c>
 80071a2:	a201      	add	r2, pc, #4	; (adr r2, 80071a8 <USBD_LL_StallEP+0x34>)
 80071a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071a8:	080071b9 	.word	0x080071b9
 80071ac:	080071bf 	.word	0x080071bf
 80071b0:	080071c5 	.word	0x080071c5
 80071b4:	080071cb 	.word	0x080071cb
    case HAL_OK :
      usb_status = USBD_OK;
 80071b8:	2300      	movs	r3, #0
 80071ba:	73fb      	strb	r3, [r7, #15]
    break;
 80071bc:	e00b      	b.n	80071d6 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80071be:	2303      	movs	r3, #3
 80071c0:	73fb      	strb	r3, [r7, #15]
    break;
 80071c2:	e008      	b.n	80071d6 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80071c4:	2301      	movs	r3, #1
 80071c6:	73fb      	strb	r3, [r7, #15]
    break;
 80071c8:	e005      	b.n	80071d6 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80071ca:	2303      	movs	r3, #3
 80071cc:	73fb      	strb	r3, [r7, #15]
    break;
 80071ce:	e002      	b.n	80071d6 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80071d0:	2303      	movs	r3, #3
 80071d2:	73fb      	strb	r3, [r7, #15]
    break;
 80071d4:	bf00      	nop
  }
  return usb_status;
 80071d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80071d8:	4618      	mov	r0, r3
 80071da:	3710      	adds	r7, #16
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}

080071e0 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b084      	sub	sp, #16
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
 80071e8:	460b      	mov	r3, r1
 80071ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80071ec:	2300      	movs	r3, #0
 80071ee:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80071f0:	2300      	movs	r3, #0
 80071f2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80071fa:	78fa      	ldrb	r2, [r7, #3]
 80071fc:	4611      	mov	r1, r2
 80071fe:	4618      	mov	r0, r3
 8007200:	f7fa fc74 	bl	8001aec <HAL_PCD_EP_ClrStall>
 8007204:	4603      	mov	r3, r0
 8007206:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007208:	7bbb      	ldrb	r3, [r7, #14]
 800720a:	2b03      	cmp	r3, #3
 800720c:	d816      	bhi.n	800723c <USBD_LL_ClearStallEP+0x5c>
 800720e:	a201      	add	r2, pc, #4	; (adr r2, 8007214 <USBD_LL_ClearStallEP+0x34>)
 8007210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007214:	08007225 	.word	0x08007225
 8007218:	0800722b 	.word	0x0800722b
 800721c:	08007231 	.word	0x08007231
 8007220:	08007237 	.word	0x08007237
    case HAL_OK :
      usb_status = USBD_OK;
 8007224:	2300      	movs	r3, #0
 8007226:	73fb      	strb	r3, [r7, #15]
    break;
 8007228:	e00b      	b.n	8007242 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800722a:	2303      	movs	r3, #3
 800722c:	73fb      	strb	r3, [r7, #15]
    break;
 800722e:	e008      	b.n	8007242 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007230:	2301      	movs	r3, #1
 8007232:	73fb      	strb	r3, [r7, #15]
    break;
 8007234:	e005      	b.n	8007242 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007236:	2303      	movs	r3, #3
 8007238:	73fb      	strb	r3, [r7, #15]
    break;
 800723a:	e002      	b.n	8007242 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800723c:	2303      	movs	r3, #3
 800723e:	73fb      	strb	r3, [r7, #15]
    break;
 8007240:	bf00      	nop
  }
  return usb_status;
 8007242:	7bfb      	ldrb	r3, [r7, #15]
}
 8007244:	4618      	mov	r0, r3
 8007246:	3710      	adds	r7, #16
 8007248:	46bd      	mov	sp, r7
 800724a:	bd80      	pop	{r7, pc}

0800724c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800724c:	b480      	push	{r7}
 800724e:	b085      	sub	sp, #20
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
 8007254:	460b      	mov	r3, r1
 8007256:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800725e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007260:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007264:	2b00      	cmp	r3, #0
 8007266:	da0b      	bge.n	8007280 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007268:	78fb      	ldrb	r3, [r7, #3]
 800726a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800726e:	68f9      	ldr	r1, [r7, #12]
 8007270:	4613      	mov	r3, r2
 8007272:	00db      	lsls	r3, r3, #3
 8007274:	4413      	add	r3, r2
 8007276:	009b      	lsls	r3, r3, #2
 8007278:	440b      	add	r3, r1
 800727a:	333e      	adds	r3, #62	; 0x3e
 800727c:	781b      	ldrb	r3, [r3, #0]
 800727e:	e00b      	b.n	8007298 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007280:	78fb      	ldrb	r3, [r7, #3]
 8007282:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007286:	68f9      	ldr	r1, [r7, #12]
 8007288:	4613      	mov	r3, r2
 800728a:	00db      	lsls	r3, r3, #3
 800728c:	4413      	add	r3, r2
 800728e:	009b      	lsls	r3, r3, #2
 8007290:	440b      	add	r3, r1
 8007292:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8007296:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007298:	4618      	mov	r0, r3
 800729a:	3714      	adds	r7, #20
 800729c:	46bd      	mov	sp, r7
 800729e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a2:	4770      	bx	lr

080072a4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b084      	sub	sp, #16
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
 80072ac:	460b      	mov	r3, r1
 80072ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80072b0:	2300      	movs	r3, #0
 80072b2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80072b4:	2300      	movs	r3, #0
 80072b6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80072be:	78fa      	ldrb	r2, [r7, #3]
 80072c0:	4611      	mov	r1, r2
 80072c2:	4618      	mov	r0, r3
 80072c4:	f7fa fa46 	bl	8001754 <HAL_PCD_SetAddress>
 80072c8:	4603      	mov	r3, r0
 80072ca:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80072cc:	7bbb      	ldrb	r3, [r7, #14]
 80072ce:	2b03      	cmp	r3, #3
 80072d0:	d816      	bhi.n	8007300 <USBD_LL_SetUSBAddress+0x5c>
 80072d2:	a201      	add	r2, pc, #4	; (adr r2, 80072d8 <USBD_LL_SetUSBAddress+0x34>)
 80072d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072d8:	080072e9 	.word	0x080072e9
 80072dc:	080072ef 	.word	0x080072ef
 80072e0:	080072f5 	.word	0x080072f5
 80072e4:	080072fb 	.word	0x080072fb
    case HAL_OK :
      usb_status = USBD_OK;
 80072e8:	2300      	movs	r3, #0
 80072ea:	73fb      	strb	r3, [r7, #15]
    break;
 80072ec:	e00b      	b.n	8007306 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80072ee:	2303      	movs	r3, #3
 80072f0:	73fb      	strb	r3, [r7, #15]
    break;
 80072f2:	e008      	b.n	8007306 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80072f4:	2301      	movs	r3, #1
 80072f6:	73fb      	strb	r3, [r7, #15]
    break;
 80072f8:	e005      	b.n	8007306 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80072fa:	2303      	movs	r3, #3
 80072fc:	73fb      	strb	r3, [r7, #15]
    break;
 80072fe:	e002      	b.n	8007306 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8007300:	2303      	movs	r3, #3
 8007302:	73fb      	strb	r3, [r7, #15]
    break;
 8007304:	bf00      	nop
  }
  return usb_status;
 8007306:	7bfb      	ldrb	r3, [r7, #15]
}
 8007308:	4618      	mov	r0, r3
 800730a:	3710      	adds	r7, #16
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}

08007310 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b086      	sub	sp, #24
 8007314:	af00      	add	r7, sp, #0
 8007316:	60f8      	str	r0, [r7, #12]
 8007318:	607a      	str	r2, [r7, #4]
 800731a:	603b      	str	r3, [r7, #0]
 800731c:	460b      	mov	r3, r1
 800731e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007320:	2300      	movs	r3, #0
 8007322:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007324:	2300      	movs	r3, #0
 8007326:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800732e:	7af9      	ldrb	r1, [r7, #11]
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	687a      	ldr	r2, [r7, #4]
 8007334:	f7fa fb3b 	bl	80019ae <HAL_PCD_EP_Transmit>
 8007338:	4603      	mov	r3, r0
 800733a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800733c:	7dbb      	ldrb	r3, [r7, #22]
 800733e:	2b03      	cmp	r3, #3
 8007340:	d816      	bhi.n	8007370 <USBD_LL_Transmit+0x60>
 8007342:	a201      	add	r2, pc, #4	; (adr r2, 8007348 <USBD_LL_Transmit+0x38>)
 8007344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007348:	08007359 	.word	0x08007359
 800734c:	0800735f 	.word	0x0800735f
 8007350:	08007365 	.word	0x08007365
 8007354:	0800736b 	.word	0x0800736b
    case HAL_OK :
      usb_status = USBD_OK;
 8007358:	2300      	movs	r3, #0
 800735a:	75fb      	strb	r3, [r7, #23]
    break;
 800735c:	e00b      	b.n	8007376 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800735e:	2303      	movs	r3, #3
 8007360:	75fb      	strb	r3, [r7, #23]
    break;
 8007362:	e008      	b.n	8007376 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007364:	2301      	movs	r3, #1
 8007366:	75fb      	strb	r3, [r7, #23]
    break;
 8007368:	e005      	b.n	8007376 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800736a:	2303      	movs	r3, #3
 800736c:	75fb      	strb	r3, [r7, #23]
    break;
 800736e:	e002      	b.n	8007376 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8007370:	2303      	movs	r3, #3
 8007372:	75fb      	strb	r3, [r7, #23]
    break;
 8007374:	bf00      	nop
  }
  return usb_status;
 8007376:	7dfb      	ldrb	r3, [r7, #23]
}
 8007378:	4618      	mov	r0, r3
 800737a:	3718      	adds	r7, #24
 800737c:	46bd      	mov	sp, r7
 800737e:	bd80      	pop	{r7, pc}

08007380 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b086      	sub	sp, #24
 8007384:	af00      	add	r7, sp, #0
 8007386:	60f8      	str	r0, [r7, #12]
 8007388:	607a      	str	r2, [r7, #4]
 800738a:	603b      	str	r3, [r7, #0]
 800738c:	460b      	mov	r3, r1
 800738e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007390:	2300      	movs	r3, #0
 8007392:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007394:	2300      	movs	r3, #0
 8007396:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800739e:	7af9      	ldrb	r1, [r7, #11]
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	687a      	ldr	r2, [r7, #4]
 80073a4:	f7fa faad 	bl	8001902 <HAL_PCD_EP_Receive>
 80073a8:	4603      	mov	r3, r0
 80073aa:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 80073ac:	7dbb      	ldrb	r3, [r7, #22]
 80073ae:	2b03      	cmp	r3, #3
 80073b0:	d816      	bhi.n	80073e0 <USBD_LL_PrepareReceive+0x60>
 80073b2:	a201      	add	r2, pc, #4	; (adr r2, 80073b8 <USBD_LL_PrepareReceive+0x38>)
 80073b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073b8:	080073c9 	.word	0x080073c9
 80073bc:	080073cf 	.word	0x080073cf
 80073c0:	080073d5 	.word	0x080073d5
 80073c4:	080073db 	.word	0x080073db
    case HAL_OK :
      usb_status = USBD_OK;
 80073c8:	2300      	movs	r3, #0
 80073ca:	75fb      	strb	r3, [r7, #23]
    break;
 80073cc:	e00b      	b.n	80073e6 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80073ce:	2303      	movs	r3, #3
 80073d0:	75fb      	strb	r3, [r7, #23]
    break;
 80073d2:	e008      	b.n	80073e6 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80073d4:	2301      	movs	r3, #1
 80073d6:	75fb      	strb	r3, [r7, #23]
    break;
 80073d8:	e005      	b.n	80073e6 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80073da:	2303      	movs	r3, #3
 80073dc:	75fb      	strb	r3, [r7, #23]
    break;
 80073de:	e002      	b.n	80073e6 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 80073e0:	2303      	movs	r3, #3
 80073e2:	75fb      	strb	r3, [r7, #23]
    break;
 80073e4:	bf00      	nop
  }
  return usb_status;
 80073e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	3718      	adds	r7, #24
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}

080073f0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b082      	sub	sp, #8
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
 80073f8:	460b      	mov	r3, r1
 80073fa:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007402:	78fa      	ldrb	r2, [r7, #3]
 8007404:	4611      	mov	r1, r2
 8007406:	4618      	mov	r0, r3
 8007408:	f7fa fab9 	bl	800197e <HAL_PCD_EP_GetRxCount>
 800740c:	4603      	mov	r3, r0
}
 800740e:	4618      	mov	r0, r3
 8007410:	3708      	adds	r7, #8
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}
	...

08007418 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b082      	sub	sp, #8
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
 8007420:	460b      	mov	r3, r1
 8007422:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8007424:	78fb      	ldrb	r3, [r7, #3]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d002      	beq.n	8007430 <HAL_PCDEx_LPM_Callback+0x18>
 800742a:	2b01      	cmp	r3, #1
 800742c:	d01f      	beq.n	800746e <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800742e:	e03b      	b.n	80074a8 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6a1b      	ldr	r3, [r3, #32]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d007      	beq.n	8007448 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8007438:	f000 f854 	bl	80074e4 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800743c:	4b1c      	ldr	r3, [pc, #112]	; (80074b0 <HAL_PCDEx_LPM_Callback+0x98>)
 800743e:	691b      	ldr	r3, [r3, #16]
 8007440:	4a1b      	ldr	r2, [pc, #108]	; (80074b0 <HAL_PCDEx_LPM_Callback+0x98>)
 8007442:	f023 0306 	bic.w	r3, r3, #6
 8007446:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	687a      	ldr	r2, [r7, #4]
 8007454:	6812      	ldr	r2, [r2, #0]
 8007456:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800745a:	f023 0301 	bic.w	r3, r3, #1
 800745e:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007466:	4618      	mov	r0, r3
 8007468:	f7fe faac 	bl	80059c4 <USBD_LL_Resume>
    break;
 800746c:	e01c      	b.n	80074a8 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	687a      	ldr	r2, [r7, #4]
 800747a:	6812      	ldr	r2, [r2, #0]
 800747c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007480:	f043 0301 	orr.w	r3, r3, #1
 8007484:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800748c:	4618      	mov	r0, r3
 800748e:	f7fe fa83 	bl	8005998 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6a1b      	ldr	r3, [r3, #32]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d005      	beq.n	80074a6 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800749a:	4b05      	ldr	r3, [pc, #20]	; (80074b0 <HAL_PCDEx_LPM_Callback+0x98>)
 800749c:	691b      	ldr	r3, [r3, #16]
 800749e:	4a04      	ldr	r2, [pc, #16]	; (80074b0 <HAL_PCDEx_LPM_Callback+0x98>)
 80074a0:	f043 0306 	orr.w	r3, r3, #6
 80074a4:	6113      	str	r3, [r2, #16]
    break;
 80074a6:	bf00      	nop
}
 80074a8:	bf00      	nop
 80074aa:	3708      	adds	r7, #8
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}
 80074b0:	e000ed00 	.word	0xe000ed00

080074b4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80074b4:	b480      	push	{r7}
 80074b6:	b083      	sub	sp, #12
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80074bc:	4b03      	ldr	r3, [pc, #12]	; (80074cc <USBD_static_malloc+0x18>)
}
 80074be:	4618      	mov	r0, r3
 80074c0:	370c      	adds	r7, #12
 80074c2:	46bd      	mov	sp, r7
 80074c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c8:	4770      	bx	lr
 80074ca:	bf00      	nop
 80074cc:	20001be0 	.word	0x20001be0

080074d0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80074d0:	b480      	push	{r7}
 80074d2:	b083      	sub	sp, #12
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]

}
 80074d8:	bf00      	nop
 80074da:	370c      	adds	r7, #12
 80074dc:	46bd      	mov	sp, r7
 80074de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e2:	4770      	bx	lr

080074e4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80074e8:	f7f8 fea8 	bl	800023c <SystemClock_Config>
}
 80074ec:	bf00      	nop
 80074ee:	bd80      	pop	{r7, pc}

080074f0 <__libc_init_array>:
 80074f0:	b570      	push	{r4, r5, r6, lr}
 80074f2:	4d0d      	ldr	r5, [pc, #52]	; (8007528 <__libc_init_array+0x38>)
 80074f4:	4c0d      	ldr	r4, [pc, #52]	; (800752c <__libc_init_array+0x3c>)
 80074f6:	1b64      	subs	r4, r4, r5
 80074f8:	10a4      	asrs	r4, r4, #2
 80074fa:	2600      	movs	r6, #0
 80074fc:	42a6      	cmp	r6, r4
 80074fe:	d109      	bne.n	8007514 <__libc_init_array+0x24>
 8007500:	4d0b      	ldr	r5, [pc, #44]	; (8007530 <__libc_init_array+0x40>)
 8007502:	4c0c      	ldr	r4, [pc, #48]	; (8007534 <__libc_init_array+0x44>)
 8007504:	f000 f82e 	bl	8007564 <_init>
 8007508:	1b64      	subs	r4, r4, r5
 800750a:	10a4      	asrs	r4, r4, #2
 800750c:	2600      	movs	r6, #0
 800750e:	42a6      	cmp	r6, r4
 8007510:	d105      	bne.n	800751e <__libc_init_array+0x2e>
 8007512:	bd70      	pop	{r4, r5, r6, pc}
 8007514:	f855 3b04 	ldr.w	r3, [r5], #4
 8007518:	4798      	blx	r3
 800751a:	3601      	adds	r6, #1
 800751c:	e7ee      	b.n	80074fc <__libc_init_array+0xc>
 800751e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007522:	4798      	blx	r3
 8007524:	3601      	adds	r6, #1
 8007526:	e7f2      	b.n	800750e <__libc_init_array+0x1e>
 8007528:	08007604 	.word	0x08007604
 800752c:	08007604 	.word	0x08007604
 8007530:	08007604 	.word	0x08007604
 8007534:	08007608 	.word	0x08007608

08007538 <memcpy>:
 8007538:	440a      	add	r2, r1
 800753a:	4291      	cmp	r1, r2
 800753c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007540:	d100      	bne.n	8007544 <memcpy+0xc>
 8007542:	4770      	bx	lr
 8007544:	b510      	push	{r4, lr}
 8007546:	f811 4b01 	ldrb.w	r4, [r1], #1
 800754a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800754e:	4291      	cmp	r1, r2
 8007550:	d1f9      	bne.n	8007546 <memcpy+0xe>
 8007552:	bd10      	pop	{r4, pc}

08007554 <memset>:
 8007554:	4402      	add	r2, r0
 8007556:	4603      	mov	r3, r0
 8007558:	4293      	cmp	r3, r2
 800755a:	d100      	bne.n	800755e <memset+0xa>
 800755c:	4770      	bx	lr
 800755e:	f803 1b01 	strb.w	r1, [r3], #1
 8007562:	e7f9      	b.n	8007558 <memset+0x4>

08007564 <_init>:
 8007564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007566:	bf00      	nop
 8007568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800756a:	bc08      	pop	{r3}
 800756c:	469e      	mov	lr, r3
 800756e:	4770      	bx	lr

08007570 <_fini>:
 8007570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007572:	bf00      	nop
 8007574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007576:	bc08      	pop	{r3}
 8007578:	469e      	mov	lr, r3
 800757a:	4770      	bx	lr
