
Q_SPI_Flash.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f34  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000350  080060e4  080060e4  000160e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006434  08006434  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006434  08006434  00016434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800643c  0800643c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800643c  0800643c  0001643c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006440  08006440  00016440  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006444  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000394  20000070  080064b4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000404  080064b4  00020404  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ea6d  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000224f  00000000  00000000  0002eb0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c50  00000000  00000000  00030d60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b68  00000000  00000000  000319b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a350  00000000  00000000  00032518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ef80  00000000  00000000  0005c868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fb58a  00000000  00000000  0006b7e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00166d72  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003994  00000000  00000000  00166dc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080060cc 	.word	0x080060cc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	080060cc 	.word	0x080060cc

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b08c      	sub	sp, #48	; 0x30
 8000598:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800059a:	f001 fc29 	bl	8001df0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059e:	f000 f8e9 	bl	8000774 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a2:	f000 f98f 	bl	80008c4 <MX_GPIO_Init>
  MX_QUADSPI_Init();
 80005a6:	f000 f961 	bl	800086c <MX_QUADSPI_Init>
  MX_LPUART1_UART_Init();
 80005aa:	f000 f933 	bl	8000814 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */
  /* Initialize the Flash */
    Flash_Init();
 80005ae:	f001 fb89 	bl	8001cc4 <Flash_Init>
    /* Initialize the circular buffer */
    FlashCircularBufferInit(&fcb);
 80005b2:	486b      	ldr	r0, [pc, #428]	; (8000760 <main+0x1cc>)
 80005b4:	f000 fbe5 	bl	8000d82 <FlashCircularBufferInit>

    /* Structure for the write buffer */
    DATASET sensor_data = { .flow_total_ml = 1,
 80005b8:	4a6a      	ldr	r2, [pc, #424]	; (8000764 <main+0x1d0>)
 80005ba:	1d3b      	adds	r3, r7, #4
 80005bc:	ca07      	ldmia	r2, {r0, r1, r2}
 80005be:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  		  	  	  	  	  .run_time_hours = 2,
  						  .water_meter_version = 1
    };

    for(int indx = 0; indx < 256; indx++)
 80005c2:	2300      	movs	r3, #0
 80005c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80005c6:	e007      	b.n	80005d8 <main+0x44>
    {
  	  test_buff[indx] = 'A';
 80005c8:	4a67      	ldr	r2, [pc, #412]	; (8000768 <main+0x1d4>)
 80005ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005cc:	4413      	add	r3, r2
 80005ce:	2241      	movs	r2, #65	; 0x41
 80005d0:	701a      	strb	r2, [r3, #0]
    for(int indx = 0; indx < 256; indx++)
 80005d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005d4:	3301      	adds	r3, #1
 80005d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80005d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005da:	2bff      	cmp	r3, #255	; 0xff
 80005dc:	ddf4      	ble.n	80005c8 <main+0x34>
    }

    waitForFlashbusy();
 80005de:	f001 fb53 	bl	8001c88 <waitForFlashbusy>

    /* Read Flash ID */
    BSP_QSPI_ReadID(temp_buff);
 80005e2:	4862      	ldr	r0, [pc, #392]	; (800076c <main+0x1d8>)
 80005e4:	f000 fe26 	bl	8001234 <BSP_QSPI_ReadID>
    HAL_Delay(1000);
 80005e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005ec:	f001 fc74 	bl	8001ed8 <HAL_Delay>
    /* To erase whole chip un-comment the below section */
  //  Flash_Erase(QSPI_ERASE_LEN_ALL,0);
  //  waitForFlashbusy();

    /* Erase the blocks of chip*/
    Flash_Erase(QSPI_ERASE_LEN_64KB,BLOCK0_ADDR);
 80005f0:	2100      	movs	r1, #0
 80005f2:	2002      	movs	r0, #2
 80005f4:	f001 fb7c 	bl	8001cf0 <Flash_Erase>
    Flash_Erase(QSPI_ERASE_LEN_64KB,BLOCK1_ADDR);
 80005f8:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80005fc:	2002      	movs	r0, #2
 80005fe:	f001 fb77 	bl	8001cf0 <Flash_Erase>
    Flash_Erase(QSPI_ERASE_LEN_64KB,BLOCK2_ADDR);
 8000602:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8000606:	2002      	movs	r0, #2
 8000608:	f001 fb72 	bl	8001cf0 <Flash_Erase>
    Flash_Erase(QSPI_ERASE_LEN_64KB,BLOCK3_ADDR);
 800060c:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 8000610:	2002      	movs	r0, #2
 8000612:	f001 fb6d 	bl	8001cf0 <Flash_Erase>
    Flash_Erase(QSPI_ERASE_LEN_64KB,BLOCK4_ADDR);
 8000616:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 800061a:	2002      	movs	r0, #2
 800061c:	f001 fb68 	bl	8001cf0 <Flash_Erase>
    Flash_Erase(QSPI_ERASE_LEN_64KB,BLOCK5_ADDR);
 8000620:	f44f 21a0 	mov.w	r1, #327680	; 0x50000
 8000624:	2002      	movs	r0, #2
 8000626:	f001 fb63 	bl	8001cf0 <Flash_Erase>
    Flash_Erase(QSPI_ERASE_LEN_64KB,BLOCK6_ADDR);
 800062a:	f44f 21c0 	mov.w	r1, #393216	; 0x60000
 800062e:	2002      	movs	r0, #2
 8000630:	f001 fb5e 	bl	8001cf0 <Flash_Erase>
    Flash_Erase(QSPI_ERASE_LEN_64KB,BLOCK7_ADDR);
 8000634:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 8000638:	2002      	movs	r0, #2
 800063a:	f001 fb59 	bl	8001cf0 <Flash_Erase>

    /* Wait for the chip erase */
    waitForFlashbusy();
 800063e:	f001 fb23 	bl	8001c88 <waitForFlashbusy>
     * Block size  = 65536 Bytes
     * Total blocks of 64KB = 16
     * 4096 x 16 =  65536
     * 65536 / 12 = 5461.333333333(12bytes at the time)
     * 5461.333333333 = 5500 */
    for(int index = 0; index < 5500; index++)
 8000642:	2300      	movs	r3, #0
 8000644:	62bb      	str	r3, [r7, #40]	; 0x28
 8000646:	e013      	b.n	8000670 <main+0xdc>
    {
  	  WriteDatasetToFlash(&fcb, &sensor_data, sizeof(DATASET));
 8000648:	1d3b      	adds	r3, r7, #4
 800064a:	220c      	movs	r2, #12
 800064c:	4619      	mov	r1, r3
 800064e:	4844      	ldr	r0, [pc, #272]	; (8000760 <main+0x1cc>)
 8000650:	f000 fbb4 	bl	8000dbc <WriteDatasetToFlash>
  	  /* Wait till the write complete */
  	  waitForFlashbusy();
 8000654:	f001 fb18 	bl	8001c88 <waitForFlashbusy>
  	  HAL_Delay(1);
 8000658:	2001      	movs	r0, #1
 800065a:	f001 fc3d 	bl	8001ed8 <HAL_Delay>

  	  /* Increase the dummy structure data for testing purpose */
  	  sensor_data.flow_total_ml += 1;
 800065e:	68bb      	ldr	r3, [r7, #8]
 8000660:	3301      	adds	r3, #1
 8000662:	60bb      	str	r3, [r7, #8]
  	  sensor_data.run_time_hours += 1;
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	3301      	adds	r3, #1
 8000668:	60fb      	str	r3, [r7, #12]
    for(int index = 0; index < 5500; index++)
 800066a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800066c:	3301      	adds	r3, #1
 800066e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000672:	f241 527b 	movw	r2, #5499	; 0x157b
 8000676:	4293      	cmp	r3, r2
 8000678:	dde6      	ble.n	8000648 <main+0xb4>
    }

    /* Read data form the flash using circular buffer */
    for(int index = 0; index < 5500; index++)
 800067a:	2300      	movs	r3, #0
 800067c:	627b      	str	r3, [r7, #36]	; 0x24
 800067e:	e00e      	b.n	800069e <main+0x10a>
    {
  	  ReadDatasetFromFlash(&fcb, &readSens, sizeof(readSens));
 8000680:	f107 0310 	add.w	r3, r7, #16
 8000684:	220c      	movs	r2, #12
 8000686:	4619      	mov	r1, r3
 8000688:	4835      	ldr	r0, [pc, #212]	; (8000760 <main+0x1cc>)
 800068a:	f000 fc25 	bl	8000ed8 <ReadDatasetFromFlash>
  	  waitForFlashbusy();
 800068e:	f001 fafb 	bl	8001c88 <waitForFlashbusy>
  	  HAL_Delay(1);
 8000692:	2001      	movs	r0, #1
 8000694:	f001 fc20 	bl	8001ed8 <HAL_Delay>
    for(int index = 0; index < 5500; index++)
 8000698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800069a:	3301      	adds	r3, #1
 800069c:	627b      	str	r3, [r7, #36]	; 0x24
 800069e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006a0:	f241 527b 	movw	r2, #5499	; 0x157b
 80006a4:	4293      	cmp	r3, r2
 80006a6:	ddeb      	ble.n	8000680 <main+0xec>
    }

    /* Wait for some time to debug */
    HAL_Delay(3000);
 80006a8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80006ac:	f001 fc14 	bl	8001ed8 <HAL_Delay>

    sensor_data.water_meter_version = 2;
 80006b0:	2302      	movs	r3, #2
 80006b2:	607b      	str	r3, [r7, #4]

    /* Check the data role over to the FCB */
    for(int i=0;i<5500;i++)
 80006b4:	2300      	movs	r3, #0
 80006b6:	623b      	str	r3, [r7, #32]
 80006b8:	e013      	b.n	80006e2 <main+0x14e>
    {
  	  WriteDatasetToFlash(&fcb, &sensor_data, sizeof(DATASET));
 80006ba:	1d3b      	adds	r3, r7, #4
 80006bc:	220c      	movs	r2, #12
 80006be:	4619      	mov	r1, r3
 80006c0:	4827      	ldr	r0, [pc, #156]	; (8000760 <main+0x1cc>)
 80006c2:	f000 fb7b 	bl	8000dbc <WriteDatasetToFlash>
  	  waitForFlashbusy();
 80006c6:	f001 fadf 	bl	8001c88 <waitForFlashbusy>
  	  HAL_Delay(1);
 80006ca:	2001      	movs	r0, #1
 80006cc:	f001 fc04 	bl	8001ed8 <HAL_Delay>
  	  sensor_data.flow_total_ml += 1;
 80006d0:	68bb      	ldr	r3, [r7, #8]
 80006d2:	3301      	adds	r3, #1
 80006d4:	60bb      	str	r3, [r7, #8]
  	  sensor_data.run_time_hours += 1;
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	3301      	adds	r3, #1
 80006da:	60fb      	str	r3, [r7, #12]
    for(int i=0;i<5500;i++)
 80006dc:	6a3b      	ldr	r3, [r7, #32]
 80006de:	3301      	adds	r3, #1
 80006e0:	623b      	str	r3, [r7, #32]
 80006e2:	6a3b      	ldr	r3, [r7, #32]
 80006e4:	f241 527b 	movw	r2, #5499	; 0x157b
 80006e8:	4293      	cmp	r3, r2
 80006ea:	dde6      	ble.n	80006ba <main+0x126>
    }

    for(int i=0;i<5500;i++)
 80006ec:	2300      	movs	r3, #0
 80006ee:	61fb      	str	r3, [r7, #28]
 80006f0:	e00e      	b.n	8000710 <main+0x17c>
    {
  	  ReadDatasetFromFlash(&fcb, &readSens, sizeof(readSens));
 80006f2:	f107 0310 	add.w	r3, r7, #16
 80006f6:	220c      	movs	r2, #12
 80006f8:	4619      	mov	r1, r3
 80006fa:	4819      	ldr	r0, [pc, #100]	; (8000760 <main+0x1cc>)
 80006fc:	f000 fbec 	bl	8000ed8 <ReadDatasetFromFlash>
  	  waitForFlashbusy();
 8000700:	f001 fac2 	bl	8001c88 <waitForFlashbusy>
  	  HAL_Delay(1);
 8000704:	2001      	movs	r0, #1
 8000706:	f001 fbe7 	bl	8001ed8 <HAL_Delay>
    for(int i=0;i<5500;i++)
 800070a:	69fb      	ldr	r3, [r7, #28]
 800070c:	3301      	adds	r3, #1
 800070e:	61fb      	str	r3, [r7, #28]
 8000710:	69fb      	ldr	r3, [r7, #28]
 8000712:	f241 527b 	movw	r2, #5499	; 0x157b
 8000716:	4293      	cmp	r3, r2
 8000718:	ddeb      	ble.n	80006f2 <main+0x15e>
    }

    /* Debug time */
    HAL_Delay(3000);
 800071a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800071e:	f001 fbdb 	bl	8001ed8 <HAL_Delay>

    Flash_Erase(QSPI_ERASE_LEN_64KB,BLOCK0_ADDR);
 8000722:	2100      	movs	r1, #0
 8000724:	2002      	movs	r0, #2
 8000726:	f001 fae3 	bl	8001cf0 <Flash_Erase>
    waitForFlashbusy();
 800072a:	f001 faad 	bl	8001c88 <waitForFlashbusy>

    /* Simple read/write to the flash */
    Flash_Write(test_buff, sizeof(test_buff)/sizeof(test_buff[0]), PAGE_0);
 800072e:	2200      	movs	r2, #0
 8000730:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000734:	480c      	ldr	r0, [pc, #48]	; (8000768 <main+0x1d4>)
 8000736:	f001 fb23 	bl	8001d80 <Flash_Write>
    HAL_Delay(1000);
 800073a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800073e:	f001 fbcb 	bl	8001ed8 <HAL_Delay>
    waitForFlashbusy();
 8000742:	f001 faa1 	bl	8001c88 <waitForFlashbusy>
    Flash_Read(readbuff, 300, PAGE_0);
 8000746:	2200      	movs	r2, #0
 8000748:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800074c:	4808      	ldr	r0, [pc, #32]	; (8000770 <main+0x1dc>)
 800074e:	f001 fb33 	bl	8001db8 <Flash_Read>
    HAL_Delay(1000);
 8000752:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000756:	f001 fbbf 	bl	8001ed8 <HAL_Delay>
    waitForFlashbusy();
 800075a:	f001 fa95 	bl	8001c88 <waitForFlashbusy>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800075e:	e7fe      	b.n	800075e <main+0x1ca>
 8000760:	20000390 	.word	0x20000390
 8000764:	080060f4 	.word	0x080060f4
 8000768:	20000160 	.word	0x20000160
 800076c:	2000015c 	.word	0x2000015c
 8000770:	20000260 	.word	0x20000260

08000774 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b096      	sub	sp, #88	; 0x58
 8000778:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800077a:	f107 0314 	add.w	r3, r7, #20
 800077e:	2244      	movs	r2, #68	; 0x44
 8000780:	2100      	movs	r1, #0
 8000782:	4618      	mov	r0, r3
 8000784:	f004 fc96 	bl	80050b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000788:	463b      	mov	r3, r7
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	605a      	str	r2, [r3, #4]
 8000790:	609a      	str	r2, [r3, #8]
 8000792:	60da      	str	r2, [r3, #12]
 8000794:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000796:	f44f 7000 	mov.w	r0, #512	; 0x200
 800079a:	f001 ff39 	bl	8002610 <HAL_PWREx_ControlVoltageScaling>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80007a4:	f000 f8ca 	bl	800093c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007a8:	2301      	movs	r3, #1
 80007aa:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007b0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007b2:	2302      	movs	r3, #2
 80007b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007b6:	2303      	movs	r3, #3
 80007b8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 80007ba:	2302      	movs	r3, #2
 80007bc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 71;
 80007be:	2347      	movs	r3, #71	; 0x47
 80007c0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007c2:	2302      	movs	r3, #2
 80007c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007c6:	2302      	movs	r3, #2
 80007c8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV6;
 80007ca:	2306      	movs	r3, #6
 80007cc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ce:	f107 0314 	add.w	r3, r7, #20
 80007d2:	4618      	mov	r0, r3
 80007d4:	f002 fbf2 	bl	8002fbc <HAL_RCC_OscConfig>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80007de:	f000 f8ad 	bl	800093c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007e2:	230f      	movs	r3, #15
 80007e4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007e6:	2303      	movs	r3, #3
 80007e8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 80007ea:	2390      	movs	r3, #144	; 0x90
 80007ec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007f4:	2300      	movs	r3, #0
 80007f6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007f8:	463b      	mov	r3, r7
 80007fa:	2100      	movs	r1, #0
 80007fc:	4618      	mov	r0, r3
 80007fe:	f002 fff7 	bl	80037f0 <HAL_RCC_ClockConfig>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000808:	f000 f898 	bl	800093c <Error_Handler>
  }
}
 800080c:	bf00      	nop
 800080e:	3758      	adds	r7, #88	; 0x58
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}

08000814 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000818:	4b12      	ldr	r3, [pc, #72]	; (8000864 <MX_LPUART1_UART_Init+0x50>)
 800081a:	4a13      	ldr	r2, [pc, #76]	; (8000868 <MX_LPUART1_UART_Init+0x54>)
 800081c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800081e:	4b11      	ldr	r3, [pc, #68]	; (8000864 <MX_LPUART1_UART_Init+0x50>)
 8000820:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000824:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000826:	4b0f      	ldr	r3, [pc, #60]	; (8000864 <MX_LPUART1_UART_Init+0x50>)
 8000828:	2200      	movs	r2, #0
 800082a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800082c:	4b0d      	ldr	r3, [pc, #52]	; (8000864 <MX_LPUART1_UART_Init+0x50>)
 800082e:	2200      	movs	r2, #0
 8000830:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000832:	4b0c      	ldr	r3, [pc, #48]	; (8000864 <MX_LPUART1_UART_Init+0x50>)
 8000834:	2200      	movs	r2, #0
 8000836:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000838:	4b0a      	ldr	r3, [pc, #40]	; (8000864 <MX_LPUART1_UART_Init+0x50>)
 800083a:	220c      	movs	r2, #12
 800083c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800083e:	4b09      	ldr	r3, [pc, #36]	; (8000864 <MX_LPUART1_UART_Init+0x50>)
 8000840:	2200      	movs	r2, #0
 8000842:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000844:	4b07      	ldr	r3, [pc, #28]	; (8000864 <MX_LPUART1_UART_Init+0x50>)
 8000846:	2200      	movs	r2, #0
 8000848:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800084a:	4b06      	ldr	r3, [pc, #24]	; (8000864 <MX_LPUART1_UART_Init+0x50>)
 800084c:	2200      	movs	r2, #0
 800084e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000850:	4804      	ldr	r0, [pc, #16]	; (8000864 <MX_LPUART1_UART_Init+0x50>)
 8000852:	f003 febb 	bl	80045cc <HAL_UART_Init>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 800085c:	f000 f86e 	bl	800093c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000860:	bf00      	nop
 8000862:	bd80      	pop	{r7, pc}
 8000864:	2000008c 	.word	0x2000008c
 8000868:	40008000 	.word	0x40008000

0800086c <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000870:	4b12      	ldr	r3, [pc, #72]	; (80008bc <MX_QUADSPI_Init+0x50>)
 8000872:	4a13      	ldr	r2, [pc, #76]	; (80008c0 <MX_QUADSPI_Init+0x54>)
 8000874:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8000876:	4b11      	ldr	r3, [pc, #68]	; (80008bc <MX_QUADSPI_Init+0x50>)
 8000878:	2201      	movs	r2, #1
 800087a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 800087c:	4b0f      	ldr	r3, [pc, #60]	; (80008bc <MX_QUADSPI_Init+0x50>)
 800087e:	2204      	movs	r2, #4
 8000880:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000882:	4b0e      	ldr	r3, [pc, #56]	; (80008bc <MX_QUADSPI_Init+0x50>)
 8000884:	2210      	movs	r2, #16
 8000886:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8000888:	4b0c      	ldr	r3, [pc, #48]	; (80008bc <MX_QUADSPI_Init+0x50>)
 800088a:	2217      	movs	r2, #23
 800088c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 800088e:	4b0b      	ldr	r3, [pc, #44]	; (80008bc <MX_QUADSPI_Init+0x50>)
 8000890:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8000894:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000896:	4b09      	ldr	r3, [pc, #36]	; (80008bc <MX_QUADSPI_Init+0x50>)
 8000898:	2200      	movs	r2, #0
 800089a:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 800089c:	4b07      	ldr	r3, [pc, #28]	; (80008bc <MX_QUADSPI_Init+0x50>)
 800089e:	2200      	movs	r2, #0
 80008a0:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80008a2:	4b06      	ldr	r3, [pc, #24]	; (80008bc <MX_QUADSPI_Init+0x50>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80008a8:	4804      	ldr	r0, [pc, #16]	; (80008bc <MX_QUADSPI_Init+0x50>)
 80008aa:	f001 ff17 	bl	80026dc <HAL_QSPI_Init>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 80008b4:	f000 f842 	bl	800093c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80008b8:	bf00      	nop
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	20000110 	.word	0x20000110
 80008c0:	a0001000 	.word	0xa0001000

080008c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b084      	sub	sp, #16
 80008c8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008ca:	4b1b      	ldr	r3, [pc, #108]	; (8000938 <MX_GPIO_Init+0x74>)
 80008cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ce:	4a1a      	ldr	r2, [pc, #104]	; (8000938 <MX_GPIO_Init+0x74>)
 80008d0:	f043 0320 	orr.w	r3, r3, #32
 80008d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008d6:	4b18      	ldr	r3, [pc, #96]	; (8000938 <MX_GPIO_Init+0x74>)
 80008d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008da:	f003 0320 	and.w	r3, r3, #32
 80008de:	60fb      	str	r3, [r7, #12]
 80008e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008e2:	4b15      	ldr	r3, [pc, #84]	; (8000938 <MX_GPIO_Init+0x74>)
 80008e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e6:	4a14      	ldr	r2, [pc, #80]	; (8000938 <MX_GPIO_Init+0x74>)
 80008e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ee:	4b12      	ldr	r3, [pc, #72]	; (8000938 <MX_GPIO_Init+0x74>)
 80008f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008f6:	60bb      	str	r3, [r7, #8]
 80008f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fa:	4b0f      	ldr	r3, [pc, #60]	; (8000938 <MX_GPIO_Init+0x74>)
 80008fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008fe:	4a0e      	ldr	r2, [pc, #56]	; (8000938 <MX_GPIO_Init+0x74>)
 8000900:	f043 0301 	orr.w	r3, r3, #1
 8000904:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000906:	4b0c      	ldr	r3, [pc, #48]	; (8000938 <MX_GPIO_Init+0x74>)
 8000908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800090a:	f003 0301 	and.w	r3, r3, #1
 800090e:	607b      	str	r3, [r7, #4]
 8000910:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000912:	4b09      	ldr	r3, [pc, #36]	; (8000938 <MX_GPIO_Init+0x74>)
 8000914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000916:	4a08      	ldr	r2, [pc, #32]	; (8000938 <MX_GPIO_Init+0x74>)
 8000918:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800091c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800091e:	4b06      	ldr	r3, [pc, #24]	; (8000938 <MX_GPIO_Init+0x74>)
 8000920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000922:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000926:	603b      	str	r3, [r7, #0]
 8000928:	683b      	ldr	r3, [r7, #0]
  HAL_PWREx_EnableVddIO2();
 800092a:	f001 fec7 	bl	80026bc <HAL_PWREx_EnableVddIO2>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800092e:	bf00      	nop
 8000930:	3710      	adds	r7, #16
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	40021000 	.word	0x40021000

0800093c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000940:	b672      	cpsid	i
}
 8000942:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000944:	e7fe      	b.n	8000944 <Error_Handler+0x8>
	...

08000948 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000948:	b480      	push	{r7}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800094e:	4b0f      	ldr	r3, [pc, #60]	; (800098c <HAL_MspInit+0x44>)
 8000950:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000952:	4a0e      	ldr	r2, [pc, #56]	; (800098c <HAL_MspInit+0x44>)
 8000954:	f043 0301 	orr.w	r3, r3, #1
 8000958:	6613      	str	r3, [r2, #96]	; 0x60
 800095a:	4b0c      	ldr	r3, [pc, #48]	; (800098c <HAL_MspInit+0x44>)
 800095c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800095e:	f003 0301 	and.w	r3, r3, #1
 8000962:	607b      	str	r3, [r7, #4]
 8000964:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000966:	4b09      	ldr	r3, [pc, #36]	; (800098c <HAL_MspInit+0x44>)
 8000968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800096a:	4a08      	ldr	r2, [pc, #32]	; (800098c <HAL_MspInit+0x44>)
 800096c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000970:	6593      	str	r3, [r2, #88]	; 0x58
 8000972:	4b06      	ldr	r3, [pc, #24]	; (800098c <HAL_MspInit+0x44>)
 8000974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000976:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800097a:	603b      	str	r3, [r7, #0]
 800097c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800097e:	bf00      	nop
 8000980:	370c      	adds	r7, #12
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	40021000 	.word	0x40021000

08000990 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b0ac      	sub	sp, #176	; 0xb0
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000998:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800099c:	2200      	movs	r2, #0
 800099e:	601a      	str	r2, [r3, #0]
 80009a0:	605a      	str	r2, [r3, #4]
 80009a2:	609a      	str	r2, [r3, #8]
 80009a4:	60da      	str	r2, [r3, #12]
 80009a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009a8:	f107 0310 	add.w	r3, r7, #16
 80009ac:	228c      	movs	r2, #140	; 0x8c
 80009ae:	2100      	movs	r1, #0
 80009b0:	4618      	mov	r0, r3
 80009b2:	f004 fb7f 	bl	80050b4 <memset>
  if(huart->Instance==LPUART1)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	4a22      	ldr	r2, [pc, #136]	; (8000a44 <HAL_UART_MspInit+0xb4>)
 80009bc:	4293      	cmp	r3, r2
 80009be:	d13d      	bne.n	8000a3c <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80009c0:	2320      	movs	r3, #32
 80009c2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80009c4:	2300      	movs	r3, #0
 80009c6:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009c8:	f107 0310 	add.w	r3, r7, #16
 80009cc:	4618      	mov	r0, r3
 80009ce:	f003 f933 	bl	8003c38 <HAL_RCCEx_PeriphCLKConfig>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80009d8:	f7ff ffb0 	bl	800093c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80009dc:	4b1a      	ldr	r3, [pc, #104]	; (8000a48 <HAL_UART_MspInit+0xb8>)
 80009de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80009e0:	4a19      	ldr	r2, [pc, #100]	; (8000a48 <HAL_UART_MspInit+0xb8>)
 80009e2:	f043 0301 	orr.w	r3, r3, #1
 80009e6:	65d3      	str	r3, [r2, #92]	; 0x5c
 80009e8:	4b17      	ldr	r3, [pc, #92]	; (8000a48 <HAL_UART_MspInit+0xb8>)
 80009ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80009ec:	f003 0301 	and.w	r3, r3, #1
 80009f0:	60fb      	str	r3, [r7, #12]
 80009f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80009f4:	4b14      	ldr	r3, [pc, #80]	; (8000a48 <HAL_UART_MspInit+0xb8>)
 80009f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009f8:	4a13      	ldr	r2, [pc, #76]	; (8000a48 <HAL_UART_MspInit+0xb8>)
 80009fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a00:	4b11      	ldr	r3, [pc, #68]	; (8000a48 <HAL_UART_MspInit+0xb8>)
 8000a02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a08:	60bb      	str	r3, [r7, #8]
 8000a0a:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8000a0c:	f001 fe56 	bl	80026bc <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000a10:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000a14:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a18:	2302      	movs	r3, #2
 8000a1a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a24:	2303      	movs	r3, #3
 8000a26:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000a2a:	2308      	movs	r3, #8
 8000a2c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a30:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a34:	4619      	mov	r1, r3
 8000a36:	4805      	ldr	r0, [pc, #20]	; (8000a4c <HAL_UART_MspInit+0xbc>)
 8000a38:	f001 fb58 	bl	80020ec <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000a3c:	bf00      	nop
 8000a3e:	37b0      	adds	r7, #176	; 0xb0
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	40008000 	.word	0x40008000
 8000a48:	40021000 	.word	0x40021000
 8000a4c:	48001800 	.word	0x48001800

08000a50 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b08a      	sub	sp, #40	; 0x28
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a58:	f107 0314 	add.w	r3, r7, #20
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
 8000a60:	605a      	str	r2, [r3, #4]
 8000a62:	609a      	str	r2, [r3, #8]
 8000a64:	60da      	str	r2, [r3, #12]
 8000a66:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a2e      	ldr	r2, [pc, #184]	; (8000b28 <HAL_QSPI_MspInit+0xd8>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d156      	bne.n	8000b20 <HAL_QSPI_MspInit+0xd0>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000a72:	4b2e      	ldr	r3, [pc, #184]	; (8000b2c <HAL_QSPI_MspInit+0xdc>)
 8000a74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000a76:	4a2d      	ldr	r2, [pc, #180]	; (8000b2c <HAL_QSPI_MspInit+0xdc>)
 8000a78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a7c:	6513      	str	r3, [r2, #80]	; 0x50
 8000a7e:	4b2b      	ldr	r3, [pc, #172]	; (8000b2c <HAL_QSPI_MspInit+0xdc>)
 8000a80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000a82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a86:	613b      	str	r3, [r7, #16]
 8000a88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a8a:	4b28      	ldr	r3, [pc, #160]	; (8000b2c <HAL_QSPI_MspInit+0xdc>)
 8000a8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a8e:	4a27      	ldr	r2, [pc, #156]	; (8000b2c <HAL_QSPI_MspInit+0xdc>)
 8000a90:	f043 0320 	orr.w	r3, r3, #32
 8000a94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a96:	4b25      	ldr	r3, [pc, #148]	; (8000b2c <HAL_QSPI_MspInit+0xdc>)
 8000a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a9a:	f003 0320 	and.w	r3, r3, #32
 8000a9e:	60fb      	str	r3, [r7, #12]
 8000aa0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa2:	4b22      	ldr	r3, [pc, #136]	; (8000b2c <HAL_QSPI_MspInit+0xdc>)
 8000aa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aa6:	4a21      	ldr	r2, [pc, #132]	; (8000b2c <HAL_QSPI_MspInit+0xdc>)
 8000aa8:	f043 0301 	orr.w	r3, r3, #1
 8000aac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aae:	4b1f      	ldr	r3, [pc, #124]	; (8000b2c <HAL_QSPI_MspInit+0xdc>)
 8000ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ab2:	f003 0301 	and.w	r3, r3, #1
 8000ab6:	60bb      	str	r3, [r7, #8]
 8000ab8:	68bb      	ldr	r3, [r7, #8]
    PF8     ------> QUADSPI_BK1_IO0
    PF9     ------> QUADSPI_BK1_IO1
    PF10     ------> QUADSPI_CLK
    PA2     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000aba:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000abe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac8:	2303      	movs	r3, #3
 8000aca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000acc:	230a      	movs	r3, #10
 8000ace:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ad0:	f107 0314 	add.w	r3, r7, #20
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	4816      	ldr	r0, [pc, #88]	; (8000b30 <HAL_QSPI_MspInit+0xe0>)
 8000ad8:	f001 fb08 	bl	80020ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000adc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ae0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae2:	2302      	movs	r3, #2
 8000ae4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aea:	2303      	movs	r3, #3
 8000aec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_QUADSPI;
 8000aee:	2303      	movs	r3, #3
 8000af0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000af2:	f107 0314 	add.w	r3, r7, #20
 8000af6:	4619      	mov	r1, r3
 8000af8:	480d      	ldr	r0, [pc, #52]	; (8000b30 <HAL_QSPI_MspInit+0xe0>)
 8000afa:	f001 faf7 	bl	80020ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000afe:	2304      	movs	r3, #4
 8000b00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b02:	2302      	movs	r3, #2
 8000b04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b06:	2300      	movs	r3, #0
 8000b08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b0a:	2303      	movs	r3, #3
 8000b0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000b0e:	230a      	movs	r3, #10
 8000b10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b12:	f107 0314 	add.w	r3, r7, #20
 8000b16:	4619      	mov	r1, r3
 8000b18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b1c:	f001 fae6 	bl	80020ec <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8000b20:	bf00      	nop
 8000b22:	3728      	adds	r7, #40	; 0x28
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	a0001000 	.word	0xa0001000
 8000b2c:	40021000 	.word	0x40021000
 8000b30:	48001400 	.word	0x48001400

08000b34 <HAL_QSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* hqspi)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  if(hqspi->Instance==QUADSPI)//true
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a0b      	ldr	r2, [pc, #44]	; (8000b70 <HAL_QSPI_MspDeInit+0x3c>)
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d10f      	bne.n	8000b66 <HAL_QSPI_MspDeInit+0x32>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 8000b46:	4b0b      	ldr	r3, [pc, #44]	; (8000b74 <HAL_QSPI_MspDeInit+0x40>)
 8000b48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000b4a:	4a0a      	ldr	r2, [pc, #40]	; (8000b74 <HAL_QSPI_MspDeInit+0x40>)
 8000b4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000b50:	6513      	str	r3, [r2, #80]	; 0x50
    PF8     ------> QUADSPI_BK1_IO0
    PF9     ------> QUADSPI_BK1_IO1
    PF10     ------> QUADSPI_CLK
    PA2     ------> QUADSPI_BK1_NCS
    */
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8000b52:	f44f 61f8 	mov.w	r1, #1984	; 0x7c0
 8000b56:	4808      	ldr	r0, [pc, #32]	; (8000b78 <HAL_QSPI_MspDeInit+0x44>)
 8000b58:	f001 fc5a 	bl	8002410 <HAL_GPIO_DeInit>
                          |GPIO_PIN_10);

    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2);
 8000b5c:	2104      	movs	r1, #4
 8000b5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b62:	f001 fc55 	bl	8002410 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }

}
 8000b66:	bf00      	nop
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	a0001000 	.word	0xa0001000
 8000b74:	40021000 	.word	0x40021000
 8000b78:	48001400 	.word	0x48001400

08000b7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b80:	e7fe      	b.n	8000b80 <NMI_Handler+0x4>

08000b82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b82:	b480      	push	{r7}
 8000b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b86:	e7fe      	b.n	8000b86 <HardFault_Handler+0x4>

08000b88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b8c:	e7fe      	b.n	8000b8c <MemManage_Handler+0x4>

08000b8e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b92:	e7fe      	b.n	8000b92 <BusFault_Handler+0x4>

08000b94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b98:	e7fe      	b.n	8000b98 <UsageFault_Handler+0x4>

08000b9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b9a:	b480      	push	{r7}
 8000b9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b9e:	bf00      	nop
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr

08000ba8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bac:	bf00      	nop
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr

08000bb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr

08000bc4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bc8:	f001 f966 	bl	8001e98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bcc:	bf00      	nop
 8000bce:	bd80      	pop	{r7, pc}

08000bd0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b086      	sub	sp, #24
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	60f8      	str	r0, [r7, #12]
 8000bd8:	60b9      	str	r1, [r7, #8]
 8000bda:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bdc:	2300      	movs	r3, #0
 8000bde:	617b      	str	r3, [r7, #20]
 8000be0:	e00a      	b.n	8000bf8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000be2:	f3af 8000 	nop.w
 8000be6:	4601      	mov	r1, r0
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	1c5a      	adds	r2, r3, #1
 8000bec:	60ba      	str	r2, [r7, #8]
 8000bee:	b2ca      	uxtb	r2, r1
 8000bf0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bf2:	697b      	ldr	r3, [r7, #20]
 8000bf4:	3301      	adds	r3, #1
 8000bf6:	617b      	str	r3, [r7, #20]
 8000bf8:	697a      	ldr	r2, [r7, #20]
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	429a      	cmp	r2, r3
 8000bfe:	dbf0      	blt.n	8000be2 <_read+0x12>
  }

  return len;
 8000c00:	687b      	ldr	r3, [r7, #4]
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	3718      	adds	r7, #24
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
	...

08000c0c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b084      	sub	sp, #16
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	60f8      	str	r0, [r7, #12]
 8000c14:	60b9      	str	r1, [r7, #8]
 8000c16:	607a      	str	r2, [r7, #4]
//	  for (DataIdx = 0; DataIdx < len; DataIdx++)
//	  {
//	    __io_putchar(*ptr++);
//	  }
//	  return len;
		HAL_UART_Transmit(&hlpuart1, (uint8_t *)ptr, len,HAL_MAX_DELAY);
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	b29a      	uxth	r2, r3
 8000c1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c20:	68b9      	ldr	r1, [r7, #8]
 8000c22:	4804      	ldr	r0, [pc, #16]	; (8000c34 <_write+0x28>)
 8000c24:	f003 fd20 	bl	8004668 <HAL_UART_Transmit>

							return len;
 8000c28:	687b      	ldr	r3, [r7, #4]
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3710      	adds	r7, #16
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	2000008c 	.word	0x2000008c

08000c38 <_close>:

int _close(int file)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	370c      	adds	r7, #12
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr

08000c50 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
 8000c58:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c60:	605a      	str	r2, [r3, #4]
  return 0;
 8000c62:	2300      	movs	r3, #0
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	370c      	adds	r7, #12
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr

08000c70 <_isatty>:

int _isatty(int file)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c78:	2301      	movs	r3, #1
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	370c      	adds	r7, #12
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr

08000c86 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c86:	b480      	push	{r7}
 8000c88:	b085      	sub	sp, #20
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	60f8      	str	r0, [r7, #12]
 8000c8e:	60b9      	str	r1, [r7, #8]
 8000c90:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c92:	2300      	movs	r3, #0
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	3714      	adds	r7, #20
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr

08000ca0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b086      	sub	sp, #24
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ca8:	4a14      	ldr	r2, [pc, #80]	; (8000cfc <_sbrk+0x5c>)
 8000caa:	4b15      	ldr	r3, [pc, #84]	; (8000d00 <_sbrk+0x60>)
 8000cac:	1ad3      	subs	r3, r2, r3
 8000cae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cb4:	4b13      	ldr	r3, [pc, #76]	; (8000d04 <_sbrk+0x64>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d102      	bne.n	8000cc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cbc:	4b11      	ldr	r3, [pc, #68]	; (8000d04 <_sbrk+0x64>)
 8000cbe:	4a12      	ldr	r2, [pc, #72]	; (8000d08 <_sbrk+0x68>)
 8000cc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cc2:	4b10      	ldr	r3, [pc, #64]	; (8000d04 <_sbrk+0x64>)
 8000cc4:	681a      	ldr	r2, [r3, #0]
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	4413      	add	r3, r2
 8000cca:	693a      	ldr	r2, [r7, #16]
 8000ccc:	429a      	cmp	r2, r3
 8000cce:	d207      	bcs.n	8000ce0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cd0:	f004 f9c6 	bl	8005060 <__errno>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	220c      	movs	r2, #12
 8000cd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000cde:	e009      	b.n	8000cf4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ce0:	4b08      	ldr	r3, [pc, #32]	; (8000d04 <_sbrk+0x64>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ce6:	4b07      	ldr	r3, [pc, #28]	; (8000d04 <_sbrk+0x64>)
 8000ce8:	681a      	ldr	r2, [r3, #0]
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	4413      	add	r3, r2
 8000cee:	4a05      	ldr	r2, [pc, #20]	; (8000d04 <_sbrk+0x64>)
 8000cf0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cf2:	68fb      	ldr	r3, [r7, #12]
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	3718      	adds	r7, #24
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	20050000 	.word	0x20050000
 8000d00:	00000400 	.word	0x00000400
 8000d04:	2000038c 	.word	0x2000038c
 8000d08:	20000408 	.word	0x20000408

08000d0c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d10:	4b06      	ldr	r3, [pc, #24]	; (8000d2c <SystemInit+0x20>)
 8000d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d16:	4a05      	ldr	r2, [pc, #20]	; (8000d2c <SystemInit+0x20>)
 8000d18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000d20:	bf00      	nop
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	e000ed00 	.word	0xe000ed00

08000d30 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d68 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d34:	f7ff ffea 	bl	8000d0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d38:	480c      	ldr	r0, [pc, #48]	; (8000d6c <LoopForever+0x6>)
  ldr r1, =_edata
 8000d3a:	490d      	ldr	r1, [pc, #52]	; (8000d70 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d3c:	4a0d      	ldr	r2, [pc, #52]	; (8000d74 <LoopForever+0xe>)
  movs r3, #0
 8000d3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d40:	e002      	b.n	8000d48 <LoopCopyDataInit>

08000d42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d46:	3304      	adds	r3, #4

08000d48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d4c:	d3f9      	bcc.n	8000d42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d4e:	4a0a      	ldr	r2, [pc, #40]	; (8000d78 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d50:	4c0a      	ldr	r4, [pc, #40]	; (8000d7c <LoopForever+0x16>)
  movs r3, #0
 8000d52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d54:	e001      	b.n	8000d5a <LoopFillZerobss>

08000d56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d58:	3204      	adds	r2, #4

08000d5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d5c:	d3fb      	bcc.n	8000d56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d5e:	f004 f985 	bl	800506c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d62:	f7ff fc17 	bl	8000594 <main>

08000d66 <LoopForever>:

LoopForever:
    b LoopForever
 8000d66:	e7fe      	b.n	8000d66 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d68:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000d6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d70:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000d74:	08006444 	.word	0x08006444
  ldr r2, =_sbss
 8000d78:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000d7c:	20000404 	.word	0x20000404

08000d80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d80:	e7fe      	b.n	8000d80 <ADC1_2_IRQHandler>

08000d82 <FlashCircularBufferInit>:
 * @brief  Function to Initialize Circular Buffer
 * @param  buffer    Pointer to flash circular buffer
 * @retval None
*/
void FlashCircularBufferInit(flash_circular_buffer* buffer)
{
 8000d82:	b480      	push	{r7}
 8000d84:	b083      	sub	sp, #12
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	6078      	str	r0, [r7, #4]
  buffer->tx_data = NULL;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
  buffer->rx_data = NULL;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2200      	movs	r2, #0
 8000d94:	605a      	str	r2, [r3, #4]
  buffer->head = FLASH_BUFFER_START_ADDR;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	2200      	movs	r2, #0
 8000d9a:	609a      	str	r2, [r3, #8]
  buffer->tail = FLASH_BUFFER_START_ADDR;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2200      	movs	r2, #0
 8000da0:	60da      	str	r2, [r3, #12]
  buffer->data_available = false;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	2200      	movs	r2, #0
 8000da6:	741a      	strb	r2, [r3, #16]
  buffer->memory_available = true;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2201      	movs	r2, #1
 8000dac:	745a      	strb	r2, [r3, #17]
}
 8000dae:	bf00      	nop
 8000db0:	370c      	adds	r7, #12
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
	...

08000dbc <WriteDatasetToFlash>:
 * @param  buffer    Pointer to flash circular buffer
 * @param  dataToBuffer    Pointer to dataset to store in ring buffer
 * @retval FCB Status
*/
fcb_status WriteDatasetToFlash(flash_circular_buffer* buffer, void* dataToBuffer, uint16_t length)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b08a      	sub	sp, #40	; 0x28
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	60f8      	str	r0, [r7, #12]
 8000dc4:	60b9      	str	r1, [r7, #8]
 8000dc6:	4613      	mov	r3, r2
 8000dc8:	80fb      	strh	r3, [r7, #6]
  uint32_t dst_addr,next_addr,err_code,data_len;
  uint32_t head_sector, tail_sector;


  buffer->tx_data = (DATASET*)dataToBuffer;
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	68ba      	ldr	r2, [r7, #8]
 8000dce:	601a      	str	r2, [r3, #0]
  dst_addr = buffer->head;
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	689b      	ldr	r3, [r3, #8]
 8000dd4:	61fb      	str	r3, [r7, #28]
  data_len = sizeof(DATASET);
 8000dd6:	230c      	movs	r3, #12
 8000dd8:	61bb      	str	r3, [r7, #24]

  /* Calculate next address */  
  if((buffer->head + data_len) >= FLASH_BUFFER_SIZE)// no
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	689a      	ldr	r2, [r3, #8]
 8000dde:	69bb      	ldr	r3, [r7, #24]
 8000de0:	4413      	add	r3, r2
 8000de2:	4a36      	ldr	r2, [pc, #216]	; (8000ebc <WriteDatasetToFlash+0x100>)
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d902      	bls.n	8000dee <WriteDatasetToFlash+0x32>
  {
    next_addr = FLASH_BUFFER_START_ADDR;
 8000de8:	2300      	movs	r3, #0
 8000dea:	627b      	str	r3, [r7, #36]	; 0x24
 8000dec:	e004      	b.n	8000df8 <WriteDatasetToFlash+0x3c>
  }
  else
  {
    next_addr = (unsigned int)(buffer->head + data_len);
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	689b      	ldr	r3, [r3, #8]
 8000df2:	69ba      	ldr	r2, [r7, #24]
 8000df4:	4413      	add	r3, r2
 8000df6:	627b      	str	r3, [r7, #36]	; 0x24
  }

  
  /*Check whether the buffer head and tail sectors are going to overlap*/
  if(buffer->tail > buffer->head)
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	68da      	ldr	r2, [r3, #12]
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	689b      	ldr	r3, [r3, #8]
 8000e00:	429a      	cmp	r2, r3
 8000e02:	d91b      	bls.n	8000e3c <WriteDatasetToFlash+0x80>
  {
    // if the difference is less than 4096
    if((buffer->tail - buffer->head) < QSPI_BLOCK_SIZE_64K)
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	68da      	ldr	r2, [r3, #12]
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	689b      	ldr	r3, [r3, #8]
 8000e0c:	1ad3      	subs	r3, r2, r3
 8000e0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e12:	d213      	bcs.n	8000e3c <WriteDatasetToFlash+0x80>
    {
      //Calculate current sector number from the address
      head_sector = next_addr / QSPI_BLOCK_SIZE_64K;
 8000e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e16:	0c1b      	lsrs	r3, r3, #16
 8000e18:	617b      	str	r3, [r7, #20]
      tail_sector = buffer->tail / QSPI_BLOCK_SIZE_64K;
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	68db      	ldr	r3, [r3, #12]
 8000e1e:	0c1b      	lsrs	r3, r3, #16
 8000e20:	613b      	str	r3, [r7, #16]

      /*Check whether head and tail sector are same */
      if(head_sector == tail_sector)
 8000e22:	697a      	ldr	r2, [r7, #20]
 8000e24:	693b      	ldr	r3, [r7, #16]
 8000e26:	429a      	cmp	r2, r3
 8000e28:	d108      	bne.n	8000e3c <WriteDatasetToFlash+0x80>
      {
        printf("FCB : No empty locations to write\r\n. Next Addr: %lu  Tail: %u\n",next_addr,buffer->tail);
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	68db      	ldr	r3, [r3, #12]
 8000e2e:	461a      	mov	r2, r3
 8000e30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000e32:	4823      	ldr	r0, [pc, #140]	; (8000ec0 <WriteDatasetToFlash+0x104>)
 8000e34:	f004 f946 	bl	80050c4 <iprintf>
        return FCB_ADDR_ON_SAME_SECTOR;
 8000e38:	2305      	movs	r3, #5
 8000e3a:	e03b      	b.n	8000eb4 <WriteDatasetToFlash+0xf8>
  /* Check availablity of free memory locations */
 /* Not storing the data into the location just before the circular buffer tail 
 (meaning that the head would advance to the current location of the tail),
  we're about to overflow the buffer and so we don't write the character or
  advance the head. */
  if(next_addr != buffer->tail)
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	68db      	ldr	r3, [r3, #12]
 8000e40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e42:	429a      	cmp	r2, r3
 8000e44:	d02c      	beq.n	8000ea0 <WriteDatasetToFlash+0xe4>
  {
    /* Write data to flash and increment the head position */
    err_code = Flash_Write(buffer->tx_data, data_len, dst_addr);
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	69fa      	ldr	r2, [r7, #28]
 8000e4c:	69b9      	ldr	r1, [r7, #24]
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f000 ff96 	bl	8001d80 <Flash_Write>
 8000e54:	6238      	str	r0, [r7, #32]

    if(err_code == QSPI_OK)
 8000e56:	6a3b      	ldr	r3, [r7, #32]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d113      	bne.n	8000e84 <WriteDatasetToFlash+0xc8>
    {
      buffer->head = buffer->head + data_len;
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	689a      	ldr	r2, [r3, #8]
 8000e60:	69bb      	ldr	r3, [r7, #24]
 8000e62:	441a      	add	r2, r3
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	609a      	str	r2, [r3, #8]
      buffer->data_available = true;
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	741a      	strb	r2, [r3, #16]
      printf("Flash Buffer Current Head: %d, Tail: %d \n",fcb.head,fcb.tail);
 8000e6e:	4b15      	ldr	r3, [pc, #84]	; (8000ec4 <WriteDatasetToFlash+0x108>)
 8000e70:	689b      	ldr	r3, [r3, #8]
 8000e72:	4a14      	ldr	r2, [pc, #80]	; (8000ec4 <WriteDatasetToFlash+0x108>)
 8000e74:	68d2      	ldr	r2, [r2, #12]
 8000e76:	4619      	mov	r1, r3
 8000e78:	4813      	ldr	r0, [pc, #76]	; (8000ec8 <WriteDatasetToFlash+0x10c>)
 8000e7a:	f004 f923 	bl	80050c4 <iprintf>
      err_code = QSPI_OK;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	623b      	str	r3, [r7, #32]
 8000e82:	e004      	b.n	8000e8e <WriteDatasetToFlash+0xd2>
    }
    else
    {
      printf("FCB: Write Operation Failed\n");
 8000e84:	4811      	ldr	r0, [pc, #68]	; (8000ecc <WriteDatasetToFlash+0x110>)
 8000e86:	f004 f9a3 	bl	80051d0 <puts>
      err_code = QSPI_ERROR;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	623b      	str	r3, [r7, #32]
    }

    
    /*Reset the circular buffer head to start position,
     if the head has reached the end address of memory */  
    if(buffer->head == FLASH_BUFFER_END_ADDR)
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	689b      	ldr	r3, [r3, #8]
 8000e92:	4a0f      	ldr	r2, [pc, #60]	; (8000ed0 <WriteDatasetToFlash+0x114>)
 8000e94:	4293      	cmp	r3, r2
 8000e96:	d10b      	bne.n	8000eb0 <WriteDatasetToFlash+0xf4>
    {
      buffer->head = FLASH_BUFFER_START_ADDR;
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	609a      	str	r2, [r3, #8]
 8000e9e:	e007      	b.n	8000eb0 <WriteDatasetToFlash+0xf4>
    }
  }
  else
  {
    buffer->memory_available = false;
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	745a      	strb	r2, [r3, #17]
    err_code = FCB_NO_EMPTY_LOCATIONS;
 8000ea6:	2304      	movs	r3, #4
 8000ea8:	623b      	str	r3, [r7, #32]
    printf("FCB Status: No empty locations");
 8000eaa:	480a      	ldr	r0, [pc, #40]	; (8000ed4 <WriteDatasetToFlash+0x118>)
 8000eac:	f004 f90a 	bl	80050c4 <iprintf>





  return err_code;
 8000eb0:	6a3b      	ldr	r3, [r7, #32]
 8000eb2:	b2db      	uxtb	r3, r3

}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	3728      	adds	r7, #40	; 0x28
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	0001fff7 	.word	0x0001fff7
 8000ec0:	08006100 	.word	0x08006100
 8000ec4:	20000390 	.word	0x20000390
 8000ec8:	08006140 	.word	0x08006140
 8000ecc:	0800616c 	.word	0x0800616c
 8000ed0:	0001fff8 	.word	0x0001fff8
 8000ed4:	08006188 	.word	0x08006188

08000ed8 <ReadDatasetFromFlash>:
 * @param  buffer    Pointer to flash circular buffer
 * @param  dataToBuffer    Pointer to dataset to store in ring buffer
 * @retval FCB Status
*/
fcb_status ReadDatasetFromFlash(flash_circular_buffer* buffer,void* rcvBuffer,uint32_t length)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b088      	sub	sp, #32
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	60f8      	str	r0, [r7, #12]
 8000ee0:	60b9      	str	r1, [r7, #8]
 8000ee2:	607a      	str	r2, [r7, #4]
  uint32_t src_addr,data_len,err_code;
  
  /* Storing reciev buffer */
  buffer->rx_data = (DATASET*)rcvBuffer;
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	68ba      	ldr	r2, [r7, #8]
 8000ee8:	605a      	str	r2, [r3, #4]


  data_len = length;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	61bb      	str	r3, [r7, #24]
  src_addr = buffer->tail;
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	68db      	ldr	r3, [r3, #12]
 8000ef2:	617b      	str	r3, [r7, #20]

  /*Check wether data is available to read from flash */  
  if(src_addr != buffer->head)
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	689b      	ldr	r3, [r3, #8]
 8000ef8:	697a      	ldr	r2, [r7, #20]
 8000efa:	429a      	cmp	r2, r3
 8000efc:	d02b      	beq.n	8000f56 <ReadDatasetFromFlash+0x7e>
  {
      err_code = Flash_Read(buffer->rx_data, data_len,src_addr);
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	697a      	ldr	r2, [r7, #20]
 8000f04:	69b9      	ldr	r1, [r7, #24]
 8000f06:	4618      	mov	r0, r3
 8000f08:	f000 ff56 	bl	8001db8 <Flash_Read>
 8000f0c:	61f8      	str	r0, [r7, #28]

      if(err_code == FCB_OK)
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d10e      	bne.n	8000f32 <ReadDatasetFromFlash+0x5a>
      {
        buffer->tail = buffer->tail + data_len;
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	68da      	ldr	r2, [r3, #12]
 8000f18:	69bb      	ldr	r3, [r7, #24]
 8000f1a:	441a      	add	r2, r3
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	60da      	str	r2, [r3, #12]
        printf("Flash Buffer Current Head: %d, Tail: %d \n",fcb.head,fcb.tail);
 8000f20:	4b14      	ldr	r3, [pc, #80]	; (8000f74 <ReadDatasetFromFlash+0x9c>)
 8000f22:	689b      	ldr	r3, [r3, #8]
 8000f24:	4a13      	ldr	r2, [pc, #76]	; (8000f74 <ReadDatasetFromFlash+0x9c>)
 8000f26:	68d2      	ldr	r2, [r2, #12]
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4813      	ldr	r0, [pc, #76]	; (8000f78 <ReadDatasetFromFlash+0xa0>)
 8000f2c:	f004 f8ca 	bl	80050c4 <iprintf>
 8000f30:	e004      	b.n	8000f3c <ReadDatasetFromFlash+0x64>
      }
      else
      {
        err_code = FCB_READ_ERROR;
 8000f32:	2302      	movs	r3, #2
 8000f34:	61fb      	str	r3, [r7, #28]
        printf("FCB: Read Operation failed");
 8000f36:	4811      	ldr	r0, [pc, #68]	; (8000f7c <ReadDatasetFromFlash+0xa4>)
 8000f38:	f004 f8c4 	bl	80050c4 <iprintf>
      }   

    /*Reset the circular buffer tail to start position,
     if the tail has reached the end address of memory */  
    if(buffer->tail == FLASH_BUFFER_END_ADDR)
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	68db      	ldr	r3, [r3, #12]
 8000f40:	4a0f      	ldr	r2, [pc, #60]	; (8000f80 <ReadDatasetFromFlash+0xa8>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d102      	bne.n	8000f4c <ReadDatasetFromFlash+0x74>
    {
      /* Reset the tail position */
      buffer->tail = FLASH_BUFFER_START_ADDR;
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	2200      	movs	r2, #0
 8000f4a:	60da      	str	r2, [r3, #12]
    }
    
    /* Erase the read sector if the buffer head isn't locating memory
     in that sector */
      EraseFlashSector(buffer,src_addr);
 8000f4c:	6979      	ldr	r1, [r7, #20]
 8000f4e:	68f8      	ldr	r0, [r7, #12]
 8000f50:	f000 f81a 	bl	8000f88 <EraseFlashSector>
 8000f54:	e007      	b.n	8000f66 <ReadDatasetFromFlash+0x8e>
      
  }
  else
  {
    buffer->data_available = false;
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	2200      	movs	r2, #0
 8000f5a:	741a      	strb	r2, [r3, #16]
    printf("FCB Status: No data available to read\n");
 8000f5c:	4809      	ldr	r0, [pc, #36]	; (8000f84 <ReadDatasetFromFlash+0xac>)
 8000f5e:	f004 f937 	bl	80051d0 <puts>
    err_code = FCB_NO_DATA_AVAILABLE;
 8000f62:	2306      	movs	r3, #6
 8000f64:	61fb      	str	r3, [r7, #28]
  }

  return err_code;
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	b2db      	uxtb	r3, r3
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3720      	adds	r7, #32
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	20000390 	.word	0x20000390
 8000f78:	08006140 	.word	0x08006140
 8000f7c:	080061a8 	.word	0x080061a8
 8000f80:	0001fff8 	.word	0x0001fff8
 8000f84:	080061c4 	.word	0x080061c4

08000f88 <EraseFlashSector>:




fcb_status EraseFlashSector(flash_circular_buffer* buffer,uint32_t sector_addr)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	6039      	str	r1, [r7, #0]
  uint32_t err_code = FCB_OK;
 8000f92:	2300      	movs	r3, #0
 8000f94:	60fb      	str	r3, [r7, #12]

   
 /* Erase the previosuly read sector as soon as the current flash buffer tail
  position points to adddress on the next */
 switch(buffer->tail)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	68db      	ldr	r3, [r3, #12]
 8000f9a:	4a62      	ldr	r2, [pc, #392]	; (8001124 <EraseFlashSector+0x19c>)
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d057      	beq.n	8001050 <EraseFlashSector+0xc8>
 8000fa0:	4a60      	ldr	r2, [pc, #384]	; (8001124 <EraseFlashSector+0x19c>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	f200 80b7 	bhi.w	8001116 <EraseFlashSector+0x18e>
 8000fa8:	4a5f      	ldr	r2, [pc, #380]	; (8001128 <EraseFlashSector+0x1a0>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d050      	beq.n	8001050 <EraseFlashSector+0xc8>
 8000fae:	4a5e      	ldr	r2, [pc, #376]	; (8001128 <EraseFlashSector+0x1a0>)
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	f200 80b0 	bhi.w	8001116 <EraseFlashSector+0x18e>
 8000fb6:	f1b3 1f0c 	cmp.w	r3, #786444	; 0xc000c
 8000fba:	d049      	beq.n	8001050 <EraseFlashSector+0xc8>
 8000fbc:	f1b3 1f0c 	cmp.w	r3, #786444	; 0xc000c
 8000fc0:	f200 80a9 	bhi.w	8001116 <EraseFlashSector+0x18e>
 8000fc4:	4a59      	ldr	r2, [pc, #356]	; (800112c <EraseFlashSector+0x1a4>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d042      	beq.n	8001050 <EraseFlashSector+0xc8>
 8000fca:	4a58      	ldr	r2, [pc, #352]	; (800112c <EraseFlashSector+0x1a4>)
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	f200 80a2 	bhi.w	8001116 <EraseFlashSector+0x18e>
 8000fd2:	4a57      	ldr	r2, [pc, #348]	; (8001130 <EraseFlashSector+0x1a8>)
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	d03b      	beq.n	8001050 <EraseFlashSector+0xc8>
 8000fd8:	4a55      	ldr	r2, [pc, #340]	; (8001130 <EraseFlashSector+0x1a8>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	f200 809b 	bhi.w	8001116 <EraseFlashSector+0x18e>
 8000fe0:	4a54      	ldr	r2, [pc, #336]	; (8001134 <EraseFlashSector+0x1ac>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d034      	beq.n	8001050 <EraseFlashSector+0xc8>
 8000fe6:	4a53      	ldr	r2, [pc, #332]	; (8001134 <EraseFlashSector+0x1ac>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	f200 8094 	bhi.w	8001116 <EraseFlashSector+0x18e>
 8000fee:	4a52      	ldr	r2, [pc, #328]	; (8001138 <EraseFlashSector+0x1b0>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d02d      	beq.n	8001050 <EraseFlashSector+0xc8>
 8000ff4:	4a50      	ldr	r2, [pc, #320]	; (8001138 <EraseFlashSector+0x1b0>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	f200 808d 	bhi.w	8001116 <EraseFlashSector+0x18e>
 8000ffc:	4a4f      	ldr	r2, [pc, #316]	; (800113c <EraseFlashSector+0x1b4>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d026      	beq.n	8001050 <EraseFlashSector+0xc8>
 8001002:	4a4e      	ldr	r2, [pc, #312]	; (800113c <EraseFlashSector+0x1b4>)
 8001004:	4293      	cmp	r3, r2
 8001006:	f200 8086 	bhi.w	8001116 <EraseFlashSector+0x18e>
 800100a:	4a4d      	ldr	r2, [pc, #308]	; (8001140 <EraseFlashSector+0x1b8>)
 800100c:	4293      	cmp	r3, r2
 800100e:	d01f      	beq.n	8001050 <EraseFlashSector+0xc8>
 8001010:	4a4b      	ldr	r2, [pc, #300]	; (8001140 <EraseFlashSector+0x1b8>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d87f      	bhi.n	8001116 <EraseFlashSector+0x18e>
 8001016:	4a4b      	ldr	r2, [pc, #300]	; (8001144 <EraseFlashSector+0x1bc>)
 8001018:	4293      	cmp	r3, r2
 800101a:	d019      	beq.n	8001050 <EraseFlashSector+0xc8>
 800101c:	f1b3 1f05 	cmp.w	r3, #327685	; 0x50005
 8001020:	d279      	bcs.n	8001116 <EraseFlashSector+0x18e>
 8001022:	4a49      	ldr	r2, [pc, #292]	; (8001148 <EraseFlashSector+0x1c0>)
 8001024:	4293      	cmp	r3, r2
 8001026:	d013      	beq.n	8001050 <EraseFlashSector+0xc8>
 8001028:	4a47      	ldr	r2, [pc, #284]	; (8001148 <EraseFlashSector+0x1c0>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d873      	bhi.n	8001116 <EraseFlashSector+0x18e>
 800102e:	4a47      	ldr	r2, [pc, #284]	; (800114c <EraseFlashSector+0x1c4>)
 8001030:	4293      	cmp	r3, r2
 8001032:	d00d      	beq.n	8001050 <EraseFlashSector+0xc8>
 8001034:	4a45      	ldr	r2, [pc, #276]	; (800114c <EraseFlashSector+0x1c4>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d86d      	bhi.n	8001116 <EraseFlashSector+0x18e>
 800103a:	4a45      	ldr	r2, [pc, #276]	; (8001150 <EraseFlashSector+0x1c8>)
 800103c:	4293      	cmp	r3, r2
 800103e:	d007      	beq.n	8001050 <EraseFlashSector+0xc8>
 8001040:	4a43      	ldr	r2, [pc, #268]	; (8001150 <EraseFlashSector+0x1c8>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d867      	bhi.n	8001116 <EraseFlashSector+0x18e>
 8001046:	2b00      	cmp	r3, #0
 8001048:	d04a      	beq.n	80010e0 <EraseFlashSector+0x158>
 800104a:	4a42      	ldr	r2, [pc, #264]	; (8001154 <EraseFlashSector+0x1cc>)
 800104c:	4293      	cmp	r3, r2
 800104e:	d162      	bne.n	8001116 <EraseFlashSector+0x18e>
   case ((BLOCK14_ADDR - ((QSPI_BLOCK_SIZE_64K * 14) % sizeof(DATASET)) + sizeof(DATASET))):          

       /* Check if buffer head position is ahead or behind
        the tail position. If head position is greate than 
        tail erase the previos sector */
       if(buffer->head > buffer->tail)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	689a      	ldr	r2, [r3, #8]
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	68db      	ldr	r3, [r3, #12]
 8001058:	429a      	cmp	r2, r3
 800105a:	d918      	bls.n	800108e <EraseFlashSector+0x106>
       {
         err_code = Flash_Erase(QSPI_ERASE_LEN_64KB,sector_addr - sizeof(DATASET));
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	3b0c      	subs	r3, #12
 8001060:	4619      	mov	r1, r3
 8001062:	2002      	movs	r0, #2
 8001064:	f000 fe44 	bl	8001cf0 <Flash_Erase>
 8001068:	60f8      	str	r0, [r7, #12]

         if(err_code == QSPI_OK)
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d10b      	bne.n	8001088 <EraseFlashSector+0x100>
         {
           printf("FCB : Erased Sector Address: %lu\n",sector_addr- sizeof(DATASET));
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	3b0c      	subs	r3, #12
 8001074:	4619      	mov	r1, r3
 8001076:	4838      	ldr	r0, [pc, #224]	; (8001158 <EraseFlashSector+0x1d0>)
 8001078:	f004 f824 	bl	80050c4 <iprintf>
           HAL_Delay(1);
 800107c:	2001      	movs	r0, #1
 800107e:	f000 ff2b 	bl	8001ed8 <HAL_Delay>
           err_code = FCB_OK;
 8001082:	2300      	movs	r3, #0
 8001084:	60fb      	str	r3, [r7, #12]
           printf("FCB: Header sector and Tail sector matches.\r\nCant erase memory\n");
           err_code = FCB_ADDR_ON_SAME_SECTOR;
         }
       }
     
      break;
 8001086:	e046      	b.n	8001116 <EraseFlashSector+0x18e>
           err_code = FCB_ERASE_ERROR;
 8001088:	2303      	movs	r3, #3
 800108a:	60fb      	str	r3, [r7, #12]
      break;
 800108c:	e043      	b.n	8001116 <EraseFlashSector+0x18e>
         if((int)(buffer->head/QSPI_BLOCK_SIZE_64K) != (int)((buffer->tail - sizeof(DATASET))/QSPI_BLOCK_SIZE_64K))
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	689b      	ldr	r3, [r3, #8]
 8001092:	0c1b      	lsrs	r3, r3, #16
 8001094:	461a      	mov	r2, r3
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	68db      	ldr	r3, [r3, #12]
 800109a:	3b0c      	subs	r3, #12
 800109c:	0c1b      	lsrs	r3, r3, #16
 800109e:	429a      	cmp	r2, r3
 80010a0:	d018      	beq.n	80010d4 <EraseFlashSector+0x14c>
           err_code = Flash_Erase(QSPI_ERASE_LEN_64KB,sector_addr - sizeof(DATASET));
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	3b0c      	subs	r3, #12
 80010a6:	4619      	mov	r1, r3
 80010a8:	2002      	movs	r0, #2
 80010aa:	f000 fe21 	bl	8001cf0 <Flash_Erase>
 80010ae:	60f8      	str	r0, [r7, #12]
           if(err_code == QSPI_OK)
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d10b      	bne.n	80010ce <EraseFlashSector+0x146>
             printf("FCB : Erased Sector Address: %lu\n",sector_addr- sizeof(DATASET));
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	3b0c      	subs	r3, #12
 80010ba:	4619      	mov	r1, r3
 80010bc:	4826      	ldr	r0, [pc, #152]	; (8001158 <EraseFlashSector+0x1d0>)
 80010be:	f004 f801 	bl	80050c4 <iprintf>
             HAL_Delay(1);
 80010c2:	2001      	movs	r0, #1
 80010c4:	f000 ff08 	bl	8001ed8 <HAL_Delay>
             err_code = FCB_OK;
 80010c8:	2300      	movs	r3, #0
 80010ca:	60fb      	str	r3, [r7, #12]
      break;
 80010cc:	e023      	b.n	8001116 <EraseFlashSector+0x18e>
             err_code = FCB_ERASE_ERROR;
 80010ce:	2303      	movs	r3, #3
 80010d0:	60fb      	str	r3, [r7, #12]
      break;
 80010d2:	e020      	b.n	8001116 <EraseFlashSector+0x18e>
           printf("FCB: Header sector and Tail sector matches.\r\nCant erase memory\n");
 80010d4:	4821      	ldr	r0, [pc, #132]	; (800115c <EraseFlashSector+0x1d4>)
 80010d6:	f004 f87b 	bl	80051d0 <puts>
           err_code = FCB_ADDR_ON_SAME_SECTOR;
 80010da:	2305      	movs	r3, #5
 80010dc:	60fb      	str	r3, [r7, #12]
      break;
 80010de:	e01a      	b.n	8001116 <EraseFlashSector+0x18e>
     
      /* Event generated when tail rollsover the buffer */
     case FLASH_BUFFER_START_ADDR : 
       /* Check if the buffer header position is not overlapping 
       the last sector in the flash buffer */
       if((int)(buffer->head/QSPI_BLOCK_SIZE_64K) != ((FLASH_BUFFER_END_ADDR - sizeof(DATASET))/QSPI_BLOCK_SIZE_64K))
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	689b      	ldr	r3, [r3, #8]
 80010e4:	0c1b      	lsrs	r3, r3, #16
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d014      	beq.n	8001114 <EraseFlashSector+0x18c>
       {
         err_code = Flash_Erase(QSPI_ERASE_LEN_64KB,sector_addr - sizeof(DATASET));
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	3b0c      	subs	r3, #12
 80010ee:	4619      	mov	r1, r3
 80010f0:	2002      	movs	r0, #2
 80010f2:	f000 fdfd 	bl	8001cf0 <Flash_Erase>
 80010f6:	60f8      	str	r0, [r7, #12]

         if(err_code == QSPI_OK)
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d10a      	bne.n	8001114 <EraseFlashSector+0x18c>
         {
           printf("FCB : Erased Sector Address: %lu\n",sector_addr- sizeof(DATASET));
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	3b0c      	subs	r3, #12
 8001102:	4619      	mov	r1, r3
 8001104:	4814      	ldr	r0, [pc, #80]	; (8001158 <EraseFlashSector+0x1d0>)
 8001106:	f003 ffdd 	bl	80050c4 <iprintf>
           HAL_Delay(1);
 800110a:	2001      	movs	r0, #1
 800110c:	f000 fee4 	bl	8001ed8 <HAL_Delay>
           err_code = FCB_OK;
 8001110:	2300      	movs	r3, #0
 8001112:	60fb      	str	r3, [r7, #12]
         }  
       }  
      break;
 8001114:	bf00      	nop

 }
 

 return  err_code;
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	b2db      	uxtb	r3, r3

}
 800111a:	4618      	mov	r0, r3
 800111c:	3710      	adds	r7, #16
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	000e0004 	.word	0x000e0004
 8001128:	000d0008 	.word	0x000d0008
 800112c:	000b0004 	.word	0x000b0004
 8001130:	000a0008 	.word	0x000a0008
 8001134:	0009000c 	.word	0x0009000c
 8001138:	00080004 	.word	0x00080004
 800113c:	00070008 	.word	0x00070008
 8001140:	0006000c 	.word	0x0006000c
 8001144:	00050004 	.word	0x00050004
 8001148:	00040008 	.word	0x00040008
 800114c:	0003000c 	.word	0x0003000c
 8001150:	00020004 	.word	0x00020004
 8001154:	00010008 	.word	0x00010008
 8001158:	080061ec 	.word	0x080061ec
 800115c:	08006210 	.word	0x08006210

08001160 <BSP_QSPI_Init>:

/**
 * @brief  Initializes the QSPI interface.
 * @retval QSPI memory status
 */
uint8_t BSP_QSPI_Init(void) {
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
	QSPIHandle.Instance = QUADSPI;//inst=QSPI registers base address
 8001166:	4b31      	ldr	r3, [pc, #196]	; (800122c <BSP_QSPI_Init+0xcc>)
 8001168:	4a31      	ldr	r2, [pc, #196]	; (8001230 <BSP_QSPI_Init+0xd0>)
 800116a:	601a      	str	r2, [r3, #0]
	/* Call the DeInit function to reset the driver */
	if (HAL_QSPI_DeInit(&QSPIHandle) != HAL_OK) {//reset
 800116c:	482f      	ldr	r0, [pc, #188]	; (800122c <BSP_QSPI_Init+0xcc>)
 800116e:	f001 fb31 	bl	80027d4 <HAL_QSPI_DeInit>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <BSP_QSPI_Init+0x1c>
		return QSPI_ERROR;
 8001178:	2301      	movs	r3, #1
 800117a:	e053      	b.n	8001224 <BSP_QSPI_Init+0xc4>

	/* System level initialization */
//	BSP_QSPI_MspInit(&QSPIHandle, NULL);

	/* QSPI initialization */
	QSPIHandle.Init.ClockPrescaler = 0;
 800117c:	4b2b      	ldr	r3, [pc, #172]	; (800122c <BSP_QSPI_Init+0xcc>)
 800117e:	2200      	movs	r2, #0
 8001180:	605a      	str	r2, [r3, #4]
	QSPIHandle.Init.FifoThreshold = 4;
 8001182:	4b2a      	ldr	r3, [pc, #168]	; (800122c <BSP_QSPI_Init+0xcc>)
 8001184:	2204      	movs	r2, #4
 8001186:	609a      	str	r2, [r3, #8]
	QSPIHandle.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8001188:	4b28      	ldr	r3, [pc, #160]	; (800122c <BSP_QSPI_Init+0xcc>)
 800118a:	2200      	movs	r2, #0
 800118c:	60da      	str	r2, [r3, #12]
 800118e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001192:	60bb      	str	r3, [r7, #8]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	fa93 f3a3 	rbit	r3, r3
 800119a:	607b      	str	r3, [r7, #4]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	60fb      	str	r3, [r7, #12]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d101      	bne.n	80011aa <BSP_QSPI_Init+0x4a>
  {
    return 32U;
 80011a6:	2320      	movs	r3, #32
 80011a8:	e003      	b.n	80011b2 <BSP_QSPI_Init+0x52>
  }
  return __builtin_clz(value);
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	fab3 f383 	clz	r3, r3
 80011b0:	b2db      	uxtb	r3, r3
	QSPIHandle.Init.FlashSize = POSITION_VAL(MX25L32_FLASH_SIZE) - 1;
 80011b2:	3b01      	subs	r3, #1
 80011b4:	461a      	mov	r2, r3
 80011b6:	4b1d      	ldr	r3, [pc, #116]	; (800122c <BSP_QSPI_Init+0xcc>)
 80011b8:	611a      	str	r2, [r3, #16]
	QSPIHandle.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80011ba:	4b1c      	ldr	r3, [pc, #112]	; (800122c <BSP_QSPI_Init+0xcc>)
 80011bc:	2200      	movs	r2, #0
 80011be:	615a      	str	r2, [r3, #20]
	QSPIHandle.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80011c0:	4b1a      	ldr	r3, [pc, #104]	; (800122c <BSP_QSPI_Init+0xcc>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	619a      	str	r2, [r3, #24]
	QSPIHandle.Init.FlashID = QSPI_FLASH_ID_1;
 80011c6:	4b19      	ldr	r3, [pc, #100]	; (800122c <BSP_QSPI_Init+0xcc>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	61da      	str	r2, [r3, #28]
	QSPIHandle.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80011cc:	4b17      	ldr	r3, [pc, #92]	; (800122c <BSP_QSPI_Init+0xcc>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	621a      	str	r2, [r3, #32]

	if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK) {
 80011d2:	4816      	ldr	r0, [pc, #88]	; (800122c <BSP_QSPI_Init+0xcc>)
 80011d4:	f001 fa82 	bl	80026dc <HAL_QSPI_Init>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <BSP_QSPI_Init+0x82>
		return QSPI_ERROR;
 80011de:	2301      	movs	r3, #1
 80011e0:	e020      	b.n	8001224 <BSP_QSPI_Init+0xc4>
	}

	/* QSPI memory reset */
	if (QSPI_ResetMemory(&QSPIHandle) != QSPI_OK) {
 80011e2:	4812      	ldr	r0, [pc, #72]	; (800122c <BSP_QSPI_Init+0xcc>)
 80011e4:	f000 fa52 	bl	800168c <QSPI_ResetMemory>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <BSP_QSPI_Init+0x92>
		return QSPI_NOT_SUPPORTED;
 80011ee:	2304      	movs	r3, #4
 80011f0:	e018      	b.n	8001224 <BSP_QSPI_Init+0xc4>
	}

	/* Put QSPI memory in QPI mode */
	if (QSPI_EnterMemory_QPI(&QSPIHandle) != QSPI_OK) {
 80011f2:	480e      	ldr	r0, [pc, #56]	; (800122c <BSP_QSPI_Init+0xcc>)
 80011f4:	f000 fc70 	bl	8001ad8 <QSPI_EnterMemory_QPI>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <BSP_QSPI_Init+0xa2>
		return QSPI_NOT_SUPPORTED;
 80011fe:	2304      	movs	r3, #4
 8001200:	e010      	b.n	8001224 <BSP_QSPI_Init+0xc4>
	}

	/* Set the QSPI memory in 4-bytes address mode */
	if (QSPI_EnterFourBytesAddress(&QSPIHandle) != QSPI_OK) {
 8001202:	480a      	ldr	r0, [pc, #40]	; (800122c <BSP_QSPI_Init+0xcc>)
 8001204:	f000 fb6a 	bl	80018dc <QSPI_EnterFourBytesAddress>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <BSP_QSPI_Init+0xb2>
		return QSPI_NOT_SUPPORTED;
 800120e:	2304      	movs	r3, #4
 8001210:	e008      	b.n	8001224 <BSP_QSPI_Init+0xc4>
	}

	/* Configuration of the dummy cycles on QSPI memory side */
	if (QSPI_DummyCyclesCfg(&QSPIHandle) != QSPI_OK) {
 8001212:	4806      	ldr	r0, [pc, #24]	; (800122c <BSP_QSPI_Init+0xcc>)
 8001214:	f000 fb9d 	bl	8001952 <QSPI_DummyCyclesCfg>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <BSP_QSPI_Init+0xc2>
		return QSPI_NOT_SUPPORTED;
 800121e:	2304      	movs	r3, #4
 8001220:	e000      	b.n	8001224 <BSP_QSPI_Init+0xc4>
	}

	return QSPI_OK;
 8001222:	2300      	movs	r3, #0
}
 8001224:	4618      	mov	r0, r3
 8001226:	3710      	adds	r7, #16
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	200003a4 	.word	0x200003a4
 8001230:	a0001000 	.word	0xa0001000

08001234 <BSP_QSPI_ReadID>:
/**
 * @brief  Reads device id from the QSPI memory.
 * @param  pData: Pointer to data to be read
 * @retval QSPI memory status
 */
uint8_t BSP_QSPI_ReadID(uint8_t *pData) {
 8001234:	b580      	push	{r7, lr}
 8001236:	b092      	sub	sp, #72	; 0x48
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
	QSPI_CommandTypeDef s_command;
	uint8_t ret = 0;
 800123c:	2300      	movs	r3, #0
 800123e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8001242:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001246:	627b      	str	r3, [r7, #36]	; 0x24
	s_command.Instruction = READ_ID_CMD;
 8001248:	239f      	movs	r3, #159	; 0x9f
 800124a:	60fb      	str	r3, [r7, #12]
	s_command.AddressMode = QSPI_ADDRESS_NONE;
 800124c:	2300      	movs	r3, #0
 800124e:	62bb      	str	r3, [r7, #40]	; 0x28
	s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001250:	2300      	movs	r3, #0
 8001252:	62fb      	str	r3, [r7, #44]	; 0x2c
	s_command.DataMode = QSPI_DATA_1_LINE;
 8001254:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001258:	633b      	str	r3, [r7, #48]	; 0x30
	s_command.DummyCycles = 0;
 800125a:	2300      	movs	r3, #0
 800125c:	623b      	str	r3, [r7, #32]
	s_command.NbData = 3;
 800125e:	2303      	movs	r3, #3
 8001260:	637b      	str	r3, [r7, #52]	; 0x34
	s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 8001262:	2300      	movs	r3, #0
 8001264:	63bb      	str	r3, [r7, #56]	; 0x38
	s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8001266:	2300      	movs	r3, #0
 8001268:	63fb      	str	r3, [r7, #60]	; 0x3c
	s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 800126a:	2300      	movs	r3, #0
 800126c:	643b      	str	r3, [r7, #64]	; 0x40

	/* Configure the command */
	if ((ret = HAL_QSPI_Command(&QSPIHandle, &s_command, 5000)) != HAL_OK) {
 800126e:	f107 030c 	add.w	r3, r7, #12
 8001272:	f241 3288 	movw	r2, #5000	; 0x1388
 8001276:	4619      	mov	r1, r3
 8001278:	481e      	ldr	r0, [pc, #120]	; (80012f4 <BSP_QSPI_ReadID+0xc0>)
 800127a:	f001 facf 	bl	800281c <HAL_QSPI_Command>
 800127e:	4603      	mov	r3, r0
 8001280:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8001284:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001288:	2b00      	cmp	r3, #0
 800128a:	d007      	beq.n	800129c <BSP_QSPI_ReadID+0x68>
		printf("%d HAL_QSPI_Command\r\n", ret);
 800128c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001290:	4619      	mov	r1, r3
 8001292:	4819      	ldr	r0, [pc, #100]	; (80012f8 <BSP_QSPI_ReadID+0xc4>)
 8001294:	f003 ff16 	bl	80050c4 <iprintf>
		return QSPI_ERROR;
 8001298:	2301      	movs	r3, #1
 800129a:	e026      	b.n	80012ea <BSP_QSPI_ReadID+0xb6>
	}

	/* Reception of the data */
	if ((ret = HAL_QSPI_Receive(&QSPIHandle, pData, 5000)) != HAL_OK) {
 800129c:	f241 3288 	movw	r2, #5000	; 0x1388
 80012a0:	6879      	ldr	r1, [r7, #4]
 80012a2:	4814      	ldr	r0, [pc, #80]	; (80012f4 <BSP_QSPI_ReadID+0xc0>)
 80012a4:	f001 fbaa 	bl	80029fc <HAL_QSPI_Receive>
 80012a8:	4603      	mov	r3, r0
 80012aa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80012ae:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d007      	beq.n	80012c6 <BSP_QSPI_ReadID+0x92>
		printf("%d HAL_QSPI_Receive\r\n", ret);
 80012b6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80012ba:	4619      	mov	r1, r3
 80012bc:	480f      	ldr	r0, [pc, #60]	; (80012fc <BSP_QSPI_ReadID+0xc8>)
 80012be:	f003 ff01 	bl	80050c4 <iprintf>
		return QSPI_ERROR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	e011      	b.n	80012ea <BSP_QSPI_ReadID+0xb6>
	}

	if (ret == 0) {
 80012c6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d10c      	bne.n	80012e8 <BSP_QSPI_ReadID+0xb4>
		printf("data--->>: %x %x %x\r\n", pData[0], pData[1], pData[2]);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	4619      	mov	r1, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	3301      	adds	r3, #1
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	461a      	mov	r2, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	3302      	adds	r3, #2
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	4807      	ldr	r0, [pc, #28]	; (8001300 <BSP_QSPI_ReadID+0xcc>)
 80012e4:	f003 feee 	bl	80050c4 <iprintf>
	}

	return QSPI_OK;
 80012e8:	2300      	movs	r3, #0
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3748      	adds	r7, #72	; 0x48
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	200003a4 	.word	0x200003a4
 80012f8:	08006250 	.word	0x08006250
 80012fc:	08006268 	.word	0x08006268
 8001300:	08006280 	.word	0x08006280

08001304 <BSP_QSPI_Read>:
 * @param  pData: Pointer to data to be read
 * @param  ReadAddr: Read start address
 * @param  Size: Size of data to read
 * @retval QSPI memory status
 */
uint8_t BSP_QSPI_Read(uint8_t *pData, uint32_t ReadAddr, uint32_t Size) {
 8001304:	b580      	push	{r7, lr}
 8001306:	b094      	sub	sp, #80	; 0x50
 8001308:	af00      	add	r7, sp, #0
 800130a:	60f8      	str	r0, [r7, #12]
 800130c:	60b9      	str	r1, [r7, #8]
 800130e:	607a      	str	r2, [r7, #4]
	QSPI_CommandTypeDef s_command;
	uint8_t ret = 0;
 8001310:	2300      	movs	r3, #0
 8001312:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	/* Initialize the read command */
	s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8001316:	f44f 7380 	mov.w	r3, #256	; 0x100
 800131a:	62fb      	str	r3, [r7, #44]	; 0x2c
	s_command.Instruction = READ_CMD;
 800131c:	2303      	movs	r3, #3
 800131e:	617b      	str	r3, [r7, #20]
	s_command.AddressMode = QSPI_ADDRESS_1_LINE;
 8001320:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001324:	633b      	str	r3, [r7, #48]	; 0x30
	s_command.AddressSize = QSPI_ADDRESS_24_BITS;
 8001326:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800132a:	623b      	str	r3, [r7, #32]
	s_command.Address = ReadAddr;
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	61bb      	str	r3, [r7, #24]
	s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001330:	2300      	movs	r3, #0
 8001332:	637b      	str	r3, [r7, #52]	; 0x34
	s_command.DataMode = QSPI_DATA_1_LINE;
 8001334:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001338:	63bb      	str	r3, [r7, #56]	; 0x38
	s_command.DummyCycles = 0;
 800133a:	2300      	movs	r3, #0
 800133c:	62bb      	str	r3, [r7, #40]	; 0x28
	s_command.NbData = Size;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	63fb      	str	r3, [r7, #60]	; 0x3c
	s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 8001342:	2300      	movs	r3, #0
 8001344:	643b      	str	r3, [r7, #64]	; 0x40
	s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8001346:	2300      	movs	r3, #0
 8001348:	647b      	str	r3, [r7, #68]	; 0x44
	s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 800134a:	2300      	movs	r3, #0
 800134c:	64bb      	str	r3, [r7, #72]	; 0x48

	/* Configure the command */
	if ((ret = HAL_QSPI_Command(&QSPIHandle, &s_command,
 800134e:	f107 0314 	add.w	r3, r7, #20
 8001352:	f241 3288 	movw	r2, #5000	; 0x1388
 8001356:	4619      	mov	r1, r3
 8001358:	480f      	ldr	r0, [pc, #60]	; (8001398 <BSP_QSPI_Read+0x94>)
 800135a:	f001 fa5f 	bl	800281c <HAL_QSPI_Command>
 800135e:	4603      	mov	r3, r0
 8001360:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8001364:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <BSP_QSPI_Read+0x6c>
			HAL_QPSI_TIMEOUT_DEFAULT_VALUE)) != HAL_OK) {
		return QSPI_ERROR;
 800136c:	2301      	movs	r3, #1
 800136e:	e00f      	b.n	8001390 <BSP_QSPI_Read+0x8c>
	}

	/* Reception of the data */
	if ((ret = HAL_QSPI_Receive(&QSPIHandle, pData,
 8001370:	f241 3288 	movw	r2, #5000	; 0x1388
 8001374:	68f9      	ldr	r1, [r7, #12]
 8001376:	4808      	ldr	r0, [pc, #32]	; (8001398 <BSP_QSPI_Read+0x94>)
 8001378:	f001 fb40 	bl	80029fc <HAL_QSPI_Receive>
 800137c:	4603      	mov	r3, r0
 800137e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8001382:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <BSP_QSPI_Read+0x8a>
			HAL_QPSI_TIMEOUT_DEFAULT_VALUE)) != HAL_OK) {
		return QSPI_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	e000      	b.n	8001390 <BSP_QSPI_Read+0x8c>
	}

	return QSPI_OK;
 800138e:	2300      	movs	r3, #0
}
 8001390:	4618      	mov	r0, r3
 8001392:	3750      	adds	r7, #80	; 0x50
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	200003a4 	.word	0x200003a4

0800139c <BSP_QSPI_Write>:
 * @param  WriteAddr: Write start address
 * @param  Size: Size of data to write
 * @retval QSPI memory status
 */

uint8_t BSP_QSPI_Write(uint8_t *pData, uint32_t WriteAddr, uint32_t Size) {
 800139c:	b580      	push	{r7, lr}
 800139e:	b096      	sub	sp, #88	; 0x58
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	60f8      	str	r0, [r7, #12]
 80013a4:	60b9      	str	r1, [r7, #8]
 80013a6:	607a      	str	r2, [r7, #4]
	QSPI_CommandTypeDef s_command;
	uint32_t end_addr, current_size, current_addr;

	/* Calculation of the size between the write address and the end of the page */
	current_size = MX25L32_PAGE_SIZE - (WriteAddr % MX25L32_PAGE_SIZE);
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80013b0:	657b      	str	r3, [r7, #84]	; 0x54

	/* Check if the size of the data is less than the remaining place in the page */
	if (current_size > Size) {
 80013b2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	429a      	cmp	r2, r3
 80013b8:	d901      	bls.n	80013be <BSP_QSPI_Write+0x22>
		current_size = Size;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Initialize the adress variables */
	current_addr = WriteAddr;
 80013be:	68bb      	ldr	r3, [r7, #8]
 80013c0:	653b      	str	r3, [r7, #80]	; 0x50
	end_addr = WriteAddr + Size;
 80013c2:	68ba      	ldr	r2, [r7, #8]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	4413      	add	r3, r2
 80013c8:	64fb      	str	r3, [r7, #76]	; 0x4c

	/* Initialize the program command */
	s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80013ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013ce:	62fb      	str	r3, [r7, #44]	; 0x2c
	s_command.Instruction = PAGE_PROG_CMD;
 80013d0:	2302      	movs	r3, #2
 80013d2:	617b      	str	r3, [r7, #20]
	s_command.AddressMode = QSPI_ADDRESS_1_LINE;
 80013d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013d8:	633b      	str	r3, [r7, #48]	; 0x30
	s_command.AddressSize = QSPI_ADDRESS_24_BITS;
 80013da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013de:	623b      	str	r3, [r7, #32]
	s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80013e0:	2300      	movs	r3, #0
 80013e2:	637b      	str	r3, [r7, #52]	; 0x34
	s_command.DataMode          = QSPI_DATA_1_LINE;
 80013e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80013e8:	63bb      	str	r3, [r7, #56]	; 0x38
	s_command.DummyCycles = 0;
 80013ea:	2300      	movs	r3, #0
 80013ec:	62bb      	str	r3, [r7, #40]	; 0x28
	s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 80013ee:	2300      	movs	r3, #0
 80013f0:	643b      	str	r3, [r7, #64]	; 0x40
	s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 80013f2:	2300      	movs	r3, #0
 80013f4:	647b      	str	r3, [r7, #68]	; 0x44
	s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 80013f6:	2300      	movs	r3, #0
 80013f8:	64bb      	str	r3, [r7, #72]	; 0x48

	/* Perform the write page by page */
	do {
		s_command.Address = current_addr;
 80013fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80013fc:	61bb      	str	r3, [r7, #24]
		s_command.NbData = current_size;
 80013fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001400:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* Enable write operations */
		if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK) {
 8001402:	4824      	ldr	r0, [pc, #144]	; (8001494 <BSP_QSPI_Write+0xf8>)
 8001404:	f000 fbb4 	bl	8001b70 <QSPI_WriteEnable>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <BSP_QSPI_Write+0x76>
			return QSPI_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	e03b      	b.n	800148a <BSP_QSPI_Write+0xee>
		}

		/* Configure the command */
		if (HAL_QSPI_Command(&QSPIHandle, &s_command,
 8001412:	f107 0314 	add.w	r3, r7, #20
 8001416:	f241 3288 	movw	r2, #5000	; 0x1388
 800141a:	4619      	mov	r1, r3
 800141c:	481d      	ldr	r0, [pc, #116]	; (8001494 <BSP_QSPI_Write+0xf8>)
 800141e:	f001 f9fd 	bl	800281c <HAL_QSPI_Command>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <BSP_QSPI_Write+0x90>
				HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
			return QSPI_ERROR;
 8001428:	2301      	movs	r3, #1
 800142a:	e02e      	b.n	800148a <BSP_QSPI_Write+0xee>
		}

		/* Transmission of the data */
		if (HAL_QSPI_Transmit(&QSPIHandle, pData,
 800142c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001430:	68f9      	ldr	r1, [r7, #12]
 8001432:	4818      	ldr	r0, [pc, #96]	; (8001494 <BSP_QSPI_Write+0xf8>)
 8001434:	f001 fa50 	bl	80028d8 <HAL_QSPI_Transmit>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <BSP_QSPI_Write+0xa6>
				HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
			return QSPI_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	e023      	b.n	800148a <BSP_QSPI_Write+0xee>
		}

		/* Configure automatic polling mode to wait for end of program */
		if (QSPI_AutoPollingMemReady(&QSPIHandle,
 8001442:	f241 3188 	movw	r1, #5000	; 0x1388
 8001446:	4813      	ldr	r0, [pc, #76]	; (8001494 <BSP_QSPI_Write+0xf8>)
 8001448:	f000 fbe6 	bl	8001c18 <QSPI_AutoPollingMemReady>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <BSP_QSPI_Write+0xba>
				HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK) {
			return QSPI_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	e019      	b.n	800148a <BSP_QSPI_Write+0xee>
		}
		/* Update the address and size variables for next page programming */
		current_addr += current_size;
 8001456:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001458:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800145a:	4413      	add	r3, r2
 800145c:	653b      	str	r3, [r7, #80]	; 0x50
		pData += current_size;
 800145e:	68fa      	ldr	r2, [r7, #12]
 8001460:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001462:	4413      	add	r3, r2
 8001464:	60fb      	str	r3, [r7, #12]
		current_size =
				((current_addr + MX25L32_PAGE_SIZE) > end_addr) ?
 8001466:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001468:	f503 7380 	add.w	r3, r3, #256	; 0x100
						(end_addr - current_addr) : MX25L32_PAGE_SIZE;
 800146c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800146e:	429a      	cmp	r2, r3
 8001470:	d203      	bcs.n	800147a <BSP_QSPI_Write+0xde>
 8001472:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001474:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001476:	1ad3      	subs	r3, r2, r3
 8001478:	e001      	b.n	800147e <BSP_QSPI_Write+0xe2>
 800147a:	f44f 7380 	mov.w	r3, #256	; 0x100
		current_size =
 800147e:	657b      	str	r3, [r7, #84]	; 0x54
	} while (current_addr < end_addr);
 8001480:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001482:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001484:	429a      	cmp	r2, r3
 8001486:	d3b8      	bcc.n	80013fa <BSP_QSPI_Write+0x5e>

	return QSPI_OK;
 8001488:	2300      	movs	r3, #0
}
 800148a:	4618      	mov	r0, r3
 800148c:	3758      	adds	r7, #88	; 0x58
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	200003a4 	.word	0x200003a4

08001498 <BSP_QSPI_Erase_Sector>:
/**
 * @brief  Erases the specified sector of the QSPI memory.
 * @param  SectorAddress: Sector address to erase
 * @retval QSPI memory status
 */
uint8_t BSP_QSPI_Erase_Sector(uint32_t SectorAddress) {
 8001498:	b580      	push	{r7, lr}
 800149a:	b090      	sub	sp, #64	; 0x40
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
	QSPI_CommandTypeDef s_command;

	/* Initialize the erase command */
	s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80014a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014a4:	623b      	str	r3, [r7, #32]
	s_command.Instruction = SECTOR_ERASE_CMD;
 80014a6:	2320      	movs	r3, #32
 80014a8:	60bb      	str	r3, [r7, #8]
	s_command.AddressMode = QSPI_ADDRESS_1_LINE;
 80014aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014ae:	627b      	str	r3, [r7, #36]	; 0x24
	s_command.AddressSize = QSPI_ADDRESS_24_BITS;
 80014b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014b4:	617b      	str	r3, [r7, #20]
	s_command.Address = SectorAddress;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	60fb      	str	r3, [r7, #12]
	s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80014ba:	2300      	movs	r3, #0
 80014bc:	62bb      	str	r3, [r7, #40]	; 0x28
	s_command.DataMode = QSPI_DATA_NONE;
 80014be:	2300      	movs	r3, #0
 80014c0:	62fb      	str	r3, [r7, #44]	; 0x2c
	s_command.DummyCycles = 0;
 80014c2:	2300      	movs	r3, #0
 80014c4:	61fb      	str	r3, [r7, #28]
	s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 80014c6:	2300      	movs	r3, #0
 80014c8:	637b      	str	r3, [r7, #52]	; 0x34
	s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 80014ca:	2300      	movs	r3, #0
 80014cc:	63bb      	str	r3, [r7, #56]	; 0x38
	s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 80014ce:	2300      	movs	r3, #0
 80014d0:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Enable write operations */
	if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK) {
 80014d2:	4812      	ldr	r0, [pc, #72]	; (800151c <BSP_QSPI_Erase_Sector+0x84>)
 80014d4:	f000 fb4c 	bl	8001b70 <QSPI_WriteEnable>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <BSP_QSPI_Erase_Sector+0x4a>
		return QSPI_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	e017      	b.n	8001512 <BSP_QSPI_Erase_Sector+0x7a>
	}

	/* Send the command */
	if (HAL_QSPI_Command(&QSPIHandle, &s_command,
 80014e2:	f107 0308 	add.w	r3, r7, #8
 80014e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80014ea:	4619      	mov	r1, r3
 80014ec:	480b      	ldr	r0, [pc, #44]	; (800151c <BSP_QSPI_Erase_Sector+0x84>)
 80014ee:	f001 f995 	bl	800281c <HAL_QSPI_Command>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <BSP_QSPI_Erase_Sector+0x64>
			HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
		return QSPI_ERROR;
 80014f8:	2301      	movs	r3, #1
 80014fa:	e00a      	b.n	8001512 <BSP_QSPI_Erase_Sector+0x7a>
	}

	/* Configure automatic polling mode to wait for end of erase */
	if (QSPI_AutoPollingMemReady(&QSPIHandle,
 80014fc:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001500:	4806      	ldr	r0, [pc, #24]	; (800151c <BSP_QSPI_Erase_Sector+0x84>)
 8001502:	f000 fb89 	bl	8001c18 <QSPI_AutoPollingMemReady>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <BSP_QSPI_Erase_Sector+0x78>
			MX25L32_SECTOR_ERASE_MAX_TIME) != QSPI_OK) {
		return QSPI_ERROR;
 800150c:	2301      	movs	r3, #1
 800150e:	e000      	b.n	8001512 <BSP_QSPI_Erase_Sector+0x7a>
	}

	return QSPI_OK;
 8001510:	2300      	movs	r3, #0
}
 8001512:	4618      	mov	r0, r3
 8001514:	3740      	adds	r7, #64	; 0x40
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	200003a4 	.word	0x200003a4

08001520 <BSP_QSPI_Erase_Block>:
/**
 * @brief  Erases the specified block of the QSPI memory.
 * @param  BlockAddress: Block address to erase
 * @retval QSPI memory status
 */
uint8_t BSP_QSPI_Erase_Block(uint32_t BlockAddress) {
 8001520:	b580      	push	{r7, lr}
 8001522:	b090      	sub	sp, #64	; 0x40
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
	QSPI_CommandTypeDef s_command;

	/* Initialize the erase command */
	s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8001528:	f44f 7380 	mov.w	r3, #256	; 0x100
 800152c:	623b      	str	r3, [r7, #32]
	s_command.Instruction = BLOCK_ERASE_64KB;
 800152e:	23d8      	movs	r3, #216	; 0xd8
 8001530:	60bb      	str	r3, [r7, #8]
	s_command.AddressMode = QSPI_ADDRESS_1_LINE;
 8001532:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001536:	627b      	str	r3, [r7, #36]	; 0x24
	s_command.AddressSize = QSPI_ADDRESS_24_BITS;
 8001538:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800153c:	617b      	str	r3, [r7, #20]
	s_command.Address = BlockAddress;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	60fb      	str	r3, [r7, #12]
	s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001542:	2300      	movs	r3, #0
 8001544:	62bb      	str	r3, [r7, #40]	; 0x28
	s_command.DataMode = QSPI_DATA_NONE;
 8001546:	2300      	movs	r3, #0
 8001548:	62fb      	str	r3, [r7, #44]	; 0x2c
	s_command.DummyCycles = 0;
 800154a:	2300      	movs	r3, #0
 800154c:	61fb      	str	r3, [r7, #28]
	s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 800154e:	2300      	movs	r3, #0
 8001550:	637b      	str	r3, [r7, #52]	; 0x34
	s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8001552:	2300      	movs	r3, #0
 8001554:	63bb      	str	r3, [r7, #56]	; 0x38
	s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8001556:	2300      	movs	r3, #0
 8001558:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Enable write operations */
	if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK) {
 800155a:	4812      	ldr	r0, [pc, #72]	; (80015a4 <BSP_QSPI_Erase_Block+0x84>)
 800155c:	f000 fb08 	bl	8001b70 <QSPI_WriteEnable>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <BSP_QSPI_Erase_Block+0x4a>
		return QSPI_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e017      	b.n	800159a <BSP_QSPI_Erase_Block+0x7a>
	}

	/* Send the command */
	if (HAL_QSPI_Command(&QSPIHandle, &s_command,
 800156a:	f107 0308 	add.w	r3, r7, #8
 800156e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001572:	4619      	mov	r1, r3
 8001574:	480b      	ldr	r0, [pc, #44]	; (80015a4 <BSP_QSPI_Erase_Block+0x84>)
 8001576:	f001 f951 	bl	800281c <HAL_QSPI_Command>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <BSP_QSPI_Erase_Block+0x64>
			HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
		return QSPI_ERROR;
 8001580:	2301      	movs	r3, #1
 8001582:	e00a      	b.n	800159a <BSP_QSPI_Erase_Block+0x7a>
	}

	/* Configure automatic polling mode to wait for end of erase */
	if (QSPI_AutoPollingMemReady(&QSPIHandle,
 8001584:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001588:	4806      	ldr	r0, [pc, #24]	; (80015a4 <BSP_QSPI_Erase_Block+0x84>)
 800158a:	f000 fb45 	bl	8001c18 <QSPI_AutoPollingMemReady>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <BSP_QSPI_Erase_Block+0x78>
			MX25L32_SECTOR_ERASE_MAX_TIME) != QSPI_OK) {
		return QSPI_ERROR;
 8001594:	2301      	movs	r3, #1
 8001596:	e000      	b.n	800159a <BSP_QSPI_Erase_Block+0x7a>
	}

	return QSPI_OK;
 8001598:	2300      	movs	r3, #0
}
 800159a:	4618      	mov	r0, r3
 800159c:	3740      	adds	r7, #64	; 0x40
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	200003a4 	.word	0x200003a4

080015a8 <BSP_QSPI_Erase_Chip>:

/**
 * @brief  Erases the entire QSPI memory.
 * @retval QSPI memory status
 */
uint8_t BSP_QSPI_Erase_Chip(void) {
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b08e      	sub	sp, #56	; 0x38
 80015ac:	af00      	add	r7, sp, #0
	QSPI_CommandTypeDef s_command;

	/* Initialize the erase command */
	s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80015ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015b2:	61bb      	str	r3, [r7, #24]
	s_command.Instruction = BULK_ERASE_CMD;
 80015b4:	23c7      	movs	r3, #199	; 0xc7
 80015b6:	603b      	str	r3, [r7, #0]
	s_command.AddressMode = QSPI_ADDRESS_NONE;
 80015b8:	2300      	movs	r3, #0
 80015ba:	61fb      	str	r3, [r7, #28]
	s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80015bc:	2300      	movs	r3, #0
 80015be:	623b      	str	r3, [r7, #32]
	s_command.DataMode = QSPI_DATA_NONE;
 80015c0:	2300      	movs	r3, #0
 80015c2:	627b      	str	r3, [r7, #36]	; 0x24
	s_command.DummyCycles = 0;
 80015c4:	2300      	movs	r3, #0
 80015c6:	617b      	str	r3, [r7, #20]
	s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 80015c8:	2300      	movs	r3, #0
 80015ca:	62fb      	str	r3, [r7, #44]	; 0x2c
	s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 80015cc:	2300      	movs	r3, #0
 80015ce:	633b      	str	r3, [r7, #48]	; 0x30
	s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 80015d0:	2300      	movs	r3, #0
 80015d2:	637b      	str	r3, [r7, #52]	; 0x34

	/* Enable write operations */
	if (QSPI_WriteEnable(&QSPIHandle) != QSPI_OK) {
 80015d4:	480c      	ldr	r0, [pc, #48]	; (8001608 <BSP_QSPI_Erase_Chip+0x60>)
 80015d6:	f000 facb 	bl	8001b70 <QSPI_WriteEnable>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <BSP_QSPI_Erase_Chip+0x3c>
		return QSPI_ERROR;
 80015e0:	2301      	movs	r3, #1
 80015e2:	e00c      	b.n	80015fe <BSP_QSPI_Erase_Chip+0x56>
	}

	/* Send the command */
	if (HAL_QSPI_Command(&QSPIHandle, &s_command,
 80015e4:	463b      	mov	r3, r7
 80015e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80015ea:	4619      	mov	r1, r3
 80015ec:	4806      	ldr	r0, [pc, #24]	; (8001608 <BSP_QSPI_Erase_Chip+0x60>)
 80015ee:	f001 f915 	bl	800281c <HAL_QSPI_Command>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <BSP_QSPI_Erase_Chip+0x54>
			HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
		return QSPI_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	e000      	b.n	80015fe <BSP_QSPI_Erase_Chip+0x56>
//	/* Configure automatic polling mode to wait for end of erase */
//	if (QSPI_AutoPollingMemReady(&QSPIHandle,
//			MX25L512_BULK_ERASE_MAX_TIME) != QSPI_OK) {
//		return QSPI_ERROR;
//	}
	return QSPI_OK;
 80015fc:	2300      	movs	r3, #0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3738      	adds	r7, #56	; 0x38
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	200003a4 	.word	0x200003a4

0800160c <BSP_QSPI_GetStatus>:

/**
 * @brief  Reads current status of the QSPI memory.
 * @retval QSPI memory status
 */
uint8_t BSP_QSPI_GetStatus(void) {
 800160c:	b580      	push	{r7, lr}
 800160e:	b090      	sub	sp, #64	; 0x40
 8001610:	af00      	add	r7, sp, #0
	QSPI_CommandTypeDef s_command;
	uint8_t reg;

	/* Initialize the read flag status register command */
	s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8001612:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001616:	623b      	str	r3, [r7, #32]
	s_command.Instruction = READ_STATUS_REG_CMD;
 8001618:	2305      	movs	r3, #5
 800161a:	60bb      	str	r3, [r7, #8]
	s_command.AddressMode = QSPI_ADDRESS_NONE;
 800161c:	2300      	movs	r3, #0
 800161e:	627b      	str	r3, [r7, #36]	; 0x24
	s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001620:	2300      	movs	r3, #0
 8001622:	62bb      	str	r3, [r7, #40]	; 0x28
	s_command.DataMode = QSPI_DATA_1_LINE;
 8001624:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001628:	62fb      	str	r3, [r7, #44]	; 0x2c
	s_command.DummyCycles = 0;
 800162a:	2300      	movs	r3, #0
 800162c:	61fb      	str	r3, [r7, #28]
	s_command.NbData = 1;
 800162e:	2301      	movs	r3, #1
 8001630:	633b      	str	r3, [r7, #48]	; 0x30
	s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 8001632:	2300      	movs	r3, #0
 8001634:	637b      	str	r3, [r7, #52]	; 0x34
	s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8001636:	2300      	movs	r3, #0
 8001638:	63bb      	str	r3, [r7, #56]	; 0x38
	s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 800163a:	2300      	movs	r3, #0
 800163c:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Configure the command */
	if (HAL_QSPI_Command(&QSPIHandle, &s_command,
 800163e:	f107 0308 	add.w	r3, r7, #8
 8001642:	f241 3288 	movw	r2, #5000	; 0x1388
 8001646:	4619      	mov	r1, r3
 8001648:	480f      	ldr	r0, [pc, #60]	; (8001688 <BSP_QSPI_GetStatus+0x7c>)
 800164a:	f001 f8e7 	bl	800281c <HAL_QSPI_Command>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <BSP_QSPI_GetStatus+0x4c>
			HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
		return QSPI_ERROR;
 8001654:	2301      	movs	r3, #1
 8001656:	e013      	b.n	8001680 <BSP_QSPI_GetStatus+0x74>
	}

	/* Reception of the data */
	if (HAL_QSPI_Receive(&QSPIHandle, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8001658:	1dfb      	adds	r3, r7, #7
 800165a:	f241 3288 	movw	r2, #5000	; 0x1388
 800165e:	4619      	mov	r1, r3
 8001660:	4809      	ldr	r0, [pc, #36]	; (8001688 <BSP_QSPI_GetStatus+0x7c>)
 8001662:	f001 f9cb 	bl	80029fc <HAL_QSPI_Receive>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <BSP_QSPI_GetStatus+0x64>
			!= HAL_OK) {
		return QSPI_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	e007      	b.n	8001680 <BSP_QSPI_GetStatus+0x74>
	}

	/* Check the value of the register*/
	if ((reg & MX25L32_SR_WIP) == 0) {
 8001670:	79fb      	ldrb	r3, [r7, #7]
 8001672:	f003 0301 	and.w	r3, r3, #1
 8001676:	2b00      	cmp	r3, #0
 8001678:	d101      	bne.n	800167e <BSP_QSPI_GetStatus+0x72>
		return QSPI_OK;
 800167a:	2300      	movs	r3, #0
 800167c:	e000      	b.n	8001680 <BSP_QSPI_GetStatus+0x74>
	} else {
		return QSPI_BUSY;
 800167e:	2302      	movs	r3, #2
	}
}
 8001680:	4618      	mov	r0, r3
 8001682:	3740      	adds	r7, #64	; 0x40
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	200003a4 	.word	0x200003a4

0800168c <QSPI_ResetMemory>:
/**
 * @brief  This function reset the QSPI memory.
 * @param  hqspi: QSPI handle
 * @retval None
 */
static uint8_t QSPI_ResetMemory(QSPI_HandleTypeDef *hqspi) {
 800168c:	b580      	push	{r7, lr}
 800168e:	b098      	sub	sp, #96	; 0x60
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
	QSPI_AutoPollingTypeDef s_config;
	uint8_t reg;

	/* Send command RESET command in QPI mode (QUAD I/Os) */
	/* Initialize the reset enable command */
	s_command.InstructionMode = QSPI_INSTRUCTION_4_LINES;
 8001694:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001698:	643b      	str	r3, [r7, #64]	; 0x40
	s_command.Instruction = RESET_ENABLE_CMD;
 800169a:	2366      	movs	r3, #102	; 0x66
 800169c:	62bb      	str	r3, [r7, #40]	; 0x28
	s_command.AddressMode = QSPI_ADDRESS_NONE;
 800169e:	2300      	movs	r3, #0
 80016a0:	647b      	str	r3, [r7, #68]	; 0x44
	s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80016a2:	2300      	movs	r3, #0
 80016a4:	64bb      	str	r3, [r7, #72]	; 0x48
	s_command.DataMode = QSPI_DATA_NONE;
 80016a6:	2300      	movs	r3, #0
 80016a8:	64fb      	str	r3, [r7, #76]	; 0x4c
	s_command.DummyCycles = 0;
 80016aa:	2300      	movs	r3, #0
 80016ac:	63fb      	str	r3, [r7, #60]	; 0x3c
	s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 80016ae:	2300      	movs	r3, #0
 80016b0:	657b      	str	r3, [r7, #84]	; 0x54
	s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 80016b2:	2300      	movs	r3, #0
 80016b4:	65bb      	str	r3, [r7, #88]	; 0x58
	s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 80016b6:	2300      	movs	r3, #0
 80016b8:	65fb      	str	r3, [r7, #92]	; 0x5c
	/* Send the command */
	if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 80016ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016be:	f241 3288 	movw	r2, #5000	; 0x1388
 80016c2:	4619      	mov	r1, r3
 80016c4:	6878      	ldr	r0, [r7, #4]
 80016c6:	f001 f8a9 	bl	800281c <HAL_QSPI_Command>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <QSPI_ResetMemory+0x48>
			!= HAL_OK) {
		return QSPI_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e0ff      	b.n	80018d4 <QSPI_ResetMemory+0x248>
	}
	/* Send the reset memory command */
	s_command.Instruction = RESET_MEMORY_CMD;
 80016d4:	2399      	movs	r3, #153	; 0x99
 80016d6:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 80016d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80016e0:	4619      	mov	r1, r3
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f001 f89a 	bl	800281c <HAL_QSPI_Command>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <QSPI_ResetMemory+0x66>
			!= HAL_OK) {
		return QSPI_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e0f0      	b.n	80018d4 <QSPI_ResetMemory+0x248>
	}

	/* Send command RESET command in SPI mode */
	/* Initialize the reset enable command */
	s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80016f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016f6:	643b      	str	r3, [r7, #64]	; 0x40
	s_command.Instruction = RESET_ENABLE_CMD;
 80016f8:	2366      	movs	r3, #102	; 0x66
 80016fa:	62bb      	str	r3, [r7, #40]	; 0x28
	/* Send the command */
	if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 80016fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001700:	f241 3288 	movw	r2, #5000	; 0x1388
 8001704:	4619      	mov	r1, r3
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	f001 f888 	bl	800281c <HAL_QSPI_Command>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <QSPI_ResetMemory+0x8a>
			!= HAL_OK) {
		return QSPI_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e0de      	b.n	80018d4 <QSPI_ResetMemory+0x248>
	}
	/* Send the reset memory command */
	s_command.Instruction = RESET_MEMORY_CMD;
 8001716:	2399      	movs	r3, #153	; 0x99
 8001718:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 800171a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800171e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001722:	4619      	mov	r1, r3
 8001724:	6878      	ldr	r0, [r7, #4]
 8001726:	f001 f879 	bl	800281c <HAL_QSPI_Command>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <QSPI_ResetMemory+0xa8>
			!= HAL_OK) {
		return QSPI_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	e0cf      	b.n	80018d4 <QSPI_ResetMemory+0x248>
	}

	/* After reset CMD, 1000ms requested if QSPI memory SWReset occured during full chip erase operation */
	HAL_Delay(1000);
 8001734:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001738:	f000 fbce 	bl	8001ed8 <HAL_Delay>

	/* Configure automatic polling mode to wait the WIP bit=0 */
	s_config.Match = 0;
 800173c:	2300      	movs	r3, #0
 800173e:	613b      	str	r3, [r7, #16]
	s_config.Mask = MX25L32_SR_WIP;
 8001740:	2301      	movs	r3, #1
 8001742:	617b      	str	r3, [r7, #20]
	s_config.MatchMode = QSPI_MATCH_MODE_AND;
 8001744:	2300      	movs	r3, #0
 8001746:	623b      	str	r3, [r7, #32]
	s_config.StatusBytesSize = 1;
 8001748:	2301      	movs	r3, #1
 800174a:	61fb      	str	r3, [r7, #28]
	s_config.Interval = 0x10;
 800174c:	2310      	movs	r3, #16
 800174e:	61bb      	str	r3, [r7, #24]
	s_config.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 8001750:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001754:	627b      	str	r3, [r7, #36]	; 0x24

	s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8001756:	f44f 7380 	mov.w	r3, #256	; 0x100
 800175a:	643b      	str	r3, [r7, #64]	; 0x40
	s_command.Instruction = READ_STATUS_REG_CMD;
 800175c:	2305      	movs	r3, #5
 800175e:	62bb      	str	r3, [r7, #40]	; 0x28
	s_command.DataMode = QSPI_DATA_1_LINE;
 8001760:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001764:	64fb      	str	r3, [r7, #76]	; 0x4c

	if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config,
 8001766:	f107 0210 	add.w	r2, r7, #16
 800176a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800176e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f001 f9df 	bl	8002b36 <HAL_QSPI_AutoPolling>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <QSPI_ResetMemory+0xf6>
			HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
		return QSPI_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e0a8      	b.n	80018d4 <QSPI_ResetMemory+0x248>
	}

	/* Initialize the reading of status register */
	s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8001782:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001786:	643b      	str	r3, [r7, #64]	; 0x40
	s_command.Instruction = READ_STATUS_REG_CMD;
 8001788:	2305      	movs	r3, #5
 800178a:	62bb      	str	r3, [r7, #40]	; 0x28
	s_command.AddressMode = QSPI_ADDRESS_NONE;
 800178c:	2300      	movs	r3, #0
 800178e:	647b      	str	r3, [r7, #68]	; 0x44
	s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001790:	2300      	movs	r3, #0
 8001792:	64bb      	str	r3, [r7, #72]	; 0x48
	s_command.DataMode = QSPI_DATA_1_LINE;
 8001794:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001798:	64fb      	str	r3, [r7, #76]	; 0x4c
	s_command.DummyCycles = 0;
 800179a:	2300      	movs	r3, #0
 800179c:	63fb      	str	r3, [r7, #60]	; 0x3c
	s_command.NbData = 1;
 800179e:	2301      	movs	r3, #1
 80017a0:	653b      	str	r3, [r7, #80]	; 0x50
	s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 80017a2:	2300      	movs	r3, #0
 80017a4:	657b      	str	r3, [r7, #84]	; 0x54
	s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 80017a6:	2300      	movs	r3, #0
 80017a8:	65bb      	str	r3, [r7, #88]	; 0x58
	s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 80017aa:	2300      	movs	r3, #0
 80017ac:	65fb      	str	r3, [r7, #92]	; 0x5c

	/* Configure the command */
	if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 80017ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80017b6:	4619      	mov	r1, r3
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	f001 f82f 	bl	800281c <HAL_QSPI_Command>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <QSPI_ResetMemory+0x13c>
			!= HAL_OK) {
		return QSPI_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	e085      	b.n	80018d4 <QSPI_ResetMemory+0x248>
	}

	/* Reception of the data */
	if (HAL_QSPI_Receive(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 80017c8:	f107 030f 	add.w	r3, r7, #15
 80017cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80017d0:	4619      	mov	r1, r3
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f001 f912 	bl	80029fc <HAL_QSPI_Receive>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <QSPI_ResetMemory+0x156>
			!= HAL_OK) {
		return QSPI_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e078      	b.n	80018d4 <QSPI_ResetMemory+0x248>
#ifdef DEBUG
//  DEBUG_PRINTF("Status Reg : %02x\r\n",reg);
#endif
	/* Enable write operations, command in 1 bit */
	/* Enable write operations */
	s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80017e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017e6:	643b      	str	r3, [r7, #64]	; 0x40
	s_command.Instruction = WRITE_ENABLE_CMD;
 80017e8:	2306      	movs	r3, #6
 80017ea:	62bb      	str	r3, [r7, #40]	; 0x28
	s_command.AddressMode = QSPI_ADDRESS_NONE;
 80017ec:	2300      	movs	r3, #0
 80017ee:	647b      	str	r3, [r7, #68]	; 0x44
	s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80017f0:	2300      	movs	r3, #0
 80017f2:	64bb      	str	r3, [r7, #72]	; 0x48
	s_command.DataMode = QSPI_DATA_NONE;
 80017f4:	2300      	movs	r3, #0
 80017f6:	64fb      	str	r3, [r7, #76]	; 0x4c
	s_command.DummyCycles = 0;
 80017f8:	2300      	movs	r3, #0
 80017fa:	63fb      	str	r3, [r7, #60]	; 0x3c
	s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 80017fc:	2300      	movs	r3, #0
 80017fe:	657b      	str	r3, [r7, #84]	; 0x54
	s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8001800:	2300      	movs	r3, #0
 8001802:	65bb      	str	r3, [r7, #88]	; 0x58
	s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8001804:	2300      	movs	r3, #0
 8001806:	65fb      	str	r3, [r7, #92]	; 0x5c

	if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8001808:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800180c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001810:	4619      	mov	r1, r3
 8001812:	6878      	ldr	r0, [r7, #4]
 8001814:	f001 f802 	bl	800281c <HAL_QSPI_Command>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <QSPI_ResetMemory+0x196>
			!= HAL_OK) {
		return QSPI_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e058      	b.n	80018d4 <QSPI_ResetMemory+0x248>
	}

	/* Configure automatic polling mode to wait for write enabling */
	s_config.Match = MX25L32_SR_WREN;
 8001822:	2302      	movs	r3, #2
 8001824:	613b      	str	r3, [r7, #16]
	s_config.Mask = MX25L32_SR_WREN;
 8001826:	2302      	movs	r3, #2
 8001828:	617b      	str	r3, [r7, #20]
	s_config.MatchMode = QSPI_MATCH_MODE_AND;
 800182a:	2300      	movs	r3, #0
 800182c:	623b      	str	r3, [r7, #32]
	s_config.StatusBytesSize = 1;
 800182e:	2301      	movs	r3, #1
 8001830:	61fb      	str	r3, [r7, #28]
	s_config.Interval = 0x10;
 8001832:	2310      	movs	r3, #16
 8001834:	61bb      	str	r3, [r7, #24]
	s_config.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 8001836:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800183a:	627b      	str	r3, [r7, #36]	; 0x24

	s_command.Instruction = READ_STATUS_REG_CMD;
 800183c:	2305      	movs	r3, #5
 800183e:	62bb      	str	r3, [r7, #40]	; 0x28
	s_command.DataMode = QSPI_DATA_1_LINE;
 8001840:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001844:	64fb      	str	r3, [r7, #76]	; 0x4c

	if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config,
 8001846:	f107 0210 	add.w	r2, r7, #16
 800184a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800184e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f001 f96f 	bl	8002b36 <HAL_QSPI_AutoPolling>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <QSPI_ResetMemory+0x1d6>
			HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
		return QSPI_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e038      	b.n	80018d4 <QSPI_ResetMemory+0x248>
	}

	/* Update the configuration register with new dummy cycles */
	s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8001862:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001866:	643b      	str	r3, [r7, #64]	; 0x40
	s_command.Instruction = WRITE_STATUS_CFG_REG_CMD;
 8001868:	2301      	movs	r3, #1
 800186a:	62bb      	str	r3, [r7, #40]	; 0x28
	s_command.AddressMode = QSPI_ADDRESS_NONE;
 800186c:	2300      	movs	r3, #0
 800186e:	647b      	str	r3, [r7, #68]	; 0x44
	s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001870:	2300      	movs	r3, #0
 8001872:	64bb      	str	r3, [r7, #72]	; 0x48
	s_command.DataMode = QSPI_DATA_1_LINE;
 8001874:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001878:	64fb      	str	r3, [r7, #76]	; 0x4c
	s_command.DummyCycles = 0;
 800187a:	2300      	movs	r3, #0
 800187c:	63fb      	str	r3, [r7, #60]	; 0x3c
	s_command.NbData = 1;
 800187e:	2301      	movs	r3, #1
 8001880:	653b      	str	r3, [r7, #80]	; 0x50
	s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 8001882:	2300      	movs	r3, #0
 8001884:	657b      	str	r3, [r7, #84]	; 0x54
	s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8001886:	2300      	movs	r3, #0
 8001888:	65bb      	str	r3, [r7, #88]	; 0x58
	s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 800188a:	2300      	movs	r3, #0
 800188c:	65fb      	str	r3, [r7, #92]	; 0x5c

	/* Enable the Quad IO on the QSPI memory (Non-volatile bit) */
	reg |= MX25L32_SR_QUADEN;
 800188e:	7bfb      	ldrb	r3, [r7, #15]
 8001890:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001894:	b2db      	uxtb	r3, r3
 8001896:	73fb      	strb	r3, [r7, #15]

	/* Configure the command */
	if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8001898:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800189c:	f241 3288 	movw	r2, #5000	; 0x1388
 80018a0:	4619      	mov	r1, r3
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f000 ffba 	bl	800281c <HAL_QSPI_Command>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <QSPI_ResetMemory+0x226>
			!= HAL_OK) {
		return QSPI_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e010      	b.n	80018d4 <QSPI_ResetMemory+0x248>
	}

	/* Transmission of the data */
	if (HAL_QSPI_Transmit(hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 80018b2:	f107 030f 	add.w	r3, r7, #15
 80018b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ba:	4619      	mov	r1, r3
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f001 f80b 	bl	80028d8 <HAL_QSPI_Transmit>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <QSPI_ResetMemory+0x240>
			!= HAL_OK) {
		return QSPI_ERROR;
 80018c8:	2301      	movs	r3, #1
 80018ca:	e003      	b.n	80018d4 <QSPI_ResetMemory+0x248>
	}

	/* 40ms  Write Status/Configuration Register Cycle Time */
	HAL_Delay(40);
 80018cc:	2028      	movs	r0, #40	; 0x28
 80018ce:	f000 fb03 	bl	8001ed8 <HAL_Delay>

	return QSPI_OK;
 80018d2:	2300      	movs	r3, #0
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3760      	adds	r7, #96	; 0x60
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}

080018dc <QSPI_EnterFourBytesAddress>:
/**
 * @brief  This function set the QSPI memory in 4-byte address mode
 * @param  hqspi: QSPI handle
 * @retval None
 */
static uint8_t QSPI_EnterFourBytesAddress(QSPI_HandleTypeDef *hqspi) {
 80018dc:	b580      	push	{r7, lr}
 80018de:	b090      	sub	sp, #64	; 0x40
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
	QSPI_CommandTypeDef s_command;

	/* Initialize the command */
	s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80018e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018e8:	623b      	str	r3, [r7, #32]
	s_command.Instruction = ENTER_4_BYTE_ADDR_MODE_CMD;
 80018ea:	23b7      	movs	r3, #183	; 0xb7
 80018ec:	60bb      	str	r3, [r7, #8]
	s_command.AddressMode = QSPI_ADDRESS_NONE;
 80018ee:	2300      	movs	r3, #0
 80018f0:	627b      	str	r3, [r7, #36]	; 0x24
	s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80018f2:	2300      	movs	r3, #0
 80018f4:	62bb      	str	r3, [r7, #40]	; 0x28
	s_command.DataMode = QSPI_DATA_NONE;
 80018f6:	2300      	movs	r3, #0
 80018f8:	62fb      	str	r3, [r7, #44]	; 0x2c
	s_command.DummyCycles = 0;
 80018fa:	2300      	movs	r3, #0
 80018fc:	61fb      	str	r3, [r7, #28]
	s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 80018fe:	2300      	movs	r3, #0
 8001900:	637b      	str	r3, [r7, #52]	; 0x34
	s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8001902:	2300      	movs	r3, #0
 8001904:	63bb      	str	r3, [r7, #56]	; 0x38
	s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8001906:	2300      	movs	r3, #0
 8001908:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Enable write operations */
	if (QSPI_WriteEnable(hqspi) != QSPI_OK) {
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	f000 f930 	bl	8001b70 <QSPI_WriteEnable>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <QSPI_EnterFourBytesAddress+0x3e>
		return QSPI_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e017      	b.n	800194a <QSPI_EnterFourBytesAddress+0x6e>
	}

	/* Send the command */
	if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 800191a:	f107 0308 	add.w	r3, r7, #8
 800191e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001922:	4619      	mov	r1, r3
 8001924:	6878      	ldr	r0, [r7, #4]
 8001926:	f000 ff79 	bl	800281c <HAL_QSPI_Command>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <QSPI_EnterFourBytesAddress+0x58>
			!= HAL_OK) {
		return QSPI_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	e00a      	b.n	800194a <QSPI_EnterFourBytesAddress+0x6e>
	}

	/* Configure automatic polling mode to wait the memory is ready */
	if (QSPI_AutoPollingMemReady(hqspi,
 8001934:	f241 3188 	movw	r1, #5000	; 0x1388
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	f000 f96d 	bl	8001c18 <QSPI_AutoPollingMemReady>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <QSPI_EnterFourBytesAddress+0x6c>
			HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK) {
		return QSPI_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	e000      	b.n	800194a <QSPI_EnterFourBytesAddress+0x6e>
	}

	return QSPI_OK;
 8001948:	2300      	movs	r3, #0
}
 800194a:	4618      	mov	r0, r3
 800194c:	3740      	adds	r7, #64	; 0x40
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}

08001952 <QSPI_DummyCyclesCfg>:
/**
 * @brief  This function configure the dummy cycles on memory side.
 * @param  hqspi: QSPI handle
 * @retval None
 */
static uint8_t QSPI_DummyCyclesCfg(QSPI_HandleTypeDef *hqspi) {
 8001952:	b580      	push	{r7, lr}
 8001954:	b094      	sub	sp, #80	; 0x50
 8001956:	af00      	add	r7, sp, #0
 8001958:	6078      	str	r0, [r7, #4]
	QSPI_CommandTypeDef s_command;
	uint8_t reg[2];

	/* Initialize the reading of status register */
	s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 800195a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800195e:	627b      	str	r3, [r7, #36]	; 0x24
	s_command.Instruction = READ_STATUS_REG_CMD;
 8001960:	2305      	movs	r3, #5
 8001962:	60fb      	str	r3, [r7, #12]
	s_command.AddressMode = QSPI_ADDRESS_NONE;
 8001964:	2300      	movs	r3, #0
 8001966:	62bb      	str	r3, [r7, #40]	; 0x28
	s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001968:	2300      	movs	r3, #0
 800196a:	62fb      	str	r3, [r7, #44]	; 0x2c
	s_command.DataMode = QSPI_DATA_1_LINE;
 800196c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001970:	633b      	str	r3, [r7, #48]	; 0x30
	s_command.DummyCycles = 0;
 8001972:	2300      	movs	r3, #0
 8001974:	623b      	str	r3, [r7, #32]
	s_command.NbData = 1;
 8001976:	2301      	movs	r3, #1
 8001978:	637b      	str	r3, [r7, #52]	; 0x34
	s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 800197a:	2300      	movs	r3, #0
 800197c:	63bb      	str	r3, [r7, #56]	; 0x38
	s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 800197e:	2300      	movs	r3, #0
 8001980:	63fb      	str	r3, [r7, #60]	; 0x3c
	s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8001982:	2300      	movs	r3, #0
 8001984:	643b      	str	r3, [r7, #64]	; 0x40

	/* Configure the command */
	if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8001986:	f107 030c 	add.w	r3, r7, #12
 800198a:	f241 3288 	movw	r2, #5000	; 0x1388
 800198e:	4619      	mov	r1, r3
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f000 ff43 	bl	800281c <HAL_QSPI_Command>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d001      	beq.n	80019a0 <QSPI_DummyCyclesCfg+0x4e>
			!= HAL_OK) {
		return QSPI_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	e097      	b.n	8001ad0 <QSPI_DummyCyclesCfg+0x17e>
	}

	/* Reception of the data */
	if (HAL_QSPI_Receive(hqspi, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 80019a0:	f107 0308 	add.w	r3, r7, #8
 80019a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80019a8:	4619      	mov	r1, r3
 80019aa:	6878      	ldr	r0, [r7, #4]
 80019ac:	f001 f826 	bl	80029fc <HAL_QSPI_Receive>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <QSPI_DummyCyclesCfg+0x68>
			!= HAL_OK) {
		return QSPI_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e08a      	b.n	8001ad0 <QSPI_DummyCyclesCfg+0x17e>
	}

	/* Initialize the reading of configuration register */
	s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80019ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019be:	627b      	str	r3, [r7, #36]	; 0x24
	s_command.Instruction = READ_CFG_REG_CMD;
 80019c0:	2315      	movs	r3, #21
 80019c2:	60fb      	str	r3, [r7, #12]
	s_command.AddressMode = QSPI_ADDRESS_NONE;
 80019c4:	2300      	movs	r3, #0
 80019c6:	62bb      	str	r3, [r7, #40]	; 0x28
	s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80019c8:	2300      	movs	r3, #0
 80019ca:	62fb      	str	r3, [r7, #44]	; 0x2c
	s_command.DataMode = QSPI_DATA_1_LINE;
 80019cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80019d0:	633b      	str	r3, [r7, #48]	; 0x30
	s_command.DummyCycles = 0;
 80019d2:	2300      	movs	r3, #0
 80019d4:	623b      	str	r3, [r7, #32]
	s_command.NbData = 1;
 80019d6:	2301      	movs	r3, #1
 80019d8:	637b      	str	r3, [r7, #52]	; 0x34
	s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 80019da:	2300      	movs	r3, #0
 80019dc:	63bb      	str	r3, [r7, #56]	; 0x38
	s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 80019de:	2300      	movs	r3, #0
 80019e0:	63fb      	str	r3, [r7, #60]	; 0x3c
	s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 80019e2:	2300      	movs	r3, #0
 80019e4:	643b      	str	r3, [r7, #64]	; 0x40

	/* Configure the command */
	if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 80019e6:	f107 030c 	add.w	r3, r7, #12
 80019ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80019ee:	4619      	mov	r1, r3
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f000 ff13 	bl	800281c <HAL_QSPI_Command>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d001      	beq.n	8001a00 <QSPI_DummyCyclesCfg+0xae>
			!= HAL_OK) {
		return QSPI_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e067      	b.n	8001ad0 <QSPI_DummyCyclesCfg+0x17e>
	}

	/* Reception of the data */
	if (HAL_QSPI_Receive(hqspi, &(reg[1]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8001a00:	f107 0308 	add.w	r3, r7, #8
 8001a04:	3301      	adds	r3, #1
 8001a06:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	f000 fff5 	bl	80029fc <HAL_QSPI_Receive>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <QSPI_DummyCyclesCfg+0xca>
			!= HAL_OK) {
		return QSPI_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e059      	b.n	8001ad0 <QSPI_DummyCyclesCfg+0x17e>
	}

	/* Enable write operations */
	if (QSPI_WriteEnable(hqspi) != QSPI_OK) {
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	f000 f8a7 	bl	8001b70 <QSPI_WriteEnable>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <QSPI_DummyCyclesCfg+0xda>
		return QSPI_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e051      	b.n	8001ad0 <QSPI_DummyCyclesCfg+0x17e>
	}

	/* Update the configuration register with new dummy cycles */
	s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8001a2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a30:	627b      	str	r3, [r7, #36]	; 0x24
	s_command.Instruction = WRITE_STATUS_CFG_REG_CMD;
 8001a32:	2301      	movs	r3, #1
 8001a34:	60fb      	str	r3, [r7, #12]
	s_command.AddressMode = QSPI_ADDRESS_NONE;
 8001a36:	2300      	movs	r3, #0
 8001a38:	62bb      	str	r3, [r7, #40]	; 0x28
	s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
	s_command.DataMode = QSPI_DATA_1_LINE;
 8001a3e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a42:	633b      	str	r3, [r7, #48]	; 0x30
	s_command.DummyCycles = 0;
 8001a44:	2300      	movs	r3, #0
 8001a46:	623b      	str	r3, [r7, #32]
	s_command.NbData = 2;
 8001a48:	2302      	movs	r3, #2
 8001a4a:	637b      	str	r3, [r7, #52]	; 0x34
	s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	63bb      	str	r3, [r7, #56]	; 0x38
	s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8001a50:	2300      	movs	r3, #0
 8001a52:	63fb      	str	r3, [r7, #60]	; 0x3c
	s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8001a54:	2300      	movs	r3, #0
 8001a56:	643b      	str	r3, [r7, #64]	; 0x40

	/* MX25L512_DUMMY_CYCLES_READ_QUAD = 3 for 10 cycles in QPI mode */
	MODIFY_REG(reg[1], MX25L32_CR_NB_DUMMY,
 8001a58:	7a7b      	ldrb	r3, [r7, #9]
 8001a5a:	b25b      	sxtb	r3, r3
 8001a5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a60:	b25a      	sxtb	r2, r3
 8001a62:	23c0      	movs	r3, #192	; 0xc0
 8001a64:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a68:	fa93 f3a3 	rbit	r3, r3
 8001a6c:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8001a6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a70:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (value == 0U)
 8001a72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d101      	bne.n	8001a7c <QSPI_DummyCyclesCfg+0x12a>
    return 32U;
 8001a78:	2320      	movs	r3, #32
 8001a7a:	e003      	b.n	8001a84 <QSPI_DummyCyclesCfg+0x132>
  return __builtin_clz(value);
 8001a7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a7e:	fab3 f383 	clz	r3, r3
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	4619      	mov	r1, r3
 8001a86:	2303      	movs	r3, #3
 8001a88:	408b      	lsls	r3, r1
 8001a8a:	b25b      	sxtb	r3, r3
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	b25b      	sxtb	r3, r3
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	727b      	strb	r3, [r7, #9]
			(MX25L32_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(MX25L32_CR_NB_DUMMY)));

	/* Configure the write volatile configuration register command */
	if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8001a94:	f107 030c 	add.w	r3, r7, #12
 8001a98:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f000 febc 	bl	800281c <HAL_QSPI_Command>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <QSPI_DummyCyclesCfg+0x15c>
			!= HAL_OK) {
		return QSPI_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e010      	b.n	8001ad0 <QSPI_DummyCyclesCfg+0x17e>
	}

	/* Transmission of the data */
	if (HAL_QSPI_Transmit(hqspi, &(reg[0]), HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8001aae:	f107 0308 	add.w	r3, r7, #8
 8001ab2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f000 ff0d 	bl	80028d8 <HAL_QSPI_Transmit>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d001      	beq.n	8001ac8 <QSPI_DummyCyclesCfg+0x176>
			!= HAL_OK) {
		return QSPI_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e003      	b.n	8001ad0 <QSPI_DummyCyclesCfg+0x17e>
	}

	/* 40ms  Write Status/Configuration Register Cycle Time */
	HAL_Delay(40);
 8001ac8:	2028      	movs	r0, #40	; 0x28
 8001aca:	f000 fa05 	bl	8001ed8 <HAL_Delay>

	return QSPI_OK;
 8001ace:	2300      	movs	r3, #0
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3750      	adds	r7, #80	; 0x50
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <QSPI_EnterMemory_QPI>:
/**
 * @brief  This function put QSPI memory in QPI mode (quad I/O).
 * @param  hqspi: QSPI handle
 * @retval None
 */
static uint8_t QSPI_EnterMemory_QPI(QSPI_HandleTypeDef *hqspi) {
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b096      	sub	sp, #88	; 0x58
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
	QSPI_CommandTypeDef s_command;
	QSPI_AutoPollingTypeDef s_config;

	/* Initialize the QPI enable command */
	/* QSPI memory is supported to be in SPI mode, so CMD on 1 LINE */
	s_command.InstructionMode = QSPI_INSTRUCTION_4_LINES;
 8001ae0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ae4:	63bb      	str	r3, [r7, #56]	; 0x38
	s_command.Instruction = ENTER_QUAD_CMD;
 8001ae6:	2335      	movs	r3, #53	; 0x35
 8001ae8:	623b      	str	r3, [r7, #32]
	s_command.AddressMode = QSPI_ADDRESS_NONE;
 8001aea:	2300      	movs	r3, #0
 8001aec:	63fb      	str	r3, [r7, #60]	; 0x3c
	s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001aee:	2300      	movs	r3, #0
 8001af0:	643b      	str	r3, [r7, #64]	; 0x40
	s_command.DataMode = QSPI_DATA_NONE;
 8001af2:	2300      	movs	r3, #0
 8001af4:	647b      	str	r3, [r7, #68]	; 0x44
	s_command.DummyCycles = 0;
 8001af6:	2300      	movs	r3, #0
 8001af8:	637b      	str	r3, [r7, #52]	; 0x34
	s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 8001afa:	2300      	movs	r3, #0
 8001afc:	64fb      	str	r3, [r7, #76]	; 0x4c
	s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8001afe:	2300      	movs	r3, #0
 8001b00:	653b      	str	r3, [r7, #80]	; 0x50
	s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8001b02:	2300      	movs	r3, #0
 8001b04:	657b      	str	r3, [r7, #84]	; 0x54

	/* Send the command */
	if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8001b06:	f107 0320 	add.w	r3, r7, #32
 8001b0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b0e:	4619      	mov	r1, r3
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f000 fe83 	bl	800281c <HAL_QSPI_Command>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d001      	beq.n	8001b20 <QSPI_EnterMemory_QPI+0x48>
			!= HAL_OK) {
		return QSPI_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e023      	b.n	8001b68 <QSPI_EnterMemory_QPI+0x90>
	}

	/* Configure automatic polling mode to wait the QUADEN bit=1 and WIP bit=0 */
	s_config.Match = MX25L32_SR_QUADEN;
 8001b20:	2340      	movs	r3, #64	; 0x40
 8001b22:	60bb      	str	r3, [r7, #8]
	s_config.Mask = MX25L32_SR_QUADEN | MX25L32_SR_WIP;
 8001b24:	2341      	movs	r3, #65	; 0x41
 8001b26:	60fb      	str	r3, [r7, #12]
	s_config.MatchMode = QSPI_MATCH_MODE_AND;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	61bb      	str	r3, [r7, #24]
	s_config.StatusBytesSize = 1;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	617b      	str	r3, [r7, #20]
	s_config.Interval = 0x10;
 8001b30:	2310      	movs	r3, #16
 8001b32:	613b      	str	r3, [r7, #16]
	s_config.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 8001b34:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b38:	61fb      	str	r3, [r7, #28]

	s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8001b3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b3e:	63bb      	str	r3, [r7, #56]	; 0x38
	s_command.Instruction = READ_STATUS_REG_CMD;
 8001b40:	2305      	movs	r3, #5
 8001b42:	623b      	str	r3, [r7, #32]
	s_command.DataMode = QSPI_DATA_1_LINE;
 8001b44:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b48:	647b      	str	r3, [r7, #68]	; 0x44

	if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config,
 8001b4a:	f107 0208 	add.w	r2, r7, #8
 8001b4e:	f107 0120 	add.w	r1, r7, #32
 8001b52:	f241 3388 	movw	r3, #5000	; 0x1388
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f000 ffed 	bl	8002b36 <HAL_QSPI_AutoPolling>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <QSPI_EnterMemory_QPI+0x8e>
			HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
		return QSPI_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e000      	b.n	8001b68 <QSPI_EnterMemory_QPI+0x90>
	}

	return QSPI_OK;
 8001b66:	2300      	movs	r3, #0
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3758      	adds	r7, #88	; 0x58
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <QSPI_WriteEnable>:
/**
 * @brief  This function send a Write Enable and wait it is effective.
 * @param  hqspi: QSPI handle
 * @retval None
 */
static uint8_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi) {
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b098      	sub	sp, #96	; 0x60
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
	QSPI_CommandTypeDef s_command;
	QSPI_AutoPollingTypeDef s_config;
	uint8_t ret = 0;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

	/* Enable write operations */
	s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8001b7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b82:	63fb      	str	r3, [r7, #60]	; 0x3c
	s_command.Instruction = WRITE_ENABLE_CMD;
 8001b84:	2306      	movs	r3, #6
 8001b86:	627b      	str	r3, [r7, #36]	; 0x24
	s_command.AddressMode = QSPI_ADDRESS_NONE;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	643b      	str	r3, [r7, #64]	; 0x40
	s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	647b      	str	r3, [r7, #68]	; 0x44
	s_command.DataMode = QSPI_DATA_NONE;
 8001b90:	2300      	movs	r3, #0
 8001b92:	64bb      	str	r3, [r7, #72]	; 0x48
	s_command.DummyCycles = 0;
 8001b94:	2300      	movs	r3, #0
 8001b96:	63bb      	str	r3, [r7, #56]	; 0x38
	s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	653b      	str	r3, [r7, #80]	; 0x50
	s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	657b      	str	r3, [r7, #84]	; 0x54
	s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	65bb      	str	r3, [r7, #88]	; 0x58

	if ((ret = HAL_QSPI_Command(hqspi, &s_command,
 8001ba4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ba8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bac:	4619      	mov	r1, r3
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f000 fe34 	bl	800281c <HAL_QSPI_Command>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8001bba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <QSPI_WriteEnable+0x56>
			HAL_QPSI_TIMEOUT_DEFAULT_VALUE)) != HAL_OK) {
		return QSPI_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e024      	b.n	8001c10 <QSPI_WriteEnable+0xa0>
	}

	/* Configure automatic polling mode to wait for write enabling */
	s_config.Match = 0x02;
 8001bc6:	2302      	movs	r3, #2
 8001bc8:	60fb      	str	r3, [r7, #12]
	s_config.Mask = 0x02;
 8001bca:	2302      	movs	r3, #2
 8001bcc:	613b      	str	r3, [r7, #16]
	s_config.MatchMode = QSPI_MATCH_MODE_AND;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	61fb      	str	r3, [r7, #28]
	s_config.StatusBytesSize = 1;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	61bb      	str	r3, [r7, #24]
	s_config.Interval = 0x10;
 8001bd6:	2310      	movs	r3, #16
 8001bd8:	617b      	str	r3, [r7, #20]
	s_config.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 8001bda:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001bde:	623b      	str	r3, [r7, #32]

	s_command.Instruction = READ_STATUS_REG_CMD;
 8001be0:	2305      	movs	r3, #5
 8001be2:	627b      	str	r3, [r7, #36]	; 0x24
	s_command.DataMode = QSPI_DATA_1_LINE;
 8001be4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001be8:	64bb      	str	r3, [r7, #72]	; 0x48

	if ((ret = HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config,
 8001bea:	f107 020c 	add.w	r2, r7, #12
 8001bee:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001bf2:	f241 3388 	movw	r3, #5000	; 0x1388
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f000 ff9d 	bl	8002b36 <HAL_QSPI_AutoPolling>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8001c02:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <QSPI_WriteEnable+0x9e>
			HAL_QPSI_TIMEOUT_DEFAULT_VALUE)) != HAL_OK) {
		return QSPI_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e000      	b.n	8001c10 <QSPI_WriteEnable+0xa0>
	}

	return QSPI_OK;
 8001c0e:	2300      	movs	r3, #0
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3760      	adds	r7, #96	; 0x60
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}

08001c18 <QSPI_AutoPollingMemReady>:
 * @param  hqspi: QSPI handle
 * @param  Timeout
 * @retval None
 */
static uint8_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi,
		uint32_t Timeout) {
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b096      	sub	sp, #88	; 0x58
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	6039      	str	r1, [r7, #0]
	QSPI_CommandTypeDef s_command;
	QSPI_AutoPollingTypeDef s_config;

	/* Configure automatic polling mode to wait for memory ready */
	s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8001c22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c26:	63bb      	str	r3, [r7, #56]	; 0x38
	s_command.Instruction = READ_STATUS_REG_CMD;
 8001c28:	2305      	movs	r3, #5
 8001c2a:	623b      	str	r3, [r7, #32]
	s_command.AddressMode = QSPI_ADDRESS_NONE;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
	s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001c30:	2300      	movs	r3, #0
 8001c32:	643b      	str	r3, [r7, #64]	; 0x40
	s_command.DataMode = QSPI_DATA_1_LINE;
 8001c34:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c38:	647b      	str	r3, [r7, #68]	; 0x44
	s_command.DummyCycles = 0;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	637b      	str	r3, [r7, #52]	; 0x34
	s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	64fb      	str	r3, [r7, #76]	; 0x4c
	s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8001c42:	2300      	movs	r3, #0
 8001c44:	653b      	str	r3, [r7, #80]	; 0x50
	s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8001c46:	2300      	movs	r3, #0
 8001c48:	657b      	str	r3, [r7, #84]	; 0x54

	s_config.Match = 0;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	60bb      	str	r3, [r7, #8]
	s_config.Mask = MX25L32_SR_WIP;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	60fb      	str	r3, [r7, #12]
	s_config.MatchMode = QSPI_MATCH_MODE_AND;
 8001c52:	2300      	movs	r3, #0
 8001c54:	61bb      	str	r3, [r7, #24]
	s_config.StatusBytesSize = 1;
 8001c56:	2301      	movs	r3, #1
 8001c58:	617b      	str	r3, [r7, #20]
	s_config.Interval = 0x10;
 8001c5a:	2310      	movs	r3, #16
 8001c5c:	613b      	str	r3, [r7, #16]
	s_config.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 8001c5e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c62:	61fb      	str	r3, [r7, #28]

	if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK) {
 8001c64:	f107 0208 	add.w	r2, r7, #8
 8001c68:	f107 0120 	add.w	r1, r7, #32
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f000 ff61 	bl	8002b36 <HAL_QSPI_AutoPolling>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <QSPI_AutoPollingMemReady+0x66>
		return QSPI_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e000      	b.n	8001c80 <QSPI_AutoPollingMemReady+0x68>
	}

	return QSPI_OK;
 8001c7e:	2300      	movs	r3, #0
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3758      	adds	r7, #88	; 0x58
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}

08001c88 <waitForFlashbusy>:

/**
 * @brief  this function chack the BUSY flash of flash.
 * @retval None
 */
uint8_t waitForFlashbusy(void) {
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
	uint32_t Tickstart = HAL_GetTick();
 8001c8e:	f000 f917 	bl	8001ec0 <HAL_GetTick>
 8001c92:	6078      	str	r0, [r7, #4]
	while (BSP_QSPI_GetStatus() == QSPI_BUSY) {
 8001c94:	e009      	b.n	8001caa <waitForFlashbusy+0x22>
		/* Check for the Timeout */
		if (FLASH_STATUSE_TIMEOUT != HAL_MAX_DELAY) {
			if (((HAL_GetTick() - Tickstart) > FLASH_STATUSE_TIMEOUT)
 8001c96:	f000 f913 	bl	8001ec0 <HAL_GetTick>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	4a07      	ldr	r2, [pc, #28]	; (8001cc0 <waitForFlashbusy+0x38>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d901      	bls.n	8001caa <waitForFlashbusy+0x22>
					|| (FLASH_STATUSE_TIMEOUT == 0U)) {

				return (QSPI_BUSY);
 8001ca6:	2302      	movs	r3, #2
 8001ca8:	e005      	b.n	8001cb6 <waitForFlashbusy+0x2e>
	while (BSP_QSPI_GetStatus() == QSPI_BUSY) {
 8001caa:	f7ff fcaf 	bl	800160c <BSP_QSPI_GetStatus>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	d0f0      	beq.n	8001c96 <waitForFlashbusy+0xe>
			}
		}
	}
	return (QSPI_OK);
 8001cb4:	2300      	movs	r3, #0
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	00030d40 	.word	0x00030d40

08001cc4 <Flash_Init>:
 * @brief  Function to initialize External Flash Memory
 * @param  None      
 * @retval BSP status
*/
uint32_t Flash_Init(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
    int32_t err_code = QSPI_OK;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	607b      	str	r3, [r7, #4]

    err_code = BSP_QSPI_Init();
 8001cce:	f7ff fa47 	bl	8001160 <BSP_QSPI_Init>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	607b      	str	r3, [r7, #4]
    if(err_code != QSPI_OK)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d002      	beq.n	8001ce2 <Flash_Init+0x1e>
    {
      printf("QSPI Flash Initialization failed\r\n");
 8001cdc:	4803      	ldr	r0, [pc, #12]	; (8001cec <Flash_Init+0x28>)
 8001cde:	f003 fa77 	bl	80051d0 <puts>
    }

    return err_code;
 8001ce2:	687b      	ldr	r3, [r7, #4]
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3708      	adds	r7, #8
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	08006298 	.word	0x08006298

08001cf0 <Flash_Erase>:
                                       QSPI_ERASE_LEN_ALL
 * @param  start_address  Start Address to Erase data
 * @retval BSP status
*/
uint32_t Flash_Erase(qspi_erase_len len,uint32_t start_address)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	6039      	str	r1, [r7, #0]
 8001cfa:	71fb      	strb	r3, [r7, #7]
    int32_t err_code = QSPI_OK;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	60fb      	str	r3, [r7, #12]

    switch (len)
 8001d00:	79fb      	ldrb	r3, [r7, #7]
 8001d02:	2b03      	cmp	r3, #3
 8001d04:	d01e      	beq.n	8001d44 <Flash_Erase+0x54>
 8001d06:	2b03      	cmp	r3, #3
 8001d08:	dc27      	bgt.n	8001d5a <Flash_Erase+0x6a>
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d002      	beq.n	8001d14 <Flash_Erase+0x24>
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	d00c      	beq.n	8001d2c <Flash_Erase+0x3c>
    		printf("FLASH : Erase failed\r\n");
    	}
    	break;

    default:
    	break;
 8001d12:	e022      	b.n	8001d5a <Flash_Erase+0x6a>
    	err_code = BSP_QSPI_Erase_Sector(start_address);
 8001d14:	6838      	ldr	r0, [r7, #0]
 8001d16:	f7ff fbbf 	bl	8001498 <BSP_QSPI_Erase_Sector>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	60fb      	str	r3, [r7, #12]
    	if(err_code != QSPI_OK)
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d01c      	beq.n	8001d5e <Flash_Erase+0x6e>
    		printf("Sector : Erase failed\r\n");
 8001d24:	4813      	ldr	r0, [pc, #76]	; (8001d74 <Flash_Erase+0x84>)
 8001d26:	f003 fa53 	bl	80051d0 <puts>
    	break;
 8001d2a:	e018      	b.n	8001d5e <Flash_Erase+0x6e>
    	err_code = BSP_QSPI_Erase_Block(start_address);
 8001d2c:	6838      	ldr	r0, [r7, #0]
 8001d2e:	f7ff fbf7 	bl	8001520 <BSP_QSPI_Erase_Block>
 8001d32:	4603      	mov	r3, r0
 8001d34:	60fb      	str	r3, [r7, #12]
    	if(err_code != QSPI_OK)
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d012      	beq.n	8001d62 <Flash_Erase+0x72>
    		printf("Block : Erase failed\r\n");
 8001d3c:	480e      	ldr	r0, [pc, #56]	; (8001d78 <Flash_Erase+0x88>)
 8001d3e:	f003 fa47 	bl	80051d0 <puts>
    	break;
 8001d42:	e00e      	b.n	8001d62 <Flash_Erase+0x72>
    	err_code = BSP_QSPI_Erase_Chip();
 8001d44:	f7ff fc30 	bl	80015a8 <BSP_QSPI_Erase_Chip>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	60fb      	str	r3, [r7, #12]
    	if(err_code != QSPI_OK)
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d009      	beq.n	8001d66 <Flash_Erase+0x76>
    		printf("FLASH : Erase failed\r\n");
 8001d52:	480a      	ldr	r0, [pc, #40]	; (8001d7c <Flash_Erase+0x8c>)
 8001d54:	f003 fa3c 	bl	80051d0 <puts>
    	break;
 8001d58:	e005      	b.n	8001d66 <Flash_Erase+0x76>
    	break;
 8001d5a:	bf00      	nop
 8001d5c:	e004      	b.n	8001d68 <Flash_Erase+0x78>
    	break;
 8001d5e:	bf00      	nop
 8001d60:	e002      	b.n	8001d68 <Flash_Erase+0x78>
    	break;
 8001d62:	bf00      	nop
 8001d64:	e000      	b.n	8001d68 <Flash_Erase+0x78>
    	break;
 8001d66:	bf00      	nop
    }

    return err_code;
 8001d68:	68fb      	ldr	r3, [r7, #12]
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3710      	adds	r7, #16
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	080062bc 	.word	0x080062bc
 8001d78:	080062d4 	.word	0x080062d4
 8001d7c:	080062ec 	.word	0x080062ec

08001d80 <Flash_Write>:
 * @param  tx_buffer_length   length of data to be written
 * @param  dst_address        Destination address to write data
 * @retval BSP status
*/
uint32_t Flash_Write(void * p_tx_buffer,size_t tx_buffer_length,uint32_t dst_address)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b086      	sub	sp, #24
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	60f8      	str	r0, [r7, #12]
 8001d88:	60b9      	str	r1, [r7, #8]
 8001d8a:	607a      	str	r2, [r7, #4]
    int32_t err_code = QSPI_OK;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	617b      	str	r3, [r7, #20]

    err_code = BSP_QSPI_Write(p_tx_buffer,dst_address,tx_buffer_length);
 8001d90:	68ba      	ldr	r2, [r7, #8]
 8001d92:	6879      	ldr	r1, [r7, #4]
 8001d94:	68f8      	ldr	r0, [r7, #12]
 8001d96:	f7ff fb01 	bl	800139c <BSP_QSPI_Write>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	617b      	str	r3, [r7, #20]
    if(err_code != QSPI_OK)
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d002      	beq.n	8001daa <Flash_Write+0x2a>
    {
       printf("FLASH : Flash write operation failed\r\n");
 8001da4:	4803      	ldr	r0, [pc, #12]	; (8001db4 <Flash_Write+0x34>)
 8001da6:	f003 fa13 	bl	80051d0 <puts>
    }

    return err_code;
 8001daa:	697b      	ldr	r3, [r7, #20]
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3718      	adds	r7, #24
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	08006304 	.word	0x08006304

08001db8 <Flash_Read>:
 * @param  rx_buffer_length   length of data to be read
 * @param  src_address        Source address to read data from 
 * @retval BSP status
*/
uint32_t Flash_Read(void * p_rx_buffer,size_t rx_buffer_length,uint32_t src_address)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b086      	sub	sp, #24
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	60f8      	str	r0, [r7, #12]
 8001dc0:	60b9      	str	r1, [r7, #8]
 8001dc2:	607a      	str	r2, [r7, #4]
    int32_t err_code = QSPI_OK;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	617b      	str	r3, [r7, #20]

    err_code = BSP_QSPI_Read(p_rx_buffer, src_address, rx_buffer_length);
 8001dc8:	68ba      	ldr	r2, [r7, #8]
 8001dca:	6879      	ldr	r1, [r7, #4]
 8001dcc:	68f8      	ldr	r0, [r7, #12]
 8001dce:	f7ff fa99 	bl	8001304 <BSP_QSPI_Read>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	617b      	str	r3, [r7, #20]
    if(err_code != QSPI_OK)
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d002      	beq.n	8001de2 <Flash_Read+0x2a>
    {
       printf("FLASH : Flash read operation failed\r\n");
 8001ddc:	4803      	ldr	r0, [pc, #12]	; (8001dec <Flash_Read+0x34>)
 8001dde:	f003 f9f7 	bl	80051d0 <puts>
    }
        
    return err_code;
 8001de2:	697b      	ldr	r3, [r7, #20]
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3718      	adds	r7, #24
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	0800632c 	.word	0x0800632c

08001df0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001df6:	2300      	movs	r3, #0
 8001df8:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dfa:	2003      	movs	r0, #3
 8001dfc:	f000 f942 	bl	8002084 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e00:	2000      	movs	r0, #0
 8001e02:	f000 f80d 	bl	8001e20 <HAL_InitTick>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d002      	beq.n	8001e12 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	71fb      	strb	r3, [r7, #7]
 8001e10:	e001      	b.n	8001e16 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e12:	f7fe fd99 	bl	8000948 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e16:	79fb      	ldrb	r3, [r7, #7]
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3708      	adds	r7, #8
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001e2c:	4b17      	ldr	r3, [pc, #92]	; (8001e8c <HAL_InitTick+0x6c>)
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d023      	beq.n	8001e7c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001e34:	4b16      	ldr	r3, [pc, #88]	; (8001e90 <HAL_InitTick+0x70>)
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	4b14      	ldr	r3, [pc, #80]	; (8001e8c <HAL_InitTick+0x6c>)
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e42:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f000 f941 	bl	80020d2 <HAL_SYSTICK_Config>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d10f      	bne.n	8001e76 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2b0f      	cmp	r3, #15
 8001e5a:	d809      	bhi.n	8001e70 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	6879      	ldr	r1, [r7, #4]
 8001e60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e64:	f000 f919 	bl	800209a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e68:	4a0a      	ldr	r2, [pc, #40]	; (8001e94 <HAL_InitTick+0x74>)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6013      	str	r3, [r2, #0]
 8001e6e:	e007      	b.n	8001e80 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	73fb      	strb	r3, [r7, #15]
 8001e74:	e004      	b.n	8001e80 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	73fb      	strb	r3, [r7, #15]
 8001e7a:	e001      	b.n	8001e80 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001e80:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3710      	adds	r7, #16
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	20000008 	.word	0x20000008
 8001e90:	20000000 	.word	0x20000000
 8001e94:	20000004 	.word	0x20000004

08001e98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e9c:	4b06      	ldr	r3, [pc, #24]	; (8001eb8 <HAL_IncTick+0x20>)
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	4b06      	ldr	r3, [pc, #24]	; (8001ebc <HAL_IncTick+0x24>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4413      	add	r3, r2
 8001ea8:	4a04      	ldr	r2, [pc, #16]	; (8001ebc <HAL_IncTick+0x24>)
 8001eaa:	6013      	str	r3, [r2, #0]
}
 8001eac:	bf00      	nop
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	20000008 	.word	0x20000008
 8001ebc:	200003f0 	.word	0x200003f0

08001ec0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ec4:	4b03      	ldr	r3, [pc, #12]	; (8001ed4 <HAL_GetTick+0x14>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	200003f0 	.word	0x200003f0

08001ed8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b084      	sub	sp, #16
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ee0:	f7ff ffee 	bl	8001ec0 <HAL_GetTick>
 8001ee4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ef0:	d005      	beq.n	8001efe <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001ef2:	4b0a      	ldr	r3, [pc, #40]	; (8001f1c <HAL_Delay+0x44>)
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	4413      	add	r3, r2
 8001efc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001efe:	bf00      	nop
 8001f00:	f7ff ffde 	bl	8001ec0 <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	68fa      	ldr	r2, [r7, #12]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d8f7      	bhi.n	8001f00 <HAL_Delay+0x28>
  {
  }
}
 8001f10:	bf00      	nop
 8001f12:	bf00      	nop
 8001f14:	3710      	adds	r7, #16
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	20000008 	.word	0x20000008

08001f20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b085      	sub	sp, #20
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	f003 0307 	and.w	r3, r3, #7
 8001f2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f30:	4b0c      	ldr	r3, [pc, #48]	; (8001f64 <__NVIC_SetPriorityGrouping+0x44>)
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f36:	68ba      	ldr	r2, [r7, #8]
 8001f38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f52:	4a04      	ldr	r2, [pc, #16]	; (8001f64 <__NVIC_SetPriorityGrouping+0x44>)
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	60d3      	str	r3, [r2, #12]
}
 8001f58:	bf00      	nop
 8001f5a:	3714      	adds	r7, #20
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr
 8001f64:	e000ed00 	.word	0xe000ed00

08001f68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f6c:	4b04      	ldr	r3, [pc, #16]	; (8001f80 <__NVIC_GetPriorityGrouping+0x18>)
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	0a1b      	lsrs	r3, r3, #8
 8001f72:	f003 0307 	and.w	r3, r3, #7
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr
 8001f80:	e000ed00 	.word	0xe000ed00

08001f84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	6039      	str	r1, [r7, #0]
 8001f8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	db0a      	blt.n	8001fae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	b2da      	uxtb	r2, r3
 8001f9c:	490c      	ldr	r1, [pc, #48]	; (8001fd0 <__NVIC_SetPriority+0x4c>)
 8001f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa2:	0112      	lsls	r2, r2, #4
 8001fa4:	b2d2      	uxtb	r2, r2
 8001fa6:	440b      	add	r3, r1
 8001fa8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fac:	e00a      	b.n	8001fc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	b2da      	uxtb	r2, r3
 8001fb2:	4908      	ldr	r1, [pc, #32]	; (8001fd4 <__NVIC_SetPriority+0x50>)
 8001fb4:	79fb      	ldrb	r3, [r7, #7]
 8001fb6:	f003 030f 	and.w	r3, r3, #15
 8001fba:	3b04      	subs	r3, #4
 8001fbc:	0112      	lsls	r2, r2, #4
 8001fbe:	b2d2      	uxtb	r2, r2
 8001fc0:	440b      	add	r3, r1
 8001fc2:	761a      	strb	r2, [r3, #24]
}
 8001fc4:	bf00      	nop
 8001fc6:	370c      	adds	r7, #12
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr
 8001fd0:	e000e100 	.word	0xe000e100
 8001fd4:	e000ed00 	.word	0xe000ed00

08001fd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b089      	sub	sp, #36	; 0x24
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	60f8      	str	r0, [r7, #12]
 8001fe0:	60b9      	str	r1, [r7, #8]
 8001fe2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	f003 0307 	and.w	r3, r3, #7
 8001fea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	f1c3 0307 	rsb	r3, r3, #7
 8001ff2:	2b04      	cmp	r3, #4
 8001ff4:	bf28      	it	cs
 8001ff6:	2304      	movcs	r3, #4
 8001ff8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	3304      	adds	r3, #4
 8001ffe:	2b06      	cmp	r3, #6
 8002000:	d902      	bls.n	8002008 <NVIC_EncodePriority+0x30>
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	3b03      	subs	r3, #3
 8002006:	e000      	b.n	800200a <NVIC_EncodePriority+0x32>
 8002008:	2300      	movs	r3, #0
 800200a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800200c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002010:	69bb      	ldr	r3, [r7, #24]
 8002012:	fa02 f303 	lsl.w	r3, r2, r3
 8002016:	43da      	mvns	r2, r3
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	401a      	ands	r2, r3
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002020:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	fa01 f303 	lsl.w	r3, r1, r3
 800202a:	43d9      	mvns	r1, r3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002030:	4313      	orrs	r3, r2
         );
}
 8002032:	4618      	mov	r0, r3
 8002034:	3724      	adds	r7, #36	; 0x24
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr
	...

08002040 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	3b01      	subs	r3, #1
 800204c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002050:	d301      	bcc.n	8002056 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002052:	2301      	movs	r3, #1
 8002054:	e00f      	b.n	8002076 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002056:	4a0a      	ldr	r2, [pc, #40]	; (8002080 <SysTick_Config+0x40>)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	3b01      	subs	r3, #1
 800205c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800205e:	210f      	movs	r1, #15
 8002060:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002064:	f7ff ff8e 	bl	8001f84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002068:	4b05      	ldr	r3, [pc, #20]	; (8002080 <SysTick_Config+0x40>)
 800206a:	2200      	movs	r2, #0
 800206c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800206e:	4b04      	ldr	r3, [pc, #16]	; (8002080 <SysTick_Config+0x40>)
 8002070:	2207      	movs	r2, #7
 8002072:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002074:	2300      	movs	r3, #0
}
 8002076:	4618      	mov	r0, r3
 8002078:	3708      	adds	r7, #8
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	e000e010 	.word	0xe000e010

08002084 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	f7ff ff47 	bl	8001f20 <__NVIC_SetPriorityGrouping>
}
 8002092:	bf00      	nop
 8002094:	3708      	adds	r7, #8
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}

0800209a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800209a:	b580      	push	{r7, lr}
 800209c:	b086      	sub	sp, #24
 800209e:	af00      	add	r7, sp, #0
 80020a0:	4603      	mov	r3, r0
 80020a2:	60b9      	str	r1, [r7, #8]
 80020a4:	607a      	str	r2, [r7, #4]
 80020a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80020a8:	2300      	movs	r3, #0
 80020aa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80020ac:	f7ff ff5c 	bl	8001f68 <__NVIC_GetPriorityGrouping>
 80020b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020b2:	687a      	ldr	r2, [r7, #4]
 80020b4:	68b9      	ldr	r1, [r7, #8]
 80020b6:	6978      	ldr	r0, [r7, #20]
 80020b8:	f7ff ff8e 	bl	8001fd8 <NVIC_EncodePriority>
 80020bc:	4602      	mov	r2, r0
 80020be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020c2:	4611      	mov	r1, r2
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7ff ff5d 	bl	8001f84 <__NVIC_SetPriority>
}
 80020ca:	bf00      	nop
 80020cc:	3718      	adds	r7, #24
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}

080020d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020d2:	b580      	push	{r7, lr}
 80020d4:	b082      	sub	sp, #8
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f7ff ffb0 	bl	8002040 <SysTick_Config>
 80020e0:	4603      	mov	r3, r0
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3708      	adds	r7, #8
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
	...

080020ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b087      	sub	sp, #28
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020f6:	2300      	movs	r3, #0
 80020f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020fa:	e166      	b.n	80023ca <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	2101      	movs	r1, #1
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	fa01 f303 	lsl.w	r3, r1, r3
 8002108:	4013      	ands	r3, r2
 800210a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	2b00      	cmp	r3, #0
 8002110:	f000 8158 	beq.w	80023c4 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f003 0303 	and.w	r3, r3, #3
 800211c:	2b01      	cmp	r3, #1
 800211e:	d005      	beq.n	800212c <HAL_GPIO_Init+0x40>
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f003 0303 	and.w	r3, r3, #3
 8002128:	2b02      	cmp	r3, #2
 800212a:	d130      	bne.n	800218e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	005b      	lsls	r3, r3, #1
 8002136:	2203      	movs	r2, #3
 8002138:	fa02 f303 	lsl.w	r3, r2, r3
 800213c:	43db      	mvns	r3, r3
 800213e:	693a      	ldr	r2, [r7, #16]
 8002140:	4013      	ands	r3, r2
 8002142:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	68da      	ldr	r2, [r3, #12]
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	005b      	lsls	r3, r3, #1
 800214c:	fa02 f303 	lsl.w	r3, r2, r3
 8002150:	693a      	ldr	r2, [r7, #16]
 8002152:	4313      	orrs	r3, r2
 8002154:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	693a      	ldr	r2, [r7, #16]
 800215a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002162:	2201      	movs	r2, #1
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	fa02 f303 	lsl.w	r3, r2, r3
 800216a:	43db      	mvns	r3, r3
 800216c:	693a      	ldr	r2, [r7, #16]
 800216e:	4013      	ands	r3, r2
 8002170:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	091b      	lsrs	r3, r3, #4
 8002178:	f003 0201 	and.w	r2, r3, #1
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	fa02 f303 	lsl.w	r3, r2, r3
 8002182:	693a      	ldr	r2, [r7, #16]
 8002184:	4313      	orrs	r3, r2
 8002186:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	693a      	ldr	r2, [r7, #16]
 800218c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	f003 0303 	and.w	r3, r3, #3
 8002196:	2b03      	cmp	r3, #3
 8002198:	d017      	beq.n	80021ca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	68db      	ldr	r3, [r3, #12]
 800219e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	005b      	lsls	r3, r3, #1
 80021a4:	2203      	movs	r2, #3
 80021a6:	fa02 f303 	lsl.w	r3, r2, r3
 80021aa:	43db      	mvns	r3, r3
 80021ac:	693a      	ldr	r2, [r7, #16]
 80021ae:	4013      	ands	r3, r2
 80021b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	689a      	ldr	r2, [r3, #8]
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	005b      	lsls	r3, r3, #1
 80021ba:	fa02 f303 	lsl.w	r3, r2, r3
 80021be:	693a      	ldr	r2, [r7, #16]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	693a      	ldr	r2, [r7, #16]
 80021c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	f003 0303 	and.w	r3, r3, #3
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d123      	bne.n	800221e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	08da      	lsrs	r2, r3, #3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	3208      	adds	r2, #8
 80021de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	f003 0307 	and.w	r3, r3, #7
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	220f      	movs	r2, #15
 80021ee:	fa02 f303 	lsl.w	r3, r2, r3
 80021f2:	43db      	mvns	r3, r3
 80021f4:	693a      	ldr	r2, [r7, #16]
 80021f6:	4013      	ands	r3, r2
 80021f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	691a      	ldr	r2, [r3, #16]
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	f003 0307 	and.w	r3, r3, #7
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	fa02 f303 	lsl.w	r3, r2, r3
 800220a:	693a      	ldr	r2, [r7, #16]
 800220c:	4313      	orrs	r3, r2
 800220e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	08da      	lsrs	r2, r3, #3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	3208      	adds	r2, #8
 8002218:	6939      	ldr	r1, [r7, #16]
 800221a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	005b      	lsls	r3, r3, #1
 8002228:	2203      	movs	r2, #3
 800222a:	fa02 f303 	lsl.w	r3, r2, r3
 800222e:	43db      	mvns	r3, r3
 8002230:	693a      	ldr	r2, [r7, #16]
 8002232:	4013      	ands	r3, r2
 8002234:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f003 0203 	and.w	r2, r3, #3
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	005b      	lsls	r3, r3, #1
 8002242:	fa02 f303 	lsl.w	r3, r2, r3
 8002246:	693a      	ldr	r2, [r7, #16]
 8002248:	4313      	orrs	r3, r2
 800224a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	693a      	ldr	r2, [r7, #16]
 8002250:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800225a:	2b00      	cmp	r3, #0
 800225c:	f000 80b2 	beq.w	80023c4 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002260:	4b61      	ldr	r3, [pc, #388]	; (80023e8 <HAL_GPIO_Init+0x2fc>)
 8002262:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002264:	4a60      	ldr	r2, [pc, #384]	; (80023e8 <HAL_GPIO_Init+0x2fc>)
 8002266:	f043 0301 	orr.w	r3, r3, #1
 800226a:	6613      	str	r3, [r2, #96]	; 0x60
 800226c:	4b5e      	ldr	r3, [pc, #376]	; (80023e8 <HAL_GPIO_Init+0x2fc>)
 800226e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002270:	f003 0301 	and.w	r3, r3, #1
 8002274:	60bb      	str	r3, [r7, #8]
 8002276:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002278:	4a5c      	ldr	r2, [pc, #368]	; (80023ec <HAL_GPIO_Init+0x300>)
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	089b      	lsrs	r3, r3, #2
 800227e:	3302      	adds	r3, #2
 8002280:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002284:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	f003 0303 	and.w	r3, r3, #3
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	220f      	movs	r2, #15
 8002290:	fa02 f303 	lsl.w	r3, r2, r3
 8002294:	43db      	mvns	r3, r3
 8002296:	693a      	ldr	r2, [r7, #16]
 8002298:	4013      	ands	r3, r2
 800229a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80022a2:	d02b      	beq.n	80022fc <HAL_GPIO_Init+0x210>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	4a52      	ldr	r2, [pc, #328]	; (80023f0 <HAL_GPIO_Init+0x304>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d025      	beq.n	80022f8 <HAL_GPIO_Init+0x20c>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	4a51      	ldr	r2, [pc, #324]	; (80023f4 <HAL_GPIO_Init+0x308>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d01f      	beq.n	80022f4 <HAL_GPIO_Init+0x208>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	4a50      	ldr	r2, [pc, #320]	; (80023f8 <HAL_GPIO_Init+0x30c>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d019      	beq.n	80022f0 <HAL_GPIO_Init+0x204>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	4a4f      	ldr	r2, [pc, #316]	; (80023fc <HAL_GPIO_Init+0x310>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d013      	beq.n	80022ec <HAL_GPIO_Init+0x200>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	4a4e      	ldr	r2, [pc, #312]	; (8002400 <HAL_GPIO_Init+0x314>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d00d      	beq.n	80022e8 <HAL_GPIO_Init+0x1fc>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	4a4d      	ldr	r2, [pc, #308]	; (8002404 <HAL_GPIO_Init+0x318>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d007      	beq.n	80022e4 <HAL_GPIO_Init+0x1f8>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	4a4c      	ldr	r2, [pc, #304]	; (8002408 <HAL_GPIO_Init+0x31c>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d101      	bne.n	80022e0 <HAL_GPIO_Init+0x1f4>
 80022dc:	2307      	movs	r3, #7
 80022de:	e00e      	b.n	80022fe <HAL_GPIO_Init+0x212>
 80022e0:	2308      	movs	r3, #8
 80022e2:	e00c      	b.n	80022fe <HAL_GPIO_Init+0x212>
 80022e4:	2306      	movs	r3, #6
 80022e6:	e00a      	b.n	80022fe <HAL_GPIO_Init+0x212>
 80022e8:	2305      	movs	r3, #5
 80022ea:	e008      	b.n	80022fe <HAL_GPIO_Init+0x212>
 80022ec:	2304      	movs	r3, #4
 80022ee:	e006      	b.n	80022fe <HAL_GPIO_Init+0x212>
 80022f0:	2303      	movs	r3, #3
 80022f2:	e004      	b.n	80022fe <HAL_GPIO_Init+0x212>
 80022f4:	2302      	movs	r3, #2
 80022f6:	e002      	b.n	80022fe <HAL_GPIO_Init+0x212>
 80022f8:	2301      	movs	r3, #1
 80022fa:	e000      	b.n	80022fe <HAL_GPIO_Init+0x212>
 80022fc:	2300      	movs	r3, #0
 80022fe:	697a      	ldr	r2, [r7, #20]
 8002300:	f002 0203 	and.w	r2, r2, #3
 8002304:	0092      	lsls	r2, r2, #2
 8002306:	4093      	lsls	r3, r2
 8002308:	693a      	ldr	r2, [r7, #16]
 800230a:	4313      	orrs	r3, r2
 800230c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800230e:	4937      	ldr	r1, [pc, #220]	; (80023ec <HAL_GPIO_Init+0x300>)
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	089b      	lsrs	r3, r3, #2
 8002314:	3302      	adds	r3, #2
 8002316:	693a      	ldr	r2, [r7, #16]
 8002318:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800231c:	4b3b      	ldr	r3, [pc, #236]	; (800240c <HAL_GPIO_Init+0x320>)
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	43db      	mvns	r3, r3
 8002326:	693a      	ldr	r2, [r7, #16]
 8002328:	4013      	ands	r3, r2
 800232a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002334:	2b00      	cmp	r3, #0
 8002336:	d003      	beq.n	8002340 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002338:	693a      	ldr	r2, [r7, #16]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	4313      	orrs	r3, r2
 800233e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002340:	4a32      	ldr	r2, [pc, #200]	; (800240c <HAL_GPIO_Init+0x320>)
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002346:	4b31      	ldr	r3, [pc, #196]	; (800240c <HAL_GPIO_Init+0x320>)
 8002348:	68db      	ldr	r3, [r3, #12]
 800234a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	43db      	mvns	r3, r3
 8002350:	693a      	ldr	r2, [r7, #16]
 8002352:	4013      	ands	r3, r2
 8002354:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d003      	beq.n	800236a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002362:	693a      	ldr	r2, [r7, #16]
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	4313      	orrs	r3, r2
 8002368:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800236a:	4a28      	ldr	r2, [pc, #160]	; (800240c <HAL_GPIO_Init+0x320>)
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002370:	4b26      	ldr	r3, [pc, #152]	; (800240c <HAL_GPIO_Init+0x320>)
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	43db      	mvns	r3, r3
 800237a:	693a      	ldr	r2, [r7, #16]
 800237c:	4013      	ands	r3, r2
 800237e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d003      	beq.n	8002394 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800238c:	693a      	ldr	r2, [r7, #16]
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	4313      	orrs	r3, r2
 8002392:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002394:	4a1d      	ldr	r2, [pc, #116]	; (800240c <HAL_GPIO_Init+0x320>)
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800239a:	4b1c      	ldr	r3, [pc, #112]	; (800240c <HAL_GPIO_Init+0x320>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	43db      	mvns	r3, r3
 80023a4:	693a      	ldr	r2, [r7, #16]
 80023a6:	4013      	ands	r3, r2
 80023a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d003      	beq.n	80023be <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80023b6:	693a      	ldr	r2, [r7, #16]
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80023be:	4a13      	ldr	r2, [pc, #76]	; (800240c <HAL_GPIO_Init+0x320>)
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	3301      	adds	r3, #1
 80023c8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	fa22 f303 	lsr.w	r3, r2, r3
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	f47f ae91 	bne.w	80020fc <HAL_GPIO_Init+0x10>
  }
}
 80023da:	bf00      	nop
 80023dc:	bf00      	nop
 80023de:	371c      	adds	r7, #28
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr
 80023e8:	40021000 	.word	0x40021000
 80023ec:	40010000 	.word	0x40010000
 80023f0:	48000400 	.word	0x48000400
 80023f4:	48000800 	.word	0x48000800
 80023f8:	48000c00 	.word	0x48000c00
 80023fc:	48001000 	.word	0x48001000
 8002400:	48001400 	.word	0x48001400
 8002404:	48001800 	.word	0x48001800
 8002408:	48001c00 	.word	0x48001c00
 800240c:	40010400 	.word	0x40010400

08002410 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002410:	b480      	push	{r7}
 8002412:	b087      	sub	sp, #28
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800241a:	2300      	movs	r3, #0
 800241c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800241e:	e0c9      	b.n	80025b4 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002420:	2201      	movs	r2, #1
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	fa02 f303 	lsl.w	r3, r2, r3
 8002428:	683a      	ldr	r2, [r7, #0]
 800242a:	4013      	ands	r3, r2
 800242c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	2b00      	cmp	r3, #0
 8002432:	f000 80bc 	beq.w	80025ae <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8002436:	4a66      	ldr	r2, [pc, #408]	; (80025d0 <HAL_GPIO_DeInit+0x1c0>)
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	089b      	lsrs	r3, r3, #2
 800243c:	3302      	adds	r3, #2
 800243e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002442:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	f003 0303 	and.w	r3, r3, #3
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	220f      	movs	r2, #15
 800244e:	fa02 f303 	lsl.w	r3, r2, r3
 8002452:	68fa      	ldr	r2, [r7, #12]
 8002454:	4013      	ands	r3, r2
 8002456:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800245e:	d02b      	beq.n	80024b8 <HAL_GPIO_DeInit+0xa8>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	4a5c      	ldr	r2, [pc, #368]	; (80025d4 <HAL_GPIO_DeInit+0x1c4>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d025      	beq.n	80024b4 <HAL_GPIO_DeInit+0xa4>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	4a5b      	ldr	r2, [pc, #364]	; (80025d8 <HAL_GPIO_DeInit+0x1c8>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d01f      	beq.n	80024b0 <HAL_GPIO_DeInit+0xa0>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	4a5a      	ldr	r2, [pc, #360]	; (80025dc <HAL_GPIO_DeInit+0x1cc>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d019      	beq.n	80024ac <HAL_GPIO_DeInit+0x9c>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	4a59      	ldr	r2, [pc, #356]	; (80025e0 <HAL_GPIO_DeInit+0x1d0>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d013      	beq.n	80024a8 <HAL_GPIO_DeInit+0x98>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	4a58      	ldr	r2, [pc, #352]	; (80025e4 <HAL_GPIO_DeInit+0x1d4>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d00d      	beq.n	80024a4 <HAL_GPIO_DeInit+0x94>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	4a57      	ldr	r2, [pc, #348]	; (80025e8 <HAL_GPIO_DeInit+0x1d8>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d007      	beq.n	80024a0 <HAL_GPIO_DeInit+0x90>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	4a56      	ldr	r2, [pc, #344]	; (80025ec <HAL_GPIO_DeInit+0x1dc>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d101      	bne.n	800249c <HAL_GPIO_DeInit+0x8c>
 8002498:	2307      	movs	r3, #7
 800249a:	e00e      	b.n	80024ba <HAL_GPIO_DeInit+0xaa>
 800249c:	2308      	movs	r3, #8
 800249e:	e00c      	b.n	80024ba <HAL_GPIO_DeInit+0xaa>
 80024a0:	2306      	movs	r3, #6
 80024a2:	e00a      	b.n	80024ba <HAL_GPIO_DeInit+0xaa>
 80024a4:	2305      	movs	r3, #5
 80024a6:	e008      	b.n	80024ba <HAL_GPIO_DeInit+0xaa>
 80024a8:	2304      	movs	r3, #4
 80024aa:	e006      	b.n	80024ba <HAL_GPIO_DeInit+0xaa>
 80024ac:	2303      	movs	r3, #3
 80024ae:	e004      	b.n	80024ba <HAL_GPIO_DeInit+0xaa>
 80024b0:	2302      	movs	r3, #2
 80024b2:	e002      	b.n	80024ba <HAL_GPIO_DeInit+0xaa>
 80024b4:	2301      	movs	r3, #1
 80024b6:	e000      	b.n	80024ba <HAL_GPIO_DeInit+0xaa>
 80024b8:	2300      	movs	r3, #0
 80024ba:	697a      	ldr	r2, [r7, #20]
 80024bc:	f002 0203 	and.w	r2, r2, #3
 80024c0:	0092      	lsls	r2, r2, #2
 80024c2:	4093      	lsls	r3, r2
 80024c4:	68fa      	ldr	r2, [r7, #12]
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d132      	bne.n	8002530 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80024ca:	4b49      	ldr	r3, [pc, #292]	; (80025f0 <HAL_GPIO_DeInit+0x1e0>)
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	43db      	mvns	r3, r3
 80024d2:	4947      	ldr	r1, [pc, #284]	; (80025f0 <HAL_GPIO_DeInit+0x1e0>)
 80024d4:	4013      	ands	r3, r2
 80024d6:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80024d8:	4b45      	ldr	r3, [pc, #276]	; (80025f0 <HAL_GPIO_DeInit+0x1e0>)
 80024da:	685a      	ldr	r2, [r3, #4]
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	43db      	mvns	r3, r3
 80024e0:	4943      	ldr	r1, [pc, #268]	; (80025f0 <HAL_GPIO_DeInit+0x1e0>)
 80024e2:	4013      	ands	r3, r2
 80024e4:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80024e6:	4b42      	ldr	r3, [pc, #264]	; (80025f0 <HAL_GPIO_DeInit+0x1e0>)
 80024e8:	68da      	ldr	r2, [r3, #12]
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	43db      	mvns	r3, r3
 80024ee:	4940      	ldr	r1, [pc, #256]	; (80025f0 <HAL_GPIO_DeInit+0x1e0>)
 80024f0:	4013      	ands	r3, r2
 80024f2:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 80024f4:	4b3e      	ldr	r3, [pc, #248]	; (80025f0 <HAL_GPIO_DeInit+0x1e0>)
 80024f6:	689a      	ldr	r2, [r3, #8]
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	43db      	mvns	r3, r3
 80024fc:	493c      	ldr	r1, [pc, #240]	; (80025f0 <HAL_GPIO_DeInit+0x1e0>)
 80024fe:	4013      	ands	r3, r2
 8002500:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	f003 0303 	and.w	r3, r3, #3
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	220f      	movs	r2, #15
 800250c:	fa02 f303 	lsl.w	r3, r2, r3
 8002510:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002512:	4a2f      	ldr	r2, [pc, #188]	; (80025d0 <HAL_GPIO_DeInit+0x1c0>)
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	089b      	lsrs	r3, r3, #2
 8002518:	3302      	adds	r3, #2
 800251a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	43da      	mvns	r2, r3
 8002522:	482b      	ldr	r0, [pc, #172]	; (80025d0 <HAL_GPIO_DeInit+0x1c0>)
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	089b      	lsrs	r3, r3, #2
 8002528:	400a      	ands	r2, r1
 800252a:	3302      	adds	r3, #2
 800252c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	005b      	lsls	r3, r3, #1
 8002538:	2103      	movs	r1, #3
 800253a:	fa01 f303 	lsl.w	r3, r1, r3
 800253e:	431a      	orrs	r2, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	08da      	lsrs	r2, r3, #3
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	3208      	adds	r2, #8
 800254c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	f003 0307 	and.w	r3, r3, #7
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	220f      	movs	r2, #15
 800255a:	fa02 f303 	lsl.w	r3, r2, r3
 800255e:	43db      	mvns	r3, r3
 8002560:	697a      	ldr	r2, [r7, #20]
 8002562:	08d2      	lsrs	r2, r2, #3
 8002564:	4019      	ands	r1, r3
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	3208      	adds	r2, #8
 800256a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	689a      	ldr	r2, [r3, #8]
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	005b      	lsls	r3, r3, #1
 8002576:	2103      	movs	r1, #3
 8002578:	fa01 f303 	lsl.w	r3, r1, r3
 800257c:	43db      	mvns	r3, r3
 800257e:	401a      	ands	r2, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	685a      	ldr	r2, [r3, #4]
 8002588:	2101      	movs	r1, #1
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	fa01 f303 	lsl.w	r3, r1, r3
 8002590:	43db      	mvns	r3, r3
 8002592:	401a      	ands	r2, r3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	68da      	ldr	r2, [r3, #12]
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	005b      	lsls	r3, r3, #1
 80025a0:	2103      	movs	r1, #3
 80025a2:	fa01 f303 	lsl.w	r3, r1, r3
 80025a6:	43db      	mvns	r3, r3
 80025a8:	401a      	ands	r2, r3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	3301      	adds	r3, #1
 80025b2:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80025b4:	683a      	ldr	r2, [r7, #0]
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	fa22 f303 	lsr.w	r3, r2, r3
 80025bc:	2b00      	cmp	r3, #0
 80025be:	f47f af2f 	bne.w	8002420 <HAL_GPIO_DeInit+0x10>
  }
}
 80025c2:	bf00      	nop
 80025c4:	bf00      	nop
 80025c6:	371c      	adds	r7, #28
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr
 80025d0:	40010000 	.word	0x40010000
 80025d4:	48000400 	.word	0x48000400
 80025d8:	48000800 	.word	0x48000800
 80025dc:	48000c00 	.word	0x48000c00
 80025e0:	48001000 	.word	0x48001000
 80025e4:	48001400 	.word	0x48001400
 80025e8:	48001800 	.word	0x48001800
 80025ec:	48001c00 	.word	0x48001c00
 80025f0:	40010400 	.word	0x40010400

080025f4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80025f8:	4b04      	ldr	r3, [pc, #16]	; (800260c <HAL_PWREx_GetVoltageRange+0x18>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002600:	4618      	mov	r0, r3
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	40007000 	.word	0x40007000

08002610 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002610:	b480      	push	{r7}
 8002612:	b085      	sub	sp, #20
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800261e:	d130      	bne.n	8002682 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002620:	4b23      	ldr	r3, [pc, #140]	; (80026b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002628:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800262c:	d038      	beq.n	80026a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800262e:	4b20      	ldr	r3, [pc, #128]	; (80026b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002636:	4a1e      	ldr	r2, [pc, #120]	; (80026b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002638:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800263c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800263e:	4b1d      	ldr	r3, [pc, #116]	; (80026b4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	2232      	movs	r2, #50	; 0x32
 8002644:	fb02 f303 	mul.w	r3, r2, r3
 8002648:	4a1b      	ldr	r2, [pc, #108]	; (80026b8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800264a:	fba2 2303 	umull	r2, r3, r2, r3
 800264e:	0c9b      	lsrs	r3, r3, #18
 8002650:	3301      	adds	r3, #1
 8002652:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002654:	e002      	b.n	800265c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	3b01      	subs	r3, #1
 800265a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800265c:	4b14      	ldr	r3, [pc, #80]	; (80026b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800265e:	695b      	ldr	r3, [r3, #20]
 8002660:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002664:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002668:	d102      	bne.n	8002670 <HAL_PWREx_ControlVoltageScaling+0x60>
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d1f2      	bne.n	8002656 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002670:	4b0f      	ldr	r3, [pc, #60]	; (80026b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002672:	695b      	ldr	r3, [r3, #20]
 8002674:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002678:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800267c:	d110      	bne.n	80026a0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e00f      	b.n	80026a2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002682:	4b0b      	ldr	r3, [pc, #44]	; (80026b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800268a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800268e:	d007      	beq.n	80026a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002690:	4b07      	ldr	r3, [pc, #28]	; (80026b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002698:	4a05      	ldr	r2, [pc, #20]	; (80026b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800269a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800269e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80026a0:	2300      	movs	r3, #0
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3714      	adds	r7, #20
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
 80026ae:	bf00      	nop
 80026b0:	40007000 	.word	0x40007000
 80026b4:	20000000 	.word	0x20000000
 80026b8:	431bde83 	.word	0x431bde83

080026bc <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80026bc:	b480      	push	{r7}
 80026be:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80026c0:	4b05      	ldr	r3, [pc, #20]	; (80026d8 <HAL_PWREx_EnableVddIO2+0x1c>)
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	4a04      	ldr	r2, [pc, #16]	; (80026d8 <HAL_PWREx_EnableVddIO2+0x1c>)
 80026c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026ca:	6053      	str	r3, [r2, #4]
}
 80026cc:	bf00      	nop
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr
 80026d6:	bf00      	nop
 80026d8:	40007000 	.word	0x40007000

080026dc <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b086      	sub	sp, #24
 80026e0:	af02      	add	r7, sp, #8
 80026e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80026e4:	f7ff fbec 	bl	8001ec0 <HAL_GetTick>
 80026e8:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d101      	bne.n	80026f4 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e069      	b.n	80027c8 <HAL_QSPI_Init+0xec>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d10b      	bne.n	8002718 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2200      	movs	r2, #0
 8002704:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f7fe f9a1 	bl	8000a50 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800270e:	f241 3188 	movw	r1, #5000	; 0x1388
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f000 fa86 	bl	8002c24 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	3b01      	subs	r3, #1
 8002728:	021a      	lsls	r2, r3, #8
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	430a      	orrs	r2, r1
 8002730:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002736:	9300      	str	r3, [sp, #0]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2200      	movs	r2, #0
 800273c:	2120      	movs	r1, #32
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f000 fa7e 	bl	8002c40 <QSPI_WaitFlagStateUntilTimeout>
 8002744:	4603      	mov	r3, r0
 8002746:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8002748:	7afb      	ldrb	r3, [r7, #11]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d137      	bne.n	80027be <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002758:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 800275c:	687a      	ldr	r2, [r7, #4]
 800275e:	6852      	ldr	r2, [r2, #4]
 8002760:	0611      	lsls	r1, r2, #24
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	68d2      	ldr	r2, [r2, #12]
 8002766:	4311      	orrs	r1, r2
 8002768:	687a      	ldr	r2, [r7, #4]
 800276a:	69d2      	ldr	r2, [r2, #28]
 800276c:	4311      	orrs	r1, r2
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	6a12      	ldr	r2, [r2, #32]
 8002772:	4311      	orrs	r1, r2
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	6812      	ldr	r2, [r2, #0]
 8002778:	430b      	orrs	r3, r1
 800277a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	685a      	ldr	r2, [r3, #4]
 8002782:	4b13      	ldr	r3, [pc, #76]	; (80027d0 <HAL_QSPI_Init+0xf4>)
 8002784:	4013      	ands	r3, r2
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	6912      	ldr	r2, [r2, #16]
 800278a:	0411      	lsls	r1, r2, #16
 800278c:	687a      	ldr	r2, [r7, #4]
 800278e:	6952      	ldr	r2, [r2, #20]
 8002790:	4311      	orrs	r1, r2
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	6992      	ldr	r2, [r2, #24]
 8002796:	4311      	orrs	r1, r2
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	6812      	ldr	r2, [r2, #0]
 800279c:	430b      	orrs	r3, r1
 800279e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f042 0201 	orr.w	r2, r2, #1
 80027ae:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2200      	movs	r2, #0
 80027b4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2201      	movs	r2, #1
 80027ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2200      	movs	r2, #0
 80027c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80027c6:	7afb      	ldrb	r3, [r7, #11]
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3710      	adds	r7, #16
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	ffe0f8fe 	.word	0xffe0f8fe

080027d4 <HAL_QSPI_DeInit>:
  * @brief De-Initialize the QSPI peripheral.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d101      	bne.n	80027e6 <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e016      	b.n	8002814 <HAL_QSPI_DeInit+0x40>
  }

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f022 0201 	bic.w	r2, r2, #1
 80027f4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hqspi->MspDeInitCallback(hqspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f7fe f99c 	bl	8000b34 <HAL_QSPI_MspDeInit>
#endif

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2200      	movs	r2, #0
 8002800:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2200      	movs	r2, #0
 8002806:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002812:	2300      	movs	r3, #0
}
 8002814:	4618      	mov	r0, r3
 8002816:	3708      	adds	r7, #8
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}

0800281c <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b088      	sub	sp, #32
 8002820:	af02      	add	r7, sp, #8
 8002822:	60f8      	str	r0, [r7, #12]
 8002824:	60b9      	str	r1, [r7, #8]
 8002826:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002828:	f7ff fb4a 	bl	8001ec0 <HAL_GetTick>
 800282c:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002834:	b2db      	uxtb	r3, r3
 8002836:	2b01      	cmp	r3, #1
 8002838:	d101      	bne.n	800283e <HAL_QSPI_Command+0x22>
 800283a:	2302      	movs	r3, #2
 800283c:	e048      	b.n	80028d0 <HAL_QSPI_Command+0xb4>
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2201      	movs	r2, #1
 8002842:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800284c:	b2db      	uxtb	r3, r3
 800284e:	2b01      	cmp	r3, #1
 8002850:	d137      	bne.n	80028c2 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2200      	movs	r2, #0
 8002856:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2202      	movs	r2, #2
 800285c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	9300      	str	r3, [sp, #0]
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	2200      	movs	r2, #0
 8002868:	2120      	movs	r1, #32
 800286a:	68f8      	ldr	r0, [r7, #12]
 800286c:	f000 f9e8 	bl	8002c40 <QSPI_WaitFlagStateUntilTimeout>
 8002870:	4603      	mov	r3, r0
 8002872:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8002874:	7dfb      	ldrb	r3, [r7, #23]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d125      	bne.n	80028c6 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800287a:	2200      	movs	r2, #0
 800287c:	68b9      	ldr	r1, [r7, #8]
 800287e:	68f8      	ldr	r0, [r7, #12]
 8002880:	f000 fa15 	bl	8002cae <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002888:	2b00      	cmp	r3, #0
 800288a:	d115      	bne.n	80028b8 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	9300      	str	r3, [sp, #0]
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	2201      	movs	r2, #1
 8002894:	2102      	movs	r1, #2
 8002896:	68f8      	ldr	r0, [r7, #12]
 8002898:	f000 f9d2 	bl	8002c40 <QSPI_WaitFlagStateUntilTimeout>
 800289c:	4603      	mov	r3, r0
 800289e:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 80028a0:	7dfb      	ldrb	r3, [r7, #23]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d10f      	bne.n	80028c6 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	2202      	movs	r2, #2
 80028ac:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2201      	movs	r2, #1
 80028b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80028b6:	e006      	b.n	80028c6 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2201      	movs	r2, #1
 80028bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80028c0:	e001      	b.n	80028c6 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 80028c2:	2302      	movs	r3, #2
 80028c4:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2200      	movs	r2, #0
 80028ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80028ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3718      	adds	r7, #24
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}

080028d8 <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b08a      	sub	sp, #40	; 0x28
 80028dc:	af02      	add	r7, sp, #8
 80028de:	60f8      	str	r0, [r7, #12]
 80028e0:	60b9      	str	r1, [r7, #8]
 80028e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028e4:	2300      	movs	r3, #0
 80028e6:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 80028e8:	f7ff faea 	bl	8001ec0 <HAL_GetTick>
 80028ec:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	3320      	adds	r3, #32
 80028f4:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d101      	bne.n	8002906 <HAL_QSPI_Transmit+0x2e>
 8002902:	2302      	movs	r3, #2
 8002904:	e076      	b.n	80029f4 <HAL_QSPI_Transmit+0x11c>
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2201      	movs	r2, #1
 800290a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002914:	b2db      	uxtb	r3, r3
 8002916:	2b01      	cmp	r3, #1
 8002918:	d165      	bne.n	80029e6 <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2200      	movs	r2, #0
 800291e:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d056      	beq.n	80029d4 <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2212      	movs	r2, #18
 800292a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	691b      	ldr	r3, [r3, #16]
 8002934:	1c5a      	adds	r2, r3, #1
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	691b      	ldr	r3, [r3, #16]
 8002940:	1c5a      	adds	r2, r3, #1
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	68ba      	ldr	r2, [r7, #8]
 800294a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	695a      	ldr	r2, [r3, #20]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800295a:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 800295c:	e01b      	b.n	8002996 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	9300      	str	r3, [sp, #0]
 8002962:	69bb      	ldr	r3, [r7, #24]
 8002964:	2201      	movs	r2, #1
 8002966:	2104      	movs	r1, #4
 8002968:	68f8      	ldr	r0, [r7, #12]
 800296a:	f000 f969 	bl	8002c40 <QSPI_WaitFlagStateUntilTimeout>
 800296e:	4603      	mov	r3, r0
 8002970:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8002972:	7ffb      	ldrb	r3, [r7, #31]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d113      	bne.n	80029a0 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800297c:	781a      	ldrb	r2, [r3, #0]
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002986:	1c5a      	adds	r2, r3, #1
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002990:	1e5a      	subs	r2, r3, #1
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800299a:	2b00      	cmp	r3, #0
 800299c:	d1df      	bne.n	800295e <HAL_QSPI_Transmit+0x86>
 800299e:	e000      	b.n	80029a2 <HAL_QSPI_Transmit+0xca>
          break;
 80029a0:	bf00      	nop
      }

      if (status == HAL_OK)
 80029a2:	7ffb      	ldrb	r3, [r7, #31]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d110      	bne.n	80029ca <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	9300      	str	r3, [sp, #0]
 80029ac:	69bb      	ldr	r3, [r7, #24]
 80029ae:	2201      	movs	r2, #1
 80029b0:	2102      	movs	r1, #2
 80029b2:	68f8      	ldr	r0, [r7, #12]
 80029b4:	f000 f944 	bl	8002c40 <QSPI_WaitFlagStateUntilTimeout>
 80029b8:	4603      	mov	r3, r0
 80029ba:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 80029bc:	7ffb      	ldrb	r3, [r7, #31]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d103      	bne.n	80029ca <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	2202      	movs	r2, #2
 80029c8:	60da      	str	r2, [r3, #12]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2201      	movs	r2, #1
 80029ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80029d2:	e00a      	b.n	80029ea <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029d8:	f043 0208 	orr.w	r2, r3, #8
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	77fb      	strb	r3, [r7, #31]
 80029e4:	e001      	b.n	80029ea <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
 80029e6:	2302      	movs	r3, #2
 80029e8:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2200      	movs	r2, #0
 80029ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 80029f2:	7ffb      	ldrb	r3, [r7, #31]
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3720      	adds	r7, #32
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}

080029fc <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b08a      	sub	sp, #40	; 0x28
 8002a00:	af02      	add	r7, sp, #8
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	60b9      	str	r1, [r7, #8]
 8002a06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8002a0c:	f7ff fa58 	bl	8001ec0 <HAL_GetTick>
 8002a10:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	699b      	ldr	r3, [r3, #24]
 8002a18:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	3320      	adds	r3, #32
 8002a20:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d101      	bne.n	8002a32 <HAL_QSPI_Receive+0x36>
 8002a2e:	2302      	movs	r3, #2
 8002a30:	e07d      	b.n	8002b2e <HAL_QSPI_Receive+0x132>
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2201      	movs	r2, #1
 8002a36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d16c      	bne.n	8002b20 <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d05d      	beq.n	8002b0e <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2222      	movs	r2, #34	; 0x22
 8002a56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	691b      	ldr	r3, [r3, #16]
 8002a60:	1c5a      	adds	r2, r3, #1
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	691b      	ldr	r3, [r3, #16]
 8002a6c:	1c5a      	adds	r2, r3, #1
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	68ba      	ldr	r2, [r7, #8]
 8002a76:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	695b      	ldr	r3, [r3, #20]
 8002a7e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002a8a:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	697a      	ldr	r2, [r7, #20]
 8002a92:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 8002a94:	e01c      	b.n	8002ad0 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	9300      	str	r3, [sp, #0]
 8002a9a:	69bb      	ldr	r3, [r7, #24]
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	2106      	movs	r1, #6
 8002aa0:	68f8      	ldr	r0, [r7, #12]
 8002aa2:	f000 f8cd 	bl	8002c40 <QSPI_WaitFlagStateUntilTimeout>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 8002aaa:	7ffb      	ldrb	r3, [r7, #31]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d114      	bne.n	8002ada <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab4:	693a      	ldr	r2, [r7, #16]
 8002ab6:	7812      	ldrb	r2, [r2, #0]
 8002ab8:	b2d2      	uxtb	r2, r2
 8002aba:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac0:	1c5a      	adds	r2, r3, #1
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aca:	1e5a      	subs	r2, r3, #1
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d1de      	bne.n	8002a96 <HAL_QSPI_Receive+0x9a>
 8002ad8:	e000      	b.n	8002adc <HAL_QSPI_Receive+0xe0>
          break;
 8002ada:	bf00      	nop
      }

      if (status == HAL_OK)
 8002adc:	7ffb      	ldrb	r3, [r7, #31]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d110      	bne.n	8002b04 <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	9300      	str	r3, [sp, #0]
 8002ae6:	69bb      	ldr	r3, [r7, #24]
 8002ae8:	2201      	movs	r2, #1
 8002aea:	2102      	movs	r1, #2
 8002aec:	68f8      	ldr	r0, [r7, #12]
 8002aee:	f000 f8a7 	bl	8002c40 <QSPI_WaitFlagStateUntilTimeout>
 8002af2:	4603      	mov	r3, r0
 8002af4:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 8002af6:	7ffb      	ldrb	r3, [r7, #31]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d103      	bne.n	8002b04 <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	2202      	movs	r2, #2
 8002b02:	60da      	str	r2, [r3, #12]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002b0c:	e00a      	b.n	8002b24 <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b12:	f043 0208 	orr.w	r2, r3, #8
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	77fb      	strb	r3, [r7, #31]
 8002b1e:	e001      	b.n	8002b24 <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
 8002b20:	2302      	movs	r3, #2
 8002b22:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2200      	movs	r2, #0
 8002b28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 8002b2c:	7ffb      	ldrb	r3, [r7, #31]
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3720      	adds	r7, #32
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}

08002b36 <HAL_QSPI_AutoPolling>:
  * @param  Timeout Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 8002b36:	b580      	push	{r7, lr}
 8002b38:	b088      	sub	sp, #32
 8002b3a:	af02      	add	r7, sp, #8
 8002b3c:	60f8      	str	r0, [r7, #12]
 8002b3e:	60b9      	str	r1, [r7, #8]
 8002b40:	607a      	str	r2, [r7, #4]
 8002b42:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002b44:	f7ff f9bc 	bl	8001ec0 <HAL_GetTick>
 8002b48:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d101      	bne.n	8002b5a <HAL_QSPI_AutoPolling+0x24>
 8002b56:	2302      	movs	r3, #2
 8002b58:	e060      	b.n	8002c1c <HAL_QSPI_AutoPolling+0xe6>
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d14f      	bne.n	8002c0e <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2200      	movs	r2, #0
 8002b72:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2242      	movs	r2, #66	; 0x42
 8002b78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	9300      	str	r3, [sp, #0]
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	2200      	movs	r2, #0
 8002b84:	2120      	movs	r1, #32
 8002b86:	68f8      	ldr	r0, [r7, #12]
 8002b88:	f000 f85a 	bl	8002c40 <QSPI_WaitFlagStateUntilTimeout>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8002b90:	7dfb      	ldrb	r3, [r7, #23]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d13d      	bne.n	8002c12 <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	6812      	ldr	r2, [r2, #0]
 8002b9e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	6852      	ldr	r2, [r2, #4]
 8002ba8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	6892      	ldr	r2, [r2, #8]
 8002bb2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	691b      	ldr	r3, [r3, #16]
 8002bc2:	431a      	orrs	r2, r3
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002bcc:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	68da      	ldr	r2, [r3, #12]
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8002bd6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002bda:	68b9      	ldr	r1, [r7, #8]
 8002bdc:	68f8      	ldr	r0, [r7, #12]
 8002bde:	f000 f866 	bl	8002cae <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	9300      	str	r3, [sp, #0]
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	2201      	movs	r2, #1
 8002bea:	2108      	movs	r1, #8
 8002bec:	68f8      	ldr	r0, [r7, #12]
 8002bee:	f000 f827 	bl	8002c40 <QSPI_WaitFlagStateUntilTimeout>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8002bf6:	7dfb      	ldrb	r3, [r7, #23]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d10a      	bne.n	8002c12 <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2208      	movs	r2, #8
 8002c02:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2201      	movs	r2, #1
 8002c08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002c0c:	e001      	b.n	8002c12 <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8002c0e:	2302      	movs	r3, #2
 8002c10:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2200      	movs	r2, #0
 8002c16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8002c1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3718      	adds	r7, #24
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}

08002c24 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	683a      	ldr	r2, [r7, #0]
 8002c32:	649a      	str	r2, [r3, #72]	; 0x48
}
 8002c34:	bf00      	nop
 8002c36:	370c      	adds	r7, #12
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr

08002c40 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	60f8      	str	r0, [r7, #12]
 8002c48:	60b9      	str	r1, [r7, #8]
 8002c4a:	603b      	str	r3, [r7, #0]
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002c50:	e01a      	b.n	8002c88 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c52:	69bb      	ldr	r3, [r7, #24]
 8002c54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c58:	d016      	beq.n	8002c88 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c5a:	f7ff f931 	bl	8001ec0 <HAL_GetTick>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	69ba      	ldr	r2, [r7, #24]
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d302      	bcc.n	8002c70 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8002c6a:	69bb      	ldr	r3, [r7, #24]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d10b      	bne.n	8002c88 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2204      	movs	r2, #4
 8002c74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c7c:	f043 0201 	orr.w	r2, r3, #1
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	e00e      	b.n	8002ca6 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	689a      	ldr	r2, [r3, #8]
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	4013      	ands	r3, r2
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	bf14      	ite	ne
 8002c96:	2301      	movne	r3, #1
 8002c98:	2300      	moveq	r3, #0
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	79fb      	ldrb	r3, [r7, #7]
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d1d6      	bne.n	8002c52 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ca4:	2300      	movs	r3, #0
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3710      	adds	r7, #16
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}

08002cae <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8002cae:	b480      	push	{r7}
 8002cb0:	b085      	sub	sp, #20
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	60f8      	str	r0, [r7, #12]
 8002cb6:	60b9      	str	r1, [r7, #8]
 8002cb8:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d009      	beq.n	8002cd6 <QSPI_Config+0x28>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8002cc8:	d005      	beq.n	8002cd6 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	3a01      	subs	r2, #1
 8002cd4:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	699b      	ldr	r3, [r3, #24]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	f000 80b9 	beq.w	8002e52 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	6a1b      	ldr	r3, [r3, #32]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d05f      	beq.n	8002da8 <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	68ba      	ldr	r2, [r7, #8]
 8002cee:	6892      	ldr	r2, [r2, #8]
 8002cf0:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	69db      	ldr	r3, [r3, #28]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d031      	beq.n	8002d5e <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d02:	431a      	orrs	r2, r3
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d08:	431a      	orrs	r2, r3
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0e:	431a      	orrs	r2, r3
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	695b      	ldr	r3, [r3, #20]
 8002d14:	049b      	lsls	r3, r3, #18
 8002d16:	431a      	orrs	r2, r3
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	691b      	ldr	r3, [r3, #16]
 8002d1c:	431a      	orrs	r2, r3
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	6a1b      	ldr	r3, [r3, #32]
 8002d22:	431a      	orrs	r2, r3
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	431a      	orrs	r2, r3
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	69db      	ldr	r3, [r3, #28]
 8002d2e:	431a      	orrs	r2, r3
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	699b      	ldr	r3, [r3, #24]
 8002d34:	431a      	orrs	r2, r3
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	ea42 0103 	orr.w	r1, r2, r3
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	430a      	orrs	r2, r1
 8002d46:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8002d4e:	f000 812e 	beq.w	8002fae <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	68ba      	ldr	r2, [r7, #8]
 8002d58:	6852      	ldr	r2, [r2, #4]
 8002d5a:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8002d5c:	e127      	b.n	8002fae <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d66:	431a      	orrs	r2, r3
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d6c:	431a      	orrs	r2, r3
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d72:	431a      	orrs	r2, r3
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	695b      	ldr	r3, [r3, #20]
 8002d78:	049b      	lsls	r3, r3, #18
 8002d7a:	431a      	orrs	r2, r3
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	691b      	ldr	r3, [r3, #16]
 8002d80:	431a      	orrs	r2, r3
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	6a1b      	ldr	r3, [r3, #32]
 8002d86:	431a      	orrs	r2, r3
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	69db      	ldr	r3, [r3, #28]
 8002d8c:	431a      	orrs	r2, r3
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	699b      	ldr	r3, [r3, #24]
 8002d92:	431a      	orrs	r2, r3
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	ea42 0103 	orr.w	r1, r2, r3
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	687a      	ldr	r2, [r7, #4]
 8002da2:	430a      	orrs	r2, r1
 8002da4:	615a      	str	r2, [r3, #20]
}
 8002da6:	e102      	b.n	8002fae <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	69db      	ldr	r3, [r3, #28]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d02e      	beq.n	8002e0e <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db8:	431a      	orrs	r2, r3
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dbe:	431a      	orrs	r2, r3
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc4:	431a      	orrs	r2, r3
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	695b      	ldr	r3, [r3, #20]
 8002dca:	049b      	lsls	r3, r3, #18
 8002dcc:	431a      	orrs	r2, r3
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	6a1b      	ldr	r3, [r3, #32]
 8002dd2:	431a      	orrs	r2, r3
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	431a      	orrs	r2, r3
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	69db      	ldr	r3, [r3, #28]
 8002dde:	431a      	orrs	r2, r3
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	699b      	ldr	r3, [r3, #24]
 8002de4:	431a      	orrs	r2, r3
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	ea42 0103 	orr.w	r1, r2, r3
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	430a      	orrs	r2, r1
 8002df6:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8002dfe:	f000 80d6 	beq.w	8002fae <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	68ba      	ldr	r2, [r7, #8]
 8002e08:	6852      	ldr	r2, [r2, #4]
 8002e0a:	619a      	str	r2, [r3, #24]
}
 8002e0c:	e0cf      	b.n	8002fae <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e16:	431a      	orrs	r2, r3
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e1c:	431a      	orrs	r2, r3
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e22:	431a      	orrs	r2, r3
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	695b      	ldr	r3, [r3, #20]
 8002e28:	049b      	lsls	r3, r3, #18
 8002e2a:	431a      	orrs	r2, r3
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	6a1b      	ldr	r3, [r3, #32]
 8002e30:	431a      	orrs	r2, r3
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	69db      	ldr	r3, [r3, #28]
 8002e36:	431a      	orrs	r2, r3
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	699b      	ldr	r3, [r3, #24]
 8002e3c:	431a      	orrs	r2, r3
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	ea42 0103 	orr.w	r1, r2, r3
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	430a      	orrs	r2, r1
 8002e4e:	615a      	str	r2, [r3, #20]
}
 8002e50:	e0ad      	b.n	8002fae <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	6a1b      	ldr	r3, [r3, #32]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d058      	beq.n	8002f0c <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	68ba      	ldr	r2, [r7, #8]
 8002e60:	6892      	ldr	r2, [r2, #8]
 8002e62:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	69db      	ldr	r3, [r3, #28]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d02d      	beq.n	8002ec8 <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e74:	431a      	orrs	r2, r3
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e7a:	431a      	orrs	r2, r3
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e80:	431a      	orrs	r2, r3
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	695b      	ldr	r3, [r3, #20]
 8002e86:	049b      	lsls	r3, r3, #18
 8002e88:	431a      	orrs	r2, r3
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	691b      	ldr	r3, [r3, #16]
 8002e8e:	431a      	orrs	r2, r3
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	6a1b      	ldr	r3, [r3, #32]
 8002e94:	431a      	orrs	r2, r3
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	431a      	orrs	r2, r3
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	69db      	ldr	r3, [r3, #28]
 8002ea0:	431a      	orrs	r2, r3
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	699b      	ldr	r3, [r3, #24]
 8002ea6:	ea42 0103 	orr.w	r1, r2, r3
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	430a      	orrs	r2, r1
 8002eb2:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8002eba:	d078      	beq.n	8002fae <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	68ba      	ldr	r2, [r7, #8]
 8002ec2:	6852      	ldr	r2, [r2, #4]
 8002ec4:	619a      	str	r2, [r3, #24]
}
 8002ec6:	e072      	b.n	8002fae <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed0:	431a      	orrs	r2, r3
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ed6:	431a      	orrs	r2, r3
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002edc:	431a      	orrs	r2, r3
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	695b      	ldr	r3, [r3, #20]
 8002ee2:	049b      	lsls	r3, r3, #18
 8002ee4:	431a      	orrs	r2, r3
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	691b      	ldr	r3, [r3, #16]
 8002eea:	431a      	orrs	r2, r3
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	6a1b      	ldr	r3, [r3, #32]
 8002ef0:	431a      	orrs	r2, r3
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	69db      	ldr	r3, [r3, #28]
 8002ef6:	431a      	orrs	r2, r3
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	699b      	ldr	r3, [r3, #24]
 8002efc:	ea42 0103 	orr.w	r1, r2, r3
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	687a      	ldr	r2, [r7, #4]
 8002f06:	430a      	orrs	r2, r1
 8002f08:	615a      	str	r2, [r3, #20]
}
 8002f0a:	e050      	b.n	8002fae <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	69db      	ldr	r3, [r3, #28]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d02a      	beq.n	8002f6a <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1c:	431a      	orrs	r2, r3
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f22:	431a      	orrs	r2, r3
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f28:	431a      	orrs	r2, r3
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	695b      	ldr	r3, [r3, #20]
 8002f2e:	049b      	lsls	r3, r3, #18
 8002f30:	431a      	orrs	r2, r3
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	6a1b      	ldr	r3, [r3, #32]
 8002f36:	431a      	orrs	r2, r3
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	431a      	orrs	r2, r3
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	69db      	ldr	r3, [r3, #28]
 8002f42:	431a      	orrs	r2, r3
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	699b      	ldr	r3, [r3, #24]
 8002f48:	ea42 0103 	orr.w	r1, r2, r3
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	687a      	ldr	r2, [r7, #4]
 8002f52:	430a      	orrs	r2, r1
 8002f54:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8002f5c:	d027      	beq.n	8002fae <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	68ba      	ldr	r2, [r7, #8]
 8002f64:	6852      	ldr	r2, [r2, #4]
 8002f66:	619a      	str	r2, [r3, #24]
}
 8002f68:	e021      	b.n	8002fae <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d01d      	beq.n	8002fae <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7a:	431a      	orrs	r2, r3
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f80:	431a      	orrs	r2, r3
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f86:	431a      	orrs	r2, r3
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	695b      	ldr	r3, [r3, #20]
 8002f8c:	049b      	lsls	r3, r3, #18
 8002f8e:	431a      	orrs	r2, r3
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	6a1b      	ldr	r3, [r3, #32]
 8002f94:	431a      	orrs	r2, r3
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	69db      	ldr	r3, [r3, #28]
 8002f9a:	431a      	orrs	r2, r3
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	699b      	ldr	r3, [r3, #24]
 8002fa0:	ea42 0103 	orr.w	r1, r2, r3
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	430a      	orrs	r2, r1
 8002fac:	615a      	str	r2, [r3, #20]
}
 8002fae:	bf00      	nop
 8002fb0:	3714      	adds	r7, #20
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr
	...

08002fbc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b088      	sub	sp, #32
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d102      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	f000 bc08 	b.w	80037e0 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fd0:	4b96      	ldr	r3, [pc, #600]	; (800322c <HAL_RCC_OscConfig+0x270>)
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	f003 030c 	and.w	r3, r3, #12
 8002fd8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fda:	4b94      	ldr	r3, [pc, #592]	; (800322c <HAL_RCC_OscConfig+0x270>)
 8002fdc:	68db      	ldr	r3, [r3, #12]
 8002fde:	f003 0303 	and.w	r3, r3, #3
 8002fe2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 0310 	and.w	r3, r3, #16
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	f000 80e4 	beq.w	80031ba <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002ff2:	69bb      	ldr	r3, [r7, #24]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d007      	beq.n	8003008 <HAL_RCC_OscConfig+0x4c>
 8002ff8:	69bb      	ldr	r3, [r7, #24]
 8002ffa:	2b0c      	cmp	r3, #12
 8002ffc:	f040 808b 	bne.w	8003116 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	2b01      	cmp	r3, #1
 8003004:	f040 8087 	bne.w	8003116 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003008:	4b88      	ldr	r3, [pc, #544]	; (800322c <HAL_RCC_OscConfig+0x270>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 0302 	and.w	r3, r3, #2
 8003010:	2b00      	cmp	r3, #0
 8003012:	d005      	beq.n	8003020 <HAL_RCC_OscConfig+0x64>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	699b      	ldr	r3, [r3, #24]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d101      	bne.n	8003020 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	e3df      	b.n	80037e0 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6a1a      	ldr	r2, [r3, #32]
 8003024:	4b81      	ldr	r3, [pc, #516]	; (800322c <HAL_RCC_OscConfig+0x270>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 0308 	and.w	r3, r3, #8
 800302c:	2b00      	cmp	r3, #0
 800302e:	d004      	beq.n	800303a <HAL_RCC_OscConfig+0x7e>
 8003030:	4b7e      	ldr	r3, [pc, #504]	; (800322c <HAL_RCC_OscConfig+0x270>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003038:	e005      	b.n	8003046 <HAL_RCC_OscConfig+0x8a>
 800303a:	4b7c      	ldr	r3, [pc, #496]	; (800322c <HAL_RCC_OscConfig+0x270>)
 800303c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003040:	091b      	lsrs	r3, r3, #4
 8003042:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003046:	4293      	cmp	r3, r2
 8003048:	d223      	bcs.n	8003092 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6a1b      	ldr	r3, [r3, #32]
 800304e:	4618      	mov	r0, r3
 8003050:	f000 fd92 	bl	8003b78 <RCC_SetFlashLatencyFromMSIRange>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d001      	beq.n	800305e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e3c0      	b.n	80037e0 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800305e:	4b73      	ldr	r3, [pc, #460]	; (800322c <HAL_RCC_OscConfig+0x270>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a72      	ldr	r2, [pc, #456]	; (800322c <HAL_RCC_OscConfig+0x270>)
 8003064:	f043 0308 	orr.w	r3, r3, #8
 8003068:	6013      	str	r3, [r2, #0]
 800306a:	4b70      	ldr	r3, [pc, #448]	; (800322c <HAL_RCC_OscConfig+0x270>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6a1b      	ldr	r3, [r3, #32]
 8003076:	496d      	ldr	r1, [pc, #436]	; (800322c <HAL_RCC_OscConfig+0x270>)
 8003078:	4313      	orrs	r3, r2
 800307a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800307c:	4b6b      	ldr	r3, [pc, #428]	; (800322c <HAL_RCC_OscConfig+0x270>)
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	69db      	ldr	r3, [r3, #28]
 8003088:	021b      	lsls	r3, r3, #8
 800308a:	4968      	ldr	r1, [pc, #416]	; (800322c <HAL_RCC_OscConfig+0x270>)
 800308c:	4313      	orrs	r3, r2
 800308e:	604b      	str	r3, [r1, #4]
 8003090:	e025      	b.n	80030de <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003092:	4b66      	ldr	r3, [pc, #408]	; (800322c <HAL_RCC_OscConfig+0x270>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a65      	ldr	r2, [pc, #404]	; (800322c <HAL_RCC_OscConfig+0x270>)
 8003098:	f043 0308 	orr.w	r3, r3, #8
 800309c:	6013      	str	r3, [r2, #0]
 800309e:	4b63      	ldr	r3, [pc, #396]	; (800322c <HAL_RCC_OscConfig+0x270>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6a1b      	ldr	r3, [r3, #32]
 80030aa:	4960      	ldr	r1, [pc, #384]	; (800322c <HAL_RCC_OscConfig+0x270>)
 80030ac:	4313      	orrs	r3, r2
 80030ae:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030b0:	4b5e      	ldr	r3, [pc, #376]	; (800322c <HAL_RCC_OscConfig+0x270>)
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	69db      	ldr	r3, [r3, #28]
 80030bc:	021b      	lsls	r3, r3, #8
 80030be:	495b      	ldr	r1, [pc, #364]	; (800322c <HAL_RCC_OscConfig+0x270>)
 80030c0:	4313      	orrs	r3, r2
 80030c2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80030c4:	69bb      	ldr	r3, [r7, #24]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d109      	bne.n	80030de <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6a1b      	ldr	r3, [r3, #32]
 80030ce:	4618      	mov	r0, r3
 80030d0:	f000 fd52 	bl	8003b78 <RCC_SetFlashLatencyFromMSIRange>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d001      	beq.n	80030de <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e380      	b.n	80037e0 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80030de:	f000 fc87 	bl	80039f0 <HAL_RCC_GetSysClockFreq>
 80030e2:	4602      	mov	r2, r0
 80030e4:	4b51      	ldr	r3, [pc, #324]	; (800322c <HAL_RCC_OscConfig+0x270>)
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	091b      	lsrs	r3, r3, #4
 80030ea:	f003 030f 	and.w	r3, r3, #15
 80030ee:	4950      	ldr	r1, [pc, #320]	; (8003230 <HAL_RCC_OscConfig+0x274>)
 80030f0:	5ccb      	ldrb	r3, [r1, r3]
 80030f2:	f003 031f 	and.w	r3, r3, #31
 80030f6:	fa22 f303 	lsr.w	r3, r2, r3
 80030fa:	4a4e      	ldr	r2, [pc, #312]	; (8003234 <HAL_RCC_OscConfig+0x278>)
 80030fc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80030fe:	4b4e      	ldr	r3, [pc, #312]	; (8003238 <HAL_RCC_OscConfig+0x27c>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4618      	mov	r0, r3
 8003104:	f7fe fe8c 	bl	8001e20 <HAL_InitTick>
 8003108:	4603      	mov	r3, r0
 800310a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800310c:	7bfb      	ldrb	r3, [r7, #15]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d052      	beq.n	80031b8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003112:	7bfb      	ldrb	r3, [r7, #15]
 8003114:	e364      	b.n	80037e0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	699b      	ldr	r3, [r3, #24]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d032      	beq.n	8003184 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800311e:	4b43      	ldr	r3, [pc, #268]	; (800322c <HAL_RCC_OscConfig+0x270>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a42      	ldr	r2, [pc, #264]	; (800322c <HAL_RCC_OscConfig+0x270>)
 8003124:	f043 0301 	orr.w	r3, r3, #1
 8003128:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800312a:	f7fe fec9 	bl	8001ec0 <HAL_GetTick>
 800312e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003130:	e008      	b.n	8003144 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003132:	f7fe fec5 	bl	8001ec0 <HAL_GetTick>
 8003136:	4602      	mov	r2, r0
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	2b02      	cmp	r3, #2
 800313e:	d901      	bls.n	8003144 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003140:	2303      	movs	r3, #3
 8003142:	e34d      	b.n	80037e0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003144:	4b39      	ldr	r3, [pc, #228]	; (800322c <HAL_RCC_OscConfig+0x270>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 0302 	and.w	r3, r3, #2
 800314c:	2b00      	cmp	r3, #0
 800314e:	d0f0      	beq.n	8003132 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003150:	4b36      	ldr	r3, [pc, #216]	; (800322c <HAL_RCC_OscConfig+0x270>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a35      	ldr	r2, [pc, #212]	; (800322c <HAL_RCC_OscConfig+0x270>)
 8003156:	f043 0308 	orr.w	r3, r3, #8
 800315a:	6013      	str	r3, [r2, #0]
 800315c:	4b33      	ldr	r3, [pc, #204]	; (800322c <HAL_RCC_OscConfig+0x270>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6a1b      	ldr	r3, [r3, #32]
 8003168:	4930      	ldr	r1, [pc, #192]	; (800322c <HAL_RCC_OscConfig+0x270>)
 800316a:	4313      	orrs	r3, r2
 800316c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800316e:	4b2f      	ldr	r3, [pc, #188]	; (800322c <HAL_RCC_OscConfig+0x270>)
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	69db      	ldr	r3, [r3, #28]
 800317a:	021b      	lsls	r3, r3, #8
 800317c:	492b      	ldr	r1, [pc, #172]	; (800322c <HAL_RCC_OscConfig+0x270>)
 800317e:	4313      	orrs	r3, r2
 8003180:	604b      	str	r3, [r1, #4]
 8003182:	e01a      	b.n	80031ba <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003184:	4b29      	ldr	r3, [pc, #164]	; (800322c <HAL_RCC_OscConfig+0x270>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a28      	ldr	r2, [pc, #160]	; (800322c <HAL_RCC_OscConfig+0x270>)
 800318a:	f023 0301 	bic.w	r3, r3, #1
 800318e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003190:	f7fe fe96 	bl	8001ec0 <HAL_GetTick>
 8003194:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003196:	e008      	b.n	80031aa <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003198:	f7fe fe92 	bl	8001ec0 <HAL_GetTick>
 800319c:	4602      	mov	r2, r0
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	2b02      	cmp	r3, #2
 80031a4:	d901      	bls.n	80031aa <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80031a6:	2303      	movs	r3, #3
 80031a8:	e31a      	b.n	80037e0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80031aa:	4b20      	ldr	r3, [pc, #128]	; (800322c <HAL_RCC_OscConfig+0x270>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0302 	and.w	r3, r3, #2
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d1f0      	bne.n	8003198 <HAL_RCC_OscConfig+0x1dc>
 80031b6:	e000      	b.n	80031ba <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80031b8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0301 	and.w	r3, r3, #1
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d073      	beq.n	80032ae <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80031c6:	69bb      	ldr	r3, [r7, #24]
 80031c8:	2b08      	cmp	r3, #8
 80031ca:	d005      	beq.n	80031d8 <HAL_RCC_OscConfig+0x21c>
 80031cc:	69bb      	ldr	r3, [r7, #24]
 80031ce:	2b0c      	cmp	r3, #12
 80031d0:	d10e      	bne.n	80031f0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	2b03      	cmp	r3, #3
 80031d6:	d10b      	bne.n	80031f0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031d8:	4b14      	ldr	r3, [pc, #80]	; (800322c <HAL_RCC_OscConfig+0x270>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d063      	beq.n	80032ac <HAL_RCC_OscConfig+0x2f0>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d15f      	bne.n	80032ac <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e2f7      	b.n	80037e0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031f8:	d106      	bne.n	8003208 <HAL_RCC_OscConfig+0x24c>
 80031fa:	4b0c      	ldr	r3, [pc, #48]	; (800322c <HAL_RCC_OscConfig+0x270>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a0b      	ldr	r2, [pc, #44]	; (800322c <HAL_RCC_OscConfig+0x270>)
 8003200:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003204:	6013      	str	r3, [r2, #0]
 8003206:	e025      	b.n	8003254 <HAL_RCC_OscConfig+0x298>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003210:	d114      	bne.n	800323c <HAL_RCC_OscConfig+0x280>
 8003212:	4b06      	ldr	r3, [pc, #24]	; (800322c <HAL_RCC_OscConfig+0x270>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a05      	ldr	r2, [pc, #20]	; (800322c <HAL_RCC_OscConfig+0x270>)
 8003218:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800321c:	6013      	str	r3, [r2, #0]
 800321e:	4b03      	ldr	r3, [pc, #12]	; (800322c <HAL_RCC_OscConfig+0x270>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a02      	ldr	r2, [pc, #8]	; (800322c <HAL_RCC_OscConfig+0x270>)
 8003224:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003228:	6013      	str	r3, [r2, #0]
 800322a:	e013      	b.n	8003254 <HAL_RCC_OscConfig+0x298>
 800322c:	40021000 	.word	0x40021000
 8003230:	08006354 	.word	0x08006354
 8003234:	20000000 	.word	0x20000000
 8003238:	20000004 	.word	0x20000004
 800323c:	4ba0      	ldr	r3, [pc, #640]	; (80034c0 <HAL_RCC_OscConfig+0x504>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a9f      	ldr	r2, [pc, #636]	; (80034c0 <HAL_RCC_OscConfig+0x504>)
 8003242:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003246:	6013      	str	r3, [r2, #0]
 8003248:	4b9d      	ldr	r3, [pc, #628]	; (80034c0 <HAL_RCC_OscConfig+0x504>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a9c      	ldr	r2, [pc, #624]	; (80034c0 <HAL_RCC_OscConfig+0x504>)
 800324e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003252:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d013      	beq.n	8003284 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800325c:	f7fe fe30 	bl	8001ec0 <HAL_GetTick>
 8003260:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003262:	e008      	b.n	8003276 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003264:	f7fe fe2c 	bl	8001ec0 <HAL_GetTick>
 8003268:	4602      	mov	r2, r0
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	2b64      	cmp	r3, #100	; 0x64
 8003270:	d901      	bls.n	8003276 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	e2b4      	b.n	80037e0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003276:	4b92      	ldr	r3, [pc, #584]	; (80034c0 <HAL_RCC_OscConfig+0x504>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d0f0      	beq.n	8003264 <HAL_RCC_OscConfig+0x2a8>
 8003282:	e014      	b.n	80032ae <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003284:	f7fe fe1c 	bl	8001ec0 <HAL_GetTick>
 8003288:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800328a:	e008      	b.n	800329e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800328c:	f7fe fe18 	bl	8001ec0 <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	2b64      	cmp	r3, #100	; 0x64
 8003298:	d901      	bls.n	800329e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e2a0      	b.n	80037e0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800329e:	4b88      	ldr	r3, [pc, #544]	; (80034c0 <HAL_RCC_OscConfig+0x504>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d1f0      	bne.n	800328c <HAL_RCC_OscConfig+0x2d0>
 80032aa:	e000      	b.n	80032ae <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0302 	and.w	r3, r3, #2
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d060      	beq.n	800337c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80032ba:	69bb      	ldr	r3, [r7, #24]
 80032bc:	2b04      	cmp	r3, #4
 80032be:	d005      	beq.n	80032cc <HAL_RCC_OscConfig+0x310>
 80032c0:	69bb      	ldr	r3, [r7, #24]
 80032c2:	2b0c      	cmp	r3, #12
 80032c4:	d119      	bne.n	80032fa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	2b02      	cmp	r3, #2
 80032ca:	d116      	bne.n	80032fa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032cc:	4b7c      	ldr	r3, [pc, #496]	; (80034c0 <HAL_RCC_OscConfig+0x504>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d005      	beq.n	80032e4 <HAL_RCC_OscConfig+0x328>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d101      	bne.n	80032e4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e27d      	b.n	80037e0 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032e4:	4b76      	ldr	r3, [pc, #472]	; (80034c0 <HAL_RCC_OscConfig+0x504>)
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	691b      	ldr	r3, [r3, #16]
 80032f0:	061b      	lsls	r3, r3, #24
 80032f2:	4973      	ldr	r1, [pc, #460]	; (80034c0 <HAL_RCC_OscConfig+0x504>)
 80032f4:	4313      	orrs	r3, r2
 80032f6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032f8:	e040      	b.n	800337c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	68db      	ldr	r3, [r3, #12]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d023      	beq.n	800334a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003302:	4b6f      	ldr	r3, [pc, #444]	; (80034c0 <HAL_RCC_OscConfig+0x504>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a6e      	ldr	r2, [pc, #440]	; (80034c0 <HAL_RCC_OscConfig+0x504>)
 8003308:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800330c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800330e:	f7fe fdd7 	bl	8001ec0 <HAL_GetTick>
 8003312:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003314:	e008      	b.n	8003328 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003316:	f7fe fdd3 	bl	8001ec0 <HAL_GetTick>
 800331a:	4602      	mov	r2, r0
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	1ad3      	subs	r3, r2, r3
 8003320:	2b02      	cmp	r3, #2
 8003322:	d901      	bls.n	8003328 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003324:	2303      	movs	r3, #3
 8003326:	e25b      	b.n	80037e0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003328:	4b65      	ldr	r3, [pc, #404]	; (80034c0 <HAL_RCC_OscConfig+0x504>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003330:	2b00      	cmp	r3, #0
 8003332:	d0f0      	beq.n	8003316 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003334:	4b62      	ldr	r3, [pc, #392]	; (80034c0 <HAL_RCC_OscConfig+0x504>)
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	691b      	ldr	r3, [r3, #16]
 8003340:	061b      	lsls	r3, r3, #24
 8003342:	495f      	ldr	r1, [pc, #380]	; (80034c0 <HAL_RCC_OscConfig+0x504>)
 8003344:	4313      	orrs	r3, r2
 8003346:	604b      	str	r3, [r1, #4]
 8003348:	e018      	b.n	800337c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800334a:	4b5d      	ldr	r3, [pc, #372]	; (80034c0 <HAL_RCC_OscConfig+0x504>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a5c      	ldr	r2, [pc, #368]	; (80034c0 <HAL_RCC_OscConfig+0x504>)
 8003350:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003354:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003356:	f7fe fdb3 	bl	8001ec0 <HAL_GetTick>
 800335a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800335c:	e008      	b.n	8003370 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800335e:	f7fe fdaf 	bl	8001ec0 <HAL_GetTick>
 8003362:	4602      	mov	r2, r0
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	1ad3      	subs	r3, r2, r3
 8003368:	2b02      	cmp	r3, #2
 800336a:	d901      	bls.n	8003370 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800336c:	2303      	movs	r3, #3
 800336e:	e237      	b.n	80037e0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003370:	4b53      	ldr	r3, [pc, #332]	; (80034c0 <HAL_RCC_OscConfig+0x504>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003378:	2b00      	cmp	r3, #0
 800337a:	d1f0      	bne.n	800335e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 0308 	and.w	r3, r3, #8
 8003384:	2b00      	cmp	r3, #0
 8003386:	d03c      	beq.n	8003402 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	695b      	ldr	r3, [r3, #20]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d01c      	beq.n	80033ca <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003390:	4b4b      	ldr	r3, [pc, #300]	; (80034c0 <HAL_RCC_OscConfig+0x504>)
 8003392:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003396:	4a4a      	ldr	r2, [pc, #296]	; (80034c0 <HAL_RCC_OscConfig+0x504>)
 8003398:	f043 0301 	orr.w	r3, r3, #1
 800339c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033a0:	f7fe fd8e 	bl	8001ec0 <HAL_GetTick>
 80033a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80033a6:	e008      	b.n	80033ba <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033a8:	f7fe fd8a 	bl	8001ec0 <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d901      	bls.n	80033ba <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e212      	b.n	80037e0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80033ba:	4b41      	ldr	r3, [pc, #260]	; (80034c0 <HAL_RCC_OscConfig+0x504>)
 80033bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033c0:	f003 0302 	and.w	r3, r3, #2
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d0ef      	beq.n	80033a8 <HAL_RCC_OscConfig+0x3ec>
 80033c8:	e01b      	b.n	8003402 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033ca:	4b3d      	ldr	r3, [pc, #244]	; (80034c0 <HAL_RCC_OscConfig+0x504>)
 80033cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033d0:	4a3b      	ldr	r2, [pc, #236]	; (80034c0 <HAL_RCC_OscConfig+0x504>)
 80033d2:	f023 0301 	bic.w	r3, r3, #1
 80033d6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033da:	f7fe fd71 	bl	8001ec0 <HAL_GetTick>
 80033de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80033e0:	e008      	b.n	80033f4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033e2:	f7fe fd6d 	bl	8001ec0 <HAL_GetTick>
 80033e6:	4602      	mov	r2, r0
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	2b02      	cmp	r3, #2
 80033ee:	d901      	bls.n	80033f4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80033f0:	2303      	movs	r3, #3
 80033f2:	e1f5      	b.n	80037e0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80033f4:	4b32      	ldr	r3, [pc, #200]	; (80034c0 <HAL_RCC_OscConfig+0x504>)
 80033f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033fa:	f003 0302 	and.w	r3, r3, #2
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d1ef      	bne.n	80033e2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 0304 	and.w	r3, r3, #4
 800340a:	2b00      	cmp	r3, #0
 800340c:	f000 80a6 	beq.w	800355c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003410:	2300      	movs	r3, #0
 8003412:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003414:	4b2a      	ldr	r3, [pc, #168]	; (80034c0 <HAL_RCC_OscConfig+0x504>)
 8003416:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003418:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800341c:	2b00      	cmp	r3, #0
 800341e:	d10d      	bne.n	800343c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003420:	4b27      	ldr	r3, [pc, #156]	; (80034c0 <HAL_RCC_OscConfig+0x504>)
 8003422:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003424:	4a26      	ldr	r2, [pc, #152]	; (80034c0 <HAL_RCC_OscConfig+0x504>)
 8003426:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800342a:	6593      	str	r3, [r2, #88]	; 0x58
 800342c:	4b24      	ldr	r3, [pc, #144]	; (80034c0 <HAL_RCC_OscConfig+0x504>)
 800342e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003430:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003434:	60bb      	str	r3, [r7, #8]
 8003436:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003438:	2301      	movs	r3, #1
 800343a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800343c:	4b21      	ldr	r3, [pc, #132]	; (80034c4 <HAL_RCC_OscConfig+0x508>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003444:	2b00      	cmp	r3, #0
 8003446:	d118      	bne.n	800347a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003448:	4b1e      	ldr	r3, [pc, #120]	; (80034c4 <HAL_RCC_OscConfig+0x508>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a1d      	ldr	r2, [pc, #116]	; (80034c4 <HAL_RCC_OscConfig+0x508>)
 800344e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003452:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003454:	f7fe fd34 	bl	8001ec0 <HAL_GetTick>
 8003458:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800345a:	e008      	b.n	800346e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800345c:	f7fe fd30 	bl	8001ec0 <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	2b02      	cmp	r3, #2
 8003468:	d901      	bls.n	800346e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e1b8      	b.n	80037e0 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800346e:	4b15      	ldr	r3, [pc, #84]	; (80034c4 <HAL_RCC_OscConfig+0x508>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003476:	2b00      	cmp	r3, #0
 8003478:	d0f0      	beq.n	800345c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	2b01      	cmp	r3, #1
 8003480:	d108      	bne.n	8003494 <HAL_RCC_OscConfig+0x4d8>
 8003482:	4b0f      	ldr	r3, [pc, #60]	; (80034c0 <HAL_RCC_OscConfig+0x504>)
 8003484:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003488:	4a0d      	ldr	r2, [pc, #52]	; (80034c0 <HAL_RCC_OscConfig+0x504>)
 800348a:	f043 0301 	orr.w	r3, r3, #1
 800348e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003492:	e029      	b.n	80034e8 <HAL_RCC_OscConfig+0x52c>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	2b05      	cmp	r3, #5
 800349a:	d115      	bne.n	80034c8 <HAL_RCC_OscConfig+0x50c>
 800349c:	4b08      	ldr	r3, [pc, #32]	; (80034c0 <HAL_RCC_OscConfig+0x504>)
 800349e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034a2:	4a07      	ldr	r2, [pc, #28]	; (80034c0 <HAL_RCC_OscConfig+0x504>)
 80034a4:	f043 0304 	orr.w	r3, r3, #4
 80034a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80034ac:	4b04      	ldr	r3, [pc, #16]	; (80034c0 <HAL_RCC_OscConfig+0x504>)
 80034ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034b2:	4a03      	ldr	r2, [pc, #12]	; (80034c0 <HAL_RCC_OscConfig+0x504>)
 80034b4:	f043 0301 	orr.w	r3, r3, #1
 80034b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80034bc:	e014      	b.n	80034e8 <HAL_RCC_OscConfig+0x52c>
 80034be:	bf00      	nop
 80034c0:	40021000 	.word	0x40021000
 80034c4:	40007000 	.word	0x40007000
 80034c8:	4b9d      	ldr	r3, [pc, #628]	; (8003740 <HAL_RCC_OscConfig+0x784>)
 80034ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ce:	4a9c      	ldr	r2, [pc, #624]	; (8003740 <HAL_RCC_OscConfig+0x784>)
 80034d0:	f023 0301 	bic.w	r3, r3, #1
 80034d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80034d8:	4b99      	ldr	r3, [pc, #612]	; (8003740 <HAL_RCC_OscConfig+0x784>)
 80034da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034de:	4a98      	ldr	r2, [pc, #608]	; (8003740 <HAL_RCC_OscConfig+0x784>)
 80034e0:	f023 0304 	bic.w	r3, r3, #4
 80034e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d016      	beq.n	800351e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034f0:	f7fe fce6 	bl	8001ec0 <HAL_GetTick>
 80034f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034f6:	e00a      	b.n	800350e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034f8:	f7fe fce2 	bl	8001ec0 <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	f241 3288 	movw	r2, #5000	; 0x1388
 8003506:	4293      	cmp	r3, r2
 8003508:	d901      	bls.n	800350e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e168      	b.n	80037e0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800350e:	4b8c      	ldr	r3, [pc, #560]	; (8003740 <HAL_RCC_OscConfig+0x784>)
 8003510:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003514:	f003 0302 	and.w	r3, r3, #2
 8003518:	2b00      	cmp	r3, #0
 800351a:	d0ed      	beq.n	80034f8 <HAL_RCC_OscConfig+0x53c>
 800351c:	e015      	b.n	800354a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800351e:	f7fe fccf 	bl	8001ec0 <HAL_GetTick>
 8003522:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003524:	e00a      	b.n	800353c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003526:	f7fe fccb 	bl	8001ec0 <HAL_GetTick>
 800352a:	4602      	mov	r2, r0
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	f241 3288 	movw	r2, #5000	; 0x1388
 8003534:	4293      	cmp	r3, r2
 8003536:	d901      	bls.n	800353c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003538:	2303      	movs	r3, #3
 800353a:	e151      	b.n	80037e0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800353c:	4b80      	ldr	r3, [pc, #512]	; (8003740 <HAL_RCC_OscConfig+0x784>)
 800353e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003542:	f003 0302 	and.w	r3, r3, #2
 8003546:	2b00      	cmp	r3, #0
 8003548:	d1ed      	bne.n	8003526 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800354a:	7ffb      	ldrb	r3, [r7, #31]
 800354c:	2b01      	cmp	r3, #1
 800354e:	d105      	bne.n	800355c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003550:	4b7b      	ldr	r3, [pc, #492]	; (8003740 <HAL_RCC_OscConfig+0x784>)
 8003552:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003554:	4a7a      	ldr	r2, [pc, #488]	; (8003740 <HAL_RCC_OscConfig+0x784>)
 8003556:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800355a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0320 	and.w	r3, r3, #32
 8003564:	2b00      	cmp	r3, #0
 8003566:	d03c      	beq.n	80035e2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800356c:	2b00      	cmp	r3, #0
 800356e:	d01c      	beq.n	80035aa <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003570:	4b73      	ldr	r3, [pc, #460]	; (8003740 <HAL_RCC_OscConfig+0x784>)
 8003572:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003576:	4a72      	ldr	r2, [pc, #456]	; (8003740 <HAL_RCC_OscConfig+0x784>)
 8003578:	f043 0301 	orr.w	r3, r3, #1
 800357c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003580:	f7fe fc9e 	bl	8001ec0 <HAL_GetTick>
 8003584:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003586:	e008      	b.n	800359a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003588:	f7fe fc9a 	bl	8001ec0 <HAL_GetTick>
 800358c:	4602      	mov	r2, r0
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	2b02      	cmp	r3, #2
 8003594:	d901      	bls.n	800359a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	e122      	b.n	80037e0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800359a:	4b69      	ldr	r3, [pc, #420]	; (8003740 <HAL_RCC_OscConfig+0x784>)
 800359c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80035a0:	f003 0302 	and.w	r3, r3, #2
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d0ef      	beq.n	8003588 <HAL_RCC_OscConfig+0x5cc>
 80035a8:	e01b      	b.n	80035e2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80035aa:	4b65      	ldr	r3, [pc, #404]	; (8003740 <HAL_RCC_OscConfig+0x784>)
 80035ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80035b0:	4a63      	ldr	r2, [pc, #396]	; (8003740 <HAL_RCC_OscConfig+0x784>)
 80035b2:	f023 0301 	bic.w	r3, r3, #1
 80035b6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035ba:	f7fe fc81 	bl	8001ec0 <HAL_GetTick>
 80035be:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80035c0:	e008      	b.n	80035d4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80035c2:	f7fe fc7d 	bl	8001ec0 <HAL_GetTick>
 80035c6:	4602      	mov	r2, r0
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	2b02      	cmp	r3, #2
 80035ce:	d901      	bls.n	80035d4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80035d0:	2303      	movs	r3, #3
 80035d2:	e105      	b.n	80037e0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80035d4:	4b5a      	ldr	r3, [pc, #360]	; (8003740 <HAL_RCC_OscConfig+0x784>)
 80035d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80035da:	f003 0302 	and.w	r3, r3, #2
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d1ef      	bne.n	80035c2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	f000 80f9 	beq.w	80037de <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035f0:	2b02      	cmp	r3, #2
 80035f2:	f040 80cf 	bne.w	8003794 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80035f6:	4b52      	ldr	r3, [pc, #328]	; (8003740 <HAL_RCC_OscConfig+0x784>)
 80035f8:	68db      	ldr	r3, [r3, #12]
 80035fa:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	f003 0203 	and.w	r2, r3, #3
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003606:	429a      	cmp	r2, r3
 8003608:	d12c      	bne.n	8003664 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003614:	3b01      	subs	r3, #1
 8003616:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003618:	429a      	cmp	r2, r3
 800361a:	d123      	bne.n	8003664 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003626:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003628:	429a      	cmp	r2, r3
 800362a:	d11b      	bne.n	8003664 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003636:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003638:	429a      	cmp	r2, r3
 800363a:	d113      	bne.n	8003664 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003646:	085b      	lsrs	r3, r3, #1
 8003648:	3b01      	subs	r3, #1
 800364a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800364c:	429a      	cmp	r2, r3
 800364e:	d109      	bne.n	8003664 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365a:	085b      	lsrs	r3, r3, #1
 800365c:	3b01      	subs	r3, #1
 800365e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003660:	429a      	cmp	r2, r3
 8003662:	d071      	beq.n	8003748 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003664:	69bb      	ldr	r3, [r7, #24]
 8003666:	2b0c      	cmp	r3, #12
 8003668:	d068      	beq.n	800373c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800366a:	4b35      	ldr	r3, [pc, #212]	; (8003740 <HAL_RCC_OscConfig+0x784>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d105      	bne.n	8003682 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003676:	4b32      	ldr	r3, [pc, #200]	; (8003740 <HAL_RCC_OscConfig+0x784>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d001      	beq.n	8003686 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e0ac      	b.n	80037e0 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003686:	4b2e      	ldr	r3, [pc, #184]	; (8003740 <HAL_RCC_OscConfig+0x784>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a2d      	ldr	r2, [pc, #180]	; (8003740 <HAL_RCC_OscConfig+0x784>)
 800368c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003690:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003692:	f7fe fc15 	bl	8001ec0 <HAL_GetTick>
 8003696:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003698:	e008      	b.n	80036ac <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800369a:	f7fe fc11 	bl	8001ec0 <HAL_GetTick>
 800369e:	4602      	mov	r2, r0
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	1ad3      	subs	r3, r2, r3
 80036a4:	2b02      	cmp	r3, #2
 80036a6:	d901      	bls.n	80036ac <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80036a8:	2303      	movs	r3, #3
 80036aa:	e099      	b.n	80037e0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036ac:	4b24      	ldr	r3, [pc, #144]	; (8003740 <HAL_RCC_OscConfig+0x784>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d1f0      	bne.n	800369a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036b8:	4b21      	ldr	r3, [pc, #132]	; (8003740 <HAL_RCC_OscConfig+0x784>)
 80036ba:	68da      	ldr	r2, [r3, #12]
 80036bc:	4b21      	ldr	r3, [pc, #132]	; (8003744 <HAL_RCC_OscConfig+0x788>)
 80036be:	4013      	ands	r3, r2
 80036c0:	687a      	ldr	r2, [r7, #4]
 80036c2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80036c4:	687a      	ldr	r2, [r7, #4]
 80036c6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80036c8:	3a01      	subs	r2, #1
 80036ca:	0112      	lsls	r2, r2, #4
 80036cc:	4311      	orrs	r1, r2
 80036ce:	687a      	ldr	r2, [r7, #4]
 80036d0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80036d2:	0212      	lsls	r2, r2, #8
 80036d4:	4311      	orrs	r1, r2
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80036da:	0852      	lsrs	r2, r2, #1
 80036dc:	3a01      	subs	r2, #1
 80036de:	0552      	lsls	r2, r2, #21
 80036e0:	4311      	orrs	r1, r2
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80036e6:	0852      	lsrs	r2, r2, #1
 80036e8:	3a01      	subs	r2, #1
 80036ea:	0652      	lsls	r2, r2, #25
 80036ec:	4311      	orrs	r1, r2
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80036f2:	06d2      	lsls	r2, r2, #27
 80036f4:	430a      	orrs	r2, r1
 80036f6:	4912      	ldr	r1, [pc, #72]	; (8003740 <HAL_RCC_OscConfig+0x784>)
 80036f8:	4313      	orrs	r3, r2
 80036fa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80036fc:	4b10      	ldr	r3, [pc, #64]	; (8003740 <HAL_RCC_OscConfig+0x784>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a0f      	ldr	r2, [pc, #60]	; (8003740 <HAL_RCC_OscConfig+0x784>)
 8003702:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003706:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003708:	4b0d      	ldr	r3, [pc, #52]	; (8003740 <HAL_RCC_OscConfig+0x784>)
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	4a0c      	ldr	r2, [pc, #48]	; (8003740 <HAL_RCC_OscConfig+0x784>)
 800370e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003712:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003714:	f7fe fbd4 	bl	8001ec0 <HAL_GetTick>
 8003718:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800371a:	e008      	b.n	800372e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800371c:	f7fe fbd0 	bl	8001ec0 <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	2b02      	cmp	r3, #2
 8003728:	d901      	bls.n	800372e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	e058      	b.n	80037e0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800372e:	4b04      	ldr	r3, [pc, #16]	; (8003740 <HAL_RCC_OscConfig+0x784>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003736:	2b00      	cmp	r3, #0
 8003738:	d0f0      	beq.n	800371c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800373a:	e050      	b.n	80037de <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	e04f      	b.n	80037e0 <HAL_RCC_OscConfig+0x824>
 8003740:	40021000 	.word	0x40021000
 8003744:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003748:	4b27      	ldr	r3, [pc, #156]	; (80037e8 <HAL_RCC_OscConfig+0x82c>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003750:	2b00      	cmp	r3, #0
 8003752:	d144      	bne.n	80037de <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003754:	4b24      	ldr	r3, [pc, #144]	; (80037e8 <HAL_RCC_OscConfig+0x82c>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a23      	ldr	r2, [pc, #140]	; (80037e8 <HAL_RCC_OscConfig+0x82c>)
 800375a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800375e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003760:	4b21      	ldr	r3, [pc, #132]	; (80037e8 <HAL_RCC_OscConfig+0x82c>)
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	4a20      	ldr	r2, [pc, #128]	; (80037e8 <HAL_RCC_OscConfig+0x82c>)
 8003766:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800376a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800376c:	f7fe fba8 	bl	8001ec0 <HAL_GetTick>
 8003770:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003772:	e008      	b.n	8003786 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003774:	f7fe fba4 	bl	8001ec0 <HAL_GetTick>
 8003778:	4602      	mov	r2, r0
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	2b02      	cmp	r3, #2
 8003780:	d901      	bls.n	8003786 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8003782:	2303      	movs	r3, #3
 8003784:	e02c      	b.n	80037e0 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003786:	4b18      	ldr	r3, [pc, #96]	; (80037e8 <HAL_RCC_OscConfig+0x82c>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d0f0      	beq.n	8003774 <HAL_RCC_OscConfig+0x7b8>
 8003792:	e024      	b.n	80037de <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003794:	69bb      	ldr	r3, [r7, #24]
 8003796:	2b0c      	cmp	r3, #12
 8003798:	d01f      	beq.n	80037da <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800379a:	4b13      	ldr	r3, [pc, #76]	; (80037e8 <HAL_RCC_OscConfig+0x82c>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a12      	ldr	r2, [pc, #72]	; (80037e8 <HAL_RCC_OscConfig+0x82c>)
 80037a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037a6:	f7fe fb8b 	bl	8001ec0 <HAL_GetTick>
 80037aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037ac:	e008      	b.n	80037c0 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037ae:	f7fe fb87 	bl	8001ec0 <HAL_GetTick>
 80037b2:	4602      	mov	r2, r0
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	1ad3      	subs	r3, r2, r3
 80037b8:	2b02      	cmp	r3, #2
 80037ba:	d901      	bls.n	80037c0 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80037bc:	2303      	movs	r3, #3
 80037be:	e00f      	b.n	80037e0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037c0:	4b09      	ldr	r3, [pc, #36]	; (80037e8 <HAL_RCC_OscConfig+0x82c>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d1f0      	bne.n	80037ae <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80037cc:	4b06      	ldr	r3, [pc, #24]	; (80037e8 <HAL_RCC_OscConfig+0x82c>)
 80037ce:	68da      	ldr	r2, [r3, #12]
 80037d0:	4905      	ldr	r1, [pc, #20]	; (80037e8 <HAL_RCC_OscConfig+0x82c>)
 80037d2:	4b06      	ldr	r3, [pc, #24]	; (80037ec <HAL_RCC_OscConfig+0x830>)
 80037d4:	4013      	ands	r3, r2
 80037d6:	60cb      	str	r3, [r1, #12]
 80037d8:	e001      	b.n	80037de <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e000      	b.n	80037e0 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80037de:	2300      	movs	r3, #0
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3720      	adds	r7, #32
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}
 80037e8:	40021000 	.word	0x40021000
 80037ec:	feeefffc 	.word	0xfeeefffc

080037f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d101      	bne.n	8003804 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	e0e7      	b.n	80039d4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003804:	4b75      	ldr	r3, [pc, #468]	; (80039dc <HAL_RCC_ClockConfig+0x1ec>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0307 	and.w	r3, r3, #7
 800380c:	683a      	ldr	r2, [r7, #0]
 800380e:	429a      	cmp	r2, r3
 8003810:	d910      	bls.n	8003834 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003812:	4b72      	ldr	r3, [pc, #456]	; (80039dc <HAL_RCC_ClockConfig+0x1ec>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f023 0207 	bic.w	r2, r3, #7
 800381a:	4970      	ldr	r1, [pc, #448]	; (80039dc <HAL_RCC_ClockConfig+0x1ec>)
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	4313      	orrs	r3, r2
 8003820:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003822:	4b6e      	ldr	r3, [pc, #440]	; (80039dc <HAL_RCC_ClockConfig+0x1ec>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0307 	and.w	r3, r3, #7
 800382a:	683a      	ldr	r2, [r7, #0]
 800382c:	429a      	cmp	r2, r3
 800382e:	d001      	beq.n	8003834 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e0cf      	b.n	80039d4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0302 	and.w	r3, r3, #2
 800383c:	2b00      	cmp	r3, #0
 800383e:	d010      	beq.n	8003862 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	689a      	ldr	r2, [r3, #8]
 8003844:	4b66      	ldr	r3, [pc, #408]	; (80039e0 <HAL_RCC_ClockConfig+0x1f0>)
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800384c:	429a      	cmp	r2, r3
 800384e:	d908      	bls.n	8003862 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003850:	4b63      	ldr	r3, [pc, #396]	; (80039e0 <HAL_RCC_ClockConfig+0x1f0>)
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	4960      	ldr	r1, [pc, #384]	; (80039e0 <HAL_RCC_ClockConfig+0x1f0>)
 800385e:	4313      	orrs	r3, r2
 8003860:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 0301 	and.w	r3, r3, #1
 800386a:	2b00      	cmp	r3, #0
 800386c:	d04c      	beq.n	8003908 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	2b03      	cmp	r3, #3
 8003874:	d107      	bne.n	8003886 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003876:	4b5a      	ldr	r3, [pc, #360]	; (80039e0 <HAL_RCC_ClockConfig+0x1f0>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800387e:	2b00      	cmp	r3, #0
 8003880:	d121      	bne.n	80038c6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e0a6      	b.n	80039d4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	2b02      	cmp	r3, #2
 800388c:	d107      	bne.n	800389e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800388e:	4b54      	ldr	r3, [pc, #336]	; (80039e0 <HAL_RCC_ClockConfig+0x1f0>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d115      	bne.n	80038c6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e09a      	b.n	80039d4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d107      	bne.n	80038b6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80038a6:	4b4e      	ldr	r3, [pc, #312]	; (80039e0 <HAL_RCC_ClockConfig+0x1f0>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0302 	and.w	r3, r3, #2
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d109      	bne.n	80038c6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e08e      	b.n	80039d4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038b6:	4b4a      	ldr	r3, [pc, #296]	; (80039e0 <HAL_RCC_ClockConfig+0x1f0>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d101      	bne.n	80038c6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e086      	b.n	80039d4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80038c6:	4b46      	ldr	r3, [pc, #280]	; (80039e0 <HAL_RCC_ClockConfig+0x1f0>)
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	f023 0203 	bic.w	r2, r3, #3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	4943      	ldr	r1, [pc, #268]	; (80039e0 <HAL_RCC_ClockConfig+0x1f0>)
 80038d4:	4313      	orrs	r3, r2
 80038d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038d8:	f7fe faf2 	bl	8001ec0 <HAL_GetTick>
 80038dc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038de:	e00a      	b.n	80038f6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038e0:	f7fe faee 	bl	8001ec0 <HAL_GetTick>
 80038e4:	4602      	mov	r2, r0
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d901      	bls.n	80038f6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80038f2:	2303      	movs	r3, #3
 80038f4:	e06e      	b.n	80039d4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038f6:	4b3a      	ldr	r3, [pc, #232]	; (80039e0 <HAL_RCC_ClockConfig+0x1f0>)
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	f003 020c 	and.w	r2, r3, #12
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	429a      	cmp	r2, r3
 8003906:	d1eb      	bne.n	80038e0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 0302 	and.w	r3, r3, #2
 8003910:	2b00      	cmp	r3, #0
 8003912:	d010      	beq.n	8003936 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	689a      	ldr	r2, [r3, #8]
 8003918:	4b31      	ldr	r3, [pc, #196]	; (80039e0 <HAL_RCC_ClockConfig+0x1f0>)
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003920:	429a      	cmp	r2, r3
 8003922:	d208      	bcs.n	8003936 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003924:	4b2e      	ldr	r3, [pc, #184]	; (80039e0 <HAL_RCC_ClockConfig+0x1f0>)
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	492b      	ldr	r1, [pc, #172]	; (80039e0 <HAL_RCC_ClockConfig+0x1f0>)
 8003932:	4313      	orrs	r3, r2
 8003934:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003936:	4b29      	ldr	r3, [pc, #164]	; (80039dc <HAL_RCC_ClockConfig+0x1ec>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0307 	and.w	r3, r3, #7
 800393e:	683a      	ldr	r2, [r7, #0]
 8003940:	429a      	cmp	r2, r3
 8003942:	d210      	bcs.n	8003966 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003944:	4b25      	ldr	r3, [pc, #148]	; (80039dc <HAL_RCC_ClockConfig+0x1ec>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f023 0207 	bic.w	r2, r3, #7
 800394c:	4923      	ldr	r1, [pc, #140]	; (80039dc <HAL_RCC_ClockConfig+0x1ec>)
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	4313      	orrs	r3, r2
 8003952:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003954:	4b21      	ldr	r3, [pc, #132]	; (80039dc <HAL_RCC_ClockConfig+0x1ec>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0307 	and.w	r3, r3, #7
 800395c:	683a      	ldr	r2, [r7, #0]
 800395e:	429a      	cmp	r2, r3
 8003960:	d001      	beq.n	8003966 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e036      	b.n	80039d4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0304 	and.w	r3, r3, #4
 800396e:	2b00      	cmp	r3, #0
 8003970:	d008      	beq.n	8003984 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003972:	4b1b      	ldr	r3, [pc, #108]	; (80039e0 <HAL_RCC_ClockConfig+0x1f0>)
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	4918      	ldr	r1, [pc, #96]	; (80039e0 <HAL_RCC_ClockConfig+0x1f0>)
 8003980:	4313      	orrs	r3, r2
 8003982:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 0308 	and.w	r3, r3, #8
 800398c:	2b00      	cmp	r3, #0
 800398e:	d009      	beq.n	80039a4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003990:	4b13      	ldr	r3, [pc, #76]	; (80039e0 <HAL_RCC_ClockConfig+0x1f0>)
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	691b      	ldr	r3, [r3, #16]
 800399c:	00db      	lsls	r3, r3, #3
 800399e:	4910      	ldr	r1, [pc, #64]	; (80039e0 <HAL_RCC_ClockConfig+0x1f0>)
 80039a0:	4313      	orrs	r3, r2
 80039a2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80039a4:	f000 f824 	bl	80039f0 <HAL_RCC_GetSysClockFreq>
 80039a8:	4602      	mov	r2, r0
 80039aa:	4b0d      	ldr	r3, [pc, #52]	; (80039e0 <HAL_RCC_ClockConfig+0x1f0>)
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	091b      	lsrs	r3, r3, #4
 80039b0:	f003 030f 	and.w	r3, r3, #15
 80039b4:	490b      	ldr	r1, [pc, #44]	; (80039e4 <HAL_RCC_ClockConfig+0x1f4>)
 80039b6:	5ccb      	ldrb	r3, [r1, r3]
 80039b8:	f003 031f 	and.w	r3, r3, #31
 80039bc:	fa22 f303 	lsr.w	r3, r2, r3
 80039c0:	4a09      	ldr	r2, [pc, #36]	; (80039e8 <HAL_RCC_ClockConfig+0x1f8>)
 80039c2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80039c4:	4b09      	ldr	r3, [pc, #36]	; (80039ec <HAL_RCC_ClockConfig+0x1fc>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4618      	mov	r0, r3
 80039ca:	f7fe fa29 	bl	8001e20 <HAL_InitTick>
 80039ce:	4603      	mov	r3, r0
 80039d0:	72fb      	strb	r3, [r7, #11]

  return status;
 80039d2:	7afb      	ldrb	r3, [r7, #11]
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3710      	adds	r7, #16
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}
 80039dc:	40022000 	.word	0x40022000
 80039e0:	40021000 	.word	0x40021000
 80039e4:	08006354 	.word	0x08006354
 80039e8:	20000000 	.word	0x20000000
 80039ec:	20000004 	.word	0x20000004

080039f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b089      	sub	sp, #36	; 0x24
 80039f4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80039f6:	2300      	movs	r3, #0
 80039f8:	61fb      	str	r3, [r7, #28]
 80039fa:	2300      	movs	r3, #0
 80039fc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039fe:	4b3e      	ldr	r3, [pc, #248]	; (8003af8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	f003 030c 	and.w	r3, r3, #12
 8003a06:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a08:	4b3b      	ldr	r3, [pc, #236]	; (8003af8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	f003 0303 	and.w	r3, r3, #3
 8003a10:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d005      	beq.n	8003a24 <HAL_RCC_GetSysClockFreq+0x34>
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	2b0c      	cmp	r3, #12
 8003a1c:	d121      	bne.n	8003a62 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d11e      	bne.n	8003a62 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003a24:	4b34      	ldr	r3, [pc, #208]	; (8003af8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 0308 	and.w	r3, r3, #8
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d107      	bne.n	8003a40 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003a30:	4b31      	ldr	r3, [pc, #196]	; (8003af8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a36:	0a1b      	lsrs	r3, r3, #8
 8003a38:	f003 030f 	and.w	r3, r3, #15
 8003a3c:	61fb      	str	r3, [r7, #28]
 8003a3e:	e005      	b.n	8003a4c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003a40:	4b2d      	ldr	r3, [pc, #180]	; (8003af8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	091b      	lsrs	r3, r3, #4
 8003a46:	f003 030f 	and.w	r3, r3, #15
 8003a4a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003a4c:	4a2b      	ldr	r2, [pc, #172]	; (8003afc <HAL_RCC_GetSysClockFreq+0x10c>)
 8003a4e:	69fb      	ldr	r3, [r7, #28]
 8003a50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a54:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d10d      	bne.n	8003a78 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003a5c:	69fb      	ldr	r3, [r7, #28]
 8003a5e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a60:	e00a      	b.n	8003a78 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	2b04      	cmp	r3, #4
 8003a66:	d102      	bne.n	8003a6e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003a68:	4b25      	ldr	r3, [pc, #148]	; (8003b00 <HAL_RCC_GetSysClockFreq+0x110>)
 8003a6a:	61bb      	str	r3, [r7, #24]
 8003a6c:	e004      	b.n	8003a78 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	2b08      	cmp	r3, #8
 8003a72:	d101      	bne.n	8003a78 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003a74:	4b23      	ldr	r3, [pc, #140]	; (8003b04 <HAL_RCC_GetSysClockFreq+0x114>)
 8003a76:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	2b0c      	cmp	r3, #12
 8003a7c:	d134      	bne.n	8003ae8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003a7e:	4b1e      	ldr	r3, [pc, #120]	; (8003af8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a80:	68db      	ldr	r3, [r3, #12]
 8003a82:	f003 0303 	and.w	r3, r3, #3
 8003a86:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	2b02      	cmp	r3, #2
 8003a8c:	d003      	beq.n	8003a96 <HAL_RCC_GetSysClockFreq+0xa6>
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	2b03      	cmp	r3, #3
 8003a92:	d003      	beq.n	8003a9c <HAL_RCC_GetSysClockFreq+0xac>
 8003a94:	e005      	b.n	8003aa2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003a96:	4b1a      	ldr	r3, [pc, #104]	; (8003b00 <HAL_RCC_GetSysClockFreq+0x110>)
 8003a98:	617b      	str	r3, [r7, #20]
      break;
 8003a9a:	e005      	b.n	8003aa8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003a9c:	4b19      	ldr	r3, [pc, #100]	; (8003b04 <HAL_RCC_GetSysClockFreq+0x114>)
 8003a9e:	617b      	str	r3, [r7, #20]
      break;
 8003aa0:	e002      	b.n	8003aa8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	617b      	str	r3, [r7, #20]
      break;
 8003aa6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003aa8:	4b13      	ldr	r3, [pc, #76]	; (8003af8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	091b      	lsrs	r3, r3, #4
 8003aae:	f003 0307 	and.w	r3, r3, #7
 8003ab2:	3301      	adds	r3, #1
 8003ab4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003ab6:	4b10      	ldr	r3, [pc, #64]	; (8003af8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	0a1b      	lsrs	r3, r3, #8
 8003abc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ac0:	697a      	ldr	r2, [r7, #20]
 8003ac2:	fb03 f202 	mul.w	r2, r3, r2
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003acc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ace:	4b0a      	ldr	r3, [pc, #40]	; (8003af8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	0e5b      	lsrs	r3, r3, #25
 8003ad4:	f003 0303 	and.w	r3, r3, #3
 8003ad8:	3301      	adds	r3, #1
 8003ada:	005b      	lsls	r3, r3, #1
 8003adc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003ade:	697a      	ldr	r2, [r7, #20]
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ae6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003ae8:	69bb      	ldr	r3, [r7, #24]
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3724      	adds	r7, #36	; 0x24
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr
 8003af6:	bf00      	nop
 8003af8:	40021000 	.word	0x40021000
 8003afc:	0800636c 	.word	0x0800636c
 8003b00:	00f42400 	.word	0x00f42400
 8003b04:	007a1200 	.word	0x007a1200

08003b08 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b0c:	4b03      	ldr	r3, [pc, #12]	; (8003b1c <HAL_RCC_GetHCLKFreq+0x14>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr
 8003b1a:	bf00      	nop
 8003b1c:	20000000 	.word	0x20000000

08003b20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003b24:	f7ff fff0 	bl	8003b08 <HAL_RCC_GetHCLKFreq>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	4b06      	ldr	r3, [pc, #24]	; (8003b44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	0a1b      	lsrs	r3, r3, #8
 8003b30:	f003 0307 	and.w	r3, r3, #7
 8003b34:	4904      	ldr	r1, [pc, #16]	; (8003b48 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003b36:	5ccb      	ldrb	r3, [r1, r3]
 8003b38:	f003 031f 	and.w	r3, r3, #31
 8003b3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	40021000 	.word	0x40021000
 8003b48:	08006364 	.word	0x08006364

08003b4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003b50:	f7ff ffda 	bl	8003b08 <HAL_RCC_GetHCLKFreq>
 8003b54:	4602      	mov	r2, r0
 8003b56:	4b06      	ldr	r3, [pc, #24]	; (8003b70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	0adb      	lsrs	r3, r3, #11
 8003b5c:	f003 0307 	and.w	r3, r3, #7
 8003b60:	4904      	ldr	r1, [pc, #16]	; (8003b74 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003b62:	5ccb      	ldrb	r3, [r1, r3]
 8003b64:	f003 031f 	and.w	r3, r3, #31
 8003b68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	bd80      	pop	{r7, pc}
 8003b70:	40021000 	.word	0x40021000
 8003b74:	08006364 	.word	0x08006364

08003b78 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b086      	sub	sp, #24
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003b80:	2300      	movs	r3, #0
 8003b82:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003b84:	4b2a      	ldr	r3, [pc, #168]	; (8003c30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d003      	beq.n	8003b98 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003b90:	f7fe fd30 	bl	80025f4 <HAL_PWREx_GetVoltageRange>
 8003b94:	6178      	str	r0, [r7, #20]
 8003b96:	e014      	b.n	8003bc2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003b98:	4b25      	ldr	r3, [pc, #148]	; (8003c30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b9c:	4a24      	ldr	r2, [pc, #144]	; (8003c30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003b9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ba2:	6593      	str	r3, [r2, #88]	; 0x58
 8003ba4:	4b22      	ldr	r3, [pc, #136]	; (8003c30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ba6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ba8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bac:	60fb      	str	r3, [r7, #12]
 8003bae:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003bb0:	f7fe fd20 	bl	80025f4 <HAL_PWREx_GetVoltageRange>
 8003bb4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003bb6:	4b1e      	ldr	r3, [pc, #120]	; (8003c30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bba:	4a1d      	ldr	r2, [pc, #116]	; (8003c30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bc0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bc8:	d10b      	bne.n	8003be2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2b80      	cmp	r3, #128	; 0x80
 8003bce:	d919      	bls.n	8003c04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2ba0      	cmp	r3, #160	; 0xa0
 8003bd4:	d902      	bls.n	8003bdc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003bd6:	2302      	movs	r3, #2
 8003bd8:	613b      	str	r3, [r7, #16]
 8003bda:	e013      	b.n	8003c04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003bdc:	2301      	movs	r3, #1
 8003bde:	613b      	str	r3, [r7, #16]
 8003be0:	e010      	b.n	8003c04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2b80      	cmp	r3, #128	; 0x80
 8003be6:	d902      	bls.n	8003bee <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003be8:	2303      	movs	r3, #3
 8003bea:	613b      	str	r3, [r7, #16]
 8003bec:	e00a      	b.n	8003c04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2b80      	cmp	r3, #128	; 0x80
 8003bf2:	d102      	bne.n	8003bfa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003bf4:	2302      	movs	r3, #2
 8003bf6:	613b      	str	r3, [r7, #16]
 8003bf8:	e004      	b.n	8003c04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2b70      	cmp	r3, #112	; 0x70
 8003bfe:	d101      	bne.n	8003c04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003c00:	2301      	movs	r3, #1
 8003c02:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003c04:	4b0b      	ldr	r3, [pc, #44]	; (8003c34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f023 0207 	bic.w	r2, r3, #7
 8003c0c:	4909      	ldr	r1, [pc, #36]	; (8003c34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003c14:	4b07      	ldr	r3, [pc, #28]	; (8003c34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 0307 	and.w	r3, r3, #7
 8003c1c:	693a      	ldr	r2, [r7, #16]
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	d001      	beq.n	8003c26 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e000      	b.n	8003c28 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003c26:	2300      	movs	r3, #0
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3718      	adds	r7, #24
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}
 8003c30:	40021000 	.word	0x40021000
 8003c34:	40022000 	.word	0x40022000

08003c38 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b086      	sub	sp, #24
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003c40:	2300      	movs	r3, #0
 8003c42:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003c44:	2300      	movs	r3, #0
 8003c46:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d041      	beq.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c58:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003c5c:	d02a      	beq.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003c5e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003c62:	d824      	bhi.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003c64:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003c68:	d008      	beq.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003c6a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003c6e:	d81e      	bhi.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d00a      	beq.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003c74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c78:	d010      	beq.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003c7a:	e018      	b.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003c7c:	4b86      	ldr	r3, [pc, #536]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c7e:	68db      	ldr	r3, [r3, #12]
 8003c80:	4a85      	ldr	r2, [pc, #532]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c86:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c88:	e015      	b.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	3304      	adds	r3, #4
 8003c8e:	2100      	movs	r1, #0
 8003c90:	4618      	mov	r0, r3
 8003c92:	f000 facd 	bl	8004230 <RCCEx_PLLSAI1_Config>
 8003c96:	4603      	mov	r3, r0
 8003c98:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c9a:	e00c      	b.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	3320      	adds	r3, #32
 8003ca0:	2100      	movs	r1, #0
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f000 fbb6 	bl	8004414 <RCCEx_PLLSAI2_Config>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003cac:	e003      	b.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	74fb      	strb	r3, [r7, #19]
      break;
 8003cb2:	e000      	b.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003cb4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cb6:	7cfb      	ldrb	r3, [r7, #19]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d10b      	bne.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003cbc:	4b76      	ldr	r3, [pc, #472]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cc2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003cca:	4973      	ldr	r1, [pc, #460]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003cd2:	e001      	b.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cd4:	7cfb      	ldrb	r3, [r7, #19]
 8003cd6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d041      	beq.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ce8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003cec:	d02a      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003cee:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003cf2:	d824      	bhi.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003cf4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003cf8:	d008      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003cfa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003cfe:	d81e      	bhi.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d00a      	beq.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003d04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d08:	d010      	beq.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003d0a:	e018      	b.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003d0c:	4b62      	ldr	r3, [pc, #392]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	4a61      	ldr	r2, [pc, #388]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d16:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d18:	e015      	b.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	3304      	adds	r3, #4
 8003d1e:	2100      	movs	r1, #0
 8003d20:	4618      	mov	r0, r3
 8003d22:	f000 fa85 	bl	8004230 <RCCEx_PLLSAI1_Config>
 8003d26:	4603      	mov	r3, r0
 8003d28:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d2a:	e00c      	b.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	3320      	adds	r3, #32
 8003d30:	2100      	movs	r1, #0
 8003d32:	4618      	mov	r0, r3
 8003d34:	f000 fb6e 	bl	8004414 <RCCEx_PLLSAI2_Config>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d3c:	e003      	b.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	74fb      	strb	r3, [r7, #19]
      break;
 8003d42:	e000      	b.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003d44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d46:	7cfb      	ldrb	r3, [r7, #19]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d10b      	bne.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003d4c:	4b52      	ldr	r3, [pc, #328]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d52:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d5a:	494f      	ldr	r1, [pc, #316]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003d62:	e001      	b.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d64:	7cfb      	ldrb	r3, [r7, #19]
 8003d66:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	f000 80a0 	beq.w	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d76:	2300      	movs	r3, #0
 8003d78:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003d7a:	4b47      	ldr	r3, [pc, #284]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d101      	bne.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003d86:	2301      	movs	r3, #1
 8003d88:	e000      	b.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d00d      	beq.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d90:	4b41      	ldr	r3, [pc, #260]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d94:	4a40      	ldr	r2, [pc, #256]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d9a:	6593      	str	r3, [r2, #88]	; 0x58
 8003d9c:	4b3e      	ldr	r3, [pc, #248]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003da0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003da4:	60bb      	str	r3, [r7, #8]
 8003da6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003da8:	2301      	movs	r3, #1
 8003daa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003dac:	4b3b      	ldr	r3, [pc, #236]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a3a      	ldr	r2, [pc, #232]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003db2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003db6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003db8:	f7fe f882 	bl	8001ec0 <HAL_GetTick>
 8003dbc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003dbe:	e009      	b.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dc0:	f7fe f87e 	bl	8001ec0 <HAL_GetTick>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	1ad3      	subs	r3, r2, r3
 8003dca:	2b02      	cmp	r3, #2
 8003dcc:	d902      	bls.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003dce:	2303      	movs	r3, #3
 8003dd0:	74fb      	strb	r3, [r7, #19]
        break;
 8003dd2:	e005      	b.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003dd4:	4b31      	ldr	r3, [pc, #196]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d0ef      	beq.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003de0:	7cfb      	ldrb	r3, [r7, #19]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d15c      	bne.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003de6:	4b2c      	ldr	r3, [pc, #176]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003df0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d01f      	beq.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dfe:	697a      	ldr	r2, [r7, #20]
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d019      	beq.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003e04:	4b24      	ldr	r3, [pc, #144]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e0e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e10:	4b21      	ldr	r3, [pc, #132]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e16:	4a20      	ldr	r2, [pc, #128]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e20:	4b1d      	ldr	r3, [pc, #116]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e26:	4a1c      	ldr	r2, [pc, #112]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003e30:	4a19      	ldr	r2, [pc, #100]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	f003 0301 	and.w	r3, r3, #1
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d016      	beq.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e42:	f7fe f83d 	bl	8001ec0 <HAL_GetTick>
 8003e46:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e48:	e00b      	b.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e4a:	f7fe f839 	bl	8001ec0 <HAL_GetTick>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d902      	bls.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003e5c:	2303      	movs	r3, #3
 8003e5e:	74fb      	strb	r3, [r7, #19]
            break;
 8003e60:	e006      	b.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e62:	4b0d      	ldr	r3, [pc, #52]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e68:	f003 0302 	and.w	r3, r3, #2
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d0ec      	beq.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003e70:	7cfb      	ldrb	r3, [r7, #19]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d10c      	bne.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e76:	4b08      	ldr	r3, [pc, #32]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e86:	4904      	ldr	r1, [pc, #16]	; (8003e98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003e8e:	e009      	b.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003e90:	7cfb      	ldrb	r3, [r7, #19]
 8003e92:	74bb      	strb	r3, [r7, #18]
 8003e94:	e006      	b.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003e96:	bf00      	nop
 8003e98:	40021000 	.word	0x40021000
 8003e9c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ea0:	7cfb      	ldrb	r3, [r7, #19]
 8003ea2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ea4:	7c7b      	ldrb	r3, [r7, #17]
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d105      	bne.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003eaa:	4ba6      	ldr	r3, [pc, #664]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eae:	4aa5      	ldr	r2, [pc, #660]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003eb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003eb4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 0301 	and.w	r3, r3, #1
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d00a      	beq.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ec2:	4ba0      	ldr	r3, [pc, #640]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003ec4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ec8:	f023 0203 	bic.w	r2, r3, #3
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ed0:	499c      	ldr	r1, [pc, #624]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 0302 	and.w	r3, r3, #2
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d00a      	beq.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ee4:	4b97      	ldr	r3, [pc, #604]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eea:	f023 020c 	bic.w	r2, r3, #12
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ef2:	4994      	ldr	r1, [pc, #592]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 0304 	and.w	r3, r3, #4
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d00a      	beq.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f06:	4b8f      	ldr	r3, [pc, #572]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003f08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f0c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f14:	498b      	ldr	r1, [pc, #556]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003f16:	4313      	orrs	r3, r2
 8003f18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 0308 	and.w	r3, r3, #8
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d00a      	beq.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003f28:	4b86      	ldr	r3, [pc, #536]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f2e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f36:	4983      	ldr	r1, [pc, #524]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 0310 	and.w	r3, r3, #16
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d00a      	beq.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003f4a:	4b7e      	ldr	r3, [pc, #504]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003f4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f58:	497a      	ldr	r1, [pc, #488]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 0320 	and.w	r3, r3, #32
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d00a      	beq.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f6c:	4b75      	ldr	r3, [pc, #468]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f72:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f7a:	4972      	ldr	r1, [pc, #456]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d00a      	beq.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f8e:	4b6d      	ldr	r3, [pc, #436]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f94:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f9c:	4969      	ldr	r1, [pc, #420]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d00a      	beq.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003fb0:	4b64      	ldr	r3, [pc, #400]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fb6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003fbe:	4961      	ldr	r1, [pc, #388]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d00a      	beq.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003fd2:	4b5c      	ldr	r3, [pc, #368]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fd8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fe0:	4958      	ldr	r1, [pc, #352]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d00a      	beq.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003ff4:	4b53      	ldr	r3, [pc, #332]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ffa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004002:	4950      	ldr	r1, [pc, #320]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004004:	4313      	orrs	r3, r2
 8004006:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004012:	2b00      	cmp	r3, #0
 8004014:	d00a      	beq.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004016:	4b4b      	ldr	r3, [pc, #300]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004018:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800401c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004024:	4947      	ldr	r1, [pc, #284]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004026:	4313      	orrs	r3, r2
 8004028:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004034:	2b00      	cmp	r3, #0
 8004036:	d00a      	beq.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004038:	4b42      	ldr	r3, [pc, #264]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800403a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800403e:	f023 0203 	bic.w	r2, r3, #3
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004046:	493f      	ldr	r1, [pc, #252]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004048:	4313      	orrs	r3, r2
 800404a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004056:	2b00      	cmp	r3, #0
 8004058:	d028      	beq.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800405a:	4b3a      	ldr	r3, [pc, #232]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800405c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004060:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004068:	4936      	ldr	r1, [pc, #216]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800406a:	4313      	orrs	r3, r2
 800406c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004074:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004078:	d106      	bne.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800407a:	4b32      	ldr	r3, [pc, #200]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800407c:	68db      	ldr	r3, [r3, #12]
 800407e:	4a31      	ldr	r2, [pc, #196]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004080:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004084:	60d3      	str	r3, [r2, #12]
 8004086:	e011      	b.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800408c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004090:	d10c      	bne.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	3304      	adds	r3, #4
 8004096:	2101      	movs	r1, #1
 8004098:	4618      	mov	r0, r3
 800409a:	f000 f8c9 	bl	8004230 <RCCEx_PLLSAI1_Config>
 800409e:	4603      	mov	r3, r0
 80040a0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80040a2:	7cfb      	ldrb	r3, [r7, #19]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d001      	beq.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 80040a8:	7cfb      	ldrb	r3, [r7, #19]
 80040aa:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d028      	beq.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80040b8:	4b22      	ldr	r3, [pc, #136]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80040ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040be:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040c6:	491f      	ldr	r1, [pc, #124]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80040c8:	4313      	orrs	r3, r2
 80040ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040d6:	d106      	bne.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040d8:	4b1a      	ldr	r3, [pc, #104]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	4a19      	ldr	r2, [pc, #100]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80040de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040e2:	60d3      	str	r3, [r2, #12]
 80040e4:	e011      	b.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040ea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80040ee:	d10c      	bne.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	3304      	adds	r3, #4
 80040f4:	2101      	movs	r1, #1
 80040f6:	4618      	mov	r0, r3
 80040f8:	f000 f89a 	bl	8004230 <RCCEx_PLLSAI1_Config>
 80040fc:	4603      	mov	r3, r0
 80040fe:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004100:	7cfb      	ldrb	r3, [r7, #19]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d001      	beq.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8004106:	7cfb      	ldrb	r3, [r7, #19]
 8004108:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004112:	2b00      	cmp	r3, #0
 8004114:	d02a      	beq.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004116:	4b0b      	ldr	r3, [pc, #44]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004118:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800411c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004124:	4907      	ldr	r1, [pc, #28]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004126:	4313      	orrs	r3, r2
 8004128:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004130:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004134:	d108      	bne.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004136:	4b03      	ldr	r3, [pc, #12]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004138:	68db      	ldr	r3, [r3, #12]
 800413a:	4a02      	ldr	r2, [pc, #8]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800413c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004140:	60d3      	str	r3, [r2, #12]
 8004142:	e013      	b.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x534>
 8004144:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800414c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004150:	d10c      	bne.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	3304      	adds	r3, #4
 8004156:	2101      	movs	r1, #1
 8004158:	4618      	mov	r0, r3
 800415a:	f000 f869 	bl	8004230 <RCCEx_PLLSAI1_Config>
 800415e:	4603      	mov	r3, r0
 8004160:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004162:	7cfb      	ldrb	r3, [r7, #19]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d001      	beq.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8004168:	7cfb      	ldrb	r3, [r7, #19]
 800416a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004174:	2b00      	cmp	r3, #0
 8004176:	d02f      	beq.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004178:	4b2c      	ldr	r3, [pc, #176]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800417a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800417e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004186:	4929      	ldr	r1, [pc, #164]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004188:	4313      	orrs	r3, r2
 800418a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004192:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004196:	d10d      	bne.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	3304      	adds	r3, #4
 800419c:	2102      	movs	r1, #2
 800419e:	4618      	mov	r0, r3
 80041a0:	f000 f846 	bl	8004230 <RCCEx_PLLSAI1_Config>
 80041a4:	4603      	mov	r3, r0
 80041a6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80041a8:	7cfb      	ldrb	r3, [r7, #19]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d014      	beq.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80041ae:	7cfb      	ldrb	r3, [r7, #19]
 80041b0:	74bb      	strb	r3, [r7, #18]
 80041b2:	e011      	b.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041bc:	d10c      	bne.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	3320      	adds	r3, #32
 80041c2:	2102      	movs	r1, #2
 80041c4:	4618      	mov	r0, r3
 80041c6:	f000 f925 	bl	8004414 <RCCEx_PLLSAI2_Config>
 80041ca:	4603      	mov	r3, r0
 80041cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80041ce:	7cfb      	ldrb	r3, [r7, #19]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d001      	beq.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80041d4:	7cfb      	ldrb	r3, [r7, #19]
 80041d6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d00b      	beq.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80041e4:	4b11      	ldr	r3, [pc, #68]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80041e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ea:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041f4:	490d      	ldr	r1, [pc, #52]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80041f6:	4313      	orrs	r3, r2
 80041f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004204:	2b00      	cmp	r3, #0
 8004206:	d00b      	beq.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004208:	4b08      	ldr	r3, [pc, #32]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800420a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800420e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004218:	4904      	ldr	r1, [pc, #16]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800421a:	4313      	orrs	r3, r2
 800421c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004220:	7cbb      	ldrb	r3, [r7, #18]
}
 8004222:	4618      	mov	r0, r3
 8004224:	3718      	adds	r7, #24
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop
 800422c:	40021000 	.word	0x40021000

08004230 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b084      	sub	sp, #16
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800423a:	2300      	movs	r3, #0
 800423c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800423e:	4b74      	ldr	r3, [pc, #464]	; (8004410 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004240:	68db      	ldr	r3, [r3, #12]
 8004242:	f003 0303 	and.w	r3, r3, #3
 8004246:	2b00      	cmp	r3, #0
 8004248:	d018      	beq.n	800427c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800424a:	4b71      	ldr	r3, [pc, #452]	; (8004410 <RCCEx_PLLSAI1_Config+0x1e0>)
 800424c:	68db      	ldr	r3, [r3, #12]
 800424e:	f003 0203 	and.w	r2, r3, #3
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	429a      	cmp	r2, r3
 8004258:	d10d      	bne.n	8004276 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
       ||
 800425e:	2b00      	cmp	r3, #0
 8004260:	d009      	beq.n	8004276 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004262:	4b6b      	ldr	r3, [pc, #428]	; (8004410 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004264:	68db      	ldr	r3, [r3, #12]
 8004266:	091b      	lsrs	r3, r3, #4
 8004268:	f003 0307 	and.w	r3, r3, #7
 800426c:	1c5a      	adds	r2, r3, #1
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	685b      	ldr	r3, [r3, #4]
       ||
 8004272:	429a      	cmp	r2, r3
 8004274:	d047      	beq.n	8004306 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	73fb      	strb	r3, [r7, #15]
 800427a:	e044      	b.n	8004306 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	2b03      	cmp	r3, #3
 8004282:	d018      	beq.n	80042b6 <RCCEx_PLLSAI1_Config+0x86>
 8004284:	2b03      	cmp	r3, #3
 8004286:	d825      	bhi.n	80042d4 <RCCEx_PLLSAI1_Config+0xa4>
 8004288:	2b01      	cmp	r3, #1
 800428a:	d002      	beq.n	8004292 <RCCEx_PLLSAI1_Config+0x62>
 800428c:	2b02      	cmp	r3, #2
 800428e:	d009      	beq.n	80042a4 <RCCEx_PLLSAI1_Config+0x74>
 8004290:	e020      	b.n	80042d4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004292:	4b5f      	ldr	r3, [pc, #380]	; (8004410 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 0302 	and.w	r3, r3, #2
 800429a:	2b00      	cmp	r3, #0
 800429c:	d11d      	bne.n	80042da <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042a2:	e01a      	b.n	80042da <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80042a4:	4b5a      	ldr	r3, [pc, #360]	; (8004410 <RCCEx_PLLSAI1_Config+0x1e0>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d116      	bne.n	80042de <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042b4:	e013      	b.n	80042de <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80042b6:	4b56      	ldr	r3, [pc, #344]	; (8004410 <RCCEx_PLLSAI1_Config+0x1e0>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d10f      	bne.n	80042e2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80042c2:	4b53      	ldr	r3, [pc, #332]	; (8004410 <RCCEx_PLLSAI1_Config+0x1e0>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d109      	bne.n	80042e2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80042d2:	e006      	b.n	80042e2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	73fb      	strb	r3, [r7, #15]
      break;
 80042d8:	e004      	b.n	80042e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80042da:	bf00      	nop
 80042dc:	e002      	b.n	80042e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80042de:	bf00      	nop
 80042e0:	e000      	b.n	80042e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80042e2:	bf00      	nop
    }

    if(status == HAL_OK)
 80042e4:	7bfb      	ldrb	r3, [r7, #15]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d10d      	bne.n	8004306 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80042ea:	4b49      	ldr	r3, [pc, #292]	; (8004410 <RCCEx_PLLSAI1_Config+0x1e0>)
 80042ec:	68db      	ldr	r3, [r3, #12]
 80042ee:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6819      	ldr	r1, [r3, #0]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	3b01      	subs	r3, #1
 80042fc:	011b      	lsls	r3, r3, #4
 80042fe:	430b      	orrs	r3, r1
 8004300:	4943      	ldr	r1, [pc, #268]	; (8004410 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004302:	4313      	orrs	r3, r2
 8004304:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004306:	7bfb      	ldrb	r3, [r7, #15]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d17c      	bne.n	8004406 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800430c:	4b40      	ldr	r3, [pc, #256]	; (8004410 <RCCEx_PLLSAI1_Config+0x1e0>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a3f      	ldr	r2, [pc, #252]	; (8004410 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004312:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004316:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004318:	f7fd fdd2 	bl	8001ec0 <HAL_GetTick>
 800431c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800431e:	e009      	b.n	8004334 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004320:	f7fd fdce 	bl	8001ec0 <HAL_GetTick>
 8004324:	4602      	mov	r2, r0
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	1ad3      	subs	r3, r2, r3
 800432a:	2b02      	cmp	r3, #2
 800432c:	d902      	bls.n	8004334 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800432e:	2303      	movs	r3, #3
 8004330:	73fb      	strb	r3, [r7, #15]
        break;
 8004332:	e005      	b.n	8004340 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004334:	4b36      	ldr	r3, [pc, #216]	; (8004410 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800433c:	2b00      	cmp	r3, #0
 800433e:	d1ef      	bne.n	8004320 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004340:	7bfb      	ldrb	r3, [r7, #15]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d15f      	bne.n	8004406 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d110      	bne.n	800436e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800434c:	4b30      	ldr	r3, [pc, #192]	; (8004410 <RCCEx_PLLSAI1_Config+0x1e0>)
 800434e:	691b      	ldr	r3, [r3, #16]
 8004350:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004354:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004358:	687a      	ldr	r2, [r7, #4]
 800435a:	6892      	ldr	r2, [r2, #8]
 800435c:	0211      	lsls	r1, r2, #8
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	68d2      	ldr	r2, [r2, #12]
 8004362:	06d2      	lsls	r2, r2, #27
 8004364:	430a      	orrs	r2, r1
 8004366:	492a      	ldr	r1, [pc, #168]	; (8004410 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004368:	4313      	orrs	r3, r2
 800436a:	610b      	str	r3, [r1, #16]
 800436c:	e027      	b.n	80043be <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	2b01      	cmp	r3, #1
 8004372:	d112      	bne.n	800439a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004374:	4b26      	ldr	r3, [pc, #152]	; (8004410 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004376:	691b      	ldr	r3, [r3, #16]
 8004378:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800437c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004380:	687a      	ldr	r2, [r7, #4]
 8004382:	6892      	ldr	r2, [r2, #8]
 8004384:	0211      	lsls	r1, r2, #8
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	6912      	ldr	r2, [r2, #16]
 800438a:	0852      	lsrs	r2, r2, #1
 800438c:	3a01      	subs	r2, #1
 800438e:	0552      	lsls	r2, r2, #21
 8004390:	430a      	orrs	r2, r1
 8004392:	491f      	ldr	r1, [pc, #124]	; (8004410 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004394:	4313      	orrs	r3, r2
 8004396:	610b      	str	r3, [r1, #16]
 8004398:	e011      	b.n	80043be <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800439a:	4b1d      	ldr	r3, [pc, #116]	; (8004410 <RCCEx_PLLSAI1_Config+0x1e0>)
 800439c:	691b      	ldr	r3, [r3, #16]
 800439e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80043a2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80043a6:	687a      	ldr	r2, [r7, #4]
 80043a8:	6892      	ldr	r2, [r2, #8]
 80043aa:	0211      	lsls	r1, r2, #8
 80043ac:	687a      	ldr	r2, [r7, #4]
 80043ae:	6952      	ldr	r2, [r2, #20]
 80043b0:	0852      	lsrs	r2, r2, #1
 80043b2:	3a01      	subs	r2, #1
 80043b4:	0652      	lsls	r2, r2, #25
 80043b6:	430a      	orrs	r2, r1
 80043b8:	4915      	ldr	r1, [pc, #84]	; (8004410 <RCCEx_PLLSAI1_Config+0x1e0>)
 80043ba:	4313      	orrs	r3, r2
 80043bc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80043be:	4b14      	ldr	r3, [pc, #80]	; (8004410 <RCCEx_PLLSAI1_Config+0x1e0>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a13      	ldr	r2, [pc, #76]	; (8004410 <RCCEx_PLLSAI1_Config+0x1e0>)
 80043c4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80043c8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043ca:	f7fd fd79 	bl	8001ec0 <HAL_GetTick>
 80043ce:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80043d0:	e009      	b.n	80043e6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80043d2:	f7fd fd75 	bl	8001ec0 <HAL_GetTick>
 80043d6:	4602      	mov	r2, r0
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	1ad3      	subs	r3, r2, r3
 80043dc:	2b02      	cmp	r3, #2
 80043de:	d902      	bls.n	80043e6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80043e0:	2303      	movs	r3, #3
 80043e2:	73fb      	strb	r3, [r7, #15]
          break;
 80043e4:	e005      	b.n	80043f2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80043e6:	4b0a      	ldr	r3, [pc, #40]	; (8004410 <RCCEx_PLLSAI1_Config+0x1e0>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d0ef      	beq.n	80043d2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80043f2:	7bfb      	ldrb	r3, [r7, #15]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d106      	bne.n	8004406 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80043f8:	4b05      	ldr	r3, [pc, #20]	; (8004410 <RCCEx_PLLSAI1_Config+0x1e0>)
 80043fa:	691a      	ldr	r2, [r3, #16]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	699b      	ldr	r3, [r3, #24]
 8004400:	4903      	ldr	r1, [pc, #12]	; (8004410 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004402:	4313      	orrs	r3, r2
 8004404:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004406:	7bfb      	ldrb	r3, [r7, #15]
}
 8004408:	4618      	mov	r0, r3
 800440a:	3710      	adds	r7, #16
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}
 8004410:	40021000 	.word	0x40021000

08004414 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b084      	sub	sp, #16
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
 800441c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800441e:	2300      	movs	r3, #0
 8004420:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004422:	4b69      	ldr	r3, [pc, #420]	; (80045c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004424:	68db      	ldr	r3, [r3, #12]
 8004426:	f003 0303 	and.w	r3, r3, #3
 800442a:	2b00      	cmp	r3, #0
 800442c:	d018      	beq.n	8004460 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800442e:	4b66      	ldr	r3, [pc, #408]	; (80045c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	f003 0203 	and.w	r2, r3, #3
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	429a      	cmp	r2, r3
 800443c:	d10d      	bne.n	800445a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
       ||
 8004442:	2b00      	cmp	r3, #0
 8004444:	d009      	beq.n	800445a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004446:	4b60      	ldr	r3, [pc, #384]	; (80045c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004448:	68db      	ldr	r3, [r3, #12]
 800444a:	091b      	lsrs	r3, r3, #4
 800444c:	f003 0307 	and.w	r3, r3, #7
 8004450:	1c5a      	adds	r2, r3, #1
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	685b      	ldr	r3, [r3, #4]
       ||
 8004456:	429a      	cmp	r2, r3
 8004458:	d047      	beq.n	80044ea <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	73fb      	strb	r3, [r7, #15]
 800445e:	e044      	b.n	80044ea <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	2b03      	cmp	r3, #3
 8004466:	d018      	beq.n	800449a <RCCEx_PLLSAI2_Config+0x86>
 8004468:	2b03      	cmp	r3, #3
 800446a:	d825      	bhi.n	80044b8 <RCCEx_PLLSAI2_Config+0xa4>
 800446c:	2b01      	cmp	r3, #1
 800446e:	d002      	beq.n	8004476 <RCCEx_PLLSAI2_Config+0x62>
 8004470:	2b02      	cmp	r3, #2
 8004472:	d009      	beq.n	8004488 <RCCEx_PLLSAI2_Config+0x74>
 8004474:	e020      	b.n	80044b8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004476:	4b54      	ldr	r3, [pc, #336]	; (80045c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 0302 	and.w	r3, r3, #2
 800447e:	2b00      	cmp	r3, #0
 8004480:	d11d      	bne.n	80044be <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004486:	e01a      	b.n	80044be <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004488:	4b4f      	ldr	r3, [pc, #316]	; (80045c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004490:	2b00      	cmp	r3, #0
 8004492:	d116      	bne.n	80044c2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004498:	e013      	b.n	80044c2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800449a:	4b4b      	ldr	r3, [pc, #300]	; (80045c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d10f      	bne.n	80044c6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80044a6:	4b48      	ldr	r3, [pc, #288]	; (80045c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d109      	bne.n	80044c6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80044b6:	e006      	b.n	80044c6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	73fb      	strb	r3, [r7, #15]
      break;
 80044bc:	e004      	b.n	80044c8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80044be:	bf00      	nop
 80044c0:	e002      	b.n	80044c8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80044c2:	bf00      	nop
 80044c4:	e000      	b.n	80044c8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80044c6:	bf00      	nop
    }

    if(status == HAL_OK)
 80044c8:	7bfb      	ldrb	r3, [r7, #15]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d10d      	bne.n	80044ea <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80044ce:	4b3e      	ldr	r3, [pc, #248]	; (80045c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80044d0:	68db      	ldr	r3, [r3, #12]
 80044d2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6819      	ldr	r1, [r3, #0]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	3b01      	subs	r3, #1
 80044e0:	011b      	lsls	r3, r3, #4
 80044e2:	430b      	orrs	r3, r1
 80044e4:	4938      	ldr	r1, [pc, #224]	; (80045c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80044e6:	4313      	orrs	r3, r2
 80044e8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80044ea:	7bfb      	ldrb	r3, [r7, #15]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d166      	bne.n	80045be <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80044f0:	4b35      	ldr	r3, [pc, #212]	; (80045c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a34      	ldr	r2, [pc, #208]	; (80045c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80044f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044fc:	f7fd fce0 	bl	8001ec0 <HAL_GetTick>
 8004500:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004502:	e009      	b.n	8004518 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004504:	f7fd fcdc 	bl	8001ec0 <HAL_GetTick>
 8004508:	4602      	mov	r2, r0
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	1ad3      	subs	r3, r2, r3
 800450e:	2b02      	cmp	r3, #2
 8004510:	d902      	bls.n	8004518 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004512:	2303      	movs	r3, #3
 8004514:	73fb      	strb	r3, [r7, #15]
        break;
 8004516:	e005      	b.n	8004524 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004518:	4b2b      	ldr	r3, [pc, #172]	; (80045c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004520:	2b00      	cmp	r3, #0
 8004522:	d1ef      	bne.n	8004504 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004524:	7bfb      	ldrb	r3, [r7, #15]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d149      	bne.n	80045be <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d110      	bne.n	8004552 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004530:	4b25      	ldr	r3, [pc, #148]	; (80045c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004532:	695b      	ldr	r3, [r3, #20]
 8004534:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004538:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800453c:	687a      	ldr	r2, [r7, #4]
 800453e:	6892      	ldr	r2, [r2, #8]
 8004540:	0211      	lsls	r1, r2, #8
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	68d2      	ldr	r2, [r2, #12]
 8004546:	06d2      	lsls	r2, r2, #27
 8004548:	430a      	orrs	r2, r1
 800454a:	491f      	ldr	r1, [pc, #124]	; (80045c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800454c:	4313      	orrs	r3, r2
 800454e:	614b      	str	r3, [r1, #20]
 8004550:	e011      	b.n	8004576 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004552:	4b1d      	ldr	r3, [pc, #116]	; (80045c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004554:	695b      	ldr	r3, [r3, #20]
 8004556:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800455a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	6892      	ldr	r2, [r2, #8]
 8004562:	0211      	lsls	r1, r2, #8
 8004564:	687a      	ldr	r2, [r7, #4]
 8004566:	6912      	ldr	r2, [r2, #16]
 8004568:	0852      	lsrs	r2, r2, #1
 800456a:	3a01      	subs	r2, #1
 800456c:	0652      	lsls	r2, r2, #25
 800456e:	430a      	orrs	r2, r1
 8004570:	4915      	ldr	r1, [pc, #84]	; (80045c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004572:	4313      	orrs	r3, r2
 8004574:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004576:	4b14      	ldr	r3, [pc, #80]	; (80045c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a13      	ldr	r2, [pc, #76]	; (80045c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 800457c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004580:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004582:	f7fd fc9d 	bl	8001ec0 <HAL_GetTick>
 8004586:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004588:	e009      	b.n	800459e <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800458a:	f7fd fc99 	bl	8001ec0 <HAL_GetTick>
 800458e:	4602      	mov	r2, r0
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	1ad3      	subs	r3, r2, r3
 8004594:	2b02      	cmp	r3, #2
 8004596:	d902      	bls.n	800459e <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8004598:	2303      	movs	r3, #3
 800459a:	73fb      	strb	r3, [r7, #15]
          break;
 800459c:	e005      	b.n	80045aa <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800459e:	4b0a      	ldr	r3, [pc, #40]	; (80045c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d0ef      	beq.n	800458a <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 80045aa:	7bfb      	ldrb	r3, [r7, #15]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d106      	bne.n	80045be <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80045b0:	4b05      	ldr	r3, [pc, #20]	; (80045c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80045b2:	695a      	ldr	r2, [r3, #20]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	695b      	ldr	r3, [r3, #20]
 80045b8:	4903      	ldr	r1, [pc, #12]	; (80045c8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80045ba:	4313      	orrs	r3, r2
 80045bc:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80045be:	7bfb      	ldrb	r3, [r7, #15]
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	3710      	adds	r7, #16
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}
 80045c8:	40021000 	.word	0x40021000

080045cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b082      	sub	sp, #8
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d101      	bne.n	80045de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e040      	b.n	8004660 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d106      	bne.n	80045f4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2200      	movs	r2, #0
 80045ea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f7fc f9ce 	bl	8000990 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2224      	movs	r2, #36	; 0x24
 80045f8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f022 0201 	bic.w	r2, r2, #1
 8004608:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f000 f8c0 	bl	8004790 <UART_SetConfig>
 8004610:	4603      	mov	r3, r0
 8004612:	2b01      	cmp	r3, #1
 8004614:	d101      	bne.n	800461a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e022      	b.n	8004660 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461e:	2b00      	cmp	r3, #0
 8004620:	d002      	beq.n	8004628 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f000 fb6c 	bl	8004d00 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	685a      	ldr	r2, [r3, #4]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004636:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	689a      	ldr	r2, [r3, #8]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004646:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f042 0201 	orr.w	r2, r2, #1
 8004656:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f000 fbf3 	bl	8004e44 <UART_CheckIdleState>
 800465e:	4603      	mov	r3, r0
}
 8004660:	4618      	mov	r0, r3
 8004662:	3708      	adds	r7, #8
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}

08004668 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b08a      	sub	sp, #40	; 0x28
 800466c:	af02      	add	r7, sp, #8
 800466e:	60f8      	str	r0, [r7, #12]
 8004670:	60b9      	str	r1, [r7, #8]
 8004672:	603b      	str	r3, [r7, #0]
 8004674:	4613      	mov	r3, r2
 8004676:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800467c:	2b20      	cmp	r3, #32
 800467e:	f040 8082 	bne.w	8004786 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d002      	beq.n	800468e <HAL_UART_Transmit+0x26>
 8004688:	88fb      	ldrh	r3, [r7, #6]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d101      	bne.n	8004692 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	e07a      	b.n	8004788 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004698:	2b01      	cmp	r3, #1
 800469a:	d101      	bne.n	80046a0 <HAL_UART_Transmit+0x38>
 800469c:	2302      	movs	r3, #2
 800469e:	e073      	b.n	8004788 <HAL_UART_Transmit+0x120>
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2201      	movs	r2, #1
 80046a4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2200      	movs	r2, #0
 80046ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2221      	movs	r2, #33	; 0x21
 80046b4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80046b6:	f7fd fc03 	bl	8001ec0 <HAL_GetTick>
 80046ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	88fa      	ldrh	r2, [r7, #6]
 80046c0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	88fa      	ldrh	r2, [r7, #6]
 80046c8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046d4:	d108      	bne.n	80046e8 <HAL_UART_Transmit+0x80>
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	691b      	ldr	r3, [r3, #16]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d104      	bne.n	80046e8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80046de:	2300      	movs	r3, #0
 80046e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	61bb      	str	r3, [r7, #24]
 80046e6:	e003      	b.n	80046f0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80046ec:	2300      	movs	r3, #0
 80046ee:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2200      	movs	r2, #0
 80046f4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80046f8:	e02d      	b.n	8004756 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	9300      	str	r3, [sp, #0]
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	2200      	movs	r2, #0
 8004702:	2180      	movs	r1, #128	; 0x80
 8004704:	68f8      	ldr	r0, [r7, #12]
 8004706:	f000 fbe6 	bl	8004ed6 <UART_WaitOnFlagUntilTimeout>
 800470a:	4603      	mov	r3, r0
 800470c:	2b00      	cmp	r3, #0
 800470e:	d001      	beq.n	8004714 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004710:	2303      	movs	r3, #3
 8004712:	e039      	b.n	8004788 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004714:	69fb      	ldr	r3, [r7, #28]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d10b      	bne.n	8004732 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800471a:	69bb      	ldr	r3, [r7, #24]
 800471c:	881a      	ldrh	r2, [r3, #0]
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004726:	b292      	uxth	r2, r2
 8004728:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800472a:	69bb      	ldr	r3, [r7, #24]
 800472c:	3302      	adds	r3, #2
 800472e:	61bb      	str	r3, [r7, #24]
 8004730:	e008      	b.n	8004744 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004732:	69fb      	ldr	r3, [r7, #28]
 8004734:	781a      	ldrb	r2, [r3, #0]
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	b292      	uxth	r2, r2
 800473c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800473e:	69fb      	ldr	r3, [r7, #28]
 8004740:	3301      	adds	r3, #1
 8004742:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800474a:	b29b      	uxth	r3, r3
 800474c:	3b01      	subs	r3, #1
 800474e:	b29a      	uxth	r2, r3
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800475c:	b29b      	uxth	r3, r3
 800475e:	2b00      	cmp	r3, #0
 8004760:	d1cb      	bne.n	80046fa <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	9300      	str	r3, [sp, #0]
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	2200      	movs	r2, #0
 800476a:	2140      	movs	r1, #64	; 0x40
 800476c:	68f8      	ldr	r0, [r7, #12]
 800476e:	f000 fbb2 	bl	8004ed6 <UART_WaitOnFlagUntilTimeout>
 8004772:	4603      	mov	r3, r0
 8004774:	2b00      	cmp	r3, #0
 8004776:	d001      	beq.n	800477c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004778:	2303      	movs	r3, #3
 800477a:	e005      	b.n	8004788 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2220      	movs	r2, #32
 8004780:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004782:	2300      	movs	r3, #0
 8004784:	e000      	b.n	8004788 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004786:	2302      	movs	r3, #2
  }
}
 8004788:	4618      	mov	r0, r3
 800478a:	3720      	adds	r7, #32
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}

08004790 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004790:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004794:	b08a      	sub	sp, #40	; 0x28
 8004796:	af00      	add	r7, sp, #0
 8004798:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800479a:	2300      	movs	r3, #0
 800479c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	689a      	ldr	r2, [r3, #8]
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	691b      	ldr	r3, [r3, #16]
 80047a8:	431a      	orrs	r2, r3
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	695b      	ldr	r3, [r3, #20]
 80047ae:	431a      	orrs	r2, r3
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	69db      	ldr	r3, [r3, #28]
 80047b4:	4313      	orrs	r3, r2
 80047b6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	4ba4      	ldr	r3, [pc, #656]	; (8004a50 <UART_SetConfig+0x2c0>)
 80047c0:	4013      	ands	r3, r2
 80047c2:	68fa      	ldr	r2, [r7, #12]
 80047c4:	6812      	ldr	r2, [r2, #0]
 80047c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80047c8:	430b      	orrs	r3, r1
 80047ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	68da      	ldr	r2, [r3, #12]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	430a      	orrs	r2, r1
 80047e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	699b      	ldr	r3, [r3, #24]
 80047e6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a99      	ldr	r2, [pc, #612]	; (8004a54 <UART_SetConfig+0x2c4>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d004      	beq.n	80047fc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	6a1b      	ldr	r3, [r3, #32]
 80047f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047f8:	4313      	orrs	r3, r2
 80047fa:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800480c:	430a      	orrs	r2, r1
 800480e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a90      	ldr	r2, [pc, #576]	; (8004a58 <UART_SetConfig+0x2c8>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d126      	bne.n	8004868 <UART_SetConfig+0xd8>
 800481a:	4b90      	ldr	r3, [pc, #576]	; (8004a5c <UART_SetConfig+0x2cc>)
 800481c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004820:	f003 0303 	and.w	r3, r3, #3
 8004824:	2b03      	cmp	r3, #3
 8004826:	d81b      	bhi.n	8004860 <UART_SetConfig+0xd0>
 8004828:	a201      	add	r2, pc, #4	; (adr r2, 8004830 <UART_SetConfig+0xa0>)
 800482a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800482e:	bf00      	nop
 8004830:	08004841 	.word	0x08004841
 8004834:	08004851 	.word	0x08004851
 8004838:	08004849 	.word	0x08004849
 800483c:	08004859 	.word	0x08004859
 8004840:	2301      	movs	r3, #1
 8004842:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004846:	e116      	b.n	8004a76 <UART_SetConfig+0x2e6>
 8004848:	2302      	movs	r3, #2
 800484a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800484e:	e112      	b.n	8004a76 <UART_SetConfig+0x2e6>
 8004850:	2304      	movs	r3, #4
 8004852:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004856:	e10e      	b.n	8004a76 <UART_SetConfig+0x2e6>
 8004858:	2308      	movs	r3, #8
 800485a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800485e:	e10a      	b.n	8004a76 <UART_SetConfig+0x2e6>
 8004860:	2310      	movs	r3, #16
 8004862:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004866:	e106      	b.n	8004a76 <UART_SetConfig+0x2e6>
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a7c      	ldr	r2, [pc, #496]	; (8004a60 <UART_SetConfig+0x2d0>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d138      	bne.n	80048e4 <UART_SetConfig+0x154>
 8004872:	4b7a      	ldr	r3, [pc, #488]	; (8004a5c <UART_SetConfig+0x2cc>)
 8004874:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004878:	f003 030c 	and.w	r3, r3, #12
 800487c:	2b0c      	cmp	r3, #12
 800487e:	d82d      	bhi.n	80048dc <UART_SetConfig+0x14c>
 8004880:	a201      	add	r2, pc, #4	; (adr r2, 8004888 <UART_SetConfig+0xf8>)
 8004882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004886:	bf00      	nop
 8004888:	080048bd 	.word	0x080048bd
 800488c:	080048dd 	.word	0x080048dd
 8004890:	080048dd 	.word	0x080048dd
 8004894:	080048dd 	.word	0x080048dd
 8004898:	080048cd 	.word	0x080048cd
 800489c:	080048dd 	.word	0x080048dd
 80048a0:	080048dd 	.word	0x080048dd
 80048a4:	080048dd 	.word	0x080048dd
 80048a8:	080048c5 	.word	0x080048c5
 80048ac:	080048dd 	.word	0x080048dd
 80048b0:	080048dd 	.word	0x080048dd
 80048b4:	080048dd 	.word	0x080048dd
 80048b8:	080048d5 	.word	0x080048d5
 80048bc:	2300      	movs	r3, #0
 80048be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048c2:	e0d8      	b.n	8004a76 <UART_SetConfig+0x2e6>
 80048c4:	2302      	movs	r3, #2
 80048c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048ca:	e0d4      	b.n	8004a76 <UART_SetConfig+0x2e6>
 80048cc:	2304      	movs	r3, #4
 80048ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048d2:	e0d0      	b.n	8004a76 <UART_SetConfig+0x2e6>
 80048d4:	2308      	movs	r3, #8
 80048d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048da:	e0cc      	b.n	8004a76 <UART_SetConfig+0x2e6>
 80048dc:	2310      	movs	r3, #16
 80048de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048e2:	e0c8      	b.n	8004a76 <UART_SetConfig+0x2e6>
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a5e      	ldr	r2, [pc, #376]	; (8004a64 <UART_SetConfig+0x2d4>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d125      	bne.n	800493a <UART_SetConfig+0x1aa>
 80048ee:	4b5b      	ldr	r3, [pc, #364]	; (8004a5c <UART_SetConfig+0x2cc>)
 80048f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048f4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80048f8:	2b30      	cmp	r3, #48	; 0x30
 80048fa:	d016      	beq.n	800492a <UART_SetConfig+0x19a>
 80048fc:	2b30      	cmp	r3, #48	; 0x30
 80048fe:	d818      	bhi.n	8004932 <UART_SetConfig+0x1a2>
 8004900:	2b20      	cmp	r3, #32
 8004902:	d00a      	beq.n	800491a <UART_SetConfig+0x18a>
 8004904:	2b20      	cmp	r3, #32
 8004906:	d814      	bhi.n	8004932 <UART_SetConfig+0x1a2>
 8004908:	2b00      	cmp	r3, #0
 800490a:	d002      	beq.n	8004912 <UART_SetConfig+0x182>
 800490c:	2b10      	cmp	r3, #16
 800490e:	d008      	beq.n	8004922 <UART_SetConfig+0x192>
 8004910:	e00f      	b.n	8004932 <UART_SetConfig+0x1a2>
 8004912:	2300      	movs	r3, #0
 8004914:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004918:	e0ad      	b.n	8004a76 <UART_SetConfig+0x2e6>
 800491a:	2302      	movs	r3, #2
 800491c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004920:	e0a9      	b.n	8004a76 <UART_SetConfig+0x2e6>
 8004922:	2304      	movs	r3, #4
 8004924:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004928:	e0a5      	b.n	8004a76 <UART_SetConfig+0x2e6>
 800492a:	2308      	movs	r3, #8
 800492c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004930:	e0a1      	b.n	8004a76 <UART_SetConfig+0x2e6>
 8004932:	2310      	movs	r3, #16
 8004934:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004938:	e09d      	b.n	8004a76 <UART_SetConfig+0x2e6>
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a4a      	ldr	r2, [pc, #296]	; (8004a68 <UART_SetConfig+0x2d8>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d125      	bne.n	8004990 <UART_SetConfig+0x200>
 8004944:	4b45      	ldr	r3, [pc, #276]	; (8004a5c <UART_SetConfig+0x2cc>)
 8004946:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800494a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800494e:	2bc0      	cmp	r3, #192	; 0xc0
 8004950:	d016      	beq.n	8004980 <UART_SetConfig+0x1f0>
 8004952:	2bc0      	cmp	r3, #192	; 0xc0
 8004954:	d818      	bhi.n	8004988 <UART_SetConfig+0x1f8>
 8004956:	2b80      	cmp	r3, #128	; 0x80
 8004958:	d00a      	beq.n	8004970 <UART_SetConfig+0x1e0>
 800495a:	2b80      	cmp	r3, #128	; 0x80
 800495c:	d814      	bhi.n	8004988 <UART_SetConfig+0x1f8>
 800495e:	2b00      	cmp	r3, #0
 8004960:	d002      	beq.n	8004968 <UART_SetConfig+0x1d8>
 8004962:	2b40      	cmp	r3, #64	; 0x40
 8004964:	d008      	beq.n	8004978 <UART_SetConfig+0x1e8>
 8004966:	e00f      	b.n	8004988 <UART_SetConfig+0x1f8>
 8004968:	2300      	movs	r3, #0
 800496a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800496e:	e082      	b.n	8004a76 <UART_SetConfig+0x2e6>
 8004970:	2302      	movs	r3, #2
 8004972:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004976:	e07e      	b.n	8004a76 <UART_SetConfig+0x2e6>
 8004978:	2304      	movs	r3, #4
 800497a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800497e:	e07a      	b.n	8004a76 <UART_SetConfig+0x2e6>
 8004980:	2308      	movs	r3, #8
 8004982:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004986:	e076      	b.n	8004a76 <UART_SetConfig+0x2e6>
 8004988:	2310      	movs	r3, #16
 800498a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800498e:	e072      	b.n	8004a76 <UART_SetConfig+0x2e6>
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a35      	ldr	r2, [pc, #212]	; (8004a6c <UART_SetConfig+0x2dc>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d12a      	bne.n	80049f0 <UART_SetConfig+0x260>
 800499a:	4b30      	ldr	r3, [pc, #192]	; (8004a5c <UART_SetConfig+0x2cc>)
 800499c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049a8:	d01a      	beq.n	80049e0 <UART_SetConfig+0x250>
 80049aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049ae:	d81b      	bhi.n	80049e8 <UART_SetConfig+0x258>
 80049b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049b4:	d00c      	beq.n	80049d0 <UART_SetConfig+0x240>
 80049b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049ba:	d815      	bhi.n	80049e8 <UART_SetConfig+0x258>
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d003      	beq.n	80049c8 <UART_SetConfig+0x238>
 80049c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049c4:	d008      	beq.n	80049d8 <UART_SetConfig+0x248>
 80049c6:	e00f      	b.n	80049e8 <UART_SetConfig+0x258>
 80049c8:	2300      	movs	r3, #0
 80049ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049ce:	e052      	b.n	8004a76 <UART_SetConfig+0x2e6>
 80049d0:	2302      	movs	r3, #2
 80049d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049d6:	e04e      	b.n	8004a76 <UART_SetConfig+0x2e6>
 80049d8:	2304      	movs	r3, #4
 80049da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049de:	e04a      	b.n	8004a76 <UART_SetConfig+0x2e6>
 80049e0:	2308      	movs	r3, #8
 80049e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049e6:	e046      	b.n	8004a76 <UART_SetConfig+0x2e6>
 80049e8:	2310      	movs	r3, #16
 80049ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049ee:	e042      	b.n	8004a76 <UART_SetConfig+0x2e6>
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a17      	ldr	r2, [pc, #92]	; (8004a54 <UART_SetConfig+0x2c4>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d13a      	bne.n	8004a70 <UART_SetConfig+0x2e0>
 80049fa:	4b18      	ldr	r3, [pc, #96]	; (8004a5c <UART_SetConfig+0x2cc>)
 80049fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a00:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004a04:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a08:	d01a      	beq.n	8004a40 <UART_SetConfig+0x2b0>
 8004a0a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a0e:	d81b      	bhi.n	8004a48 <UART_SetConfig+0x2b8>
 8004a10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a14:	d00c      	beq.n	8004a30 <UART_SetConfig+0x2a0>
 8004a16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a1a:	d815      	bhi.n	8004a48 <UART_SetConfig+0x2b8>
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d003      	beq.n	8004a28 <UART_SetConfig+0x298>
 8004a20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a24:	d008      	beq.n	8004a38 <UART_SetConfig+0x2a8>
 8004a26:	e00f      	b.n	8004a48 <UART_SetConfig+0x2b8>
 8004a28:	2300      	movs	r3, #0
 8004a2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a2e:	e022      	b.n	8004a76 <UART_SetConfig+0x2e6>
 8004a30:	2302      	movs	r3, #2
 8004a32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a36:	e01e      	b.n	8004a76 <UART_SetConfig+0x2e6>
 8004a38:	2304      	movs	r3, #4
 8004a3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a3e:	e01a      	b.n	8004a76 <UART_SetConfig+0x2e6>
 8004a40:	2308      	movs	r3, #8
 8004a42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a46:	e016      	b.n	8004a76 <UART_SetConfig+0x2e6>
 8004a48:	2310      	movs	r3, #16
 8004a4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a4e:	e012      	b.n	8004a76 <UART_SetConfig+0x2e6>
 8004a50:	efff69f3 	.word	0xefff69f3
 8004a54:	40008000 	.word	0x40008000
 8004a58:	40013800 	.word	0x40013800
 8004a5c:	40021000 	.word	0x40021000
 8004a60:	40004400 	.word	0x40004400
 8004a64:	40004800 	.word	0x40004800
 8004a68:	40004c00 	.word	0x40004c00
 8004a6c:	40005000 	.word	0x40005000
 8004a70:	2310      	movs	r3, #16
 8004a72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a9f      	ldr	r2, [pc, #636]	; (8004cf8 <UART_SetConfig+0x568>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d17a      	bne.n	8004b76 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004a80:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004a84:	2b08      	cmp	r3, #8
 8004a86:	d824      	bhi.n	8004ad2 <UART_SetConfig+0x342>
 8004a88:	a201      	add	r2, pc, #4	; (adr r2, 8004a90 <UART_SetConfig+0x300>)
 8004a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a8e:	bf00      	nop
 8004a90:	08004ab5 	.word	0x08004ab5
 8004a94:	08004ad3 	.word	0x08004ad3
 8004a98:	08004abd 	.word	0x08004abd
 8004a9c:	08004ad3 	.word	0x08004ad3
 8004aa0:	08004ac3 	.word	0x08004ac3
 8004aa4:	08004ad3 	.word	0x08004ad3
 8004aa8:	08004ad3 	.word	0x08004ad3
 8004aac:	08004ad3 	.word	0x08004ad3
 8004ab0:	08004acb 	.word	0x08004acb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ab4:	f7ff f834 	bl	8003b20 <HAL_RCC_GetPCLK1Freq>
 8004ab8:	61f8      	str	r0, [r7, #28]
        break;
 8004aba:	e010      	b.n	8004ade <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004abc:	4b8f      	ldr	r3, [pc, #572]	; (8004cfc <UART_SetConfig+0x56c>)
 8004abe:	61fb      	str	r3, [r7, #28]
        break;
 8004ac0:	e00d      	b.n	8004ade <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ac2:	f7fe ff95 	bl	80039f0 <HAL_RCC_GetSysClockFreq>
 8004ac6:	61f8      	str	r0, [r7, #28]
        break;
 8004ac8:	e009      	b.n	8004ade <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004aca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ace:	61fb      	str	r3, [r7, #28]
        break;
 8004ad0:	e005      	b.n	8004ade <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004adc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004ade:	69fb      	ldr	r3, [r7, #28]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	f000 80fb 	beq.w	8004cdc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	685a      	ldr	r2, [r3, #4]
 8004aea:	4613      	mov	r3, r2
 8004aec:	005b      	lsls	r3, r3, #1
 8004aee:	4413      	add	r3, r2
 8004af0:	69fa      	ldr	r2, [r7, #28]
 8004af2:	429a      	cmp	r2, r3
 8004af4:	d305      	bcc.n	8004b02 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004afc:	69fa      	ldr	r2, [r7, #28]
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d903      	bls.n	8004b0a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004b08:	e0e8      	b.n	8004cdc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004b0a:	69fb      	ldr	r3, [r7, #28]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	461c      	mov	r4, r3
 8004b10:	4615      	mov	r5, r2
 8004b12:	f04f 0200 	mov.w	r2, #0
 8004b16:	f04f 0300 	mov.w	r3, #0
 8004b1a:	022b      	lsls	r3, r5, #8
 8004b1c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004b20:	0222      	lsls	r2, r4, #8
 8004b22:	68f9      	ldr	r1, [r7, #12]
 8004b24:	6849      	ldr	r1, [r1, #4]
 8004b26:	0849      	lsrs	r1, r1, #1
 8004b28:	2000      	movs	r0, #0
 8004b2a:	4688      	mov	r8, r1
 8004b2c:	4681      	mov	r9, r0
 8004b2e:	eb12 0a08 	adds.w	sl, r2, r8
 8004b32:	eb43 0b09 	adc.w	fp, r3, r9
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	603b      	str	r3, [r7, #0]
 8004b3e:	607a      	str	r2, [r7, #4]
 8004b40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b44:	4650      	mov	r0, sl
 8004b46:	4659      	mov	r1, fp
 8004b48:	f7fb fba2 	bl	8000290 <__aeabi_uldivmod>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	460b      	mov	r3, r1
 8004b50:	4613      	mov	r3, r2
 8004b52:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004b54:	69bb      	ldr	r3, [r7, #24]
 8004b56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b5a:	d308      	bcc.n	8004b6e <UART_SetConfig+0x3de>
 8004b5c:	69bb      	ldr	r3, [r7, #24]
 8004b5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b62:	d204      	bcs.n	8004b6e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	69ba      	ldr	r2, [r7, #24]
 8004b6a:	60da      	str	r2, [r3, #12]
 8004b6c:	e0b6      	b.n	8004cdc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004b74:	e0b2      	b.n	8004cdc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	69db      	ldr	r3, [r3, #28]
 8004b7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b7e:	d15e      	bne.n	8004c3e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004b80:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004b84:	2b08      	cmp	r3, #8
 8004b86:	d828      	bhi.n	8004bda <UART_SetConfig+0x44a>
 8004b88:	a201      	add	r2, pc, #4	; (adr r2, 8004b90 <UART_SetConfig+0x400>)
 8004b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b8e:	bf00      	nop
 8004b90:	08004bb5 	.word	0x08004bb5
 8004b94:	08004bbd 	.word	0x08004bbd
 8004b98:	08004bc5 	.word	0x08004bc5
 8004b9c:	08004bdb 	.word	0x08004bdb
 8004ba0:	08004bcb 	.word	0x08004bcb
 8004ba4:	08004bdb 	.word	0x08004bdb
 8004ba8:	08004bdb 	.word	0x08004bdb
 8004bac:	08004bdb 	.word	0x08004bdb
 8004bb0:	08004bd3 	.word	0x08004bd3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bb4:	f7fe ffb4 	bl	8003b20 <HAL_RCC_GetPCLK1Freq>
 8004bb8:	61f8      	str	r0, [r7, #28]
        break;
 8004bba:	e014      	b.n	8004be6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004bbc:	f7fe ffc6 	bl	8003b4c <HAL_RCC_GetPCLK2Freq>
 8004bc0:	61f8      	str	r0, [r7, #28]
        break;
 8004bc2:	e010      	b.n	8004be6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bc4:	4b4d      	ldr	r3, [pc, #308]	; (8004cfc <UART_SetConfig+0x56c>)
 8004bc6:	61fb      	str	r3, [r7, #28]
        break;
 8004bc8:	e00d      	b.n	8004be6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bca:	f7fe ff11 	bl	80039f0 <HAL_RCC_GetSysClockFreq>
 8004bce:	61f8      	str	r0, [r7, #28]
        break;
 8004bd0:	e009      	b.n	8004be6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bd6:	61fb      	str	r3, [r7, #28]
        break;
 8004bd8:	e005      	b.n	8004be6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004be4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004be6:	69fb      	ldr	r3, [r7, #28]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d077      	beq.n	8004cdc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004bec:	69fb      	ldr	r3, [r7, #28]
 8004bee:	005a      	lsls	r2, r3, #1
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	085b      	lsrs	r3, r3, #1
 8004bf6:	441a      	add	r2, r3
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c00:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c02:	69bb      	ldr	r3, [r7, #24]
 8004c04:	2b0f      	cmp	r3, #15
 8004c06:	d916      	bls.n	8004c36 <UART_SetConfig+0x4a6>
 8004c08:	69bb      	ldr	r3, [r7, #24]
 8004c0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c0e:	d212      	bcs.n	8004c36 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c10:	69bb      	ldr	r3, [r7, #24]
 8004c12:	b29b      	uxth	r3, r3
 8004c14:	f023 030f 	bic.w	r3, r3, #15
 8004c18:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c1a:	69bb      	ldr	r3, [r7, #24]
 8004c1c:	085b      	lsrs	r3, r3, #1
 8004c1e:	b29b      	uxth	r3, r3
 8004c20:	f003 0307 	and.w	r3, r3, #7
 8004c24:	b29a      	uxth	r2, r3
 8004c26:	8afb      	ldrh	r3, [r7, #22]
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	8afa      	ldrh	r2, [r7, #22]
 8004c32:	60da      	str	r2, [r3, #12]
 8004c34:	e052      	b.n	8004cdc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004c3c:	e04e      	b.n	8004cdc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004c3e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004c42:	2b08      	cmp	r3, #8
 8004c44:	d827      	bhi.n	8004c96 <UART_SetConfig+0x506>
 8004c46:	a201      	add	r2, pc, #4	; (adr r2, 8004c4c <UART_SetConfig+0x4bc>)
 8004c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c4c:	08004c71 	.word	0x08004c71
 8004c50:	08004c79 	.word	0x08004c79
 8004c54:	08004c81 	.word	0x08004c81
 8004c58:	08004c97 	.word	0x08004c97
 8004c5c:	08004c87 	.word	0x08004c87
 8004c60:	08004c97 	.word	0x08004c97
 8004c64:	08004c97 	.word	0x08004c97
 8004c68:	08004c97 	.word	0x08004c97
 8004c6c:	08004c8f 	.word	0x08004c8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c70:	f7fe ff56 	bl	8003b20 <HAL_RCC_GetPCLK1Freq>
 8004c74:	61f8      	str	r0, [r7, #28]
        break;
 8004c76:	e014      	b.n	8004ca2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c78:	f7fe ff68 	bl	8003b4c <HAL_RCC_GetPCLK2Freq>
 8004c7c:	61f8      	str	r0, [r7, #28]
        break;
 8004c7e:	e010      	b.n	8004ca2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c80:	4b1e      	ldr	r3, [pc, #120]	; (8004cfc <UART_SetConfig+0x56c>)
 8004c82:	61fb      	str	r3, [r7, #28]
        break;
 8004c84:	e00d      	b.n	8004ca2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c86:	f7fe feb3 	bl	80039f0 <HAL_RCC_GetSysClockFreq>
 8004c8a:	61f8      	str	r0, [r7, #28]
        break;
 8004c8c:	e009      	b.n	8004ca2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c92:	61fb      	str	r3, [r7, #28]
        break;
 8004c94:	e005      	b.n	8004ca2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004c96:	2300      	movs	r3, #0
 8004c98:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004ca0:	bf00      	nop
    }

    if (pclk != 0U)
 8004ca2:	69fb      	ldr	r3, [r7, #28]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d019      	beq.n	8004cdc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	085a      	lsrs	r2, r3, #1
 8004cae:	69fb      	ldr	r3, [r7, #28]
 8004cb0:	441a      	add	r2, r3
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cba:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004cbc:	69bb      	ldr	r3, [r7, #24]
 8004cbe:	2b0f      	cmp	r3, #15
 8004cc0:	d909      	bls.n	8004cd6 <UART_SetConfig+0x546>
 8004cc2:	69bb      	ldr	r3, [r7, #24]
 8004cc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cc8:	d205      	bcs.n	8004cd6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004cca:	69bb      	ldr	r3, [r7, #24]
 8004ccc:	b29a      	uxth	r2, r3
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	60da      	str	r2, [r3, #12]
 8004cd4:	e002      	b.n	8004cdc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004ce8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	3728      	adds	r7, #40	; 0x28
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004cf6:	bf00      	nop
 8004cf8:	40008000 	.word	0x40008000
 8004cfc:	00f42400 	.word	0x00f42400

08004d00 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b083      	sub	sp, #12
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d0c:	f003 0301 	and.w	r3, r3, #1
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d00a      	beq.n	8004d2a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	430a      	orrs	r2, r1
 8004d28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2e:	f003 0302 	and.w	r3, r3, #2
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d00a      	beq.n	8004d4c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	430a      	orrs	r2, r1
 8004d4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d50:	f003 0304 	and.w	r3, r3, #4
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d00a      	beq.n	8004d6e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	430a      	orrs	r2, r1
 8004d6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d72:	f003 0308 	and.w	r3, r3, #8
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d00a      	beq.n	8004d90 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	430a      	orrs	r2, r1
 8004d8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d94:	f003 0310 	and.w	r3, r3, #16
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d00a      	beq.n	8004db2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	430a      	orrs	r2, r1
 8004db0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db6:	f003 0320 	and.w	r3, r3, #32
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d00a      	beq.n	8004dd4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	430a      	orrs	r2, r1
 8004dd2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d01a      	beq.n	8004e16 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	430a      	orrs	r2, r1
 8004df4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dfa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004dfe:	d10a      	bne.n	8004e16 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	430a      	orrs	r2, r1
 8004e14:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d00a      	beq.n	8004e38 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	430a      	orrs	r2, r1
 8004e36:	605a      	str	r2, [r3, #4]
  }
}
 8004e38:	bf00      	nop
 8004e3a:	370c      	adds	r7, #12
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr

08004e44 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b086      	sub	sp, #24
 8004e48:	af02      	add	r7, sp, #8
 8004e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004e54:	f7fd f834 	bl	8001ec0 <HAL_GetTick>
 8004e58:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f003 0308 	and.w	r3, r3, #8
 8004e64:	2b08      	cmp	r3, #8
 8004e66:	d10e      	bne.n	8004e86 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e68:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e6c:	9300      	str	r3, [sp, #0]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2200      	movs	r2, #0
 8004e72:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f000 f82d 	bl	8004ed6 <UART_WaitOnFlagUntilTimeout>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d001      	beq.n	8004e86 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e82:	2303      	movs	r3, #3
 8004e84:	e023      	b.n	8004ece <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f003 0304 	and.w	r3, r3, #4
 8004e90:	2b04      	cmp	r3, #4
 8004e92:	d10e      	bne.n	8004eb2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e94:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e98:	9300      	str	r3, [sp, #0]
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f000 f817 	bl	8004ed6 <UART_WaitOnFlagUntilTimeout>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d001      	beq.n	8004eb2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004eae:	2303      	movs	r3, #3
 8004eb0:	e00d      	b.n	8004ece <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2220      	movs	r2, #32
 8004eb6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2220      	movs	r2, #32
 8004ebc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004ecc:	2300      	movs	r3, #0
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3710      	adds	r7, #16
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}

08004ed6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004ed6:	b580      	push	{r7, lr}
 8004ed8:	b09c      	sub	sp, #112	; 0x70
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	60f8      	str	r0, [r7, #12]
 8004ede:	60b9      	str	r1, [r7, #8]
 8004ee0:	603b      	str	r3, [r7, #0]
 8004ee2:	4613      	mov	r3, r2
 8004ee4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ee6:	e0a5      	b.n	8005034 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ee8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004eea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004eee:	f000 80a1 	beq.w	8005034 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ef2:	f7fc ffe5 	bl	8001ec0 <HAL_GetTick>
 8004ef6:	4602      	mov	r2, r0
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	1ad3      	subs	r3, r2, r3
 8004efc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004efe:	429a      	cmp	r2, r3
 8004f00:	d302      	bcc.n	8004f08 <UART_WaitOnFlagUntilTimeout+0x32>
 8004f02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d13e      	bne.n	8004f86 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f10:	e853 3f00 	ldrex	r3, [r3]
 8004f14:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004f16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f18:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004f1c:	667b      	str	r3, [r7, #100]	; 0x64
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	461a      	mov	r2, r3
 8004f24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f26:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f28:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f2a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004f2c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004f2e:	e841 2300 	strex	r3, r2, [r1]
 8004f32:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004f34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d1e6      	bne.n	8004f08 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	3308      	adds	r3, #8
 8004f40:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f44:	e853 3f00 	ldrex	r3, [r3]
 8004f48:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f4c:	f023 0301 	bic.w	r3, r3, #1
 8004f50:	663b      	str	r3, [r7, #96]	; 0x60
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	3308      	adds	r3, #8
 8004f58:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004f5a:	64ba      	str	r2, [r7, #72]	; 0x48
 8004f5c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f5e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004f60:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f62:	e841 2300 	strex	r3, r2, [r1]
 8004f66:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004f68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d1e5      	bne.n	8004f3a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2220      	movs	r2, #32
 8004f72:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2220      	movs	r2, #32
 8004f78:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004f82:	2303      	movs	r3, #3
 8004f84:	e067      	b.n	8005056 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f003 0304 	and.w	r3, r3, #4
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d04f      	beq.n	8005034 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	69db      	ldr	r3, [r3, #28]
 8004f9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fa2:	d147      	bne.n	8005034 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004fac:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fb6:	e853 3f00 	ldrex	r3, [r3]
 8004fba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fbe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004fc2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	461a      	mov	r2, r3
 8004fca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fcc:	637b      	str	r3, [r7, #52]	; 0x34
 8004fce:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fd0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004fd2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004fd4:	e841 2300 	strex	r3, r2, [r1]
 8004fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d1e6      	bne.n	8004fae <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	3308      	adds	r3, #8
 8004fe6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	e853 3f00 	ldrex	r3, [r3]
 8004fee:	613b      	str	r3, [r7, #16]
   return(result);
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	f023 0301 	bic.w	r3, r3, #1
 8004ff6:	66bb      	str	r3, [r7, #104]	; 0x68
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	3308      	adds	r3, #8
 8004ffe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005000:	623a      	str	r2, [r7, #32]
 8005002:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005004:	69f9      	ldr	r1, [r7, #28]
 8005006:	6a3a      	ldr	r2, [r7, #32]
 8005008:	e841 2300 	strex	r3, r2, [r1]
 800500c:	61bb      	str	r3, [r7, #24]
   return(result);
 800500e:	69bb      	ldr	r3, [r7, #24]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d1e5      	bne.n	8004fe0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2220      	movs	r2, #32
 8005018:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2220      	movs	r2, #32
 800501e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2220      	movs	r2, #32
 8005024:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2200      	movs	r2, #0
 800502c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005030:	2303      	movs	r3, #3
 8005032:	e010      	b.n	8005056 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	69da      	ldr	r2, [r3, #28]
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	4013      	ands	r3, r2
 800503e:	68ba      	ldr	r2, [r7, #8]
 8005040:	429a      	cmp	r2, r3
 8005042:	bf0c      	ite	eq
 8005044:	2301      	moveq	r3, #1
 8005046:	2300      	movne	r3, #0
 8005048:	b2db      	uxtb	r3, r3
 800504a:	461a      	mov	r2, r3
 800504c:	79fb      	ldrb	r3, [r7, #7]
 800504e:	429a      	cmp	r2, r3
 8005050:	f43f af4a 	beq.w	8004ee8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005054:	2300      	movs	r3, #0
}
 8005056:	4618      	mov	r0, r3
 8005058:	3770      	adds	r7, #112	; 0x70
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}
	...

08005060 <__errno>:
 8005060:	4b01      	ldr	r3, [pc, #4]	; (8005068 <__errno+0x8>)
 8005062:	6818      	ldr	r0, [r3, #0]
 8005064:	4770      	bx	lr
 8005066:	bf00      	nop
 8005068:	2000000c 	.word	0x2000000c

0800506c <__libc_init_array>:
 800506c:	b570      	push	{r4, r5, r6, lr}
 800506e:	4d0d      	ldr	r5, [pc, #52]	; (80050a4 <__libc_init_array+0x38>)
 8005070:	4c0d      	ldr	r4, [pc, #52]	; (80050a8 <__libc_init_array+0x3c>)
 8005072:	1b64      	subs	r4, r4, r5
 8005074:	10a4      	asrs	r4, r4, #2
 8005076:	2600      	movs	r6, #0
 8005078:	42a6      	cmp	r6, r4
 800507a:	d109      	bne.n	8005090 <__libc_init_array+0x24>
 800507c:	4d0b      	ldr	r5, [pc, #44]	; (80050ac <__libc_init_array+0x40>)
 800507e:	4c0c      	ldr	r4, [pc, #48]	; (80050b0 <__libc_init_array+0x44>)
 8005080:	f001 f824 	bl	80060cc <_init>
 8005084:	1b64      	subs	r4, r4, r5
 8005086:	10a4      	asrs	r4, r4, #2
 8005088:	2600      	movs	r6, #0
 800508a:	42a6      	cmp	r6, r4
 800508c:	d105      	bne.n	800509a <__libc_init_array+0x2e>
 800508e:	bd70      	pop	{r4, r5, r6, pc}
 8005090:	f855 3b04 	ldr.w	r3, [r5], #4
 8005094:	4798      	blx	r3
 8005096:	3601      	adds	r6, #1
 8005098:	e7ee      	b.n	8005078 <__libc_init_array+0xc>
 800509a:	f855 3b04 	ldr.w	r3, [r5], #4
 800509e:	4798      	blx	r3
 80050a0:	3601      	adds	r6, #1
 80050a2:	e7f2      	b.n	800508a <__libc_init_array+0x1e>
 80050a4:	0800643c 	.word	0x0800643c
 80050a8:	0800643c 	.word	0x0800643c
 80050ac:	0800643c 	.word	0x0800643c
 80050b0:	08006440 	.word	0x08006440

080050b4 <memset>:
 80050b4:	4402      	add	r2, r0
 80050b6:	4603      	mov	r3, r0
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d100      	bne.n	80050be <memset+0xa>
 80050bc:	4770      	bx	lr
 80050be:	f803 1b01 	strb.w	r1, [r3], #1
 80050c2:	e7f9      	b.n	80050b8 <memset+0x4>

080050c4 <iprintf>:
 80050c4:	b40f      	push	{r0, r1, r2, r3}
 80050c6:	4b0a      	ldr	r3, [pc, #40]	; (80050f0 <iprintf+0x2c>)
 80050c8:	b513      	push	{r0, r1, r4, lr}
 80050ca:	681c      	ldr	r4, [r3, #0]
 80050cc:	b124      	cbz	r4, 80050d8 <iprintf+0x14>
 80050ce:	69a3      	ldr	r3, [r4, #24]
 80050d0:	b913      	cbnz	r3, 80050d8 <iprintf+0x14>
 80050d2:	4620      	mov	r0, r4
 80050d4:	f000 fa5e 	bl	8005594 <__sinit>
 80050d8:	ab05      	add	r3, sp, #20
 80050da:	9a04      	ldr	r2, [sp, #16]
 80050dc:	68a1      	ldr	r1, [r4, #8]
 80050de:	9301      	str	r3, [sp, #4]
 80050e0:	4620      	mov	r0, r4
 80050e2:	f000 fc67 	bl	80059b4 <_vfiprintf_r>
 80050e6:	b002      	add	sp, #8
 80050e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050ec:	b004      	add	sp, #16
 80050ee:	4770      	bx	lr
 80050f0:	2000000c 	.word	0x2000000c

080050f4 <_puts_r>:
 80050f4:	b570      	push	{r4, r5, r6, lr}
 80050f6:	460e      	mov	r6, r1
 80050f8:	4605      	mov	r5, r0
 80050fa:	b118      	cbz	r0, 8005104 <_puts_r+0x10>
 80050fc:	6983      	ldr	r3, [r0, #24]
 80050fe:	b90b      	cbnz	r3, 8005104 <_puts_r+0x10>
 8005100:	f000 fa48 	bl	8005594 <__sinit>
 8005104:	69ab      	ldr	r3, [r5, #24]
 8005106:	68ac      	ldr	r4, [r5, #8]
 8005108:	b913      	cbnz	r3, 8005110 <_puts_r+0x1c>
 800510a:	4628      	mov	r0, r5
 800510c:	f000 fa42 	bl	8005594 <__sinit>
 8005110:	4b2c      	ldr	r3, [pc, #176]	; (80051c4 <_puts_r+0xd0>)
 8005112:	429c      	cmp	r4, r3
 8005114:	d120      	bne.n	8005158 <_puts_r+0x64>
 8005116:	686c      	ldr	r4, [r5, #4]
 8005118:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800511a:	07db      	lsls	r3, r3, #31
 800511c:	d405      	bmi.n	800512a <_puts_r+0x36>
 800511e:	89a3      	ldrh	r3, [r4, #12]
 8005120:	0598      	lsls	r0, r3, #22
 8005122:	d402      	bmi.n	800512a <_puts_r+0x36>
 8005124:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005126:	f000 fad3 	bl	80056d0 <__retarget_lock_acquire_recursive>
 800512a:	89a3      	ldrh	r3, [r4, #12]
 800512c:	0719      	lsls	r1, r3, #28
 800512e:	d51d      	bpl.n	800516c <_puts_r+0x78>
 8005130:	6923      	ldr	r3, [r4, #16]
 8005132:	b1db      	cbz	r3, 800516c <_puts_r+0x78>
 8005134:	3e01      	subs	r6, #1
 8005136:	68a3      	ldr	r3, [r4, #8]
 8005138:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800513c:	3b01      	subs	r3, #1
 800513e:	60a3      	str	r3, [r4, #8]
 8005140:	bb39      	cbnz	r1, 8005192 <_puts_r+0x9e>
 8005142:	2b00      	cmp	r3, #0
 8005144:	da38      	bge.n	80051b8 <_puts_r+0xc4>
 8005146:	4622      	mov	r2, r4
 8005148:	210a      	movs	r1, #10
 800514a:	4628      	mov	r0, r5
 800514c:	f000 f848 	bl	80051e0 <__swbuf_r>
 8005150:	3001      	adds	r0, #1
 8005152:	d011      	beq.n	8005178 <_puts_r+0x84>
 8005154:	250a      	movs	r5, #10
 8005156:	e011      	b.n	800517c <_puts_r+0x88>
 8005158:	4b1b      	ldr	r3, [pc, #108]	; (80051c8 <_puts_r+0xd4>)
 800515a:	429c      	cmp	r4, r3
 800515c:	d101      	bne.n	8005162 <_puts_r+0x6e>
 800515e:	68ac      	ldr	r4, [r5, #8]
 8005160:	e7da      	b.n	8005118 <_puts_r+0x24>
 8005162:	4b1a      	ldr	r3, [pc, #104]	; (80051cc <_puts_r+0xd8>)
 8005164:	429c      	cmp	r4, r3
 8005166:	bf08      	it	eq
 8005168:	68ec      	ldreq	r4, [r5, #12]
 800516a:	e7d5      	b.n	8005118 <_puts_r+0x24>
 800516c:	4621      	mov	r1, r4
 800516e:	4628      	mov	r0, r5
 8005170:	f000 f888 	bl	8005284 <__swsetup_r>
 8005174:	2800      	cmp	r0, #0
 8005176:	d0dd      	beq.n	8005134 <_puts_r+0x40>
 8005178:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800517c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800517e:	07da      	lsls	r2, r3, #31
 8005180:	d405      	bmi.n	800518e <_puts_r+0x9a>
 8005182:	89a3      	ldrh	r3, [r4, #12]
 8005184:	059b      	lsls	r3, r3, #22
 8005186:	d402      	bmi.n	800518e <_puts_r+0x9a>
 8005188:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800518a:	f000 faa2 	bl	80056d2 <__retarget_lock_release_recursive>
 800518e:	4628      	mov	r0, r5
 8005190:	bd70      	pop	{r4, r5, r6, pc}
 8005192:	2b00      	cmp	r3, #0
 8005194:	da04      	bge.n	80051a0 <_puts_r+0xac>
 8005196:	69a2      	ldr	r2, [r4, #24]
 8005198:	429a      	cmp	r2, r3
 800519a:	dc06      	bgt.n	80051aa <_puts_r+0xb6>
 800519c:	290a      	cmp	r1, #10
 800519e:	d004      	beq.n	80051aa <_puts_r+0xb6>
 80051a0:	6823      	ldr	r3, [r4, #0]
 80051a2:	1c5a      	adds	r2, r3, #1
 80051a4:	6022      	str	r2, [r4, #0]
 80051a6:	7019      	strb	r1, [r3, #0]
 80051a8:	e7c5      	b.n	8005136 <_puts_r+0x42>
 80051aa:	4622      	mov	r2, r4
 80051ac:	4628      	mov	r0, r5
 80051ae:	f000 f817 	bl	80051e0 <__swbuf_r>
 80051b2:	3001      	adds	r0, #1
 80051b4:	d1bf      	bne.n	8005136 <_puts_r+0x42>
 80051b6:	e7df      	b.n	8005178 <_puts_r+0x84>
 80051b8:	6823      	ldr	r3, [r4, #0]
 80051ba:	250a      	movs	r5, #10
 80051bc:	1c5a      	adds	r2, r3, #1
 80051be:	6022      	str	r2, [r4, #0]
 80051c0:	701d      	strb	r5, [r3, #0]
 80051c2:	e7db      	b.n	800517c <_puts_r+0x88>
 80051c4:	080063c0 	.word	0x080063c0
 80051c8:	080063e0 	.word	0x080063e0
 80051cc:	080063a0 	.word	0x080063a0

080051d0 <puts>:
 80051d0:	4b02      	ldr	r3, [pc, #8]	; (80051dc <puts+0xc>)
 80051d2:	4601      	mov	r1, r0
 80051d4:	6818      	ldr	r0, [r3, #0]
 80051d6:	f7ff bf8d 	b.w	80050f4 <_puts_r>
 80051da:	bf00      	nop
 80051dc:	2000000c 	.word	0x2000000c

080051e0 <__swbuf_r>:
 80051e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051e2:	460e      	mov	r6, r1
 80051e4:	4614      	mov	r4, r2
 80051e6:	4605      	mov	r5, r0
 80051e8:	b118      	cbz	r0, 80051f2 <__swbuf_r+0x12>
 80051ea:	6983      	ldr	r3, [r0, #24]
 80051ec:	b90b      	cbnz	r3, 80051f2 <__swbuf_r+0x12>
 80051ee:	f000 f9d1 	bl	8005594 <__sinit>
 80051f2:	4b21      	ldr	r3, [pc, #132]	; (8005278 <__swbuf_r+0x98>)
 80051f4:	429c      	cmp	r4, r3
 80051f6:	d12b      	bne.n	8005250 <__swbuf_r+0x70>
 80051f8:	686c      	ldr	r4, [r5, #4]
 80051fa:	69a3      	ldr	r3, [r4, #24]
 80051fc:	60a3      	str	r3, [r4, #8]
 80051fe:	89a3      	ldrh	r3, [r4, #12]
 8005200:	071a      	lsls	r2, r3, #28
 8005202:	d52f      	bpl.n	8005264 <__swbuf_r+0x84>
 8005204:	6923      	ldr	r3, [r4, #16]
 8005206:	b36b      	cbz	r3, 8005264 <__swbuf_r+0x84>
 8005208:	6923      	ldr	r3, [r4, #16]
 800520a:	6820      	ldr	r0, [r4, #0]
 800520c:	1ac0      	subs	r0, r0, r3
 800520e:	6963      	ldr	r3, [r4, #20]
 8005210:	b2f6      	uxtb	r6, r6
 8005212:	4283      	cmp	r3, r0
 8005214:	4637      	mov	r7, r6
 8005216:	dc04      	bgt.n	8005222 <__swbuf_r+0x42>
 8005218:	4621      	mov	r1, r4
 800521a:	4628      	mov	r0, r5
 800521c:	f000 f926 	bl	800546c <_fflush_r>
 8005220:	bb30      	cbnz	r0, 8005270 <__swbuf_r+0x90>
 8005222:	68a3      	ldr	r3, [r4, #8]
 8005224:	3b01      	subs	r3, #1
 8005226:	60a3      	str	r3, [r4, #8]
 8005228:	6823      	ldr	r3, [r4, #0]
 800522a:	1c5a      	adds	r2, r3, #1
 800522c:	6022      	str	r2, [r4, #0]
 800522e:	701e      	strb	r6, [r3, #0]
 8005230:	6963      	ldr	r3, [r4, #20]
 8005232:	3001      	adds	r0, #1
 8005234:	4283      	cmp	r3, r0
 8005236:	d004      	beq.n	8005242 <__swbuf_r+0x62>
 8005238:	89a3      	ldrh	r3, [r4, #12]
 800523a:	07db      	lsls	r3, r3, #31
 800523c:	d506      	bpl.n	800524c <__swbuf_r+0x6c>
 800523e:	2e0a      	cmp	r6, #10
 8005240:	d104      	bne.n	800524c <__swbuf_r+0x6c>
 8005242:	4621      	mov	r1, r4
 8005244:	4628      	mov	r0, r5
 8005246:	f000 f911 	bl	800546c <_fflush_r>
 800524a:	b988      	cbnz	r0, 8005270 <__swbuf_r+0x90>
 800524c:	4638      	mov	r0, r7
 800524e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005250:	4b0a      	ldr	r3, [pc, #40]	; (800527c <__swbuf_r+0x9c>)
 8005252:	429c      	cmp	r4, r3
 8005254:	d101      	bne.n	800525a <__swbuf_r+0x7a>
 8005256:	68ac      	ldr	r4, [r5, #8]
 8005258:	e7cf      	b.n	80051fa <__swbuf_r+0x1a>
 800525a:	4b09      	ldr	r3, [pc, #36]	; (8005280 <__swbuf_r+0xa0>)
 800525c:	429c      	cmp	r4, r3
 800525e:	bf08      	it	eq
 8005260:	68ec      	ldreq	r4, [r5, #12]
 8005262:	e7ca      	b.n	80051fa <__swbuf_r+0x1a>
 8005264:	4621      	mov	r1, r4
 8005266:	4628      	mov	r0, r5
 8005268:	f000 f80c 	bl	8005284 <__swsetup_r>
 800526c:	2800      	cmp	r0, #0
 800526e:	d0cb      	beq.n	8005208 <__swbuf_r+0x28>
 8005270:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005274:	e7ea      	b.n	800524c <__swbuf_r+0x6c>
 8005276:	bf00      	nop
 8005278:	080063c0 	.word	0x080063c0
 800527c:	080063e0 	.word	0x080063e0
 8005280:	080063a0 	.word	0x080063a0

08005284 <__swsetup_r>:
 8005284:	4b32      	ldr	r3, [pc, #200]	; (8005350 <__swsetup_r+0xcc>)
 8005286:	b570      	push	{r4, r5, r6, lr}
 8005288:	681d      	ldr	r5, [r3, #0]
 800528a:	4606      	mov	r6, r0
 800528c:	460c      	mov	r4, r1
 800528e:	b125      	cbz	r5, 800529a <__swsetup_r+0x16>
 8005290:	69ab      	ldr	r3, [r5, #24]
 8005292:	b913      	cbnz	r3, 800529a <__swsetup_r+0x16>
 8005294:	4628      	mov	r0, r5
 8005296:	f000 f97d 	bl	8005594 <__sinit>
 800529a:	4b2e      	ldr	r3, [pc, #184]	; (8005354 <__swsetup_r+0xd0>)
 800529c:	429c      	cmp	r4, r3
 800529e:	d10f      	bne.n	80052c0 <__swsetup_r+0x3c>
 80052a0:	686c      	ldr	r4, [r5, #4]
 80052a2:	89a3      	ldrh	r3, [r4, #12]
 80052a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80052a8:	0719      	lsls	r1, r3, #28
 80052aa:	d42c      	bmi.n	8005306 <__swsetup_r+0x82>
 80052ac:	06dd      	lsls	r5, r3, #27
 80052ae:	d411      	bmi.n	80052d4 <__swsetup_r+0x50>
 80052b0:	2309      	movs	r3, #9
 80052b2:	6033      	str	r3, [r6, #0]
 80052b4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80052b8:	81a3      	strh	r3, [r4, #12]
 80052ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80052be:	e03e      	b.n	800533e <__swsetup_r+0xba>
 80052c0:	4b25      	ldr	r3, [pc, #148]	; (8005358 <__swsetup_r+0xd4>)
 80052c2:	429c      	cmp	r4, r3
 80052c4:	d101      	bne.n	80052ca <__swsetup_r+0x46>
 80052c6:	68ac      	ldr	r4, [r5, #8]
 80052c8:	e7eb      	b.n	80052a2 <__swsetup_r+0x1e>
 80052ca:	4b24      	ldr	r3, [pc, #144]	; (800535c <__swsetup_r+0xd8>)
 80052cc:	429c      	cmp	r4, r3
 80052ce:	bf08      	it	eq
 80052d0:	68ec      	ldreq	r4, [r5, #12]
 80052d2:	e7e6      	b.n	80052a2 <__swsetup_r+0x1e>
 80052d4:	0758      	lsls	r0, r3, #29
 80052d6:	d512      	bpl.n	80052fe <__swsetup_r+0x7a>
 80052d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80052da:	b141      	cbz	r1, 80052ee <__swsetup_r+0x6a>
 80052dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80052e0:	4299      	cmp	r1, r3
 80052e2:	d002      	beq.n	80052ea <__swsetup_r+0x66>
 80052e4:	4630      	mov	r0, r6
 80052e6:	f000 fa5b 	bl	80057a0 <_free_r>
 80052ea:	2300      	movs	r3, #0
 80052ec:	6363      	str	r3, [r4, #52]	; 0x34
 80052ee:	89a3      	ldrh	r3, [r4, #12]
 80052f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80052f4:	81a3      	strh	r3, [r4, #12]
 80052f6:	2300      	movs	r3, #0
 80052f8:	6063      	str	r3, [r4, #4]
 80052fa:	6923      	ldr	r3, [r4, #16]
 80052fc:	6023      	str	r3, [r4, #0]
 80052fe:	89a3      	ldrh	r3, [r4, #12]
 8005300:	f043 0308 	orr.w	r3, r3, #8
 8005304:	81a3      	strh	r3, [r4, #12]
 8005306:	6923      	ldr	r3, [r4, #16]
 8005308:	b94b      	cbnz	r3, 800531e <__swsetup_r+0x9a>
 800530a:	89a3      	ldrh	r3, [r4, #12]
 800530c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005310:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005314:	d003      	beq.n	800531e <__swsetup_r+0x9a>
 8005316:	4621      	mov	r1, r4
 8005318:	4630      	mov	r0, r6
 800531a:	f000 fa01 	bl	8005720 <__smakebuf_r>
 800531e:	89a0      	ldrh	r0, [r4, #12]
 8005320:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005324:	f010 0301 	ands.w	r3, r0, #1
 8005328:	d00a      	beq.n	8005340 <__swsetup_r+0xbc>
 800532a:	2300      	movs	r3, #0
 800532c:	60a3      	str	r3, [r4, #8]
 800532e:	6963      	ldr	r3, [r4, #20]
 8005330:	425b      	negs	r3, r3
 8005332:	61a3      	str	r3, [r4, #24]
 8005334:	6923      	ldr	r3, [r4, #16]
 8005336:	b943      	cbnz	r3, 800534a <__swsetup_r+0xc6>
 8005338:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800533c:	d1ba      	bne.n	80052b4 <__swsetup_r+0x30>
 800533e:	bd70      	pop	{r4, r5, r6, pc}
 8005340:	0781      	lsls	r1, r0, #30
 8005342:	bf58      	it	pl
 8005344:	6963      	ldrpl	r3, [r4, #20]
 8005346:	60a3      	str	r3, [r4, #8]
 8005348:	e7f4      	b.n	8005334 <__swsetup_r+0xb0>
 800534a:	2000      	movs	r0, #0
 800534c:	e7f7      	b.n	800533e <__swsetup_r+0xba>
 800534e:	bf00      	nop
 8005350:	2000000c 	.word	0x2000000c
 8005354:	080063c0 	.word	0x080063c0
 8005358:	080063e0 	.word	0x080063e0
 800535c:	080063a0 	.word	0x080063a0

08005360 <__sflush_r>:
 8005360:	898a      	ldrh	r2, [r1, #12]
 8005362:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005366:	4605      	mov	r5, r0
 8005368:	0710      	lsls	r0, r2, #28
 800536a:	460c      	mov	r4, r1
 800536c:	d458      	bmi.n	8005420 <__sflush_r+0xc0>
 800536e:	684b      	ldr	r3, [r1, #4]
 8005370:	2b00      	cmp	r3, #0
 8005372:	dc05      	bgt.n	8005380 <__sflush_r+0x20>
 8005374:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005376:	2b00      	cmp	r3, #0
 8005378:	dc02      	bgt.n	8005380 <__sflush_r+0x20>
 800537a:	2000      	movs	r0, #0
 800537c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005380:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005382:	2e00      	cmp	r6, #0
 8005384:	d0f9      	beq.n	800537a <__sflush_r+0x1a>
 8005386:	2300      	movs	r3, #0
 8005388:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800538c:	682f      	ldr	r7, [r5, #0]
 800538e:	602b      	str	r3, [r5, #0]
 8005390:	d032      	beq.n	80053f8 <__sflush_r+0x98>
 8005392:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005394:	89a3      	ldrh	r3, [r4, #12]
 8005396:	075a      	lsls	r2, r3, #29
 8005398:	d505      	bpl.n	80053a6 <__sflush_r+0x46>
 800539a:	6863      	ldr	r3, [r4, #4]
 800539c:	1ac0      	subs	r0, r0, r3
 800539e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80053a0:	b10b      	cbz	r3, 80053a6 <__sflush_r+0x46>
 80053a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80053a4:	1ac0      	subs	r0, r0, r3
 80053a6:	2300      	movs	r3, #0
 80053a8:	4602      	mov	r2, r0
 80053aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80053ac:	6a21      	ldr	r1, [r4, #32]
 80053ae:	4628      	mov	r0, r5
 80053b0:	47b0      	blx	r6
 80053b2:	1c43      	adds	r3, r0, #1
 80053b4:	89a3      	ldrh	r3, [r4, #12]
 80053b6:	d106      	bne.n	80053c6 <__sflush_r+0x66>
 80053b8:	6829      	ldr	r1, [r5, #0]
 80053ba:	291d      	cmp	r1, #29
 80053bc:	d82c      	bhi.n	8005418 <__sflush_r+0xb8>
 80053be:	4a2a      	ldr	r2, [pc, #168]	; (8005468 <__sflush_r+0x108>)
 80053c0:	40ca      	lsrs	r2, r1
 80053c2:	07d6      	lsls	r6, r2, #31
 80053c4:	d528      	bpl.n	8005418 <__sflush_r+0xb8>
 80053c6:	2200      	movs	r2, #0
 80053c8:	6062      	str	r2, [r4, #4]
 80053ca:	04d9      	lsls	r1, r3, #19
 80053cc:	6922      	ldr	r2, [r4, #16]
 80053ce:	6022      	str	r2, [r4, #0]
 80053d0:	d504      	bpl.n	80053dc <__sflush_r+0x7c>
 80053d2:	1c42      	adds	r2, r0, #1
 80053d4:	d101      	bne.n	80053da <__sflush_r+0x7a>
 80053d6:	682b      	ldr	r3, [r5, #0]
 80053d8:	b903      	cbnz	r3, 80053dc <__sflush_r+0x7c>
 80053da:	6560      	str	r0, [r4, #84]	; 0x54
 80053dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80053de:	602f      	str	r7, [r5, #0]
 80053e0:	2900      	cmp	r1, #0
 80053e2:	d0ca      	beq.n	800537a <__sflush_r+0x1a>
 80053e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80053e8:	4299      	cmp	r1, r3
 80053ea:	d002      	beq.n	80053f2 <__sflush_r+0x92>
 80053ec:	4628      	mov	r0, r5
 80053ee:	f000 f9d7 	bl	80057a0 <_free_r>
 80053f2:	2000      	movs	r0, #0
 80053f4:	6360      	str	r0, [r4, #52]	; 0x34
 80053f6:	e7c1      	b.n	800537c <__sflush_r+0x1c>
 80053f8:	6a21      	ldr	r1, [r4, #32]
 80053fa:	2301      	movs	r3, #1
 80053fc:	4628      	mov	r0, r5
 80053fe:	47b0      	blx	r6
 8005400:	1c41      	adds	r1, r0, #1
 8005402:	d1c7      	bne.n	8005394 <__sflush_r+0x34>
 8005404:	682b      	ldr	r3, [r5, #0]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d0c4      	beq.n	8005394 <__sflush_r+0x34>
 800540a:	2b1d      	cmp	r3, #29
 800540c:	d001      	beq.n	8005412 <__sflush_r+0xb2>
 800540e:	2b16      	cmp	r3, #22
 8005410:	d101      	bne.n	8005416 <__sflush_r+0xb6>
 8005412:	602f      	str	r7, [r5, #0]
 8005414:	e7b1      	b.n	800537a <__sflush_r+0x1a>
 8005416:	89a3      	ldrh	r3, [r4, #12]
 8005418:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800541c:	81a3      	strh	r3, [r4, #12]
 800541e:	e7ad      	b.n	800537c <__sflush_r+0x1c>
 8005420:	690f      	ldr	r7, [r1, #16]
 8005422:	2f00      	cmp	r7, #0
 8005424:	d0a9      	beq.n	800537a <__sflush_r+0x1a>
 8005426:	0793      	lsls	r3, r2, #30
 8005428:	680e      	ldr	r6, [r1, #0]
 800542a:	bf08      	it	eq
 800542c:	694b      	ldreq	r3, [r1, #20]
 800542e:	600f      	str	r7, [r1, #0]
 8005430:	bf18      	it	ne
 8005432:	2300      	movne	r3, #0
 8005434:	eba6 0807 	sub.w	r8, r6, r7
 8005438:	608b      	str	r3, [r1, #8]
 800543a:	f1b8 0f00 	cmp.w	r8, #0
 800543e:	dd9c      	ble.n	800537a <__sflush_r+0x1a>
 8005440:	6a21      	ldr	r1, [r4, #32]
 8005442:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005444:	4643      	mov	r3, r8
 8005446:	463a      	mov	r2, r7
 8005448:	4628      	mov	r0, r5
 800544a:	47b0      	blx	r6
 800544c:	2800      	cmp	r0, #0
 800544e:	dc06      	bgt.n	800545e <__sflush_r+0xfe>
 8005450:	89a3      	ldrh	r3, [r4, #12]
 8005452:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005456:	81a3      	strh	r3, [r4, #12]
 8005458:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800545c:	e78e      	b.n	800537c <__sflush_r+0x1c>
 800545e:	4407      	add	r7, r0
 8005460:	eba8 0800 	sub.w	r8, r8, r0
 8005464:	e7e9      	b.n	800543a <__sflush_r+0xda>
 8005466:	bf00      	nop
 8005468:	20400001 	.word	0x20400001

0800546c <_fflush_r>:
 800546c:	b538      	push	{r3, r4, r5, lr}
 800546e:	690b      	ldr	r3, [r1, #16]
 8005470:	4605      	mov	r5, r0
 8005472:	460c      	mov	r4, r1
 8005474:	b913      	cbnz	r3, 800547c <_fflush_r+0x10>
 8005476:	2500      	movs	r5, #0
 8005478:	4628      	mov	r0, r5
 800547a:	bd38      	pop	{r3, r4, r5, pc}
 800547c:	b118      	cbz	r0, 8005486 <_fflush_r+0x1a>
 800547e:	6983      	ldr	r3, [r0, #24]
 8005480:	b90b      	cbnz	r3, 8005486 <_fflush_r+0x1a>
 8005482:	f000 f887 	bl	8005594 <__sinit>
 8005486:	4b14      	ldr	r3, [pc, #80]	; (80054d8 <_fflush_r+0x6c>)
 8005488:	429c      	cmp	r4, r3
 800548a:	d11b      	bne.n	80054c4 <_fflush_r+0x58>
 800548c:	686c      	ldr	r4, [r5, #4]
 800548e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d0ef      	beq.n	8005476 <_fflush_r+0xa>
 8005496:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005498:	07d0      	lsls	r0, r2, #31
 800549a:	d404      	bmi.n	80054a6 <_fflush_r+0x3a>
 800549c:	0599      	lsls	r1, r3, #22
 800549e:	d402      	bmi.n	80054a6 <_fflush_r+0x3a>
 80054a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80054a2:	f000 f915 	bl	80056d0 <__retarget_lock_acquire_recursive>
 80054a6:	4628      	mov	r0, r5
 80054a8:	4621      	mov	r1, r4
 80054aa:	f7ff ff59 	bl	8005360 <__sflush_r>
 80054ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80054b0:	07da      	lsls	r2, r3, #31
 80054b2:	4605      	mov	r5, r0
 80054b4:	d4e0      	bmi.n	8005478 <_fflush_r+0xc>
 80054b6:	89a3      	ldrh	r3, [r4, #12]
 80054b8:	059b      	lsls	r3, r3, #22
 80054ba:	d4dd      	bmi.n	8005478 <_fflush_r+0xc>
 80054bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80054be:	f000 f908 	bl	80056d2 <__retarget_lock_release_recursive>
 80054c2:	e7d9      	b.n	8005478 <_fflush_r+0xc>
 80054c4:	4b05      	ldr	r3, [pc, #20]	; (80054dc <_fflush_r+0x70>)
 80054c6:	429c      	cmp	r4, r3
 80054c8:	d101      	bne.n	80054ce <_fflush_r+0x62>
 80054ca:	68ac      	ldr	r4, [r5, #8]
 80054cc:	e7df      	b.n	800548e <_fflush_r+0x22>
 80054ce:	4b04      	ldr	r3, [pc, #16]	; (80054e0 <_fflush_r+0x74>)
 80054d0:	429c      	cmp	r4, r3
 80054d2:	bf08      	it	eq
 80054d4:	68ec      	ldreq	r4, [r5, #12]
 80054d6:	e7da      	b.n	800548e <_fflush_r+0x22>
 80054d8:	080063c0 	.word	0x080063c0
 80054dc:	080063e0 	.word	0x080063e0
 80054e0:	080063a0 	.word	0x080063a0

080054e4 <std>:
 80054e4:	2300      	movs	r3, #0
 80054e6:	b510      	push	{r4, lr}
 80054e8:	4604      	mov	r4, r0
 80054ea:	e9c0 3300 	strd	r3, r3, [r0]
 80054ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80054f2:	6083      	str	r3, [r0, #8]
 80054f4:	8181      	strh	r1, [r0, #12]
 80054f6:	6643      	str	r3, [r0, #100]	; 0x64
 80054f8:	81c2      	strh	r2, [r0, #14]
 80054fa:	6183      	str	r3, [r0, #24]
 80054fc:	4619      	mov	r1, r3
 80054fe:	2208      	movs	r2, #8
 8005500:	305c      	adds	r0, #92	; 0x5c
 8005502:	f7ff fdd7 	bl	80050b4 <memset>
 8005506:	4b05      	ldr	r3, [pc, #20]	; (800551c <std+0x38>)
 8005508:	6263      	str	r3, [r4, #36]	; 0x24
 800550a:	4b05      	ldr	r3, [pc, #20]	; (8005520 <std+0x3c>)
 800550c:	62a3      	str	r3, [r4, #40]	; 0x28
 800550e:	4b05      	ldr	r3, [pc, #20]	; (8005524 <std+0x40>)
 8005510:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005512:	4b05      	ldr	r3, [pc, #20]	; (8005528 <std+0x44>)
 8005514:	6224      	str	r4, [r4, #32]
 8005516:	6323      	str	r3, [r4, #48]	; 0x30
 8005518:	bd10      	pop	{r4, pc}
 800551a:	bf00      	nop
 800551c:	08005f5d 	.word	0x08005f5d
 8005520:	08005f7f 	.word	0x08005f7f
 8005524:	08005fb7 	.word	0x08005fb7
 8005528:	08005fdb 	.word	0x08005fdb

0800552c <_cleanup_r>:
 800552c:	4901      	ldr	r1, [pc, #4]	; (8005534 <_cleanup_r+0x8>)
 800552e:	f000 b8af 	b.w	8005690 <_fwalk_reent>
 8005532:	bf00      	nop
 8005534:	0800546d 	.word	0x0800546d

08005538 <__sfmoreglue>:
 8005538:	b570      	push	{r4, r5, r6, lr}
 800553a:	2268      	movs	r2, #104	; 0x68
 800553c:	1e4d      	subs	r5, r1, #1
 800553e:	4355      	muls	r5, r2
 8005540:	460e      	mov	r6, r1
 8005542:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005546:	f000 f997 	bl	8005878 <_malloc_r>
 800554a:	4604      	mov	r4, r0
 800554c:	b140      	cbz	r0, 8005560 <__sfmoreglue+0x28>
 800554e:	2100      	movs	r1, #0
 8005550:	e9c0 1600 	strd	r1, r6, [r0]
 8005554:	300c      	adds	r0, #12
 8005556:	60a0      	str	r0, [r4, #8]
 8005558:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800555c:	f7ff fdaa 	bl	80050b4 <memset>
 8005560:	4620      	mov	r0, r4
 8005562:	bd70      	pop	{r4, r5, r6, pc}

08005564 <__sfp_lock_acquire>:
 8005564:	4801      	ldr	r0, [pc, #4]	; (800556c <__sfp_lock_acquire+0x8>)
 8005566:	f000 b8b3 	b.w	80056d0 <__retarget_lock_acquire_recursive>
 800556a:	bf00      	nop
 800556c:	200003f5 	.word	0x200003f5

08005570 <__sfp_lock_release>:
 8005570:	4801      	ldr	r0, [pc, #4]	; (8005578 <__sfp_lock_release+0x8>)
 8005572:	f000 b8ae 	b.w	80056d2 <__retarget_lock_release_recursive>
 8005576:	bf00      	nop
 8005578:	200003f5 	.word	0x200003f5

0800557c <__sinit_lock_acquire>:
 800557c:	4801      	ldr	r0, [pc, #4]	; (8005584 <__sinit_lock_acquire+0x8>)
 800557e:	f000 b8a7 	b.w	80056d0 <__retarget_lock_acquire_recursive>
 8005582:	bf00      	nop
 8005584:	200003f6 	.word	0x200003f6

08005588 <__sinit_lock_release>:
 8005588:	4801      	ldr	r0, [pc, #4]	; (8005590 <__sinit_lock_release+0x8>)
 800558a:	f000 b8a2 	b.w	80056d2 <__retarget_lock_release_recursive>
 800558e:	bf00      	nop
 8005590:	200003f6 	.word	0x200003f6

08005594 <__sinit>:
 8005594:	b510      	push	{r4, lr}
 8005596:	4604      	mov	r4, r0
 8005598:	f7ff fff0 	bl	800557c <__sinit_lock_acquire>
 800559c:	69a3      	ldr	r3, [r4, #24]
 800559e:	b11b      	cbz	r3, 80055a8 <__sinit+0x14>
 80055a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055a4:	f7ff bff0 	b.w	8005588 <__sinit_lock_release>
 80055a8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80055ac:	6523      	str	r3, [r4, #80]	; 0x50
 80055ae:	4b13      	ldr	r3, [pc, #76]	; (80055fc <__sinit+0x68>)
 80055b0:	4a13      	ldr	r2, [pc, #76]	; (8005600 <__sinit+0x6c>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	62a2      	str	r2, [r4, #40]	; 0x28
 80055b6:	42a3      	cmp	r3, r4
 80055b8:	bf04      	itt	eq
 80055ba:	2301      	moveq	r3, #1
 80055bc:	61a3      	streq	r3, [r4, #24]
 80055be:	4620      	mov	r0, r4
 80055c0:	f000 f820 	bl	8005604 <__sfp>
 80055c4:	6060      	str	r0, [r4, #4]
 80055c6:	4620      	mov	r0, r4
 80055c8:	f000 f81c 	bl	8005604 <__sfp>
 80055cc:	60a0      	str	r0, [r4, #8]
 80055ce:	4620      	mov	r0, r4
 80055d0:	f000 f818 	bl	8005604 <__sfp>
 80055d4:	2200      	movs	r2, #0
 80055d6:	60e0      	str	r0, [r4, #12]
 80055d8:	2104      	movs	r1, #4
 80055da:	6860      	ldr	r0, [r4, #4]
 80055dc:	f7ff ff82 	bl	80054e4 <std>
 80055e0:	68a0      	ldr	r0, [r4, #8]
 80055e2:	2201      	movs	r2, #1
 80055e4:	2109      	movs	r1, #9
 80055e6:	f7ff ff7d 	bl	80054e4 <std>
 80055ea:	68e0      	ldr	r0, [r4, #12]
 80055ec:	2202      	movs	r2, #2
 80055ee:	2112      	movs	r1, #18
 80055f0:	f7ff ff78 	bl	80054e4 <std>
 80055f4:	2301      	movs	r3, #1
 80055f6:	61a3      	str	r3, [r4, #24]
 80055f8:	e7d2      	b.n	80055a0 <__sinit+0xc>
 80055fa:	bf00      	nop
 80055fc:	0800639c 	.word	0x0800639c
 8005600:	0800552d 	.word	0x0800552d

08005604 <__sfp>:
 8005604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005606:	4607      	mov	r7, r0
 8005608:	f7ff ffac 	bl	8005564 <__sfp_lock_acquire>
 800560c:	4b1e      	ldr	r3, [pc, #120]	; (8005688 <__sfp+0x84>)
 800560e:	681e      	ldr	r6, [r3, #0]
 8005610:	69b3      	ldr	r3, [r6, #24]
 8005612:	b913      	cbnz	r3, 800561a <__sfp+0x16>
 8005614:	4630      	mov	r0, r6
 8005616:	f7ff ffbd 	bl	8005594 <__sinit>
 800561a:	3648      	adds	r6, #72	; 0x48
 800561c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005620:	3b01      	subs	r3, #1
 8005622:	d503      	bpl.n	800562c <__sfp+0x28>
 8005624:	6833      	ldr	r3, [r6, #0]
 8005626:	b30b      	cbz	r3, 800566c <__sfp+0x68>
 8005628:	6836      	ldr	r6, [r6, #0]
 800562a:	e7f7      	b.n	800561c <__sfp+0x18>
 800562c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005630:	b9d5      	cbnz	r5, 8005668 <__sfp+0x64>
 8005632:	4b16      	ldr	r3, [pc, #88]	; (800568c <__sfp+0x88>)
 8005634:	60e3      	str	r3, [r4, #12]
 8005636:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800563a:	6665      	str	r5, [r4, #100]	; 0x64
 800563c:	f000 f847 	bl	80056ce <__retarget_lock_init_recursive>
 8005640:	f7ff ff96 	bl	8005570 <__sfp_lock_release>
 8005644:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005648:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800564c:	6025      	str	r5, [r4, #0]
 800564e:	61a5      	str	r5, [r4, #24]
 8005650:	2208      	movs	r2, #8
 8005652:	4629      	mov	r1, r5
 8005654:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005658:	f7ff fd2c 	bl	80050b4 <memset>
 800565c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005660:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005664:	4620      	mov	r0, r4
 8005666:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005668:	3468      	adds	r4, #104	; 0x68
 800566a:	e7d9      	b.n	8005620 <__sfp+0x1c>
 800566c:	2104      	movs	r1, #4
 800566e:	4638      	mov	r0, r7
 8005670:	f7ff ff62 	bl	8005538 <__sfmoreglue>
 8005674:	4604      	mov	r4, r0
 8005676:	6030      	str	r0, [r6, #0]
 8005678:	2800      	cmp	r0, #0
 800567a:	d1d5      	bne.n	8005628 <__sfp+0x24>
 800567c:	f7ff ff78 	bl	8005570 <__sfp_lock_release>
 8005680:	230c      	movs	r3, #12
 8005682:	603b      	str	r3, [r7, #0]
 8005684:	e7ee      	b.n	8005664 <__sfp+0x60>
 8005686:	bf00      	nop
 8005688:	0800639c 	.word	0x0800639c
 800568c:	ffff0001 	.word	0xffff0001

08005690 <_fwalk_reent>:
 8005690:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005694:	4606      	mov	r6, r0
 8005696:	4688      	mov	r8, r1
 8005698:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800569c:	2700      	movs	r7, #0
 800569e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80056a2:	f1b9 0901 	subs.w	r9, r9, #1
 80056a6:	d505      	bpl.n	80056b4 <_fwalk_reent+0x24>
 80056a8:	6824      	ldr	r4, [r4, #0]
 80056aa:	2c00      	cmp	r4, #0
 80056ac:	d1f7      	bne.n	800569e <_fwalk_reent+0xe>
 80056ae:	4638      	mov	r0, r7
 80056b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80056b4:	89ab      	ldrh	r3, [r5, #12]
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	d907      	bls.n	80056ca <_fwalk_reent+0x3a>
 80056ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80056be:	3301      	adds	r3, #1
 80056c0:	d003      	beq.n	80056ca <_fwalk_reent+0x3a>
 80056c2:	4629      	mov	r1, r5
 80056c4:	4630      	mov	r0, r6
 80056c6:	47c0      	blx	r8
 80056c8:	4307      	orrs	r7, r0
 80056ca:	3568      	adds	r5, #104	; 0x68
 80056cc:	e7e9      	b.n	80056a2 <_fwalk_reent+0x12>

080056ce <__retarget_lock_init_recursive>:
 80056ce:	4770      	bx	lr

080056d0 <__retarget_lock_acquire_recursive>:
 80056d0:	4770      	bx	lr

080056d2 <__retarget_lock_release_recursive>:
 80056d2:	4770      	bx	lr

080056d4 <__swhatbuf_r>:
 80056d4:	b570      	push	{r4, r5, r6, lr}
 80056d6:	460e      	mov	r6, r1
 80056d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056dc:	2900      	cmp	r1, #0
 80056de:	b096      	sub	sp, #88	; 0x58
 80056e0:	4614      	mov	r4, r2
 80056e2:	461d      	mov	r5, r3
 80056e4:	da08      	bge.n	80056f8 <__swhatbuf_r+0x24>
 80056e6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80056ea:	2200      	movs	r2, #0
 80056ec:	602a      	str	r2, [r5, #0]
 80056ee:	061a      	lsls	r2, r3, #24
 80056f0:	d410      	bmi.n	8005714 <__swhatbuf_r+0x40>
 80056f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80056f6:	e00e      	b.n	8005716 <__swhatbuf_r+0x42>
 80056f8:	466a      	mov	r2, sp
 80056fa:	f000 fc95 	bl	8006028 <_fstat_r>
 80056fe:	2800      	cmp	r0, #0
 8005700:	dbf1      	blt.n	80056e6 <__swhatbuf_r+0x12>
 8005702:	9a01      	ldr	r2, [sp, #4]
 8005704:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005708:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800570c:	425a      	negs	r2, r3
 800570e:	415a      	adcs	r2, r3
 8005710:	602a      	str	r2, [r5, #0]
 8005712:	e7ee      	b.n	80056f2 <__swhatbuf_r+0x1e>
 8005714:	2340      	movs	r3, #64	; 0x40
 8005716:	2000      	movs	r0, #0
 8005718:	6023      	str	r3, [r4, #0]
 800571a:	b016      	add	sp, #88	; 0x58
 800571c:	bd70      	pop	{r4, r5, r6, pc}
	...

08005720 <__smakebuf_r>:
 8005720:	898b      	ldrh	r3, [r1, #12]
 8005722:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005724:	079d      	lsls	r5, r3, #30
 8005726:	4606      	mov	r6, r0
 8005728:	460c      	mov	r4, r1
 800572a:	d507      	bpl.n	800573c <__smakebuf_r+0x1c>
 800572c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005730:	6023      	str	r3, [r4, #0]
 8005732:	6123      	str	r3, [r4, #16]
 8005734:	2301      	movs	r3, #1
 8005736:	6163      	str	r3, [r4, #20]
 8005738:	b002      	add	sp, #8
 800573a:	bd70      	pop	{r4, r5, r6, pc}
 800573c:	ab01      	add	r3, sp, #4
 800573e:	466a      	mov	r2, sp
 8005740:	f7ff ffc8 	bl	80056d4 <__swhatbuf_r>
 8005744:	9900      	ldr	r1, [sp, #0]
 8005746:	4605      	mov	r5, r0
 8005748:	4630      	mov	r0, r6
 800574a:	f000 f895 	bl	8005878 <_malloc_r>
 800574e:	b948      	cbnz	r0, 8005764 <__smakebuf_r+0x44>
 8005750:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005754:	059a      	lsls	r2, r3, #22
 8005756:	d4ef      	bmi.n	8005738 <__smakebuf_r+0x18>
 8005758:	f023 0303 	bic.w	r3, r3, #3
 800575c:	f043 0302 	orr.w	r3, r3, #2
 8005760:	81a3      	strh	r3, [r4, #12]
 8005762:	e7e3      	b.n	800572c <__smakebuf_r+0xc>
 8005764:	4b0d      	ldr	r3, [pc, #52]	; (800579c <__smakebuf_r+0x7c>)
 8005766:	62b3      	str	r3, [r6, #40]	; 0x28
 8005768:	89a3      	ldrh	r3, [r4, #12]
 800576a:	6020      	str	r0, [r4, #0]
 800576c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005770:	81a3      	strh	r3, [r4, #12]
 8005772:	9b00      	ldr	r3, [sp, #0]
 8005774:	6163      	str	r3, [r4, #20]
 8005776:	9b01      	ldr	r3, [sp, #4]
 8005778:	6120      	str	r0, [r4, #16]
 800577a:	b15b      	cbz	r3, 8005794 <__smakebuf_r+0x74>
 800577c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005780:	4630      	mov	r0, r6
 8005782:	f000 fc63 	bl	800604c <_isatty_r>
 8005786:	b128      	cbz	r0, 8005794 <__smakebuf_r+0x74>
 8005788:	89a3      	ldrh	r3, [r4, #12]
 800578a:	f023 0303 	bic.w	r3, r3, #3
 800578e:	f043 0301 	orr.w	r3, r3, #1
 8005792:	81a3      	strh	r3, [r4, #12]
 8005794:	89a0      	ldrh	r0, [r4, #12]
 8005796:	4305      	orrs	r5, r0
 8005798:	81a5      	strh	r5, [r4, #12]
 800579a:	e7cd      	b.n	8005738 <__smakebuf_r+0x18>
 800579c:	0800552d 	.word	0x0800552d

080057a0 <_free_r>:
 80057a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80057a2:	2900      	cmp	r1, #0
 80057a4:	d044      	beq.n	8005830 <_free_r+0x90>
 80057a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80057aa:	9001      	str	r0, [sp, #4]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	f1a1 0404 	sub.w	r4, r1, #4
 80057b2:	bfb8      	it	lt
 80057b4:	18e4      	addlt	r4, r4, r3
 80057b6:	f000 fc6b 	bl	8006090 <__malloc_lock>
 80057ba:	4a1e      	ldr	r2, [pc, #120]	; (8005834 <_free_r+0x94>)
 80057bc:	9801      	ldr	r0, [sp, #4]
 80057be:	6813      	ldr	r3, [r2, #0]
 80057c0:	b933      	cbnz	r3, 80057d0 <_free_r+0x30>
 80057c2:	6063      	str	r3, [r4, #4]
 80057c4:	6014      	str	r4, [r2, #0]
 80057c6:	b003      	add	sp, #12
 80057c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80057cc:	f000 bc66 	b.w	800609c <__malloc_unlock>
 80057d0:	42a3      	cmp	r3, r4
 80057d2:	d908      	bls.n	80057e6 <_free_r+0x46>
 80057d4:	6825      	ldr	r5, [r4, #0]
 80057d6:	1961      	adds	r1, r4, r5
 80057d8:	428b      	cmp	r3, r1
 80057da:	bf01      	itttt	eq
 80057dc:	6819      	ldreq	r1, [r3, #0]
 80057de:	685b      	ldreq	r3, [r3, #4]
 80057e0:	1949      	addeq	r1, r1, r5
 80057e2:	6021      	streq	r1, [r4, #0]
 80057e4:	e7ed      	b.n	80057c2 <_free_r+0x22>
 80057e6:	461a      	mov	r2, r3
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	b10b      	cbz	r3, 80057f0 <_free_r+0x50>
 80057ec:	42a3      	cmp	r3, r4
 80057ee:	d9fa      	bls.n	80057e6 <_free_r+0x46>
 80057f0:	6811      	ldr	r1, [r2, #0]
 80057f2:	1855      	adds	r5, r2, r1
 80057f4:	42a5      	cmp	r5, r4
 80057f6:	d10b      	bne.n	8005810 <_free_r+0x70>
 80057f8:	6824      	ldr	r4, [r4, #0]
 80057fa:	4421      	add	r1, r4
 80057fc:	1854      	adds	r4, r2, r1
 80057fe:	42a3      	cmp	r3, r4
 8005800:	6011      	str	r1, [r2, #0]
 8005802:	d1e0      	bne.n	80057c6 <_free_r+0x26>
 8005804:	681c      	ldr	r4, [r3, #0]
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	6053      	str	r3, [r2, #4]
 800580a:	4421      	add	r1, r4
 800580c:	6011      	str	r1, [r2, #0]
 800580e:	e7da      	b.n	80057c6 <_free_r+0x26>
 8005810:	d902      	bls.n	8005818 <_free_r+0x78>
 8005812:	230c      	movs	r3, #12
 8005814:	6003      	str	r3, [r0, #0]
 8005816:	e7d6      	b.n	80057c6 <_free_r+0x26>
 8005818:	6825      	ldr	r5, [r4, #0]
 800581a:	1961      	adds	r1, r4, r5
 800581c:	428b      	cmp	r3, r1
 800581e:	bf04      	itt	eq
 8005820:	6819      	ldreq	r1, [r3, #0]
 8005822:	685b      	ldreq	r3, [r3, #4]
 8005824:	6063      	str	r3, [r4, #4]
 8005826:	bf04      	itt	eq
 8005828:	1949      	addeq	r1, r1, r5
 800582a:	6021      	streq	r1, [r4, #0]
 800582c:	6054      	str	r4, [r2, #4]
 800582e:	e7ca      	b.n	80057c6 <_free_r+0x26>
 8005830:	b003      	add	sp, #12
 8005832:	bd30      	pop	{r4, r5, pc}
 8005834:	200003f8 	.word	0x200003f8

08005838 <sbrk_aligned>:
 8005838:	b570      	push	{r4, r5, r6, lr}
 800583a:	4e0e      	ldr	r6, [pc, #56]	; (8005874 <sbrk_aligned+0x3c>)
 800583c:	460c      	mov	r4, r1
 800583e:	6831      	ldr	r1, [r6, #0]
 8005840:	4605      	mov	r5, r0
 8005842:	b911      	cbnz	r1, 800584a <sbrk_aligned+0x12>
 8005844:	f000 fb7a 	bl	8005f3c <_sbrk_r>
 8005848:	6030      	str	r0, [r6, #0]
 800584a:	4621      	mov	r1, r4
 800584c:	4628      	mov	r0, r5
 800584e:	f000 fb75 	bl	8005f3c <_sbrk_r>
 8005852:	1c43      	adds	r3, r0, #1
 8005854:	d00a      	beq.n	800586c <sbrk_aligned+0x34>
 8005856:	1cc4      	adds	r4, r0, #3
 8005858:	f024 0403 	bic.w	r4, r4, #3
 800585c:	42a0      	cmp	r0, r4
 800585e:	d007      	beq.n	8005870 <sbrk_aligned+0x38>
 8005860:	1a21      	subs	r1, r4, r0
 8005862:	4628      	mov	r0, r5
 8005864:	f000 fb6a 	bl	8005f3c <_sbrk_r>
 8005868:	3001      	adds	r0, #1
 800586a:	d101      	bne.n	8005870 <sbrk_aligned+0x38>
 800586c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005870:	4620      	mov	r0, r4
 8005872:	bd70      	pop	{r4, r5, r6, pc}
 8005874:	200003fc 	.word	0x200003fc

08005878 <_malloc_r>:
 8005878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800587c:	1ccd      	adds	r5, r1, #3
 800587e:	f025 0503 	bic.w	r5, r5, #3
 8005882:	3508      	adds	r5, #8
 8005884:	2d0c      	cmp	r5, #12
 8005886:	bf38      	it	cc
 8005888:	250c      	movcc	r5, #12
 800588a:	2d00      	cmp	r5, #0
 800588c:	4607      	mov	r7, r0
 800588e:	db01      	blt.n	8005894 <_malloc_r+0x1c>
 8005890:	42a9      	cmp	r1, r5
 8005892:	d905      	bls.n	80058a0 <_malloc_r+0x28>
 8005894:	230c      	movs	r3, #12
 8005896:	603b      	str	r3, [r7, #0]
 8005898:	2600      	movs	r6, #0
 800589a:	4630      	mov	r0, r6
 800589c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058a0:	4e2e      	ldr	r6, [pc, #184]	; (800595c <_malloc_r+0xe4>)
 80058a2:	f000 fbf5 	bl	8006090 <__malloc_lock>
 80058a6:	6833      	ldr	r3, [r6, #0]
 80058a8:	461c      	mov	r4, r3
 80058aa:	bb34      	cbnz	r4, 80058fa <_malloc_r+0x82>
 80058ac:	4629      	mov	r1, r5
 80058ae:	4638      	mov	r0, r7
 80058b0:	f7ff ffc2 	bl	8005838 <sbrk_aligned>
 80058b4:	1c43      	adds	r3, r0, #1
 80058b6:	4604      	mov	r4, r0
 80058b8:	d14d      	bne.n	8005956 <_malloc_r+0xde>
 80058ba:	6834      	ldr	r4, [r6, #0]
 80058bc:	4626      	mov	r6, r4
 80058be:	2e00      	cmp	r6, #0
 80058c0:	d140      	bne.n	8005944 <_malloc_r+0xcc>
 80058c2:	6823      	ldr	r3, [r4, #0]
 80058c4:	4631      	mov	r1, r6
 80058c6:	4638      	mov	r0, r7
 80058c8:	eb04 0803 	add.w	r8, r4, r3
 80058cc:	f000 fb36 	bl	8005f3c <_sbrk_r>
 80058d0:	4580      	cmp	r8, r0
 80058d2:	d13a      	bne.n	800594a <_malloc_r+0xd2>
 80058d4:	6821      	ldr	r1, [r4, #0]
 80058d6:	3503      	adds	r5, #3
 80058d8:	1a6d      	subs	r5, r5, r1
 80058da:	f025 0503 	bic.w	r5, r5, #3
 80058de:	3508      	adds	r5, #8
 80058e0:	2d0c      	cmp	r5, #12
 80058e2:	bf38      	it	cc
 80058e4:	250c      	movcc	r5, #12
 80058e6:	4629      	mov	r1, r5
 80058e8:	4638      	mov	r0, r7
 80058ea:	f7ff ffa5 	bl	8005838 <sbrk_aligned>
 80058ee:	3001      	adds	r0, #1
 80058f0:	d02b      	beq.n	800594a <_malloc_r+0xd2>
 80058f2:	6823      	ldr	r3, [r4, #0]
 80058f4:	442b      	add	r3, r5
 80058f6:	6023      	str	r3, [r4, #0]
 80058f8:	e00e      	b.n	8005918 <_malloc_r+0xa0>
 80058fa:	6822      	ldr	r2, [r4, #0]
 80058fc:	1b52      	subs	r2, r2, r5
 80058fe:	d41e      	bmi.n	800593e <_malloc_r+0xc6>
 8005900:	2a0b      	cmp	r2, #11
 8005902:	d916      	bls.n	8005932 <_malloc_r+0xba>
 8005904:	1961      	adds	r1, r4, r5
 8005906:	42a3      	cmp	r3, r4
 8005908:	6025      	str	r5, [r4, #0]
 800590a:	bf18      	it	ne
 800590c:	6059      	strne	r1, [r3, #4]
 800590e:	6863      	ldr	r3, [r4, #4]
 8005910:	bf08      	it	eq
 8005912:	6031      	streq	r1, [r6, #0]
 8005914:	5162      	str	r2, [r4, r5]
 8005916:	604b      	str	r3, [r1, #4]
 8005918:	4638      	mov	r0, r7
 800591a:	f104 060b 	add.w	r6, r4, #11
 800591e:	f000 fbbd 	bl	800609c <__malloc_unlock>
 8005922:	f026 0607 	bic.w	r6, r6, #7
 8005926:	1d23      	adds	r3, r4, #4
 8005928:	1af2      	subs	r2, r6, r3
 800592a:	d0b6      	beq.n	800589a <_malloc_r+0x22>
 800592c:	1b9b      	subs	r3, r3, r6
 800592e:	50a3      	str	r3, [r4, r2]
 8005930:	e7b3      	b.n	800589a <_malloc_r+0x22>
 8005932:	6862      	ldr	r2, [r4, #4]
 8005934:	42a3      	cmp	r3, r4
 8005936:	bf0c      	ite	eq
 8005938:	6032      	streq	r2, [r6, #0]
 800593a:	605a      	strne	r2, [r3, #4]
 800593c:	e7ec      	b.n	8005918 <_malloc_r+0xa0>
 800593e:	4623      	mov	r3, r4
 8005940:	6864      	ldr	r4, [r4, #4]
 8005942:	e7b2      	b.n	80058aa <_malloc_r+0x32>
 8005944:	4634      	mov	r4, r6
 8005946:	6876      	ldr	r6, [r6, #4]
 8005948:	e7b9      	b.n	80058be <_malloc_r+0x46>
 800594a:	230c      	movs	r3, #12
 800594c:	603b      	str	r3, [r7, #0]
 800594e:	4638      	mov	r0, r7
 8005950:	f000 fba4 	bl	800609c <__malloc_unlock>
 8005954:	e7a1      	b.n	800589a <_malloc_r+0x22>
 8005956:	6025      	str	r5, [r4, #0]
 8005958:	e7de      	b.n	8005918 <_malloc_r+0xa0>
 800595a:	bf00      	nop
 800595c:	200003f8 	.word	0x200003f8

08005960 <__sfputc_r>:
 8005960:	6893      	ldr	r3, [r2, #8]
 8005962:	3b01      	subs	r3, #1
 8005964:	2b00      	cmp	r3, #0
 8005966:	b410      	push	{r4}
 8005968:	6093      	str	r3, [r2, #8]
 800596a:	da08      	bge.n	800597e <__sfputc_r+0x1e>
 800596c:	6994      	ldr	r4, [r2, #24]
 800596e:	42a3      	cmp	r3, r4
 8005970:	db01      	blt.n	8005976 <__sfputc_r+0x16>
 8005972:	290a      	cmp	r1, #10
 8005974:	d103      	bne.n	800597e <__sfputc_r+0x1e>
 8005976:	f85d 4b04 	ldr.w	r4, [sp], #4
 800597a:	f7ff bc31 	b.w	80051e0 <__swbuf_r>
 800597e:	6813      	ldr	r3, [r2, #0]
 8005980:	1c58      	adds	r0, r3, #1
 8005982:	6010      	str	r0, [r2, #0]
 8005984:	7019      	strb	r1, [r3, #0]
 8005986:	4608      	mov	r0, r1
 8005988:	f85d 4b04 	ldr.w	r4, [sp], #4
 800598c:	4770      	bx	lr

0800598e <__sfputs_r>:
 800598e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005990:	4606      	mov	r6, r0
 8005992:	460f      	mov	r7, r1
 8005994:	4614      	mov	r4, r2
 8005996:	18d5      	adds	r5, r2, r3
 8005998:	42ac      	cmp	r4, r5
 800599a:	d101      	bne.n	80059a0 <__sfputs_r+0x12>
 800599c:	2000      	movs	r0, #0
 800599e:	e007      	b.n	80059b0 <__sfputs_r+0x22>
 80059a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059a4:	463a      	mov	r2, r7
 80059a6:	4630      	mov	r0, r6
 80059a8:	f7ff ffda 	bl	8005960 <__sfputc_r>
 80059ac:	1c43      	adds	r3, r0, #1
 80059ae:	d1f3      	bne.n	8005998 <__sfputs_r+0xa>
 80059b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080059b4 <_vfiprintf_r>:
 80059b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059b8:	460d      	mov	r5, r1
 80059ba:	b09d      	sub	sp, #116	; 0x74
 80059bc:	4614      	mov	r4, r2
 80059be:	4698      	mov	r8, r3
 80059c0:	4606      	mov	r6, r0
 80059c2:	b118      	cbz	r0, 80059cc <_vfiprintf_r+0x18>
 80059c4:	6983      	ldr	r3, [r0, #24]
 80059c6:	b90b      	cbnz	r3, 80059cc <_vfiprintf_r+0x18>
 80059c8:	f7ff fde4 	bl	8005594 <__sinit>
 80059cc:	4b89      	ldr	r3, [pc, #548]	; (8005bf4 <_vfiprintf_r+0x240>)
 80059ce:	429d      	cmp	r5, r3
 80059d0:	d11b      	bne.n	8005a0a <_vfiprintf_r+0x56>
 80059d2:	6875      	ldr	r5, [r6, #4]
 80059d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80059d6:	07d9      	lsls	r1, r3, #31
 80059d8:	d405      	bmi.n	80059e6 <_vfiprintf_r+0x32>
 80059da:	89ab      	ldrh	r3, [r5, #12]
 80059dc:	059a      	lsls	r2, r3, #22
 80059de:	d402      	bmi.n	80059e6 <_vfiprintf_r+0x32>
 80059e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80059e2:	f7ff fe75 	bl	80056d0 <__retarget_lock_acquire_recursive>
 80059e6:	89ab      	ldrh	r3, [r5, #12]
 80059e8:	071b      	lsls	r3, r3, #28
 80059ea:	d501      	bpl.n	80059f0 <_vfiprintf_r+0x3c>
 80059ec:	692b      	ldr	r3, [r5, #16]
 80059ee:	b9eb      	cbnz	r3, 8005a2c <_vfiprintf_r+0x78>
 80059f0:	4629      	mov	r1, r5
 80059f2:	4630      	mov	r0, r6
 80059f4:	f7ff fc46 	bl	8005284 <__swsetup_r>
 80059f8:	b1c0      	cbz	r0, 8005a2c <_vfiprintf_r+0x78>
 80059fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80059fc:	07dc      	lsls	r4, r3, #31
 80059fe:	d50e      	bpl.n	8005a1e <_vfiprintf_r+0x6a>
 8005a00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a04:	b01d      	add	sp, #116	; 0x74
 8005a06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a0a:	4b7b      	ldr	r3, [pc, #492]	; (8005bf8 <_vfiprintf_r+0x244>)
 8005a0c:	429d      	cmp	r5, r3
 8005a0e:	d101      	bne.n	8005a14 <_vfiprintf_r+0x60>
 8005a10:	68b5      	ldr	r5, [r6, #8]
 8005a12:	e7df      	b.n	80059d4 <_vfiprintf_r+0x20>
 8005a14:	4b79      	ldr	r3, [pc, #484]	; (8005bfc <_vfiprintf_r+0x248>)
 8005a16:	429d      	cmp	r5, r3
 8005a18:	bf08      	it	eq
 8005a1a:	68f5      	ldreq	r5, [r6, #12]
 8005a1c:	e7da      	b.n	80059d4 <_vfiprintf_r+0x20>
 8005a1e:	89ab      	ldrh	r3, [r5, #12]
 8005a20:	0598      	lsls	r0, r3, #22
 8005a22:	d4ed      	bmi.n	8005a00 <_vfiprintf_r+0x4c>
 8005a24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005a26:	f7ff fe54 	bl	80056d2 <__retarget_lock_release_recursive>
 8005a2a:	e7e9      	b.n	8005a00 <_vfiprintf_r+0x4c>
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	9309      	str	r3, [sp, #36]	; 0x24
 8005a30:	2320      	movs	r3, #32
 8005a32:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005a36:	f8cd 800c 	str.w	r8, [sp, #12]
 8005a3a:	2330      	movs	r3, #48	; 0x30
 8005a3c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005c00 <_vfiprintf_r+0x24c>
 8005a40:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005a44:	f04f 0901 	mov.w	r9, #1
 8005a48:	4623      	mov	r3, r4
 8005a4a:	469a      	mov	sl, r3
 8005a4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005a50:	b10a      	cbz	r2, 8005a56 <_vfiprintf_r+0xa2>
 8005a52:	2a25      	cmp	r2, #37	; 0x25
 8005a54:	d1f9      	bne.n	8005a4a <_vfiprintf_r+0x96>
 8005a56:	ebba 0b04 	subs.w	fp, sl, r4
 8005a5a:	d00b      	beq.n	8005a74 <_vfiprintf_r+0xc0>
 8005a5c:	465b      	mov	r3, fp
 8005a5e:	4622      	mov	r2, r4
 8005a60:	4629      	mov	r1, r5
 8005a62:	4630      	mov	r0, r6
 8005a64:	f7ff ff93 	bl	800598e <__sfputs_r>
 8005a68:	3001      	adds	r0, #1
 8005a6a:	f000 80aa 	beq.w	8005bc2 <_vfiprintf_r+0x20e>
 8005a6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a70:	445a      	add	r2, fp
 8005a72:	9209      	str	r2, [sp, #36]	; 0x24
 8005a74:	f89a 3000 	ldrb.w	r3, [sl]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	f000 80a2 	beq.w	8005bc2 <_vfiprintf_r+0x20e>
 8005a7e:	2300      	movs	r3, #0
 8005a80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005a84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a88:	f10a 0a01 	add.w	sl, sl, #1
 8005a8c:	9304      	str	r3, [sp, #16]
 8005a8e:	9307      	str	r3, [sp, #28]
 8005a90:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005a94:	931a      	str	r3, [sp, #104]	; 0x68
 8005a96:	4654      	mov	r4, sl
 8005a98:	2205      	movs	r2, #5
 8005a9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a9e:	4858      	ldr	r0, [pc, #352]	; (8005c00 <_vfiprintf_r+0x24c>)
 8005aa0:	f7fa fba6 	bl	80001f0 <memchr>
 8005aa4:	9a04      	ldr	r2, [sp, #16]
 8005aa6:	b9d8      	cbnz	r0, 8005ae0 <_vfiprintf_r+0x12c>
 8005aa8:	06d1      	lsls	r1, r2, #27
 8005aaa:	bf44      	itt	mi
 8005aac:	2320      	movmi	r3, #32
 8005aae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005ab2:	0713      	lsls	r3, r2, #28
 8005ab4:	bf44      	itt	mi
 8005ab6:	232b      	movmi	r3, #43	; 0x2b
 8005ab8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005abc:	f89a 3000 	ldrb.w	r3, [sl]
 8005ac0:	2b2a      	cmp	r3, #42	; 0x2a
 8005ac2:	d015      	beq.n	8005af0 <_vfiprintf_r+0x13c>
 8005ac4:	9a07      	ldr	r2, [sp, #28]
 8005ac6:	4654      	mov	r4, sl
 8005ac8:	2000      	movs	r0, #0
 8005aca:	f04f 0c0a 	mov.w	ip, #10
 8005ace:	4621      	mov	r1, r4
 8005ad0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005ad4:	3b30      	subs	r3, #48	; 0x30
 8005ad6:	2b09      	cmp	r3, #9
 8005ad8:	d94e      	bls.n	8005b78 <_vfiprintf_r+0x1c4>
 8005ada:	b1b0      	cbz	r0, 8005b0a <_vfiprintf_r+0x156>
 8005adc:	9207      	str	r2, [sp, #28]
 8005ade:	e014      	b.n	8005b0a <_vfiprintf_r+0x156>
 8005ae0:	eba0 0308 	sub.w	r3, r0, r8
 8005ae4:	fa09 f303 	lsl.w	r3, r9, r3
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	9304      	str	r3, [sp, #16]
 8005aec:	46a2      	mov	sl, r4
 8005aee:	e7d2      	b.n	8005a96 <_vfiprintf_r+0xe2>
 8005af0:	9b03      	ldr	r3, [sp, #12]
 8005af2:	1d19      	adds	r1, r3, #4
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	9103      	str	r1, [sp, #12]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	bfbb      	ittet	lt
 8005afc:	425b      	neglt	r3, r3
 8005afe:	f042 0202 	orrlt.w	r2, r2, #2
 8005b02:	9307      	strge	r3, [sp, #28]
 8005b04:	9307      	strlt	r3, [sp, #28]
 8005b06:	bfb8      	it	lt
 8005b08:	9204      	strlt	r2, [sp, #16]
 8005b0a:	7823      	ldrb	r3, [r4, #0]
 8005b0c:	2b2e      	cmp	r3, #46	; 0x2e
 8005b0e:	d10c      	bne.n	8005b2a <_vfiprintf_r+0x176>
 8005b10:	7863      	ldrb	r3, [r4, #1]
 8005b12:	2b2a      	cmp	r3, #42	; 0x2a
 8005b14:	d135      	bne.n	8005b82 <_vfiprintf_r+0x1ce>
 8005b16:	9b03      	ldr	r3, [sp, #12]
 8005b18:	1d1a      	adds	r2, r3, #4
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	9203      	str	r2, [sp, #12]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	bfb8      	it	lt
 8005b22:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005b26:	3402      	adds	r4, #2
 8005b28:	9305      	str	r3, [sp, #20]
 8005b2a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005c10 <_vfiprintf_r+0x25c>
 8005b2e:	7821      	ldrb	r1, [r4, #0]
 8005b30:	2203      	movs	r2, #3
 8005b32:	4650      	mov	r0, sl
 8005b34:	f7fa fb5c 	bl	80001f0 <memchr>
 8005b38:	b140      	cbz	r0, 8005b4c <_vfiprintf_r+0x198>
 8005b3a:	2340      	movs	r3, #64	; 0x40
 8005b3c:	eba0 000a 	sub.w	r0, r0, sl
 8005b40:	fa03 f000 	lsl.w	r0, r3, r0
 8005b44:	9b04      	ldr	r3, [sp, #16]
 8005b46:	4303      	orrs	r3, r0
 8005b48:	3401      	adds	r4, #1
 8005b4a:	9304      	str	r3, [sp, #16]
 8005b4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b50:	482c      	ldr	r0, [pc, #176]	; (8005c04 <_vfiprintf_r+0x250>)
 8005b52:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005b56:	2206      	movs	r2, #6
 8005b58:	f7fa fb4a 	bl	80001f0 <memchr>
 8005b5c:	2800      	cmp	r0, #0
 8005b5e:	d03f      	beq.n	8005be0 <_vfiprintf_r+0x22c>
 8005b60:	4b29      	ldr	r3, [pc, #164]	; (8005c08 <_vfiprintf_r+0x254>)
 8005b62:	bb1b      	cbnz	r3, 8005bac <_vfiprintf_r+0x1f8>
 8005b64:	9b03      	ldr	r3, [sp, #12]
 8005b66:	3307      	adds	r3, #7
 8005b68:	f023 0307 	bic.w	r3, r3, #7
 8005b6c:	3308      	adds	r3, #8
 8005b6e:	9303      	str	r3, [sp, #12]
 8005b70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b72:	443b      	add	r3, r7
 8005b74:	9309      	str	r3, [sp, #36]	; 0x24
 8005b76:	e767      	b.n	8005a48 <_vfiprintf_r+0x94>
 8005b78:	fb0c 3202 	mla	r2, ip, r2, r3
 8005b7c:	460c      	mov	r4, r1
 8005b7e:	2001      	movs	r0, #1
 8005b80:	e7a5      	b.n	8005ace <_vfiprintf_r+0x11a>
 8005b82:	2300      	movs	r3, #0
 8005b84:	3401      	adds	r4, #1
 8005b86:	9305      	str	r3, [sp, #20]
 8005b88:	4619      	mov	r1, r3
 8005b8a:	f04f 0c0a 	mov.w	ip, #10
 8005b8e:	4620      	mov	r0, r4
 8005b90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b94:	3a30      	subs	r2, #48	; 0x30
 8005b96:	2a09      	cmp	r2, #9
 8005b98:	d903      	bls.n	8005ba2 <_vfiprintf_r+0x1ee>
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d0c5      	beq.n	8005b2a <_vfiprintf_r+0x176>
 8005b9e:	9105      	str	r1, [sp, #20]
 8005ba0:	e7c3      	b.n	8005b2a <_vfiprintf_r+0x176>
 8005ba2:	fb0c 2101 	mla	r1, ip, r1, r2
 8005ba6:	4604      	mov	r4, r0
 8005ba8:	2301      	movs	r3, #1
 8005baa:	e7f0      	b.n	8005b8e <_vfiprintf_r+0x1da>
 8005bac:	ab03      	add	r3, sp, #12
 8005bae:	9300      	str	r3, [sp, #0]
 8005bb0:	462a      	mov	r2, r5
 8005bb2:	4b16      	ldr	r3, [pc, #88]	; (8005c0c <_vfiprintf_r+0x258>)
 8005bb4:	a904      	add	r1, sp, #16
 8005bb6:	4630      	mov	r0, r6
 8005bb8:	f3af 8000 	nop.w
 8005bbc:	4607      	mov	r7, r0
 8005bbe:	1c78      	adds	r0, r7, #1
 8005bc0:	d1d6      	bne.n	8005b70 <_vfiprintf_r+0x1bc>
 8005bc2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005bc4:	07d9      	lsls	r1, r3, #31
 8005bc6:	d405      	bmi.n	8005bd4 <_vfiprintf_r+0x220>
 8005bc8:	89ab      	ldrh	r3, [r5, #12]
 8005bca:	059a      	lsls	r2, r3, #22
 8005bcc:	d402      	bmi.n	8005bd4 <_vfiprintf_r+0x220>
 8005bce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005bd0:	f7ff fd7f 	bl	80056d2 <__retarget_lock_release_recursive>
 8005bd4:	89ab      	ldrh	r3, [r5, #12]
 8005bd6:	065b      	lsls	r3, r3, #25
 8005bd8:	f53f af12 	bmi.w	8005a00 <_vfiprintf_r+0x4c>
 8005bdc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005bde:	e711      	b.n	8005a04 <_vfiprintf_r+0x50>
 8005be0:	ab03      	add	r3, sp, #12
 8005be2:	9300      	str	r3, [sp, #0]
 8005be4:	462a      	mov	r2, r5
 8005be6:	4b09      	ldr	r3, [pc, #36]	; (8005c0c <_vfiprintf_r+0x258>)
 8005be8:	a904      	add	r1, sp, #16
 8005bea:	4630      	mov	r0, r6
 8005bec:	f000 f880 	bl	8005cf0 <_printf_i>
 8005bf0:	e7e4      	b.n	8005bbc <_vfiprintf_r+0x208>
 8005bf2:	bf00      	nop
 8005bf4:	080063c0 	.word	0x080063c0
 8005bf8:	080063e0 	.word	0x080063e0
 8005bfc:	080063a0 	.word	0x080063a0
 8005c00:	08006400 	.word	0x08006400
 8005c04:	0800640a 	.word	0x0800640a
 8005c08:	00000000 	.word	0x00000000
 8005c0c:	0800598f 	.word	0x0800598f
 8005c10:	08006406 	.word	0x08006406

08005c14 <_printf_common>:
 8005c14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c18:	4616      	mov	r6, r2
 8005c1a:	4699      	mov	r9, r3
 8005c1c:	688a      	ldr	r2, [r1, #8]
 8005c1e:	690b      	ldr	r3, [r1, #16]
 8005c20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005c24:	4293      	cmp	r3, r2
 8005c26:	bfb8      	it	lt
 8005c28:	4613      	movlt	r3, r2
 8005c2a:	6033      	str	r3, [r6, #0]
 8005c2c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005c30:	4607      	mov	r7, r0
 8005c32:	460c      	mov	r4, r1
 8005c34:	b10a      	cbz	r2, 8005c3a <_printf_common+0x26>
 8005c36:	3301      	adds	r3, #1
 8005c38:	6033      	str	r3, [r6, #0]
 8005c3a:	6823      	ldr	r3, [r4, #0]
 8005c3c:	0699      	lsls	r1, r3, #26
 8005c3e:	bf42      	ittt	mi
 8005c40:	6833      	ldrmi	r3, [r6, #0]
 8005c42:	3302      	addmi	r3, #2
 8005c44:	6033      	strmi	r3, [r6, #0]
 8005c46:	6825      	ldr	r5, [r4, #0]
 8005c48:	f015 0506 	ands.w	r5, r5, #6
 8005c4c:	d106      	bne.n	8005c5c <_printf_common+0x48>
 8005c4e:	f104 0a19 	add.w	sl, r4, #25
 8005c52:	68e3      	ldr	r3, [r4, #12]
 8005c54:	6832      	ldr	r2, [r6, #0]
 8005c56:	1a9b      	subs	r3, r3, r2
 8005c58:	42ab      	cmp	r3, r5
 8005c5a:	dc26      	bgt.n	8005caa <_printf_common+0x96>
 8005c5c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005c60:	1e13      	subs	r3, r2, #0
 8005c62:	6822      	ldr	r2, [r4, #0]
 8005c64:	bf18      	it	ne
 8005c66:	2301      	movne	r3, #1
 8005c68:	0692      	lsls	r2, r2, #26
 8005c6a:	d42b      	bmi.n	8005cc4 <_printf_common+0xb0>
 8005c6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c70:	4649      	mov	r1, r9
 8005c72:	4638      	mov	r0, r7
 8005c74:	47c0      	blx	r8
 8005c76:	3001      	adds	r0, #1
 8005c78:	d01e      	beq.n	8005cb8 <_printf_common+0xa4>
 8005c7a:	6823      	ldr	r3, [r4, #0]
 8005c7c:	68e5      	ldr	r5, [r4, #12]
 8005c7e:	6832      	ldr	r2, [r6, #0]
 8005c80:	f003 0306 	and.w	r3, r3, #6
 8005c84:	2b04      	cmp	r3, #4
 8005c86:	bf08      	it	eq
 8005c88:	1aad      	subeq	r5, r5, r2
 8005c8a:	68a3      	ldr	r3, [r4, #8]
 8005c8c:	6922      	ldr	r2, [r4, #16]
 8005c8e:	bf0c      	ite	eq
 8005c90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c94:	2500      	movne	r5, #0
 8005c96:	4293      	cmp	r3, r2
 8005c98:	bfc4      	itt	gt
 8005c9a:	1a9b      	subgt	r3, r3, r2
 8005c9c:	18ed      	addgt	r5, r5, r3
 8005c9e:	2600      	movs	r6, #0
 8005ca0:	341a      	adds	r4, #26
 8005ca2:	42b5      	cmp	r5, r6
 8005ca4:	d11a      	bne.n	8005cdc <_printf_common+0xc8>
 8005ca6:	2000      	movs	r0, #0
 8005ca8:	e008      	b.n	8005cbc <_printf_common+0xa8>
 8005caa:	2301      	movs	r3, #1
 8005cac:	4652      	mov	r2, sl
 8005cae:	4649      	mov	r1, r9
 8005cb0:	4638      	mov	r0, r7
 8005cb2:	47c0      	blx	r8
 8005cb4:	3001      	adds	r0, #1
 8005cb6:	d103      	bne.n	8005cc0 <_printf_common+0xac>
 8005cb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005cbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cc0:	3501      	adds	r5, #1
 8005cc2:	e7c6      	b.n	8005c52 <_printf_common+0x3e>
 8005cc4:	18e1      	adds	r1, r4, r3
 8005cc6:	1c5a      	adds	r2, r3, #1
 8005cc8:	2030      	movs	r0, #48	; 0x30
 8005cca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005cce:	4422      	add	r2, r4
 8005cd0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005cd4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005cd8:	3302      	adds	r3, #2
 8005cda:	e7c7      	b.n	8005c6c <_printf_common+0x58>
 8005cdc:	2301      	movs	r3, #1
 8005cde:	4622      	mov	r2, r4
 8005ce0:	4649      	mov	r1, r9
 8005ce2:	4638      	mov	r0, r7
 8005ce4:	47c0      	blx	r8
 8005ce6:	3001      	adds	r0, #1
 8005ce8:	d0e6      	beq.n	8005cb8 <_printf_common+0xa4>
 8005cea:	3601      	adds	r6, #1
 8005cec:	e7d9      	b.n	8005ca2 <_printf_common+0x8e>
	...

08005cf0 <_printf_i>:
 8005cf0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005cf4:	7e0f      	ldrb	r7, [r1, #24]
 8005cf6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005cf8:	2f78      	cmp	r7, #120	; 0x78
 8005cfa:	4691      	mov	r9, r2
 8005cfc:	4680      	mov	r8, r0
 8005cfe:	460c      	mov	r4, r1
 8005d00:	469a      	mov	sl, r3
 8005d02:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005d06:	d807      	bhi.n	8005d18 <_printf_i+0x28>
 8005d08:	2f62      	cmp	r7, #98	; 0x62
 8005d0a:	d80a      	bhi.n	8005d22 <_printf_i+0x32>
 8005d0c:	2f00      	cmp	r7, #0
 8005d0e:	f000 80d8 	beq.w	8005ec2 <_printf_i+0x1d2>
 8005d12:	2f58      	cmp	r7, #88	; 0x58
 8005d14:	f000 80a3 	beq.w	8005e5e <_printf_i+0x16e>
 8005d18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005d20:	e03a      	b.n	8005d98 <_printf_i+0xa8>
 8005d22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005d26:	2b15      	cmp	r3, #21
 8005d28:	d8f6      	bhi.n	8005d18 <_printf_i+0x28>
 8005d2a:	a101      	add	r1, pc, #4	; (adr r1, 8005d30 <_printf_i+0x40>)
 8005d2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005d30:	08005d89 	.word	0x08005d89
 8005d34:	08005d9d 	.word	0x08005d9d
 8005d38:	08005d19 	.word	0x08005d19
 8005d3c:	08005d19 	.word	0x08005d19
 8005d40:	08005d19 	.word	0x08005d19
 8005d44:	08005d19 	.word	0x08005d19
 8005d48:	08005d9d 	.word	0x08005d9d
 8005d4c:	08005d19 	.word	0x08005d19
 8005d50:	08005d19 	.word	0x08005d19
 8005d54:	08005d19 	.word	0x08005d19
 8005d58:	08005d19 	.word	0x08005d19
 8005d5c:	08005ea9 	.word	0x08005ea9
 8005d60:	08005dcd 	.word	0x08005dcd
 8005d64:	08005e8b 	.word	0x08005e8b
 8005d68:	08005d19 	.word	0x08005d19
 8005d6c:	08005d19 	.word	0x08005d19
 8005d70:	08005ecb 	.word	0x08005ecb
 8005d74:	08005d19 	.word	0x08005d19
 8005d78:	08005dcd 	.word	0x08005dcd
 8005d7c:	08005d19 	.word	0x08005d19
 8005d80:	08005d19 	.word	0x08005d19
 8005d84:	08005e93 	.word	0x08005e93
 8005d88:	682b      	ldr	r3, [r5, #0]
 8005d8a:	1d1a      	adds	r2, r3, #4
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	602a      	str	r2, [r5, #0]
 8005d90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d98:	2301      	movs	r3, #1
 8005d9a:	e0a3      	b.n	8005ee4 <_printf_i+0x1f4>
 8005d9c:	6820      	ldr	r0, [r4, #0]
 8005d9e:	6829      	ldr	r1, [r5, #0]
 8005da0:	0606      	lsls	r6, r0, #24
 8005da2:	f101 0304 	add.w	r3, r1, #4
 8005da6:	d50a      	bpl.n	8005dbe <_printf_i+0xce>
 8005da8:	680e      	ldr	r6, [r1, #0]
 8005daa:	602b      	str	r3, [r5, #0]
 8005dac:	2e00      	cmp	r6, #0
 8005dae:	da03      	bge.n	8005db8 <_printf_i+0xc8>
 8005db0:	232d      	movs	r3, #45	; 0x2d
 8005db2:	4276      	negs	r6, r6
 8005db4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005db8:	485e      	ldr	r0, [pc, #376]	; (8005f34 <_printf_i+0x244>)
 8005dba:	230a      	movs	r3, #10
 8005dbc:	e019      	b.n	8005df2 <_printf_i+0x102>
 8005dbe:	680e      	ldr	r6, [r1, #0]
 8005dc0:	602b      	str	r3, [r5, #0]
 8005dc2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005dc6:	bf18      	it	ne
 8005dc8:	b236      	sxthne	r6, r6
 8005dca:	e7ef      	b.n	8005dac <_printf_i+0xbc>
 8005dcc:	682b      	ldr	r3, [r5, #0]
 8005dce:	6820      	ldr	r0, [r4, #0]
 8005dd0:	1d19      	adds	r1, r3, #4
 8005dd2:	6029      	str	r1, [r5, #0]
 8005dd4:	0601      	lsls	r1, r0, #24
 8005dd6:	d501      	bpl.n	8005ddc <_printf_i+0xec>
 8005dd8:	681e      	ldr	r6, [r3, #0]
 8005dda:	e002      	b.n	8005de2 <_printf_i+0xf2>
 8005ddc:	0646      	lsls	r6, r0, #25
 8005dde:	d5fb      	bpl.n	8005dd8 <_printf_i+0xe8>
 8005de0:	881e      	ldrh	r6, [r3, #0]
 8005de2:	4854      	ldr	r0, [pc, #336]	; (8005f34 <_printf_i+0x244>)
 8005de4:	2f6f      	cmp	r7, #111	; 0x6f
 8005de6:	bf0c      	ite	eq
 8005de8:	2308      	moveq	r3, #8
 8005dea:	230a      	movne	r3, #10
 8005dec:	2100      	movs	r1, #0
 8005dee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005df2:	6865      	ldr	r5, [r4, #4]
 8005df4:	60a5      	str	r5, [r4, #8]
 8005df6:	2d00      	cmp	r5, #0
 8005df8:	bfa2      	ittt	ge
 8005dfa:	6821      	ldrge	r1, [r4, #0]
 8005dfc:	f021 0104 	bicge.w	r1, r1, #4
 8005e00:	6021      	strge	r1, [r4, #0]
 8005e02:	b90e      	cbnz	r6, 8005e08 <_printf_i+0x118>
 8005e04:	2d00      	cmp	r5, #0
 8005e06:	d04d      	beq.n	8005ea4 <_printf_i+0x1b4>
 8005e08:	4615      	mov	r5, r2
 8005e0a:	fbb6 f1f3 	udiv	r1, r6, r3
 8005e0e:	fb03 6711 	mls	r7, r3, r1, r6
 8005e12:	5dc7      	ldrb	r7, [r0, r7]
 8005e14:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005e18:	4637      	mov	r7, r6
 8005e1a:	42bb      	cmp	r3, r7
 8005e1c:	460e      	mov	r6, r1
 8005e1e:	d9f4      	bls.n	8005e0a <_printf_i+0x11a>
 8005e20:	2b08      	cmp	r3, #8
 8005e22:	d10b      	bne.n	8005e3c <_printf_i+0x14c>
 8005e24:	6823      	ldr	r3, [r4, #0]
 8005e26:	07de      	lsls	r6, r3, #31
 8005e28:	d508      	bpl.n	8005e3c <_printf_i+0x14c>
 8005e2a:	6923      	ldr	r3, [r4, #16]
 8005e2c:	6861      	ldr	r1, [r4, #4]
 8005e2e:	4299      	cmp	r1, r3
 8005e30:	bfde      	ittt	le
 8005e32:	2330      	movle	r3, #48	; 0x30
 8005e34:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005e38:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005e3c:	1b52      	subs	r2, r2, r5
 8005e3e:	6122      	str	r2, [r4, #16]
 8005e40:	f8cd a000 	str.w	sl, [sp]
 8005e44:	464b      	mov	r3, r9
 8005e46:	aa03      	add	r2, sp, #12
 8005e48:	4621      	mov	r1, r4
 8005e4a:	4640      	mov	r0, r8
 8005e4c:	f7ff fee2 	bl	8005c14 <_printf_common>
 8005e50:	3001      	adds	r0, #1
 8005e52:	d14c      	bne.n	8005eee <_printf_i+0x1fe>
 8005e54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e58:	b004      	add	sp, #16
 8005e5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e5e:	4835      	ldr	r0, [pc, #212]	; (8005f34 <_printf_i+0x244>)
 8005e60:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005e64:	6829      	ldr	r1, [r5, #0]
 8005e66:	6823      	ldr	r3, [r4, #0]
 8005e68:	f851 6b04 	ldr.w	r6, [r1], #4
 8005e6c:	6029      	str	r1, [r5, #0]
 8005e6e:	061d      	lsls	r5, r3, #24
 8005e70:	d514      	bpl.n	8005e9c <_printf_i+0x1ac>
 8005e72:	07df      	lsls	r7, r3, #31
 8005e74:	bf44      	itt	mi
 8005e76:	f043 0320 	orrmi.w	r3, r3, #32
 8005e7a:	6023      	strmi	r3, [r4, #0]
 8005e7c:	b91e      	cbnz	r6, 8005e86 <_printf_i+0x196>
 8005e7e:	6823      	ldr	r3, [r4, #0]
 8005e80:	f023 0320 	bic.w	r3, r3, #32
 8005e84:	6023      	str	r3, [r4, #0]
 8005e86:	2310      	movs	r3, #16
 8005e88:	e7b0      	b.n	8005dec <_printf_i+0xfc>
 8005e8a:	6823      	ldr	r3, [r4, #0]
 8005e8c:	f043 0320 	orr.w	r3, r3, #32
 8005e90:	6023      	str	r3, [r4, #0]
 8005e92:	2378      	movs	r3, #120	; 0x78
 8005e94:	4828      	ldr	r0, [pc, #160]	; (8005f38 <_printf_i+0x248>)
 8005e96:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005e9a:	e7e3      	b.n	8005e64 <_printf_i+0x174>
 8005e9c:	0659      	lsls	r1, r3, #25
 8005e9e:	bf48      	it	mi
 8005ea0:	b2b6      	uxthmi	r6, r6
 8005ea2:	e7e6      	b.n	8005e72 <_printf_i+0x182>
 8005ea4:	4615      	mov	r5, r2
 8005ea6:	e7bb      	b.n	8005e20 <_printf_i+0x130>
 8005ea8:	682b      	ldr	r3, [r5, #0]
 8005eaa:	6826      	ldr	r6, [r4, #0]
 8005eac:	6961      	ldr	r1, [r4, #20]
 8005eae:	1d18      	adds	r0, r3, #4
 8005eb0:	6028      	str	r0, [r5, #0]
 8005eb2:	0635      	lsls	r5, r6, #24
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	d501      	bpl.n	8005ebc <_printf_i+0x1cc>
 8005eb8:	6019      	str	r1, [r3, #0]
 8005eba:	e002      	b.n	8005ec2 <_printf_i+0x1d2>
 8005ebc:	0670      	lsls	r0, r6, #25
 8005ebe:	d5fb      	bpl.n	8005eb8 <_printf_i+0x1c8>
 8005ec0:	8019      	strh	r1, [r3, #0]
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	6123      	str	r3, [r4, #16]
 8005ec6:	4615      	mov	r5, r2
 8005ec8:	e7ba      	b.n	8005e40 <_printf_i+0x150>
 8005eca:	682b      	ldr	r3, [r5, #0]
 8005ecc:	1d1a      	adds	r2, r3, #4
 8005ece:	602a      	str	r2, [r5, #0]
 8005ed0:	681d      	ldr	r5, [r3, #0]
 8005ed2:	6862      	ldr	r2, [r4, #4]
 8005ed4:	2100      	movs	r1, #0
 8005ed6:	4628      	mov	r0, r5
 8005ed8:	f7fa f98a 	bl	80001f0 <memchr>
 8005edc:	b108      	cbz	r0, 8005ee2 <_printf_i+0x1f2>
 8005ede:	1b40      	subs	r0, r0, r5
 8005ee0:	6060      	str	r0, [r4, #4]
 8005ee2:	6863      	ldr	r3, [r4, #4]
 8005ee4:	6123      	str	r3, [r4, #16]
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005eec:	e7a8      	b.n	8005e40 <_printf_i+0x150>
 8005eee:	6923      	ldr	r3, [r4, #16]
 8005ef0:	462a      	mov	r2, r5
 8005ef2:	4649      	mov	r1, r9
 8005ef4:	4640      	mov	r0, r8
 8005ef6:	47d0      	blx	sl
 8005ef8:	3001      	adds	r0, #1
 8005efa:	d0ab      	beq.n	8005e54 <_printf_i+0x164>
 8005efc:	6823      	ldr	r3, [r4, #0]
 8005efe:	079b      	lsls	r3, r3, #30
 8005f00:	d413      	bmi.n	8005f2a <_printf_i+0x23a>
 8005f02:	68e0      	ldr	r0, [r4, #12]
 8005f04:	9b03      	ldr	r3, [sp, #12]
 8005f06:	4298      	cmp	r0, r3
 8005f08:	bfb8      	it	lt
 8005f0a:	4618      	movlt	r0, r3
 8005f0c:	e7a4      	b.n	8005e58 <_printf_i+0x168>
 8005f0e:	2301      	movs	r3, #1
 8005f10:	4632      	mov	r2, r6
 8005f12:	4649      	mov	r1, r9
 8005f14:	4640      	mov	r0, r8
 8005f16:	47d0      	blx	sl
 8005f18:	3001      	adds	r0, #1
 8005f1a:	d09b      	beq.n	8005e54 <_printf_i+0x164>
 8005f1c:	3501      	adds	r5, #1
 8005f1e:	68e3      	ldr	r3, [r4, #12]
 8005f20:	9903      	ldr	r1, [sp, #12]
 8005f22:	1a5b      	subs	r3, r3, r1
 8005f24:	42ab      	cmp	r3, r5
 8005f26:	dcf2      	bgt.n	8005f0e <_printf_i+0x21e>
 8005f28:	e7eb      	b.n	8005f02 <_printf_i+0x212>
 8005f2a:	2500      	movs	r5, #0
 8005f2c:	f104 0619 	add.w	r6, r4, #25
 8005f30:	e7f5      	b.n	8005f1e <_printf_i+0x22e>
 8005f32:	bf00      	nop
 8005f34:	08006411 	.word	0x08006411
 8005f38:	08006422 	.word	0x08006422

08005f3c <_sbrk_r>:
 8005f3c:	b538      	push	{r3, r4, r5, lr}
 8005f3e:	4d06      	ldr	r5, [pc, #24]	; (8005f58 <_sbrk_r+0x1c>)
 8005f40:	2300      	movs	r3, #0
 8005f42:	4604      	mov	r4, r0
 8005f44:	4608      	mov	r0, r1
 8005f46:	602b      	str	r3, [r5, #0]
 8005f48:	f7fa feaa 	bl	8000ca0 <_sbrk>
 8005f4c:	1c43      	adds	r3, r0, #1
 8005f4e:	d102      	bne.n	8005f56 <_sbrk_r+0x1a>
 8005f50:	682b      	ldr	r3, [r5, #0]
 8005f52:	b103      	cbz	r3, 8005f56 <_sbrk_r+0x1a>
 8005f54:	6023      	str	r3, [r4, #0]
 8005f56:	bd38      	pop	{r3, r4, r5, pc}
 8005f58:	20000400 	.word	0x20000400

08005f5c <__sread>:
 8005f5c:	b510      	push	{r4, lr}
 8005f5e:	460c      	mov	r4, r1
 8005f60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f64:	f000 f8a0 	bl	80060a8 <_read_r>
 8005f68:	2800      	cmp	r0, #0
 8005f6a:	bfab      	itete	ge
 8005f6c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005f6e:	89a3      	ldrhlt	r3, [r4, #12]
 8005f70:	181b      	addge	r3, r3, r0
 8005f72:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005f76:	bfac      	ite	ge
 8005f78:	6563      	strge	r3, [r4, #84]	; 0x54
 8005f7a:	81a3      	strhlt	r3, [r4, #12]
 8005f7c:	bd10      	pop	{r4, pc}

08005f7e <__swrite>:
 8005f7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f82:	461f      	mov	r7, r3
 8005f84:	898b      	ldrh	r3, [r1, #12]
 8005f86:	05db      	lsls	r3, r3, #23
 8005f88:	4605      	mov	r5, r0
 8005f8a:	460c      	mov	r4, r1
 8005f8c:	4616      	mov	r6, r2
 8005f8e:	d505      	bpl.n	8005f9c <__swrite+0x1e>
 8005f90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f94:	2302      	movs	r3, #2
 8005f96:	2200      	movs	r2, #0
 8005f98:	f000 f868 	bl	800606c <_lseek_r>
 8005f9c:	89a3      	ldrh	r3, [r4, #12]
 8005f9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005fa2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005fa6:	81a3      	strh	r3, [r4, #12]
 8005fa8:	4632      	mov	r2, r6
 8005faa:	463b      	mov	r3, r7
 8005fac:	4628      	mov	r0, r5
 8005fae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005fb2:	f000 b817 	b.w	8005fe4 <_write_r>

08005fb6 <__sseek>:
 8005fb6:	b510      	push	{r4, lr}
 8005fb8:	460c      	mov	r4, r1
 8005fba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fbe:	f000 f855 	bl	800606c <_lseek_r>
 8005fc2:	1c43      	adds	r3, r0, #1
 8005fc4:	89a3      	ldrh	r3, [r4, #12]
 8005fc6:	bf15      	itete	ne
 8005fc8:	6560      	strne	r0, [r4, #84]	; 0x54
 8005fca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005fce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005fd2:	81a3      	strheq	r3, [r4, #12]
 8005fd4:	bf18      	it	ne
 8005fd6:	81a3      	strhne	r3, [r4, #12]
 8005fd8:	bd10      	pop	{r4, pc}

08005fda <__sclose>:
 8005fda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fde:	f000 b813 	b.w	8006008 <_close_r>
	...

08005fe4 <_write_r>:
 8005fe4:	b538      	push	{r3, r4, r5, lr}
 8005fe6:	4d07      	ldr	r5, [pc, #28]	; (8006004 <_write_r+0x20>)
 8005fe8:	4604      	mov	r4, r0
 8005fea:	4608      	mov	r0, r1
 8005fec:	4611      	mov	r1, r2
 8005fee:	2200      	movs	r2, #0
 8005ff0:	602a      	str	r2, [r5, #0]
 8005ff2:	461a      	mov	r2, r3
 8005ff4:	f7fa fe0a 	bl	8000c0c <_write>
 8005ff8:	1c43      	adds	r3, r0, #1
 8005ffa:	d102      	bne.n	8006002 <_write_r+0x1e>
 8005ffc:	682b      	ldr	r3, [r5, #0]
 8005ffe:	b103      	cbz	r3, 8006002 <_write_r+0x1e>
 8006000:	6023      	str	r3, [r4, #0]
 8006002:	bd38      	pop	{r3, r4, r5, pc}
 8006004:	20000400 	.word	0x20000400

08006008 <_close_r>:
 8006008:	b538      	push	{r3, r4, r5, lr}
 800600a:	4d06      	ldr	r5, [pc, #24]	; (8006024 <_close_r+0x1c>)
 800600c:	2300      	movs	r3, #0
 800600e:	4604      	mov	r4, r0
 8006010:	4608      	mov	r0, r1
 8006012:	602b      	str	r3, [r5, #0]
 8006014:	f7fa fe10 	bl	8000c38 <_close>
 8006018:	1c43      	adds	r3, r0, #1
 800601a:	d102      	bne.n	8006022 <_close_r+0x1a>
 800601c:	682b      	ldr	r3, [r5, #0]
 800601e:	b103      	cbz	r3, 8006022 <_close_r+0x1a>
 8006020:	6023      	str	r3, [r4, #0]
 8006022:	bd38      	pop	{r3, r4, r5, pc}
 8006024:	20000400 	.word	0x20000400

08006028 <_fstat_r>:
 8006028:	b538      	push	{r3, r4, r5, lr}
 800602a:	4d07      	ldr	r5, [pc, #28]	; (8006048 <_fstat_r+0x20>)
 800602c:	2300      	movs	r3, #0
 800602e:	4604      	mov	r4, r0
 8006030:	4608      	mov	r0, r1
 8006032:	4611      	mov	r1, r2
 8006034:	602b      	str	r3, [r5, #0]
 8006036:	f7fa fe0b 	bl	8000c50 <_fstat>
 800603a:	1c43      	adds	r3, r0, #1
 800603c:	d102      	bne.n	8006044 <_fstat_r+0x1c>
 800603e:	682b      	ldr	r3, [r5, #0]
 8006040:	b103      	cbz	r3, 8006044 <_fstat_r+0x1c>
 8006042:	6023      	str	r3, [r4, #0]
 8006044:	bd38      	pop	{r3, r4, r5, pc}
 8006046:	bf00      	nop
 8006048:	20000400 	.word	0x20000400

0800604c <_isatty_r>:
 800604c:	b538      	push	{r3, r4, r5, lr}
 800604e:	4d06      	ldr	r5, [pc, #24]	; (8006068 <_isatty_r+0x1c>)
 8006050:	2300      	movs	r3, #0
 8006052:	4604      	mov	r4, r0
 8006054:	4608      	mov	r0, r1
 8006056:	602b      	str	r3, [r5, #0]
 8006058:	f7fa fe0a 	bl	8000c70 <_isatty>
 800605c:	1c43      	adds	r3, r0, #1
 800605e:	d102      	bne.n	8006066 <_isatty_r+0x1a>
 8006060:	682b      	ldr	r3, [r5, #0]
 8006062:	b103      	cbz	r3, 8006066 <_isatty_r+0x1a>
 8006064:	6023      	str	r3, [r4, #0]
 8006066:	bd38      	pop	{r3, r4, r5, pc}
 8006068:	20000400 	.word	0x20000400

0800606c <_lseek_r>:
 800606c:	b538      	push	{r3, r4, r5, lr}
 800606e:	4d07      	ldr	r5, [pc, #28]	; (800608c <_lseek_r+0x20>)
 8006070:	4604      	mov	r4, r0
 8006072:	4608      	mov	r0, r1
 8006074:	4611      	mov	r1, r2
 8006076:	2200      	movs	r2, #0
 8006078:	602a      	str	r2, [r5, #0]
 800607a:	461a      	mov	r2, r3
 800607c:	f7fa fe03 	bl	8000c86 <_lseek>
 8006080:	1c43      	adds	r3, r0, #1
 8006082:	d102      	bne.n	800608a <_lseek_r+0x1e>
 8006084:	682b      	ldr	r3, [r5, #0]
 8006086:	b103      	cbz	r3, 800608a <_lseek_r+0x1e>
 8006088:	6023      	str	r3, [r4, #0]
 800608a:	bd38      	pop	{r3, r4, r5, pc}
 800608c:	20000400 	.word	0x20000400

08006090 <__malloc_lock>:
 8006090:	4801      	ldr	r0, [pc, #4]	; (8006098 <__malloc_lock+0x8>)
 8006092:	f7ff bb1d 	b.w	80056d0 <__retarget_lock_acquire_recursive>
 8006096:	bf00      	nop
 8006098:	200003f4 	.word	0x200003f4

0800609c <__malloc_unlock>:
 800609c:	4801      	ldr	r0, [pc, #4]	; (80060a4 <__malloc_unlock+0x8>)
 800609e:	f7ff bb18 	b.w	80056d2 <__retarget_lock_release_recursive>
 80060a2:	bf00      	nop
 80060a4:	200003f4 	.word	0x200003f4

080060a8 <_read_r>:
 80060a8:	b538      	push	{r3, r4, r5, lr}
 80060aa:	4d07      	ldr	r5, [pc, #28]	; (80060c8 <_read_r+0x20>)
 80060ac:	4604      	mov	r4, r0
 80060ae:	4608      	mov	r0, r1
 80060b0:	4611      	mov	r1, r2
 80060b2:	2200      	movs	r2, #0
 80060b4:	602a      	str	r2, [r5, #0]
 80060b6:	461a      	mov	r2, r3
 80060b8:	f7fa fd8a 	bl	8000bd0 <_read>
 80060bc:	1c43      	adds	r3, r0, #1
 80060be:	d102      	bne.n	80060c6 <_read_r+0x1e>
 80060c0:	682b      	ldr	r3, [r5, #0]
 80060c2:	b103      	cbz	r3, 80060c6 <_read_r+0x1e>
 80060c4:	6023      	str	r3, [r4, #0]
 80060c6:	bd38      	pop	{r3, r4, r5, pc}
 80060c8:	20000400 	.word	0x20000400

080060cc <_init>:
 80060cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060ce:	bf00      	nop
 80060d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060d2:	bc08      	pop	{r3}
 80060d4:	469e      	mov	lr, r3
 80060d6:	4770      	bx	lr

080060d8 <_fini>:
 80060d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060da:	bf00      	nop
 80060dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060de:	bc08      	pop	{r3}
 80060e0:	469e      	mov	lr, r3
 80060e2:	4770      	bx	lr
