
sleep_mode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f34  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000053c  08008078  08008078  00018078  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080085b4  080085b4  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  080085b4  080085b4  000185b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080085bc  080085bc  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080085bc  080085bc  000185bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080085c0  080085c0  000185c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  080085c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  200001e0  080087a4  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000264  080087a4  00020264  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000933e  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ae6  00000000  00000000  00029547  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000818  00000000  00000000  0002b030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000770  00000000  00000000  0002b848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015f18  00000000  00000000  0002bfb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000097e3  00000000  00000000  00041ed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083398  00000000  00000000  0004b6b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cea4b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003528  00000000  00000000  000cea9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001e0 	.word	0x200001e0
 800015c:	00000000 	.word	0x00000000
 8000160:	0800805c 	.word	0x0800805c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001e4 	.word	0x200001e4
 800017c:	0800805c 	.word	0x0800805c

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	; 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	3c01      	subs	r4, #1
 80002cc:	bf28      	it	cs
 80002ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002d2:	d2e9      	bcs.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800047a:	bf08      	it	eq
 800047c:	4770      	bxeq	lr
 800047e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000482:	bf04      	itt	eq
 8000484:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000498:	e71c      	b.n	80002d4 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_ul2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f04f 0500 	mov.w	r5, #0
 80004aa:	e00a      	b.n	80004c2 <__aeabi_l2d+0x16>

080004ac <__aeabi_l2d>:
 80004ac:	ea50 0201 	orrs.w	r2, r0, r1
 80004b0:	bf08      	it	eq
 80004b2:	4770      	bxeq	lr
 80004b4:	b530      	push	{r4, r5, lr}
 80004b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ba:	d502      	bpl.n	80004c2 <__aeabi_l2d+0x16>
 80004bc:	4240      	negs	r0, r0
 80004be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ce:	f43f aed8 	beq.w	8000282 <__adddf3+0xe6>
 80004d2:	f04f 0203 	mov.w	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e2:	bf18      	it	ne
 80004e4:	3203      	addne	r2, #3
 80004e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	fa20 f002 	lsr.w	r0, r0, r2
 80004f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fa:	ea40 000e 	orr.w	r0, r0, lr
 80004fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000502:	4414      	add	r4, r2
 8000504:	e6bd      	b.n	8000282 <__adddf3+0xe6>
 8000506:	bf00      	nop

08000508 <__aeabi_dmul>:
 8000508:	b570      	push	{r4, r5, r6, lr}
 800050a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800050e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000512:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000516:	bf1d      	ittte	ne
 8000518:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800051c:	ea94 0f0c 	teqne	r4, ip
 8000520:	ea95 0f0c 	teqne	r5, ip
 8000524:	f000 f8de 	bleq	80006e4 <__aeabi_dmul+0x1dc>
 8000528:	442c      	add	r4, r5
 800052a:	ea81 0603 	eor.w	r6, r1, r3
 800052e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000532:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000536:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053a:	bf18      	it	ne
 800053c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000540:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000544:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000548:	d038      	beq.n	80005bc <__aeabi_dmul+0xb4>
 800054a:	fba0 ce02 	umull	ip, lr, r0, r2
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000556:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800055a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800055e:	f04f 0600 	mov.w	r6, #0
 8000562:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000566:	f09c 0f00 	teq	ip, #0
 800056a:	bf18      	it	ne
 800056c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000570:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000574:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000578:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800057c:	d204      	bcs.n	8000588 <__aeabi_dmul+0x80>
 800057e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000582:	416d      	adcs	r5, r5
 8000584:	eb46 0606 	adc.w	r6, r6, r6
 8000588:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800058c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000590:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000594:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000598:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800059c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005a0:	bf88      	it	hi
 80005a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005a6:	d81e      	bhi.n	80005e6 <__aeabi_dmul+0xde>
 80005a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ac:	bf08      	it	eq
 80005ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b2:	f150 0000 	adcs.w	r0, r0, #0
 80005b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005c0:	ea46 0101 	orr.w	r1, r6, r1
 80005c4:	ea40 0002 	orr.w	r0, r0, r2
 80005c8:	ea81 0103 	eor.w	r1, r1, r3
 80005cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d0:	bfc2      	ittt	gt
 80005d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005da:	bd70      	popgt	{r4, r5, r6, pc}
 80005dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e0:	f04f 0e00 	mov.w	lr, #0
 80005e4:	3c01      	subs	r4, #1
 80005e6:	f300 80ab 	bgt.w	8000740 <__aeabi_dmul+0x238>
 80005ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ee:	bfde      	ittt	le
 80005f0:	2000      	movle	r0, #0
 80005f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005f6:	bd70      	pople	{r4, r5, r6, pc}
 80005f8:	f1c4 0400 	rsb	r4, r4, #0
 80005fc:	3c20      	subs	r4, #32
 80005fe:	da35      	bge.n	800066c <__aeabi_dmul+0x164>
 8000600:	340c      	adds	r4, #12
 8000602:	dc1b      	bgt.n	800063c <__aeabi_dmul+0x134>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f305 	lsl.w	r3, r0, r5
 8000610:	fa20 f004 	lsr.w	r0, r0, r4
 8000614:	fa01 f205 	lsl.w	r2, r1, r5
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000620:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	fa21 f604 	lsr.w	r6, r1, r4
 800062c:	eb42 0106 	adc.w	r1, r2, r6
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 040c 	rsb	r4, r4, #12
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f304 	lsl.w	r3, r0, r4
 8000648:	fa20 f005 	lsr.w	r0, r0, r5
 800064c:	fa01 f204 	lsl.w	r2, r1, r4
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000658:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800065c:	f141 0100 	adc.w	r1, r1, #0
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 0520 	rsb	r5, r4, #32
 8000670:	fa00 f205 	lsl.w	r2, r0, r5
 8000674:	ea4e 0e02 	orr.w	lr, lr, r2
 8000678:	fa20 f304 	lsr.w	r3, r0, r4
 800067c:	fa01 f205 	lsl.w	r2, r1, r5
 8000680:	ea43 0302 	orr.w	r3, r3, r2
 8000684:	fa21 f004 	lsr.w	r0, r1, r4
 8000688:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800068c:	fa21 f204 	lsr.w	r2, r1, r4
 8000690:	ea20 0002 	bic.w	r0, r0, r2
 8000694:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f094 0f00 	teq	r4, #0
 80006a8:	d10f      	bne.n	80006ca <__aeabi_dmul+0x1c2>
 80006aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ae:	0040      	lsls	r0, r0, #1
 80006b0:	eb41 0101 	adc.w	r1, r1, r1
 80006b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3c01      	subeq	r4, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1a6>
 80006be:	ea41 0106 	orr.w	r1, r1, r6
 80006c2:	f095 0f00 	teq	r5, #0
 80006c6:	bf18      	it	ne
 80006c8:	4770      	bxne	lr
 80006ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ce:	0052      	lsls	r2, r2, #1
 80006d0:	eb43 0303 	adc.w	r3, r3, r3
 80006d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006d8:	bf08      	it	eq
 80006da:	3d01      	subeq	r5, #1
 80006dc:	d0f7      	beq.n	80006ce <__aeabi_dmul+0x1c6>
 80006de:	ea43 0306 	orr.w	r3, r3, r6
 80006e2:	4770      	bx	lr
 80006e4:	ea94 0f0c 	teq	r4, ip
 80006e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ec:	bf18      	it	ne
 80006ee:	ea95 0f0c 	teqne	r5, ip
 80006f2:	d00c      	beq.n	800070e <__aeabi_dmul+0x206>
 80006f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f8:	bf18      	it	ne
 80006fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fe:	d1d1      	bne.n	80006a4 <__aeabi_dmul+0x19c>
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000712:	bf06      	itte	eq
 8000714:	4610      	moveq	r0, r2
 8000716:	4619      	moveq	r1, r3
 8000718:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800071c:	d019      	beq.n	8000752 <__aeabi_dmul+0x24a>
 800071e:	ea94 0f0c 	teq	r4, ip
 8000722:	d102      	bne.n	800072a <__aeabi_dmul+0x222>
 8000724:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000728:	d113      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800072a:	ea95 0f0c 	teq	r5, ip
 800072e:	d105      	bne.n	800073c <__aeabi_dmul+0x234>
 8000730:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000734:	bf1c      	itt	ne
 8000736:	4610      	movne	r0, r2
 8000738:	4619      	movne	r1, r3
 800073a:	d10a      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000744:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000748:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000756:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800075a:	bd70      	pop	{r4, r5, r6, pc}

0800075c <__aeabi_ddiv>:
 800075c:	b570      	push	{r4, r5, r6, lr}
 800075e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000762:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000766:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076a:	bf1d      	ittte	ne
 800076c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000770:	ea94 0f0c 	teqne	r4, ip
 8000774:	ea95 0f0c 	teqne	r5, ip
 8000778:	f000 f8a7 	bleq	80008ca <__aeabi_ddiv+0x16e>
 800077c:	eba4 0405 	sub.w	r4, r4, r5
 8000780:	ea81 0e03 	eor.w	lr, r1, r3
 8000784:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000788:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800078c:	f000 8088 	beq.w	80008a0 <__aeabi_ddiv+0x144>
 8000790:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000794:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000798:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800079c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007b4:	429d      	cmp	r5, r3
 80007b6:	bf08      	it	eq
 80007b8:	4296      	cmpeq	r6, r2
 80007ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007c2:	d202      	bcs.n	80007ca <__aeabi_ddiv+0x6e>
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	1ab6      	subs	r6, r6, r2
 80007cc:	eb65 0503 	sbc.w	r5, r5, r3
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000838:	ea55 0e06 	orrs.w	lr, r5, r6
 800083c:	d018      	beq.n	8000870 <__aeabi_ddiv+0x114>
 800083e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000842:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000846:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800084e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000852:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000856:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085a:	d1c0      	bne.n	80007de <__aeabi_ddiv+0x82>
 800085c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000860:	d10b      	bne.n	800087a <__aeabi_ddiv+0x11e>
 8000862:	ea41 0100 	orr.w	r1, r1, r0
 8000866:	f04f 0000 	mov.w	r0, #0
 800086a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800086e:	e7b6      	b.n	80007de <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000874:	bf04      	itt	eq
 8000876:	4301      	orreq	r1, r0
 8000878:	2000      	moveq	r0, #0
 800087a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800087e:	bf88      	it	hi
 8000880:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000884:	f63f aeaf 	bhi.w	80005e6 <__aeabi_dmul+0xde>
 8000888:	ebb5 0c03 	subs.w	ip, r5, r3
 800088c:	bf04      	itt	eq
 800088e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000892:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000896:	f150 0000 	adcs.w	r0, r0, #0
 800089a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800089e:	bd70      	pop	{r4, r5, r6, pc}
 80008a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ac:	bfc2      	ittt	gt
 80008ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008b6:	bd70      	popgt	{r4, r5, r6, pc}
 80008b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008bc:	f04f 0e00 	mov.w	lr, #0
 80008c0:	3c01      	subs	r4, #1
 80008c2:	e690      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008c4:	ea45 0e06 	orr.w	lr, r5, r6
 80008c8:	e68d      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	bf08      	it	eq
 80008d4:	ea95 0f0c 	teqeq	r5, ip
 80008d8:	f43f af3b 	beq.w	8000752 <__aeabi_dmul+0x24a>
 80008dc:	ea94 0f0c 	teq	r4, ip
 80008e0:	d10a      	bne.n	80008f8 <__aeabi_ddiv+0x19c>
 80008e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008e6:	f47f af34 	bne.w	8000752 <__aeabi_dmul+0x24a>
 80008ea:	ea95 0f0c 	teq	r5, ip
 80008ee:	f47f af25 	bne.w	800073c <__aeabi_dmul+0x234>
 80008f2:	4610      	mov	r0, r2
 80008f4:	4619      	mov	r1, r3
 80008f6:	e72c      	b.n	8000752 <__aeabi_dmul+0x24a>
 80008f8:	ea95 0f0c 	teq	r5, ip
 80008fc:	d106      	bne.n	800090c <__aeabi_ddiv+0x1b0>
 80008fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000902:	f43f aefd 	beq.w	8000700 <__aeabi_dmul+0x1f8>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e722      	b.n	8000752 <__aeabi_dmul+0x24a>
 800090c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000916:	f47f aec5 	bne.w	80006a4 <__aeabi_dmul+0x19c>
 800091a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800091e:	f47f af0d 	bne.w	800073c <__aeabi_dmul+0x234>
 8000922:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000926:	f47f aeeb 	bne.w	8000700 <__aeabi_dmul+0x1f8>
 800092a:	e712      	b.n	8000752 <__aeabi_dmul+0x24a>

0800092c <__gedf2>:
 800092c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000930:	e006      	b.n	8000940 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__ledf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	e002      	b.n	8000940 <__cmpdf2+0x4>
 800093a:	bf00      	nop

0800093c <__cmpdf2>:
 800093c:	f04f 0c01 	mov.w	ip, #1
 8000940:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000944:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000948:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800094c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000956:	d01b      	beq.n	8000990 <__cmpdf2+0x54>
 8000958:	b001      	add	sp, #4
 800095a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800095e:	bf0c      	ite	eq
 8000960:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000964:	ea91 0f03 	teqne	r1, r3
 8000968:	bf02      	ittt	eq
 800096a:	ea90 0f02 	teqeq	r0, r2
 800096e:	2000      	moveq	r0, #0
 8000970:	4770      	bxeq	lr
 8000972:	f110 0f00 	cmn.w	r0, #0
 8000976:	ea91 0f03 	teq	r1, r3
 800097a:	bf58      	it	pl
 800097c:	4299      	cmppl	r1, r3
 800097e:	bf08      	it	eq
 8000980:	4290      	cmpeq	r0, r2
 8000982:	bf2c      	ite	cs
 8000984:	17d8      	asrcs	r0, r3, #31
 8000986:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098a:	f040 0001 	orr.w	r0, r0, #1
 800098e:	4770      	bx	lr
 8000990:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d102      	bne.n	80009a0 <__cmpdf2+0x64>
 800099a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800099e:	d107      	bne.n	80009b0 <__cmpdf2+0x74>
 80009a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	d1d6      	bne.n	8000958 <__cmpdf2+0x1c>
 80009aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ae:	d0d3      	beq.n	8000958 <__cmpdf2+0x1c>
 80009b0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdrcmple>:
 80009b8:	4684      	mov	ip, r0
 80009ba:	4610      	mov	r0, r2
 80009bc:	4662      	mov	r2, ip
 80009be:	468c      	mov	ip, r1
 80009c0:	4619      	mov	r1, r3
 80009c2:	4663      	mov	r3, ip
 80009c4:	e000      	b.n	80009c8 <__aeabi_cdcmpeq>
 80009c6:	bf00      	nop

080009c8 <__aeabi_cdcmpeq>:
 80009c8:	b501      	push	{r0, lr}
 80009ca:	f7ff ffb7 	bl	800093c <__cmpdf2>
 80009ce:	2800      	cmp	r0, #0
 80009d0:	bf48      	it	mi
 80009d2:	f110 0f00 	cmnmi.w	r0, #0
 80009d6:	bd01      	pop	{r0, pc}

080009d8 <__aeabi_dcmpeq>:
 80009d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009dc:	f7ff fff4 	bl	80009c8 <__aeabi_cdcmpeq>
 80009e0:	bf0c      	ite	eq
 80009e2:	2001      	moveq	r0, #1
 80009e4:	2000      	movne	r0, #0
 80009e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ea:	bf00      	nop

080009ec <__aeabi_dcmplt>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff ffea 	bl	80009c8 <__aeabi_cdcmpeq>
 80009f4:	bf34      	ite	cc
 80009f6:	2001      	movcc	r0, #1
 80009f8:	2000      	movcs	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmple>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffe0 	bl	80009c8 <__aeabi_cdcmpeq>
 8000a08:	bf94      	ite	ls
 8000a0a:	2001      	movls	r0, #1
 8000a0c:	2000      	movhi	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmpge>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffce 	bl	80009b8 <__aeabi_cdrcmple>
 8000a1c:	bf94      	ite	ls
 8000a1e:	2001      	movls	r0, #1
 8000a20:	2000      	movhi	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_dcmpgt>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffc4 	bl	80009b8 <__aeabi_cdrcmple>
 8000a30:	bf34      	ite	cc
 8000a32:	2001      	movcc	r0, #1
 8000a34:	2000      	movcs	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmpun>:
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x10>
 8000a46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4a:	d10a      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	d102      	bne.n	8000a5c <__aeabi_dcmpun+0x20>
 8000a56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0001 	mov.w	r0, #1
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_d2iz>:
 8000a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a70:	d215      	bcs.n	8000a9e <__aeabi_d2iz+0x36>
 8000a72:	d511      	bpl.n	8000a98 <__aeabi_d2iz+0x30>
 8000a74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a7c:	d912      	bls.n	8000aa4 <__aeabi_d2iz+0x3c>
 8000a7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	bf18      	it	ne
 8000a94:	4240      	negne	r0, r0
 8000a96:	4770      	bx	lr
 8000a98:	f04f 0000 	mov.w	r0, #0
 8000a9c:	4770      	bx	lr
 8000a9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa2:	d105      	bne.n	8000ab0 <__aeabi_d2iz+0x48>
 8000aa4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aa8:	bf08      	it	eq
 8000aaa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_d2uiz>:
 8000ab8:	004a      	lsls	r2, r1, #1
 8000aba:	d211      	bcs.n	8000ae0 <__aeabi_d2uiz+0x28>
 8000abc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ac0:	d211      	bcs.n	8000ae6 <__aeabi_d2uiz+0x2e>
 8000ac2:	d50d      	bpl.n	8000ae0 <__aeabi_d2uiz+0x28>
 8000ac4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000acc:	d40e      	bmi.n	8000aec <__aeabi_d2uiz+0x34>
 8000ace:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ad6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ada:	fa23 f002 	lsr.w	r0, r3, r2
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d102      	bne.n	8000af2 <__aeabi_d2uiz+0x3a>
 8000aec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000af0:	4770      	bx	lr
 8000af2:	f04f 0000 	mov.w	r0, #0
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_d2f>:
 8000af8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000afc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b00:	bf24      	itt	cs
 8000b02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b0a:	d90d      	bls.n	8000b28 <__aeabi_d2f+0x30>
 8000b0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b20:	bf08      	it	eq
 8000b22:	f020 0001 	biceq.w	r0, r0, #1
 8000b26:	4770      	bx	lr
 8000b28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b2c:	d121      	bne.n	8000b72 <__aeabi_d2f+0x7a>
 8000b2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b32:	bfbc      	itt	lt
 8000b34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b38:	4770      	bxlt	lr
 8000b3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b42:	f1c2 0218 	rsb	r2, r2, #24
 8000b46:	f1c2 0c20 	rsb	ip, r2, #32
 8000b4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b52:	bf18      	it	ne
 8000b54:	f040 0001 	orrne.w	r0, r0, #1
 8000b58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b64:	ea40 000c 	orr.w	r0, r0, ip
 8000b68:	fa23 f302 	lsr.w	r3, r3, r2
 8000b6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b70:	e7cc      	b.n	8000b0c <__aeabi_d2f+0x14>
 8000b72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b76:	d107      	bne.n	8000b88 <__aeabi_d2f+0x90>
 8000b78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b7c:	bf1e      	ittt	ne
 8000b7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b86:	4770      	bxne	lr
 8000b88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_uldivmod>:
 8000b98:	b953      	cbnz	r3, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9a:	b94a      	cbnz	r2, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9c:	2900      	cmp	r1, #0
 8000b9e:	bf08      	it	eq
 8000ba0:	2800      	cmpeq	r0, #0
 8000ba2:	bf1c      	itt	ne
 8000ba4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ba8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bac:	f000 b9ae 	b.w	8000f0c <__aeabi_idiv0>
 8000bb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb8:	f000 f83e 	bl	8000c38 <__udivmoddi4>
 8000bbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bc4:	b004      	add	sp, #16
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2lz>:
 8000bc8:	b538      	push	{r3, r4, r5, lr}
 8000bca:	4605      	mov	r5, r0
 8000bcc:	460c      	mov	r4, r1
 8000bce:	2200      	movs	r2, #0
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	4628      	mov	r0, r5
 8000bd4:	4621      	mov	r1, r4
 8000bd6:	f7ff ff09 	bl	80009ec <__aeabi_dcmplt>
 8000bda:	b928      	cbnz	r0, 8000be8 <__aeabi_d2lz+0x20>
 8000bdc:	4628      	mov	r0, r5
 8000bde:	4621      	mov	r1, r4
 8000be0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000be4:	f000 b80a 	b.w	8000bfc <__aeabi_d2ulz>
 8000be8:	4628      	mov	r0, r5
 8000bea:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000bee:	f000 f805 	bl	8000bfc <__aeabi_d2ulz>
 8000bf2:	4240      	negs	r0, r0
 8000bf4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bf8:	bd38      	pop	{r3, r4, r5, pc}
 8000bfa:	bf00      	nop

08000bfc <__aeabi_d2ulz>:
 8000bfc:	b5d0      	push	{r4, r6, r7, lr}
 8000bfe:	2200      	movs	r2, #0
 8000c00:	4b0b      	ldr	r3, [pc, #44]	; (8000c30 <__aeabi_d2ulz+0x34>)
 8000c02:	4606      	mov	r6, r0
 8000c04:	460f      	mov	r7, r1
 8000c06:	f7ff fc7f 	bl	8000508 <__aeabi_dmul>
 8000c0a:	f7ff ff55 	bl	8000ab8 <__aeabi_d2uiz>
 8000c0e:	4604      	mov	r4, r0
 8000c10:	f7ff fc00 	bl	8000414 <__aeabi_ui2d>
 8000c14:	2200      	movs	r2, #0
 8000c16:	4b07      	ldr	r3, [pc, #28]	; (8000c34 <__aeabi_d2ulz+0x38>)
 8000c18:	f7ff fc76 	bl	8000508 <__aeabi_dmul>
 8000c1c:	4602      	mov	r2, r0
 8000c1e:	460b      	mov	r3, r1
 8000c20:	4630      	mov	r0, r6
 8000c22:	4639      	mov	r1, r7
 8000c24:	f7ff fab8 	bl	8000198 <__aeabi_dsub>
 8000c28:	f7ff ff46 	bl	8000ab8 <__aeabi_d2uiz>
 8000c2c:	4621      	mov	r1, r4
 8000c2e:	bdd0      	pop	{r4, r6, r7, pc}
 8000c30:	3df00000 	.word	0x3df00000
 8000c34:	41f00000 	.word	0x41f00000

08000c38 <__udivmoddi4>:
 8000c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c3c:	9e08      	ldr	r6, [sp, #32]
 8000c3e:	460d      	mov	r5, r1
 8000c40:	4604      	mov	r4, r0
 8000c42:	4688      	mov	r8, r1
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d14d      	bne.n	8000ce4 <__udivmoddi4+0xac>
 8000c48:	428a      	cmp	r2, r1
 8000c4a:	4694      	mov	ip, r2
 8000c4c:	d968      	bls.n	8000d20 <__udivmoddi4+0xe8>
 8000c4e:	fab2 f282 	clz	r2, r2
 8000c52:	b152      	cbz	r2, 8000c6a <__udivmoddi4+0x32>
 8000c54:	fa01 f302 	lsl.w	r3, r1, r2
 8000c58:	f1c2 0120 	rsb	r1, r2, #32
 8000c5c:	fa20 f101 	lsr.w	r1, r0, r1
 8000c60:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c64:	ea41 0803 	orr.w	r8, r1, r3
 8000c68:	4094      	lsls	r4, r2
 8000c6a:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000c6e:	fbb8 f7f1 	udiv	r7, r8, r1
 8000c72:	fa1f fe8c 	uxth.w	lr, ip
 8000c76:	fb01 8817 	mls	r8, r1, r7, r8
 8000c7a:	fb07 f00e 	mul.w	r0, r7, lr
 8000c7e:	0c23      	lsrs	r3, r4, #16
 8000c80:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c84:	4298      	cmp	r0, r3
 8000c86:	d90a      	bls.n	8000c9e <__udivmoddi4+0x66>
 8000c88:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8c:	f107 35ff 	add.w	r5, r7, #4294967295	; 0xffffffff
 8000c90:	f080 811e 	bcs.w	8000ed0 <__udivmoddi4+0x298>
 8000c94:	4298      	cmp	r0, r3
 8000c96:	f240 811b 	bls.w	8000ed0 <__udivmoddi4+0x298>
 8000c9a:	3f02      	subs	r7, #2
 8000c9c:	4463      	add	r3, ip
 8000c9e:	1a1b      	subs	r3, r3, r0
 8000ca0:	fbb3 f0f1 	udiv	r0, r3, r1
 8000ca4:	fb01 3310 	mls	r3, r1, r0, r3
 8000ca8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cac:	b2a4      	uxth	r4, r4
 8000cae:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cb2:	45a6      	cmp	lr, r4
 8000cb4:	d90a      	bls.n	8000ccc <__udivmoddi4+0x94>
 8000cb6:	eb1c 0404 	adds.w	r4, ip, r4
 8000cba:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cbe:	f080 8109 	bcs.w	8000ed4 <__udivmoddi4+0x29c>
 8000cc2:	45a6      	cmp	lr, r4
 8000cc4:	f240 8106 	bls.w	8000ed4 <__udivmoddi4+0x29c>
 8000cc8:	4464      	add	r4, ip
 8000cca:	3802      	subs	r0, #2
 8000ccc:	2100      	movs	r1, #0
 8000cce:	eba4 040e 	sub.w	r4, r4, lr
 8000cd2:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000cd6:	b11e      	cbz	r6, 8000ce0 <__udivmoddi4+0xa8>
 8000cd8:	2300      	movs	r3, #0
 8000cda:	40d4      	lsrs	r4, r2
 8000cdc:	e9c6 4300 	strd	r4, r3, [r6]
 8000ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce4:	428b      	cmp	r3, r1
 8000ce6:	d908      	bls.n	8000cfa <__udivmoddi4+0xc2>
 8000ce8:	2e00      	cmp	r6, #0
 8000cea:	f000 80ee 	beq.w	8000eca <__udivmoddi4+0x292>
 8000cee:	2100      	movs	r1, #0
 8000cf0:	e9c6 0500 	strd	r0, r5, [r6]
 8000cf4:	4608      	mov	r0, r1
 8000cf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfa:	fab3 f183 	clz	r1, r3
 8000cfe:	2900      	cmp	r1, #0
 8000d00:	d14a      	bne.n	8000d98 <__udivmoddi4+0x160>
 8000d02:	42ab      	cmp	r3, r5
 8000d04:	d302      	bcc.n	8000d0c <__udivmoddi4+0xd4>
 8000d06:	4282      	cmp	r2, r0
 8000d08:	f200 80fc 	bhi.w	8000f04 <__udivmoddi4+0x2cc>
 8000d0c:	1a84      	subs	r4, r0, r2
 8000d0e:	eb65 0303 	sbc.w	r3, r5, r3
 8000d12:	2001      	movs	r0, #1
 8000d14:	4698      	mov	r8, r3
 8000d16:	2e00      	cmp	r6, #0
 8000d18:	d0e2      	beq.n	8000ce0 <__udivmoddi4+0xa8>
 8000d1a:	e9c6 4800 	strd	r4, r8, [r6]
 8000d1e:	e7df      	b.n	8000ce0 <__udivmoddi4+0xa8>
 8000d20:	b902      	cbnz	r2, 8000d24 <__udivmoddi4+0xec>
 8000d22:	deff      	udf	#255	; 0xff
 8000d24:	fab2 f282 	clz	r2, r2
 8000d28:	2a00      	cmp	r2, #0
 8000d2a:	f040 8091 	bne.w	8000e50 <__udivmoddi4+0x218>
 8000d2e:	eba1 000c 	sub.w	r0, r1, ip
 8000d32:	2101      	movs	r1, #1
 8000d34:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d38:	fa1f fe8c 	uxth.w	lr, ip
 8000d3c:	fbb0 f3f7 	udiv	r3, r0, r7
 8000d40:	fb07 0013 	mls	r0, r7, r3, r0
 8000d44:	0c25      	lsrs	r5, r4, #16
 8000d46:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000d4a:	fb0e f003 	mul.w	r0, lr, r3
 8000d4e:	42a8      	cmp	r0, r5
 8000d50:	d908      	bls.n	8000d64 <__udivmoddi4+0x12c>
 8000d52:	eb1c 0505 	adds.w	r5, ip, r5
 8000d56:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d5a:	d202      	bcs.n	8000d62 <__udivmoddi4+0x12a>
 8000d5c:	42a8      	cmp	r0, r5
 8000d5e:	f200 80ce 	bhi.w	8000efe <__udivmoddi4+0x2c6>
 8000d62:	4643      	mov	r3, r8
 8000d64:	1a2d      	subs	r5, r5, r0
 8000d66:	fbb5 f0f7 	udiv	r0, r5, r7
 8000d6a:	fb07 5510 	mls	r5, r7, r0, r5
 8000d6e:	fb0e fe00 	mul.w	lr, lr, r0
 8000d72:	b2a4      	uxth	r4, r4
 8000d74:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d78:	45a6      	cmp	lr, r4
 8000d7a:	d908      	bls.n	8000d8e <__udivmoddi4+0x156>
 8000d7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d80:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000d84:	d202      	bcs.n	8000d8c <__udivmoddi4+0x154>
 8000d86:	45a6      	cmp	lr, r4
 8000d88:	f200 80b6 	bhi.w	8000ef8 <__udivmoddi4+0x2c0>
 8000d8c:	4628      	mov	r0, r5
 8000d8e:	eba4 040e 	sub.w	r4, r4, lr
 8000d92:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d96:	e79e      	b.n	8000cd6 <__udivmoddi4+0x9e>
 8000d98:	f1c1 0720 	rsb	r7, r1, #32
 8000d9c:	408b      	lsls	r3, r1
 8000d9e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000da2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000da6:	fa25 fa07 	lsr.w	sl, r5, r7
 8000daa:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dae:	fbba f8f9 	udiv	r8, sl, r9
 8000db2:	fa20 f307 	lsr.w	r3, r0, r7
 8000db6:	fb09 aa18 	mls	sl, r9, r8, sl
 8000dba:	408d      	lsls	r5, r1
 8000dbc:	fa1f fe8c 	uxth.w	lr, ip
 8000dc0:	431d      	orrs	r5, r3
 8000dc2:	fa00 f301 	lsl.w	r3, r0, r1
 8000dc6:	fb08 f00e 	mul.w	r0, r8, lr
 8000dca:	0c2c      	lsrs	r4, r5, #16
 8000dcc:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000dd0:	42a0      	cmp	r0, r4
 8000dd2:	fa02 f201 	lsl.w	r2, r2, r1
 8000dd6:	d90b      	bls.n	8000df0 <__udivmoddi4+0x1b8>
 8000dd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ddc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000de0:	f080 8088 	bcs.w	8000ef4 <__udivmoddi4+0x2bc>
 8000de4:	42a0      	cmp	r0, r4
 8000de6:	f240 8085 	bls.w	8000ef4 <__udivmoddi4+0x2bc>
 8000dea:	f1a8 0802 	sub.w	r8, r8, #2
 8000dee:	4464      	add	r4, ip
 8000df0:	1a24      	subs	r4, r4, r0
 8000df2:	fbb4 f0f9 	udiv	r0, r4, r9
 8000df6:	fb09 4410 	mls	r4, r9, r0, r4
 8000dfa:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dfe:	b2ad      	uxth	r5, r5
 8000e00:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e04:	45a6      	cmp	lr, r4
 8000e06:	d908      	bls.n	8000e1a <__udivmoddi4+0x1e2>
 8000e08:	eb1c 0404 	adds.w	r4, ip, r4
 8000e0c:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000e10:	d26c      	bcs.n	8000eec <__udivmoddi4+0x2b4>
 8000e12:	45a6      	cmp	lr, r4
 8000e14:	d96a      	bls.n	8000eec <__udivmoddi4+0x2b4>
 8000e16:	3802      	subs	r0, #2
 8000e18:	4464      	add	r4, ip
 8000e1a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e1e:	fba0 9502 	umull	r9, r5, r0, r2
 8000e22:	eba4 040e 	sub.w	r4, r4, lr
 8000e26:	42ac      	cmp	r4, r5
 8000e28:	46c8      	mov	r8, r9
 8000e2a:	46ae      	mov	lr, r5
 8000e2c:	d356      	bcc.n	8000edc <__udivmoddi4+0x2a4>
 8000e2e:	d053      	beq.n	8000ed8 <__udivmoddi4+0x2a0>
 8000e30:	2e00      	cmp	r6, #0
 8000e32:	d069      	beq.n	8000f08 <__udivmoddi4+0x2d0>
 8000e34:	ebb3 0208 	subs.w	r2, r3, r8
 8000e38:	eb64 040e 	sbc.w	r4, r4, lr
 8000e3c:	fa22 f301 	lsr.w	r3, r2, r1
 8000e40:	fa04 f707 	lsl.w	r7, r4, r7
 8000e44:	431f      	orrs	r7, r3
 8000e46:	40cc      	lsrs	r4, r1
 8000e48:	e9c6 7400 	strd	r7, r4, [r6]
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	e747      	b.n	8000ce0 <__udivmoddi4+0xa8>
 8000e50:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e54:	f1c2 0120 	rsb	r1, r2, #32
 8000e58:	fa25 f301 	lsr.w	r3, r5, r1
 8000e5c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e60:	fa20 f101 	lsr.w	r1, r0, r1
 8000e64:	4095      	lsls	r5, r2
 8000e66:	430d      	orrs	r5, r1
 8000e68:	fbb3 f1f7 	udiv	r1, r3, r7
 8000e6c:	fb07 3311 	mls	r3, r7, r1, r3
 8000e70:	fa1f fe8c 	uxth.w	lr, ip
 8000e74:	0c28      	lsrs	r0, r5, #16
 8000e76:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e7a:	fb01 f30e 	mul.w	r3, r1, lr
 8000e7e:	4283      	cmp	r3, r0
 8000e80:	fa04 f402 	lsl.w	r4, r4, r2
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x260>
 8000e86:	eb1c 0000 	adds.w	r0, ip, r0
 8000e8a:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 8000e8e:	d22f      	bcs.n	8000ef0 <__udivmoddi4+0x2b8>
 8000e90:	4283      	cmp	r3, r0
 8000e92:	d92d      	bls.n	8000ef0 <__udivmoddi4+0x2b8>
 8000e94:	3902      	subs	r1, #2
 8000e96:	4460      	add	r0, ip
 8000e98:	1ac0      	subs	r0, r0, r3
 8000e9a:	fbb0 f3f7 	udiv	r3, r0, r7
 8000e9e:	fb07 0013 	mls	r0, r7, r3, r0
 8000ea2:	b2ad      	uxth	r5, r5
 8000ea4:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000ea8:	fb03 f00e 	mul.w	r0, r3, lr
 8000eac:	42a8      	cmp	r0, r5
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x28a>
 8000eb0:	eb1c 0505 	adds.w	r5, ip, r5
 8000eb4:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000eb8:	d216      	bcs.n	8000ee8 <__udivmoddi4+0x2b0>
 8000eba:	42a8      	cmp	r0, r5
 8000ebc:	d914      	bls.n	8000ee8 <__udivmoddi4+0x2b0>
 8000ebe:	3b02      	subs	r3, #2
 8000ec0:	4465      	add	r5, ip
 8000ec2:	1a28      	subs	r0, r5, r0
 8000ec4:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000ec8:	e738      	b.n	8000d3c <__udivmoddi4+0x104>
 8000eca:	4631      	mov	r1, r6
 8000ecc:	4630      	mov	r0, r6
 8000ece:	e707      	b.n	8000ce0 <__udivmoddi4+0xa8>
 8000ed0:	462f      	mov	r7, r5
 8000ed2:	e6e4      	b.n	8000c9e <__udivmoddi4+0x66>
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	e6f9      	b.n	8000ccc <__udivmoddi4+0x94>
 8000ed8:	454b      	cmp	r3, r9
 8000eda:	d2a9      	bcs.n	8000e30 <__udivmoddi4+0x1f8>
 8000edc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ee0:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ee4:	3801      	subs	r0, #1
 8000ee6:	e7a3      	b.n	8000e30 <__udivmoddi4+0x1f8>
 8000ee8:	4643      	mov	r3, r8
 8000eea:	e7ea      	b.n	8000ec2 <__udivmoddi4+0x28a>
 8000eec:	4628      	mov	r0, r5
 8000eee:	e794      	b.n	8000e1a <__udivmoddi4+0x1e2>
 8000ef0:	4641      	mov	r1, r8
 8000ef2:	e7d1      	b.n	8000e98 <__udivmoddi4+0x260>
 8000ef4:	46d0      	mov	r8, sl
 8000ef6:	e77b      	b.n	8000df0 <__udivmoddi4+0x1b8>
 8000ef8:	4464      	add	r4, ip
 8000efa:	3802      	subs	r0, #2
 8000efc:	e747      	b.n	8000d8e <__udivmoddi4+0x156>
 8000efe:	3b02      	subs	r3, #2
 8000f00:	4465      	add	r5, ip
 8000f02:	e72f      	b.n	8000d64 <__udivmoddi4+0x12c>
 8000f04:	4608      	mov	r0, r1
 8000f06:	e706      	b.n	8000d16 <__udivmoddi4+0xde>
 8000f08:	4631      	mov	r1, r6
 8000f0a:	e6e9      	b.n	8000ce0 <__udivmoddi4+0xa8>

08000f0c <__aeabi_idiv0>:
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop

08000f10 <HAL_UART_RxCpltCallback>:
/* USER CODE BEGIN 0 */
char *str ={0};// creat a variable to store the string
uint8_t Rx_data;// store the data recived from uart

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000f10:	b590      	push	{r4, r7, lr}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
    HAL_UART_Receive_IT(huart, &Rx_data, 1);
 8000f18:	2201      	movs	r2, #1
 8000f1a:	490f      	ldr	r1, [pc, #60]	; (8000f58 <HAL_UART_RxCpltCallback+0x48>)
 8000f1c:	6878      	ldr	r0, [r7, #4]
 8000f1e:	f001 fe40 	bl	8002ba2 <HAL_UART_Receive_IT>
    str = "WakeUP from SLEEP by UART\r\n";
 8000f22:	4b0e      	ldr	r3, [pc, #56]	; (8000f5c <HAL_UART_RxCpltCallback+0x4c>)
 8000f24:	4a0e      	ldr	r2, [pc, #56]	; (8000f60 <HAL_UART_RxCpltCallback+0x50>)
 8000f26:	601a      	str	r2, [r3, #0]
    HAL_UART_Transmit(&huart1, (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 8000f28:	4b0c      	ldr	r3, [pc, #48]	; (8000f5c <HAL_UART_RxCpltCallback+0x4c>)
 8000f2a:	681c      	ldr	r4, [r3, #0]
 8000f2c:	4b0b      	ldr	r3, [pc, #44]	; (8000f5c <HAL_UART_RxCpltCallback+0x4c>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4618      	mov	r0, r3
 8000f32:	f7ff f925 	bl	8000180 <strlen>
 8000f36:	4603      	mov	r3, r0
 8000f38:	b29a      	uxth	r2, r3
 8000f3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f3e:	4621      	mov	r1, r4
 8000f40:	4808      	ldr	r0, [pc, #32]	; (8000f64 <HAL_UART_RxCpltCallback+0x54>)
 8000f42:	f001 fdab 	bl	8002a9c <HAL_UART_Transmit>
    HAL_ResumeTick();
 8000f46:	f000 fbbd 	bl	80016c4 <HAL_ResumeTick>
    HAL_PWR_DisableSleepOnExit ();
 8000f4a:	f000 ff53 	bl	8001df4 <HAL_PWR_DisableSleepOnExit>


}
 8000f4e:	bf00      	nop
 8000f50:	370c      	adds	r7, #12
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd90      	pop	{r4, r7, pc}
 8000f56:	bf00      	nop
 8000f58:	20000248 	.word	0x20000248
 8000f5c:	20000244 	.word	0x20000244
 8000f60:	08008078 	.word	0x08008078
 8000f64:	200001fc 	.word	0x200001fc

08000f68 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000f68:	b590      	push	{r4, r7, lr}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	4603      	mov	r3, r0
 8000f70:	80fb      	strh	r3, [r7, #6]
 str = "WakeUP from SLEEP by EXTI\r\n";
 8000f72:	4b0d      	ldr	r3, [pc, #52]	; (8000fa8 <HAL_GPIO_EXTI_Callback+0x40>)
 8000f74:	4a0d      	ldr	r2, [pc, #52]	; (8000fac <HAL_GPIO_EXTI_Callback+0x44>)
 8000f76:	601a      	str	r2, [r3, #0]
    HAL_UART_Transmit(&huart1, (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 8000f78:	4b0b      	ldr	r3, [pc, #44]	; (8000fa8 <HAL_GPIO_EXTI_Callback+0x40>)
 8000f7a:	681c      	ldr	r4, [r3, #0]
 8000f7c:	4b0a      	ldr	r3, [pc, #40]	; (8000fa8 <HAL_GPIO_EXTI_Callback+0x40>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff f8fd 	bl	8000180 <strlen>
 8000f86:	4603      	mov	r3, r0
 8000f88:	b29a      	uxth	r2, r3
 8000f8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f8e:	4621      	mov	r1, r4
 8000f90:	4807      	ldr	r0, [pc, #28]	; (8000fb0 <HAL_GPIO_EXTI_Callback+0x48>)
 8000f92:	f001 fd83 	bl	8002a9c <HAL_UART_Transmit>
    HAL_ResumeTick();
 8000f96:	f000 fb95 	bl	80016c4 <HAL_ResumeTick>
    HAL_PWR_DisableSleepOnExit ();
 8000f9a:	f000 ff2b 	bl	8001df4 <HAL_PWR_DisableSleepOnExit>

}
 8000f9e:	bf00      	nop
 8000fa0:	370c      	adds	r7, #12
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd90      	pop	{r4, r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	20000244 	.word	0x20000244
 8000fac:	08008094 	.word	0x08008094
 8000fb0:	200001fc 	.word	0x200001fc

08000fb4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fb4:	b590      	push	{r4, r7, lr}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fba:	f000 fae4 	bl	8001586 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fbe:	f000 f865 	bl	800108c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fc2:	f000 f8e7 	bl	8001194 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000fc6:	f000 f8bb 	bl	8001140 <MX_USART1_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000fca:	f000 f8ad 	bl	8001128 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, &Rx_data, 1);//call
 8000fce:	2201      	movs	r2, #1
 8000fd0:	4928      	ldr	r1, [pc, #160]	; (8001074 <main+0xc0>)
 8000fd2:	4829      	ldr	r0, [pc, #164]	; (8001078 <main+0xc4>)
 8000fd4:	f001 fde5 	bl	8002ba2 <HAL_UART_Receive_IT>
  while (1)
  {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		str = "Going into SLEEP MODE in 5 seconds\r\n"; // sting trasmited before mc go sleep mode
 8000fd8:	4b28      	ldr	r3, [pc, #160]	; (800107c <main+0xc8>)
 8000fda:	4a29      	ldr	r2, [pc, #164]	; (8001080 <main+0xcc>)
 8000fdc:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, (uint8_t*) str, strlen(str), HAL_MAX_DELAY);
 8000fde:	4b27      	ldr	r3, [pc, #156]	; (800107c <main+0xc8>)
 8000fe0:	681c      	ldr	r4, [r3, #0]
 8000fe2:	4b26      	ldr	r3, [pc, #152]	; (800107c <main+0xc8>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f7ff f8ca 	bl	8000180 <strlen>
 8000fec:	4603      	mov	r3, r0
 8000fee:	b29a      	uxth	r2, r3
 8000ff0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ff4:	4621      	mov	r1, r4
 8000ff6:	4820      	ldr	r0, [pc, #128]	; (8001078 <main+0xc4>)
 8000ff8:	f001 fd50 	bl	8002a9c <HAL_UART_Transmit>

		HAL_GPIO_WritePin(BSP_BLUE_LED_GPIO_Port, BSP_BLUE_LED_Pin, 1);
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	2140      	movs	r1, #64	; 0x40
 8001000:	4820      	ldr	r0, [pc, #128]	; (8001084 <main+0xd0>)
 8001002:	f000 fe79 	bl	8001cf8 <HAL_GPIO_WritePin>
		HAL_Delay(5000); // led on 5 secound
 8001006:	f241 3088 	movw	r0, #5000	; 0x1388
 800100a:	f000 fb2b 	bl	8001664 <HAL_Delay>

		/*    Suspend Tick increment to prevent wakeup by Systick interrupt.
		 Otherwise the Systick interrupt will wake up the device within 1ms (HAL time base)
		 */
		HAL_SuspendTick();
 800100e:	f000 fb4b 	bl	80016a8 <HAL_SuspendTick>

		HAL_GPIO_WritePin(BSP_BLUE_LED_GPIO_Port, BSP_BLUE_LED_Pin, 0); //Just to indicate that the sleep mode is activated
 8001012:	2200      	movs	r2, #0
 8001014:	2140      	movs	r1, #64	; 0x40
 8001016:	481b      	ldr	r0, [pc, #108]	; (8001084 <main+0xd0>)
 8001018:	f000 fe6e 	bl	8001cf8 <HAL_GPIO_WritePin>

		HAL_PWR_EnableSleepOnExit();
 800101c:	f000 fedc 	bl	8001dd8 <HAL_PWR_EnableSleepOnExit>
		//Enter Sleep Mode , wake up is done once User push-button is pressed
		HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001020:	2101      	movs	r1, #1
 8001022:	2000      	movs	r0, #0
 8001024:	f000 feb2 	bl	8001d8c <HAL_PWR_EnterSLEEPMode>

        //Resume Tick interrupt if disabled prior to sleep mode entry
		HAL_ResumeTick();
 8001028:	f000 fb4c 	bl	80016c4 <HAL_ResumeTick>

		str = "WakeUP from SLEEP\r\n";
 800102c:	4b13      	ldr	r3, [pc, #76]	; (800107c <main+0xc8>)
 800102e:	4a16      	ldr	r2, [pc, #88]	; (8001088 <main+0xd4>)
 8001030:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, (uint8_t*) str, strlen(str), HAL_MAX_DELAY);
 8001032:	4b12      	ldr	r3, [pc, #72]	; (800107c <main+0xc8>)
 8001034:	681c      	ldr	r4, [r3, #0]
 8001036:	4b11      	ldr	r3, [pc, #68]	; (800107c <main+0xc8>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4618      	mov	r0, r3
 800103c:	f7ff f8a0 	bl	8000180 <strlen>
 8001040:	4603      	mov	r3, r0
 8001042:	b29a      	uxth	r2, r3
 8001044:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001048:	4621      	mov	r1, r4
 800104a:	480b      	ldr	r0, [pc, #44]	; (8001078 <main+0xc4>)
 800104c:	f001 fd26 	bl	8002a9c <HAL_UART_Transmit>
		// 	HAL_ResumeTick();
		for (int i = 0; i < 20; i++) {
 8001050:	2300      	movs	r3, #0
 8001052:	607b      	str	r3, [r7, #4]
 8001054:	e00a      	b.n	800106c <main+0xb8>
			HAL_GPIO_TogglePin(BSP_BLUE_LED_GPIO_Port, BSP_BLUE_LED_Pin);
 8001056:	2140      	movs	r1, #64	; 0x40
 8001058:	480a      	ldr	r0, [pc, #40]	; (8001084 <main+0xd0>)
 800105a:	f000 fe65 	bl	8001d28 <HAL_GPIO_TogglePin>
			HAL_Delay(500);
 800105e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001062:	f000 faff 	bl	8001664 <HAL_Delay>
		for (int i = 0; i < 20; i++) {
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	3301      	adds	r3, #1
 800106a:	607b      	str	r3, [r7, #4]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2b13      	cmp	r3, #19
 8001070:	ddf1      	ble.n	8001056 <main+0xa2>
		str = "Going into SLEEP MODE in 5 seconds\r\n"; // sting trasmited before mc go sleep mode
 8001072:	e7b1      	b.n	8000fd8 <main+0x24>
 8001074:	20000248 	.word	0x20000248
 8001078:	200001fc 	.word	0x200001fc
 800107c:	20000244 	.word	0x20000244
 8001080:	080080b0 	.word	0x080080b0
 8001084:	40020400 	.word	0x40020400
 8001088:	080080d8 	.word	0x080080d8

0800108c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b092      	sub	sp, #72	; 0x48
 8001090:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001092:	f107 0314 	add.w	r3, r7, #20
 8001096:	2234      	movs	r2, #52	; 0x34
 8001098:	2100      	movs	r1, #0
 800109a:	4618      	mov	r0, r3
 800109c:	f002 fba6 	bl	80037ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010a0:	463b      	mov	r3, r7
 80010a2:	2200      	movs	r2, #0
 80010a4:	601a      	str	r2, [r3, #0]
 80010a6:	605a      	str	r2, [r3, #4]
 80010a8:	609a      	str	r2, [r3, #8]
 80010aa:	60da      	str	r2, [r3, #12]
 80010ac:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010ae:	4b1d      	ldr	r3, [pc, #116]	; (8001124 <SystemClock_Config+0x98>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80010b6:	4a1b      	ldr	r2, [pc, #108]	; (8001124 <SystemClock_Config+0x98>)
 80010b8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80010bc:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010be:	2302      	movs	r3, #2
 80010c0:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010c2:	2301      	movs	r3, #1
 80010c4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010c6:	2310      	movs	r3, #16
 80010c8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010ca:	2302      	movs	r3, #2
 80010cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010ce:	2300      	movs	r3, #0
 80010d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80010d2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80010d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 80010d8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010dc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010de:	f107 0314 	add.w	r3, r7, #20
 80010e2:	4618      	mov	r0, r3
 80010e4:	f000 fe94 	bl	8001e10 <HAL_RCC_OscConfig>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80010ee:	f000 f8b3 	bl	8001258 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010f2:	230f      	movs	r3, #15
 80010f4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010f6:	2303      	movs	r3, #3
 80010f8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010fa:	2300      	movs	r3, #0
 80010fc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010fe:	2300      	movs	r3, #0
 8001100:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001102:	2300      	movs	r3, #0
 8001104:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001106:	463b      	mov	r3, r7
 8001108:	2101      	movs	r1, #1
 800110a:	4618      	mov	r0, r3
 800110c:	f001 f9b0 	bl	8002470 <HAL_RCC_ClockConfig>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001116:	f000 f89f 	bl	8001258 <Error_Handler>
  }
}
 800111a:	bf00      	nop
 800111c:	3748      	adds	r7, #72	; 0x48
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	40007000 	.word	0x40007000

08001128 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800112c:	2200      	movs	r2, #0
 800112e:	2100      	movs	r1, #0
 8001130:	2025      	movs	r0, #37	; 0x25
 8001132:	f000 fbac 	bl	800188e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001136:	2025      	movs	r0, #37	; 0x25
 8001138:	f000 fbc5 	bl	80018c6 <HAL_NVIC_EnableIRQ>
}
 800113c:	bf00      	nop
 800113e:	bd80      	pop	{r7, pc}

08001140 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001144:	4b11      	ldr	r3, [pc, #68]	; (800118c <MX_USART1_UART_Init+0x4c>)
 8001146:	4a12      	ldr	r2, [pc, #72]	; (8001190 <MX_USART1_UART_Init+0x50>)
 8001148:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800114a:	4b10      	ldr	r3, [pc, #64]	; (800118c <MX_USART1_UART_Init+0x4c>)
 800114c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001150:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001152:	4b0e      	ldr	r3, [pc, #56]	; (800118c <MX_USART1_UART_Init+0x4c>)
 8001154:	2200      	movs	r2, #0
 8001156:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001158:	4b0c      	ldr	r3, [pc, #48]	; (800118c <MX_USART1_UART_Init+0x4c>)
 800115a:	2200      	movs	r2, #0
 800115c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800115e:	4b0b      	ldr	r3, [pc, #44]	; (800118c <MX_USART1_UART_Init+0x4c>)
 8001160:	2200      	movs	r2, #0
 8001162:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001164:	4b09      	ldr	r3, [pc, #36]	; (800118c <MX_USART1_UART_Init+0x4c>)
 8001166:	220c      	movs	r2, #12
 8001168:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800116a:	4b08      	ldr	r3, [pc, #32]	; (800118c <MX_USART1_UART_Init+0x4c>)
 800116c:	2200      	movs	r2, #0
 800116e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001170:	4b06      	ldr	r3, [pc, #24]	; (800118c <MX_USART1_UART_Init+0x4c>)
 8001172:	2200      	movs	r2, #0
 8001174:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001176:	4805      	ldr	r0, [pc, #20]	; (800118c <MX_USART1_UART_Init+0x4c>)
 8001178:	f001 fc40 	bl	80029fc <HAL_UART_Init>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001182:	f000 f869 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001186:	bf00      	nop
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	200001fc 	.word	0x200001fc
 8001190:	40013800 	.word	0x40013800

08001194 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b088      	sub	sp, #32
 8001198:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800119a:	f107 030c 	add.w	r3, r7, #12
 800119e:	2200      	movs	r2, #0
 80011a0:	601a      	str	r2, [r3, #0]
 80011a2:	605a      	str	r2, [r3, #4]
 80011a4:	609a      	str	r2, [r3, #8]
 80011a6:	60da      	str	r2, [r3, #12]
 80011a8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011aa:	4b28      	ldr	r3, [pc, #160]	; (800124c <MX_GPIO_Init+0xb8>)
 80011ac:	69db      	ldr	r3, [r3, #28]
 80011ae:	4a27      	ldr	r2, [pc, #156]	; (800124c <MX_GPIO_Init+0xb8>)
 80011b0:	f043 0320 	orr.w	r3, r3, #32
 80011b4:	61d3      	str	r3, [r2, #28]
 80011b6:	4b25      	ldr	r3, [pc, #148]	; (800124c <MX_GPIO_Init+0xb8>)
 80011b8:	69db      	ldr	r3, [r3, #28]
 80011ba:	f003 0320 	and.w	r3, r3, #32
 80011be:	60bb      	str	r3, [r7, #8]
 80011c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c2:	4b22      	ldr	r3, [pc, #136]	; (800124c <MX_GPIO_Init+0xb8>)
 80011c4:	69db      	ldr	r3, [r3, #28]
 80011c6:	4a21      	ldr	r2, [pc, #132]	; (800124c <MX_GPIO_Init+0xb8>)
 80011c8:	f043 0301 	orr.w	r3, r3, #1
 80011cc:	61d3      	str	r3, [r2, #28]
 80011ce:	4b1f      	ldr	r3, [pc, #124]	; (800124c <MX_GPIO_Init+0xb8>)
 80011d0:	69db      	ldr	r3, [r3, #28]
 80011d2:	f003 0301 	and.w	r3, r3, #1
 80011d6:	607b      	str	r3, [r7, #4]
 80011d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011da:	4b1c      	ldr	r3, [pc, #112]	; (800124c <MX_GPIO_Init+0xb8>)
 80011dc:	69db      	ldr	r3, [r3, #28]
 80011de:	4a1b      	ldr	r2, [pc, #108]	; (800124c <MX_GPIO_Init+0xb8>)
 80011e0:	f043 0302 	orr.w	r3, r3, #2
 80011e4:	61d3      	str	r3, [r2, #28]
 80011e6:	4b19      	ldr	r3, [pc, #100]	; (800124c <MX_GPIO_Init+0xb8>)
 80011e8:	69db      	ldr	r3, [r3, #28]
 80011ea:	f003 0302 	and.w	r3, r3, #2
 80011ee:	603b      	str	r3, [r7, #0]
 80011f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BSP_BLUE_LED_Pin|BSP_LED_Pin, GPIO_PIN_RESET);
 80011f2:	2200      	movs	r2, #0
 80011f4:	21c0      	movs	r1, #192	; 0xc0
 80011f6:	4816      	ldr	r0, [pc, #88]	; (8001250 <MX_GPIO_Init+0xbc>)
 80011f8:	f000 fd7e 	bl	8001cf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011fc:	2301      	movs	r3, #1
 80011fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001200:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001204:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001206:	2300      	movs	r3, #0
 8001208:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800120a:	f107 030c 	add.w	r3, r7, #12
 800120e:	4619      	mov	r1, r3
 8001210:	4810      	ldr	r0, [pc, #64]	; (8001254 <MX_GPIO_Init+0xc0>)
 8001212:	f000 fbf1 	bl	80019f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BSP_BLUE_LED_Pin BSP_LED_Pin */
  GPIO_InitStruct.Pin = BSP_BLUE_LED_Pin|BSP_LED_Pin;
 8001216:	23c0      	movs	r3, #192	; 0xc0
 8001218:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800121a:	2301      	movs	r3, #1
 800121c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121e:	2300      	movs	r3, #0
 8001220:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001222:	2300      	movs	r3, #0
 8001224:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001226:	f107 030c 	add.w	r3, r7, #12
 800122a:	4619      	mov	r1, r3
 800122c:	4808      	ldr	r0, [pc, #32]	; (8001250 <MX_GPIO_Init+0xbc>)
 800122e:	f000 fbe3 	bl	80019f8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001232:	2200      	movs	r2, #0
 8001234:	2100      	movs	r1, #0
 8001236:	2006      	movs	r0, #6
 8001238:	f000 fb29 	bl	800188e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800123c:	2006      	movs	r0, #6
 800123e:	f000 fb42 	bl	80018c6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001242:	bf00      	nop
 8001244:	3720      	adds	r7, #32
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40023800 	.word	0x40023800
 8001250:	40020400 	.word	0x40020400
 8001254:	40020000 	.word	0x40020000

08001258 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800125c:	b672      	cpsid	i
}
 800125e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001260:	e7fe      	b.n	8001260 <Error_Handler+0x8>
	...

08001264 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 800126a:	4b15      	ldr	r3, [pc, #84]	; (80012c0 <HAL_MspInit+0x5c>)
 800126c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800126e:	4a14      	ldr	r2, [pc, #80]	; (80012c0 <HAL_MspInit+0x5c>)
 8001270:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001274:	6253      	str	r3, [r2, #36]	; 0x24
 8001276:	4b12      	ldr	r3, [pc, #72]	; (80012c0 <HAL_MspInit+0x5c>)
 8001278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800127a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800127e:	60fb      	str	r3, [r7, #12]
 8001280:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001282:	4b0f      	ldr	r3, [pc, #60]	; (80012c0 <HAL_MspInit+0x5c>)
 8001284:	6a1b      	ldr	r3, [r3, #32]
 8001286:	4a0e      	ldr	r2, [pc, #56]	; (80012c0 <HAL_MspInit+0x5c>)
 8001288:	f043 0301 	orr.w	r3, r3, #1
 800128c:	6213      	str	r3, [r2, #32]
 800128e:	4b0c      	ldr	r3, [pc, #48]	; (80012c0 <HAL_MspInit+0x5c>)
 8001290:	6a1b      	ldr	r3, [r3, #32]
 8001292:	f003 0301 	and.w	r3, r3, #1
 8001296:	60bb      	str	r3, [r7, #8]
 8001298:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800129a:	4b09      	ldr	r3, [pc, #36]	; (80012c0 <HAL_MspInit+0x5c>)
 800129c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800129e:	4a08      	ldr	r2, [pc, #32]	; (80012c0 <HAL_MspInit+0x5c>)
 80012a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012a4:	6253      	str	r3, [r2, #36]	; 0x24
 80012a6:	4b06      	ldr	r3, [pc, #24]	; (80012c0 <HAL_MspInit+0x5c>)
 80012a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ae:	607b      	str	r3, [r7, #4]
 80012b0:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80012b2:	2007      	movs	r0, #7
 80012b4:	f000 fae0 	bl	8001878 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012b8:	bf00      	nop
 80012ba:	3710      	adds	r7, #16
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	40023800 	.word	0x40023800

080012c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b08a      	sub	sp, #40	; 0x28
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012cc:	f107 0314 	add.w	r3, r7, #20
 80012d0:	2200      	movs	r2, #0
 80012d2:	601a      	str	r2, [r3, #0]
 80012d4:	605a      	str	r2, [r3, #4]
 80012d6:	609a      	str	r2, [r3, #8]
 80012d8:	60da      	str	r2, [r3, #12]
 80012da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a17      	ldr	r2, [pc, #92]	; (8001340 <HAL_UART_MspInit+0x7c>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d128      	bne.n	8001338 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80012e6:	4b17      	ldr	r3, [pc, #92]	; (8001344 <HAL_UART_MspInit+0x80>)
 80012e8:	6a1b      	ldr	r3, [r3, #32]
 80012ea:	4a16      	ldr	r2, [pc, #88]	; (8001344 <HAL_UART_MspInit+0x80>)
 80012ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012f0:	6213      	str	r3, [r2, #32]
 80012f2:	4b14      	ldr	r3, [pc, #80]	; (8001344 <HAL_UART_MspInit+0x80>)
 80012f4:	6a1b      	ldr	r3, [r3, #32]
 80012f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012fa:	613b      	str	r3, [r7, #16]
 80012fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012fe:	4b11      	ldr	r3, [pc, #68]	; (8001344 <HAL_UART_MspInit+0x80>)
 8001300:	69db      	ldr	r3, [r3, #28]
 8001302:	4a10      	ldr	r2, [pc, #64]	; (8001344 <HAL_UART_MspInit+0x80>)
 8001304:	f043 0301 	orr.w	r3, r3, #1
 8001308:	61d3      	str	r3, [r2, #28]
 800130a:	4b0e      	ldr	r3, [pc, #56]	; (8001344 <HAL_UART_MspInit+0x80>)
 800130c:	69db      	ldr	r3, [r3, #28]
 800130e:	f003 0301 	and.w	r3, r3, #1
 8001312:	60fb      	str	r3, [r7, #12]
 8001314:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001316:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800131a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131c:	2302      	movs	r3, #2
 800131e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001320:	2300      	movs	r3, #0
 8001322:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001324:	2303      	movs	r3, #3
 8001326:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001328:	2307      	movs	r3, #7
 800132a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800132c:	f107 0314 	add.w	r3, r7, #20
 8001330:	4619      	mov	r1, r3
 8001332:	4805      	ldr	r0, [pc, #20]	; (8001348 <HAL_UART_MspInit+0x84>)
 8001334:	f000 fb60 	bl	80019f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001338:	bf00      	nop
 800133a:	3728      	adds	r7, #40	; 0x28
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	40013800 	.word	0x40013800
 8001344:	40023800 	.word	0x40023800
 8001348:	40020000 	.word	0x40020000

0800134c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001350:	e7fe      	b.n	8001350 <NMI_Handler+0x4>

08001352 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001352:	b480      	push	{r7}
 8001354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001356:	e7fe      	b.n	8001356 <HardFault_Handler+0x4>

08001358 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800135c:	e7fe      	b.n	800135c <MemManage_Handler+0x4>

0800135e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800135e:	b480      	push	{r7}
 8001360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001362:	e7fe      	b.n	8001362 <BusFault_Handler+0x4>

08001364 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001368:	e7fe      	b.n	8001368 <UsageFault_Handler+0x4>

0800136a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800136a:	b480      	push	{r7}
 800136c:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800136e:	bf00      	nop
 8001370:	46bd      	mov	sp, r7
 8001372:	bc80      	pop	{r7}
 8001374:	4770      	bx	lr

08001376 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001376:	b480      	push	{r7}
 8001378:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800137a:	bf00      	nop
 800137c:	46bd      	mov	sp, r7
 800137e:	bc80      	pop	{r7}
 8001380:	4770      	bx	lr

08001382 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001382:	b480      	push	{r7}
 8001384:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001386:	bf00      	nop
 8001388:	46bd      	mov	sp, r7
 800138a:	bc80      	pop	{r7}
 800138c:	4770      	bx	lr

0800138e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800138e:	b580      	push	{r7, lr}
 8001390:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001392:	f000 f94b 	bl	800162c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001396:	bf00      	nop
 8001398:	bd80      	pop	{r7, pc}

0800139a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800139a:	b580      	push	{r7, lr}
 800139c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800139e:	2001      	movs	r0, #1
 80013a0:	f000 fcdc 	bl	8001d5c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80013a4:	bf00      	nop
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80013ac:	4802      	ldr	r0, [pc, #8]	; (80013b8 <USART1_IRQHandler+0x10>)
 80013ae:	f001 fc1d 	bl	8002bec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80013b2:	bf00      	nop
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	200001fc 	.word	0x200001fc

080013bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  return 1;
 80013c0:	2301      	movs	r3, #1
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bc80      	pop	{r7}
 80013c8:	4770      	bx	lr

080013ca <_kill>:

int _kill(int pid, int sig)
{
 80013ca:	b580      	push	{r7, lr}
 80013cc:	b082      	sub	sp, #8
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	6078      	str	r0, [r7, #4]
 80013d2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80013d4:	f002 f9e0 	bl	8003798 <__errno>
 80013d8:	4603      	mov	r3, r0
 80013da:	2216      	movs	r2, #22
 80013dc:	601a      	str	r2, [r3, #0]
  return -1;
 80013de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}

080013ea <_exit>:

void _exit (int status)
{
 80013ea:	b580      	push	{r7, lr}
 80013ec:	b082      	sub	sp, #8
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80013f2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	f7ff ffe7 	bl	80013ca <_kill>
  while (1) {}    /* Make sure we hang here */
 80013fc:	e7fe      	b.n	80013fc <_exit+0x12>

080013fe <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013fe:	b580      	push	{r7, lr}
 8001400:	b086      	sub	sp, #24
 8001402:	af00      	add	r7, sp, #0
 8001404:	60f8      	str	r0, [r7, #12]
 8001406:	60b9      	str	r1, [r7, #8]
 8001408:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800140a:	2300      	movs	r3, #0
 800140c:	617b      	str	r3, [r7, #20]
 800140e:	e00a      	b.n	8001426 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001410:	f3af 8000 	nop.w
 8001414:	4601      	mov	r1, r0
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	1c5a      	adds	r2, r3, #1
 800141a:	60ba      	str	r2, [r7, #8]
 800141c:	b2ca      	uxtb	r2, r1
 800141e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	3301      	adds	r3, #1
 8001424:	617b      	str	r3, [r7, #20]
 8001426:	697a      	ldr	r2, [r7, #20]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	429a      	cmp	r2, r3
 800142c:	dbf0      	blt.n	8001410 <_read+0x12>
  }

  return len;
 800142e:	687b      	ldr	r3, [r7, #4]
}
 8001430:	4618      	mov	r0, r3
 8001432:	3718      	adds	r7, #24
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}

08001438 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0
 800143e:	60f8      	str	r0, [r7, #12]
 8001440:	60b9      	str	r1, [r7, #8]
 8001442:	607a      	str	r2, [r7, #4]
//    __io_putchar(*ptr++);
//  }

//  return len;

	HAL_UART_Transmit(&huart1, (uint8_t *)ptr, len,HAL_MAX_DELAY);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	b29a      	uxth	r2, r3
 8001448:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800144c:	68b9      	ldr	r1, [r7, #8]
 800144e:	4804      	ldr	r0, [pc, #16]	; (8001460 <_write+0x28>)
 8001450:	f001 fb24 	bl	8002a9c <HAL_UART_Transmit>

						return len;
 8001454:	687b      	ldr	r3, [r7, #4]





}
 8001456:	4618      	mov	r0, r3
 8001458:	3710      	adds	r7, #16
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	200001fc 	.word	0x200001fc

08001464 <_close>:

int _close(int file)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800146c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001470:	4618      	mov	r0, r3
 8001472:	370c      	adds	r7, #12
 8001474:	46bd      	mov	sp, r7
 8001476:	bc80      	pop	{r7}
 8001478:	4770      	bx	lr

0800147a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800147a:	b480      	push	{r7}
 800147c:	b083      	sub	sp, #12
 800147e:	af00      	add	r7, sp, #0
 8001480:	6078      	str	r0, [r7, #4]
 8001482:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800148a:	605a      	str	r2, [r3, #4]
  return 0;
 800148c:	2300      	movs	r3, #0
}
 800148e:	4618      	mov	r0, r3
 8001490:	370c      	adds	r7, #12
 8001492:	46bd      	mov	sp, r7
 8001494:	bc80      	pop	{r7}
 8001496:	4770      	bx	lr

08001498 <_isatty>:

int _isatty(int file)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80014a0:	2301      	movs	r3, #1
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	370c      	adds	r7, #12
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bc80      	pop	{r7}
 80014aa:	4770      	bx	lr

080014ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b085      	sub	sp, #20
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	60f8      	str	r0, [r7, #12]
 80014b4:	60b9      	str	r1, [r7, #8]
 80014b6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80014b8:	2300      	movs	r3, #0
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3714      	adds	r7, #20
 80014be:	46bd      	mov	sp, r7
 80014c0:	bc80      	pop	{r7}
 80014c2:	4770      	bx	lr

080014c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b086      	sub	sp, #24
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014cc:	4a14      	ldr	r2, [pc, #80]	; (8001520 <_sbrk+0x5c>)
 80014ce:	4b15      	ldr	r3, [pc, #84]	; (8001524 <_sbrk+0x60>)
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014d8:	4b13      	ldr	r3, [pc, #76]	; (8001528 <_sbrk+0x64>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d102      	bne.n	80014e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014e0:	4b11      	ldr	r3, [pc, #68]	; (8001528 <_sbrk+0x64>)
 80014e2:	4a12      	ldr	r2, [pc, #72]	; (800152c <_sbrk+0x68>)
 80014e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014e6:	4b10      	ldr	r3, [pc, #64]	; (8001528 <_sbrk+0x64>)
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4413      	add	r3, r2
 80014ee:	693a      	ldr	r2, [r7, #16]
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d207      	bcs.n	8001504 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014f4:	f002 f950 	bl	8003798 <__errno>
 80014f8:	4603      	mov	r3, r0
 80014fa:	220c      	movs	r2, #12
 80014fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001502:	e009      	b.n	8001518 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001504:	4b08      	ldr	r3, [pc, #32]	; (8001528 <_sbrk+0x64>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800150a:	4b07      	ldr	r3, [pc, #28]	; (8001528 <_sbrk+0x64>)
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	4413      	add	r3, r2
 8001512:	4a05      	ldr	r2, [pc, #20]	; (8001528 <_sbrk+0x64>)
 8001514:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001516:	68fb      	ldr	r3, [r7, #12]
}
 8001518:	4618      	mov	r0, r3
 800151a:	3718      	adds	r7, #24
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	20008000 	.word	0x20008000
 8001524:	00000400 	.word	0x00000400
 8001528:	2000024c 	.word	0x2000024c
 800152c:	20000268 	.word	0x20000268

08001530 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001534:	bf00      	nop
 8001536:	46bd      	mov	sp, r7
 8001538:	bc80      	pop	{r7}
 800153a:	4770      	bx	lr

0800153c <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 800153c:	f7ff fff8 	bl	8001530 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001540:	480b      	ldr	r0, [pc, #44]	; (8001570 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001542:	490c      	ldr	r1, [pc, #48]	; (8001574 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001544:	4a0c      	ldr	r2, [pc, #48]	; (8001578 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001546:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001548:	e002      	b.n	8001550 <LoopCopyDataInit>

0800154a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800154a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800154c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800154e:	3304      	adds	r3, #4

08001550 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001550:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001552:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001554:	d3f9      	bcc.n	800154a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001556:	4a09      	ldr	r2, [pc, #36]	; (800157c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001558:	4c09      	ldr	r4, [pc, #36]	; (8001580 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800155a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800155c:	e001      	b.n	8001562 <LoopFillZerobss>

0800155e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800155e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001560:	3204      	adds	r2, #4

08001562 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001562:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001564:	d3fb      	bcc.n	800155e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001566:	f002 f91d 	bl	80037a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800156a:	f7ff fd23 	bl	8000fb4 <main>
  bx lr
 800156e:	4770      	bx	lr
  ldr r0, =_sdata
 8001570:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001574:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001578:	080085c4 	.word	0x080085c4
  ldr r2, =_sbss
 800157c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001580:	20000264 	.word	0x20000264

08001584 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001584:	e7fe      	b.n	8001584 <ADC1_IRQHandler>

08001586 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001586:	b580      	push	{r7, lr}
 8001588:	b082      	sub	sp, #8
 800158a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800158c:	2300      	movs	r3, #0
 800158e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001590:	2003      	movs	r0, #3
 8001592:	f000 f971 	bl	8001878 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001596:	2000      	movs	r0, #0
 8001598:	f000 f80e 	bl	80015b8 <HAL_InitTick>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d002      	beq.n	80015a8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	71fb      	strb	r3, [r7, #7]
 80015a6:	e001      	b.n	80015ac <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80015a8:	f7ff fe5c 	bl	8001264 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80015ac:	79fb      	ldrb	r3, [r7, #7]
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3708      	adds	r7, #8
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
	...

080015b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80015c0:	2300      	movs	r3, #0
 80015c2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80015c4:	4b16      	ldr	r3, [pc, #88]	; (8001620 <HAL_InitTick+0x68>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d022      	beq.n	8001612 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80015cc:	4b15      	ldr	r3, [pc, #84]	; (8001624 <HAL_InitTick+0x6c>)
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	4b13      	ldr	r3, [pc, #76]	; (8001620 <HAL_InitTick+0x68>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80015d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80015dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80015e0:	4618      	mov	r0, r3
 80015e2:	f000 f97e 	bl	80018e2 <HAL_SYSTICK_Config>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d10f      	bne.n	800160c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2b0f      	cmp	r3, #15
 80015f0:	d809      	bhi.n	8001606 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015f2:	2200      	movs	r2, #0
 80015f4:	6879      	ldr	r1, [r7, #4]
 80015f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015fa:	f000 f948 	bl	800188e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015fe:	4a0a      	ldr	r2, [pc, #40]	; (8001628 <HAL_InitTick+0x70>)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6013      	str	r3, [r2, #0]
 8001604:	e007      	b.n	8001616 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	73fb      	strb	r3, [r7, #15]
 800160a:	e004      	b.n	8001616 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800160c:	2301      	movs	r3, #1
 800160e:	73fb      	strb	r3, [r7, #15]
 8001610:	e001      	b.n	8001616 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001616:	7bfb      	ldrb	r3, [r7, #15]
}
 8001618:	4618      	mov	r0, r3
 800161a:	3710      	adds	r7, #16
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	20000008 	.word	0x20000008
 8001624:	20000000 	.word	0x20000000
 8001628:	20000004 	.word	0x20000004

0800162c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001630:	4b05      	ldr	r3, [pc, #20]	; (8001648 <HAL_IncTick+0x1c>)
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	4b05      	ldr	r3, [pc, #20]	; (800164c <HAL_IncTick+0x20>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4413      	add	r3, r2
 800163a:	4a03      	ldr	r2, [pc, #12]	; (8001648 <HAL_IncTick+0x1c>)
 800163c:	6013      	str	r3, [r2, #0]
}
 800163e:	bf00      	nop
 8001640:	46bd      	mov	sp, r7
 8001642:	bc80      	pop	{r7}
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	20000250 	.word	0x20000250
 800164c:	20000008 	.word	0x20000008

08001650 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  return uwTick;
 8001654:	4b02      	ldr	r3, [pc, #8]	; (8001660 <HAL_GetTick+0x10>)
 8001656:	681b      	ldr	r3, [r3, #0]
}
 8001658:	4618      	mov	r0, r3
 800165a:	46bd      	mov	sp, r7
 800165c:	bc80      	pop	{r7}
 800165e:	4770      	bx	lr
 8001660:	20000250 	.word	0x20000250

08001664 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800166c:	f7ff fff0 	bl	8001650 <HAL_GetTick>
 8001670:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800167c:	d004      	beq.n	8001688 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800167e:	4b09      	ldr	r3, [pc, #36]	; (80016a4 <HAL_Delay+0x40>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	68fa      	ldr	r2, [r7, #12]
 8001684:	4413      	add	r3, r2
 8001686:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001688:	bf00      	nop
 800168a:	f7ff ffe1 	bl	8001650 <HAL_GetTick>
 800168e:	4602      	mov	r2, r0
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	68fa      	ldr	r2, [r7, #12]
 8001696:	429a      	cmp	r2, r3
 8001698:	d8f7      	bhi.n	800168a <HAL_Delay+0x26>
  {
  }
}
 800169a:	bf00      	nop
 800169c:	bf00      	nop
 800169e:	3710      	adds	r7, #16
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	20000008 	.word	0x20000008

080016a8 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 80016ac:	4b04      	ldr	r3, [pc, #16]	; (80016c0 <HAL_SuspendTick+0x18>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a03      	ldr	r2, [pc, #12]	; (80016c0 <HAL_SuspendTick+0x18>)
 80016b2:	f023 0302 	bic.w	r3, r3, #2
 80016b6:	6013      	str	r3, [r2, #0]
}
 80016b8:	bf00      	nop
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bc80      	pop	{r7}
 80016be:	4770      	bx	lr
 80016c0:	e000e010 	.word	0xe000e010

080016c4 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 80016c8:	4b04      	ldr	r3, [pc, #16]	; (80016dc <HAL_ResumeTick+0x18>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a03      	ldr	r2, [pc, #12]	; (80016dc <HAL_ResumeTick+0x18>)
 80016ce:	f043 0302 	orr.w	r3, r3, #2
 80016d2:	6013      	str	r3, [r2, #0]
}
 80016d4:	bf00      	nop
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bc80      	pop	{r7}
 80016da:	4770      	bx	lr
 80016dc:	e000e010 	.word	0xe000e010

080016e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b085      	sub	sp, #20
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	f003 0307 	and.w	r3, r3, #7
 80016ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016f0:	4b0c      	ldr	r3, [pc, #48]	; (8001724 <__NVIC_SetPriorityGrouping+0x44>)
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016f6:	68ba      	ldr	r2, [r7, #8]
 80016f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016fc:	4013      	ands	r3, r2
 80016fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001708:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800170c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001710:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001712:	4a04      	ldr	r2, [pc, #16]	; (8001724 <__NVIC_SetPriorityGrouping+0x44>)
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	60d3      	str	r3, [r2, #12]
}
 8001718:	bf00      	nop
 800171a:	3714      	adds	r7, #20
 800171c:	46bd      	mov	sp, r7
 800171e:	bc80      	pop	{r7}
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	e000ed00 	.word	0xe000ed00

08001728 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800172c:	4b04      	ldr	r3, [pc, #16]	; (8001740 <__NVIC_GetPriorityGrouping+0x18>)
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	0a1b      	lsrs	r3, r3, #8
 8001732:	f003 0307 	and.w	r3, r3, #7
}
 8001736:	4618      	mov	r0, r3
 8001738:	46bd      	mov	sp, r7
 800173a:	bc80      	pop	{r7}
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	e000ed00 	.word	0xe000ed00

08001744 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	4603      	mov	r3, r0
 800174c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800174e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001752:	2b00      	cmp	r3, #0
 8001754:	db0b      	blt.n	800176e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001756:	79fb      	ldrb	r3, [r7, #7]
 8001758:	f003 021f 	and.w	r2, r3, #31
 800175c:	4906      	ldr	r1, [pc, #24]	; (8001778 <__NVIC_EnableIRQ+0x34>)
 800175e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001762:	095b      	lsrs	r3, r3, #5
 8001764:	2001      	movs	r0, #1
 8001766:	fa00 f202 	lsl.w	r2, r0, r2
 800176a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800176e:	bf00      	nop
 8001770:	370c      	adds	r7, #12
 8001772:	46bd      	mov	sp, r7
 8001774:	bc80      	pop	{r7}
 8001776:	4770      	bx	lr
 8001778:	e000e100 	.word	0xe000e100

0800177c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	4603      	mov	r3, r0
 8001784:	6039      	str	r1, [r7, #0]
 8001786:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001788:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800178c:	2b00      	cmp	r3, #0
 800178e:	db0a      	blt.n	80017a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	b2da      	uxtb	r2, r3
 8001794:	490c      	ldr	r1, [pc, #48]	; (80017c8 <__NVIC_SetPriority+0x4c>)
 8001796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800179a:	0112      	lsls	r2, r2, #4
 800179c:	b2d2      	uxtb	r2, r2
 800179e:	440b      	add	r3, r1
 80017a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017a4:	e00a      	b.n	80017bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	b2da      	uxtb	r2, r3
 80017aa:	4908      	ldr	r1, [pc, #32]	; (80017cc <__NVIC_SetPriority+0x50>)
 80017ac:	79fb      	ldrb	r3, [r7, #7]
 80017ae:	f003 030f 	and.w	r3, r3, #15
 80017b2:	3b04      	subs	r3, #4
 80017b4:	0112      	lsls	r2, r2, #4
 80017b6:	b2d2      	uxtb	r2, r2
 80017b8:	440b      	add	r3, r1
 80017ba:	761a      	strb	r2, [r3, #24]
}
 80017bc:	bf00      	nop
 80017be:	370c      	adds	r7, #12
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bc80      	pop	{r7}
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	e000e100 	.word	0xe000e100
 80017cc:	e000ed00 	.word	0xe000ed00

080017d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b089      	sub	sp, #36	; 0x24
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	60f8      	str	r0, [r7, #12]
 80017d8:	60b9      	str	r1, [r7, #8]
 80017da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	f003 0307 	and.w	r3, r3, #7
 80017e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	f1c3 0307 	rsb	r3, r3, #7
 80017ea:	2b04      	cmp	r3, #4
 80017ec:	bf28      	it	cs
 80017ee:	2304      	movcs	r3, #4
 80017f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	3304      	adds	r3, #4
 80017f6:	2b06      	cmp	r3, #6
 80017f8:	d902      	bls.n	8001800 <NVIC_EncodePriority+0x30>
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	3b03      	subs	r3, #3
 80017fe:	e000      	b.n	8001802 <NVIC_EncodePriority+0x32>
 8001800:	2300      	movs	r3, #0
 8001802:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001804:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001808:	69bb      	ldr	r3, [r7, #24]
 800180a:	fa02 f303 	lsl.w	r3, r2, r3
 800180e:	43da      	mvns	r2, r3
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	401a      	ands	r2, r3
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001818:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	fa01 f303 	lsl.w	r3, r1, r3
 8001822:	43d9      	mvns	r1, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001828:	4313      	orrs	r3, r2
         );
}
 800182a:	4618      	mov	r0, r3
 800182c:	3724      	adds	r7, #36	; 0x24
 800182e:	46bd      	mov	sp, r7
 8001830:	bc80      	pop	{r7}
 8001832:	4770      	bx	lr

08001834 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	3b01      	subs	r3, #1
 8001840:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001844:	d301      	bcc.n	800184a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001846:	2301      	movs	r3, #1
 8001848:	e00f      	b.n	800186a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800184a:	4a0a      	ldr	r2, [pc, #40]	; (8001874 <SysTick_Config+0x40>)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	3b01      	subs	r3, #1
 8001850:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001852:	210f      	movs	r1, #15
 8001854:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001858:	f7ff ff90 	bl	800177c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800185c:	4b05      	ldr	r3, [pc, #20]	; (8001874 <SysTick_Config+0x40>)
 800185e:	2200      	movs	r2, #0
 8001860:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001862:	4b04      	ldr	r3, [pc, #16]	; (8001874 <SysTick_Config+0x40>)
 8001864:	2207      	movs	r2, #7
 8001866:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001868:	2300      	movs	r3, #0
}
 800186a:	4618      	mov	r0, r3
 800186c:	3708      	adds	r7, #8
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	e000e010 	.word	0xe000e010

08001878 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	f7ff ff2d 	bl	80016e0 <__NVIC_SetPriorityGrouping>
}
 8001886:	bf00      	nop
 8001888:	3708      	adds	r7, #8
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}

0800188e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800188e:	b580      	push	{r7, lr}
 8001890:	b086      	sub	sp, #24
 8001892:	af00      	add	r7, sp, #0
 8001894:	4603      	mov	r3, r0
 8001896:	60b9      	str	r1, [r7, #8]
 8001898:	607a      	str	r2, [r7, #4]
 800189a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800189c:	2300      	movs	r3, #0
 800189e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018a0:	f7ff ff42 	bl	8001728 <__NVIC_GetPriorityGrouping>
 80018a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	68b9      	ldr	r1, [r7, #8]
 80018aa:	6978      	ldr	r0, [r7, #20]
 80018ac:	f7ff ff90 	bl	80017d0 <NVIC_EncodePriority>
 80018b0:	4602      	mov	r2, r0
 80018b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018b6:	4611      	mov	r1, r2
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7ff ff5f 	bl	800177c <__NVIC_SetPriority>
}
 80018be:	bf00      	nop
 80018c0:	3718      	adds	r7, #24
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}

080018c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018c6:	b580      	push	{r7, lr}
 80018c8:	b082      	sub	sp, #8
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	4603      	mov	r3, r0
 80018ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7ff ff35 	bl	8001744 <__NVIC_EnableIRQ>
}
 80018da:	bf00      	nop
 80018dc:	3708      	adds	r7, #8
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}

080018e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018e2:	b580      	push	{r7, lr}
 80018e4:	b082      	sub	sp, #8
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	f7ff ffa2 	bl	8001834 <SysTick_Config>
 80018f0:	4603      	mov	r3, r0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}

080018fa <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80018fa:	b480      	push	{r7}
 80018fc:	b085      	sub	sp, #20
 80018fe:	af00      	add	r7, sp, #0
 8001900:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001902:	2300      	movs	r3, #0
 8001904:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800190c:	b2db      	uxtb	r3, r3
 800190e:	2b02      	cmp	r3, #2
 8001910:	d008      	beq.n	8001924 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2204      	movs	r2, #4
 8001916:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2200      	movs	r2, #0
 800191c:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e022      	b.n	800196a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f022 020e 	bic.w	r2, r2, #14
 8001932:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f022 0201 	bic.w	r2, r2, #1
 8001942:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001948:	f003 021c 	and.w	r2, r3, #28
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001950:	2101      	movs	r1, #1
 8001952:	fa01 f202 	lsl.w	r2, r1, r2
 8001956:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2201      	movs	r2, #1
 800195c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2200      	movs	r2, #0
 8001964:	f883 2020 	strb.w	r2, [r3, #32]

    return status;
 8001968:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800196a:	4618      	mov	r0, r3
 800196c:	3714      	adds	r7, #20
 800196e:	46bd      	mov	sp, r7
 8001970:	bc80      	pop	{r7}
 8001972:	4770      	bx	lr

08001974 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800197c:	2300      	movs	r3, #0
 800197e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001986:	b2db      	uxtb	r3, r3
 8001988:	2b02      	cmp	r3, #2
 800198a:	d005      	beq.n	8001998 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2204      	movs	r2, #4
 8001990:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	73fb      	strb	r3, [r7, #15]
 8001996:	e029      	b.n	80019ec <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f022 020e 	bic.w	r2, r2, #14
 80019a6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f022 0201 	bic.w	r2, r2, #1
 80019b6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019bc:	f003 021c 	and.w	r2, r3, #28
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019c4:	2101      	movs	r1, #1
 80019c6:	fa01 f202 	lsl.w	r2, r1, r2
 80019ca:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2201      	movs	r2, #1
 80019d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2200      	movs	r2, #0
 80019d8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d003      	beq.n	80019ec <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	4798      	blx	r3
    }
  }
  return status;
 80019ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3710      	adds	r7, #16
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
	...

080019f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b087      	sub	sp, #28
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001a02:	2300      	movs	r3, #0
 8001a04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001a06:	2300      	movs	r3, #0
 8001a08:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001a0e:	e154      	b.n	8001cba <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	2101      	movs	r1, #1
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	fa01 f303 	lsl.w	r3, r1, r3
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	f000 8146 	beq.w	8001cb4 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f003 0303 	and.w	r3, r3, #3
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d005      	beq.n	8001a40 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001a3c:	2b02      	cmp	r3, #2
 8001a3e:	d130      	bne.n	8001aa2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	005b      	lsls	r3, r3, #1
 8001a4a:	2203      	movs	r2, #3
 8001a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a50:	43db      	mvns	r3, r3
 8001a52:	693a      	ldr	r2, [r7, #16]
 8001a54:	4013      	ands	r3, r2
 8001a56:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	68da      	ldr	r2, [r3, #12]
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	005b      	lsls	r3, r3, #1
 8001a60:	fa02 f303 	lsl.w	r3, r2, r3
 8001a64:	693a      	ldr	r2, [r7, #16]
 8001a66:	4313      	orrs	r3, r2
 8001a68:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	693a      	ldr	r2, [r7, #16]
 8001a6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8001a76:	2201      	movs	r2, #1
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7e:	43db      	mvns	r3, r3
 8001a80:	693a      	ldr	r2, [r7, #16]
 8001a82:	4013      	ands	r3, r2
 8001a84:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	091b      	lsrs	r3, r3, #4
 8001a8c:	f003 0201 	and.w	r2, r3, #1
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	fa02 f303 	lsl.w	r3, r2, r3
 8001a96:	693a      	ldr	r2, [r7, #16]
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	693a      	ldr	r2, [r7, #16]
 8001aa0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f003 0303 	and.w	r3, r3, #3
 8001aaa:	2b03      	cmp	r3, #3
 8001aac:	d017      	beq.n	8001ade <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	68db      	ldr	r3, [r3, #12]
 8001ab2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	2203      	movs	r2, #3
 8001aba:	fa02 f303 	lsl.w	r3, r2, r3
 8001abe:	43db      	mvns	r3, r3
 8001ac0:	693a      	ldr	r2, [r7, #16]
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	689a      	ldr	r2, [r3, #8]
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	005b      	lsls	r3, r3, #1
 8001ace:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad2:	693a      	ldr	r2, [r7, #16]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	693a      	ldr	r2, [r7, #16]
 8001adc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	f003 0303 	and.w	r3, r3, #3
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d123      	bne.n	8001b32 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	08da      	lsrs	r2, r3, #3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	3208      	adds	r2, #8
 8001af2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001af6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	f003 0307 	and.w	r3, r3, #7
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	220f      	movs	r2, #15
 8001b02:	fa02 f303 	lsl.w	r3, r2, r3
 8001b06:	43db      	mvns	r3, r3
 8001b08:	693a      	ldr	r2, [r7, #16]
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	691a      	ldr	r2, [r3, #16]
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	f003 0307 	and.w	r3, r3, #7
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1e:	693a      	ldr	r2, [r7, #16]
 8001b20:	4313      	orrs	r3, r2
 8001b22:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	08da      	lsrs	r2, r3, #3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	3208      	adds	r2, #8
 8001b2c:	6939      	ldr	r1, [r7, #16]
 8001b2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	005b      	lsls	r3, r3, #1
 8001b3c:	2203      	movs	r2, #3
 8001b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b42:	43db      	mvns	r3, r3
 8001b44:	693a      	ldr	r2, [r7, #16]
 8001b46:	4013      	ands	r3, r2
 8001b48:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f003 0203 	and.w	r2, r3, #3
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	005b      	lsls	r3, r3, #1
 8001b56:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5a:	693a      	ldr	r2, [r7, #16]
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	693a      	ldr	r2, [r7, #16]
 8001b64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	f000 80a0 	beq.w	8001cb4 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b74:	4b58      	ldr	r3, [pc, #352]	; (8001cd8 <HAL_GPIO_Init+0x2e0>)
 8001b76:	6a1b      	ldr	r3, [r3, #32]
 8001b78:	4a57      	ldr	r2, [pc, #348]	; (8001cd8 <HAL_GPIO_Init+0x2e0>)
 8001b7a:	f043 0301 	orr.w	r3, r3, #1
 8001b7e:	6213      	str	r3, [r2, #32]
 8001b80:	4b55      	ldr	r3, [pc, #340]	; (8001cd8 <HAL_GPIO_Init+0x2e0>)
 8001b82:	6a1b      	ldr	r3, [r3, #32]
 8001b84:	f003 0301 	and.w	r3, r3, #1
 8001b88:	60bb      	str	r3, [r7, #8]
 8001b8a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8001b8c:	4a53      	ldr	r2, [pc, #332]	; (8001cdc <HAL_GPIO_Init+0x2e4>)
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	089b      	lsrs	r3, r3, #2
 8001b92:	3302      	adds	r3, #2
 8001b94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b98:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	f003 0303 	and.w	r3, r3, #3
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	220f      	movs	r2, #15
 8001ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba8:	43db      	mvns	r3, r3
 8001baa:	693a      	ldr	r2, [r7, #16]
 8001bac:	4013      	ands	r3, r2
 8001bae:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	4a4b      	ldr	r2, [pc, #300]	; (8001ce0 <HAL_GPIO_Init+0x2e8>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d019      	beq.n	8001bec <HAL_GPIO_Init+0x1f4>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	4a4a      	ldr	r2, [pc, #296]	; (8001ce4 <HAL_GPIO_Init+0x2ec>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d013      	beq.n	8001be8 <HAL_GPIO_Init+0x1f0>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	4a49      	ldr	r2, [pc, #292]	; (8001ce8 <HAL_GPIO_Init+0x2f0>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d00d      	beq.n	8001be4 <HAL_GPIO_Init+0x1ec>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	4a48      	ldr	r2, [pc, #288]	; (8001cec <HAL_GPIO_Init+0x2f4>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d007      	beq.n	8001be0 <HAL_GPIO_Init+0x1e8>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	4a47      	ldr	r2, [pc, #284]	; (8001cf0 <HAL_GPIO_Init+0x2f8>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d101      	bne.n	8001bdc <HAL_GPIO_Init+0x1e4>
 8001bd8:	2304      	movs	r3, #4
 8001bda:	e008      	b.n	8001bee <HAL_GPIO_Init+0x1f6>
 8001bdc:	2305      	movs	r3, #5
 8001bde:	e006      	b.n	8001bee <HAL_GPIO_Init+0x1f6>
 8001be0:	2303      	movs	r3, #3
 8001be2:	e004      	b.n	8001bee <HAL_GPIO_Init+0x1f6>
 8001be4:	2302      	movs	r3, #2
 8001be6:	e002      	b.n	8001bee <HAL_GPIO_Init+0x1f6>
 8001be8:	2301      	movs	r3, #1
 8001bea:	e000      	b.n	8001bee <HAL_GPIO_Init+0x1f6>
 8001bec:	2300      	movs	r3, #0
 8001bee:	697a      	ldr	r2, [r7, #20]
 8001bf0:	f002 0203 	and.w	r2, r2, #3
 8001bf4:	0092      	lsls	r2, r2, #2
 8001bf6:	4093      	lsls	r3, r2
 8001bf8:	693a      	ldr	r2, [r7, #16]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001bfe:	4937      	ldr	r1, [pc, #220]	; (8001cdc <HAL_GPIO_Init+0x2e4>)
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	089b      	lsrs	r3, r3, #2
 8001c04:	3302      	adds	r3, #2
 8001c06:	693a      	ldr	r2, [r7, #16]
 8001c08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c0c:	4b39      	ldr	r3, [pc, #228]	; (8001cf4 <HAL_GPIO_Init+0x2fc>)
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	43db      	mvns	r3, r3
 8001c16:	693a      	ldr	r2, [r7, #16]
 8001c18:	4013      	ands	r3, r2
 8001c1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d003      	beq.n	8001c30 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 8001c28:	693a      	ldr	r2, [r7, #16]
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001c30:	4a30      	ldr	r2, [pc, #192]	; (8001cf4 <HAL_GPIO_Init+0x2fc>)
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c36:	4b2f      	ldr	r3, [pc, #188]	; (8001cf4 <HAL_GPIO_Init+0x2fc>)
 8001c38:	68db      	ldr	r3, [r3, #12]
 8001c3a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	43db      	mvns	r3, r3
 8001c40:	693a      	ldr	r2, [r7, #16]
 8001c42:	4013      	ands	r3, r2
 8001c44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d003      	beq.n	8001c5a <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 8001c52:	693a      	ldr	r2, [r7, #16]
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	4313      	orrs	r3, r2
 8001c58:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001c5a:	4a26      	ldr	r2, [pc, #152]	; (8001cf4 <HAL_GPIO_Init+0x2fc>)
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c60:	4b24      	ldr	r3, [pc, #144]	; (8001cf4 <HAL_GPIO_Init+0x2fc>)
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	43db      	mvns	r3, r3
 8001c6a:	693a      	ldr	r2, [r7, #16]
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d003      	beq.n	8001c84 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 8001c7c:	693a      	ldr	r2, [r7, #16]
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001c84:	4a1b      	ldr	r2, [pc, #108]	; (8001cf4 <HAL_GPIO_Init+0x2fc>)
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c8a:	4b1a      	ldr	r3, [pc, #104]	; (8001cf4 <HAL_GPIO_Init+0x2fc>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	43db      	mvns	r3, r3
 8001c94:	693a      	ldr	r2, [r7, #16]
 8001c96:	4013      	ands	r3, r2
 8001c98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d003      	beq.n	8001cae <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 8001ca6:	693a      	ldr	r2, [r7, #16]
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	4313      	orrs	r3, r2
 8001cac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001cae:	4a11      	ldr	r2, [pc, #68]	; (8001cf4 <HAL_GPIO_Init+0x2fc>)
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	3301      	adds	r3, #1
 8001cb8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	fa22 f303 	lsr.w	r3, r2, r3
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	f47f aea3 	bne.w	8001a10 <HAL_GPIO_Init+0x18>
  }
}
 8001cca:	bf00      	nop
 8001ccc:	bf00      	nop
 8001cce:	371c      	adds	r7, #28
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bc80      	pop	{r7}
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	40023800 	.word	0x40023800
 8001cdc:	40010000 	.word	0x40010000
 8001ce0:	40020000 	.word	0x40020000
 8001ce4:	40020400 	.word	0x40020400
 8001ce8:	40020800 	.word	0x40020800
 8001cec:	40020c00 	.word	0x40020c00
 8001cf0:	40021000 	.word	0x40021000
 8001cf4:	40010400 	.word	0x40010400

08001cf8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	460b      	mov	r3, r1
 8001d02:	807b      	strh	r3, [r7, #2]
 8001d04:	4613      	mov	r3, r2
 8001d06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d08:	787b      	ldrb	r3, [r7, #1]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d003      	beq.n	8001d16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d0e:	887a      	ldrh	r2, [r7, #2]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8001d14:	e003      	b.n	8001d1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8001d16:	887b      	ldrh	r3, [r7, #2]
 8001d18:	041a      	lsls	r2, r3, #16
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	619a      	str	r2, [r3, #24]
}
 8001d1e:	bf00      	nop
 8001d20:	370c      	adds	r7, #12
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bc80      	pop	{r7}
 8001d26:	4770      	bx	lr

08001d28 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..G depending on device used) to select the GPIO peripheral for STM32L1XX family devices
  * @param  GPIO_Pin specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b085      	sub	sp, #20
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	460b      	mov	r3, r1
 8001d32:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	695b      	ldr	r3, [r3, #20]
 8001d38:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d3a:	887a      	ldrh	r2, [r7, #2]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	4013      	ands	r3, r2
 8001d40:	041a      	lsls	r2, r3, #16
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	43d9      	mvns	r1, r3
 8001d46:	887b      	ldrh	r3, [r7, #2]
 8001d48:	400b      	ands	r3, r1
 8001d4a:	431a      	orrs	r2, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	619a      	str	r2, [r3, #24]
}
 8001d50:	bf00      	nop
 8001d52:	3714      	adds	r7, #20
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bc80      	pop	{r7}
 8001d58:	4770      	bx	lr
	...

08001d5c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	4603      	mov	r3, r0
 8001d64:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001d66:	4b08      	ldr	r3, [pc, #32]	; (8001d88 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d68:	695a      	ldr	r2, [r3, #20]
 8001d6a:	88fb      	ldrh	r3, [r7, #6]
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d006      	beq.n	8001d80 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001d72:	4a05      	ldr	r2, [pc, #20]	; (8001d88 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d74:	88fb      	ldrh	r3, [r7, #6]
 8001d76:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001d78:	88fb      	ldrh	r3, [r7, #6]
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f7ff f8f4 	bl	8000f68 <HAL_GPIO_EXTI_Callback>
  }
}
 8001d80:	bf00      	nop
 8001d82:	3708      	adds	r7, #8
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	40010400 	.word	0x40010400

08001d8c <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	460b      	mov	r3, r1
 8001d96:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Select the regulator state in Sleep mode: Set PDDS and LPSDSR bit according to PWR_Regulator value */
  MODIFY_REG(PWR->CR, (PWR_CR_PDDS | PWR_CR_LPSDSR), Regulator);
 8001d98:	4b0d      	ldr	r3, [pc, #52]	; (8001dd0 <HAL_PWR_EnterSLEEPMode+0x44>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f023 0203 	bic.w	r2, r3, #3
 8001da0:	490b      	ldr	r1, [pc, #44]	; (8001dd0 <HAL_PWR_EnterSLEEPMode+0x44>)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	600b      	str	r3, [r1, #0]

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001da8:	4b0a      	ldr	r3, [pc, #40]	; (8001dd4 <HAL_PWR_EnterSLEEPMode+0x48>)
 8001daa:	691b      	ldr	r3, [r3, #16]
 8001dac:	4a09      	ldr	r2, [pc, #36]	; (8001dd4 <HAL_PWR_EnterSLEEPMode+0x48>)
 8001dae:	f023 0304 	bic.w	r3, r3, #4
 8001db2:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8001db4:	78fb      	ldrb	r3, [r7, #3]
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d101      	bne.n	8001dbe <HAL_PWR_EnterSLEEPMode+0x32>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8001dba:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 8001dbc:	e002      	b.n	8001dc4 <HAL_PWR_EnterSLEEPMode+0x38>
    __SEV();
 8001dbe:	bf40      	sev
    __WFE();
 8001dc0:	bf20      	wfe
    __WFE();
 8001dc2:	bf20      	wfe
}
 8001dc4:	bf00      	nop
 8001dc6:	370c      	adds	r7, #12
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bc80      	pop	{r7}
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	40007000 	.word	0x40007000
 8001dd4:	e000ed00 	.word	0xe000ed00

08001dd8 <HAL_PWR_EnableSleepOnExit>:
  *       Setting this bit is useful when the processor is expected to run only on
  *       interruptions handling.
  * @retval None
  */
void HAL_PWR_EnableSleepOnExit(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  /* Set SLEEPONEXIT bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 8001ddc:	4b04      	ldr	r3, [pc, #16]	; (8001df0 <HAL_PWR_EnableSleepOnExit+0x18>)
 8001dde:	691b      	ldr	r3, [r3, #16]
 8001de0:	4a03      	ldr	r2, [pc, #12]	; (8001df0 <HAL_PWR_EnableSleepOnExit+0x18>)
 8001de2:	f043 0302 	orr.w	r3, r3, #2
 8001de6:	6113      	str	r3, [r2, #16]
}
 8001de8:	bf00      	nop
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bc80      	pop	{r7}
 8001dee:	4770      	bx	lr
 8001df0:	e000ed00 	.word	0xe000ed00

08001df4 <HAL_PWR_DisableSleepOnExit>:
  * @note Clears SLEEPONEXIT bit of SCR register. When this bit is set, the processor
  *       re-enters SLEEP mode when an interruption handling is over.
  * @retval None
  */
void HAL_PWR_DisableSleepOnExit(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  /* Clear SLEEPONEXIT bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 8001df8:	4b04      	ldr	r3, [pc, #16]	; (8001e0c <HAL_PWR_DisableSleepOnExit+0x18>)
 8001dfa:	691b      	ldr	r3, [r3, #16]
 8001dfc:	4a03      	ldr	r2, [pc, #12]	; (8001e0c <HAL_PWR_DisableSleepOnExit+0x18>)
 8001dfe:	f023 0302 	bic.w	r3, r3, #2
 8001e02:	6113      	str	r3, [r2, #16]
}
 8001e04:	bf00      	nop
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bc80      	pop	{r7}
 8001e0a:	4770      	bx	lr
 8001e0c:	e000ed00 	.word	0xe000ed00

08001e10 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b088      	sub	sp, #32
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d101      	bne.n	8001e22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e31d      	b.n	800245e <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e22:	4b94      	ldr	r3, [pc, #592]	; (8002074 <HAL_RCC_OscConfig+0x264>)
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	f003 030c 	and.w	r3, r3, #12
 8001e2a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e2c:	4b91      	ldr	r3, [pc, #580]	; (8002074 <HAL_RCC_OscConfig+0x264>)
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e34:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0301 	and.w	r3, r3, #1
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d07b      	beq.n	8001f3a <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e42:	69bb      	ldr	r3, [r7, #24]
 8001e44:	2b08      	cmp	r3, #8
 8001e46:	d006      	beq.n	8001e56 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001e48:	69bb      	ldr	r3, [r7, #24]
 8001e4a:	2b0c      	cmp	r3, #12
 8001e4c:	d10f      	bne.n	8001e6e <HAL_RCC_OscConfig+0x5e>
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e54:	d10b      	bne.n	8001e6e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e56:	4b87      	ldr	r3, [pc, #540]	; (8002074 <HAL_RCC_OscConfig+0x264>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d06a      	beq.n	8001f38 <HAL_RCC_OscConfig+0x128>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d166      	bne.n	8001f38 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e2f7      	b.n	800245e <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d106      	bne.n	8001e84 <HAL_RCC_OscConfig+0x74>
 8001e76:	4b7f      	ldr	r3, [pc, #508]	; (8002074 <HAL_RCC_OscConfig+0x264>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a7e      	ldr	r2, [pc, #504]	; (8002074 <HAL_RCC_OscConfig+0x264>)
 8001e7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e80:	6013      	str	r3, [r2, #0]
 8001e82:	e02d      	b.n	8001ee0 <HAL_RCC_OscConfig+0xd0>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d10c      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x96>
 8001e8c:	4b79      	ldr	r3, [pc, #484]	; (8002074 <HAL_RCC_OscConfig+0x264>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a78      	ldr	r2, [pc, #480]	; (8002074 <HAL_RCC_OscConfig+0x264>)
 8001e92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e96:	6013      	str	r3, [r2, #0]
 8001e98:	4b76      	ldr	r3, [pc, #472]	; (8002074 <HAL_RCC_OscConfig+0x264>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a75      	ldr	r2, [pc, #468]	; (8002074 <HAL_RCC_OscConfig+0x264>)
 8001e9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ea2:	6013      	str	r3, [r2, #0]
 8001ea4:	e01c      	b.n	8001ee0 <HAL_RCC_OscConfig+0xd0>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	2b05      	cmp	r3, #5
 8001eac:	d10c      	bne.n	8001ec8 <HAL_RCC_OscConfig+0xb8>
 8001eae:	4b71      	ldr	r3, [pc, #452]	; (8002074 <HAL_RCC_OscConfig+0x264>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a70      	ldr	r2, [pc, #448]	; (8002074 <HAL_RCC_OscConfig+0x264>)
 8001eb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001eb8:	6013      	str	r3, [r2, #0]
 8001eba:	4b6e      	ldr	r3, [pc, #440]	; (8002074 <HAL_RCC_OscConfig+0x264>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a6d      	ldr	r2, [pc, #436]	; (8002074 <HAL_RCC_OscConfig+0x264>)
 8001ec0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ec4:	6013      	str	r3, [r2, #0]
 8001ec6:	e00b      	b.n	8001ee0 <HAL_RCC_OscConfig+0xd0>
 8001ec8:	4b6a      	ldr	r3, [pc, #424]	; (8002074 <HAL_RCC_OscConfig+0x264>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a69      	ldr	r2, [pc, #420]	; (8002074 <HAL_RCC_OscConfig+0x264>)
 8001ece:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ed2:	6013      	str	r3, [r2, #0]
 8001ed4:	4b67      	ldr	r3, [pc, #412]	; (8002074 <HAL_RCC_OscConfig+0x264>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a66      	ldr	r2, [pc, #408]	; (8002074 <HAL_RCC_OscConfig+0x264>)
 8001eda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ede:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d013      	beq.n	8001f10 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee8:	f7ff fbb2 	bl	8001650 <HAL_GetTick>
 8001eec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001eee:	e008      	b.n	8001f02 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ef0:	f7ff fbae 	bl	8001650 <HAL_GetTick>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	2b64      	cmp	r3, #100	; 0x64
 8001efc:	d901      	bls.n	8001f02 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8001efe:	2303      	movs	r3, #3
 8001f00:	e2ad      	b.n	800245e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001f02:	4b5c      	ldr	r3, [pc, #368]	; (8002074 <HAL_RCC_OscConfig+0x264>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d0f0      	beq.n	8001ef0 <HAL_RCC_OscConfig+0xe0>
 8001f0e:	e014      	b.n	8001f3a <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f10:	f7ff fb9e 	bl	8001650 <HAL_GetTick>
 8001f14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001f16:	e008      	b.n	8001f2a <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f18:	f7ff fb9a 	bl	8001650 <HAL_GetTick>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	2b64      	cmp	r3, #100	; 0x64
 8001f24:	d901      	bls.n	8001f2a <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	e299      	b.n	800245e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001f2a:	4b52      	ldr	r3, [pc, #328]	; (8002074 <HAL_RCC_OscConfig+0x264>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d1f0      	bne.n	8001f18 <HAL_RCC_OscConfig+0x108>
 8001f36:	e000      	b.n	8001f3a <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d05a      	beq.n	8001ffc <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f46:	69bb      	ldr	r3, [r7, #24]
 8001f48:	2b04      	cmp	r3, #4
 8001f4a:	d005      	beq.n	8001f58 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001f4c:	69bb      	ldr	r3, [r7, #24]
 8001f4e:	2b0c      	cmp	r3, #12
 8001f50:	d119      	bne.n	8001f86 <HAL_RCC_OscConfig+0x176>
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d116      	bne.n	8001f86 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f58:	4b46      	ldr	r3, [pc, #280]	; (8002074 <HAL_RCC_OscConfig+0x264>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 0302 	and.w	r3, r3, #2
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d005      	beq.n	8001f70 <HAL_RCC_OscConfig+0x160>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d001      	beq.n	8001f70 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e276      	b.n	800245e <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f70:	4b40      	ldr	r3, [pc, #256]	; (8002074 <HAL_RCC_OscConfig+0x264>)
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	691b      	ldr	r3, [r3, #16]
 8001f7c:	021b      	lsls	r3, r3, #8
 8001f7e:	493d      	ldr	r1, [pc, #244]	; (8002074 <HAL_RCC_OscConfig+0x264>)
 8001f80:	4313      	orrs	r3, r2
 8001f82:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f84:	e03a      	b.n	8001ffc <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d020      	beq.n	8001fd0 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f8e:	4b3a      	ldr	r3, [pc, #232]	; (8002078 <HAL_RCC_OscConfig+0x268>)
 8001f90:	2201      	movs	r2, #1
 8001f92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f94:	f7ff fb5c 	bl	8001650 <HAL_GetTick>
 8001f98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f9a:	e008      	b.n	8001fae <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f9c:	f7ff fb58 	bl	8001650 <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d901      	bls.n	8001fae <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e257      	b.n	800245e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001fae:	4b31      	ldr	r3, [pc, #196]	; (8002074 <HAL_RCC_OscConfig+0x264>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0302 	and.w	r3, r3, #2
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d0f0      	beq.n	8001f9c <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fba:	4b2e      	ldr	r3, [pc, #184]	; (8002074 <HAL_RCC_OscConfig+0x264>)
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	691b      	ldr	r3, [r3, #16]
 8001fc6:	021b      	lsls	r3, r3, #8
 8001fc8:	492a      	ldr	r1, [pc, #168]	; (8002074 <HAL_RCC_OscConfig+0x264>)
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	604b      	str	r3, [r1, #4]
 8001fce:	e015      	b.n	8001ffc <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fd0:	4b29      	ldr	r3, [pc, #164]	; (8002078 <HAL_RCC_OscConfig+0x268>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd6:	f7ff fb3b 	bl	8001650 <HAL_GetTick>
 8001fda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001fdc:	e008      	b.n	8001ff0 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fde:	f7ff fb37 	bl	8001650 <HAL_GetTick>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d901      	bls.n	8001ff0 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8001fec:	2303      	movs	r3, #3
 8001fee:	e236      	b.n	800245e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001ff0:	4b20      	ldr	r3, [pc, #128]	; (8002074 <HAL_RCC_OscConfig+0x264>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0302 	and.w	r3, r3, #2
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d1f0      	bne.n	8001fde <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0310 	and.w	r3, r3, #16
 8002004:	2b00      	cmp	r3, #0
 8002006:	f000 80b8 	beq.w	800217a <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800200a:	69bb      	ldr	r3, [r7, #24]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d170      	bne.n	80020f2 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002010:	4b18      	ldr	r3, [pc, #96]	; (8002074 <HAL_RCC_OscConfig+0x264>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002018:	2b00      	cmp	r3, #0
 800201a:	d005      	beq.n	8002028 <HAL_RCC_OscConfig+0x218>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	699b      	ldr	r3, [r3, #24]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d101      	bne.n	8002028 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e21a      	b.n	800245e <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6a1a      	ldr	r2, [r3, #32]
 800202c:	4b11      	ldr	r3, [pc, #68]	; (8002074 <HAL_RCC_OscConfig+0x264>)
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002034:	429a      	cmp	r2, r3
 8002036:	d921      	bls.n	800207c <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6a1b      	ldr	r3, [r3, #32]
 800203c:	4618      	mov	r0, r3
 800203e:	f000 fc7d 	bl	800293c <RCC_SetFlashLatencyFromMSIRange>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d001      	beq.n	800204c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e208      	b.n	800245e <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800204c:	4b09      	ldr	r3, [pc, #36]	; (8002074 <HAL_RCC_OscConfig+0x264>)
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6a1b      	ldr	r3, [r3, #32]
 8002058:	4906      	ldr	r1, [pc, #24]	; (8002074 <HAL_RCC_OscConfig+0x264>)
 800205a:	4313      	orrs	r3, r2
 800205c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800205e:	4b05      	ldr	r3, [pc, #20]	; (8002074 <HAL_RCC_OscConfig+0x264>)
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	69db      	ldr	r3, [r3, #28]
 800206a:	061b      	lsls	r3, r3, #24
 800206c:	4901      	ldr	r1, [pc, #4]	; (8002074 <HAL_RCC_OscConfig+0x264>)
 800206e:	4313      	orrs	r3, r2
 8002070:	604b      	str	r3, [r1, #4]
 8002072:	e020      	b.n	80020b6 <HAL_RCC_OscConfig+0x2a6>
 8002074:	40023800 	.word	0x40023800
 8002078:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800207c:	4b99      	ldr	r3, [pc, #612]	; (80022e4 <HAL_RCC_OscConfig+0x4d4>)
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6a1b      	ldr	r3, [r3, #32]
 8002088:	4996      	ldr	r1, [pc, #600]	; (80022e4 <HAL_RCC_OscConfig+0x4d4>)
 800208a:	4313      	orrs	r3, r2
 800208c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800208e:	4b95      	ldr	r3, [pc, #596]	; (80022e4 <HAL_RCC_OscConfig+0x4d4>)
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	69db      	ldr	r3, [r3, #28]
 800209a:	061b      	lsls	r3, r3, #24
 800209c:	4991      	ldr	r1, [pc, #580]	; (80022e4 <HAL_RCC_OscConfig+0x4d4>)
 800209e:	4313      	orrs	r3, r2
 80020a0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6a1b      	ldr	r3, [r3, #32]
 80020a6:	4618      	mov	r0, r3
 80020a8:	f000 fc48 	bl	800293c <RCC_SetFlashLatencyFromMSIRange>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e1d3      	b.n	800245e <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6a1b      	ldr	r3, [r3, #32]
 80020ba:	0b5b      	lsrs	r3, r3, #13
 80020bc:	3301      	adds	r3, #1
 80020be:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80020c2:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80020c6:	4a87      	ldr	r2, [pc, #540]	; (80022e4 <HAL_RCC_OscConfig+0x4d4>)
 80020c8:	6892      	ldr	r2, [r2, #8]
 80020ca:	0912      	lsrs	r2, r2, #4
 80020cc:	f002 020f 	and.w	r2, r2, #15
 80020d0:	4985      	ldr	r1, [pc, #532]	; (80022e8 <HAL_RCC_OscConfig+0x4d8>)
 80020d2:	5c8a      	ldrb	r2, [r1, r2]
 80020d4:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80020d6:	4a85      	ldr	r2, [pc, #532]	; (80022ec <HAL_RCC_OscConfig+0x4dc>)
 80020d8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80020da:	4b85      	ldr	r3, [pc, #532]	; (80022f0 <HAL_RCC_OscConfig+0x4e0>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4618      	mov	r0, r3
 80020e0:	f7ff fa6a 	bl	80015b8 <HAL_InitTick>
 80020e4:	4603      	mov	r3, r0
 80020e6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80020e8:	7bfb      	ldrb	r3, [r7, #15]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d045      	beq.n	800217a <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 80020ee:	7bfb      	ldrb	r3, [r7, #15]
 80020f0:	e1b5      	b.n	800245e <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	699b      	ldr	r3, [r3, #24]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d029      	beq.n	800214e <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80020fa:	4b7e      	ldr	r3, [pc, #504]	; (80022f4 <HAL_RCC_OscConfig+0x4e4>)
 80020fc:	2201      	movs	r2, #1
 80020fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002100:	f7ff faa6 	bl	8001650 <HAL_GetTick>
 8002104:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002106:	e008      	b.n	800211a <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002108:	f7ff faa2 	bl	8001650 <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	2b02      	cmp	r3, #2
 8002114:	d901      	bls.n	800211a <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e1a1      	b.n	800245e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800211a:	4b72      	ldr	r3, [pc, #456]	; (80022e4 <HAL_RCC_OscConfig+0x4d4>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002122:	2b00      	cmp	r3, #0
 8002124:	d0f0      	beq.n	8002108 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002126:	4b6f      	ldr	r3, [pc, #444]	; (80022e4 <HAL_RCC_OscConfig+0x4d4>)
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6a1b      	ldr	r3, [r3, #32]
 8002132:	496c      	ldr	r1, [pc, #432]	; (80022e4 <HAL_RCC_OscConfig+0x4d4>)
 8002134:	4313      	orrs	r3, r2
 8002136:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002138:	4b6a      	ldr	r3, [pc, #424]	; (80022e4 <HAL_RCC_OscConfig+0x4d4>)
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	69db      	ldr	r3, [r3, #28]
 8002144:	061b      	lsls	r3, r3, #24
 8002146:	4967      	ldr	r1, [pc, #412]	; (80022e4 <HAL_RCC_OscConfig+0x4d4>)
 8002148:	4313      	orrs	r3, r2
 800214a:	604b      	str	r3, [r1, #4]
 800214c:	e015      	b.n	800217a <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800214e:	4b69      	ldr	r3, [pc, #420]	; (80022f4 <HAL_RCC_OscConfig+0x4e4>)
 8002150:	2200      	movs	r2, #0
 8002152:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002154:	f7ff fa7c 	bl	8001650 <HAL_GetTick>
 8002158:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800215a:	e008      	b.n	800216e <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800215c:	f7ff fa78 	bl	8001650 <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	2b02      	cmp	r3, #2
 8002168:	d901      	bls.n	800216e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e177      	b.n	800245e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800216e:	4b5d      	ldr	r3, [pc, #372]	; (80022e4 <HAL_RCC_OscConfig+0x4d4>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002176:	2b00      	cmp	r3, #0
 8002178:	d1f0      	bne.n	800215c <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0308 	and.w	r3, r3, #8
 8002182:	2b00      	cmp	r3, #0
 8002184:	d030      	beq.n	80021e8 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	695b      	ldr	r3, [r3, #20]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d016      	beq.n	80021bc <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800218e:	4b5a      	ldr	r3, [pc, #360]	; (80022f8 <HAL_RCC_OscConfig+0x4e8>)
 8002190:	2201      	movs	r2, #1
 8002192:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002194:	f7ff fa5c 	bl	8001650 <HAL_GetTick>
 8002198:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800219a:	e008      	b.n	80021ae <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800219c:	f7ff fa58 	bl	8001650 <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e157      	b.n	800245e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80021ae:	4b4d      	ldr	r3, [pc, #308]	; (80022e4 <HAL_RCC_OscConfig+0x4d4>)
 80021b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021b2:	f003 0302 	and.w	r3, r3, #2
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d0f0      	beq.n	800219c <HAL_RCC_OscConfig+0x38c>
 80021ba:	e015      	b.n	80021e8 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021bc:	4b4e      	ldr	r3, [pc, #312]	; (80022f8 <HAL_RCC_OscConfig+0x4e8>)
 80021be:	2200      	movs	r2, #0
 80021c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021c2:	f7ff fa45 	bl	8001650 <HAL_GetTick>
 80021c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80021c8:	e008      	b.n	80021dc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021ca:	f7ff fa41 	bl	8001650 <HAL_GetTick>
 80021ce:	4602      	mov	r2, r0
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	2b02      	cmp	r3, #2
 80021d6:	d901      	bls.n	80021dc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80021d8:	2303      	movs	r3, #3
 80021da:	e140      	b.n	800245e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80021dc:	4b41      	ldr	r3, [pc, #260]	; (80022e4 <HAL_RCC_OscConfig+0x4d4>)
 80021de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021e0:	f003 0302 	and.w	r3, r3, #2
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d1f0      	bne.n	80021ca <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0304 	and.w	r3, r3, #4
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	f000 80b5 	beq.w	8002360 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021f6:	2300      	movs	r3, #0
 80021f8:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021fa:	4b3a      	ldr	r3, [pc, #232]	; (80022e4 <HAL_RCC_OscConfig+0x4d4>)
 80021fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d10d      	bne.n	8002222 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002206:	4b37      	ldr	r3, [pc, #220]	; (80022e4 <HAL_RCC_OscConfig+0x4d4>)
 8002208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800220a:	4a36      	ldr	r2, [pc, #216]	; (80022e4 <HAL_RCC_OscConfig+0x4d4>)
 800220c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002210:	6253      	str	r3, [r2, #36]	; 0x24
 8002212:	4b34      	ldr	r3, [pc, #208]	; (80022e4 <HAL_RCC_OscConfig+0x4d4>)
 8002214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002216:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800221a:	60bb      	str	r3, [r7, #8]
 800221c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800221e:	2301      	movs	r3, #1
 8002220:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002222:	4b36      	ldr	r3, [pc, #216]	; (80022fc <HAL_RCC_OscConfig+0x4ec>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800222a:	2b00      	cmp	r3, #0
 800222c:	d118      	bne.n	8002260 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800222e:	4b33      	ldr	r3, [pc, #204]	; (80022fc <HAL_RCC_OscConfig+0x4ec>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a32      	ldr	r2, [pc, #200]	; (80022fc <HAL_RCC_OscConfig+0x4ec>)
 8002234:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002238:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800223a:	f7ff fa09 	bl	8001650 <HAL_GetTick>
 800223e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002240:	e008      	b.n	8002254 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002242:	f7ff fa05 	bl	8001650 <HAL_GetTick>
 8002246:	4602      	mov	r2, r0
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	2b64      	cmp	r3, #100	; 0x64
 800224e:	d901      	bls.n	8002254 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	e104      	b.n	800245e <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002254:	4b29      	ldr	r3, [pc, #164]	; (80022fc <HAL_RCC_OscConfig+0x4ec>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800225c:	2b00      	cmp	r3, #0
 800225e:	d0f0      	beq.n	8002242 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	2b01      	cmp	r3, #1
 8002266:	d106      	bne.n	8002276 <HAL_RCC_OscConfig+0x466>
 8002268:	4b1e      	ldr	r3, [pc, #120]	; (80022e4 <HAL_RCC_OscConfig+0x4d4>)
 800226a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800226c:	4a1d      	ldr	r2, [pc, #116]	; (80022e4 <HAL_RCC_OscConfig+0x4d4>)
 800226e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002272:	6353      	str	r3, [r2, #52]	; 0x34
 8002274:	e02d      	b.n	80022d2 <HAL_RCC_OscConfig+0x4c2>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d10c      	bne.n	8002298 <HAL_RCC_OscConfig+0x488>
 800227e:	4b19      	ldr	r3, [pc, #100]	; (80022e4 <HAL_RCC_OscConfig+0x4d4>)
 8002280:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002282:	4a18      	ldr	r2, [pc, #96]	; (80022e4 <HAL_RCC_OscConfig+0x4d4>)
 8002284:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002288:	6353      	str	r3, [r2, #52]	; 0x34
 800228a:	4b16      	ldr	r3, [pc, #88]	; (80022e4 <HAL_RCC_OscConfig+0x4d4>)
 800228c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800228e:	4a15      	ldr	r2, [pc, #84]	; (80022e4 <HAL_RCC_OscConfig+0x4d4>)
 8002290:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002294:	6353      	str	r3, [r2, #52]	; 0x34
 8002296:	e01c      	b.n	80022d2 <HAL_RCC_OscConfig+0x4c2>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	2b05      	cmp	r3, #5
 800229e:	d10c      	bne.n	80022ba <HAL_RCC_OscConfig+0x4aa>
 80022a0:	4b10      	ldr	r3, [pc, #64]	; (80022e4 <HAL_RCC_OscConfig+0x4d4>)
 80022a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022a4:	4a0f      	ldr	r2, [pc, #60]	; (80022e4 <HAL_RCC_OscConfig+0x4d4>)
 80022a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022aa:	6353      	str	r3, [r2, #52]	; 0x34
 80022ac:	4b0d      	ldr	r3, [pc, #52]	; (80022e4 <HAL_RCC_OscConfig+0x4d4>)
 80022ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022b0:	4a0c      	ldr	r2, [pc, #48]	; (80022e4 <HAL_RCC_OscConfig+0x4d4>)
 80022b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022b6:	6353      	str	r3, [r2, #52]	; 0x34
 80022b8:	e00b      	b.n	80022d2 <HAL_RCC_OscConfig+0x4c2>
 80022ba:	4b0a      	ldr	r3, [pc, #40]	; (80022e4 <HAL_RCC_OscConfig+0x4d4>)
 80022bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022be:	4a09      	ldr	r2, [pc, #36]	; (80022e4 <HAL_RCC_OscConfig+0x4d4>)
 80022c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80022c4:	6353      	str	r3, [r2, #52]	; 0x34
 80022c6:	4b07      	ldr	r3, [pc, #28]	; (80022e4 <HAL_RCC_OscConfig+0x4d4>)
 80022c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022ca:	4a06      	ldr	r2, [pc, #24]	; (80022e4 <HAL_RCC_OscConfig+0x4d4>)
 80022cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80022d0:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d024      	beq.n	8002324 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022da:	f7ff f9b9 	bl	8001650 <HAL_GetTick>
 80022de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80022e0:	e019      	b.n	8002316 <HAL_RCC_OscConfig+0x506>
 80022e2:	bf00      	nop
 80022e4:	40023800 	.word	0x40023800
 80022e8:	080080f8 	.word	0x080080f8
 80022ec:	20000000 	.word	0x20000000
 80022f0:	20000004 	.word	0x20000004
 80022f4:	42470020 	.word	0x42470020
 80022f8:	42470680 	.word	0x42470680
 80022fc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002300:	f7ff f9a6 	bl	8001650 <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	f241 3288 	movw	r2, #5000	; 0x1388
 800230e:	4293      	cmp	r3, r2
 8002310:	d901      	bls.n	8002316 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e0a3      	b.n	800245e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002316:	4b54      	ldr	r3, [pc, #336]	; (8002468 <HAL_RCC_OscConfig+0x658>)
 8002318:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800231a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800231e:	2b00      	cmp	r3, #0
 8002320:	d0ee      	beq.n	8002300 <HAL_RCC_OscConfig+0x4f0>
 8002322:	e014      	b.n	800234e <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002324:	f7ff f994 	bl	8001650 <HAL_GetTick>
 8002328:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800232a:	e00a      	b.n	8002342 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800232c:	f7ff f990 	bl	8001650 <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	f241 3288 	movw	r2, #5000	; 0x1388
 800233a:	4293      	cmp	r3, r2
 800233c:	d901      	bls.n	8002342 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e08d      	b.n	800245e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002342:	4b49      	ldr	r3, [pc, #292]	; (8002468 <HAL_RCC_OscConfig+0x658>)
 8002344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002346:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800234a:	2b00      	cmp	r3, #0
 800234c:	d1ee      	bne.n	800232c <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800234e:	7ffb      	ldrb	r3, [r7, #31]
 8002350:	2b01      	cmp	r3, #1
 8002352:	d105      	bne.n	8002360 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002354:	4b44      	ldr	r3, [pc, #272]	; (8002468 <HAL_RCC_OscConfig+0x658>)
 8002356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002358:	4a43      	ldr	r2, [pc, #268]	; (8002468 <HAL_RCC_OscConfig+0x658>)
 800235a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800235e:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002364:	2b00      	cmp	r3, #0
 8002366:	d079      	beq.n	800245c <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002368:	69bb      	ldr	r3, [r7, #24]
 800236a:	2b0c      	cmp	r3, #12
 800236c:	d056      	beq.n	800241c <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002372:	2b02      	cmp	r3, #2
 8002374:	d13b      	bne.n	80023ee <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002376:	4b3d      	ldr	r3, [pc, #244]	; (800246c <HAL_RCC_OscConfig+0x65c>)
 8002378:	2200      	movs	r2, #0
 800237a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800237c:	f7ff f968 	bl	8001650 <HAL_GetTick>
 8002380:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002382:	e008      	b.n	8002396 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002384:	f7ff f964 	bl	8001650 <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	2b02      	cmp	r3, #2
 8002390:	d901      	bls.n	8002396 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e063      	b.n	800245e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002396:	4b34      	ldr	r3, [pc, #208]	; (8002468 <HAL_RCC_OscConfig+0x658>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d1f0      	bne.n	8002384 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023a2:	4b31      	ldr	r3, [pc, #196]	; (8002468 <HAL_RCC_OscConfig+0x658>)
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023b2:	4319      	orrs	r1, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b8:	430b      	orrs	r3, r1
 80023ba:	492b      	ldr	r1, [pc, #172]	; (8002468 <HAL_RCC_OscConfig+0x658>)
 80023bc:	4313      	orrs	r3, r2
 80023be:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023c0:	4b2a      	ldr	r3, [pc, #168]	; (800246c <HAL_RCC_OscConfig+0x65c>)
 80023c2:	2201      	movs	r2, #1
 80023c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c6:	f7ff f943 	bl	8001650 <HAL_GetTick>
 80023ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80023cc:	e008      	b.n	80023e0 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023ce:	f7ff f93f 	bl	8001650 <HAL_GetTick>
 80023d2:	4602      	mov	r2, r0
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d901      	bls.n	80023e0 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	e03e      	b.n	800245e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80023e0:	4b21      	ldr	r3, [pc, #132]	; (8002468 <HAL_RCC_OscConfig+0x658>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d0f0      	beq.n	80023ce <HAL_RCC_OscConfig+0x5be>
 80023ec:	e036      	b.n	800245c <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023ee:	4b1f      	ldr	r3, [pc, #124]	; (800246c <HAL_RCC_OscConfig+0x65c>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f4:	f7ff f92c 	bl	8001650 <HAL_GetTick>
 80023f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80023fa:	e008      	b.n	800240e <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023fc:	f7ff f928 	bl	8001650 <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	2b02      	cmp	r3, #2
 8002408:	d901      	bls.n	800240e <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e027      	b.n	800245e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800240e:	4b16      	ldr	r3, [pc, #88]	; (8002468 <HAL_RCC_OscConfig+0x658>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d1f0      	bne.n	80023fc <HAL_RCC_OscConfig+0x5ec>
 800241a:	e01f      	b.n	800245c <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002420:	2b01      	cmp	r3, #1
 8002422:	d101      	bne.n	8002428 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e01a      	b.n	800245e <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002428:	4b0f      	ldr	r3, [pc, #60]	; (8002468 <HAL_RCC_OscConfig+0x658>)
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002438:	429a      	cmp	r2, r3
 800243a:	d10d      	bne.n	8002458 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002446:	429a      	cmp	r2, r3
 8002448:	d106      	bne.n	8002458 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002454:	429a      	cmp	r2, r3
 8002456:	d001      	beq.n	800245c <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e000      	b.n	800245e <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 800245c:	2300      	movs	r3, #0
}
 800245e:	4618      	mov	r0, r3
 8002460:	3720      	adds	r7, #32
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	40023800 	.word	0x40023800
 800246c:	42470060 	.word	0x42470060

08002470 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d101      	bne.n	8002484 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e11a      	b.n	80026ba <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002484:	4b8f      	ldr	r3, [pc, #572]	; (80026c4 <HAL_RCC_ClockConfig+0x254>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0301 	and.w	r3, r3, #1
 800248c:	683a      	ldr	r2, [r7, #0]
 800248e:	429a      	cmp	r2, r3
 8002490:	d919      	bls.n	80024c6 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	2b01      	cmp	r3, #1
 8002496:	d105      	bne.n	80024a4 <HAL_RCC_ClockConfig+0x34>
 8002498:	4b8a      	ldr	r3, [pc, #552]	; (80026c4 <HAL_RCC_ClockConfig+0x254>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a89      	ldr	r2, [pc, #548]	; (80026c4 <HAL_RCC_ClockConfig+0x254>)
 800249e:	f043 0304 	orr.w	r3, r3, #4
 80024a2:	6013      	str	r3, [r2, #0]
 80024a4:	4b87      	ldr	r3, [pc, #540]	; (80026c4 <HAL_RCC_ClockConfig+0x254>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f023 0201 	bic.w	r2, r3, #1
 80024ac:	4985      	ldr	r1, [pc, #532]	; (80026c4 <HAL_RCC_ClockConfig+0x254>)
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024b4:	4b83      	ldr	r3, [pc, #524]	; (80026c4 <HAL_RCC_ClockConfig+0x254>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0301 	and.w	r3, r3, #1
 80024bc:	683a      	ldr	r2, [r7, #0]
 80024be:	429a      	cmp	r2, r3
 80024c0:	d001      	beq.n	80024c6 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e0f9      	b.n	80026ba <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0302 	and.w	r3, r3, #2
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d008      	beq.n	80024e4 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024d2:	4b7d      	ldr	r3, [pc, #500]	; (80026c8 <HAL_RCC_ClockConfig+0x258>)
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	497a      	ldr	r1, [pc, #488]	; (80026c8 <HAL_RCC_ClockConfig+0x258>)
 80024e0:	4313      	orrs	r3, r2
 80024e2:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0301 	and.w	r3, r3, #1
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	f000 808e 	beq.w	800260e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d107      	bne.n	800250a <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80024fa:	4b73      	ldr	r3, [pc, #460]	; (80026c8 <HAL_RCC_ClockConfig+0x258>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d121      	bne.n	800254a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e0d7      	b.n	80026ba <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	2b03      	cmp	r3, #3
 8002510:	d107      	bne.n	8002522 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002512:	4b6d      	ldr	r3, [pc, #436]	; (80026c8 <HAL_RCC_ClockConfig+0x258>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d115      	bne.n	800254a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e0cb      	b.n	80026ba <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	2b01      	cmp	r3, #1
 8002528:	d107      	bne.n	800253a <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800252a:	4b67      	ldr	r3, [pc, #412]	; (80026c8 <HAL_RCC_ClockConfig+0x258>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0302 	and.w	r3, r3, #2
 8002532:	2b00      	cmp	r3, #0
 8002534:	d109      	bne.n	800254a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e0bf      	b.n	80026ba <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800253a:	4b63      	ldr	r3, [pc, #396]	; (80026c8 <HAL_RCC_ClockConfig+0x258>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002542:	2b00      	cmp	r3, #0
 8002544:	d101      	bne.n	800254a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e0b7      	b.n	80026ba <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800254a:	4b5f      	ldr	r3, [pc, #380]	; (80026c8 <HAL_RCC_ClockConfig+0x258>)
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	f023 0203 	bic.w	r2, r3, #3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	495c      	ldr	r1, [pc, #368]	; (80026c8 <HAL_RCC_ClockConfig+0x258>)
 8002558:	4313      	orrs	r3, r2
 800255a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800255c:	f7ff f878 	bl	8001650 <HAL_GetTick>
 8002560:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	2b02      	cmp	r3, #2
 8002568:	d112      	bne.n	8002590 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800256a:	e00a      	b.n	8002582 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800256c:	f7ff f870 	bl	8001650 <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	f241 3288 	movw	r2, #5000	; 0x1388
 800257a:	4293      	cmp	r3, r2
 800257c:	d901      	bls.n	8002582 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 800257e:	2303      	movs	r3, #3
 8002580:	e09b      	b.n	80026ba <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002582:	4b51      	ldr	r3, [pc, #324]	; (80026c8 <HAL_RCC_ClockConfig+0x258>)
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	f003 030c 	and.w	r3, r3, #12
 800258a:	2b08      	cmp	r3, #8
 800258c:	d1ee      	bne.n	800256c <HAL_RCC_ClockConfig+0xfc>
 800258e:	e03e      	b.n	800260e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	2b03      	cmp	r3, #3
 8002596:	d112      	bne.n	80025be <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002598:	e00a      	b.n	80025b0 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800259a:	f7ff f859 	bl	8001650 <HAL_GetTick>
 800259e:	4602      	mov	r2, r0
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d901      	bls.n	80025b0 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 80025ac:	2303      	movs	r3, #3
 80025ae:	e084      	b.n	80026ba <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025b0:	4b45      	ldr	r3, [pc, #276]	; (80026c8 <HAL_RCC_ClockConfig+0x258>)
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	f003 030c 	and.w	r3, r3, #12
 80025b8:	2b0c      	cmp	r3, #12
 80025ba:	d1ee      	bne.n	800259a <HAL_RCC_ClockConfig+0x12a>
 80025bc:	e027      	b.n	800260e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d11d      	bne.n	8002602 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80025c6:	e00a      	b.n	80025de <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025c8:	f7ff f842 	bl	8001650 <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d901      	bls.n	80025de <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	e06d      	b.n	80026ba <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80025de:	4b3a      	ldr	r3, [pc, #232]	; (80026c8 <HAL_RCC_ClockConfig+0x258>)
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	f003 030c 	and.w	r3, r3, #12
 80025e6:	2b04      	cmp	r3, #4
 80025e8:	d1ee      	bne.n	80025c8 <HAL_RCC_ClockConfig+0x158>
 80025ea:	e010      	b.n	800260e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025ec:	f7ff f830 	bl	8001650 <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d901      	bls.n	8002602 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e05b      	b.n	80026ba <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002602:	4b31      	ldr	r3, [pc, #196]	; (80026c8 <HAL_RCC_ClockConfig+0x258>)
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	f003 030c 	and.w	r3, r3, #12
 800260a:	2b00      	cmp	r3, #0
 800260c:	d1ee      	bne.n	80025ec <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800260e:	4b2d      	ldr	r3, [pc, #180]	; (80026c4 <HAL_RCC_ClockConfig+0x254>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0301 	and.w	r3, r3, #1
 8002616:	683a      	ldr	r2, [r7, #0]
 8002618:	429a      	cmp	r2, r3
 800261a:	d219      	bcs.n	8002650 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	2b01      	cmp	r3, #1
 8002620:	d105      	bne.n	800262e <HAL_RCC_ClockConfig+0x1be>
 8002622:	4b28      	ldr	r3, [pc, #160]	; (80026c4 <HAL_RCC_ClockConfig+0x254>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a27      	ldr	r2, [pc, #156]	; (80026c4 <HAL_RCC_ClockConfig+0x254>)
 8002628:	f043 0304 	orr.w	r3, r3, #4
 800262c:	6013      	str	r3, [r2, #0]
 800262e:	4b25      	ldr	r3, [pc, #148]	; (80026c4 <HAL_RCC_ClockConfig+0x254>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f023 0201 	bic.w	r2, r3, #1
 8002636:	4923      	ldr	r1, [pc, #140]	; (80026c4 <HAL_RCC_ClockConfig+0x254>)
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	4313      	orrs	r3, r2
 800263c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800263e:	4b21      	ldr	r3, [pc, #132]	; (80026c4 <HAL_RCC_ClockConfig+0x254>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0301 	and.w	r3, r3, #1
 8002646:	683a      	ldr	r2, [r7, #0]
 8002648:	429a      	cmp	r2, r3
 800264a:	d001      	beq.n	8002650 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e034      	b.n	80026ba <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0304 	and.w	r3, r3, #4
 8002658:	2b00      	cmp	r3, #0
 800265a:	d008      	beq.n	800266e <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800265c:	4b1a      	ldr	r3, [pc, #104]	; (80026c8 <HAL_RCC_ClockConfig+0x258>)
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	4917      	ldr	r1, [pc, #92]	; (80026c8 <HAL_RCC_ClockConfig+0x258>)
 800266a:	4313      	orrs	r3, r2
 800266c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0308 	and.w	r3, r3, #8
 8002676:	2b00      	cmp	r3, #0
 8002678:	d009      	beq.n	800268e <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800267a:	4b13      	ldr	r3, [pc, #76]	; (80026c8 <HAL_RCC_ClockConfig+0x258>)
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	691b      	ldr	r3, [r3, #16]
 8002686:	00db      	lsls	r3, r3, #3
 8002688:	490f      	ldr	r1, [pc, #60]	; (80026c8 <HAL_RCC_ClockConfig+0x258>)
 800268a:	4313      	orrs	r3, r2
 800268c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800268e:	f000 f823 	bl	80026d8 <HAL_RCC_GetSysClockFreq>
 8002692:	4602      	mov	r2, r0
 8002694:	4b0c      	ldr	r3, [pc, #48]	; (80026c8 <HAL_RCC_ClockConfig+0x258>)
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	091b      	lsrs	r3, r3, #4
 800269a:	f003 030f 	and.w	r3, r3, #15
 800269e:	490b      	ldr	r1, [pc, #44]	; (80026cc <HAL_RCC_ClockConfig+0x25c>)
 80026a0:	5ccb      	ldrb	r3, [r1, r3]
 80026a2:	fa22 f303 	lsr.w	r3, r2, r3
 80026a6:	4a0a      	ldr	r2, [pc, #40]	; (80026d0 <HAL_RCC_ClockConfig+0x260>)
 80026a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80026aa:	4b0a      	ldr	r3, [pc, #40]	; (80026d4 <HAL_RCC_ClockConfig+0x264>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7fe ff82 	bl	80015b8 <HAL_InitTick>
 80026b4:	4603      	mov	r3, r0
 80026b6:	72fb      	strb	r3, [r7, #11]

  return status;
 80026b8:	7afb      	ldrb	r3, [r7, #11]
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3710      	adds	r7, #16
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	40023c00 	.word	0x40023c00
 80026c8:	40023800 	.word	0x40023800
 80026cc:	080080f8 	.word	0x080080f8
 80026d0:	20000000 	.word	0x20000000
 80026d4:	20000004 	.word	0x20000004

080026d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026dc:	b092      	sub	sp, #72	; 0x48
 80026de:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 80026e0:	4b79      	ldr	r3, [pc, #484]	; (80028c8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80026e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026e8:	f003 030c 	and.w	r3, r3, #12
 80026ec:	2b0c      	cmp	r3, #12
 80026ee:	d00d      	beq.n	800270c <HAL_RCC_GetSysClockFreq+0x34>
 80026f0:	2b0c      	cmp	r3, #12
 80026f2:	f200 80d5 	bhi.w	80028a0 <HAL_RCC_GetSysClockFreq+0x1c8>
 80026f6:	2b04      	cmp	r3, #4
 80026f8:	d002      	beq.n	8002700 <HAL_RCC_GetSysClockFreq+0x28>
 80026fa:	2b08      	cmp	r3, #8
 80026fc:	d003      	beq.n	8002706 <HAL_RCC_GetSysClockFreq+0x2e>
 80026fe:	e0cf      	b.n	80028a0 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002700:	4b72      	ldr	r3, [pc, #456]	; (80028cc <HAL_RCC_GetSysClockFreq+0x1f4>)
 8002702:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8002704:	e0da      	b.n	80028bc <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002706:	4b72      	ldr	r3, [pc, #456]	; (80028d0 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8002708:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 800270a:	e0d7      	b.n	80028bc <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800270c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800270e:	0c9b      	lsrs	r3, r3, #18
 8002710:	f003 020f 	and.w	r2, r3, #15
 8002714:	4b6f      	ldr	r3, [pc, #444]	; (80028d4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002716:	5c9b      	ldrb	r3, [r3, r2]
 8002718:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800271a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800271c:	0d9b      	lsrs	r3, r3, #22
 800271e:	f003 0303 	and.w	r3, r3, #3
 8002722:	3301      	adds	r3, #1
 8002724:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002726:	4b68      	ldr	r3, [pc, #416]	; (80028c8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d05d      	beq.n	80027ee <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002734:	2200      	movs	r2, #0
 8002736:	4618      	mov	r0, r3
 8002738:	4611      	mov	r1, r2
 800273a:	4604      	mov	r4, r0
 800273c:	460d      	mov	r5, r1
 800273e:	4622      	mov	r2, r4
 8002740:	462b      	mov	r3, r5
 8002742:	f04f 0000 	mov.w	r0, #0
 8002746:	f04f 0100 	mov.w	r1, #0
 800274a:	0159      	lsls	r1, r3, #5
 800274c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002750:	0150      	lsls	r0, r2, #5
 8002752:	4602      	mov	r2, r0
 8002754:	460b      	mov	r3, r1
 8002756:	4621      	mov	r1, r4
 8002758:	1a51      	subs	r1, r2, r1
 800275a:	6139      	str	r1, [r7, #16]
 800275c:	4629      	mov	r1, r5
 800275e:	eb63 0301 	sbc.w	r3, r3, r1
 8002762:	617b      	str	r3, [r7, #20]
 8002764:	f04f 0200 	mov.w	r2, #0
 8002768:	f04f 0300 	mov.w	r3, #0
 800276c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002770:	4659      	mov	r1, fp
 8002772:	018b      	lsls	r3, r1, #6
 8002774:	4651      	mov	r1, sl
 8002776:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800277a:	4651      	mov	r1, sl
 800277c:	018a      	lsls	r2, r1, #6
 800277e:	46d4      	mov	ip, sl
 8002780:	ebb2 080c 	subs.w	r8, r2, ip
 8002784:	4659      	mov	r1, fp
 8002786:	eb63 0901 	sbc.w	r9, r3, r1
 800278a:	f04f 0200 	mov.w	r2, #0
 800278e:	f04f 0300 	mov.w	r3, #0
 8002792:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002796:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800279a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800279e:	4690      	mov	r8, r2
 80027a0:	4699      	mov	r9, r3
 80027a2:	4623      	mov	r3, r4
 80027a4:	eb18 0303 	adds.w	r3, r8, r3
 80027a8:	60bb      	str	r3, [r7, #8]
 80027aa:	462b      	mov	r3, r5
 80027ac:	eb49 0303 	adc.w	r3, r9, r3
 80027b0:	60fb      	str	r3, [r7, #12]
 80027b2:	f04f 0200 	mov.w	r2, #0
 80027b6:	f04f 0300 	mov.w	r3, #0
 80027ba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80027be:	4629      	mov	r1, r5
 80027c0:	024b      	lsls	r3, r1, #9
 80027c2:	4620      	mov	r0, r4
 80027c4:	4629      	mov	r1, r5
 80027c6:	4604      	mov	r4, r0
 80027c8:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 80027cc:	4601      	mov	r1, r0
 80027ce:	024a      	lsls	r2, r1, #9
 80027d0:	4610      	mov	r0, r2
 80027d2:	4619      	mov	r1, r3
 80027d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027d6:	2200      	movs	r2, #0
 80027d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80027da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80027dc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80027e0:	f7fe f9da 	bl	8000b98 <__aeabi_uldivmod>
 80027e4:	4602      	mov	r2, r0
 80027e6:	460b      	mov	r3, r1
 80027e8:	4613      	mov	r3, r2
 80027ea:	647b      	str	r3, [r7, #68]	; 0x44
 80027ec:	e055      	b.n	800289a <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80027ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027f0:	2200      	movs	r2, #0
 80027f2:	623b      	str	r3, [r7, #32]
 80027f4:	627a      	str	r2, [r7, #36]	; 0x24
 80027f6:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80027fa:	4642      	mov	r2, r8
 80027fc:	464b      	mov	r3, r9
 80027fe:	f04f 0000 	mov.w	r0, #0
 8002802:	f04f 0100 	mov.w	r1, #0
 8002806:	0159      	lsls	r1, r3, #5
 8002808:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800280c:	0150      	lsls	r0, r2, #5
 800280e:	4602      	mov	r2, r0
 8002810:	460b      	mov	r3, r1
 8002812:	46c4      	mov	ip, r8
 8002814:	ebb2 0a0c 	subs.w	sl, r2, ip
 8002818:	4640      	mov	r0, r8
 800281a:	4649      	mov	r1, r9
 800281c:	468c      	mov	ip, r1
 800281e:	eb63 0b0c 	sbc.w	fp, r3, ip
 8002822:	f04f 0200 	mov.w	r2, #0
 8002826:	f04f 0300 	mov.w	r3, #0
 800282a:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800282e:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002832:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002836:	ebb2 040a 	subs.w	r4, r2, sl
 800283a:	eb63 050b 	sbc.w	r5, r3, fp
 800283e:	f04f 0200 	mov.w	r2, #0
 8002842:	f04f 0300 	mov.w	r3, #0
 8002846:	00eb      	lsls	r3, r5, #3
 8002848:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800284c:	00e2      	lsls	r2, r4, #3
 800284e:	4614      	mov	r4, r2
 8002850:	461d      	mov	r5, r3
 8002852:	4603      	mov	r3, r0
 8002854:	18e3      	adds	r3, r4, r3
 8002856:	603b      	str	r3, [r7, #0]
 8002858:	460b      	mov	r3, r1
 800285a:	eb45 0303 	adc.w	r3, r5, r3
 800285e:	607b      	str	r3, [r7, #4]
 8002860:	f04f 0200 	mov.w	r2, #0
 8002864:	f04f 0300 	mov.w	r3, #0
 8002868:	e9d7 4500 	ldrd	r4, r5, [r7]
 800286c:	4629      	mov	r1, r5
 800286e:	028b      	lsls	r3, r1, #10
 8002870:	4620      	mov	r0, r4
 8002872:	4629      	mov	r1, r5
 8002874:	4604      	mov	r4, r0
 8002876:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 800287a:	4601      	mov	r1, r0
 800287c:	028a      	lsls	r2, r1, #10
 800287e:	4610      	mov	r0, r2
 8002880:	4619      	mov	r1, r3
 8002882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002884:	2200      	movs	r2, #0
 8002886:	61bb      	str	r3, [r7, #24]
 8002888:	61fa      	str	r2, [r7, #28]
 800288a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800288e:	f7fe f983 	bl	8000b98 <__aeabi_uldivmod>
 8002892:	4602      	mov	r2, r0
 8002894:	460b      	mov	r3, r1
 8002896:	4613      	mov	r3, r2
 8002898:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 800289a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800289c:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 800289e:	e00d      	b.n	80028bc <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80028a0:	4b09      	ldr	r3, [pc, #36]	; (80028c8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	0b5b      	lsrs	r3, r3, #13
 80028a6:	f003 0307 	and.w	r3, r3, #7
 80028aa:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80028ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ae:	3301      	adds	r3, #1
 80028b0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80028b4:	fa02 f303 	lsl.w	r3, r2, r3
 80028b8:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80028ba:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3748      	adds	r7, #72	; 0x48
 80028c2:	46bd      	mov	sp, r7
 80028c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028c8:	40023800 	.word	0x40023800
 80028cc:	00f42400 	.word	0x00f42400
 80028d0:	007a1200 	.word	0x007a1200
 80028d4:	080080ec 	.word	0x080080ec

080028d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028d8:	b480      	push	{r7}
 80028da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028dc:	4b02      	ldr	r3, [pc, #8]	; (80028e8 <HAL_RCC_GetHCLKFreq+0x10>)
 80028de:	681b      	ldr	r3, [r3, #0]
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bc80      	pop	{r7}
 80028e6:	4770      	bx	lr
 80028e8:	20000000 	.word	0x20000000

080028ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80028f0:	f7ff fff2 	bl	80028d8 <HAL_RCC_GetHCLKFreq>
 80028f4:	4602      	mov	r2, r0
 80028f6:	4b05      	ldr	r3, [pc, #20]	; (800290c <HAL_RCC_GetPCLK1Freq+0x20>)
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	0a1b      	lsrs	r3, r3, #8
 80028fc:	f003 0307 	and.w	r3, r3, #7
 8002900:	4903      	ldr	r1, [pc, #12]	; (8002910 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002902:	5ccb      	ldrb	r3, [r1, r3]
 8002904:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002908:	4618      	mov	r0, r3
 800290a:	bd80      	pop	{r7, pc}
 800290c:	40023800 	.word	0x40023800
 8002910:	08008108 	.word	0x08008108

08002914 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002918:	f7ff ffde 	bl	80028d8 <HAL_RCC_GetHCLKFreq>
 800291c:	4602      	mov	r2, r0
 800291e:	4b05      	ldr	r3, [pc, #20]	; (8002934 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	0adb      	lsrs	r3, r3, #11
 8002924:	f003 0307 	and.w	r3, r3, #7
 8002928:	4903      	ldr	r1, [pc, #12]	; (8002938 <HAL_RCC_GetPCLK2Freq+0x24>)
 800292a:	5ccb      	ldrb	r3, [r1, r3]
 800292c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002930:	4618      	mov	r0, r3
 8002932:	bd80      	pop	{r7, pc}
 8002934:	40023800 	.word	0x40023800
 8002938:	08008108 	.word	0x08008108

0800293c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 800293c:	b480      	push	{r7}
 800293e:	b087      	sub	sp, #28
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002944:	2300      	movs	r3, #0
 8002946:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002948:	4b29      	ldr	r3, [pc, #164]	; (80029f0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d12c      	bne.n	80029ae <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002954:	4b26      	ldr	r3, [pc, #152]	; (80029f0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002958:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800295c:	2b00      	cmp	r3, #0
 800295e:	d005      	beq.n	800296c <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002960:	4b24      	ldr	r3, [pc, #144]	; (80029f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8002968:	617b      	str	r3, [r7, #20]
 800296a:	e016      	b.n	800299a <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800296c:	4b20      	ldr	r3, [pc, #128]	; (80029f0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800296e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002970:	4a1f      	ldr	r2, [pc, #124]	; (80029f0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002972:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002976:	6253      	str	r3, [r2, #36]	; 0x24
 8002978:	4b1d      	ldr	r3, [pc, #116]	; (80029f0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800297a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800297c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002980:	60fb      	str	r3, [r7, #12]
 8002982:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002984:	4b1b      	ldr	r3, [pc, #108]	; (80029f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 800298c:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 800298e:	4b18      	ldr	r3, [pc, #96]	; (80029f0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002992:	4a17      	ldr	r2, [pc, #92]	; (80029f0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002994:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002998:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80029a0:	d105      	bne.n	80029ae <RCC_SetFlashLatencyFromMSIRange+0x72>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80029a8:	d101      	bne.n	80029ae <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80029aa:	2301      	movs	r3, #1
 80029ac:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d105      	bne.n	80029c0 <RCC_SetFlashLatencyFromMSIRange+0x84>
 80029b4:	4b10      	ldr	r3, [pc, #64]	; (80029f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a0f      	ldr	r2, [pc, #60]	; (80029f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80029ba:	f043 0304 	orr.w	r3, r3, #4
 80029be:	6013      	str	r3, [r2, #0]
 80029c0:	4b0d      	ldr	r3, [pc, #52]	; (80029f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f023 0201 	bic.w	r2, r3, #1
 80029c8:	490b      	ldr	r1, [pc, #44]	; (80029f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80029d0:	4b09      	ldr	r3, [pc, #36]	; (80029f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0301 	and.w	r3, r3, #1
 80029d8:	693a      	ldr	r2, [r7, #16]
 80029da:	429a      	cmp	r2, r3
 80029dc:	d001      	beq.n	80029e2 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e000      	b.n	80029e4 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 80029e2:	2300      	movs	r3, #0
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	371c      	adds	r7, #28
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bc80      	pop	{r7}
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop
 80029f0:	40023800 	.word	0x40023800
 80029f4:	40007000 	.word	0x40007000
 80029f8:	40023c00 	.word	0x40023c00

080029fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d101      	bne.n	8002a0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e042      	b.n	8002a94 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d106      	bne.n	8002a28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f7fe fc4e 	bl	80012c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2224      	movs	r2, #36	; 0x24
 8002a2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	68da      	ldr	r2, [r3, #12]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a3e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f000 fdc5 	bl	80035d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	691a      	ldr	r2, [r3, #16]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a54:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	695a      	ldr	r2, [r3, #20]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a64:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	68da      	ldr	r2, [r3, #12]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a74:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2220      	movs	r2, #32
 8002a80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2220      	movs	r2, #32
 8002a88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002a92:	2300      	movs	r3, #0
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3708      	adds	r7, #8
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}

08002a9c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b08a      	sub	sp, #40	; 0x28
 8002aa0:	af02      	add	r7, sp, #8
 8002aa2:	60f8      	str	r0, [r7, #12]
 8002aa4:	60b9      	str	r1, [r7, #8]
 8002aa6:	603b      	str	r3, [r7, #0]
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002aac:	2300      	movs	r3, #0
 8002aae:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	2b20      	cmp	r3, #32
 8002aba:	d16d      	bne.n	8002b98 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d002      	beq.n	8002ac8 <HAL_UART_Transmit+0x2c>
 8002ac2:	88fb      	ldrh	r3, [r7, #6]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d101      	bne.n	8002acc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e066      	b.n	8002b9a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2221      	movs	r2, #33	; 0x21
 8002ad6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ada:	f7fe fdb9 	bl	8001650 <HAL_GetTick>
 8002ade:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	88fa      	ldrh	r2, [r7, #6]
 8002ae4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	88fa      	ldrh	r2, [r7, #6]
 8002aea:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002af4:	d108      	bne.n	8002b08 <HAL_UART_Transmit+0x6c>
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	691b      	ldr	r3, [r3, #16]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d104      	bne.n	8002b08 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002afe:	2300      	movs	r3, #0
 8002b00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	61bb      	str	r3, [r7, #24]
 8002b06:	e003      	b.n	8002b10 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002b10:	e02a      	b.n	8002b68 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	9300      	str	r3, [sp, #0]
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	2180      	movs	r1, #128	; 0x80
 8002b1c:	68f8      	ldr	r0, [r7, #12]
 8002b1e:	f000 fb14 	bl	800314a <UART_WaitOnFlagUntilTimeout>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d001      	beq.n	8002b2c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002b28:	2303      	movs	r3, #3
 8002b2a:	e036      	b.n	8002b9a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d10b      	bne.n	8002b4a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b32:	69bb      	ldr	r3, [r7, #24]
 8002b34:	881b      	ldrh	r3, [r3, #0]
 8002b36:	461a      	mov	r2, r3
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b40:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002b42:	69bb      	ldr	r3, [r7, #24]
 8002b44:	3302      	adds	r3, #2
 8002b46:	61bb      	str	r3, [r7, #24]
 8002b48:	e007      	b.n	8002b5a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	781a      	ldrb	r2, [r3, #0]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	3301      	adds	r3, #1
 8002b58:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b5e:	b29b      	uxth	r3, r3
 8002b60:	3b01      	subs	r3, #1
 8002b62:	b29a      	uxth	r2, r3
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d1cf      	bne.n	8002b12 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	9300      	str	r3, [sp, #0]
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	2140      	movs	r1, #64	; 0x40
 8002b7c:	68f8      	ldr	r0, [r7, #12]
 8002b7e:	f000 fae4 	bl	800314a <UART_WaitOnFlagUntilTimeout>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d001      	beq.n	8002b8c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002b88:	2303      	movs	r3, #3
 8002b8a:	e006      	b.n	8002b9a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2220      	movs	r2, #32
 8002b90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002b94:	2300      	movs	r3, #0
 8002b96:	e000      	b.n	8002b9a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002b98:	2302      	movs	r3, #2
  }
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3720      	adds	r7, #32
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}

08002ba2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002ba2:	b580      	push	{r7, lr}
 8002ba4:	b084      	sub	sp, #16
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	60f8      	str	r0, [r7, #12]
 8002baa:	60b9      	str	r1, [r7, #8]
 8002bac:	4613      	mov	r3, r2
 8002bae:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	2b20      	cmp	r3, #32
 8002bba:	d112      	bne.n	8002be2 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d002      	beq.n	8002bc8 <HAL_UART_Receive_IT+0x26>
 8002bc2:	88fb      	ldrh	r3, [r7, #6]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d101      	bne.n	8002bcc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e00b      	b.n	8002be4 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002bd2:	88fb      	ldrh	r3, [r7, #6]
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	68b9      	ldr	r1, [r7, #8]
 8002bd8:	68f8      	ldr	r0, [r7, #12]
 8002bda:	f000 fb24 	bl	8003226 <UART_Start_Receive_IT>
 8002bde:	4603      	mov	r3, r0
 8002be0:	e000      	b.n	8002be4 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002be2:	2302      	movs	r3, #2
  }
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3710      	adds	r7, #16
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}

08002bec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b0ba      	sub	sp, #232	; 0xe8
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	695b      	ldr	r3, [r3, #20]
 8002c0e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002c12:	2300      	movs	r3, #0
 8002c14:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002c1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c22:	f003 030f 	and.w	r3, r3, #15
 8002c26:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002c2a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d10f      	bne.n	8002c52 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002c32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c36:	f003 0320 	and.w	r3, r3, #32
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d009      	beq.n	8002c52 <HAL_UART_IRQHandler+0x66>
 8002c3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c42:	f003 0320 	and.w	r3, r3, #32
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d003      	beq.n	8002c52 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f000 fc01 	bl	8003452 <UART_Receive_IT>
      return;
 8002c50:	e25b      	b.n	800310a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002c52:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	f000 80de 	beq.w	8002e18 <HAL_UART_IRQHandler+0x22c>
 8002c5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c60:	f003 0301 	and.w	r3, r3, #1
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d106      	bne.n	8002c76 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002c68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c6c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	f000 80d1 	beq.w	8002e18 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002c76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c7a:	f003 0301 	and.w	r3, r3, #1
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d00b      	beq.n	8002c9a <HAL_UART_IRQHandler+0xae>
 8002c82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d005      	beq.n	8002c9a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c92:	f043 0201 	orr.w	r2, r3, #1
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002c9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c9e:	f003 0304 	and.w	r3, r3, #4
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d00b      	beq.n	8002cbe <HAL_UART_IRQHandler+0xd2>
 8002ca6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002caa:	f003 0301 	and.w	r3, r3, #1
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d005      	beq.n	8002cbe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cb6:	f043 0202 	orr.w	r2, r3, #2
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002cbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cc2:	f003 0302 	and.w	r3, r3, #2
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d00b      	beq.n	8002ce2 <HAL_UART_IRQHandler+0xf6>
 8002cca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002cce:	f003 0301 	and.w	r3, r3, #1
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d005      	beq.n	8002ce2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cda:	f043 0204 	orr.w	r2, r3, #4
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002ce2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ce6:	f003 0308 	and.w	r3, r3, #8
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d011      	beq.n	8002d12 <HAL_UART_IRQHandler+0x126>
 8002cee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002cf2:	f003 0320 	and.w	r3, r3, #32
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d105      	bne.n	8002d06 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002cfa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002cfe:	f003 0301 	and.w	r3, r3, #1
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d005      	beq.n	8002d12 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d0a:	f043 0208 	orr.w	r2, r3, #8
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	f000 81f2 	beq.w	8003100 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d20:	f003 0320 	and.w	r3, r3, #32
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d008      	beq.n	8002d3a <HAL_UART_IRQHandler+0x14e>
 8002d28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d2c:	f003 0320 	and.w	r3, r3, #32
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d002      	beq.n	8002d3a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f000 fb8c 	bl	8003452 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	695b      	ldr	r3, [r3, #20]
 8002d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d44:	2b40      	cmp	r3, #64	; 0x40
 8002d46:	bf0c      	ite	eq
 8002d48:	2301      	moveq	r3, #1
 8002d4a:	2300      	movne	r3, #0
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d56:	f003 0308 	and.w	r3, r3, #8
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d103      	bne.n	8002d66 <HAL_UART_IRQHandler+0x17a>
 8002d5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d04f      	beq.n	8002e06 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f000 fa96 	bl	8003298 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	695b      	ldr	r3, [r3, #20]
 8002d72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d76:	2b40      	cmp	r3, #64	; 0x40
 8002d78:	d141      	bne.n	8002dfe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	3314      	adds	r3, #20
 8002d80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d84:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002d88:	e853 3f00 	ldrex	r3, [r3]
 8002d8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002d90:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002d94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	3314      	adds	r3, #20
 8002da2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002da6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002daa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002db2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002db6:	e841 2300 	strex	r3, r2, [r1]
 8002dba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002dbe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d1d9      	bne.n	8002d7a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d013      	beq.n	8002df6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dd2:	4a7e      	ldr	r2, [pc, #504]	; (8002fcc <HAL_UART_IRQHandler+0x3e0>)
 8002dd4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f7fe fdca 	bl	8001974 <HAL_DMA_Abort_IT>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d016      	beq.n	8002e14 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002df0:	4610      	mov	r0, r2
 8002df2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002df4:	e00e      	b.n	8002e14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f000 f993 	bl	8003122 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dfc:	e00a      	b.n	8002e14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f000 f98f 	bl	8003122 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e04:	e006      	b.n	8002e14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f000 f98b 	bl	8003122 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8002e12:	e175      	b.n	8003100 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e14:	bf00      	nop
    return;
 8002e16:	e173      	b.n	8003100 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	f040 814f 	bne.w	80030c0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002e22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e26:	f003 0310 	and.w	r3, r3, #16
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	f000 8148 	beq.w	80030c0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002e30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e34:	f003 0310 	and.w	r3, r3, #16
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	f000 8141 	beq.w	80030c0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002e3e:	2300      	movs	r3, #0
 8002e40:	60bb      	str	r3, [r7, #8]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	60bb      	str	r3, [r7, #8]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	60bb      	str	r3, [r7, #8]
 8002e52:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	695b      	ldr	r3, [r3, #20]
 8002e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e5e:	2b40      	cmp	r3, #64	; 0x40
 8002e60:	f040 80b6 	bne.w	8002fd0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002e70:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	f000 8145 	beq.w	8003104 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002e7e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002e82:	429a      	cmp	r2, r3
 8002e84:	f080 813e 	bcs.w	8003104 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002e8e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e94:	699b      	ldr	r3, [r3, #24]
 8002e96:	2b20      	cmp	r3, #32
 8002e98:	f000 8088 	beq.w	8002fac <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	330c      	adds	r3, #12
 8002ea2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ea6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002eaa:	e853 3f00 	ldrex	r3, [r3]
 8002eae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002eb2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002eb6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002eba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	330c      	adds	r3, #12
 8002ec4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002ec8:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002ecc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ed0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002ed4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002ed8:	e841 2300 	strex	r3, r2, [r1]
 8002edc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002ee0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d1d9      	bne.n	8002e9c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	3314      	adds	r3, #20
 8002eee:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ef0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ef2:	e853 3f00 	ldrex	r3, [r3]
 8002ef6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002ef8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002efa:	f023 0301 	bic.w	r3, r3, #1
 8002efe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	3314      	adds	r3, #20
 8002f08:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002f0c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002f10:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f12:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002f14:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002f18:	e841 2300 	strex	r3, r2, [r1]
 8002f1c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002f1e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d1e1      	bne.n	8002ee8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	3314      	adds	r3, #20
 8002f2a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f2c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f2e:	e853 3f00 	ldrex	r3, [r3]
 8002f32:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002f34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f3a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	3314      	adds	r3, #20
 8002f44:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002f48:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002f4a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f4c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002f4e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002f50:	e841 2300 	strex	r3, r2, [r1]
 8002f54:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002f56:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d1e3      	bne.n	8002f24 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2220      	movs	r2, #32
 8002f60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	330c      	adds	r3, #12
 8002f70:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f74:	e853 3f00 	ldrex	r3, [r3]
 8002f78:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002f7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f7c:	f023 0310 	bic.w	r3, r3, #16
 8002f80:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	330c      	adds	r3, #12
 8002f8a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002f8e:	65ba      	str	r2, [r7, #88]	; 0x58
 8002f90:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f92:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002f94:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002f96:	e841 2300 	strex	r3, r2, [r1]
 8002f9a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002f9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d1e3      	bne.n	8002f6a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f7fe fca7 	bl	80018fa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2202      	movs	r2, #2
 8002fb0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	b29b      	uxth	r3, r3
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f000 f8b6 	bl	8003134 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002fc8:	e09c      	b.n	8003104 <HAL_UART_IRQHandler+0x518>
 8002fca:	bf00      	nop
 8002fcc:	0800335d 	.word	0x0800335d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	f000 808e 	beq.w	8003108 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002fec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	f000 8089 	beq.w	8003108 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	330c      	adds	r3, #12
 8002ffc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003000:	e853 3f00 	ldrex	r3, [r3]
 8003004:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003008:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800300c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	330c      	adds	r3, #12
 8003016:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800301a:	647a      	str	r2, [r7, #68]	; 0x44
 800301c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800301e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003020:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003022:	e841 2300 	strex	r3, r2, [r1]
 8003026:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003028:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800302a:	2b00      	cmp	r3, #0
 800302c:	d1e3      	bne.n	8002ff6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	3314      	adds	r3, #20
 8003034:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003038:	e853 3f00 	ldrex	r3, [r3]
 800303c:	623b      	str	r3, [r7, #32]
   return(result);
 800303e:	6a3b      	ldr	r3, [r7, #32]
 8003040:	f023 0301 	bic.w	r3, r3, #1
 8003044:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	3314      	adds	r3, #20
 800304e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003052:	633a      	str	r2, [r7, #48]	; 0x30
 8003054:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003056:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003058:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800305a:	e841 2300 	strex	r3, r2, [r1]
 800305e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003062:	2b00      	cmp	r3, #0
 8003064:	d1e3      	bne.n	800302e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2220      	movs	r2, #32
 800306a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2200      	movs	r2, #0
 8003072:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	330c      	adds	r3, #12
 800307a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	e853 3f00 	ldrex	r3, [r3]
 8003082:	60fb      	str	r3, [r7, #12]
   return(result);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f023 0310 	bic.w	r3, r3, #16
 800308a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	330c      	adds	r3, #12
 8003094:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003098:	61fa      	str	r2, [r7, #28]
 800309a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800309c:	69b9      	ldr	r1, [r7, #24]
 800309e:	69fa      	ldr	r2, [r7, #28]
 80030a0:	e841 2300 	strex	r3, r2, [r1]
 80030a4:	617b      	str	r3, [r7, #20]
   return(result);
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d1e3      	bne.n	8003074 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2202      	movs	r2, #2
 80030b0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80030b2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80030b6:	4619      	mov	r1, r3
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f000 f83b 	bl	8003134 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80030be:	e023      	b.n	8003108 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80030c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d009      	beq.n	80030e0 <HAL_UART_IRQHandler+0x4f4>
 80030cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d003      	beq.n	80030e0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f000 f953 	bl	8003384 <UART_Transmit_IT>
    return;
 80030de:	e014      	b.n	800310a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80030e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d00e      	beq.n	800310a <HAL_UART_IRQHandler+0x51e>
 80030ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d008      	beq.n	800310a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	f000 f992 	bl	8003422 <UART_EndTransmit_IT>
    return;
 80030fe:	e004      	b.n	800310a <HAL_UART_IRQHandler+0x51e>
    return;
 8003100:	bf00      	nop
 8003102:	e002      	b.n	800310a <HAL_UART_IRQHandler+0x51e>
      return;
 8003104:	bf00      	nop
 8003106:	e000      	b.n	800310a <HAL_UART_IRQHandler+0x51e>
      return;
 8003108:	bf00      	nop
  }
}
 800310a:	37e8      	adds	r7, #232	; 0xe8
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}

08003110 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003110:	b480      	push	{r7}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003118:	bf00      	nop
 800311a:	370c      	adds	r7, #12
 800311c:	46bd      	mov	sp, r7
 800311e:	bc80      	pop	{r7}
 8003120:	4770      	bx	lr

08003122 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003122:	b480      	push	{r7}
 8003124:	b083      	sub	sp, #12
 8003126:	af00      	add	r7, sp, #0
 8003128:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800312a:	bf00      	nop
 800312c:	370c      	adds	r7, #12
 800312e:	46bd      	mov	sp, r7
 8003130:	bc80      	pop	{r7}
 8003132:	4770      	bx	lr

08003134 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003134:	b480      	push	{r7}
 8003136:	b083      	sub	sp, #12
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	460b      	mov	r3, r1
 800313e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003140:	bf00      	nop
 8003142:	370c      	adds	r7, #12
 8003144:	46bd      	mov	sp, r7
 8003146:	bc80      	pop	{r7}
 8003148:	4770      	bx	lr

0800314a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800314a:	b580      	push	{r7, lr}
 800314c:	b090      	sub	sp, #64	; 0x40
 800314e:	af00      	add	r7, sp, #0
 8003150:	60f8      	str	r0, [r7, #12]
 8003152:	60b9      	str	r1, [r7, #8]
 8003154:	603b      	str	r3, [r7, #0]
 8003156:	4613      	mov	r3, r2
 8003158:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800315a:	e050      	b.n	80031fe <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800315c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800315e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003162:	d04c      	beq.n	80031fe <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003164:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003166:	2b00      	cmp	r3, #0
 8003168:	d007      	beq.n	800317a <UART_WaitOnFlagUntilTimeout+0x30>
 800316a:	f7fe fa71 	bl	8001650 <HAL_GetTick>
 800316e:	4602      	mov	r2, r0
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003176:	429a      	cmp	r2, r3
 8003178:	d241      	bcs.n	80031fe <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	330c      	adds	r3, #12
 8003180:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003184:	e853 3f00 	ldrex	r3, [r3]
 8003188:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800318a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003190:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	330c      	adds	r3, #12
 8003198:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800319a:	637a      	str	r2, [r7, #52]	; 0x34
 800319c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800319e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80031a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80031a2:	e841 2300 	strex	r3, r2, [r1]
 80031a6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80031a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d1e5      	bne.n	800317a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	3314      	adds	r3, #20
 80031b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	e853 3f00 	ldrex	r3, [r3]
 80031bc:	613b      	str	r3, [r7, #16]
   return(result);
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	f023 0301 	bic.w	r3, r3, #1
 80031c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	3314      	adds	r3, #20
 80031cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80031ce:	623a      	str	r2, [r7, #32]
 80031d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031d2:	69f9      	ldr	r1, [r7, #28]
 80031d4:	6a3a      	ldr	r2, [r7, #32]
 80031d6:	e841 2300 	strex	r3, r2, [r1]
 80031da:	61bb      	str	r3, [r7, #24]
   return(result);
 80031dc:	69bb      	ldr	r3, [r7, #24]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d1e5      	bne.n	80031ae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2220      	movs	r2, #32
 80031e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2220      	movs	r2, #32
 80031ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2200      	movs	r2, #0
 80031f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e00f      	b.n	800321e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	4013      	ands	r3, r2
 8003208:	68ba      	ldr	r2, [r7, #8]
 800320a:	429a      	cmp	r2, r3
 800320c:	bf0c      	ite	eq
 800320e:	2301      	moveq	r3, #1
 8003210:	2300      	movne	r3, #0
 8003212:	b2db      	uxtb	r3, r3
 8003214:	461a      	mov	r2, r3
 8003216:	79fb      	ldrb	r3, [r7, #7]
 8003218:	429a      	cmp	r2, r3
 800321a:	d09f      	beq.n	800315c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800321c:	2300      	movs	r3, #0
}
 800321e:	4618      	mov	r0, r3
 8003220:	3740      	adds	r7, #64	; 0x40
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}

08003226 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003226:	b480      	push	{r7}
 8003228:	b085      	sub	sp, #20
 800322a:	af00      	add	r7, sp, #0
 800322c:	60f8      	str	r0, [r7, #12]
 800322e:	60b9      	str	r1, [r7, #8]
 8003230:	4613      	mov	r3, r2
 8003232:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	68ba      	ldr	r2, [r7, #8]
 8003238:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	88fa      	ldrh	r2, [r7, #6]
 800323e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	88fa      	ldrh	r2, [r7, #6]
 8003244:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2200      	movs	r2, #0
 800324a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2222      	movs	r2, #34	; 0x22
 8003250:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	691b      	ldr	r3, [r3, #16]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d007      	beq.n	800326c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	68da      	ldr	r2, [r3, #12]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800326a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	695a      	ldr	r2, [r3, #20]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f042 0201 	orr.w	r2, r2, #1
 800327a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	68da      	ldr	r2, [r3, #12]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f042 0220 	orr.w	r2, r2, #32
 800328a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800328c:	2300      	movs	r3, #0
}
 800328e:	4618      	mov	r0, r3
 8003290:	3714      	adds	r7, #20
 8003292:	46bd      	mov	sp, r7
 8003294:	bc80      	pop	{r7}
 8003296:	4770      	bx	lr

08003298 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003298:	b480      	push	{r7}
 800329a:	b095      	sub	sp, #84	; 0x54
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	330c      	adds	r3, #12
 80032a6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032aa:	e853 3f00 	ldrex	r3, [r3]
 80032ae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80032b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032b2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80032b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	330c      	adds	r3, #12
 80032be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80032c0:	643a      	str	r2, [r7, #64]	; 0x40
 80032c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032c4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80032c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80032c8:	e841 2300 	strex	r3, r2, [r1]
 80032cc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80032ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d1e5      	bne.n	80032a0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	3314      	adds	r3, #20
 80032da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032dc:	6a3b      	ldr	r3, [r7, #32]
 80032de:	e853 3f00 	ldrex	r3, [r3]
 80032e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	f023 0301 	bic.w	r3, r3, #1
 80032ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	3314      	adds	r3, #20
 80032f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80032f4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80032f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80032fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032fc:	e841 2300 	strex	r3, r2, [r1]
 8003300:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003304:	2b00      	cmp	r3, #0
 8003306:	d1e5      	bne.n	80032d4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330c:	2b01      	cmp	r3, #1
 800330e:	d119      	bne.n	8003344 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	330c      	adds	r3, #12
 8003316:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	e853 3f00 	ldrex	r3, [r3]
 800331e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	f023 0310 	bic.w	r3, r3, #16
 8003326:	647b      	str	r3, [r7, #68]	; 0x44
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	330c      	adds	r3, #12
 800332e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003330:	61ba      	str	r2, [r7, #24]
 8003332:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003334:	6979      	ldr	r1, [r7, #20]
 8003336:	69ba      	ldr	r2, [r7, #24]
 8003338:	e841 2300 	strex	r3, r2, [r1]
 800333c:	613b      	str	r3, [r7, #16]
   return(result);
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d1e5      	bne.n	8003310 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2220      	movs	r2, #32
 8003348:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003352:	bf00      	nop
 8003354:	3754      	adds	r7, #84	; 0x54
 8003356:	46bd      	mov	sp, r7
 8003358:	bc80      	pop	{r7}
 800335a:	4770      	bx	lr

0800335c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b084      	sub	sp, #16
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003368:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2200      	movs	r2, #0
 800336e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2200      	movs	r2, #0
 8003374:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003376:	68f8      	ldr	r0, [r7, #12]
 8003378:	f7ff fed3 	bl	8003122 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800337c:	bf00      	nop
 800337e:	3710      	adds	r7, #16
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}

08003384 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003384:	b480      	push	{r7}
 8003386:	b085      	sub	sp, #20
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003392:	b2db      	uxtb	r3, r3
 8003394:	2b21      	cmp	r3, #33	; 0x21
 8003396:	d13e      	bne.n	8003416 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033a0:	d114      	bne.n	80033cc <UART_Transmit_IT+0x48>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	691b      	ldr	r3, [r3, #16]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d110      	bne.n	80033cc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6a1b      	ldr	r3, [r3, #32]
 80033ae:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	881b      	ldrh	r3, [r3, #0]
 80033b4:	461a      	mov	r2, r3
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80033be:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6a1b      	ldr	r3, [r3, #32]
 80033c4:	1c9a      	adds	r2, r3, #2
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	621a      	str	r2, [r3, #32]
 80033ca:	e008      	b.n	80033de <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6a1b      	ldr	r3, [r3, #32]
 80033d0:	1c59      	adds	r1, r3, #1
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	6211      	str	r1, [r2, #32]
 80033d6:	781a      	ldrb	r2, [r3, #0]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80033e2:	b29b      	uxth	r3, r3
 80033e4:	3b01      	subs	r3, #1
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	687a      	ldr	r2, [r7, #4]
 80033ea:	4619      	mov	r1, r3
 80033ec:	84d1      	strh	r1, [r2, #38]	; 0x26
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d10f      	bne.n	8003412 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	68da      	ldr	r2, [r3, #12]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003400:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	68da      	ldr	r2, [r3, #12]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003410:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003412:	2300      	movs	r3, #0
 8003414:	e000      	b.n	8003418 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003416:	2302      	movs	r3, #2
  }
}
 8003418:	4618      	mov	r0, r3
 800341a:	3714      	adds	r7, #20
 800341c:	46bd      	mov	sp, r7
 800341e:	bc80      	pop	{r7}
 8003420:	4770      	bx	lr

08003422 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003422:	b580      	push	{r7, lr}
 8003424:	b082      	sub	sp, #8
 8003426:	af00      	add	r7, sp, #0
 8003428:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	68da      	ldr	r2, [r3, #12]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003438:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2220      	movs	r2, #32
 800343e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f7ff fe64 	bl	8003110 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003448:	2300      	movs	r3, #0
}
 800344a:	4618      	mov	r0, r3
 800344c:	3708      	adds	r7, #8
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}

08003452 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003452:	b580      	push	{r7, lr}
 8003454:	b08c      	sub	sp, #48	; 0x30
 8003456:	af00      	add	r7, sp, #0
 8003458:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003460:	b2db      	uxtb	r3, r3
 8003462:	2b22      	cmp	r3, #34	; 0x22
 8003464:	f040 80ae 	bne.w	80035c4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003470:	d117      	bne.n	80034a2 <UART_Receive_IT+0x50>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	691b      	ldr	r3, [r3, #16]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d113      	bne.n	80034a2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800347a:	2300      	movs	r3, #0
 800347c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003482:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	b29b      	uxth	r3, r3
 800348c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003490:	b29a      	uxth	r2, r3
 8003492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003494:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800349a:	1c9a      	adds	r2, r3, #2
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	629a      	str	r2, [r3, #40]	; 0x28
 80034a0:	e026      	b.n	80034f0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034a6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80034a8:	2300      	movs	r3, #0
 80034aa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034b4:	d007      	beq.n	80034c6 <UART_Receive_IT+0x74>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d10a      	bne.n	80034d4 <UART_Receive_IT+0x82>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	691b      	ldr	r3, [r3, #16]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d106      	bne.n	80034d4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	b2da      	uxtb	r2, r3
 80034ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034d0:	701a      	strb	r2, [r3, #0]
 80034d2:	e008      	b.n	80034e6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034e0:	b2da      	uxtb	r2, r3
 80034e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034e4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ea:	1c5a      	adds	r2, r3, #1
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	3b01      	subs	r3, #1
 80034f8:	b29b      	uxth	r3, r3
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	4619      	mov	r1, r3
 80034fe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003500:	2b00      	cmp	r3, #0
 8003502:	d15d      	bne.n	80035c0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	68da      	ldr	r2, [r3, #12]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f022 0220 	bic.w	r2, r2, #32
 8003512:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	68da      	ldr	r2, [r3, #12]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003522:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	695a      	ldr	r2, [r3, #20]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f022 0201 	bic.w	r2, r2, #1
 8003532:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2220      	movs	r2, #32
 8003538:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2200      	movs	r2, #0
 8003540:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003546:	2b01      	cmp	r3, #1
 8003548:	d135      	bne.n	80035b6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	330c      	adds	r3, #12
 8003556:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	e853 3f00 	ldrex	r3, [r3]
 800355e:	613b      	str	r3, [r7, #16]
   return(result);
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	f023 0310 	bic.w	r3, r3, #16
 8003566:	627b      	str	r3, [r7, #36]	; 0x24
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	330c      	adds	r3, #12
 800356e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003570:	623a      	str	r2, [r7, #32]
 8003572:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003574:	69f9      	ldr	r1, [r7, #28]
 8003576:	6a3a      	ldr	r2, [r7, #32]
 8003578:	e841 2300 	strex	r3, r2, [r1]
 800357c:	61bb      	str	r3, [r7, #24]
   return(result);
 800357e:	69bb      	ldr	r3, [r7, #24]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d1e5      	bne.n	8003550 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0310 	and.w	r3, r3, #16
 800358e:	2b10      	cmp	r3, #16
 8003590:	d10a      	bne.n	80035a8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003592:	2300      	movs	r3, #0
 8003594:	60fb      	str	r3, [r7, #12]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	60fb      	str	r3, [r7, #12]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	60fb      	str	r3, [r7, #12]
 80035a6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80035ac:	4619      	mov	r1, r3
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f7ff fdc0 	bl	8003134 <HAL_UARTEx_RxEventCallback>
 80035b4:	e002      	b.n	80035bc <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f7fd fcaa 	bl	8000f10 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80035bc:	2300      	movs	r3, #0
 80035be:	e002      	b.n	80035c6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80035c0:	2300      	movs	r3, #0
 80035c2:	e000      	b.n	80035c6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80035c4:	2302      	movs	r3, #2
  }
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3730      	adds	r7, #48	; 0x30
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
	...

080035d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b084      	sub	sp, #16
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	691b      	ldr	r3, [r3, #16]
 80035de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	68da      	ldr	r2, [r3, #12]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	430a      	orrs	r2, r1
 80035ec:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	689a      	ldr	r2, [r3, #8]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	691b      	ldr	r3, [r3, #16]
 80035f6:	431a      	orrs	r2, r3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	695b      	ldr	r3, [r3, #20]
 80035fc:	431a      	orrs	r2, r3
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	69db      	ldr	r3, [r3, #28]
 8003602:	4313      	orrs	r3, r2
 8003604:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003610:	f023 030c 	bic.w	r3, r3, #12
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	6812      	ldr	r2, [r2, #0]
 8003618:	68b9      	ldr	r1, [r7, #8]
 800361a:	430b      	orrs	r3, r1
 800361c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	695b      	ldr	r3, [r3, #20]
 8003624:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	699a      	ldr	r2, [r3, #24]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	430a      	orrs	r2, r1
 8003632:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a55      	ldr	r2, [pc, #340]	; (8003790 <UART_SetConfig+0x1c0>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d103      	bne.n	8003646 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800363e:	f7ff f969 	bl	8002914 <HAL_RCC_GetPCLK2Freq>
 8003642:	60f8      	str	r0, [r7, #12]
 8003644:	e002      	b.n	800364c <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003646:	f7ff f951 	bl	80028ec <HAL_RCC_GetPCLK1Freq>
 800364a:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	69db      	ldr	r3, [r3, #28]
 8003650:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003654:	d14c      	bne.n	80036f0 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003656:	68fa      	ldr	r2, [r7, #12]
 8003658:	4613      	mov	r3, r2
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	4413      	add	r3, r2
 800365e:	009a      	lsls	r2, r3, #2
 8003660:	441a      	add	r2, r3
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	005b      	lsls	r3, r3, #1
 8003668:	fbb2 f3f3 	udiv	r3, r2, r3
 800366c:	4a49      	ldr	r2, [pc, #292]	; (8003794 <UART_SetConfig+0x1c4>)
 800366e:	fba2 2303 	umull	r2, r3, r2, r3
 8003672:	095b      	lsrs	r3, r3, #5
 8003674:	0119      	lsls	r1, r3, #4
 8003676:	68fa      	ldr	r2, [r7, #12]
 8003678:	4613      	mov	r3, r2
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	4413      	add	r3, r2
 800367e:	009a      	lsls	r2, r3, #2
 8003680:	441a      	add	r2, r3
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	005b      	lsls	r3, r3, #1
 8003688:	fbb2 f2f3 	udiv	r2, r2, r3
 800368c:	4b41      	ldr	r3, [pc, #260]	; (8003794 <UART_SetConfig+0x1c4>)
 800368e:	fba3 0302 	umull	r0, r3, r3, r2
 8003692:	095b      	lsrs	r3, r3, #5
 8003694:	2064      	movs	r0, #100	; 0x64
 8003696:	fb00 f303 	mul.w	r3, r0, r3
 800369a:	1ad3      	subs	r3, r2, r3
 800369c:	00db      	lsls	r3, r3, #3
 800369e:	3332      	adds	r3, #50	; 0x32
 80036a0:	4a3c      	ldr	r2, [pc, #240]	; (8003794 <UART_SetConfig+0x1c4>)
 80036a2:	fba2 2303 	umull	r2, r3, r2, r3
 80036a6:	095b      	lsrs	r3, r3, #5
 80036a8:	005b      	lsls	r3, r3, #1
 80036aa:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80036ae:	4419      	add	r1, r3
 80036b0:	68fa      	ldr	r2, [r7, #12]
 80036b2:	4613      	mov	r3, r2
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	4413      	add	r3, r2
 80036b8:	009a      	lsls	r2, r3, #2
 80036ba:	441a      	add	r2, r3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	005b      	lsls	r3, r3, #1
 80036c2:	fbb2 f2f3 	udiv	r2, r2, r3
 80036c6:	4b33      	ldr	r3, [pc, #204]	; (8003794 <UART_SetConfig+0x1c4>)
 80036c8:	fba3 0302 	umull	r0, r3, r3, r2
 80036cc:	095b      	lsrs	r3, r3, #5
 80036ce:	2064      	movs	r0, #100	; 0x64
 80036d0:	fb00 f303 	mul.w	r3, r0, r3
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	00db      	lsls	r3, r3, #3
 80036d8:	3332      	adds	r3, #50	; 0x32
 80036da:	4a2e      	ldr	r2, [pc, #184]	; (8003794 <UART_SetConfig+0x1c4>)
 80036dc:	fba2 2303 	umull	r2, r3, r2, r3
 80036e0:	095b      	lsrs	r3, r3, #5
 80036e2:	f003 0207 	and.w	r2, r3, #7
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	440a      	add	r2, r1
 80036ec:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80036ee:	e04a      	b.n	8003786 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80036f0:	68fa      	ldr	r2, [r7, #12]
 80036f2:	4613      	mov	r3, r2
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	4413      	add	r3, r2
 80036f8:	009a      	lsls	r2, r3, #2
 80036fa:	441a      	add	r2, r3
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	fbb2 f3f3 	udiv	r3, r2, r3
 8003706:	4a23      	ldr	r2, [pc, #140]	; (8003794 <UART_SetConfig+0x1c4>)
 8003708:	fba2 2303 	umull	r2, r3, r2, r3
 800370c:	095b      	lsrs	r3, r3, #5
 800370e:	0119      	lsls	r1, r3, #4
 8003710:	68fa      	ldr	r2, [r7, #12]
 8003712:	4613      	mov	r3, r2
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	4413      	add	r3, r2
 8003718:	009a      	lsls	r2, r3, #2
 800371a:	441a      	add	r2, r3
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	009b      	lsls	r3, r3, #2
 8003722:	fbb2 f2f3 	udiv	r2, r2, r3
 8003726:	4b1b      	ldr	r3, [pc, #108]	; (8003794 <UART_SetConfig+0x1c4>)
 8003728:	fba3 0302 	umull	r0, r3, r3, r2
 800372c:	095b      	lsrs	r3, r3, #5
 800372e:	2064      	movs	r0, #100	; 0x64
 8003730:	fb00 f303 	mul.w	r3, r0, r3
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	011b      	lsls	r3, r3, #4
 8003738:	3332      	adds	r3, #50	; 0x32
 800373a:	4a16      	ldr	r2, [pc, #88]	; (8003794 <UART_SetConfig+0x1c4>)
 800373c:	fba2 2303 	umull	r2, r3, r2, r3
 8003740:	095b      	lsrs	r3, r3, #5
 8003742:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003746:	4419      	add	r1, r3
 8003748:	68fa      	ldr	r2, [r7, #12]
 800374a:	4613      	mov	r3, r2
 800374c:	009b      	lsls	r3, r3, #2
 800374e:	4413      	add	r3, r2
 8003750:	009a      	lsls	r2, r3, #2
 8003752:	441a      	add	r2, r3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	009b      	lsls	r3, r3, #2
 800375a:	fbb2 f2f3 	udiv	r2, r2, r3
 800375e:	4b0d      	ldr	r3, [pc, #52]	; (8003794 <UART_SetConfig+0x1c4>)
 8003760:	fba3 0302 	umull	r0, r3, r3, r2
 8003764:	095b      	lsrs	r3, r3, #5
 8003766:	2064      	movs	r0, #100	; 0x64
 8003768:	fb00 f303 	mul.w	r3, r0, r3
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	011b      	lsls	r3, r3, #4
 8003770:	3332      	adds	r3, #50	; 0x32
 8003772:	4a08      	ldr	r2, [pc, #32]	; (8003794 <UART_SetConfig+0x1c4>)
 8003774:	fba2 2303 	umull	r2, r3, r2, r3
 8003778:	095b      	lsrs	r3, r3, #5
 800377a:	f003 020f 	and.w	r2, r3, #15
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	440a      	add	r2, r1
 8003784:	609a      	str	r2, [r3, #8]
}
 8003786:	bf00      	nop
 8003788:	3710      	adds	r7, #16
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	40013800 	.word	0x40013800
 8003794:	51eb851f 	.word	0x51eb851f

08003798 <__errno>:
 8003798:	4b01      	ldr	r3, [pc, #4]	; (80037a0 <__errno+0x8>)
 800379a:	6818      	ldr	r0, [r3, #0]
 800379c:	4770      	bx	lr
 800379e:	bf00      	nop
 80037a0:	2000000c 	.word	0x2000000c

080037a4 <__libc_init_array>:
 80037a4:	b570      	push	{r4, r5, r6, lr}
 80037a6:	2600      	movs	r6, #0
 80037a8:	4d0c      	ldr	r5, [pc, #48]	; (80037dc <__libc_init_array+0x38>)
 80037aa:	4c0d      	ldr	r4, [pc, #52]	; (80037e0 <__libc_init_array+0x3c>)
 80037ac:	1b64      	subs	r4, r4, r5
 80037ae:	10a4      	asrs	r4, r4, #2
 80037b0:	42a6      	cmp	r6, r4
 80037b2:	d109      	bne.n	80037c8 <__libc_init_array+0x24>
 80037b4:	f004 fc52 	bl	800805c <_init>
 80037b8:	2600      	movs	r6, #0
 80037ba:	4d0a      	ldr	r5, [pc, #40]	; (80037e4 <__libc_init_array+0x40>)
 80037bc:	4c0a      	ldr	r4, [pc, #40]	; (80037e8 <__libc_init_array+0x44>)
 80037be:	1b64      	subs	r4, r4, r5
 80037c0:	10a4      	asrs	r4, r4, #2
 80037c2:	42a6      	cmp	r6, r4
 80037c4:	d105      	bne.n	80037d2 <__libc_init_array+0x2e>
 80037c6:	bd70      	pop	{r4, r5, r6, pc}
 80037c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80037cc:	4798      	blx	r3
 80037ce:	3601      	adds	r6, #1
 80037d0:	e7ee      	b.n	80037b0 <__libc_init_array+0xc>
 80037d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80037d6:	4798      	blx	r3
 80037d8:	3601      	adds	r6, #1
 80037da:	e7f2      	b.n	80037c2 <__libc_init_array+0x1e>
 80037dc:	080085bc 	.word	0x080085bc
 80037e0:	080085bc 	.word	0x080085bc
 80037e4:	080085bc 	.word	0x080085bc
 80037e8:	080085c0 	.word	0x080085c0

080037ec <memset>:
 80037ec:	4603      	mov	r3, r0
 80037ee:	4402      	add	r2, r0
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d100      	bne.n	80037f6 <memset+0xa>
 80037f4:	4770      	bx	lr
 80037f6:	f803 1b01 	strb.w	r1, [r3], #1
 80037fa:	e7f9      	b.n	80037f0 <memset+0x4>

080037fc <__cvt>:
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003802:	461f      	mov	r7, r3
 8003804:	bfbb      	ittet	lt
 8003806:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800380a:	461f      	movlt	r7, r3
 800380c:	2300      	movge	r3, #0
 800380e:	232d      	movlt	r3, #45	; 0x2d
 8003810:	b088      	sub	sp, #32
 8003812:	4614      	mov	r4, r2
 8003814:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003816:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003818:	7013      	strb	r3, [r2, #0]
 800381a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800381c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8003820:	f023 0820 	bic.w	r8, r3, #32
 8003824:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003828:	d005      	beq.n	8003836 <__cvt+0x3a>
 800382a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800382e:	d100      	bne.n	8003832 <__cvt+0x36>
 8003830:	3501      	adds	r5, #1
 8003832:	2302      	movs	r3, #2
 8003834:	e000      	b.n	8003838 <__cvt+0x3c>
 8003836:	2303      	movs	r3, #3
 8003838:	aa07      	add	r2, sp, #28
 800383a:	9204      	str	r2, [sp, #16]
 800383c:	aa06      	add	r2, sp, #24
 800383e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003842:	e9cd 3500 	strd	r3, r5, [sp]
 8003846:	4622      	mov	r2, r4
 8003848:	463b      	mov	r3, r7
 800384a:	f001 fd85 	bl	8005358 <_dtoa_r>
 800384e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003852:	4606      	mov	r6, r0
 8003854:	d102      	bne.n	800385c <__cvt+0x60>
 8003856:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003858:	07db      	lsls	r3, r3, #31
 800385a:	d522      	bpl.n	80038a2 <__cvt+0xa6>
 800385c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003860:	eb06 0905 	add.w	r9, r6, r5
 8003864:	d110      	bne.n	8003888 <__cvt+0x8c>
 8003866:	7833      	ldrb	r3, [r6, #0]
 8003868:	2b30      	cmp	r3, #48	; 0x30
 800386a:	d10a      	bne.n	8003882 <__cvt+0x86>
 800386c:	2200      	movs	r2, #0
 800386e:	2300      	movs	r3, #0
 8003870:	4620      	mov	r0, r4
 8003872:	4639      	mov	r1, r7
 8003874:	f7fd f8b0 	bl	80009d8 <__aeabi_dcmpeq>
 8003878:	b918      	cbnz	r0, 8003882 <__cvt+0x86>
 800387a:	f1c5 0501 	rsb	r5, r5, #1
 800387e:	f8ca 5000 	str.w	r5, [sl]
 8003882:	f8da 3000 	ldr.w	r3, [sl]
 8003886:	4499      	add	r9, r3
 8003888:	2200      	movs	r2, #0
 800388a:	2300      	movs	r3, #0
 800388c:	4620      	mov	r0, r4
 800388e:	4639      	mov	r1, r7
 8003890:	f7fd f8a2 	bl	80009d8 <__aeabi_dcmpeq>
 8003894:	b108      	cbz	r0, 800389a <__cvt+0x9e>
 8003896:	f8cd 901c 	str.w	r9, [sp, #28]
 800389a:	2230      	movs	r2, #48	; 0x30
 800389c:	9b07      	ldr	r3, [sp, #28]
 800389e:	454b      	cmp	r3, r9
 80038a0:	d307      	bcc.n	80038b2 <__cvt+0xb6>
 80038a2:	4630      	mov	r0, r6
 80038a4:	9b07      	ldr	r3, [sp, #28]
 80038a6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80038a8:	1b9b      	subs	r3, r3, r6
 80038aa:	6013      	str	r3, [r2, #0]
 80038ac:	b008      	add	sp, #32
 80038ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038b2:	1c59      	adds	r1, r3, #1
 80038b4:	9107      	str	r1, [sp, #28]
 80038b6:	701a      	strb	r2, [r3, #0]
 80038b8:	e7f0      	b.n	800389c <__cvt+0xa0>

080038ba <__exponent>:
 80038ba:	4603      	mov	r3, r0
 80038bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80038be:	2900      	cmp	r1, #0
 80038c0:	f803 2b02 	strb.w	r2, [r3], #2
 80038c4:	bfb6      	itet	lt
 80038c6:	222d      	movlt	r2, #45	; 0x2d
 80038c8:	222b      	movge	r2, #43	; 0x2b
 80038ca:	4249      	neglt	r1, r1
 80038cc:	2909      	cmp	r1, #9
 80038ce:	7042      	strb	r2, [r0, #1]
 80038d0:	dd2b      	ble.n	800392a <__exponent+0x70>
 80038d2:	f10d 0407 	add.w	r4, sp, #7
 80038d6:	46a4      	mov	ip, r4
 80038d8:	270a      	movs	r7, #10
 80038da:	fb91 f6f7 	sdiv	r6, r1, r7
 80038de:	460a      	mov	r2, r1
 80038e0:	46a6      	mov	lr, r4
 80038e2:	fb07 1516 	mls	r5, r7, r6, r1
 80038e6:	2a63      	cmp	r2, #99	; 0x63
 80038e8:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80038ec:	4631      	mov	r1, r6
 80038ee:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80038f2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80038f6:	dcf0      	bgt.n	80038da <__exponent+0x20>
 80038f8:	3130      	adds	r1, #48	; 0x30
 80038fa:	f1ae 0502 	sub.w	r5, lr, #2
 80038fe:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003902:	4629      	mov	r1, r5
 8003904:	1c44      	adds	r4, r0, #1
 8003906:	4561      	cmp	r1, ip
 8003908:	d30a      	bcc.n	8003920 <__exponent+0x66>
 800390a:	f10d 0209 	add.w	r2, sp, #9
 800390e:	eba2 020e 	sub.w	r2, r2, lr
 8003912:	4565      	cmp	r5, ip
 8003914:	bf88      	it	hi
 8003916:	2200      	movhi	r2, #0
 8003918:	4413      	add	r3, r2
 800391a:	1a18      	subs	r0, r3, r0
 800391c:	b003      	add	sp, #12
 800391e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003920:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003924:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003928:	e7ed      	b.n	8003906 <__exponent+0x4c>
 800392a:	2330      	movs	r3, #48	; 0x30
 800392c:	3130      	adds	r1, #48	; 0x30
 800392e:	7083      	strb	r3, [r0, #2]
 8003930:	70c1      	strb	r1, [r0, #3]
 8003932:	1d03      	adds	r3, r0, #4
 8003934:	e7f1      	b.n	800391a <__exponent+0x60>
	...

08003938 <_printf_float>:
 8003938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800393c:	b091      	sub	sp, #68	; 0x44
 800393e:	460c      	mov	r4, r1
 8003940:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8003944:	4616      	mov	r6, r2
 8003946:	461f      	mov	r7, r3
 8003948:	4605      	mov	r5, r0
 800394a:	f002 fe59 	bl	8006600 <_localeconv_r>
 800394e:	6803      	ldr	r3, [r0, #0]
 8003950:	4618      	mov	r0, r3
 8003952:	9309      	str	r3, [sp, #36]	; 0x24
 8003954:	f7fc fc14 	bl	8000180 <strlen>
 8003958:	2300      	movs	r3, #0
 800395a:	930e      	str	r3, [sp, #56]	; 0x38
 800395c:	f8d8 3000 	ldr.w	r3, [r8]
 8003960:	900a      	str	r0, [sp, #40]	; 0x28
 8003962:	3307      	adds	r3, #7
 8003964:	f023 0307 	bic.w	r3, r3, #7
 8003968:	f103 0208 	add.w	r2, r3, #8
 800396c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8003970:	f8d4 b000 	ldr.w	fp, [r4]
 8003974:	f8c8 2000 	str.w	r2, [r8]
 8003978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800397c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003980:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8003984:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8003988:	930b      	str	r3, [sp, #44]	; 0x2c
 800398a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800398e:	4640      	mov	r0, r8
 8003990:	4b9c      	ldr	r3, [pc, #624]	; (8003c04 <_printf_float+0x2cc>)
 8003992:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003994:	f7fd f852 	bl	8000a3c <__aeabi_dcmpun>
 8003998:	bb70      	cbnz	r0, 80039f8 <_printf_float+0xc0>
 800399a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800399e:	4640      	mov	r0, r8
 80039a0:	4b98      	ldr	r3, [pc, #608]	; (8003c04 <_printf_float+0x2cc>)
 80039a2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80039a4:	f7fd f82c 	bl	8000a00 <__aeabi_dcmple>
 80039a8:	bb30      	cbnz	r0, 80039f8 <_printf_float+0xc0>
 80039aa:	2200      	movs	r2, #0
 80039ac:	2300      	movs	r3, #0
 80039ae:	4640      	mov	r0, r8
 80039b0:	4651      	mov	r1, sl
 80039b2:	f7fd f81b 	bl	80009ec <__aeabi_dcmplt>
 80039b6:	b110      	cbz	r0, 80039be <_printf_float+0x86>
 80039b8:	232d      	movs	r3, #45	; 0x2d
 80039ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80039be:	4b92      	ldr	r3, [pc, #584]	; (8003c08 <_printf_float+0x2d0>)
 80039c0:	4892      	ldr	r0, [pc, #584]	; (8003c0c <_printf_float+0x2d4>)
 80039c2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80039c6:	bf94      	ite	ls
 80039c8:	4698      	movls	r8, r3
 80039ca:	4680      	movhi	r8, r0
 80039cc:	2303      	movs	r3, #3
 80039ce:	f04f 0a00 	mov.w	sl, #0
 80039d2:	6123      	str	r3, [r4, #16]
 80039d4:	f02b 0304 	bic.w	r3, fp, #4
 80039d8:	6023      	str	r3, [r4, #0]
 80039da:	4633      	mov	r3, r6
 80039dc:	4621      	mov	r1, r4
 80039de:	4628      	mov	r0, r5
 80039e0:	9700      	str	r7, [sp, #0]
 80039e2:	aa0f      	add	r2, sp, #60	; 0x3c
 80039e4:	f000 f9d4 	bl	8003d90 <_printf_common>
 80039e8:	3001      	adds	r0, #1
 80039ea:	f040 8090 	bne.w	8003b0e <_printf_float+0x1d6>
 80039ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80039f2:	b011      	add	sp, #68	; 0x44
 80039f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039f8:	4642      	mov	r2, r8
 80039fa:	4653      	mov	r3, sl
 80039fc:	4640      	mov	r0, r8
 80039fe:	4651      	mov	r1, sl
 8003a00:	f7fd f81c 	bl	8000a3c <__aeabi_dcmpun>
 8003a04:	b148      	cbz	r0, 8003a1a <_printf_float+0xe2>
 8003a06:	f1ba 0f00 	cmp.w	sl, #0
 8003a0a:	bfb8      	it	lt
 8003a0c:	232d      	movlt	r3, #45	; 0x2d
 8003a0e:	4880      	ldr	r0, [pc, #512]	; (8003c10 <_printf_float+0x2d8>)
 8003a10:	bfb8      	it	lt
 8003a12:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003a16:	4b7f      	ldr	r3, [pc, #508]	; (8003c14 <_printf_float+0x2dc>)
 8003a18:	e7d3      	b.n	80039c2 <_printf_float+0x8a>
 8003a1a:	6863      	ldr	r3, [r4, #4]
 8003a1c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8003a20:	1c5a      	adds	r2, r3, #1
 8003a22:	d142      	bne.n	8003aaa <_printf_float+0x172>
 8003a24:	2306      	movs	r3, #6
 8003a26:	6063      	str	r3, [r4, #4]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	9206      	str	r2, [sp, #24]
 8003a2c:	aa0e      	add	r2, sp, #56	; 0x38
 8003a2e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8003a32:	aa0d      	add	r2, sp, #52	; 0x34
 8003a34:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8003a38:	9203      	str	r2, [sp, #12]
 8003a3a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8003a3e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003a42:	6023      	str	r3, [r4, #0]
 8003a44:	6863      	ldr	r3, [r4, #4]
 8003a46:	4642      	mov	r2, r8
 8003a48:	9300      	str	r3, [sp, #0]
 8003a4a:	4628      	mov	r0, r5
 8003a4c:	4653      	mov	r3, sl
 8003a4e:	910b      	str	r1, [sp, #44]	; 0x2c
 8003a50:	f7ff fed4 	bl	80037fc <__cvt>
 8003a54:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003a56:	4680      	mov	r8, r0
 8003a58:	2947      	cmp	r1, #71	; 0x47
 8003a5a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003a5c:	d108      	bne.n	8003a70 <_printf_float+0x138>
 8003a5e:	1cc8      	adds	r0, r1, #3
 8003a60:	db02      	blt.n	8003a68 <_printf_float+0x130>
 8003a62:	6863      	ldr	r3, [r4, #4]
 8003a64:	4299      	cmp	r1, r3
 8003a66:	dd40      	ble.n	8003aea <_printf_float+0x1b2>
 8003a68:	f1a9 0902 	sub.w	r9, r9, #2
 8003a6c:	fa5f f989 	uxtb.w	r9, r9
 8003a70:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003a74:	d81f      	bhi.n	8003ab6 <_printf_float+0x17e>
 8003a76:	464a      	mov	r2, r9
 8003a78:	3901      	subs	r1, #1
 8003a7a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003a7e:	910d      	str	r1, [sp, #52]	; 0x34
 8003a80:	f7ff ff1b 	bl	80038ba <__exponent>
 8003a84:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003a86:	4682      	mov	sl, r0
 8003a88:	1813      	adds	r3, r2, r0
 8003a8a:	2a01      	cmp	r2, #1
 8003a8c:	6123      	str	r3, [r4, #16]
 8003a8e:	dc02      	bgt.n	8003a96 <_printf_float+0x15e>
 8003a90:	6822      	ldr	r2, [r4, #0]
 8003a92:	07d2      	lsls	r2, r2, #31
 8003a94:	d501      	bpl.n	8003a9a <_printf_float+0x162>
 8003a96:	3301      	adds	r3, #1
 8003a98:	6123      	str	r3, [r4, #16]
 8003a9a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d09b      	beq.n	80039da <_printf_float+0xa2>
 8003aa2:	232d      	movs	r3, #45	; 0x2d
 8003aa4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003aa8:	e797      	b.n	80039da <_printf_float+0xa2>
 8003aaa:	2947      	cmp	r1, #71	; 0x47
 8003aac:	d1bc      	bne.n	8003a28 <_printf_float+0xf0>
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d1ba      	bne.n	8003a28 <_printf_float+0xf0>
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e7b7      	b.n	8003a26 <_printf_float+0xee>
 8003ab6:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8003aba:	d118      	bne.n	8003aee <_printf_float+0x1b6>
 8003abc:	2900      	cmp	r1, #0
 8003abe:	6863      	ldr	r3, [r4, #4]
 8003ac0:	dd0b      	ble.n	8003ada <_printf_float+0x1a2>
 8003ac2:	6121      	str	r1, [r4, #16]
 8003ac4:	b913      	cbnz	r3, 8003acc <_printf_float+0x194>
 8003ac6:	6822      	ldr	r2, [r4, #0]
 8003ac8:	07d0      	lsls	r0, r2, #31
 8003aca:	d502      	bpl.n	8003ad2 <_printf_float+0x19a>
 8003acc:	3301      	adds	r3, #1
 8003ace:	440b      	add	r3, r1
 8003ad0:	6123      	str	r3, [r4, #16]
 8003ad2:	f04f 0a00 	mov.w	sl, #0
 8003ad6:	65a1      	str	r1, [r4, #88]	; 0x58
 8003ad8:	e7df      	b.n	8003a9a <_printf_float+0x162>
 8003ada:	b913      	cbnz	r3, 8003ae2 <_printf_float+0x1aa>
 8003adc:	6822      	ldr	r2, [r4, #0]
 8003ade:	07d2      	lsls	r2, r2, #31
 8003ae0:	d501      	bpl.n	8003ae6 <_printf_float+0x1ae>
 8003ae2:	3302      	adds	r3, #2
 8003ae4:	e7f4      	b.n	8003ad0 <_printf_float+0x198>
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e7f2      	b.n	8003ad0 <_printf_float+0x198>
 8003aea:	f04f 0967 	mov.w	r9, #103	; 0x67
 8003aee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003af0:	4299      	cmp	r1, r3
 8003af2:	db05      	blt.n	8003b00 <_printf_float+0x1c8>
 8003af4:	6823      	ldr	r3, [r4, #0]
 8003af6:	6121      	str	r1, [r4, #16]
 8003af8:	07d8      	lsls	r0, r3, #31
 8003afa:	d5ea      	bpl.n	8003ad2 <_printf_float+0x19a>
 8003afc:	1c4b      	adds	r3, r1, #1
 8003afe:	e7e7      	b.n	8003ad0 <_printf_float+0x198>
 8003b00:	2900      	cmp	r1, #0
 8003b02:	bfcc      	ite	gt
 8003b04:	2201      	movgt	r2, #1
 8003b06:	f1c1 0202 	rsble	r2, r1, #2
 8003b0a:	4413      	add	r3, r2
 8003b0c:	e7e0      	b.n	8003ad0 <_printf_float+0x198>
 8003b0e:	6823      	ldr	r3, [r4, #0]
 8003b10:	055a      	lsls	r2, r3, #21
 8003b12:	d407      	bmi.n	8003b24 <_printf_float+0x1ec>
 8003b14:	6923      	ldr	r3, [r4, #16]
 8003b16:	4642      	mov	r2, r8
 8003b18:	4631      	mov	r1, r6
 8003b1a:	4628      	mov	r0, r5
 8003b1c:	47b8      	blx	r7
 8003b1e:	3001      	adds	r0, #1
 8003b20:	d12b      	bne.n	8003b7a <_printf_float+0x242>
 8003b22:	e764      	b.n	80039ee <_printf_float+0xb6>
 8003b24:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003b28:	f240 80dd 	bls.w	8003ce6 <_printf_float+0x3ae>
 8003b2c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003b30:	2200      	movs	r2, #0
 8003b32:	2300      	movs	r3, #0
 8003b34:	f7fc ff50 	bl	80009d8 <__aeabi_dcmpeq>
 8003b38:	2800      	cmp	r0, #0
 8003b3a:	d033      	beq.n	8003ba4 <_printf_float+0x26c>
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	4631      	mov	r1, r6
 8003b40:	4628      	mov	r0, r5
 8003b42:	4a35      	ldr	r2, [pc, #212]	; (8003c18 <_printf_float+0x2e0>)
 8003b44:	47b8      	blx	r7
 8003b46:	3001      	adds	r0, #1
 8003b48:	f43f af51 	beq.w	80039ee <_printf_float+0xb6>
 8003b4c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003b50:	429a      	cmp	r2, r3
 8003b52:	db02      	blt.n	8003b5a <_printf_float+0x222>
 8003b54:	6823      	ldr	r3, [r4, #0]
 8003b56:	07d8      	lsls	r0, r3, #31
 8003b58:	d50f      	bpl.n	8003b7a <_printf_float+0x242>
 8003b5a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003b5e:	4631      	mov	r1, r6
 8003b60:	4628      	mov	r0, r5
 8003b62:	47b8      	blx	r7
 8003b64:	3001      	adds	r0, #1
 8003b66:	f43f af42 	beq.w	80039ee <_printf_float+0xb6>
 8003b6a:	f04f 0800 	mov.w	r8, #0
 8003b6e:	f104 091a 	add.w	r9, r4, #26
 8003b72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003b74:	3b01      	subs	r3, #1
 8003b76:	4543      	cmp	r3, r8
 8003b78:	dc09      	bgt.n	8003b8e <_printf_float+0x256>
 8003b7a:	6823      	ldr	r3, [r4, #0]
 8003b7c:	079b      	lsls	r3, r3, #30
 8003b7e:	f100 8102 	bmi.w	8003d86 <_printf_float+0x44e>
 8003b82:	68e0      	ldr	r0, [r4, #12]
 8003b84:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003b86:	4298      	cmp	r0, r3
 8003b88:	bfb8      	it	lt
 8003b8a:	4618      	movlt	r0, r3
 8003b8c:	e731      	b.n	80039f2 <_printf_float+0xba>
 8003b8e:	2301      	movs	r3, #1
 8003b90:	464a      	mov	r2, r9
 8003b92:	4631      	mov	r1, r6
 8003b94:	4628      	mov	r0, r5
 8003b96:	47b8      	blx	r7
 8003b98:	3001      	adds	r0, #1
 8003b9a:	f43f af28 	beq.w	80039ee <_printf_float+0xb6>
 8003b9e:	f108 0801 	add.w	r8, r8, #1
 8003ba2:	e7e6      	b.n	8003b72 <_printf_float+0x23a>
 8003ba4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	dc38      	bgt.n	8003c1c <_printf_float+0x2e4>
 8003baa:	2301      	movs	r3, #1
 8003bac:	4631      	mov	r1, r6
 8003bae:	4628      	mov	r0, r5
 8003bb0:	4a19      	ldr	r2, [pc, #100]	; (8003c18 <_printf_float+0x2e0>)
 8003bb2:	47b8      	blx	r7
 8003bb4:	3001      	adds	r0, #1
 8003bb6:	f43f af1a 	beq.w	80039ee <_printf_float+0xb6>
 8003bba:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	d102      	bne.n	8003bc8 <_printf_float+0x290>
 8003bc2:	6823      	ldr	r3, [r4, #0]
 8003bc4:	07d9      	lsls	r1, r3, #31
 8003bc6:	d5d8      	bpl.n	8003b7a <_printf_float+0x242>
 8003bc8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003bcc:	4631      	mov	r1, r6
 8003bce:	4628      	mov	r0, r5
 8003bd0:	47b8      	blx	r7
 8003bd2:	3001      	adds	r0, #1
 8003bd4:	f43f af0b 	beq.w	80039ee <_printf_float+0xb6>
 8003bd8:	f04f 0900 	mov.w	r9, #0
 8003bdc:	f104 0a1a 	add.w	sl, r4, #26
 8003be0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003be2:	425b      	negs	r3, r3
 8003be4:	454b      	cmp	r3, r9
 8003be6:	dc01      	bgt.n	8003bec <_printf_float+0x2b4>
 8003be8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003bea:	e794      	b.n	8003b16 <_printf_float+0x1de>
 8003bec:	2301      	movs	r3, #1
 8003bee:	4652      	mov	r2, sl
 8003bf0:	4631      	mov	r1, r6
 8003bf2:	4628      	mov	r0, r5
 8003bf4:	47b8      	blx	r7
 8003bf6:	3001      	adds	r0, #1
 8003bf8:	f43f aef9 	beq.w	80039ee <_printf_float+0xb6>
 8003bfc:	f109 0901 	add.w	r9, r9, #1
 8003c00:	e7ee      	b.n	8003be0 <_printf_float+0x2a8>
 8003c02:	bf00      	nop
 8003c04:	7fefffff 	.word	0x7fefffff
 8003c08:	08008114 	.word	0x08008114
 8003c0c:	08008118 	.word	0x08008118
 8003c10:	08008120 	.word	0x08008120
 8003c14:	0800811c 	.word	0x0800811c
 8003c18:	08008124 	.word	0x08008124
 8003c1c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003c1e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003c20:	429a      	cmp	r2, r3
 8003c22:	bfa8      	it	ge
 8003c24:	461a      	movge	r2, r3
 8003c26:	2a00      	cmp	r2, #0
 8003c28:	4691      	mov	r9, r2
 8003c2a:	dc37      	bgt.n	8003c9c <_printf_float+0x364>
 8003c2c:	f04f 0b00 	mov.w	fp, #0
 8003c30:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003c34:	f104 021a 	add.w	r2, r4, #26
 8003c38:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8003c3c:	ebaa 0309 	sub.w	r3, sl, r9
 8003c40:	455b      	cmp	r3, fp
 8003c42:	dc33      	bgt.n	8003cac <_printf_float+0x374>
 8003c44:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	db3b      	blt.n	8003cc4 <_printf_float+0x38c>
 8003c4c:	6823      	ldr	r3, [r4, #0]
 8003c4e:	07da      	lsls	r2, r3, #31
 8003c50:	d438      	bmi.n	8003cc4 <_printf_float+0x38c>
 8003c52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003c54:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003c56:	eba3 020a 	sub.w	r2, r3, sl
 8003c5a:	eba3 0901 	sub.w	r9, r3, r1
 8003c5e:	4591      	cmp	r9, r2
 8003c60:	bfa8      	it	ge
 8003c62:	4691      	movge	r9, r2
 8003c64:	f1b9 0f00 	cmp.w	r9, #0
 8003c68:	dc34      	bgt.n	8003cd4 <_printf_float+0x39c>
 8003c6a:	f04f 0800 	mov.w	r8, #0
 8003c6e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003c72:	f104 0a1a 	add.w	sl, r4, #26
 8003c76:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003c7a:	1a9b      	subs	r3, r3, r2
 8003c7c:	eba3 0309 	sub.w	r3, r3, r9
 8003c80:	4543      	cmp	r3, r8
 8003c82:	f77f af7a 	ble.w	8003b7a <_printf_float+0x242>
 8003c86:	2301      	movs	r3, #1
 8003c88:	4652      	mov	r2, sl
 8003c8a:	4631      	mov	r1, r6
 8003c8c:	4628      	mov	r0, r5
 8003c8e:	47b8      	blx	r7
 8003c90:	3001      	adds	r0, #1
 8003c92:	f43f aeac 	beq.w	80039ee <_printf_float+0xb6>
 8003c96:	f108 0801 	add.w	r8, r8, #1
 8003c9a:	e7ec      	b.n	8003c76 <_printf_float+0x33e>
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	4631      	mov	r1, r6
 8003ca0:	4642      	mov	r2, r8
 8003ca2:	4628      	mov	r0, r5
 8003ca4:	47b8      	blx	r7
 8003ca6:	3001      	adds	r0, #1
 8003ca8:	d1c0      	bne.n	8003c2c <_printf_float+0x2f4>
 8003caa:	e6a0      	b.n	80039ee <_printf_float+0xb6>
 8003cac:	2301      	movs	r3, #1
 8003cae:	4631      	mov	r1, r6
 8003cb0:	4628      	mov	r0, r5
 8003cb2:	920b      	str	r2, [sp, #44]	; 0x2c
 8003cb4:	47b8      	blx	r7
 8003cb6:	3001      	adds	r0, #1
 8003cb8:	f43f ae99 	beq.w	80039ee <_printf_float+0xb6>
 8003cbc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003cbe:	f10b 0b01 	add.w	fp, fp, #1
 8003cc2:	e7b9      	b.n	8003c38 <_printf_float+0x300>
 8003cc4:	4631      	mov	r1, r6
 8003cc6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003cca:	4628      	mov	r0, r5
 8003ccc:	47b8      	blx	r7
 8003cce:	3001      	adds	r0, #1
 8003cd0:	d1bf      	bne.n	8003c52 <_printf_float+0x31a>
 8003cd2:	e68c      	b.n	80039ee <_printf_float+0xb6>
 8003cd4:	464b      	mov	r3, r9
 8003cd6:	4631      	mov	r1, r6
 8003cd8:	4628      	mov	r0, r5
 8003cda:	eb08 020a 	add.w	r2, r8, sl
 8003cde:	47b8      	blx	r7
 8003ce0:	3001      	adds	r0, #1
 8003ce2:	d1c2      	bne.n	8003c6a <_printf_float+0x332>
 8003ce4:	e683      	b.n	80039ee <_printf_float+0xb6>
 8003ce6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003ce8:	2a01      	cmp	r2, #1
 8003cea:	dc01      	bgt.n	8003cf0 <_printf_float+0x3b8>
 8003cec:	07db      	lsls	r3, r3, #31
 8003cee:	d537      	bpl.n	8003d60 <_printf_float+0x428>
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	4642      	mov	r2, r8
 8003cf4:	4631      	mov	r1, r6
 8003cf6:	4628      	mov	r0, r5
 8003cf8:	47b8      	blx	r7
 8003cfa:	3001      	adds	r0, #1
 8003cfc:	f43f ae77 	beq.w	80039ee <_printf_float+0xb6>
 8003d00:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003d04:	4631      	mov	r1, r6
 8003d06:	4628      	mov	r0, r5
 8003d08:	47b8      	blx	r7
 8003d0a:	3001      	adds	r0, #1
 8003d0c:	f43f ae6f 	beq.w	80039ee <_printf_float+0xb6>
 8003d10:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003d14:	2200      	movs	r2, #0
 8003d16:	2300      	movs	r3, #0
 8003d18:	f7fc fe5e 	bl	80009d8 <__aeabi_dcmpeq>
 8003d1c:	b9d8      	cbnz	r0, 8003d56 <_printf_float+0x41e>
 8003d1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003d20:	f108 0201 	add.w	r2, r8, #1
 8003d24:	3b01      	subs	r3, #1
 8003d26:	4631      	mov	r1, r6
 8003d28:	4628      	mov	r0, r5
 8003d2a:	47b8      	blx	r7
 8003d2c:	3001      	adds	r0, #1
 8003d2e:	d10e      	bne.n	8003d4e <_printf_float+0x416>
 8003d30:	e65d      	b.n	80039ee <_printf_float+0xb6>
 8003d32:	2301      	movs	r3, #1
 8003d34:	464a      	mov	r2, r9
 8003d36:	4631      	mov	r1, r6
 8003d38:	4628      	mov	r0, r5
 8003d3a:	47b8      	blx	r7
 8003d3c:	3001      	adds	r0, #1
 8003d3e:	f43f ae56 	beq.w	80039ee <_printf_float+0xb6>
 8003d42:	f108 0801 	add.w	r8, r8, #1
 8003d46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003d48:	3b01      	subs	r3, #1
 8003d4a:	4543      	cmp	r3, r8
 8003d4c:	dcf1      	bgt.n	8003d32 <_printf_float+0x3fa>
 8003d4e:	4653      	mov	r3, sl
 8003d50:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003d54:	e6e0      	b.n	8003b18 <_printf_float+0x1e0>
 8003d56:	f04f 0800 	mov.w	r8, #0
 8003d5a:	f104 091a 	add.w	r9, r4, #26
 8003d5e:	e7f2      	b.n	8003d46 <_printf_float+0x40e>
 8003d60:	2301      	movs	r3, #1
 8003d62:	4642      	mov	r2, r8
 8003d64:	e7df      	b.n	8003d26 <_printf_float+0x3ee>
 8003d66:	2301      	movs	r3, #1
 8003d68:	464a      	mov	r2, r9
 8003d6a:	4631      	mov	r1, r6
 8003d6c:	4628      	mov	r0, r5
 8003d6e:	47b8      	blx	r7
 8003d70:	3001      	adds	r0, #1
 8003d72:	f43f ae3c 	beq.w	80039ee <_printf_float+0xb6>
 8003d76:	f108 0801 	add.w	r8, r8, #1
 8003d7a:	68e3      	ldr	r3, [r4, #12]
 8003d7c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8003d7e:	1a5b      	subs	r3, r3, r1
 8003d80:	4543      	cmp	r3, r8
 8003d82:	dcf0      	bgt.n	8003d66 <_printf_float+0x42e>
 8003d84:	e6fd      	b.n	8003b82 <_printf_float+0x24a>
 8003d86:	f04f 0800 	mov.w	r8, #0
 8003d8a:	f104 0919 	add.w	r9, r4, #25
 8003d8e:	e7f4      	b.n	8003d7a <_printf_float+0x442>

08003d90 <_printf_common>:
 8003d90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d94:	4616      	mov	r6, r2
 8003d96:	4699      	mov	r9, r3
 8003d98:	688a      	ldr	r2, [r1, #8]
 8003d9a:	690b      	ldr	r3, [r1, #16]
 8003d9c:	4607      	mov	r7, r0
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	bfb8      	it	lt
 8003da2:	4613      	movlt	r3, r2
 8003da4:	6033      	str	r3, [r6, #0]
 8003da6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003daa:	460c      	mov	r4, r1
 8003dac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003db0:	b10a      	cbz	r2, 8003db6 <_printf_common+0x26>
 8003db2:	3301      	adds	r3, #1
 8003db4:	6033      	str	r3, [r6, #0]
 8003db6:	6823      	ldr	r3, [r4, #0]
 8003db8:	0699      	lsls	r1, r3, #26
 8003dba:	bf42      	ittt	mi
 8003dbc:	6833      	ldrmi	r3, [r6, #0]
 8003dbe:	3302      	addmi	r3, #2
 8003dc0:	6033      	strmi	r3, [r6, #0]
 8003dc2:	6825      	ldr	r5, [r4, #0]
 8003dc4:	f015 0506 	ands.w	r5, r5, #6
 8003dc8:	d106      	bne.n	8003dd8 <_printf_common+0x48>
 8003dca:	f104 0a19 	add.w	sl, r4, #25
 8003dce:	68e3      	ldr	r3, [r4, #12]
 8003dd0:	6832      	ldr	r2, [r6, #0]
 8003dd2:	1a9b      	subs	r3, r3, r2
 8003dd4:	42ab      	cmp	r3, r5
 8003dd6:	dc28      	bgt.n	8003e2a <_printf_common+0x9a>
 8003dd8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003ddc:	1e13      	subs	r3, r2, #0
 8003dde:	6822      	ldr	r2, [r4, #0]
 8003de0:	bf18      	it	ne
 8003de2:	2301      	movne	r3, #1
 8003de4:	0692      	lsls	r2, r2, #26
 8003de6:	d42d      	bmi.n	8003e44 <_printf_common+0xb4>
 8003de8:	4649      	mov	r1, r9
 8003dea:	4638      	mov	r0, r7
 8003dec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003df0:	47c0      	blx	r8
 8003df2:	3001      	adds	r0, #1
 8003df4:	d020      	beq.n	8003e38 <_printf_common+0xa8>
 8003df6:	6823      	ldr	r3, [r4, #0]
 8003df8:	68e5      	ldr	r5, [r4, #12]
 8003dfa:	f003 0306 	and.w	r3, r3, #6
 8003dfe:	2b04      	cmp	r3, #4
 8003e00:	bf18      	it	ne
 8003e02:	2500      	movne	r5, #0
 8003e04:	6832      	ldr	r2, [r6, #0]
 8003e06:	f04f 0600 	mov.w	r6, #0
 8003e0a:	68a3      	ldr	r3, [r4, #8]
 8003e0c:	bf08      	it	eq
 8003e0e:	1aad      	subeq	r5, r5, r2
 8003e10:	6922      	ldr	r2, [r4, #16]
 8003e12:	bf08      	it	eq
 8003e14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	bfc4      	itt	gt
 8003e1c:	1a9b      	subgt	r3, r3, r2
 8003e1e:	18ed      	addgt	r5, r5, r3
 8003e20:	341a      	adds	r4, #26
 8003e22:	42b5      	cmp	r5, r6
 8003e24:	d11a      	bne.n	8003e5c <_printf_common+0xcc>
 8003e26:	2000      	movs	r0, #0
 8003e28:	e008      	b.n	8003e3c <_printf_common+0xac>
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	4652      	mov	r2, sl
 8003e2e:	4649      	mov	r1, r9
 8003e30:	4638      	mov	r0, r7
 8003e32:	47c0      	blx	r8
 8003e34:	3001      	adds	r0, #1
 8003e36:	d103      	bne.n	8003e40 <_printf_common+0xb0>
 8003e38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003e3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e40:	3501      	adds	r5, #1
 8003e42:	e7c4      	b.n	8003dce <_printf_common+0x3e>
 8003e44:	2030      	movs	r0, #48	; 0x30
 8003e46:	18e1      	adds	r1, r4, r3
 8003e48:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003e4c:	1c5a      	adds	r2, r3, #1
 8003e4e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003e52:	4422      	add	r2, r4
 8003e54:	3302      	adds	r3, #2
 8003e56:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003e5a:	e7c5      	b.n	8003de8 <_printf_common+0x58>
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	4622      	mov	r2, r4
 8003e60:	4649      	mov	r1, r9
 8003e62:	4638      	mov	r0, r7
 8003e64:	47c0      	blx	r8
 8003e66:	3001      	adds	r0, #1
 8003e68:	d0e6      	beq.n	8003e38 <_printf_common+0xa8>
 8003e6a:	3601      	adds	r6, #1
 8003e6c:	e7d9      	b.n	8003e22 <_printf_common+0x92>
	...

08003e70 <_printf_i>:
 8003e70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003e74:	7e0f      	ldrb	r7, [r1, #24]
 8003e76:	4691      	mov	r9, r2
 8003e78:	2f78      	cmp	r7, #120	; 0x78
 8003e7a:	4680      	mov	r8, r0
 8003e7c:	460c      	mov	r4, r1
 8003e7e:	469a      	mov	sl, r3
 8003e80:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003e82:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003e86:	d807      	bhi.n	8003e98 <_printf_i+0x28>
 8003e88:	2f62      	cmp	r7, #98	; 0x62
 8003e8a:	d80a      	bhi.n	8003ea2 <_printf_i+0x32>
 8003e8c:	2f00      	cmp	r7, #0
 8003e8e:	f000 80d9 	beq.w	8004044 <_printf_i+0x1d4>
 8003e92:	2f58      	cmp	r7, #88	; 0x58
 8003e94:	f000 80a4 	beq.w	8003fe0 <_printf_i+0x170>
 8003e98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003ea0:	e03a      	b.n	8003f18 <_printf_i+0xa8>
 8003ea2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003ea6:	2b15      	cmp	r3, #21
 8003ea8:	d8f6      	bhi.n	8003e98 <_printf_i+0x28>
 8003eaa:	a101      	add	r1, pc, #4	; (adr r1, 8003eb0 <_printf_i+0x40>)
 8003eac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003eb0:	08003f09 	.word	0x08003f09
 8003eb4:	08003f1d 	.word	0x08003f1d
 8003eb8:	08003e99 	.word	0x08003e99
 8003ebc:	08003e99 	.word	0x08003e99
 8003ec0:	08003e99 	.word	0x08003e99
 8003ec4:	08003e99 	.word	0x08003e99
 8003ec8:	08003f1d 	.word	0x08003f1d
 8003ecc:	08003e99 	.word	0x08003e99
 8003ed0:	08003e99 	.word	0x08003e99
 8003ed4:	08003e99 	.word	0x08003e99
 8003ed8:	08003e99 	.word	0x08003e99
 8003edc:	0800402b 	.word	0x0800402b
 8003ee0:	08003f4d 	.word	0x08003f4d
 8003ee4:	0800400d 	.word	0x0800400d
 8003ee8:	08003e99 	.word	0x08003e99
 8003eec:	08003e99 	.word	0x08003e99
 8003ef0:	0800404d 	.word	0x0800404d
 8003ef4:	08003e99 	.word	0x08003e99
 8003ef8:	08003f4d 	.word	0x08003f4d
 8003efc:	08003e99 	.word	0x08003e99
 8003f00:	08003e99 	.word	0x08003e99
 8003f04:	08004015 	.word	0x08004015
 8003f08:	682b      	ldr	r3, [r5, #0]
 8003f0a:	1d1a      	adds	r2, r3, #4
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	602a      	str	r2, [r5, #0]
 8003f10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e0a4      	b.n	8004066 <_printf_i+0x1f6>
 8003f1c:	6820      	ldr	r0, [r4, #0]
 8003f1e:	6829      	ldr	r1, [r5, #0]
 8003f20:	0606      	lsls	r6, r0, #24
 8003f22:	f101 0304 	add.w	r3, r1, #4
 8003f26:	d50a      	bpl.n	8003f3e <_printf_i+0xce>
 8003f28:	680e      	ldr	r6, [r1, #0]
 8003f2a:	602b      	str	r3, [r5, #0]
 8003f2c:	2e00      	cmp	r6, #0
 8003f2e:	da03      	bge.n	8003f38 <_printf_i+0xc8>
 8003f30:	232d      	movs	r3, #45	; 0x2d
 8003f32:	4276      	negs	r6, r6
 8003f34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f38:	230a      	movs	r3, #10
 8003f3a:	485e      	ldr	r0, [pc, #376]	; (80040b4 <_printf_i+0x244>)
 8003f3c:	e019      	b.n	8003f72 <_printf_i+0x102>
 8003f3e:	680e      	ldr	r6, [r1, #0]
 8003f40:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003f44:	602b      	str	r3, [r5, #0]
 8003f46:	bf18      	it	ne
 8003f48:	b236      	sxthne	r6, r6
 8003f4a:	e7ef      	b.n	8003f2c <_printf_i+0xbc>
 8003f4c:	682b      	ldr	r3, [r5, #0]
 8003f4e:	6820      	ldr	r0, [r4, #0]
 8003f50:	1d19      	adds	r1, r3, #4
 8003f52:	6029      	str	r1, [r5, #0]
 8003f54:	0601      	lsls	r1, r0, #24
 8003f56:	d501      	bpl.n	8003f5c <_printf_i+0xec>
 8003f58:	681e      	ldr	r6, [r3, #0]
 8003f5a:	e002      	b.n	8003f62 <_printf_i+0xf2>
 8003f5c:	0646      	lsls	r6, r0, #25
 8003f5e:	d5fb      	bpl.n	8003f58 <_printf_i+0xe8>
 8003f60:	881e      	ldrh	r6, [r3, #0]
 8003f62:	2f6f      	cmp	r7, #111	; 0x6f
 8003f64:	bf0c      	ite	eq
 8003f66:	2308      	moveq	r3, #8
 8003f68:	230a      	movne	r3, #10
 8003f6a:	4852      	ldr	r0, [pc, #328]	; (80040b4 <_printf_i+0x244>)
 8003f6c:	2100      	movs	r1, #0
 8003f6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003f72:	6865      	ldr	r5, [r4, #4]
 8003f74:	2d00      	cmp	r5, #0
 8003f76:	bfa8      	it	ge
 8003f78:	6821      	ldrge	r1, [r4, #0]
 8003f7a:	60a5      	str	r5, [r4, #8]
 8003f7c:	bfa4      	itt	ge
 8003f7e:	f021 0104 	bicge.w	r1, r1, #4
 8003f82:	6021      	strge	r1, [r4, #0]
 8003f84:	b90e      	cbnz	r6, 8003f8a <_printf_i+0x11a>
 8003f86:	2d00      	cmp	r5, #0
 8003f88:	d04d      	beq.n	8004026 <_printf_i+0x1b6>
 8003f8a:	4615      	mov	r5, r2
 8003f8c:	fbb6 f1f3 	udiv	r1, r6, r3
 8003f90:	fb03 6711 	mls	r7, r3, r1, r6
 8003f94:	5dc7      	ldrb	r7, [r0, r7]
 8003f96:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003f9a:	4637      	mov	r7, r6
 8003f9c:	42bb      	cmp	r3, r7
 8003f9e:	460e      	mov	r6, r1
 8003fa0:	d9f4      	bls.n	8003f8c <_printf_i+0x11c>
 8003fa2:	2b08      	cmp	r3, #8
 8003fa4:	d10b      	bne.n	8003fbe <_printf_i+0x14e>
 8003fa6:	6823      	ldr	r3, [r4, #0]
 8003fa8:	07de      	lsls	r6, r3, #31
 8003faa:	d508      	bpl.n	8003fbe <_printf_i+0x14e>
 8003fac:	6923      	ldr	r3, [r4, #16]
 8003fae:	6861      	ldr	r1, [r4, #4]
 8003fb0:	4299      	cmp	r1, r3
 8003fb2:	bfde      	ittt	le
 8003fb4:	2330      	movle	r3, #48	; 0x30
 8003fb6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003fba:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003fbe:	1b52      	subs	r2, r2, r5
 8003fc0:	6122      	str	r2, [r4, #16]
 8003fc2:	464b      	mov	r3, r9
 8003fc4:	4621      	mov	r1, r4
 8003fc6:	4640      	mov	r0, r8
 8003fc8:	f8cd a000 	str.w	sl, [sp]
 8003fcc:	aa03      	add	r2, sp, #12
 8003fce:	f7ff fedf 	bl	8003d90 <_printf_common>
 8003fd2:	3001      	adds	r0, #1
 8003fd4:	d14c      	bne.n	8004070 <_printf_i+0x200>
 8003fd6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003fda:	b004      	add	sp, #16
 8003fdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fe0:	4834      	ldr	r0, [pc, #208]	; (80040b4 <_printf_i+0x244>)
 8003fe2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003fe6:	6829      	ldr	r1, [r5, #0]
 8003fe8:	6823      	ldr	r3, [r4, #0]
 8003fea:	f851 6b04 	ldr.w	r6, [r1], #4
 8003fee:	6029      	str	r1, [r5, #0]
 8003ff0:	061d      	lsls	r5, r3, #24
 8003ff2:	d514      	bpl.n	800401e <_printf_i+0x1ae>
 8003ff4:	07df      	lsls	r7, r3, #31
 8003ff6:	bf44      	itt	mi
 8003ff8:	f043 0320 	orrmi.w	r3, r3, #32
 8003ffc:	6023      	strmi	r3, [r4, #0]
 8003ffe:	b91e      	cbnz	r6, 8004008 <_printf_i+0x198>
 8004000:	6823      	ldr	r3, [r4, #0]
 8004002:	f023 0320 	bic.w	r3, r3, #32
 8004006:	6023      	str	r3, [r4, #0]
 8004008:	2310      	movs	r3, #16
 800400a:	e7af      	b.n	8003f6c <_printf_i+0xfc>
 800400c:	6823      	ldr	r3, [r4, #0]
 800400e:	f043 0320 	orr.w	r3, r3, #32
 8004012:	6023      	str	r3, [r4, #0]
 8004014:	2378      	movs	r3, #120	; 0x78
 8004016:	4828      	ldr	r0, [pc, #160]	; (80040b8 <_printf_i+0x248>)
 8004018:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800401c:	e7e3      	b.n	8003fe6 <_printf_i+0x176>
 800401e:	0659      	lsls	r1, r3, #25
 8004020:	bf48      	it	mi
 8004022:	b2b6      	uxthmi	r6, r6
 8004024:	e7e6      	b.n	8003ff4 <_printf_i+0x184>
 8004026:	4615      	mov	r5, r2
 8004028:	e7bb      	b.n	8003fa2 <_printf_i+0x132>
 800402a:	682b      	ldr	r3, [r5, #0]
 800402c:	6826      	ldr	r6, [r4, #0]
 800402e:	1d18      	adds	r0, r3, #4
 8004030:	6961      	ldr	r1, [r4, #20]
 8004032:	6028      	str	r0, [r5, #0]
 8004034:	0635      	lsls	r5, r6, #24
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	d501      	bpl.n	800403e <_printf_i+0x1ce>
 800403a:	6019      	str	r1, [r3, #0]
 800403c:	e002      	b.n	8004044 <_printf_i+0x1d4>
 800403e:	0670      	lsls	r0, r6, #25
 8004040:	d5fb      	bpl.n	800403a <_printf_i+0x1ca>
 8004042:	8019      	strh	r1, [r3, #0]
 8004044:	2300      	movs	r3, #0
 8004046:	4615      	mov	r5, r2
 8004048:	6123      	str	r3, [r4, #16]
 800404a:	e7ba      	b.n	8003fc2 <_printf_i+0x152>
 800404c:	682b      	ldr	r3, [r5, #0]
 800404e:	2100      	movs	r1, #0
 8004050:	1d1a      	adds	r2, r3, #4
 8004052:	602a      	str	r2, [r5, #0]
 8004054:	681d      	ldr	r5, [r3, #0]
 8004056:	6862      	ldr	r2, [r4, #4]
 8004058:	4628      	mov	r0, r5
 800405a:	f002 faef 	bl	800663c <memchr>
 800405e:	b108      	cbz	r0, 8004064 <_printf_i+0x1f4>
 8004060:	1b40      	subs	r0, r0, r5
 8004062:	6060      	str	r0, [r4, #4]
 8004064:	6863      	ldr	r3, [r4, #4]
 8004066:	6123      	str	r3, [r4, #16]
 8004068:	2300      	movs	r3, #0
 800406a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800406e:	e7a8      	b.n	8003fc2 <_printf_i+0x152>
 8004070:	462a      	mov	r2, r5
 8004072:	4649      	mov	r1, r9
 8004074:	4640      	mov	r0, r8
 8004076:	6923      	ldr	r3, [r4, #16]
 8004078:	47d0      	blx	sl
 800407a:	3001      	adds	r0, #1
 800407c:	d0ab      	beq.n	8003fd6 <_printf_i+0x166>
 800407e:	6823      	ldr	r3, [r4, #0]
 8004080:	079b      	lsls	r3, r3, #30
 8004082:	d413      	bmi.n	80040ac <_printf_i+0x23c>
 8004084:	68e0      	ldr	r0, [r4, #12]
 8004086:	9b03      	ldr	r3, [sp, #12]
 8004088:	4298      	cmp	r0, r3
 800408a:	bfb8      	it	lt
 800408c:	4618      	movlt	r0, r3
 800408e:	e7a4      	b.n	8003fda <_printf_i+0x16a>
 8004090:	2301      	movs	r3, #1
 8004092:	4632      	mov	r2, r6
 8004094:	4649      	mov	r1, r9
 8004096:	4640      	mov	r0, r8
 8004098:	47d0      	blx	sl
 800409a:	3001      	adds	r0, #1
 800409c:	d09b      	beq.n	8003fd6 <_printf_i+0x166>
 800409e:	3501      	adds	r5, #1
 80040a0:	68e3      	ldr	r3, [r4, #12]
 80040a2:	9903      	ldr	r1, [sp, #12]
 80040a4:	1a5b      	subs	r3, r3, r1
 80040a6:	42ab      	cmp	r3, r5
 80040a8:	dcf2      	bgt.n	8004090 <_printf_i+0x220>
 80040aa:	e7eb      	b.n	8004084 <_printf_i+0x214>
 80040ac:	2500      	movs	r5, #0
 80040ae:	f104 0619 	add.w	r6, r4, #25
 80040b2:	e7f5      	b.n	80040a0 <_printf_i+0x230>
 80040b4:	08008126 	.word	0x08008126
 80040b8:	08008137 	.word	0x08008137

080040bc <_scanf_float>:
 80040bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040c0:	b087      	sub	sp, #28
 80040c2:	9303      	str	r3, [sp, #12]
 80040c4:	688b      	ldr	r3, [r1, #8]
 80040c6:	4617      	mov	r7, r2
 80040c8:	1e5a      	subs	r2, r3, #1
 80040ca:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80040ce:	bf85      	ittet	hi
 80040d0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80040d4:	195b      	addhi	r3, r3, r5
 80040d6:	2300      	movls	r3, #0
 80040d8:	9302      	strhi	r3, [sp, #8]
 80040da:	bf88      	it	hi
 80040dc:	f240 135d 	movwhi	r3, #349	; 0x15d
 80040e0:	468b      	mov	fp, r1
 80040e2:	f04f 0500 	mov.w	r5, #0
 80040e6:	bf8c      	ite	hi
 80040e8:	608b      	strhi	r3, [r1, #8]
 80040ea:	9302      	strls	r3, [sp, #8]
 80040ec:	680b      	ldr	r3, [r1, #0]
 80040ee:	4680      	mov	r8, r0
 80040f0:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80040f4:	f84b 3b1c 	str.w	r3, [fp], #28
 80040f8:	460c      	mov	r4, r1
 80040fa:	465e      	mov	r6, fp
 80040fc:	46aa      	mov	sl, r5
 80040fe:	46a9      	mov	r9, r5
 8004100:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004104:	9501      	str	r5, [sp, #4]
 8004106:	68a2      	ldr	r2, [r4, #8]
 8004108:	b152      	cbz	r2, 8004120 <_scanf_float+0x64>
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	781b      	ldrb	r3, [r3, #0]
 800410e:	2b4e      	cmp	r3, #78	; 0x4e
 8004110:	d864      	bhi.n	80041dc <_scanf_float+0x120>
 8004112:	2b40      	cmp	r3, #64	; 0x40
 8004114:	d83c      	bhi.n	8004190 <_scanf_float+0xd4>
 8004116:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800411a:	b2c8      	uxtb	r0, r1
 800411c:	280e      	cmp	r0, #14
 800411e:	d93a      	bls.n	8004196 <_scanf_float+0xda>
 8004120:	f1b9 0f00 	cmp.w	r9, #0
 8004124:	d003      	beq.n	800412e <_scanf_float+0x72>
 8004126:	6823      	ldr	r3, [r4, #0]
 8004128:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800412c:	6023      	str	r3, [r4, #0]
 800412e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004132:	f1ba 0f01 	cmp.w	sl, #1
 8004136:	f200 8113 	bhi.w	8004360 <_scanf_float+0x2a4>
 800413a:	455e      	cmp	r6, fp
 800413c:	f200 8105 	bhi.w	800434a <_scanf_float+0x28e>
 8004140:	2501      	movs	r5, #1
 8004142:	4628      	mov	r0, r5
 8004144:	b007      	add	sp, #28
 8004146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800414a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800414e:	2a0d      	cmp	r2, #13
 8004150:	d8e6      	bhi.n	8004120 <_scanf_float+0x64>
 8004152:	a101      	add	r1, pc, #4	; (adr r1, 8004158 <_scanf_float+0x9c>)
 8004154:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004158:	08004297 	.word	0x08004297
 800415c:	08004121 	.word	0x08004121
 8004160:	08004121 	.word	0x08004121
 8004164:	08004121 	.word	0x08004121
 8004168:	080042f7 	.word	0x080042f7
 800416c:	080042cf 	.word	0x080042cf
 8004170:	08004121 	.word	0x08004121
 8004174:	08004121 	.word	0x08004121
 8004178:	080042a5 	.word	0x080042a5
 800417c:	08004121 	.word	0x08004121
 8004180:	08004121 	.word	0x08004121
 8004184:	08004121 	.word	0x08004121
 8004188:	08004121 	.word	0x08004121
 800418c:	0800425d 	.word	0x0800425d
 8004190:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8004194:	e7db      	b.n	800414e <_scanf_float+0x92>
 8004196:	290e      	cmp	r1, #14
 8004198:	d8c2      	bhi.n	8004120 <_scanf_float+0x64>
 800419a:	a001      	add	r0, pc, #4	; (adr r0, 80041a0 <_scanf_float+0xe4>)
 800419c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80041a0:	0800424f 	.word	0x0800424f
 80041a4:	08004121 	.word	0x08004121
 80041a8:	0800424f 	.word	0x0800424f
 80041ac:	080042e3 	.word	0x080042e3
 80041b0:	08004121 	.word	0x08004121
 80041b4:	080041fd 	.word	0x080041fd
 80041b8:	08004239 	.word	0x08004239
 80041bc:	08004239 	.word	0x08004239
 80041c0:	08004239 	.word	0x08004239
 80041c4:	08004239 	.word	0x08004239
 80041c8:	08004239 	.word	0x08004239
 80041cc:	08004239 	.word	0x08004239
 80041d0:	08004239 	.word	0x08004239
 80041d4:	08004239 	.word	0x08004239
 80041d8:	08004239 	.word	0x08004239
 80041dc:	2b6e      	cmp	r3, #110	; 0x6e
 80041de:	d809      	bhi.n	80041f4 <_scanf_float+0x138>
 80041e0:	2b60      	cmp	r3, #96	; 0x60
 80041e2:	d8b2      	bhi.n	800414a <_scanf_float+0x8e>
 80041e4:	2b54      	cmp	r3, #84	; 0x54
 80041e6:	d077      	beq.n	80042d8 <_scanf_float+0x21c>
 80041e8:	2b59      	cmp	r3, #89	; 0x59
 80041ea:	d199      	bne.n	8004120 <_scanf_float+0x64>
 80041ec:	2d07      	cmp	r5, #7
 80041ee:	d197      	bne.n	8004120 <_scanf_float+0x64>
 80041f0:	2508      	movs	r5, #8
 80041f2:	e029      	b.n	8004248 <_scanf_float+0x18c>
 80041f4:	2b74      	cmp	r3, #116	; 0x74
 80041f6:	d06f      	beq.n	80042d8 <_scanf_float+0x21c>
 80041f8:	2b79      	cmp	r3, #121	; 0x79
 80041fa:	e7f6      	b.n	80041ea <_scanf_float+0x12e>
 80041fc:	6821      	ldr	r1, [r4, #0]
 80041fe:	05c8      	lsls	r0, r1, #23
 8004200:	d51a      	bpl.n	8004238 <_scanf_float+0x17c>
 8004202:	9b02      	ldr	r3, [sp, #8]
 8004204:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004208:	6021      	str	r1, [r4, #0]
 800420a:	f109 0901 	add.w	r9, r9, #1
 800420e:	b11b      	cbz	r3, 8004218 <_scanf_float+0x15c>
 8004210:	3b01      	subs	r3, #1
 8004212:	3201      	adds	r2, #1
 8004214:	9302      	str	r3, [sp, #8]
 8004216:	60a2      	str	r2, [r4, #8]
 8004218:	68a3      	ldr	r3, [r4, #8]
 800421a:	3b01      	subs	r3, #1
 800421c:	60a3      	str	r3, [r4, #8]
 800421e:	6923      	ldr	r3, [r4, #16]
 8004220:	3301      	adds	r3, #1
 8004222:	6123      	str	r3, [r4, #16]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	3b01      	subs	r3, #1
 8004228:	2b00      	cmp	r3, #0
 800422a:	607b      	str	r3, [r7, #4]
 800422c:	f340 8084 	ble.w	8004338 <_scanf_float+0x27c>
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	3301      	adds	r3, #1
 8004234:	603b      	str	r3, [r7, #0]
 8004236:	e766      	b.n	8004106 <_scanf_float+0x4a>
 8004238:	eb1a 0f05 	cmn.w	sl, r5
 800423c:	f47f af70 	bne.w	8004120 <_scanf_float+0x64>
 8004240:	6822      	ldr	r2, [r4, #0]
 8004242:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8004246:	6022      	str	r2, [r4, #0]
 8004248:	f806 3b01 	strb.w	r3, [r6], #1
 800424c:	e7e4      	b.n	8004218 <_scanf_float+0x15c>
 800424e:	6822      	ldr	r2, [r4, #0]
 8004250:	0610      	lsls	r0, r2, #24
 8004252:	f57f af65 	bpl.w	8004120 <_scanf_float+0x64>
 8004256:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800425a:	e7f4      	b.n	8004246 <_scanf_float+0x18a>
 800425c:	f1ba 0f00 	cmp.w	sl, #0
 8004260:	d10e      	bne.n	8004280 <_scanf_float+0x1c4>
 8004262:	f1b9 0f00 	cmp.w	r9, #0
 8004266:	d10e      	bne.n	8004286 <_scanf_float+0x1ca>
 8004268:	6822      	ldr	r2, [r4, #0]
 800426a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800426e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004272:	d108      	bne.n	8004286 <_scanf_float+0x1ca>
 8004274:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004278:	f04f 0a01 	mov.w	sl, #1
 800427c:	6022      	str	r2, [r4, #0]
 800427e:	e7e3      	b.n	8004248 <_scanf_float+0x18c>
 8004280:	f1ba 0f02 	cmp.w	sl, #2
 8004284:	d055      	beq.n	8004332 <_scanf_float+0x276>
 8004286:	2d01      	cmp	r5, #1
 8004288:	d002      	beq.n	8004290 <_scanf_float+0x1d4>
 800428a:	2d04      	cmp	r5, #4
 800428c:	f47f af48 	bne.w	8004120 <_scanf_float+0x64>
 8004290:	3501      	adds	r5, #1
 8004292:	b2ed      	uxtb	r5, r5
 8004294:	e7d8      	b.n	8004248 <_scanf_float+0x18c>
 8004296:	f1ba 0f01 	cmp.w	sl, #1
 800429a:	f47f af41 	bne.w	8004120 <_scanf_float+0x64>
 800429e:	f04f 0a02 	mov.w	sl, #2
 80042a2:	e7d1      	b.n	8004248 <_scanf_float+0x18c>
 80042a4:	b97d      	cbnz	r5, 80042c6 <_scanf_float+0x20a>
 80042a6:	f1b9 0f00 	cmp.w	r9, #0
 80042aa:	f47f af3c 	bne.w	8004126 <_scanf_float+0x6a>
 80042ae:	6822      	ldr	r2, [r4, #0]
 80042b0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80042b4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80042b8:	f47f af39 	bne.w	800412e <_scanf_float+0x72>
 80042bc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80042c0:	2501      	movs	r5, #1
 80042c2:	6022      	str	r2, [r4, #0]
 80042c4:	e7c0      	b.n	8004248 <_scanf_float+0x18c>
 80042c6:	2d03      	cmp	r5, #3
 80042c8:	d0e2      	beq.n	8004290 <_scanf_float+0x1d4>
 80042ca:	2d05      	cmp	r5, #5
 80042cc:	e7de      	b.n	800428c <_scanf_float+0x1d0>
 80042ce:	2d02      	cmp	r5, #2
 80042d0:	f47f af26 	bne.w	8004120 <_scanf_float+0x64>
 80042d4:	2503      	movs	r5, #3
 80042d6:	e7b7      	b.n	8004248 <_scanf_float+0x18c>
 80042d8:	2d06      	cmp	r5, #6
 80042da:	f47f af21 	bne.w	8004120 <_scanf_float+0x64>
 80042de:	2507      	movs	r5, #7
 80042e0:	e7b2      	b.n	8004248 <_scanf_float+0x18c>
 80042e2:	6822      	ldr	r2, [r4, #0]
 80042e4:	0591      	lsls	r1, r2, #22
 80042e6:	f57f af1b 	bpl.w	8004120 <_scanf_float+0x64>
 80042ea:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80042ee:	6022      	str	r2, [r4, #0]
 80042f0:	f8cd 9004 	str.w	r9, [sp, #4]
 80042f4:	e7a8      	b.n	8004248 <_scanf_float+0x18c>
 80042f6:	6822      	ldr	r2, [r4, #0]
 80042f8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80042fc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004300:	d006      	beq.n	8004310 <_scanf_float+0x254>
 8004302:	0550      	lsls	r0, r2, #21
 8004304:	f57f af0c 	bpl.w	8004120 <_scanf_float+0x64>
 8004308:	f1b9 0f00 	cmp.w	r9, #0
 800430c:	f43f af0f 	beq.w	800412e <_scanf_float+0x72>
 8004310:	0591      	lsls	r1, r2, #22
 8004312:	bf58      	it	pl
 8004314:	9901      	ldrpl	r1, [sp, #4]
 8004316:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800431a:	bf58      	it	pl
 800431c:	eba9 0101 	subpl.w	r1, r9, r1
 8004320:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8004324:	f04f 0900 	mov.w	r9, #0
 8004328:	bf58      	it	pl
 800432a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800432e:	6022      	str	r2, [r4, #0]
 8004330:	e78a      	b.n	8004248 <_scanf_float+0x18c>
 8004332:	f04f 0a03 	mov.w	sl, #3
 8004336:	e787      	b.n	8004248 <_scanf_float+0x18c>
 8004338:	4639      	mov	r1, r7
 800433a:	4640      	mov	r0, r8
 800433c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004340:	4798      	blx	r3
 8004342:	2800      	cmp	r0, #0
 8004344:	f43f aedf 	beq.w	8004106 <_scanf_float+0x4a>
 8004348:	e6ea      	b.n	8004120 <_scanf_float+0x64>
 800434a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800434e:	463a      	mov	r2, r7
 8004350:	4640      	mov	r0, r8
 8004352:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004356:	4798      	blx	r3
 8004358:	6923      	ldr	r3, [r4, #16]
 800435a:	3b01      	subs	r3, #1
 800435c:	6123      	str	r3, [r4, #16]
 800435e:	e6ec      	b.n	800413a <_scanf_float+0x7e>
 8004360:	1e6b      	subs	r3, r5, #1
 8004362:	2b06      	cmp	r3, #6
 8004364:	d825      	bhi.n	80043b2 <_scanf_float+0x2f6>
 8004366:	2d02      	cmp	r5, #2
 8004368:	d836      	bhi.n	80043d8 <_scanf_float+0x31c>
 800436a:	455e      	cmp	r6, fp
 800436c:	f67f aee8 	bls.w	8004140 <_scanf_float+0x84>
 8004370:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004374:	463a      	mov	r2, r7
 8004376:	4640      	mov	r0, r8
 8004378:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800437c:	4798      	blx	r3
 800437e:	6923      	ldr	r3, [r4, #16]
 8004380:	3b01      	subs	r3, #1
 8004382:	6123      	str	r3, [r4, #16]
 8004384:	e7f1      	b.n	800436a <_scanf_float+0x2ae>
 8004386:	9802      	ldr	r0, [sp, #8]
 8004388:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800438c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8004390:	463a      	mov	r2, r7
 8004392:	9002      	str	r0, [sp, #8]
 8004394:	4640      	mov	r0, r8
 8004396:	4798      	blx	r3
 8004398:	6923      	ldr	r3, [r4, #16]
 800439a:	3b01      	subs	r3, #1
 800439c:	6123      	str	r3, [r4, #16]
 800439e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80043a2:	fa5f fa8a 	uxtb.w	sl, sl
 80043a6:	f1ba 0f02 	cmp.w	sl, #2
 80043aa:	d1ec      	bne.n	8004386 <_scanf_float+0x2ca>
 80043ac:	3d03      	subs	r5, #3
 80043ae:	b2ed      	uxtb	r5, r5
 80043b0:	1b76      	subs	r6, r6, r5
 80043b2:	6823      	ldr	r3, [r4, #0]
 80043b4:	05da      	lsls	r2, r3, #23
 80043b6:	d52f      	bpl.n	8004418 <_scanf_float+0x35c>
 80043b8:	055b      	lsls	r3, r3, #21
 80043ba:	d510      	bpl.n	80043de <_scanf_float+0x322>
 80043bc:	455e      	cmp	r6, fp
 80043be:	f67f aebf 	bls.w	8004140 <_scanf_float+0x84>
 80043c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80043c6:	463a      	mov	r2, r7
 80043c8:	4640      	mov	r0, r8
 80043ca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80043ce:	4798      	blx	r3
 80043d0:	6923      	ldr	r3, [r4, #16]
 80043d2:	3b01      	subs	r3, #1
 80043d4:	6123      	str	r3, [r4, #16]
 80043d6:	e7f1      	b.n	80043bc <_scanf_float+0x300>
 80043d8:	46aa      	mov	sl, r5
 80043da:	9602      	str	r6, [sp, #8]
 80043dc:	e7df      	b.n	800439e <_scanf_float+0x2e2>
 80043de:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80043e2:	6923      	ldr	r3, [r4, #16]
 80043e4:	2965      	cmp	r1, #101	; 0x65
 80043e6:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80043ea:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 80043ee:	6123      	str	r3, [r4, #16]
 80043f0:	d00c      	beq.n	800440c <_scanf_float+0x350>
 80043f2:	2945      	cmp	r1, #69	; 0x45
 80043f4:	d00a      	beq.n	800440c <_scanf_float+0x350>
 80043f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80043fa:	463a      	mov	r2, r7
 80043fc:	4640      	mov	r0, r8
 80043fe:	4798      	blx	r3
 8004400:	6923      	ldr	r3, [r4, #16]
 8004402:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8004406:	3b01      	subs	r3, #1
 8004408:	1eb5      	subs	r5, r6, #2
 800440a:	6123      	str	r3, [r4, #16]
 800440c:	463a      	mov	r2, r7
 800440e:	4640      	mov	r0, r8
 8004410:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004414:	4798      	blx	r3
 8004416:	462e      	mov	r6, r5
 8004418:	6825      	ldr	r5, [r4, #0]
 800441a:	f015 0510 	ands.w	r5, r5, #16
 800441e:	d155      	bne.n	80044cc <_scanf_float+0x410>
 8004420:	7035      	strb	r5, [r6, #0]
 8004422:	6823      	ldr	r3, [r4, #0]
 8004424:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004428:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800442c:	d11b      	bne.n	8004466 <_scanf_float+0x3aa>
 800442e:	9b01      	ldr	r3, [sp, #4]
 8004430:	454b      	cmp	r3, r9
 8004432:	eba3 0209 	sub.w	r2, r3, r9
 8004436:	d123      	bne.n	8004480 <_scanf_float+0x3c4>
 8004438:	2200      	movs	r2, #0
 800443a:	4659      	mov	r1, fp
 800443c:	4640      	mov	r0, r8
 800443e:	f000 fe7b 	bl	8005138 <_strtod_r>
 8004442:	6822      	ldr	r2, [r4, #0]
 8004444:	9b03      	ldr	r3, [sp, #12]
 8004446:	f012 0f02 	tst.w	r2, #2
 800444a:	4606      	mov	r6, r0
 800444c:	460f      	mov	r7, r1
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	d021      	beq.n	8004496 <_scanf_float+0x3da>
 8004452:	1d1a      	adds	r2, r3, #4
 8004454:	9903      	ldr	r1, [sp, #12]
 8004456:	600a      	str	r2, [r1, #0]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	e9c3 6700 	strd	r6, r7, [r3]
 800445e:	68e3      	ldr	r3, [r4, #12]
 8004460:	3301      	adds	r3, #1
 8004462:	60e3      	str	r3, [r4, #12]
 8004464:	e66d      	b.n	8004142 <_scanf_float+0x86>
 8004466:	9b04      	ldr	r3, [sp, #16]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d0e5      	beq.n	8004438 <_scanf_float+0x37c>
 800446c:	9905      	ldr	r1, [sp, #20]
 800446e:	230a      	movs	r3, #10
 8004470:	462a      	mov	r2, r5
 8004472:	4640      	mov	r0, r8
 8004474:	3101      	adds	r1, #1
 8004476:	f000 fee1 	bl	800523c <_strtol_r>
 800447a:	9b04      	ldr	r3, [sp, #16]
 800447c:	9e05      	ldr	r6, [sp, #20]
 800447e:	1ac2      	subs	r2, r0, r3
 8004480:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8004484:	429e      	cmp	r6, r3
 8004486:	bf28      	it	cs
 8004488:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800448c:	4630      	mov	r0, r6
 800448e:	4910      	ldr	r1, [pc, #64]	; (80044d0 <_scanf_float+0x414>)
 8004490:	f000 f826 	bl	80044e0 <siprintf>
 8004494:	e7d0      	b.n	8004438 <_scanf_float+0x37c>
 8004496:	f012 0f04 	tst.w	r2, #4
 800449a:	f103 0204 	add.w	r2, r3, #4
 800449e:	d1d9      	bne.n	8004454 <_scanf_float+0x398>
 80044a0:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80044a4:	f8cc 2000 	str.w	r2, [ip]
 80044a8:	f8d3 8000 	ldr.w	r8, [r3]
 80044ac:	4602      	mov	r2, r0
 80044ae:	460b      	mov	r3, r1
 80044b0:	f7fc fac4 	bl	8000a3c <__aeabi_dcmpun>
 80044b4:	b128      	cbz	r0, 80044c2 <_scanf_float+0x406>
 80044b6:	4807      	ldr	r0, [pc, #28]	; (80044d4 <_scanf_float+0x418>)
 80044b8:	f000 f80e 	bl	80044d8 <nanf>
 80044bc:	f8c8 0000 	str.w	r0, [r8]
 80044c0:	e7cd      	b.n	800445e <_scanf_float+0x3a2>
 80044c2:	4630      	mov	r0, r6
 80044c4:	4639      	mov	r1, r7
 80044c6:	f7fc fb17 	bl	8000af8 <__aeabi_d2f>
 80044ca:	e7f7      	b.n	80044bc <_scanf_float+0x400>
 80044cc:	2500      	movs	r5, #0
 80044ce:	e638      	b.n	8004142 <_scanf_float+0x86>
 80044d0:	08008148 	.word	0x08008148
 80044d4:	08008550 	.word	0x08008550

080044d8 <nanf>:
 80044d8:	4800      	ldr	r0, [pc, #0]	; (80044dc <nanf+0x4>)
 80044da:	4770      	bx	lr
 80044dc:	7fc00000 	.word	0x7fc00000

080044e0 <siprintf>:
 80044e0:	b40e      	push	{r1, r2, r3}
 80044e2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80044e6:	b500      	push	{lr}
 80044e8:	b09c      	sub	sp, #112	; 0x70
 80044ea:	ab1d      	add	r3, sp, #116	; 0x74
 80044ec:	9002      	str	r0, [sp, #8]
 80044ee:	9006      	str	r0, [sp, #24]
 80044f0:	9107      	str	r1, [sp, #28]
 80044f2:	9104      	str	r1, [sp, #16]
 80044f4:	4808      	ldr	r0, [pc, #32]	; (8004518 <siprintf+0x38>)
 80044f6:	4909      	ldr	r1, [pc, #36]	; (800451c <siprintf+0x3c>)
 80044f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80044fc:	9105      	str	r1, [sp, #20]
 80044fe:	6800      	ldr	r0, [r0, #0]
 8004500:	a902      	add	r1, sp, #8
 8004502:	9301      	str	r3, [sp, #4]
 8004504:	f002 feba 	bl	800727c <_svfiprintf_r>
 8004508:	2200      	movs	r2, #0
 800450a:	9b02      	ldr	r3, [sp, #8]
 800450c:	701a      	strb	r2, [r3, #0]
 800450e:	b01c      	add	sp, #112	; 0x70
 8004510:	f85d eb04 	ldr.w	lr, [sp], #4
 8004514:	b003      	add	sp, #12
 8004516:	4770      	bx	lr
 8004518:	2000000c 	.word	0x2000000c
 800451c:	ffff0208 	.word	0xffff0208

08004520 <sulp>:
 8004520:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004524:	460f      	mov	r7, r1
 8004526:	4690      	mov	r8, r2
 8004528:	f002 fc14 	bl	8006d54 <__ulp>
 800452c:	4604      	mov	r4, r0
 800452e:	460d      	mov	r5, r1
 8004530:	f1b8 0f00 	cmp.w	r8, #0
 8004534:	d011      	beq.n	800455a <sulp+0x3a>
 8004536:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800453a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800453e:	2b00      	cmp	r3, #0
 8004540:	dd0b      	ble.n	800455a <sulp+0x3a>
 8004542:	2400      	movs	r4, #0
 8004544:	051b      	lsls	r3, r3, #20
 8004546:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800454a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800454e:	4622      	mov	r2, r4
 8004550:	462b      	mov	r3, r5
 8004552:	f7fb ffd9 	bl	8000508 <__aeabi_dmul>
 8004556:	4604      	mov	r4, r0
 8004558:	460d      	mov	r5, r1
 800455a:	4620      	mov	r0, r4
 800455c:	4629      	mov	r1, r5
 800455e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004562:	0000      	movs	r0, r0
 8004564:	0000      	movs	r0, r0
	...

08004568 <_strtod_l>:
 8004568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800456c:	469b      	mov	fp, r3
 800456e:	2300      	movs	r3, #0
 8004570:	b09f      	sub	sp, #124	; 0x7c
 8004572:	931a      	str	r3, [sp, #104]	; 0x68
 8004574:	4b9e      	ldr	r3, [pc, #632]	; (80047f0 <_strtod_l+0x288>)
 8004576:	4682      	mov	sl, r0
 8004578:	681f      	ldr	r7, [r3, #0]
 800457a:	460e      	mov	r6, r1
 800457c:	4638      	mov	r0, r7
 800457e:	9215      	str	r2, [sp, #84]	; 0x54
 8004580:	f7fb fdfe 	bl	8000180 <strlen>
 8004584:	f04f 0800 	mov.w	r8, #0
 8004588:	4604      	mov	r4, r0
 800458a:	f04f 0900 	mov.w	r9, #0
 800458e:	9619      	str	r6, [sp, #100]	; 0x64
 8004590:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004592:	781a      	ldrb	r2, [r3, #0]
 8004594:	2a2b      	cmp	r2, #43	; 0x2b
 8004596:	d04c      	beq.n	8004632 <_strtod_l+0xca>
 8004598:	d83a      	bhi.n	8004610 <_strtod_l+0xa8>
 800459a:	2a0d      	cmp	r2, #13
 800459c:	d833      	bhi.n	8004606 <_strtod_l+0x9e>
 800459e:	2a08      	cmp	r2, #8
 80045a0:	d833      	bhi.n	800460a <_strtod_l+0xa2>
 80045a2:	2a00      	cmp	r2, #0
 80045a4:	d03d      	beq.n	8004622 <_strtod_l+0xba>
 80045a6:	2300      	movs	r3, #0
 80045a8:	930a      	str	r3, [sp, #40]	; 0x28
 80045aa:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80045ac:	782b      	ldrb	r3, [r5, #0]
 80045ae:	2b30      	cmp	r3, #48	; 0x30
 80045b0:	f040 80aa 	bne.w	8004708 <_strtod_l+0x1a0>
 80045b4:	786b      	ldrb	r3, [r5, #1]
 80045b6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80045ba:	2b58      	cmp	r3, #88	; 0x58
 80045bc:	d166      	bne.n	800468c <_strtod_l+0x124>
 80045be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80045c0:	4650      	mov	r0, sl
 80045c2:	9301      	str	r3, [sp, #4]
 80045c4:	ab1a      	add	r3, sp, #104	; 0x68
 80045c6:	9300      	str	r3, [sp, #0]
 80045c8:	4a8a      	ldr	r2, [pc, #552]	; (80047f4 <_strtod_l+0x28c>)
 80045ca:	f8cd b008 	str.w	fp, [sp, #8]
 80045ce:	ab1b      	add	r3, sp, #108	; 0x6c
 80045d0:	a919      	add	r1, sp, #100	; 0x64
 80045d2:	f001 fd17 	bl	8006004 <__gethex>
 80045d6:	f010 0607 	ands.w	r6, r0, #7
 80045da:	4604      	mov	r4, r0
 80045dc:	d005      	beq.n	80045ea <_strtod_l+0x82>
 80045de:	2e06      	cmp	r6, #6
 80045e0:	d129      	bne.n	8004636 <_strtod_l+0xce>
 80045e2:	2300      	movs	r3, #0
 80045e4:	3501      	adds	r5, #1
 80045e6:	9519      	str	r5, [sp, #100]	; 0x64
 80045e8:	930a      	str	r3, [sp, #40]	; 0x28
 80045ea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	f040 858a 	bne.w	8005106 <_strtod_l+0xb9e>
 80045f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80045f4:	b1d3      	cbz	r3, 800462c <_strtod_l+0xc4>
 80045f6:	4642      	mov	r2, r8
 80045f8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80045fc:	4610      	mov	r0, r2
 80045fe:	4619      	mov	r1, r3
 8004600:	b01f      	add	sp, #124	; 0x7c
 8004602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004606:	2a20      	cmp	r2, #32
 8004608:	d1cd      	bne.n	80045a6 <_strtod_l+0x3e>
 800460a:	3301      	adds	r3, #1
 800460c:	9319      	str	r3, [sp, #100]	; 0x64
 800460e:	e7bf      	b.n	8004590 <_strtod_l+0x28>
 8004610:	2a2d      	cmp	r2, #45	; 0x2d
 8004612:	d1c8      	bne.n	80045a6 <_strtod_l+0x3e>
 8004614:	2201      	movs	r2, #1
 8004616:	920a      	str	r2, [sp, #40]	; 0x28
 8004618:	1c5a      	adds	r2, r3, #1
 800461a:	9219      	str	r2, [sp, #100]	; 0x64
 800461c:	785b      	ldrb	r3, [r3, #1]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d1c3      	bne.n	80045aa <_strtod_l+0x42>
 8004622:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004624:	9619      	str	r6, [sp, #100]	; 0x64
 8004626:	2b00      	cmp	r3, #0
 8004628:	f040 856b 	bne.w	8005102 <_strtod_l+0xb9a>
 800462c:	4642      	mov	r2, r8
 800462e:	464b      	mov	r3, r9
 8004630:	e7e4      	b.n	80045fc <_strtod_l+0x94>
 8004632:	2200      	movs	r2, #0
 8004634:	e7ef      	b.n	8004616 <_strtod_l+0xae>
 8004636:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8004638:	b13a      	cbz	r2, 800464a <_strtod_l+0xe2>
 800463a:	2135      	movs	r1, #53	; 0x35
 800463c:	a81c      	add	r0, sp, #112	; 0x70
 800463e:	f002 fc8d 	bl	8006f5c <__copybits>
 8004642:	4650      	mov	r0, sl
 8004644:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004646:	f002 f855 	bl	80066f4 <_Bfree>
 800464a:	3e01      	subs	r6, #1
 800464c:	2e04      	cmp	r6, #4
 800464e:	d806      	bhi.n	800465e <_strtod_l+0xf6>
 8004650:	e8df f006 	tbb	[pc, r6]
 8004654:	1714030a 	.word	0x1714030a
 8004658:	0a          	.byte	0x0a
 8004659:	00          	.byte	0x00
 800465a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800465e:	0721      	lsls	r1, r4, #28
 8004660:	d5c3      	bpl.n	80045ea <_strtod_l+0x82>
 8004662:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8004666:	e7c0      	b.n	80045ea <_strtod_l+0x82>
 8004668:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800466a:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 800466e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8004672:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004676:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800467a:	e7f0      	b.n	800465e <_strtod_l+0xf6>
 800467c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80047f8 <_strtod_l+0x290>
 8004680:	e7ed      	b.n	800465e <_strtod_l+0xf6>
 8004682:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8004686:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800468a:	e7e8      	b.n	800465e <_strtod_l+0xf6>
 800468c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800468e:	1c5a      	adds	r2, r3, #1
 8004690:	9219      	str	r2, [sp, #100]	; 0x64
 8004692:	785b      	ldrb	r3, [r3, #1]
 8004694:	2b30      	cmp	r3, #48	; 0x30
 8004696:	d0f9      	beq.n	800468c <_strtod_l+0x124>
 8004698:	2b00      	cmp	r3, #0
 800469a:	d0a6      	beq.n	80045ea <_strtod_l+0x82>
 800469c:	2301      	movs	r3, #1
 800469e:	9307      	str	r3, [sp, #28]
 80046a0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80046a2:	220a      	movs	r2, #10
 80046a4:	9308      	str	r3, [sp, #32]
 80046a6:	2300      	movs	r3, #0
 80046a8:	469b      	mov	fp, r3
 80046aa:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80046ae:	9819      	ldr	r0, [sp, #100]	; 0x64
 80046b0:	7805      	ldrb	r5, [r0, #0]
 80046b2:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 80046b6:	b2d9      	uxtb	r1, r3
 80046b8:	2909      	cmp	r1, #9
 80046ba:	d927      	bls.n	800470c <_strtod_l+0x1a4>
 80046bc:	4622      	mov	r2, r4
 80046be:	4639      	mov	r1, r7
 80046c0:	f002 fef2 	bl	80074a8 <strncmp>
 80046c4:	2800      	cmp	r0, #0
 80046c6:	d033      	beq.n	8004730 <_strtod_l+0x1c8>
 80046c8:	2000      	movs	r0, #0
 80046ca:	462a      	mov	r2, r5
 80046cc:	465c      	mov	r4, fp
 80046ce:	4603      	mov	r3, r0
 80046d0:	9004      	str	r0, [sp, #16]
 80046d2:	2a65      	cmp	r2, #101	; 0x65
 80046d4:	d001      	beq.n	80046da <_strtod_l+0x172>
 80046d6:	2a45      	cmp	r2, #69	; 0x45
 80046d8:	d114      	bne.n	8004704 <_strtod_l+0x19c>
 80046da:	b91c      	cbnz	r4, 80046e4 <_strtod_l+0x17c>
 80046dc:	9a07      	ldr	r2, [sp, #28]
 80046de:	4302      	orrs	r2, r0
 80046e0:	d09f      	beq.n	8004622 <_strtod_l+0xba>
 80046e2:	2400      	movs	r4, #0
 80046e4:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80046e6:	1c72      	adds	r2, r6, #1
 80046e8:	9219      	str	r2, [sp, #100]	; 0x64
 80046ea:	7872      	ldrb	r2, [r6, #1]
 80046ec:	2a2b      	cmp	r2, #43	; 0x2b
 80046ee:	d079      	beq.n	80047e4 <_strtod_l+0x27c>
 80046f0:	2a2d      	cmp	r2, #45	; 0x2d
 80046f2:	f000 8083 	beq.w	80047fc <_strtod_l+0x294>
 80046f6:	2700      	movs	r7, #0
 80046f8:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80046fc:	2909      	cmp	r1, #9
 80046fe:	f240 8083 	bls.w	8004808 <_strtod_l+0x2a0>
 8004702:	9619      	str	r6, [sp, #100]	; 0x64
 8004704:	2500      	movs	r5, #0
 8004706:	e09f      	b.n	8004848 <_strtod_l+0x2e0>
 8004708:	2300      	movs	r3, #0
 800470a:	e7c8      	b.n	800469e <_strtod_l+0x136>
 800470c:	f1bb 0f08 	cmp.w	fp, #8
 8004710:	bfd5      	itete	le
 8004712:	9906      	ldrle	r1, [sp, #24]
 8004714:	9905      	ldrgt	r1, [sp, #20]
 8004716:	fb02 3301 	mlale	r3, r2, r1, r3
 800471a:	fb02 3301 	mlagt	r3, r2, r1, r3
 800471e:	f100 0001 	add.w	r0, r0, #1
 8004722:	bfd4      	ite	le
 8004724:	9306      	strle	r3, [sp, #24]
 8004726:	9305      	strgt	r3, [sp, #20]
 8004728:	f10b 0b01 	add.w	fp, fp, #1
 800472c:	9019      	str	r0, [sp, #100]	; 0x64
 800472e:	e7be      	b.n	80046ae <_strtod_l+0x146>
 8004730:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004732:	191a      	adds	r2, r3, r4
 8004734:	9219      	str	r2, [sp, #100]	; 0x64
 8004736:	5d1a      	ldrb	r2, [r3, r4]
 8004738:	f1bb 0f00 	cmp.w	fp, #0
 800473c:	d036      	beq.n	80047ac <_strtod_l+0x244>
 800473e:	465c      	mov	r4, fp
 8004740:	9004      	str	r0, [sp, #16]
 8004742:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8004746:	2b09      	cmp	r3, #9
 8004748:	d912      	bls.n	8004770 <_strtod_l+0x208>
 800474a:	2301      	movs	r3, #1
 800474c:	e7c1      	b.n	80046d2 <_strtod_l+0x16a>
 800474e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004750:	3001      	adds	r0, #1
 8004752:	1c5a      	adds	r2, r3, #1
 8004754:	9219      	str	r2, [sp, #100]	; 0x64
 8004756:	785a      	ldrb	r2, [r3, #1]
 8004758:	2a30      	cmp	r2, #48	; 0x30
 800475a:	d0f8      	beq.n	800474e <_strtod_l+0x1e6>
 800475c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8004760:	2b08      	cmp	r3, #8
 8004762:	f200 84d5 	bhi.w	8005110 <_strtod_l+0xba8>
 8004766:	9004      	str	r0, [sp, #16]
 8004768:	2000      	movs	r0, #0
 800476a:	4604      	mov	r4, r0
 800476c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800476e:	9308      	str	r3, [sp, #32]
 8004770:	3a30      	subs	r2, #48	; 0x30
 8004772:	f100 0301 	add.w	r3, r0, #1
 8004776:	d013      	beq.n	80047a0 <_strtod_l+0x238>
 8004778:	9904      	ldr	r1, [sp, #16]
 800477a:	1905      	adds	r5, r0, r4
 800477c:	4419      	add	r1, r3
 800477e:	9104      	str	r1, [sp, #16]
 8004780:	4623      	mov	r3, r4
 8004782:	210a      	movs	r1, #10
 8004784:	42ab      	cmp	r3, r5
 8004786:	d113      	bne.n	80047b0 <_strtod_l+0x248>
 8004788:	1823      	adds	r3, r4, r0
 800478a:	2b08      	cmp	r3, #8
 800478c:	f104 0401 	add.w	r4, r4, #1
 8004790:	4404      	add	r4, r0
 8004792:	dc1b      	bgt.n	80047cc <_strtod_l+0x264>
 8004794:	230a      	movs	r3, #10
 8004796:	9906      	ldr	r1, [sp, #24]
 8004798:	fb03 2301 	mla	r3, r3, r1, r2
 800479c:	9306      	str	r3, [sp, #24]
 800479e:	2300      	movs	r3, #0
 80047a0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80047a2:	4618      	mov	r0, r3
 80047a4:	1c51      	adds	r1, r2, #1
 80047a6:	9119      	str	r1, [sp, #100]	; 0x64
 80047a8:	7852      	ldrb	r2, [r2, #1]
 80047aa:	e7ca      	b.n	8004742 <_strtod_l+0x1da>
 80047ac:	4658      	mov	r0, fp
 80047ae:	e7d3      	b.n	8004758 <_strtod_l+0x1f0>
 80047b0:	2b08      	cmp	r3, #8
 80047b2:	dc04      	bgt.n	80047be <_strtod_l+0x256>
 80047b4:	9f06      	ldr	r7, [sp, #24]
 80047b6:	434f      	muls	r7, r1
 80047b8:	9706      	str	r7, [sp, #24]
 80047ba:	3301      	adds	r3, #1
 80047bc:	e7e2      	b.n	8004784 <_strtod_l+0x21c>
 80047be:	1c5f      	adds	r7, r3, #1
 80047c0:	2f10      	cmp	r7, #16
 80047c2:	bfde      	ittt	le
 80047c4:	9f05      	ldrle	r7, [sp, #20]
 80047c6:	434f      	mulle	r7, r1
 80047c8:	9705      	strle	r7, [sp, #20]
 80047ca:	e7f6      	b.n	80047ba <_strtod_l+0x252>
 80047cc:	2c10      	cmp	r4, #16
 80047ce:	bfdf      	itttt	le
 80047d0:	230a      	movle	r3, #10
 80047d2:	9905      	ldrle	r1, [sp, #20]
 80047d4:	fb03 2301 	mlale	r3, r3, r1, r2
 80047d8:	9305      	strle	r3, [sp, #20]
 80047da:	e7e0      	b.n	800479e <_strtod_l+0x236>
 80047dc:	2300      	movs	r3, #0
 80047de:	9304      	str	r3, [sp, #16]
 80047e0:	2301      	movs	r3, #1
 80047e2:	e77b      	b.n	80046dc <_strtod_l+0x174>
 80047e4:	2700      	movs	r7, #0
 80047e6:	1cb2      	adds	r2, r6, #2
 80047e8:	9219      	str	r2, [sp, #100]	; 0x64
 80047ea:	78b2      	ldrb	r2, [r6, #2]
 80047ec:	e784      	b.n	80046f8 <_strtod_l+0x190>
 80047ee:	bf00      	nop
 80047f0:	08008398 	.word	0x08008398
 80047f4:	08008150 	.word	0x08008150
 80047f8:	7ff00000 	.word	0x7ff00000
 80047fc:	2701      	movs	r7, #1
 80047fe:	e7f2      	b.n	80047e6 <_strtod_l+0x27e>
 8004800:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004802:	1c51      	adds	r1, r2, #1
 8004804:	9119      	str	r1, [sp, #100]	; 0x64
 8004806:	7852      	ldrb	r2, [r2, #1]
 8004808:	2a30      	cmp	r2, #48	; 0x30
 800480a:	d0f9      	beq.n	8004800 <_strtod_l+0x298>
 800480c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8004810:	2908      	cmp	r1, #8
 8004812:	f63f af77 	bhi.w	8004704 <_strtod_l+0x19c>
 8004816:	f04f 0e0a 	mov.w	lr, #10
 800481a:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800481e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004820:	9209      	str	r2, [sp, #36]	; 0x24
 8004822:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004824:	1c51      	adds	r1, r2, #1
 8004826:	9119      	str	r1, [sp, #100]	; 0x64
 8004828:	7852      	ldrb	r2, [r2, #1]
 800482a:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800482e:	2d09      	cmp	r5, #9
 8004830:	d935      	bls.n	800489e <_strtod_l+0x336>
 8004832:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8004834:	1b49      	subs	r1, r1, r5
 8004836:	2908      	cmp	r1, #8
 8004838:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800483c:	dc02      	bgt.n	8004844 <_strtod_l+0x2dc>
 800483e:	4565      	cmp	r5, ip
 8004840:	bfa8      	it	ge
 8004842:	4665      	movge	r5, ip
 8004844:	b107      	cbz	r7, 8004848 <_strtod_l+0x2e0>
 8004846:	426d      	negs	r5, r5
 8004848:	2c00      	cmp	r4, #0
 800484a:	d14c      	bne.n	80048e6 <_strtod_l+0x37e>
 800484c:	9907      	ldr	r1, [sp, #28]
 800484e:	4301      	orrs	r1, r0
 8004850:	f47f aecb 	bne.w	80045ea <_strtod_l+0x82>
 8004854:	2b00      	cmp	r3, #0
 8004856:	f47f aee4 	bne.w	8004622 <_strtod_l+0xba>
 800485a:	2a69      	cmp	r2, #105	; 0x69
 800485c:	d026      	beq.n	80048ac <_strtod_l+0x344>
 800485e:	dc23      	bgt.n	80048a8 <_strtod_l+0x340>
 8004860:	2a49      	cmp	r2, #73	; 0x49
 8004862:	d023      	beq.n	80048ac <_strtod_l+0x344>
 8004864:	2a4e      	cmp	r2, #78	; 0x4e
 8004866:	f47f aedc 	bne.w	8004622 <_strtod_l+0xba>
 800486a:	499d      	ldr	r1, [pc, #628]	; (8004ae0 <_strtod_l+0x578>)
 800486c:	a819      	add	r0, sp, #100	; 0x64
 800486e:	f001 fe17 	bl	80064a0 <__match>
 8004872:	2800      	cmp	r0, #0
 8004874:	f43f aed5 	beq.w	8004622 <_strtod_l+0xba>
 8004878:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800487a:	781b      	ldrb	r3, [r3, #0]
 800487c:	2b28      	cmp	r3, #40	; 0x28
 800487e:	d12c      	bne.n	80048da <_strtod_l+0x372>
 8004880:	4998      	ldr	r1, [pc, #608]	; (8004ae4 <_strtod_l+0x57c>)
 8004882:	aa1c      	add	r2, sp, #112	; 0x70
 8004884:	a819      	add	r0, sp, #100	; 0x64
 8004886:	f001 fe1f 	bl	80064c8 <__hexnan>
 800488a:	2805      	cmp	r0, #5
 800488c:	d125      	bne.n	80048da <_strtod_l+0x372>
 800488e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004890:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8004894:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8004898:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800489c:	e6a5      	b.n	80045ea <_strtod_l+0x82>
 800489e:	fb0e 2c0c 	mla	ip, lr, ip, r2
 80048a2:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 80048a6:	e7bc      	b.n	8004822 <_strtod_l+0x2ba>
 80048a8:	2a6e      	cmp	r2, #110	; 0x6e
 80048aa:	e7dc      	b.n	8004866 <_strtod_l+0x2fe>
 80048ac:	498e      	ldr	r1, [pc, #568]	; (8004ae8 <_strtod_l+0x580>)
 80048ae:	a819      	add	r0, sp, #100	; 0x64
 80048b0:	f001 fdf6 	bl	80064a0 <__match>
 80048b4:	2800      	cmp	r0, #0
 80048b6:	f43f aeb4 	beq.w	8004622 <_strtod_l+0xba>
 80048ba:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80048bc:	498b      	ldr	r1, [pc, #556]	; (8004aec <_strtod_l+0x584>)
 80048be:	3b01      	subs	r3, #1
 80048c0:	a819      	add	r0, sp, #100	; 0x64
 80048c2:	9319      	str	r3, [sp, #100]	; 0x64
 80048c4:	f001 fdec 	bl	80064a0 <__match>
 80048c8:	b910      	cbnz	r0, 80048d0 <_strtod_l+0x368>
 80048ca:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80048cc:	3301      	adds	r3, #1
 80048ce:	9319      	str	r3, [sp, #100]	; 0x64
 80048d0:	f04f 0800 	mov.w	r8, #0
 80048d4:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8004af0 <_strtod_l+0x588>
 80048d8:	e687      	b.n	80045ea <_strtod_l+0x82>
 80048da:	4886      	ldr	r0, [pc, #536]	; (8004af4 <_strtod_l+0x58c>)
 80048dc:	f002 fdce 	bl	800747c <nan>
 80048e0:	4680      	mov	r8, r0
 80048e2:	4689      	mov	r9, r1
 80048e4:	e681      	b.n	80045ea <_strtod_l+0x82>
 80048e6:	9b04      	ldr	r3, [sp, #16]
 80048e8:	f1bb 0f00 	cmp.w	fp, #0
 80048ec:	bf08      	it	eq
 80048ee:	46a3      	moveq	fp, r4
 80048f0:	1aeb      	subs	r3, r5, r3
 80048f2:	2c10      	cmp	r4, #16
 80048f4:	9806      	ldr	r0, [sp, #24]
 80048f6:	4626      	mov	r6, r4
 80048f8:	9307      	str	r3, [sp, #28]
 80048fa:	bfa8      	it	ge
 80048fc:	2610      	movge	r6, #16
 80048fe:	f7fb fd89 	bl	8000414 <__aeabi_ui2d>
 8004902:	2c09      	cmp	r4, #9
 8004904:	4680      	mov	r8, r0
 8004906:	4689      	mov	r9, r1
 8004908:	dd13      	ble.n	8004932 <_strtod_l+0x3ca>
 800490a:	4b7b      	ldr	r3, [pc, #492]	; (8004af8 <_strtod_l+0x590>)
 800490c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004910:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8004914:	f7fb fdf8 	bl	8000508 <__aeabi_dmul>
 8004918:	4680      	mov	r8, r0
 800491a:	9805      	ldr	r0, [sp, #20]
 800491c:	4689      	mov	r9, r1
 800491e:	f7fb fd79 	bl	8000414 <__aeabi_ui2d>
 8004922:	4602      	mov	r2, r0
 8004924:	460b      	mov	r3, r1
 8004926:	4640      	mov	r0, r8
 8004928:	4649      	mov	r1, r9
 800492a:	f7fb fc37 	bl	800019c <__adddf3>
 800492e:	4680      	mov	r8, r0
 8004930:	4689      	mov	r9, r1
 8004932:	2c0f      	cmp	r4, #15
 8004934:	dc36      	bgt.n	80049a4 <_strtod_l+0x43c>
 8004936:	9b07      	ldr	r3, [sp, #28]
 8004938:	2b00      	cmp	r3, #0
 800493a:	f43f ae56 	beq.w	80045ea <_strtod_l+0x82>
 800493e:	dd22      	ble.n	8004986 <_strtod_l+0x41e>
 8004940:	2b16      	cmp	r3, #22
 8004942:	dc09      	bgt.n	8004958 <_strtod_l+0x3f0>
 8004944:	496c      	ldr	r1, [pc, #432]	; (8004af8 <_strtod_l+0x590>)
 8004946:	4642      	mov	r2, r8
 8004948:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800494c:	464b      	mov	r3, r9
 800494e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004952:	f7fb fdd9 	bl	8000508 <__aeabi_dmul>
 8004956:	e7c3      	b.n	80048e0 <_strtod_l+0x378>
 8004958:	9a07      	ldr	r2, [sp, #28]
 800495a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800495e:	4293      	cmp	r3, r2
 8004960:	db20      	blt.n	80049a4 <_strtod_l+0x43c>
 8004962:	4d65      	ldr	r5, [pc, #404]	; (8004af8 <_strtod_l+0x590>)
 8004964:	f1c4 040f 	rsb	r4, r4, #15
 8004968:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800496c:	4642      	mov	r2, r8
 800496e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004972:	464b      	mov	r3, r9
 8004974:	f7fb fdc8 	bl	8000508 <__aeabi_dmul>
 8004978:	9b07      	ldr	r3, [sp, #28]
 800497a:	1b1c      	subs	r4, r3, r4
 800497c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8004980:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004984:	e7e5      	b.n	8004952 <_strtod_l+0x3ea>
 8004986:	9b07      	ldr	r3, [sp, #28]
 8004988:	3316      	adds	r3, #22
 800498a:	db0b      	blt.n	80049a4 <_strtod_l+0x43c>
 800498c:	9b04      	ldr	r3, [sp, #16]
 800498e:	4640      	mov	r0, r8
 8004990:	1b5d      	subs	r5, r3, r5
 8004992:	4b59      	ldr	r3, [pc, #356]	; (8004af8 <_strtod_l+0x590>)
 8004994:	4649      	mov	r1, r9
 8004996:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800499a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800499e:	f7fb fedd 	bl	800075c <__aeabi_ddiv>
 80049a2:	e79d      	b.n	80048e0 <_strtod_l+0x378>
 80049a4:	9b07      	ldr	r3, [sp, #28]
 80049a6:	1ba6      	subs	r6, r4, r6
 80049a8:	441e      	add	r6, r3
 80049aa:	2e00      	cmp	r6, #0
 80049ac:	dd74      	ble.n	8004a98 <_strtod_l+0x530>
 80049ae:	f016 030f 	ands.w	r3, r6, #15
 80049b2:	d00a      	beq.n	80049ca <_strtod_l+0x462>
 80049b4:	4950      	ldr	r1, [pc, #320]	; (8004af8 <_strtod_l+0x590>)
 80049b6:	4642      	mov	r2, r8
 80049b8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80049bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80049c0:	464b      	mov	r3, r9
 80049c2:	f7fb fda1 	bl	8000508 <__aeabi_dmul>
 80049c6:	4680      	mov	r8, r0
 80049c8:	4689      	mov	r9, r1
 80049ca:	f036 060f 	bics.w	r6, r6, #15
 80049ce:	d052      	beq.n	8004a76 <_strtod_l+0x50e>
 80049d0:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 80049d4:	dd27      	ble.n	8004a26 <_strtod_l+0x4be>
 80049d6:	f04f 0b00 	mov.w	fp, #0
 80049da:	f8cd b010 	str.w	fp, [sp, #16]
 80049de:	f8cd b020 	str.w	fp, [sp, #32]
 80049e2:	f8cd b018 	str.w	fp, [sp, #24]
 80049e6:	2322      	movs	r3, #34	; 0x22
 80049e8:	f04f 0800 	mov.w	r8, #0
 80049ec:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8004af0 <_strtod_l+0x588>
 80049f0:	f8ca 3000 	str.w	r3, [sl]
 80049f4:	9b08      	ldr	r3, [sp, #32]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	f43f adf7 	beq.w	80045ea <_strtod_l+0x82>
 80049fc:	4650      	mov	r0, sl
 80049fe:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004a00:	f001 fe78 	bl	80066f4 <_Bfree>
 8004a04:	4650      	mov	r0, sl
 8004a06:	9906      	ldr	r1, [sp, #24]
 8004a08:	f001 fe74 	bl	80066f4 <_Bfree>
 8004a0c:	4650      	mov	r0, sl
 8004a0e:	9904      	ldr	r1, [sp, #16]
 8004a10:	f001 fe70 	bl	80066f4 <_Bfree>
 8004a14:	4650      	mov	r0, sl
 8004a16:	9908      	ldr	r1, [sp, #32]
 8004a18:	f001 fe6c 	bl	80066f4 <_Bfree>
 8004a1c:	4659      	mov	r1, fp
 8004a1e:	4650      	mov	r0, sl
 8004a20:	f001 fe68 	bl	80066f4 <_Bfree>
 8004a24:	e5e1      	b.n	80045ea <_strtod_l+0x82>
 8004a26:	4b35      	ldr	r3, [pc, #212]	; (8004afc <_strtod_l+0x594>)
 8004a28:	4640      	mov	r0, r8
 8004a2a:	9305      	str	r3, [sp, #20]
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	4649      	mov	r1, r9
 8004a30:	461f      	mov	r7, r3
 8004a32:	1136      	asrs	r6, r6, #4
 8004a34:	2e01      	cmp	r6, #1
 8004a36:	dc21      	bgt.n	8004a7c <_strtod_l+0x514>
 8004a38:	b10b      	cbz	r3, 8004a3e <_strtod_l+0x4d6>
 8004a3a:	4680      	mov	r8, r0
 8004a3c:	4689      	mov	r9, r1
 8004a3e:	4b2f      	ldr	r3, [pc, #188]	; (8004afc <_strtod_l+0x594>)
 8004a40:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8004a44:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8004a48:	4642      	mov	r2, r8
 8004a4a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004a4e:	464b      	mov	r3, r9
 8004a50:	f7fb fd5a 	bl	8000508 <__aeabi_dmul>
 8004a54:	4b26      	ldr	r3, [pc, #152]	; (8004af0 <_strtod_l+0x588>)
 8004a56:	460a      	mov	r2, r1
 8004a58:	400b      	ands	r3, r1
 8004a5a:	4929      	ldr	r1, [pc, #164]	; (8004b00 <_strtod_l+0x598>)
 8004a5c:	4680      	mov	r8, r0
 8004a5e:	428b      	cmp	r3, r1
 8004a60:	d8b9      	bhi.n	80049d6 <_strtod_l+0x46e>
 8004a62:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8004a66:	428b      	cmp	r3, r1
 8004a68:	bf86      	itte	hi
 8004a6a:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 8004a6e:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8004b04 <_strtod_l+0x59c>
 8004a72:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8004a76:	2300      	movs	r3, #0
 8004a78:	9305      	str	r3, [sp, #20]
 8004a7a:	e07f      	b.n	8004b7c <_strtod_l+0x614>
 8004a7c:	07f2      	lsls	r2, r6, #31
 8004a7e:	d505      	bpl.n	8004a8c <_strtod_l+0x524>
 8004a80:	9b05      	ldr	r3, [sp, #20]
 8004a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a86:	f7fb fd3f 	bl	8000508 <__aeabi_dmul>
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	9a05      	ldr	r2, [sp, #20]
 8004a8e:	3701      	adds	r7, #1
 8004a90:	3208      	adds	r2, #8
 8004a92:	1076      	asrs	r6, r6, #1
 8004a94:	9205      	str	r2, [sp, #20]
 8004a96:	e7cd      	b.n	8004a34 <_strtod_l+0x4cc>
 8004a98:	d0ed      	beq.n	8004a76 <_strtod_l+0x50e>
 8004a9a:	4276      	negs	r6, r6
 8004a9c:	f016 020f 	ands.w	r2, r6, #15
 8004aa0:	d00a      	beq.n	8004ab8 <_strtod_l+0x550>
 8004aa2:	4b15      	ldr	r3, [pc, #84]	; (8004af8 <_strtod_l+0x590>)
 8004aa4:	4640      	mov	r0, r8
 8004aa6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004aaa:	4649      	mov	r1, r9
 8004aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ab0:	f7fb fe54 	bl	800075c <__aeabi_ddiv>
 8004ab4:	4680      	mov	r8, r0
 8004ab6:	4689      	mov	r9, r1
 8004ab8:	1136      	asrs	r6, r6, #4
 8004aba:	d0dc      	beq.n	8004a76 <_strtod_l+0x50e>
 8004abc:	2e1f      	cmp	r6, #31
 8004abe:	dd23      	ble.n	8004b08 <_strtod_l+0x5a0>
 8004ac0:	f04f 0b00 	mov.w	fp, #0
 8004ac4:	f8cd b010 	str.w	fp, [sp, #16]
 8004ac8:	f8cd b020 	str.w	fp, [sp, #32]
 8004acc:	f8cd b018 	str.w	fp, [sp, #24]
 8004ad0:	2322      	movs	r3, #34	; 0x22
 8004ad2:	f04f 0800 	mov.w	r8, #0
 8004ad6:	f04f 0900 	mov.w	r9, #0
 8004ada:	f8ca 3000 	str.w	r3, [sl]
 8004ade:	e789      	b.n	80049f4 <_strtod_l+0x48c>
 8004ae0:	08008121 	.word	0x08008121
 8004ae4:	08008164 	.word	0x08008164
 8004ae8:	08008119 	.word	0x08008119
 8004aec:	080082a4 	.word	0x080082a4
 8004af0:	7ff00000 	.word	0x7ff00000
 8004af4:	08008550 	.word	0x08008550
 8004af8:	08008430 	.word	0x08008430
 8004afc:	08008408 	.word	0x08008408
 8004b00:	7ca00000 	.word	0x7ca00000
 8004b04:	7fefffff 	.word	0x7fefffff
 8004b08:	f016 0310 	ands.w	r3, r6, #16
 8004b0c:	bf18      	it	ne
 8004b0e:	236a      	movne	r3, #106	; 0x6a
 8004b10:	4640      	mov	r0, r8
 8004b12:	9305      	str	r3, [sp, #20]
 8004b14:	4649      	mov	r1, r9
 8004b16:	2300      	movs	r3, #0
 8004b18:	4fb0      	ldr	r7, [pc, #704]	; (8004ddc <_strtod_l+0x874>)
 8004b1a:	07f2      	lsls	r2, r6, #31
 8004b1c:	d504      	bpl.n	8004b28 <_strtod_l+0x5c0>
 8004b1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b22:	f7fb fcf1 	bl	8000508 <__aeabi_dmul>
 8004b26:	2301      	movs	r3, #1
 8004b28:	1076      	asrs	r6, r6, #1
 8004b2a:	f107 0708 	add.w	r7, r7, #8
 8004b2e:	d1f4      	bne.n	8004b1a <_strtod_l+0x5b2>
 8004b30:	b10b      	cbz	r3, 8004b36 <_strtod_l+0x5ce>
 8004b32:	4680      	mov	r8, r0
 8004b34:	4689      	mov	r9, r1
 8004b36:	9b05      	ldr	r3, [sp, #20]
 8004b38:	b1c3      	cbz	r3, 8004b6c <_strtod_l+0x604>
 8004b3a:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8004b3e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	4649      	mov	r1, r9
 8004b46:	dd11      	ble.n	8004b6c <_strtod_l+0x604>
 8004b48:	2b1f      	cmp	r3, #31
 8004b4a:	f340 8127 	ble.w	8004d9c <_strtod_l+0x834>
 8004b4e:	2b34      	cmp	r3, #52	; 0x34
 8004b50:	bfd8      	it	le
 8004b52:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8004b56:	f04f 0800 	mov.w	r8, #0
 8004b5a:	bfcf      	iteee	gt
 8004b5c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8004b60:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8004b64:	fa03 f202 	lslle.w	r2, r3, r2
 8004b68:	ea02 0901 	andle.w	r9, r2, r1
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	2300      	movs	r3, #0
 8004b70:	4640      	mov	r0, r8
 8004b72:	4649      	mov	r1, r9
 8004b74:	f7fb ff30 	bl	80009d8 <__aeabi_dcmpeq>
 8004b78:	2800      	cmp	r0, #0
 8004b7a:	d1a1      	bne.n	8004ac0 <_strtod_l+0x558>
 8004b7c:	9b06      	ldr	r3, [sp, #24]
 8004b7e:	465a      	mov	r2, fp
 8004b80:	9300      	str	r3, [sp, #0]
 8004b82:	4650      	mov	r0, sl
 8004b84:	4623      	mov	r3, r4
 8004b86:	9908      	ldr	r1, [sp, #32]
 8004b88:	f001 fe1c 	bl	80067c4 <__s2b>
 8004b8c:	9008      	str	r0, [sp, #32]
 8004b8e:	2800      	cmp	r0, #0
 8004b90:	f43f af21 	beq.w	80049d6 <_strtod_l+0x46e>
 8004b94:	9b04      	ldr	r3, [sp, #16]
 8004b96:	f04f 0b00 	mov.w	fp, #0
 8004b9a:	1b5d      	subs	r5, r3, r5
 8004b9c:	9b07      	ldr	r3, [sp, #28]
 8004b9e:	f8cd b010 	str.w	fp, [sp, #16]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	bfb4      	ite	lt
 8004ba6:	462b      	movlt	r3, r5
 8004ba8:	2300      	movge	r3, #0
 8004baa:	930e      	str	r3, [sp, #56]	; 0x38
 8004bac:	9b07      	ldr	r3, [sp, #28]
 8004bae:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004bb2:	9314      	str	r3, [sp, #80]	; 0x50
 8004bb4:	9b08      	ldr	r3, [sp, #32]
 8004bb6:	4650      	mov	r0, sl
 8004bb8:	6859      	ldr	r1, [r3, #4]
 8004bba:	f001 fd5b 	bl	8006674 <_Balloc>
 8004bbe:	9006      	str	r0, [sp, #24]
 8004bc0:	2800      	cmp	r0, #0
 8004bc2:	f43f af10 	beq.w	80049e6 <_strtod_l+0x47e>
 8004bc6:	9b08      	ldr	r3, [sp, #32]
 8004bc8:	300c      	adds	r0, #12
 8004bca:	691a      	ldr	r2, [r3, #16]
 8004bcc:	f103 010c 	add.w	r1, r3, #12
 8004bd0:	3202      	adds	r2, #2
 8004bd2:	0092      	lsls	r2, r2, #2
 8004bd4:	f001 fd40 	bl	8006658 <memcpy>
 8004bd8:	ab1c      	add	r3, sp, #112	; 0x70
 8004bda:	9301      	str	r3, [sp, #4]
 8004bdc:	ab1b      	add	r3, sp, #108	; 0x6c
 8004bde:	9300      	str	r3, [sp, #0]
 8004be0:	4642      	mov	r2, r8
 8004be2:	464b      	mov	r3, r9
 8004be4:	4650      	mov	r0, sl
 8004be6:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8004bea:	f002 f92d 	bl	8006e48 <__d2b>
 8004bee:	901a      	str	r0, [sp, #104]	; 0x68
 8004bf0:	2800      	cmp	r0, #0
 8004bf2:	f43f aef8 	beq.w	80049e6 <_strtod_l+0x47e>
 8004bf6:	2101      	movs	r1, #1
 8004bf8:	4650      	mov	r0, sl
 8004bfa:	f001 fe7b 	bl	80068f4 <__i2b>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	9004      	str	r0, [sp, #16]
 8004c02:	2800      	cmp	r0, #0
 8004c04:	f43f aeef 	beq.w	80049e6 <_strtod_l+0x47e>
 8004c08:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8004c0a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8004c0c:	2d00      	cmp	r5, #0
 8004c0e:	bfab      	itete	ge
 8004c10:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8004c12:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 8004c14:	18ee      	addge	r6, r5, r3
 8004c16:	1b5c      	sublt	r4, r3, r5
 8004c18:	9b05      	ldr	r3, [sp, #20]
 8004c1a:	bfa8      	it	ge
 8004c1c:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 8004c1e:	eba5 0503 	sub.w	r5, r5, r3
 8004c22:	4415      	add	r5, r2
 8004c24:	4b6e      	ldr	r3, [pc, #440]	; (8004de0 <_strtod_l+0x878>)
 8004c26:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 8004c2a:	bfb8      	it	lt
 8004c2c:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8004c2e:	429d      	cmp	r5, r3
 8004c30:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8004c34:	f280 80c4 	bge.w	8004dc0 <_strtod_l+0x858>
 8004c38:	1b5b      	subs	r3, r3, r5
 8004c3a:	2b1f      	cmp	r3, #31
 8004c3c:	f04f 0701 	mov.w	r7, #1
 8004c40:	eba2 0203 	sub.w	r2, r2, r3
 8004c44:	f300 80b1 	bgt.w	8004daa <_strtod_l+0x842>
 8004c48:	2500      	movs	r5, #0
 8004c4a:	fa07 f303 	lsl.w	r3, r7, r3
 8004c4e:	930f      	str	r3, [sp, #60]	; 0x3c
 8004c50:	18b7      	adds	r7, r6, r2
 8004c52:	9b05      	ldr	r3, [sp, #20]
 8004c54:	42be      	cmp	r6, r7
 8004c56:	4414      	add	r4, r2
 8004c58:	441c      	add	r4, r3
 8004c5a:	4633      	mov	r3, r6
 8004c5c:	bfa8      	it	ge
 8004c5e:	463b      	movge	r3, r7
 8004c60:	42a3      	cmp	r3, r4
 8004c62:	bfa8      	it	ge
 8004c64:	4623      	movge	r3, r4
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	bfc2      	ittt	gt
 8004c6a:	1aff      	subgt	r7, r7, r3
 8004c6c:	1ae4      	subgt	r4, r4, r3
 8004c6e:	1af6      	subgt	r6, r6, r3
 8004c70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	dd17      	ble.n	8004ca6 <_strtod_l+0x73e>
 8004c76:	461a      	mov	r2, r3
 8004c78:	4650      	mov	r0, sl
 8004c7a:	9904      	ldr	r1, [sp, #16]
 8004c7c:	f001 fef8 	bl	8006a70 <__pow5mult>
 8004c80:	9004      	str	r0, [sp, #16]
 8004c82:	2800      	cmp	r0, #0
 8004c84:	f43f aeaf 	beq.w	80049e6 <_strtod_l+0x47e>
 8004c88:	4601      	mov	r1, r0
 8004c8a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8004c8c:	4650      	mov	r0, sl
 8004c8e:	f001 fe47 	bl	8006920 <__multiply>
 8004c92:	9009      	str	r0, [sp, #36]	; 0x24
 8004c94:	2800      	cmp	r0, #0
 8004c96:	f43f aea6 	beq.w	80049e6 <_strtod_l+0x47e>
 8004c9a:	4650      	mov	r0, sl
 8004c9c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004c9e:	f001 fd29 	bl	80066f4 <_Bfree>
 8004ca2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ca4:	931a      	str	r3, [sp, #104]	; 0x68
 8004ca6:	2f00      	cmp	r7, #0
 8004ca8:	f300 808e 	bgt.w	8004dc8 <_strtod_l+0x860>
 8004cac:	9b07      	ldr	r3, [sp, #28]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	dd08      	ble.n	8004cc4 <_strtod_l+0x75c>
 8004cb2:	4650      	mov	r0, sl
 8004cb4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8004cb6:	9906      	ldr	r1, [sp, #24]
 8004cb8:	f001 feda 	bl	8006a70 <__pow5mult>
 8004cbc:	9006      	str	r0, [sp, #24]
 8004cbe:	2800      	cmp	r0, #0
 8004cc0:	f43f ae91 	beq.w	80049e6 <_strtod_l+0x47e>
 8004cc4:	2c00      	cmp	r4, #0
 8004cc6:	dd08      	ble.n	8004cda <_strtod_l+0x772>
 8004cc8:	4622      	mov	r2, r4
 8004cca:	4650      	mov	r0, sl
 8004ccc:	9906      	ldr	r1, [sp, #24]
 8004cce:	f001 ff29 	bl	8006b24 <__lshift>
 8004cd2:	9006      	str	r0, [sp, #24]
 8004cd4:	2800      	cmp	r0, #0
 8004cd6:	f43f ae86 	beq.w	80049e6 <_strtod_l+0x47e>
 8004cda:	2e00      	cmp	r6, #0
 8004cdc:	dd08      	ble.n	8004cf0 <_strtod_l+0x788>
 8004cde:	4632      	mov	r2, r6
 8004ce0:	4650      	mov	r0, sl
 8004ce2:	9904      	ldr	r1, [sp, #16]
 8004ce4:	f001 ff1e 	bl	8006b24 <__lshift>
 8004ce8:	9004      	str	r0, [sp, #16]
 8004cea:	2800      	cmp	r0, #0
 8004cec:	f43f ae7b 	beq.w	80049e6 <_strtod_l+0x47e>
 8004cf0:	4650      	mov	r0, sl
 8004cf2:	9a06      	ldr	r2, [sp, #24]
 8004cf4:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004cf6:	f001 ffa1 	bl	8006c3c <__mdiff>
 8004cfa:	4683      	mov	fp, r0
 8004cfc:	2800      	cmp	r0, #0
 8004cfe:	f43f ae72 	beq.w	80049e6 <_strtod_l+0x47e>
 8004d02:	2400      	movs	r4, #0
 8004d04:	68c3      	ldr	r3, [r0, #12]
 8004d06:	9904      	ldr	r1, [sp, #16]
 8004d08:	60c4      	str	r4, [r0, #12]
 8004d0a:	930b      	str	r3, [sp, #44]	; 0x2c
 8004d0c:	f001 ff7a 	bl	8006c04 <__mcmp>
 8004d10:	42a0      	cmp	r0, r4
 8004d12:	da6b      	bge.n	8004dec <_strtod_l+0x884>
 8004d14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004d16:	ea53 0308 	orrs.w	r3, r3, r8
 8004d1a:	f040 8091 	bne.w	8004e40 <_strtod_l+0x8d8>
 8004d1e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	f040 808c 	bne.w	8004e40 <_strtod_l+0x8d8>
 8004d28:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004d2c:	0d1b      	lsrs	r3, r3, #20
 8004d2e:	051b      	lsls	r3, r3, #20
 8004d30:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8004d34:	f240 8084 	bls.w	8004e40 <_strtod_l+0x8d8>
 8004d38:	f8db 3014 	ldr.w	r3, [fp, #20]
 8004d3c:	b91b      	cbnz	r3, 8004d46 <_strtod_l+0x7de>
 8004d3e:	f8db 3010 	ldr.w	r3, [fp, #16]
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	dd7c      	ble.n	8004e40 <_strtod_l+0x8d8>
 8004d46:	4659      	mov	r1, fp
 8004d48:	2201      	movs	r2, #1
 8004d4a:	4650      	mov	r0, sl
 8004d4c:	f001 feea 	bl	8006b24 <__lshift>
 8004d50:	9904      	ldr	r1, [sp, #16]
 8004d52:	4683      	mov	fp, r0
 8004d54:	f001 ff56 	bl	8006c04 <__mcmp>
 8004d58:	2800      	cmp	r0, #0
 8004d5a:	dd71      	ble.n	8004e40 <_strtod_l+0x8d8>
 8004d5c:	9905      	ldr	r1, [sp, #20]
 8004d5e:	464b      	mov	r3, r9
 8004d60:	4a20      	ldr	r2, [pc, #128]	; (8004de4 <_strtod_l+0x87c>)
 8004d62:	2900      	cmp	r1, #0
 8004d64:	f000 808c 	beq.w	8004e80 <_strtod_l+0x918>
 8004d68:	ea02 0109 	and.w	r1, r2, r9
 8004d6c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8004d70:	f300 8086 	bgt.w	8004e80 <_strtod_l+0x918>
 8004d74:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8004d78:	f77f aeaa 	ble.w	8004ad0 <_strtod_l+0x568>
 8004d7c:	4640      	mov	r0, r8
 8004d7e:	4649      	mov	r1, r9
 8004d80:	4b19      	ldr	r3, [pc, #100]	; (8004de8 <_strtod_l+0x880>)
 8004d82:	2200      	movs	r2, #0
 8004d84:	f7fb fbc0 	bl	8000508 <__aeabi_dmul>
 8004d88:	460b      	mov	r3, r1
 8004d8a:	4303      	orrs	r3, r0
 8004d8c:	bf08      	it	eq
 8004d8e:	2322      	moveq	r3, #34	; 0x22
 8004d90:	4680      	mov	r8, r0
 8004d92:	4689      	mov	r9, r1
 8004d94:	bf08      	it	eq
 8004d96:	f8ca 3000 	streq.w	r3, [sl]
 8004d9a:	e62f      	b.n	80049fc <_strtod_l+0x494>
 8004d9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004da0:	fa02 f303 	lsl.w	r3, r2, r3
 8004da4:	ea03 0808 	and.w	r8, r3, r8
 8004da8:	e6e0      	b.n	8004b6c <_strtod_l+0x604>
 8004daa:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8004dae:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8004db2:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8004db6:	35e2      	adds	r5, #226	; 0xe2
 8004db8:	fa07 f505 	lsl.w	r5, r7, r5
 8004dbc:	970f      	str	r7, [sp, #60]	; 0x3c
 8004dbe:	e747      	b.n	8004c50 <_strtod_l+0x6e8>
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	2500      	movs	r5, #0
 8004dc4:	930f      	str	r3, [sp, #60]	; 0x3c
 8004dc6:	e743      	b.n	8004c50 <_strtod_l+0x6e8>
 8004dc8:	463a      	mov	r2, r7
 8004dca:	4650      	mov	r0, sl
 8004dcc:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004dce:	f001 fea9 	bl	8006b24 <__lshift>
 8004dd2:	901a      	str	r0, [sp, #104]	; 0x68
 8004dd4:	2800      	cmp	r0, #0
 8004dd6:	f47f af69 	bne.w	8004cac <_strtod_l+0x744>
 8004dda:	e604      	b.n	80049e6 <_strtod_l+0x47e>
 8004ddc:	08008178 	.word	0x08008178
 8004de0:	fffffc02 	.word	0xfffffc02
 8004de4:	7ff00000 	.word	0x7ff00000
 8004de8:	39500000 	.word	0x39500000
 8004dec:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8004df0:	d165      	bne.n	8004ebe <_strtod_l+0x956>
 8004df2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004df4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004df8:	b35a      	cbz	r2, 8004e52 <_strtod_l+0x8ea>
 8004dfa:	4a99      	ldr	r2, [pc, #612]	; (8005060 <_strtod_l+0xaf8>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d12b      	bne.n	8004e58 <_strtod_l+0x8f0>
 8004e00:	9b05      	ldr	r3, [sp, #20]
 8004e02:	4641      	mov	r1, r8
 8004e04:	b303      	cbz	r3, 8004e48 <_strtod_l+0x8e0>
 8004e06:	464a      	mov	r2, r9
 8004e08:	4b96      	ldr	r3, [pc, #600]	; (8005064 <_strtod_l+0xafc>)
 8004e0a:	4013      	ands	r3, r2
 8004e0c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8004e10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004e14:	d81b      	bhi.n	8004e4e <_strtod_l+0x8e6>
 8004e16:	0d1b      	lsrs	r3, r3, #20
 8004e18:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e20:	4299      	cmp	r1, r3
 8004e22:	d119      	bne.n	8004e58 <_strtod_l+0x8f0>
 8004e24:	4b90      	ldr	r3, [pc, #576]	; (8005068 <_strtod_l+0xb00>)
 8004e26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d102      	bne.n	8004e32 <_strtod_l+0x8ca>
 8004e2c:	3101      	adds	r1, #1
 8004e2e:	f43f adda 	beq.w	80049e6 <_strtod_l+0x47e>
 8004e32:	f04f 0800 	mov.w	r8, #0
 8004e36:	4b8b      	ldr	r3, [pc, #556]	; (8005064 <_strtod_l+0xafc>)
 8004e38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004e3a:	401a      	ands	r2, r3
 8004e3c:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8004e40:	9b05      	ldr	r3, [sp, #20]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d19a      	bne.n	8004d7c <_strtod_l+0x814>
 8004e46:	e5d9      	b.n	80049fc <_strtod_l+0x494>
 8004e48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004e4c:	e7e8      	b.n	8004e20 <_strtod_l+0x8b8>
 8004e4e:	4613      	mov	r3, r2
 8004e50:	e7e6      	b.n	8004e20 <_strtod_l+0x8b8>
 8004e52:	ea53 0308 	orrs.w	r3, r3, r8
 8004e56:	d081      	beq.n	8004d5c <_strtod_l+0x7f4>
 8004e58:	b1e5      	cbz	r5, 8004e94 <_strtod_l+0x92c>
 8004e5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e5c:	421d      	tst	r5, r3
 8004e5e:	d0ef      	beq.n	8004e40 <_strtod_l+0x8d8>
 8004e60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004e62:	4640      	mov	r0, r8
 8004e64:	4649      	mov	r1, r9
 8004e66:	9a05      	ldr	r2, [sp, #20]
 8004e68:	b1c3      	cbz	r3, 8004e9c <_strtod_l+0x934>
 8004e6a:	f7ff fb59 	bl	8004520 <sulp>
 8004e6e:	4602      	mov	r2, r0
 8004e70:	460b      	mov	r3, r1
 8004e72:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004e76:	f7fb f991 	bl	800019c <__adddf3>
 8004e7a:	4680      	mov	r8, r0
 8004e7c:	4689      	mov	r9, r1
 8004e7e:	e7df      	b.n	8004e40 <_strtod_l+0x8d8>
 8004e80:	4013      	ands	r3, r2
 8004e82:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8004e86:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8004e8a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8004e8e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8004e92:	e7d5      	b.n	8004e40 <_strtod_l+0x8d8>
 8004e94:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004e96:	ea13 0f08 	tst.w	r3, r8
 8004e9a:	e7e0      	b.n	8004e5e <_strtod_l+0x8f6>
 8004e9c:	f7ff fb40 	bl	8004520 <sulp>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	460b      	mov	r3, r1
 8004ea4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004ea8:	f7fb f976 	bl	8000198 <__aeabi_dsub>
 8004eac:	2200      	movs	r2, #0
 8004eae:	2300      	movs	r3, #0
 8004eb0:	4680      	mov	r8, r0
 8004eb2:	4689      	mov	r9, r1
 8004eb4:	f7fb fd90 	bl	80009d8 <__aeabi_dcmpeq>
 8004eb8:	2800      	cmp	r0, #0
 8004eba:	d0c1      	beq.n	8004e40 <_strtod_l+0x8d8>
 8004ebc:	e608      	b.n	8004ad0 <_strtod_l+0x568>
 8004ebe:	4658      	mov	r0, fp
 8004ec0:	9904      	ldr	r1, [sp, #16]
 8004ec2:	f002 f81d 	bl	8006f00 <__ratio>
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004ecc:	4606      	mov	r6, r0
 8004ece:	460f      	mov	r7, r1
 8004ed0:	f7fb fd96 	bl	8000a00 <__aeabi_dcmple>
 8004ed4:	2800      	cmp	r0, #0
 8004ed6:	d070      	beq.n	8004fba <_strtod_l+0xa52>
 8004ed8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d042      	beq.n	8004f64 <_strtod_l+0x9fc>
 8004ede:	2600      	movs	r6, #0
 8004ee0:	4f62      	ldr	r7, [pc, #392]	; (800506c <_strtod_l+0xb04>)
 8004ee2:	4d62      	ldr	r5, [pc, #392]	; (800506c <_strtod_l+0xb04>)
 8004ee4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ee6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004eea:	0d1b      	lsrs	r3, r3, #20
 8004eec:	051b      	lsls	r3, r3, #20
 8004eee:	930f      	str	r3, [sp, #60]	; 0x3c
 8004ef0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004ef2:	4b5f      	ldr	r3, [pc, #380]	; (8005070 <_strtod_l+0xb08>)
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	f040 80c3 	bne.w	8005080 <_strtod_l+0xb18>
 8004efa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004efc:	4640      	mov	r0, r8
 8004efe:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8004f02:	4649      	mov	r1, r9
 8004f04:	f001 ff26 	bl	8006d54 <__ulp>
 8004f08:	4602      	mov	r2, r0
 8004f0a:	460b      	mov	r3, r1
 8004f0c:	4630      	mov	r0, r6
 8004f0e:	4639      	mov	r1, r7
 8004f10:	f7fb fafa 	bl	8000508 <__aeabi_dmul>
 8004f14:	4642      	mov	r2, r8
 8004f16:	464b      	mov	r3, r9
 8004f18:	f7fb f940 	bl	800019c <__adddf3>
 8004f1c:	460b      	mov	r3, r1
 8004f1e:	4951      	ldr	r1, [pc, #324]	; (8005064 <_strtod_l+0xafc>)
 8004f20:	4a54      	ldr	r2, [pc, #336]	; (8005074 <_strtod_l+0xb0c>)
 8004f22:	4019      	ands	r1, r3
 8004f24:	4291      	cmp	r1, r2
 8004f26:	4680      	mov	r8, r0
 8004f28:	d95d      	bls.n	8004fe6 <_strtod_l+0xa7e>
 8004f2a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004f2c:	4b4e      	ldr	r3, [pc, #312]	; (8005068 <_strtod_l+0xb00>)
 8004f2e:	429a      	cmp	r2, r3
 8004f30:	d103      	bne.n	8004f3a <_strtod_l+0x9d2>
 8004f32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004f34:	3301      	adds	r3, #1
 8004f36:	f43f ad56 	beq.w	80049e6 <_strtod_l+0x47e>
 8004f3a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8004f3e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8005068 <_strtod_l+0xb00>
 8004f42:	4650      	mov	r0, sl
 8004f44:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004f46:	f001 fbd5 	bl	80066f4 <_Bfree>
 8004f4a:	4650      	mov	r0, sl
 8004f4c:	9906      	ldr	r1, [sp, #24]
 8004f4e:	f001 fbd1 	bl	80066f4 <_Bfree>
 8004f52:	4650      	mov	r0, sl
 8004f54:	9904      	ldr	r1, [sp, #16]
 8004f56:	f001 fbcd 	bl	80066f4 <_Bfree>
 8004f5a:	4659      	mov	r1, fp
 8004f5c:	4650      	mov	r0, sl
 8004f5e:	f001 fbc9 	bl	80066f4 <_Bfree>
 8004f62:	e627      	b.n	8004bb4 <_strtod_l+0x64c>
 8004f64:	f1b8 0f00 	cmp.w	r8, #0
 8004f68:	d119      	bne.n	8004f9e <_strtod_l+0xa36>
 8004f6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004f70:	b9e3      	cbnz	r3, 8004fac <_strtod_l+0xa44>
 8004f72:	2200      	movs	r2, #0
 8004f74:	4630      	mov	r0, r6
 8004f76:	4639      	mov	r1, r7
 8004f78:	4b3c      	ldr	r3, [pc, #240]	; (800506c <_strtod_l+0xb04>)
 8004f7a:	f7fb fd37 	bl	80009ec <__aeabi_dcmplt>
 8004f7e:	b9c8      	cbnz	r0, 8004fb4 <_strtod_l+0xa4c>
 8004f80:	2200      	movs	r2, #0
 8004f82:	4630      	mov	r0, r6
 8004f84:	4639      	mov	r1, r7
 8004f86:	4b3c      	ldr	r3, [pc, #240]	; (8005078 <_strtod_l+0xb10>)
 8004f88:	f7fb fabe 	bl	8000508 <__aeabi_dmul>
 8004f8c:	4604      	mov	r4, r0
 8004f8e:	460d      	mov	r5, r1
 8004f90:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8004f94:	9416      	str	r4, [sp, #88]	; 0x58
 8004f96:	9317      	str	r3, [sp, #92]	; 0x5c
 8004f98:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 8004f9c:	e7a2      	b.n	8004ee4 <_strtod_l+0x97c>
 8004f9e:	f1b8 0f01 	cmp.w	r8, #1
 8004fa2:	d103      	bne.n	8004fac <_strtod_l+0xa44>
 8004fa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	f43f ad92 	beq.w	8004ad0 <_strtod_l+0x568>
 8004fac:	2600      	movs	r6, #0
 8004fae:	2400      	movs	r4, #0
 8004fb0:	4f32      	ldr	r7, [pc, #200]	; (800507c <_strtod_l+0xb14>)
 8004fb2:	e796      	b.n	8004ee2 <_strtod_l+0x97a>
 8004fb4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8004fb6:	4d30      	ldr	r5, [pc, #192]	; (8005078 <_strtod_l+0xb10>)
 8004fb8:	e7ea      	b.n	8004f90 <_strtod_l+0xa28>
 8004fba:	4b2f      	ldr	r3, [pc, #188]	; (8005078 <_strtod_l+0xb10>)
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	4630      	mov	r0, r6
 8004fc0:	4639      	mov	r1, r7
 8004fc2:	f7fb faa1 	bl	8000508 <__aeabi_dmul>
 8004fc6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004fc8:	4604      	mov	r4, r0
 8004fca:	460d      	mov	r5, r1
 8004fcc:	b933      	cbnz	r3, 8004fdc <_strtod_l+0xa74>
 8004fce:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004fd2:	9010      	str	r0, [sp, #64]	; 0x40
 8004fd4:	9311      	str	r3, [sp, #68]	; 0x44
 8004fd6:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8004fda:	e783      	b.n	8004ee4 <_strtod_l+0x97c>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	460b      	mov	r3, r1
 8004fe0:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8004fe4:	e7f7      	b.n	8004fd6 <_strtod_l+0xa6e>
 8004fe6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8004fea:	9b05      	ldr	r3, [sp, #20]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d1a8      	bne.n	8004f42 <_strtod_l+0x9da>
 8004ff0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004ff4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004ff6:	0d1b      	lsrs	r3, r3, #20
 8004ff8:	051b      	lsls	r3, r3, #20
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d1a1      	bne.n	8004f42 <_strtod_l+0x9da>
 8004ffe:	4620      	mov	r0, r4
 8005000:	4629      	mov	r1, r5
 8005002:	f7fb fde1 	bl	8000bc8 <__aeabi_d2lz>
 8005006:	f7fb fa51 	bl	80004ac <__aeabi_l2d>
 800500a:	4602      	mov	r2, r0
 800500c:	460b      	mov	r3, r1
 800500e:	4620      	mov	r0, r4
 8005010:	4629      	mov	r1, r5
 8005012:	f7fb f8c1 	bl	8000198 <__aeabi_dsub>
 8005016:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005018:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800501c:	ea43 0308 	orr.w	r3, r3, r8
 8005020:	4313      	orrs	r3, r2
 8005022:	4604      	mov	r4, r0
 8005024:	460d      	mov	r5, r1
 8005026:	d066      	beq.n	80050f6 <_strtod_l+0xb8e>
 8005028:	a309      	add	r3, pc, #36	; (adr r3, 8005050 <_strtod_l+0xae8>)
 800502a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800502e:	f7fb fcdd 	bl	80009ec <__aeabi_dcmplt>
 8005032:	2800      	cmp	r0, #0
 8005034:	f47f ace2 	bne.w	80049fc <_strtod_l+0x494>
 8005038:	a307      	add	r3, pc, #28	; (adr r3, 8005058 <_strtod_l+0xaf0>)
 800503a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800503e:	4620      	mov	r0, r4
 8005040:	4629      	mov	r1, r5
 8005042:	f7fb fcf1 	bl	8000a28 <__aeabi_dcmpgt>
 8005046:	2800      	cmp	r0, #0
 8005048:	f43f af7b 	beq.w	8004f42 <_strtod_l+0x9da>
 800504c:	e4d6      	b.n	80049fc <_strtod_l+0x494>
 800504e:	bf00      	nop
 8005050:	94a03595 	.word	0x94a03595
 8005054:	3fdfffff 	.word	0x3fdfffff
 8005058:	35afe535 	.word	0x35afe535
 800505c:	3fe00000 	.word	0x3fe00000
 8005060:	000fffff 	.word	0x000fffff
 8005064:	7ff00000 	.word	0x7ff00000
 8005068:	7fefffff 	.word	0x7fefffff
 800506c:	3ff00000 	.word	0x3ff00000
 8005070:	7fe00000 	.word	0x7fe00000
 8005074:	7c9fffff 	.word	0x7c9fffff
 8005078:	3fe00000 	.word	0x3fe00000
 800507c:	bff00000 	.word	0xbff00000
 8005080:	9b05      	ldr	r3, [sp, #20]
 8005082:	b313      	cbz	r3, 80050ca <_strtod_l+0xb62>
 8005084:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005086:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800508a:	d81e      	bhi.n	80050ca <_strtod_l+0xb62>
 800508c:	a326      	add	r3, pc, #152	; (adr r3, 8005128 <_strtod_l+0xbc0>)
 800508e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005092:	4620      	mov	r0, r4
 8005094:	4629      	mov	r1, r5
 8005096:	f7fb fcb3 	bl	8000a00 <__aeabi_dcmple>
 800509a:	b190      	cbz	r0, 80050c2 <_strtod_l+0xb5a>
 800509c:	4629      	mov	r1, r5
 800509e:	4620      	mov	r0, r4
 80050a0:	f7fb fd0a 	bl	8000ab8 <__aeabi_d2uiz>
 80050a4:	2801      	cmp	r0, #1
 80050a6:	bf38      	it	cc
 80050a8:	2001      	movcc	r0, #1
 80050aa:	f7fb f9b3 	bl	8000414 <__aeabi_ui2d>
 80050ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80050b0:	4604      	mov	r4, r0
 80050b2:	460d      	mov	r5, r1
 80050b4:	b9d3      	cbnz	r3, 80050ec <_strtod_l+0xb84>
 80050b6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80050ba:	9012      	str	r0, [sp, #72]	; 0x48
 80050bc:	9313      	str	r3, [sp, #76]	; 0x4c
 80050be:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 80050c2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80050c4:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 80050c8:	1a9f      	subs	r7, r3, r2
 80050ca:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80050ce:	f001 fe41 	bl	8006d54 <__ulp>
 80050d2:	4602      	mov	r2, r0
 80050d4:	460b      	mov	r3, r1
 80050d6:	4630      	mov	r0, r6
 80050d8:	4639      	mov	r1, r7
 80050da:	f7fb fa15 	bl	8000508 <__aeabi_dmul>
 80050de:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80050e2:	f7fb f85b 	bl	800019c <__adddf3>
 80050e6:	4680      	mov	r8, r0
 80050e8:	4689      	mov	r9, r1
 80050ea:	e77e      	b.n	8004fea <_strtod_l+0xa82>
 80050ec:	4602      	mov	r2, r0
 80050ee:	460b      	mov	r3, r1
 80050f0:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 80050f4:	e7e3      	b.n	80050be <_strtod_l+0xb56>
 80050f6:	a30e      	add	r3, pc, #56	; (adr r3, 8005130 <_strtod_l+0xbc8>)
 80050f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050fc:	f7fb fc76 	bl	80009ec <__aeabi_dcmplt>
 8005100:	e7a1      	b.n	8005046 <_strtod_l+0xade>
 8005102:	2300      	movs	r3, #0
 8005104:	930a      	str	r3, [sp, #40]	; 0x28
 8005106:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005108:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800510a:	6013      	str	r3, [r2, #0]
 800510c:	f7ff ba71 	b.w	80045f2 <_strtod_l+0x8a>
 8005110:	2a65      	cmp	r2, #101	; 0x65
 8005112:	f43f ab63 	beq.w	80047dc <_strtod_l+0x274>
 8005116:	2a45      	cmp	r2, #69	; 0x45
 8005118:	f43f ab60 	beq.w	80047dc <_strtod_l+0x274>
 800511c:	2301      	movs	r3, #1
 800511e:	f7ff bb95 	b.w	800484c <_strtod_l+0x2e4>
 8005122:	bf00      	nop
 8005124:	f3af 8000 	nop.w
 8005128:	ffc00000 	.word	0xffc00000
 800512c:	41dfffff 	.word	0x41dfffff
 8005130:	94a03595 	.word	0x94a03595
 8005134:	3fcfffff 	.word	0x3fcfffff

08005138 <_strtod_r>:
 8005138:	4b01      	ldr	r3, [pc, #4]	; (8005140 <_strtod_r+0x8>)
 800513a:	f7ff ba15 	b.w	8004568 <_strtod_l>
 800513e:	bf00      	nop
 8005140:	20000074 	.word	0x20000074

08005144 <_strtol_l.constprop.0>:
 8005144:	2b01      	cmp	r3, #1
 8005146:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800514a:	4680      	mov	r8, r0
 800514c:	d001      	beq.n	8005152 <_strtol_l.constprop.0+0xe>
 800514e:	2b24      	cmp	r3, #36	; 0x24
 8005150:	d906      	bls.n	8005160 <_strtol_l.constprop.0+0x1c>
 8005152:	f7fe fb21 	bl	8003798 <__errno>
 8005156:	2316      	movs	r3, #22
 8005158:	6003      	str	r3, [r0, #0]
 800515a:	2000      	movs	r0, #0
 800515c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005160:	460d      	mov	r5, r1
 8005162:	4f35      	ldr	r7, [pc, #212]	; (8005238 <_strtol_l.constprop.0+0xf4>)
 8005164:	4628      	mov	r0, r5
 8005166:	f815 4b01 	ldrb.w	r4, [r5], #1
 800516a:	5de6      	ldrb	r6, [r4, r7]
 800516c:	f016 0608 	ands.w	r6, r6, #8
 8005170:	d1f8      	bne.n	8005164 <_strtol_l.constprop.0+0x20>
 8005172:	2c2d      	cmp	r4, #45	; 0x2d
 8005174:	d12f      	bne.n	80051d6 <_strtol_l.constprop.0+0x92>
 8005176:	2601      	movs	r6, #1
 8005178:	782c      	ldrb	r4, [r5, #0]
 800517a:	1c85      	adds	r5, r0, #2
 800517c:	2b00      	cmp	r3, #0
 800517e:	d057      	beq.n	8005230 <_strtol_l.constprop.0+0xec>
 8005180:	2b10      	cmp	r3, #16
 8005182:	d109      	bne.n	8005198 <_strtol_l.constprop.0+0x54>
 8005184:	2c30      	cmp	r4, #48	; 0x30
 8005186:	d107      	bne.n	8005198 <_strtol_l.constprop.0+0x54>
 8005188:	7828      	ldrb	r0, [r5, #0]
 800518a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800518e:	2858      	cmp	r0, #88	; 0x58
 8005190:	d149      	bne.n	8005226 <_strtol_l.constprop.0+0xe2>
 8005192:	2310      	movs	r3, #16
 8005194:	786c      	ldrb	r4, [r5, #1]
 8005196:	3502      	adds	r5, #2
 8005198:	2700      	movs	r7, #0
 800519a:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800519e:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 80051a2:	fbbe f9f3 	udiv	r9, lr, r3
 80051a6:	4638      	mov	r0, r7
 80051a8:	fb03 ea19 	mls	sl, r3, r9, lr
 80051ac:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80051b0:	f1bc 0f09 	cmp.w	ip, #9
 80051b4:	d814      	bhi.n	80051e0 <_strtol_l.constprop.0+0x9c>
 80051b6:	4664      	mov	r4, ip
 80051b8:	42a3      	cmp	r3, r4
 80051ba:	dd22      	ble.n	8005202 <_strtol_l.constprop.0+0xbe>
 80051bc:	2f00      	cmp	r7, #0
 80051be:	db1d      	blt.n	80051fc <_strtol_l.constprop.0+0xb8>
 80051c0:	4581      	cmp	r9, r0
 80051c2:	d31b      	bcc.n	80051fc <_strtol_l.constprop.0+0xb8>
 80051c4:	d101      	bne.n	80051ca <_strtol_l.constprop.0+0x86>
 80051c6:	45a2      	cmp	sl, r4
 80051c8:	db18      	blt.n	80051fc <_strtol_l.constprop.0+0xb8>
 80051ca:	2701      	movs	r7, #1
 80051cc:	fb00 4003 	mla	r0, r0, r3, r4
 80051d0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80051d4:	e7ea      	b.n	80051ac <_strtol_l.constprop.0+0x68>
 80051d6:	2c2b      	cmp	r4, #43	; 0x2b
 80051d8:	bf04      	itt	eq
 80051da:	782c      	ldrbeq	r4, [r5, #0]
 80051dc:	1c85      	addeq	r5, r0, #2
 80051de:	e7cd      	b.n	800517c <_strtol_l.constprop.0+0x38>
 80051e0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80051e4:	f1bc 0f19 	cmp.w	ip, #25
 80051e8:	d801      	bhi.n	80051ee <_strtol_l.constprop.0+0xaa>
 80051ea:	3c37      	subs	r4, #55	; 0x37
 80051ec:	e7e4      	b.n	80051b8 <_strtol_l.constprop.0+0x74>
 80051ee:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80051f2:	f1bc 0f19 	cmp.w	ip, #25
 80051f6:	d804      	bhi.n	8005202 <_strtol_l.constprop.0+0xbe>
 80051f8:	3c57      	subs	r4, #87	; 0x57
 80051fa:	e7dd      	b.n	80051b8 <_strtol_l.constprop.0+0x74>
 80051fc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005200:	e7e6      	b.n	80051d0 <_strtol_l.constprop.0+0x8c>
 8005202:	2f00      	cmp	r7, #0
 8005204:	da07      	bge.n	8005216 <_strtol_l.constprop.0+0xd2>
 8005206:	2322      	movs	r3, #34	; 0x22
 8005208:	4670      	mov	r0, lr
 800520a:	f8c8 3000 	str.w	r3, [r8]
 800520e:	2a00      	cmp	r2, #0
 8005210:	d0a4      	beq.n	800515c <_strtol_l.constprop.0+0x18>
 8005212:	1e69      	subs	r1, r5, #1
 8005214:	e005      	b.n	8005222 <_strtol_l.constprop.0+0xde>
 8005216:	b106      	cbz	r6, 800521a <_strtol_l.constprop.0+0xd6>
 8005218:	4240      	negs	r0, r0
 800521a:	2a00      	cmp	r2, #0
 800521c:	d09e      	beq.n	800515c <_strtol_l.constprop.0+0x18>
 800521e:	2f00      	cmp	r7, #0
 8005220:	d1f7      	bne.n	8005212 <_strtol_l.constprop.0+0xce>
 8005222:	6011      	str	r1, [r2, #0]
 8005224:	e79a      	b.n	800515c <_strtol_l.constprop.0+0x18>
 8005226:	2430      	movs	r4, #48	; 0x30
 8005228:	2b00      	cmp	r3, #0
 800522a:	d1b5      	bne.n	8005198 <_strtol_l.constprop.0+0x54>
 800522c:	2308      	movs	r3, #8
 800522e:	e7b3      	b.n	8005198 <_strtol_l.constprop.0+0x54>
 8005230:	2c30      	cmp	r4, #48	; 0x30
 8005232:	d0a9      	beq.n	8005188 <_strtol_l.constprop.0+0x44>
 8005234:	230a      	movs	r3, #10
 8005236:	e7af      	b.n	8005198 <_strtol_l.constprop.0+0x54>
 8005238:	080081a1 	.word	0x080081a1

0800523c <_strtol_r>:
 800523c:	f7ff bf82 	b.w	8005144 <_strtol_l.constprop.0>

08005240 <quorem>:
 8005240:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005244:	6903      	ldr	r3, [r0, #16]
 8005246:	690c      	ldr	r4, [r1, #16]
 8005248:	4607      	mov	r7, r0
 800524a:	42a3      	cmp	r3, r4
 800524c:	f2c0 8082 	blt.w	8005354 <quorem+0x114>
 8005250:	3c01      	subs	r4, #1
 8005252:	f100 0514 	add.w	r5, r0, #20
 8005256:	f101 0814 	add.w	r8, r1, #20
 800525a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800525e:	9301      	str	r3, [sp, #4]
 8005260:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005264:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005268:	3301      	adds	r3, #1
 800526a:	429a      	cmp	r2, r3
 800526c:	fbb2 f6f3 	udiv	r6, r2, r3
 8005270:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005274:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005278:	d331      	bcc.n	80052de <quorem+0x9e>
 800527a:	f04f 0e00 	mov.w	lr, #0
 800527e:	4640      	mov	r0, r8
 8005280:	46ac      	mov	ip, r5
 8005282:	46f2      	mov	sl, lr
 8005284:	f850 2b04 	ldr.w	r2, [r0], #4
 8005288:	b293      	uxth	r3, r2
 800528a:	fb06 e303 	mla	r3, r6, r3, lr
 800528e:	0c12      	lsrs	r2, r2, #16
 8005290:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005294:	b29b      	uxth	r3, r3
 8005296:	fb06 e202 	mla	r2, r6, r2, lr
 800529a:	ebaa 0303 	sub.w	r3, sl, r3
 800529e:	f8dc a000 	ldr.w	sl, [ip]
 80052a2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80052a6:	fa1f fa8a 	uxth.w	sl, sl
 80052aa:	4453      	add	r3, sl
 80052ac:	f8dc a000 	ldr.w	sl, [ip]
 80052b0:	b292      	uxth	r2, r2
 80052b2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80052b6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80052c0:	4581      	cmp	r9, r0
 80052c2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80052c6:	f84c 3b04 	str.w	r3, [ip], #4
 80052ca:	d2db      	bcs.n	8005284 <quorem+0x44>
 80052cc:	f855 300b 	ldr.w	r3, [r5, fp]
 80052d0:	b92b      	cbnz	r3, 80052de <quorem+0x9e>
 80052d2:	9b01      	ldr	r3, [sp, #4]
 80052d4:	3b04      	subs	r3, #4
 80052d6:	429d      	cmp	r5, r3
 80052d8:	461a      	mov	r2, r3
 80052da:	d32f      	bcc.n	800533c <quorem+0xfc>
 80052dc:	613c      	str	r4, [r7, #16]
 80052de:	4638      	mov	r0, r7
 80052e0:	f001 fc90 	bl	8006c04 <__mcmp>
 80052e4:	2800      	cmp	r0, #0
 80052e6:	db25      	blt.n	8005334 <quorem+0xf4>
 80052e8:	4628      	mov	r0, r5
 80052ea:	f04f 0c00 	mov.w	ip, #0
 80052ee:	3601      	adds	r6, #1
 80052f0:	f858 1b04 	ldr.w	r1, [r8], #4
 80052f4:	f8d0 e000 	ldr.w	lr, [r0]
 80052f8:	b28b      	uxth	r3, r1
 80052fa:	ebac 0303 	sub.w	r3, ip, r3
 80052fe:	fa1f f28e 	uxth.w	r2, lr
 8005302:	4413      	add	r3, r2
 8005304:	0c0a      	lsrs	r2, r1, #16
 8005306:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800530a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800530e:	b29b      	uxth	r3, r3
 8005310:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005314:	45c1      	cmp	r9, r8
 8005316:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800531a:	f840 3b04 	str.w	r3, [r0], #4
 800531e:	d2e7      	bcs.n	80052f0 <quorem+0xb0>
 8005320:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005324:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005328:	b922      	cbnz	r2, 8005334 <quorem+0xf4>
 800532a:	3b04      	subs	r3, #4
 800532c:	429d      	cmp	r5, r3
 800532e:	461a      	mov	r2, r3
 8005330:	d30a      	bcc.n	8005348 <quorem+0x108>
 8005332:	613c      	str	r4, [r7, #16]
 8005334:	4630      	mov	r0, r6
 8005336:	b003      	add	sp, #12
 8005338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800533c:	6812      	ldr	r2, [r2, #0]
 800533e:	3b04      	subs	r3, #4
 8005340:	2a00      	cmp	r2, #0
 8005342:	d1cb      	bne.n	80052dc <quorem+0x9c>
 8005344:	3c01      	subs	r4, #1
 8005346:	e7c6      	b.n	80052d6 <quorem+0x96>
 8005348:	6812      	ldr	r2, [r2, #0]
 800534a:	3b04      	subs	r3, #4
 800534c:	2a00      	cmp	r2, #0
 800534e:	d1f0      	bne.n	8005332 <quorem+0xf2>
 8005350:	3c01      	subs	r4, #1
 8005352:	e7eb      	b.n	800532c <quorem+0xec>
 8005354:	2000      	movs	r0, #0
 8005356:	e7ee      	b.n	8005336 <quorem+0xf6>

08005358 <_dtoa_r>:
 8005358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800535c:	4616      	mov	r6, r2
 800535e:	461f      	mov	r7, r3
 8005360:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005362:	b099      	sub	sp, #100	; 0x64
 8005364:	4605      	mov	r5, r0
 8005366:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800536a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800536e:	b974      	cbnz	r4, 800538e <_dtoa_r+0x36>
 8005370:	2010      	movs	r0, #16
 8005372:	f001 f949 	bl	8006608 <malloc>
 8005376:	4602      	mov	r2, r0
 8005378:	6268      	str	r0, [r5, #36]	; 0x24
 800537a:	b920      	cbnz	r0, 8005386 <_dtoa_r+0x2e>
 800537c:	21ea      	movs	r1, #234	; 0xea
 800537e:	4ba8      	ldr	r3, [pc, #672]	; (8005620 <_dtoa_r+0x2c8>)
 8005380:	48a8      	ldr	r0, [pc, #672]	; (8005624 <_dtoa_r+0x2cc>)
 8005382:	f002 f8b3 	bl	80074ec <__assert_func>
 8005386:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800538a:	6004      	str	r4, [r0, #0]
 800538c:	60c4      	str	r4, [r0, #12]
 800538e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005390:	6819      	ldr	r1, [r3, #0]
 8005392:	b151      	cbz	r1, 80053aa <_dtoa_r+0x52>
 8005394:	685a      	ldr	r2, [r3, #4]
 8005396:	2301      	movs	r3, #1
 8005398:	4093      	lsls	r3, r2
 800539a:	604a      	str	r2, [r1, #4]
 800539c:	608b      	str	r3, [r1, #8]
 800539e:	4628      	mov	r0, r5
 80053a0:	f001 f9a8 	bl	80066f4 <_Bfree>
 80053a4:	2200      	movs	r2, #0
 80053a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80053a8:	601a      	str	r2, [r3, #0]
 80053aa:	1e3b      	subs	r3, r7, #0
 80053ac:	bfaf      	iteee	ge
 80053ae:	2300      	movge	r3, #0
 80053b0:	2201      	movlt	r2, #1
 80053b2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80053b6:	9305      	strlt	r3, [sp, #20]
 80053b8:	bfa8      	it	ge
 80053ba:	f8c8 3000 	strge.w	r3, [r8]
 80053be:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80053c2:	4b99      	ldr	r3, [pc, #612]	; (8005628 <_dtoa_r+0x2d0>)
 80053c4:	bfb8      	it	lt
 80053c6:	f8c8 2000 	strlt.w	r2, [r8]
 80053ca:	ea33 0309 	bics.w	r3, r3, r9
 80053ce:	d119      	bne.n	8005404 <_dtoa_r+0xac>
 80053d0:	f242 730f 	movw	r3, #9999	; 0x270f
 80053d4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80053d6:	6013      	str	r3, [r2, #0]
 80053d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80053dc:	4333      	orrs	r3, r6
 80053de:	f000 857f 	beq.w	8005ee0 <_dtoa_r+0xb88>
 80053e2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80053e4:	b953      	cbnz	r3, 80053fc <_dtoa_r+0xa4>
 80053e6:	4b91      	ldr	r3, [pc, #580]	; (800562c <_dtoa_r+0x2d4>)
 80053e8:	e022      	b.n	8005430 <_dtoa_r+0xd8>
 80053ea:	4b91      	ldr	r3, [pc, #580]	; (8005630 <_dtoa_r+0x2d8>)
 80053ec:	9303      	str	r3, [sp, #12]
 80053ee:	3308      	adds	r3, #8
 80053f0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80053f2:	6013      	str	r3, [r2, #0]
 80053f4:	9803      	ldr	r0, [sp, #12]
 80053f6:	b019      	add	sp, #100	; 0x64
 80053f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053fc:	4b8b      	ldr	r3, [pc, #556]	; (800562c <_dtoa_r+0x2d4>)
 80053fe:	9303      	str	r3, [sp, #12]
 8005400:	3303      	adds	r3, #3
 8005402:	e7f5      	b.n	80053f0 <_dtoa_r+0x98>
 8005404:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005408:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800540c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005410:	2200      	movs	r2, #0
 8005412:	2300      	movs	r3, #0
 8005414:	f7fb fae0 	bl	80009d8 <__aeabi_dcmpeq>
 8005418:	4680      	mov	r8, r0
 800541a:	b158      	cbz	r0, 8005434 <_dtoa_r+0xdc>
 800541c:	2301      	movs	r3, #1
 800541e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005420:	6013      	str	r3, [r2, #0]
 8005422:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005424:	2b00      	cmp	r3, #0
 8005426:	f000 8558 	beq.w	8005eda <_dtoa_r+0xb82>
 800542a:	4882      	ldr	r0, [pc, #520]	; (8005634 <_dtoa_r+0x2dc>)
 800542c:	6018      	str	r0, [r3, #0]
 800542e:	1e43      	subs	r3, r0, #1
 8005430:	9303      	str	r3, [sp, #12]
 8005432:	e7df      	b.n	80053f4 <_dtoa_r+0x9c>
 8005434:	ab16      	add	r3, sp, #88	; 0x58
 8005436:	9301      	str	r3, [sp, #4]
 8005438:	ab17      	add	r3, sp, #92	; 0x5c
 800543a:	9300      	str	r3, [sp, #0]
 800543c:	4628      	mov	r0, r5
 800543e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005442:	f001 fd01 	bl	8006e48 <__d2b>
 8005446:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800544a:	4683      	mov	fp, r0
 800544c:	2c00      	cmp	r4, #0
 800544e:	d07f      	beq.n	8005550 <_dtoa_r+0x1f8>
 8005450:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005454:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005456:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800545a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800545e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8005462:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8005466:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800546a:	2200      	movs	r2, #0
 800546c:	4b72      	ldr	r3, [pc, #456]	; (8005638 <_dtoa_r+0x2e0>)
 800546e:	f7fa fe93 	bl	8000198 <__aeabi_dsub>
 8005472:	a365      	add	r3, pc, #404	; (adr r3, 8005608 <_dtoa_r+0x2b0>)
 8005474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005478:	f7fb f846 	bl	8000508 <__aeabi_dmul>
 800547c:	a364      	add	r3, pc, #400	; (adr r3, 8005610 <_dtoa_r+0x2b8>)
 800547e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005482:	f7fa fe8b 	bl	800019c <__adddf3>
 8005486:	4606      	mov	r6, r0
 8005488:	4620      	mov	r0, r4
 800548a:	460f      	mov	r7, r1
 800548c:	f7fa ffd2 	bl	8000434 <__aeabi_i2d>
 8005490:	a361      	add	r3, pc, #388	; (adr r3, 8005618 <_dtoa_r+0x2c0>)
 8005492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005496:	f7fb f837 	bl	8000508 <__aeabi_dmul>
 800549a:	4602      	mov	r2, r0
 800549c:	460b      	mov	r3, r1
 800549e:	4630      	mov	r0, r6
 80054a0:	4639      	mov	r1, r7
 80054a2:	f7fa fe7b 	bl	800019c <__adddf3>
 80054a6:	4606      	mov	r6, r0
 80054a8:	460f      	mov	r7, r1
 80054aa:	f7fb fadd 	bl	8000a68 <__aeabi_d2iz>
 80054ae:	2200      	movs	r2, #0
 80054b0:	4682      	mov	sl, r0
 80054b2:	2300      	movs	r3, #0
 80054b4:	4630      	mov	r0, r6
 80054b6:	4639      	mov	r1, r7
 80054b8:	f7fb fa98 	bl	80009ec <__aeabi_dcmplt>
 80054bc:	b148      	cbz	r0, 80054d2 <_dtoa_r+0x17a>
 80054be:	4650      	mov	r0, sl
 80054c0:	f7fa ffb8 	bl	8000434 <__aeabi_i2d>
 80054c4:	4632      	mov	r2, r6
 80054c6:	463b      	mov	r3, r7
 80054c8:	f7fb fa86 	bl	80009d8 <__aeabi_dcmpeq>
 80054cc:	b908      	cbnz	r0, 80054d2 <_dtoa_r+0x17a>
 80054ce:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80054d2:	f1ba 0f16 	cmp.w	sl, #22
 80054d6:	d858      	bhi.n	800558a <_dtoa_r+0x232>
 80054d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80054dc:	4b57      	ldr	r3, [pc, #348]	; (800563c <_dtoa_r+0x2e4>)
 80054de:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80054e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054e6:	f7fb fa81 	bl	80009ec <__aeabi_dcmplt>
 80054ea:	2800      	cmp	r0, #0
 80054ec:	d04f      	beq.n	800558e <_dtoa_r+0x236>
 80054ee:	2300      	movs	r3, #0
 80054f0:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80054f4:	930f      	str	r3, [sp, #60]	; 0x3c
 80054f6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80054f8:	1b1c      	subs	r4, r3, r4
 80054fa:	1e63      	subs	r3, r4, #1
 80054fc:	9309      	str	r3, [sp, #36]	; 0x24
 80054fe:	bf49      	itett	mi
 8005500:	f1c4 0301 	rsbmi	r3, r4, #1
 8005504:	2300      	movpl	r3, #0
 8005506:	9306      	strmi	r3, [sp, #24]
 8005508:	2300      	movmi	r3, #0
 800550a:	bf54      	ite	pl
 800550c:	9306      	strpl	r3, [sp, #24]
 800550e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005510:	f1ba 0f00 	cmp.w	sl, #0
 8005514:	db3d      	blt.n	8005592 <_dtoa_r+0x23a>
 8005516:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005518:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800551c:	4453      	add	r3, sl
 800551e:	9309      	str	r3, [sp, #36]	; 0x24
 8005520:	2300      	movs	r3, #0
 8005522:	930a      	str	r3, [sp, #40]	; 0x28
 8005524:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005526:	2b09      	cmp	r3, #9
 8005528:	f200 808c 	bhi.w	8005644 <_dtoa_r+0x2ec>
 800552c:	2b05      	cmp	r3, #5
 800552e:	bfc4      	itt	gt
 8005530:	3b04      	subgt	r3, #4
 8005532:	9322      	strgt	r3, [sp, #136]	; 0x88
 8005534:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005536:	bfc8      	it	gt
 8005538:	2400      	movgt	r4, #0
 800553a:	f1a3 0302 	sub.w	r3, r3, #2
 800553e:	bfd8      	it	le
 8005540:	2401      	movle	r4, #1
 8005542:	2b03      	cmp	r3, #3
 8005544:	f200 808a 	bhi.w	800565c <_dtoa_r+0x304>
 8005548:	e8df f003 	tbb	[pc, r3]
 800554c:	5b4d4f2d 	.word	0x5b4d4f2d
 8005550:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8005554:	441c      	add	r4, r3
 8005556:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800555a:	2b20      	cmp	r3, #32
 800555c:	bfc3      	ittte	gt
 800555e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005562:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8005566:	fa09 f303 	lslgt.w	r3, r9, r3
 800556a:	f1c3 0320 	rsble	r3, r3, #32
 800556e:	bfc6      	itte	gt
 8005570:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005574:	4318      	orrgt	r0, r3
 8005576:	fa06 f003 	lslle.w	r0, r6, r3
 800557a:	f7fa ff4b 	bl	8000414 <__aeabi_ui2d>
 800557e:	2301      	movs	r3, #1
 8005580:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8005584:	3c01      	subs	r4, #1
 8005586:	9313      	str	r3, [sp, #76]	; 0x4c
 8005588:	e76f      	b.n	800546a <_dtoa_r+0x112>
 800558a:	2301      	movs	r3, #1
 800558c:	e7b2      	b.n	80054f4 <_dtoa_r+0x19c>
 800558e:	900f      	str	r0, [sp, #60]	; 0x3c
 8005590:	e7b1      	b.n	80054f6 <_dtoa_r+0x19e>
 8005592:	9b06      	ldr	r3, [sp, #24]
 8005594:	eba3 030a 	sub.w	r3, r3, sl
 8005598:	9306      	str	r3, [sp, #24]
 800559a:	f1ca 0300 	rsb	r3, sl, #0
 800559e:	930a      	str	r3, [sp, #40]	; 0x28
 80055a0:	2300      	movs	r3, #0
 80055a2:	930e      	str	r3, [sp, #56]	; 0x38
 80055a4:	e7be      	b.n	8005524 <_dtoa_r+0x1cc>
 80055a6:	2300      	movs	r3, #0
 80055a8:	930b      	str	r3, [sp, #44]	; 0x2c
 80055aa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	dc58      	bgt.n	8005662 <_dtoa_r+0x30a>
 80055b0:	f04f 0901 	mov.w	r9, #1
 80055b4:	464b      	mov	r3, r9
 80055b6:	f8cd 9020 	str.w	r9, [sp, #32]
 80055ba:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 80055be:	2200      	movs	r2, #0
 80055c0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80055c2:	6042      	str	r2, [r0, #4]
 80055c4:	2204      	movs	r2, #4
 80055c6:	f102 0614 	add.w	r6, r2, #20
 80055ca:	429e      	cmp	r6, r3
 80055cc:	6841      	ldr	r1, [r0, #4]
 80055ce:	d94e      	bls.n	800566e <_dtoa_r+0x316>
 80055d0:	4628      	mov	r0, r5
 80055d2:	f001 f84f 	bl	8006674 <_Balloc>
 80055d6:	9003      	str	r0, [sp, #12]
 80055d8:	2800      	cmp	r0, #0
 80055da:	d14c      	bne.n	8005676 <_dtoa_r+0x31e>
 80055dc:	4602      	mov	r2, r0
 80055de:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80055e2:	4b17      	ldr	r3, [pc, #92]	; (8005640 <_dtoa_r+0x2e8>)
 80055e4:	e6cc      	b.n	8005380 <_dtoa_r+0x28>
 80055e6:	2301      	movs	r3, #1
 80055e8:	e7de      	b.n	80055a8 <_dtoa_r+0x250>
 80055ea:	2300      	movs	r3, #0
 80055ec:	930b      	str	r3, [sp, #44]	; 0x2c
 80055ee:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80055f0:	eb0a 0903 	add.w	r9, sl, r3
 80055f4:	f109 0301 	add.w	r3, r9, #1
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	9308      	str	r3, [sp, #32]
 80055fc:	bfb8      	it	lt
 80055fe:	2301      	movlt	r3, #1
 8005600:	e7dd      	b.n	80055be <_dtoa_r+0x266>
 8005602:	2301      	movs	r3, #1
 8005604:	e7f2      	b.n	80055ec <_dtoa_r+0x294>
 8005606:	bf00      	nop
 8005608:	636f4361 	.word	0x636f4361
 800560c:	3fd287a7 	.word	0x3fd287a7
 8005610:	8b60c8b3 	.word	0x8b60c8b3
 8005614:	3fc68a28 	.word	0x3fc68a28
 8005618:	509f79fb 	.word	0x509f79fb
 800561c:	3fd34413 	.word	0x3fd34413
 8005620:	080082ae 	.word	0x080082ae
 8005624:	080082c5 	.word	0x080082c5
 8005628:	7ff00000 	.word	0x7ff00000
 800562c:	080082aa 	.word	0x080082aa
 8005630:	080082a1 	.word	0x080082a1
 8005634:	08008125 	.word	0x08008125
 8005638:	3ff80000 	.word	0x3ff80000
 800563c:	08008430 	.word	0x08008430
 8005640:	08008320 	.word	0x08008320
 8005644:	2401      	movs	r4, #1
 8005646:	2300      	movs	r3, #0
 8005648:	940b      	str	r4, [sp, #44]	; 0x2c
 800564a:	9322      	str	r3, [sp, #136]	; 0x88
 800564c:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8005650:	2200      	movs	r2, #0
 8005652:	2312      	movs	r3, #18
 8005654:	f8cd 9020 	str.w	r9, [sp, #32]
 8005658:	9223      	str	r2, [sp, #140]	; 0x8c
 800565a:	e7b0      	b.n	80055be <_dtoa_r+0x266>
 800565c:	2301      	movs	r3, #1
 800565e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005660:	e7f4      	b.n	800564c <_dtoa_r+0x2f4>
 8005662:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8005666:	464b      	mov	r3, r9
 8005668:	f8cd 9020 	str.w	r9, [sp, #32]
 800566c:	e7a7      	b.n	80055be <_dtoa_r+0x266>
 800566e:	3101      	adds	r1, #1
 8005670:	6041      	str	r1, [r0, #4]
 8005672:	0052      	lsls	r2, r2, #1
 8005674:	e7a7      	b.n	80055c6 <_dtoa_r+0x26e>
 8005676:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005678:	9a03      	ldr	r2, [sp, #12]
 800567a:	601a      	str	r2, [r3, #0]
 800567c:	9b08      	ldr	r3, [sp, #32]
 800567e:	2b0e      	cmp	r3, #14
 8005680:	f200 80a8 	bhi.w	80057d4 <_dtoa_r+0x47c>
 8005684:	2c00      	cmp	r4, #0
 8005686:	f000 80a5 	beq.w	80057d4 <_dtoa_r+0x47c>
 800568a:	f1ba 0f00 	cmp.w	sl, #0
 800568e:	dd34      	ble.n	80056fa <_dtoa_r+0x3a2>
 8005690:	4a9a      	ldr	r2, [pc, #616]	; (80058fc <_dtoa_r+0x5a4>)
 8005692:	f00a 030f 	and.w	r3, sl, #15
 8005696:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800569a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800569e:	e9d3 3400 	ldrd	r3, r4, [r3]
 80056a2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80056a6:	ea4f 142a 	mov.w	r4, sl, asr #4
 80056aa:	d016      	beq.n	80056da <_dtoa_r+0x382>
 80056ac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80056b0:	4b93      	ldr	r3, [pc, #588]	; (8005900 <_dtoa_r+0x5a8>)
 80056b2:	2703      	movs	r7, #3
 80056b4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80056b8:	f7fb f850 	bl	800075c <__aeabi_ddiv>
 80056bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80056c0:	f004 040f 	and.w	r4, r4, #15
 80056c4:	4e8e      	ldr	r6, [pc, #568]	; (8005900 <_dtoa_r+0x5a8>)
 80056c6:	b954      	cbnz	r4, 80056de <_dtoa_r+0x386>
 80056c8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80056cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80056d0:	f7fb f844 	bl	800075c <__aeabi_ddiv>
 80056d4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80056d8:	e029      	b.n	800572e <_dtoa_r+0x3d6>
 80056da:	2702      	movs	r7, #2
 80056dc:	e7f2      	b.n	80056c4 <_dtoa_r+0x36c>
 80056de:	07e1      	lsls	r1, r4, #31
 80056e0:	d508      	bpl.n	80056f4 <_dtoa_r+0x39c>
 80056e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80056e6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80056ea:	f7fa ff0d 	bl	8000508 <__aeabi_dmul>
 80056ee:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80056f2:	3701      	adds	r7, #1
 80056f4:	1064      	asrs	r4, r4, #1
 80056f6:	3608      	adds	r6, #8
 80056f8:	e7e5      	b.n	80056c6 <_dtoa_r+0x36e>
 80056fa:	f000 80a5 	beq.w	8005848 <_dtoa_r+0x4f0>
 80056fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005702:	f1ca 0400 	rsb	r4, sl, #0
 8005706:	4b7d      	ldr	r3, [pc, #500]	; (80058fc <_dtoa_r+0x5a4>)
 8005708:	f004 020f 	and.w	r2, r4, #15
 800570c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005714:	f7fa fef8 	bl	8000508 <__aeabi_dmul>
 8005718:	2702      	movs	r7, #2
 800571a:	2300      	movs	r3, #0
 800571c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005720:	4e77      	ldr	r6, [pc, #476]	; (8005900 <_dtoa_r+0x5a8>)
 8005722:	1124      	asrs	r4, r4, #4
 8005724:	2c00      	cmp	r4, #0
 8005726:	f040 8084 	bne.w	8005832 <_dtoa_r+0x4da>
 800572a:	2b00      	cmp	r3, #0
 800572c:	d1d2      	bne.n	80056d4 <_dtoa_r+0x37c>
 800572e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005730:	2b00      	cmp	r3, #0
 8005732:	f000 808b 	beq.w	800584c <_dtoa_r+0x4f4>
 8005736:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800573a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800573e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005742:	2200      	movs	r2, #0
 8005744:	4b6f      	ldr	r3, [pc, #444]	; (8005904 <_dtoa_r+0x5ac>)
 8005746:	f7fb f951 	bl	80009ec <__aeabi_dcmplt>
 800574a:	2800      	cmp	r0, #0
 800574c:	d07e      	beq.n	800584c <_dtoa_r+0x4f4>
 800574e:	9b08      	ldr	r3, [sp, #32]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d07b      	beq.n	800584c <_dtoa_r+0x4f4>
 8005754:	f1b9 0f00 	cmp.w	r9, #0
 8005758:	dd38      	ble.n	80057cc <_dtoa_r+0x474>
 800575a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800575e:	2200      	movs	r2, #0
 8005760:	4b69      	ldr	r3, [pc, #420]	; (8005908 <_dtoa_r+0x5b0>)
 8005762:	f7fa fed1 	bl	8000508 <__aeabi_dmul>
 8005766:	464c      	mov	r4, r9
 8005768:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800576c:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
 8005770:	3701      	adds	r7, #1
 8005772:	4638      	mov	r0, r7
 8005774:	f7fa fe5e 	bl	8000434 <__aeabi_i2d>
 8005778:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800577c:	f7fa fec4 	bl	8000508 <__aeabi_dmul>
 8005780:	2200      	movs	r2, #0
 8005782:	4b62      	ldr	r3, [pc, #392]	; (800590c <_dtoa_r+0x5b4>)
 8005784:	f7fa fd0a 	bl	800019c <__adddf3>
 8005788:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800578c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005790:	9611      	str	r6, [sp, #68]	; 0x44
 8005792:	2c00      	cmp	r4, #0
 8005794:	d15d      	bne.n	8005852 <_dtoa_r+0x4fa>
 8005796:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800579a:	2200      	movs	r2, #0
 800579c:	4b5c      	ldr	r3, [pc, #368]	; (8005910 <_dtoa_r+0x5b8>)
 800579e:	f7fa fcfb 	bl	8000198 <__aeabi_dsub>
 80057a2:	4602      	mov	r2, r0
 80057a4:	460b      	mov	r3, r1
 80057a6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80057aa:	4633      	mov	r3, r6
 80057ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80057ae:	f7fb f93b 	bl	8000a28 <__aeabi_dcmpgt>
 80057b2:	2800      	cmp	r0, #0
 80057b4:	f040 829c 	bne.w	8005cf0 <_dtoa_r+0x998>
 80057b8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80057bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80057be:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80057c2:	f7fb f913 	bl	80009ec <__aeabi_dcmplt>
 80057c6:	2800      	cmp	r0, #0
 80057c8:	f040 8290 	bne.w	8005cec <_dtoa_r+0x994>
 80057cc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80057d0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80057d4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	f2c0 8152 	blt.w	8005a80 <_dtoa_r+0x728>
 80057dc:	f1ba 0f0e 	cmp.w	sl, #14
 80057e0:	f300 814e 	bgt.w	8005a80 <_dtoa_r+0x728>
 80057e4:	4b45      	ldr	r3, [pc, #276]	; (80058fc <_dtoa_r+0x5a4>)
 80057e6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80057ea:	e9d3 3400 	ldrd	r3, r4, [r3]
 80057ee:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80057f2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	f280 80db 	bge.w	80059b0 <_dtoa_r+0x658>
 80057fa:	9b08      	ldr	r3, [sp, #32]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	f300 80d7 	bgt.w	80059b0 <_dtoa_r+0x658>
 8005802:	f040 8272 	bne.w	8005cea <_dtoa_r+0x992>
 8005806:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800580a:	2200      	movs	r2, #0
 800580c:	4b40      	ldr	r3, [pc, #256]	; (8005910 <_dtoa_r+0x5b8>)
 800580e:	f7fa fe7b 	bl	8000508 <__aeabi_dmul>
 8005812:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005816:	f7fb f8fd 	bl	8000a14 <__aeabi_dcmpge>
 800581a:	9c08      	ldr	r4, [sp, #32]
 800581c:	4626      	mov	r6, r4
 800581e:	2800      	cmp	r0, #0
 8005820:	f040 8248 	bne.w	8005cb4 <_dtoa_r+0x95c>
 8005824:	2331      	movs	r3, #49	; 0x31
 8005826:	9f03      	ldr	r7, [sp, #12]
 8005828:	f10a 0a01 	add.w	sl, sl, #1
 800582c:	f807 3b01 	strb.w	r3, [r7], #1
 8005830:	e244      	b.n	8005cbc <_dtoa_r+0x964>
 8005832:	07e2      	lsls	r2, r4, #31
 8005834:	d505      	bpl.n	8005842 <_dtoa_r+0x4ea>
 8005836:	e9d6 2300 	ldrd	r2, r3, [r6]
 800583a:	f7fa fe65 	bl	8000508 <__aeabi_dmul>
 800583e:	2301      	movs	r3, #1
 8005840:	3701      	adds	r7, #1
 8005842:	1064      	asrs	r4, r4, #1
 8005844:	3608      	adds	r6, #8
 8005846:	e76d      	b.n	8005724 <_dtoa_r+0x3cc>
 8005848:	2702      	movs	r7, #2
 800584a:	e770      	b.n	800572e <_dtoa_r+0x3d6>
 800584c:	46d0      	mov	r8, sl
 800584e:	9c08      	ldr	r4, [sp, #32]
 8005850:	e78f      	b.n	8005772 <_dtoa_r+0x41a>
 8005852:	9903      	ldr	r1, [sp, #12]
 8005854:	4b29      	ldr	r3, [pc, #164]	; (80058fc <_dtoa_r+0x5a4>)
 8005856:	4421      	add	r1, r4
 8005858:	9112      	str	r1, [sp, #72]	; 0x48
 800585a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800585c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005860:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005864:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005868:	2900      	cmp	r1, #0
 800586a:	d055      	beq.n	8005918 <_dtoa_r+0x5c0>
 800586c:	2000      	movs	r0, #0
 800586e:	4929      	ldr	r1, [pc, #164]	; (8005914 <_dtoa_r+0x5bc>)
 8005870:	f7fa ff74 	bl	800075c <__aeabi_ddiv>
 8005874:	463b      	mov	r3, r7
 8005876:	4632      	mov	r2, r6
 8005878:	f7fa fc8e 	bl	8000198 <__aeabi_dsub>
 800587c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005880:	9f03      	ldr	r7, [sp, #12]
 8005882:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005886:	f7fb f8ef 	bl	8000a68 <__aeabi_d2iz>
 800588a:	4604      	mov	r4, r0
 800588c:	f7fa fdd2 	bl	8000434 <__aeabi_i2d>
 8005890:	4602      	mov	r2, r0
 8005892:	460b      	mov	r3, r1
 8005894:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005898:	f7fa fc7e 	bl	8000198 <__aeabi_dsub>
 800589c:	4602      	mov	r2, r0
 800589e:	460b      	mov	r3, r1
 80058a0:	3430      	adds	r4, #48	; 0x30
 80058a2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80058a6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80058aa:	f807 4b01 	strb.w	r4, [r7], #1
 80058ae:	f7fb f89d 	bl	80009ec <__aeabi_dcmplt>
 80058b2:	2800      	cmp	r0, #0
 80058b4:	d174      	bne.n	80059a0 <_dtoa_r+0x648>
 80058b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80058ba:	2000      	movs	r0, #0
 80058bc:	4911      	ldr	r1, [pc, #68]	; (8005904 <_dtoa_r+0x5ac>)
 80058be:	f7fa fc6b 	bl	8000198 <__aeabi_dsub>
 80058c2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80058c6:	f7fb f891 	bl	80009ec <__aeabi_dcmplt>
 80058ca:	2800      	cmp	r0, #0
 80058cc:	f040 80b7 	bne.w	8005a3e <_dtoa_r+0x6e6>
 80058d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80058d2:	429f      	cmp	r7, r3
 80058d4:	f43f af7a 	beq.w	80057cc <_dtoa_r+0x474>
 80058d8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80058dc:	2200      	movs	r2, #0
 80058de:	4b0a      	ldr	r3, [pc, #40]	; (8005908 <_dtoa_r+0x5b0>)
 80058e0:	f7fa fe12 	bl	8000508 <__aeabi_dmul>
 80058e4:	2200      	movs	r2, #0
 80058e6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80058ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80058ee:	4b06      	ldr	r3, [pc, #24]	; (8005908 <_dtoa_r+0x5b0>)
 80058f0:	f7fa fe0a 	bl	8000508 <__aeabi_dmul>
 80058f4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80058f8:	e7c3      	b.n	8005882 <_dtoa_r+0x52a>
 80058fa:	bf00      	nop
 80058fc:	08008430 	.word	0x08008430
 8005900:	08008408 	.word	0x08008408
 8005904:	3ff00000 	.word	0x3ff00000
 8005908:	40240000 	.word	0x40240000
 800590c:	401c0000 	.word	0x401c0000
 8005910:	40140000 	.word	0x40140000
 8005914:	3fe00000 	.word	0x3fe00000
 8005918:	4630      	mov	r0, r6
 800591a:	4639      	mov	r1, r7
 800591c:	f7fa fdf4 	bl	8000508 <__aeabi_dmul>
 8005920:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005922:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005926:	9c03      	ldr	r4, [sp, #12]
 8005928:	9314      	str	r3, [sp, #80]	; 0x50
 800592a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800592e:	f7fb f89b 	bl	8000a68 <__aeabi_d2iz>
 8005932:	9015      	str	r0, [sp, #84]	; 0x54
 8005934:	f7fa fd7e 	bl	8000434 <__aeabi_i2d>
 8005938:	4602      	mov	r2, r0
 800593a:	460b      	mov	r3, r1
 800593c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005940:	f7fa fc2a 	bl	8000198 <__aeabi_dsub>
 8005944:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005946:	4606      	mov	r6, r0
 8005948:	3330      	adds	r3, #48	; 0x30
 800594a:	f804 3b01 	strb.w	r3, [r4], #1
 800594e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005950:	460f      	mov	r7, r1
 8005952:	429c      	cmp	r4, r3
 8005954:	f04f 0200 	mov.w	r2, #0
 8005958:	d124      	bne.n	80059a4 <_dtoa_r+0x64c>
 800595a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800595e:	4bb0      	ldr	r3, [pc, #704]	; (8005c20 <_dtoa_r+0x8c8>)
 8005960:	f7fa fc1c 	bl	800019c <__adddf3>
 8005964:	4602      	mov	r2, r0
 8005966:	460b      	mov	r3, r1
 8005968:	4630      	mov	r0, r6
 800596a:	4639      	mov	r1, r7
 800596c:	f7fb f85c 	bl	8000a28 <__aeabi_dcmpgt>
 8005970:	2800      	cmp	r0, #0
 8005972:	d163      	bne.n	8005a3c <_dtoa_r+0x6e4>
 8005974:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005978:	2000      	movs	r0, #0
 800597a:	49a9      	ldr	r1, [pc, #676]	; (8005c20 <_dtoa_r+0x8c8>)
 800597c:	f7fa fc0c 	bl	8000198 <__aeabi_dsub>
 8005980:	4602      	mov	r2, r0
 8005982:	460b      	mov	r3, r1
 8005984:	4630      	mov	r0, r6
 8005986:	4639      	mov	r1, r7
 8005988:	f7fb f830 	bl	80009ec <__aeabi_dcmplt>
 800598c:	2800      	cmp	r0, #0
 800598e:	f43f af1d 	beq.w	80057cc <_dtoa_r+0x474>
 8005992:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005994:	1e7b      	subs	r3, r7, #1
 8005996:	9314      	str	r3, [sp, #80]	; 0x50
 8005998:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800599c:	2b30      	cmp	r3, #48	; 0x30
 800599e:	d0f8      	beq.n	8005992 <_dtoa_r+0x63a>
 80059a0:	46c2      	mov	sl, r8
 80059a2:	e03b      	b.n	8005a1c <_dtoa_r+0x6c4>
 80059a4:	4b9f      	ldr	r3, [pc, #636]	; (8005c24 <_dtoa_r+0x8cc>)
 80059a6:	f7fa fdaf 	bl	8000508 <__aeabi_dmul>
 80059aa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80059ae:	e7bc      	b.n	800592a <_dtoa_r+0x5d2>
 80059b0:	9f03      	ldr	r7, [sp, #12]
 80059b2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80059b6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80059ba:	4640      	mov	r0, r8
 80059bc:	4649      	mov	r1, r9
 80059be:	f7fa fecd 	bl	800075c <__aeabi_ddiv>
 80059c2:	f7fb f851 	bl	8000a68 <__aeabi_d2iz>
 80059c6:	4604      	mov	r4, r0
 80059c8:	f7fa fd34 	bl	8000434 <__aeabi_i2d>
 80059cc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80059d0:	f7fa fd9a 	bl	8000508 <__aeabi_dmul>
 80059d4:	4602      	mov	r2, r0
 80059d6:	460b      	mov	r3, r1
 80059d8:	4640      	mov	r0, r8
 80059da:	4649      	mov	r1, r9
 80059dc:	f7fa fbdc 	bl	8000198 <__aeabi_dsub>
 80059e0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80059e4:	f807 6b01 	strb.w	r6, [r7], #1
 80059e8:	9e03      	ldr	r6, [sp, #12]
 80059ea:	f8dd c020 	ldr.w	ip, [sp, #32]
 80059ee:	1bbe      	subs	r6, r7, r6
 80059f0:	45b4      	cmp	ip, r6
 80059f2:	4602      	mov	r2, r0
 80059f4:	460b      	mov	r3, r1
 80059f6:	d136      	bne.n	8005a66 <_dtoa_r+0x70e>
 80059f8:	f7fa fbd0 	bl	800019c <__adddf3>
 80059fc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005a00:	4680      	mov	r8, r0
 8005a02:	4689      	mov	r9, r1
 8005a04:	f7fb f810 	bl	8000a28 <__aeabi_dcmpgt>
 8005a08:	bb58      	cbnz	r0, 8005a62 <_dtoa_r+0x70a>
 8005a0a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005a0e:	4640      	mov	r0, r8
 8005a10:	4649      	mov	r1, r9
 8005a12:	f7fa ffe1 	bl	80009d8 <__aeabi_dcmpeq>
 8005a16:	b108      	cbz	r0, 8005a1c <_dtoa_r+0x6c4>
 8005a18:	07e1      	lsls	r1, r4, #31
 8005a1a:	d422      	bmi.n	8005a62 <_dtoa_r+0x70a>
 8005a1c:	4628      	mov	r0, r5
 8005a1e:	4659      	mov	r1, fp
 8005a20:	f000 fe68 	bl	80066f4 <_Bfree>
 8005a24:	2300      	movs	r3, #0
 8005a26:	703b      	strb	r3, [r7, #0]
 8005a28:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005a2a:	f10a 0001 	add.w	r0, sl, #1
 8005a2e:	6018      	str	r0, [r3, #0]
 8005a30:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	f43f acde 	beq.w	80053f4 <_dtoa_r+0x9c>
 8005a38:	601f      	str	r7, [r3, #0]
 8005a3a:	e4db      	b.n	80053f4 <_dtoa_r+0x9c>
 8005a3c:	4627      	mov	r7, r4
 8005a3e:	463b      	mov	r3, r7
 8005a40:	461f      	mov	r7, r3
 8005a42:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005a46:	2a39      	cmp	r2, #57	; 0x39
 8005a48:	d107      	bne.n	8005a5a <_dtoa_r+0x702>
 8005a4a:	9a03      	ldr	r2, [sp, #12]
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d1f7      	bne.n	8005a40 <_dtoa_r+0x6e8>
 8005a50:	2230      	movs	r2, #48	; 0x30
 8005a52:	9903      	ldr	r1, [sp, #12]
 8005a54:	f108 0801 	add.w	r8, r8, #1
 8005a58:	700a      	strb	r2, [r1, #0]
 8005a5a:	781a      	ldrb	r2, [r3, #0]
 8005a5c:	3201      	adds	r2, #1
 8005a5e:	701a      	strb	r2, [r3, #0]
 8005a60:	e79e      	b.n	80059a0 <_dtoa_r+0x648>
 8005a62:	46d0      	mov	r8, sl
 8005a64:	e7eb      	b.n	8005a3e <_dtoa_r+0x6e6>
 8005a66:	2200      	movs	r2, #0
 8005a68:	4b6e      	ldr	r3, [pc, #440]	; (8005c24 <_dtoa_r+0x8cc>)
 8005a6a:	f7fa fd4d 	bl	8000508 <__aeabi_dmul>
 8005a6e:	2200      	movs	r2, #0
 8005a70:	2300      	movs	r3, #0
 8005a72:	4680      	mov	r8, r0
 8005a74:	4689      	mov	r9, r1
 8005a76:	f7fa ffaf 	bl	80009d8 <__aeabi_dcmpeq>
 8005a7a:	2800      	cmp	r0, #0
 8005a7c:	d09b      	beq.n	80059b6 <_dtoa_r+0x65e>
 8005a7e:	e7cd      	b.n	8005a1c <_dtoa_r+0x6c4>
 8005a80:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005a82:	2a00      	cmp	r2, #0
 8005a84:	f000 80d0 	beq.w	8005c28 <_dtoa_r+0x8d0>
 8005a88:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005a8a:	2a01      	cmp	r2, #1
 8005a8c:	f300 80ae 	bgt.w	8005bec <_dtoa_r+0x894>
 8005a90:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005a92:	2a00      	cmp	r2, #0
 8005a94:	f000 80a6 	beq.w	8005be4 <_dtoa_r+0x88c>
 8005a98:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005a9c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005a9e:	9f06      	ldr	r7, [sp, #24]
 8005aa0:	9a06      	ldr	r2, [sp, #24]
 8005aa2:	2101      	movs	r1, #1
 8005aa4:	441a      	add	r2, r3
 8005aa6:	9206      	str	r2, [sp, #24]
 8005aa8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005aaa:	4628      	mov	r0, r5
 8005aac:	441a      	add	r2, r3
 8005aae:	9209      	str	r2, [sp, #36]	; 0x24
 8005ab0:	f000 ff20 	bl	80068f4 <__i2b>
 8005ab4:	4606      	mov	r6, r0
 8005ab6:	2f00      	cmp	r7, #0
 8005ab8:	dd0c      	ble.n	8005ad4 <_dtoa_r+0x77c>
 8005aba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	dd09      	ble.n	8005ad4 <_dtoa_r+0x77c>
 8005ac0:	42bb      	cmp	r3, r7
 8005ac2:	bfa8      	it	ge
 8005ac4:	463b      	movge	r3, r7
 8005ac6:	9a06      	ldr	r2, [sp, #24]
 8005ac8:	1aff      	subs	r7, r7, r3
 8005aca:	1ad2      	subs	r2, r2, r3
 8005acc:	9206      	str	r2, [sp, #24]
 8005ace:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ad0:	1ad3      	subs	r3, r2, r3
 8005ad2:	9309      	str	r3, [sp, #36]	; 0x24
 8005ad4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ad6:	b1f3      	cbz	r3, 8005b16 <_dtoa_r+0x7be>
 8005ad8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	f000 80a8 	beq.w	8005c30 <_dtoa_r+0x8d8>
 8005ae0:	2c00      	cmp	r4, #0
 8005ae2:	dd10      	ble.n	8005b06 <_dtoa_r+0x7ae>
 8005ae4:	4631      	mov	r1, r6
 8005ae6:	4622      	mov	r2, r4
 8005ae8:	4628      	mov	r0, r5
 8005aea:	f000 ffc1 	bl	8006a70 <__pow5mult>
 8005aee:	465a      	mov	r2, fp
 8005af0:	4601      	mov	r1, r0
 8005af2:	4606      	mov	r6, r0
 8005af4:	4628      	mov	r0, r5
 8005af6:	f000 ff13 	bl	8006920 <__multiply>
 8005afa:	4680      	mov	r8, r0
 8005afc:	4659      	mov	r1, fp
 8005afe:	4628      	mov	r0, r5
 8005b00:	f000 fdf8 	bl	80066f4 <_Bfree>
 8005b04:	46c3      	mov	fp, r8
 8005b06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b08:	1b1a      	subs	r2, r3, r4
 8005b0a:	d004      	beq.n	8005b16 <_dtoa_r+0x7be>
 8005b0c:	4659      	mov	r1, fp
 8005b0e:	4628      	mov	r0, r5
 8005b10:	f000 ffae 	bl	8006a70 <__pow5mult>
 8005b14:	4683      	mov	fp, r0
 8005b16:	2101      	movs	r1, #1
 8005b18:	4628      	mov	r0, r5
 8005b1a:	f000 feeb 	bl	80068f4 <__i2b>
 8005b1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b20:	4604      	mov	r4, r0
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	f340 8086 	ble.w	8005c34 <_dtoa_r+0x8dc>
 8005b28:	461a      	mov	r2, r3
 8005b2a:	4601      	mov	r1, r0
 8005b2c:	4628      	mov	r0, r5
 8005b2e:	f000 ff9f 	bl	8006a70 <__pow5mult>
 8005b32:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005b34:	4604      	mov	r4, r0
 8005b36:	2b01      	cmp	r3, #1
 8005b38:	dd7f      	ble.n	8005c3a <_dtoa_r+0x8e2>
 8005b3a:	f04f 0800 	mov.w	r8, #0
 8005b3e:	6923      	ldr	r3, [r4, #16]
 8005b40:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005b44:	6918      	ldr	r0, [r3, #16]
 8005b46:	f000 fe87 	bl	8006858 <__hi0bits>
 8005b4a:	f1c0 0020 	rsb	r0, r0, #32
 8005b4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b50:	4418      	add	r0, r3
 8005b52:	f010 001f 	ands.w	r0, r0, #31
 8005b56:	f000 8092 	beq.w	8005c7e <_dtoa_r+0x926>
 8005b5a:	f1c0 0320 	rsb	r3, r0, #32
 8005b5e:	2b04      	cmp	r3, #4
 8005b60:	f340 808a 	ble.w	8005c78 <_dtoa_r+0x920>
 8005b64:	f1c0 001c 	rsb	r0, r0, #28
 8005b68:	9b06      	ldr	r3, [sp, #24]
 8005b6a:	4407      	add	r7, r0
 8005b6c:	4403      	add	r3, r0
 8005b6e:	9306      	str	r3, [sp, #24]
 8005b70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b72:	4403      	add	r3, r0
 8005b74:	9309      	str	r3, [sp, #36]	; 0x24
 8005b76:	9b06      	ldr	r3, [sp, #24]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	dd05      	ble.n	8005b88 <_dtoa_r+0x830>
 8005b7c:	4659      	mov	r1, fp
 8005b7e:	461a      	mov	r2, r3
 8005b80:	4628      	mov	r0, r5
 8005b82:	f000 ffcf 	bl	8006b24 <__lshift>
 8005b86:	4683      	mov	fp, r0
 8005b88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	dd05      	ble.n	8005b9a <_dtoa_r+0x842>
 8005b8e:	4621      	mov	r1, r4
 8005b90:	461a      	mov	r2, r3
 8005b92:	4628      	mov	r0, r5
 8005b94:	f000 ffc6 	bl	8006b24 <__lshift>
 8005b98:	4604      	mov	r4, r0
 8005b9a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d070      	beq.n	8005c82 <_dtoa_r+0x92a>
 8005ba0:	4621      	mov	r1, r4
 8005ba2:	4658      	mov	r0, fp
 8005ba4:	f001 f82e 	bl	8006c04 <__mcmp>
 8005ba8:	2800      	cmp	r0, #0
 8005baa:	da6a      	bge.n	8005c82 <_dtoa_r+0x92a>
 8005bac:	2300      	movs	r3, #0
 8005bae:	4659      	mov	r1, fp
 8005bb0:	220a      	movs	r2, #10
 8005bb2:	4628      	mov	r0, r5
 8005bb4:	f000 fdc0 	bl	8006738 <__multadd>
 8005bb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005bba:	4683      	mov	fp, r0
 8005bbc:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	f000 8194 	beq.w	8005eee <_dtoa_r+0xb96>
 8005bc6:	4631      	mov	r1, r6
 8005bc8:	2300      	movs	r3, #0
 8005bca:	220a      	movs	r2, #10
 8005bcc:	4628      	mov	r0, r5
 8005bce:	f000 fdb3 	bl	8006738 <__multadd>
 8005bd2:	f1b9 0f00 	cmp.w	r9, #0
 8005bd6:	4606      	mov	r6, r0
 8005bd8:	f300 8093 	bgt.w	8005d02 <_dtoa_r+0x9aa>
 8005bdc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005bde:	2b02      	cmp	r3, #2
 8005be0:	dc57      	bgt.n	8005c92 <_dtoa_r+0x93a>
 8005be2:	e08e      	b.n	8005d02 <_dtoa_r+0x9aa>
 8005be4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005be6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005bea:	e757      	b.n	8005a9c <_dtoa_r+0x744>
 8005bec:	9b08      	ldr	r3, [sp, #32]
 8005bee:	1e5c      	subs	r4, r3, #1
 8005bf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bf2:	42a3      	cmp	r3, r4
 8005bf4:	bfb7      	itett	lt
 8005bf6:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005bf8:	1b1c      	subge	r4, r3, r4
 8005bfa:	1ae2      	sublt	r2, r4, r3
 8005bfc:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005bfe:	bfbe      	ittt	lt
 8005c00:	940a      	strlt	r4, [sp, #40]	; 0x28
 8005c02:	189b      	addlt	r3, r3, r2
 8005c04:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005c06:	9b08      	ldr	r3, [sp, #32]
 8005c08:	bfb8      	it	lt
 8005c0a:	2400      	movlt	r4, #0
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	bfbb      	ittet	lt
 8005c10:	9b06      	ldrlt	r3, [sp, #24]
 8005c12:	9a08      	ldrlt	r2, [sp, #32]
 8005c14:	9f06      	ldrge	r7, [sp, #24]
 8005c16:	1a9f      	sublt	r7, r3, r2
 8005c18:	bfac      	ite	ge
 8005c1a:	9b08      	ldrge	r3, [sp, #32]
 8005c1c:	2300      	movlt	r3, #0
 8005c1e:	e73f      	b.n	8005aa0 <_dtoa_r+0x748>
 8005c20:	3fe00000 	.word	0x3fe00000
 8005c24:	40240000 	.word	0x40240000
 8005c28:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005c2a:	9f06      	ldr	r7, [sp, #24]
 8005c2c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005c2e:	e742      	b.n	8005ab6 <_dtoa_r+0x75e>
 8005c30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005c32:	e76b      	b.n	8005b0c <_dtoa_r+0x7b4>
 8005c34:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005c36:	2b01      	cmp	r3, #1
 8005c38:	dc19      	bgt.n	8005c6e <_dtoa_r+0x916>
 8005c3a:	9b04      	ldr	r3, [sp, #16]
 8005c3c:	b9bb      	cbnz	r3, 8005c6e <_dtoa_r+0x916>
 8005c3e:	9b05      	ldr	r3, [sp, #20]
 8005c40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005c44:	b99b      	cbnz	r3, 8005c6e <_dtoa_r+0x916>
 8005c46:	9b05      	ldr	r3, [sp, #20]
 8005c48:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005c4c:	0d1b      	lsrs	r3, r3, #20
 8005c4e:	051b      	lsls	r3, r3, #20
 8005c50:	b183      	cbz	r3, 8005c74 <_dtoa_r+0x91c>
 8005c52:	f04f 0801 	mov.w	r8, #1
 8005c56:	9b06      	ldr	r3, [sp, #24]
 8005c58:	3301      	adds	r3, #1
 8005c5a:	9306      	str	r3, [sp, #24]
 8005c5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c5e:	3301      	adds	r3, #1
 8005c60:	9309      	str	r3, [sp, #36]	; 0x24
 8005c62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	f47f af6a 	bne.w	8005b3e <_dtoa_r+0x7e6>
 8005c6a:	2001      	movs	r0, #1
 8005c6c:	e76f      	b.n	8005b4e <_dtoa_r+0x7f6>
 8005c6e:	f04f 0800 	mov.w	r8, #0
 8005c72:	e7f6      	b.n	8005c62 <_dtoa_r+0x90a>
 8005c74:	4698      	mov	r8, r3
 8005c76:	e7f4      	b.n	8005c62 <_dtoa_r+0x90a>
 8005c78:	f43f af7d 	beq.w	8005b76 <_dtoa_r+0x81e>
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	301c      	adds	r0, #28
 8005c80:	e772      	b.n	8005b68 <_dtoa_r+0x810>
 8005c82:	9b08      	ldr	r3, [sp, #32]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	dc36      	bgt.n	8005cf6 <_dtoa_r+0x99e>
 8005c88:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005c8a:	2b02      	cmp	r3, #2
 8005c8c:	dd33      	ble.n	8005cf6 <_dtoa_r+0x99e>
 8005c8e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005c92:	f1b9 0f00 	cmp.w	r9, #0
 8005c96:	d10d      	bne.n	8005cb4 <_dtoa_r+0x95c>
 8005c98:	4621      	mov	r1, r4
 8005c9a:	464b      	mov	r3, r9
 8005c9c:	2205      	movs	r2, #5
 8005c9e:	4628      	mov	r0, r5
 8005ca0:	f000 fd4a 	bl	8006738 <__multadd>
 8005ca4:	4601      	mov	r1, r0
 8005ca6:	4604      	mov	r4, r0
 8005ca8:	4658      	mov	r0, fp
 8005caa:	f000 ffab 	bl	8006c04 <__mcmp>
 8005cae:	2800      	cmp	r0, #0
 8005cb0:	f73f adb8 	bgt.w	8005824 <_dtoa_r+0x4cc>
 8005cb4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005cb6:	9f03      	ldr	r7, [sp, #12]
 8005cb8:	ea6f 0a03 	mvn.w	sl, r3
 8005cbc:	f04f 0800 	mov.w	r8, #0
 8005cc0:	4621      	mov	r1, r4
 8005cc2:	4628      	mov	r0, r5
 8005cc4:	f000 fd16 	bl	80066f4 <_Bfree>
 8005cc8:	2e00      	cmp	r6, #0
 8005cca:	f43f aea7 	beq.w	8005a1c <_dtoa_r+0x6c4>
 8005cce:	f1b8 0f00 	cmp.w	r8, #0
 8005cd2:	d005      	beq.n	8005ce0 <_dtoa_r+0x988>
 8005cd4:	45b0      	cmp	r8, r6
 8005cd6:	d003      	beq.n	8005ce0 <_dtoa_r+0x988>
 8005cd8:	4641      	mov	r1, r8
 8005cda:	4628      	mov	r0, r5
 8005cdc:	f000 fd0a 	bl	80066f4 <_Bfree>
 8005ce0:	4631      	mov	r1, r6
 8005ce2:	4628      	mov	r0, r5
 8005ce4:	f000 fd06 	bl	80066f4 <_Bfree>
 8005ce8:	e698      	b.n	8005a1c <_dtoa_r+0x6c4>
 8005cea:	2400      	movs	r4, #0
 8005cec:	4626      	mov	r6, r4
 8005cee:	e7e1      	b.n	8005cb4 <_dtoa_r+0x95c>
 8005cf0:	46c2      	mov	sl, r8
 8005cf2:	4626      	mov	r6, r4
 8005cf4:	e596      	b.n	8005824 <_dtoa_r+0x4cc>
 8005cf6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005cf8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	f000 80fd 	beq.w	8005efc <_dtoa_r+0xba4>
 8005d02:	2f00      	cmp	r7, #0
 8005d04:	dd05      	ble.n	8005d12 <_dtoa_r+0x9ba>
 8005d06:	4631      	mov	r1, r6
 8005d08:	463a      	mov	r2, r7
 8005d0a:	4628      	mov	r0, r5
 8005d0c:	f000 ff0a 	bl	8006b24 <__lshift>
 8005d10:	4606      	mov	r6, r0
 8005d12:	f1b8 0f00 	cmp.w	r8, #0
 8005d16:	d05c      	beq.n	8005dd2 <_dtoa_r+0xa7a>
 8005d18:	4628      	mov	r0, r5
 8005d1a:	6871      	ldr	r1, [r6, #4]
 8005d1c:	f000 fcaa 	bl	8006674 <_Balloc>
 8005d20:	4607      	mov	r7, r0
 8005d22:	b928      	cbnz	r0, 8005d30 <_dtoa_r+0x9d8>
 8005d24:	4602      	mov	r2, r0
 8005d26:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005d2a:	4b7f      	ldr	r3, [pc, #508]	; (8005f28 <_dtoa_r+0xbd0>)
 8005d2c:	f7ff bb28 	b.w	8005380 <_dtoa_r+0x28>
 8005d30:	6932      	ldr	r2, [r6, #16]
 8005d32:	f106 010c 	add.w	r1, r6, #12
 8005d36:	3202      	adds	r2, #2
 8005d38:	0092      	lsls	r2, r2, #2
 8005d3a:	300c      	adds	r0, #12
 8005d3c:	f000 fc8c 	bl	8006658 <memcpy>
 8005d40:	2201      	movs	r2, #1
 8005d42:	4639      	mov	r1, r7
 8005d44:	4628      	mov	r0, r5
 8005d46:	f000 feed 	bl	8006b24 <__lshift>
 8005d4a:	46b0      	mov	r8, r6
 8005d4c:	4606      	mov	r6, r0
 8005d4e:	9b03      	ldr	r3, [sp, #12]
 8005d50:	3301      	adds	r3, #1
 8005d52:	9308      	str	r3, [sp, #32]
 8005d54:	9b03      	ldr	r3, [sp, #12]
 8005d56:	444b      	add	r3, r9
 8005d58:	930a      	str	r3, [sp, #40]	; 0x28
 8005d5a:	9b04      	ldr	r3, [sp, #16]
 8005d5c:	f003 0301 	and.w	r3, r3, #1
 8005d60:	9309      	str	r3, [sp, #36]	; 0x24
 8005d62:	9b08      	ldr	r3, [sp, #32]
 8005d64:	4621      	mov	r1, r4
 8005d66:	3b01      	subs	r3, #1
 8005d68:	4658      	mov	r0, fp
 8005d6a:	9304      	str	r3, [sp, #16]
 8005d6c:	f7ff fa68 	bl	8005240 <quorem>
 8005d70:	4603      	mov	r3, r0
 8005d72:	4641      	mov	r1, r8
 8005d74:	3330      	adds	r3, #48	; 0x30
 8005d76:	9006      	str	r0, [sp, #24]
 8005d78:	4658      	mov	r0, fp
 8005d7a:	930b      	str	r3, [sp, #44]	; 0x2c
 8005d7c:	f000 ff42 	bl	8006c04 <__mcmp>
 8005d80:	4632      	mov	r2, r6
 8005d82:	4681      	mov	r9, r0
 8005d84:	4621      	mov	r1, r4
 8005d86:	4628      	mov	r0, r5
 8005d88:	f000 ff58 	bl	8006c3c <__mdiff>
 8005d8c:	68c2      	ldr	r2, [r0, #12]
 8005d8e:	4607      	mov	r7, r0
 8005d90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d92:	bb02      	cbnz	r2, 8005dd6 <_dtoa_r+0xa7e>
 8005d94:	4601      	mov	r1, r0
 8005d96:	4658      	mov	r0, fp
 8005d98:	f000 ff34 	bl	8006c04 <__mcmp>
 8005d9c:	4602      	mov	r2, r0
 8005d9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005da0:	4639      	mov	r1, r7
 8005da2:	4628      	mov	r0, r5
 8005da4:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8005da8:	f000 fca4 	bl	80066f4 <_Bfree>
 8005dac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005dae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005db0:	9f08      	ldr	r7, [sp, #32]
 8005db2:	ea43 0102 	orr.w	r1, r3, r2
 8005db6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005db8:	430b      	orrs	r3, r1
 8005dba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005dbc:	d10d      	bne.n	8005dda <_dtoa_r+0xa82>
 8005dbe:	2b39      	cmp	r3, #57	; 0x39
 8005dc0:	d029      	beq.n	8005e16 <_dtoa_r+0xabe>
 8005dc2:	f1b9 0f00 	cmp.w	r9, #0
 8005dc6:	dd01      	ble.n	8005dcc <_dtoa_r+0xa74>
 8005dc8:	9b06      	ldr	r3, [sp, #24]
 8005dca:	3331      	adds	r3, #49	; 0x31
 8005dcc:	9a04      	ldr	r2, [sp, #16]
 8005dce:	7013      	strb	r3, [r2, #0]
 8005dd0:	e776      	b.n	8005cc0 <_dtoa_r+0x968>
 8005dd2:	4630      	mov	r0, r6
 8005dd4:	e7b9      	b.n	8005d4a <_dtoa_r+0x9f2>
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	e7e2      	b.n	8005da0 <_dtoa_r+0xa48>
 8005dda:	f1b9 0f00 	cmp.w	r9, #0
 8005dde:	db06      	blt.n	8005dee <_dtoa_r+0xa96>
 8005de0:	9922      	ldr	r1, [sp, #136]	; 0x88
 8005de2:	ea41 0909 	orr.w	r9, r1, r9
 8005de6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005de8:	ea59 0101 	orrs.w	r1, r9, r1
 8005dec:	d120      	bne.n	8005e30 <_dtoa_r+0xad8>
 8005dee:	2a00      	cmp	r2, #0
 8005df0:	ddec      	ble.n	8005dcc <_dtoa_r+0xa74>
 8005df2:	4659      	mov	r1, fp
 8005df4:	2201      	movs	r2, #1
 8005df6:	4628      	mov	r0, r5
 8005df8:	9308      	str	r3, [sp, #32]
 8005dfa:	f000 fe93 	bl	8006b24 <__lshift>
 8005dfe:	4621      	mov	r1, r4
 8005e00:	4683      	mov	fp, r0
 8005e02:	f000 feff 	bl	8006c04 <__mcmp>
 8005e06:	2800      	cmp	r0, #0
 8005e08:	9b08      	ldr	r3, [sp, #32]
 8005e0a:	dc02      	bgt.n	8005e12 <_dtoa_r+0xaba>
 8005e0c:	d1de      	bne.n	8005dcc <_dtoa_r+0xa74>
 8005e0e:	07da      	lsls	r2, r3, #31
 8005e10:	d5dc      	bpl.n	8005dcc <_dtoa_r+0xa74>
 8005e12:	2b39      	cmp	r3, #57	; 0x39
 8005e14:	d1d8      	bne.n	8005dc8 <_dtoa_r+0xa70>
 8005e16:	2339      	movs	r3, #57	; 0x39
 8005e18:	9a04      	ldr	r2, [sp, #16]
 8005e1a:	7013      	strb	r3, [r2, #0]
 8005e1c:	463b      	mov	r3, r7
 8005e1e:	461f      	mov	r7, r3
 8005e20:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8005e24:	3b01      	subs	r3, #1
 8005e26:	2a39      	cmp	r2, #57	; 0x39
 8005e28:	d050      	beq.n	8005ecc <_dtoa_r+0xb74>
 8005e2a:	3201      	adds	r2, #1
 8005e2c:	701a      	strb	r2, [r3, #0]
 8005e2e:	e747      	b.n	8005cc0 <_dtoa_r+0x968>
 8005e30:	2a00      	cmp	r2, #0
 8005e32:	dd03      	ble.n	8005e3c <_dtoa_r+0xae4>
 8005e34:	2b39      	cmp	r3, #57	; 0x39
 8005e36:	d0ee      	beq.n	8005e16 <_dtoa_r+0xabe>
 8005e38:	3301      	adds	r3, #1
 8005e3a:	e7c7      	b.n	8005dcc <_dtoa_r+0xa74>
 8005e3c:	9a08      	ldr	r2, [sp, #32]
 8005e3e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005e40:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005e44:	428a      	cmp	r2, r1
 8005e46:	d02a      	beq.n	8005e9e <_dtoa_r+0xb46>
 8005e48:	4659      	mov	r1, fp
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	220a      	movs	r2, #10
 8005e4e:	4628      	mov	r0, r5
 8005e50:	f000 fc72 	bl	8006738 <__multadd>
 8005e54:	45b0      	cmp	r8, r6
 8005e56:	4683      	mov	fp, r0
 8005e58:	f04f 0300 	mov.w	r3, #0
 8005e5c:	f04f 020a 	mov.w	r2, #10
 8005e60:	4641      	mov	r1, r8
 8005e62:	4628      	mov	r0, r5
 8005e64:	d107      	bne.n	8005e76 <_dtoa_r+0xb1e>
 8005e66:	f000 fc67 	bl	8006738 <__multadd>
 8005e6a:	4680      	mov	r8, r0
 8005e6c:	4606      	mov	r6, r0
 8005e6e:	9b08      	ldr	r3, [sp, #32]
 8005e70:	3301      	adds	r3, #1
 8005e72:	9308      	str	r3, [sp, #32]
 8005e74:	e775      	b.n	8005d62 <_dtoa_r+0xa0a>
 8005e76:	f000 fc5f 	bl	8006738 <__multadd>
 8005e7a:	4631      	mov	r1, r6
 8005e7c:	4680      	mov	r8, r0
 8005e7e:	2300      	movs	r3, #0
 8005e80:	220a      	movs	r2, #10
 8005e82:	4628      	mov	r0, r5
 8005e84:	f000 fc58 	bl	8006738 <__multadd>
 8005e88:	4606      	mov	r6, r0
 8005e8a:	e7f0      	b.n	8005e6e <_dtoa_r+0xb16>
 8005e8c:	f1b9 0f00 	cmp.w	r9, #0
 8005e90:	bfcc      	ite	gt
 8005e92:	464f      	movgt	r7, r9
 8005e94:	2701      	movle	r7, #1
 8005e96:	f04f 0800 	mov.w	r8, #0
 8005e9a:	9a03      	ldr	r2, [sp, #12]
 8005e9c:	4417      	add	r7, r2
 8005e9e:	4659      	mov	r1, fp
 8005ea0:	2201      	movs	r2, #1
 8005ea2:	4628      	mov	r0, r5
 8005ea4:	9308      	str	r3, [sp, #32]
 8005ea6:	f000 fe3d 	bl	8006b24 <__lshift>
 8005eaa:	4621      	mov	r1, r4
 8005eac:	4683      	mov	fp, r0
 8005eae:	f000 fea9 	bl	8006c04 <__mcmp>
 8005eb2:	2800      	cmp	r0, #0
 8005eb4:	dcb2      	bgt.n	8005e1c <_dtoa_r+0xac4>
 8005eb6:	d102      	bne.n	8005ebe <_dtoa_r+0xb66>
 8005eb8:	9b08      	ldr	r3, [sp, #32]
 8005eba:	07db      	lsls	r3, r3, #31
 8005ebc:	d4ae      	bmi.n	8005e1c <_dtoa_r+0xac4>
 8005ebe:	463b      	mov	r3, r7
 8005ec0:	461f      	mov	r7, r3
 8005ec2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005ec6:	2a30      	cmp	r2, #48	; 0x30
 8005ec8:	d0fa      	beq.n	8005ec0 <_dtoa_r+0xb68>
 8005eca:	e6f9      	b.n	8005cc0 <_dtoa_r+0x968>
 8005ecc:	9a03      	ldr	r2, [sp, #12]
 8005ece:	429a      	cmp	r2, r3
 8005ed0:	d1a5      	bne.n	8005e1e <_dtoa_r+0xac6>
 8005ed2:	2331      	movs	r3, #49	; 0x31
 8005ed4:	f10a 0a01 	add.w	sl, sl, #1
 8005ed8:	e779      	b.n	8005dce <_dtoa_r+0xa76>
 8005eda:	4b14      	ldr	r3, [pc, #80]	; (8005f2c <_dtoa_r+0xbd4>)
 8005edc:	f7ff baa8 	b.w	8005430 <_dtoa_r+0xd8>
 8005ee0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	f47f aa81 	bne.w	80053ea <_dtoa_r+0x92>
 8005ee8:	4b11      	ldr	r3, [pc, #68]	; (8005f30 <_dtoa_r+0xbd8>)
 8005eea:	f7ff baa1 	b.w	8005430 <_dtoa_r+0xd8>
 8005eee:	f1b9 0f00 	cmp.w	r9, #0
 8005ef2:	dc03      	bgt.n	8005efc <_dtoa_r+0xba4>
 8005ef4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005ef6:	2b02      	cmp	r3, #2
 8005ef8:	f73f aecb 	bgt.w	8005c92 <_dtoa_r+0x93a>
 8005efc:	9f03      	ldr	r7, [sp, #12]
 8005efe:	4621      	mov	r1, r4
 8005f00:	4658      	mov	r0, fp
 8005f02:	f7ff f99d 	bl	8005240 <quorem>
 8005f06:	9a03      	ldr	r2, [sp, #12]
 8005f08:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005f0c:	f807 3b01 	strb.w	r3, [r7], #1
 8005f10:	1aba      	subs	r2, r7, r2
 8005f12:	4591      	cmp	r9, r2
 8005f14:	ddba      	ble.n	8005e8c <_dtoa_r+0xb34>
 8005f16:	4659      	mov	r1, fp
 8005f18:	2300      	movs	r3, #0
 8005f1a:	220a      	movs	r2, #10
 8005f1c:	4628      	mov	r0, r5
 8005f1e:	f000 fc0b 	bl	8006738 <__multadd>
 8005f22:	4683      	mov	fp, r0
 8005f24:	e7eb      	b.n	8005efe <_dtoa_r+0xba6>
 8005f26:	bf00      	nop
 8005f28:	08008320 	.word	0x08008320
 8005f2c:	08008124 	.word	0x08008124
 8005f30:	080082a1 	.word	0x080082a1

08005f34 <rshift>:
 8005f34:	6903      	ldr	r3, [r0, #16]
 8005f36:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005f3a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8005f3e:	f100 0414 	add.w	r4, r0, #20
 8005f42:	ea4f 1261 	mov.w	r2, r1, asr #5
 8005f46:	dd46      	ble.n	8005fd6 <rshift+0xa2>
 8005f48:	f011 011f 	ands.w	r1, r1, #31
 8005f4c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8005f50:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8005f54:	d10c      	bne.n	8005f70 <rshift+0x3c>
 8005f56:	4629      	mov	r1, r5
 8005f58:	f100 0710 	add.w	r7, r0, #16
 8005f5c:	42b1      	cmp	r1, r6
 8005f5e:	d335      	bcc.n	8005fcc <rshift+0x98>
 8005f60:	1a9b      	subs	r3, r3, r2
 8005f62:	009b      	lsls	r3, r3, #2
 8005f64:	1eea      	subs	r2, r5, #3
 8005f66:	4296      	cmp	r6, r2
 8005f68:	bf38      	it	cc
 8005f6a:	2300      	movcc	r3, #0
 8005f6c:	4423      	add	r3, r4
 8005f6e:	e015      	b.n	8005f9c <rshift+0x68>
 8005f70:	46a1      	mov	r9, r4
 8005f72:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8005f76:	f1c1 0820 	rsb	r8, r1, #32
 8005f7a:	40cf      	lsrs	r7, r1
 8005f7c:	f105 0e04 	add.w	lr, r5, #4
 8005f80:	4576      	cmp	r6, lr
 8005f82:	46f4      	mov	ip, lr
 8005f84:	d816      	bhi.n	8005fb4 <rshift+0x80>
 8005f86:	1a9a      	subs	r2, r3, r2
 8005f88:	0092      	lsls	r2, r2, #2
 8005f8a:	3a04      	subs	r2, #4
 8005f8c:	3501      	adds	r5, #1
 8005f8e:	42ae      	cmp	r6, r5
 8005f90:	bf38      	it	cc
 8005f92:	2200      	movcc	r2, #0
 8005f94:	18a3      	adds	r3, r4, r2
 8005f96:	50a7      	str	r7, [r4, r2]
 8005f98:	b107      	cbz	r7, 8005f9c <rshift+0x68>
 8005f9a:	3304      	adds	r3, #4
 8005f9c:	42a3      	cmp	r3, r4
 8005f9e:	eba3 0204 	sub.w	r2, r3, r4
 8005fa2:	bf08      	it	eq
 8005fa4:	2300      	moveq	r3, #0
 8005fa6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8005faa:	6102      	str	r2, [r0, #16]
 8005fac:	bf08      	it	eq
 8005fae:	6143      	streq	r3, [r0, #20]
 8005fb0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005fb4:	f8dc c000 	ldr.w	ip, [ip]
 8005fb8:	fa0c fc08 	lsl.w	ip, ip, r8
 8005fbc:	ea4c 0707 	orr.w	r7, ip, r7
 8005fc0:	f849 7b04 	str.w	r7, [r9], #4
 8005fc4:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005fc8:	40cf      	lsrs	r7, r1
 8005fca:	e7d9      	b.n	8005f80 <rshift+0x4c>
 8005fcc:	f851 cb04 	ldr.w	ip, [r1], #4
 8005fd0:	f847 cf04 	str.w	ip, [r7, #4]!
 8005fd4:	e7c2      	b.n	8005f5c <rshift+0x28>
 8005fd6:	4623      	mov	r3, r4
 8005fd8:	e7e0      	b.n	8005f9c <rshift+0x68>

08005fda <__hexdig_fun>:
 8005fda:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8005fde:	2b09      	cmp	r3, #9
 8005fe0:	d802      	bhi.n	8005fe8 <__hexdig_fun+0xe>
 8005fe2:	3820      	subs	r0, #32
 8005fe4:	b2c0      	uxtb	r0, r0
 8005fe6:	4770      	bx	lr
 8005fe8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8005fec:	2b05      	cmp	r3, #5
 8005fee:	d801      	bhi.n	8005ff4 <__hexdig_fun+0x1a>
 8005ff0:	3847      	subs	r0, #71	; 0x47
 8005ff2:	e7f7      	b.n	8005fe4 <__hexdig_fun+0xa>
 8005ff4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8005ff8:	2b05      	cmp	r3, #5
 8005ffa:	d801      	bhi.n	8006000 <__hexdig_fun+0x26>
 8005ffc:	3827      	subs	r0, #39	; 0x27
 8005ffe:	e7f1      	b.n	8005fe4 <__hexdig_fun+0xa>
 8006000:	2000      	movs	r0, #0
 8006002:	4770      	bx	lr

08006004 <__gethex>:
 8006004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006008:	b08b      	sub	sp, #44	; 0x2c
 800600a:	9305      	str	r3, [sp, #20]
 800600c:	4bb2      	ldr	r3, [pc, #712]	; (80062d8 <__gethex+0x2d4>)
 800600e:	9002      	str	r0, [sp, #8]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	468b      	mov	fp, r1
 8006014:	4618      	mov	r0, r3
 8006016:	4690      	mov	r8, r2
 8006018:	9303      	str	r3, [sp, #12]
 800601a:	f7fa f8b1 	bl	8000180 <strlen>
 800601e:	4682      	mov	sl, r0
 8006020:	9b03      	ldr	r3, [sp, #12]
 8006022:	f8db 2000 	ldr.w	r2, [fp]
 8006026:	4403      	add	r3, r0
 8006028:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800602c:	9306      	str	r3, [sp, #24]
 800602e:	1c93      	adds	r3, r2, #2
 8006030:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8006034:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8006038:	32fe      	adds	r2, #254	; 0xfe
 800603a:	18d1      	adds	r1, r2, r3
 800603c:	461f      	mov	r7, r3
 800603e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006042:	9101      	str	r1, [sp, #4]
 8006044:	2830      	cmp	r0, #48	; 0x30
 8006046:	d0f8      	beq.n	800603a <__gethex+0x36>
 8006048:	f7ff ffc7 	bl	8005fda <__hexdig_fun>
 800604c:	4604      	mov	r4, r0
 800604e:	2800      	cmp	r0, #0
 8006050:	d13a      	bne.n	80060c8 <__gethex+0xc4>
 8006052:	4652      	mov	r2, sl
 8006054:	4638      	mov	r0, r7
 8006056:	9903      	ldr	r1, [sp, #12]
 8006058:	f001 fa26 	bl	80074a8 <strncmp>
 800605c:	4605      	mov	r5, r0
 800605e:	2800      	cmp	r0, #0
 8006060:	d166      	bne.n	8006130 <__gethex+0x12c>
 8006062:	f817 000a 	ldrb.w	r0, [r7, sl]
 8006066:	eb07 060a 	add.w	r6, r7, sl
 800606a:	f7ff ffb6 	bl	8005fda <__hexdig_fun>
 800606e:	2800      	cmp	r0, #0
 8006070:	d060      	beq.n	8006134 <__gethex+0x130>
 8006072:	4633      	mov	r3, r6
 8006074:	7818      	ldrb	r0, [r3, #0]
 8006076:	461f      	mov	r7, r3
 8006078:	2830      	cmp	r0, #48	; 0x30
 800607a:	f103 0301 	add.w	r3, r3, #1
 800607e:	d0f9      	beq.n	8006074 <__gethex+0x70>
 8006080:	f7ff ffab 	bl	8005fda <__hexdig_fun>
 8006084:	2301      	movs	r3, #1
 8006086:	fab0 f480 	clz	r4, r0
 800608a:	4635      	mov	r5, r6
 800608c:	0964      	lsrs	r4, r4, #5
 800608e:	9301      	str	r3, [sp, #4]
 8006090:	463a      	mov	r2, r7
 8006092:	4616      	mov	r6, r2
 8006094:	7830      	ldrb	r0, [r6, #0]
 8006096:	3201      	adds	r2, #1
 8006098:	f7ff ff9f 	bl	8005fda <__hexdig_fun>
 800609c:	2800      	cmp	r0, #0
 800609e:	d1f8      	bne.n	8006092 <__gethex+0x8e>
 80060a0:	4652      	mov	r2, sl
 80060a2:	4630      	mov	r0, r6
 80060a4:	9903      	ldr	r1, [sp, #12]
 80060a6:	f001 f9ff 	bl	80074a8 <strncmp>
 80060aa:	b980      	cbnz	r0, 80060ce <__gethex+0xca>
 80060ac:	b94d      	cbnz	r5, 80060c2 <__gethex+0xbe>
 80060ae:	eb06 050a 	add.w	r5, r6, sl
 80060b2:	462a      	mov	r2, r5
 80060b4:	4616      	mov	r6, r2
 80060b6:	7830      	ldrb	r0, [r6, #0]
 80060b8:	3201      	adds	r2, #1
 80060ba:	f7ff ff8e 	bl	8005fda <__hexdig_fun>
 80060be:	2800      	cmp	r0, #0
 80060c0:	d1f8      	bne.n	80060b4 <__gethex+0xb0>
 80060c2:	1bad      	subs	r5, r5, r6
 80060c4:	00ad      	lsls	r5, r5, #2
 80060c6:	e004      	b.n	80060d2 <__gethex+0xce>
 80060c8:	2400      	movs	r4, #0
 80060ca:	4625      	mov	r5, r4
 80060cc:	e7e0      	b.n	8006090 <__gethex+0x8c>
 80060ce:	2d00      	cmp	r5, #0
 80060d0:	d1f7      	bne.n	80060c2 <__gethex+0xbe>
 80060d2:	7833      	ldrb	r3, [r6, #0]
 80060d4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80060d8:	2b50      	cmp	r3, #80	; 0x50
 80060da:	d139      	bne.n	8006150 <__gethex+0x14c>
 80060dc:	7873      	ldrb	r3, [r6, #1]
 80060de:	2b2b      	cmp	r3, #43	; 0x2b
 80060e0:	d02a      	beq.n	8006138 <__gethex+0x134>
 80060e2:	2b2d      	cmp	r3, #45	; 0x2d
 80060e4:	d02c      	beq.n	8006140 <__gethex+0x13c>
 80060e6:	f04f 0900 	mov.w	r9, #0
 80060ea:	1c71      	adds	r1, r6, #1
 80060ec:	7808      	ldrb	r0, [r1, #0]
 80060ee:	f7ff ff74 	bl	8005fda <__hexdig_fun>
 80060f2:	1e43      	subs	r3, r0, #1
 80060f4:	b2db      	uxtb	r3, r3
 80060f6:	2b18      	cmp	r3, #24
 80060f8:	d82a      	bhi.n	8006150 <__gethex+0x14c>
 80060fa:	f1a0 0210 	sub.w	r2, r0, #16
 80060fe:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006102:	f7ff ff6a 	bl	8005fda <__hexdig_fun>
 8006106:	1e43      	subs	r3, r0, #1
 8006108:	b2db      	uxtb	r3, r3
 800610a:	2b18      	cmp	r3, #24
 800610c:	d91b      	bls.n	8006146 <__gethex+0x142>
 800610e:	f1b9 0f00 	cmp.w	r9, #0
 8006112:	d000      	beq.n	8006116 <__gethex+0x112>
 8006114:	4252      	negs	r2, r2
 8006116:	4415      	add	r5, r2
 8006118:	f8cb 1000 	str.w	r1, [fp]
 800611c:	b1d4      	cbz	r4, 8006154 <__gethex+0x150>
 800611e:	9b01      	ldr	r3, [sp, #4]
 8006120:	2b00      	cmp	r3, #0
 8006122:	bf14      	ite	ne
 8006124:	2700      	movne	r7, #0
 8006126:	2706      	moveq	r7, #6
 8006128:	4638      	mov	r0, r7
 800612a:	b00b      	add	sp, #44	; 0x2c
 800612c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006130:	463e      	mov	r6, r7
 8006132:	4625      	mov	r5, r4
 8006134:	2401      	movs	r4, #1
 8006136:	e7cc      	b.n	80060d2 <__gethex+0xce>
 8006138:	f04f 0900 	mov.w	r9, #0
 800613c:	1cb1      	adds	r1, r6, #2
 800613e:	e7d5      	b.n	80060ec <__gethex+0xe8>
 8006140:	f04f 0901 	mov.w	r9, #1
 8006144:	e7fa      	b.n	800613c <__gethex+0x138>
 8006146:	230a      	movs	r3, #10
 8006148:	fb03 0202 	mla	r2, r3, r2, r0
 800614c:	3a10      	subs	r2, #16
 800614e:	e7d6      	b.n	80060fe <__gethex+0xfa>
 8006150:	4631      	mov	r1, r6
 8006152:	e7e1      	b.n	8006118 <__gethex+0x114>
 8006154:	4621      	mov	r1, r4
 8006156:	1bf3      	subs	r3, r6, r7
 8006158:	3b01      	subs	r3, #1
 800615a:	2b07      	cmp	r3, #7
 800615c:	dc0a      	bgt.n	8006174 <__gethex+0x170>
 800615e:	9802      	ldr	r0, [sp, #8]
 8006160:	f000 fa88 	bl	8006674 <_Balloc>
 8006164:	4604      	mov	r4, r0
 8006166:	b940      	cbnz	r0, 800617a <__gethex+0x176>
 8006168:	4602      	mov	r2, r0
 800616a:	21de      	movs	r1, #222	; 0xde
 800616c:	4b5b      	ldr	r3, [pc, #364]	; (80062dc <__gethex+0x2d8>)
 800616e:	485c      	ldr	r0, [pc, #368]	; (80062e0 <__gethex+0x2dc>)
 8006170:	f001 f9bc 	bl	80074ec <__assert_func>
 8006174:	3101      	adds	r1, #1
 8006176:	105b      	asrs	r3, r3, #1
 8006178:	e7ef      	b.n	800615a <__gethex+0x156>
 800617a:	f04f 0b00 	mov.w	fp, #0
 800617e:	f100 0914 	add.w	r9, r0, #20
 8006182:	f1ca 0301 	rsb	r3, sl, #1
 8006186:	f8cd 9010 	str.w	r9, [sp, #16]
 800618a:	f8cd b004 	str.w	fp, [sp, #4]
 800618e:	9308      	str	r3, [sp, #32]
 8006190:	42b7      	cmp	r7, r6
 8006192:	d33f      	bcc.n	8006214 <__gethex+0x210>
 8006194:	9f04      	ldr	r7, [sp, #16]
 8006196:	9b01      	ldr	r3, [sp, #4]
 8006198:	f847 3b04 	str.w	r3, [r7], #4
 800619c:	eba7 0709 	sub.w	r7, r7, r9
 80061a0:	10bf      	asrs	r7, r7, #2
 80061a2:	6127      	str	r7, [r4, #16]
 80061a4:	4618      	mov	r0, r3
 80061a6:	f000 fb57 	bl	8006858 <__hi0bits>
 80061aa:	017f      	lsls	r7, r7, #5
 80061ac:	f8d8 6000 	ldr.w	r6, [r8]
 80061b0:	1a3f      	subs	r7, r7, r0
 80061b2:	42b7      	cmp	r7, r6
 80061b4:	dd62      	ble.n	800627c <__gethex+0x278>
 80061b6:	1bbf      	subs	r7, r7, r6
 80061b8:	4639      	mov	r1, r7
 80061ba:	4620      	mov	r0, r4
 80061bc:	f000 fef1 	bl	8006fa2 <__any_on>
 80061c0:	4682      	mov	sl, r0
 80061c2:	b1a8      	cbz	r0, 80061f0 <__gethex+0x1ec>
 80061c4:	f04f 0a01 	mov.w	sl, #1
 80061c8:	1e7b      	subs	r3, r7, #1
 80061ca:	1159      	asrs	r1, r3, #5
 80061cc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80061d0:	f003 021f 	and.w	r2, r3, #31
 80061d4:	fa0a f202 	lsl.w	r2, sl, r2
 80061d8:	420a      	tst	r2, r1
 80061da:	d009      	beq.n	80061f0 <__gethex+0x1ec>
 80061dc:	4553      	cmp	r3, sl
 80061de:	dd05      	ble.n	80061ec <__gethex+0x1e8>
 80061e0:	4620      	mov	r0, r4
 80061e2:	1eb9      	subs	r1, r7, #2
 80061e4:	f000 fedd 	bl	8006fa2 <__any_on>
 80061e8:	2800      	cmp	r0, #0
 80061ea:	d144      	bne.n	8006276 <__gethex+0x272>
 80061ec:	f04f 0a02 	mov.w	sl, #2
 80061f0:	4639      	mov	r1, r7
 80061f2:	4620      	mov	r0, r4
 80061f4:	f7ff fe9e 	bl	8005f34 <rshift>
 80061f8:	443d      	add	r5, r7
 80061fa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80061fe:	42ab      	cmp	r3, r5
 8006200:	da4a      	bge.n	8006298 <__gethex+0x294>
 8006202:	4621      	mov	r1, r4
 8006204:	9802      	ldr	r0, [sp, #8]
 8006206:	f000 fa75 	bl	80066f4 <_Bfree>
 800620a:	2300      	movs	r3, #0
 800620c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800620e:	27a3      	movs	r7, #163	; 0xa3
 8006210:	6013      	str	r3, [r2, #0]
 8006212:	e789      	b.n	8006128 <__gethex+0x124>
 8006214:	1e73      	subs	r3, r6, #1
 8006216:	9a06      	ldr	r2, [sp, #24]
 8006218:	9307      	str	r3, [sp, #28]
 800621a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800621e:	4293      	cmp	r3, r2
 8006220:	d019      	beq.n	8006256 <__gethex+0x252>
 8006222:	f1bb 0f20 	cmp.w	fp, #32
 8006226:	d107      	bne.n	8006238 <__gethex+0x234>
 8006228:	9b04      	ldr	r3, [sp, #16]
 800622a:	9a01      	ldr	r2, [sp, #4]
 800622c:	f843 2b04 	str.w	r2, [r3], #4
 8006230:	9304      	str	r3, [sp, #16]
 8006232:	2300      	movs	r3, #0
 8006234:	469b      	mov	fp, r3
 8006236:	9301      	str	r3, [sp, #4]
 8006238:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800623c:	f7ff fecd 	bl	8005fda <__hexdig_fun>
 8006240:	9b01      	ldr	r3, [sp, #4]
 8006242:	f000 000f 	and.w	r0, r0, #15
 8006246:	fa00 f00b 	lsl.w	r0, r0, fp
 800624a:	4303      	orrs	r3, r0
 800624c:	9301      	str	r3, [sp, #4]
 800624e:	f10b 0b04 	add.w	fp, fp, #4
 8006252:	9b07      	ldr	r3, [sp, #28]
 8006254:	e00d      	b.n	8006272 <__gethex+0x26e>
 8006256:	9a08      	ldr	r2, [sp, #32]
 8006258:	1e73      	subs	r3, r6, #1
 800625a:	4413      	add	r3, r2
 800625c:	42bb      	cmp	r3, r7
 800625e:	d3e0      	bcc.n	8006222 <__gethex+0x21e>
 8006260:	4618      	mov	r0, r3
 8006262:	4652      	mov	r2, sl
 8006264:	9903      	ldr	r1, [sp, #12]
 8006266:	9309      	str	r3, [sp, #36]	; 0x24
 8006268:	f001 f91e 	bl	80074a8 <strncmp>
 800626c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800626e:	2800      	cmp	r0, #0
 8006270:	d1d7      	bne.n	8006222 <__gethex+0x21e>
 8006272:	461e      	mov	r6, r3
 8006274:	e78c      	b.n	8006190 <__gethex+0x18c>
 8006276:	f04f 0a03 	mov.w	sl, #3
 800627a:	e7b9      	b.n	80061f0 <__gethex+0x1ec>
 800627c:	da09      	bge.n	8006292 <__gethex+0x28e>
 800627e:	1bf7      	subs	r7, r6, r7
 8006280:	4621      	mov	r1, r4
 8006282:	463a      	mov	r2, r7
 8006284:	9802      	ldr	r0, [sp, #8]
 8006286:	f000 fc4d 	bl	8006b24 <__lshift>
 800628a:	4604      	mov	r4, r0
 800628c:	1bed      	subs	r5, r5, r7
 800628e:	f100 0914 	add.w	r9, r0, #20
 8006292:	f04f 0a00 	mov.w	sl, #0
 8006296:	e7b0      	b.n	80061fa <__gethex+0x1f6>
 8006298:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800629c:	42a8      	cmp	r0, r5
 800629e:	dd72      	ble.n	8006386 <__gethex+0x382>
 80062a0:	1b45      	subs	r5, r0, r5
 80062a2:	42ae      	cmp	r6, r5
 80062a4:	dc35      	bgt.n	8006312 <__gethex+0x30e>
 80062a6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80062aa:	2b02      	cmp	r3, #2
 80062ac:	d029      	beq.n	8006302 <__gethex+0x2fe>
 80062ae:	2b03      	cmp	r3, #3
 80062b0:	d02b      	beq.n	800630a <__gethex+0x306>
 80062b2:	2b01      	cmp	r3, #1
 80062b4:	d11c      	bne.n	80062f0 <__gethex+0x2ec>
 80062b6:	42ae      	cmp	r6, r5
 80062b8:	d11a      	bne.n	80062f0 <__gethex+0x2ec>
 80062ba:	2e01      	cmp	r6, #1
 80062bc:	d112      	bne.n	80062e4 <__gethex+0x2e0>
 80062be:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80062c2:	9a05      	ldr	r2, [sp, #20]
 80062c4:	2762      	movs	r7, #98	; 0x62
 80062c6:	6013      	str	r3, [r2, #0]
 80062c8:	2301      	movs	r3, #1
 80062ca:	6123      	str	r3, [r4, #16]
 80062cc:	f8c9 3000 	str.w	r3, [r9]
 80062d0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80062d2:	601c      	str	r4, [r3, #0]
 80062d4:	e728      	b.n	8006128 <__gethex+0x124>
 80062d6:	bf00      	nop
 80062d8:	08008398 	.word	0x08008398
 80062dc:	08008320 	.word	0x08008320
 80062e0:	08008331 	.word	0x08008331
 80062e4:	4620      	mov	r0, r4
 80062e6:	1e71      	subs	r1, r6, #1
 80062e8:	f000 fe5b 	bl	8006fa2 <__any_on>
 80062ec:	2800      	cmp	r0, #0
 80062ee:	d1e6      	bne.n	80062be <__gethex+0x2ba>
 80062f0:	4621      	mov	r1, r4
 80062f2:	9802      	ldr	r0, [sp, #8]
 80062f4:	f000 f9fe 	bl	80066f4 <_Bfree>
 80062f8:	2300      	movs	r3, #0
 80062fa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80062fc:	2750      	movs	r7, #80	; 0x50
 80062fe:	6013      	str	r3, [r2, #0]
 8006300:	e712      	b.n	8006128 <__gethex+0x124>
 8006302:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006304:	2b00      	cmp	r3, #0
 8006306:	d1f3      	bne.n	80062f0 <__gethex+0x2ec>
 8006308:	e7d9      	b.n	80062be <__gethex+0x2ba>
 800630a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800630c:	2b00      	cmp	r3, #0
 800630e:	d1d6      	bne.n	80062be <__gethex+0x2ba>
 8006310:	e7ee      	b.n	80062f0 <__gethex+0x2ec>
 8006312:	1e6f      	subs	r7, r5, #1
 8006314:	f1ba 0f00 	cmp.w	sl, #0
 8006318:	d132      	bne.n	8006380 <__gethex+0x37c>
 800631a:	b127      	cbz	r7, 8006326 <__gethex+0x322>
 800631c:	4639      	mov	r1, r7
 800631e:	4620      	mov	r0, r4
 8006320:	f000 fe3f 	bl	8006fa2 <__any_on>
 8006324:	4682      	mov	sl, r0
 8006326:	2101      	movs	r1, #1
 8006328:	117b      	asrs	r3, r7, #5
 800632a:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800632e:	f007 071f 	and.w	r7, r7, #31
 8006332:	fa01 f707 	lsl.w	r7, r1, r7
 8006336:	421f      	tst	r7, r3
 8006338:	f04f 0702 	mov.w	r7, #2
 800633c:	4629      	mov	r1, r5
 800633e:	4620      	mov	r0, r4
 8006340:	bf18      	it	ne
 8006342:	f04a 0a02 	orrne.w	sl, sl, #2
 8006346:	1b76      	subs	r6, r6, r5
 8006348:	f7ff fdf4 	bl	8005f34 <rshift>
 800634c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8006350:	f1ba 0f00 	cmp.w	sl, #0
 8006354:	d048      	beq.n	80063e8 <__gethex+0x3e4>
 8006356:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800635a:	2b02      	cmp	r3, #2
 800635c:	d015      	beq.n	800638a <__gethex+0x386>
 800635e:	2b03      	cmp	r3, #3
 8006360:	d017      	beq.n	8006392 <__gethex+0x38e>
 8006362:	2b01      	cmp	r3, #1
 8006364:	d109      	bne.n	800637a <__gethex+0x376>
 8006366:	f01a 0f02 	tst.w	sl, #2
 800636a:	d006      	beq.n	800637a <__gethex+0x376>
 800636c:	f8d9 0000 	ldr.w	r0, [r9]
 8006370:	ea4a 0a00 	orr.w	sl, sl, r0
 8006374:	f01a 0f01 	tst.w	sl, #1
 8006378:	d10e      	bne.n	8006398 <__gethex+0x394>
 800637a:	f047 0710 	orr.w	r7, r7, #16
 800637e:	e033      	b.n	80063e8 <__gethex+0x3e4>
 8006380:	f04f 0a01 	mov.w	sl, #1
 8006384:	e7cf      	b.n	8006326 <__gethex+0x322>
 8006386:	2701      	movs	r7, #1
 8006388:	e7e2      	b.n	8006350 <__gethex+0x34c>
 800638a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800638c:	f1c3 0301 	rsb	r3, r3, #1
 8006390:	9315      	str	r3, [sp, #84]	; 0x54
 8006392:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006394:	2b00      	cmp	r3, #0
 8006396:	d0f0      	beq.n	800637a <__gethex+0x376>
 8006398:	f04f 0c00 	mov.w	ip, #0
 800639c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80063a0:	f104 0314 	add.w	r3, r4, #20
 80063a4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80063a8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80063ac:	4618      	mov	r0, r3
 80063ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80063b2:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 80063b6:	d01c      	beq.n	80063f2 <__gethex+0x3ee>
 80063b8:	3201      	adds	r2, #1
 80063ba:	6002      	str	r2, [r0, #0]
 80063bc:	2f02      	cmp	r7, #2
 80063be:	f104 0314 	add.w	r3, r4, #20
 80063c2:	d13d      	bne.n	8006440 <__gethex+0x43c>
 80063c4:	f8d8 2000 	ldr.w	r2, [r8]
 80063c8:	3a01      	subs	r2, #1
 80063ca:	42b2      	cmp	r2, r6
 80063cc:	d10a      	bne.n	80063e4 <__gethex+0x3e0>
 80063ce:	2201      	movs	r2, #1
 80063d0:	1171      	asrs	r1, r6, #5
 80063d2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80063d6:	f006 061f 	and.w	r6, r6, #31
 80063da:	fa02 f606 	lsl.w	r6, r2, r6
 80063de:	421e      	tst	r6, r3
 80063e0:	bf18      	it	ne
 80063e2:	4617      	movne	r7, r2
 80063e4:	f047 0720 	orr.w	r7, r7, #32
 80063e8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80063ea:	601c      	str	r4, [r3, #0]
 80063ec:	9b05      	ldr	r3, [sp, #20]
 80063ee:	601d      	str	r5, [r3, #0]
 80063f0:	e69a      	b.n	8006128 <__gethex+0x124>
 80063f2:	4299      	cmp	r1, r3
 80063f4:	f843 cc04 	str.w	ip, [r3, #-4]
 80063f8:	d8d8      	bhi.n	80063ac <__gethex+0x3a8>
 80063fa:	68a3      	ldr	r3, [r4, #8]
 80063fc:	459b      	cmp	fp, r3
 80063fe:	db17      	blt.n	8006430 <__gethex+0x42c>
 8006400:	6861      	ldr	r1, [r4, #4]
 8006402:	9802      	ldr	r0, [sp, #8]
 8006404:	3101      	adds	r1, #1
 8006406:	f000 f935 	bl	8006674 <_Balloc>
 800640a:	4681      	mov	r9, r0
 800640c:	b918      	cbnz	r0, 8006416 <__gethex+0x412>
 800640e:	4602      	mov	r2, r0
 8006410:	2184      	movs	r1, #132	; 0x84
 8006412:	4b19      	ldr	r3, [pc, #100]	; (8006478 <__gethex+0x474>)
 8006414:	e6ab      	b.n	800616e <__gethex+0x16a>
 8006416:	6922      	ldr	r2, [r4, #16]
 8006418:	f104 010c 	add.w	r1, r4, #12
 800641c:	3202      	adds	r2, #2
 800641e:	0092      	lsls	r2, r2, #2
 8006420:	300c      	adds	r0, #12
 8006422:	f000 f919 	bl	8006658 <memcpy>
 8006426:	4621      	mov	r1, r4
 8006428:	9802      	ldr	r0, [sp, #8]
 800642a:	f000 f963 	bl	80066f4 <_Bfree>
 800642e:	464c      	mov	r4, r9
 8006430:	6923      	ldr	r3, [r4, #16]
 8006432:	1c5a      	adds	r2, r3, #1
 8006434:	6122      	str	r2, [r4, #16]
 8006436:	2201      	movs	r2, #1
 8006438:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800643c:	615a      	str	r2, [r3, #20]
 800643e:	e7bd      	b.n	80063bc <__gethex+0x3b8>
 8006440:	6922      	ldr	r2, [r4, #16]
 8006442:	455a      	cmp	r2, fp
 8006444:	dd0b      	ble.n	800645e <__gethex+0x45a>
 8006446:	2101      	movs	r1, #1
 8006448:	4620      	mov	r0, r4
 800644a:	f7ff fd73 	bl	8005f34 <rshift>
 800644e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006452:	3501      	adds	r5, #1
 8006454:	42ab      	cmp	r3, r5
 8006456:	f6ff aed4 	blt.w	8006202 <__gethex+0x1fe>
 800645a:	2701      	movs	r7, #1
 800645c:	e7c2      	b.n	80063e4 <__gethex+0x3e0>
 800645e:	f016 061f 	ands.w	r6, r6, #31
 8006462:	d0fa      	beq.n	800645a <__gethex+0x456>
 8006464:	4453      	add	r3, sl
 8006466:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800646a:	f000 f9f5 	bl	8006858 <__hi0bits>
 800646e:	f1c6 0620 	rsb	r6, r6, #32
 8006472:	42b0      	cmp	r0, r6
 8006474:	dbe7      	blt.n	8006446 <__gethex+0x442>
 8006476:	e7f0      	b.n	800645a <__gethex+0x456>
 8006478:	08008320 	.word	0x08008320

0800647c <L_shift>:
 800647c:	f1c2 0208 	rsb	r2, r2, #8
 8006480:	0092      	lsls	r2, r2, #2
 8006482:	b570      	push	{r4, r5, r6, lr}
 8006484:	f1c2 0620 	rsb	r6, r2, #32
 8006488:	6843      	ldr	r3, [r0, #4]
 800648a:	6804      	ldr	r4, [r0, #0]
 800648c:	fa03 f506 	lsl.w	r5, r3, r6
 8006490:	432c      	orrs	r4, r5
 8006492:	40d3      	lsrs	r3, r2
 8006494:	6004      	str	r4, [r0, #0]
 8006496:	f840 3f04 	str.w	r3, [r0, #4]!
 800649a:	4288      	cmp	r0, r1
 800649c:	d3f4      	bcc.n	8006488 <L_shift+0xc>
 800649e:	bd70      	pop	{r4, r5, r6, pc}

080064a0 <__match>:
 80064a0:	b530      	push	{r4, r5, lr}
 80064a2:	6803      	ldr	r3, [r0, #0]
 80064a4:	3301      	adds	r3, #1
 80064a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80064aa:	b914      	cbnz	r4, 80064b2 <__match+0x12>
 80064ac:	6003      	str	r3, [r0, #0]
 80064ae:	2001      	movs	r0, #1
 80064b0:	bd30      	pop	{r4, r5, pc}
 80064b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80064b6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80064ba:	2d19      	cmp	r5, #25
 80064bc:	bf98      	it	ls
 80064be:	3220      	addls	r2, #32
 80064c0:	42a2      	cmp	r2, r4
 80064c2:	d0f0      	beq.n	80064a6 <__match+0x6>
 80064c4:	2000      	movs	r0, #0
 80064c6:	e7f3      	b.n	80064b0 <__match+0x10>

080064c8 <__hexnan>:
 80064c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064cc:	2500      	movs	r5, #0
 80064ce:	680b      	ldr	r3, [r1, #0]
 80064d0:	4682      	mov	sl, r0
 80064d2:	115e      	asrs	r6, r3, #5
 80064d4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80064d8:	f013 031f 	ands.w	r3, r3, #31
 80064dc:	bf18      	it	ne
 80064de:	3604      	addne	r6, #4
 80064e0:	1f37      	subs	r7, r6, #4
 80064e2:	46b9      	mov	r9, r7
 80064e4:	463c      	mov	r4, r7
 80064e6:	46ab      	mov	fp, r5
 80064e8:	b087      	sub	sp, #28
 80064ea:	4690      	mov	r8, r2
 80064ec:	6802      	ldr	r2, [r0, #0]
 80064ee:	9301      	str	r3, [sp, #4]
 80064f0:	f846 5c04 	str.w	r5, [r6, #-4]
 80064f4:	9502      	str	r5, [sp, #8]
 80064f6:	7851      	ldrb	r1, [r2, #1]
 80064f8:	1c53      	adds	r3, r2, #1
 80064fa:	9303      	str	r3, [sp, #12]
 80064fc:	b341      	cbz	r1, 8006550 <__hexnan+0x88>
 80064fe:	4608      	mov	r0, r1
 8006500:	9205      	str	r2, [sp, #20]
 8006502:	9104      	str	r1, [sp, #16]
 8006504:	f7ff fd69 	bl	8005fda <__hexdig_fun>
 8006508:	2800      	cmp	r0, #0
 800650a:	d14f      	bne.n	80065ac <__hexnan+0xe4>
 800650c:	9904      	ldr	r1, [sp, #16]
 800650e:	9a05      	ldr	r2, [sp, #20]
 8006510:	2920      	cmp	r1, #32
 8006512:	d818      	bhi.n	8006546 <__hexnan+0x7e>
 8006514:	9b02      	ldr	r3, [sp, #8]
 8006516:	459b      	cmp	fp, r3
 8006518:	dd13      	ble.n	8006542 <__hexnan+0x7a>
 800651a:	454c      	cmp	r4, r9
 800651c:	d206      	bcs.n	800652c <__hexnan+0x64>
 800651e:	2d07      	cmp	r5, #7
 8006520:	dc04      	bgt.n	800652c <__hexnan+0x64>
 8006522:	462a      	mov	r2, r5
 8006524:	4649      	mov	r1, r9
 8006526:	4620      	mov	r0, r4
 8006528:	f7ff ffa8 	bl	800647c <L_shift>
 800652c:	4544      	cmp	r4, r8
 800652e:	d950      	bls.n	80065d2 <__hexnan+0x10a>
 8006530:	2300      	movs	r3, #0
 8006532:	f1a4 0904 	sub.w	r9, r4, #4
 8006536:	f844 3c04 	str.w	r3, [r4, #-4]
 800653a:	461d      	mov	r5, r3
 800653c:	464c      	mov	r4, r9
 800653e:	f8cd b008 	str.w	fp, [sp, #8]
 8006542:	9a03      	ldr	r2, [sp, #12]
 8006544:	e7d7      	b.n	80064f6 <__hexnan+0x2e>
 8006546:	2929      	cmp	r1, #41	; 0x29
 8006548:	d156      	bne.n	80065f8 <__hexnan+0x130>
 800654a:	3202      	adds	r2, #2
 800654c:	f8ca 2000 	str.w	r2, [sl]
 8006550:	f1bb 0f00 	cmp.w	fp, #0
 8006554:	d050      	beq.n	80065f8 <__hexnan+0x130>
 8006556:	454c      	cmp	r4, r9
 8006558:	d206      	bcs.n	8006568 <__hexnan+0xa0>
 800655a:	2d07      	cmp	r5, #7
 800655c:	dc04      	bgt.n	8006568 <__hexnan+0xa0>
 800655e:	462a      	mov	r2, r5
 8006560:	4649      	mov	r1, r9
 8006562:	4620      	mov	r0, r4
 8006564:	f7ff ff8a 	bl	800647c <L_shift>
 8006568:	4544      	cmp	r4, r8
 800656a:	d934      	bls.n	80065d6 <__hexnan+0x10e>
 800656c:	4623      	mov	r3, r4
 800656e:	f1a8 0204 	sub.w	r2, r8, #4
 8006572:	f853 1b04 	ldr.w	r1, [r3], #4
 8006576:	429f      	cmp	r7, r3
 8006578:	f842 1f04 	str.w	r1, [r2, #4]!
 800657c:	d2f9      	bcs.n	8006572 <__hexnan+0xaa>
 800657e:	1b3b      	subs	r3, r7, r4
 8006580:	f023 0303 	bic.w	r3, r3, #3
 8006584:	3304      	adds	r3, #4
 8006586:	3401      	adds	r4, #1
 8006588:	3e03      	subs	r6, #3
 800658a:	42b4      	cmp	r4, r6
 800658c:	bf88      	it	hi
 800658e:	2304      	movhi	r3, #4
 8006590:	2200      	movs	r2, #0
 8006592:	4443      	add	r3, r8
 8006594:	f843 2b04 	str.w	r2, [r3], #4
 8006598:	429f      	cmp	r7, r3
 800659a:	d2fb      	bcs.n	8006594 <__hexnan+0xcc>
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	b91b      	cbnz	r3, 80065a8 <__hexnan+0xe0>
 80065a0:	4547      	cmp	r7, r8
 80065a2:	d127      	bne.n	80065f4 <__hexnan+0x12c>
 80065a4:	2301      	movs	r3, #1
 80065a6:	603b      	str	r3, [r7, #0]
 80065a8:	2005      	movs	r0, #5
 80065aa:	e026      	b.n	80065fa <__hexnan+0x132>
 80065ac:	3501      	adds	r5, #1
 80065ae:	2d08      	cmp	r5, #8
 80065b0:	f10b 0b01 	add.w	fp, fp, #1
 80065b4:	dd06      	ble.n	80065c4 <__hexnan+0xfc>
 80065b6:	4544      	cmp	r4, r8
 80065b8:	d9c3      	bls.n	8006542 <__hexnan+0x7a>
 80065ba:	2300      	movs	r3, #0
 80065bc:	2501      	movs	r5, #1
 80065be:	f844 3c04 	str.w	r3, [r4, #-4]
 80065c2:	3c04      	subs	r4, #4
 80065c4:	6822      	ldr	r2, [r4, #0]
 80065c6:	f000 000f 	and.w	r0, r0, #15
 80065ca:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80065ce:	6022      	str	r2, [r4, #0]
 80065d0:	e7b7      	b.n	8006542 <__hexnan+0x7a>
 80065d2:	2508      	movs	r5, #8
 80065d4:	e7b5      	b.n	8006542 <__hexnan+0x7a>
 80065d6:	9b01      	ldr	r3, [sp, #4]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d0df      	beq.n	800659c <__hexnan+0xd4>
 80065dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80065e0:	f1c3 0320 	rsb	r3, r3, #32
 80065e4:	fa22 f303 	lsr.w	r3, r2, r3
 80065e8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80065ec:	401a      	ands	r2, r3
 80065ee:	f846 2c04 	str.w	r2, [r6, #-4]
 80065f2:	e7d3      	b.n	800659c <__hexnan+0xd4>
 80065f4:	3f04      	subs	r7, #4
 80065f6:	e7d1      	b.n	800659c <__hexnan+0xd4>
 80065f8:	2004      	movs	r0, #4
 80065fa:	b007      	add	sp, #28
 80065fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006600 <_localeconv_r>:
 8006600:	4800      	ldr	r0, [pc, #0]	; (8006604 <_localeconv_r+0x4>)
 8006602:	4770      	bx	lr
 8006604:	20000164 	.word	0x20000164

08006608 <malloc>:
 8006608:	4b02      	ldr	r3, [pc, #8]	; (8006614 <malloc+0xc>)
 800660a:	4601      	mov	r1, r0
 800660c:	6818      	ldr	r0, [r3, #0]
 800660e:	f000 bd65 	b.w	80070dc <_malloc_r>
 8006612:	bf00      	nop
 8006614:	2000000c 	.word	0x2000000c

08006618 <__ascii_mbtowc>:
 8006618:	b082      	sub	sp, #8
 800661a:	b901      	cbnz	r1, 800661e <__ascii_mbtowc+0x6>
 800661c:	a901      	add	r1, sp, #4
 800661e:	b142      	cbz	r2, 8006632 <__ascii_mbtowc+0x1a>
 8006620:	b14b      	cbz	r3, 8006636 <__ascii_mbtowc+0x1e>
 8006622:	7813      	ldrb	r3, [r2, #0]
 8006624:	600b      	str	r3, [r1, #0]
 8006626:	7812      	ldrb	r2, [r2, #0]
 8006628:	1e10      	subs	r0, r2, #0
 800662a:	bf18      	it	ne
 800662c:	2001      	movne	r0, #1
 800662e:	b002      	add	sp, #8
 8006630:	4770      	bx	lr
 8006632:	4610      	mov	r0, r2
 8006634:	e7fb      	b.n	800662e <__ascii_mbtowc+0x16>
 8006636:	f06f 0001 	mvn.w	r0, #1
 800663a:	e7f8      	b.n	800662e <__ascii_mbtowc+0x16>

0800663c <memchr>:
 800663c:	4603      	mov	r3, r0
 800663e:	b510      	push	{r4, lr}
 8006640:	b2c9      	uxtb	r1, r1
 8006642:	4402      	add	r2, r0
 8006644:	4293      	cmp	r3, r2
 8006646:	4618      	mov	r0, r3
 8006648:	d101      	bne.n	800664e <memchr+0x12>
 800664a:	2000      	movs	r0, #0
 800664c:	e003      	b.n	8006656 <memchr+0x1a>
 800664e:	7804      	ldrb	r4, [r0, #0]
 8006650:	3301      	adds	r3, #1
 8006652:	428c      	cmp	r4, r1
 8006654:	d1f6      	bne.n	8006644 <memchr+0x8>
 8006656:	bd10      	pop	{r4, pc}

08006658 <memcpy>:
 8006658:	440a      	add	r2, r1
 800665a:	4291      	cmp	r1, r2
 800665c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006660:	d100      	bne.n	8006664 <memcpy+0xc>
 8006662:	4770      	bx	lr
 8006664:	b510      	push	{r4, lr}
 8006666:	f811 4b01 	ldrb.w	r4, [r1], #1
 800666a:	4291      	cmp	r1, r2
 800666c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006670:	d1f9      	bne.n	8006666 <memcpy+0xe>
 8006672:	bd10      	pop	{r4, pc}

08006674 <_Balloc>:
 8006674:	b570      	push	{r4, r5, r6, lr}
 8006676:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006678:	4604      	mov	r4, r0
 800667a:	460d      	mov	r5, r1
 800667c:	b976      	cbnz	r6, 800669c <_Balloc+0x28>
 800667e:	2010      	movs	r0, #16
 8006680:	f7ff ffc2 	bl	8006608 <malloc>
 8006684:	4602      	mov	r2, r0
 8006686:	6260      	str	r0, [r4, #36]	; 0x24
 8006688:	b920      	cbnz	r0, 8006694 <_Balloc+0x20>
 800668a:	2166      	movs	r1, #102	; 0x66
 800668c:	4b17      	ldr	r3, [pc, #92]	; (80066ec <_Balloc+0x78>)
 800668e:	4818      	ldr	r0, [pc, #96]	; (80066f0 <_Balloc+0x7c>)
 8006690:	f000 ff2c 	bl	80074ec <__assert_func>
 8006694:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006698:	6006      	str	r6, [r0, #0]
 800669a:	60c6      	str	r6, [r0, #12]
 800669c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800669e:	68f3      	ldr	r3, [r6, #12]
 80066a0:	b183      	cbz	r3, 80066c4 <_Balloc+0x50>
 80066a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80066a4:	68db      	ldr	r3, [r3, #12]
 80066a6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80066aa:	b9b8      	cbnz	r0, 80066dc <_Balloc+0x68>
 80066ac:	2101      	movs	r1, #1
 80066ae:	fa01 f605 	lsl.w	r6, r1, r5
 80066b2:	1d72      	adds	r2, r6, #5
 80066b4:	4620      	mov	r0, r4
 80066b6:	0092      	lsls	r2, r2, #2
 80066b8:	f000 fc94 	bl	8006fe4 <_calloc_r>
 80066bc:	b160      	cbz	r0, 80066d8 <_Balloc+0x64>
 80066be:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80066c2:	e00e      	b.n	80066e2 <_Balloc+0x6e>
 80066c4:	2221      	movs	r2, #33	; 0x21
 80066c6:	2104      	movs	r1, #4
 80066c8:	4620      	mov	r0, r4
 80066ca:	f000 fc8b 	bl	8006fe4 <_calloc_r>
 80066ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80066d0:	60f0      	str	r0, [r6, #12]
 80066d2:	68db      	ldr	r3, [r3, #12]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d1e4      	bne.n	80066a2 <_Balloc+0x2e>
 80066d8:	2000      	movs	r0, #0
 80066da:	bd70      	pop	{r4, r5, r6, pc}
 80066dc:	6802      	ldr	r2, [r0, #0]
 80066de:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80066e2:	2300      	movs	r3, #0
 80066e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80066e8:	e7f7      	b.n	80066da <_Balloc+0x66>
 80066ea:	bf00      	nop
 80066ec:	080082ae 	.word	0x080082ae
 80066f0:	080083ac 	.word	0x080083ac

080066f4 <_Bfree>:
 80066f4:	b570      	push	{r4, r5, r6, lr}
 80066f6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80066f8:	4605      	mov	r5, r0
 80066fa:	460c      	mov	r4, r1
 80066fc:	b976      	cbnz	r6, 800671c <_Bfree+0x28>
 80066fe:	2010      	movs	r0, #16
 8006700:	f7ff ff82 	bl	8006608 <malloc>
 8006704:	4602      	mov	r2, r0
 8006706:	6268      	str	r0, [r5, #36]	; 0x24
 8006708:	b920      	cbnz	r0, 8006714 <_Bfree+0x20>
 800670a:	218a      	movs	r1, #138	; 0x8a
 800670c:	4b08      	ldr	r3, [pc, #32]	; (8006730 <_Bfree+0x3c>)
 800670e:	4809      	ldr	r0, [pc, #36]	; (8006734 <_Bfree+0x40>)
 8006710:	f000 feec 	bl	80074ec <__assert_func>
 8006714:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006718:	6006      	str	r6, [r0, #0]
 800671a:	60c6      	str	r6, [r0, #12]
 800671c:	b13c      	cbz	r4, 800672e <_Bfree+0x3a>
 800671e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006720:	6862      	ldr	r2, [r4, #4]
 8006722:	68db      	ldr	r3, [r3, #12]
 8006724:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006728:	6021      	str	r1, [r4, #0]
 800672a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800672e:	bd70      	pop	{r4, r5, r6, pc}
 8006730:	080082ae 	.word	0x080082ae
 8006734:	080083ac 	.word	0x080083ac

08006738 <__multadd>:
 8006738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800673c:	4607      	mov	r7, r0
 800673e:	460c      	mov	r4, r1
 8006740:	461e      	mov	r6, r3
 8006742:	2000      	movs	r0, #0
 8006744:	690d      	ldr	r5, [r1, #16]
 8006746:	f101 0c14 	add.w	ip, r1, #20
 800674a:	f8dc 3000 	ldr.w	r3, [ip]
 800674e:	3001      	adds	r0, #1
 8006750:	b299      	uxth	r1, r3
 8006752:	fb02 6101 	mla	r1, r2, r1, r6
 8006756:	0c1e      	lsrs	r6, r3, #16
 8006758:	0c0b      	lsrs	r3, r1, #16
 800675a:	fb02 3306 	mla	r3, r2, r6, r3
 800675e:	b289      	uxth	r1, r1
 8006760:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006764:	4285      	cmp	r5, r0
 8006766:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800676a:	f84c 1b04 	str.w	r1, [ip], #4
 800676e:	dcec      	bgt.n	800674a <__multadd+0x12>
 8006770:	b30e      	cbz	r6, 80067b6 <__multadd+0x7e>
 8006772:	68a3      	ldr	r3, [r4, #8]
 8006774:	42ab      	cmp	r3, r5
 8006776:	dc19      	bgt.n	80067ac <__multadd+0x74>
 8006778:	6861      	ldr	r1, [r4, #4]
 800677a:	4638      	mov	r0, r7
 800677c:	3101      	adds	r1, #1
 800677e:	f7ff ff79 	bl	8006674 <_Balloc>
 8006782:	4680      	mov	r8, r0
 8006784:	b928      	cbnz	r0, 8006792 <__multadd+0x5a>
 8006786:	4602      	mov	r2, r0
 8006788:	21b5      	movs	r1, #181	; 0xb5
 800678a:	4b0c      	ldr	r3, [pc, #48]	; (80067bc <__multadd+0x84>)
 800678c:	480c      	ldr	r0, [pc, #48]	; (80067c0 <__multadd+0x88>)
 800678e:	f000 fead 	bl	80074ec <__assert_func>
 8006792:	6922      	ldr	r2, [r4, #16]
 8006794:	f104 010c 	add.w	r1, r4, #12
 8006798:	3202      	adds	r2, #2
 800679a:	0092      	lsls	r2, r2, #2
 800679c:	300c      	adds	r0, #12
 800679e:	f7ff ff5b 	bl	8006658 <memcpy>
 80067a2:	4621      	mov	r1, r4
 80067a4:	4638      	mov	r0, r7
 80067a6:	f7ff ffa5 	bl	80066f4 <_Bfree>
 80067aa:	4644      	mov	r4, r8
 80067ac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80067b0:	3501      	adds	r5, #1
 80067b2:	615e      	str	r6, [r3, #20]
 80067b4:	6125      	str	r5, [r4, #16]
 80067b6:	4620      	mov	r0, r4
 80067b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067bc:	08008320 	.word	0x08008320
 80067c0:	080083ac 	.word	0x080083ac

080067c4 <__s2b>:
 80067c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80067c8:	4615      	mov	r5, r2
 80067ca:	2209      	movs	r2, #9
 80067cc:	461f      	mov	r7, r3
 80067ce:	3308      	adds	r3, #8
 80067d0:	460c      	mov	r4, r1
 80067d2:	fb93 f3f2 	sdiv	r3, r3, r2
 80067d6:	4606      	mov	r6, r0
 80067d8:	2201      	movs	r2, #1
 80067da:	2100      	movs	r1, #0
 80067dc:	429a      	cmp	r2, r3
 80067de:	db09      	blt.n	80067f4 <__s2b+0x30>
 80067e0:	4630      	mov	r0, r6
 80067e2:	f7ff ff47 	bl	8006674 <_Balloc>
 80067e6:	b940      	cbnz	r0, 80067fa <__s2b+0x36>
 80067e8:	4602      	mov	r2, r0
 80067ea:	21ce      	movs	r1, #206	; 0xce
 80067ec:	4b18      	ldr	r3, [pc, #96]	; (8006850 <__s2b+0x8c>)
 80067ee:	4819      	ldr	r0, [pc, #100]	; (8006854 <__s2b+0x90>)
 80067f0:	f000 fe7c 	bl	80074ec <__assert_func>
 80067f4:	0052      	lsls	r2, r2, #1
 80067f6:	3101      	adds	r1, #1
 80067f8:	e7f0      	b.n	80067dc <__s2b+0x18>
 80067fa:	9b08      	ldr	r3, [sp, #32]
 80067fc:	2d09      	cmp	r5, #9
 80067fe:	6143      	str	r3, [r0, #20]
 8006800:	f04f 0301 	mov.w	r3, #1
 8006804:	6103      	str	r3, [r0, #16]
 8006806:	dd16      	ble.n	8006836 <__s2b+0x72>
 8006808:	f104 0909 	add.w	r9, r4, #9
 800680c:	46c8      	mov	r8, r9
 800680e:	442c      	add	r4, r5
 8006810:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006814:	4601      	mov	r1, r0
 8006816:	220a      	movs	r2, #10
 8006818:	4630      	mov	r0, r6
 800681a:	3b30      	subs	r3, #48	; 0x30
 800681c:	f7ff ff8c 	bl	8006738 <__multadd>
 8006820:	45a0      	cmp	r8, r4
 8006822:	d1f5      	bne.n	8006810 <__s2b+0x4c>
 8006824:	f1a5 0408 	sub.w	r4, r5, #8
 8006828:	444c      	add	r4, r9
 800682a:	1b2d      	subs	r5, r5, r4
 800682c:	1963      	adds	r3, r4, r5
 800682e:	42bb      	cmp	r3, r7
 8006830:	db04      	blt.n	800683c <__s2b+0x78>
 8006832:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006836:	2509      	movs	r5, #9
 8006838:	340a      	adds	r4, #10
 800683a:	e7f6      	b.n	800682a <__s2b+0x66>
 800683c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006840:	4601      	mov	r1, r0
 8006842:	220a      	movs	r2, #10
 8006844:	4630      	mov	r0, r6
 8006846:	3b30      	subs	r3, #48	; 0x30
 8006848:	f7ff ff76 	bl	8006738 <__multadd>
 800684c:	e7ee      	b.n	800682c <__s2b+0x68>
 800684e:	bf00      	nop
 8006850:	08008320 	.word	0x08008320
 8006854:	080083ac 	.word	0x080083ac

08006858 <__hi0bits>:
 8006858:	0c02      	lsrs	r2, r0, #16
 800685a:	0412      	lsls	r2, r2, #16
 800685c:	4603      	mov	r3, r0
 800685e:	b9ca      	cbnz	r2, 8006894 <__hi0bits+0x3c>
 8006860:	0403      	lsls	r3, r0, #16
 8006862:	2010      	movs	r0, #16
 8006864:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006868:	bf04      	itt	eq
 800686a:	021b      	lsleq	r3, r3, #8
 800686c:	3008      	addeq	r0, #8
 800686e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006872:	bf04      	itt	eq
 8006874:	011b      	lsleq	r3, r3, #4
 8006876:	3004      	addeq	r0, #4
 8006878:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800687c:	bf04      	itt	eq
 800687e:	009b      	lsleq	r3, r3, #2
 8006880:	3002      	addeq	r0, #2
 8006882:	2b00      	cmp	r3, #0
 8006884:	db05      	blt.n	8006892 <__hi0bits+0x3a>
 8006886:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800688a:	f100 0001 	add.w	r0, r0, #1
 800688e:	bf08      	it	eq
 8006890:	2020      	moveq	r0, #32
 8006892:	4770      	bx	lr
 8006894:	2000      	movs	r0, #0
 8006896:	e7e5      	b.n	8006864 <__hi0bits+0xc>

08006898 <__lo0bits>:
 8006898:	6803      	ldr	r3, [r0, #0]
 800689a:	4602      	mov	r2, r0
 800689c:	f013 0007 	ands.w	r0, r3, #7
 80068a0:	d00b      	beq.n	80068ba <__lo0bits+0x22>
 80068a2:	07d9      	lsls	r1, r3, #31
 80068a4:	d421      	bmi.n	80068ea <__lo0bits+0x52>
 80068a6:	0798      	lsls	r0, r3, #30
 80068a8:	bf49      	itett	mi
 80068aa:	085b      	lsrmi	r3, r3, #1
 80068ac:	089b      	lsrpl	r3, r3, #2
 80068ae:	2001      	movmi	r0, #1
 80068b0:	6013      	strmi	r3, [r2, #0]
 80068b2:	bf5c      	itt	pl
 80068b4:	2002      	movpl	r0, #2
 80068b6:	6013      	strpl	r3, [r2, #0]
 80068b8:	4770      	bx	lr
 80068ba:	b299      	uxth	r1, r3
 80068bc:	b909      	cbnz	r1, 80068c2 <__lo0bits+0x2a>
 80068be:	2010      	movs	r0, #16
 80068c0:	0c1b      	lsrs	r3, r3, #16
 80068c2:	b2d9      	uxtb	r1, r3
 80068c4:	b909      	cbnz	r1, 80068ca <__lo0bits+0x32>
 80068c6:	3008      	adds	r0, #8
 80068c8:	0a1b      	lsrs	r3, r3, #8
 80068ca:	0719      	lsls	r1, r3, #28
 80068cc:	bf04      	itt	eq
 80068ce:	091b      	lsreq	r3, r3, #4
 80068d0:	3004      	addeq	r0, #4
 80068d2:	0799      	lsls	r1, r3, #30
 80068d4:	bf04      	itt	eq
 80068d6:	089b      	lsreq	r3, r3, #2
 80068d8:	3002      	addeq	r0, #2
 80068da:	07d9      	lsls	r1, r3, #31
 80068dc:	d403      	bmi.n	80068e6 <__lo0bits+0x4e>
 80068de:	085b      	lsrs	r3, r3, #1
 80068e0:	f100 0001 	add.w	r0, r0, #1
 80068e4:	d003      	beq.n	80068ee <__lo0bits+0x56>
 80068e6:	6013      	str	r3, [r2, #0]
 80068e8:	4770      	bx	lr
 80068ea:	2000      	movs	r0, #0
 80068ec:	4770      	bx	lr
 80068ee:	2020      	movs	r0, #32
 80068f0:	4770      	bx	lr
	...

080068f4 <__i2b>:
 80068f4:	b510      	push	{r4, lr}
 80068f6:	460c      	mov	r4, r1
 80068f8:	2101      	movs	r1, #1
 80068fa:	f7ff febb 	bl	8006674 <_Balloc>
 80068fe:	4602      	mov	r2, r0
 8006900:	b928      	cbnz	r0, 800690e <__i2b+0x1a>
 8006902:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006906:	4b04      	ldr	r3, [pc, #16]	; (8006918 <__i2b+0x24>)
 8006908:	4804      	ldr	r0, [pc, #16]	; (800691c <__i2b+0x28>)
 800690a:	f000 fdef 	bl	80074ec <__assert_func>
 800690e:	2301      	movs	r3, #1
 8006910:	6144      	str	r4, [r0, #20]
 8006912:	6103      	str	r3, [r0, #16]
 8006914:	bd10      	pop	{r4, pc}
 8006916:	bf00      	nop
 8006918:	08008320 	.word	0x08008320
 800691c:	080083ac 	.word	0x080083ac

08006920 <__multiply>:
 8006920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006924:	4691      	mov	r9, r2
 8006926:	690a      	ldr	r2, [r1, #16]
 8006928:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800692c:	460c      	mov	r4, r1
 800692e:	429a      	cmp	r2, r3
 8006930:	bfbe      	ittt	lt
 8006932:	460b      	movlt	r3, r1
 8006934:	464c      	movlt	r4, r9
 8006936:	4699      	movlt	r9, r3
 8006938:	6927      	ldr	r7, [r4, #16]
 800693a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800693e:	68a3      	ldr	r3, [r4, #8]
 8006940:	6861      	ldr	r1, [r4, #4]
 8006942:	eb07 060a 	add.w	r6, r7, sl
 8006946:	42b3      	cmp	r3, r6
 8006948:	b085      	sub	sp, #20
 800694a:	bfb8      	it	lt
 800694c:	3101      	addlt	r1, #1
 800694e:	f7ff fe91 	bl	8006674 <_Balloc>
 8006952:	b930      	cbnz	r0, 8006962 <__multiply+0x42>
 8006954:	4602      	mov	r2, r0
 8006956:	f240 115d 	movw	r1, #349	; 0x15d
 800695a:	4b43      	ldr	r3, [pc, #268]	; (8006a68 <__multiply+0x148>)
 800695c:	4843      	ldr	r0, [pc, #268]	; (8006a6c <__multiply+0x14c>)
 800695e:	f000 fdc5 	bl	80074ec <__assert_func>
 8006962:	f100 0514 	add.w	r5, r0, #20
 8006966:	462b      	mov	r3, r5
 8006968:	2200      	movs	r2, #0
 800696a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800696e:	4543      	cmp	r3, r8
 8006970:	d321      	bcc.n	80069b6 <__multiply+0x96>
 8006972:	f104 0314 	add.w	r3, r4, #20
 8006976:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800697a:	f109 0314 	add.w	r3, r9, #20
 800697e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006982:	9202      	str	r2, [sp, #8]
 8006984:	1b3a      	subs	r2, r7, r4
 8006986:	3a15      	subs	r2, #21
 8006988:	f022 0203 	bic.w	r2, r2, #3
 800698c:	3204      	adds	r2, #4
 800698e:	f104 0115 	add.w	r1, r4, #21
 8006992:	428f      	cmp	r7, r1
 8006994:	bf38      	it	cc
 8006996:	2204      	movcc	r2, #4
 8006998:	9201      	str	r2, [sp, #4]
 800699a:	9a02      	ldr	r2, [sp, #8]
 800699c:	9303      	str	r3, [sp, #12]
 800699e:	429a      	cmp	r2, r3
 80069a0:	d80c      	bhi.n	80069bc <__multiply+0x9c>
 80069a2:	2e00      	cmp	r6, #0
 80069a4:	dd03      	ble.n	80069ae <__multiply+0x8e>
 80069a6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d059      	beq.n	8006a62 <__multiply+0x142>
 80069ae:	6106      	str	r6, [r0, #16]
 80069b0:	b005      	add	sp, #20
 80069b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069b6:	f843 2b04 	str.w	r2, [r3], #4
 80069ba:	e7d8      	b.n	800696e <__multiply+0x4e>
 80069bc:	f8b3 a000 	ldrh.w	sl, [r3]
 80069c0:	f1ba 0f00 	cmp.w	sl, #0
 80069c4:	d023      	beq.n	8006a0e <__multiply+0xee>
 80069c6:	46a9      	mov	r9, r5
 80069c8:	f04f 0c00 	mov.w	ip, #0
 80069cc:	f104 0e14 	add.w	lr, r4, #20
 80069d0:	f85e 2b04 	ldr.w	r2, [lr], #4
 80069d4:	f8d9 1000 	ldr.w	r1, [r9]
 80069d8:	fa1f fb82 	uxth.w	fp, r2
 80069dc:	b289      	uxth	r1, r1
 80069de:	fb0a 110b 	mla	r1, sl, fp, r1
 80069e2:	4461      	add	r1, ip
 80069e4:	f8d9 c000 	ldr.w	ip, [r9]
 80069e8:	0c12      	lsrs	r2, r2, #16
 80069ea:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80069ee:	fb0a c202 	mla	r2, sl, r2, ip
 80069f2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80069f6:	b289      	uxth	r1, r1
 80069f8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80069fc:	4577      	cmp	r7, lr
 80069fe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006a02:	f849 1b04 	str.w	r1, [r9], #4
 8006a06:	d8e3      	bhi.n	80069d0 <__multiply+0xb0>
 8006a08:	9a01      	ldr	r2, [sp, #4]
 8006a0a:	f845 c002 	str.w	ip, [r5, r2]
 8006a0e:	9a03      	ldr	r2, [sp, #12]
 8006a10:	3304      	adds	r3, #4
 8006a12:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006a16:	f1b9 0f00 	cmp.w	r9, #0
 8006a1a:	d020      	beq.n	8006a5e <__multiply+0x13e>
 8006a1c:	46ae      	mov	lr, r5
 8006a1e:	f04f 0a00 	mov.w	sl, #0
 8006a22:	6829      	ldr	r1, [r5, #0]
 8006a24:	f104 0c14 	add.w	ip, r4, #20
 8006a28:	f8bc b000 	ldrh.w	fp, [ip]
 8006a2c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006a30:	b289      	uxth	r1, r1
 8006a32:	fb09 220b 	mla	r2, r9, fp, r2
 8006a36:	4492      	add	sl, r2
 8006a38:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006a3c:	f84e 1b04 	str.w	r1, [lr], #4
 8006a40:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006a44:	f8be 1000 	ldrh.w	r1, [lr]
 8006a48:	0c12      	lsrs	r2, r2, #16
 8006a4a:	fb09 1102 	mla	r1, r9, r2, r1
 8006a4e:	4567      	cmp	r7, ip
 8006a50:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006a54:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006a58:	d8e6      	bhi.n	8006a28 <__multiply+0x108>
 8006a5a:	9a01      	ldr	r2, [sp, #4]
 8006a5c:	50a9      	str	r1, [r5, r2]
 8006a5e:	3504      	adds	r5, #4
 8006a60:	e79b      	b.n	800699a <__multiply+0x7a>
 8006a62:	3e01      	subs	r6, #1
 8006a64:	e79d      	b.n	80069a2 <__multiply+0x82>
 8006a66:	bf00      	nop
 8006a68:	08008320 	.word	0x08008320
 8006a6c:	080083ac 	.word	0x080083ac

08006a70 <__pow5mult>:
 8006a70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a74:	4615      	mov	r5, r2
 8006a76:	f012 0203 	ands.w	r2, r2, #3
 8006a7a:	4606      	mov	r6, r0
 8006a7c:	460f      	mov	r7, r1
 8006a7e:	d007      	beq.n	8006a90 <__pow5mult+0x20>
 8006a80:	4c25      	ldr	r4, [pc, #148]	; (8006b18 <__pow5mult+0xa8>)
 8006a82:	3a01      	subs	r2, #1
 8006a84:	2300      	movs	r3, #0
 8006a86:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006a8a:	f7ff fe55 	bl	8006738 <__multadd>
 8006a8e:	4607      	mov	r7, r0
 8006a90:	10ad      	asrs	r5, r5, #2
 8006a92:	d03d      	beq.n	8006b10 <__pow5mult+0xa0>
 8006a94:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006a96:	b97c      	cbnz	r4, 8006ab8 <__pow5mult+0x48>
 8006a98:	2010      	movs	r0, #16
 8006a9a:	f7ff fdb5 	bl	8006608 <malloc>
 8006a9e:	4602      	mov	r2, r0
 8006aa0:	6270      	str	r0, [r6, #36]	; 0x24
 8006aa2:	b928      	cbnz	r0, 8006ab0 <__pow5mult+0x40>
 8006aa4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006aa8:	4b1c      	ldr	r3, [pc, #112]	; (8006b1c <__pow5mult+0xac>)
 8006aaa:	481d      	ldr	r0, [pc, #116]	; (8006b20 <__pow5mult+0xb0>)
 8006aac:	f000 fd1e 	bl	80074ec <__assert_func>
 8006ab0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006ab4:	6004      	str	r4, [r0, #0]
 8006ab6:	60c4      	str	r4, [r0, #12]
 8006ab8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006abc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006ac0:	b94c      	cbnz	r4, 8006ad6 <__pow5mult+0x66>
 8006ac2:	f240 2171 	movw	r1, #625	; 0x271
 8006ac6:	4630      	mov	r0, r6
 8006ac8:	f7ff ff14 	bl	80068f4 <__i2b>
 8006acc:	2300      	movs	r3, #0
 8006ace:	4604      	mov	r4, r0
 8006ad0:	f8c8 0008 	str.w	r0, [r8, #8]
 8006ad4:	6003      	str	r3, [r0, #0]
 8006ad6:	f04f 0900 	mov.w	r9, #0
 8006ada:	07eb      	lsls	r3, r5, #31
 8006adc:	d50a      	bpl.n	8006af4 <__pow5mult+0x84>
 8006ade:	4639      	mov	r1, r7
 8006ae0:	4622      	mov	r2, r4
 8006ae2:	4630      	mov	r0, r6
 8006ae4:	f7ff ff1c 	bl	8006920 <__multiply>
 8006ae8:	4680      	mov	r8, r0
 8006aea:	4639      	mov	r1, r7
 8006aec:	4630      	mov	r0, r6
 8006aee:	f7ff fe01 	bl	80066f4 <_Bfree>
 8006af2:	4647      	mov	r7, r8
 8006af4:	106d      	asrs	r5, r5, #1
 8006af6:	d00b      	beq.n	8006b10 <__pow5mult+0xa0>
 8006af8:	6820      	ldr	r0, [r4, #0]
 8006afa:	b938      	cbnz	r0, 8006b0c <__pow5mult+0x9c>
 8006afc:	4622      	mov	r2, r4
 8006afe:	4621      	mov	r1, r4
 8006b00:	4630      	mov	r0, r6
 8006b02:	f7ff ff0d 	bl	8006920 <__multiply>
 8006b06:	6020      	str	r0, [r4, #0]
 8006b08:	f8c0 9000 	str.w	r9, [r0]
 8006b0c:	4604      	mov	r4, r0
 8006b0e:	e7e4      	b.n	8006ada <__pow5mult+0x6a>
 8006b10:	4638      	mov	r0, r7
 8006b12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b16:	bf00      	nop
 8006b18:	080084f8 	.word	0x080084f8
 8006b1c:	080082ae 	.word	0x080082ae
 8006b20:	080083ac 	.word	0x080083ac

08006b24 <__lshift>:
 8006b24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b28:	460c      	mov	r4, r1
 8006b2a:	4607      	mov	r7, r0
 8006b2c:	4691      	mov	r9, r2
 8006b2e:	6923      	ldr	r3, [r4, #16]
 8006b30:	6849      	ldr	r1, [r1, #4]
 8006b32:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006b36:	68a3      	ldr	r3, [r4, #8]
 8006b38:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006b3c:	f108 0601 	add.w	r6, r8, #1
 8006b40:	42b3      	cmp	r3, r6
 8006b42:	db0b      	blt.n	8006b5c <__lshift+0x38>
 8006b44:	4638      	mov	r0, r7
 8006b46:	f7ff fd95 	bl	8006674 <_Balloc>
 8006b4a:	4605      	mov	r5, r0
 8006b4c:	b948      	cbnz	r0, 8006b62 <__lshift+0x3e>
 8006b4e:	4602      	mov	r2, r0
 8006b50:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006b54:	4b29      	ldr	r3, [pc, #164]	; (8006bfc <__lshift+0xd8>)
 8006b56:	482a      	ldr	r0, [pc, #168]	; (8006c00 <__lshift+0xdc>)
 8006b58:	f000 fcc8 	bl	80074ec <__assert_func>
 8006b5c:	3101      	adds	r1, #1
 8006b5e:	005b      	lsls	r3, r3, #1
 8006b60:	e7ee      	b.n	8006b40 <__lshift+0x1c>
 8006b62:	2300      	movs	r3, #0
 8006b64:	f100 0114 	add.w	r1, r0, #20
 8006b68:	f100 0210 	add.w	r2, r0, #16
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	4553      	cmp	r3, sl
 8006b70:	db37      	blt.n	8006be2 <__lshift+0xbe>
 8006b72:	6920      	ldr	r0, [r4, #16]
 8006b74:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006b78:	f104 0314 	add.w	r3, r4, #20
 8006b7c:	f019 091f 	ands.w	r9, r9, #31
 8006b80:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006b84:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006b88:	d02f      	beq.n	8006bea <__lshift+0xc6>
 8006b8a:	468a      	mov	sl, r1
 8006b8c:	f04f 0c00 	mov.w	ip, #0
 8006b90:	f1c9 0e20 	rsb	lr, r9, #32
 8006b94:	681a      	ldr	r2, [r3, #0]
 8006b96:	fa02 f209 	lsl.w	r2, r2, r9
 8006b9a:	ea42 020c 	orr.w	r2, r2, ip
 8006b9e:	f84a 2b04 	str.w	r2, [sl], #4
 8006ba2:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ba6:	4298      	cmp	r0, r3
 8006ba8:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006bac:	d8f2      	bhi.n	8006b94 <__lshift+0x70>
 8006bae:	1b03      	subs	r3, r0, r4
 8006bb0:	3b15      	subs	r3, #21
 8006bb2:	f023 0303 	bic.w	r3, r3, #3
 8006bb6:	3304      	adds	r3, #4
 8006bb8:	f104 0215 	add.w	r2, r4, #21
 8006bbc:	4290      	cmp	r0, r2
 8006bbe:	bf38      	it	cc
 8006bc0:	2304      	movcc	r3, #4
 8006bc2:	f841 c003 	str.w	ip, [r1, r3]
 8006bc6:	f1bc 0f00 	cmp.w	ip, #0
 8006bca:	d001      	beq.n	8006bd0 <__lshift+0xac>
 8006bcc:	f108 0602 	add.w	r6, r8, #2
 8006bd0:	3e01      	subs	r6, #1
 8006bd2:	4638      	mov	r0, r7
 8006bd4:	4621      	mov	r1, r4
 8006bd6:	612e      	str	r6, [r5, #16]
 8006bd8:	f7ff fd8c 	bl	80066f4 <_Bfree>
 8006bdc:	4628      	mov	r0, r5
 8006bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006be2:	f842 0f04 	str.w	r0, [r2, #4]!
 8006be6:	3301      	adds	r3, #1
 8006be8:	e7c1      	b.n	8006b6e <__lshift+0x4a>
 8006bea:	3904      	subs	r1, #4
 8006bec:	f853 2b04 	ldr.w	r2, [r3], #4
 8006bf0:	4298      	cmp	r0, r3
 8006bf2:	f841 2f04 	str.w	r2, [r1, #4]!
 8006bf6:	d8f9      	bhi.n	8006bec <__lshift+0xc8>
 8006bf8:	e7ea      	b.n	8006bd0 <__lshift+0xac>
 8006bfa:	bf00      	nop
 8006bfc:	08008320 	.word	0x08008320
 8006c00:	080083ac 	.word	0x080083ac

08006c04 <__mcmp>:
 8006c04:	4603      	mov	r3, r0
 8006c06:	690a      	ldr	r2, [r1, #16]
 8006c08:	6900      	ldr	r0, [r0, #16]
 8006c0a:	b530      	push	{r4, r5, lr}
 8006c0c:	1a80      	subs	r0, r0, r2
 8006c0e:	d10d      	bne.n	8006c2c <__mcmp+0x28>
 8006c10:	3314      	adds	r3, #20
 8006c12:	3114      	adds	r1, #20
 8006c14:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006c18:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006c1c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006c20:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006c24:	4295      	cmp	r5, r2
 8006c26:	d002      	beq.n	8006c2e <__mcmp+0x2a>
 8006c28:	d304      	bcc.n	8006c34 <__mcmp+0x30>
 8006c2a:	2001      	movs	r0, #1
 8006c2c:	bd30      	pop	{r4, r5, pc}
 8006c2e:	42a3      	cmp	r3, r4
 8006c30:	d3f4      	bcc.n	8006c1c <__mcmp+0x18>
 8006c32:	e7fb      	b.n	8006c2c <__mcmp+0x28>
 8006c34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006c38:	e7f8      	b.n	8006c2c <__mcmp+0x28>
	...

08006c3c <__mdiff>:
 8006c3c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c40:	460d      	mov	r5, r1
 8006c42:	4607      	mov	r7, r0
 8006c44:	4611      	mov	r1, r2
 8006c46:	4628      	mov	r0, r5
 8006c48:	4614      	mov	r4, r2
 8006c4a:	f7ff ffdb 	bl	8006c04 <__mcmp>
 8006c4e:	1e06      	subs	r6, r0, #0
 8006c50:	d111      	bne.n	8006c76 <__mdiff+0x3a>
 8006c52:	4631      	mov	r1, r6
 8006c54:	4638      	mov	r0, r7
 8006c56:	f7ff fd0d 	bl	8006674 <_Balloc>
 8006c5a:	4602      	mov	r2, r0
 8006c5c:	b928      	cbnz	r0, 8006c6a <__mdiff+0x2e>
 8006c5e:	f240 2132 	movw	r1, #562	; 0x232
 8006c62:	4b3a      	ldr	r3, [pc, #232]	; (8006d4c <__mdiff+0x110>)
 8006c64:	483a      	ldr	r0, [pc, #232]	; (8006d50 <__mdiff+0x114>)
 8006c66:	f000 fc41 	bl	80074ec <__assert_func>
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006c70:	4610      	mov	r0, r2
 8006c72:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c76:	bfa4      	itt	ge
 8006c78:	4623      	movge	r3, r4
 8006c7a:	462c      	movge	r4, r5
 8006c7c:	4638      	mov	r0, r7
 8006c7e:	6861      	ldr	r1, [r4, #4]
 8006c80:	bfa6      	itte	ge
 8006c82:	461d      	movge	r5, r3
 8006c84:	2600      	movge	r6, #0
 8006c86:	2601      	movlt	r6, #1
 8006c88:	f7ff fcf4 	bl	8006674 <_Balloc>
 8006c8c:	4602      	mov	r2, r0
 8006c8e:	b918      	cbnz	r0, 8006c98 <__mdiff+0x5c>
 8006c90:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006c94:	4b2d      	ldr	r3, [pc, #180]	; (8006d4c <__mdiff+0x110>)
 8006c96:	e7e5      	b.n	8006c64 <__mdiff+0x28>
 8006c98:	f102 0814 	add.w	r8, r2, #20
 8006c9c:	46c2      	mov	sl, r8
 8006c9e:	f04f 0c00 	mov.w	ip, #0
 8006ca2:	6927      	ldr	r7, [r4, #16]
 8006ca4:	60c6      	str	r6, [r0, #12]
 8006ca6:	692e      	ldr	r6, [r5, #16]
 8006ca8:	f104 0014 	add.w	r0, r4, #20
 8006cac:	f105 0914 	add.w	r9, r5, #20
 8006cb0:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8006cb4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006cb8:	3410      	adds	r4, #16
 8006cba:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8006cbe:	f859 3b04 	ldr.w	r3, [r9], #4
 8006cc2:	fa1f f18b 	uxth.w	r1, fp
 8006cc6:	448c      	add	ip, r1
 8006cc8:	b299      	uxth	r1, r3
 8006cca:	0c1b      	lsrs	r3, r3, #16
 8006ccc:	ebac 0101 	sub.w	r1, ip, r1
 8006cd0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006cd4:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006cd8:	b289      	uxth	r1, r1
 8006cda:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006cde:	454e      	cmp	r6, r9
 8006ce0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006ce4:	f84a 3b04 	str.w	r3, [sl], #4
 8006ce8:	d8e7      	bhi.n	8006cba <__mdiff+0x7e>
 8006cea:	1b73      	subs	r3, r6, r5
 8006cec:	3b15      	subs	r3, #21
 8006cee:	f023 0303 	bic.w	r3, r3, #3
 8006cf2:	3515      	adds	r5, #21
 8006cf4:	3304      	adds	r3, #4
 8006cf6:	42ae      	cmp	r6, r5
 8006cf8:	bf38      	it	cc
 8006cfa:	2304      	movcc	r3, #4
 8006cfc:	4418      	add	r0, r3
 8006cfe:	4443      	add	r3, r8
 8006d00:	461e      	mov	r6, r3
 8006d02:	4605      	mov	r5, r0
 8006d04:	4575      	cmp	r5, lr
 8006d06:	d30e      	bcc.n	8006d26 <__mdiff+0xea>
 8006d08:	f10e 0103 	add.w	r1, lr, #3
 8006d0c:	1a09      	subs	r1, r1, r0
 8006d0e:	f021 0103 	bic.w	r1, r1, #3
 8006d12:	3803      	subs	r0, #3
 8006d14:	4586      	cmp	lr, r0
 8006d16:	bf38      	it	cc
 8006d18:	2100      	movcc	r1, #0
 8006d1a:	4419      	add	r1, r3
 8006d1c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006d20:	b18b      	cbz	r3, 8006d46 <__mdiff+0x10a>
 8006d22:	6117      	str	r7, [r2, #16]
 8006d24:	e7a4      	b.n	8006c70 <__mdiff+0x34>
 8006d26:	f855 8b04 	ldr.w	r8, [r5], #4
 8006d2a:	fa1f f188 	uxth.w	r1, r8
 8006d2e:	4461      	add	r1, ip
 8006d30:	140c      	asrs	r4, r1, #16
 8006d32:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006d36:	b289      	uxth	r1, r1
 8006d38:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006d3c:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8006d40:	f846 1b04 	str.w	r1, [r6], #4
 8006d44:	e7de      	b.n	8006d04 <__mdiff+0xc8>
 8006d46:	3f01      	subs	r7, #1
 8006d48:	e7e8      	b.n	8006d1c <__mdiff+0xe0>
 8006d4a:	bf00      	nop
 8006d4c:	08008320 	.word	0x08008320
 8006d50:	080083ac 	.word	0x080083ac

08006d54 <__ulp>:
 8006d54:	4b11      	ldr	r3, [pc, #68]	; (8006d9c <__ulp+0x48>)
 8006d56:	400b      	ands	r3, r1
 8006d58:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	dd02      	ble.n	8006d66 <__ulp+0x12>
 8006d60:	2000      	movs	r0, #0
 8006d62:	4619      	mov	r1, r3
 8006d64:	4770      	bx	lr
 8006d66:	425b      	negs	r3, r3
 8006d68:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8006d6c:	f04f 0000 	mov.w	r0, #0
 8006d70:	f04f 0100 	mov.w	r1, #0
 8006d74:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006d78:	da04      	bge.n	8006d84 <__ulp+0x30>
 8006d7a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006d7e:	fa43 f102 	asr.w	r1, r3, r2
 8006d82:	4770      	bx	lr
 8006d84:	f1a2 0314 	sub.w	r3, r2, #20
 8006d88:	2b1e      	cmp	r3, #30
 8006d8a:	bfd6      	itet	le
 8006d8c:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8006d90:	2301      	movgt	r3, #1
 8006d92:	fa22 f303 	lsrle.w	r3, r2, r3
 8006d96:	4618      	mov	r0, r3
 8006d98:	4770      	bx	lr
 8006d9a:	bf00      	nop
 8006d9c:	7ff00000 	.word	0x7ff00000

08006da0 <__b2d>:
 8006da0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006da4:	6907      	ldr	r7, [r0, #16]
 8006da6:	f100 0914 	add.w	r9, r0, #20
 8006daa:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8006dae:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8006db2:	f1a7 0804 	sub.w	r8, r7, #4
 8006db6:	4630      	mov	r0, r6
 8006db8:	f7ff fd4e 	bl	8006858 <__hi0bits>
 8006dbc:	f1c0 0320 	rsb	r3, r0, #32
 8006dc0:	280a      	cmp	r0, #10
 8006dc2:	600b      	str	r3, [r1, #0]
 8006dc4:	491f      	ldr	r1, [pc, #124]	; (8006e44 <__b2d+0xa4>)
 8006dc6:	dc17      	bgt.n	8006df8 <__b2d+0x58>
 8006dc8:	45c1      	cmp	r9, r8
 8006dca:	bf28      	it	cs
 8006dcc:	2200      	movcs	r2, #0
 8006dce:	f1c0 0c0b 	rsb	ip, r0, #11
 8006dd2:	fa26 f30c 	lsr.w	r3, r6, ip
 8006dd6:	bf38      	it	cc
 8006dd8:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8006ddc:	ea43 0501 	orr.w	r5, r3, r1
 8006de0:	f100 0315 	add.w	r3, r0, #21
 8006de4:	fa06 f303 	lsl.w	r3, r6, r3
 8006de8:	fa22 f20c 	lsr.w	r2, r2, ip
 8006dec:	ea43 0402 	orr.w	r4, r3, r2
 8006df0:	4620      	mov	r0, r4
 8006df2:	4629      	mov	r1, r5
 8006df4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006df8:	45c1      	cmp	r9, r8
 8006dfa:	bf2e      	itee	cs
 8006dfc:	2200      	movcs	r2, #0
 8006dfe:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8006e02:	f1a7 0808 	subcc.w	r8, r7, #8
 8006e06:	f1b0 030b 	subs.w	r3, r0, #11
 8006e0a:	d016      	beq.n	8006e3a <__b2d+0x9a>
 8006e0c:	f1c3 0720 	rsb	r7, r3, #32
 8006e10:	fa22 f107 	lsr.w	r1, r2, r7
 8006e14:	45c8      	cmp	r8, r9
 8006e16:	fa06 f603 	lsl.w	r6, r6, r3
 8006e1a:	ea46 0601 	orr.w	r6, r6, r1
 8006e1e:	bf94      	ite	ls
 8006e20:	2100      	movls	r1, #0
 8006e22:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8006e26:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8006e2a:	fa02 f003 	lsl.w	r0, r2, r3
 8006e2e:	40f9      	lsrs	r1, r7
 8006e30:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006e34:	ea40 0401 	orr.w	r4, r0, r1
 8006e38:	e7da      	b.n	8006df0 <__b2d+0x50>
 8006e3a:	4614      	mov	r4, r2
 8006e3c:	ea46 0501 	orr.w	r5, r6, r1
 8006e40:	e7d6      	b.n	8006df0 <__b2d+0x50>
 8006e42:	bf00      	nop
 8006e44:	3ff00000 	.word	0x3ff00000

08006e48 <__d2b>:
 8006e48:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006e4c:	2101      	movs	r1, #1
 8006e4e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8006e52:	4690      	mov	r8, r2
 8006e54:	461d      	mov	r5, r3
 8006e56:	f7ff fc0d 	bl	8006674 <_Balloc>
 8006e5a:	4604      	mov	r4, r0
 8006e5c:	b930      	cbnz	r0, 8006e6c <__d2b+0x24>
 8006e5e:	4602      	mov	r2, r0
 8006e60:	f240 310a 	movw	r1, #778	; 0x30a
 8006e64:	4b24      	ldr	r3, [pc, #144]	; (8006ef8 <__d2b+0xb0>)
 8006e66:	4825      	ldr	r0, [pc, #148]	; (8006efc <__d2b+0xb4>)
 8006e68:	f000 fb40 	bl	80074ec <__assert_func>
 8006e6c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8006e70:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8006e74:	bb2d      	cbnz	r5, 8006ec2 <__d2b+0x7a>
 8006e76:	9301      	str	r3, [sp, #4]
 8006e78:	f1b8 0300 	subs.w	r3, r8, #0
 8006e7c:	d026      	beq.n	8006ecc <__d2b+0x84>
 8006e7e:	4668      	mov	r0, sp
 8006e80:	9300      	str	r3, [sp, #0]
 8006e82:	f7ff fd09 	bl	8006898 <__lo0bits>
 8006e86:	9900      	ldr	r1, [sp, #0]
 8006e88:	b1f0      	cbz	r0, 8006ec8 <__d2b+0x80>
 8006e8a:	9a01      	ldr	r2, [sp, #4]
 8006e8c:	f1c0 0320 	rsb	r3, r0, #32
 8006e90:	fa02 f303 	lsl.w	r3, r2, r3
 8006e94:	430b      	orrs	r3, r1
 8006e96:	40c2      	lsrs	r2, r0
 8006e98:	6163      	str	r3, [r4, #20]
 8006e9a:	9201      	str	r2, [sp, #4]
 8006e9c:	9b01      	ldr	r3, [sp, #4]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	bf14      	ite	ne
 8006ea2:	2102      	movne	r1, #2
 8006ea4:	2101      	moveq	r1, #1
 8006ea6:	61a3      	str	r3, [r4, #24]
 8006ea8:	6121      	str	r1, [r4, #16]
 8006eaa:	b1c5      	cbz	r5, 8006ede <__d2b+0x96>
 8006eac:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006eb0:	4405      	add	r5, r0
 8006eb2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006eb6:	603d      	str	r5, [r7, #0]
 8006eb8:	6030      	str	r0, [r6, #0]
 8006eba:	4620      	mov	r0, r4
 8006ebc:	b002      	add	sp, #8
 8006ebe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ec2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006ec6:	e7d6      	b.n	8006e76 <__d2b+0x2e>
 8006ec8:	6161      	str	r1, [r4, #20]
 8006eca:	e7e7      	b.n	8006e9c <__d2b+0x54>
 8006ecc:	a801      	add	r0, sp, #4
 8006ece:	f7ff fce3 	bl	8006898 <__lo0bits>
 8006ed2:	2101      	movs	r1, #1
 8006ed4:	9b01      	ldr	r3, [sp, #4]
 8006ed6:	6121      	str	r1, [r4, #16]
 8006ed8:	6163      	str	r3, [r4, #20]
 8006eda:	3020      	adds	r0, #32
 8006edc:	e7e5      	b.n	8006eaa <__d2b+0x62>
 8006ede:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8006ee2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006ee6:	6038      	str	r0, [r7, #0]
 8006ee8:	6918      	ldr	r0, [r3, #16]
 8006eea:	f7ff fcb5 	bl	8006858 <__hi0bits>
 8006eee:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8006ef2:	6031      	str	r1, [r6, #0]
 8006ef4:	e7e1      	b.n	8006eba <__d2b+0x72>
 8006ef6:	bf00      	nop
 8006ef8:	08008320 	.word	0x08008320
 8006efc:	080083ac 	.word	0x080083ac

08006f00 <__ratio>:
 8006f00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f04:	4688      	mov	r8, r1
 8006f06:	4669      	mov	r1, sp
 8006f08:	4681      	mov	r9, r0
 8006f0a:	f7ff ff49 	bl	8006da0 <__b2d>
 8006f0e:	460f      	mov	r7, r1
 8006f10:	4604      	mov	r4, r0
 8006f12:	460d      	mov	r5, r1
 8006f14:	4640      	mov	r0, r8
 8006f16:	a901      	add	r1, sp, #4
 8006f18:	f7ff ff42 	bl	8006da0 <__b2d>
 8006f1c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006f20:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8006f24:	468b      	mov	fp, r1
 8006f26:	eba3 0c02 	sub.w	ip, r3, r2
 8006f2a:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006f2e:	1a9b      	subs	r3, r3, r2
 8006f30:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	bfd5      	itete	le
 8006f38:	460a      	movle	r2, r1
 8006f3a:	462a      	movgt	r2, r5
 8006f3c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006f40:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8006f44:	bfd8      	it	le
 8006f46:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8006f4a:	465b      	mov	r3, fp
 8006f4c:	4602      	mov	r2, r0
 8006f4e:	4639      	mov	r1, r7
 8006f50:	4620      	mov	r0, r4
 8006f52:	f7f9 fc03 	bl	800075c <__aeabi_ddiv>
 8006f56:	b003      	add	sp, #12
 8006f58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006f5c <__copybits>:
 8006f5c:	3901      	subs	r1, #1
 8006f5e:	b570      	push	{r4, r5, r6, lr}
 8006f60:	1149      	asrs	r1, r1, #5
 8006f62:	6914      	ldr	r4, [r2, #16]
 8006f64:	3101      	adds	r1, #1
 8006f66:	f102 0314 	add.w	r3, r2, #20
 8006f6a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006f6e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006f72:	1f05      	subs	r5, r0, #4
 8006f74:	42a3      	cmp	r3, r4
 8006f76:	d30c      	bcc.n	8006f92 <__copybits+0x36>
 8006f78:	1aa3      	subs	r3, r4, r2
 8006f7a:	3b11      	subs	r3, #17
 8006f7c:	f023 0303 	bic.w	r3, r3, #3
 8006f80:	3211      	adds	r2, #17
 8006f82:	42a2      	cmp	r2, r4
 8006f84:	bf88      	it	hi
 8006f86:	2300      	movhi	r3, #0
 8006f88:	4418      	add	r0, r3
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	4288      	cmp	r0, r1
 8006f8e:	d305      	bcc.n	8006f9c <__copybits+0x40>
 8006f90:	bd70      	pop	{r4, r5, r6, pc}
 8006f92:	f853 6b04 	ldr.w	r6, [r3], #4
 8006f96:	f845 6f04 	str.w	r6, [r5, #4]!
 8006f9a:	e7eb      	b.n	8006f74 <__copybits+0x18>
 8006f9c:	f840 3b04 	str.w	r3, [r0], #4
 8006fa0:	e7f4      	b.n	8006f8c <__copybits+0x30>

08006fa2 <__any_on>:
 8006fa2:	f100 0214 	add.w	r2, r0, #20
 8006fa6:	6900      	ldr	r0, [r0, #16]
 8006fa8:	114b      	asrs	r3, r1, #5
 8006faa:	4298      	cmp	r0, r3
 8006fac:	b510      	push	{r4, lr}
 8006fae:	db11      	blt.n	8006fd4 <__any_on+0x32>
 8006fb0:	dd0a      	ble.n	8006fc8 <__any_on+0x26>
 8006fb2:	f011 011f 	ands.w	r1, r1, #31
 8006fb6:	d007      	beq.n	8006fc8 <__any_on+0x26>
 8006fb8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006fbc:	fa24 f001 	lsr.w	r0, r4, r1
 8006fc0:	fa00 f101 	lsl.w	r1, r0, r1
 8006fc4:	428c      	cmp	r4, r1
 8006fc6:	d10b      	bne.n	8006fe0 <__any_on+0x3e>
 8006fc8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d803      	bhi.n	8006fd8 <__any_on+0x36>
 8006fd0:	2000      	movs	r0, #0
 8006fd2:	bd10      	pop	{r4, pc}
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	e7f7      	b.n	8006fc8 <__any_on+0x26>
 8006fd8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006fdc:	2900      	cmp	r1, #0
 8006fde:	d0f5      	beq.n	8006fcc <__any_on+0x2a>
 8006fe0:	2001      	movs	r0, #1
 8006fe2:	e7f6      	b.n	8006fd2 <__any_on+0x30>

08006fe4 <_calloc_r>:
 8006fe4:	b570      	push	{r4, r5, r6, lr}
 8006fe6:	fba1 5402 	umull	r5, r4, r1, r2
 8006fea:	b934      	cbnz	r4, 8006ffa <_calloc_r+0x16>
 8006fec:	4629      	mov	r1, r5
 8006fee:	f000 f875 	bl	80070dc <_malloc_r>
 8006ff2:	4606      	mov	r6, r0
 8006ff4:	b928      	cbnz	r0, 8007002 <_calloc_r+0x1e>
 8006ff6:	4630      	mov	r0, r6
 8006ff8:	bd70      	pop	{r4, r5, r6, pc}
 8006ffa:	220c      	movs	r2, #12
 8006ffc:	2600      	movs	r6, #0
 8006ffe:	6002      	str	r2, [r0, #0]
 8007000:	e7f9      	b.n	8006ff6 <_calloc_r+0x12>
 8007002:	462a      	mov	r2, r5
 8007004:	4621      	mov	r1, r4
 8007006:	f7fc fbf1 	bl	80037ec <memset>
 800700a:	e7f4      	b.n	8006ff6 <_calloc_r+0x12>

0800700c <_free_r>:
 800700c:	b538      	push	{r3, r4, r5, lr}
 800700e:	4605      	mov	r5, r0
 8007010:	2900      	cmp	r1, #0
 8007012:	d040      	beq.n	8007096 <_free_r+0x8a>
 8007014:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007018:	1f0c      	subs	r4, r1, #4
 800701a:	2b00      	cmp	r3, #0
 800701c:	bfb8      	it	lt
 800701e:	18e4      	addlt	r4, r4, r3
 8007020:	f000 faae 	bl	8007580 <__malloc_lock>
 8007024:	4a1c      	ldr	r2, [pc, #112]	; (8007098 <_free_r+0x8c>)
 8007026:	6813      	ldr	r3, [r2, #0]
 8007028:	b933      	cbnz	r3, 8007038 <_free_r+0x2c>
 800702a:	6063      	str	r3, [r4, #4]
 800702c:	6014      	str	r4, [r2, #0]
 800702e:	4628      	mov	r0, r5
 8007030:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007034:	f000 baaa 	b.w	800758c <__malloc_unlock>
 8007038:	42a3      	cmp	r3, r4
 800703a:	d908      	bls.n	800704e <_free_r+0x42>
 800703c:	6820      	ldr	r0, [r4, #0]
 800703e:	1821      	adds	r1, r4, r0
 8007040:	428b      	cmp	r3, r1
 8007042:	bf01      	itttt	eq
 8007044:	6819      	ldreq	r1, [r3, #0]
 8007046:	685b      	ldreq	r3, [r3, #4]
 8007048:	1809      	addeq	r1, r1, r0
 800704a:	6021      	streq	r1, [r4, #0]
 800704c:	e7ed      	b.n	800702a <_free_r+0x1e>
 800704e:	461a      	mov	r2, r3
 8007050:	685b      	ldr	r3, [r3, #4]
 8007052:	b10b      	cbz	r3, 8007058 <_free_r+0x4c>
 8007054:	42a3      	cmp	r3, r4
 8007056:	d9fa      	bls.n	800704e <_free_r+0x42>
 8007058:	6811      	ldr	r1, [r2, #0]
 800705a:	1850      	adds	r0, r2, r1
 800705c:	42a0      	cmp	r0, r4
 800705e:	d10b      	bne.n	8007078 <_free_r+0x6c>
 8007060:	6820      	ldr	r0, [r4, #0]
 8007062:	4401      	add	r1, r0
 8007064:	1850      	adds	r0, r2, r1
 8007066:	4283      	cmp	r3, r0
 8007068:	6011      	str	r1, [r2, #0]
 800706a:	d1e0      	bne.n	800702e <_free_r+0x22>
 800706c:	6818      	ldr	r0, [r3, #0]
 800706e:	685b      	ldr	r3, [r3, #4]
 8007070:	4401      	add	r1, r0
 8007072:	6011      	str	r1, [r2, #0]
 8007074:	6053      	str	r3, [r2, #4]
 8007076:	e7da      	b.n	800702e <_free_r+0x22>
 8007078:	d902      	bls.n	8007080 <_free_r+0x74>
 800707a:	230c      	movs	r3, #12
 800707c:	602b      	str	r3, [r5, #0]
 800707e:	e7d6      	b.n	800702e <_free_r+0x22>
 8007080:	6820      	ldr	r0, [r4, #0]
 8007082:	1821      	adds	r1, r4, r0
 8007084:	428b      	cmp	r3, r1
 8007086:	bf01      	itttt	eq
 8007088:	6819      	ldreq	r1, [r3, #0]
 800708a:	685b      	ldreq	r3, [r3, #4]
 800708c:	1809      	addeq	r1, r1, r0
 800708e:	6021      	streq	r1, [r4, #0]
 8007090:	6063      	str	r3, [r4, #4]
 8007092:	6054      	str	r4, [r2, #4]
 8007094:	e7cb      	b.n	800702e <_free_r+0x22>
 8007096:	bd38      	pop	{r3, r4, r5, pc}
 8007098:	20000254 	.word	0x20000254

0800709c <sbrk_aligned>:
 800709c:	b570      	push	{r4, r5, r6, lr}
 800709e:	4e0e      	ldr	r6, [pc, #56]	; (80070d8 <sbrk_aligned+0x3c>)
 80070a0:	460c      	mov	r4, r1
 80070a2:	6831      	ldr	r1, [r6, #0]
 80070a4:	4605      	mov	r5, r0
 80070a6:	b911      	cbnz	r1, 80070ae <sbrk_aligned+0x12>
 80070a8:	f000 f9ee 	bl	8007488 <_sbrk_r>
 80070ac:	6030      	str	r0, [r6, #0]
 80070ae:	4621      	mov	r1, r4
 80070b0:	4628      	mov	r0, r5
 80070b2:	f000 f9e9 	bl	8007488 <_sbrk_r>
 80070b6:	1c43      	adds	r3, r0, #1
 80070b8:	d00a      	beq.n	80070d0 <sbrk_aligned+0x34>
 80070ba:	1cc4      	adds	r4, r0, #3
 80070bc:	f024 0403 	bic.w	r4, r4, #3
 80070c0:	42a0      	cmp	r0, r4
 80070c2:	d007      	beq.n	80070d4 <sbrk_aligned+0x38>
 80070c4:	1a21      	subs	r1, r4, r0
 80070c6:	4628      	mov	r0, r5
 80070c8:	f000 f9de 	bl	8007488 <_sbrk_r>
 80070cc:	3001      	adds	r0, #1
 80070ce:	d101      	bne.n	80070d4 <sbrk_aligned+0x38>
 80070d0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80070d4:	4620      	mov	r0, r4
 80070d6:	bd70      	pop	{r4, r5, r6, pc}
 80070d8:	20000258 	.word	0x20000258

080070dc <_malloc_r>:
 80070dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070e0:	1ccd      	adds	r5, r1, #3
 80070e2:	f025 0503 	bic.w	r5, r5, #3
 80070e6:	3508      	adds	r5, #8
 80070e8:	2d0c      	cmp	r5, #12
 80070ea:	bf38      	it	cc
 80070ec:	250c      	movcc	r5, #12
 80070ee:	2d00      	cmp	r5, #0
 80070f0:	4607      	mov	r7, r0
 80070f2:	db01      	blt.n	80070f8 <_malloc_r+0x1c>
 80070f4:	42a9      	cmp	r1, r5
 80070f6:	d905      	bls.n	8007104 <_malloc_r+0x28>
 80070f8:	230c      	movs	r3, #12
 80070fa:	2600      	movs	r6, #0
 80070fc:	603b      	str	r3, [r7, #0]
 80070fe:	4630      	mov	r0, r6
 8007100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007104:	4e2e      	ldr	r6, [pc, #184]	; (80071c0 <_malloc_r+0xe4>)
 8007106:	f000 fa3b 	bl	8007580 <__malloc_lock>
 800710a:	6833      	ldr	r3, [r6, #0]
 800710c:	461c      	mov	r4, r3
 800710e:	bb34      	cbnz	r4, 800715e <_malloc_r+0x82>
 8007110:	4629      	mov	r1, r5
 8007112:	4638      	mov	r0, r7
 8007114:	f7ff ffc2 	bl	800709c <sbrk_aligned>
 8007118:	1c43      	adds	r3, r0, #1
 800711a:	4604      	mov	r4, r0
 800711c:	d14d      	bne.n	80071ba <_malloc_r+0xde>
 800711e:	6834      	ldr	r4, [r6, #0]
 8007120:	4626      	mov	r6, r4
 8007122:	2e00      	cmp	r6, #0
 8007124:	d140      	bne.n	80071a8 <_malloc_r+0xcc>
 8007126:	6823      	ldr	r3, [r4, #0]
 8007128:	4631      	mov	r1, r6
 800712a:	4638      	mov	r0, r7
 800712c:	eb04 0803 	add.w	r8, r4, r3
 8007130:	f000 f9aa 	bl	8007488 <_sbrk_r>
 8007134:	4580      	cmp	r8, r0
 8007136:	d13a      	bne.n	80071ae <_malloc_r+0xd2>
 8007138:	6821      	ldr	r1, [r4, #0]
 800713a:	3503      	adds	r5, #3
 800713c:	1a6d      	subs	r5, r5, r1
 800713e:	f025 0503 	bic.w	r5, r5, #3
 8007142:	3508      	adds	r5, #8
 8007144:	2d0c      	cmp	r5, #12
 8007146:	bf38      	it	cc
 8007148:	250c      	movcc	r5, #12
 800714a:	4638      	mov	r0, r7
 800714c:	4629      	mov	r1, r5
 800714e:	f7ff ffa5 	bl	800709c <sbrk_aligned>
 8007152:	3001      	adds	r0, #1
 8007154:	d02b      	beq.n	80071ae <_malloc_r+0xd2>
 8007156:	6823      	ldr	r3, [r4, #0]
 8007158:	442b      	add	r3, r5
 800715a:	6023      	str	r3, [r4, #0]
 800715c:	e00e      	b.n	800717c <_malloc_r+0xa0>
 800715e:	6822      	ldr	r2, [r4, #0]
 8007160:	1b52      	subs	r2, r2, r5
 8007162:	d41e      	bmi.n	80071a2 <_malloc_r+0xc6>
 8007164:	2a0b      	cmp	r2, #11
 8007166:	d916      	bls.n	8007196 <_malloc_r+0xba>
 8007168:	1961      	adds	r1, r4, r5
 800716a:	42a3      	cmp	r3, r4
 800716c:	6025      	str	r5, [r4, #0]
 800716e:	bf18      	it	ne
 8007170:	6059      	strne	r1, [r3, #4]
 8007172:	6863      	ldr	r3, [r4, #4]
 8007174:	bf08      	it	eq
 8007176:	6031      	streq	r1, [r6, #0]
 8007178:	5162      	str	r2, [r4, r5]
 800717a:	604b      	str	r3, [r1, #4]
 800717c:	4638      	mov	r0, r7
 800717e:	f104 060b 	add.w	r6, r4, #11
 8007182:	f000 fa03 	bl	800758c <__malloc_unlock>
 8007186:	f026 0607 	bic.w	r6, r6, #7
 800718a:	1d23      	adds	r3, r4, #4
 800718c:	1af2      	subs	r2, r6, r3
 800718e:	d0b6      	beq.n	80070fe <_malloc_r+0x22>
 8007190:	1b9b      	subs	r3, r3, r6
 8007192:	50a3      	str	r3, [r4, r2]
 8007194:	e7b3      	b.n	80070fe <_malloc_r+0x22>
 8007196:	6862      	ldr	r2, [r4, #4]
 8007198:	42a3      	cmp	r3, r4
 800719a:	bf0c      	ite	eq
 800719c:	6032      	streq	r2, [r6, #0]
 800719e:	605a      	strne	r2, [r3, #4]
 80071a0:	e7ec      	b.n	800717c <_malloc_r+0xa0>
 80071a2:	4623      	mov	r3, r4
 80071a4:	6864      	ldr	r4, [r4, #4]
 80071a6:	e7b2      	b.n	800710e <_malloc_r+0x32>
 80071a8:	4634      	mov	r4, r6
 80071aa:	6876      	ldr	r6, [r6, #4]
 80071ac:	e7b9      	b.n	8007122 <_malloc_r+0x46>
 80071ae:	230c      	movs	r3, #12
 80071b0:	4638      	mov	r0, r7
 80071b2:	603b      	str	r3, [r7, #0]
 80071b4:	f000 f9ea 	bl	800758c <__malloc_unlock>
 80071b8:	e7a1      	b.n	80070fe <_malloc_r+0x22>
 80071ba:	6025      	str	r5, [r4, #0]
 80071bc:	e7de      	b.n	800717c <_malloc_r+0xa0>
 80071be:	bf00      	nop
 80071c0:	20000254 	.word	0x20000254

080071c4 <__ssputs_r>:
 80071c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071c8:	688e      	ldr	r6, [r1, #8]
 80071ca:	4682      	mov	sl, r0
 80071cc:	429e      	cmp	r6, r3
 80071ce:	460c      	mov	r4, r1
 80071d0:	4690      	mov	r8, r2
 80071d2:	461f      	mov	r7, r3
 80071d4:	d838      	bhi.n	8007248 <__ssputs_r+0x84>
 80071d6:	898a      	ldrh	r2, [r1, #12]
 80071d8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80071dc:	d032      	beq.n	8007244 <__ssputs_r+0x80>
 80071de:	6825      	ldr	r5, [r4, #0]
 80071e0:	6909      	ldr	r1, [r1, #16]
 80071e2:	3301      	adds	r3, #1
 80071e4:	eba5 0901 	sub.w	r9, r5, r1
 80071e8:	6965      	ldr	r5, [r4, #20]
 80071ea:	444b      	add	r3, r9
 80071ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80071f0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80071f4:	106d      	asrs	r5, r5, #1
 80071f6:	429d      	cmp	r5, r3
 80071f8:	bf38      	it	cc
 80071fa:	461d      	movcc	r5, r3
 80071fc:	0553      	lsls	r3, r2, #21
 80071fe:	d531      	bpl.n	8007264 <__ssputs_r+0xa0>
 8007200:	4629      	mov	r1, r5
 8007202:	f7ff ff6b 	bl	80070dc <_malloc_r>
 8007206:	4606      	mov	r6, r0
 8007208:	b950      	cbnz	r0, 8007220 <__ssputs_r+0x5c>
 800720a:	230c      	movs	r3, #12
 800720c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007210:	f8ca 3000 	str.w	r3, [sl]
 8007214:	89a3      	ldrh	r3, [r4, #12]
 8007216:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800721a:	81a3      	strh	r3, [r4, #12]
 800721c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007220:	464a      	mov	r2, r9
 8007222:	6921      	ldr	r1, [r4, #16]
 8007224:	f7ff fa18 	bl	8006658 <memcpy>
 8007228:	89a3      	ldrh	r3, [r4, #12]
 800722a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800722e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007232:	81a3      	strh	r3, [r4, #12]
 8007234:	6126      	str	r6, [r4, #16]
 8007236:	444e      	add	r6, r9
 8007238:	6026      	str	r6, [r4, #0]
 800723a:	463e      	mov	r6, r7
 800723c:	6165      	str	r5, [r4, #20]
 800723e:	eba5 0509 	sub.w	r5, r5, r9
 8007242:	60a5      	str	r5, [r4, #8]
 8007244:	42be      	cmp	r6, r7
 8007246:	d900      	bls.n	800724a <__ssputs_r+0x86>
 8007248:	463e      	mov	r6, r7
 800724a:	4632      	mov	r2, r6
 800724c:	4641      	mov	r1, r8
 800724e:	6820      	ldr	r0, [r4, #0]
 8007250:	f000 f97c 	bl	800754c <memmove>
 8007254:	68a3      	ldr	r3, [r4, #8]
 8007256:	2000      	movs	r0, #0
 8007258:	1b9b      	subs	r3, r3, r6
 800725a:	60a3      	str	r3, [r4, #8]
 800725c:	6823      	ldr	r3, [r4, #0]
 800725e:	4433      	add	r3, r6
 8007260:	6023      	str	r3, [r4, #0]
 8007262:	e7db      	b.n	800721c <__ssputs_r+0x58>
 8007264:	462a      	mov	r2, r5
 8007266:	f000 f997 	bl	8007598 <_realloc_r>
 800726a:	4606      	mov	r6, r0
 800726c:	2800      	cmp	r0, #0
 800726e:	d1e1      	bne.n	8007234 <__ssputs_r+0x70>
 8007270:	4650      	mov	r0, sl
 8007272:	6921      	ldr	r1, [r4, #16]
 8007274:	f7ff feca 	bl	800700c <_free_r>
 8007278:	e7c7      	b.n	800720a <__ssputs_r+0x46>
	...

0800727c <_svfiprintf_r>:
 800727c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007280:	4698      	mov	r8, r3
 8007282:	898b      	ldrh	r3, [r1, #12]
 8007284:	4607      	mov	r7, r0
 8007286:	061b      	lsls	r3, r3, #24
 8007288:	460d      	mov	r5, r1
 800728a:	4614      	mov	r4, r2
 800728c:	b09d      	sub	sp, #116	; 0x74
 800728e:	d50e      	bpl.n	80072ae <_svfiprintf_r+0x32>
 8007290:	690b      	ldr	r3, [r1, #16]
 8007292:	b963      	cbnz	r3, 80072ae <_svfiprintf_r+0x32>
 8007294:	2140      	movs	r1, #64	; 0x40
 8007296:	f7ff ff21 	bl	80070dc <_malloc_r>
 800729a:	6028      	str	r0, [r5, #0]
 800729c:	6128      	str	r0, [r5, #16]
 800729e:	b920      	cbnz	r0, 80072aa <_svfiprintf_r+0x2e>
 80072a0:	230c      	movs	r3, #12
 80072a2:	603b      	str	r3, [r7, #0]
 80072a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80072a8:	e0d1      	b.n	800744e <_svfiprintf_r+0x1d2>
 80072aa:	2340      	movs	r3, #64	; 0x40
 80072ac:	616b      	str	r3, [r5, #20]
 80072ae:	2300      	movs	r3, #0
 80072b0:	9309      	str	r3, [sp, #36]	; 0x24
 80072b2:	2320      	movs	r3, #32
 80072b4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80072b8:	2330      	movs	r3, #48	; 0x30
 80072ba:	f04f 0901 	mov.w	r9, #1
 80072be:	f8cd 800c 	str.w	r8, [sp, #12]
 80072c2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007468 <_svfiprintf_r+0x1ec>
 80072c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80072ca:	4623      	mov	r3, r4
 80072cc:	469a      	mov	sl, r3
 80072ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80072d2:	b10a      	cbz	r2, 80072d8 <_svfiprintf_r+0x5c>
 80072d4:	2a25      	cmp	r2, #37	; 0x25
 80072d6:	d1f9      	bne.n	80072cc <_svfiprintf_r+0x50>
 80072d8:	ebba 0b04 	subs.w	fp, sl, r4
 80072dc:	d00b      	beq.n	80072f6 <_svfiprintf_r+0x7a>
 80072de:	465b      	mov	r3, fp
 80072e0:	4622      	mov	r2, r4
 80072e2:	4629      	mov	r1, r5
 80072e4:	4638      	mov	r0, r7
 80072e6:	f7ff ff6d 	bl	80071c4 <__ssputs_r>
 80072ea:	3001      	adds	r0, #1
 80072ec:	f000 80aa 	beq.w	8007444 <_svfiprintf_r+0x1c8>
 80072f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80072f2:	445a      	add	r2, fp
 80072f4:	9209      	str	r2, [sp, #36]	; 0x24
 80072f6:	f89a 3000 	ldrb.w	r3, [sl]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	f000 80a2 	beq.w	8007444 <_svfiprintf_r+0x1c8>
 8007300:	2300      	movs	r3, #0
 8007302:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007306:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800730a:	f10a 0a01 	add.w	sl, sl, #1
 800730e:	9304      	str	r3, [sp, #16]
 8007310:	9307      	str	r3, [sp, #28]
 8007312:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007316:	931a      	str	r3, [sp, #104]	; 0x68
 8007318:	4654      	mov	r4, sl
 800731a:	2205      	movs	r2, #5
 800731c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007320:	4851      	ldr	r0, [pc, #324]	; (8007468 <_svfiprintf_r+0x1ec>)
 8007322:	f7ff f98b 	bl	800663c <memchr>
 8007326:	9a04      	ldr	r2, [sp, #16]
 8007328:	b9d8      	cbnz	r0, 8007362 <_svfiprintf_r+0xe6>
 800732a:	06d0      	lsls	r0, r2, #27
 800732c:	bf44      	itt	mi
 800732e:	2320      	movmi	r3, #32
 8007330:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007334:	0711      	lsls	r1, r2, #28
 8007336:	bf44      	itt	mi
 8007338:	232b      	movmi	r3, #43	; 0x2b
 800733a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800733e:	f89a 3000 	ldrb.w	r3, [sl]
 8007342:	2b2a      	cmp	r3, #42	; 0x2a
 8007344:	d015      	beq.n	8007372 <_svfiprintf_r+0xf6>
 8007346:	4654      	mov	r4, sl
 8007348:	2000      	movs	r0, #0
 800734a:	f04f 0c0a 	mov.w	ip, #10
 800734e:	9a07      	ldr	r2, [sp, #28]
 8007350:	4621      	mov	r1, r4
 8007352:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007356:	3b30      	subs	r3, #48	; 0x30
 8007358:	2b09      	cmp	r3, #9
 800735a:	d94e      	bls.n	80073fa <_svfiprintf_r+0x17e>
 800735c:	b1b0      	cbz	r0, 800738c <_svfiprintf_r+0x110>
 800735e:	9207      	str	r2, [sp, #28]
 8007360:	e014      	b.n	800738c <_svfiprintf_r+0x110>
 8007362:	eba0 0308 	sub.w	r3, r0, r8
 8007366:	fa09 f303 	lsl.w	r3, r9, r3
 800736a:	4313      	orrs	r3, r2
 800736c:	46a2      	mov	sl, r4
 800736e:	9304      	str	r3, [sp, #16]
 8007370:	e7d2      	b.n	8007318 <_svfiprintf_r+0x9c>
 8007372:	9b03      	ldr	r3, [sp, #12]
 8007374:	1d19      	adds	r1, r3, #4
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	9103      	str	r1, [sp, #12]
 800737a:	2b00      	cmp	r3, #0
 800737c:	bfbb      	ittet	lt
 800737e:	425b      	neglt	r3, r3
 8007380:	f042 0202 	orrlt.w	r2, r2, #2
 8007384:	9307      	strge	r3, [sp, #28]
 8007386:	9307      	strlt	r3, [sp, #28]
 8007388:	bfb8      	it	lt
 800738a:	9204      	strlt	r2, [sp, #16]
 800738c:	7823      	ldrb	r3, [r4, #0]
 800738e:	2b2e      	cmp	r3, #46	; 0x2e
 8007390:	d10c      	bne.n	80073ac <_svfiprintf_r+0x130>
 8007392:	7863      	ldrb	r3, [r4, #1]
 8007394:	2b2a      	cmp	r3, #42	; 0x2a
 8007396:	d135      	bne.n	8007404 <_svfiprintf_r+0x188>
 8007398:	9b03      	ldr	r3, [sp, #12]
 800739a:	3402      	adds	r4, #2
 800739c:	1d1a      	adds	r2, r3, #4
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	9203      	str	r2, [sp, #12]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	bfb8      	it	lt
 80073a6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80073aa:	9305      	str	r3, [sp, #20]
 80073ac:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800746c <_svfiprintf_r+0x1f0>
 80073b0:	2203      	movs	r2, #3
 80073b2:	4650      	mov	r0, sl
 80073b4:	7821      	ldrb	r1, [r4, #0]
 80073b6:	f7ff f941 	bl	800663c <memchr>
 80073ba:	b140      	cbz	r0, 80073ce <_svfiprintf_r+0x152>
 80073bc:	2340      	movs	r3, #64	; 0x40
 80073be:	eba0 000a 	sub.w	r0, r0, sl
 80073c2:	fa03 f000 	lsl.w	r0, r3, r0
 80073c6:	9b04      	ldr	r3, [sp, #16]
 80073c8:	3401      	adds	r4, #1
 80073ca:	4303      	orrs	r3, r0
 80073cc:	9304      	str	r3, [sp, #16]
 80073ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073d2:	2206      	movs	r2, #6
 80073d4:	4826      	ldr	r0, [pc, #152]	; (8007470 <_svfiprintf_r+0x1f4>)
 80073d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80073da:	f7ff f92f 	bl	800663c <memchr>
 80073de:	2800      	cmp	r0, #0
 80073e0:	d038      	beq.n	8007454 <_svfiprintf_r+0x1d8>
 80073e2:	4b24      	ldr	r3, [pc, #144]	; (8007474 <_svfiprintf_r+0x1f8>)
 80073e4:	bb1b      	cbnz	r3, 800742e <_svfiprintf_r+0x1b2>
 80073e6:	9b03      	ldr	r3, [sp, #12]
 80073e8:	3307      	adds	r3, #7
 80073ea:	f023 0307 	bic.w	r3, r3, #7
 80073ee:	3308      	adds	r3, #8
 80073f0:	9303      	str	r3, [sp, #12]
 80073f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073f4:	4433      	add	r3, r6
 80073f6:	9309      	str	r3, [sp, #36]	; 0x24
 80073f8:	e767      	b.n	80072ca <_svfiprintf_r+0x4e>
 80073fa:	460c      	mov	r4, r1
 80073fc:	2001      	movs	r0, #1
 80073fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8007402:	e7a5      	b.n	8007350 <_svfiprintf_r+0xd4>
 8007404:	2300      	movs	r3, #0
 8007406:	f04f 0c0a 	mov.w	ip, #10
 800740a:	4619      	mov	r1, r3
 800740c:	3401      	adds	r4, #1
 800740e:	9305      	str	r3, [sp, #20]
 8007410:	4620      	mov	r0, r4
 8007412:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007416:	3a30      	subs	r2, #48	; 0x30
 8007418:	2a09      	cmp	r2, #9
 800741a:	d903      	bls.n	8007424 <_svfiprintf_r+0x1a8>
 800741c:	2b00      	cmp	r3, #0
 800741e:	d0c5      	beq.n	80073ac <_svfiprintf_r+0x130>
 8007420:	9105      	str	r1, [sp, #20]
 8007422:	e7c3      	b.n	80073ac <_svfiprintf_r+0x130>
 8007424:	4604      	mov	r4, r0
 8007426:	2301      	movs	r3, #1
 8007428:	fb0c 2101 	mla	r1, ip, r1, r2
 800742c:	e7f0      	b.n	8007410 <_svfiprintf_r+0x194>
 800742e:	ab03      	add	r3, sp, #12
 8007430:	9300      	str	r3, [sp, #0]
 8007432:	462a      	mov	r2, r5
 8007434:	4638      	mov	r0, r7
 8007436:	4b10      	ldr	r3, [pc, #64]	; (8007478 <_svfiprintf_r+0x1fc>)
 8007438:	a904      	add	r1, sp, #16
 800743a:	f7fc fa7d 	bl	8003938 <_printf_float>
 800743e:	1c42      	adds	r2, r0, #1
 8007440:	4606      	mov	r6, r0
 8007442:	d1d6      	bne.n	80073f2 <_svfiprintf_r+0x176>
 8007444:	89ab      	ldrh	r3, [r5, #12]
 8007446:	065b      	lsls	r3, r3, #25
 8007448:	f53f af2c 	bmi.w	80072a4 <_svfiprintf_r+0x28>
 800744c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800744e:	b01d      	add	sp, #116	; 0x74
 8007450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007454:	ab03      	add	r3, sp, #12
 8007456:	9300      	str	r3, [sp, #0]
 8007458:	462a      	mov	r2, r5
 800745a:	4638      	mov	r0, r7
 800745c:	4b06      	ldr	r3, [pc, #24]	; (8007478 <_svfiprintf_r+0x1fc>)
 800745e:	a904      	add	r1, sp, #16
 8007460:	f7fc fd06 	bl	8003e70 <_printf_i>
 8007464:	e7eb      	b.n	800743e <_svfiprintf_r+0x1c2>
 8007466:	bf00      	nop
 8007468:	08008504 	.word	0x08008504
 800746c:	0800850a 	.word	0x0800850a
 8007470:	0800850e 	.word	0x0800850e
 8007474:	08003939 	.word	0x08003939
 8007478:	080071c5 	.word	0x080071c5

0800747c <nan>:
 800747c:	2000      	movs	r0, #0
 800747e:	4901      	ldr	r1, [pc, #4]	; (8007484 <nan+0x8>)
 8007480:	4770      	bx	lr
 8007482:	bf00      	nop
 8007484:	7ff80000 	.word	0x7ff80000

08007488 <_sbrk_r>:
 8007488:	b538      	push	{r3, r4, r5, lr}
 800748a:	2300      	movs	r3, #0
 800748c:	4d05      	ldr	r5, [pc, #20]	; (80074a4 <_sbrk_r+0x1c>)
 800748e:	4604      	mov	r4, r0
 8007490:	4608      	mov	r0, r1
 8007492:	602b      	str	r3, [r5, #0]
 8007494:	f7fa f816 	bl	80014c4 <_sbrk>
 8007498:	1c43      	adds	r3, r0, #1
 800749a:	d102      	bne.n	80074a2 <_sbrk_r+0x1a>
 800749c:	682b      	ldr	r3, [r5, #0]
 800749e:	b103      	cbz	r3, 80074a2 <_sbrk_r+0x1a>
 80074a0:	6023      	str	r3, [r4, #0]
 80074a2:	bd38      	pop	{r3, r4, r5, pc}
 80074a4:	2000025c 	.word	0x2000025c

080074a8 <strncmp>:
 80074a8:	4603      	mov	r3, r0
 80074aa:	b510      	push	{r4, lr}
 80074ac:	b172      	cbz	r2, 80074cc <strncmp+0x24>
 80074ae:	3901      	subs	r1, #1
 80074b0:	1884      	adds	r4, r0, r2
 80074b2:	f813 0b01 	ldrb.w	r0, [r3], #1
 80074b6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80074ba:	4290      	cmp	r0, r2
 80074bc:	d101      	bne.n	80074c2 <strncmp+0x1a>
 80074be:	42a3      	cmp	r3, r4
 80074c0:	d101      	bne.n	80074c6 <strncmp+0x1e>
 80074c2:	1a80      	subs	r0, r0, r2
 80074c4:	bd10      	pop	{r4, pc}
 80074c6:	2800      	cmp	r0, #0
 80074c8:	d1f3      	bne.n	80074b2 <strncmp+0xa>
 80074ca:	e7fa      	b.n	80074c2 <strncmp+0x1a>
 80074cc:	4610      	mov	r0, r2
 80074ce:	e7f9      	b.n	80074c4 <strncmp+0x1c>

080074d0 <__ascii_wctomb>:
 80074d0:	4603      	mov	r3, r0
 80074d2:	4608      	mov	r0, r1
 80074d4:	b141      	cbz	r1, 80074e8 <__ascii_wctomb+0x18>
 80074d6:	2aff      	cmp	r2, #255	; 0xff
 80074d8:	d904      	bls.n	80074e4 <__ascii_wctomb+0x14>
 80074da:	228a      	movs	r2, #138	; 0x8a
 80074dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80074e0:	601a      	str	r2, [r3, #0]
 80074e2:	4770      	bx	lr
 80074e4:	2001      	movs	r0, #1
 80074e6:	700a      	strb	r2, [r1, #0]
 80074e8:	4770      	bx	lr
	...

080074ec <__assert_func>:
 80074ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80074ee:	4614      	mov	r4, r2
 80074f0:	461a      	mov	r2, r3
 80074f2:	4b09      	ldr	r3, [pc, #36]	; (8007518 <__assert_func+0x2c>)
 80074f4:	4605      	mov	r5, r0
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	68d8      	ldr	r0, [r3, #12]
 80074fa:	b14c      	cbz	r4, 8007510 <__assert_func+0x24>
 80074fc:	4b07      	ldr	r3, [pc, #28]	; (800751c <__assert_func+0x30>)
 80074fe:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007502:	9100      	str	r1, [sp, #0]
 8007504:	462b      	mov	r3, r5
 8007506:	4906      	ldr	r1, [pc, #24]	; (8007520 <__assert_func+0x34>)
 8007508:	f000 f80e 	bl	8007528 <fiprintf>
 800750c:	f000 fa8a 	bl	8007a24 <abort>
 8007510:	4b04      	ldr	r3, [pc, #16]	; (8007524 <__assert_func+0x38>)
 8007512:	461c      	mov	r4, r3
 8007514:	e7f3      	b.n	80074fe <__assert_func+0x12>
 8007516:	bf00      	nop
 8007518:	2000000c 	.word	0x2000000c
 800751c:	08008515 	.word	0x08008515
 8007520:	08008522 	.word	0x08008522
 8007524:	08008550 	.word	0x08008550

08007528 <fiprintf>:
 8007528:	b40e      	push	{r1, r2, r3}
 800752a:	b503      	push	{r0, r1, lr}
 800752c:	4601      	mov	r1, r0
 800752e:	ab03      	add	r3, sp, #12
 8007530:	4805      	ldr	r0, [pc, #20]	; (8007548 <fiprintf+0x20>)
 8007532:	f853 2b04 	ldr.w	r2, [r3], #4
 8007536:	6800      	ldr	r0, [r0, #0]
 8007538:	9301      	str	r3, [sp, #4]
 800753a:	f000 f883 	bl	8007644 <_vfiprintf_r>
 800753e:	b002      	add	sp, #8
 8007540:	f85d eb04 	ldr.w	lr, [sp], #4
 8007544:	b003      	add	sp, #12
 8007546:	4770      	bx	lr
 8007548:	2000000c 	.word	0x2000000c

0800754c <memmove>:
 800754c:	4288      	cmp	r0, r1
 800754e:	b510      	push	{r4, lr}
 8007550:	eb01 0402 	add.w	r4, r1, r2
 8007554:	d902      	bls.n	800755c <memmove+0x10>
 8007556:	4284      	cmp	r4, r0
 8007558:	4623      	mov	r3, r4
 800755a:	d807      	bhi.n	800756c <memmove+0x20>
 800755c:	1e43      	subs	r3, r0, #1
 800755e:	42a1      	cmp	r1, r4
 8007560:	d008      	beq.n	8007574 <memmove+0x28>
 8007562:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007566:	f803 2f01 	strb.w	r2, [r3, #1]!
 800756a:	e7f8      	b.n	800755e <memmove+0x12>
 800756c:	4601      	mov	r1, r0
 800756e:	4402      	add	r2, r0
 8007570:	428a      	cmp	r2, r1
 8007572:	d100      	bne.n	8007576 <memmove+0x2a>
 8007574:	bd10      	pop	{r4, pc}
 8007576:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800757a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800757e:	e7f7      	b.n	8007570 <memmove+0x24>

08007580 <__malloc_lock>:
 8007580:	4801      	ldr	r0, [pc, #4]	; (8007588 <__malloc_lock+0x8>)
 8007582:	f000 bc0b 	b.w	8007d9c <__retarget_lock_acquire_recursive>
 8007586:	bf00      	nop
 8007588:	20000260 	.word	0x20000260

0800758c <__malloc_unlock>:
 800758c:	4801      	ldr	r0, [pc, #4]	; (8007594 <__malloc_unlock+0x8>)
 800758e:	f000 bc06 	b.w	8007d9e <__retarget_lock_release_recursive>
 8007592:	bf00      	nop
 8007594:	20000260 	.word	0x20000260

08007598 <_realloc_r>:
 8007598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800759c:	4680      	mov	r8, r0
 800759e:	4614      	mov	r4, r2
 80075a0:	460e      	mov	r6, r1
 80075a2:	b921      	cbnz	r1, 80075ae <_realloc_r+0x16>
 80075a4:	4611      	mov	r1, r2
 80075a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80075aa:	f7ff bd97 	b.w	80070dc <_malloc_r>
 80075ae:	b92a      	cbnz	r2, 80075bc <_realloc_r+0x24>
 80075b0:	f7ff fd2c 	bl	800700c <_free_r>
 80075b4:	4625      	mov	r5, r4
 80075b6:	4628      	mov	r0, r5
 80075b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075bc:	f000 fc56 	bl	8007e6c <_malloc_usable_size_r>
 80075c0:	4284      	cmp	r4, r0
 80075c2:	4607      	mov	r7, r0
 80075c4:	d802      	bhi.n	80075cc <_realloc_r+0x34>
 80075c6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80075ca:	d812      	bhi.n	80075f2 <_realloc_r+0x5a>
 80075cc:	4621      	mov	r1, r4
 80075ce:	4640      	mov	r0, r8
 80075d0:	f7ff fd84 	bl	80070dc <_malloc_r>
 80075d4:	4605      	mov	r5, r0
 80075d6:	2800      	cmp	r0, #0
 80075d8:	d0ed      	beq.n	80075b6 <_realloc_r+0x1e>
 80075da:	42bc      	cmp	r4, r7
 80075dc:	4622      	mov	r2, r4
 80075de:	4631      	mov	r1, r6
 80075e0:	bf28      	it	cs
 80075e2:	463a      	movcs	r2, r7
 80075e4:	f7ff f838 	bl	8006658 <memcpy>
 80075e8:	4631      	mov	r1, r6
 80075ea:	4640      	mov	r0, r8
 80075ec:	f7ff fd0e 	bl	800700c <_free_r>
 80075f0:	e7e1      	b.n	80075b6 <_realloc_r+0x1e>
 80075f2:	4635      	mov	r5, r6
 80075f4:	e7df      	b.n	80075b6 <_realloc_r+0x1e>

080075f6 <__sfputc_r>:
 80075f6:	6893      	ldr	r3, [r2, #8]
 80075f8:	b410      	push	{r4}
 80075fa:	3b01      	subs	r3, #1
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	6093      	str	r3, [r2, #8]
 8007600:	da07      	bge.n	8007612 <__sfputc_r+0x1c>
 8007602:	6994      	ldr	r4, [r2, #24]
 8007604:	42a3      	cmp	r3, r4
 8007606:	db01      	blt.n	800760c <__sfputc_r+0x16>
 8007608:	290a      	cmp	r1, #10
 800760a:	d102      	bne.n	8007612 <__sfputc_r+0x1c>
 800760c:	bc10      	pop	{r4}
 800760e:	f000 b949 	b.w	80078a4 <__swbuf_r>
 8007612:	6813      	ldr	r3, [r2, #0]
 8007614:	1c58      	adds	r0, r3, #1
 8007616:	6010      	str	r0, [r2, #0]
 8007618:	7019      	strb	r1, [r3, #0]
 800761a:	4608      	mov	r0, r1
 800761c:	bc10      	pop	{r4}
 800761e:	4770      	bx	lr

08007620 <__sfputs_r>:
 8007620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007622:	4606      	mov	r6, r0
 8007624:	460f      	mov	r7, r1
 8007626:	4614      	mov	r4, r2
 8007628:	18d5      	adds	r5, r2, r3
 800762a:	42ac      	cmp	r4, r5
 800762c:	d101      	bne.n	8007632 <__sfputs_r+0x12>
 800762e:	2000      	movs	r0, #0
 8007630:	e007      	b.n	8007642 <__sfputs_r+0x22>
 8007632:	463a      	mov	r2, r7
 8007634:	4630      	mov	r0, r6
 8007636:	f814 1b01 	ldrb.w	r1, [r4], #1
 800763a:	f7ff ffdc 	bl	80075f6 <__sfputc_r>
 800763e:	1c43      	adds	r3, r0, #1
 8007640:	d1f3      	bne.n	800762a <__sfputs_r+0xa>
 8007642:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007644 <_vfiprintf_r>:
 8007644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007648:	460d      	mov	r5, r1
 800764a:	4614      	mov	r4, r2
 800764c:	4698      	mov	r8, r3
 800764e:	4606      	mov	r6, r0
 8007650:	b09d      	sub	sp, #116	; 0x74
 8007652:	b118      	cbz	r0, 800765c <_vfiprintf_r+0x18>
 8007654:	6983      	ldr	r3, [r0, #24]
 8007656:	b90b      	cbnz	r3, 800765c <_vfiprintf_r+0x18>
 8007658:	f000 fb02 	bl	8007c60 <__sinit>
 800765c:	4b89      	ldr	r3, [pc, #548]	; (8007884 <_vfiprintf_r+0x240>)
 800765e:	429d      	cmp	r5, r3
 8007660:	d11b      	bne.n	800769a <_vfiprintf_r+0x56>
 8007662:	6875      	ldr	r5, [r6, #4]
 8007664:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007666:	07d9      	lsls	r1, r3, #31
 8007668:	d405      	bmi.n	8007676 <_vfiprintf_r+0x32>
 800766a:	89ab      	ldrh	r3, [r5, #12]
 800766c:	059a      	lsls	r2, r3, #22
 800766e:	d402      	bmi.n	8007676 <_vfiprintf_r+0x32>
 8007670:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007672:	f000 fb93 	bl	8007d9c <__retarget_lock_acquire_recursive>
 8007676:	89ab      	ldrh	r3, [r5, #12]
 8007678:	071b      	lsls	r3, r3, #28
 800767a:	d501      	bpl.n	8007680 <_vfiprintf_r+0x3c>
 800767c:	692b      	ldr	r3, [r5, #16]
 800767e:	b9eb      	cbnz	r3, 80076bc <_vfiprintf_r+0x78>
 8007680:	4629      	mov	r1, r5
 8007682:	4630      	mov	r0, r6
 8007684:	f000 f960 	bl	8007948 <__swsetup_r>
 8007688:	b1c0      	cbz	r0, 80076bc <_vfiprintf_r+0x78>
 800768a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800768c:	07dc      	lsls	r4, r3, #31
 800768e:	d50e      	bpl.n	80076ae <_vfiprintf_r+0x6a>
 8007690:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007694:	b01d      	add	sp, #116	; 0x74
 8007696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800769a:	4b7b      	ldr	r3, [pc, #492]	; (8007888 <_vfiprintf_r+0x244>)
 800769c:	429d      	cmp	r5, r3
 800769e:	d101      	bne.n	80076a4 <_vfiprintf_r+0x60>
 80076a0:	68b5      	ldr	r5, [r6, #8]
 80076a2:	e7df      	b.n	8007664 <_vfiprintf_r+0x20>
 80076a4:	4b79      	ldr	r3, [pc, #484]	; (800788c <_vfiprintf_r+0x248>)
 80076a6:	429d      	cmp	r5, r3
 80076a8:	bf08      	it	eq
 80076aa:	68f5      	ldreq	r5, [r6, #12]
 80076ac:	e7da      	b.n	8007664 <_vfiprintf_r+0x20>
 80076ae:	89ab      	ldrh	r3, [r5, #12]
 80076b0:	0598      	lsls	r0, r3, #22
 80076b2:	d4ed      	bmi.n	8007690 <_vfiprintf_r+0x4c>
 80076b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80076b6:	f000 fb72 	bl	8007d9e <__retarget_lock_release_recursive>
 80076ba:	e7e9      	b.n	8007690 <_vfiprintf_r+0x4c>
 80076bc:	2300      	movs	r3, #0
 80076be:	9309      	str	r3, [sp, #36]	; 0x24
 80076c0:	2320      	movs	r3, #32
 80076c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80076c6:	2330      	movs	r3, #48	; 0x30
 80076c8:	f04f 0901 	mov.w	r9, #1
 80076cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80076d0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8007890 <_vfiprintf_r+0x24c>
 80076d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80076d8:	4623      	mov	r3, r4
 80076da:	469a      	mov	sl, r3
 80076dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80076e0:	b10a      	cbz	r2, 80076e6 <_vfiprintf_r+0xa2>
 80076e2:	2a25      	cmp	r2, #37	; 0x25
 80076e4:	d1f9      	bne.n	80076da <_vfiprintf_r+0x96>
 80076e6:	ebba 0b04 	subs.w	fp, sl, r4
 80076ea:	d00b      	beq.n	8007704 <_vfiprintf_r+0xc0>
 80076ec:	465b      	mov	r3, fp
 80076ee:	4622      	mov	r2, r4
 80076f0:	4629      	mov	r1, r5
 80076f2:	4630      	mov	r0, r6
 80076f4:	f7ff ff94 	bl	8007620 <__sfputs_r>
 80076f8:	3001      	adds	r0, #1
 80076fa:	f000 80aa 	beq.w	8007852 <_vfiprintf_r+0x20e>
 80076fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007700:	445a      	add	r2, fp
 8007702:	9209      	str	r2, [sp, #36]	; 0x24
 8007704:	f89a 3000 	ldrb.w	r3, [sl]
 8007708:	2b00      	cmp	r3, #0
 800770a:	f000 80a2 	beq.w	8007852 <_vfiprintf_r+0x20e>
 800770e:	2300      	movs	r3, #0
 8007710:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007714:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007718:	f10a 0a01 	add.w	sl, sl, #1
 800771c:	9304      	str	r3, [sp, #16]
 800771e:	9307      	str	r3, [sp, #28]
 8007720:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007724:	931a      	str	r3, [sp, #104]	; 0x68
 8007726:	4654      	mov	r4, sl
 8007728:	2205      	movs	r2, #5
 800772a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800772e:	4858      	ldr	r0, [pc, #352]	; (8007890 <_vfiprintf_r+0x24c>)
 8007730:	f7fe ff84 	bl	800663c <memchr>
 8007734:	9a04      	ldr	r2, [sp, #16]
 8007736:	b9d8      	cbnz	r0, 8007770 <_vfiprintf_r+0x12c>
 8007738:	06d1      	lsls	r1, r2, #27
 800773a:	bf44      	itt	mi
 800773c:	2320      	movmi	r3, #32
 800773e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007742:	0713      	lsls	r3, r2, #28
 8007744:	bf44      	itt	mi
 8007746:	232b      	movmi	r3, #43	; 0x2b
 8007748:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800774c:	f89a 3000 	ldrb.w	r3, [sl]
 8007750:	2b2a      	cmp	r3, #42	; 0x2a
 8007752:	d015      	beq.n	8007780 <_vfiprintf_r+0x13c>
 8007754:	4654      	mov	r4, sl
 8007756:	2000      	movs	r0, #0
 8007758:	f04f 0c0a 	mov.w	ip, #10
 800775c:	9a07      	ldr	r2, [sp, #28]
 800775e:	4621      	mov	r1, r4
 8007760:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007764:	3b30      	subs	r3, #48	; 0x30
 8007766:	2b09      	cmp	r3, #9
 8007768:	d94e      	bls.n	8007808 <_vfiprintf_r+0x1c4>
 800776a:	b1b0      	cbz	r0, 800779a <_vfiprintf_r+0x156>
 800776c:	9207      	str	r2, [sp, #28]
 800776e:	e014      	b.n	800779a <_vfiprintf_r+0x156>
 8007770:	eba0 0308 	sub.w	r3, r0, r8
 8007774:	fa09 f303 	lsl.w	r3, r9, r3
 8007778:	4313      	orrs	r3, r2
 800777a:	46a2      	mov	sl, r4
 800777c:	9304      	str	r3, [sp, #16]
 800777e:	e7d2      	b.n	8007726 <_vfiprintf_r+0xe2>
 8007780:	9b03      	ldr	r3, [sp, #12]
 8007782:	1d19      	adds	r1, r3, #4
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	9103      	str	r1, [sp, #12]
 8007788:	2b00      	cmp	r3, #0
 800778a:	bfbb      	ittet	lt
 800778c:	425b      	neglt	r3, r3
 800778e:	f042 0202 	orrlt.w	r2, r2, #2
 8007792:	9307      	strge	r3, [sp, #28]
 8007794:	9307      	strlt	r3, [sp, #28]
 8007796:	bfb8      	it	lt
 8007798:	9204      	strlt	r2, [sp, #16]
 800779a:	7823      	ldrb	r3, [r4, #0]
 800779c:	2b2e      	cmp	r3, #46	; 0x2e
 800779e:	d10c      	bne.n	80077ba <_vfiprintf_r+0x176>
 80077a0:	7863      	ldrb	r3, [r4, #1]
 80077a2:	2b2a      	cmp	r3, #42	; 0x2a
 80077a4:	d135      	bne.n	8007812 <_vfiprintf_r+0x1ce>
 80077a6:	9b03      	ldr	r3, [sp, #12]
 80077a8:	3402      	adds	r4, #2
 80077aa:	1d1a      	adds	r2, r3, #4
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	9203      	str	r2, [sp, #12]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	bfb8      	it	lt
 80077b4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80077b8:	9305      	str	r3, [sp, #20]
 80077ba:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8007894 <_vfiprintf_r+0x250>
 80077be:	2203      	movs	r2, #3
 80077c0:	4650      	mov	r0, sl
 80077c2:	7821      	ldrb	r1, [r4, #0]
 80077c4:	f7fe ff3a 	bl	800663c <memchr>
 80077c8:	b140      	cbz	r0, 80077dc <_vfiprintf_r+0x198>
 80077ca:	2340      	movs	r3, #64	; 0x40
 80077cc:	eba0 000a 	sub.w	r0, r0, sl
 80077d0:	fa03 f000 	lsl.w	r0, r3, r0
 80077d4:	9b04      	ldr	r3, [sp, #16]
 80077d6:	3401      	adds	r4, #1
 80077d8:	4303      	orrs	r3, r0
 80077da:	9304      	str	r3, [sp, #16]
 80077dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077e0:	2206      	movs	r2, #6
 80077e2:	482d      	ldr	r0, [pc, #180]	; (8007898 <_vfiprintf_r+0x254>)
 80077e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80077e8:	f7fe ff28 	bl	800663c <memchr>
 80077ec:	2800      	cmp	r0, #0
 80077ee:	d03f      	beq.n	8007870 <_vfiprintf_r+0x22c>
 80077f0:	4b2a      	ldr	r3, [pc, #168]	; (800789c <_vfiprintf_r+0x258>)
 80077f2:	bb1b      	cbnz	r3, 800783c <_vfiprintf_r+0x1f8>
 80077f4:	9b03      	ldr	r3, [sp, #12]
 80077f6:	3307      	adds	r3, #7
 80077f8:	f023 0307 	bic.w	r3, r3, #7
 80077fc:	3308      	adds	r3, #8
 80077fe:	9303      	str	r3, [sp, #12]
 8007800:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007802:	443b      	add	r3, r7
 8007804:	9309      	str	r3, [sp, #36]	; 0x24
 8007806:	e767      	b.n	80076d8 <_vfiprintf_r+0x94>
 8007808:	460c      	mov	r4, r1
 800780a:	2001      	movs	r0, #1
 800780c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007810:	e7a5      	b.n	800775e <_vfiprintf_r+0x11a>
 8007812:	2300      	movs	r3, #0
 8007814:	f04f 0c0a 	mov.w	ip, #10
 8007818:	4619      	mov	r1, r3
 800781a:	3401      	adds	r4, #1
 800781c:	9305      	str	r3, [sp, #20]
 800781e:	4620      	mov	r0, r4
 8007820:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007824:	3a30      	subs	r2, #48	; 0x30
 8007826:	2a09      	cmp	r2, #9
 8007828:	d903      	bls.n	8007832 <_vfiprintf_r+0x1ee>
 800782a:	2b00      	cmp	r3, #0
 800782c:	d0c5      	beq.n	80077ba <_vfiprintf_r+0x176>
 800782e:	9105      	str	r1, [sp, #20]
 8007830:	e7c3      	b.n	80077ba <_vfiprintf_r+0x176>
 8007832:	4604      	mov	r4, r0
 8007834:	2301      	movs	r3, #1
 8007836:	fb0c 2101 	mla	r1, ip, r1, r2
 800783a:	e7f0      	b.n	800781e <_vfiprintf_r+0x1da>
 800783c:	ab03      	add	r3, sp, #12
 800783e:	9300      	str	r3, [sp, #0]
 8007840:	462a      	mov	r2, r5
 8007842:	4630      	mov	r0, r6
 8007844:	4b16      	ldr	r3, [pc, #88]	; (80078a0 <_vfiprintf_r+0x25c>)
 8007846:	a904      	add	r1, sp, #16
 8007848:	f7fc f876 	bl	8003938 <_printf_float>
 800784c:	4607      	mov	r7, r0
 800784e:	1c78      	adds	r0, r7, #1
 8007850:	d1d6      	bne.n	8007800 <_vfiprintf_r+0x1bc>
 8007852:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007854:	07d9      	lsls	r1, r3, #31
 8007856:	d405      	bmi.n	8007864 <_vfiprintf_r+0x220>
 8007858:	89ab      	ldrh	r3, [r5, #12]
 800785a:	059a      	lsls	r2, r3, #22
 800785c:	d402      	bmi.n	8007864 <_vfiprintf_r+0x220>
 800785e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007860:	f000 fa9d 	bl	8007d9e <__retarget_lock_release_recursive>
 8007864:	89ab      	ldrh	r3, [r5, #12]
 8007866:	065b      	lsls	r3, r3, #25
 8007868:	f53f af12 	bmi.w	8007690 <_vfiprintf_r+0x4c>
 800786c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800786e:	e711      	b.n	8007694 <_vfiprintf_r+0x50>
 8007870:	ab03      	add	r3, sp, #12
 8007872:	9300      	str	r3, [sp, #0]
 8007874:	462a      	mov	r2, r5
 8007876:	4630      	mov	r0, r6
 8007878:	4b09      	ldr	r3, [pc, #36]	; (80078a0 <_vfiprintf_r+0x25c>)
 800787a:	a904      	add	r1, sp, #16
 800787c:	f7fc faf8 	bl	8003e70 <_printf_i>
 8007880:	e7e4      	b.n	800784c <_vfiprintf_r+0x208>
 8007882:	bf00      	nop
 8007884:	08008574 	.word	0x08008574
 8007888:	08008594 	.word	0x08008594
 800788c:	08008554 	.word	0x08008554
 8007890:	08008504 	.word	0x08008504
 8007894:	0800850a 	.word	0x0800850a
 8007898:	0800850e 	.word	0x0800850e
 800789c:	08003939 	.word	0x08003939
 80078a0:	08007621 	.word	0x08007621

080078a4 <__swbuf_r>:
 80078a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078a6:	460e      	mov	r6, r1
 80078a8:	4614      	mov	r4, r2
 80078aa:	4605      	mov	r5, r0
 80078ac:	b118      	cbz	r0, 80078b6 <__swbuf_r+0x12>
 80078ae:	6983      	ldr	r3, [r0, #24]
 80078b0:	b90b      	cbnz	r3, 80078b6 <__swbuf_r+0x12>
 80078b2:	f000 f9d5 	bl	8007c60 <__sinit>
 80078b6:	4b21      	ldr	r3, [pc, #132]	; (800793c <__swbuf_r+0x98>)
 80078b8:	429c      	cmp	r4, r3
 80078ba:	d12b      	bne.n	8007914 <__swbuf_r+0x70>
 80078bc:	686c      	ldr	r4, [r5, #4]
 80078be:	69a3      	ldr	r3, [r4, #24]
 80078c0:	60a3      	str	r3, [r4, #8]
 80078c2:	89a3      	ldrh	r3, [r4, #12]
 80078c4:	071a      	lsls	r2, r3, #28
 80078c6:	d52f      	bpl.n	8007928 <__swbuf_r+0x84>
 80078c8:	6923      	ldr	r3, [r4, #16]
 80078ca:	b36b      	cbz	r3, 8007928 <__swbuf_r+0x84>
 80078cc:	6923      	ldr	r3, [r4, #16]
 80078ce:	6820      	ldr	r0, [r4, #0]
 80078d0:	b2f6      	uxtb	r6, r6
 80078d2:	1ac0      	subs	r0, r0, r3
 80078d4:	6963      	ldr	r3, [r4, #20]
 80078d6:	4637      	mov	r7, r6
 80078d8:	4283      	cmp	r3, r0
 80078da:	dc04      	bgt.n	80078e6 <__swbuf_r+0x42>
 80078dc:	4621      	mov	r1, r4
 80078de:	4628      	mov	r0, r5
 80078e0:	f000 f92a 	bl	8007b38 <_fflush_r>
 80078e4:	bb30      	cbnz	r0, 8007934 <__swbuf_r+0x90>
 80078e6:	68a3      	ldr	r3, [r4, #8]
 80078e8:	3001      	adds	r0, #1
 80078ea:	3b01      	subs	r3, #1
 80078ec:	60a3      	str	r3, [r4, #8]
 80078ee:	6823      	ldr	r3, [r4, #0]
 80078f0:	1c5a      	adds	r2, r3, #1
 80078f2:	6022      	str	r2, [r4, #0]
 80078f4:	701e      	strb	r6, [r3, #0]
 80078f6:	6963      	ldr	r3, [r4, #20]
 80078f8:	4283      	cmp	r3, r0
 80078fa:	d004      	beq.n	8007906 <__swbuf_r+0x62>
 80078fc:	89a3      	ldrh	r3, [r4, #12]
 80078fe:	07db      	lsls	r3, r3, #31
 8007900:	d506      	bpl.n	8007910 <__swbuf_r+0x6c>
 8007902:	2e0a      	cmp	r6, #10
 8007904:	d104      	bne.n	8007910 <__swbuf_r+0x6c>
 8007906:	4621      	mov	r1, r4
 8007908:	4628      	mov	r0, r5
 800790a:	f000 f915 	bl	8007b38 <_fflush_r>
 800790e:	b988      	cbnz	r0, 8007934 <__swbuf_r+0x90>
 8007910:	4638      	mov	r0, r7
 8007912:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007914:	4b0a      	ldr	r3, [pc, #40]	; (8007940 <__swbuf_r+0x9c>)
 8007916:	429c      	cmp	r4, r3
 8007918:	d101      	bne.n	800791e <__swbuf_r+0x7a>
 800791a:	68ac      	ldr	r4, [r5, #8]
 800791c:	e7cf      	b.n	80078be <__swbuf_r+0x1a>
 800791e:	4b09      	ldr	r3, [pc, #36]	; (8007944 <__swbuf_r+0xa0>)
 8007920:	429c      	cmp	r4, r3
 8007922:	bf08      	it	eq
 8007924:	68ec      	ldreq	r4, [r5, #12]
 8007926:	e7ca      	b.n	80078be <__swbuf_r+0x1a>
 8007928:	4621      	mov	r1, r4
 800792a:	4628      	mov	r0, r5
 800792c:	f000 f80c 	bl	8007948 <__swsetup_r>
 8007930:	2800      	cmp	r0, #0
 8007932:	d0cb      	beq.n	80078cc <__swbuf_r+0x28>
 8007934:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007938:	e7ea      	b.n	8007910 <__swbuf_r+0x6c>
 800793a:	bf00      	nop
 800793c:	08008574 	.word	0x08008574
 8007940:	08008594 	.word	0x08008594
 8007944:	08008554 	.word	0x08008554

08007948 <__swsetup_r>:
 8007948:	4b32      	ldr	r3, [pc, #200]	; (8007a14 <__swsetup_r+0xcc>)
 800794a:	b570      	push	{r4, r5, r6, lr}
 800794c:	681d      	ldr	r5, [r3, #0]
 800794e:	4606      	mov	r6, r0
 8007950:	460c      	mov	r4, r1
 8007952:	b125      	cbz	r5, 800795e <__swsetup_r+0x16>
 8007954:	69ab      	ldr	r3, [r5, #24]
 8007956:	b913      	cbnz	r3, 800795e <__swsetup_r+0x16>
 8007958:	4628      	mov	r0, r5
 800795a:	f000 f981 	bl	8007c60 <__sinit>
 800795e:	4b2e      	ldr	r3, [pc, #184]	; (8007a18 <__swsetup_r+0xd0>)
 8007960:	429c      	cmp	r4, r3
 8007962:	d10f      	bne.n	8007984 <__swsetup_r+0x3c>
 8007964:	686c      	ldr	r4, [r5, #4]
 8007966:	89a3      	ldrh	r3, [r4, #12]
 8007968:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800796c:	0719      	lsls	r1, r3, #28
 800796e:	d42c      	bmi.n	80079ca <__swsetup_r+0x82>
 8007970:	06dd      	lsls	r5, r3, #27
 8007972:	d411      	bmi.n	8007998 <__swsetup_r+0x50>
 8007974:	2309      	movs	r3, #9
 8007976:	6033      	str	r3, [r6, #0]
 8007978:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800797c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007980:	81a3      	strh	r3, [r4, #12]
 8007982:	e03e      	b.n	8007a02 <__swsetup_r+0xba>
 8007984:	4b25      	ldr	r3, [pc, #148]	; (8007a1c <__swsetup_r+0xd4>)
 8007986:	429c      	cmp	r4, r3
 8007988:	d101      	bne.n	800798e <__swsetup_r+0x46>
 800798a:	68ac      	ldr	r4, [r5, #8]
 800798c:	e7eb      	b.n	8007966 <__swsetup_r+0x1e>
 800798e:	4b24      	ldr	r3, [pc, #144]	; (8007a20 <__swsetup_r+0xd8>)
 8007990:	429c      	cmp	r4, r3
 8007992:	bf08      	it	eq
 8007994:	68ec      	ldreq	r4, [r5, #12]
 8007996:	e7e6      	b.n	8007966 <__swsetup_r+0x1e>
 8007998:	0758      	lsls	r0, r3, #29
 800799a:	d512      	bpl.n	80079c2 <__swsetup_r+0x7a>
 800799c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800799e:	b141      	cbz	r1, 80079b2 <__swsetup_r+0x6a>
 80079a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80079a4:	4299      	cmp	r1, r3
 80079a6:	d002      	beq.n	80079ae <__swsetup_r+0x66>
 80079a8:	4630      	mov	r0, r6
 80079aa:	f7ff fb2f 	bl	800700c <_free_r>
 80079ae:	2300      	movs	r3, #0
 80079b0:	6363      	str	r3, [r4, #52]	; 0x34
 80079b2:	89a3      	ldrh	r3, [r4, #12]
 80079b4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80079b8:	81a3      	strh	r3, [r4, #12]
 80079ba:	2300      	movs	r3, #0
 80079bc:	6063      	str	r3, [r4, #4]
 80079be:	6923      	ldr	r3, [r4, #16]
 80079c0:	6023      	str	r3, [r4, #0]
 80079c2:	89a3      	ldrh	r3, [r4, #12]
 80079c4:	f043 0308 	orr.w	r3, r3, #8
 80079c8:	81a3      	strh	r3, [r4, #12]
 80079ca:	6923      	ldr	r3, [r4, #16]
 80079cc:	b94b      	cbnz	r3, 80079e2 <__swsetup_r+0x9a>
 80079ce:	89a3      	ldrh	r3, [r4, #12]
 80079d0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80079d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079d8:	d003      	beq.n	80079e2 <__swsetup_r+0x9a>
 80079da:	4621      	mov	r1, r4
 80079dc:	4630      	mov	r0, r6
 80079de:	f000 fa05 	bl	8007dec <__smakebuf_r>
 80079e2:	89a0      	ldrh	r0, [r4, #12]
 80079e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80079e8:	f010 0301 	ands.w	r3, r0, #1
 80079ec:	d00a      	beq.n	8007a04 <__swsetup_r+0xbc>
 80079ee:	2300      	movs	r3, #0
 80079f0:	60a3      	str	r3, [r4, #8]
 80079f2:	6963      	ldr	r3, [r4, #20]
 80079f4:	425b      	negs	r3, r3
 80079f6:	61a3      	str	r3, [r4, #24]
 80079f8:	6923      	ldr	r3, [r4, #16]
 80079fa:	b943      	cbnz	r3, 8007a0e <__swsetup_r+0xc6>
 80079fc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007a00:	d1ba      	bne.n	8007978 <__swsetup_r+0x30>
 8007a02:	bd70      	pop	{r4, r5, r6, pc}
 8007a04:	0781      	lsls	r1, r0, #30
 8007a06:	bf58      	it	pl
 8007a08:	6963      	ldrpl	r3, [r4, #20]
 8007a0a:	60a3      	str	r3, [r4, #8]
 8007a0c:	e7f4      	b.n	80079f8 <__swsetup_r+0xb0>
 8007a0e:	2000      	movs	r0, #0
 8007a10:	e7f7      	b.n	8007a02 <__swsetup_r+0xba>
 8007a12:	bf00      	nop
 8007a14:	2000000c 	.word	0x2000000c
 8007a18:	08008574 	.word	0x08008574
 8007a1c:	08008594 	.word	0x08008594
 8007a20:	08008554 	.word	0x08008554

08007a24 <abort>:
 8007a24:	2006      	movs	r0, #6
 8007a26:	b508      	push	{r3, lr}
 8007a28:	f000 fa50 	bl	8007ecc <raise>
 8007a2c:	2001      	movs	r0, #1
 8007a2e:	f7f9 fcdc 	bl	80013ea <_exit>
	...

08007a34 <__sflush_r>:
 8007a34:	898a      	ldrh	r2, [r1, #12]
 8007a36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a38:	4605      	mov	r5, r0
 8007a3a:	0710      	lsls	r0, r2, #28
 8007a3c:	460c      	mov	r4, r1
 8007a3e:	d457      	bmi.n	8007af0 <__sflush_r+0xbc>
 8007a40:	684b      	ldr	r3, [r1, #4]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	dc04      	bgt.n	8007a50 <__sflush_r+0x1c>
 8007a46:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	dc01      	bgt.n	8007a50 <__sflush_r+0x1c>
 8007a4c:	2000      	movs	r0, #0
 8007a4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007a52:	2e00      	cmp	r6, #0
 8007a54:	d0fa      	beq.n	8007a4c <__sflush_r+0x18>
 8007a56:	2300      	movs	r3, #0
 8007a58:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007a5c:	682f      	ldr	r7, [r5, #0]
 8007a5e:	602b      	str	r3, [r5, #0]
 8007a60:	d032      	beq.n	8007ac8 <__sflush_r+0x94>
 8007a62:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007a64:	89a3      	ldrh	r3, [r4, #12]
 8007a66:	075a      	lsls	r2, r3, #29
 8007a68:	d505      	bpl.n	8007a76 <__sflush_r+0x42>
 8007a6a:	6863      	ldr	r3, [r4, #4]
 8007a6c:	1ac0      	subs	r0, r0, r3
 8007a6e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007a70:	b10b      	cbz	r3, 8007a76 <__sflush_r+0x42>
 8007a72:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007a74:	1ac0      	subs	r0, r0, r3
 8007a76:	2300      	movs	r3, #0
 8007a78:	4602      	mov	r2, r0
 8007a7a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007a7c:	4628      	mov	r0, r5
 8007a7e:	6a21      	ldr	r1, [r4, #32]
 8007a80:	47b0      	blx	r6
 8007a82:	1c43      	adds	r3, r0, #1
 8007a84:	89a3      	ldrh	r3, [r4, #12]
 8007a86:	d106      	bne.n	8007a96 <__sflush_r+0x62>
 8007a88:	6829      	ldr	r1, [r5, #0]
 8007a8a:	291d      	cmp	r1, #29
 8007a8c:	d82c      	bhi.n	8007ae8 <__sflush_r+0xb4>
 8007a8e:	4a29      	ldr	r2, [pc, #164]	; (8007b34 <__sflush_r+0x100>)
 8007a90:	40ca      	lsrs	r2, r1
 8007a92:	07d6      	lsls	r6, r2, #31
 8007a94:	d528      	bpl.n	8007ae8 <__sflush_r+0xb4>
 8007a96:	2200      	movs	r2, #0
 8007a98:	6062      	str	r2, [r4, #4]
 8007a9a:	6922      	ldr	r2, [r4, #16]
 8007a9c:	04d9      	lsls	r1, r3, #19
 8007a9e:	6022      	str	r2, [r4, #0]
 8007aa0:	d504      	bpl.n	8007aac <__sflush_r+0x78>
 8007aa2:	1c42      	adds	r2, r0, #1
 8007aa4:	d101      	bne.n	8007aaa <__sflush_r+0x76>
 8007aa6:	682b      	ldr	r3, [r5, #0]
 8007aa8:	b903      	cbnz	r3, 8007aac <__sflush_r+0x78>
 8007aaa:	6560      	str	r0, [r4, #84]	; 0x54
 8007aac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007aae:	602f      	str	r7, [r5, #0]
 8007ab0:	2900      	cmp	r1, #0
 8007ab2:	d0cb      	beq.n	8007a4c <__sflush_r+0x18>
 8007ab4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ab8:	4299      	cmp	r1, r3
 8007aba:	d002      	beq.n	8007ac2 <__sflush_r+0x8e>
 8007abc:	4628      	mov	r0, r5
 8007abe:	f7ff faa5 	bl	800700c <_free_r>
 8007ac2:	2000      	movs	r0, #0
 8007ac4:	6360      	str	r0, [r4, #52]	; 0x34
 8007ac6:	e7c2      	b.n	8007a4e <__sflush_r+0x1a>
 8007ac8:	6a21      	ldr	r1, [r4, #32]
 8007aca:	2301      	movs	r3, #1
 8007acc:	4628      	mov	r0, r5
 8007ace:	47b0      	blx	r6
 8007ad0:	1c41      	adds	r1, r0, #1
 8007ad2:	d1c7      	bne.n	8007a64 <__sflush_r+0x30>
 8007ad4:	682b      	ldr	r3, [r5, #0]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d0c4      	beq.n	8007a64 <__sflush_r+0x30>
 8007ada:	2b1d      	cmp	r3, #29
 8007adc:	d001      	beq.n	8007ae2 <__sflush_r+0xae>
 8007ade:	2b16      	cmp	r3, #22
 8007ae0:	d101      	bne.n	8007ae6 <__sflush_r+0xb2>
 8007ae2:	602f      	str	r7, [r5, #0]
 8007ae4:	e7b2      	b.n	8007a4c <__sflush_r+0x18>
 8007ae6:	89a3      	ldrh	r3, [r4, #12]
 8007ae8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007aec:	81a3      	strh	r3, [r4, #12]
 8007aee:	e7ae      	b.n	8007a4e <__sflush_r+0x1a>
 8007af0:	690f      	ldr	r7, [r1, #16]
 8007af2:	2f00      	cmp	r7, #0
 8007af4:	d0aa      	beq.n	8007a4c <__sflush_r+0x18>
 8007af6:	0793      	lsls	r3, r2, #30
 8007af8:	bf18      	it	ne
 8007afa:	2300      	movne	r3, #0
 8007afc:	680e      	ldr	r6, [r1, #0]
 8007afe:	bf08      	it	eq
 8007b00:	694b      	ldreq	r3, [r1, #20]
 8007b02:	1bf6      	subs	r6, r6, r7
 8007b04:	600f      	str	r7, [r1, #0]
 8007b06:	608b      	str	r3, [r1, #8]
 8007b08:	2e00      	cmp	r6, #0
 8007b0a:	dd9f      	ble.n	8007a4c <__sflush_r+0x18>
 8007b0c:	4633      	mov	r3, r6
 8007b0e:	463a      	mov	r2, r7
 8007b10:	4628      	mov	r0, r5
 8007b12:	6a21      	ldr	r1, [r4, #32]
 8007b14:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007b18:	47e0      	blx	ip
 8007b1a:	2800      	cmp	r0, #0
 8007b1c:	dc06      	bgt.n	8007b2c <__sflush_r+0xf8>
 8007b1e:	89a3      	ldrh	r3, [r4, #12]
 8007b20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007b24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b28:	81a3      	strh	r3, [r4, #12]
 8007b2a:	e790      	b.n	8007a4e <__sflush_r+0x1a>
 8007b2c:	4407      	add	r7, r0
 8007b2e:	1a36      	subs	r6, r6, r0
 8007b30:	e7ea      	b.n	8007b08 <__sflush_r+0xd4>
 8007b32:	bf00      	nop
 8007b34:	20400001 	.word	0x20400001

08007b38 <_fflush_r>:
 8007b38:	b538      	push	{r3, r4, r5, lr}
 8007b3a:	690b      	ldr	r3, [r1, #16]
 8007b3c:	4605      	mov	r5, r0
 8007b3e:	460c      	mov	r4, r1
 8007b40:	b913      	cbnz	r3, 8007b48 <_fflush_r+0x10>
 8007b42:	2500      	movs	r5, #0
 8007b44:	4628      	mov	r0, r5
 8007b46:	bd38      	pop	{r3, r4, r5, pc}
 8007b48:	b118      	cbz	r0, 8007b52 <_fflush_r+0x1a>
 8007b4a:	6983      	ldr	r3, [r0, #24]
 8007b4c:	b90b      	cbnz	r3, 8007b52 <_fflush_r+0x1a>
 8007b4e:	f000 f887 	bl	8007c60 <__sinit>
 8007b52:	4b14      	ldr	r3, [pc, #80]	; (8007ba4 <_fflush_r+0x6c>)
 8007b54:	429c      	cmp	r4, r3
 8007b56:	d11b      	bne.n	8007b90 <_fflush_r+0x58>
 8007b58:	686c      	ldr	r4, [r5, #4]
 8007b5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d0ef      	beq.n	8007b42 <_fflush_r+0xa>
 8007b62:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007b64:	07d0      	lsls	r0, r2, #31
 8007b66:	d404      	bmi.n	8007b72 <_fflush_r+0x3a>
 8007b68:	0599      	lsls	r1, r3, #22
 8007b6a:	d402      	bmi.n	8007b72 <_fflush_r+0x3a>
 8007b6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b6e:	f000 f915 	bl	8007d9c <__retarget_lock_acquire_recursive>
 8007b72:	4628      	mov	r0, r5
 8007b74:	4621      	mov	r1, r4
 8007b76:	f7ff ff5d 	bl	8007a34 <__sflush_r>
 8007b7a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007b7c:	4605      	mov	r5, r0
 8007b7e:	07da      	lsls	r2, r3, #31
 8007b80:	d4e0      	bmi.n	8007b44 <_fflush_r+0xc>
 8007b82:	89a3      	ldrh	r3, [r4, #12]
 8007b84:	059b      	lsls	r3, r3, #22
 8007b86:	d4dd      	bmi.n	8007b44 <_fflush_r+0xc>
 8007b88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b8a:	f000 f908 	bl	8007d9e <__retarget_lock_release_recursive>
 8007b8e:	e7d9      	b.n	8007b44 <_fflush_r+0xc>
 8007b90:	4b05      	ldr	r3, [pc, #20]	; (8007ba8 <_fflush_r+0x70>)
 8007b92:	429c      	cmp	r4, r3
 8007b94:	d101      	bne.n	8007b9a <_fflush_r+0x62>
 8007b96:	68ac      	ldr	r4, [r5, #8]
 8007b98:	e7df      	b.n	8007b5a <_fflush_r+0x22>
 8007b9a:	4b04      	ldr	r3, [pc, #16]	; (8007bac <_fflush_r+0x74>)
 8007b9c:	429c      	cmp	r4, r3
 8007b9e:	bf08      	it	eq
 8007ba0:	68ec      	ldreq	r4, [r5, #12]
 8007ba2:	e7da      	b.n	8007b5a <_fflush_r+0x22>
 8007ba4:	08008574 	.word	0x08008574
 8007ba8:	08008594 	.word	0x08008594
 8007bac:	08008554 	.word	0x08008554

08007bb0 <std>:
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	b510      	push	{r4, lr}
 8007bb4:	4604      	mov	r4, r0
 8007bb6:	e9c0 3300 	strd	r3, r3, [r0]
 8007bba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007bbe:	6083      	str	r3, [r0, #8]
 8007bc0:	8181      	strh	r1, [r0, #12]
 8007bc2:	6643      	str	r3, [r0, #100]	; 0x64
 8007bc4:	81c2      	strh	r2, [r0, #14]
 8007bc6:	6183      	str	r3, [r0, #24]
 8007bc8:	4619      	mov	r1, r3
 8007bca:	2208      	movs	r2, #8
 8007bcc:	305c      	adds	r0, #92	; 0x5c
 8007bce:	f7fb fe0d 	bl	80037ec <memset>
 8007bd2:	4b05      	ldr	r3, [pc, #20]	; (8007be8 <std+0x38>)
 8007bd4:	6224      	str	r4, [r4, #32]
 8007bd6:	6263      	str	r3, [r4, #36]	; 0x24
 8007bd8:	4b04      	ldr	r3, [pc, #16]	; (8007bec <std+0x3c>)
 8007bda:	62a3      	str	r3, [r4, #40]	; 0x28
 8007bdc:	4b04      	ldr	r3, [pc, #16]	; (8007bf0 <std+0x40>)
 8007bde:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007be0:	4b04      	ldr	r3, [pc, #16]	; (8007bf4 <std+0x44>)
 8007be2:	6323      	str	r3, [r4, #48]	; 0x30
 8007be4:	bd10      	pop	{r4, pc}
 8007be6:	bf00      	nop
 8007be8:	08007f05 	.word	0x08007f05
 8007bec:	08007f27 	.word	0x08007f27
 8007bf0:	08007f5f 	.word	0x08007f5f
 8007bf4:	08007f83 	.word	0x08007f83

08007bf8 <_cleanup_r>:
 8007bf8:	4901      	ldr	r1, [pc, #4]	; (8007c00 <_cleanup_r+0x8>)
 8007bfa:	f000 b8af 	b.w	8007d5c <_fwalk_reent>
 8007bfe:	bf00      	nop
 8007c00:	08007b39 	.word	0x08007b39

08007c04 <__sfmoreglue>:
 8007c04:	2268      	movs	r2, #104	; 0x68
 8007c06:	b570      	push	{r4, r5, r6, lr}
 8007c08:	1e4d      	subs	r5, r1, #1
 8007c0a:	4355      	muls	r5, r2
 8007c0c:	460e      	mov	r6, r1
 8007c0e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007c12:	f7ff fa63 	bl	80070dc <_malloc_r>
 8007c16:	4604      	mov	r4, r0
 8007c18:	b140      	cbz	r0, 8007c2c <__sfmoreglue+0x28>
 8007c1a:	2100      	movs	r1, #0
 8007c1c:	e9c0 1600 	strd	r1, r6, [r0]
 8007c20:	300c      	adds	r0, #12
 8007c22:	60a0      	str	r0, [r4, #8]
 8007c24:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007c28:	f7fb fde0 	bl	80037ec <memset>
 8007c2c:	4620      	mov	r0, r4
 8007c2e:	bd70      	pop	{r4, r5, r6, pc}

08007c30 <__sfp_lock_acquire>:
 8007c30:	4801      	ldr	r0, [pc, #4]	; (8007c38 <__sfp_lock_acquire+0x8>)
 8007c32:	f000 b8b3 	b.w	8007d9c <__retarget_lock_acquire_recursive>
 8007c36:	bf00      	nop
 8007c38:	20000261 	.word	0x20000261

08007c3c <__sfp_lock_release>:
 8007c3c:	4801      	ldr	r0, [pc, #4]	; (8007c44 <__sfp_lock_release+0x8>)
 8007c3e:	f000 b8ae 	b.w	8007d9e <__retarget_lock_release_recursive>
 8007c42:	bf00      	nop
 8007c44:	20000261 	.word	0x20000261

08007c48 <__sinit_lock_acquire>:
 8007c48:	4801      	ldr	r0, [pc, #4]	; (8007c50 <__sinit_lock_acquire+0x8>)
 8007c4a:	f000 b8a7 	b.w	8007d9c <__retarget_lock_acquire_recursive>
 8007c4e:	bf00      	nop
 8007c50:	20000262 	.word	0x20000262

08007c54 <__sinit_lock_release>:
 8007c54:	4801      	ldr	r0, [pc, #4]	; (8007c5c <__sinit_lock_release+0x8>)
 8007c56:	f000 b8a2 	b.w	8007d9e <__retarget_lock_release_recursive>
 8007c5a:	bf00      	nop
 8007c5c:	20000262 	.word	0x20000262

08007c60 <__sinit>:
 8007c60:	b510      	push	{r4, lr}
 8007c62:	4604      	mov	r4, r0
 8007c64:	f7ff fff0 	bl	8007c48 <__sinit_lock_acquire>
 8007c68:	69a3      	ldr	r3, [r4, #24]
 8007c6a:	b11b      	cbz	r3, 8007c74 <__sinit+0x14>
 8007c6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c70:	f7ff bff0 	b.w	8007c54 <__sinit_lock_release>
 8007c74:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007c78:	6523      	str	r3, [r4, #80]	; 0x50
 8007c7a:	4b13      	ldr	r3, [pc, #76]	; (8007cc8 <__sinit+0x68>)
 8007c7c:	4a13      	ldr	r2, [pc, #76]	; (8007ccc <__sinit+0x6c>)
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	62a2      	str	r2, [r4, #40]	; 0x28
 8007c82:	42a3      	cmp	r3, r4
 8007c84:	bf08      	it	eq
 8007c86:	2301      	moveq	r3, #1
 8007c88:	4620      	mov	r0, r4
 8007c8a:	bf08      	it	eq
 8007c8c:	61a3      	streq	r3, [r4, #24]
 8007c8e:	f000 f81f 	bl	8007cd0 <__sfp>
 8007c92:	6060      	str	r0, [r4, #4]
 8007c94:	4620      	mov	r0, r4
 8007c96:	f000 f81b 	bl	8007cd0 <__sfp>
 8007c9a:	60a0      	str	r0, [r4, #8]
 8007c9c:	4620      	mov	r0, r4
 8007c9e:	f000 f817 	bl	8007cd0 <__sfp>
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	2104      	movs	r1, #4
 8007ca6:	60e0      	str	r0, [r4, #12]
 8007ca8:	6860      	ldr	r0, [r4, #4]
 8007caa:	f7ff ff81 	bl	8007bb0 <std>
 8007cae:	2201      	movs	r2, #1
 8007cb0:	2109      	movs	r1, #9
 8007cb2:	68a0      	ldr	r0, [r4, #8]
 8007cb4:	f7ff ff7c 	bl	8007bb0 <std>
 8007cb8:	2202      	movs	r2, #2
 8007cba:	2112      	movs	r1, #18
 8007cbc:	68e0      	ldr	r0, [r4, #12]
 8007cbe:	f7ff ff77 	bl	8007bb0 <std>
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	61a3      	str	r3, [r4, #24]
 8007cc6:	e7d1      	b.n	8007c6c <__sinit+0xc>
 8007cc8:	08008110 	.word	0x08008110
 8007ccc:	08007bf9 	.word	0x08007bf9

08007cd0 <__sfp>:
 8007cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cd2:	4607      	mov	r7, r0
 8007cd4:	f7ff ffac 	bl	8007c30 <__sfp_lock_acquire>
 8007cd8:	4b1e      	ldr	r3, [pc, #120]	; (8007d54 <__sfp+0x84>)
 8007cda:	681e      	ldr	r6, [r3, #0]
 8007cdc:	69b3      	ldr	r3, [r6, #24]
 8007cde:	b913      	cbnz	r3, 8007ce6 <__sfp+0x16>
 8007ce0:	4630      	mov	r0, r6
 8007ce2:	f7ff ffbd 	bl	8007c60 <__sinit>
 8007ce6:	3648      	adds	r6, #72	; 0x48
 8007ce8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007cec:	3b01      	subs	r3, #1
 8007cee:	d503      	bpl.n	8007cf8 <__sfp+0x28>
 8007cf0:	6833      	ldr	r3, [r6, #0]
 8007cf2:	b30b      	cbz	r3, 8007d38 <__sfp+0x68>
 8007cf4:	6836      	ldr	r6, [r6, #0]
 8007cf6:	e7f7      	b.n	8007ce8 <__sfp+0x18>
 8007cf8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007cfc:	b9d5      	cbnz	r5, 8007d34 <__sfp+0x64>
 8007cfe:	4b16      	ldr	r3, [pc, #88]	; (8007d58 <__sfp+0x88>)
 8007d00:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007d04:	60e3      	str	r3, [r4, #12]
 8007d06:	6665      	str	r5, [r4, #100]	; 0x64
 8007d08:	f000 f847 	bl	8007d9a <__retarget_lock_init_recursive>
 8007d0c:	f7ff ff96 	bl	8007c3c <__sfp_lock_release>
 8007d10:	2208      	movs	r2, #8
 8007d12:	4629      	mov	r1, r5
 8007d14:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007d18:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007d1c:	6025      	str	r5, [r4, #0]
 8007d1e:	61a5      	str	r5, [r4, #24]
 8007d20:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007d24:	f7fb fd62 	bl	80037ec <memset>
 8007d28:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007d2c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007d30:	4620      	mov	r0, r4
 8007d32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d34:	3468      	adds	r4, #104	; 0x68
 8007d36:	e7d9      	b.n	8007cec <__sfp+0x1c>
 8007d38:	2104      	movs	r1, #4
 8007d3a:	4638      	mov	r0, r7
 8007d3c:	f7ff ff62 	bl	8007c04 <__sfmoreglue>
 8007d40:	4604      	mov	r4, r0
 8007d42:	6030      	str	r0, [r6, #0]
 8007d44:	2800      	cmp	r0, #0
 8007d46:	d1d5      	bne.n	8007cf4 <__sfp+0x24>
 8007d48:	f7ff ff78 	bl	8007c3c <__sfp_lock_release>
 8007d4c:	230c      	movs	r3, #12
 8007d4e:	603b      	str	r3, [r7, #0]
 8007d50:	e7ee      	b.n	8007d30 <__sfp+0x60>
 8007d52:	bf00      	nop
 8007d54:	08008110 	.word	0x08008110
 8007d58:	ffff0001 	.word	0xffff0001

08007d5c <_fwalk_reent>:
 8007d5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d60:	4606      	mov	r6, r0
 8007d62:	4688      	mov	r8, r1
 8007d64:	2700      	movs	r7, #0
 8007d66:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007d6a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007d6e:	f1b9 0901 	subs.w	r9, r9, #1
 8007d72:	d505      	bpl.n	8007d80 <_fwalk_reent+0x24>
 8007d74:	6824      	ldr	r4, [r4, #0]
 8007d76:	2c00      	cmp	r4, #0
 8007d78:	d1f7      	bne.n	8007d6a <_fwalk_reent+0xe>
 8007d7a:	4638      	mov	r0, r7
 8007d7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d80:	89ab      	ldrh	r3, [r5, #12]
 8007d82:	2b01      	cmp	r3, #1
 8007d84:	d907      	bls.n	8007d96 <_fwalk_reent+0x3a>
 8007d86:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007d8a:	3301      	adds	r3, #1
 8007d8c:	d003      	beq.n	8007d96 <_fwalk_reent+0x3a>
 8007d8e:	4629      	mov	r1, r5
 8007d90:	4630      	mov	r0, r6
 8007d92:	47c0      	blx	r8
 8007d94:	4307      	orrs	r7, r0
 8007d96:	3568      	adds	r5, #104	; 0x68
 8007d98:	e7e9      	b.n	8007d6e <_fwalk_reent+0x12>

08007d9a <__retarget_lock_init_recursive>:
 8007d9a:	4770      	bx	lr

08007d9c <__retarget_lock_acquire_recursive>:
 8007d9c:	4770      	bx	lr

08007d9e <__retarget_lock_release_recursive>:
 8007d9e:	4770      	bx	lr

08007da0 <__swhatbuf_r>:
 8007da0:	b570      	push	{r4, r5, r6, lr}
 8007da2:	460e      	mov	r6, r1
 8007da4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007da8:	4614      	mov	r4, r2
 8007daa:	2900      	cmp	r1, #0
 8007dac:	461d      	mov	r5, r3
 8007dae:	b096      	sub	sp, #88	; 0x58
 8007db0:	da08      	bge.n	8007dc4 <__swhatbuf_r+0x24>
 8007db2:	2200      	movs	r2, #0
 8007db4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007db8:	602a      	str	r2, [r5, #0]
 8007dba:	061a      	lsls	r2, r3, #24
 8007dbc:	d410      	bmi.n	8007de0 <__swhatbuf_r+0x40>
 8007dbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007dc2:	e00e      	b.n	8007de2 <__swhatbuf_r+0x42>
 8007dc4:	466a      	mov	r2, sp
 8007dc6:	f000 f903 	bl	8007fd0 <_fstat_r>
 8007dca:	2800      	cmp	r0, #0
 8007dcc:	dbf1      	blt.n	8007db2 <__swhatbuf_r+0x12>
 8007dce:	9a01      	ldr	r2, [sp, #4]
 8007dd0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007dd4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007dd8:	425a      	negs	r2, r3
 8007dda:	415a      	adcs	r2, r3
 8007ddc:	602a      	str	r2, [r5, #0]
 8007dde:	e7ee      	b.n	8007dbe <__swhatbuf_r+0x1e>
 8007de0:	2340      	movs	r3, #64	; 0x40
 8007de2:	2000      	movs	r0, #0
 8007de4:	6023      	str	r3, [r4, #0]
 8007de6:	b016      	add	sp, #88	; 0x58
 8007de8:	bd70      	pop	{r4, r5, r6, pc}
	...

08007dec <__smakebuf_r>:
 8007dec:	898b      	ldrh	r3, [r1, #12]
 8007dee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007df0:	079d      	lsls	r5, r3, #30
 8007df2:	4606      	mov	r6, r0
 8007df4:	460c      	mov	r4, r1
 8007df6:	d507      	bpl.n	8007e08 <__smakebuf_r+0x1c>
 8007df8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007dfc:	6023      	str	r3, [r4, #0]
 8007dfe:	6123      	str	r3, [r4, #16]
 8007e00:	2301      	movs	r3, #1
 8007e02:	6163      	str	r3, [r4, #20]
 8007e04:	b002      	add	sp, #8
 8007e06:	bd70      	pop	{r4, r5, r6, pc}
 8007e08:	466a      	mov	r2, sp
 8007e0a:	ab01      	add	r3, sp, #4
 8007e0c:	f7ff ffc8 	bl	8007da0 <__swhatbuf_r>
 8007e10:	9900      	ldr	r1, [sp, #0]
 8007e12:	4605      	mov	r5, r0
 8007e14:	4630      	mov	r0, r6
 8007e16:	f7ff f961 	bl	80070dc <_malloc_r>
 8007e1a:	b948      	cbnz	r0, 8007e30 <__smakebuf_r+0x44>
 8007e1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e20:	059a      	lsls	r2, r3, #22
 8007e22:	d4ef      	bmi.n	8007e04 <__smakebuf_r+0x18>
 8007e24:	f023 0303 	bic.w	r3, r3, #3
 8007e28:	f043 0302 	orr.w	r3, r3, #2
 8007e2c:	81a3      	strh	r3, [r4, #12]
 8007e2e:	e7e3      	b.n	8007df8 <__smakebuf_r+0xc>
 8007e30:	4b0d      	ldr	r3, [pc, #52]	; (8007e68 <__smakebuf_r+0x7c>)
 8007e32:	62b3      	str	r3, [r6, #40]	; 0x28
 8007e34:	89a3      	ldrh	r3, [r4, #12]
 8007e36:	6020      	str	r0, [r4, #0]
 8007e38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e3c:	81a3      	strh	r3, [r4, #12]
 8007e3e:	9b00      	ldr	r3, [sp, #0]
 8007e40:	6120      	str	r0, [r4, #16]
 8007e42:	6163      	str	r3, [r4, #20]
 8007e44:	9b01      	ldr	r3, [sp, #4]
 8007e46:	b15b      	cbz	r3, 8007e60 <__smakebuf_r+0x74>
 8007e48:	4630      	mov	r0, r6
 8007e4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007e4e:	f000 f8d1 	bl	8007ff4 <_isatty_r>
 8007e52:	b128      	cbz	r0, 8007e60 <__smakebuf_r+0x74>
 8007e54:	89a3      	ldrh	r3, [r4, #12]
 8007e56:	f023 0303 	bic.w	r3, r3, #3
 8007e5a:	f043 0301 	orr.w	r3, r3, #1
 8007e5e:	81a3      	strh	r3, [r4, #12]
 8007e60:	89a0      	ldrh	r0, [r4, #12]
 8007e62:	4305      	orrs	r5, r0
 8007e64:	81a5      	strh	r5, [r4, #12]
 8007e66:	e7cd      	b.n	8007e04 <__smakebuf_r+0x18>
 8007e68:	08007bf9 	.word	0x08007bf9

08007e6c <_malloc_usable_size_r>:
 8007e6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e70:	1f18      	subs	r0, r3, #4
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	bfbc      	itt	lt
 8007e76:	580b      	ldrlt	r3, [r1, r0]
 8007e78:	18c0      	addlt	r0, r0, r3
 8007e7a:	4770      	bx	lr

08007e7c <_raise_r>:
 8007e7c:	291f      	cmp	r1, #31
 8007e7e:	b538      	push	{r3, r4, r5, lr}
 8007e80:	4604      	mov	r4, r0
 8007e82:	460d      	mov	r5, r1
 8007e84:	d904      	bls.n	8007e90 <_raise_r+0x14>
 8007e86:	2316      	movs	r3, #22
 8007e88:	6003      	str	r3, [r0, #0]
 8007e8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007e8e:	bd38      	pop	{r3, r4, r5, pc}
 8007e90:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007e92:	b112      	cbz	r2, 8007e9a <_raise_r+0x1e>
 8007e94:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007e98:	b94b      	cbnz	r3, 8007eae <_raise_r+0x32>
 8007e9a:	4620      	mov	r0, r4
 8007e9c:	f000 f830 	bl	8007f00 <_getpid_r>
 8007ea0:	462a      	mov	r2, r5
 8007ea2:	4601      	mov	r1, r0
 8007ea4:	4620      	mov	r0, r4
 8007ea6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007eaa:	f000 b817 	b.w	8007edc <_kill_r>
 8007eae:	2b01      	cmp	r3, #1
 8007eb0:	d00a      	beq.n	8007ec8 <_raise_r+0x4c>
 8007eb2:	1c59      	adds	r1, r3, #1
 8007eb4:	d103      	bne.n	8007ebe <_raise_r+0x42>
 8007eb6:	2316      	movs	r3, #22
 8007eb8:	6003      	str	r3, [r0, #0]
 8007eba:	2001      	movs	r0, #1
 8007ebc:	e7e7      	b.n	8007e8e <_raise_r+0x12>
 8007ebe:	2400      	movs	r4, #0
 8007ec0:	4628      	mov	r0, r5
 8007ec2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007ec6:	4798      	blx	r3
 8007ec8:	2000      	movs	r0, #0
 8007eca:	e7e0      	b.n	8007e8e <_raise_r+0x12>

08007ecc <raise>:
 8007ecc:	4b02      	ldr	r3, [pc, #8]	; (8007ed8 <raise+0xc>)
 8007ece:	4601      	mov	r1, r0
 8007ed0:	6818      	ldr	r0, [r3, #0]
 8007ed2:	f7ff bfd3 	b.w	8007e7c <_raise_r>
 8007ed6:	bf00      	nop
 8007ed8:	2000000c 	.word	0x2000000c

08007edc <_kill_r>:
 8007edc:	b538      	push	{r3, r4, r5, lr}
 8007ede:	2300      	movs	r3, #0
 8007ee0:	4d06      	ldr	r5, [pc, #24]	; (8007efc <_kill_r+0x20>)
 8007ee2:	4604      	mov	r4, r0
 8007ee4:	4608      	mov	r0, r1
 8007ee6:	4611      	mov	r1, r2
 8007ee8:	602b      	str	r3, [r5, #0]
 8007eea:	f7f9 fa6e 	bl	80013ca <_kill>
 8007eee:	1c43      	adds	r3, r0, #1
 8007ef0:	d102      	bne.n	8007ef8 <_kill_r+0x1c>
 8007ef2:	682b      	ldr	r3, [r5, #0]
 8007ef4:	b103      	cbz	r3, 8007ef8 <_kill_r+0x1c>
 8007ef6:	6023      	str	r3, [r4, #0]
 8007ef8:	bd38      	pop	{r3, r4, r5, pc}
 8007efa:	bf00      	nop
 8007efc:	2000025c 	.word	0x2000025c

08007f00 <_getpid_r>:
 8007f00:	f7f9 ba5c 	b.w	80013bc <_getpid>

08007f04 <__sread>:
 8007f04:	b510      	push	{r4, lr}
 8007f06:	460c      	mov	r4, r1
 8007f08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f0c:	f000 f894 	bl	8008038 <_read_r>
 8007f10:	2800      	cmp	r0, #0
 8007f12:	bfab      	itete	ge
 8007f14:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007f16:	89a3      	ldrhlt	r3, [r4, #12]
 8007f18:	181b      	addge	r3, r3, r0
 8007f1a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007f1e:	bfac      	ite	ge
 8007f20:	6563      	strge	r3, [r4, #84]	; 0x54
 8007f22:	81a3      	strhlt	r3, [r4, #12]
 8007f24:	bd10      	pop	{r4, pc}

08007f26 <__swrite>:
 8007f26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f2a:	461f      	mov	r7, r3
 8007f2c:	898b      	ldrh	r3, [r1, #12]
 8007f2e:	4605      	mov	r5, r0
 8007f30:	05db      	lsls	r3, r3, #23
 8007f32:	460c      	mov	r4, r1
 8007f34:	4616      	mov	r6, r2
 8007f36:	d505      	bpl.n	8007f44 <__swrite+0x1e>
 8007f38:	2302      	movs	r3, #2
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f40:	f000 f868 	bl	8008014 <_lseek_r>
 8007f44:	89a3      	ldrh	r3, [r4, #12]
 8007f46:	4632      	mov	r2, r6
 8007f48:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007f4c:	81a3      	strh	r3, [r4, #12]
 8007f4e:	4628      	mov	r0, r5
 8007f50:	463b      	mov	r3, r7
 8007f52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f5a:	f000 b817 	b.w	8007f8c <_write_r>

08007f5e <__sseek>:
 8007f5e:	b510      	push	{r4, lr}
 8007f60:	460c      	mov	r4, r1
 8007f62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f66:	f000 f855 	bl	8008014 <_lseek_r>
 8007f6a:	1c43      	adds	r3, r0, #1
 8007f6c:	89a3      	ldrh	r3, [r4, #12]
 8007f6e:	bf15      	itete	ne
 8007f70:	6560      	strne	r0, [r4, #84]	; 0x54
 8007f72:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007f76:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007f7a:	81a3      	strheq	r3, [r4, #12]
 8007f7c:	bf18      	it	ne
 8007f7e:	81a3      	strhne	r3, [r4, #12]
 8007f80:	bd10      	pop	{r4, pc}

08007f82 <__sclose>:
 8007f82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f86:	f000 b813 	b.w	8007fb0 <_close_r>
	...

08007f8c <_write_r>:
 8007f8c:	b538      	push	{r3, r4, r5, lr}
 8007f8e:	4604      	mov	r4, r0
 8007f90:	4608      	mov	r0, r1
 8007f92:	4611      	mov	r1, r2
 8007f94:	2200      	movs	r2, #0
 8007f96:	4d05      	ldr	r5, [pc, #20]	; (8007fac <_write_r+0x20>)
 8007f98:	602a      	str	r2, [r5, #0]
 8007f9a:	461a      	mov	r2, r3
 8007f9c:	f7f9 fa4c 	bl	8001438 <_write>
 8007fa0:	1c43      	adds	r3, r0, #1
 8007fa2:	d102      	bne.n	8007faa <_write_r+0x1e>
 8007fa4:	682b      	ldr	r3, [r5, #0]
 8007fa6:	b103      	cbz	r3, 8007faa <_write_r+0x1e>
 8007fa8:	6023      	str	r3, [r4, #0]
 8007faa:	bd38      	pop	{r3, r4, r5, pc}
 8007fac:	2000025c 	.word	0x2000025c

08007fb0 <_close_r>:
 8007fb0:	b538      	push	{r3, r4, r5, lr}
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	4d05      	ldr	r5, [pc, #20]	; (8007fcc <_close_r+0x1c>)
 8007fb6:	4604      	mov	r4, r0
 8007fb8:	4608      	mov	r0, r1
 8007fba:	602b      	str	r3, [r5, #0]
 8007fbc:	f7f9 fa52 	bl	8001464 <_close>
 8007fc0:	1c43      	adds	r3, r0, #1
 8007fc2:	d102      	bne.n	8007fca <_close_r+0x1a>
 8007fc4:	682b      	ldr	r3, [r5, #0]
 8007fc6:	b103      	cbz	r3, 8007fca <_close_r+0x1a>
 8007fc8:	6023      	str	r3, [r4, #0]
 8007fca:	bd38      	pop	{r3, r4, r5, pc}
 8007fcc:	2000025c 	.word	0x2000025c

08007fd0 <_fstat_r>:
 8007fd0:	b538      	push	{r3, r4, r5, lr}
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	4d06      	ldr	r5, [pc, #24]	; (8007ff0 <_fstat_r+0x20>)
 8007fd6:	4604      	mov	r4, r0
 8007fd8:	4608      	mov	r0, r1
 8007fda:	4611      	mov	r1, r2
 8007fdc:	602b      	str	r3, [r5, #0]
 8007fde:	f7f9 fa4c 	bl	800147a <_fstat>
 8007fe2:	1c43      	adds	r3, r0, #1
 8007fe4:	d102      	bne.n	8007fec <_fstat_r+0x1c>
 8007fe6:	682b      	ldr	r3, [r5, #0]
 8007fe8:	b103      	cbz	r3, 8007fec <_fstat_r+0x1c>
 8007fea:	6023      	str	r3, [r4, #0]
 8007fec:	bd38      	pop	{r3, r4, r5, pc}
 8007fee:	bf00      	nop
 8007ff0:	2000025c 	.word	0x2000025c

08007ff4 <_isatty_r>:
 8007ff4:	b538      	push	{r3, r4, r5, lr}
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	4d05      	ldr	r5, [pc, #20]	; (8008010 <_isatty_r+0x1c>)
 8007ffa:	4604      	mov	r4, r0
 8007ffc:	4608      	mov	r0, r1
 8007ffe:	602b      	str	r3, [r5, #0]
 8008000:	f7f9 fa4a 	bl	8001498 <_isatty>
 8008004:	1c43      	adds	r3, r0, #1
 8008006:	d102      	bne.n	800800e <_isatty_r+0x1a>
 8008008:	682b      	ldr	r3, [r5, #0]
 800800a:	b103      	cbz	r3, 800800e <_isatty_r+0x1a>
 800800c:	6023      	str	r3, [r4, #0]
 800800e:	bd38      	pop	{r3, r4, r5, pc}
 8008010:	2000025c 	.word	0x2000025c

08008014 <_lseek_r>:
 8008014:	b538      	push	{r3, r4, r5, lr}
 8008016:	4604      	mov	r4, r0
 8008018:	4608      	mov	r0, r1
 800801a:	4611      	mov	r1, r2
 800801c:	2200      	movs	r2, #0
 800801e:	4d05      	ldr	r5, [pc, #20]	; (8008034 <_lseek_r+0x20>)
 8008020:	602a      	str	r2, [r5, #0]
 8008022:	461a      	mov	r2, r3
 8008024:	f7f9 fa42 	bl	80014ac <_lseek>
 8008028:	1c43      	adds	r3, r0, #1
 800802a:	d102      	bne.n	8008032 <_lseek_r+0x1e>
 800802c:	682b      	ldr	r3, [r5, #0]
 800802e:	b103      	cbz	r3, 8008032 <_lseek_r+0x1e>
 8008030:	6023      	str	r3, [r4, #0]
 8008032:	bd38      	pop	{r3, r4, r5, pc}
 8008034:	2000025c 	.word	0x2000025c

08008038 <_read_r>:
 8008038:	b538      	push	{r3, r4, r5, lr}
 800803a:	4604      	mov	r4, r0
 800803c:	4608      	mov	r0, r1
 800803e:	4611      	mov	r1, r2
 8008040:	2200      	movs	r2, #0
 8008042:	4d05      	ldr	r5, [pc, #20]	; (8008058 <_read_r+0x20>)
 8008044:	602a      	str	r2, [r5, #0]
 8008046:	461a      	mov	r2, r3
 8008048:	f7f9 f9d9 	bl	80013fe <_read>
 800804c:	1c43      	adds	r3, r0, #1
 800804e:	d102      	bne.n	8008056 <_read_r+0x1e>
 8008050:	682b      	ldr	r3, [r5, #0]
 8008052:	b103      	cbz	r3, 8008056 <_read_r+0x1e>
 8008054:	6023      	str	r3, [r4, #0]
 8008056:	bd38      	pop	{r3, r4, r5, pc}
 8008058:	2000025c 	.word	0x2000025c

0800805c <_init>:
 800805c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800805e:	bf00      	nop
 8008060:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008062:	bc08      	pop	{r3}
 8008064:	469e      	mov	lr, r3
 8008066:	4770      	bx	lr

08008068 <_fini>:
 8008068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800806a:	bf00      	nop
 800806c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800806e:	bc08      	pop	{r3}
 8008070:	469e      	mov	lr, r3
 8008072:	4770      	bx	lr
